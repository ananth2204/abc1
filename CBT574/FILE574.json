{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012406000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE574.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE574.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x0e'", "DS1TRBAL": "b'%\\x96'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04J\\x00\\x03\\x04J\\x00\\x07\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\x187\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe2\\xc8\\xc9\\xd7\\xc4\\xc1\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T18:37:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "SHIPDAT"}, "text": "REGULAR CBT TAPE - VERSION 445    FILE:  574\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT445.FILE574\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 9 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,592 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/30/02    18:37:08    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE574": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x005\\x01\\x01\\x02_\\x01\\x02\\x12\\x0f\\x186\\x00\\n\\x00\\x02\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2001-01-25T00:00:00", "modifydate": "2002-04-30T18:36:35", "lines": 10, "newlines": 2, "modlines": 0, "user": "SBGOLOB"}, "text": "//***FILE 574 is from Wolfgang Schaefer, and contains a few items   *   FILE 574\n//*           that may also be useful in the OS/390 arena, but      *   FILE 574\n//*           which are fine add-ons for the MVS 3.8 Hercules       *   FILE 574\n//*           environment.  Please see Wolfgang's web site for      *   FILE 574\n//*           even more items of interest:                          *   FILE 574\n//*                                                                 *   FILE 574\n//*           http://www.schaefernet.de/hercules                    *   FILE 574\n//*                                                                 *   FILE 574\n//*           email:  wolfgang@schaefernet.de                       *   FILE 574\n//*                                                                 *   FILE 574\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "C3270": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x03\\x11\\x03\\x11\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 785, "newlines": 785, "modlines": 0, "user": "SCHAEF1"}, "text": "//C33270I1 JOB (0),'INST CBT300',MSGLEVEL=1,CLASS=A,MSGCLASS=T\n//* --------------------------------------------------------------- *\n//*   INSTALL C3270 (MODIFIED KOMM COMMAND)                         *\n//*   INSTALL MODIFIED VERSION OF KOMM AS C3270                     *\n//*   THIS VERSION IMPLEMENTS SOME MORE SUBSTITUTES THE SF ORDER    *\n//*   IN THE INPUT DATA TO A VERTICAL BAR | X'4F'                   *\n//* --------------------------------------------------------------- *\n//*   LOOK FOR *HERC* FOR MODIFICATIONS                             *\n//* --------------------------------------------------------------- *\n//*   NOTE: CBT300 SOURCE AND OBJECT FILES ARE USED!                *\n//* --------------------------------------------------------------- *\n//SLOAD    EXEC PGM=IEBUPDTE,PARM=NEW\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=(OLD),DSN=CBT300.ASM\n//SYSUT2   DD  DISP=(OLD),DSN=CBT300.ASM\n//SYSIN    DD  DATA\n./ ADD NAME=C3270\n         TITLE 'C3270 - CLIST COMMUNICATION ROUTINE FOR 3270 TERMINALS'\n*          DATA SET CBT934     AT LEVEL 001 AS OF 02/25/79\n*\n*          LOADED FROM CBT TAPE VERSION 140 AT AFDSC/PENTAGON 19DEC80\n         SPACE\n         MACRO\n         REGEQU\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n         MACRO\n&LAB     LEAVER &WR=R13,&WL=WORKLEN\n&LAB     LR    R1,&WR             WORKAREA ADDR FOR FREEMAIN\n         LA    R0,&WL             WORKAREA LEN   \"    \"\n         L     R13,4(R13)         GET CALLERS SAVEAREA ADDR\n         LR    R11,R15            SAVE RETURN CODE\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R11            RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)\n         MEND\n         MACRO\n&LAB     LEAVENR\n&LAB     L     R13,4(R13)         GET CALLERS SAVEAREA ADDR\n         RETURN (14,12),RC=(15)\n         MEND\n         MACRO\n&LAB     KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA\n*                  DEFAULT OPERANDS :\n*        KKPARSE &CPPL=R11,&ANS=ANS,&ECB=ECB,&PCL=PCL,&PPLA=PPLA\n*                            CPPL IS THE REGISTER CONTAINING THE\n*                                 POINTER TO THE COMMAND PROCESSOR\n*                                 PARAMETER LIST.\n*                            ANS  IS A FULLWORD WHERE PARSE RETURNS\n*                                 THE POINTER TO HIS ANSWER (IKJPARMD).\n*                            ECB  IS A FULLWORD.\n*                            PCL  IS THE NAME OF THE PARSE CONTROL\n*                                 LIST CSECT (IKJPARM).\n*                            PPLA IS A 7 FULLWORD AREA USED FOR\n*                                 THE PARSE PARAMETER LIST.\n*\n*        KKPARSE             USES REGS R14,R15,R1,&CPPL REG\n*\n         USING CPPL,&CPPL         POINTS TO CPPL (PARM LIST)\n*\n&LAB     LA    R1,&PPLA           R1->PPL AREA\n         USING PPL,R1             TELL ASSEMBLER POINTS TO PPL AREA\n*\n*                         CONSTRUCT PARSE PARAMETER LIST\n*                                           FOR IKJPARS :\n*\n         MVC   PPLUPT,CPPLUPT     UPT\n         MVC   PPLECT,CPPLECT     ECT\n         LA    R15,&ECB           ECB\n         ST    R15,PPLECB\n         L     R15,=V(&PCL.)      PCL\n         ST    R15,PPLPCL\n         LA    R15,&ANS           ANS\n         ST    R15,PPLANS\n         MVC   PPLCBUF,CPPLCBUF   CBUF\n         XC    PPLUWA,PPLUWA\n*\n         DROP  R1\n         EJECT\n*        CALLTSSR EP=IKJPARS      CALL PARSE:\n         CALLTSSR EP=IKJPARS      CALL PARSE:\n         EJECT\n*\n*                        DSECTS NEEDED BY PARSE:\n*\n*CPPL    IKJCPPL\nCPPL     IKJCPPL\n*PPL     IKJPPL\nPPL      IKJPPL\n*\nCVTMAP   DSECT\n         ORG   CVTMAP+524\nCVTPARS  DS    F\nCVTPTR   EQU   16\n*\n*\n&SYSECT  CSECT\n         MEND\n         MACRO\n&LAB1    ENTERR &SA=SAVEAREA,&WA=WORKAREA,&WL=WORKLEN\n&LAB1    START\n         SAVE  (14,12),,*         HO-HUM\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING\n         USING &LAB1,R12\n         LR    R10,R1             SAVE PARM PTR R10->PARM PTR\n         LA    R0,&WL             R0=GET LENGTH\n         GETMAIN R,LV=(0)         R1->WORKAREA\n         LR    R11,R13            R11->CALLERS SAVEAREA\n         LR    R13,R1             R13->WORKAREA\n         USING &WA.,R13\n         ST    R11,&SA.+4         SAVE HIS SAVEAREA PTR\n         LA    R13,&SA            R13->SAVEAREA (MINE)\n         ST    R13,8(,R11)        MINE IN HIS\n         LR    R11,R1             R11->WORKAREA IN CASE NOT SAME AS R13\n*                       WORKAREA ADDR IS STILL R13 FOR\n*                       THE ASSEMBLER - IF DIFFERENT FROM R13\n*                       THEN USE: DROP R13 AND USING &WA.,R11\n         LR    R1,R10             RESTORE PARM PTR PTR\n         REGEQU\n         MEND\n         MACRO\n&LAB1    ENTERNR &SA=SAVEAREA\n&LAB1    START\n         SAVE  (14,12),,*         HO-HUM\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING\n         USING &LAB1,R12\n         ST    R13,&SA.+4         SAVE HIS SAVEAREA PTR\n         LR    R11,R13            SAVE THE SAVE POINTER\n         LA    R13,&SA            R13->SAVEAREA (MINE)\n         ST    R13,8(,R11)        MINE IN HIS\n         B     ENTEX\n&SA      DS    18F\n         REGEQU\nENTEX    DS    0H\n         MEND\n         MACRO\n&LAB1    COMMENT &A,&B,&C,&D,&E,&F,&G,&H,&I,&J,&K\n         MEND\n         EJECT\n*\n* TSO COMMAND C3270 - CLIST COMMUNICATION ROUTINE FOR 3270 TERMINALS\n*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).\n*  MOD: WOLFGANG SCHAEFER (1.3)                                  *HERC*\n*          (206) 753-2215   *****  C3270 VERSION 1.3   *****     *HERC*\n*                                                                *HERC*\n*  MOD 1.4: CHANGE FIELD INPUT CHARACTERS IN INPUT TO | (X'4F')  *HERC*\n*           To MAKE PARSING IN A CLIST EASIER ...                *HERC*\n*           CHANGE TABLE1 TO HEX DEFINITION TO AVOID TRANSLATION *HERC*\n*           PROBLEMS WITH NON EBCDIC PLATFORMS                   *HERC*\n*                                                                *HERC*\n*  SYNTAX -   C3270  WCC('CHAR') RESET('LINE') CLEAR\n*                   MESSAGE('ROW','COL','MESS') CURSOR('ROW','COL')\n*                   READTO('VAR')  AI\n*\n*  OPERANDS -\n*             WCC('CHAR') -  'CHAR' IS THE WRITE CONTROL CHARACTER TO\n*                          BE USED. 'C' IS THE DEFAULT.\n*\n*             RESET('LINE') - 'LINE' IS THE LINE YOU WISH TCAM'S LINE\n*                          COUNTER TO BE SET TO. NORMAL OUTPUT BEGINS\n*                          AT THIS LINE. 'LINE' DEFAULTS TO '1'.\n*\n*             CLEAR  -     CAUSES THE SCREEN TO BE CLEARED.\n*\n*             MESSAGE('ROW','COL','MESS') - DISPLAYS A MESSAGE ON THE\n*                          SCREEN. 'ROW' AND 'COL' ARE THE ROW AND\n*                          COLUMN WHERE THE MESSAGE STARTS. 'MESS' IS\n*                          THE MESSAGE (SEE NOTE).\n*\n*             CURSOR('ROW','COL') - MOVES THE CURSOR TO LOCATION GIVEN.\n*\n*             READTO('VAR') - OBTAINS REPLY AND PLACES IN CLIST VAR-\n*                          IABLE 'VAR'. 'VAR' MUST BE PRE-INITIALIZED\n*                          TO HAVE SUFFICIENT ROOM FOR THE REPLY.\n*\n*             AI  -  SUPPRESSES THE REMOVAL OF LEADING SBA FROM REPLY\n         EJECT\n*\n* RETURN-CODES : C3270 RETURNS CODES IN CLIST VAR LASTCC AS FOLLOWS:\n*\n*  WRITE OPERATION ONLY -\n*                       0 - NORMAL COMPLETION\n*                     256 - PARSE ERROR\n*                   OTHER - I/O ERROR OCCURED\n*\n*  WRITE AND READ OPERATION - THE RETURN CODE NORMALLY INDICATES WHICH\n*                                TRANSMIT KEY WAS PRESSED:\n*\n*         241 - PF1                1 - TEST REQ\n*         242 - PF2              110 - PA2\n*         243 - PF3              125 - ENTER\n*         244 - PF4             2048 - PA1 (C3270 INTERRUPTED\n*         245 - PF5                              THEN RESUMED)\n*         246 - PF6\n*         247 - PF7              122 - PF10\n*         248 - PF8              128 - PF11\n*         249 - PF9              124 - PF12\n*\n*      IF NONE OF THE ABOVE:\n*                     256 - PARSE ERROR\n*                     260 - CLIST VARIABLE-NAME NOT FOUND\n*                   OTHER - I/O ERROR OCCURED\n         EJECT\n*\n* MESSAGE-NOTE:\n*                 IN ORDER TO GIVE THE USER MORE CONTROL OVER THE\n*              SCREEN FORMAT, C3270 SCANS THE MESSAGE AND DOES THIS:\n*\n*                 UPON ENCOUNTERING A \u00f3 (CENT SIGN), C3270 REMOVES\n*              THE \u00f3 (CENT SIGN) FROM THE MESSAGE AND TRANSLATES\n*              THE FOLLOWING CHARACTER TO A 3270 CONTROL CHARACTER\n*              OR A TSO PROBLEM CHARACTER, USING THE TABLE BELOW:\n*\n*         3270 CONTROL:                  TSO PROBLEM CHARS:\n*   CHAR   TRANSLATION   HEX          CHAR   TRANSLATION   HEX\n*    _         IC       X'13'          <         (        X'4D'\n*    -         SBA      X'11'          >         )        X'5D'\n*    |         SF       X'1D'          \"         '        X'7D'\n*    *         NULL     X'00'          /         ^        X'5F'\n*    #         RA       X'3C'          \u00f3         \u00f3        X'4A'\n*    @         EUA      X'12'          A    (BROKEN BAR)  X'6A'\n*    .         PT       X'05'          B         ,        X'6B'\n*\n*           OTHERS SHOULD NOT BE CONSIDERED AS DEFINED AT THIS TIME,\n*       BUT ARE GENERALLY TRANSLATED TO THEMSELVES. THE PROBLEM CHARS\n*       ARE TRANSLATED BECAUSE ALL 3270 CHARS ARE USED IN ADDRESS\n*       SPECIFICATION ETC. BUT SOME HAVE SPECIAL SIGNIFICANCE TO TSO.\n*\n* EXAMPLE:\n*           C3270 CLEAR MESS(10,40,'\u00f3#  Z')\n*       WOULD CLEAR THE SCREEN AND FILL FROM LINE 10, COLUMN 40 TO\n*       THE BOTTOM OF THE SCREEN WITH THE LETTER 'Z'.\n*\n*\n*\n         TITLE 'SPECIAL FULLSCREEN COMM RTN'\n*\n*********************************************************************\n*    THIS PROGRAM IS DEPENDENT ON TCAM BEING ASSEMBLED WITH THE     *\n*    'SPFSCRN' MACROS OR EQUIVALENT.                                *\n*********************************************************************\n*\n*        STANDARD CP LINKAGE\n*\nC3270    ENTERR                   R13 -> WORKAREA\n*                                 R12 -> C3270 ADDRESSABILITY\n         EJECT\n*\n*        PARSE THE INPUT COMMAND BUFFER\n*\n         LR    R11,R1             SAVE THE PARM POINTER\n*                                 R11 -> CPPL\nDOPARSE  KKPARSE\n*\n*\nANALR    LTR   R15,R15            RC = 0? PARSE WENT OK?\n         BNZ   PARSERR            NO. -> GO TO PARSE ERR\n         L     R10,ANS            R10 -> IKJPARMD\n         USING IKJPARMD,R10\n         EJECT\n*\n*              SETUP  -  PROCESS  OPERANDS\n*\n*                                 R9 == BAL REGISTER\n*                                 R8 -> CURRENT POSITION IN OUT BUFFER\n         LA    R8,BUFFO\n*\nMAINLINE BAL   R9,WCCP            GET WRITE CNTL CHAR\n         TM    RESET+1,X'FF'      RESET ENTERED?\n         BZ    CCK                NO\n         BAL   R9,RESETP          PUT RESET IN OUT BUFFR\nCCK      TM    CLEAR+1,X'FF'      CLEAR ENTERED?\n         BZ    MCK\n         BAL   R9,CLEARP          PUT CLR IN BUFFR\nMCK      TM    MESS+1,X'FF'       MESSAGE ENTERED?\n         BZ    ICK\n         BAL   R9,MESSP           PUT MSG IN BUFFR\nICK      TM    IC+1,X'FF'         INSERT CURSOR NTRD?\n         BZ    RCK\n         BAL   R9,ICP             PUT IN BUFFR\nRCK      TM    READTO+1,X'FF'     READTO ENTERED?\n         BZ    FIXLEN\n         BAL   R9,READTOP         GET ADDR FOR READTO\nFIXLEN   BAL   R9,SETLEN          INITIALIZE BUFFER LENGTHS\n*\n         LTR   R15,R15            RC=0 SO FAR?\n         BNZ   GETOUT             NO ->EXIT\n         EJECT\n*\n*        PERFORM THE I/O OPERATION NOW\n*\nFULLCHK  TM    FLAGS,X'FF'        INPUT AND OUTPUT?\n         BO    BOTH               YES\n         BZ    WHAT THE HECK?\n         TM    FLAGS,X'F0'        OUTPUT ONLY?\n         BO    RITEONLY           YES\nREADONLY CALL  FULLSCRN,(=C'I',BUFFLI,BUFFI),VL,MF=(E,PARML)\n         B     RCANAL\nRITEONLY CALL  FULLSCRN,(=C'O',BUFFLO,BUFFO),VL,MF=(E,PARML)\n         B     GETOUT\nBOTH     CALL  FULLSCRN,(=C'B',BUFFLO,BUFFO,BUFFLI,BUFFI),VL,          X\n               MF=(E,PARML)\n         B     RCANAL\n*\nWHAT     EQU   *                  WHAT THE HECK ARE WE DOING HERE?\n*\n         LA    R15,99             SET RC=99 TO CAUSE EXIT\n         EJECT\n*\n*         ANALYZE ANY INPUT OBTAINED BY FULLSCRN\n*\nRCANAL   BAL   R9,ERRCK           CHECK ERRORS\n         LTR   R15,R15            CORRECTED?\n         BNZ   GETOUT             NO.\n*\n         BAL   R9,SETRC           SET RC BY AID BYTE\n         BAL   R9,SETVAR          MOVE ANY INPUT DATA TO CLIST VAR\n*\nGETOUT   LEAVER                   EXIT REENTRANT ROUTINE\n         EJECT\n*\n*       C3270 SUBROUTINES HERE\n*\nPARSERR  EQU   *\n         LA    R15,256\n         B     GETOUT\n*\nWCCP     EQU   *                  SETUP OUTPUT BUFFER\n         MVI   0(R8),C'C'         WCC DEFAULT - RESET ONLY\n         TM    CC+6,X'80'         WCC SPECIFIED?\n         BNO   WPP                NO\n         L     R7,CC              GET IT'S ADDRESS\n         MVC   0(1,R8),0(R7)      MOVE IT\n         OI    FLAGS,X'F0'        SET WRITE FLAG\nWPP      LA    R8,1(,R8)          POINT PAST\n         BR    R9\n*\nCLEARP   EQU   *                  SETUP OUTPUT BUFFER\n         MVC   0(7,R8),=X'1140403C404000'  RA TO FILL SCRN W/NULLS\n         OI    FLAGS,X'F0'        SET WRITE FLAG\n         LA    R8,7(,R8)          POINT PAST\n         BR    R9\n*\nRESETP   EQU   *\n         ST    R9,L1LS\n         MVC   0(4,R8),=X'115D7E11' INDICATE RESET LINE COUNT\n         L     R7,LINE            R7 -> BINARY ROW NUMBER\n         L     R7,0(R7)           R7 =   \"      \"    \"\n         LA    R5,1               R5 = 1\n         BAL   R9,CNVTADDR        GET 3270 BUFF TYPE ADDR\n         MVC   4(2,R8),BUFFI      MOVE THE ADDR\n         LA    R8,6(,R8)          POINT PAST\n         OI    FLAGS,X'F0'        SET WRITE FLAG\n         L     R9,L1LS\n         BR    R9                 RETURN\n         EJECT\nMESSP    EQU   *\n         ST    R9,L1LS\n         MVI   0(R8),X'11'        SBA\n         L     R7,MROW            R7 -> BINARY ROW NUMBER\n         L     R7,0(R7)           R7 =   \"      \"    \"\n         L     R5,MCOL            R5 -> BINARY COL NUMBER\n         L     R5,0(R5)           R5 =   \"      \"    \"\n         BAL   R9,CNVTADDR        GET 3270 BUFF TYPE ADDR\n         MVC   1(2,R8),BUFFI      MOVE THE ADDR\n         L     R7,MTEXT           GET TEXT ADDR R7-> TEXT\n         LH    R6,MTEXT+4         GET TEXT LENGTH  R6= LEN\n         BCTR  R6,R0              THEN EXECUTE     R6=R6-1\nMOVE     MVC   3(0,R8),0(R7)      MOVE INSTRUCTION (EXECUTED)\n         EX    R6,MOVE            MOVE TEXT\n*\n         LR    R5,R6              R5=LENGTH-1\n         LA    R7,3(,R8)          R7->TRANS START\nTRLOOP   EX    R5,TRANT           SCAN FOR \u00f3 (CENT SIGN)\n         BZ    TRDONE             NONE FOUND\n         TR    1(1,R1),TABLE2     TRANSLATE FOLLOWING CHAR\n         BCTR  R6,R0              R6=R6-1 UPDATE STRING LENGTH\n         LA    R7,1(,R1)          R7->NEW TRANS START\n         LA    R5,4(R8,R6)        R5->NEW LAST CHAR\n         SR    R5,R7              R5= NEW LENGTH\n         BNP   TREX               NOT ENOUGH TO TRANSLATE\n         EX    R5,TRMVC           SHIFT STRING ONE TO LEFT\n         BCTR  R5,R0              R5=R5-1 UPDATE SCAN LENGTH\n         B     TRLOOP             CHECK FOR MORE\nTRANT    TRT   0(0,R7),TABLE3     EXECUTED TRANSLATE\nTRMVC    MVC   0(0,R1),1(R1)      EXECUTED LEFT SHIFT\nTREX     EX    R5,TRMVC           DO LEFT SHIFT\nTRDONE   LA    R8,4(R6,R8)        POINT PAST\n         OI    FLAGS,X'F0'        SET WRITE FLAG\n         L     R9,L1LS\n         BR    R9                 RETURN\n         EJECT\nICP      EQU   *\n         ST    R9,L1LS\n         L     R7,ICROW           R7 -> BINARY ROW NUMBER\n         L     R7,0(R7)           R7 =   \"      \"    \"\n         L     R5,ICCOL           R5 -> BINARY COL NUMBER\n         L     R5,0(R5)           R5 =   \"      \"    \"\n         BAL   R9,CNVTADDR        GET 3270 BUFF TYPE ADDR\n         MVI   0(R8),X'11'        SBA\n         MVC   1(2,R8),BUFFI      MOVE THE ADDR\n         MVI   3(R8),X'13'        SAY IC\n         LA    R8,4(,R8)          POINT PAST\n         OI    FLAGS,X'F0'        SET WRITE FLAG\n         L     R9,L1LS\n         BR    R9                 RETURN\n*\nSETLEN   EQU   *\n         LA    R7,BUFFO           R7 -> BUFFO (R8->END OF BUFFO)\n         SR    R8,R7              R8=BUFFER LENGTH OUT\n         STH   R8,BUFFLO          SAVE IT IN BUFFLO\n         MVC   BUFFLI(2),=H'256'  ALSO SET BUFFLI\n         BR    R9                 RETURN\n*\n         EJECT\nREADTOP  EQU   *\n         L     R5,CPPLECT         R5->ECT\n         L     R5,4(,R5)          R5->IOSRL\n         L     R4,0(,R5)          R4->TOP OF STACK\nCKCLIST  TM    0(R4),X'08'        CLIST ELEMENT?\n         BO    GOTCL              YES->WE HAVE A CLIST\n         S     R4,=F'4'           R4=R4-4 (NEXT ELEMENT DOWN ON STACK)\n         C     R4,4(,R5)          R4<BOTTOM OF STACK PTR?\n         BNL   CKCLIST            NO ->STILL IN STACK; GO CHECK IT\n         LA    R15,260            YES->R15=260=RC\n         BR    R9                 EXIT READTOP WITH ERROR\nGOTCL    L     R7,RDD             R7->VARIABLE NAME\n         LH    R6,RDD+4           R6=VAR LENGTH FOR LENGTH COMPARE\n         L     R5,0(,R4)          R5->LSD\n         L     R5,12(,R5)         R5->EXECDATA\n         L     R5,0(,R5)          R5->SNTAB\n         L     R4,8(,R5)          R4==USED TABLE LENGTH\n         LA    R4,0(R4,R5)        R4->END OF TABLE USED\n         LA    R3,12(,R5)         R3->FIRST SNTAB ENTRY\n         LR    R1,R6              R1=R6  VARIABLE NAME LENGTH\n         BCTR  R1,R0              R1=R1-1 FOR EXECUTED COMPARE\n*\nRLOOP    LH    R2,6(,R3)          R2=NAME LENTH\n         CR    R6,R2              SAME LENGTH?\n         BNE   LOOPCHK            NO -> CHECK DONE\nCOMPARE  CLC   0(0,R7),8(R3)      EXECUTED\n         EX    R1,COMPARE         COMPARE NAMES\n         BE    GOTIT\nLOOPCHK  LA    R3,8(R2,R3)        POINT TO NEXT ENTRY\n         CR    R3,R4              DONE?\n         BL    RLOOP              NO->CONTINUE\nRERR     LA    R15,260       R15= RC=260\n         BR    R9                 EXIT READTOP WITH ERROR\nGOTIT    EQU   *\n         L     R1,0(,R3)          GET VALUE ADDR\n         ST    R1,VALADDR         SAVE IT\n         OI    FLAGS,X'0F'        SET READ FLAG\n         BR    R9                 RETURN\n         EJECT\nERRCK    EQU   *\n         BR    R9\n*\nSETRC    EQU   *\n         IC    R15,BUFFI          PICK UP AID BYTE IN R15\n         BR    R9                 RETURN\n*\nSETVAR   EQU   *\n         L     R7,VALADDR         R7->VALUE TABLE ENTRY\n         LH    R8,BUFFLI          GET INPUT LENGTH\n         CH    R8,=H'3'           LEN > 3 ?\n         BNH   SETNULL            NO -> SET VARIABLE TO NULL\n         SH    R8,=H'3'           R8=R8-3  SKIP AID,CURSOR ADDR\n         LA    R6,BUFFI+3         PT PAST  \"\n         CLI   AI+1,X'00'         AI ENTERED?\n         BNE   ROOMCHK            YES -> LEAVE SBA IN\n         CLI   0(R6),X'11'        SBA START MESSAGE?\n         BNE   ROOMCHK            NO -> ASSUME ITS DATA\n         LA    R6,3(,R6)          R6=R6+3  SKIP SBA,ADDR\n         SH    R8,=H'3'           AND FIX LENGTH\n         BNP   SETNULL            IN CASE?\nROOMCHK  CH    R8,2(,R7)          ROOM FOR INPUT?\n         BNH   SM                 YES->MOVE IT.\n         LH    R8,2(,R7)          NO ->GET HIS LENGTH\nSM       STH   R8,0(,R7)          STORE CORRECT LENGTH\n         BCTR  R8,R0              R8=R8-1\n         EX    R8,EXTRAN          TRANSLATE INPUT (SF)           *HERC*\n         EX    R8,SMOVE           MOVE IT\n         BR    R9\nSMOVE    MVC   4(0,R7),0(R6)      EXECUTED\nEXTRAN   TR    0(0,R6),TRINPUT    EXECUTED                       *HERC*\nSETNULL  SLR   R8,R8              R8=0\n         STH   R8,0(,R7)          STORE ZERO LENGTH\n         BR    R9                 RETURN\n         EJECT\n*\nCNVTADDR EQU   *                  CHANGE FROM BINARY ADDRESS\n*                                 MODULO 80 TO 3270 ADDRESS\n*                                 MODULO 64  -  INPUT:\n*                                 R7 = ROW , R5 = COL\n         BCTR  R7,R0              R7=R7-1\n         BCTR  R5,R0              R5=R5-1\n         MH    R7,=H'80'          R7=R7*80\n         AR    R7,R5              R7=R7+R5\n         SLR   R6,R6              R6=0\n         D     R6,=F'64'          (R6,R7)/64 R6=REMAINDER,R7=QUOTIENT\n         N     R7,=X'0000003F'    JUST IN CASE\n         STC   R7,BUFFI           PUT ROW IN WORKAREA\n         STC   R6,BUFFI+1         PUT COL IN WORKAREA\n         TR    BUFFI(2),TABLE1    CHANGE TO 3270 ADDRESS\n         BR    R9\n*\n         EJECT\n*\n*        STATIC WORKAREA\n*\nTABLE1   DC    X'40C1C2C3C4C5C6C7C8C94A4B4C4D4E4F'              *HERC*\n         DC    X'50D1D2D3D4D5D6D7D8D95A5B5C5D5E5F'              *HERC*\n         DC    X'6061E2E3E4E5E6E7E8E9406B6C6D6E6F'              *HERC*\n         DC    X'F0F1F2F3F4F5F6F7F8F97A7B7C7D7E7F'              *HERC*\n         ORG   TABLE1+X'2A'\n         DC    X'6A'\n         ORG\n*\n*  TRANSLATE CHARS PRECEEDED BY A CENT SIGN (\u00f3)\n*\n*            3270                      TSO\n*        \u00f3_ -> IC  (13)            \u00f3< -> (  (4D)\n*        \u00f3- -> SBA (11)            \u00f3> -> )  (5D)\n*        \u00f3| -> SF  (1D)            \u00f3\" -> '  (7D)\n*        \u00f3* -> NULL(00)            \u00f3/ -> ^  (5F)\n*        \u00f3# -> RA  (3C)            \u00f3\u00f3 -> \u00f3  (4A)   CENT SIGN\n*        \u00f3@ -> EUA (12)            \u00f3A ->    (6A)   BROKEN VERT BAR\n*        \u00f3. -> PT  (05)            \u00f3B -> ,  (6B)\n*\nTABLE2   DC    X'000102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A054D4D4E1D'   05 4D 1D\n         DC    X'505152535455565758595A5B005D5E5F'   00\n         DC    X'115F62636465666768696A6B6C135D6F'   11 5F 13 5D\n         DC    X'707172737475767778797A3C127D7E7D'   3C 12 7D\n         DC    X'808182838485868788898A8B8C8D8E8F'\n         DC    X'909192939495969798999A9B9C9D9E9F'\n         DC    X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C06A6BC3C4C5C6C7C8C9CACBCCCDCECF'   6A 6B\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n*\nTABLE3   DC    XL256'00'\n         ORG   TABLE3+74\n         DC    X'04'\n         ORG\n*\nTRINPUT  DC    256AL1(*-TRINPUT)                                *HERC*\n         ORG   TRINPUT+X'11'                                    *HERC*\n         DC    X'4F'                                            *HERC*\n         ORG    ,                                               *HERC*\n*                                                               *HERC*\nPTCHAREA DC    XL128'00'\n*\n         LTORG\n         EJECT\n*\n*   WORKING STORAGE AREA - DYNAMIC\n*\nWORKAREA DSECT\nSAVEAREA DS    18F\nPARML    CALL  ,(IOPARM,BUFFLO,BUFFO,BUFFLI,BUFFI),MF=L\n*\nIOPARM   DS    X\nBUFFLO   DS    H\nBUFFLI   DS    H\n         DS    0F\nBUFFO    DS    CL256\nBUFFI    DS    CL256\n*\nFLAGS    DC    F'0'\nL1LS     DC    F'0'\nVALADDR  DC    F'0'\nANS      DC    F'0'\nECB      DC    F'0'\nPPLA     DS    7F\nWORKLEN  EQU   *-WORKAREA\nC3270    CSECT\n         EJECT\n*\nPCL      IKJPARM\nCLEAR    IKJKEYWD\n         IKJNAME   'CLEAR',ALIAS=('CL','C')\nWCC      IKJKEYWD\n         IKJNAME   'WCC',SUBFLD=CCFLD,ALIAS=('W','CC')\nRESET    IKJKEYWD\n         IKJNAME   'RESET',SUBFLD=LINEFLD,ALIAS=('RES','R')\nMESS     IKJKEYWD\n         IKJNAME   'MESSAGE',SUBFLD=MFLD,ALIAS=('MESS','MSG','M')\nIC       IKJKEYWD\n         IKJNAME   'IC',SUBFLD=ICFLD,ALIAS=('CURSOR','CUR','I')\nREADTO   IKJKEYWD\n         IKJNAME   'READTO',SUBFLD=RDFLD,ALIAS=('READ','RT')\nAI       IKJKEYWD\n         IKJNAME   'AI',ALIAS=('ASIS')\n*  SUBFIELD DESCRIPTIONS FOLLOW\nCCFLD    IKJSUBF\nCC       IKJIDENT 'WCC',MAXLNTH=2,PROMPT='WCC',CHAR\n*\nLINEFLD  IKJSUBF\nLINE     IKJIDENT 'RESET LINE NO',DEFAULT='1',INTEG\n*\nMFLD     IKJSUBF\nMROW     IKJIDENT 'MSG ROW',MAXLNTH=2,PROMPT='MSG ROW',INTEG\nMCOL     IKJIDENT 'MSG COL',MAXLNTH=2,PROMPT='MSG COL',INTEG\nMTEXT    IKJIDENT 'MSG TEXT',PROMPT='MSG TEXT',CHAR\n*\nICFLD    IKJSUBF\nICROW    IKJIDENT 'IC ROW',MAXLNTH=2,PROMPT='IC ROW',INTEG\nICCOL    IKJIDENT 'IC COL',MAXLNTH=2,PROMPT='IC COL',INTEG\n*\nRDFLD    IKJSUBF\nRDD      IKJIDENT 'INPUT VARIABLE',PROMPT='INPUT VARIABLE',CHAR\n         IKJENDP\n         TITLE 'FULLSCRN - 3270 I/O SUBROUTINE'\n*          DATA SET 761KKFSCRN AT LEVEL 002 AS OF 06/07/78\n*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).\n*          (206) 753-2215\nFULLSCRN CSECT\nFULLSC   DS    0H\n         ENTRY FULLSC\n         SAVE  (14,12),,*         HO-HUM\n         LR    R12,R15            HOPE HE KNOWS WHAT HE'S DOING\n         USING FULLSCRN,R12\n*\n*   GET THE INPUT PARAMETERS:\n*           CALL 'FULLSCRN' USING IOPARM OUTLEN OUTBUFF /RETLEN/\n*                                        INLEN  INBUFF  /RETLEN/ .\n*\n*  OUTBUFF:  ESC/COM/WCC/SBA/ADDR/SF/ATTR/TEXT/IC\n*  INBUFF :  AID/CURSOR-ADDR/SBA/ADDR/TEXT/..SBA/ADDR/TEXT....\n*\nGETPARMS LR    R11,R1             SAVE THE PARM POINTER\n         L     R10,0(R11)         R10 -> IOFLAG\n         L     R8,4(R11)          R8  -> OUT BUFFLEN\n         LH    R8,0(R8)           R8  =  OUT BUFFLEN\n         L     R7,8(R11)          R7  -> OUT BUFFADDR\n         N     R7,=X'00FFFFFF'    FIX ADDR (REMOVE VL FLAG)\n         SLR   R4,R4              R4=0\n         TM    8(R11),X'80'       MORE?\n         BO    SAMEIN             NO.\n*\nLENCH    TM    12(R11),X'80'      ONE MORE PARM?\n         BNO   MOREIN             NO-> MAYBE TWO\n         L     R4,12(R11)         R4->RETURN LENGTH BUFFER\n         B     SAMEIN             GO ON\nMOREIN   TM    16(R11),X'80'      TWO MORE PARMS?\n         BO    DIFFIN             YES->INPUT PARMS ONLY\n         L     R4,20(,R11)        NO-> R4 -> RET LEN BUFFER\n*\nDIFFIN   L     R9,12(R11)         R9  -> IN BUFFLEN\n         LH    R6,0(R9)           R6  =  BUFFLEN\n         L     R5,16(R11)         R5  -> IN BUFFADDR\n         B     RETCH\nSAMEIN   L     R9,4(R11)          R9  -> IN BUFFLEN\n         LH    R6,0(R9)           R6  =  BUFFLEN\n         LR    R5,R7              R5  -> IN BUFFADDR\n*\nRETCH    LTR   R4,R4              R4=0 STILL?\n         BNZ   WRITECHK           NO->LEAVE IT THEN\n         LR    R4,R9              R4->RET LEN BUFF (COMPATIBLE W/OLD)\n         EJECT\n*\n*   CHECK FOR A WRITE\n*\nWRITECHK SLR   R3,R3              R3=0\n         CLI   0(R10),C'O'        OUTPUT?\n         BE    BUFFRITE           YES.\n         CLI   0(R10),C'B'        BOTH INPUT AND OUT?\n         BNE   READCHK            NO.\nBUFFRITE TPUT  (R7),(R8),FULLSCR       FULLSCREEN TPUT\n         LR    R3,R15             R3  =  RET CODE\n         SLR   R15,R15            R15 CLEARED\n*\n*   CHECK FOR A READ\n*\nREADCHK  CLI   0(R10),C'I'        INPUT?\n         BE    BUFFREAD           YES.\n         CLI   0(R10),C'B'        BOTH INPUT AND OUT?\n         BNE   FINISH             NO.\nBUFFREAD TGET  (R5),(R6),ASIS     GET WHAT WE CAN\n         STH   R1,0(R4)           GIVE HIM THE LENGTH\n*\n*   RETURN\n*\nFINISH   SLL   R15,8(0) SAVE TGET RETURN CODE\n         OR    R15,R3    GET TPUT RETURN CODE\nEXIT     RETURN (14,12),RC=(15)   QUIT\n         EJECT\n         LTORG\n         END\n          TITLE  'TERMTYPE - PROGRAM TO INDICATE TERMINAL TYPE'\n*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).\n*          (206) 753-2215\n*\n* THIS PROGRAM RETURNS A CODE WHICH DEPENDS ON THE TSO USERS TERMINAL:\n*      0 - TERMINAL IS A TTY TYPE\n*     24 - TERMINAL IS A 3270 TYPE\n*  IT CAN BE CALLED FROM A CLIST TO DECIDE WHEN TO USE THE C3270 CMD.\n*  THE RETURN CODE IS THEN PLACED IN CLIST VARIABLE &LASTCC.\n*\n*          DATA SET 761KKTTYPE AT LEVEL 001 AS OF 01/08/79\nTERMTYPE ENTERR\n         GTSIZE\n         LR    R15,R0             R15=SCREEN SIZE=0 IF TTY\n         LEAVER\n*\n*   WORKING STORAGE AREA - DYNAMIC\n*\nWORKAREA DSECT\nSAVEAREA DS    18F\nWORKLEN  EQU   *-WORKAREA\n         END\n*          DATA SET CBT939     AT LEVEL 003 AS OF 03/20/79\n          TITLE  'TERMTYPE - PROGRAM TO INDICATE TERMINAL TYPE'\n*  AUTHOR: KERMIT KISER - WASHINGTON STATE DP SERVICE CENTER (WDPSC).\n*          (206) 753-2215\n*\n* THIS PROGRAM RETURNS A CODE WHICH DEPENDS ON THE TSO USERS TERMINAL:\n*      0 - TERMINAL IS A TTY TYPE\n*     24 - TERMINAL IS A 3270 TYPE\n*  IT CAN BE CALLED FROM A CLIST TO DECIDE WHEN TO USE THE C3270 CMD.\n*  THE RETURN CODE IS THEN PLACED IN CLIST VARIABLE &LASTCC.\n*\n*          DATA SET 761KKTTYPE AT LEVEL 001 AS OF 01/08/79\nTERMTYPE CSECT\n         STM   R14,R12,12(R13)\n         BALR  R12,R0\n         USING *,R12\n         LA    R15,SAVEREGS\n         ST    R13,4(R15)\n         ST    R15,8(R13)\n         LR    R13,R15\n         GTSIZE\n         LR    R15,R0             R15=SCREEN SIZE=0 IF TTY\n         L     R13,4(R13)\n         L     R14,12(R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nSAVEREGS DS    18F\n*\n*   WORKING STORAGE AREA - DYNAMIC\n*\nWORKAREA DSECT\nSAVEAREA DS    18F\nWORKLEN  EQU   *-WORKAREA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n./ ENDUP\n/*\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "C3270ASM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "SCHAEF1"}, "text": "//C33270I2  JOB (0),'INST CBT300',MSGLEVEL=1,CLASS=A,MSGCLASS=T\n//* --------------------------------------------------------------- *\n//*   INSTALL C3270                                                 *\n//*   ASSEMBLE SOURCE C3270                                         *\n//* --------------------------------------------------------------- *\n//ASM      PROC M=MISSING,O=MISSING,\n//             P='DECK,NOLOAD,TERM,XREF(SHORT),ALIGN'\n//ASM      EXEC PGM=IFOX00,REGION=2048K,\n//             PARM=('&P')\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.MACLIB\n//SYSUT1   DD  SPACE=(CYL,(25,5)),UNIT=3330\n//SYSUT2   DD  SPACE=(CYL,(25,5)),UNIT=3330\n//SYSUT3   DD  SPACE=(CYL,(25,5)),UNIT=3330\n//SYSTERM  DD  SYSOUT=*\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DISP=SHR,DSN=CBT300.ASM(&M)\n//SYSPUNCH DD  DISP=SHR,DSN=CBT300.OBJ(&O)\n//         PEND\n//SDUMMY   EXEC PGM=IEFBR14\n//SC3270   EXEC ASM,M=C3270,O=C3270,COND=(0,NE)\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "C3270DOC": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x02#\\x02#\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 547, "newlines": 547, "modlines": 0, "user": "SCHAEF1"}, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "C3270LNK": {"ttr": 1030, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x00\\x16\\x00\\x16\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "SCHAEF1"}, "text": "//C33270I3  JOB (0),'INST CBT300',MSGLEVEL=1,CLASS=A,MSGCLASS=T\n//* --------------------------------------------------------------- *\n//*   INSTALL C3270 - MODIFICATION                                  *\n//*   LINK C3270 TO SYS2.LINKLIB                                    *\n//* --------------------------------------------------------------- *\n//*   NOTE: IF YOU WISH A BETTER PERFORMANCE FOR CLISTS USING       *\n//*         C3270, YOU MAY SKIP THIS JOB AND RUN ONLY 04_LPALIB.TXT *\n//* --------------------------------------------------------------- *\n//LINK     PROC LP='LET,NCAL,LIST,MAP,RENT,REUS,REFR'\n//LINK     EXEC PGM=IEWL,PARM='&LP',\n//             REGION=2048K\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS2.LINKLIB\n//SYSLIB   DD  DISP=OLD,DSN=CBT300.OBJ\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//         PEND\n//LC3270   EXEC LINK\n//SYSLIN   DD  *\n INCLUDE SYSLIB(C3270)\n NAME C3270(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "C3270LPA": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x00\\x15\\x00\\x15\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "SCHAEF1"}, "text": "//C33270I4  JOB (0),'INST CBT300',MSGLEVEL=1,CLASS=A,MSGCLASS=T\n//* --------------------------------------------------------------- *\n//*   INSTALL CBT300 (FROM CBT249) - MODIFICATION                   *\n//*   LINK C3270 TO SYS1.LPALIB (FOR PERFORMANCE REASONS)           *\n//* --------------------------------------------------------------- *\n//*   NOTE: TO ACTIVATE RE IPL SYSTEM WITH CLPA                     *\n//* --------------------------------------------------------------- *\n//LINK     PROC LP='LET,NCAL,LIST,MAP,RENT,REUS,REFR'\n//LINK     EXEC PGM=IEWL,PARM='&LP',\n//             REGION=2048K\n//SYSPRINT DD  SYSOUT=*\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.LPALIB\n//SYSLIB   DD  DISP=OLD,DSN=CBT300.OBJ\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(TRK,(5,5))\n//         PEND\n//LC3270   EXEC LINK\n//SYSLIN   DD  *\n INCLUDE SYSLIB(C3270)\n NAME C3270(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "INDXCL": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x006\\x006\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "SCHAEF1"}, "text": "//V100PTF6 JOB (0),'V100PTF06',CLASS=A,MSGCLASS=A,MSGLEVEL=(1,1)\n//* ------------------------------------------------------------------*\n//* CREATE PROCEDURE INDX IN SYS2.CLIST                               *\n//* INDX IS A (POOR) REPLACEMENT FOR THE SYSINDX FUNCTION IN TSO/E    *\n//* ------------------------------------------------------------------*\n//TSOPROC  EXEC PGM=IEBGENER\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT2   DD  DISP=(SHR),DSN=SYS2.CLIST(INDX)\n//SYSUT1   DD  DATA,DELIM=\u00ba\u00ba\nPROC 0 SR() TX() ST(1)\n/*-------------------------------------------------------------------*/\n/* INDX                                                              */\n/* A SUBSTITUTE FOR THE SYSINDX FUNCTION OF TSO/E, WHICH IS NOT      */\n/* AVAILABLE UNDER MVS 3.8                                           */\n/* ARGUMENTS:                                                        */\n/*   SR(NEEDLE) - WHAT TO SEARCH - REQUIRED                          */\n/*   TX(HAYSTACK) - WHERE TO SEARCH - REQUIRED                       */\n/*   ST(STARTPOS) - WHERE TO START (1 IF NOT SPECIFIED)              */\n/* RETURN (LASTCC):                                                  */\n/*   0 - NOT FOUND OR                                                */\n/*   NN - POSITION OF SR WITHIN TX STARTING AT ST                    */\n/* REMARKS:                                                          */\n/*   FOR PERFORMANCE REASONS, THIS PROCEDURE DOES ALMOST NO ERROR    */\n/*   CHECKING. SO IT MAY FAIL IF THE PARAMETERS ARE NOT ENTERED      */\n/*   CORRECTLY.                                                      */\n/*-------------------------------------------------------------------*/\n/* VERSION AUTHOR/REMARKS                                            */\n/* ------- -----------------------------------------------------     */\n/* 1.0     WOLFGANG SCHAEFER - WOLFGANG@SCHAEFERNET.DE               */\n/*         NEW PROCEDURE.                                            */\n/*         TO DO: REWRITE AS ASSEMBLER CP FOR BETTER PERFORMANCE     */\n/*-------------------------------------------------------------------*/\nINDX00: -\n  CONTROL NOLIST NOCONLIST NOSYMLIST\n  SET REMAIN = &SUBSTR(&ST:&LENGTH(&STR(&TX)),&STR(&TX)) /* TO SCAN  */\n  SET INDVAL = 1\nINDX01: -\n  IF &LENGTH(&STR(&REMAIN)) < &LENGTH(&STR(&SR)) THEN DO\n     SET INDVAL = 0\n     GOTO INDX90                              /* NO MATCH            */\n     END\n  IF &SUBSTR(1:&LENGTH(&STR(&SR)),&STR(&REMAIN)) = -\n     &STR(&SR) THEN DO\n     SET INDVAL = &INDVAL + &ST - 1\n     GOTO INDX90                              /* FOUND IT            */\n     END\n  SET INDVAL = &INDVAL + 1                    /* TRY NEXT ...        */\n  SET REMAIN = &SUBSTR(2:&LENGTH(&STR(&REMAIN)),&STR(&REMAIN))\n  GOTO INDX01\nINDX90: -\n  EXIT CODE(&INDVAL)\n\u00ba\u00ba\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INDXCLD": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x02\\x12\\x0f\\x01\\x02\\x12\\x0f\\tE\\x00x\\x00x\\x00\\x00\\xe2\\xc3\\xc8\\xc1\\xc5\\xc6\\xf1@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-04-30T00:00:00", "modifydate": "2002-04-30T09:45:00", "lines": 120, "newlines": 120, "modlines": 0, "user": "SCHAEF1"}, "text": " Hercules\n  MVS Add-Ons: Documentation\n\nINDX is a CLIST that 'emulates' the SYSINDX function of TSO/E.\n\nFor full documentation, visit\nhttp://www.schaefernet.de/hercules/mvsaddon/\n\nThe INDX CLIST\n\nOnce upon a time - when I started working with CLISTs on MVS 3.8, I found\nout that the SYSINDX function is not available in TSO! But I needed the\nfunctionality. This is the result: a small CLIST named INDX that performs\nthe function for me. Nothing dramatically, but useful.\n\nThe real disadvantage is that it is horribly slow. So some day I'll\nprobably rewrite it as an Assembler command processor. BTW: please be aware\nthat it is not syntax compatible with the real CLIST function.\n\nTable of Contents\n\n- Installation\n- Syntax\n- Examples\n  ------------------------------------------------------------------------\n\nInstallation\n\nThe installation package contains 1 job. It should complete with condition\ncode 0.\n\n Job         Description\n\n 01_src.txt  This jobs places the INDX clist in SYS2.CLIST. If you have\n             another CLIST library, feel free to change the output dataset\n             name.\n\n             Now you are ready to use the command processors (assuming\n *ready*     that SYS2.LINKLIB did not go into any secondary extent - in\n             that case you must compress and re-ipl your system).\n\n             In order to use the 'implicit' call (%INDX ... or just INDX\n Note:       ...) the library into which INDX was installed, must be\n             allocated in the SYSPROC DD concatenation of your TSO\n             session.\n\nStart of page\n\n  ------------------------------------------------------------------------\n\nSyntax\n\n   [%]INDX SR(<needle>) TX(<haystack>) [ST(<startpos>|1)\n\nSR(<needle>) - defines what you want to search.\n\nTX(<haystack>) - defines the string in which you would like to find\n<needle>.\n\nST(<startpos>) - gives the position on which the search begins. If you do\nnot specify this parameter, the first position is assumed.\n\nPlease note that INDX does no error checking. This is for performance\nreasons (it's slow enough ...). So if you do not supply the parameters\ncorrectly, it may blow up with some nasty error messages or whatsoever ...\n\nResult: the condition code (&LASTCC) will give you the position of <needle>\nin <haystack> or 0 if <needle> was not found.\n\nStart of page\n\n  ------------------------------------------------------------------------\n\nExamples\n\n PROC 0\n /* EXAMPLES FOR THE INDX CLIST */\n\n /* EXAMPLE 1: TEST IF ANSWER CONTAINS YES */\n\n WRITENR &STR(PLEASE ANSWER WITH A YES SOMEWHERE)\n READ &YN\n INDX SR(YES) TX(&STR(&YN)\n IF &LASTCC > 0 THEN DO\n    WRITE &STR(YOUR ANSWER CONTAINED YES)\n    END\n ELSE DO\n    WRITE &STR(COULD NOT FIND TEXT 'YES')\n    END\n\n /* EXAMPLE 2: EXTRACT THE KEYWORD VALUE FOR \"VOL\".\n /*            SYNTAX KEYW=VALUE\n\n  SET DATA = &STR(UNIT=3350 VOL=MVSRES LRECL=80)\n  INDX SR(&STR(VOL=)) TX('&STR(&DATA)')\n  SET BEGIN = &LASTCC\n  IF &BEGIN = 0 THEN DO\n     WRITE &STR(COULD NOT FIND VOLUME KEYWORD)\n     EXIT CODE(12)\n     END\n\n  INDX SR('&STR( )') TX('&STR(&DATA)') ST(&BEGIN)\n  SET END = &LASTCC\n  IF &END = 0 THEN DO\n     WRITE &STR(SYNTAX ERROR IN VOLUME KEYWORD)\n     EXIT CODE(12)\n     END\n  SET END = &END - 1\n  SET BEGIN = &BEGIN + 4\n  SET VALUE = &SUBSTR(&BEGIN:&END,&DATA)\n  WRITE &STR(YOU ARE GOING TO USE VOLUME &VALUE)\n\nEXIT\n\n\n\n  ------------------------------------------------------------------------\n\nLast update: 2001-06-07 Internet URL (most recent version:\nhttp://www.schaefernet.de/mvsaddondoc/indxcl.htx)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT574/FILE574.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT574", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}