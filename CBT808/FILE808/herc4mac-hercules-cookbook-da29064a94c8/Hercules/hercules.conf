/* Rexx */

--conf:start1

--  pgmprdos    licensed

--  cpuserial   000001
--  cpumodel    2064
--  model       2064

--  archmode    esame

--  cnslport    3270
--  sysepoch    1900
--  tzoffset    +0000
--  ostailor    quiet

--  panrate     1000
--  timerint    1000000

--conf:end1

--conf:start2

--  attach      0002    3211    spool/printer1.0002.txt print
--  attach      0004    3211    spool/printer2.0004.txt print

--  attach      000a    3505    *
--  attach      000b    3525    spool/cardpch1.000b.txt ascii

--  attach      000c    3505    *
--  attach      000d    3525    spool/cardpch2.000d.txt ebcdic

--  attach      000e    1403    spool/printer3.000e.txt print
--  attach      000f    1403    spool/printer4.000f.txt print

--  attach      0580    3490    *
--  attach      0581    3490    *

--  attach      0700    3270
--  attach      0900    3270
--  attach      0901    3270

--conf:end2


parse   version _ver
parse   source  _src
parse   var _src . . _cnf
_cnf    = filespec("n",_cnf)
-- parse	var _cnf  _cnf "." .

_env    = Address()

if  ( lower(_env) = "hercules" ) then ,
    NOECHO = "-"
else ,
    NOECHO  = ""

call inline 1

if  ( lower(_env) = "hercules" ) then do
    zrc   = awscmd(NOECHO || "maxcpu", "resp")
    if  zrc = 0 then ,
        do  i = 1 to resp.0
            if  pos("HHC02203",resp.i) > 0 then do
                parse var resp.i . ":" maxcpu
                maxcpu = strip(maxcpu)
                leave i
            end
        end
    else ,
        maxcpu = 1
end

if  uname() = "enrico-mbp" then do
    maxcpu = 1
    numcpu = 1
    mainsize = "4g"
end
else ,
if  uname() = "enrico-imac" then do
    maxcpu = 4
    numcpu = 4
    mainsize = "8g"
end
else ,
if  uname() = "enrico-centos" then do
    maxcpu = 2
    numcpu = 2
    mainsize = "2g"
end
else do
    maxcpu = 1
    numcpu = 1
    mainsize = "2g"
end

call config NOECHO"mainsize    "mainsize
call config NOECHO"maxcpu      "maxcpu
call config NOECHO"numcpu      "numcpu

call inline 2

DP  = getenv("HERCULES_DASDPATH")
if  DP = "" then ,
    DP  = "dasd"

SP  = getenv("HERCULES_SHADPATH")
if  SP = "" then ,
    SP  = "shad"

CU  = ""
CU  = "cu=3990-6"

list = ls(DP)

do  i = 1 to words(list)
    disk    = word(list,i)
    parse var disk addr "." vser "." devt "." type

    if  type \= "ckd" & type \= "cckd" then ,
        iterate

    dasd    = DP"/"disk
    shad    = "ro sf="SP"/"vser"_1."devt

    if  lower(type) = "ckd" then ,
        call config NOECHO"attach      "left(addr,8)left(devt,8)dasd            CU
    else ,
        call config NOECHO"attach      "left(addr,8)left(devt,8)dasd    shad    CU
end

hostIP  = getenv("HERCULES_HOSTIP")
guestIP = getenv("HERCULES_GUESTIP")
if  ( hostIP \= "" & guestIP \= "" ) then do
    misc = "-n /dev/tun0 -s 255.255.255.0"
    call config NOECHO"attach      "left("0E20.2",8)left("CTCI",8)misc guestIP hostIP
end

LP  = getenv("HERCULES_LOADPARM")
if  LP \= "" then ,
    call config NOECHO"loadparm    "LP

exit

inline:
    stage = arg(1)
    trig1 = "--conf:start" || stage
    trig2 = "--conf:end" || stage

    havconf = 0
    do  sl = 1 for sourceline()
        srcl = strip(sourceline(sl))
        if  ( srcl = "" ) then ,
            iterate
        if  ( left(srcl,1) = "#" ) then ,
            iterate

        flag = lower(space(srcl,0))

        if left(flag,2) \= "--" then ,
            iterate
        if  abbrev(flag, trig2) then ,
            leave sl
        if  abbrev(flag, trig1) then do
            havconf = 1
            iterate sl
        end
        if  \havconf then ,
            iterate sl
        tokn = lower(strip(substr(srcl,3)))
        if  tokn \= "" then ,
            call config NOECHO || tokn
    end

    return



config:
    if  ( lower(_env) = "hercules" ) then ,
        zrc = awscmd(arg(1))
    else ,
        say arg(1)
    return

getenv:procedure
	return VALUE(arg(1),,"ENVIRONMENT")

uname:procedure
    Address "bash" "uname -n | rxqueue"
    parse pull name
    do i = 1 while queued() > 0
	    parse pull data
    end
    parse var name name "." .
    return lower(name)

ls:procedure
    Address "bash" "ls "arg(1)" | rxqueue"
    list = ""
    do i = 1 while queued() > 0
	    parse pull data
	    list = list data
    end
    return space(list)
