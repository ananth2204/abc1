#!/bin/bash
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#-# Name : <filename>
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#-# This work is  "Copyright (c) 2012-2013 Enrico Sorichetti"
#-# Licensed with "Creative Commons Attribution-ShareAlike 3.0 Unported License"
#-# For humans    "http://creativecommons.org/licenses/by-sa/3.0/deed.en_US"
#-# Legalese      "http://creativecommons.org/licenses/by-sa/3.0/legalcode"
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add path after
function append_path()
{
  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ; then
    eval "$1=\$$1:$2"
  fi
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# add path before
function prepen_path() {
  if ! eval test -z "\"\${$1##*:$2:*}\"" -o -z "\"\${$1%%*:$2}\"" -o -z "\"\${$1##$2:*}\"" -o -z "\"\${$1##$2}\"" ; then
    eval "$1=$2:\$$1"
  fi
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xUsage() {
    echo "${self} - flags : "
    echo "${self} -    -h : this help"
    echo "${self} -    -v : Hercules Version"
    echo "${self} -    -c : configuration conf"
    echo "${self} -    -g : run"
    echo "${self} -    -n : resolve the configuration"

    echo "${self} -    -f : (same as above)"
    xLeave
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xClear() {
	echo -ne "\033[2J"
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xStart() {
#	echo "${self} - v1.1 copyright Enrico Sorichetti, 2005-2012."
	echo "${self} - Started `date +%H:%M:%S`"
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xLeave() {
	echo "${self} - Ended `date +%H:%M:%S`"
	if [ "${1}". == "." ] ; then
		exit 0
	else
		exit ${1}
	fi
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xPause() {
	echo "${self} - Press (ENTER) to continue"
	read z
}

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xCancel() {
	echo "${self} - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
	echo "${self} - ${1}"
	echo "${self} - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
	xLeave 8
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xLog() {
	echo "${self} - ${1}"
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xYesNo() {
	for ((;;)) ; do
		echo "${self} - Enter [y](ENTER) to continue"
		echo "${self} -       [n/q]      to Exit"
		read z
		if [ "${z}". == "." ] ; then
			return 0
		fi
		z=${z:0:1}
		z="`echo -E "${z}" | tr [:upper:] [:lower:]`"
		case ${z} in
			y) return 0
				;;
			n) return 1
				;;
			q) return 1
				;;
		esac
	done
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function xLower() {
	if [ "${1}". == "." ] ; then
		RESULT=""
	else
		RESULT=`echo -E "${1}" | tr [:upper:] [:lower:]`
	fi
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
function isNum () {
  [ "$1" -eq "$1" 2> /dev/null ]
  return $?
}

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

self="`basename ${0}`"
self="${self%%.*}"

herc="`dirname ${0}`"
herc="${herc%/bin}"

DIRS="cntl conf dasd shad logs spool tapes utils ztemp"
DASD="dasd"
SHAD="shad"
LOGS="logs"
CONF="conf"
UTIL="utils"
TEMP="ztemp"

for tokn in ${DIRS} ; do
    if  ! test -d ${tokn} ; then
        tokn="'${tokn}'        "
        xLog "Directory not found '${tokn}' "
        # xLeave
    fi
done

exec="exec"
netw=""

here=$(readlink `pwd`)
if [ "${here}". == "." ] ; then
	here="`pwd`"
fi
pref="${here}"
pref="."

vers="dev4"

conf="hercules"

xLower "${here##*/}"
zopSYS=${RESULT}
if [ "${zopSYS}". == "zos." ] ; then
    LP="0A82H0"
else
    LP=""
fi

hostIP="`ifconfig en1 | awk '/inet / { print $2}'`"
if [ "${hostIP}". == "." ] ; then
    guestIP = ""
else
    host="${hostIP##*.}"
    offs=5
    guest=$(( host + offs ))
    guestIP="${hostIP%.*}.${guest}"
fi

while getopts :hVgrnv:f:c: OPT ; do
    case ${OPT} in

        h|V)    xUsage
                ;;

		g)      exec="exec"
			    ;;

		r)      exec=""
			    ;;

		n)      netw="netw"
			    ;;

		v)      vers=${OPTARG}
			    ;;

		c|f)    conf=${OPTARG}
			    ;;

		l)      LP=${OPTARG}
			    ;;

        ?)      xCancel "Invalid option switch >${OPTARG}<"
                ;;

	esac
done

HP="${herc}/${vers}/bin"
if  ! test -d ${HP} ; then
    left="'${vers}'                "
    xLog "Hercules version ${vers} not found at ${HP}"
    xLeave
fi

GO="${HP}/hercules"
IF="${HP}/hercifc"
# echo ">>>$GO<<<"
if  ! test -x ${GO} ; then
    xLog "Hercules 'executable' not found not found at ${GO}""
    xLeave
fi
if  ! test -x ${if} ; then
    xLog "Hercules 'hercifc'    not found not found at ${IF}""
    xLeave
fi

CF="${pref}/conf/${conf}"
# echo "testing $CF"
if  ! test -r ${CF} ; then
    CF="${pref}/conf/${conf}.conf"
    # echo "testing $CF"
    if  ! test -r ${CF} ; then
        CF="${pref}/conf/${conf}.rexx"
        # echo "testing $CF"
        if  ! test -r ${CF} ; then
            left="'${conf}'            "
            xLog "Configuration ${conf} not found for ${CF}"
            xLeave
        fi
    fi
fi

XS=""
if  test -d "${pref}/execs" ; then
    XS="${pref}/execs"
fi

if  test -d "${herc}/execs" ; then
    if  [ "${XS}". != "." ] ; then
        XS="${XS}:"
    fi
    XS="${XS}${herc}/execs"
fi

LG=""
LG="logs/hercules_log.txt"

xStart

if [ "${netw}". == "." ] ; then
    hostIP=""
    guestIP=""
fi

if [ "${exec}". == "." ] ; then
    xLog "The configurartion will resolved with"
else
    xLog "This startup will use "
fi

xLog "Hercules path : $HP"
xLog "hercules      : $GO"
xLog "hercifc       : $IF"
xLog "Config        : $CF"
xLog "Rexx execs  : $XS"
xLog "hostIP        : $hostIP"
xLog "guestIP       : $guestIP"
xLog "Loadparm      : $LP"


xYesNo
RC=$?
if [ ${RC} == 1 ] ; then
	xLog "Hercules configurartion/startup canceled by user"
	xLeave
fi
export HERCULES_DASDPATH=${DASD}
export HERCULES_SHADPATH=${SHAD}

export HERCULES_HOSTIP=${hostIP}
export HERCULES_GUESTIP=${guestIP}

export HERCULES_LOADPARM=${LP}

prepen_path PATH ${HP}
export PATH

export HREXX_SCRIPTS=${XS}
export HREXX_PATH=${XS}

if [ "${exec}". == "." ] ; then
    rexx  ${CF} > ${CF}.resolved
else
    if [ "${LG}". == "." ] ; then
        ${GO} -f ${CF}
    else
        ${GO} -f ${CF} > ${LG}
    fi
fi

xLeave

#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#-# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

