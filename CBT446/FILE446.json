{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012043000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 58786, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE446.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 58786, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE446.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x02\\x0f'", "DS1TRBAL": "b'3f'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x035\\x00\\x03\\x035\\x00\\x05\\x00\\x03'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\"\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\tG\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T09:47:22", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-486"}, "text": "REGULAR CBT TAPE - VERSION 486    FILE:  446\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT486.FILE446\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 4 MEMBERS COUNTED; CUMULATIVE SIZE IS 417 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   01/01/13    09:47:22    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$NOTE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x003\\x01\\x00\\x07O\\x01\\x13\\x00\\x1f\\tB\\x00!\\x00!\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-03-14T00:00:00", "modifydate": "2013-01-01T09:42:33", "lines": 33, "newlines": 33, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  Contribution\nDate: Mon, 13 Mar 2000 15:58:08 -0600\nFrom: \"McKown, John\" <JMckown@Insurdata.com>\nTo: \"Sam Golob\" <sbgolob@attglobal.net>\n\nI don't know how much interest this would have, but I have gone\ninsane and written a COBOL program. This program is a small example\n(341 lines of code) of how to use COBOL to write an OS/390 UNIX\nSystem Services program. The program uses the BPX1WRT subroutine to\nwrite to STDOUT. It uses this interface to write the UNIX parameters\n(like C's argc and argv). It also uses that interface to write out\nthe currently set environment variables.  For example:\n\n./UNIX0002 arg1 arg2 arg3\n\nwould result in output such as:\n\nNUMBER OF ARGUMENT IS: 4\nARGC\u00dd 000\u00a8=./UNIX0002\nARGC\u00dd 001\u00a8=arg1\nARGC\u00dd 002\u00a8=arg2\nARGC\u00dd 003\u00a8=arg3\n\nNUMBER OF ENVIRONMENT VARIABLES IS: 3\nENV\u00dd 000\u00a8=VAR1=VALUE1\nENV\u00dd 001\u00a8=VAR2=VALUE2\nENV\u00dd 002\u00a8=VAR3=VALUE3\n\nThis is a single, COBOL source program.\n\nJohn McKown\nHealthAxis\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE446": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04V\\x00\\x08\\x01\\x13\\x00\\x1f\\x01\\x13\\x00\\x1f\\tG\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf8\\xf6@@@'", "ispf": {"version": "04.86", "flags": 0, "createdate": "2013-01-01T00:00:00", "modifydate": "2013-01-01T09:47:08", "lines": 31, "newlines": 31, "modlines": 0, "user": "CBT-486"}, "text": "//***FILE 446 is from John McKown and contains a COBOL program      *   FILE 446\n//*           which uses OS/390 UNIX services.  It's good to have   *   FILE 446\n//*           a program like this, for a coding example.            *   FILE 446\n//*                                                                 *   FILE 446\n//*     email:   \"McKown, John\" <john.archie.mckown@GMAIL.com>      *   FILE 446\n//*                                                                 *   FILE 446\n//*     This program is a small example (341 lines of code) of      *   FILE 446\n//*     how to use COBOL to write an OS/390 UNIX System Services    *   FILE 446\n//*     program. The program uses the BPX1WRT subroutine to         *   FILE 446\n//*     write to STDOUT. It uses this interface to write the        *   FILE 446\n//*     UNIX parameters (like C's argc and argv).  It also uses     *   FILE 446\n//*     that interface to write out the currently set               *   FILE 446\n//*     environment variables.  For example:                        *   FILE 446\n//*                                                                 *   FILE 446\n//*     ./UNIX0002 arg1 arg2 arg3                                   *   FILE 446\n//*                                                                 *   FILE 446\n//*     would result in output such as:                             *   FILE 446\n//*                                                                 *   FILE 446\n//*     NUMBER OF ARGUMENT IS: 4                                    *   FILE 446\n//*     ARGC\u00dd 000\u00a8=./UNIX0002                                       *   FILE 446\n//*     ARGC\u00dd 001\u00a8=arg1                                             *   FILE 446\n//*     ARGC\u00dd 002\u00a8=arg2                                             *   FILE 446\n//*     ARGC\u00dd 003\u00a8=arg3                                             *   FILE 446\n//*                                                                 *   FILE 446\n//*     NUMBER OF ENVIRONMENT VARIABLES IS: 3                       *   FILE 446\n//*     ENV\u00dd 000\u00a8=VAR1=VALUE1                                       *   FILE 446\n//*     ENV\u00dd 001\u00a8=VAR2=VALUE2                                       *   FILE 446\n//*     ENV\u00dd 002\u00a8=VAR3=VALUE3                                       *   FILE 446\n//*                                                                 *   FILE 446\n//*     This is a single, COBOL source program.                     *   FILE 446\n//*                                                                 *   FILE 446\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UNIX0002": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x07O\\x01\\x00\\x07O\\x14\\x16\\x01U\\x01U\\x00\\x00\\xd1\\xd4\\xc3\\xd2\\xd6\\xe6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-03-14T00:00:00", "modifydate": "2000-03-14T14:16:00", "lines": 341, "newlines": 341, "modlines": 0, "user": "JMCKOWN"}, "text": "000100 ID DIVISION.\n000200 PROGRAM-ID. UNIX0002.\n000300 AUTHOR. JOHN MCKOWN.\n000400 INSTALLATION. HEALTHAXIS.\n000500 DATE-WRITTEN.\n000600 DATE-COMPILED.\n000700 SECURITY. NONE.\n000800\n000900 ENVIRONMENT DIVISION.\n001000 CONFIGURATION SECTION.\n001100 SOURCE-COMPUTER. IBM-370.\n001200 OBJECT-COMPUTER. IBM-370.\n001300 INPUT-OUTPUT SECTION.\n001400 FILE-CONTROL.\n001500 I-O-CONTROL.\n001600 DATA DIVISION.\n001700 FILE SECTION.\n001800*\n001900 WORKING-STORAGE SECTION.\n002000 01  WS-STARTS              PIC X(24)\n002100     VALUE IS 'UNIX0001 WS START.'.\n002200 01  NEW-LINE               PIC X(1) VALUE IS X'15'.\n002300 01  JUNK.\n002400     05 JUNK-1              PIC S9(3) PACKED-DECIMAL.\n002500     05 JUNK-2 REDEFINES JUNK-1 PIC X(2).\n002600 77  INDEX-VALUE            PIC S9(9) BINARY.\n002700 77  STDIN                  PIC S9(9) BINARY VALUE IS +0.\n002800 77  STDOUT                 PIC S9(9) BINARY VALUE IS +1.\n002900 77  STDERR                 PIC S9(9) BINARY VALUE IS +2.\n003000 77  RET-VALUE              PIC S9(9) BINARY.\n003100 77  RET-CODE               PIC S9(9) BINARY.\n003200 77  REASON-CODE            PIC S9(9) BINARY.\n003300 77  AALINE                 POINTER.\n003400 77  LINE-LENGTH            PIC S9(9) BINARY.\n003500 77  BPX1WRT                PIC X(8) VALUE IS 'BPX1WRT'.\n003600 77  FNL                    PIC S9(9) BINARY VALUE IS +1.\n003700 77  F0                     PIC S9(9) BINARY VALUE IS +0.\n003800 77  LINE0A                 PIC X(24)\n003900     VALUE IS 'NUMBER OF ARGUMENTS IS:'.\n004000 77  LINE0B                 PIC X(35)\n004100     VALUE IS 'NUMBER OF ENVIRONMENT VARIABLES IS:'.\n004200 77  LINE1                  PIC X(05)\n004300     VALUE IS 'ARGC\u00dd'.\n004400 77  LINE2                  PIC X(2)\n004500     VALUE IS '\u00a8='.\n004600 77  LINE3                  PIC X(05)\n004700     VALUE IS 'ENV\u00dd'.\n004800 77  FLINE                  PIC 999.\n004900*\n005000 LINKAGE SECTION.\n005100 01  VALUE-ARGC             PIC S9(9) BINARY.\n005200* VALUE-ARGC CONTAINS THE NUMBER OF ARGUMENTS ON THE COMMAND LINE\n005300*\n005400 01  VALUE-ARGVL-ARRAY.\n005500     05 VALUE-ARGVL         POINTER\n005600                            OCCURS 32767 TIMES\n005700                            DEPENDING ON VALUE-ARGC.\n005800* VALUE-ARGVL-ARRAY IS AN ARRAY OF POINTERS. THERE ARE\n005900* VALUE-ARGC NUMBER OF THEM. EACH POINTER POINTS TO A FULLWORD\n006000* (PIC S9(9) BINARY IN COBOL). EACH FULLWORD IS THE LENGTH OF\n006100* THE CORRESPONDING ARGUMENT\n006200*\n006300 01  VALUE-ARGVD-ARRAY.\n006400     05 VALUE-ARGVD-PTR     POINTER\n006500                            OCCURS 32767 TIMES\n006600                            DEPENDING ON VALUE-ARGC.\n006700* VALUE-ARGVD-ARRAY IS AN ARRAY OF POINTERS. THERE ARE\n006800* VALUE-ARGC NUMBER OF THEM. EACH POINTER POINTS TO A CHARACTER\n006900* STRING. THE LENGTH OF THE STRING IS KEPT IN THE CORRESPONDING\n007000* VALUE-ARGVL-ARRAY FULLWORD.\n007100*\n007200 01  VALUE-ENVC             PIC S9(9) BINARY.\n007300* VALUE-ENVC CONTAINS THE NUMBER OF ENVIRONMENT VARIABLES.\n007400*\n007500 01  VALUE-ENVPL-ARRAY.\n007600     05 VALUE-ENVPL         POINTER\n007700                            OCCURS 32767 TIMES\n007800                            DEPENDING ON VALUE-ENVC.\n007900* VALUE-ENVPL-ARRAY IS AN ARRAY OF POINTERS. EACH POINTER POINTS\n008000* TO A FULLWORD (COBOL PIC S9(9) BINARY). THIS FULLWORD CONTAINS\n008100* THE LENGTH OF THE ENVIRONMENT VARIABLE.\n008200*\n008300 01  VALUE-ENVPD-ARRAY.\n008400     05 VALUE-ENVPD-PTR     POINTER\n008500                            OCCURS 32767 TIMES\n008600                            DEPENDING ON VALUE-ENVC.\n008700* VALUE-ENVPD-ARRAY IS AN ARRAY OF POINTERS. EACH POINTER POINTS\n008800* TO A CHARACTER STRING. THE LENGTH OF THE STRING IN KEPT IN THE\n008900* CORRESPONDING VALUE-ENVPL-ARRAY.\n009000*\n009100 01  PARM-SELF              POINTER.\n009200* THIS SIMPLY POINTS BACK TO THE BEGINNING OF THE PARAMETER\n009300* LIST. I HAVE NO IDEA WHY IT IS HERE!\n009400*\n009500 01  VALUE-LENGTH           PIC S9(9) BINARY.\n009600* I USE THIS TO ACCESS THE VALUE OF THE LENGTH OF AN ARGUMENT OR\n009700* AN ENVIRONMNET VARIABLE. I DO THIS BY SETTING ITS ADDRESS\n009800* (USING COBOL'S \"ADDRESS OF\" STATEMENT) TO THE CORRESPONDING\n009900* ARGUMENT OR ENVIRONMENT VARIABLE LENGTH.\n010000*\n010100 PROCEDURE DIVISION USING VALUE-ARGC\n010200                          VALUE-ARGVL-ARRAY\n010300                          VALUE-ARGVD-ARRAY\n010400                          VALUE-ENVC\n010500                          VALUE-ENVPL-ARRAY\n010600                          VALUE-ENVPD-ARRAY\n010700                          PARM-SELF.\n010800 START-UP.\n010900     MOVE VALUE-ARGC TO FLINE\n011000*\n011100* PUT THE ADDRESS OF LINE0A INTO AALINE\n011200     CALL 'GETADDR' USING LINE0A, AALINE\n011300     MOVE LENGTH OF LINE0A TO LINE-LENGTH\n011400*\n011500* WRITE LINE0A TO STDOUT\n011600     CALL BPX1WRT USING STDOUT,\n011700                        AALINE,\n011800                        F0,\n011900                        LINE-LENGTH,\n012000                        RET-VALUE,\n012100                        RET-CODE\n012200                        REASON-CODE\n012300     MOVE VALUE-ARGC TO FLINE\n012400*\n012500* PUT THE ADDRESS OF FLINE INTO AALINE\n012600     CALL 'GETADDR' USING FLINE, AALINE\n012700     MOVE LENGTH OF FLINE TO LINE-LENGTH\n012800*\n012900* PRINT THE VALUE OF \"ARGC\" TO STDOUT\n013000       CALL BPX1WRT USING STDOUT,\n013100                          AALINE,\n013200                          F0,\n013300                          LINE-LENGTH,\n013400                          RET-VALUE,\n013500                          RET-CODE\n013600                          REASON-CODE\n013700*\n013800* PUT THE ADDRESS OF NEW-LINE TO AALINE\n013900       CALL 'GETADDR' USING NEW-LINE, AALINE\n014000*\n014100* OUTPUT A \"NEW LINE\" TO STDOUT\n014200       CALL BPX1WRT USING STDOUT,\n014300                          AALINE,\n014400                          F0,\n014500                          FNL,\n014600                          RET-VALUE,\n014700                          RET-CODE\n014800                          REASON-CODE\n014900     PERFORM VARYING INDEX-VALUE FROM 1 BY 1\n015000       UNTIL INDEX-VALUE IS GREATER THAN VALUE-ARGC\n015100*\n015200* PUT THE ADDRESS OF LINE1 INTO AALINE\n015300       CALL 'GETADDR' USING LINE1, AALINE\n015400       MOVE LENGTH OF LINE1 TO LINE-LENGTH\n015500*\n015600* PRINT \"ARGC\u00dd\" TO STDOUT\n015700       CALL BPX1WRT USING STDOUT,\n015800                          AALINE,\n015900                          F0,\n016000                          LINE-LENGTH,\n016100                          RET-VALUE,\n016200                          RET-CODE\n016300                          REASON-CODE\n016400       SUBTRACT 1 FROM INDEX-VALUE GIVING FLINE\n016500*\n016600* PUT THE ADDRESS OF FLINE INTO AALINE\n016700       CALL 'GETADDR' USING FLINE, AALINE\n016800       MOVE LENGTH OF FLINE TO LINE-LENGTH\n016900*\n017000* PRINT THE CURRENT VALUE OF THE INDEX TO STDOUT\n017100       CALL BPX1WRT USING STDOUT,\n017200                          AALINE,\n017300                          F0,\n017400                          LINE-LENGTH,\n017500                          RET-VALUE,\n017600                          RET-CODE\n017700                          REASON-CODE\n017800*\n017900* PUT THE ADDRESS OF LINE1 INTO AALINE\n018000       CALL 'GETADDR' USING LINE2, AALINE\n018100       MOVE LENGTH OF LINE2 TO LINE-LENGTH\n018200*\n018300* PRINT \"\u00a8\" TO STDOUT\n018400       CALL BPX1WRT USING STDOUT,\n018500                          AALINE,\n018600                          F0,\n018700                          LINE-LENGTH,\n018800                          RET-VALUE,\n018900                          RET-CODE\n019000                          REASON-CODE\n019100       SET ADDRESS OF VALUE-LENGTH TO\n019200           VALUE-ARGVL ( INDEX-VALUE )\n019300*\n019400* OUTPUT THE \"N\" ARGUMENT TO STDOUT\n019500       CALL BPX1WRT USING STDOUT,\n019600                          VALUE-ARGVD-PTR ( INDEX-VALUE) ,\n019700                          F0,\n019800                          VALUE-LENGTH,\n019900                          RET-VALUE,\n020000                          RET-CODE\n020100                          REASON-CODE\n020200*\n020300* PUT THE ADDRESS OF NEW-LINE TO AALINE\n020400       CALL 'GETADDR' USING NEW-LINE, AALINE\n020500*\n020600* OUTPUT A \"NEW LINE\" TO STDOUT\n020700       CALL BPX1WRT USING STDOUT,\n020800                          AALINE,\n020900                          F0,\n021000                          FNL,\n021100                          RET-VALUE,\n021200                          RET-CODE\n021300                          REASON-CODE\n021400     END-PERFORM.\n021500     MOVE VALUE-ENVC TO FLINE\n021600*\n021700* PUT THE ADDRESS OF LINE0B TO AALINE\n021800     CALL 'GETADDR' USING LINE0B, AALINE\n021900     MOVE LENGTH OF LINE0B TO LINE-LENGTH\n022000*\n022100* OUTPUT THE NUMBER OF ENVIRONMENT VARIABLES TO STDOUT\n022200     CALL BPX1WRT USING STDOUT,\n022300                        AALINE,\n022400                        F0,\n022500                        LINE-LENGTH,\n022600                        RET-VALUE,\n022700                        RET-CODE\n022800                        REASON-CODE\n022900     MOVE VALUE-ENVC TO FLINE\n023000*\n023100* PUT THE ADDRESS OF FLINE INTO AALINE\n023200     CALL 'GETADDR' USING FLINE, AALINE\n023300     MOVE LENGTH OF FLINE TO LINE-LENGTH\n023400*\n023500* PRINT THE VALUE OF \"ARGC\" TO STDOUT\n023600       CALL BPX1WRT USING STDOUT,\n023700                          AALINE,\n023800                          F0,\n023900                          LINE-LENGTH,\n024000                          RET-VALUE,\n024100                          RET-CODE\n024200                          REASON-CODE\n024300*\n024400* PUT THE ADDRESS OF NEW-LINE TO AALINE\n024500       CALL 'GETADDR' USING NEW-LINE, AALINE\n024600*\n024700* OUTPUT A \"NEW LINE\" TO STDOUT\n024800       CALL BPX1WRT USING STDOUT,\n024900                          AALINE,\n025000                          F0,\n025100                          FNL,\n025200                          RET-VALUE,\n025300                          RET-CODE\n025400                          REASON-CODE\n025500     PERFORM VARYING INDEX-VALUE FROM 1 BY 1\n025600       UNTIL INDEX-VALUE IS GREATER THAN VALUE-ENVC\n025700       SET ADDRESS OF VALUE-LENGTH\n025800           TO VALUE-ENVPL ( INDEX-VALUE )\n025900*\n026000* PUT THE ADDRESS OF LINE3 TO AALINE\n026100       CALL 'GETADDR' USING LINE3, AALINE\n026200       MOVE LENGTH OF LINE3 TO LINE-LENGTH\n026300*\n026400* OUTPUT A \"ENV\u00dd\" TO STDOUT\n026500       CALL BPX1WRT USING STDOUT,\n026600                          AALINE,\n026700                          F0,\n026800                          LINE-LENGTH,\n026900                          RET-VALUE,\n027000                          RET-CODE\n027100                          REASON-CODE\n027200       SUBTRACT 1 FROM INDEX-VALUE GIVING FLINE\n027300*\n027400* PUT THE ADDRESS OF FLINE TO AALINE\n027500       CALL 'GETADDR' USING FLINE, AALINE\n027600       MOVE LENGTH OF FLINE TO LINE-LENGTH\n027700*\n027800* OUTPUT THE CURRENT INDEX VALUE TO STDOUT\n027900       CALL BPX1WRT USING STDOUT,\n028000                          AALINE,\n028100                          F0,\n028200                          LINE-LENGTH,\n028300                          RET-VALUE,\n028400                          RET-CODE\n028500                          REASON-CODE\n028600*\n028700* PUT THE ADDRESS OF LINE2 TO AALINE\n028800       CALL 'GETADDR' USING LINE2, AALINE\n028900       MOVE LENGTH OF LINE2 TO LINE-LENGTH\n029000*\n029100* OUTPUT A \"\u00a8\" TO STDOUT\n029200       CALL BPX1WRT USING STDOUT,\n029300                          AALINE,\n029400                          F0,\n029500                          LINE-LENGTH,\n029600                          RET-VALUE,\n029700                          RET-CODE\n029800                          REASON-CODE\n029900       SET ADDRESS OF VALUE-LENGTH TO\n030000           VALUE-ENVPL ( INDEX-VALUE )\n030100*\n030200* OUTPUT THE ENVIRONMENT VARIABLE NAME & VALUE\n030300       CALL BPX1WRT USING STDOUT,\n030400                          VALUE-ENVPD-PTR ( INDEX-VALUE) ,\n030500                          F0,\n030600                          VALUE-LENGTH,\n030700                          RET-VALUE,\n030800                          RET-CODE\n030900                          REASON-CODE\n031000*\n031100* PUT THE ADDRESS OF NEW-LINE TO AALINE\n031200       CALL 'GETADDR' USING NEW-LINE, AALINE\n031300*\n031400* OUTPUT A \"NEW LINE\" TO STDOUT\n031500       CALL BPX1WRT USING STDOUT,\n031600                          AALINE,\n031700                          F0,\n031800                          FNL,\n031900                          RET-VALUE,\n032000                          RET-CODE\n032100                          REASON-CODE\n032200     END-PERFORM.\n032300     GOBACK.\n032400*\n032500 ID DIVISION.\n032600 PROGRAM-ID. GETADDR.\n032700*\n032800* SINCE COBOL IS TOO STUPID TO ALLOW ME TO DO AN \"ADDRESS OF\"\n032900* A VARIABLE IN THE WORKING-STORAGE SECTION, THIS LITTLE PROGRAM\n033000* DOES THE EQUIVALENT.\n033100*\n033200 DATA DIVISION.\n033300 LINKAGE SECTION.\n033400 01  LS-DATA PIC X.\n033500 01  LS-ADDR POINTER.\n033600 PROCEDURE DIVISION USING LS-DATA, LS-ADDR.\n033700 DOIT.\n033800     SET LS-ADDR TO ADDRESS OF LS-DATA.\n033900     GOBACK.\n034000 END PROGRAM GETADDR.\n034100 END PROGRAM UNIX0002.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT446/FILE446.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT446", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}