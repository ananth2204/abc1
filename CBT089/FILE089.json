{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011212000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE089.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE089.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\n'", "DS1TRBAL": "b'\\x17>'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00\\x8c\\x00\\x0c\\x00\\x8d\\x00\\x01\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"DYNAM": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00y\\t\\x1f\\x00y\\t\\x1f\\x16V\\x04\\x91\\x04\\x91\\x00\\x00\\xd7\\xd4\\xc1\\xc3\\xc4\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1979-04-01T00:00:00", "modifydate": "1979-04-01T16:56:00", "lines": 1169, "newlines": 1169, "modlines": 0, "user": "PMACDON"}, "text": "         TITLE 'DYNAMIC ALLOCATION INTERFACE'                               1.\n*                                                                           2.\n*   CREATE A VERB TABLE ENTRY                                               3.\n*                                                                           4.\n         MACRO                                                              5.\n         VENT  &VERB,&NUMBER                                                6.\n         LCLA  &LABEL                                                       7.\n&LABEL   SETA  &SYSNDX                                                      8.\n         DC    AL1(L'#&LABEL)                                               9.\n         DC    AL1(&NUMBER)                                                10.\n#&LABEL  DC    C'&VERB'                                                    11.\n         MEND                                                              12.\n         SPACE 3                                                           13.\n*                                                                          14.\n*   CREATE A KEYWORD TABLE ENTRY                                           15.\n*   &KEYWORD  - THE DYNAM KEYWORD                                          16.\n*   &UAL      - THE DYNAM KEYWORD UNAMBIGOUS LENGTH                        17.\n*   &KEY      - THE SVC99 TEXT UNIT KEY                                    18.\n*   &PARM     - THE SVC99 TEXT UNIT PARM                                   19.\n*   &PARMLEN  - THE SVC99 TEXT UNIT PARM LENGTH                            20.\n*                                                                          21.\n         MACRO                                                             22.\n         KENT  &KEYWORD,&UAL,&KEY,&PARM,&PARMLEN                           23.\n         GBLA  &OFFSET                                                     24.\n         LCLA  &LABEL                                                      25.\n         LCLC  &LEN                                                        26.\n&LEN     SETC  '0'                                                         27.\n&LABEL   SETA  &SYSNDX                                                     28.\n         DC    AL1(L'#&LABEL)                                              29.\n         DC    X'&UAL'                                                     30.\n         AIF   (T'&PARM EQ 'O').NOPARM                                     31.\n         AIF   ('&PARM' NE 'SUBTABLE').KENT003                             32.\n         DC    AL1(&OFFSET+240)                                            33.\n&OFFSET  SETA  &OFFSET+1                                                   34.\n&LEN     SETC  '1'                                                         35.\n         AGO   .KENT001                                                    36.\n.KENT003 ANOP                                                              37.\n         DC    X'&PARM'                                                    38.\n&LEN     SETC  '1'                                                         39.\n         AGO   .KENT001                                                    40.\n.NOPARM  ANOP                                                              41.\n         DC    AL1(0)                                                      42.\n.KENT001 ANOP                                                              43.\n         AIF   (T'&PARMLEN EQ 'O').KENT002                                 44.\n&LEN     SETC  '&PARMLEN'                                                  45.\n.KENT002 ANOP                                                              46.\n         DC    AL1(&LEN)                                                   47.\n         DC    AL2(&KEY)                                                   48.\n#&LABEL  DC    C'&KEYWORD'                                                 49.\n         MEND                                                              50.\n         EJECT                                                             51.\n*                                                                          52.\n*   CREATE A KEYWORD HASH TABLE ENTRY                                      53.\n*                                                                          54.\n         MACRO                                                             55.\n         BEGIN &CHAR                                                       56.\nBEGIN&CHAR DS  0X                                                          57.\n         MEND                                                              58.\n         SPACE 3                                                           59.\n*                                                                          60.\n*   CREATE THE KEYWORD TABLE HASH INDEX                                    61.\n*                                                                          62.\n         MACRO                                                             63.\n         INDEX                                                             64.\nKYWDINDX DS    0F                 ALIGN ON FULLWORD BOUNDARY               65.\n         DC    A(BEGINA)                                                   66.\n         DC    A(BEGINB)                                                   67.\n         DC    A(BEGINC)                                                   68.\n         DC    A(BEGIND)                                                   69.\n         DC    A(BEGINE)                                                   70.\n         DC    A(BEGINF)                                                   71.\n         DC    A(BEGING)                                                   72.\n         DC    A(BEGINH)                                                   73.\n         DC    A(BEGINI)                                                   74.\n         DC    7A(0)                                                       75.\n         DC    A(BEGINJ)                                                   76.\n         DC    A(BEGINK)                                                   77.\n         DC    A(BEGINL)                                                   78.\n         DC    A(BEGINM)                                                   79.\n         DC    A(BEGINN)                                                   80.\n         DC    A(BEGINO)                                                   81.\n         DC    A(BEGINP)                                                   82.\n         DC    A(BEGINQ)                                                   83.\n         DC    A(BEGINR)                                                   84.\n         DC    8A(0)                                                       85.\n         DC    A(BEGINS)                                                   86.\n         DC    A(BEGINT)                                                   87.\n         DC    A(BEGINU)                                                   88.\n         DC    A(BEGINV)                                                   89.\n         DC    A(BEGINW)                                                   90.\n         DC    A(BEGINX)                                                   91.\n         DC    A(BEGINY)                                                   92.\n         DC    A(BEGINZ)                                                   93.\n         MEND                                                              94.\n         EJECT                                                             95.\n*                                                                          96.\n*   BEGIN A NEW SUBTABLE                                                   97.\n*   SET COUNT OF # OF ENTRIES FOR PREVIOUS SUBTABLE                        98.\n*   REMEMBER ENTRY POINT                                                   99.\n*                                                                         100.\n         MACRO                                                            101.\n         BEGINSUB                 &SUBNAME                                102.\n         GBLC  &SUBLIST(30)       LIST OF SUBTABLE ENTRIES                103.\n         GBLA  &SUBCT(30)         LIST OF SUBTABLE ENTRY COUNTS           104.\n         GBLA  &SUBINDX           CURRENT SUBTABLE                        105.\n         GBLA  &SUBSENT           # ENTRIES IN CURRENT SUBTABLE           106.\n         AIF   (&SUBINDX EQ 0).SUB0001 FIRST INVOCATION                   107.\n&SUBCT(&SUBINDX) SETA &SUBSENT                                            108.\n&SUBSENT SETA  0                                                          109.\n.SUB0001 ANOP                                                             110.\n&SUBINDX SETA  &SUBINDX+1                                                 111.\n&SUBLIST(&SUBINDX) SETC '&SUBNAME'                                        112.\n&SUBNAME DS    0X                                                         113.\n         MEND                                                             114.\n         SPACE 3                                                          115.\n*                                                                         116.\n*   ADD LAST SUBTABLE DEFINITION TO SUBTABLE LIST                         117.\n*                                                                         118.\n         MACRO                                                            119.\n         ENDSUB                                                           120.\n         GBLA  &SUBCT(30)                                                 121.\n         GBLA  &SUBINDX                                                   122.\n         GBLA  &SUBSENT                                                   123.\n&SUBCT(&SUBINDX) SETA &SUBSENT                                            124.\n         MEND                                                             125.\n         EJECT                                                            126.\n*                                                                         127.\n*       GENERATE THE INDEX FOR ALL SUBTABLES                              128.\n*                                                                         129.\n         MACRO                                                            130.\n&LABEL   SUBINDEX                                                         131.\n         GBLC  &SUBLIST(30)                                               132.\n         GBLA  &SUBCT(30)                                                 133.\n         GBLA  &SUBINDX                                                   134.\n         LCLA  &X                                                         135.\n         AIF   (&SUBINDX LE 15).NOERR                                     136.\n         MNOTE 16,'ONLY 16 SUBTABLES PERMITTED'                           137.\n.NOERR   ANOP                                                             138.\n&LABEL   DS    0F                                                         139.\n.LOOP    ANOP                                                             140.\n         AIF   (&X EQ &SUBINDX).#1                                        141.\n&X       SETA  &X+1                                                       142.\n         DC    AL1(&SUBCT(&X)),AL3(&SUBLIST(&X))                          143.\n         AGO   .LOOP                                                      144.\n.#1      ANOP                                                             145.\n         MEND                                                             146.\n         SPACE 3                                                          147.\n*                                                                         148.\n*   BUILD AN ENTRY IN A SUBTABLE                                          149.\n*                                                                         150.\n         MACRO                                                            151.\n         SENT  &KEY,&VALUE                                                152.\n         GBLA  &SUBSENT                                                   153.\n         LCLA  &LABEL                                                     154.\n&SUBSENT SETA  &SUBSENT+1                                                 155.\n&LABEL   SETA  &SYSNDX                                                    156.\n         DC    AL1(L'#&LABEL)                                             157.\n         DC    XL2'&VALUE'                                                158.\n#&LABEL  DC    C'&KEY'                                                    159.\n         MEND                                                             160.\n         EJECT                                                            161.\n*                                                                         162.\n*   BUILD A TABLE USED TO BUILD A DICB                                    163.\n*                                                                         164.\n         MACRO                                                            165.\n&LABEL   DICBTAB1                                                         166.\n&LABEL   DS    0H                                                         167.\n         DC    X'000400010008',XL8'00' DDNAME                             168.\n         DC    X'00050001002C',XL44'00' DSNAME                            169.\n         DC    X'000600010008',XL8'00' MEMBER NAME                        170.\n         DC    X'000700010001',X'00' STATUS                               171.\n         DC    X'000800010001',X'00' DISPOSITION                          172.\n         DC    X'000900010001',X'00'  CONDITIONAL DISPOSITION             173.\n         DC    X'000A00010002',XL2'00' DSORG                              174.\n         DC    X'000B00010002',XL2'00' LIMIT SPECIFICATION                175.\n         DC    X'000C00010001',X'00' ATTRIBUTE SPECIFICATION              176.\n         DC    X'000D00010001',X'00' LAST ENTRY SPECIFICATION             177.\n         DC    X'000E00010001',X'00' DATA SET TYPE                        178.\n         MEND                                                             179.\n         MACRO                                                            180.\n&LABEL   DICBTAB2                                                         181.\n&LABEL   DS    0H                                                         182.\n         DC    X'005500010008',XL8'00' DDNAME                             183.\n         DC    X'00560001002C',XL44'00' DSNAME                            184.\n         DC    X'005700010002',XL2'00' DSORG                              185.\n         DC    X'005D00010006',XL6'00' VOLSER                             186.\n         MEND                                                             187.\n         EJECT                                                            188.\n***********************************************************************   189.\n*                                                                         190.\n*   THIS ROUTINE PROVIDES AN INTERFACE BETWEEN A HIGH LEVEL               191.\n*   LANGUAGE SUCH AS FORTRAN, PL/1 OR COBOL, AND THE OPERATING            192.\n*   SYSTEM DYNAMIC ALLOCATION ROUTINES.                                   193.\n*                                                                         194.\n*   INSTALLATION: UNIVERSITY OF MANITOBA COMPUTER CENTRE                  195.\n*   AUTHOR:       GERRY DUECK                                             196.\n*   DATE WRITTEN: SUMMER 1978                                             197.\n*   MODS:         ADDITION OF ALLOCR VERB.                                198.\n*                 LOTS OF MUCKING ABOUT TO MAKE THIS PROGRAM              198.1\n*                 CONSISTENT WITH ITS DOCUMENATION.                       198.2\n*                   ROD ZAZUBEK FEB 1979                                  199.\n*   DOCUMENTATION: COMPLETE DOCUMENTATION ON THE USE OF DYNAM IS          199.1\n*                  AVAILABLE IN SYS4.DOCUMENT.TEXT(DYNAM)                 199.2\n*   ATTRIBUTES:   RENT                                                    199.3\n*   HINTS:        PUT THIS PROGRAM SOMEWHERE IN THE LINK LIST.            199.4\n*                                                                         200.\n*   PARAMETERS                                                            201.\n*      1 - WORK AREA. THE FIRST WORD OF THIS WORK AREA MUST CONTAIN       202.\n*          THE LENGTH OF THE AREA. A MINIMUM OF 100 BYTES IS REQUIRED.    203.\n*          IF THE LENGTH IS ZERO, AND 'INIT' IS NOT SPECIFIED (SEE        204.\n*          PARM 2) THEN A WORK AREA IS OBTAINED AND USED FOR THIS         205.\n*          CALL ONLY. THE WORKAREA IS FREED BEFORE RETURNING TO THE       206.\n*          CALLER.                                                        207.\n*      2 - REQUEST VERB. THIS FIELD IS DELIMITED BY A BLANK.              208.\n*          IF THE REQUEST VERB IS 'INIT' THEN ALL THIS CALL               209.\n*          DOES IS TO ALLOCATE A WORK AREA FOR SUBSEQUENT                 210.\n*          CALLS. IF THE VERB IS 'END' THEN THIS WORK AREA                211.\n*          IS FREED.                                                      212.\n*      3 AND SUBSEQUENT PARAMETERS.                                       213.\n*        - CHARACTER STRINGS CONSISTING OF KEYWORD/VALUE PAIRS            214.\n*          SEPARATED BY '=' AND DELIMITED BY ' ', ';'.                    215.\n*          END OF STRING IS DETERMINED BY ';'                             216.\n*          END OF LIST IS INDICATED BY THE HIGH ORDER BIT OF              217.\n*          THE PARAMETER ADDRESS.                                         218.\n*      AT LEAST 3 PARAMETERS ARE ASSUMED FOR ALL VERBS OTHER THAN         219.\n*      'INIT' AND 'END'                                                   220.\n*                                                                         221.\n*   WORK AREA.                                                            222.\n*      THE WORK AREA CONTAINS 5 SECTIONS:                                 223.\n*         - WORK AREA CONTROL BLOCK.                                      224.\n*         - DAIRFAIL PARAMETER LIST.                                      225.\n*         - DYNAMIC ALLOCATION REQUEST BLOCK.                             226.\n*         - TEXT UNITS.                                                   227.\n*         - TEXT POINTERS.                                                228.\n*      THE TEXT POINTERS ARE STACKED AT THE BOTTOM OF THE WORK AREA.      229.\n*      THE TEXT UNITS ARE HEAPED AFTER THE REQUEST BLOCK.                 230.\n*                                                                         231.\n*  ENTRY OPTIONS:                                                         232.\n*     IF VERB = 'INIT' THEN                                               233.\n*        GET WORK AREA                                                    234.\n*        PLACE ADDRESS IN PARM 1                                          235.\n*        SET FIRST BYTE OF PARM 1 TO X'0F' TO INDICATE                    236.\n*           THAT THIS IS A GETMAINED AREA                                 237.\n*        RETURN                                                           238.\n*     ELSE IF VERB = 'END' THEN                                           239.\n*        FREE THE AREA POINTED TO BY PARM ONE                             240.\n*        RETURN                                                           241.\n*     ELSE IF PARM 1 = 0 THEN                                             242.\n*        GETMAIN AREA                                                     243.\n*        PERFORM ALLOCATION                                               244.\n*        FREMAIN AREA                                                     245.\n*        RETURN                                                           246.\n*     ELSE IF HIGH ORDER BYTE OF PARM 1 IS X'0F' THEN                     247.\n*        DEREFENCE WORK AREA POINTER                                      248.\n*        PERFORM COMMAND                                                  249.\n*     ELSE                                                                250.\n*        PERFORM COMMAND USING USER SUPPLIED WORK AREA                    251.\n*                                                                         252.\n*   THREE TABLES ARE USED TO BUILD TEXT UNITS FOR SVC99.                  253.\n*                                                                         254.\n*   VERB TABLE:                                                           255.\n*      THERE ARE ONLY 7 VERBS USED BY SVC99, AND SINCE SOME OF            256.\n*      THESE ARE INFORMATION VERBS (IE THEY RETURN INFO) THEY ARE         257.\n*      NOT SUPPORTED BY THIS INTERFACE SINCE THERE IS NO TRIVIAL          258.\n*      MEANS OF RETURNING INFORMATION TO THE CALLER. THE VERB MUST        259.\n*      BE AT LEAST AS LONG AS THE LENGTH SPECIFIED IN ITS CORRESONDING    260.\n*      TABLE ENTRY. ACCESS TO THIS TABLE IS BY LINEAR SEARCH AND THE      261.\n*      RESULT IS A ONE BYTE FIELD CONTAINING THE VERB CODE. TABLE         262.\n*      ENTRIES ARE OF VARIABLE LENGTH WITH THE FIRST BYTE CONTAINING      263.\n*      THE LENGTH OF THE VARIABLE PART. THE LENGTH OVERHEAD IS 2.         264.\n*                                                                         265.\n*   KEYWORD TABLE:                                                        266.\n*      THE KEYWORD TABLE IS VERY LONG, AND THE ENTRIES ARE VARIABLE       267.\n*      LENGTH SO A BINARY SEARCH IS OUT OF THE QUESTION (UNLESS YOU       268.\n*      HAD A TAG POINTING TO EACH TABLE ENTRY -- HMMMMM...) AND A         269.\n*      LINEAR SEARCH IS TOO SLOW. A PRIMITIVE HASH TABLE IS USED          270.\n*      IN WHICH THERE IS AN ENTRY FOR EVERY LETTER AND A POINTER          271.\n*      TO THE FIRST KEYWORD TABLE ENTRY WHOSE KEYWORD STARTS WITH         272.\n*      THAT LETTER. THE KEYWORD TABLE IS SORTED ALPHABETICALLY            273.\n*      AND THE HASH TABLE IS BUILT BY INSERTING A BEGIN MACRO             274.\n*      EVERY TIME A CHANGE IN FIRST LETTER OCCURS. WHEN PERFORMING        275.\n*      A SEARCH ON THIS TABLE, COMPARISONS ARE MADE TO THE LENGTH         276.\n*      OF THE KEYWORD SPECIFIED BY THE USER. WHEN A MATCH IS FOUND,       277.\n*      THE LENGTH OF THE KEYWORD IS COMPARED TO THE MINIMUM LENGTH        278.\n*      SPECIFIED IN THE TABLE ENTRY. IT MUST BE AT LEAST THIS LONG        279.\n*      IN ORDER TO BE UNAMBIGOUS.                                         280.\n*                                                                         281.\n*   KEYWORD SUBTABLE:                                                     282.\n*     SOME OF THE ENTRIES IN THE KEYWORD TABLE REQUIRE MORE INFORMATION   283.\n*      AND FOR THESE A POINTER TO A SUBTABLE IS SUPPLIED. THIS POINTER    284.\n*      IS AN INDEX INTO ANOTHER TABLE MUCH LIKE THE HASH TABLE AND IS     285.\n*      ONLY ONE BYTE, SO ONLY 16 SUBTABLES CAN OCCUR.                     286.\n*                                                                         287.\n*   BUILDING A TEXT UNIT:                                                 288.\n*      AFTER FINDING THE KEYWORD IN THE KEYWORD TABLE, A VARIETY          289.\n*      OF EVENTS CAN OCCUR. THIS IS BECAUSE IBM IN ITS INFINITE           290.\n*      WISDOM CANNOT DECIDE ON A SIMPLE STRUCTURE FOR TEXT UNITS.         291.\n*      SOME HAVE PARAMETERS THAT ARE PLI TYPE CHAR VAR, SOME ARE          292.\n*      VARIABLE LENGTH BINARY VALUES, SOME HAVE NO PARAMETERS, ETC.       293.\n*      THE FOLLOWING ALGORITHM IS USED TO BUILD THE TEXT UNIT:            294.\n*                                                                         295.\n*      IF THE USER SUPPLIED A PARM THEN                                   296.\n*         IF A NON ZERO LENGTH IS SPECIFIED IN THE KEYWORD TABLE THEN     297.\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH BINARY VALUE       298.\n*         ELSE                                                            299.\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH STRING VALUE       300.\n*      ELIF THE PARM VALUE SUPPLIED IN THE KEYWORD TABLE IS >= X'F0'      301.\n*         CREATE A TEXT UNIT USING THE LENGTH AND VALUE SUPPLIED          302.\n*         IN THE SUBTABLE ENTRY CORRESSPONDING TO THE USER SUPPLIED       303.\n*         VALUE                                                           304.\n*      ELSE                                                               305.\n*         CREATE A TEXT UNIT USING A LENGTH OF 1 AND THE VALUE            306.\n*         SUPPLIED IN THE KEYWORD TABLE                                   307.\n*                                                                         308.\n*      THIS ALGORITHM WORKS WELL ENOUGH EXCEPT FOR TWO KLUGES:            309.\n*      CONCATENATION AND MULTI-VALUED KEYWORDS SUCH AS RECFM.             310.\n*                                                                         311.\n*      FOR CONCATENATION, THE TEXT UNIT MUST CONTAIN A VARIABLE           312.\n*      NUMBER OF VARIABLE LENGTH CHARACTER STRINGS SHOVED TOGETHER.       313.\n*      IF A ',' OCCURS AFTER A VALUE,THEN THE NEXT VALUE IS SCANNED AND   314.\n*      CONCATENATED TO THE CURRENT ONE. THIS ASSUMES THAT THE TEXT UNIT   315.\n*      IS ONE FOR WHICH CONCATENATED STRINGS ARE REQUIRED. IT IS UP TO    316.\n*      THE USER TO SUPPLY CORRECT DATA.                                   317.\n*                                                                         318.\n*      FOR THE SPECIAL KEYWORDS RECFM AND OPTCD, EACH LETTER OF THE       319.\n*      VALUE IS INDIVIDUALLY LOOKED UP IN THE SUBTABLE AND THE VALUE      320.\n*      THUS OBTAINED IS OR'ED WITH THE VALUE ALREADY IN THE TEXT UNIT.    321.\n*      IE RECFM=FBA = X'80' | X'10' | X'04' = X'94'                       322.\n*                                                                         323.\n*   RETURN CODES AND DIAGNOSTICS:                                         324.\n*      IF THE RETURN CODE FROM SVC99 IS NOT ZERO THEN A PARAMETER         325.\n*      BLOCK FOR DAIRFAIL IS BUILT. DAIRFAIL IS CALLED AND THE            326.\n*      DIAGNOSTIC THAT IT GENERATES IS WRITTEN TO THE JOB LOG (WTP).      327.\n*                                                                         328.\n*      THE INTERFACE ALSO HAS ITS OWN RETURNS CODES FOR ERRORS IS         329.\n*      DETECTS IN THE USERS PARAMETER LIST. THESE START AT 4 HIGHER       330.\n*      THAN THE RETURN CODES FROM SVC99.                                  331.\n*                                                                         332.\n*      THE RETURN CODE IS RETURNED BOTH IN REGISTER 15 AND IN THE         333.\n*      SECOND WORD OF THE WORKAREA, IF IT STILL EXISTS AT THE END         334.\n*      OF THE ROUTINE.                                                    335.\n*                                                                         336.\n*   SVC99 RETURN CODES (SEE SPL:JOB MANAGEMENT PAGE 34)                   337.\n*      00 SUCCESSFULL COMPLETION                                          338.\n*      04 ENVIRONMENT, RESOURCE FAILURE, SYSTEM ROUTINE                   339.\n*      08 REQUEST DENIED BY INSTALLATION VALIDATION ROUTINE               340.\n*      12 INVALID PARAMETER LIST                                          341.\n*                                                                         342.\n*   INTERFACE RETURN CODES                                                343.\n*      16 INVALID VERB                                                    344.\n*      20 INVALID KEYWORD                                                 345.\n*      24 WORK AREA OVERFLOW                                              346.\n*      28 VALUE NOT FOUND IN SUBTABLE: INVALID VALUE                      347.\n*                                                                         348.\n***********************************************************************   349.\n         EJECT                                                            350.\nWORKAREA DSECT                                                            351.\nWALEN    DS    F                  LENGTH OF WORK AREA                     352.\nWAS99RC  DS    A                  VALUE OF RETURN CODE FROM SVC 99        353.\nWADWORD  DS    D                  DOUBLE WORD FOR PACKS                   354.\nWABOTTOM DS    A                  END OF WORK AREA                        355.\nWAKYSTRT DS    A                  START OF KEYWORD                        356.\nWAVALAD  DS    A                  START OF VALUE                          357.\nWAVBSTRT DS    A                  START OF VERB                           358.\nWAS99RB  DS    A                  POINTER TO REQUEST BLOCK                359.\nWADFID   DS    XL2                CALLER IDENTIFIER FOR DAIR FAIL         360.\nWADFDSCT DS    A                  ADDR OF DSECT FOR CALLING DAIR FAIL     361.\nWAZEROES DS    A                  ADDRESS OF IKJEFF02                     362.\nWALASTTU DS    A                  ADDRESS OF END OF LAST TEXT UNIT        363.\nWAALLOCR DS    XL1                IS THIS AN ALLOCR VERB                  364.\nWATRUE   EQU   X'FF'                                                      365.\nWASAVE   DS    18F                SAVE AREA FOR DAIRFAIL                  366.\nWAEND    EQU   *                  END OF DSECT                            367.\n         SPACE 1                                                          368.\nVERBTABL DSECT                                                            369.\nVTVLEN   DS    X                  LENGTH OF VERB                          370.\nVTVERB   DS    X                  VERB CODE                               371.\nVTVSTR   DS    0C                 VERB STRING                             372.\nVTVEND   EQU   *                                                          373.\n         SPACE 1                                                          374.\nKYWDTABL DSECT                                                            375.\nKYWDLEN  DS    X                  KEYWORD LENGTH                          376.\nKYWDMIN  DS    X                  MINIMUM UNAMBIGOUS LENGTH               377.\nKYWDPARM DS    X                  SPECIAL PARAMETER                       378.\nKYNOPARM EQU   X'00'              FLAGS NO PARM                           379.\nKYWDPMLN DS    X                  LENGTH OF PARM IF FIXED LENGTH          380.\nKYWDKEY  DS    2X                 KEYWORD KEY                             381.\nKYWDSTRG DS    0C                 KEYWORD STRING                          382.\n         ORG   KYWDPARM                                                   383.\nKYWDSUBT DS    X                  FLAG A SUBTABLE FOR THIS ENTRY          384.\nKYWDSUBF EQU   X'F0'              FLAGS A SUBTABLE                        385.\n         ORG                                                              386.\n         SPACE 1                                                          387.\nVALUTABL DSECT                                                            388.\nVALULEN  DS    X                  LENGTH OF STRING IN THIS ENTRY          389.\nVALUPARM DS    2X                 PARAMETER VALUE FOR TEXT UNIT           390.\nVALUSTRG DS    0C                 ENTRY STRING                            391.\n         SPACE 1                                                          392.\nCHAR     DSECT                                                            393.\nCH       DS    C                                                          394.\n         EJECT                                                            395.\nDICB1    DSECT                                                            396.\nDIDDN    DS    XL14               DDNAME                                  397.\nDIDSN    DS    XL50               DSNAME                                  398.\nDIMEM    DS    XL14               MEMBER NAME                             399.\nDISTAT   DS    XL7                STATUS                                  400.\nDIDISP   DS    XL7                NORMAL DISPOSITION                      401.\nDICDISP  DS    XL7                CONDITIONAL DISPOSITION                 402.\nDIDSORG  DS    XL8                DSORG                                   403.\nDILIMIT  DS    XL8                NUMBER RESOURCES TO BE FREED            404.\nDIATTR   DS    XL7                ATTRIBUTE SPECIFICATION                 405.\nDILAST   DS    XL7                LAST ENTRY SPECIFICATION                406.\nDITYPE   DS    XL7                DATA SET TYPE (DUMMY,TERMINAL,OTHER)    407.\nDILEN1   EQU   *-DICB1                                                    408.\nDICB2    DSECT                                                            409.\nDIDDN2   DS    XL14                                                       410.\nDIDSN2   DS    XL50                                                       411.\nDIDSORG2 DS    XL8                                                        412.\nDIVOL2   DS    XL12                                                       413.\nDILEN2   EQU   *-DICB2                                                    414.\n         EJECT                                                            415.\n         IEFZB4D0                                                         416.\n         EJECT                                                            417.\n         IEFZB4D2                                                         418.\n         EJECT                                                            419.\n         IKJEFFDF DFDSECT=YES                                             420.\n         EJECT                                                            421.\n@WA      EQU   11                 BASE ADDRESS FOR WORK AREA              422.\n@RB      EQU   10                 BASE ADDRESS FOR REQUEST BLOCK          423.\n@TP      EQU   9                  BASE ADDRESS FOR TEXT POINTERS          424.\n@TU      EQU   8                  TEXT UNIT                               425.\n@CH      EQU   7                  POINTER INTO PARM STRING                426.\n@VTE     EQU   6                  VERB TABLE ENTRY                        427.\n@KTE     EQU   6                  KEYWORD TABLE ENTRY                     428.\nLENGTH   EQU   5                                                          429.\n@DF      EQU   5                  BASE ADDRESS FOR DFDSECT                430.\n         SPACE 1                                                          431.\nDYNAM    CSECT                                                            432.\n         USING DYNAM,12           ADDRESSIBILITY FOR CSECT                433.\n         SAVE  (14,12),,DYNAM-MARCH-22-1979                               434.\n         LR    R12,R15            GET BASE FOR CSECT                      435.\n         SPACE 1                                                          436.\n         USING WORKAREA,@WA       ADDRESSIBILITY FOR WORK AREA            437.\n         USING S99RB,@RB          ADDRESSIBILITY FOR REQUEST BLOCK        438.\n         USING S99TUPL,@TP        ADDRESSIBILITY FOR TEXT POINTERS        439.\n         USING S99TUNIT,@TU       ADDRESSIBILITY FOR TEXT UNITS           440.\n         USING CHAR,@CH                                                   441.\n         USING VERBTABL,@VTE      ADDRESSIBILITY FOR VERB TABLE           442.\n         USING DFDSECTD,@DF       ADDRESSIBILITY FOR DAIRFAIL DSECT       443.\n         SPACE 1                                                          444.\n*                                                                         445.\n**   DECODE ENTRY OPTIONS                                                 446.\n*                                                                         447.\n         L     R2,4(R1)           ADDRESS OF VERB                         448.\n         CLC   0(4,R2),=C'INIT'                                           449.\n         BE    INITCODE                                                   450.\n         CLC   0(3,R2),=C'END'                                            451.\n         BE    ENDCODE                                                    452.\n         L     @WA,0(R1)          ADDRESS OF WORK AREA                    453.\n         OC    WALEN,WALEN        IS IT 0?                                454.\n         BNZ   WORKGOT            NOPE                                    455.\n         LR    R2,R1              SAVE R1                                 456.\n         GETMAIN R,LV=2048                                                457.\n         L     R3,0(R2)           ADDR OF PARM 1                          458.\n         ST    R1,0(R3)           SAVE ADDRESS                            459.\n         MVI   0(R3),X'0E'        MARK TO BE FREED AFTER ALLOCATE         460.\n         L     @WA,0(R3)          GET ADDRESS                             461.\n         LA    R3,2048            LENGTH OF WORKAREA                      462.\n         ST    R3,WALEN           SET LENGTH                              463.\n         LR    R1,R2              RESTORE R1                              464.\n         B     WORKSET                                                    465.\nWORKGOT  CLI   WALEN,X'0F'        IS THIS THE ADDRESS OF A WORK AREA?     466.\n         BNE   WORKSET            NOPE, USER SUPPLIED AREA                467.\n         L     @WA,WALEN          YES, DEREFENCE IT                       468.\nWORKSET  DS    0H                                                         469.\n*                                                                         470.\n**   SET UP WORK AREA                                                     471.\n*                                                                         472.\n         L     @TP,WALEN          GET LENGTH                              473.\n         LR    R2,@WA             ADDRESS OF WORK AREA                    474.\n         LR    R3,@TP             LENGTH                                  475.\n         LR    R4,R2              FROM ADDR FOR ZAP                       476.\n         XR    R5,R5                                                      477.\n         MVCL  R2,R4              ZAP WORK AREA                           478.\n         LR    R15,R13            ADDR OF CALLERS SAVE                    479.\n         LA    R13,WASAVE                                                 480.\n         ST    R13,8(R15)         FORE LINK                               481.\n         ST    R15,4(R13)         BACK LINK                               482.\n         ST    @TP,WALEN                                                  483.\n         AR    @TP,@WA            + ADDRESS = END OF WORK AREA            484.\n         ST    @TP,WABOTTOM                                               485.\n         LA    @RB,WAEND          BEGINNING OF REQUEST BLOCK              486.\n         ST    @RB,WADFDSCT       ADDRESS OF DFDSECTD                     487.\n         LA    @RB,DFLEN(@RB)     POINT PAST DFDSECTD                     488.\n         ST    @RB,WAS99RB        ADDRESS OF REQUEST BLOCK                489.\n         LA    @TU,S99RBEND       BEGINNING OF TEXT UNIT HEAP             490.\n         MVI   S99RBLN,X'14'      LENGTH OF RB                            491.\n*                                                                         492.\n**  EXAMINE THE VERB PARAMETER                                            493.\n*                                                                         494.\n         L     @CH,4(R1)          GET SECOND PARM                         495.\n         LA    @VTE,VERBTAB       FIRST ENTRY IN VERB TABLE               496.\n         SR    R2,R2                                                      497.\nVERBLOOP DS    0H                                                         498.\n         C     @VTE,VERBTEND      END OF TABLE?                           499.\n         BE    FAILVERB           YES, VERB NOT FOUND                     500.\n         IC    R2,VTVLEN          GET LENGTH OF VERB                      501.\n         BCTR  R2,0               LESS 1                                  502.\n         EX    R2,VERBCLC         MATCH?                                  503.\n         BE    VERBPOOL           YES                                     504.\n         LA    @VTE,VTVSTR+1(R2)  GET NEXT ENTRY                          505.\n         B     VERBLOOP                                                   506.\nVERBCLC  CLC   VTVSTR,CH                                                  507.\nVERBPOOL DS    0H                                                         508.\n         CLC   CH(6),=C'ALLOCR'   VERB = ALLOCR?                          509.\n         BNE   VERBEND                                                    510.\n         MVI   WAALLOCR,WATRUE    SET ALLOCR FLAG                         511.\nVERBEND  DS    0H                                                         512.\n         MVC   S99VERB,VTVERB     MOVE IN VERB CODE                       513.\n*                                                                         514.\n*  SCAN OFF KEYWORD PARAMETERS.                                           515.\n*                                                                         516.\n         CLI   4(R1),X'80'        END OF PARM LIST?                       517.\n         BE    FAILKEY                                                    518.\n         LA    R1,8(R1)           POINT TO THIRD PARAMETER                519.\n         CLI   S99VERB,S99VRBIN   VERB = INFO?                            520.\n         BE    RETINFO            YUP                                     521.\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?                          522.\n         BE    RETALLOC                                                   523.\n         B     PARMLOOP           NOPE, START LOOP                        524.\n*                                                                         525.\n**   SET UP THE TEXT UNITS FOR DYNAMIC INFORMATION RETRIEVAL              526.\n**   THIS IS FOR THE INFO AND ALLOCR VERBS                                527.\n*                                                                         528.\nRETINFO  DS    0H                                                         529.\n         LA    R2,DILEN1(@TU)     POINT TO END OF DICB                    530.\n         MVC   0(DILEN1,@TU),DICBS1 MOVE IN MODEL TEXT UNITS              531.\n         B     RETLOOP                                                    532.\nRETALLOC DS    0H                                                         533.\n         LA    R2,DILEN2(@TU)     POINT TO END OF DICB2                   534.\n         MVC   0(DILEN2,@TU),DICBS2 MOVE IN MODEL TEXT UNITS              535.\nRETLOOP  DS    0H                                                         536.\n         S     @TP,=F'4'          POINT TO TUPTR ENTRY                    537.\n         ST    @TU,S99TUPTR       SET POINTER                             538.\n         LH    R3,S99TULNG        GET LENGTH OF PARM FIELD                539.\n         LA    @TU,S99TUPAR(R3)   POINT TO NEXT TEXT UNIT                 540.\n         CR    @TU,R2             END OF DICB?                            541.\n         BNE   RETLOOP                                                    542.\n         CLI   0(R1),X'80'        LAST PARM?                              543.\n         BE    PARMPOOL           YES                                     544.\n         LA    R1,4(R1)           POINT TO NEXT PARM                      545.\nPARMLOOP DS    0H                                                         546.\n         L     @CH,0(R1)          GET ADDRESS OF STRING                   547.\n         LA    @CH,0(@CH)         ZERO TOP BYTE                           548.\nSTRINGLP DS    0H                 START OF STRING LOOP                    549.\nSTRING01 DS    0H                                                         550.\n         CLI   CH,C';'            END OF STRING                           551.\n         BE    STRINGPL           YES, GOTO END OF STRING LOOP            552.\n         CLI   CH,C','            COMMA?                                  553.\n         BE    STRING02                                                   554.\n         CLI   CH,C' '            BLANK?                                  555.\n         BNE   STRING03                                                   556.\nSTRING02 LA    @CH,1(@CH)         GET NEXT CHAR                           557.\n         B     STRING01                                                   558.\nSTRING03 DS    0H                                                         559.\n         LA    R2,15             LENGTH OF LONGEST KEYWORD                560.\n         ST    @CH,WAKYSTRT       SAVE START ADDRESS                      561.\nKEYSLOOP DS    0H                                                         562.\n         CLI   CH,C'='            END OF KEYWORD?                         563.\n         BE    KEYSPOOL                                                   564.\n         CLI   CH,C','                                                    565.\n         BE    KEYSPOOL                                                   566.\n         CLI   CH,C';'                                                    567.\n         BE    KEYSPOOL                                                   568.\n         CLI   CH,C' '                                                    569.\n         BE    KEYSPOOL                                                   570.\n         LA    @CH,1(@CH)         GET NEXT CHAR                           571.\n         BCT   R2,KEYSLOOP                                                572.\n         B     FAILKEY            KEY WORD FAILED                         573.\n         USING KYWDTABL,@KTE      ADDRESSIBILITY FOR KEY WORD TABLE       574.\nKEYSPOOL DS    0H                                                         575.\n*                                                                         576.\n** KEYWORD - SCAN OFF AND LOOK UP A KEYWORD                               577.\n*                                                                         578.\nKEYWORD  DS    0H                                                         579.\n         L     R3,WAKYSTRT        GET FIRST CHR IN WORD                   580.\n         CLI   0(R3),C'A'                                                 581.\n         BL    FAILKEY            INVALID KEYWORD                         582.\n         CLI   0(R3),C'Z'                                                 583.\n         BH    FAILKEY            INVALID KEYWORD                         584.\n         IC    R2,0(R3) GET FIRST CHAR                                    585.\n         S     R2,=F'193'         SUBTRACT OFF VALUE OF 'A'               586.\n         SLL   R2,2               TIMES 4                                 587.\n         L     @KTE,KYWDINDX(R2)  GET ADDRESS OF FIRST ENTRY WITH         588.\n*                                 SAME FIRST LETTER                       589.\n         LR    LENGTH,@CH                                                 590.\n         S     LENGTH,WAKYSTRT    LENGTH OF KEYWORD                       591.\n         BCT   LENGTH,KEYLOOP     LESS ONE FOR EXECUTE                    592.\n         B     FAILKEY                                                    593.\nKEYLOOP  DS    0H                                                         594.\n         CLC   KYWDSTRG(1),0(R3)  CHECK FIRST CHAR                        595.\n         BNE   FAILKEY            NO LONGER IN CORRECT PART OF TABLE      596.\n         EX    LENGTH,KEYCLC      COMPARE KEYWORD TO ENTRY                597.\n         BE    KEYPOOL                                                    598.\n         IC    R2,KYWDLEN         GET LENGTH OF ENTRY                     599.\n         LA    @KTE,KYWDSTRG(R2)  GET NEXT ENTRY                          600.\n         B     KEYLOOP                                                    601.\nKEYCLC   CLC   KYWDSTRG,0(R3)                                             602.\nKEYPOOL  DS    0H                                                         603.\n         IC    R2,KYWDMIN         GET MIMINUM UNAMBIGOUS LENGTH           604.\n         LA    LENGTH,1(LENGTH)   LENGTH :=+ 1                            605.\n         CR    LENGTH,R2          CHECK LENGTH                            606.\n         BL    FAILKEY            KEY WORD TOO SHORT                      607.\n         MVC   S99TUKEY,KYWDKEY                                           608.\n         LA    R4,S99TULNG        ADDRESS OF LENGTH FIELD                 609.\n         ST    R4,WALASTTU        SAVE IT                                 610.\n         CLI   CH,C'='            DID THE USER SUPPLY A PARM              611.\n         BNE   SPECPARM           IF NOT, THEN PARM IS IN TABLE           612.\nVALUNEXT DS    0H                                                         613.\n         LA    @CH,1(@CH)         POINT PAST '='                          614.\n         ST    @CH,WAVALAD                                                615.\nVALULOOP DS    0H                                                         616.\n         CLI   CH,C' '            BLANK?                                  617.\n         BE    VALUPOOL           YES, END OF VALUE                       618.\n         CLI   CH,C','            COMMA?                                  619.\n         BE    VALUPOOL           YES, END OF VALUE                       620.\n         CLI   CH,C';'            SEMI?                                   621.\n         BE    VALUPOOL           YES, END OF VALUE                       622.\n         LA    @CH,1(@CH)         GET NEXT VALUE                          623.\n         B     VALULOOP                                                   624.\nVALUPOOL DS    0H                                                         625.\n         LR    LENGTH,@CH                                                 626.\n         S     LENGTH,WAVALAD     LENGTH OF VALUE                         627.\n         L     R4,WALASTTU                                                628.\n         STH   LENGTH,0(R4)       SAVE LENGTH                             629.\n         BCTR  LENGTH,0                                                   630.\n         BM    TEXTNUM            DONT MOVE VALUE IF NULL                 631.\n         L     R3,WAVALAD         GET START OF VALUE                      632.\n         CLI   KYWDSUBT,KYWDSUBF  IS THERE A SUBTABLE?                    633.\n         BNL   SUBTLKUP           YES                                     634.\n         CLI   KYWDPMLN,KYNOPARM  IS THERE A LENGTH SUPPLIED?             635.\n         BNE   CONVALUE                                                   636.\n         L     R4,WALASTTU                                                637.\n         LA    R4,2(R4)           POINT TO PARAMETER FIELD                638.\n         EX    LENGTH,VALUEMVC                                            639.\n         B     TEXTNUM                                                    640.\nVALUEMVC MVC   R0(0,R4),0(R3)                                             641.\nSUBTLKUP DS    0H                                                         642.\n@SUBT    EQU   4                                                          643.\n*                                                                         644.\n**   R3 POINTS TO VALUE                                                   645.\n**   R2 # OF ENTRIES IN SUBTABLE                                          646.\n**   R15 USED FOR IC,STC                                                  647.\n*                                                                         648.\n         XR    R15,R15                                                    649.\n         XR    R2,R2                                                      650.\n         IC    R2,KYWDSUBT        GET SUBTABLE INDEX POINTER              651.\n         N     R2,=F'15'          GET RID OF FLAG BITS                    652.\n         SLL   R2,2               TIMES 4                                 653.\n         L     @SUBT,VALUINDX(R2) ADDR OF SUBTABLE                        654.\n         USING VALUTABL,@SUBT     ADDRESSIBILITY FOR SUBTABLE ENTRIES     655.\n         IC    R2,VALUINDX(2)     # ENTRIES IN SUBTABLE                   656.\n         CLC   KYWDSTRG(5),=C'RECFM' SPECIAL CASE FOR RECFM               657.\n         BE    SPECCASE                                                   658.\n         CLC   KYWDSTRG(5),=C'OPTCD' AND FOR OPTION CODE                  659.\n         BE    SPECCASE                                                   660.\nSUBTLOOP DS    0H                                                         661.\n         EX    LENGTH,SUBTCLC     COMPARE ENTRIES                         662.\n         BE    SUBTPOOL           ENTRY FOUND                             663.\n         IC    R15,VALULEN        GET LENGTH OF THIS ENTRY                664.\n         LA    @SUBT,VALUSTRG(R15) GET NEXT ENTRY                         665.\n         BCT   R2,SUBTLOOP        REPEAT IF NOT AT END OF TABLE           666.\n         B     FAILVALU                                                   667.\nSUBTPOOL DS    0H                                                         668.\n         LA    LENGTH,1(LENGTH)   LENGTH +:= 1                            669.\n         CR    LENGTH,R15         CORRECT VALUE LENGTH                    670.\n         BNE   FAILVALU                                                   671.\n         IC    R2,KYWDPMLN        GET PARM LENGTH                         672.\n         STC   R2,S99TULNG+1      SAVE IT IN TEXT UNIT                    673.\n         IC    R2,CONVMASK(R2)    GET STCM MASK                           674.\n         ICM   R3,3,VALUPARM      GET VALUE                               675.\n         EX    R2,CONVSTCM        STCM R3,CONVMASK(R2),S99TUPAR           676.\n         B     TEXTNUM                                                    677.\nSUBTCLC  CLC   VALUSTRG,0(R3)                                             678.\n*                                                                         679.\n**   THIS CODE HANDLES THE SPECIAL CASE FOR KEYWORDS THAT CAN HAVE        680.\n**   MORE THAN ONE VALUE SPECIFIED. EG 'RECFM=FBA'.                       681.\n**   THE INDIVIDUAL VALUES ARE OR'ED TOGETHER                             682.\n*                                                                         683.\nSPECCASE DS    0H                                                         684.\n         LR    R0,@SUBT           SAVE ADDR OF START OF SUBTABLE          685.\n         LR    R15,R2             SAVE # SUBTABLE ENTRIES                 686.\n         L     @CH,WAVALAD        POINT TO FIRST VALUE                    687.\n         LA    LENGTH,1(LENGTH)   CORRECT LENGTH                          688.\nSPECLOOP DS    0H                                                         689.\n         CLC   CH,VALUSTRG        COMPARE CHAR WITH VALUE STRING          690.\n         BE    SPECPOOL           FOUND                                   691.\n         LA    @SUBT,VALUSTRG+1   NEXT ENTRY                              692.\n         BCT   R2,SPECLOOP        REPEAT WITH NEW ENTRY                   693.\n         B     FAILVALU           NO MORE ENTRIES LEFT                    694.\nSPECPOOL DS    0H                                                         695.\n         OC    S99TUPAR(1),VALUPARM+1                                     696.\n         LA    @CH,CH+1           NEXT CHAR IN USER SUPPLIED VALUE        697.\n         LR    @SUBT,R0           RESTORE SUBTABLE ADDR                   698.\n         LR    R2,R15             RESTORE SUBTABLE ENTRY COUNT            699.\n         BCT   LENGTH,SPECLOOP                                            700.\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH                      701.\n         B     TEXTNUM            FINISHED                                702.\n*                                                                         703.\n**   SUPPLY THE PARAMETER VALUE FOR THE TEXT UNIT FROM THE KEYWRD TABLE   704.\n*                                                                         705.\nSPECPARM DS    0H                                                         706.\n         CLI   KYWDPARM,KYNOPARM  IS THERE A SPECIAL PARM?                707.\n         BE    TEXTFINI                                                   708.\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH                      709.\n         MVC   S99TUPAR(1),KYWDPARM MOVE IN SPECIAL PARM                  710.\n         B     TEXTNUM                                                    711.\n*                                                                         712.\n**   THE USER SUPPLIED VALUE IS TO BE CONVERTED TO BINARY AND RIGHT       713.\n**   JUSTIFIED IN A FIELD WHOSE LENGTH IS SUPPLIED IN THE KEYWORD TABLE   714.\n*                                                                         715.\nCONVALUE DS    0H                                                         716.\n         LA    R2,WADWORD-1+L'WADWORD POINT 1 BYTE BEFOR END OF WADWORD   717.\n         SR    R2,LENGTH          POINT TO CORRECT ADDR FOR MVC           718.\n         XC    WADWORD,WADWORD                                            719.\n         EX    LENGTH,CONVMVC     MOVE VALUE                              720.\n         PACK  WADWORD,WADWORD    CONVERT TO PACKED DECIMAL               721.\n         CVB   R3,WADWORD         CONVERT TO BINARY                       722.\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN KYWDPARM                    723.\n         XR    R2,R2                                                      724.\n         IC    R2,S99TULNG+1      GET SPECIAL PARM                        725.\n         IC    R2,CONVMASK(R2)    SET BYTE 2 FOR STCM INST                726.\n         EX    R2,CONVSTCM        STCM R3,MASK(2),S99TUPAR                727.\n         B     TEXTNUM                                                    728.\nCONVMVC  MVC   0(0,R2),0(R3)                                              729.\nCONVSTCM STCM  0,0,S99TUPAR                                               730.\nCONVMASK DC    X'303133373F'                                              731.\n*                                                                         732.\n**   SET THE NUMBER FIELD IN THE TEXTUNIT                                 733.\n*                                                                         734.\nTEXTNUM  DS    0H                                                         735.\n         LH    R2,S99TUNUM        NUMBER OF KEYS IN THIS TEXT UNIT        736.\n         LA    R2,1(R2)           + ONE                                   737.\n         STH   R2,S99TUNUM        SAVE IT                                 738.\n         CLI   CH,C','            IS THERE ANOTHER PARAMETER?             739.\n         BNE   TEXTFINI           NO                                      740.\n         L     R4,WALASTTU        ADDRESF OF LENGTH FIELD FOR LAST TU     741.\n         AH    R4,0(R4)           ADD LENGTH OF PARAMETER                 742.\n         LA    R4,2(R4)           + 2 FOR LENGTH FIELD                    743.\n         ST    R4,WALASTTU        = ADDRESS OF NEXT LENGTH FIELD          744.\n         B     VALUNEXT           PROCESS NEXT VALUE                      745.\n*                                                                         746.\n**   COMLETE THE TEXT UNIT.                                               747.\n**   CHECK FOR WAORK AREA OVERFLOW.                                       748.\n**   ADD A NEW POINTER THE THE TEXTPOINTERS                               749.\n*                                                                         750.\nTEXTFINI DS    0H                                                         751.\n         L     R2,WALASTTU        ADDRESS OF LENGTH FIELD                 752.\n         AH    R2,0(2)            + LENGTH OF PARM                        753.\n         LA    R2,2(2)            + TWO FOR LENGTH FIELD                  754.\n         S     @TP,=F'4'          POINT TO NEW TEXT POINTER               755.\n         CR    R2,@TP             CHECK FOR OVERFLOW                      756.\n         BH    FAILOVFL           WORKAREA OVERFLOW                       757.\n         ST    @TU,S99TUPTR       SAVE ADDR OF TU                         758.\n         LR    @TU,R2             POINT TO NEW TEXT UNIT                  759.\n         B     STRINGLP                                                   760.\nSTRINGPL DS    0H                 END OF STRING LOOP                      761.\n         CLI   0(R1),X'80'        LAST PARM?                              762.\n         BE    PARMPOOL           YES                                     763.\n         LA    R1,4(R1)           POINT TO NEXT PARM                      764.\n         B     PARMLOOP                                                   765.\nPARMPOOL DS    0H                                                         766.\n         EJECT                                                            767.\n         ST    @TP,S99TXTPP       SET TEXT POINTER FIELD IN RB            768.\n         L     @TP,WABOTTOM       GET END OF WORKAREA                     769.\n         S     @TP,=F'4'          POINT TO LAST PARM                      770.\n         MVI   S99TUPTR,S99TUPLN  SET LAST TP FLAG                        771.\n         LA    R1,WAS99RB         GET ADDR OF REQUEST BLOCK               772.\n         OI    0(R1),S99RBPND     TURN ON FIRST BIT OF S99RBP             773.\nSVC99    DYNALLOC                 CALL DYNAMIC ALLOCATION RTN             774.\n         LTR   R15,R15                                                    775.\n         BNE   DAIRFAIL                                                   776.\n         CLI   S99VERB,S99VRBIN   VERB = INFO?                            777.\n         BE    INFODECO           YES, DECODE IT                          778.\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?                          779.\n         BE    INFODECO                                                   780.\n         B     RETURN                                                     781.\nDAIRFAIL DS    0H                                                         782.\n         L     @DF,WADFDSCT       ADDRESS OF DFDSECT                      783.\n         ST    @RB,DFS99RBP       ADDRESS OF SVC99 REQUEST BLOCK          784.\n         ST    R15,WAS99RC        SVC 99 RETURN CODE                      785.\n         LA    R2,WAS99RC         GET ADDR OF IT                          786.\n         ST    R2,DFRCP                                                   787.\n         LA    R2,WADFID          ADDR OF DIFD                            788.\n         ST    R2,DFIDP                                                   789.\n         MVI   WADFID,DFWTP       SPECIFY WRITE TO PROGRAMMER             790.\n         MVI   WADFID+1,DFSVC99   FROM SVC 99                             791.\n         LA    R2,WAZEROES                                                792.\n         ST    R2,DFJEFF02        ADDR OF ADDR OF IKJEFF02 (NOT KNOWN)    793.\n         LR    R1,@DF                                                     794.\n         LINK  EP=IKJEFF18        CALL DAIRFAIL                           795.\n         L     R15,WAS99RC        RESTORE RETURN CODE                     796.\n         B     RETURN                                                     797.\n         EJECT                                                            798.\n*                                                                         799.\n**   INITIALIZATION CODE                                                  800.\n*                                                                         801.\nINITCODE DS    0H                                                         802.\n         LR    R2,R1                                                      803.\n         GETMAIN R,LV=2048        GETMAIN AREA                            804.\n         L     R3,0(R2)           ADDRESS OF PARM ONE                     805.\n         ST    R1,0(R3)           SAVE ADDRESS                            806.\n         MVI   0(R3),X'0F'        INDICATE GETMAINED AREA                 807.\n         L     R3,0(R3)           POINT TO AREA                           808.\n         LA    R4,2048            LENGTH                                  809.\n         ST    R4,0(R3)           SET LENGTH                              810.\n         XR    R15,R15            SET RC                                  811.\n         XC    4(4,R3),4(R3)      ZERO WAS99RC                            812.\n         LM    R14,R12,12(R13)    RESTORE REGS                            813.\n         XR    R15,R15            SET RETURN CODE                         814.\n         XR    R0,R0                                                      815.\n         BR    R14                RETURN                                  816.\nENDCODE  DS    0H                                                         817.\n         LR    R2,R1              SAVE REG 1                              818.\n         L     R3,0(R1)           ADDRESS OF PARM 1                       819.\n         L     R3,0(R3)           ADDRESS TO BE FREED                     820.\n         L     R4,0(R3)           LENGTH TO BE FREED                      821.\n         FREEMAIN R,A=(3),LV=(4)                                          822.\n         LM    R14,R12,12(R13)    RESTORE REGS                            823.\n         XR    R15,R15            SET RETURN CODE                         824.\n         XR    R0,R0                                                      825.\n         BR    R14                RETURN                                  826.\n         EJECT                                                            827.\n*                                                                         828.\n**   DECODE INFO RETURNED BY SVC99                                        829.\n*                                                                         830.\nINFODECO DS    0H                                                         831.\n         L     R1,4(R13)                                                  832.\n         L     R1,24(R1)          RECOVER R1                              833.\n         L     R1,8(R1)           POINT TO THIRD PARM                     834.\n         L     @TU,S99TUPTR       POINT TO FIRST TEXT UNIT                835.\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?                          836.\n         BE    INFO1                                                      837.\n         LA    R0,DILEN1(@TU)     POINT TO END OF DICB                    838.\n         LA    R4,DICBS1          ADDRESS OF DICB MODEL                   839.\n         B     INFO2                                                      840.\nINFO1    DS    0H                                                         841.\n         LA    R0,DILEN2(@TU)     POINT TO END OF DICB                    842.\n         LA    R4,DICBS2          ADDRESS OF DICB MODEL                   843.\nINFO2    DS    0H                                                         844.\nINFOLOOP DS    0H                                                         845.\n         LH    R3,S99TULNG        GET LENGTH                              846.\n         BCTR  R3,0               LESS ONE FOR EXECUTE                    847.\n         LTR   R3,R3                                                      848.\n         BL    INFOLEN                                                    849.\n         EX    R3,INFOMVC                                                 850.\nINFOLEN  LH    R3,S99TULNG-S99TUNIT(,R4) GET MAX PARM LENGTH              851.\n         AR    R1,R3              POINT TO NEXT INFO PARM                 852.\n         LA    @TU,S99TUPAR(R3)   NEXT TEXT UNIT                          853.\n         LA    R4,S99TUPAR-S99TUNIT(R3,4) NEXT TEXT UNIT IN MODEL         854.\n         CR    @TU,R0             END OF INFO TU'S?                       855.\n         BNE   INFOLOOP                                                   856.\n         XR    R15,R15            SET RETURN CODE                         857.\n         B     RETURN                                                     858.\nINFOMVC  MVC   0(0,R1),S99TUPAR                                           859.\n         SPACE 3                                                          860.\nFAILVERB DS    0H                                                         861.\n         LA    R15,16                                                     862.\n         B     RETURN                                                     863.\nFAILKEY  DS    0H                                                         864.\n         LA    R15,20                                                     865.\n         B     RETURN                                                     866.\nFAILVALU DS    0H                                                         867.\n         LA    R15,28                                                     868.\n         B     RETURN                                                     869.\nFAILOVFL DS    0H                                                         870.\n         LA    R15,24                                                     871.\n         B     RETURN                                                     872.\n         EJECT                                                            873.\nRETURN   DS    0H                                                         874.\n         ST    R15,WAS99RC        RETURN CODE                             875.\n         L     R13,4(R13)         RESTORE SAVEAREA ADDR                   876.\n         ST    R15,16(R13)        SET RETURN CODE                         877.\n         L     R1,24(R13)         RESTORE R1                              878.\n         L     R1,0(R1)           ADDR OF PARM 1                          879.\n         CLI   0(R1),X'0E'        IS AREA TO BE FREED?                    880.\n         BNE   RETURN01                                                   881.\n         LR    R2,R1              SAVE R1                                 882.\n         L     R1,0(R1)           ADDR TO BE FREED                        883.\n         FREEMAIN R,LV=2048,A=(1)                                         884.\n         LR    R1,R2              RESTORE R1                              885.\n         XC    0(4,R1),0(R1)      SET PARM 1 TO ZEROES                    886.\nRETURN01 DS    0H                                                         887.\n         LM    R14,R12,12(R13)    RESTORE REGS                            888.\n         LR    R0,R15                                                     889.\n         BR    R14                RETURN                                  890.\n         EJECT                                                            891.\n         PRINT NOGEN                                                      892.\n         INDEX                                                            893.\nVERBTAB  DS    0H                                                         894.\n         VENT  ALLOC,S99VRBAL                                             895.\n         VENT  ALLOCR,S99VRBAL                                            896.\n         VENT  UNALLOC,S99VRBUN                                           897.\n         VENT  CONCAT,S99VRBCC                                            898.\n         VENT  UNCONCAT,S99VRBDC                                          899.\n         VENT  REMOVE,S99VRBRI                                            900.\n         VENT  DDALLOC,S99VRBDN                                           901.\n         VENT  INFO,S99VRBIN                                              902.\nVERBMARK DS    0X                                                         903.\nVERBTEND DC    A(VERBMARK)                                                904.\n         SPACE 1                                                          905.\nKYWDTAB  DS    0H                                                         906.\n         BEGIN A                                                          907.\n         KENT  ABE,3,DALEROPT,20                                          908.\n         KENT  ACC,3,DALEROPT,80                                          909.\n         KENT  AL,2,DALLABEL,40                                           910.\n         KENT  ALIGNMENT,3,DALFCBAV,08                                    911.\n         KENT  ALX,3,DALSPFRM,02                                          912.\n         KENT  AUL,3,DALLABEL,48                                          913.\n         BEGIN B                                                          914.\n         KENT  BLKSIZE,3,DALBLKSZ,,2                                      915.\n         KENT  BLOCK,3,DALBLKLN,,3                                        916.\n         KENT  BLP,3,DALLABEL,10                                          917.\n         KENT  BUFALN,4,DALBFALN,SUBTABLE                                 918.\n         KENT  BUFIN,4,DALBUFIN,,2                                        919.\n         KENT  BUFL,4,DALBUFL,,2                                          920.\n         KENT  BUFMAX,4,DALBUFMX,,1                                       921.\n         KENT  BUFNO,4,DALBUFNO,,1                                        922.\n         KENT  BUFOFF,5,DALBUFOF,,1                                       923.\n         KENT  BUFOUT,5,DALBUFOU,,1                                       924.\n         KENT  BUFRQ,4,DALBUFRQ,,1                                        925.\n         KENT  BUFSZ,4,DALBUFSZ,,2                                        926.\n         KENT  BUFTEK,4,DALBFTEK,SUBTABLE                                 927.\n         BEGIN C                                                          928.\n         KENT  CATLG,2,DALNDISP,02                                        929.\n         KENT  CCATLG,2,DALCDISP,02                                       930.\n         KENT  CDELETE,2,DALCDISP,04                                      931.\n         KENT  CHARSET,2,DALUVRFY                                         932.\n         KENT  CKEEP,2,DALCDISP,08                                        933.\n         KENT  CLOSE,2,DALCLOSE                                           934.\n         KENT  CODE,3,DALCODE,SUBTABLE                                    935.\n         KENT  CONTIG,3,DALSPFRM,08                                       936.\n         KENT  CONVERT,4,DALCNVRT                                         937.\n         KENT  COPIES,3,DALCOPYS,,1                                       938.\n         KENT  CUNCATLG,2,DALCDISP,01                                     939.\n         KENT  CYL,2,DALCYL                                               940.\n         BEGIN D                                                          941.\n         KENT  DCBDD,5,DALDCBDD                                           942.\n         KENT  DCBDS,5,DALDCBDS                                           943.\n         KENT  DDNAME,2,DALDDNAM                                          944.\n         KENT  DELETE,2,DALNDISP,04                                       945.\n         KENT  DIRECTORY,2,DALDIR,,3                                      946.\n         KENT  DSNAME,3,DALDSNAM                                          947.\n         KENT  DSORG,3,DALDSORG,SUBTABLE,2                                948.\n         KENT  DSSEQ,3,DALDSSEQ,,2                                        949.\n         KENT  DUMMY,2,DALDUMMY                                           950.\n         KENT  D1600,5,DALDEN,C3                                          951.\n         KENT  D6250,5,DALDEN,D3                                          952.\n         KENT  D800,4,DALDEN,83                                           953.\n         BEGIN E                                                          954.\n         KENT  EXPIRY,1,DALEXPDT                                          955.\n         BEGIN F                                                          956.\n         KENT  F,1,DALRECFM,80                                            957.\n         KENT  FA,2,DALRECFM,84                                           958.\n         KENT  FAS,3,DALRECFM,8C                                          959.\n         KENT  FB,2,DALRECFM,C0                                           960.\n         KENT  FBA,3,DALRECFM,C4                                          961.\n         KENT  FBAS,4,DALRECFM,9C                                         962.\n         KENT  FBM,3,DALRECFM,C2                                          963.\n         KENT  FBMS,4,DALRECFM,8A                                         964.\n         KENT  FBS,3,DALRECFM,98                                          965.\n         KENT  FM,2,DALRECFM,82                                           966.\n         KENT  FMS,3,DALRECFM,8A                                          967.\n         KENT  FOLDMODE,3,DALUFOLD                                        968.\n         KENT  FORMS,3,DALFCBIM                                           969.\n         KENT  FS,2,DALRECFM,88                                           970.\n         BEGIN G                                                          971.\n         BEGIN H                                                          972.\n         KENT  HOLD,1,DALSHOLD                                            973.\n         BEGIN I                                                          974.\n         KENT  INPUT,1,DALINOUT,40                                        975.\n         BEGIN J                                                          976.\n         BEGIN K                                                          977.\n         KENT  KEEP,3,DALNDISP,08                                         978.\n         KENT  KEYLEN,3,DALKYLEN,,1                                       979.\n         BEGIN L                                                          980.\n         KENT  LIMCT,2,DALLIMCT,,3                                        981.\n         KENT  LRECL,2,DALLRECL,,2                                        982.\n         KENT  LTM,2,DALLABEL,21                                          983.\n         BEGIN M                                                          984.\n         KENT  MEMBER,2,DALMEMBR                                          985.\n         KENT  MOD,3,DALSTATS,02                                          986.\n         KENT  MODE,4,DALMODE,SUBTABLE                                    987.\n         KENT  MSVGP,2,DALMSVGP                                           988.\n         KENT  MXIG,2,DALSPFRM,04                                         989.\n         BEGIN N                                                          990.\n         KENT  NCP,2,DALNCP,,1                                            991.\n         KENT  NEW,3,DALSTATS,04                                          992.\n         KENT  NEWCLASS,4,DUNOVCLS                                        993.\n         KENT  NEWHOLD,4,DUNOVSHQ                                         994.\n         KENT  NEWNOHOLD,4,DUNOVSNH                                       995.\n         KENT  NEWREMOTE,4,DUNOVSUS                                       996.\n         KENT  NL,2,DALLABEL,01                                           997.\n         KENT  NSL,3,DALLABEL,04                                          998.\n         BEGIN O                                                          999.\n         KENT  OLD,3,DALSTATS,01                                         1000.\n         KENT  OPTCD,2,DALOPTCD,SUBTABLE                                 1001.\n         KENT  OUTLIM,4,DALOUTLM,,3                                      1002.\n         KENT  OUTPUT,3,DALINOUT,80                                      1003.\n         BEGIN P                                                         1004.\n         KENT  PARALLEL,3,DALPARAL                                       1005.\n         KENT  PASSREAD,5,DALPASPR,10                                    1006.\n         KENT  PASSWORD,6,DALPASSW                                       1007.\n         KENT  PASSWRITE,6,DALPASPR,30                                   1008.\n         KENT  PERMANENT,2,DALPERMA                                      1009.\n         KENT  PERMCONCAT,5,DCCPERMC                                     1009.1\n         KENT  PRIMARY,4,DALPRIME,,3                                     1010.\n         KENT  PRIVATE,4,DALPRIVT                                        1011.\n         KENT  PRTSP,3,DALPRTSP,SUBTABLE                                 1012.\n         BEGIN Q                                                         1013.\n         KENT  QNAME,1,DALQNAME                                          1014.\n         BEGIN R                                                         1015.\n         KENT  RECFM,3,DALRECFM,SUBTABLE                                 1016.\n         KENT  RELNO,3,DINRELNO,,2                                       1017.\n         KENT  REMOTE,3,DALSUSER                                         1018.\n         KENT  REMOVE,5,DUNREMOV                                         1019.\n         KENT  RETENTION,3,DALRETPD,,2                                   1020.\n         KENT  RLSE,2,DALRLSE                                            1021.\n         KENT  ROUND,2,DALROUND                                          1022.\n         BEGIN S                                                         1023.\n         KENT  SECONDARY,3,DALSECND,,3                                   1024.\n         KENT  SHR,2,DALSTATS,08                                         1025.\n         KENT  SKP,2,DALEROPT,40                                         1026.\n         KENT  SL,2,DALLABEL,02                                          1027.\n         KENT  SUL,3,DALLABEL,08                                         1028.\n         KENT  SYSOFORM,5,DALSFMNO                                       1029.\n         KENT  SYSOPROG,5,DALSPGNM                                       1030.\n         KENT  SYSOUT,5,DALSYSOU                                         1031.\n         BEGIN T                                                         1032.\n         KENT  TERMFILE,2,DALTERM                                        1033.\n         KENT  TRK,3,DALTRK                                              1034.\n         KENT  TRTCH,3,DALTRTCH,SUBTABLE                                 1035.\n         BEGIN U                                                         1036.\n         KENT  U,1,DALRECFM,C0                                           1037.\n         KENT  UCS,2,DALUCS                                              1038.\n         KENT  UNALLOC,3,DUNUNALC                                        1039.\n         KENT  UNCATLG,3,DALNDISP,01                                     1040.\n         KENT  UNICOUNT,4,DALUNCNT,,1                                    1041.\n         KENT  UNIT,4,DALUNIT                                            1042.\n         BEGIN V                                                         1043.\n         KENT  V,1,DALRECFM,40                                           1044.\n         KENT  VA,2,DALRECFM,44                                          1045.\n         KENT  VAS,3,DALRECFM,4C                                         1046.\n         KENT  VB,2,DALRECFM,50                                          1047.\n         KENT  VBA,3,DALRECFM,64                                         1048.\n         KENT  VBAS,4,DALRECFM,5C                                        1049.\n         KENT  VBM,3,DALRECFM,62                                         1050.\n         KENT  VBMS,4,DALRECFM,5A                                        1051.\n         KENT  VBS,3,DALRECFM,58                                         1052.\n         KENT  VERIFY,2,DALFCBAV,04                                      1053.\n         KENT  VM,2,DALRECFM,42                                          1054.\n         KENT  VMS,3,DALRECFM,4A                                         1055.\n         KENT  VOLUME,3,DALVLSER                                         1056.\n         KENT  VOLCOUNT,4,DALVLCNT,,1                                    1057.\n         KENT  VOLREF,4,DALVLRDS                                         1058.\n         KENT  VOLSEQ,4,DALVLSEQ,,2                                      1059.\n         KENT  VS,2,DALRECFM,48                                          1060.\n         BEGIN W                                                         1061.\n         BEGIN X                                                         1062.\n         BEGIN Y                                                         1063.\n         BEGIN Z                                                         1064.\nKYWDMARK DS    0X                                                        1065.\nKYWDTEND DC    A(KYWDMARK)                                               1066.\n         BEGINSUB BFALN           OFFSET 00                              1067.\n         SENT  F,01                                                      1068.\n         SENT  D,02                                                      1069.\n         BEGINSUB BFTEK           OFFSET 04                              1070.\n         SENT  D,08                                                      1071.\n         SENT  E,10                                                      1072.\n         SENT  R,20                                                      1073.\n         SENT  S,40                                                      1074.\n         SENT  A,60                                                      1075.\n         BEGINSUB CODE                                                   1076.\n         SENT  T,02                                                      1077.\n         SENT  A,04                                                      1078.\n         SENT  C,08                                                      1079.\n         SENT  B,10                                                      1080.\n         SENT  F,20                                                      1081.\n         SENT  I,40                                                      1082.\n         SENT  N,80                                                      1083.\n         BEGINSUB DSORG                                                  1084.\n         SENT  TQ,0020                                                   1085.\n         SENT  TX,0040                                                   1086.\n         SENT  GS,0080                                                   1087.\n         SENT  PO,0200                                                   1088.\n         SENT  MQ,0400                                                   1089.\n         SENT  CQ,0800                                                   1090.\n         SENT  CX,1000                                                   1091.\n         SENT  DA,2000                                                   1092.\n         SENT  PS,4000                                                   1093.\n         SENT  POU,0300                                                  1094.\n         SENT  DAU,2100                                                  1095.\n         SENT  PSU,4100                                                  1096.\n         SENT  TCAM,0004                                                 1097.\n         SENT  VSAM,0008                                                 1098.\n         BEGINSUB MODE                                                   1099.\n         SENT  E,40                                                      1100.\n         SENT  C,80                                                      1101.\n         SENT  ER,50                                                     1102.\n         SENT  EO,60                                                     1103.\n         SENT  CR,90                                                     1104.\n         SENT  CO,A0                                                     1105.\n         BEGINSUB OPTCD           OFFSET 04                              1106.\n         SENT  R,01                                                      1107.\n         SENT  T,02                                                      1108.\n         SENT  Z,04                                                      1109.\n         SENT  A,08                                                      1110.\n         SENT  Q,08                                                      1111.\n         SENT  F,10                                                      1112.\n         SENT  H,10                                                      1113.\n         SENT  O,10                                                      1114.\n         SENT  C,20                                                      1115.\n         SENT  E,20                                                      1116.\n         SENT  B,40                                                      1117.\n         SENT  U,40                                                      1118.\n         SENT  W,80                                                      1119.\n         BEGINSUB PRTSP                                                  1120.\n         SENT  0,01                                                      1121.\n         SENT  1,09                                                      1122.\n         SENT  2,11                                                      1123.\n         SENT  3,19                                                      1124.\n         BEGINSUB RECFM                                                  1125.\n         SENT  M,02                                                      1126.\n         SENT  R,02                                                      1127.\n         SENT  A,04                                                      1128.\n         SENT  G,04                                                      1129.\n         SENT  S,08                                                      1130.\n         SENT  B,10                                                      1131.\n         SENT  D,20                                                      1132.\n         SENT  T,20                                                      1133.\n         SENT  V,40                                                      1134.\n         SENT  F,80                                                      1135.\n         SENT  U,C0                                                      1136.\n         BEGINSUB TRTCH                                                  1137.\n         SENT  C,13                                                      1138.\n         SENT  E,23                                                      1139.\n         SENT  T,3B                                                      1140.\n         SENT  ET,2B                                                     1141.\n         ENDSUB                                                          1142.\nVALUINDX SUBINDEX                                                        1143.\nDICBS1   DICBTAB1                                                        1144.\nDICBS2   DICBTAB2                                                        1145.\nR0       EQU   0                                                         1146.\nR1       EQU   1                                                         1147.\nR2       EQU   2                                                         1148.\nR3       EQU   3                                                         1149.\nR4       EQU   4                                                         1150.\nR5       EQU   5                                                         1151.\nR6       EQU   6                                                         1152.\nR7       EQU   7                                                         1153.\nR8       EQU   8                                                         1154.\nR9       EQU   9                                                         1155.\nR10      EQU   10                                                        1156.\nR11      EQU   11                                                        1157.\nR12      EQU   12                                                        1158.\nR13      EQU   13                                                        1159.\nR14      EQU   14                                                        1160.\nR15      EQU   15                                                        1161.\n         END                                                             1162.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNAMDOC": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00y\\t\\x1f\\x00y\\t\\x1f\\x16V\\x021\\x021\\x00\\x00\\xd7\\xd4\\xc1\\xc3\\xc4\\xd6\\xd5@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1979-04-01T00:00:00", "modifydate": "1979-04-01T16:56:00", "lines": 561, "newlines": 561, "modlines": 0, "user": "PMACDON"}, "text": "1\n-\n-\n-\n0                                     DYNAM\n+                                     _____\n-\n                           Dynamic Allocation Interface\n-\n           INTRODUCTION\n+          INTRODUCTION\n+          ____________\n0             DYNAM provides an interface between a high level language\n           such as COBOL or PLI, and SVC 99, the system dynamic alloca-\n           tion  routine.    It  allows  the  user  to  acquire  system\n           resources as the need arises and  free them when they are no\n           longer required.  DYNAM  takes  simple parameters consisting\n           of character strings and translates them into the text units\n           required by  SVC 99.   In addition,   a special  information\n           retrieval function can be called to provide all the informa-\n           tion available about a particular allocation.  This informa-\n           tion is returned in a fixed format data structure.  For more\n           information about SVC 99 refer to the IBM manual:\n0               OS/VS2 MVS SYSTEM PROGRAMMING LIBRARY: JOB MANAGEMENT\n                    GC28-0627-2\n-\n           WORK AREA\n+          WORK AREA\n+          ____ ____\n0             The first parameter to DYNAM is a workarea.   This worka-\n           rea can be supplied  by the user or can be  obtained for the\n           user by DYNAM. If obtained by DYNAM it can be used by subse-\n           quent calls to DYNAM and freed later, or can be acquired and\n           freed on the same call.\n0             If the user supplies a work  area,  the first word of the\n           work area must contain the length in bytes.\n0                (FORTRAN)\n                     INTEGER WORK(500)/2000/\n                     CALL DYNAM (WORK, . . .)\n                 (PLI)\n                     DCL 1 WORKAREA,\n                       2 WA_LENGTH   FIXED BIN (31) INIT (2000),\n                       2 FILLER      CHAR (2000);\n                     CALL DYNAM (WORK, . . .)\n-\n0                                     - 1 -\n1\n-\n-                (COBOL)\n                     01  WORK.\n                         02  WORK-LEN  PIC S9(9) COMP SYNC VALUE +2000.\n                         02  WORK-AREA PIC X(2000).\n                     . . .\n                     CALL 'DYNAM' USING WORK . . .\n0             If DYNAM is to supply its own work area, this can be done\n           explicitly by coding:\n0               DCL WORK    FIXED BIN(31) INIT(0);\n                CALL DYNAM (WORK, 'INIT')\n0             WORK then becomes  a reference to the  acquired work area\n           and must  be specified on all  subsequent calls to  DYNAM as\n           the first parameter.  The workarea can later be free by cod-\n           ing:\n0               CALL DYNAM (WORK, 'END')\n0             If dynam is to acquire a  workarea to be used only during\n           one invocation,  the workarea is implicitly acquired by cod-\n           ing:\n0               CALL DYNAM (0, . . .)\n0             This is  used when the  programmer only wants  to perform\n           one dynamic allocation and then continue with his program.\n-\n           OPERATIONS\n+          OPERATIONS\n+          __________\n0             The second parameter to DYNAM describes the operation you\n           wish to perform.    There are two different  types of opera-\n           tions:  those  that have to  do with dynamic  allocation and\n           those that have to do with the interface itself.\n0               Interface Operations\n                INIT     - aquire a work area\n                END      - free the work area previously acquired by INIT\n0               Allocation Operations\n                ALLOC     - allocate a dataset\n                UNALLOC   - unallocate a dataset\n                CONCAT    - concatenate 2 or more DD names\n                UNCONCAT  - unconcatenate previously concatenated DD names.\n                REMOVE    - remove in-use attribute\n                DDALLOC   - allocate a DD name\n                INFO      - retrieve information about an allocation\n-\n-                                     - 2 -\n1\n-\n-          OPERANDS\n+          OPERANDS\n+          ________\n0             The  third  and  subsequent  parameters  supply  operands\n           needed to perform dynamic allocation.  Only one operand par-\n           ameter is required  but it is sometimes convenient  to use a\n           larger number, for example when obtaining allocation parame-\n           ters from  a user  at a terminal  in an  interactive manner.\n           Normal OS linkage  conventions flag the last  parameter in a\n           parameter list so a variable  number of parameters is easily\n           allowed if the high level host language supports it. Operand\n           parameters must be delimited on the right by a semicolon.\n0             Operands consist of a keyword and an optional value.   if\n           a value  is present it is  separated from the keyword  by an\n           equals (=)  sign.  Operands are separated from each other by\n           one of more spaces and an operand string is delimited on the\n           right by  a semicolon.    If a  keyword requires  a list  of\n           values, the values in the list are separated by a comma.\n0             Keywords may be  abbreviated by specifying enough  of the\n           keyword so that it is unambiguous.  In cases where an entire\n           keyword is  the same as  the first  few letters of  a longer\n           keyword, ambiguity is resolved by picking the first keyword.\n           In describing  DYNAM keywords below the  unambiguous portion\n           of the keyword is written in uppercase.\n0             An attempt has  been made to minimize the  number of key-\n           words that require values.\n-\n           ALLOC\n+          ALLOC\n+          _____\n0             This operation is equivalent to dataset allocation during\n           job step  initialization;  the  parameter list  to DYNAM  is\n           equivalent to a DD statement.   You  can request most of the\n           JCL services that you can code on a DD statement.   In addi-\n           tion you can  specify dataset passwords which do  not have a\n           JCL equivalent.   The following is  a list of JCL parameters\n           and the equivalent DYNAM keyword.\n0               DD card parameter      DYNAM keyword\n+               __ ____ _________      _____ _______\n                COPIES=num             COPies=num\n                DCB=(*.ddname)         DCBDD=ddname\n                DCB=(dsname)           DCBDS=dsname\n                DCB=(BLKSIZE=num)      BLKsize=num\n                DCB=(BUFALN=key)       BUFAln=key  (key = D|F)\n                DCB=(BUFIN=num)        BUFIN=num\n                DCB=(BUFL=num)         BUFL=num\n                DCB=(BUFMAX=num)       BUFMAX=num\n                DCB=(BUFNO=num)        BUFNo=num\n                DCB=(BUFOFF=num)       BUFOFf=num\n                DCB=(BUFOUT=num)       BUFOUt=num\n                DCB=(BUFRQ=num)        BUFRq=num\n0                                     - 3 -\n1\n-\n-               DCB=(BUFSIZE=num)      BUFSize=num\n                DCB=(BUFTEK=key)       BUFTEK=key  (key = A|E|R|S)\n                DCB=(CODE=key)         CODe=key  (key = A|B|C|F|I|N|T)\n                DCB=(DEN=2)            D800\n                DCB=(DEN=3)            D1600\n                DCB=(DEN=4)            D6250\n                DCB=(DIAGNS=TRACE)     TRAce\n                DCB=(DSORG=key)        DSORG=key  (key = CX|DA|DAU|GS|\n                                                         PO|PS|PSU|TQ|\n                                                         TX|TCAM|VSAM)\n                DCB=(EROPT=ABE)        ABE\n                DCB=(EROPT=ACC)        ACC\n                DCB=(EROPT=SKP)        SKp\n                DCB=(KEYLEN=num)       KEYlen=num\n                DCB=(LIMCT=num)        LImct=num\n                DCB=(LRECL=num)        LRecl=num\n                DCB=(MODE=key)         MODE=key  (key = C|CO|CR|E|EO|ER)\n                DCB=(NCP=num)          NCP=num\n                DCB=(OPTCD=key)        OPTCD=key  (see note 1 below)\n                DCB=(PRTSP=key)        PRTsp=key  (key = 0|1|2|3)\n                DCB=(RECFM=key)        RECFM=key  (see note 2 below)\n                DCB=(RECFM=F)          F\n                DCB=(RECFM=FA)         FA\n                DCB=(RECFM=FAS)        FAS\n                DCB=(RECFM=FB)         FB\n                DCB=(RECFM=FBA)        FBA\n                DCB=(RECFM=FBAS)       FBAS\n                DCB=(RECFM=FBM)        FBM\n                DCB=(RECFM=FBS)        FBMS\n                DCB=(RECFM=FM)         FM\n                DCB=(RECFM=FMS)        FMS\n                DCB=(RECFM=FS)         FS\n                DCB=(RECFM=U)          U\n                DCB=(RECFM=V)          V\n                DCB=(RECFM=VA)         VA\n                DCB=(RECFM=VAS)        VAS\n                DCB=(RECFM=VB)         VB\n                DCB=(RECFM=VBA)        VBA\n                DCB=(RECFM=VBAS)       VBAS\n                DCB=(RECFM=VBM)        VBM\n                DCB=(RECFM=VBMS)       VBMS\n                DCB=(RECFM=VBS)        VBS\n                DCB=(RECFM=VM)         VM\n                DCB=(RECFM=VMS)        VMS\n                DCB=(RECFM=VS)         VS\n                DCB=(STACK=num)        STACK=num\n                DCB=(TRTCH=key)        TRTch=key  (key = C|E|ET|T)\n                DISP=(MOD)             MOD\n                DISP=(NEW)             NEW\n                DISP=(OLD)             OLD\n                DISP=(SHR)             SHr\n                DISP=(,CATLG)          CAtlg\n                DISP=(,DELETE)         DElete\n                DISP=(,KEEP)           KEEp\n0                                     - 4 -\n1\n-\n-               DISP=(,UNCATLG)        UNCatlg\n                DISP=(,,CATLG)         CCatlg\n                DISP=(,,DELETE)        CDelete\n                DISP=(,,KEEP)          CKeep\n                DISP=(,,UNCATLG)       CUncatlg\n                DSN=...(name)          MEmber=name\n                DSN=dsname             DSN=dsname\n                DUMMY                  DUMMY\n                FCB=(name)             FORms=name\n                FCB=(,ALIGN)           ALIgn\n                FCB=(,VERIFY)          VERIFYF\n                FREE=CLOSE             CLose\n                HOLD=YES               Hold\n                LABEL=(num)            DSSeq=num\n                LABEL=(EXPDT=yyddd)    Expdt=yyddd\n                LABEL=(RETPD=num)      RETpd=num\n                LABEL=(,AL)            AL\n                LABEL=(,AUL)           AUL\n                LABEL=(,BLP)           BLP\n                LABEL=(,LTM)           LTM\n                LABEL=(,NL)            NL\n                LABEL=(,NSL)           NSL\n                LABEL=(,SL)            SL\n                LABEL=(,SUL)           SUL\n                LABEL=(,,IN)           Input\n                LABEL=(,,NOPWREAD)     PASSWRite\n                LABEL=(,,OUT)          OUTput\n                LABEL=(,,PASSWORD)     PASSRead\n                MSVGP=name             MSVGP=name\n                OUTLIM=num             OUTLim=num\n                QNAME=name             QNAME=name\n                SPACE=(num)            BLOck=num\n                SPACE=(CYL)            CYL\n                SPACE=(TRK)            TRK\n                SPACE=(,(num))         PRIMary=num\n                SPACE=(,(,num))        SECondary=num\n                SPACE=(,(,,num))       DIRectory=num\n                SPACE=(,,RLSE)         RLse\n                SPACE=(,,,ALX)         ALX\n                SPACE=(,,,CONTIG)      CONtig\n                SPACE=(,,,MXIG)        MXIG\n                SPACE=(,,,,ROUND)      ROund\n                SYSOUT=name            SYSOUt=name\n                SYSOUT=(,name)         SYSOUProg=name\n                SYSOUT=(,,name)        SYSOUForms=name\n                TERM=TS                TErmfile\n                UCS=(,FOLD)            FOLdmode\n                UCS=(,,VERIFY)         VERIFYC\n                UNIT=name              UNIT=name\n                UNIT=(,num)            UNITCount=num\n                UNIT=(,P)              PARallel\n                VOL=(,,num)            VOLSeq=num\n                VOL=(,,,num)           VOLCount=num\n                VOL=(,,,,REF=name)     VOLRef=name\n0                                     - 5 -\n1\n-\n-               VOL=(,,,,SER=(name))   VOLume=name\n                VOL=(PRIVATE)          PRIVate\n0               note 1:  For a complete listing of possible values\n                for the  OPTCD parameter refer  to the  IBM manual\n                OS/VS2 JCL.\n0               note 2:  In  addition to the stand  alone keywords\n                for Fixed, Undefined,  and Variable record formats\n                others may  be coded by  using the  RECFM=key key-\n                word.   For  a complete listing  refer to  the IBM\n                manual OS/VS2 JCL.\n0               Others                 DYNAM keyword\n+               ______                 _____ _______\n                DDNAME on DD card      DD=name\n                PASSWORD               PASSWOrd=password\n                /*ROUTE dest           REMOTE=dest\n                assign the permanently\n                allocated attribute to\n                this resource          PERManent\n                assign the convertible\n                attribute to this\n                resource               CONVert\n0               note:  For a complete  explaination of the perman-\n                ently  allocated  attribute  and  the  convertible\n                attribute refer to SPL: JOB MANAGEMENT.\n-\n           ALLOCR\n+          ALLOCR\n+          ______\n0             This operation is the same  as ALLOC except that informa-\n           tion about the  allocation is to be returned  to the caller.\n           The  third parameter  to DYNAM  is  a data  area into  which\n           information is to be placed.  The fourth and subsequent par-\n           ameters are the same as  the third and subsequent parameters\n           for the ALLOC operation.\n0             The information data area has the following format:\n0               DCL 1 RETURN_AREA UNALIGNED,\n                  2 DDNAME          CHAR (8),\n                  2 DSNAME          CHAR (44),\n                  2 DSORG           BIT (16),\n                  2 VOLSER          CHAR (6);\n0               DDNAME, DSNAME, and VOLSER are self explanatory.\n                DSORG is one of:\n                    x'0000' - dsorg cannot be determined\n                    x'0004' - TR\n                    x'0008' - VSAM\n                    X'0020' - TQ\n                    X'0040' - TX\n0                                     - 6 -\n1\n-\n-                   X'0080' - GS\n                    X'0200' - PO\n                    X'0300' - POU\n                    X'0400' - MQ\n                    X'0800' - CQ\n                    X'1000' - CX\n                    X'2000' - DA\n                    X'2100' - DAU\n                    X'4000' - PS\n                    X'4100' - PSU\n                    X'8000' - IS\n                    X'8100' - ISU\n-\n           UNALLOC\n+          UNALLOC\n+          _______\n0             This operation unallocates a dataset  by DD name or data-\n           set name.  The following is a list of JCL parameters and the\n           equivalent DYNAM keyword.\n0               DD card parameter      DYNAM keyword\n+               __ ____ _________      _____ _______\n                DISP=(,CATLG)          CAtlg\n                DISP=(,DELETE)         DElete\n                DISP=(,KEEP)           KEEp\n                DISP=(,UNCATLG)        UNCatlg\n                DSN=...(name)          MEmber=name\n                DSN=dsname             DSN=dsname\n0               Others                 DYNAM keyword\n+               ______                 _____ _______\n                DDNAME on DD card      DD=name\n                change SYSOUT class    NEWClass=name\n                put SYSOUT output\n                into the hold queue    NEWHold\n                take SYSOUT output\n                out of the hold queue  NEWNohold\n                change SYSOUT\n                routing                NEWRemote=name\n                unallocate the\n                resource even if\n                permanently allocated  UNAlloc\n                remove the in-use\n                attribute even if\n                permanently allocated  REMOVe\n-\n           CONCAT AND UNCONCAT\n+          CONCAT AND UNCONCAT\n+          ______ ___ ________\n0             These two operations concatenate  and unconcatenate data-\n           sets.  The datasets can only be identified by using DD names\n           of datasets currently  allocated so therefore the  only key-\n           word needed in the third parameter to DYNAM is DD=name.   To\n-                                     - 7 -\n1\n-\n-          concatentate  you  provide   a  list  of  DD   names,   e.g.\n           DD=SYSLIB,FILE2,FILE3.   The contenation  is then identified\n           by the  first DD name in  the list.   To  unconcatenate just\n           provide DD=name.\n-\n           INFO\n+          INFO\n+          ____\n0             This operation requests information retrieval.  The third\n           parameter to  DYNAM is  a data  area into  which information\n           will be placed.    The fourth and subsequent  parameters are\n           operands that  specify the allocations about  which informa-\n           tion is to be retrieved.\n0             The information data area has the following format:\n0               DCL 1 INFORMATION UNALIGNED,\n                  2 DDNAME        CHAR (8),\n                  2 DSNAME        CHAR (44),\n                  2 MEMBER        CHAR (8),\n                  2 STATUS        BIT (8),\n                  2 DISP          BIT (8),\n                  2 COND_DISP     BIT (8),\n                  2 DSORG         BIT (16),\n                  2 LIMIT         FIXED BIN (15),\n                  2 ATTRIBUTE     BIT (8),\n                  2 LAST_ENTRY    BIT (8),\n                  2 TYPE          BIT (8);\n0               DDNAME DSNAME and MEMBER are self explanatory.  If\n                no member is allocated then the contents of MEMBER\n                will be unchanged.\n                STATUS,  DISP  and COND_DISP are the  same respec-\n                tively as those  specified in the DISP  operand in\n                JCL.\n                STATUS is one of:\n                    X'01' - OLD\n                    X'02' - MOD\n                    X'04' - NEW\n                    X'08' - SHR\n                DISP is one of:\n                    X'01' - UNCATLG\n                    X'02' - CATLG\n                    X'04' - DELETE\n                    X'08' - KEEP\n                    X'10' - PASS\n                COND_DISP is one of:\n                    X'01' - UNCATLG\n                    X'02' - CATLG\n                    X'04' - DELETE\n                    X'08' - KEEP\n                DSORG is one of:\n                    x'0000' - dsorg cannot be determined\n0                                     - 8 -\n1\n-\n-                   x'0004' - TR\n                    x'0008' - VSAM\n                    X'0020' - TQ\n                    X'0040' - TX\n                    X'0080' - GS\n                    X'0200' - PO\n                    X'0300' - POU\n                    X'0400' - MQ\n                    X'0800' - CQ\n                    X'1000' - CX\n                    X'2000' - DA\n                    X'2100' - DAU\n                    X'4000' - PS\n                    X'4100' - PSU\n                    X'8000' - IS\n                    X'8100' - ISU\n                LIMIT is  the number of  allocations that  must be\n                freed before a new allocation can be made.\n                ATTRIBUTE is one of:\n                    X'80' - permanently concatenated attribute\n                    X'40' - in-use attribute\n                    X'20' - permanently allocated attribute\n                    X'10' - convertible attribute\n                    X'08' - dynamically allocated attribute\n                LAST_ENTRY indicates if this is  the last entry in\n                the list of allocations for  this job.  It has the\n                values:\n                    X'80' - if last entry\n                    X'00' - otherwise\n                TYPE is one of:\n                    X'80' - DUMMY data set\n                    X'40' - terminal\n                    X'00' - otherwise\n0             The following DYNAM keywords are supported:\n0               Purpose               DYNAM keyword\n+               _______               _____ _______\n                select an allocation\n                by DD name            DD=name\n                select an allocation\n                by DSN name           DSN=name\n                select an allocation\n                by a relative number  RELNO=num\n-\n           EXCEPTIONAL CONDITIONS\n+          EXCEPTIONAL CONDITIONS\n+          ___________ __________\n0             DYNAM returns a  condition code in registers 15  and 0 as\n           well as in  the second word of  the workarea if one  is pro-\n           vided.   The  use of register 15  allows a COBOL  program to\n           interrogate the return code through the COBOL special regis-\n           ter RETURN-CODE and allows the same  for PLI through the use\n-                                     - 9 -\n1\n-\n-          of  the pseudo  function PLIRETV.    The use  of register  0\n           allows FORTRAN and  PASCAL to call DYNAM as  a function that\n           returns an integer result.  If  the actual allocation fails,\n           then messages are written to the job log and the return code\n           from SVC 99 is returned to the user.  If DYNAM itself fails,\n           then the return code is a DYNAM return code.\n0               SVC 99 Return Codes\n                  00 successful allocation\n                  04 environment, resource, or system routine failure\n                  08 request denied by installation validation routine\n                  12 invalid SVC 99 parameter list\n                DYNAM Return Codes\n                  16 invalid verb (parameter 2)\n                  20 invalid keyword (parameter 3)\n                  24 work area overflow\n                  28 invalid value keyword\n-\n           EXAMPLES\n+          EXAMPLES\n+          ________\n0          1) In PLI allocate a new dataset:\n                DCL WORK    FIXED BIN(31) INIT(0);\n                DCL PLIRETV BUILTIN;\n                DCL DYNAM   ENTRY OPTIONS (ASSEMBLER,RETCODE);\n                FETCH DYNAM;\n                CALL DYNAM(WORK, 'INIT ');\n                CALL DYNAM(WORK, 'ALLOC ', 'DSN=USERID.DATA NEW CATLG;',\n                                           'VOL=USER01;',\n                                           'TRK PRIMARY=1 SECONDARY=1;',\n                                           'LRECL=80 BLKSIZE=6080 FB;')\n                IF PLIRETV = 0 THEN\n                    code to execute upon success of allocation\n                ELSE\n                    code to execute upon failure of allocation\n0          2) In COBOL allocate an exsisting dataset to ddname SYSIN:\n                01  DY-STUFF.\n                    02  DY-WORK         PIC S9(9) COMP SYNC VALUE +0.\n                    02  DY-WORK         PIC X(5) VALUE 'INIT '.\n                    02  DY-ALLOC        PIC X(6) VALUE 'ALLOC '.\n                    02  DY-TEXT         PIC X(100).\n                    . . .\n                PROCEDURE DIVISION.\n                    CALL 'DYNAM' USING DY-WORK DY-INIT.\n                    . . .\n                    MOVE 'DSN=A0011.AA.T999D DD=SYSIN SHR;' TO\n                         DY-TEXT.\n                    CALL 'DYNAM' USING DY-WORK DY-ALLOC DY-TEXT.\n                    IF RETURN-CODE = ZERO THEN\n                        whatever\n                    ELSE\n                        do something to recover gracefully.\n0                                     - 10 -\n1\n-\n-          3) In PLI allocate a concatenation:\n                . . .\n                CALL DYNAM(WORK, 'INIT ');\n                . . .\n                CALL DYNAM(WORK, 'ALLOC ', 'DSN=SYS1.USERLINK;',\n                                           'DD=SYSLIB SHR;');\n                CALL DYNAM(WORK, 'ALLOC ', 'DSN=SYS1.LINKUMW;',\n                                           'DD=FILE2 SHR;');\n                CALL DYNAM(WORK, 'CONCAT ', 'DD=SYSLIB,FILE2;');\n0          4)    Other  sample programs are  available in a  PDS called\n           SYS4.DYNAM.SAMPLES.  The programs included are:\n0                DYASM    - an assembler program to test DYNAM\n                 DYLISTA  - an assembler program to list allocated datasets\n                 DYCOB    - a cobol program that allocates cobol datasets\n                 DYPLI    - a pli program to test DYNAM\n                 DYFORT   - a fortran program\n-\n           LANGAUGE CONSIDERATIONS\n+          LANGAUGE CONSIDERATIONS\n+          ________ ______________\n0             In PLI remember to put in:\n                 DCL DYNAM  ENTRY OPTIONS(ASM,RETCODE);\n                 FETCH DYNAM;  /* JUST FETCH DYNAM ONCE */\n0             In FORTRAN  and PASCAL remember  to link edit  DYNAM into\n           the load module you wish to produce.  This is done by adding\n           SYS1.LINKUMW to the  SYSLIB datasets at link  edit or loader\n           time.\n-\n-\n-\n-\n-\n-\n-\n-\n                                      - 11 -\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT089/FILE089.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT089", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}