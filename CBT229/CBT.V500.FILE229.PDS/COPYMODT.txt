COPYMODT TITLE 'TAPE COPY PROGRAM - COMMENTS AND MACROS'
**************************************************************
********************************************************************
*    THIS IS CODE FROM THE CBT TAPE AND MODIFIED AT SUNGARD.
*    THIS CODE HAS A SOMEWHAT DIFFERENT DISCLAIMER THAN USUAL:
*  I THINK THIS CODE HAS WORKED AT SUNGARD.  THERE IS
*  NO GUARANTEE THAT THE CODE WILL WORK ANYWHERE ELSE.
*  NEITHER SUNGARD NOR THE AUTHOR MAY BE HELD
*  REPONSIBLE FOR ANY DAMAGE CAUSED BY THIS CODE.
********************************************************************
**************************************************************
**                                                          **
**  MODULE: COPYMODT.                                       **
**          THIS IS, EFFECTIVELY, A NEW PROGRAM WHICH IS    **
**          BASED UPON COPYMODS BY PAUL TOKHEIM, AFAFC,     **
**          WHICH WAS FOUND IN FILE 229 OF THE CBT TAPE.    **
**                                                          **
**  PURPOSE: COPY ALL FILES OF AN INPUT TAPE TO ONE OR MORE **
**     OUTPUT TAPES.                                        **
**                                                          **
**  METHOD: COPYMODS FIRST DETERMINES WHICH OUTPUT DD'S ARE **
**    PRESENT. THE INPUT TAPE IS READ USING EXCP AND THE    **
**    APPROPRIATE OUTPUT TAPES ARE WRITTEN USING EXCP.      **
**    ANY LABELS ON THE INPUT WILL BE COPIED. ANY LABELS ON **
**    THE OUTPUT TAPES WILL BE DESTROYED.  IF AN ERROR      **
**    OCCURS ON THE INPUT TAPE, THE PROGRAM WILL PROMPT THE **
**    OPERATOR TO ACKNOWLEDGE.  IF AN ERROR OCCURS ON AN    **
**    OUTPUT TAPE, THE PROGRAM WILL QUIT WRITING TO THE     **
**    TAPE WHICH ENCOUNTERED THE ERROR.                     **
**    ALL OUTX AND OUTXX DD STATEMENTS WILL BE WRITTEN TO.  **
**                                                          **
**************************************************************
*
*  MODIFIED BY ART TANSKY OF SUNGARD 01/08/92:
*        AFTER HITTING A BAD BLOCK, CONTINUE
*        ALLOW FOR BLOCKSIZES UP TO 64K
*        ERROR MESSAGES FOR TRUNCATED BLOCKS
*
*  MODIFIED BY ART TANSKY OF SUNGARD 09/08/92:
*        IF THE FIRST BLOCKS LOOK LIKE A HEADER LABEL,
*        LOOK FOR AN EOV LABEL, AND STOP AFTER ITS TRAILING
*        TAPE MARK.  THIS WILL KEEP THE PROGRAM FROM GETTING
*        I/O ERRORS AND/OR RUNNING OFF THE END OF THE TAPE.
*
*  MODIFIED BY ART TANSKY OF SUNGARD 09/09/92:
*        I KEPT THE LOGIC AND I/O OF THE ORIGINAL, BUT I CODED
*        IT WITH SUBROUTINES AND A TABLE OF OPEN DCB ADDRESSES
*        RATHER THAN HAVING SEPERATE OPENS, WRITES, AND CLOSES
*        FOR EACH POSSIBLE OUTPUT DCB.
*
*  MODIFIED BY ART TANSKY OF SUNGARD 10/01/93:
*        USE MORE LABELS AND LESS HARD-CODED OFFSETS.
*        IF TAPE IS HAS STANDARD LABELS, STOP ONLY FOR ONE OF
*        TWO CASES:  TM AFTER AN EOV1 LABEL READ, OR DOUBLE
*        TAPE MARK AFTER AN EOF1 LABEL READ.  THIS ALLOWS SL
*        TAPES WITH NULL FILES TO BE COPIED SUCCESSFULLY.
*        IF PARM=BLP, USE OLD LOGIC AND STOP IF AND ONLY IF
*        A DOUBLE TAPE MARK IS REACHED.
*
*  MODIFIED BY ART TANSKY OF SUNGARD 09/08/94:
*        COPY TO ANY OUTX OR OUTXX DD STATEMENT.  UP TO 36 X 36
*        SUPPORTED, BUT IT WOULD BE A ONE-LINE CHANGE TO
*        SUPPORT MORE (WHO NEEDS THEM?)
*
**************************************************************
**                                                          **
**       REGISTER USAGE:                                    **
**       (ANY UNMENTIONED MIGHT BE WORK REGISTERS)          **
**             R6  - @ DCB IN USE                           **
**             R7  - POINTER INTO TABLE OF DCB ADDRESSES    **
**             R8  - FILE NUMBER                            **
**             R9  - BLOCK COUNT                            **
**             R10 - BYTE COUNT - HIGH ORDER                **
**             R11 - BYTE COUNT - LOW  ORDER                **
**             R12 - BASE REGISTER                          **
**************************************************************
         TITLE 'TAPE COPY PROGRAM - ENTRY'
         YREGS
COPYMODT PRIME R12,RMK=NO
*                        COMMENT='ORIGINALLY FROM CBT TAPE FILE#229'
         BAL   R9,CHECKPRM         CHECK PARM FIELD
         TITLE 'TAPE COPY PROGRAM - INITIALIZATION'
         SR    R9,R9          ZERO FOR BLOCK COUNT
         LR    R10,R9              ZERO BYTE COUNT
         LR    R11,R9              ZERO BYTE COUNT
         LA    R8,1           INITIALIZE FOR FILE NUMBER
*
*  DETERMINE WHICH OUTPUT DD'S ARE PRESENT
*
         L     R2,CVTPTR      R2=CVT
         L     R2,CVTTCBP-CVT(R2)     R2=TCB WORDS
         L     R2,4(,R2)      R2=MY TCB
         L     R2,TCBTIO-TCB(R2)     R2=TIOT
         LA    R2,TIOENTRY-TIOT1(R2)    R2=FIRST DD ENTRY
         USING TIOENTRY,R2
         L     R7,=A(DCBADRSO)     @ TABLE OF OPENABLE DCB ADDRESSES
TIOTLOOP DS    0H
         CLC   0(4,R2),HEXZERO  END OF TIOT?
         BE    OPENS          YES
         CLC   =C'OUT',TIOEDDNM   ONE WE WANT?
         BNE   TIOTNEXT           NO
         CLI   TIOEDDNM+5,C' '     OUTX OR OUTXX?
         BNE   TIOTNEXT           NO
         GETMAIN R,LV=LENDCB
         MVC   0(LENDCB,R1),IN  PRIME THE DCB AREA
         USING IHADCB,R1
         MVC   DCBDDNAM,TIOEDDNM   COPY DDNAME TO DCB
         ST    R1,0(R7)            SAVE DCB @
         MVC   4(8,R7),TIOEDDNM    COPY DDNAME TO OUR TABLE
         LA    R7,12(R7)           @ NEXT DCB ADDRESS
         C     R7,=A(PASTDCBO)     PAST LAST ONE?
         BNL   OPENS                 YES, STOP LOOKING
TIOTNEXT SR    R3,R3
         IC    R3,TIOELNGH    R3=LENGTH OF DD ENTRY
         AR    R2,R3          R2=NEXT DD ENTRY
         B     TIOTLOOP       GO CHECK IT
         DROP  R2
         DROP  R1
         TITLE 'TAPE COPY PROGRAM - OPEN OUTPUT FILES'
*
*  OPEN ALL FILES
*
OPENS    DS    0H
         OPEN  (IN,,SYSPRINT,OUTPUT)
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         MVI   LINE,C'1'           PRIME WITH NEW PAGE
         PUT   SYSPRINT,LINE       AND WRITE IT
         L     R7,=A(DCBADRSO)     @ TABLE OF OPEN DCBS
         CLC   =F'0',0(R7)         ANY OUTPUT DDS?
         BE    NOOUT               NO, NO NEED TO CONTINUE
OPENLOOP DS    0H
         ICM   R6,B'1111',0(R7)    @ POSSIBLE DCB
         BZ    READIN                IF ZERO, WE'RE DONE
         OPEN  ((R6),OUTPUT)       OPEN THIS DCB
OPENNEXT DS    0H                  FIND NEXT DCB TO OPEN
         LA    R7,12(R7)            POINT TO NEXT DCB ADDRESS
         C     R7,=A(PASTDCBO)     PAST END OF TABLE?
         BL    OPENLOOP              NO, CONTINUE OPENS
         TITLE 'TAPE COPY PROGRAM - MAIN PROCESSING - READ'
*
*  READ INPUT
*
READIN   MVI   INECB,X'00'    INITIALIZE ECB
         NI    LBLFLAGS,FF-READTM SHOW WE'VE NOT READ A TAPE MARK
         CLI   OUTCCW,X'1F'        WAS LAST WRITE A TAPE MARK?
         BNE   READNOTM              NO, CONTINUE NORMALLY
         OI    LBLFLAGS,READTM   SHOW PREVIOUS BLOCK WAS A TAPE MARK
READNOTM DS    0H
         EXCP  INIOB          READ
         WAIT  ECB=INECB      WAIT FOR READ
         TM    INCSW+4,X'01'  WAS TM READ?
         BO    READIN1        YES
         CLI   INECB,X'7F'    DID READ COMPLETE NORMALLY?
         BNE   INERR          NO -- ERROR
RETLONG1 DS    0H                  WRONG LENGTH OKAY SO FAR
         MVI   OUTCCW,X'01'   SET OUTPUT CCW TO WRITE
         LH    R2,INCCW+6     R2=READ LENGTH
         N     R2,=X'0000FFFF'     MAKE POSITIVE
         LH    R3,INCSW+6     R3=RESIDUAL BYTE COUNT
         N     R3,=X'0000FFFF'     MAKE POSITIVE
         BZ    LONGBLK             PROBABLY BLOCK WAS TOO LONG
RETLONG  DS    0H                  RETURN FROM LONG BLOCK CONDITION
         SR    R2,R3          R2=ACTUAL LENGTH READ
         STH   R2,OUTCCW+6    STORE FOR WRITE
         AR    R11,R2              ADD TO BYTE COUNT
         BNO   NOOVER              B IF NO OVERFLOW
         LA    R10,1(R10)          ELSE, ADD OVERFLOW TO HIGH WORD
         X     R11,=X'7FFFFFFF'    GET RID OF SIGN BIT
NOOVER   DS    0H
         SPACE 1
*   CHECK FOR VOL1 LABEL
         TM    LBLFLAGS,BLP        SHOULD WE BYPASS CHECK FOR LABEL?
         BO    NOTLBL2               YES
         CH    R2,=H'80'           BLOCK LENGTH = 80?
         BNE   NOTLBL2               NO, CAN'T BE A LABEL
         TM    FLAG2,FIRSTBLK      IS THIS THE 1ST READ?
         BO    NOTLBL1               NO, CAN'T BE A VOL1
         CLC   =C'VOL1',INAREA     VOL1?
         BNE   NOTLBL1               NO, ISN'T A VOL1
         OI    LBLFLAGS,LABELED      YES, TAPE HAS LABELS
         MVI   LINE,C' '           CLEAR OUT ...
         MVC   LINE+1(L'LINE-1),LINE    MESSAGE LINE
         MVC   LINE(L'SLTAPE),SLTAPE MOVE MESSAGE
         PUT   SYSPRINT,LINE         TELL USER
         B     NOTLBL2               AND CONTINUE
NOTLBL1  DS    0H
         TM    LBLFLAGS,LABELED    IS TAPE LABELED?
         BNO   NOTLBL2               NO, CONTINUE
*   CHECK FOR EOV1 LABEL
         TM    LBLFLAGS,READTM   PREVIOUS BLOCK A TAPE MARK?
         BNO   NOTLBL2               NO, CAN'T BE EOV1/EOF1 HERE
         CLC   =C'EOV1',INAREA     IS IT EOV1 LABEL?
         BNE   NOTEOV1               NO
         TRT   INAREA+48(12),NUMERICT   ALL NUMERIC ON EOV1
         BNZ   NOTEOV1                  NOT A PROPER EOV1
         OI    LBLFLAGS,GOTEOV     SHOW WE GOT OUR EOV1 LABEL
         MVI   LINE,C' '           CLEAR OUT ...
         MVC   LINE+1(L'LINE-1),LINE    MESSAGE LINE
         MVC   LINE(L'EOV1FNDM),EOV1FNDM  MOVE MESSAGE
         PUT   SYSPRINT,LINE            TELL USER
         WTO   'CBT999  EOV1 LABEL DETECTED - WILL STOP AT NEXT TAPE MAR
               RK'
NOTEOV1  DS    0H
         NI    LBLFLAGS,FF-GOTEOF  SHOW WE DON'T HAVE EOF1
         CLC   =C'EOF1',INAREA     IS IT EOF1 LABEL?
         BNE   NOTEOF1               NO
         OI    LBLFLAGS,GOTEOF     YES
NOTEOF1  DS    0H
NOTLBL2  DS    0H
         OI    FLAG2,FIRSTBLK      SHOW WE'VE READ A BLOCK
         SPACE 1
         LA    R9,1(,R9)      ADD 1 TO COUNT OF DATA BLOCKS
         B     WRITE1         CONTINUE
LONGBLK  DS    0H                  SEE IF BLOCK REALLY IS TOO LONG
*        NOTE:  A TOO-LONG BLOCK IS INDICATED BY BOTH THE
*              INCORRECT LENGTH INDICATOR SET, AND THE RESIDUAL BYTE
*              COUNT = 0.
         TM    INCSW+5,X'40'       INCORRECT LENGTH?
         BNO   RETLONG               NO, EXACT CORRECT LENGTH
         MVI   INECB,X'00'    RESET ECB
         CVD   R8,DWORD       CONVERT FILE NUMBER TO DECIMAL
         OI    DWORD+7,X'0F'  MAKE SIGN READABLE
         UNPK  LONGMSGF,DWORD+5(3)  UNPACK FILE NUMBER
         PUT   SYSPRINT,LONGMSG   WRITE IT
         TM    FLAG2,TRUNC         HAVE WE WTO'D FOR TRUNCATION?
         BO    RETLONG               YES, DON'T DO IT AGAIN
         OI    FLAG2,TRUNC         MARK AS WTO'D
         OI    FLAG2,ERR      INDICATE THAT THERE WAS AN ERROR
         WTOR  'INPUT BLOCK TRUNCATED     -- ACKNOWLEDGE',REPLY,       X
               6,INECB,ROUTCDE=(3)
         WAIT  ECB=INECB      WAIT FOR OPERATOR TO SEE THE MESSAGE
         B     RETLONG             IGNORE ERROR
         SPACE 1
READIN1  DS    0H                  TAPE MARK HAS BEEN READ
         NI    FLAG2,FF-TRUNC      CLEAR WTO FLAGS
         CVD   R8,DWORD       CONVERT FILE NUMBER TO DECIMAL
         MVC   FILE#,FILE#PAT
         MVC   FILEBLKS,BLKSPAT
         MVC   FILEBYTE,BYTESPAT
         ED    FILE#,DWORD+5       FILE NUMBER
         CVD   R9,DWORD       CONVERT BLOCK COUNT TO DECIMAL
         ED    FILEBLKS,DWORD+4    NUMBER OF BLOCKS
         CVD   R10,DWORD           HIGH ORDER WORD OF BYTE COUNT
         ZAP   QWORD,DWORD
         MP    QWORD,TWO31         MULT BY 2 TO THE 31ST
         CVD   R11,DWORD           LOW ORDER WORD
         AP    QWORD,DWORD         AND ADD IT IN
         ED    FILEBYTE,QWORD+6
         PUT   SYSPRINT,FILEDONE  WRITE IT
         LM    R4,R5,TOTBYTES
         AR    R5,R11              LOW ORDER COUNT
         BNO   NOOVRTOT            B IF NO OVERFLOW
         N     R5,=X'7FFFFFFF'     GET RID OF SIGN BYTE
         LA    R4,1(R4)            ADD 1 TO HIGH ORDER
NOOVRTOT DS    0H
         AR    R4,R10              HIGH ORDER
         STM   R4,R5,TOTBYTES      AND STORE THE NEW TOTAL
         SR    R9,R9          ZERO BLOCK COUNT FOR NEW FILE
         LR    R10,R9              ZERO BYTE COUNT
         LR    R11,R9              ZERO BYTE COUNT
         LA    R8,1(,R8)      ADD 1 TO FILE NUMBER
         TM    LBLFLAGS,LABELED    LABELED TAPE?
         BNO   NOTLBL3               NO
         TM    LBLFLAGS,GOTEOF     IF LABELED, HAVE WE READ EOF1 LABEL?
         BNO   NOTEOF2               NO, DON'T CHECK FOR 2ND TM
NOTLBL3  DS    0H
         CLI   OUTCCW,X'1F'   2ND TM IN A ROW?
         BE    READIN2        YES - END OF VOLUME
NOTEOF2  DS    0H
         MVI   OUTCCW,X'1F'   SET OUTPUT CCW TO WRITE TM
         TM    LBLFLAGS,GOTEOV     IF EOV LABEL, ONLY ONE TM
         BO    READIN2               YES, STOP WITH THIS TM
         B     WRITE1         GO WRITE TM TO OUTPUTS
READIN2  OI    FLAG2,EOV      INDICATE EOV ON INPUT
         TITLE 'TAPE COPY PROGRAM - MAIN PROCESSING - WRITE'
*
*  WRITE TO OUTPUT TAPES
*
WRITE1   DS    0H                  WRITE TO ALL OPEN OUTPUTS
         L     R7,=A(DCBADRSO)     @ TABLE OF OPEN DCB @'S
WRITLOOP DS    0H
         ICM   R6,B'1111',0(R7)    POSSIBLE @ OF OPEN DCB
         BZ    WRITE11               END OF TABLE
         BM    WRITNEXT              BAD TAPE, GO TO NEXT
         ST    R6,OUTDCBPT    PUT IT IN IOB
         MVI   OUTECB,X'00'   INITIALIZE ECB
         EXCP  OUTIOB         WRITE IT
         WAIT  ECB=OUTECB     WAIT FOR IT
         CLI   OUTECB,X'7F'   WRITE COMPLETE NORMALLY?
         BNE   OUTERR         NO - ERROR
WRITNEXT DS    0H
         LA    R7,12(R7)           NEXT ENTRY IN DCB @ TABLE
         C     R7,=A(PASTDCBO)     PAST END OF TABLE?
         BL    WRITLOOP              NO, TRY NEXT ADDRESS
         SPACE 1
WRITE11  TM    FLAG2,EOV      END OF INPUT?
         BO    ENDINPUT       YES - QUIT
         B     READIN         NO - LOOP
         TITLE 'TAPE COPY PROGRAM - ERROR ROUTINES - INPUT'
*
*  ERROR ON INPUT -- TELL OPERATOR, BUT DON'T ABEND
*
INERR    DS    0H
         TM    INCSW+5,X'40'       INCORRECT LENGTH?
         BO    RETLONG1              YES, ACCEPT IT FOR NOW
         TM    INCSW+4,X'02'  UNIT CHECK?
         BZ    INERR1         NO - ASSUME DATA CHECK
         MVC   LINE(133),INEQC  SET ERROR MESSAGE
         MVC   INERR3+16(25),INEQC+12  MOVE ERROR MESSAGE TO WTOR
         B     INERR2         CONTINUE
INERR1   MVC   LINE(133),INDCK  SET ERROR MESSAGE
         MVC   INERR3+16(20),INDCK+12  MOVE ERROR MESSAGE TO WTOR
INERR2   PUT   SYSPRINT,LINE  WRITE ERROR MESSAGE
         MVI   INECB,X'00'    RESET ECB
INERR3   WTOR  '                          -- ACKNOWLEDGE',REPLY,       X
               6,INECB,ROUTCDE=(3)
         WAIT  ECB=INECB      WAIT FOR OPERATOR TO SEE THE MESSAGE
         B     READIN              IGNORE ERROR
         TITLE 'TAPE COPY PROGRAM - ERROR ROUTINES - OUTPUT'
*
*  ERROR ON OUTPUT -- TELL OPERATOR THEN TERMINATE THIS OUTPUT ONLY
*
OUTERR   TM    OUTCSW+4,X'02' UNIT CHECK?
         BZ    OUTERR1        NO - ASSUME DATA CHECK
         MVC   LINE(133),OUTEQC  SET ERROR MESSAGE
         B     OUTERR2        CONTINUE
OUTERR1  MVC   LINE(133),OUTDCK  SET ERROR MESSAGE
OUTERR2  DS    0H
         USING IHADCB,R6
         LH    R4,DCBTIOT     R4=TIOT OFFSET
         DROP  R6
         L     R5,CVTPTR      R2=CVT
         L     R5,CVTTCBP-CVT(R5)     R2=TCB WORDS
         L     R5,4(,R5)      R2=MY TCB
         L     R5,TCBTIO-TCB(R5)     R2=TIOT
         AR    R4,R5          R4=TIOT ENTRY FOR THIS OUTPUT
         USING TIOENTRY,R4
         MVC   LINE+35(5),TIOEDDNM  MOVE DDNAME TO MESSAGE
         L     R4,TIOEFSRT-1  R4=UCB FOR THIS OUTPUT
         DROP  R4
         USING UCBOB,R4
         MVC   LINE+47(3),UCBNAME MOVE UNIT ADDRESS TO MESSAGE
         MVC   LINE+59(6),UCBVOLI MOVE VOLSER TO MESSAGE
         DROP  R4
         PUT   SYSPRINT,LINE  WRITE MESSAGE
         MVC   OUTERR4+16(53),LINE+12  MOVE ERROR MESSAGE TO WTOR
OUTERR3  MVI   OUTECB,X'00'   RESET ECB
OUTERR4  WTOR  '                                                       X
               -- REPLY GO TO CONTINUE',REPLY,2,OUTECB,ROUTCDE=(3)
         WAIT  ECB=OUTECB     WAIT FOR OPERATOR TO REPLY
         CLC   REPLY(2),=C'GO'  CORRECT REPLY?
         BNE   OUTERR3        NO - TRY AGAIN
* ---- DON'T REWIND BEFORE CLOSE BECAUSE IT ERASES DATA ALREADY WRITTEN
*        ST    R6,REWDCBPT    PUT DCB ADDRESS IN REWIND IOB
*        EXCP  REWIOB         REWIND TAPE WITH THE ERROR
*                             DON'T BOTHER WAITING FOR REWIND
* ------------------------------------------------------------------- *
         OI    FLAG2,ERR      INDICATE THAT THERE WAS AN ERROR
         LNR   R15,R6         NEGATIVE VALUE OF DCB ADDRESS
         ST    R15,0(R7)      MARK THIS DCB @ AS BAD
         B     WRITNEXT       CONTINUE WITH OTHER OUTPUT
         SPACE 3
NOOUT    DS    0H                  NO OUTPUT DDS
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE
         MVC   LINE(L'NOOUTM),NOOUTM
         PUT   SYSPRINT,LINE
         B     CLOSERST
         SPACE 3
         TITLE 'TAPE COPY PROGRAM - TERMINATION'
*
*  END OF INPUT -- FINISH UP
*
ENDINPUT DS    0H
         LM    R10,R11,TOTBYTES    GET TOTAL NUMBER OF BYTES
         CVD   R10,DWORD           HIGH ORDER WORD OF BYTE COUNT
         ZAP   QWORD,DWORD
         MP    QWORD,TWO31         MULT BY 2 TO THE 31ST
         CVD   R11,DWORD           LOW ORDER WORD
         AP    QWORD,DWORD         AND ADD IT IN
         ED    BYTESPAT,QWORD+6
         PUT   SYSPRINT,SUCCESS
         MVI   LINE,C' '
         MVC   LINE+1(L'LINE-1),LINE CLEAR LINE
*
*        CLOSE OUTPUT FILES - WRITE SUCCESSFULLY COPIED DDNAMES
*
         L     R7,=A(DCBADRSO)     @ TABLE OF OPEN DCBS
CLOSLOOP DS    0H
         ICM   R6,B'1111',0(R7)    @ POSSIBLY OPEN DCB
         BM    BADDCB                IF NOT OPEN, DON'T CLOSE IT
         BZ    CLOSERST              WE'RE DONE
         CLOSE ((R6))              CLOSE IT
FREEMAIN DS    0H
         FREEMAIN R,LV=LENDCB,A=(R6)
         MVC   LINE+10(8),4(R7)
         PUT   SYSPRINT,LINE
CLOSNEXT DS    0H                  FIND NEXT DCB TO OPEN
         LA    R7,12(R7)           POINT TO NEXT DCB ADDRESS
         C     R7,=A(PASTDCBO)     PAST END OF TABLE?
         BL    CLOSLOOP              NO, CONTINUE
         B     CLOSERST            ELSE, CLOSE THE OTHER FILES
BADDCB   DS    0H                  NEGATIVE VALUE FOR THE DCB @
         LNR   R6,R6               MAKE IT POSTIVE AGAIN
         B     FREEMAIN            AND CONTINUE
         SPACE 3
*
*  CLOSE THE REST OF THE FILES
*
CLOSERST DS    0H
         CLOSE (IN,,SYSPRINT)
         SPACE 3
*
*  THE END
*
THEEND   EQU   *
         MVC   WTOCBT+16(41),FILEDONE
WTOCBT   WTO   'CBT990                                              '
         SR    R15,R15        ZERO RETURN CODE
         TM    FLAG2,ERR      WAS THERE AN ERROR?
         BZ    THEEND1        NO
         LA    R15,16         SET RETURN CODE
         SPACE 1
THEEND1  DS    0H
         TERME RMK=NO
         TITLE 'TAPE COPY PROGRAM - HANDLE PARM FIELD'
CHECKPRM DS    0H                  CHECK PARM FIELD
         L     R8,0(R1)            @ PARM
         CLC   =H'0',0(R8)         WAS THERE ONE?
         BZ    ENDPARM               NO, RETURN
         CLC   =AL2(L'BLPPARM),0(R8) LENGTH CORRECT?
         BNE   NEXTPARM              NO
         CLC   BLPPARM,2(R8)       WAS IT BLP?
         BNE   NEXTPARM              NO
         OI    LBLFLAGS,BLP        DON'T CONSIDER LABELS
*        B     ENDPARM
NEXTPARM DS    0H
ENDPARM  DS    0H
         BR    R9
         TITLE 'TAPE COPY PROGRAM - DATA AREAS'
TOTBYTES DC    D'0'                COUNT OF TOTAL BYTES COPIED (BINARY)
TWO31    DC    P'2147483648'       2 TO THE 31ST
FILE#PAT DC    X'402020202120'
BLKSPAT  DC    X'40206B2020206B202120'
BLPPARM  DC    C'BLP'              PARM FIELD COMPARE
DWORD    DC    D'0'
QWORD    DS    PL16
         CNOP  0,8
INCCW    DC    X'02',AL3(INAREA),X'0000',AL2(L'INAREA)
OUTCCW   DC    X'01',AL3(INAREA),X'2000',AL2(L'INAREA)
REWCCW   DC    X'07',AL3(INAREA),X'2000',AL2(L'INAREA)
INECB    DC    F'0'
INIOB    DC    X'02000000'
         DC    A(INECB)
INCSW    DC    2F'0'
         DC    A(INCCW)
         DC    A(IN)
         DC    F'0'
         DC    X'00010000'
OUTECB   DC    F'0'
OUTIOB   DC    X'02000000'
         DC    A(OUTECB)
OUTCSW   DC    2F'0'
         DC    A(OUTCCW)
OUTDCBPT DC    A(*-*)
         DC    F'0'
         DC    X'00010000'
REWECB   DC    F'0'
REWIOB   DC    X'02000000'
         DC    A(REWECB)
REWCSW   DC    2F'0'
         DC    A(REWCCW)
REWDCBPT DC    A(*-*)
         DC    F'0'
         DC    X'00010000'
         SPACE 3
LBLFLAGS DC    X'00'               FLAGS DEALING WITH TAPE LABELS
LABELED  EQU   X'80'               TAPE HAS STANDARD LABELS
GOTEOV   EQU   X'40'               WE'VE READ AN EOV1 LABEL
GOTEOF   EQU   X'20'               WE'VE READ AN EOF1 LABEL
READTM   EQU   X'10'               LAST BLOCK READ WAS A TAPE MARK
BLP      EQU   X'08'               IGNORE LABLES
         SPACE 3
FLAG2    DC    X'00'
TRUNC    EQU   X'80'               BLOCK TRUNCATED MESSAGE
FIRSTBLK EQU   X'40'               WE'VE READ 1ST BLOCK ON INPUT
ERR      EQU   X'02'
EOV      EQU   X'01'
FF       EQU   X'FF'
         SPACE 3
INEQC    DC    C'0********** EQUIPTMENT CHECK ON INPUT         '
         DC    C'           '
         DC    76C'*'
INDCK    DC    C'0********** DATA CHECK ON INPUT                    '
         DC    82C'*'
OUTEQC   DC    C'0********** EQUIPTMENT CHECK ON DD XXXXX, UNIT '
         DC    C'XXX, VOLUME XXXXXX -- THIS OUTPUT TERMINATED '
         DC    41C'*'
OUTDCK   DC    C'0**********       DATA CHECK ON DD XXXXX, UNIT '
         DC    C'XXX, VOLUME XXXXXX -- THIS OUTPUT TERMINATED '
         DC    41C'*'
         SPACE 2
FILEDONE DC    CL133' '
         ORG   FILEDONE
         DC    C' FILE'
FILE#    DC    C' 99999'
         DC    C' CONTAINS'
FILEBLKS DC    C' 9,999,999'
         DC    C' DATA BLOCKS, TOTALLING'
FILEBYTE DC    C' 9,999,999,999,999,999,999'
         DC    C' BYTES'
         ORG   ,
         SPACE 2
LONGMSG  DC    CL133'0FILE 00000 HAS HAD A BLOCK TRUNCATED ***********'
LONGMSGF EQU   LONGMSG+6,5
SUCCESS  DC    CL133'0 '
         ORG   SUCCESS+1
BYTESPAT DC    X'40206B2020206B2020206B2020206B2020206B2020206B202120'
         DC    C' BYTES COPIED SUCCESSFULLY FOR:'
         ORG   ,
         SPACE 2
LINE     DC    CL133' '
NOOUTM   DC    C'0********** NO OUTNN DD STATEMENTS - COPY TERMINATED **
               *********'
SLTAPE   DC    C' VOL1 HEADER FOUND'
EOV1FNDM DC    C'0EOV1 LABEL FOUND.  COPY WILL STOP AT NEXT TAPE MARK'
REPLY    DC    C'      '
         SPACE 2
NUMERICT DS    256X'FF'            NUMERIC TRT TABLE
         ORG   NUMERICT+C'0'
         DC    10X'00'
         ORG   ,
         SPACE 1
HEXZERO  DC    XL256'00'
         TITLE 'TAPE COPY PROGRAM - LTORG, DCBS, AND INPUT AREA'
         LTORG
         SPACE 1
         PRINT NOGEN
         SPACE 3
SYSPRINT DCB   MACRF=PM,DDNAME=SYSPRINT,DSORG=PS,RECFM=FA,LRECL=133,   X
               BLKSIZE=133
         SPACE 3
         DS    0D
         SPACE 1
IN       DCB   MACRF=(E),DDNAME=IN,DEVD=TA,DSORG=PS,RECFM=U
LENDCB   EQU   *-IN
         SPACE 3
INAREA   DS    CL65535
         SPACE 3
DCBADRSO DS    0F                  TABLE OF OPEN DCB @'S
         DC    100XL12'00'
PASTDCBO EQU   *
         TITLE 'TAPE COPY PROGRAM - DSECTS'
         CVT   DSECT=YES
         SPACE 1
         DCBD  DSORG=PS,DEVD=TA
         SPACE 1
         IKJTCB
         SPACE 1
UCBDSECT DSECT
         IEFUCBOB
         SPACE 1
TIOT     DSECT
         IEFTIOT1
         SPACE 1
         END
