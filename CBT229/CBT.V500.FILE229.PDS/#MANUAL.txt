./ ADD NAME=$INTRO   0106-00338-03267-1122-00026-00001-00000-SBGOLOB
$INTRO

  This manual will introduce you to most of the parms and SYSIN
  keywords you can use to control the operation of the COPYMODS
  tape copying program.

  Please look at member @PARMTBL in this manual.  This will
  explain the options of COPYMODS further.  Also see member
  @@PARMS in this manual.

  As of Level 062 of COPYMODS (and PARMCHEK), 10 option bytes
  are set instead of 5.  These are called PARMFLG1 thru
  PARMFLG9 and PARMFLGA in the COPYMODS and PARMCHEK code.
  Coding of PARM and SYSIN keywords, causes the setting of
  these 80 bits, many of which are used to control the execution
  of the COPYMODS program options.

  As of Level 057 of COPYMODS, all PARM and SYSIN scanning takes
  place in the separate PARMCHEK module, which must be assembled
  and linkedited together with the COPYMODS program, using
  PARM=BATCH in the assembler JCL.  PARMCHEK passes the results
  of the scans back to COPYMODS, using R1 and R2.  R1 passes the
  10 bits of parm settings back, and R2 passes necessary user
  data back.  A new ddname of //PARMREPT will show the detailed
  actions of the PARMCHEK program.

./ ADD NAME=#CSECTS  0105-04159-04181-2322-00131-00110-00000-SBGOLOB
**************************************************************           00173
**                                                          **           00174
**  PROGRAM STRUCTURE:  (CSECTs and calling sequence)       **           00175
**                                                          **           00176
**  COPYMODS, PARMCHEK, and COPYMOPT are separate programs, **
**  but they must be coordinated, and at the same level, so **
**  to be safe, they should always be assembled together.   **
**                                                          **
**  This program is no longer a single CSECT as it was in   **           00177
**    the old days.  There are now the following CSECTs,    **           00178
**    which should all be assembled together:               **           00179
**                                                          **           00180
**************************************************************           00173
**                                                          **           00180
**    (The #PAN$AUD and @PAN$AUD CSECTs are eyecatchers.)   **           00181
**                                                          **           00182
**   COPYMODS - The main processing module, which contains  **           00183
**              most of the tape copy/reading processing.   **           00184
**                                                          **           00185
**   TRTCSECT - The translate tables for Hex printing of    **           00186
**              tape records.                               **           00187
**                                                          **           00188
**   COPYMOPT - The separate routine which reads the PARM   **           00189
**              bits that have been set, and which prints   **           00190
**              a report in SYSPRINT showing the options    **           00191
**              that are in effect.                         **           00192
**                                                          **           00193
**   PARMCHEK - All the PARM and SYSIN input processing is  **           00194
**              done here.  PARM bits are passed back to    **           00195
**              COPYMODS in R1, the User Area is passed     **           00196
**              back to COPYMODS in R2.                     **           00197
**                                                          **           00198
**   PARMTABL - Now a separate CSECT in the PARMCHEK        **           00199
**              program, this table contains all the option **           00200
**              bit meanings and their default settings.    **           00201
**                                                          **           00202
**   LABELCHK - Now a separate CSECT to check whether a     **           00203
**              record read by COPYMODS is part of a set    **           00204
**              of label records or not.                    **           00205
**                                                          **           00206
**   PRINTLBL - A separate CSECT to interpret all tape      **           00207
**              label contents in a report line.            **           00208
**                                                          **           00209
**   MSGCSECT - Contains all the texts of the messages      **           00210
**              used by the COPYMODS CSECT.  Addressed      **           00211
**              by two new macros:  MVFMS which does        **           00212
**              operations on fields in the messages, and   **           00213
**              PTMS, which prints a message to SYSPRINT.   **           00214
**                                                          **           00215
**              Two new macros, ADRSMS and DROPMS, now can  **
**              be used to address this area, and save      **
**              a lot of addressability space, because      **
**              normal assembler instructions can be used   **
**              in between them, and the addressability     **
**              will not be redundantly repeated.  The      **
**              new PTMSN macro is PTMS without the         **
**              addressability built in, to put in between  **
**              ADRSMS and DROPMS.                          **
**                                                          **
**   FOOTAGE  - Code to calculate footage on a tape, as     **
**              though the data were on a 6250 bpi reel.    **
**              This code came from Florida Power Company   **
**              SS0104 Tapemap program.  Used by the        **
**              FOOTAGE keyword.                            **
**                                                          **
**  COPYMODS, PARMCHEK, and COPYMOPT are separate programs, **           00216
**  but they must be coordinated, and at the same level, so **           00217
**  to be safe, they should always be assembled together.   **           00218
**  The LABELCHK program has the same status.  It must be   **           00219
**  assembled together with the COPYMODS program.  Same     **           00220
**  with the PRINTLBL program.                              **           00221
**                                                          **           00222
**  - - - - - - - - - - - - - - - - - - - - - - - - - - - - **           00223
**                                                          **           00224
**  GENERAL OUTLINE OF PROGRAM CALLS                        **           00225
**  ------- ------- -- ------- -----                        **           00226
**                                                          **           00227
**  COPYMODS is the first program to get control.  The      **           00228
**  V-CONs for TRTCSECT and the PARMCHEK program are saved  **           00229
**  and the entry locations are stored in fullwords for     **           00230
**  later use.                                              **           00231
**                                                          **           00232
**  PARMCHEK is immediately called, and it opens //SYSIN    **           00233
**  if that ddname is present.  If //PARMREPT is present,   **           00234
**  it is also used by the PARMCHEK program.                **           00235
**                                                          **           00236
**  After PARMCHEK has returned all parm bit settings to    **           00237
**  COPYMODS and all user-quantities, the settings are      **           00238
**  examined by COPYMODS and inconsistent settings are      **           00239
**  adjusted:  For instance, if LABADDIN is on, LABLDUMP    **           00240
**  has to be turned off, because only one of these can be  **           00241
**  done in one run.  These inconsistencies are all fixed,  **           00242
**  and then COPYMODS processing starts.                    **           00243
**                                                          **           00244
**  COPYMOPT is called to display all the options that have **           00245
**  been set, if the OPTION parm has been set.  This is     **           00246
**  done to //SYSPRINT.  If any adjustments of options have **           00247
**  been made, you can see the final result in the SYSPRINT **           00248
**  report that has been produced by COPYMOPT.              **           00249
**                                                          **           00250
**  The //SYSPRINT DD is opened and closed by COPYMOPT,     **           00251
**  and opened again by COPYMODS.                           **           00252
**                                                          **           00253
**  A significant note is, that the PARMREPT contains the   **           00254
**  options as they have been set by the PARMCHEK program,  **           00255
**  with no alteration.  The COPYMOPT call, which produces  **           00256
**  the OPTIONS display in //SYSPRINT, occurs after the     **           00257
**  adjustments for inconsistent parm settings has been     **           00258
**  made by COPYMODS, so you can see the effect of those    **           00259
**  adjustments by comparing these two reports against      **           00260
**  each other.                                             **           00261
**                                                          **           00262
**  After that, COPYMODS does its things, depending on the  **           00263
**  options that have been set.  Most of the processing is  **           00264
**  done in the COPYMODS csect, except for the HEXPRT       **           00265
**  option, where the translation tables are in the         **           00266
**  TRTCSECT csect.                                         **           00267
**                                                          **           00268
**  The LABELCHK program is called whenever an 80-byte      **           00269
**  record is read, to see whether that record is part of   **           00270
**  a set of tape labels.                                   **           00271
**                                                          **           00272
**  Whenver a label is to be interpreted to SYSPRINT, the   **           00273
**  PRINTLBL program is called.                             **           00274
**                                                          **           00275
**  If the FOOTAGE keyword is called, the FOOTAGE program   **           00275
**  is called approximately at the end of each file read    **           00275
**  from the input tape.  FOOTAGE uses a workarea, most     **           00275
**  fields of which are fed from the end-of-file routine.   **           00275
**                                                          **           00275
**************************************************************           00276
./ ADD NAME=#DEFAULT 0104-00340-03201-1833-00105-00096-00000-SBGOLOB
#DEFAULT

  In this section we are going to talk about COPYMODS default
  options, and about how to customize the COPYMODS program at
  assembly time.

  All option settings in COPYMODS are controlled either at
  label PARMTABL (for option bit settings), or at label
  CARDREAD, for handling the special SYSIN cards with quantities
  included in them.  Procedure PARMCHK (and its subset PARMLOOP)
  scans the PARMTABL and results in default settings, which
  are overridden by EXEC parm settings, which are overridden
  by SYSIN card settings.

  COPYMODS operation is driven by execution options, and the
  execution options are driven by EXEC JCL parms, and/or
  SYSIN cards.  SYSIN is opened if you have a parm of SYSIN
  in the EXEC PARM.  Once you've coded PARM='SYSIN' in the
  EXEC card, you can code all the rest of the parms in SYSIN.

  The rule is:  Later entries override earlier entries.  EXEC
  PARM settings override default settings, and SYSIN cards
  override EXEC PARMs.  Later always overrides earlier.

  Certain execution options in COPYMODS depend on quantities,
  as well as execution switches (options turned "on" or "off").
  Those options have to be set as SYSIN cards, and their EXEC
  PARM switches must not be set in the EXEC parms directly.
  Currently these execution options (SYSIN cards) are:

  FILELIMIT=nnn           (numeric value)        sets LIMFILE  on
  LABELIMIT=nnn           (numeric value)        sets LIMLABEL on
  OUTVOLALL=volser        (up to 6 characters)   sets OUTVOL   on
  TAPEOWNER=tapeownrid    (up to 10 characters)  sets OUTVOL   on
  PRINTRCDS=nnnnn         (up to 10 numbers)     sets HEXPRT   on

  When these cards are coded in SYSIN, certain option values
  are automatically set by the COPYMODS program, as specified.

  Now getting to defaults, which are set at COPYMODS assembly
  time.  COPYMODS option values are determined at label PARMTABL.
  The settings are table driven.  A table entry looks as follows:

         DC    X'07',X'11',C'COPYLTM ',X'20000000000000000000' DEFAULT

  The format of a parm table entry is described below:

         FORMAT OF PARM TABLE
         ONE ENTRY IS 20 BYTES
           1ST BYTE:      LENGTH OF THIS PARM IN HEX
           2ND BYTE:      X'01' says TURN FLAG OFF
                          X'00' says TURN FLAG ON
                          X'10' says SET ENTRY AS A DEFAULT
           NEXT 8 BYTES:  PARM NAME - LEFT JUSTIFIED
           NEXT 10 BYTES: FLAG SETTINGS - 10 FLAGS,
                           WHICH ALLOWS FOR 80 PARMS
                           THAT DON'T HAVE TO BE
                           SEPARATED BY A COMMA.

  You make a PARMTABL entry a default, by coding the X'10'
  byte on, in the second byte of the entry.

  A LATER TABLE ENTRY OVERRIDES AN EARLIER ENTRY, SO THAT
  YOUR DEFAULT CAN BE OVERRIDDEN LATER, IF YOU'RE NOT CAREFUL.

  Before assembling COPYMODS, you should study the entire
  PARMTABL, checking that there are no inconsistencies.
  You can make any synonyms for parms that you'd like.  Just
  make sure they don't conflict with other parm values that
  are set later in PARMTABL.  You make a synonym by copying
  a PARMTABL entry exactly, with a different parm name and
  an appropriate parm length.  You should not set the default
  bit in the synonym entry.  You should set it in the main
  name entry.

  Getting back to our example, you can see that if you code
  the word COPYLTM in a parm, then the X'20' value in the
  first byte of parms is turned OFF, and that this is a
  default parm setting, if it is not overridden by a parm
  keyword which sets this X'20' value on, such as LTMSKIP,
  or a synonym, SKIPLTM.

  Note:  COPYMODS is distributed in such a way, that if you use
         its old JCL to execute it, then it will run in a very
         similar manner to the way it used to run, before we
         put in all these improvements.  This is our goal as
         the distributors.  However, we encourage people to
         learn to use COPYMODS options as much as possible, and
         if you want to change our defaults, you have our blessing
         for most of them.  However you should note certain things.

         For example, you may make SYSIN a default.  But then,
         all the COPYMODS execution JCL will require a dd card
         for SYSIN, and the old JCL will not work.  You may
         decide to do this.  You must experiment with the way
         you want COPYMODS to run in your environment, for
         your purposes.  Then, if you want to change its defaults,
         you'll know what the consequences are.  Don't just
         assemble COPYMODS with new defaults, without testing
         how it runs.  It may be comforting to know that most
         of the defaults can be overridden at execution time,
         with parm settings.  Study the PARMTABL, and you'll
         see.  If you don't see an antonym (an antidote to a
         certain parm setting), you can make one.

./ ADD NAME=#GENERAL 0080-04211-04211-1000-00345-00345-00000-SBGOLOB
*          DATA SET CBT990     AT LEVEL 080 AS OF 07/28/04               00001
   TITLE 'COPYMODS -- TAPE COPY PROGRAM'                                 00002
**************************************************************           00003
**************************************************************           00004
**                                                          **           00005
**                                                          **           00006
**  MODULE: COPYMODS.   WRITTEN BY PAUL TOKHEIM, AFAFC.     **           00007
**                                                          **           00008
**           Extensively revised by Sam Golob.              **           00009
**                                                          **           00010
**      (See the documentation in the code, below.)         **           00011
**                                                          **           00012
**  ** ================================================ **  **           00013
**  **  Defaults have purposely been left, so the       **  **           00014
**  **  output will resemble that of the original       **  **           00015
**  **  program version.  And all of your original JCL  **  **           00016
**  **  will still work.  However the list of "options  **  **           00017
**  **  in effect" will be printed in //SYSPRINT by     **  **           00018
**  **  default.  It will give you an idea about what   **  **           00019
**  **  kind of things are really possible to do,       **  **           00020
**  **  using this program.  IBM SL, and ASCII SL,      **  **           00021
**  **  are extensively supported.  So are 64K blocks.  **  **           00022
**  ** ================================================ **  **           00023
**  **  Options in COPYMODS may be coded in the PARM    **  **           00024
**  **  of the EXEC card or, more conveniently, in      **  **           00025
**  **  a separate //SYSIN DD card, which is automati-  **  **           00026
**  **  cally recognized if it is present in the JCL.   **  **           00027
**  ** ================================================ **  **           00028
**  **  Assembly time defaults can be changed by        **  **           00029
**  **  altering the (extremely flexible) PARMTABL.     **  **           00030
**  ** ================================================ **  **           00031
**                                                          **           00032
**  PURPOSE: COPY ALL FILES OF AN INPUT TAPE TO ONE TO 16   **           00033
**     OUTPUT TAPES.  THE ORIGINAL PURPOSE OF THIS PROGRAM  **           00034
**     WAS FOR COPYING THE SHARE MVS MODS TAPE.             **           00035
**                                                          **           00036
**     This has been revised, with the many new functions   **           00037
**     that have been added to COPYMODS.  Besides copying   **           00038
**     tapes, COPYMODS can read and measure tapes, as well  **           00039
**     as altering the copied tapes in many ways, such as   **           00040
**     stripping the labels or leading tape marks off.      **           00041
**     The VOLSER and OWNER can be altered in the copied    **           00042
**     tapes, and all labels can also be altered, through   **           00043
**     a process of dumping the labels to a FB-80 file      **           00044
**     (LABLDUMP option), editing the labels, stripping     **           00045
**     the labels in a copy operation (STRIP option), and   **           00046
**     splicing all the labels back in another copy         **           00047
**     operation (LABADDIN option).  COPYMODS can also      **           00048
**     INIT tapes, as many as 16 at a time.  No input tape  **           00049
**     is needed for an INIT operation (INITVOLS option).   **           00050
**                                                          **           00051
**     To see all the COPYMODS options, look at label       **           00052
**     PARMTABL in the PARMCHEK CSECT.  To see the keyword  **           00053
**     parms for SYSIN, see the code a few lines after the  **           00054
**     label CARDREAD in the PARMCHEK CSECT.                **           00055
**                                                          **           00056
**     The different COPYMODS parms or options can be used  **           00057
**     in combination with each other, as long as they      **           00058
**     don't contradict each other.  In certain cases, the  **           00059
**     use of one option will cause the automatic turn-off  **           00060
**     of one or more other options that contradict with    **           00061
**     it.  This "adjustment" is done by the COPYMODS       **           00062
**     program just after it receives the options settings  **           00063
**     back from the PARMCHEK program.  For example, if     **           00064
**     both LABLDUMP and LABADDIN (which contradict each    **           00065
**     other) are set, COPYMODS will make a judgment that   **           00066
**     LABADDIN takes precedence, so it will turn off both  **           00067
**     the LABLDUMP and READ (read only) options.  On the   **           00068
**     other hand, the STRIP and LABLDUMP options do not    **           00069
**     contradict each other.  So in that case, when STRIP  **           00070
**     and LABLDUMP are both set, COPYMODS will dump all    **           00071
**     the labels from the input tape to the LABLDUMP file, **           00072
**     while at the same time, it will strip them from the  **           00073
**     tape copies.  To get the exact effect you want from  **           00074
**     a COPYMODS run, just be very careful to code the     **           00075
**     correct combination of options.  Look at the OPTIONS **           00076
**     report before you mount the tapes.  (The OPTIONS     **           00077
**     report in //SYSPRINT will be complete before the     **           00078
**     tapes are mounted.)  To see the exact effect of      **           00079
**     the COPYMODS option correction, code the CODEDPRM    **           00080
**     option to obtain a comparison report of the options  **           00081
**     before COPYMODS correction has been done.            **           00082
**                                                          **           00083
**     Up to 132 bytes of the beginning n records of each   **           00084
**     tape file can be dumped in Hex, similarly to the     **           00085
**     way TAPESCAN does it (HEXPRT option).  Interpreta-   **           00086
**     tion of the printables in this hex dump can be       **           00087
**     either EBCDIC (default) or ASCII.  EBCDIC and ASCII  **           00088
**     are COPYMODS PARM or SYSIN keywords also.            **           00089
**                                                          **           00090
**     Support for ASCII tapes (ANSI/ISO Levels 3 and 4)    **           00091
**     has been added.  COPYMODS can init ASCII tapes       **           00092
**     with the INASC3 and INASC4 keywords.  Additionally,  **           00093
**     the other functions of COPYMODS such as LABLDUMP,    **           00094
**     LABADDIN, and READ work for ASCII tapes.  The HEXPRT **           00095
**     option with the ASCII keyword allows you to print    **           00096
**     tape records in hex, with an ASCII interpretation    **           00097
**     of the printables.  EOV2EOF works for ASCII tapes.   **           00098
**                                                          **           00099
**     COPYMODS will automatically read past any number     **           00100
**     of leading tape marks on a tape, and will copy       **           00101
**     any real data that is after them.  The leading       **           00102
**     tape marks can be included in the copied tapes       **           00103
**     (option LTMCOPY - default) or they can be skipped    **           00104
**     from the copied tapes and left off, so the real      **           00105
**     data will be at the beginning of the copied tapes    **           00106
**     (option LTMSKIP).                                    **           00107
**                                                          **           00108
**     See the "New Features" section below for some more   **           00109
**     details.  See the #MANUAL member of the install pds  **           00110
**     (CBT Tape File 229) for even more details.           **           00111
**                                                          **           00112
**  METHOD:  COPYMODS FIRST DETERMINES WHICH OUTPUT DD'S    **           00113
**    ARE PRESENT. THE INPUT TAPE IS READ, USING EXCP,      **           00114
**    INTO ONE BUFFER, AND THE APPROPRIATE OUTPUT TAPES     **           00115
**    ARE WRITTEN USING EXCP, FROM THAT SAME BUFFER.  ANY   **           00116
**    LABELS ON THE INPUT WILL BE COPIED. ANY LABELS ON     **           00117
**    THE OUTPUT TAPES WILL BE DESTROYED.  IF AN ERROR      **           00118
**    OCCURS ON THE INPUT TAPE, THE PROGRAM WILL ABEND      **           00119
**    WITH A USER 69 ABEND.  IF AN ERROR OCCURS ON AN       **           00120
**    OUTPUT TAPE, THE PROGRAM WILL QUIT WRITING TO THE     **           00121
**    TAPE WHICH ENCOUNTERED THE ERROR, AND WILL REPORT     **           00122
**    HOW MUCH DATA HAS BEEN CORRECTLY COPIED TO THAT       **           00123
**    PARTICULAR OUTPUT TAPE.                               **           00124
**                                                          **           00125
**    Any output DD names from //OUT1 thru //OUT16 may be   **           00126
**    coded in the execution JCL for COPYMODS, so that up   **           00127
**    to 16 output tapes may be created.  But, if none      **           00128
**    of these DD names is present, COPYMODS will force     **           00129
**    PARM=READ automatically, and it will issue a          **           00130
**    special message to //SYSPRINT saying that it did so.  **           00131
**                                                          **           00132
**  COPYMODS has some optional DD's which will be used      **           00133
**    if they are present.  These following DD's are used   **           00134
**    by the PARMCHEK program, when COPYMODS is executed.   **           00135
**                                                          **           00136
**  //SYSIN    - Extra space to enter PARM keywords.        **           00137
**               Also, the only place to enter the          **           00138
**               "quantity" keywords, which start in        **           00139
**               column 1 of a SYSIN card.                  **           00140
**                                                          **           00141
**         OUTVOLALL=volser      (up to 6 characters)       **           00142
**         TAPEOWNER=owner name  (up to 10 characters)      **           00143
**         FILELIMIT=nnn         (numeric)                  **           00144
**         LABELIMIT=nnn         (numeric)                  **           00145
**         PRINTRCDS=nnn         (numeric)                  **           00146
**                                                          **           00147
**  //PARMREPT - Diagnostic output from the PARMCHEK        **           00148
**               program.  LRECL=133,RECFM=FBA.             **           00149
**                                                          **           00150
**    In addition, the COPYMODS program itself has some     **           00151
**    extra DD's, which are required if the appropriate     **           00152
**    options are set:                                      **           00153
**                                                          **           00154
**  //LABLDUMP - An FB-80 file, or member of a pds, to      **           00155
**               receive the images of all tape labels      **           00156
**               read, together with some control cards     **           00157
**               that COPYMODS generates.  This DD name     **           00158
**               is necessary if the LABLDUMP option is     **           00159
**               in effect.                                 **           00160
**                                                          **           00161
**  //LABADDIN - An FB-80 file, or member of a pds, which   **           00162
**               contains the set of labels to be spliced   **           00163
**               into an NL tape to create an SL tape.      **           00164
**               This DD name is necessary if the LABADDIN  **           00165
**               option of COPYMODS is in effect.  Usually  **           00166
**               the LABADDIN file is a previous result of  **           00167
**               a LABLDUMP operation, or it is an altered  **           00168
**               or edited version of a previously created  **           00169
**               LABLDUMP file.                             **           00170
**                                                          **           00171
**  This program has to be assembled with PARM=BATCH in     **           00172
**    the Assembler EXEC parms.  The entire PARMCHEK        **           00173
**    program has to be included in the assembly, because   **           00174
**    PARMCHEK has to be fitted to the current level of     **           00175
**    the COPYMODS program.                                 **           00176
**                                                          **           00177
**************************************************************           00178
**                                                          **           00179
**  REQUIRED DD NAMES (used by the COPYMODS program):       **           00180
**                                                          **           00181
**  //IN       -  Points to the Input Tape.  Only not       **           00182
**                required in a tape init operation, if     **           00183
**                the INITVOLS option is in effect.         **           00184
**                Otherwise, //IN is always required.       **           00185
**                                                          **           00186
**  //OUT1 thru - Any of these 16 DD names can be coded.    **           00187
**  //OUT16       These are for the output tapes.  These    **           00188
**                are not required if the READ (readonly)   **           00189
**                option is in effect.  Any one of these    **           00190
**                16 possible DD names may be coded, even   **           00191
**                if some numbers have been skipped.  For   **           00192
**                instance, if you have one output tape,    **           00193
**                it may be defined by //OUT13.  It is      **           00194
**                not necessary to code //OUT1.             **           00195
**                                                          **           00196
**  //SYSPRINT  - The output dataset to contain all the     **           00197
**                COPYMODS operation information that was   **           00198
**                called for by the various options set,    **           00199
**                including the OPTIONS display itself.     **           00200
**                This dataset should be LRECL=133,         **           00201
**                RECFM=FBA.                                **           00202
**                                                          **           00203
**************************************************************           00204
**                                                          **           00205
**  PROGRAM STRUCTURE:                                      **           00206
**                                                          **           00207
**  This program is no longer a single CSECT as it was in   **           00208
**    the old days.  There are now the following CSECTs,    **           00209
**    which should all be assembled together:               **           00210
**                                                          **           00211
**    (The #PAN$AUD and @PAN$AUD CSECTs are eyecatchers.)   **           00212
**                                                          **           00213
**   COPYMODS - The main processing module, which contains  **           00214
**              most of the tape copy/reading processing.   **           00215
**                                                          **           00216
**   TRTCSECT - The translate tables for Hex printing of    **           00217
**              tape records, and for ASCII translation.    **           00218
**                                                          **           00219
**   COPYMOPT - The separate routine which reads the PARM   **           00220
**              bits that have been set, and which prints   **           00221
**              a report in SYSPRINT showing the options    **           00222
**              that are in effect.                         **           00223
**                                                          **           00224
**   PARMCHEK - All the PARM and SYSIN input processing is  **           00225
**              done here.  PARM bits are passed back to    **           00226
**              COPYMODS in R1, the User Area is passed     **           00227
**              back to COPYMODS in R2.                     **           00228
**                                                          **           00229
**   PARMTABL - Now a separate CSECT in the PARMCHEK        **           00230
**              program, this table contains all the option **           00231
**              bit meanings and their default settings.    **           00232
**                                                          **           00233
**   LABELCHK - Now a separate CSECT to check whether a     **           00234
**              record read by COPYMODS is part of a set    **           00235
**              of label records or not.                    **           00236
**                                                          **           00237
**   PRINTLBL - A separate CSECT to interpret all tape      **           00238
**              label contents in a report line.            **           00239
**                                                          **           00240
**   MSGCSECT - Contains all the texts of the messages      **           00241
**              used by the COPYMODS CSECT.  Addressed      **           00242
**              by two new macros:  MVFMS which does        **           00243
**              operations on fields in the messages, and   **           00244
**              PTMS, which prints a message to SYSPRINT.   **           00245
**                                                          **           00246
**              Two new macros, ADRSMS and DROPMS, now can  **           00247
**              be used to address this area, and save      **           00248
**              a lot of addressability space, because      **           00249
**              normal assembler instructions can be used   **           00250
**              in between them, and the addressability     **           00251
**              will not be redundantly repeated.  The      **           00252
**              new PTMSN macro is PTMS without the         **           00253
**              addressability built in, to put in between  **           00254
**              ADRSMS and DROPMS.                          **           00255
**                                                          **           00256
**   FOOTAGE  - Code to calculate footage on a tape, as     **           00257
**              though the data were on a 6250 bpi reel.    **           00258
**              This code came from Florida Power Company   **           00259
**              SS0104 Tapemap program.  Used by the        **           00260
**              FOOTAGE keyword.                            **           00261
**                                                          **           00262
**  COPYMODS, PARMCHEK, and COPYMOPT are separate programs, **           00263
**  but they must be coordinated, and at the same level, so **           00264
**  to be safe, they should always be assembled together.   **           00265
**  The LABELCHK program has the same status.  It must be   **           00266
**  assembled together with the COPYMODS program.  Same     **           00267
**  with the PRINTLBL program and the FOOTAGE program.      **           00268
**                                                          **           00269
**  - - - - - - - - - - - - - - - - - - - - - - - - - - - - **           00270
**                                                          **           00271
**  GENERAL OUTLINE OF PROGRAM CALLS                        **           00272
**  ------- ------- -- ------- -----                        **           00273
**                                                          **           00274
**  COPYMODS is the first program to get control.  The      **           00275
**  V-CONs for TRTCSECT and the PARMCHEK program are saved  **           00276
**  and the entry locations are stored in fullwords for     **           00277
**  later use.  Same for PRINTLBL and FOOTAGE entry points. **           00278
**                                                          **           00279
**  PARMCHEK is immediately called, and it opens //SYSIN    **           00280
**  if that ddname is present.  If //PARMREPT is present,   **           00281
**  it is also used by the PARMCHEK program.                **           00282
**                                                          **           00283
**  After PARMCHEK has returned all parm bit settings to    **           00284
**  COPYMODS and all user-quantities, the settings are      **           00285
**  examined by COPYMODS and inconsistent settings are      **           00286
**  adjusted:  For instance, if LABADDIN is on, LABLDUMP    **           00287
**  has to be turned off, because only one of these can be  **           00288
**  done in one run.  These inconsistencies are all fixed,  **           00289
**  and then COPYMODS processing starts.                    **           00290
**                                                          **           00291
**  (To examine the effect of the COPYMODS parm correction, **           00292
**  code the CODEDPRM option to obtain a "before and after" **           00293
**  option comparison report.)                              **           00294
**                                                          **           00295
**  COPYMOPT is called to display all the options that have **           00296
**  been set, if the OPTION parm has been set.  This is     **           00297
**  done to //SYSPRINT.  If any adjustments of options have **           00298
**  been made, you can see the final result in the SYSPRINT **           00299
**  report that has been produced by COPYMOPT.              **           00300
**                                                          **           00301
**  A PARM of CODEDPRM causes COPYMOPT to be called twice,  **           00302
**  once with the corrected parm bits, and the second time, **           00303
**  using the saved original parm bits, as returned by the  **           00304
**  PARMCHEK program.                                       **           00305
**                                                          **           00306
**  The //SYSPRINT DD is opened and closed by COPYMOPT,     **           00307
**  and opened again by COPYMODS.  This allows SYSPRINT     **           00308
**  to be viewed under SDSF before the tapes are mounted,   **           00309
**  so you can see the OPTIONS report(s) there.             **           00310
**                                                          **           00311
**  A significant note is, that the PARMREPT contains the   **           00312
**  options as they have been set by the PARMCHEK program,  **           00313
**  with no alteration.  The COPYMOPT call, which produces  **           00314
**  the OPTIONS display in //SYSPRINT, occurs after the     **           00315
**  adjustments for inconsistent parm settings has been     **           00316
**  made by COPYMODS.  If you want to see the effect of     **           00317
**  these adjustments, code the CODEDPRM keyword to obtain  **           00318
**  a comparison report showing the original options as     **           00319
**  originally coded.                                       **           00320
**                                                          **           00321
**  After that, COPYMODS does its things, depending on the  **           00322
**  options that have been set.  Most of the processing is  **           00323
**  done in the COPYMODS csect, except for the HEXPRT       **           00324
**  option, where the translation tables are in the         **           00325
**  TRTCSECT csect.                                         **           00326
**                                                          **           00327
**  The LABELCHK program is called whenever an 80-byte      **           00328
**  record is read, to see whether that record is part of   **           00329
**  a set of tape labels.                                   **           00330
**                                                          **           00331
**  Whenver a label is to be interpreted to SYSPRINT, the   **           00332
**  PRINTLBL program is called.                             **           00333
**                                                          **           00334
**  If the FOOTAGE keyword is used, the FOOTAGE program     **           00335
**  is called at approximately the end of each file read    **           00336
**  from the input tape.  FOOTAGE is driven by the contents **           00337
**  of fields in a workarea, which, in the COPYMODS CSECT,  **           00338
**  is at label LABELTYP.  Most of the fields in this       **           00339
**  workarea are fed from the end-of-file routine, after    **           00340
**  label MARKFILE, and from the EXCP READs, near label     **           00341
**  INFROMIN, and the BYTESCOP field of number of bytes     **           00342
**  moved by the latest EXCP READ.                          **           00343
**                                                          **           00344
**************************************************************           00345
./ ADD NAME=#HISTORY 0080-04211-04211-1002-01071-01071-00000-SBGOLOB
**************************************************************           00345
**                                                          **           00346
**  NEW FEATURES ADDED BY SAM GOLOB:                        **           00347
**                                                          **           00348
**  (Also please see the individual Level nnn changes, as   **           00349
**   listed in this code, below, for more information.)     **           00350
**                                                          **           00351
**   It is recommended that you view the PARMTABL entries   **           00352
**   and look at the supplied #MANUAL member in the         **           00353
**   distribution pds, CBT File 229, for even more info.    **           00354
**                                                          **           00355
**   1.  64K BLOCKS ON A TAPE CAN BE COPIED.                **           00356
**                                                          **           00357
**   2.  UP TO 16 OUTPUT DDNAMES ALLOWED.                   **           00358
**                                                          **           00359
**   3.  INITTED TAPES, AND SL MULTIVOLUME TAPES CAN        **           00360
**       BE CORRECTLY COPIED.                               **           00361
**                                                          **           00362
**   4.  ALL STANDARD LABEL INFORMATION, OR ANY             **           00363
**       PARTICULAR LABEL TYPES, CAN BE PRINTED, IF         **           00364
**       FOUND ON THE INPUT TAPE.                           **           00365
**                                                          **           00366
**   5.  A FLEXIBLE TABLE-DRIVEN PARM KEYWORD SCANNER       **           00367
**       WAS ADDED.  THIS ALLOWS FOR EASY SETTING OF        **           00368
**       PROGRAM DEFAULTS, AND KEYWORD SYNONYMS.  SEE       **           00369
**       LABEL PARMTABL.  THE PARM SCANNER IS NOW A         **           00370
**       SEPARATE PROGRAM CALLED PARMCHEK, WHICH MUST BE    **           00371
**       ASSEMBLED IN BATCH, TOGETHER WITH THE COPYMODS     **           00372
**       MAIN SOURCE CODE.                                  **           00373
**                                                          **           00374
**   6.  OPTIONALLY, THE VOLSER OF THE OUTPUT TAPES         **           00375
**       CAN BE SET TO THE JCL VOLSER, INSTEAD OF THE       **           00376
**       INPUT TAPE'S VOLSER.  USE THE CHGVOL PARM TO       **           00377
**       INVOKE THIS ACTION.                                **           00378
**                                                          **           00379
**   7.  TAPES WITH LEADING TAPE MARKS CAN BE COPIED        **           00380
**       EITHER AS-IS, OR WITH THE LEADING TAPE MARKS       **           00381
**       LEFT OFF.  OPTION OF LTMSKIP OR LTMCOPY.           **           00382
**                                                          **           00383
**   8.  EOV LABELS IN THE MIDDLE OF A TAPE, CAN NOW BE     **           00384
**       CHANGED TO EOF LABELS, IF THE TAPE WAS CREATED     **           00385
**       AS A COMPOSITE, BY THE COPYFILE PROGRAM.  THE      **           00386
**       PARM IS EOV2EOF (SEE PARMTABL FOR ALL ACCURATE     **           00387
**       AND CURRENT PARM KEYWORD SETTINGS).  THIS ALSO     **           00388
**       WORKS WHEN ADDING EXTERNAL LABELS TO AN NL TAPE.   **           00389
**                                                          **           00390
**   9.  COPYMODS CAN NOW BE RUN READ-ONLY FOR THE INPUT    **           00391
**       TAPE, USING PARMS OF READ, READONLY, OR NOWRITE.   **           00392
**                                                          **           00393
**  10.  COPYMODS CAN READ A TAPE (EITHER WHILE COPYING     **           00394
**       IT, OR IN READ-ONLY MODE), AND DUMP ALL THE TAPE   **           00395
**       LABELS TO AN FB-80 OUTPUT FILE WITH A DDNAME OF    **           00396
**       LABLDUMP.  USE A PARM OF LABLDUMP TO INVOKE THIS   **           00397
**       SERVICE.                                           **           00398
**                                                          **           00399
**  11.  COPYMODS CAN READ AN SL TAPE AND DUMP THE LABELS   **           00400
**       OFF INTO AN OUTPUT FILE.  THESE LABEL IMAGES HAVE  **           00401
**       EXTRA CONTROL CARDS ADDED.  THESE LABELS CAN BE    **           00402
**       MERGED WITH THE FILES IN AN NL VERSION OF THE      **           00403
**       SAME TAPE, AND A NEW SL TAPE CREATED.  BY DEFAULT, **           00404
**       BLOCK COUNTS IN THE EOF1 AND EOV1 OF THE OUTPUT    **           00405
**       TAPE ARE CORRECTED TO SHOW THE ACTUAL BLOCK        **           00406
**       COUNTS ON THE TAPE, BUT THIS ACTION CAN BE         **           00407
**       MANUALLY TURNED OFF WITH A PARM SETTING.           **           00408
**                                                          **           00409
**  11a. IF YOU CODE A PARM OF SYSIN IN THE PARM FIELD OF   **           00410
**       THE EXEC CARD, THEN COPYMODS NOW TAKES PARM INPUT  **           00411
**       FROM SYSIN, AND THESE CAN OVERRIDE THE OTHER PARMS **           00412
**       IN THE EXEC CARD, BECAUSE SYSIN IS SEARCHED LATER. **           00413
**                                                          **           00414
**       (BUT YOU DON'T HAVE TO CODE PARM=SYSIN IN THE PARM **           00415
**       FIELD OF THE EXEC CARD.  IF THE SYSIN DDNAME IS    **           00416
**       PRESENT IN THE JCL, PARMCHEK WILL OPEN IT, AND     **           00417
**       WILL USE IT TO SCAN FOR PARMS.  SG - 07/03).       **           00418
**                                                          **           00419
**  11b. ANY SPECIAL SYSIN KEYWORD, SUCH AS:                **           00420
**       TAPEOWNER=xxxxxxxxxx                               **           00421
**       FILELIMIT=nnnn                                     **           00422
**       LABELIMIT=nnnn                                     **           00423
**       PRINTRCDS=nnnn                                     **           00424
**         or                                               **           00425
**       OUTVOLALL=volser , WILL CAUSE THE REST OF A SYSIN  **           00426
**       CARD TO BE IGNORED FOR PARMS FROM THE PARM TABLE.  **           00427
**                                                          **           00428
**  11c. OUTVOLALL=volser , STARTING IN COLUMN1 OF A SYSIN  **           00429
**       CARD, WILL CAUSE ALL OUTPUT VOL1 LABELS TO BE      **           00430
**       OVERWRITTEN WITH THE CODED VOLSER.  THE REST OF    **           00431
**       THAT CARD IS NOT SEARCHED FOR PARMS.               **           00432
**                                                          **           00433
**  12.  OVERLAYING OF THE VOLSER (IN THE VOL1 LABEL)       **           00434
**       CAN ALSO BE DONE IF YOU ARE ADDING EXTERNAL        **           00435
**       LABELS TO AN NL TAPE.  THE OUTPUT TAPES CAN        **           00436
**       HAVE DIFFERENT VOLSER'S FROM THE VOL1 LABEL        **           00437
**       IN THE EXTERNAL LABEL DATASET.                     **           00438
**                                                          **           00439
**  13.  LABLDUMP AND LABADDIN NOW TAKE IBM STANDARD USER   **           00440
**       LABELS (SUL) INTO ACCOUNT.  UP TO 8 UHLn AND/OR    **           00441
**       UTLn LABELS ALLOWED.  THEREFORE, YOU CAN MAKE A    **           00442
**       TAPE WITH ANY USER LABELS YOU WANT, EVEN THOUGH    **           00443
**       YOUR SYSTEM CAN'T CREATE SUCH A TAPE BY ITSELF.    **           00444
**       LABLDUMP DUMPS ALL THE LABEL RECORDS FROM AN SL    **           00445
**       TAPE TO AN EXTERNAL FILE (WITH SPECIAL CONTROL     **           00446
**       CARDS), AND LABADDIN CAN ADD THESE LABELS TO AN    **           00447
**       NL TAPE TO MAKE AN SL TAPE.  (OF COURSE, YOU CAN   **           00448
**       EDIT THE LABEL FILE ON DISK BEFORE USING IT TO     **           00449
**       CREATE A NEW SL TAPE FROM AN NL TAPE.)             **           00450
**                                                          **           00451
**  14.  DEFAULT ACTION OF COPYMODS WITH LABADDIN IS THAT   **           00452
**       IT IS "LABEL DRIVEN".  THAT IS, IF THERE ARE MORE  **           00453
**       NL TAPE FILES THAN EXTERNAL LABELS, THE PROGRAM    **           00454
**       STOPS WHEN IT RUNS OUT OF LABELS.  IF THERE ARE    **           00455
**       MORE LABEL SETS THAN FILES, THE OUTPUT TAPE IS     **           00456
**       WRITTEN WITH NULL STANDARD LABEL FILES UNTIL THE   **           00457
**       LABEL DATASET IS EXHAUSTED, EVEN AFTER THE LAST    **           00458
**       DATA FILE HAS BEEN WRITTEN.                        **           00459
**                                                          **           00460
**       A NEW OPTION CALLED NOEXNULL ALLOWS COPYMODS TO    **           00461
**       STOP AS SOON AS THE NL TAPE FILES ARE EXHAUSTED,   **           00462
**       EVEN IF THERE ARE ADDITIONAL LABEL SETS IN THE     **           00463
**       EXTERNAL LABEL DATASET.                            **           00464
**                                                          **           00465
**  15.  WHEN DOING LABADDIN PROCESSING, IF THE LAST LABEL  **           00466
**       SET IN THE EXTERNAL LABEL FILE HAS A HDR1 AND A    **           00467
**       HDR2 LABEL, BUT NO ENDOFLABELHEADER AND NO EOF1    **           00468
**       AND NO EOF2, THE LBLFIX PARAMETER ALLOWS THE       **           00469
**       PROGRAM TO ACT AS IF THESE CONTROL CARDS WERE      **           00470
**       THERE.  THE EOF1 IS BUILT FROM THE HDR1 AND THE    **           00471
**       MEASURED BLOCK COUNT, AND THE EOF2 IS BUILT FROM   **           00472
**       THE HDR2.                                          **           00473
**                                                          **           00474
**  16.  COPYMODS CAN NOW INIT TAPES WITHOUT COPYING AN     **           00475
**       INPUT TAPE.  USE A PARM OF INITVOLS.  ASCII TAPES  **           00476
**       ARE INITTED WITH A PARM OF EITHER INASC3 OR        **           00477
**       INASC4, FOR ASCII LEVEL 3 AND ASCII LEVEL 4        **           00478
**       RESPECTIVELY.  A PARM OF INASCII DEFAULTS TO       **           00479
**       ASCII LEVEL 3.                                     **           00480
**                                                          **           00481
**  17.  COPYMODS CAN NOW CHANGE THE OWNER INFORMATION      **           00482
**       IN THE VOL1 LABEL.  USE THE TAPEOWNER= KEYWORD     **           00483
**       IN A SYSIN CARD.  14 CHARACTER TAPE OWNERS ARE     **           00484
**       SUPPORTED FOR ASCII TAPES.  IBM SL TAPES HAVE      **           00485
**       10 CHARACTERS IN THE TAPE OWNER FIELD.             **           00486
**                                                          **           00487
**  18.  COPYMODS CAN LIMIT ITSELF IN THE NUMBER OF FILES   **           00488
**       COPIED, IF THE FILELIMIT=NN KEYWORD IS CODED IN    **           00489
**       SYSIN.  IF THE INPUT IS SL, THEN THE FILELIMIT     **           00490
**       IS INTERPRETED AS SL FILES, AND MULTIPLIED BY 3.   **           00491
**       IF NOT, THEN IT IS INTERPRETED AS NL.  SL          **           00492
**       INTERPRETATION OF FILE NUMBERS CAN BE FORCED,      **           00493
**       USING THE SLLIM PARM KEYWORD.  NL INTERPRETATION   **           00494
**       IS FORCED USING THE NLLIM PARM KEYWORD.            **           00495
**                                                          **           00496
**  19.  USING THE "BYTES" PARAMETER, COPYMODS WILL REPORT  **           00497
**       BYTE COUNTS FOR ALL FILES IN THE INPUT TAPE, AND   **           00498
**       TOTAL BYTES FOR THE ENTIRE TAPE.  THE "CUMTOT"     **           00499
**       PARAMETER REPORTS CUMULATIVE BYTE TOTALS OVER      **           00500
**       MANY FILES, AND IMPLIES THAT THE "BYTES" PARM      **           00501
**       IS ALSO IN EFFECT.  A VARIANT OF THE "CUMTOT"      **           00502
**       PARAMETER IS THE "CUMSEP" PARAMETER, WHICH REPORTS **           00503
**       CUMULATIVE BYTE TOTALS, FILE BY FILE, BUT CUMSEP   **           00504
**       SEPARATES BYTE TOTALS COMING FROM LABELS, FROM THE **           00505
**       BYTE TOTALS COMING FROM DATA FILES.                **           00506
**                                                          **           00507
**  20.  COPYMODS NOW PRINTS "OPTIONS IN EFFECT" WITH THE   **           00508
**       "OPTION" PARAMETER.  (DEFAULT AS DISTRIBUTED, IS   **           00509
**       TO PRINT THEM.)                                    **           00510
**                                                          **           00511
**       IF YOU ARE CONFUSED THAT THE OPTION REPORT DOES    **           00512
**       NOT SEEM TO REFLECT THE OPTION KEYWORDS YOU ARE    **           00513
**       CODING IN YOUR JCL, PLEASE BE AWARE THAT COPYMODS  **           00514
**       DOES SOME OPTION ADJUSTMENTS TO RESOLVE APPARENT   **           00515
**       INCONSISTENCIES WITH THE PARM SETTINGS.  TO GET    **           00516
**       A "BEFORE AND AFTER" REPORT FOR THIS ACTION, CODE  **           00517
**       THE "CODEDPRM" PARM KEYWORD.                       **           00518
**                                                          **           00519
**  21.  BLOCK CORRECTION FOR EOF1 AND EOV1 LABELS NOW      **           00520
**       TAKES THE HIGH ORDER 4 BYTES OF THE BLOCK COUNT    **           00521
**       INTO ACCOUNT.  THIS IS A DIFFERENT FIELD IN THE    **           00522
**       EOF1 OR EOV1 LABEL (LAST 4 BYTES).  IF A TAPE      **           00523
**       FILE (EBCDIC SL TAPES ONLY) HAS MORE THAN 1        **           00524
**       MILLION BLOCKS IN IT, THEN THIS FIELD IS USED.     **           00525
**       OTHERWISE IT IS BLANKS.                            **           00526
**                                                          **           00527
**  22.  COPYMODS CAN NOW DO A QUICK DUMP OF TAPE LABELS,   **           00528
**       WITHOUT READING THE TAPE DATA.  USE THE PARM OF    **           00529
**       LBDQUICK (WHICH IMPLIES READONLY), JUST TO DO      **           00530
**       A LABLDUMP AND "FORWARD SPACE FILE" OVER THE       **           00531
**       DATA BLOCKS ON THE TAPE.                           **           00532
**                                                          **           00533
**  23.  USING PARM=STRIP, COPYMODS CAN STRIP ALL LABELS    **           00534
**       FROM SL TAPES TO MAKE NL OUTPUT TAPES.  IF         **           00535
**       FILE LIMITING IS NOT IN EFFECT (NO FILELIMIT=nnn   **           00536
**       CARD IN SYSIN), THEN THE LABELS AND THE TAPE MARK  **           00537
**       THAT FOLLOWS EACH ONE, WILL NOT BE WRITTEN TO THE  **           00538
**       OUTPUT TAPE(S).  IT DOES NOT MATTER WHERE THE      **           00539
**       LABELS ARE, ON THE TAPE, SO IF YOU HAVE SOME KIND  **           00540
**       OF MESSED-UP TAPE WITH LABELS IN THE WRONG PLACE,  **           00541
**       THESE WILL STILL BE CORRECTLY STRIPPED OFF.  IF    **           00542
**       FILE LIMITING IS IN EFFECT, THEN THE INPUT TAPE    **           00543
**       IS ASSUMED TO BE SL, AND THE NUMBER CODED IN THE   **           00544
**       FILELIMIT=nnn SYSIN CARD IS MULTIPLIED BY 3, AND   **           00545
**       THE COPYING IS STOPPED AFTER THAT POINT OF THE     **           00546
**       INPUT TAPE.                                        **           00547
**                                                          **           00548
**       FOR PARM=STRIP OPERATIONS, COPYMODS USES THE       **           00549
**       LABELCHK ROUTINE TO DETERMINE IF A TAPE FILE IS    **           00550
**       REALLY A LABEL, SO IT WILL STRIP OFF A LABEL FILE  **           00551
**       WHEREVER IT OCCURS.  THIS IS NOT LIKE THE COPYSLNL **           00552
**       PROGRAM, WHICH ASSUMES THAT EACH DATA FILE IS      **           00553
**       SANDWICHED BETWEEN TWO LABEL FILES, AND WHICH      **           00554
**       DOES THE STRIPPING BY "COUNTING" AND NOT BY        **           00555
**       "FEELING".                                         **           00556
**                                                          **           00557
**  24.  IF YOU HAVE SPECIFIED FILELIMIT=nnn IN A SYSIN     **           00558
**       CARD AND HAVE THEREFORE INVOKED FILE LIMITING,     **           00559
**       YOU CAN FORCE THE nnn TO BE INTERPRETED AS NL,     **           00560
**       USING THE NLLIM PARM, AND YOU CAN FORCE THE nnn    **           00561
**       TO BE INTERPRETED AS SL (AND THEREFORE BE          **           00562
**       MULTIPLIED BY 3), BY USING THE SLLIM PARM.         **           00563
**                                                          **           00564
**  25.  USING PARM=IDRCOFF, YOU CAN INDICATE THAT THE      **           00565
**       TAPE IS NON-COMPRESSED.  THIS IS USEFUL FOR AWS    **           00566
**       FORMAT TAPES WHICH REALLY AREN'T RUNNING ON THE    **           00567
**       3490 HARDWARE AND ABOVE.  SO YOU JUST INDICATE     **           00568
**       THEM AS UNCOMPRESSED, AND THE VIRTUAL TAPE LABELS  **           00569
**       DO NOT INDICATE TO MVS THAT IDRC IS ON.  THIS      **           00570
**       ALLOWS A 3420 OR 3480 VIRTUAL DEVICE TO READ THE   **           00571
**       TAPE, WITHOUT INCURRING AN S413-40 ABEND.          **           00572
**                                                          **           00573
**  26.  USING PARM=HEXPRT, THE FIRST 132 BYTES OF THE      **           00574
**       FIRST n RECORDS IN EACH FILE ARE PRINTED IN HEX    **           00575
**       AND EBCDIC.  DEFAULT FOR n IS 4.  THIS CAN BE      **           00576
**       OVERRIDDEN BY CODING PRINTRCDS=nnn IN THE SYSIN    **           00577
**       CARD, STARTING IN COLUMN 1.  GLOBAL VARIABLE       **           00578
**       &HEXDFLA CAN BE SET AT ASSEMBLY TIME, TO CHANGE    **           00579
**       THE DEFAULT n RECORDS TO BE HEX PRINTED.           **           00580
**                                                          **           00581
**  27.  THE PARM SCANNING PROGRAM PARMCHEK, CUSTOMIZED     **           00582
**       TO THIS VERSION OF COPYMODS, NOW DOES THE PARM     **           00583
**       SCANNING INSTEAD OF THE INLINE PARMCHK SUBROUTINE. **           00584
**       THEREFORE, THIS PROGRAM SHOULD BE ASSEMBLED IN     **           00585
**       BATCH, TOGETHER WITH THE PARMCHEK PROGRAM.         **           00586
**       THIS ALSO ALLOWS OPTIONAL DDNAME //PARMREPT TO     **           00587
**       BE CODED, TO SHOW THE RESULTS FROM THE PARM SCAN.  **           00588
**                                                          **           00589
**  28.  SUPPORT FOR ANSI/ISO (ASCII) TAPES.  LEVELS 3 AND  **           00590
**       4 ARE SUPPORTED.  COPYMODS CAN INIT ASCII TAPES    **           00591
**       (KEYWORDS INASC3 AND INASC4), AND CAN PERFORM      **           00592
**       ALL ITS FUNCTIONALITY ON THEM.  14 CHARACTER TAPE  **           00593
**       OWNER FIELD IS SUPPORTED FOR ASCII TAPES, AS WELL  **           00594
**       AS MOST OF THE OTHER DIFFERENCES BETWEEN ASCII     **           00595
**       LABEL FORMATS AND IBM (EBCDIC) LABEL FORMATS.      **           00596
**                                                          **           00597
**  29.  SECURITY INDICATORS IN TAPE LABELS CAN BE TURNED   **           00598
**       OFF IN THE COPIED TAPES USING THE SECOFF KEYWORD.  **           00599
**       THESE INDICATORS (TURNED OFF) ARE:                 **           00600
**        ASCII SPACE IN BYTE 11 OF ASCII VOL1 LABEL.       **           00601
**        ASCII SPACE IN BYTE 54 OF ASCII XXX1 LABELS.      **           00602
**        EBCDIC 0 IN BYTE 54 OF IBM XXX1 LABELS.           **           00603
**       IF THESE HAD BEEN ANYTHING OTHER THAN THE ABOVE,   **           00604
**       THE SECOFF KEYWORD WILL CAUSE THEM TO BE RESET     **           00605
**       AS ABOVE, TO INDICATE NO DATASET PROTECTION.       **           00606
**                                                          **           00607
**       RACF OR OTHER SECURITY MAY OVERRIDE THESE LABEL    **           00608
**       SECURITY INDICATORS, BUT WE HAVE THE ABILITY TO    **           00609
**       COMPLETELY TURN THEM OFF AT THE TAPE LABEL LEVEL.  **           00610
**       THE NOSECOFF KEYWORD NULLIFIES THE EFFECT OF THE   **           00611
**       SECOFF KEYWORD.                                    **           00612
**                                                          **           00613
**  30.  COPYMODS CAN TRANSPARENTLY (WITH NO FURTHER EFFORT **           00614
**       ON THE PROGRAMMER'S PART) READ PAST LEADING TAPE   **           00615
**       MARKS ON THE INPUT TAPE.  THESE MAY BE EITHER      **           00616
**       COPIED TO THE OUTPUT TAPES (KEYWORD LTMCOPY) OR    **           00617
**       NOT COPIED TO THE OUTPUT TAPES (KEYWORD LTMSKIP).  **           00618
**       MORE EXTENSIVE "LTM SERVICE" HAS BEEN BUILT INTO   **           00619
**       THIS PROGRAM.                                      **           00620
**                                                          **           00621
**  31.  COPYMODS CAN DISPLAY 6250 BPI FOOTAGES FOR THE     **           00622
**       FILES ON THE TAPE, USING THE FOOTAGE KEYWORD.      **           00623
**       FOOTAGE CALCULATIONS FOR EACH FILE, AS WELL AS     **           00624
**       FOOTAGE FOR THE ENTIRE TAPE, UP TO THE CURRENT     **           00625
**       FILE, ARE DISPLAYED.                               **           00626
**                                                          **           00627
**  32.  COPYMODS WILL DISPLAY MINIMUM AND MAXIMUM BLOCK    **           00628
**       SIZES FOR EACH TAPE FILE READ, WHEN THE MINMAX     **           00629
**       OPTION IS CODED.                                   **           00630
**                                                          **           00631
**  33.  COPYMODS CAN OPTIONALLY SHOW THE SIZE OF EACH      **
**       TAPE DATA BLOCK (TECHNICALLY CALLED A "RECORD")    **
**       ON THE TAPE, USING THE RECSIZE OPTION.  AS CODED   **
**       CURRENTLY, RECSIZE CAN PRODUCE A LOT OF SYSPRINT   **
**       OUTPUT, SINCE IT PRODUCES ONE LINE PER TAPE DATA   **
**       BLOCK.  THE RECSIZE OPTION DISPLAYS DETAILS,       **
**       WHICH THE MINMAX OPTION SUMMARIZES.                **
**                                                          **
**************************************************************           00632
         EJECT                                                           00633
**************************************************************           00634
**  CHANGE LOG:                                             **           00635
**                                                          **           00636
** LEVEL 003                                                **           00637
**  03/03/00 - ALLOW COPYING OF 64K BLOCKS                * **           00638
**                                                          **           00639
** LEVEL 004                                                **           00640
**  03/03/00 - CHECK FOR DOUBLE TAPE MARK AFTER           * **           00641
**             A HEADER LABEL.  THIS MEANS AN SL          * **           00642
**             FILE WITHOUT ANY DATA IN IT.  AND          * **           00643
**             IF THIS IS THE CASE, DON'T STOP            * **           00644
**             COPYING FILES.                             * **           00645
**                                                          **           00646
** LEVEL 005                                                **           00647
**  03/03/00 - GET AWAY FROM R13 AS BASE, USE             * **           00648
**             R12,R11.                                   * **           00649
**                                                          **           00650
** LEVEL 006                                                **           00651
**  03/12/00 - ENLARGED THE PROGRAM TO ALLOW UP           * **           00652
**             TO 16 OUTPUT TAPES FROM OUT1 TO            * **           00653
**             OUT16.                                     * **           00654
**                                                          **           00655
** LEVEL 007 AND 008                                        **           00656
**  03/14/00 - CLEANED UP SPELLING ON ERROR               * **           00657
**             MESSAGES AND FIXED DOCUMENTATION.          * **           00658
**             ADDED EYECATCHERS COSMETICALLY.            * **           00659
**                                                          **           00660
** LEVEL 009                                                **           00661
**  03/21/00 - STOP AFTER INITTED MVS TAPE                * **           00662
**                                                          **           00663
** LEVEL 010                                                **           00664
**  03/24/00 - FIXED THE BLOCK SIZE CALCULATIONS          * **           00665
**             FOR BLOCK SIZES FROM 32K TO 64K.           * **           00666
**                                                          **           00667
**             I MADE AN ATTEMPT TO COPY DOS/VSE          * **           00668
**             TAPES THAT HAVE LEADING TAPE               * **           00669
**             MARKS.  THERE IS A CHOICE TO               * **           00670
**             EITHER COPY ALL THE LEADING                * **           00671
**             TAPEMARKS TO AN OUTPUT TAPE, OR TO         * **           00672
**             DISCARD THEM ALL.  YOU USE A PARM          * **           00673
**             OF LTMSKIP TO DISCARD LEADING              * **           00674
**             TAPEMARKS, AND ANY OTHER PARM, OR          * **           00675
**             NO PARM, WILL CAUSE THE PROGRAM TO         * **           00676
**             COPY THEM TO THE OUTPUT TAPES.             * **           00677
**                                                          **           00678
** LEVEL 011                                                **           00679
**  03/24/00 - PROPERLY ACCOUNT FOR INITTED TAPE          * **           00680
**             BY ENDING THE JOB NORMALLY AFTER           * **           00681
**             ONE TAPEMARK.                              * **           00682
**                                                        * **           00683
**             IF VOL1 LABEL IS DETECTED, THEN            * **           00684
**             PUT OUT A MESSAGE SAYING SO, AND           * **           00685
**             INDICATING THE VOLSER THAT WAS             * **           00686
**             FOUND.  THIS PROGRAM WAS WRITTEN           * **           00687
**             ORIGINALLY WITH THE INTENT OF              * **           00688
**             HANDLING NL TAPES, SO THAT THE             * **           00689
**             CONDITIONS WHICH RESULT FROM               * **           00690
**             HAVING SL TAPES, HAD TO BE                 * **           00691
**             ACCOUNTED FOR LATER.                       * **           00692
**                                                          **           00693
** LEVEL 012                                                **           00694
**  04/19/00 - ACCOUNT FOR SL EOV1 AND EOV2               * **           00695
**             HAVING ONLY ONE TAPE MARK AFTER              **           00696
**             THEM.                                        **           00697
**                                                          **           00698
** LEVEL 013                                                **           00699
**  04/30/00 - ORGANIZE THE CHECK FOR STANDARD            * **           00700
**             LABEL TYPES, AND THE SETTING OF              **           00701
**             FLAGS TO INDICATE EACH TYPE.                 **           00702
**             SEE NEW SUBROUTINE CALLED LABELCHK.          **           00703
**             MOVE NON-LABEL-RELATED FLAGS OUT             **           00704
**             OF THE LBLFLAG FLAG.  PREPARE FOR            **           00705
**             EASY PRINTING OF LABEL CONTENTS,             **           00706
**             BUT NO EXTRA PRINTING IS DONE AT             **           00707
**             THIS LEVEL.                                  **           00708
**                                                          **           00709
** LEVEL 014                                                **           00710
**  05/02/00 - ADDED A FLEXIBLE TABLE-DRIVEN              * **           00711
**             PARM SCANNER THAT IS EASY TO                 **           00712
**             MODIFY, AND TO SUPPLY SYNONYMS               **           00713
**             FOR THE PARMS.  ADDED SUPPORT,               **           00714
**             VIA THE LBLINFO PARM, TO PRINT               **           00715
**             HDR1, HDR2, EOF1, EOF2, EOV1,                **           00716
**             EOV2 LABEL INFORMATION, IF IT IS             **           00717
**             FOUND ON THE INPUT TAPE.  THAT IS,           **           00718
**             IF THE INPUT TAPE IS SL.                     **           00719
**                                                          **           00720
**             FOR A LIST OF PERMISSIBLE PARMS,             **           00721
**             SEE LABEL PARMTABL.                          **           00722
**                                                          **           00723
** LEVEL 015                                                **           00724
**  05/07/00 - GAVE THE PARM SCANNER THE ABILITY          * **           00725
**             TO TURN OFF A PARM FLAG AS WELL AS           **           00726
**             THE ABILITY TO TURN IT ON. INCREASED         **           00727
**             THE SIZE OF A PARM TABLE ENTRY BY ONE        **           00728
**             BYTE.                                        **           00729
**                                                          **           00730
** LEVEL 016                                                **           00731
**  05/08/00 - GAVE THE PARM SCANNER THE ABILITY          * **           00732
**             TO SET ANY PARM SETTING AS A                 **           00733
**             DEFAULT.  A SETTING FOR A DEFAULT            **           00734
**             ENTRY THAT IS LATER IN THE TABLE,            **           00735
**             WILL OVERRIDE A SETTING FOR A                **           00736
**             DEFAULT THAT WAS SET EARLIER IN THE          **           00737
**             TABLE.  SETTING A PARM EXPLICITLY            **           00738
**             IN THE JCL, WILL OVERRIDE ANY                **           00739
**             DEFAULT SETTING FOR THAT PARM.               **           00740
**                                                          **           00741
** LEVEL 017                                                **           00742
**  05/11/00 - USED THE PARM SCANNER TO MAKE A            * **           00743
**             DIFFERENCE BETWEEN PRINTING VARIOUS          **           00744
**             KINDS OF TAPE LABELS.  IF YOU WANT           **           00745
**             ALL OF THEM, YOU JUST HAVE A PARM            **           00746
**             THAT THROWS ALL OF THE FLAGS.  ALL           **           00747
**             OF THIS IS CODED IN PARMTABL AND             **           00748
**             THE FLAGS ARE USED IN PRTXXX1 AND            **           00749
**             PRTXXX2.                                     **           00750
**                                                          **           00751
** LEVEL 018                                                **           00752
**  05/22/00 - ADDED THE PROVISION TO CHANGE THE          * **           00753
**             VOLSER OF THE COPIED TAPES, TO               **           00754
**             MATCH THE VOLSER INDICATED IN THE            **           00755
**             OUTXX DD NAMES.  THIS IS DONE WITH           **           00756
**             THE CHGVOL PARM KEYWORD.  THIS               **           00757
**             ACTION ONLY OCCURS IF THE INPUT              **           00758
**             TAPE IS SL, AND SO A VOL1 LABEL IS           **           00759
**             DETECTED.  THE COPIED VOL1 LABEL             **           00760
**             IS ALTERED BEFORE THE WRITE.                 **           00761
**                                                          **           00762
** LEVEL 019                                                **           00763
**  06/06/00 - ADDED THE PROVISION TO FIX EOV1            * **           00764
**             AND EOV2 LABELS THAT ARE IN THE              **           00765
**             MIDDLE OF A TAPE.  OF COURSE THIS            **           00766
**             ISN'T SUPPOSED TO HAPPEN, BUT IT             **           00767
**             CAN HAPPEN WHEN YOU COPY FILES               **           00768
**             WITH THE COPYFILE PROGRAM, FROM              **           00769
**             THE END OF ONE TAPE, TO THE                  **           00770
**             BEGINNING OR THE MIDDLE OF                   **           00771
**             ANOTHER.  COPYFILE HAS NOT BEEN              **           00772
**             FIXED AS YET NOT TO DO THIS, BUT IT          **           00773
**             COPIES THE EOV LABELS AS IS.  THIS           **           00774
**             NEW OPTION IS CALLED EOVCHG OR               **           00775
**             EOV2EOF; THE EOV LABELS ARE                  **           00776
**             CHANGED (IN THE COPIED TAPES) TO             **           00777
**             EOF, AND A MESSAGE IS WRITTEN THAT           **           00778
**             REPORTS THIS FACT.                           **           00779
**                                                          **           00780
** LEVEL 020                                                **           00781
**  06/29/00 - ADDED THE PARM OF READ OR READONLY         * **           00782
**             TO ALLOW A RUN OF COPYMODS THAT              **           00783
**             JUST READS THE INPUT TAPE, AND DOES          **           00784
**             NOT MAKE COPIES.                             **           00785
**                                                          **           00786
** LEVEL 021                                                **           00787
**  07/06/00 - FIX COPYMODS TO CORRECTLY COPY             * **           00788
**             IEHINITTED TAPES.                            **           00789
**                                                          **           00790
** LEVEL 022                                                **           00791
**  09/10/00 - COPYMODS CAN DUMP THE IBM STANDARD         * **           00792
**             LABELS FROM A TAPE, TO AN FB-80              **           00793
**             OUTPUT FILE.  PARM IS LABLDUMP.              **           00794
**                                                          **           00795
** LEVEL 023                                              * **           00796
**  09/11/00 - ALLOWS LIMITED SYSIN INPUT OPTIONALLY.       **           00797
**             ONLY IMPLEMENTATION SO FAR IS TO             **           00798
**             CHANGE ALL OUTPUT VOLSER'S TO THE            **           00799
**             SAME VALUE, BUT NOT NECESSARILY TO           **           00800
**             WHAT IS IN THE OUTX  DD CARD.  IN            **           00801
**             ORDER TO USE THE FACILITY, YOU HAVE          **           00802
**             TO CODE                                      **           00803
**             OUTVOLALL=XXXXXX STARTING IN COL 1           **           00804
**             OF THE SYSIN CARD FILE.  IF THERE            **           00805
**             ARE NO VALID OUTVOLALL= CARDS IN             **           00806
**             SYSIN, THEN THE EFFECT IS THE SAME           **           00807
**             AS CODING CHGVOL.                            **           00808
**                                                          **           00809
**             FIXED LABEL DUMP OPTION SO THAT THE          **           00810
**             DUMPED LABELS HAVE CONTROL CARDS             **           00811
**             AFTER THEM.  THE EXTERNAL ADD LABELS         **           00812
**             FUNCTION IN LEVEL 24 NEEDS THESE             **           00813
**             CONTROL CARDS.                               **           00814
**                                                          **           00815
** LEVEL 024                                              * **           00816
**  09/14/00 - ADDED CAPABILITY OF CREATING SL              **           00817
**             OUTPUT COPIES FROM NL INPUT AND A            **           00818
**             SET OF LABELS CREATED BY LABLDUMP.           **           00819
**             CHANGED THE DCB NAMES AND DD CARDS           **           00820
**             AND OPTION NAMES FOR LABEL DUMP AND          **           00821
**             RESTORE.                                     **           00822
**                                                          **           00823
**             CHANGED PROGRAM INITIALIZATION TO            **           00824
**             A STANDARD FORM.  GOT RID OF PRIME           **           00825
**             AND TERME MACROS.  HAVE 5 BASE               **           00826
**             REGISTERS TO LEAVE ROOM FOR EXPANSION.       **           00827
**                                                          **           00828
**             CHECK FOR VOL1 RECORD AS FIRST RECORD        **           00829
**             ON THE INPUT TAPE.  WON'T WRITE MORE         **           00830
**             LABELS ON AN SL TAPE, AND WON'T              **           00831
**             DAMAGE THE OUTPUT TAPES, IF THE INPUT        **           00832
**             TAPE IS SL, ACCIDENTALLY.                    **           00833
**                                                          **           00834
** LEVEL 025                                              * **           00835
**  09/20/00 - COPYMODS CAN NOW TAKE INPUT FROM             **           00836
**             SYSIN AND SEARCH FOR ALL PARMS.              **           00837
**                                                          **           00838
**             IF A SYSIN DD CARD IS PRESENT, IT WILL       **           00839
**             BE USED.                                     **           00840
**                                                          **           00841
**             ANY CARD IN SYSIN WHICH IS NOT A             **           00842
**             KEYWORD PARAMETER STARTING IN COLUMN 1,      **           00843
**                TAPEOWNER=xxxxxxxxxx                      **           00844
**                FILELIMIT=nnnn                            **           00845
**                LABELIMIT=nnnn                            **           00846
**                PRINTRCDS=nnnn                            **           00847
**                  or                                      **           00848
**                OUTVOLALL=volser ,                        **           00849
**             IS SEARCHED BY THE PARMLOOP ROUTINE,         **           00850
**             AND ANY PARM THAT IS CODED IN THE            **           00851
**             PARM TABLE, CAN BE CODED IN SYSIN,           **           00852
**             AND IT WILL OVERRIDE THE PARM IN             **           00853
**             THE EXEC CARD (SINCE SYSIN IS                **           00854
**             SCANNED LATER IN THE PROCESSING).            **           00855
**                                                          **           00856
**             INCLUDED A BLOCK COUNT CORRECTION AS         **           00857
**             DEFAULT, WHEN WRITING STANDARD LABELS        **           00858
**             FROM AN EXTERNAL FILE.  THE CORRECTED        **           00859
**             BLOCK COUNTS ARE WRITTEN TO THE EOF1         **           00860
**             AND EOV1 LABELS IN THE OUTPUT TAPES.         **           00861
**                                                          **           00862
**             WHEN WRITING TAPE LABELS FROM AN EXTERNAL    **           00863
**             FILE, INCLUDED AN OPTION TO PRINT THEIR      **           00864
**             CONTENTS, IN THE SAME WAY, AS PRINTING       **           00865
**             THE CONTENTS OF STANDARD LABELS FOUND        **           00866
**             WHEN COPYING AN INPUT TAPE.                  **           00867
**                                                          **           00868
** LEVEL 026                                              * **           00869
**  09/22/00 - ON LABADDIN, COPYMODS SHOULD                 **           00870
**             RESPECT CHGVOL AND OUTVOLALL= .              **           00871
**                                                          **           00872
** LEVEL 027                                              * **           00873
**  09/22/00 - ON LABADDIN, COPYMODS SHOULD                 **           00874
**             BE ABLE TO DO EOV2EOF PROCESSING             **           00875
**                                                          **           00876
** LEVEL 028                                              * **           00877
**  09/25/00 - ON LABADDIN AND LABLDUMP, PUT IN             **           00878
**             STANDARD USER LABEL SUPPORT.                 **           00879
**                                                          **           00880
** LEVEL 029                                              * **           00881
**  09/25/00 - FIX LABEL PRINTING REPORTS FOR               **           00882
**             STANDARD USER LABELS.                        **           00883
**                                                          **           00884
** LEVEL 030                                              * **           00885
**  09/27/00 - CORRBLKS PARM ALLOWS FIXING OF               **           00886
**             EOF1 AND EOV1 BLOCK COUNTS IN THE            **           00887
**             OUTPUT TAPES, DURING THE COPY.               **           00888
**             WRITE MESSAGE THAT THIS IS IN EFFECT.        **           00889
**                                                          **           00890
**             FIXED THE EYECATCHERS A BIT.                 **           00891
**                                                          **           00892
**             AGAIN FIXED COPY OF INITTED TAPES.           **           00893
**                                                          **           00894
** LEVEL 031                                              * **           00895
**  09/28/00 - MADE SURE WITH LABADDIN WHEN YOU             **           00896
**             HAVE EXTRA LABELS AND ADD NULL FILES,        **           00897
**             THAT 2 TM'S ARE WRITTEN AFTER THE            **           00898
**             HDR2 RECORDS, BEFORE THE EOF1'S.             **           00899
**                                                          **           00900
** LEVEL 032                                              * **           00901
**  10/02/00 - NEW NOEXNULL OPTION CONTROLS                 **           00902
**             LABADDIN PROCESSING WHEN THERE ARE           **           00903
**             MORE LABELS IN THE EXTERNAL LABEL            **           00904
**             DATASET, THAN THERE ARE NL FILES             **           00905
**             IN THE INPUT TAPE.  DEFAULT IS TO            **           00906
**             WRITE EXTRA NULL SL FILES.  NOEXNULL         **           00907
**             SAYS TO STOP AT THE END OF NL FILES          **           00908
**             AND NOT WRITE NULL SL FILES TO               **           00909
**             CORRESPOND TO THE EXTRA EXTERNAL             **           00910
**             LABELS.                                      **           00911
**                                                          **           00912
**             THIS HAS TO BE DONE WITH A TECHNIQUE         **           00913
**             OF WRITING AN EXTRA HEADER LABEL SET,        **           00914
**             AND THEN BACKING OVER IT AND CLOSING.        **           00915
**                                                          **           00916
** LEVEL 033                                              * **           00917
**  10/05/00 - NEW LBLFIX OPTION FIXES LABADDIN             **           00918
**             PROCESSING WHEN THE LAST LABEL SET           **           00919
**             IN THE EXTERNAL LABEL FILE IS PARTLY         **           00920
**             MISSING.  ALL YOU NEED IS A HDR1 AND         **           00921
**             A HDR2 LABEL IN THE LAST LABEL SET,          **           00922
**             AND COPYMODS (WITH LBLFIX ON) WILL           **           00923
**             ACT AS IF AN ENDOFLABELHEADER CARD           **           00924
**             WERE THERE (SO IT WRITES A TAPEMARK          **           00925
**             AND THE DATA AND A TAPEMARK), AND IT         **           00926
**             CONSTRUCTS THE EOF1 FROM THE HDR1            **           00927
**             PLUS THE MEASURED BLOCK COUNTS FROM          **           00928
**             THE DATA FILE.  AN EOF2 IS COPIED            **           00929
**             FROM THE EXISTING HDR2 AND EOF IS            **           00930
**             PUT IN.  2 TAPEMARKS ARE WRITTEN ON          **           00931
**             THE END.                                     **           00932
**                                                          **           00933
** LEVEL 034                                              * **           00934
**  10/10/00 - WHEN AN ERROR THAT IS NOT A UNIT             **           00935
**             CHECK IS PRESENT ON AN OUTPUT TAPE           **           00936
**             DRIVE, NO REWIND IS PERFORMED BEFORE         **           00937
**             THE CLOSE.  THIS LETS THE CLOSE DO           **           00938
**             THE REWIND, AND LEAVES THE WRITTEN           **           00939
**             DATA ON THE TAPE.  THIS WAY, A TAPE          **           00940
**             THAT WAS INCOMPLETELY WRITTEN IS             **           00941
**             NOT ERASED.                                  **           00942
**                                                          **           00943
**             END-OF-TAPE (UNIT EXCEPTION ON WRITE)        **           00944
**             CONDITION IS FLAGGED WITH A PROPER           **           00945
**             MESSAGE FOR THE CONTEXT, AND THE WTOR        **           00946
**             FOR THAT DRIVE IS BYPASSED.                  **           00947
**                                                          **           00948
**             THIS PROBLEM HAS EXISTED SINCE THE           **           00949
**             FIRST VERSION OF THIS PROGRAM.               **           00950
**                                                          **           00951
**             CAREFUL TO FLAG ALL THE EXTRA DD             **           00952
**             NAMES AS CLOSED BEFORE CLOSING THEM.         **           00953
**             THESE ARE THE OPENDFLG SETTINGS.             **           00954
**                                                          **           00955
** LEVEL 035                                              * **           00956
**  10/12/00 - TRY TO FIX COPYING OF INITTED                **           00957
**             TAPES, BY NOT REUSING THE WRITE              **           00958
**             IOB WITHOUT REFRESHING THE PARTS             **           00959
**             THAT ARE USED BY IOS.  THIS IS THE           **           00960
**             CLEARIOB SUBROUTINE. (IT DOESN'T HELP.)      **           00961
**                                                          **           00962
**             LABLDUMP OF AN IEHINITTED TAPE               **           00963
**             PRODUCES AN ENDOFLABELHEADERINIT             **           00964
**             CARD, IN ANTICIPATION OF CREATING            **           00965
**             A TAPE INITIALIZATION ROUTINE FROM           **           00966
**             EXTERNAL LABELS.  (INITVOLS IN THE           **           00967
**             NEXT LEVEL, IS BETTER.)                      **           00968
**                                                          **           00969
**             FIXED BUG OF WRITING 2 EOV2 LABELS.          **           00970
**                                                          **           00971
** LEVEL 036                                              * **           00972
**  10/17/00 - CAN INIT TAPES FROM PROGRAM-GENERATED        **           00973
**             CARD IMAGES.  ADD TAPEOWNER= KEYWD           **           00974
**             IN SYSIN DD NAME.  THIS KEYWORD CAN          **           00975
**             ALSO CHANGE TAPE OWNER INFORMATION           **           00976
**             IN THE VOL1 LABEL FOR REGULAR COPIES,        **           00977
**             ALTHOUGH IT WAS WRITTEN FOR TAPE INITS.      **           00978
**                                                          **           00979
**             TO INIT TAPES WITH NO INPUT TAPE,            **           00980
**             USE A PARM OF INITVOLS.                      **           00981
**                                                          **           00982
**             TAPEOWNER=  AND  OUTVOLALL=  KEYWORDS        **           00983
**             BOTH TURN ON THE OUTVOL PARM OPTION.         **           00984
**                                                          **           00985
**             CONSOLIDATED CHGVOL CODE INTO A              **           00986
**             SUBROUTINE TO SIMPLIFY THE PROGRAM.          **           00987
**                                                          **           00988
**             CLEANED CHGVOL CODE TO HANDLE LABADDIN       **           00989
**             AS WELL AS TAPE INPUT, WITHOUT THEM          **           00990
**             STEPPING ON EACH OTHER.                      **           00991
**                                                          **           00992
** LEVEL 037                                              * **           00993
**  10/31/00 - ADDED FILELIMIT= KEYWORD TO SYSIN            **           00994
**             CARDS.  THE PROGRAM FEELS FOR SL OR          **           00995
**             NL TAPES ON THE INPUT TAPE.  IF THE          **           00996
**             INPUT TAPE IS SL, THEN THE FILELIMIT         **           00997
**             IS MULTIPLIED BY 3, AND THE BIGGER           **           00998
**             VALUE IS USED.                               **           00999
**                                                          **           01000
**             COPYMODS WILL ONLY COPY INPUT TAPE           **           01001
**             FILES UP TO THE LIMIT OF THE FILELIMIT       **           01002
**             VALUE, IF THERE IS ONE.                      **           01003
**                                                          **           01004
**             INTERNALLY, THE FILELIMIT= KEYWORD           **           01005
**             SETS THE PARM VALUE OF LIMFILE OR            **           01006
**             FILELIM, AND THAT PARM IS WHAT DRIVES        **           01007
**             THE PROGRAM ACTION.                          **           01008
**                                                          **           01009
**             BYTES PARM KEYWORD ADDED.  IF SO, THE        **           01010
**             PROGRAM COUNTS BYTES READ FROM THE           **           01011
**             INPUT TAPE FILES, AND TOTALS THEM AT         **           01012
**             THE END.  NOBYTES KEYWORD WILL NULLIFY       **           01013
**             THIS ACTION.                                 **           01014
**                                                          **           01015
** LEVEL 038                                              * **           01016
**  11/01/00 - ADDED CUMTOT KEYWORD WHICH IMPLIES           **           01017
**             THE BYTES KEYWORD.  THIS OPTION KEEPS        **           01018
**             RUNNING BYTE TOTALS AS WELL AS THE           **           01019
**             BYTE COUNTS FOR THE INDIVIDUAL TAPE          **           01020
**             FILES.                                       **           01021
**                                                          **           01022
** LEVEL 039                                              * **           01023
**  11/01/00 - EXPANDED THE SIZE OF PARMTABL TO             **           01024
**             TAKE 5 BYTES OF PARMS INSTEAD OF 3.          **           01025
**             THEREFORE WE HAVE PARMFLG1 THRU              **           01026
**             PARMFLG5 TO USE AS OPTION BYTES.             **           01027
**                                                          **           01028
** LEVEL 040                                              * **           01029
**  11/03/00 - SPLIT BYTE TOTALS TO SEPARATE OUT            **           01030
**             THE INPUT TAPE'S BYTE COUNT COMING FROM      **           01031
**             LABELS.  INNOVATION'S FATAR GIVES TAPE       **           01032
**             BYTE COUNTS NOT COUNTING LABEL BYTES,        **           01033
**             AND I WANT TO BE ABLE TO MATCH THEIR         **           01034
**             COUNT, SO A USER WILL BE ABLE TO             **           01035
**             EXPLAIN IT.  ALSO, I WANT TO BE ABLE         **           01036
**             TO GET A NL BYTE COUNT FROM AN SL TAPE.      **           01037
**                                                          **           01038
**             PUT IN PROTECTION FOR "IN" DDNAME, SO        **           01039
**             IF IT ISN'T CODED IN THE JCL, AND YOU'RE     **           01040
**             NOT INITTING TAPES, YOU DON'T GET AN         **           01041
**             S200 ABEND, BUT A MESSAGE TELLING YOU        **           01042
**             WHAT TO DO.                                  **           01043
**                                                          **           01044
** LEVEL 041                                              * **           01045
**  11/05/00 - LABELIMIT=NNN WILL LIMIT THE NUMBER          **           01046
**             OF LABEL SETS IN THE LABADDIN FILE           **           01047
**             THAT COPYMODS WILL PROCESS.  EVEN            **           01048
**             IF THE LABADDIN FILE CONTAINS MANY           **           01049
**             LABEL SETS, THE NUMBER PROCESSED WILL        **           01050
**             BE NNN ONLY.  LABELIMIT=NNN IS CODED         **           01051
**             AS A SYSIN CARD, LIKE FILELIMIT=NNN.         **           01052
**                                                          **           01053
**             LABELIMIT=NNN COUNTS THE NUMBER OF           **           01054
**             ----ENDOFLABELTRAILER CARDS SEEN IN          **           01055
**             THE LABADDIN FILE, AND CONSIDERS THE         **           01056
**             FILE TO END AFTER NNN OF THEM.               **           01057
**                                                          **           01058
**  11/06/00 - FIXED A BUG THAT I INTRODUCED A WHILE        **           01059
**             BACK AT LABEL WRITE17.  THERE SHOULDN'T      **           01060
**             BE A TEST FOR LBLFLAG,X'80' (EOV2).          **           01061
**             THIS CHOPS PROCESSING OFF TOO SOON           **           01062
**             WHEN EOV LABELS ARE PRESENT.                 **           01063
**                                                          **           01064
** LEVEL 042                                              * **           01065
**  11/06/00 - TURNED ALL BAL R6 ROUTINES INTO              **           01066
**             BAL R7, AND USED R6 AS SIXTH BASE            **           01067
**             REGISTER.                                    **           01068
**                                                          **           01069
** LEVEL 043                                              * **           01070
**  11/08/00 - PRINT "OPTIONS IN EFFECT" WITH THE           **           01071
**             "OPTION" PARAMETER.  CALL IS TO A            **           01072
**             SUBPROGRAM THAT WRITES TO SYSPRINT.          **           01073
**             PROGRAM COPYMOPT SHOULD BE BATCH             **           01074
**             ASSEMBLED AND LINKEDITED WITH                **           01075
**             THE COPYMODS PROGRAM.                        **           01076
**                                                          **           01077
**             CHANGED THE WORDING OF SOME OF THE           **           01078
**             PARMS TO "SHUT OFF" OPTIONS, SLIGHTLY,       **           01079
**             TO ACCOMMODATE THE COPYMOPT PROGRAM.         **           01080
**                                                          **           01081
**  12/02/00 - FIXED BUG AFTER INTRODUCING THE OPTIONS      **           01082
**             PARAMETER.  WRLBLFLG,X'01' WAS ON            **           01083
**             UNCONDITIONALLY, INSTEAD OF ONLY WHEN        **           01084
**             LABADDIN WAS IN EFFECT.                      **           01085
**                                                          **           01086
** LEVEL 044                                              * **           01087
**  12/02/00 - ENHANCED OPTIONS DISPLAY                     **           01088
**                                                          **           01089
** LEVEL 045                                              * **           01090
**  12/05/00 - OPTION TO SUPPRESS WTO AT GOOD               **           01091
**             COMPLETION OF THE COPY. SUPPWTO.             **           01092
**                                                          **           01093
** LEVEL 046                                              * **           01094
**  12/07/00 - SAVE FULL 10 DIGITS OF BLOCK COUNT.          **           01095
**             7 DIGITS ARE DISPLAYED IN THE REPORT.        **           01096
**             PUT IN FIX TO MOVE HI ORDER 4 DIGITS         **           01097
**             TO HI ORDER FIELD WHEN DOING BLOCK           **           01098
**             COUNT CORRECTION.                            **           01099
**                                                          **           01100
**             PRINT ROUTINE FOR EOF1, EOV1 FIXED.          **           01101
**                                                          **           01102
** LEVEL 047                                              * **           01103
**  12/11/00 - LBDQUICK OPTION ALLOWS A QUICK LABEL         **           01104
**             DUMP OF TAPES WHICH CONTAIN LARGE            **           01105
**             NUMBERS OF DATA RECORDS.  IF THE             **           01106
**             ONLY TASK IS TO DUMP THE LABELS, YOU         **           01107
**             CAN NOW FSF PAST THE NON-LABEL DATA.         **           01108
**                                                          **           01109
** LEVEL 048                                              * **           01110
**  05/19/02 - MAKE SYSIN AN OPTIONAL DDNAME, SO            **           01111
**             YOU DON'T HAVE TO LOOK IN THE PARMS          **           01112
**             TO SEE IF YOU SHOULD OPEN IT.  IF IT         **           01113
**             IS THERE IN THE JCL, THEN OPEN IT.           **           01114
**                                                          **           01115
** LEVEL 049                                              * **           01116
**  05/20/02 - ADD CUMSEP AND NOCUMSEP OPTIONS,             **           01117
**             TO SEPARATE CUMULATIVE TOTALS BY LABEL       **           01118
**             BYTE COUNTS AND DATA BYTE COUNTS,            **           01119
**             INSTEAD OF TOTAL BYTE COUNTS.                **           01120
**                                                          **           01121
** LEVEL 050 - ADD PARM=STRIP, TO NOT COPY TAPE           * **           01122
**  10/16/02   LABELS, AND ONE TAPE MARK AFTER              **           01123
**             EACH LABEL.  IT DOES NOT MATTER              **           01124
**             WHERE THE LABELS ARE, IN THE INPUT           **           01125
**             TAPE--THEY WILL BE STRIPPED OFF THE          **           01126
**             OUTPUT TAPE.  FILE LIMITING IS TREATED       **           01127
**             AS IN NORMAL SL TAPES.  THE FILE LIMIT       **           01128
**             NUMBER IS MULTIPLIED BY 3, AND THE           **           01129
**             COPYING IS CUT OFF AFTER 3*nnn,              **           01130
**             TREATED AS BLP, ON THE INPUT TAPE.           **           01131
**                                                          **           01132
** LEVEL 051 - WHEN LIMITING FILES TO BE COPIED, USING      **           01133
**             THE FILELIMIT=nnn SYSIN CARD, NORMALLY       **           01134
**             COPYMODS TRIES TO DETECT WHETHER THE         **           01135
**             INPUT TAPE IS SL, OR NL.  THEN, THE nnn      **           01136
**             NUMBER (IF THE TAPE IS SL) IS MULTIPLIED     **           01137
**             BY 3, AND (IF THE TAPE IS NL) THE nnn        **           01138
**             NUMBER IS USED AS-IS.  IN THIS LEVEL,        **           01139
**             WE CAN NOW FORCE THE nnn TO BE               **           01140
**             INTERPRETED AS NL USING THE NLLIM            **           01141
**             KEYWORD, AND WE CAN FORCE nnn TO BE          **           01142
**             INTERPRETED AS 3*nnn USING THE SLLIM         **           01143
**             KEYWORD.  NONLLIM AND NOSLLIM REVERT         **           01144
**             THE PROGRAM TO THE DEFAULT, UNLESS THE       **           01145
**             OTHER KEYWORD IS ALSO CODED.                 **           01146
**                                                          **           01147
** LEVEL 052 - WHEN WRITING A TAPE MARK USING EXCP,         **           01148
**             YOU HAVE TO ADJUST THE "BYTES MOVED"         **           01149
**             FIELD IN OUTCCW+6(2) TO A SMALL VALUE,       **           01150
**             SUCH AS X'0001'.  SO IN THAT CASE, WE        **           01151
**             SAVE THE "BYTES MOVED" FIELD TO LABEL        **           01152
**             SAVBYTES, AND REPLACE IT WITH X'0001'        **           01153
**             DURING THE WRITE OF THE TAPE MARK.           **           01154
**                                                          **           01155
** LEVEL 053 - OPTION OF IDRCOFF TO TURN OFF 3490E OR 3590  **           01156
**             OR IDRC INDICATORS IN THE TAPE LABELS.       **           01157
**             ALSO, ON INPUT ERROR, CLOSE ALL THE FILES    **           01158
**             BEFORE ISSUING ABEND 069.                    **           01159
**                                                          **           01160
** LEVEL 054 - HEX PRINT FIRST 132 BYTES OF FIRST N         **           01161
**             RECORDS OF EACH FILE.  IF KEYWORD HEXPRT     **           01162
**             IS CODED, A DEFAULT OF 4 BLOCKS FROM EACH    **           01163
**             TAPE FILE WILL BE DUMPED (THE WAY TAPESCAN   **           01164
**             DOES IT).  YOU CAN OVERRIDE THIS VALUE BY    **           01165
**             CODING PRINTRCDS=nnn IN SYSIN, STARTING IN   **           01166
**             COLUMN 1.  RECORDS ARE DUMPED INTO THE       **           01167
**             SYSPRINT DATASET.                            **           01168
**                                                          **           01169
** LEVEL 055 - MAKE DEFAULT NUMBER OF RECORDS TO HEX PRINT, **           01170
**             A GLOBAL ASSEMBLER VARIABLE, &HEXDFLA.       **           01171
**             DISTRIBUTION VALUE IS SET TO 4, AS ABOVE.    **           01172
**                                                          **           01173
** LEVEL 056 - TAKE THE TRANSLATE TABLES FOR HEX PRINT OUT  **           01174
**             OF THE MAIN CSECT.                           **           01175
**                                                          **           01176
** LEVEL 057 - USE THE PARMCHEK SEPARATED PARMSCAN PROGRAM  **           01177
**             INSTEAD OF THE PARMCHK SUBROUTINE FOR        **           01178
**             SCANNING PARM AND SYSIN CARDS.  THIS ALSO    **           01179
**             ALLOWS THE USE OF THE OPTIONAL DDNAME OF     **           01180
**             //PARMREPT TO LOOK AT THE ACTION OF THE      **           01181
**             PARM SCAN IN DETAIL.                         **           01182
**                                                          **           01183
**             PARMCHEK HAS TO BE ASSEMBLED TOGETHER WITH   **           01184
**             COPYMODS.  BE SURE TO CODE PARM=BATCH IN     **           01185
**             THE EXECUTION OF THE ASSEMBLER.  THE VERSION **           01186
**             OF THE PARMCHEK PROGRAM HAS TO BE MATCHED    **           01187
**             WITH THE VERSION OF THE COPYMODS PROGRAM.    **           01188
**                                                          **           01189
**             AS A RESULT OF THIS, THE PARMS ARE ONLY TO   **           01190
**             BE CHANGED IN THE PARMCHEK PROGRAM, AND      **           01191
**             //SYSIN IS ONLY OPENED BY THE PARMCHEK       **           01192
**             PROGRAM AND NOT BY COPYMODS.                 **           01193
**                                                          **           01194
**             COPYMODS CALLS PARMCHEK, AND UPON RETURN,    **           01195
**             PARMCHEK RETURNS THE ADDRESSES OF TWO AREAS. **           01196
**             R1 CONTAINS THE ADDRESS OF THE PARMFLGS      **           01197
**             FIELD WITHIN THE PARMCHEK PROGRAM CODE,      **           01198
**             AND R2 CONTAINS THE ADDRESS OF THE STRTVALU  **           01199
**             FIELD IN THE PARMCHEK PROGRAM.  COPYMODS     **           01200
**             COPIES THIS DATA INTO THE CORRESPONDING      **           01201
**             FIELDS IN ITS OWN CODE, WHICH THEREFORE      **           01202
**             MUST MATCH THAT SAME CODE IN THE PARMCHEK    **           01203
**             PROGRAM.                                     **           01204
**                                                          **           01205
**             THUS, ON RETURN FROM THE PARMCHEK PROGRAM,   **           01206
**             COPYMODS HAS ACCESS TO ALL THE PARM BIT      **           01207
**             SETTINGS, AND TO ALL THE QUANTITIES RETURNED **           01208
**             FROM THE PARMCHEK PROGRAM ACTION INTO THE    **           01209
**             USER FIELD AREA.                             **           01210
**                                                          **           01211
** LEVEL 058 - UPON ERROR WITH ONE OF THE OUTPUT TAPES,     **           01212
**             REPORT NUMBER OF FILES CORRECTLY COPIED,     **           01213
**             NUMBER OF BLOCKS COPIED FROM LAST FILE,      **           01214
**             AND TOTAL BYTE COUNT COPIED TO THAT OUTPUT   **           01215
**             TAPE.  THIS IS A REMEDY FOR SHORT OUTPUT     **           01216
**             TAPES--TO FIGURE OUT HOW SHORT....           **           01217
**                                                          **           01218
** LEVEL 059 - DOCUMENTATION CHANGES TO MAKE ALL THE        **           01219
**             FEATURE DESCRIPTIONS AS CONSISTENT AS        **           01220
**             POSSIBLE.                                    **           01221
**                                                          **           01222
**             FIX OUTPUT ERROR MESSAGES TO REFLECT PROPER  **           01223
**             UNIT ADDRESS AND VOLSER OF THE OUTPUT UNIT   **           01224
**             IN ERROR.                                    **           01225
**                                                          **           01226
** LEVEL 060 - NEW PARM UNEXWTO, AND NOUNEXWT (TO TURN IT   **           01227
**             OFF).  THIS WILL SEND A WTOR TO THE OPERATOR **           01228
**             WHEN ONE OF THE TAPES IS TOO SHORT.  (NOW    **           01229
**             IT IS THE DEFAULT, AS IN THE OLD DAYS.)      **           01230
**                                                          **           01231
** LEVEL 061 - FIX BUG. IF SYSIN IS PRESENT BUT NOT CODED   **           01232
**             EXPLICITLY IN THE PARMS, THE OPTION WAS      **           01233
**             MARKED AS NOSYSIN IN THE OPTIONS DISPLAY.    **           01234
**                                                          **           01235
**             FIX BUG. AFTER LEVEL 057, PARMCHEK WAS NOT   **           01236
**             CALLED PROPERLY, AND THE ORIGINAL COPYMODS   **           01237
**             PARMS WERE LOST.  PRESERVE ORIGINAL PARMS    **           01238
**             IN PARMSTRT FIELD WHICH IS ACCESSIBLE TO     **           01239
**             R2, WHEN IT IS PASSED TO THE PARMCHEK        **           01240
**             PROGRAM.                                     **           01241
**                                                          **           01242
**             UPDATE PROGRAM DOCUMENTATION TO REFLECT THE  **           01243
**             CHANGES IN PROGRAM STRUCTURE AND DESIGN.     **           01244
**                                                          **           01245
** LEVEL 062 - FIX DOC A BIT MORE.                          **           01246
**             TEN PARM BITS INSTEAD OF FIVE.               **           01247
**             CHANGES TO COPYMODS, COPYMOPT, PARMCHEK.     **           01248
**                                                          **           01249
** LEVEL 063 - RC = 16 IF AT LEAST ONE SHORT OUTPUT TAPE    **           01250
**             WAS ENCOUNTERED, AND THE WTOR WAS ISSUED.    **           01251
**             RC = 8 IF ONE ERROR IN THE OUTPUT TAPES      **           01252
**             OCCURRED, WITHOUT ISSUING A WTOR.            **           01253
**                                                          **           01254
** LEVEL 064 - Return Code adjustments.                     **           01255
**                                                          **           01256
** LEVEL 065 - REWIND Tapes before initting in INITVOLS     **           01257
**             processing.                                  **           01258
**             HEXPRT now works for INITVOLS.               **           01259
**             HEXPRT now prints the external labels in a   **           01260
**             LABADDIN operation.                          **           01261
**             TAPEOWNER= is now honored for an INITVOLS    **           01262
**             operation (this fixes a bug).                **           01263
**             Number for FILELIMIT=nnn is now filled in,   **           01264
**             in the message, when the EBCDIC value        **           01265
**             exists.                                      **           01266
**             Fix another bug--Tape Owner not altered--    **           01267
**             now use the value of tape owner passed from  **           01268
**             the PARMCHEK program.                        **           01269
**                                                          **           01270
** LEVEL 066 - Cosmetic changes.                            **           01271
**             Save original PARM pointer in COPYMODS       **           01272
**             csect itself.  (It got lost after PARMCHEK   **           01273
**             call.)                                       **           01274
**                                                          **           01275
** LEVEL 067 - Introduce ability to INIT ASCII tapes        **           01276
**             (ISO/ANSI) Level 3 or Level 4, with the      **           01277
**             INASC3 or INASC4 keywords.  You can control  **           01278
**             if the HEXPRT is interpreted in EBCDIC or    **           01279
**             ASCII using the ASCII or the EBCDIC          **           01280
**             keywords.  For an ASCII tape init, ASCII     **           01281
**             print interpretation is turned on by         **           01282
**             default.  If you are initting an ASCII       **           01283
**             tape using the INASCII keyword, a Level 3    **           01284
**             ASCII tape will be created.                  **           01285
**                                                          **           01286
**             ASCII Level 4 is only supported in MVS at    **           01287
**             the OS/390 2.4 level and higher.             **           01288
**                                                          **           01289
** LEVEL 068 - Split off label checking routine into a      **           01290
**             separate program, LABELCHK, which is         **           01291
**             assembled with COPYMODS together.            **           01292
**                                                          **           01293
** LEVEL 069 - More ASCII label detection support.          **           01294
**             LABLDUMP now works for ASCII tapes.  The     **           01295
**             control cards in the LABLDUMP DD name have   **           01296
**             been translated into ASCII, the same as the  **           01297
**             labels and the data.  PARM=STRIP now works   **           01298
**             for ASCII tapes.                             **           01299
**                                                          **           01300
**             Fixed a bug where OUTVOLALL didn't work      **           01301
**             for volumes other than VOLUME1.              **           01302
**                                                          **           01303
** LEVEL 070 - More ASCII label detection support.          **           01304
**             LABADDIN works for ASCII tapes now.          **           01305
**             BLKCNT option fixed to convert corrected     **           01306
**             block counts to ASCII when necessary.        **           01307
**             EOVTOEOF now works for ASCII and IBM tapes,  **           01308
**             because a call to LABELCHK now returns the   **           01309
**             altered copy of INAREA to the main program.  **           01310
**             A parm of EOV2 now requires a space after    **           01311
**             it, so as not to interfere with EOV2EOF.     **           01312
**                                                          **           01313
** LEVEL 071 - PRINT LABELS support for ASCII tapes.        **           01314
**                                                          **           01315
**             LBI support for XXX2 print of label          **           01316
**             contents.  Big blocksizes are printed        **           01317
**             in the XXX2 print message if they exist      **           01318
**             in the labels.  This is for IBM labels.      **           01319
**                                                          **           01320
**             Support 14-character tape owner for          **           01321
**             ANSI/ISO (ASCII) tapes.                      **           01322
**                                                          **           01323
**             Other cosmetic changes and many bug fixes.   **           01324
**                                                          **           01325
** LEVEL 072 - Separate all label print operations into a   **           01326
**             call to a separate CSECT called PRINTLBL.    **           01327
**             Now there is a unified label print routine   **           01328
**             for both EXTLBLIN and INAREA label input.    **           01329
**                                                          **           01330
** LEVEL 073 - Separate messages into their own CSECT.      **           01331
**             Address with PTMS macro, and special setup.  **           01332
**             Assembler instructions which access fields   **           01333
**             in the MSGCSECT CSECT are created with the   **           01334
**             new MVFMS macro.                             **           01335
**                                                          **           01336
** LEVEL 074 - Fix LTM service and reporting.               **           01337
**                                                          **           01338
** LEVEL 075 - Implement SECOFF (security indicators in     **           01339
**             labels turned off in the copied tapes).      **           01340
**             Involves VOL1 (byte 11) for ASCII tapes.     **           01341
**             XXX1 (byte 54) which is turned to C'0' for   **           01342
**             EBCDIC (IBM) tapes, and which is turned to   **           01343
**             ASCII space (X'20') for ASCII tapes.         **           01344
**                                                          **           01345
** LEVEL 076 - Implement FOOTAGE keyword to measure each    **           01346
**             tape file approximately, giving a 6250 bpi   **           01347
**             footage calculation.  This code originally   **           01348
**             came from the SS0104 tape mapping program    **           01349
**             from the Florida Power Corporation.          **           01350
**             Cumulative footages for the entire tape up   **           01351
**             to the current file, are also displayed.     **           01352
**                                                          **           01353
**             Introduced the FOOTDIAG keyword, to print    **           01354
**             diagnostics in the footage calculation.      **           01355
**             Most of the FOOTAGE workarea fields are      **           01356
**             displayed.                                   **           01357
**                                                          **           01358
** LEVEL 077 - Save addressability space by replacing       **           01359
**             multiple MVFMS invocations with ADRSMS and   **           01360
**             DROPMS macros, to get addressability to      **           01361
**             MSGCSECT, and keep it for a while.  Also     **           01362
**             further reduced the program size by making   **           01363
**             a PTMSN macro that doesn't re-do the         **           01364
**             addressability that PTMS does.  This is for  **           01365
**             putting in between a ADRSMS and a DROPMS.    **           01366
**                                                          **           01367
** LEVEL 078   Add CODEDPRM option to report PARM options   **           01368
**             before they were adjusted by COPYMODS.       **           01369
**                                                          **           01370
**             There was no way to turn off the INITVOLS    **           01371
**             option with a parm.  So I coded the NOINITVO **           01372
**             option, to turn off the INITVOLS option      **           01373
**             bit.  So tape init will only be in effect    **           01374
**             if INITVOLS is explicitly coded.  Report     **           01375
**             NOINITVO in the options report, if this      **           01376
**             option is set off.  Remember that coding     **           01377
**             the INITVOLS keyword also turns on the       **           01378
**             CHGVOL option, so that the JCL volser gets   **           01379
**             propagated into the newly initiated tape.    **           01380
**             Coding NOINITVO only turns off the INITVOLS  **           01381
**             parm bit, and not the CHGVOL bit, as this    **           01382
**             should be the proper way to do it.           **           01383
**                                                          **           01384
**             If no //OUTn DD cards are coded in the JCL,  **           01385
**             COPYMODS would have run through the WRITEs   **           01386
**             without writing, and it would look like a    **           01387
**             normal run.  The logical fix would be to     **           01388
**             force READONLY on, and say in a message      **           01389
**             that you have done so. (That's what I did.)  **           01390
**                                                          **           01391
** LEVEL 079   Added MINMAX option to report largest and    **           01392
**             smallest block sizes for each file read.     **           01393
**                                                          **           01394
** LEVEL 080   Added RECSIZE option to report individual    **
**             size of tape blocks, one at a time.  This    **
**             option produces one record in SYSPRINT for   **
**             each tape data block because it is reporting **
**             that block's size.  So this option should    **
**             not be a default since it makes a lot of     **
**             output.  Shows details of the MINMAX         **
**             display, so RECSIZE implies MINMAX.  If      **
**             RECSIZE is coded, MINMAX is switched on.     **
**                                                          **
**             Got rid of "SBG MM/YY" type comments.        **
**                                                          **
**************************************************************           01395
./ ADD NAME=#SYNONYM 0102-00339-04159-0940-00027-00024-00000-SBGOLOB
#SYNONYM

  The parm scanning mechanism in the COPYMODS program was
  constructed in such a way that it is easy to create two
  EXEC parms or SYSIN parms that will have the same effect.
  Such parms are called SYNONYMS to each other.

  You can see examples of SYNONYMS by looking in the
  PARMCHEK source code at label PARMTABL.  Table entries
  with the exact same bit and "on/off" settings, will have
  the exact same effect in COPYMODS program execution.

  For example, LTMSKIP and SKIPLTM have the same effect
  as each other.  Another pair:  EXNULL and SLNULL have the
  same effect as each other.

  Study the source code of PARMCHEK within the COPYMODS pds
  member, at label PARMTABL, to see all of the synonyms (and
  antonyms) for COPYMODS parm keywords.  The same information
  can be obtained from the @PARMTBL member of this pds.  But
  the actual program code has the latest version of the
  parms.

  If you want to customize COPYMODS and change the defaults,
  you can also add your own parm synonyms for yourself,
  in the source code for the PARMTABL CSECT.

./ ADD NAME=#SYSIN   0108-00308-03201-1849-00112-00010-00000-SBGOLOB
SYSIN

  If a //SYSIN ddname is coded in the execution JCL for
  COPYMODS, then COPYMODS will try to open and use the
  SYSIN ddname, which is a card-image file, to read in
  PARM keyword values, in addition to the ones coded in
  the PARM field of the EXEC card.

  If a SYSIN DD card is present in the execution JCL of
  COPYMODS, SYSIN will be opened and used.  If the SYSIN
  DD card is absent in the COPYMODS execution JCL, then it
  will not be opened, as if PARM=SYSIN were NOT coded in
  the EXEC card parms.

  The order of overriding of coded parms is:  Assembled
  defaults are overridden by PARM field.  PARM field is
  overridden by SYSIN.  Later is overridden by earlier.
  The parm search is in the opposite order.  Defaults are
  searched first, then the PARM field of the EXEC card,
  then SYSIN cards, if SYSIN is present in the COPYMODS
  execution JCL.

  Several other execution options of COPYMODS can ONLY be
  specified in SYSIN cards.  These options are specified
  by keywords, starting in column 1.  If one of these
  keywords is specified in a SYSIN card, the rest of that
  card is ignored in the search for execution parms.

  If you want to obtain expertise with COPYMODS, I would
  suggest that you study each parm keyword and SYSIN keyword
  separately.  Then consider the possibilities of what kind
  of operation each keyword will allow you to do with one,
  or several, tapes.

  SYSIN cards that are searched for parms (those which do
  not contain the special keywords) are searched from column
  1 to column 71.  There need not be any separators between
  the parms, but for clarity, it is advised that you put
  a comma or a space between parms.  Maybe code one parm
  on each line--but this is not necessary.  The search for
  parm keywords is completely free-form, and one line can
  be completely filled with parm keywords.

  If a special keyword is coded in a SYSIN card, the rest of
  that card is not searched for other parms.  These special
  keywords must begin in column 1 of the SYSIN card, in order
  to be valid.

  The special keywords for SYSIN are:

  OUTVOLALL=volser      (up to 6 characters)
  TAPEOWNER=owner name  (up to 10 characters)
  FILELIMIT=nnn         (numeric)
  LABELIMIT=nnn         (numeric)
  PRINTRCDS=nnn         (numeric)

  Detailed descriptions of the use of the special keywords:

  OUTVOLALL=volser      (up to 6 characters)

    If the input volume is SL, or if LABADDIN is adding
    labels to an NL input tape, then the output volume
    serial of ALL output volumes is set to the volser
    value of the OUTVOLALL= keyword.

  TAPEOWNER=tapeownrid    (up to 10 characters)

    The first character after the equal sign is checked
    for non-blank, and then the next 10 characters are
    moved into the OWNERID field in the VOL1 label, if
    the input tape has a VOL1 label, or if LABADDIN
    processing is in effect.

  FILELIMIT=nnn           (numeric value)

    COPYMODS will stop input processing after nnn files,
    even if the input tape contains more files.  If the
    input tape is SL (determined by the presence of a
    VOL1 label), then nnn is multiplied by 3, and the
    limit is interpreted as referring to SL files.

  LABELIMIT=nnn           (numeric value)  (please spell correctly)

    During LABADDIN processing, COPYMODS will count the
    ----ENDOFLABELTRAILER cards, and will stop LABADDIN
    processing after nnn of them, even if the external
    label file contains more sets of labels (label sets).

  PRINTRCDS=nnn           (numeric value)

    This is to override the number of records to print
    at the beginning of each tape file, in the HEXPRT
    options.  If PRINTRCDS=nnn is coded in SYSIN, the
    HEXPRT option is automatically turned on.

NOTES:

  Internally to the COPYMODS program, the specialized
  keywords turn on option switches.  These will be indicated
  in the OPTION report.  However, turning on the particular
  option switches alone will cause incorrect functioning of
  the specialized keywords, because an external quantity
  is also associated with the correct operation of the
  particular option switch.  The internal options set by
  the special keywords are:

  OUTVOLALL=   sets the option  OUTVOL    on.
  TAPEOWNER=   sets the option  OUTVOL    on, as well.
  FILELIMIT=   sets the option  LIMFILE   on.
  LABELIMIT=   sets the option  LIMLABEL  on.
  PRINTRCDS=   sets the option  HEXPRT    on.

./ ADD NAME=@@PARMS  0109-00229-03201-1918-00136-00065-00000-SBGOLOB
        COPYMODS Program  -  Explanation of PARM Keywords     Level 36


Note:  As of Level 062 of COPYMODS, 10 parm bytes are set instead
       of 5, which had been increased from 3 as of Level 039.
       Otherwise, the action of the PARMTABL remains essentially
       unchanged, and it is as described below.

       In both the COPYMODS and PARMCHEK programs, the parm bytes
       are named:

       PARMFLGS DS    0CL10    10 CONTIGUOUS BYTES OF PARM FLAGS
       PARMFLG1 DC    X'00'
       PARMFLG2 DC    X'00'
       PARMFLG3 DC    X'00'
       PARMFLG4 DC    X'00'
       PARMFLG5 DC    X'00'
       PARMFLG6 DC    X'00'
       PARMFLG7 DC    X'00'
       PARMFLG8 DC    X'00'
       PARMFLG9 DC    X'00'
       PARMFLGA DC    X'00'

See member @PARMTBL for the fairly current parm table code.

Example of use of parm settings in the COPYMODS program:

        TM    PARMFLG3,X'02'     LIMIT FILES TO BE COPIED?
        BO    OPENINCK           DO PRELIMINARY OPEN IF SO

Note:  It is very easy to change PARM keywords in the COPYMODS program
       because of its table-driven PARM parser at label PARMCHEK.  See
       label PARMTABL for all permissible parms, and what switches they
       set.  PARMTABL parms are illustrated below.

Note:  This document may become obsolete, depending upon new enhancement
       features that may be put in after this document was written.
       The Level number at the upper right corner of this document
       reflects the COPYMODS program level at which this document
       claims some accuracy.

Note:  The PARMCHK subroutine of COPYMODS now sets five bytes of
       option bits, instead of three.  Therefore 40 option bits can
       now be set.  (Level 49)


PARMTABL  from  Level 36 of the COPYMODS program.

Explanation   PARM    X'01'  PARM     Flags Set  Explanation of PARM
of data       Length  turns  name     inside
in the                the  <=         the
parm table.           parm   \        COPYMODS
                      value   \       program
                      OFF      \      by the
                                \     PARMCHK
                      X'10'      \    routine
                      means       \
                      parm is      \  ON or OFF
                      set as        \ depending
                      default         on second
                                      X'01'

PARMTABL DC    X'07',X'00',C'LTMSKIP ',X'200000' FIRST ENTRY-skip LTM's
PTELEN   EQU   *-PARMTABL
PTEFLG   EQU   PTELEN-PBYTES
         DC    X'07',X'00',C'SKIPLTM ',X'200000' skip leading tape mks
         DC    X'07',X'11',C'COPYLTM ',X'200000' DEFAULT - copy them
         DC    X'07',X'01',C'LTMCOPY ',X'200000' synonym for COPYLTM
         DC    X'07',X'00',C'LBLINFO ',X'DE0000' print all SL types
         DC    X'06',X'00',C'PRINTL  ',X'DE0000' synonym
         DC    X'06',X'00',C'LABELS  ',X'DE0000' synonym
         DC    X'06',X'01',C'NOLABL  ',X'DE0000' don't print label info
         DC    X'07',X'11',C'NOLABEL ',X'DE0000' DEFAULT-syn for NOLABL
         DC    X'04',X'00',C'HDR1    ',X'020000' print HDR1 labels
         DC    X'06',X'01',C'NOHDR1  ',X'020000' don't print HDR1
         DC    X'04',X'00',C'HDR2    ',X'040000' print HDR2 labels
         DC    X'06',X'01',C'NOHDR2  ',X'040000' don't print HDR2
         DC    X'04',X'00',C'EOF1    ',X'080000' print EOF1 labels
         DC    X'06',X'01',C'NOEOF1  ',X'080000' don't print EOF1
         DC    X'04',X'00',C'EOF2    ',X'100000' print EOF2 labels
         DC    X'06',X'01',C'NOEOF2  ',X'100000' don't print EOF2
         DC    X'04',X'00',C'EOV1    ',X'400000' print EOV1 labels
         DC    X'06',X'01',C'NOEOV1  ',X'400000' don't print EOV1
         DC    X'04',X'00',C'EOV2    ',X'800000' print EOV2 labels
         DC    X'06',X'01',C'NOEOV2  ',X'800000' don't print EOV2
         DC    X'04',X'00',C'HDRS    ',X'060000' print HDR labels
         DC    X'06',X'01',C'NOHDRS  ',X'060000' don't print HDRs
         DC    X'04',X'00',C'EOFS    ',X'180000' print EOF labels
         DC    X'06',X'01',C'NOEOFS  ',X'180000' don't print EOFs
         DC    X'04',X'00',C'EOVS    ',X'C00000' print EOV labels
         DC    X'06',X'01',C'NOEOVS  ',X'C00000' don't print EOVs
         DC    X'06',X'00',C'CHGVOL  ',X'000100' change VOLSER to JCL
         DC    X'08',X'11',C'NOCHGVOL',X'000100' DEFAULT-keep VOLSER
         DC    X'06',X'00',C'JCLVOL  ',X'000100' synonym for CHGVOL
         DC    X'08',X'01',C'NOJCLVOL',X'000100' synonym for NOCHGVOL
         DC    X'06',X'00',C'NEWVOL  ',X'000100' synonym for CHGVOL
         DC    X'08',X'01',C'NONEWVOL',X'000100' synonym for NOCHGVOL
         DC    X'06',X'10',C'VOLLBL  ',X'000200' DEFAULT-print VOL1 lbl
         DC    X'08',X'01',C'NOVOLLBL',X'000200' don't print VOL1 lbl
         DC    X'07',X'00',C'EOV2EOF ',X'000400' convert EOV to EOF
         DC    X'08',X'00',C'EOVTOEOF',X'000400' synonym for EOV2EOF
         DC    X'06',X'00',C'EOVCHG  ',X'000400' synonym for EOV2EOF
         DC    X'08',X'11',C'NOEOVCHG',X'000400' DEFAULT-don't convert
         DC    X'04',X'00',C'READ    ',X'000800' Just read-no copy
         DC    X'08',X'00',C'READONLY',X'000800' synonym for READ
         DC    X'07',X'00',C'NOWRITE ',X'000800' synonym for READ
         DC    X'07',X'11',C'WRITE   ',X'000800' DEFAULT-copy tape
         DC    X'08',X'00',C'LABLDUMP',X'001000' dump all SL to a file
         DC    X'08',X'11',C'NOLABELD',X'001000' DEFAULT-don't dump lbls
         DC    X'05',X'00',C'SYSIN   ',X'002000' Allow some SYSIN input
         DC    X'07',X'11',C'NOSYSIN ',X'002000' DEFAULT-no SYSIN
         DC    X'06',X'00',C'OUTVOL  ',X'006000' SYSIN + set output vol
         DC    X'08',X'00',C'LABADDIN',X'008000' merge NL with ext lbls
         DC    X'06',X'10',C'BLKCNT  ',X'010000' correct EOF/V1 blkcount 02419
         DC    X'08',X'01',C'NOBLKCNT',X'010000' don't. with LABADDIN    02420
         DC    X'08',X'00',C'PRADDLBL',X'000010' LABADDIN-print labels   02421
         DC    X'08',X'01',C'NOPRADDL',X'000010' LABADDIN-don't pr labs  02422
         DC    X'08',X'00',C'CORRBLKS',X'000020' COPY-fix EOF/V1 blkcnt  02422
         DC    X'08',X'00',C'NOEXNULL',X'000040' LABADDIN-stop at eotape 02422
         DC    X'08',X'00',C'NOSLNULL',X'000040'  synonym for NOEXNULL   02422
         DC    X'06',X'11',C'EXNULL  ',X'000040' LABADDIN-add null SL    02422
         DC    X'06',X'01',C'SLNULL  ',X'000040'  synonym for EXNULL     02422
         DC    X'06',X'00',C'LBLFIX  ',X'000080' LABADDIN-fix miss EOFs  02422
         DC    X'08',X'01',C'NOLBLFIX',X'000080' LABADDIN-don't fix      02422
         DC    X'08',X'00',C'INITVOLS',X'000101' INIT tapes w/o input    02422
EFFS     DC    X'FFFFFFFFFFFFFFFF'

        In addition, OUTVOLALL=VOLSER on a SYSIN card will cause all
        output tapes which are SL, to get a volser mentioned in this
        card.  COPYMODS replaces all the volume ids in the VOL1 card
        to equal this value.

        In addition, TAPEOWNER=owner info (10 characters) on a SYSIN
        card will alter the owner information on the VOL1 labels of
        the output tapes.

./ ADD NAME=@PARMTBL 0104-03201-04159-0943-00137-00113-00000-SBGOLOB
                  The PARM TABLE from COPYMODS.

* --------------------------------------------------------- *            05553
*
*   This code is current as of Level 076 of the COPYMODS program.
*
* --------------------------------------------------------- *            05553
*              FORMAT OF PARM TABLE                                      05554
*              ONE ENTRY IS 20 BYTES                                     05555
*                1ST BYTE:      LENGTH OF THIS PARM IN HEX               05556
*                2ND BYTE:      X'01' SAYS TURN FLAG OFF                 05557
*                               X'00' SAYS TURN FLAG ON                  05558
*                               X'10' SET ENTRY AS A DEFAULT             05559
*                NEXT 8 BYTES:  PARM NAME - LEFT JUSTIFIED               05560
*                NEXT 10 BYTES: FLAG SETTINGS - 10 FLAGS,                05561
*                                WHICH ALLOWS FOR 80 PARMS               05562
*                                THAT DON'T HAVE TO BE                   05563
*                                SEPARATED BY A COMMA.                   05564
PBYTES   EQU   10               Number of bytes of parm switches         05565
PTELEN   EQU   20               Length of each table entry               05566
PTEFLG   EQU   PTELEN-PBYTES    Displacement from entry to switch bytes  05567
EFFS     DC    20X'FF'          X'FF' bytes for XORing                   05568
* --------------------------------------------------------- *            05569
PARMTABL CSECT                                                           05843
         DC    X'07',X'00',C'LTMSKIP ',X'20000000000000000000'           05844
         DC    X'07',X'00',C'SKIPLTM ',X'20000000000000000000'           05845
         DC    X'07',X'11',C'COPYLTM ',X'20000000000000000000'           05846
         DC    X'07',X'01',C'LTMCOPY ',X'20000000000000000000'           05847
         DC    X'07',X'00',C'LBLINFO ',X'DE000000000000000000'           05848
         DC    X'06',X'00',C'PRINTL  ',X'DE000000000000000000'           05849
         DC    X'06',X'00',C'LABELS  ',X'DE000000000000000000'           05850
         DC    X'06',X'01',C'NOLABL  ',X'DE000000000000000000'           05851
         DC    X'07',X'11',C'NOLABEL ',X'DE000000000000000000'           05852
         DC    X'04',X'00',C'HDR1    ',X'02000000000000000000'           05853
         DC    X'06',X'01',C'NOHDR1  ',X'02000000000000000000'           05854
         DC    X'04',X'00',C'HDR2    ',X'04000000000000000000'           05855
         DC    X'06',X'01',C'NOHDR2  ',X'04000000000000000000'           05856
         DC    X'04',X'00',C'EOF1    ',X'08000000000000000000'           05857
         DC    X'06',X'01',C'NOEOF1  ',X'08000000000000000000'           05858
         DC    X'04',X'00',C'EOF2    ',X'10000000000000000000'           05859
         DC    X'06',X'01',C'NOEOF2  ',X'10000000000000000000'           05860
         DC    X'04',X'00',C'EOV1    ',X'40000000000000000000'           05861
         DC    X'06',X'01',C'NOEOV1  ',X'40000000000000000000'           05862
         DC    X'05',X'00',C'EOV2    ',X'80000000000000000000'           05863
         DC    X'06',X'01',C'NOEOV2  ',X'80000000000000000000'           05864
         DC    X'04',X'00',C'HDRS    ',X'06000000000000000000'           05865
         DC    X'06',X'01',C'NOHDRS  ',X'06000000000000000000'           05866
         DC    X'04',X'00',C'EOFS    ',X'18000000000000000000'           05867
         DC    X'06',X'01',C'NOEOFS  ',X'18000000000000000000'           05868
         DC    X'04',X'00',C'EOVS    ',X'C0000000000000000000'           05869
         DC    X'06',X'01',C'NOEOVS  ',X'C0000000000000000000'           05870
         DC    X'06',X'00',C'CHGVOL  ',X'00010000000000000000'           05871
         DC    X'08',X'11',C'NOCHGVOL',X'00010000000000000000'           05872
         DC    X'06',X'00',C'JCLVOL  ',X'00010000000000000000'           05873
         DC    X'08',X'01',C'NOJCLVOL',X'00010000000000000000'           05874
         DC    X'06',X'00',C'NEWVOL  ',X'00010000000000000000'           05875
         DC    X'08',X'01',C'NONEWVOL',X'00010000000000000000'           05876
         DC    X'06',X'10',C'VOLLBL  ',X'00020000000000000000'           05877
         DC    X'08',X'01',C'NOVOLLBL',X'00020000000000000000'           05878
         DC    X'07',X'00',C'EOV2EOF ',X'00040000000000000000'           05879
         DC    X'08',X'00',C'EOVTOEOF',X'00040000000000000000'           05880
         DC    X'06',X'00',C'EOVCHG  ',X'00040000000000000000'           05881
         DC    X'08',X'11',C'NOEOVCHG',X'00040000000000000000'           05882
         DC    X'04',X'00',C'READ    ',X'00080000000000000000'           05883
         DC    X'08',X'00',C'READONLY',X'00080000000000000000'           05884
         DC    X'07',X'00',C'NOWRITE ',X'00080000000000000000'           05885
         DC    X'07',X'11',C'WRITE   ',X'00080000000000000000'           05886
         DC    X'08',X'00',C'LABLDUMP',X'00100000000000000000'           05887
         DC    X'08',X'11',C'NOLABLDU',X'00100000000000000000'           05888
         DC    X'05',X'00',C'SYSIN   ',X'00200000000000000000'           05889
         DC    X'07',X'11',C'NOSYSIN ',X'00200000000000000000'           05890
         DC    X'06',X'00',C'OUTVOL  ',X'00400000000000000000'           05891
         DC    X'08',X'00',C'NOOUTVOL',X'00400000000000000000'           05892
         DC    X'08',X'00',C'LABADDIN',X'00808000000000000000'           05893
         DC    X'08',X'01',C'NOLABADD',X'00800000000000000000'           05894
         DC    X'06',X'10',C'BLKCNT  ',X'01000000000000000000'           05895
         DC    X'08',X'01',C'NOBLKCNT',X'01000000000000000000'           05896
         DC    X'08',X'00',C'PRADDLBL',X'00001000000000000000'           05897
         DC    X'08',X'01',C'NOPRADDL',X'00001000000000000000'           05898
         DC    X'08',X'00',C'CORRBLKS',X'00002000000000000000'           05899
         DC    X'08',X'01',C'NOCORRBL',X'00002000000000000000'           05900
         DC    X'08',X'00',C'NOEXNULL',X'00004000000000000000'           05901
         DC    X'08',X'00',C'NOSLNULL',X'00004000000000000000'           05902
         DC    X'06',X'11',C'EXNULL  ',X'00004000000000000000'           05903
         DC    X'06',X'01',C'SLNULL  ',X'00004000000000000000'           05904
         DC    X'06',X'00',C'LBLFIX  ',X'00008000000000000000'           05905
         DC    X'08',X'01',C'NOLBLFIX',X'00008000000000000000'           05906
         DC    X'08',X'00',C'INITVOLS',X'00010100000000000000'           05907
         DC    X'08',X'00',C'INITTAPE',X'00010100000000000000'           05908
         DC    X'07',X'00',C'LIMFILE ',X'00000200000000000000'           05909
         DC    X'07',X'00',C'FILELIM ',X'00000200000000000000'           05910
         DC    X'08',X'01',C'NOLIMFIL',X'00000200000000000000'           05911
         DC    X'05',X'00',C'BYTES   ',X'00000400000000000000'           05912
         DC    X'07',X'01',C'NOBYTES ',X'00000400000000000000'           05913
         DC    X'06',X'00',C'CUMTOT  ',X'00000800000000000000'           05914
         DC    X'08',X'01',C'NOCUMTOT',X'00000800000000000000'           05915
         DC    X'08',X'00',C'LIMLABEL',X'00000010000000000000'           05916
         DC    X'08',X'01',C'NOLIMLAB',X'00000010000000000000'           05917
         DC    X'06',X'10',C'OPTION  ',X'00000020000000000000'           05918
         DC    X'08',X'01',C'NOOPTION',X'00000020000000000000'           05919
         DC    X'07',X'00',C'SUPPWTO ',X'00000040000000000000'           05920
         DC    X'08',X'11',C'NOSUPPWT',X'00000040000000000000'           05921
         DC    X'08',X'00',C'LBDQUICK',X'00000080000000000000'           05922
         DC    X'08',X'01',C'NOLBDQUI',X'00000080000000000000'           05923
         DC    X'06',X'00',C'CUMSEP  ',X'00000001000000000000'           05924
         DC    X'08',X'01',C'NOCUMSEP',X'00000001000000000000'           05925
         DC    X'05',X'00',C'STRIP   ',X'00000002000000000000'           05926
         DC    X'07',X'11',C'NOSTRIP ',X'00000002000000000000'           05927
         DC    X'05',X'00',C'NLLIM   ',X'00000004000000000000'           05928
         DC    X'07',X'01',C'NONLLIM ',X'00000004000000000000'           05929
         DC    X'05',X'00',C'SLLIM   ',X'00000008000000000000'           05930
         DC    X'07',X'01',C'NOSLLIM ',X'00000008000000000000'           05931
         DC    X'07',X'00',C'IDRCOFF ',X'00000000100000000000'           05932
         DC    X'08',X'01',C'NOIDRCOF',X'00000000100000000000'           05933
         DC    X'06',X'00',C'HEXPRT  ',X'00000000200000000000'           05934
         DC    X'08',X'01',C'NOHEXPRT',X'00000000200000000000'           05935
         DC    X'07',X'10',C'UNEXWTO ',X'00000000400000000000'           05936
         DC    X'08',X'01',C'NOUNEXWT',X'00000000400000000000'           05937
         DC    X'06',X'00',C'INASC3  ',X'00010000810000000000'           05938
         DC    X'07',X'00',C'INASCII ',X'00010000810000000000'           05939
         DC    X'08',X'01',C'NOINASC3',X'00000000810000000000'           05940
         DC    X'06',X'00',C'INASC4  ',X'00010000820000000000'           05941
         DC    X'08',X'01',C'NOINASC4',X'00000000820000000000'           05942
         DC    X'05',X'00',C'ASCII   ',X'00000000800000000000'           05943
         DC    X'07',X'01',C'NOASCII ',X'00000000800000000000'           05944
         DC    X'06',X'01',C'EBCDIC  ',X'00000000800000000000'           05945
         DC    X'08',X'00',C'ENABLTMW',X'00000000040000000000'           06349
         DC    X'08',X'01',C'NOENABLT',X'00000000040000000000'           06350
         DC    X'06',X'00',C'WRTLTM  ',X'00000000080000000000'           06351
         DC    X'08',X'11',C'NOWRTLTM',X'00000000080000000000'           06352
         DC    X'06',X'00',C'SECOFF  ',X'00000000001000000000'           06351
         DC    X'08',X'01',C'NOSECOFF',X'00000000001000000000'           06351
         DC    X'07',X'00',C'FOOTAGE ',X'00000000002000000000'           06351
         DC    X'08',X'01',C'NOFOOTAG',X'00000000002000000000'           06351
         DC    X'08',X'00',C'FOOTDIAG',X'00000000004000000000'           06351
         DC    X'08',X'11',C'NOFOOTDI',X'00000000004000000000'           06351
         DC    X'FFFFFFFFFFFFFFFF'                                       05946
./ ADD NAME=ASCII    0101-03266-03267-1111-00012-00008-00000-SBGOLOB
  ASCII, EBCDIC

  This option controls the HEXPRT interpretation of printable
  characters.  Default is EBCDIC, except when ANSI/ISO (ASCII)
  tapes are being initialized with the INASC3, INASC4, or INASCII
  keywords.

  You can force ASCII interpretation of printable characters by
  coding the ASCII keyword.  You can force EBCDIC interpretation
  of printable characters by coding the EBCDIC keyword.


./ ADD NAME=BLKCNT   0100-00339-00339-1920-00034-00034-00000-WSBG
BLKCNT   ( and CORRBLKS )

  This parameter corrects block counts in EOF1 and EOV1
  labels during LABADDIN processing.  The corresponding
  parameter to correct block counts during a tape copy,
  is the CORRBLKS parameter.

  --------------------------------------------------------

  In EOF1 and EOV1 labels of a SL tape, there is a field
  which contains the number of blocks in the previous file
  that is being delimited by these EOF1 and EOF2 (or EOV1
  and EOV2) labels.  In the HDR1 label, this field is set
  to zero.

  When reading a tape as SL, the MVS operating system checks
  the block count field in the EOF1 (or EOV1) label, to see
  if it contains the same number of blocks as the tape drive
  has just read.  If the numbers do not match, an abend can
  result.

  COPYMODS, with the BLKCNT parameter coded, will correct the
  block count field in all EOF1 or EOV1 labels for copied
  tapes, to match the actual count of blocks read in that file
  on the input tape.  Without the BLKCNT parameter coded,
  COPYMODS will default to have the parameter in effect.

  You can nullify this correction action by coding NOBLKCNT
  as a parameter or in SYSIN, in COPYMODS execution JCL.

  Use the CORRBLKS parameter if you are doing an SL tape copy.
  The BLKCNT parameter is only used during LABADDIN processing
  to add labels to an NL input tape, producing SL output tapes.

./ ADD NAME=BYTES    0102-00339-02141-0158-00050-00023-00000-SBGOLOB
BYTES  and  CUMTOT and CUMSEP

  These options allow the COPYMODS reporting facilities to
  show how many bytes were in each file of the input tape.

  The CUMTOT option, which turns on the BYTES option as
  well, will report cumulative byte totals for each file,
  as multiple files of the input tape are read (and/or copied).

  Both parms produce a summary report, showing how many
  bytes came from the tape data files, how many bytes came
  from the label files alone, and what the total byte count
  is for the entire tape.

  The following is a sample summary report for a tape, as
  the result of executing COPYMODS with the BYTES or CUMTOT
  or CUMSEP parameter.

TOTAL BYTES READ ON INPUT :                165,309,788
TOTAL BYTES IN TAPE LABELS:                      8,400
TOTAL BYTES WITHOUT LABELS:                165,301,388

  ------>

  The new CUMSEP option adds another twist to the reports:
  CUMSEP is like CUMTOT, except that instead of cumulative byte
  totals for all files read, the totals are broken down as to
  whether the files read, were label files or data files.

  The following abbreviated report shows the kind of displays that
  result from using the CUMSEP option - cumulative byte totals are
  displayed, on a file by file basis, but are separated by whether the
  bytes came from tape label files, or tape data files.  (This report
  has been shortened to fit into 72 columns.)

  On the other hand, the CUMTOT report will accumulate and total the
  label and data file byte counts together indiscriminately, until the
  summary report at the end (shown just above), which separates the
  label and data byte totals for the entire tape read, but not on a
  file by file basis.

FILE 1720 CONTAINS 02 DATA BLOCKS      160 BYTES  CUM LABEL:     183,600
FILE 1721 CONTAINS 03 DATA BLOCKS   67,911 BYTES  CUM DATA : 287,579,568
FILE 1722 CONTAINS 02 DATA BLOCKS      160 BYTES  CUM LABEL:     183,760
FILE 1723 CONTAINS 02 DATA BLOCKS      160 BYTES  CUM LABEL:     183,920
FILE 1724 CONTAINS 06 DATA BLOCKS  187,534 BYTES  CUM DATA : 287,767,102
FILE 1725 CONTAINS 02 DATA BLOCKS      160 BYTES  CUM LABEL:     184,080
FILE 1726 CONTAINS 02 DATA BLOCKS      160 BYTES  CUM LABEL:     184,240
FILE 1727 CONTAINS 02 DATA BLOCKS   35,135 BYTES  CUM DATA : 287,802,237

./ ADD NAME=CHGVOL   0100-00325-00325-0012-00028-00028-00000-WSBG
CHGVOL

  The CHGVOL option of COPYMODS allows COPYMODS to change
  the SL volume serial in the copies, if the input tape is
  SL.  Under CHGVOL, if the input tape contains a VOL1
  label, then CHGVOL uses the volume serial coded in the
  OUTx DD card, and places it into the VOL1 label of that
  output tape.  This action can be overridden by coding
  the OUTVOLALL=volser SYSIN card.  See the note below.

  Operation:   COPYMODS does a RDJFCB for all coded OUTx
  DD cards, and keeps the volume serial from all OUTx DD
  cards stored internally.  If CHGVOL is in effect, these
  values are substituted in the VOL1 label of each output
  tape (and they will all be different), before each VOL1
  label is written out during the WRITE operation.

  Notes:

  If OUTVOLALL=volser is coded in a SYSIN card, then that
  volser value will override all CHGVOL values, and will
  also override the original input tape volser.

  If TAPEOWNER=tapeownrid is coded in a SYSIN card, then
  the tape owner field is changed to the tapeownrid value
  in all the output tapes for that run of COPYMODS, when
  the VOL1 label is written out to each of them.

./ ADD NAME=CODEDPRM 0100-04172-04172-2342-00038-00038-00000-SBGOLOB
CODEDPRM

  When the OPTIONS parm is coded in a COPYMODS run, what is displayed
  is AFTER COPYMODS has "corrected" the coded parms for inconsistencies.
  Sometimes the programmer might get confused as to why a certain
  option is OFF when he/she thought it should have been ON.  COPYMODS
  will make some decisions in this regard, when it "senses" a
  possible contradiction between two parms.  For example, if both
  LABLDUMP and LABADDIN have been coded by the programmer, COPYMODS
  makes the decision to give LABADDIN the preference, and to turn off
  LABLDUMP.  In order to see the effect of this "decision making"
  function of COPYMODS, you can code the CODEDPRM option, which will
  display a second option report that shows the parms exactly the way
  the coder coded them and the PARMCHEK routine originally set the
  parm bits.

  By the way, if you code the CODEDPRM option without the OPTIONS
  option, COPYMODS will make a decision to turn on the OPTIONS option.
  (So the same principle even works here!)  Actually the OPTIONS
  option is a default, so in order to see this effect, you have to
  code both CODEDPRM and NOOPTION.  Then COPYMODS will turn OPTION on.

  Even without the CODEDPRM option on, and just the OPTIONS option on,
  COPYMODS will display an extra message in SYSPRINT,

  either:

COPYMODS has not had to correct any of the options as coded in the JCL.

  or:

COPYMODS attempts to keep the options consistent and has changed
some options. For a comparison report, code the CODEDPRM parm.

  and the CODEDPRM parm (if coded) will supply the complete extra
  comparison report of the coded options without the compensation
  for "consistency".

./ ADD NAME=EOV2EOF  0100-00339-00339-1903-00019-00019-00000-WSBG
EOV2EOF

  Sometimes a tape is found with EOV1 and EOV2 labels in the
  middle, and other files come afterwards.  This can happen
  if the tape was constructed using the COPYFILE program from
  the CBT Tape, and the first input tape had filled its volume.
  In this case, the MVS operating system sometimes gives you
  trouble in reading the files that come after the EOV1 and EOV2
  labels.

  Our solution is to run COPYMODS with the EOV2EOF parameter.

  The effect of the EOV2EOF parameter is to change the EOV1 and
  EOV2 labels that are found anywhere in the input tape, to EOF1
  and EOF2 labels in the output tape(s).  The output tapes will
  then be readable by the operating system, even after those
  files which used to be delimited by EOV1 and EOV2 labels.


./ ADD NAME=FOOTAGE  0101-04159-04159-1813-00020-00020-00000-SBGOLOB
FOOTAGE

  Measure tape footages as if the tape were 6250 bpi (DEN=4).

  This provides a uniform standard to approximate how much data
  is on the tape.

  Code was taken from the Florida Power Corporation program SS0104
  written by Gordon P. West and others.  Expanded to show a maximum
  of about 40000 feet of tape.

FILE 00001 CONTAINS 0000140 DATA BLOCKS
File 00001   Footage:       64.8 Cumulative Feet for this Tape:   64.8
FILE 00002 CONTAINS 0000001 DATA BLOCKS
File 00002   Footage:        0.3 Cumulative Feet for this Tape:   65.1
FILE 00003 CONTAINS 0000006 DATA BLOCKS
File 00003   Footage:        2.8 Cumulative Feet for this Tape:   67.9
FILE 00004 CONTAINS 0000002 DATA BLOCKS
File 00004   Footage:        0.9 Cumulative Feet for this Tape:   68.8

./ ADD NAME=HEXPRT   0102-03171-03174-2301-00065-00058-00000-SBGOLOB
HEXPRT

  The HEXPRT keyword of COPYMODS originated from a need to make
  COPYMODS like TAPESCAN (File 102 of the CBT Tape).  If you code
  the HEXPRT keyword, in a PARM or SYSIN for COPYMODS execution,
  the first 132 bytes of the first n blocks (where by default n=4)
  are printed to the SYSPRINT ddname, as the records are being read
  from the input tape.

  You can now change the HEXPRT default for the number of records
  printed, at assembly time.  Just adjust the &HEXDFLA variable
  to any number from 1 to 999999.  Default is 4 as distributed.

  By coding PRINTRCDS=nnn starting in column 1, in a SYSIN card,
  you can override the default number of blocks from each file, to
  be printed in hex (and EBCDIC too).

  Below is a sample of HEXPRT output, truncated to 67 characters.

  THIS RUN OF THE COPYMODS PROGRAM IS READ-ONLY. JCL VOLSER: C460MU
  HEXPRT OPTION IS ON IN DEFAULT MODE.  4 RECORDS WILL BE HEX PRINTED
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  VOL1C460MU                               SAM GOLOB
  EDDFCFFFDE4444444444444444444444444444444ECD4CDDDC44444444444444444
  5631346044000000000000000000000000000000021407636200000000000000000
  VOL1 LABEL HAS BEEN DETECTED - VOLSER = C460MU     OWNER = SAM GOLO
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  HDR1FILE0001         C460MU00010001      003166 980000000000IBM OS/
  CCDFCCDCFFFF444444444CFFFDEFFFFFFFF444444FFFFFF4FFFFFFFFFFFFCCD4DE6
  8491693500010000000003460440001000100000000316609800000000009240621
  HDR1 LABEL: 1STVOL= C460MU DSN=FILE0001          DS SEQ #: 0001 VOL
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  HDR2F327200008040SBGOLOB1/COPY1       B  80000
  CCDFCFFFFFFFFFFFFECCDDDCF6CDDEF4444444C44FFFFF444444444444444444444
  8492632720000804022763621136781000000020080000000000000000000000000
  HDR2 LABEL: RECFM= F   BLOCK LENGTH: 32720   RECORD LENGTH: 00080
  FILE 00001 CONTAINS 0000003 DATA BLOCKS CONTAINING
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  //MVSMODS1 JOB 527TEC000S0003,TEC,CLASS=8,MSGCLASS=5,PRTY=10,
  66DEEDDCEF4DDC4FFFECCFFFEFFFF6ECC6CDCEE7F6DECCDCEE7F6DDEE7FF6444444
  11452464210162052735300020003B353B33122E8B42733122E5B7938E10B000000
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  //* --  may be marked in their documentation that an attempt     --
  6654664498A48849899884894A88894898A989A8A8994A88A48948AA899A4444466
  11C0000041802504192540950385990463445531396503813015013354730000000
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  //* --           (212) 850-6000   MAIN NUMBER                    --
  665466444444444444FFF54FFF6FFFF444DCCD4DEDCCD4444444444444444444466
  11C00000000000000D212D085006000000419505442590000000000000000000000
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  //*+File 005:  VMREXX exec to load this tape on to a VM system
  6654C8984FFF744EDDCEE48A884A9499884A88A4A8984994A9484ED4AAAA8944444
  11CE69350005A005495770575303603614038920317506503601054028235400000
  FILE 00002 CONTAINS 0000133 DATA BLOCKS CONTAINING
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  EOF1FILE0001         C460MU00010001      003166 980000000133IBM OS/
  CDCFCCDCFFFF444444444CFFFDEFFFFFFFF444444FFFFFF4FFFFFFFFFFFFCCD4DE6
  5661693500010000000003460440001000100000000316609800000001339240621
  EOF1 LABEL: 1STVOL= C460MU DSN=FILE0001          DS SEQ #: 0001 VOL
  ----+----1----+----2----+----3----+----4----+----5----+----6----+--
  EOF2F327200008040SBGOLOB1/COPY1       B  80000
  CDCFCFFFFFFFFFFFFECCDDDCF6CDDEF4444444C44FFFFF444444444444444444444
  5662632720000804022763621136781000000020080000000000000000000000000
  EOF2 LABEL: RECFM= F   BLOCK LENGTH: 32720   RECORD LENGTH: 00080

./ ADD NAME=INASCII  0100-03266-03266-1134-00035-00035-00000-SBGOLOB
INASCII, INASC3, INASC4

  Initialize ASCII (ANSI/ISO) format tapes on an MVS system.

  INASC3 will init an ANSI/ISO Level 3 tape.
  INASC4 will init an ANSI/ISO Level 4 tape.

  Please note that ANSI/ISO Level 4 format tapes are only supported
  on OS/390 Release 2.4 and higher.  This duplicates the functionality
  of IEHINITT with LABTYPE=AL and VERSION=4.

  There are some tape owner restrictions.  Uppercase has to be used.

  Only the first 10 characters for the tape owner field (out of a
  possible 14 characters) are currently supported.

  Currently, INASCII defaults to the same as INASC3 (or init a
  Level 3 ASCII tape.

JCL Example:

//INITASC EXEC  PGM=COPYMODS,REGION=4096K,
// PARM='SYSIN'
//STEPLIB  DD  DISP=SHR,DSN=SBGOLOB.W$$.LINKLIB
//SYSPRINT DD  SYSOUT=*
//PARMREPT DD  SYSOUT=*
//OUT1  DD VOL=SER=ASC003,DISP=OLD,UNIT=582,LABEL=(,BLP,EXPDT=98000)
//SYSIN DD *
CUMSEP
HEXPRT
INASC3
TAPEOWNER=SAM GOLOB
/*


./ ADD NAME=INITVOLS 0100-00308-00308-1118-00039-00039-00000-WSBG
INITVOLS

  The INITVOLS option allows you to use COPYMODS to
  initialize tapes, in a similar manner to the way
  IEHINITT does.  However, the JCL used is COPYMODS JCL.

  INITVOLS does not require an input tape, and therefore
  the //IN dd card does not have to be coded if INITVOLS
  is in effect.  Please make sure that INITVOLS is
  spelled properly in your JCL, or your SYSIN file.

  The volser coded on each output tape will be the volser
  specified in the OUTn card of the JCL.  INITVOLS invokes
  CHGVOL processing by default.  If you want all the
  volser's to be the same, with multiple output tapes,
  then code a SYSIN card with OUTVOLALL=volser , starting
  in column 1.  This technique will also work with one
  output tape, and will allow you to perfectly control
  the output volser, if it has to be different from the
  JCL volser.

  If you want to specify a tape owner, then code a
  TAPEOWNER=tapeownrid  SYSIN card, starting in column 1.
  All output tapes in this run will receive the same
  tape owner information, if a TAPEOWNER= card is present
  and is correctly coded.  The first character after the
  equal sign must be a non-blank character.


NOTES:

  There is a technical point:  IEHINITT writes only one
  final tape mark after the VOL1 and initialized HDR1.
  COPYMODS writes two or three tape marks.  The output
  tape should behave properly, in any case.  If you
  experience any problems with two or three tape marks,
  know that they are due to the CLOSE processing for
  the output tapes.  IEHINITT does not do a regular CLOSE.

./ ADD NAME=LABADDIN 0108-00325-00338-0631-00092-00066-00000-WSBG
LABADDIN

  The LABADDIN option of COPYMODS allows you to create an
  SL tape from an NL tape and a set of external labels in
  the format created by the LABLDUMP option of COPYMODS.

  The main idea of creating this SL tape from an NL tape is
  to control the contents of the labels.  However, there are
  many other potential uses of this processing, especially
  in conjunction with the EXNULL, NOEXNULL options, and the
  LABELIMIT=nnn and FILELIMIT=nnn SYSIN cards.

  For example, a software house might have an NL tape version
  of its release distribution, and it can customize the contents
  of the SL tape labels it sends out, depending on each customer.

Action:

  LABADDIN takes two inputs:  An NL tape input, and a set of
  tape label images, in an FB-80 card-image file.  These tape
  label images contain extra cards, of the form:

  ----ENDOFLABELHEADER
  ----ENDOFLABELTRAILER
  ----ENDOFLABELTRAILEREOV
  ----ENDOFLABELHEADERINIT

  LABADDIN uses a label input file of the form produced by
  the LABLDUMP option of COPYMODS.  However, you can edit that
  file with a text editor, so as to change the contents of the
  tape labels on the resulting output tapes.  Thus, you have
  absolute control of the contents of the tape labels on the
  output tapes, in effect.

  The card-image input is pointed to, by a //LABADDIN dd card
  in the COPYMODS execution JCL.  The input tape is pointed
  to, by the //IN dd card as in other executions of the COPYMODS
  program.

  Output tapes are pointed to by //OUT1 thru //OUT16 dd cards
  as usual.  Output tape labels are still controlled by the
  CHGVOL parameter, or the OUTVOLALL=volser SYSIN card, if you
  choose to use them.

  Now let's define the term "label set".  A label set is a set
  of card-images, produced by the LABLDUMP option of COPYMODS,
  which corresponds to all labels connected with ONE FILE, plus
  an ----ENDOFLABELHEADER card after the Header Labels, and an
  ----ENDOFLABELTRAILER card after the Trailer Labels.

  An example of a typical label set is as follows:

VOL1C430MT                               SAMGOLOB
HDR1FILE0001         C430MT00010001      000317 980000000000IBM OS/VS 370
HDR2F327200008000WSBG1   /COPY1   P   B   7231C
----ENDOFLABELHEADER
EOF1FILE0001         C430MT00010001      000317 980000000100IBM OS/VS 370
EOF2F327200008000WSBG1   /COPY1   P   B   7231C
----ENDOFLABELTRAILER

  You see that for the first file of an SL tape, the label set
  includes a VOL1 label.  For the other files, there is just
  a HDR1, a HDR2, an ----ENDOFLABELHEADER, an EOF1 or EOV1, an
  EOF2 or EOV2, and an ----ENODFLABELTRAILER, or an
  ----ENDOFLABELTRAILEREOV .  We will refer to the term "label
  set" quite often in the COPYMODS documentation.

  COPYMODS LABADDIN processing merges one label set, with
  one NL file, to create one SL output tape file.  First the
  (VOL1,) HDR1, and HDR2 labels are written to the output
  tapes, then the NL data is written from the input tape,
  then finally, the EOF1 and EOF2 labels are written from
  the LABADDIN external label file.  Every ---EOF.. card causes
  a tape mark to be written to the output tapes.  These tape
  marks separate the labels from the data, in the output tapes.

  COPYMODS LABADDIN processing is "label driven".  That is, if
  there are fewer label sets than input tape files, COPYMODS
  will stop producing output SL files after it runs out of label
  sets.  On the other hand, if there are more label sets than NL
  tape files, the default action of COPYMODS is to produce extra
  null SL files at the end of the output tapes, until the extra
  label sets are exhausted.  This action can be controlled by
  the NOEXNULL parameter, which will stop COPYMODS from producing
  the extra null SL files.  It can also be controlled through
  the use of the LABELIMIT=nnn and FILELIMIT=nnn SYSIN cards.

  If LABELIMIT=nnn (LABELIMIT has to be spelled this way) is coded,
  then COPYMODS LABADDIN processing stops after nnn label sets are
  encountered.  If FILELIMIT=nnn is coded in a SYSIN card, then
  COPYMODS stops after processing nnn input tape files.

./ ADD NAME=LABELS   0100-00339-00339-1850-00030-00030-00000-WSBG
LABELS

  This option allows the COPYMODS reporting facilities to
  print standard label information if any standard labels
  are found on the input tape.

  This parameter actually includes many other parameters.

  You can select any type of label to print, to the exclusion
  of all the others.  The individual selection parameters that
  can be coded are:


       HDR1    -   prints only the HDR1 labels
       HDR2    -   prints only the HDR2 labels
       EOF1    -   prints only the EOF1 labels
       EOF2    -   prints only the EOF2 labels
       EOV1    -   prints only the EOV1 labels
       EOV2    -   prints only the EOV2 labels

  The parameter to print VOL1 label information, which is the
  assembled default, is VOLLBL, and is not included in the
  LABELS designation.


  Note:  This parameter does not format labels from an external
         label file during LABADDIN processing of an NL input
         tape.  To format those labels, you need the PRADDLBL
         parameter.

./ ADD NAME=LABLDUMP 0101-00325-00347-1107-00069-00066-00000-WSBG
LABLDUMP

  The LABLDUMP option of COPYMODS allows you to create an
  external data file which contains images of all the labels
  on the input tape.  LABLDUMP can execute either in READ
  only mode, or during a tape copy operation.  In order to
  enable the LABLDUMP option, you need a LABLDUMP DD card,
  which points to an FB-80 (card-image) file to be created.
  You also need to code the LABLDUMP parm in the PARM field
  of the EXEC card, or in a SYSIN card.

  LABLDUMP produces some extra cards in the external label
  file, in addition to the images of the input tape's standard
  labels.  These are in the form of trailers to each set of
  header or trailer labels, and they are essential, if the
  label file will later be used in a LABADDIN operation, to
  add standard labels to a copy of a non-labeled tape.  The
  syntax and purpose of these extra cards is obvious, once you
  see what they look like.  The possible cards are:

  ----ENDOFLABELHEADER
  ----ENDOFLABELHEADERINIT
  ----ENDOFLABELTRAILER
  ----ENDOFLABELTRAILEREOV

  These cards begin with four dashes because:  All labels are
  supposed to be composed of printable characters, and:  these
  cards are designed so that they could never be confused
  with real labels, and:  the rest of the text in the cards
  will indicate each card's exact purpose.

  A full set of LABLDUMP cards for one SL file is called "A
  LABEL SET".  Every place in this documentation, where a
  "label set" is referred to, it means a complete set of
  LABLDUMP cards for one SL file.

  Here is a sample of a typical label set:

VOL1C430MT                               SAMGOLOB
HDR1FILE0001         C430MT00010001      000317 980000000000IBM OS/VS 370
HDR2F327200008000WSBG1   /COPY1   P   B   7231C
----ENDOFLABELHEADER
EOF1FILE0001         C430MT00010001      000317 980000000100IBM OS/VS 370
EOF2F327200008000WSBG1   /COPY1   P   B   7231C
----ENDOFLABELTRAILER

  Notes:

  Use the LBDQUICK option to dump labels, if you do not want
  to read the data at all.

  LABADDIN processing looks at the ----ENDOFLABEL... cards
  and writes a tape mark to the output tapes, when it sees
  one of them.  In addition, if there are more label sets
  than input NL files during a LABADDIN operation, and the
  NOEXNULL option is not in effect, then LABADDIN uses the
  extra label sets to write null SL files to all of the
  output tapes, after the end of the input files, which
  contain data.  A null SL file consists of a HDR1, a HDR2,
  two consecutive tape marks, an EOF1, an EOF2, and a tape
  mark.  The last SL file on the tape has at least 2 tape
  marks after the final EOF2, and has one tape mark after
  the EOV2, if an EOV2 label is present.

  Therefore, when LABADDIN is writing null SL files, it
  writes two tape marks after the ----ENDOFLABELHEADER, and
  only one tape mark after the ----ENDOFLABELTRAILER.


./ ADD NAME=LBDQUICK 0100-00347-00347-1123-00031-00031-00000-WSBG
LBDQUICK

  The LBDQUICK option of COPYMODS allows you to create an
  external data file which contains images of all the labels
  on the input tape.  LBDQUICK will only execute in READ
  only mode.

  LBDQUICK is like LABLDUMP, except that it forward spaces
  over the tape data files, and only dumps the label files
  on the tape.  Therefore, LBDQUICK is not allowed to run
  during a tape copy, because it doesn't look at the tape
  data.


Historical Note:

  I wrote LBDQUICK during an experiment with tape block counts
  on the EOF1 label, when a tape file contains over a million
  blocks.  Such a tape takes a long time to read, because you
  have to do an EXCP on a million blocks--i.e. 1000000 EXCP's.

  Just to dump the labels, you'd rather forward space over all
  of this data, without having to do an EXCP on each data block.
  An FSF operation is one EXCP.  Actually, I do a preliminary
  read, to determine if the file contains labels or data.  Then
  if the file contains data, I backspace over the data record I
  just read, do a forward space file to go over the next tape
  mark, and then do a backspace file, to position just before
  that tape mark.  COPYMODS is then in position to do further
  processing on the tape.

./ ADD NAME=LBLFIX   0100-00339-00339-2059-00046-00046-00000-WSBG
LBLFIX

  During LABADDIN processing, an "external label file" is
  merged into an NL input tape to create SL output tapes.

  The external labels have extra control cards added, to aid
  the COPYMODS program in properly merging each label group
  together with its corresponding tape file.  Here is a sample
  file image of external labels, corresponding to the first
  two files of a tape:

VOL1C430MA                               SAMGOLOB
HDR1FILE0001         C430MA00010001      000317 980000000000IBM OS/VS 370
HDR2F327200008000WSBGA   /COPY1   P   B   7231C
----ENDOFLABELHEADER
EOF1FILE0001         C430MA00010001      000317 980000000100IBM OS/VS 370
EOF2F327200008000WSBGA   /COPY1   P   B   7231C
----ENDOFLABELTRAILER
HDR1FILE0002         C430MA00010002      000317 980000000000IBM OS/VS 370
HDR2F327200008000WSBGA   /COPY2   P   B   7231C
----ENDOFLABELHEADER
EOF1FILE0002         C430MA00010002      000317 980000000001IBM OS/VS 370
EOF2F327200008000WSBGA   /COPY2   P   B   7231C
----ENDOFLABELTRAILER

  You will notice that the EOF1 and EOF2 labels are nearly
  identical to the corresponding HDR1 and HDR2 files, except
  for the block count field in the EOF1, which is zero in
  the corresponding HDR1.  This fact makes it easy to complete
  a set of labels, if only the HDR1 and HDR2 are present,
  without the ----ENDOFLABELHEADER card and the EOF1 and EOF2.

  The LBLFIX parameter causes COPYMODS to complete the last
  set of labels in an external label file, if the HDR1 and HDR2
  are there, and the rest of the four records are missing.

  If either the ----ENDOFLABELTRAILER, or the EOF2, or the
  EOF1, or the ----ENDOFLABELHEADER cards are missing from
  the end of the external label file, LBLFIX will re-create
  them.

  This processing will only work for the last label set of
  the external label file.

  To turn off this processing, code the NOLBLFIX parameter.

./ ADD NAME=LTM      0100-04001-04001-0809-00042-00042-00000-SBGOLOB
LTM Services

  COPYMODS will automatically report leading tape marks on an input
  tape, and will not require any additional keyword instructions to
  do so.  So if you code the keyword READ, you can detect all the
  leading tape marks on a tape, using COPYMODS, with very little
  effort on your part.

  This is done because when COPYMODS reads the input tape, if it
  only encounters tape marks at the beginning and no real data, it
  keeps a flag turned on, saying that "no real data has been read
  yet", so COPYMODS does not stop reading the input tape as long as
  this flag is still on.  As soon as the READ EXCP detects something
  other than a tape mark, and real data has actually been read, or
  the end of the tape has been reached, then this flag is turned
  off, and COPYMODS acts normally, turning off after two consecutive
  tape marks, unless they follow a header label group.  (See member
  LTMSKIP for some further information about LTM service.)

  If the FILELIMIT=nnn keyword has been coded in //SYSIN, then this
  causes COPYMODS to do a rewind of the input tape, and COPYMODS
  will pass any leading tape marks if they exist, reporting that it
  has done so.  In that particular case, the number of leading tape
  marks is added to the nnn value of the FILELIMIT=nnn keyword, so
  that the correct file count is copied to the output tapes, without
  further user intervention.  NL and SL calcuation of the file limit
  number, remains as before, when a VOL1 label is detected after the
  leading tape marks, or when not.  The NLLIM and SLLIM keywords for
  file limiting are likewise honored.  Only the number of leading
  tape marks that have been found, is added to this number, so that
  the user of COPYMODS will not have to exert extra effort to figure
  out the desired number of files to copy to the output tapes.

  COPYMODS can also write nnn leading tapemarks in front of the data
  of the copied tapes, but that is a protected function.

  All functions of COPYMODS (hopefully) can be carried out
  transparently, even though both input and output tapes have leading
  tape marks.  Even LABLDUMP and LABADDIN functions can be done.  If
  you want to get rid of all the leading tape marks in the output
  tapes, then code the keyword LTMSKIP for the copy operation.

./ ADD NAME=LTMSKIP  0100-00339-00339-1857-00014-00014-00000-WSBG
LTMSKIP  and  LTMCOPY

  If the input tape has leading tape marks, the COPYMODS
  program provides the options of either copying the leading
  tape marks to the output tape, or of skipping them, and
  starting the output tape with the first file of real data.

  If LTMSKIP is coded as a parm, or in SYSIN, COPYMODS will
  skip the leading tape marks and start copying with the first
  file of real data.  If LTMCOPY is coded as a parm or in
  SYSIN, then COPYMODS will copy all the leading tape marks
  as they are.


./ ADD NAME=MINMAX   0101-04181-04211-0950-00023-00018-00000-SBGOLOB
  MINMAX

  MINMAX will display, for each tape file read into COPYMODS,
  the minimum sized block (how many bytes it has), and the
  maximum sized block, in that tape file.

  An example follows:

File 00001 Min Blksize:     7600 Max Blksize:    32720
FILE 00001 CONTAINS 0000140 DATA BLOCKS
File 00002 Min Blksize:    21040 Max Blksize:    21040
FILE 00002 CONTAINS 0000001 DATA BLOCKS
File 00003 Min Blksize:    21520 Max Blksize:    32720
FILE 00003 CONTAINS 0000006 DATA BLOCKS

  The keyword NOMINMAX will nullify the MINMAX keyword.

  Use the option RECSIZE to display each block size of each
  tape block in each tape file, which is the detail display
  that corresponds to the MINMAX option.  If you code the
  RECSIZE option, the MINMAX option is automatically turned
  on, to provide a summary report for the RECSIZE display.

./ ADD NAME=NLLIM    0100-02290-02290-2209-00014-00014-00000-SBGOLOB
NLLIM and SLLIM

  When limiting files to be copied, using the FILELIMIT=nnn SYSIN
  card, normally COPYMODS tries to detect whether the input tape
  is SL, or NL.  Then, the nnn number (if the tape is SL) is
  multiplied by 3, and (if the tape is NL) the nnn number is used
  as-is.  In this level (Level 051 and above), we can now force
  the nnn to be interpreted as NL using the NLLIM keyword, and we
  can force nnn to be interpreted as 3*nnn using the SLLIM
  keyword.  NONLLIM and NOSLLIM revert the program to the default
  (as described above--the program detects NL or SL and reacts
  accordingly) unless the other keyword is also coded.


./ ADD NAME=OPTION   0102-00339-03201-1845-00043-00030-00000-SBGOLOB
OPTION

  The OPTION option of COPYMODS calls a subprogram to report
  on all the option bytes which are set, or off, during a
  COPYMODS execution.

  The NOOPTION keyword will suppress this report.  As assembled,
  OPTION is a default.

  There are currently five bytes of parm bits, which control
  most of the COPYMODS execution options.  These create 40
  possible switches which COPYMODS can use to change the way
  it runs.  The switches are (mostly) controlled by EXEC parms,
  but some of them are controlled by SYSIN keyword pararmeters.

  The SYSIN keyword parameter cards:

  PRINTRCDS=nnn              uses HEXPRT   parm
  FILELIMIT=nnn              uses LIMFILE  parm
  LABELIMIT=nnn              uses LIMLABEL parm
  TAPEOWNER=tapeownrid       uses OUTVOL   parm
  OUTVOLALL=volser           uses OUTVOL   parm

  control EXEC parm parameters as well, but since their
  execution requires a quantity, as well as a switch
  setting, you can't properly invoke them with the switch
  setting alone, and without including the quantity too.

  The OPTION parm of COPYMODS produces a report which tells
  the user which parm bytes are set, and how they are set.

  The purpose of the OPTION parameter is two-fold.

  First, when using the OPTION parm and seeing the report,
  you know approximately how the COPYMODS program is operating
  for this execution run.  Second, the more casual user of the
  COPYMODS program will see how many possibilities and choices
  the COPYMODS program will offer you.

  I've tried to make the OPTION report correspond to the
  spellings of the actual COPYMODS parm keywords that are
  possible.  COPYMODS keywords have to be spelled correctly!

./ ADD NAME=PARMCHEK 0101-03175-03201-1832-00049-00028-00000-SBGOLOB
PARMCHEK program      -       revised at COPYMODS Level 062

    The PARMCHEK program is a separate program, which now must be
    assembled and linkedited together with the COPYMODS program.
    Member COPYMODS in CBT Tape File 229 contains source for both
    the COPYMODS and PARMCHEK programs.

    The PARMCHEK program now contains all the parsing code in COPYMODS
    and the two of them should be assembled as one input stream, with
    PARM=BATCH in the Assembler JCL.

    Before the call to PARMCHEK:

    R2 points to a user parameter transfer area, within the COPYMODS
       module, which passes required quantities from the COPYMODS
       program over to the PARMCKEK program.  This area is an exact
       copy of a similar area that lies within the PARMCHEK program
       module.  Both areas must be identical in the source code of
       both programs, from labels PARMFLGS to ENDVALUE.

    After the call to PARMCHEK:

    R1 points to the parameter bits, as set by the PARMCHEK program.
    R2 points to the user parameter transfer area, which has been
       overlaid by the results of the PARMCHEK program action.  This
       copy lies within the PARMCHEK program module.  This is an
       exact copy of the area having the same name, in the COPYMODS
       module, and as soon as control is returned to COPYMODS,
       COPYMODS copies this area from PARMCHEK and overlays the
       corresponding area within itself.

    Thus, as a result of the PARMCHEK execution, both the PARM flags
    and the user area become populated in the PARMCHEK program, and
    that data is then copied into the corresponding area in COPYMODS
    when control is returned to the COPYMODS program.

    To view diagnostic actions from the PARMCHEK program, you can
    code a new ddname //PARMREPT in the JCL for COPYMODS.  This
    produces a diagnostic report showing the detailed actions of
    the PARMCHEK program and the data passed by it, back to COPYMODS.

    After COPYMODS gets control back from PARMCHEK, COPYMODS examines
    the parm flag settings and eliminates inconsistencies between
    them.  After that, COPYMODS calls the COPYMOPT program to produce
    the OPTIONS report in //SYSPRINT.  So if you want to see the
    result of the "inconsistency adjustments" performed by COPYMODS,
    you should compare the settings from //PARMREPT to those of the
    OPTIONS report in //SYSPRINT.

./ ADD NAME=PRADDLBL 0100-00339-00339-1853-00010-00010-00000-WSBG
PRADDLBL

  During LABADDIN processing of the COPYMODS program, the
  PRADDLBL parameter allows the formatting and printing of
  the external labels from the external label file, as they
  are merged into the NL files from the input tape.

  This information appears on the COPYMODS SYSPRINT report.


./ ADD NAME=READ     0103-00308-00308-1246-00017-00026-00000-WSBG
READ

  This option allows the COPYMODS reporting facilities to
  analyze a tape, without your having to copy the tape.

  The READ option causes COPYMODS to only look at the IN
  ddname.  If the READ option is in effect, no OUTx ddnames
  are opened.

  Certain other parms of COPYMODS will turn off the READ
  option.  They are:  LABADDIN

  NOEXNULL and LBLFIX options turn LABADDIN on, so they
  automatically turn READ off.  When READ is off, OUTx
  ddnames are required in the execution JCL.


./ ADD NAME=RECSIZE  0100-04211-04211-0956-00024-00024-00000-SBGOLOB
  RECSIZE

  The RECSIZE option will display the detailed block size
  of every block in every file on the tape.  Coding the
  RECSIZE option in COPYMODS automatically produces the
  MINMAX option report too, as a summary.

  Example display:

  File 00002 Record number: 0000000136 Size of record: 0000032720
  File 00002 Record number: 0000000137 Size of record: 0000032720
  File 00002 Record number: 0000000138 Size of record: 0000032720
  File 00002 Record number: 0000000139 Size of record: 0000032720
  File 00002 Record number: 0000000140 Size of record: 0000032720
  File 00002 Record number: 0000000141 Size of record: 0000032720
  File 00002 Record number: 0000000142 Size of record: 0000006400
  File 00002 Min Blksize:     6400 Max Blksize:    32720
  FILE 00002 CONTAINS 0000142 DATA BLOCKS

  The last line is the block count summary.  The line before, is
  the MINMAX display, and the detail lines for each block, are
  produced by the RECSIZE option.


./ ADD NAME=REWIND   0101-04001-04001-0955-00055-00053-00000-SBGOLOB
REWIND of the input tape

  COPYMODS will rewind the input tape in two cases (as of the time of
  this writing -- COPYMODS Level 075).  Otherwise, COPYMODS positions
  the input tape initially, according to the LABEL=(nnn,BLP) JCL
  keyword in the job's JCL.

  The two cases when COPYMODS does a rewind of the input tape are:

  1-  During a LABADDIN operation.  The rewind is necessary to
      determine that the input tape is NL.  COPYMODS does a rewind,
      then an initial read EXCP, to determine if the beginning file
      of the tape is a VOL1 label.  If so, then COPYMODS aborts the
      LABADDIN operation, because we do not want to add new labels
      to a tape that already has labels.

  2-  If the FILELIMIT=nnn keyword is coded in //SYSIN.  The rewind
      is necessary to determine how many files from the input tape
      need to be copied.  Since we'd like to automatically determine
      if the input tape is SL (so we'd need to multiply the file
      limit by 3) or if it is NL (and we'd use the file limit number
      as is), we do this rewind, and feel for a VOL1 label, as in
      the previous case.

  For an input tape that doesn't have leading tape marks, COPYMODS
  does a second rewind of the input tape in Case 1, to reposition
  the input tape at the beginning, for the LABADDIN operation (and
  whatever else which will be done).  In Case 2, the input tape
  gets rewound a second time as well, because after the initial
  read, the input tape is no longer at the beginning load point.

  When leading tape marks have been encountered on the input tape,
  and these two cases of COPYMODS operation also occur (LABADDIN
  and/or FILELIMIT=nnn in //SYSIN), then the following compensating
  operations are done:

  Case 1-  After the initial read for LABADDIN, which passes all the
      leading tape marks and then a VOL1 label is either found or not
      found, if a VOL1 label is not found, indicating an NL input
      tape (besides the leading tape marks), then the tape is reset
      to a position just before the first real tape record, after all
      the leading tape marks, and the rest of the COPYMODS operations
      are performed.  This simulates the actual beginning of the tape,
      when you ignore all the leading tape marks.

  Case 2-  When FILELIMIT=nnn has been coded in //SYSIN, a second
      rewind is done after the initial rewind and read of all the
      leading tape marks.  Since we have already counted the number
      of leading tape marks passed, during the first read, this
      number is added to the file limit number calculated either
      according to NL or SL reckoning.  The //SYSPRINT report will
      show the leading tape marks as PASSED first, then it will show
      them a second time either as COPIED or SKIPPED, depending on
      whether LTMCOPY or LTMSKIP is currently in effect.

./ ADD NAME=SECOFF   0100-04001-04001-0740-00020-00020-00000-SBGOLOB
SECOFF

  The SECOFF keyword will cause password requiring bytes to be turned
  off in the tape labels of the copied tapes.  NOSECOFF will nullify
  the effect of the SECOFF keyword if it is coded afterward.

  The password requiring bytes are:

    Byte 54 for XXX1 tape labels  -  SECOFF sets to C'0' for EBCDIC
                                                    X'20' for ASCII

      XXX1 means HDR1, EOF1, or EOV1 labels.

    Byte 11 for VOL1 tape labels  -  Only for ASCII tapes.
                                     SECOFF sets this byte to X'20'

  SECOFF also works during a LABADDIN operation, if the external labels
  had any password bytes turned on.  SECOFF sets these bytes to the
  "no password required" values.

./ ADD NAME=STRIP    0104-02139-02289-2344-00041-00029-00000-SBGOLOB
STRIP

  The STRIP option of COPYMODS allows you to create NL tapes
  from an SL tape.  The STRIP option of COPYMODS works by
  detecting whether a tape file is a label file or not, and if it
  is a label file, then the writes of the data and its subsequent
  tape mark (to the output tapes) are skipped.

  If a tape file is a label group, the COPYMODS with the STRIP
  option bypasses it during the copy.  If the tape file is not
  a label group, COPYMODS copies it to the output tapes.

  This logic is different from that of the COPYSLNL program,
  which assumes that the first file of an SL file is a label
  group, and the third file is a label group.  COPYSLNL just
  skips all label files, without "feeling" for what they actually
  are.  COPYSLNL works by counting, whereas COPYMODS will only
  skip a label group, if it actually detects that the file is
  one.  In other words, COPYMODS "knows" it has eliminated labels.
  COPYSLNL just figures that a file is a label group, by counting.

Relationship of STRIP to LABLDUMP

  If both STRIP and LABLDUMP are coded as parms, then COPYMODS
  separates the data files from the label files.  The data files
  get written to the output tapes, and the label files get written
  to the LABLDUMP DD name.

  If you want to perform the opposite function, and put the labels
  back with their respective data files to make SL tapes, then
  you can use the LABLDUMP file as a LABADDIN file in a LABADDIN
  operation under COPYMODS.

Relationship of STRIP to FILELIMIT=nnn

  If FILELIMIT=nnn is coded in SYSIN, then STRIP will stop after
  having copied the designated number of SL files.  That is,
  STRIP will copy 3 times the number of BLP (or NL) input files
  that were designated in the FILELIMIT=nnn card.  The output
  tapes will contain nnn NL files.

./ ADD NAME=SUPPWTO  0102-00340-00340-1758-00009-00011-00000-WSBG
SUPPWTO

  Coding this option suppresses the +CBT990 message to the
  system log, showing one more file than the COPYMODS program
  has copied.  As delivered, I have made this option a default.
  However, I think that the users should "undefault" it in
  their assembly.  A parm of NOSUPPWT nullifies this parm.


