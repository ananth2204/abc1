{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011524000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 4585308, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 11, "INMDSNAM": "CBT.V500.FILE222.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 4585308, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 4585308, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE222.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00I\\x0c'", "DS1TRBAL": "b'N\\\\'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x97\\x00\\x00\\x01\\x9b\\x00\\r\\x00J'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$$$DOC": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "-----------------------------------------------------------------------\n-----------------------------------------------------------------------\nRACF INTEGRITY PACKAGE.  FOR AUTHORIZED SYSTEMS USE ONLY.\nI AM NOT GOING TO TELL YOU HOW TO USE IT.\n-----------------------------------------------------------------------\n-----------------------------------------------------------------------\nLSLT - FILL IN PROGRAM NAME IN LAST SLOT OF PARMLIB-MANUFACTURED\n       TSO/E AUTH TABLES, OR BLANK THE LAST SLOT ENTRY\nASUB - SUBSTITUTE ANY PROGRAM NAME INTO ANY SLOT OF ANY TSO/E\n       PARMLIB-MANUFACTURED AUTH TABLE.  BUT ONLY BLANK THE LAST\n       SLOT, BECAUSE BLANKING AN ARBITRARY SLOT IS TOO RISKY, SINCE\n       ALL SUBSEQUENT SLOTS WILL THEREFORE BE INVALIDATED, AND THEIR\n       ENTRIES WILL NOT BE HONORED BY THE SYSTEM.\nTSUB - SUBSTITUTE ANY PROGRAM NAME INTO ANY SLOT OF ANY TSO/E\n       AUTH TABLE POINTED TO BY THE LWA.  CAN FLIP STEPLIB BITS\n       AND CHANGE LENGTHS AND OTHER STUFF.\n-----------------------------------------------------------------------\n-----------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$#DATE": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00T\\x01 1\\x0f\\x01 1\\x0f\\x13\\x03\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-11-05T00:00:00", "modifydate": "2020-11-05T13:03:54", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  222\n\n    ORIGINAL DSNAME:  IBMUSER.CBT500.FILE222\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 114 MEMBERS COUNTED; CUMULATIVE SIZE IS 43,004 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/05/20    13:03:54    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$UID8": {"ttr": 520, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Several of the programs here are part of our 8-character userid\nsimulation kit, otherwise known as our UID8.TOOLKIT.  These programs\nhave been used to simulate an 8-character userid environment on a\npre-z/OS 2.3 system.  Even though everything about 8-character ids\nare not in effect there, the changing of (future) appropriate fields\nallows you to write programs which test their contents.\n\nThere is considerable use for these programs on a z/OS 2.3 system\nas well.\n\nAny program whose assembly JCL points to a UID8.TOOLKIT dataset comes\nfrom this collection.\n\nThese programs are useful for those who are doing this programming,\non a sandbox machine that will not affect any production work.  Use\nof these programs on a \"production machine\" IS HIGHLY NOT RECOMMENDED.\n\nThere definitely will be some productive use for these programs in a\ndevelopment environment, and that is why they are being included here.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$AUTHTB1": {"ttr": 522, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "              Notes on the TSO/E Authorization Tables\n              ----- -- --- ----- ------------- ------\n\nPart 1 ---- The four tables, their entries, and where they come from.\n\n\nThe TSO/E Authorization tables are of 4 types, basically.\n\n\n1.  IKJEFTE2 - affectionately known as the \"E2 table\"\n\n      This is a list of TSO commands that is allowed to run as\n      APF-authorized TSO commands.  It is an EXPLICIT list of\n      program names.\n\n      The incore values of this table of program names can come\n      from either of three places:\n\n      A.  From PARMLIB member IKJTSOxx if the AUTHCMD NAMES( )\n          list is coded.\n\n      B.  This PARMLIB list is overridden if the TSO Userid has\n          an APF-authorized STEPLIB which contains an IKJTABLS\n          load module that has an IKJEFTE2 CSECT in it, containing\n          the list of program names.\n\n      C.  If the PARMLIB list has no AUTHCMD NAMES( ) list coded\n          in it, then the default IKJTABLS load module which is\n          in the LPA list (usually from SYS1.LPALIB) is pointed to.\n          That is, the IKJEFTE2 CSECT which is in the IKJTABLS\n          load module (from LPALIB) is pointed to.\n\n      The three tables, the E2 Table, the E8 Table, and the AP\n      Table, have 8-byte entries consisting of left-justified\n      8-byte program names, padded by blanks.  These three tables\n      are delimited either by a size number (present if the table\n      was constructed from a PARMLIB member), or by an 8-byte\n      blank entry in place of a program name.  The blank entry\n      is necessary when the table was created by an IKJEFTE2,\n      IKJEFTE8, or IKJEFTAP CSECT in an IKJTABLS load module,\n      and no other \"length determining\" quantities are present.\n\n2.  IKJEFTE8 - affectionately known as the \"E8 table\"\n\n      This is a list of program names that are allowed to run as\n      APF-authorized programs, in the TSO User's address space.\n      The E8 table is also an EXPLICIT list of program names.\n\n      The incore values of the E8 table comes from either of three\n      places, as does the E2 table.  But the PARMLIB list in the\n      IKJTSOxx member, is called AUTHPGM NAMES(  ), and the CSECT\n      in the IKJTABLS load module is called IKJEFTE8.\n\n      The following example illustrates E8 Table entries, and the\n      other tables, E2 and AP, look similar.  The table entries\n      are 8 bytes long.\n\nTSUB Command - Display or Change Auth Table Entry\n---- -------   ------- -- ------ ---- ----- -----\nE8D   04     Program table name + Function code\nTable E8 pointed to by the LWA has lengths available.\nTable E8 pointed to by the LWA did not come from an APF STEPLIB.\nE8 Table Entry Number:         1  ICHUT100\nE8 Table Entry Number:         2  ICHUT200\nE8 Table Entry Number:         3  ICHUT400\nE8 Table Entry Number:         4  ICHDSM00\nE8 Table Entry Number:         5  IRRDSC00\nE8 Table Entry Number:         6  IRRUT100\nE8 Table Entry Number:         7  IRRUT200\nE8 Table Entry Number:         8  IRRUT400\nE8 Table Entry Number:         9  IRRDPI00\nE8 Table Entry Number:        10  CSFDAUTH\nE8 Table Entry Number:        11  ICADCT\nE8 Table Entry Number:        12  ICADDCT\nE8 Table Entry Number:        13  ICADCFGS\nE8 Table Entry Number:        14  ICADPFTP\nE8 Table Entry Number:        15  ICADFTPD\nE8 Table Entry Number:        16  ICADSLOG\nE8 Table Entry Number:        17  ICADSOCK\nE8 Table Entry Number:        18  ICADSOXD\nE8 Table Entry Number:        19  ICADSTAK\nE8 Table Entry Number:        20  ICADIKED\nE8 Table Entry Number:        21  IEBCOPY\nE8 Table Entry Number:        22  IOEGRWAG\nE8 Table Entry Number:        23  IOENEWAG\nE8 Table Entry Number:        24  IOESALVG\nE8 Table Entry Number:        25  IOEBAK\nE8 Table Entry Number:        26  IOEBOS\nE8 Table Entry Number:        27  IOECM\nE8 Table Entry Number:        28  IOEDCEER\nE8 Table Entry Number:        29  IOEDFSXP\nE8 Table Entry Number:        30  IOEFTS\nE8 Table Entry Number:        31  IOEMAPID\nE8 Table Entry Number:        32  IOESCOUT\nE8 Table Entry Number:        33  IOEUDBG\nE8 Table Entry Number:        34  *empty*\nReturn Code = 0\n\n      A storage dump of the same table looks as follows:\n\n0000B428   >C9D2D1C5  C6E3C5F8  40D7C1D9  D4D3C9C2 *>IKJEFTE8 PARMLIB*\n0000B438    C9C3C8E4  E3F1F0F0  C9C3C8E4  E3F2F0F0  *ICHUT100ICHUT200*\n0000B448    C9C3C8E4  E3F4F0F0  C9C3C8C4  E2D4F0F0  *ICHUT400ICHDSM00*\n0000B458    C9D9D9C4  E2C3F0F0  C9D9D9E4  E3F1F0F0  *IRRDSC00IRRUT100*\n0000B468    C9D9D9E4  E3F2F0F0  C9D9D9E4  E3F4F0F0  *IRRUT200IRRUT400*\n0000B478    C9D9D9C4  D7C9F0F0  C3E2C6C4  C1E4E3C8  *IRRDPI00CSFDAUTH*\n0000B488    C9C3C1C4  C3E34040  C9C3C1C4  C4C3E340  *ICADCT  ICADDCT *\n0000B498    C9C3C1C4  C3C6C7E2  C9C3C1C4  D7C6E3D7  *ICADCFGSICADPFTP*\n0000B4A8    C9C3C1C4  C6E3D7C4  C9C3C1C4  E2D3D6C7  *ICADFTPDICADSLOG*\n0000B4B8    C9C3C1C4  E2D6C3D2  C9C3C1C4  E2D6E7C4  *ICADSOCKICADSOXD*\n0000B4C8    C9C3C1C4  E2E3C1D2  C9C3C1C4  C9D2C5C4  *ICADSTAKICADIKED*\n0000B4D8    C9C5C2C3  D6D7E840  C9D6C5C7  D9E6C1C7  *IEBCOPY IOEGRWAG*\n0000B4E8    C9D6C5D5  C5E6C1C7  C9D6C5E2  C1D3E5C7  *IOENEWAGIOESALVG*\n0000B4F8    C9D6C5C2  C1D24040  C9D6C5C2  D6E24040  *IOEBAK  IOEBOS  *\n0000B508    C9D6C5C3  D4404040  C9D6C5C4  C3C5C5D9  *IOECM   IOEDCEER*\n0000B518    C9D6C5C4  C6E2E7D7  C9D6C5C6  E3E24040  *IOEDFSXPIOEFTS  *\n0000B528   >C9D6C5D4  C1D7C9C4  C9D6C5E2  C3D6E4E3 *>IOEMAPIDIOESCOUT*\n0000B538    C9D6C5E4  C4C2C740  40404040  40404040  *IOEUDBG         *\n\n\n\n3.  IKJEFTAP - affectionately known as the \"AP table\"\n\n      This is a list of program names that are made to run as\n      APF-authorized programs, in the TSO User's address space.\n      This is done through the \"TSO/E Service Facility\".\n      The AP table is also an EXPLICIT list of program names.\n\n      The incore values of the AP table comes from either of three\n      places, as do the other tables.  But the PARMLIB list in the\n      IKJTSOxx member, is called AUTHTSF NAMES(  ), and the CSECT\n      in the IKJTABLS load module is called IKJEFTAP.\n\n4.  IKJEFTNS - affectionately known as the \"NS table\"\n\n      This is a list of TSO commands which are not allowed to run\n      under TSO-in-Batch.  These commands must run as \"full\n      screen\" TSO commands.  The NS table is also an EXPLICIT list\n      of program names.\n\n      The incore values of the NS table comes from either of three\n      places, as do the other tables.  But the PARMLIB list in the\n      IKJTSOxx member, is called NOTBKGND NAMES(  ), and the CSECT\n      in the IKJTABLS load module is called IKJEFTNS.\n\n      The structure of the NS table is different from the structure\n      of the other tables.  The other tables are 8 bytes long, and\n      contain only program names.  The IKJEFTNS table entries are\n      10 bytes long.  Each program name is prefixed by a two-byte\n      field containing the binary length of the program name which\n      immediately follows it.  Hence 2 bytes (the length field)\n      followed by 8 bytes (the program name) completes the 10-byte\n      \"NS Table\" entry.\n\n      The NS table is delimited by an X'FFFF' in the \"program size\"\n      field, or by a blank table entry.\n\n      The following example illustrates NS Table entries:\n\nTSUB Command - Display or Change Auth Table Entry\n---- -------   ------- -- ------ ---- ----- -----\nNSD   04     Program table name + Function code\nTable NS pointed to by the LWA has no lengths. Blanks will delimit.\nTable NS pointed to by the LWA did not come from an APF STEPLIB.\nNS Table Entry Number:         1  0008  OPERATOR\nNS Table Entry Number:         2  0004  OPER\nNS Table Entry Number:         3  0008  TERMINAL\nNS Table Entry Number:         4  0004  TERM\nNS Table Entry Number:         5  0000  *empty*\nTable is in LPALIB, and we will not attempt to alter it.\nNothing was changed.\nReturn Code = 0\n\n      A storage dump of the same table looks as follows:\n\n00D8A0D0   >C9D2D1C5  C6E3D5E2  40C8E3C5  F7F7F0F6 *>IKJEFTNS HTE7706*\n00D8A0E0    0008D6D7  C5D9C1E3  D6D90004  D6D7C5D9  *..OPERATOR..OPER*\n00D8A0F0    40404040  0008E3C5  D9D4C9D5  C1D30004  *    ..TERMINAL..*\n00D8A100    E3C5D9D4  40404040  00004040  40404040  *TERM    ..      *\n00D8A110    40400000  40404040  40404040  00004040  *  ..        ..  *\n00D8A120    40404040  40400000  40404040  40404040  *      ..        *\n00D8A130    00004040  40404040  40400000  40404040  *..        ..    *\n00D8A140    40404040  00004040  40404040  40400000  *    ..        ..*\n00D8A150    40404040  40404040  00004040  40404040  *        ..      *\n00D8A160    40400000  40404040  40404040  FFFF0000  *  ..        ....*\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$AUTHTB2": {"ttr": 526, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "              Notes on the TSO/E Authorization Tables\n              ----- -- --- ----- ------------- ------\n\nPart 2 ---- Where the actual tables that are used, come from.\n\n\nYou may be surprised to know that the four auth tables:  IKJEFTE2\n(TSO command authorization), IKJEFTE8 (programs that can run APF\nauthorized under a TSO address space), IKJEFTAP (programs that are\nauthorized by the TSO Service Facility), and IKJEFTNS (programs\nwhich are not allowed to run under TSO-in-Batch), are NOT the tables\nthat your TSO/E address space listens to.  I'd bet you're surprised\nby that, but it's true.  I'll show you.\n\nYou can see the truth of this, by the knowledge that whenever you\nalter a CSECT in an IKJTABLS load module, you have to LOGON again\nfor the changes to take effect.  Also, if you do a PARMLIB UPDATE(xx)\nTSO command, or a SET IKJTSO=xx console command, and the auth tables\nget changed by that, the changes will not affect your TSO userid's\naddress space unless you LOGON again.  It's an indisputable fact.\nPut THAT in your mouth and chew it !!  It's the truth, and nothing\nbut the truth.  WHY IS THIS SO ?\n\nI didn't know why for a long time.  I don't think that IBM wants to\ndocument the truth here.  But I'll tell you how I discovered it.\nI studied the TSO LOGON Work Area, documented by the macro IKJEFLWA\nin SYS1.MODGEN.  Just edit it on your screen, and look for the letters\n\"E8\".  Or \"AP\".  Or even \"E2\", but there are a lot of occurrences of\nE2 there.\n\nYou see that the auth tables are pointed to by entries in the LWA.\nThe LWA is address space specific.  There is one of these created\nfor each TSO/E address space.  If you browse core, and look at the\naddresses where the tables are pointed to in the LWA, you'll see\nsomething very surprising.  They are in the Address Space's own\nstorage (albeit in Subpool 252).  That means that only these tables\nare the ones used by your TSO/E address space, and no others.  The\npublic tables are copied into your TSO address space at LOGON time.\nAnd these tables, pointed to by your userid-specific LWA, are the\nONLY ones that your TSO address space actually listens to.\n\n\nTOOLS:  How to deal with each type of table, and substitute program\n        names on the fly, etc.\n\nWe have a program to deal with the incore TSO auth tables, pointed to\nby the LWA, and that program is called TSUB.  The programs we have, to\ndeal with the PARMLIB-created tables is called ASUB and LSLT (fill in\nthe last slot).  These programs (except for their \"display\" functions,\nhave to run APF-authorized.\n\nFinally, if we want to assemble our own IKJTABLS load module, look\nat the ASMTABLS member.  Remember, that for the IKJTABLS load\nmodule to override the PARMLIB-created tables in our TSO session,\nthe TSO session has to be running the IKJTABLS load module from an\nAPF-authorized STEPLIB library.  So you have to have your own LOGON\nProcedure in PROCLIB to accomplish that.\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACCTM": {"ttr": 528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ACCT     TITLE 'Give this TSO user PSCB TSO privileges'\n* ---------------------------------------------------------------- *\n*    This program does not obtain authorization by itself. You     *\n*    have to either put it into the IKJEFTE2 table, or use a       *\n*    \"trick SVC\" to obtain authorization. But it WILL tell you     *\n*    if YOU got authorization for it. Also linkedit SETCODE AC(1). *\n* ---------------------------------------------------------------- *\nACCT     CSECT\nACCT     AMODE 31\nACCT     RMODE 24\n         YREGS\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         USING ACCT,R12\n         LR    R14,R13\n         LA    R13,SAVE\n         ST    R14,4(,R13)\n         ST    R13,8(,R14)\n         SPACE\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n*   Insert code for \"trick SVC\" here to authorize, if you have one.\n*\n         L     R3,X'10'            POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS.\n         L     R3,0(,R3)           POINT TO MY TCB.\n         L     R3,X'B4'(,R3)       POINT TO MY JSCB.\n         L     R3,X'108'(,R3)      POINT TO MY PSCB.\n         MODESET KEY=ZERO          AUTHORIZE ME.\n         OI    X'10'(R3),X'F3'     Turn on all flags.\n         MODESET KEY=NZERO         UN-AUTHORIZE ME.\n*\n*   Insert code for \"trick SVC\" here to unauthorize, if you have one.\n*\n         TPUT  MSG,L'MSG\nENDPGM   DS    0H\n         L     R13,SAVE+4\n         LM    R14,R12,12(R13)\n         SR    R15,R15\n         BR    R14\n         SPACE\nNOTAUTH  DS    0H\n         TPUT  AUTHM,L'AUTHM\n         B     ENDPGM\nSAVE     DS    9D\nMSG      DC    C'You now have TSO privileges.'\nAUTHM    DC    C'This program must be run APF-authorized.'\nSAVE14T1 DS    2D\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ACCTM$": {"ttr": 530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD,FLAG(5))\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//*        DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(ACCTM)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   ACCT\n SETSSI  CB495300\n SETCODE AC(1)\n ENTRY   ACCT\n NAME    ACCTM(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ALLIDS": {"ttr": 532, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* ------------------------------------------------------------------- *\n*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER,    *\n*        IN VARIOUS PLACES WITHIN THE SYSTEM.                         *\n*                                                                     *\n*      THIS PROGRAM IS IN THE PUBLIC DOMAIN.                          *\n*                                                                     *\n*      Only needs APF authorization to show the TSBX.  If you don't   *\n*        want to authorize, just comment those few lines out, and     *\n*        eliminate the MODESET macros.                                *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n*  -----------------------------------------------------------------  *\n*                  MACRO TO DISPLAY HEX VALUES                        *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEXR  &TO,&REG\n&NAME    STM   R15,R1,HEXSAVE\n         LR    R1,&REG\n         ST    R1,STORREG\n         LA    R0,4\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         YREGS\nALLIDS   CSECT\nALLIDS   RMODE 24\nALLIDS   AMODE 24\n         USING ALLIDS,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'ALLIDS  VER 1.2 '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   DS    0H\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING ALLIDS,R12          TELL THE ASSEMBLER R12 IS BASE\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nINITPGM  DS    0H                  PRINT TITLE\n\n\n         MVI   OUTLINE-1,X'40'\n         MVC   OUTLINE,OUTLINE-1\n        MVC OUTLINE(43),=C'ALLIDS - SHOW TSO USERID OCCURRENCES - V1.2'\n         APUT  OUTLINE,43\n         MVC   OUTLINE,OUTLINE-1\n        MVC OUTLINE(43),=C'------   ---- --- ------ -----------   ----'\n         APUT  OUTLINE,43\n         MVC   OUTLINE,OUTLINE-1\n         MVC  OUTLINE(41),=C'   cntl            old    len   new   len'\n         APUT  OUTLINE,41\n         MVC   OUTLINE,OUTLINE-1\n         MVC  OUTLINE(41),=C'  block           field   gth  field  gth'\n         APUT  OUTLINE,41\n         MVC   OUTLINE,OUTLINE-1\n         MVC  OUTLINE(41),=C'   ----           -----    --  -----   --'\n         APUT  OUTLINE,41\nRUNCHAIN L     R1,16               POINT TO CVT.\n         L     R5,X'9C'(,R1)       GET TSVT ADDRESS.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         L     R8,X'34'(,R2)       GET UPT ADDRESS\n* ------------------------------------------------------------------- *\n         USING PSCB,R2\n         MVC   PSCBMSG+18(7),PSCBUSER  MOVE USERID IN FROM PSCB\n         MVC   PSCBMSG+30(8),PSCB+X'54' NEW USERID\n         OC    PSCBMSG+30(8),BLANKS     IF ZEROS, BLANK IT OUT\n         HEX   PSCBMSG+27,1,PSCB+X'7'\n         HEX   PSCBMSG+39,1,PSCB+X'20'\n         APUT  PSCBMSG,L'PSCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         DROP  R2\n         USING UPT,R8\n         MVC   UPTMSG+18(7),UPT+X'10' OLD PREFIX\n         MVC   UPTMSG+30(8),UPT+X'21' NEW PREFIX\n         OC    UPTMSG+30(8),BLANKS      IF ZEROS, BLANK IT OUT\n         HEX   UPTMSG+27,1,UPT+X'17'\n         HEX   UPTMSG+39,1,UPT+X'29'\n         APUT  UPTMSG,L'UPTMSG         DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX.\n         MVC   JCTMSG+18(8),X'18'(R1)  PRINT JCT ID MESSAGE.\n         APUT  JCTMSG,L'JCTMSG\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX.\n         XR    R7,R7               CLEAR REGISTER\n         ICM   R7,7,X'96'(R1)      POINT REGISTER TO JMR POINTER\n         MVC   JMRMSG+18(8),X'10'(R7)  MOVE USERID TO MESSAGE\n         APUT  JMRMSG,L'JMRMSG\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   TIOTMSG+18(8),0(R1)  MOVE USERID IN FROM TIOT\n         APUT  TIOTMSG,L'TIOTMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         MVC   ASCBMSG+18(8),0(R1)  MOVE USERID IN FROM ADDRESS\n         APUT  ASCBMSG,L'ASCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         LA    R3,X'C0'(,R1)         POINT TO ASXB USERID\n         MVC   ASXBMSG+18(8),0(R3)    MOVE ASXB USERID\n         APUT  ASXBMSG,L'ASXBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         LA    R3,X'15'(,R1)         POINT TO ACEE USERID\n         MVC   ACEEMSG+18(8),0(R3)      MOVE ACEE USERID\n         HEX   ACEEMSG+27,1,X'14'(R1)   MOVE ACEE USERID LENGTH\n         APUT  ACEEMSG,L'ACEEMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         LA    R3,X'49'(,R1)         POINT TO LWA USERID\n         XR    R6,R6                   CLEAR REGISTER\n         ICM   R6,1,X'48'(R1)          INSERT LENGTH OF ID ONLY\n         BCTR  R6,0                    ONE LESS FOR EXECUTE\n*        EX    R6,EXLWAUID             MOVE ID IN THERE\nEXLWAUID MVC   LWAMSG+18(7),0(R3)       MOVE LWA USERID\n         LA    R3,X'1DC'(,R1)          POINT TO NEW USERID FIELD\n         HEX   LWAMSG+27,1,X'48'(R1)   DISPLAY LENGTH VALUE\n         MVC   LWAMSG+30(8),0(R3)      MOVE USERID INTO PLACE\n         OC    LWAMSG+30(8),BLANKS     IF ZEROS, BLANK IT OUT\n         APUT  LWAMSG,L'LWAMSG         DISPLAY THE MESSAGE ON THE TUBE\n         MODESET KEY=ZERO\n         L     R1,X'3C'(,R10)          POINT TO TSB\n         MVC   TSBXMSG+18(8),X'90'(R1) MOVE IN USERID\n         APUT  TSBXMSG,L'TSBXMSG       SHOW THE NAME THERE\n         MODESET KEY=NZERO\n         L     R15,CHGTO31B            LOAD ADDR OF 'TO31BIT' WITH..\n         BSM   0,R15                   CHANGE TO 31-BIT MODE IN ORDER..\n*                                      TO ADDRESS GETCORE STORAGE\nCHGTO31B DC    0F'0',A(X'80000000'+TO31BIT)  SWITCH TO 31-BIT\nTO31BIT  DS    0H\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         LR    R8,R1               SAVE CSCB ADDRESS\n         MVC   CSCBMSG+18(8),8(R1)      MOVE CSCB USERID\n         APUT  CSCBMSG,L'CSCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         LR    R1,R8               RELOAD CSCB ADDRESS\n         L     R1,X'DC'(,R1)       POINT TO CSCX ADDRESS\n         MVC   CSCXMSG+18(8),X'18'(R1)  MOVE USERID INTO MESSAGE\n         APUT  CSCXMSG,L'CSCXMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'90'(,R10)      POINT TO ASCBOUCB\n         LA    R1,X'D0'(,R1)       POINT TO OUCBUSRD\n         MVC   OUCBMSG+18(8),0(R1)      MOVE OUCB USERID\n         APUT  OUCBMSG,L'OUCBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'A8'(,R1)         POINT TO JSAB\n         MVC   JSABMSG+18(8),X'2C'(R1)\n         MVC   JSABMSG+35(8),X'1C'(R1)\n         APUT  JSABMSG,L'JSABMSG\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'F0'(,R1)         POINT TO VAB\n         L     R1,4(,R1)               POINT TO CAUB\n         LA    R3,X'14'(,R1)             POINT TO USERID\n         MVC   CAUBMSG+18(8),0(R3)       LOAD THE USERID\n         APUT  CAUBMSG,L'CAUBMSG       DISPLAY THE MESSAGE ON THE TUBE\n         B     TRY00\nENDMSG   DS    0H\n* ------------------------------------------------------------------- *\nTRY00    DS    0H\n         STM   R14,R1,SAVE14T1\n         CLI   6(R5),X'00'\n         BNE   TRY07\n         APUT  MSG01,L'MSG01\n         B     TRYEND\nTRY07    DS    0H\n         CLI   6(R5),X'07'\n         BNE   TRY08\n         APUT  MSG02,L'MSG02\n         B     TRYEND\nTRY08    DS    0H\n         CLI   6(R5),X'08'\n         BNE   TRY08\n         APUT  MSG03,L'MSG03\n         B     TRYEND\nTRYEND   DS    0H\n         LM    R14,R1,SAVE14T1\n* ------------------------------------------------------------------- *\nRETURN   DS    0H\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14                 RETURN TO CALLER\nSAVE     DC    18F'0'              MY SAVE AREA\nSAVER1A  DC    F'0'\nPSCBMSG  DC    C'My PSCB Userid is                          '\nUPTMSG   DC    C'My UPT  Prefix is                          '\nJCTMSG   DC    C'My JCT  Userid is             '  LINE FOR MESSAGE\nJMRMSG   DC    C'My JMR  Userid is             '  LINE FOR MESSAGE\nTIOTMSG  DC    C'My TIOT Userid is             '  LINE FOR MESSAGE\nASCBMSG  DC    C'My ASCB Userid is             '  LINE FOR MESSAGE\nASXBMSG  DC    C'My ASXB Userid is             '  LINE FOR MESSAGE\nCAUBMSG  DC    C'My CAUB Userid is             '  LINE FOR MESSAGE\nJSABMSG  DC    C'My JSAB Userid is          Jobname         '\nACEEMSG  DC    C'My ACEE Userid is             '  LINE FOR MESSAGE\nLWAMSG   DC    C'My LWA  Userid is                          '\nCSCBMSG  DC    C'My CSCB Userid is             '  LINE FOR MESSAGE\nCSCXMSG  DC    C'My CSCX Userid is             '  LINE FOR MESSAGE\nOUCBMSG  DC    C'My OUCB Userid is             '  LINE FOR MESSAGE\nTSBXMSG  DC    C'My TSBX Userid is             '  LINE FOR MESSAGE\nBLANKS   DC    CL80' '\nOUTPUT   DC    CL80' '\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\nSTORREG  DC    F'0'\nMSG01    DC    C'8-CHARACTER USERID SUPPORT IS: N/A'\nMSG02    DC    C'8-CHARACTER USERID SUPPORT IS: OFF'\nMSG03    DC    C'8-CHARACTER USERID SUPPORT IS: ON '\n         DC    X'40'\nOUTLINE  DS    CL80\n         LTORG\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\n** ---------------------------------------------------------------- **\nHEXR     DS    0H\n         MVC   1(1,R15),STORREG    MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         CVT   DSECT=YES\n         IKJPSCB\n         IKJUPT\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ALLIDS$": {"ttr": 777, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(ALLIDS)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   ALLIDS\n SETSSI  CB477247\n SETCODE AC(1)\n NAME    ALLIDS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMTABLS": {"ttr": 779, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERM JOB ,'A-NONYMOUS',CLASS=B,\n//    MSGCLASS=X,NOTIFY=&SYSUID\n//*\n//REASMLNK PROC\n//ASM    EXEC  PGM=ASMA90,REGION=7000K,\n//             PARM=(DECK,NOOBJECT,NORLD,RENT,TERM,'XREF(SHORT)')\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//SYSUT2   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//SYSUT3   DD  UNIT=SYSALLDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD  UNIT=SYSALLDA,SPACE=(TRK,(5,5)),DISP=(MOD,PASS),DSN=&&X,\n//             DCB=BLKSIZE=3120\n//SYSPRINT DD  SYSOUT=*\n//SYSTERM  DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MODGEN,DISP=SHR,DCB=BLKSIZE=23440\n//         DD  DSN=SYS1.MACLIB,DISP=SHR\n//LKED   EXEC  PGM=IEWL,PARM='MAP,RENT,REUS,REFR,LET,NCAL',COND=(0,LT)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIBX  DD  DSN=&&X,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DISP=SHR,DSN=&OUTPUT\n//SYSUT1   DD  UNIT=SYSALLDA,SPACE=(TRK,(5,5))\n//       PEND\n//*\n//IKJTABLS  EXEC REASMLNK,OUTPUT='IBMUSER.IKJTABLS.LOAD',   <=== CHANGE\n//  PARM.LKED='NCAL,MAP,LIST,LET,RENT,REUS'\n//ASM.SYSIN   DD *\nIKJEFTE2 CSECT                                                          00000 00\n         DC    C'IKJEFTE2'             C9D2D1C5C6E3C5F2  *IKJEFTE2*     00000 00\n         DC    C'76.152  '             F7F64BF1F5F24040  *76.152  *     00008 00\n         ENTRY APFCTABL                                                 00010 00\nAPFCTABL DC    C'$$      '             5B5B404040404040  *$$      *     00010 00\n         DC    C'$HOWMVS '             5BC8D6E6D4E5E240  *$HOWMVS *     00018 00\n         DC    C'$MDSMAIN'             5BD4C4E2D4C1C9D5  *$MDSMAIN*     00020 00\n         DC    C'ABUDSN  '             C1C2E4C4E2D54040  *ABUDSN  *     00028 00\n         DC    C'AD      '             C1C4404040404040  *AD      *     00030 00\n         DC    C'ADB2UTIL'             C1C4C2F2E4E3C9D3  *ADB2UTIL*     00038 00\n         DC    C'ADDDIR  '             C1C4C4C4C9D94040  *ADDDIR  *     00040 00\n         DC    C'ADDFILE '             C1C4C4C6C9D3C540  *ADDFILE *     00048 00\n         DC    C'ADDGROUP'             C1C4C4C7D9D6E4D7  *ADDGROUP*     00050 00\n         DC    C'ADDSD   '             C1C4C4E2C4404040  *ADDSD   *     00058 00\n         DC    C'ADDUSER '             C1C4C4E4E2C5D940  *ADDUSER *     00060 00\n         DC    C'ADIR    '             C1C4C9D940404040  *ADIR    *     00068 00\n         DC    C'ADNR    '             C1C4D5D940404040  *ADNR    *     00070 00\n         DC    C'ADYOPCMD'             C1C4E8D6D7C3D4C4  *ADYOPCMD*     00078 00\n         DC    C'AF      '             C1C6404040404040  *AF      *     00080 00\n         DC    C'AG      '             C1C7404040404040  *AG      *     00088 00\n         DC    C'AHOWMVS '             C1C8D6E6D4E5E240  *AHOWMVS *     00090 00\n         DC    C'ALD     '             C1D3C44040404040  *ALD     *     00098 00\n         DC    C'ALF     '             C1D3C64040404040  *ALF     *     000A0 00\n         DC    C'ALG     '             C1D3C74040404040  *ALG     *     000A8 00\n         DC    C'ALTDIR  '             C1D3E3C4C9D94040  *ALTDIR  *     000B0 00\n         DC    C'ALTDSD  '             C1D3E3C4E2C44040  *ALTDSD  *     000B8 00\n         DC    C'ALTER   '             C1D3E3C5D9404040  *ALTER   *     000C0 00\n         DC    C'ALTFILE '             C1D3E3C6C9D3C540  *ALTFILE *     000C8 00\n         DC    C'ALTGROUP'             C1D3E3C7D9D6E4D7  *ALTGROUP*     000D0 00\n         DC    C'ALTUSER '             C1D3E3E4E2C5D940  *ALTUSER *     000D8 00\n         DC    C'ALU     '             C1D3E44040404040  *ALU     *     000E0 00\n         DC    C'APCACBL '             C1D7C3C1C3C2D340  *APCACBL *     000E8 00\n         DC    C'APCANB  '             C1D7C3C1D5C24040  *APCANB  *     000F0 00\n         DC    C'APCARB  '             C1D7C3C1D9C24040  *APCARB  *     000F8 00\n         DC    C'APCAUB  '             C1D7C3C1E4C24040  *APCAUB  *     00100 00\n         DC    C'APFCMD  '             C1D7C6C3D4C44040  *APFCMD  *     00108 00\n         DC    C'ASUB    '             C1E2E4C240404040  *ASUB    *     00110 00\n         DC    C'AU      '             C1E4404040404040  *AU      *     00118 00\n         DC    C'BACKUP  '             C2C1C3D2E4D74040  *BACKUP  *     00120 00\n         DC    C'BCMDEL  '             C2C3D4C4C5D34040  *BCMDEL  *     00128 00\n         DC    C'BCMDEL1 '             C2C3D4C4C5D3F140  *BCMDEL1 *     00130 00\n         DC    C'BCMNAUTH'             C2C3D4D5C1E4E3C8  *BCMNAUTH*     00138 00\n         DC    C'BCMNUPD '             C2C3D4D5E4D7C440  *BCMNUPD *     00140 00\n         DC    C'BDATA   '             C2C4C1E3C1404040  *BDATA   *     00148 00\n         DC    C'BDMNUPD '             C2C4D4D5E4D7C440  *BDMNUPD *     00150 00\n         DC    C'BINDDATA'             C2C9D5C4C4C1E3C1  *BINDDATA*     00158 00\n         DC    C'BLKUPD  '             C2D3D2E4D7C44040  *BLKUPD  *     00160 00\n         DC    C'BUDDSN  '             C2E4C4C4E2D54040  *BUDDSN  *     00168 00\n         DC    C'BUDGET  '             C2E4C4C7C5E34040  *BUDGET  *     00170 00\n         DC    C'CAE$BQRY'             C3C1C55BC2D8D9E8  *CAE$BQRY*     00178 00\n         DC    C'CANCELU '             C3C1D5C3C5D3E440  *CANCELU *     00180 00\n         DC    C'CAS9UDTN'             C3C1E2F9E4C4E3D5  *CAS9UDTN*     00188 00\n         DC    C'CDELPAIR'             C3C4C5D3D7C1C9D9  *CDELPAIR*     00190 00\n         DC    C'CDMRSTAT'             C3C4D4D9E2E3C1E3  *CDMRSTAT*     00198 00\n         DC    C'CDSCB   '             C3C4E2C3C2404040  *CDSCB   *     001A0 00\n         DC    C'CESTPAIR'             C3C5E2E3D7C1C9D9  *CESTPAIR*     001A8 00\n         DC    C'CHKPT   '             C3C8D2D7E3404040  *CHKPT   *     001B0 00\n         DC    C'CINMX   '             C3C9D5D4E7404040  *CINMX   *     001B8 00\n         DC    C'CLCHECK '             C3D3C3C8C5C3D240  *CLCHECK *     001C0 00\n         DC    C'CNVTCAT '             C3D5E5E3C3C1E340  *CNVTCAT *     001C8 00\n         DC    C'CO      '             C3D6404040404040  *CO      *     001D0 00\n         DC    C'COFDMON '             C3D6C6C4D4D6D540  *COFDMON *     001D8 00\n         DC    C'CONNECT '             C3D6D5D5C5C3E340  *CONNECT *     001E0 00\n         DC    C'CONSPROF'             C3D6D5E2D7D9D6C6  *CONSPROF*     001E8 00\n         DC    C'CPSCB   '             C3D7E2C3C2404040  *CPSCB   *     001F0 00\n         DC    C'CQUERYSG'             C3D8E4C5D9E8E2C7  *CQUERYSG*     001F8 00\n         DC    C'CRECOVER'             C3D9C5C3D6E5C5D9  *CRECOVER*     00200 00\n         DC    C'CSCAN   '             C3E2C3C1D5404040  *CSCAN   *     00208 00\n         DC    C'CSUSPEND'             C3E2E4E2D7C5D5C4  *CSUSPEND*     00210 00\n         DC    C'DCAS    '             C4C3C1E240404040  *DCAS    *     00218 00\n         DC    C'DD      '             C4C4404040404040  *DD      *     00220 00\n         DC    C'DDIR    '             C4C4C9D940404040  *DDIR    *     00228 00\n         DC    C'DEF     '             C4C5C64040404040  *DEF     *     00230 00\n         DC    C'DEFINE  '             C4C5C6C9D5C54040  *DEFINE  *     00238 00\n         DC    C'DEL     '             C4C5D34040404040  *DEL     *     00240 00\n         DC    C'DELDIR  '             C4C5D3C4C9D94040  *DELDIR  *     00248 00\n         DC    C'DELDSD  '             C4C5D3C4E2C44040  *DELDSD  *     00250 00\n         DC    C'DELETE  '             C4C5D3C5E3C54040  *DELETE  *     00258 00\n         DC    C'DELFILE '             C4C5D3C6C9D3C540  *DELFILE *     00260 00\n         DC    C'DELGROUP'             C4C5D3C7D9D6E4D7  *DELGROUP*     00268 00\n         DC    C'DELUSER '             C4C5D3E4E2C5D940  *DELUSER *     00270 00\n         DC    C'DF      '             C4C6404040404040  *DF      *     00278 00\n         DC    C'DG      '             C4C7404040404040  *DG      *     00280 00\n         DC    C'DITTO   '             C4C9E3E3D6404040  *DITTO   *     00288 00\n         DC    C'DITTOA  '             C4C9E3E3D6C14040  *DITTOA  *     00290 00\n         DC    C'DITTOU  '             C4C9E3E3D6E44040  *DITTOU  *     00298 00\n         DC    C'DMRSHR  '             C4D4D9E2C8D94040  *DMRSHR  *     002A0 00\n         DC    C'DRI     '             C4D9C94040404040  *DRI     *     002A8 00\n         DC    C'DU      '             C4E4404040404040  *DU      *     002B0 00\n         DC    C'ERWMAUTH'             C5D9E6D4C1E4E3C8  *ERWMAUTH*     002B8 00\n         DC    C'EX      '             C5E7404040404040  *EX      *     002C0 00\n         DC    C'EXP     '             C5E7D74040404040  *EXP     *     002C8 00\n         DC    C'EXPORT  '             C5E7D7D6D9E34040  *EXPORT  *     002D0 00\n         DC    C'EYU9XENF'             C5E8E4F9E7C5D5C6  *EYU9XENF*     002D8 00\n         DC    C'EZAZSSI '             C5E9C1E9E2E2C940  *EZAZSSI *     002E0 00\n         DC    C'EZBREINI'             C5E9C2D9C5C9D5C9  *EZBREINI*     002E8 00\n         DC    C'EZBTNINI'             C5E9C2E3D5C9D5C9  *EZBTNINI*     002F0 00\n         DC    C'FCESTABL'             C6C3C5E2E3C1C2D3  *FCESTABL*     002F8 00\n         DC    C'FCQUERY '             C6C3D8E4C5D9E840  *FCQUERY *     00300 00\n         DC    C'FCWITHDR'             C6C3E6C9E3C8C4D9  *FCWITHDR*     00308 00\n         DC    C'FTPD    '             C6E3D7C440404040  *FTPD    *     00310 00\n         DC    C'FTPDNS  '             C6E3D7C4D5E24040  *FTPDNS  *     00318 00\n         DC    C'GJTRUCBS'             C7D1E3D9E4C3C2E2  *GJTRUCBS*     00320 00\n         DC    C'IEBCOPY '             C9C5C2C3D6D7E840  *IEBCOPY *     00328 00\n         DC    C'IKJEHDSF'             C9D2D1C5C8C4E2C6  *IKJEHDSF*     00330 00\n         DC    C'IKJEHDS1'             C9D2D1C5C8C4E2F1  *IKJEHDS1*     00338 00\n         DC    C'IKJPRMLB'             C9D2D1D7D9D4D3C2  *IKJPRMLB*     00340 00\n         DC    C'IM      '             C9D4404040404040  *IM      *     00348 00\n         DC    C'IMP     '             C9D4D74040404040  *IMP     *     00350 00\n         DC    C'IMPORT  '             C9D4D7D6D9E34040  *IMPORT  *     00358 00\n         DC    C'IOBSNMP '             C9D6C2E2D5D4D740  *IOBSNMP *     00360 00\n         DC    C'IQIEXPN '             C9D8C9C5E7D7D540  *IQIEXPN *     00368 00\n         DC    C'IQIMAIN '             C9D8C9D4C1C9D540  *IQIMAIN *     00370 00\n         DC    C'IQIQUERY'             C9D8C9D8E4C5D9E8  *IQIQUERY*     00378 00\n         DC    C'IQIQUIT '             C9D8C9D8E4C9E340  *IQIQUIT *     00380 00\n         DC    C'IRRDPI00'             C9D9D9C4D7C9F0F0  *IRRDPI00*     00388 00\n         DC    C'ISPICP  '             C9E2D7C9C3D74040  *ISPICP  *     00390 00\n         DC    C'ISRPCP  '             C9E2D9D7C3D74040  *ISRPCP  *     00398 00\n         DC    C'LBADV   '             D3C2C1C4E5404040  *LBADV   *     003A0 00\n         DC    C'LBAGENT '             D3C2C1C7C5D5E340  *LBAGENT *     003A8 00\n         DC    C'LD      '             D3C4404040404040  *LD      *     003B0 00\n         DC    C'LDATA   '             D3C4C1E3C1404040  *LDATA   *     003B8 00\n         DC    C'LDIR    '             D3C4C9D940404040  *LDIR    *     003C0 00\n         DC    C'LDIRECT '             D3C4C9D9C5C3E340  *LDIRECT *     003C8 00\n         DC    C'LF      '             D3C6404040404040  *LF      *     003D0 00\n         DC    C'LFILE   '             D3C6C9D3C5404040  *LFILE   *     003D8 00\n         DC    C'LG      '             D3C7404040404040  *LG      *     003E0 00\n         DC    C'LISTB   '             D3C9E2E3C2404040  *LISTB   *     003E8 00\n         DC    C'LISTBC  '             D3C9E2E3C2C34040  *LISTBC  *     003F0 00\n         DC    C'LISTD   '             D3C9E2E3C4404040  *LISTD   *     003F8 00\n         DC    C'LISTDATA'             D3C9E2E3C4C1E3C1  *LISTDATA*     00400 00\n         DC    C'LISTDS  '             D3C9E2E3C4E24040  *LISTDS  *     00408 00\n         DC    C'LISTDSD '             D3C9E2E3C4E2C440  *LISTDSD *     00410 00\n         DC    C'LISTGRP '             D3C9E2E3C7D9D740  *LISTGRP *     00418 00\n         DC    C'LISTUSER'             D3C9E2E3E4E2C5D9  *LISTUSER*     00420 00\n         DC    C'LMRKTSO '             D3D4D9D2E3E2D640  *LMRKTSO *     00428 00\n         DC    C'LOCKTERM'             D3D6C3D2E3C5D9D4  *LOCKTERM*     00430 00\n         DC    C'LOOK    '             D3D6D6D240404040  *LOOK    *     00438 00\n         DC    C'LPQ     '             D3D7D84040404040  *LPQ     *     00440 00\n         DC    C'LPR     '             D3D7D94040404040  *LPR     *     00448 00\n         DC    C'LPRM    '             D3D7D9D440404040  *LPRM    *     00450 00\n         DC    C'LPROC   '             D3D7D9D6C3404040  *LPROC   *     00458 00\n         DC    C'LSLT    '             D3E2D3E340404040  *LSLT    *     00460 00\n         DC    C'LU      '             D3E4404040404040  *LU      *     00468 00\n         DC    C'MAKEUSER'             D4C1D2C5E4E2C5D9  *MAKEUSER*     00470 00\n         DC    C'MIMTSO  '             D4C9D4E3E2D64040  *MIMTSO  *     00478 00\n         DC    C'MODDVIPA'             D4D6C4C4E5C9D7C1  *MODDVIPA*     00480 00\n         DC    C'MU      '             D4E4404040404040  *MU      *     00488 00\n         DC    C'MVPMAIN '             D4E5D7D4C1C9D540  *MVPMAIN *     00490 00\n         DC    C'MVPXDISP'             D4E5D7E7C4C9E2D7  *MVPXDISP*     00498 00\n         DC    C'MVSCPCMD'             D4E5E2C3D7C3D4C4  *MVSCPCMD*     004A0 00\n         DC    C'NAMEDXFR'             D5C1D4C5C4E7C6D9  *NAMEDXFR*     004A8 00\n         DC    C'NAMED4  '             D5C1D4C5C4F44040  *NAMED4  *     004B0 00\n         DC    C'NDVRC1  '             D5C4E5D9C3F14040  *NDVRC1  *     004B8 00\n         DC    C'NETSTAT '             D5C5E3E2E3C1E340  *NETSTAT *     004C0 00\n         DC    C'NSUPDATE'             D5E2E4D7C4C1E3C5  *NSUPDATE*     004C8 00\n         DC    C'NSUPDAT4'             D5E2E4D7C4C1E3F4  *NSUPDAT4*     004D0 00\n         DC    C'NYPPW   '             D5E8D7D7E6404040  *NYPPW   *     004D8 00\n         DC    C'OC      '             D6C3404040404040  *OC      *     004E0 00\n         DC    C'OMPROUTE'             D6D4D7D9D6E4E3C5  *OMPROUTE*     004E8 00\n         DC    C'OP      '             D6D7404040404040  *OP      *     004F0 00\n         DC    C'OPER    '             D6D7C5D940404040  *OPER    *     004F8 00\n         DC    C'OPERATOR'             D6D7C5D9C1E3D6D9  *OPERATOR*     00500 00\n         DC    C'OPINFO  '             D6D7C9D5C6D64040  *OPINFO  *     00508 00\n         DC    C'OPING   '             D6D7C9D5C7404040  *OPING   *     00510 00\n         DC    C'OPSCMD  '             D6D7E2C3D4C44040  *OPSCMD  *     00518 00\n         DC    C'OPSCONSL'             D6D7E2C3D6D5E2D3  *OPSCONSL*     00520 00\n         DC    C'OPSOSCMD'             D6D7E2D6E2C3D4C4  *OPSOSCMD*     00528 00\n         DC    C'OPSPARM '             D6D7E2D7C1D9D440  *OPSPARM *     00530 00\n         DC    C'OPSREPLY'             D6D7E2D9C5D7D3E8  *OPSREPLY*     00538 00\n         DC    C'OPSTAT  '             D6D7E2E3C1E34040  *OPSTAT  *     00540 00\n         DC    C'OPSWTO  '             D6D7E2E6E3D64040  *OPSWTO  *     00548 00\n         DC    C'OSNMPD  '             D6E2D5D4D7C44040  *OSNMPD  *     00550 00\n         DC    C'OTRACERT'             D6E3D9C1C3C5D9E3  *OTRACERT*     00558 00\n         DC    C'PACKRAT '             D7C1C3D2D9C1E340  *PACKRAT *     00560 00\n         DC    C'PARMLIB '             D7C1D9D4D3C9C240  *PARMLIB *     00568 00\n         DC    C'PASSWORD'             D7C1E2E2E6D6D9C4  *PASSWORD*     00570 00\n         DC    C'PDIR    '             D7C4C9D940404040  *PDIR    *     00578 00\n         DC    C'PDSCLEAN'             D7C4E2C3D3C5C1D5  *PDSCLEAN*     00580 00\n         DC    C'PDSEAUTH'             D7C4E2C5C1E4E3C8  *PDSEAUTH*     00588 00\n         DC    C'PE      '             D7C5404040404040  *PE      *     00590 00\n         DC    C'PERMDIR '             D7C5D9D4C4C9D940  *PERMDIR *     00598 00\n         DC    C'PERMFILE'             D7C5D9D4C6C9D3C5  *PERMFILE*     005A0 00\n         DC    C'PERMIT  '             D7C5D9D4C9E34040  *PERMIT  *     005A8 00\n         DC    C'PF      '             D7C6404040404040  *PF      *     005B0 00\n         DC    C'PHRASE  '             D7C8D9C1E2C54040  *PHRASE  *     005B8 00\n         DC    C'PING    '             D7C9D5C740404040  *PING    *     005C0 00\n         DC    C'POPPER  '             D7D6D7D7C5D94040  *POPPER  *     005C8 00\n         DC    C'PRINT   '             D7D9C9D5E3404040  *PRINT   *     005D0 00\n         DC    C'PW      '             D7E6404040404040  *PW      *     005D8 00\n         DC    C'Q       '             D840404040404040  *Q       *     005E0 00\n         DC    C'QUEUE   '             D8E4C5E4C5404040  *QUEUE   *     005E8 00\n         DC    C'Q522    '             D8F5F2F240404040  *Q522    *     005F0 00\n         DC    C'RACDCERT'             D9C1C3C4C3C5D9E3  *RACDCERT*     005F8 00\n         DC    C'RACFSIM '             D9C1C3C6E2C9D440  *RACFSIM *     00600 00\n         DC    C'RACLINK '             D9C1C3D3C9D5D240  *RACLINK *     00608 00\n         DC    C'RACONVRT'             D9C1C3D6D5E5D9E3  *RACONVRT*     00610 00\n         DC    C'RACPRIV '             D9C1C3D7D9C9E540  *RACPRIV *     00618 00\n         DC    C'RALT    '             D9C1D3E340404040  *RALT    *     00620 00\n         DC    C'RALTER  '             D9C1D3E3C5D94040  *RALTER  *     00628 00\n         DC    C'RDEF    '             D9C4C5C640404040  *RDEF    *     00630 00\n         DC    C'RDEFINE '             D9C4C5C6C9D5C540  *RDEFINE *     00638 00\n         DC    C'RDEL    '             D9C4C5D340404040  *RDEL    *     00640 00\n         DC    C'RDELETE '             D9C4C5D3C5E3C540  *RDELETE *     00648 00\n         DC    C'RE      '             D9C5404040404040  *RE      *     00650 00\n         DC    C'RECEIVE '             D9C5C3C5C9E5C540  *RECEIVE *     00658 00\n         DC    C'RELOGON '             D9C5D3D6C7D6D540  *RELOGON *     00660 00\n         DC    C'REMOVE  '             D9C5D4D6E5C54040  *REMOVE  *     00668 00\n         DC    C'REPRO   '             D9C5D7D9D6404040  *REPRO   *     00670 00\n         DC    C'RESOLVE '             D9C5E2D6D3E5C540  *RESOLVE *     00678 00\n         DC    C'REVIEW  '             D9C5E5C9C5E64040  *REVIEW  *     00680 00\n         DC    C'REVVSAM '             D9C5E5E5E2C1D440  *REVVSAM *     00688 00\n         DC    C'REXCPCMD'             D9C5E7C3D7C3D4C4  *REXCPCMD*     00690 00\n         DC    C'RL      '             D9D3404040404040  *RL      *     00698 00\n         DC    C'RLIST   '             D9D3C9E2E3404040  *RLIST   *     006A0 00\n         DC    C'RLOAD   '             D9D3D6C1C4404040  *RLOAD   *     006A8 00\n         DC    C'RLOADA  '             D9D3D6C1C4C14040  *RLOADA  *     006B0 00\n         DC    C'RMM     '             D9D4D44040404040  *RMM     *     006B8 00\n         DC    C'RPF     '             D9D7C64040404040  *RPF     *     006C0 00\n         DC    C'RPFE    '             D9D7C6C540404040  *RPFE    *     006C8 00\n         DC    C'RSH     '             D9E2C84040404040  *RSH     *     006D0 00\n         DC    C'RSHD    '             D9E2C8C440404040  *RSHD    *     006D8 00\n         DC    C'RVARY   '             D9E5C1D9E8404040  *RVARY   *     006E0 00\n         DC    C'SAMENDM '             E2C1D4C5D5C4D440  *SAMENDM *     006E8 00\n         DC    C'SDSF    '             E2C4E2C640404040  *SDSF    *     006F0 00\n         DC    C'SE      '             E2C5404040404040  *SE      *     006F8 00\n         DC    C'SEARCH  '             E2C5C1D9C3C84040  *SEARCH  *     00700 00\n         DC    C'SECURE  '             E2C5C3E4D9C54040  *SECURE  *     00708 00\n         DC    C'SEND    '             E2C5D5C440404040  *SEND    *     00710 00\n         DC    C'SETC    '             E2C5E3C340404040  *SETC    *     00718 00\n         DC    C'SETCACHE'             E2C5E3C3C1C3C8C5  *SETCACHE*     00720 00\n         DC    C'SETPASSW'             E2C5E3D7C1E2E2E6  *SETPASSW*     00728 00\n         DC    C'SETPW   '             E2C5E3D7E6404040  *SETPW   *     00730 00\n         DC    C'SETPW2  '             E2C5E3D7E6F24040  *SETPW2  *     00738 00\n         DC    C'SETR    '             E2C5E3D940404040  *SETR    *     00740 00\n         DC    C'SETROPTS'             E2C5E3D9D6D7E3E2  *SETROPTS*     00748 00\n         DC    C'SETUSER '             E2C5E3E4E2C5D940  *SETUSER *     00750 00\n         DC    C'SHCDS   '             E2C8C3C4E2404040  *SHCDS   *     00758 00\n         DC    C'SM      '             E2D4404040404040  *SM      *     00760 00\n         DC    C'SMTP    '             E2D4E3D740404040  *SMTP    *     00768 00\n         DC    C'SNTPD   '             E2D5E3D7C4404040  *SNTPD   *     00770 00\n         DC    C'SPACE   '             E2D7C1C3C5404040  *SPACE   *     00778 00\n         DC    C'SPY     '             E2D7E84040404040  *SPY     *     00780 00\n         DC    C'SR      '             E2D9404040404040  *SR      *     00788 00\n         DC    C'SRDIR   '             E2D9C4C9D9404040  *SRDIR   *     00790 00\n         DC    C'SRF     '             E2D9C64040404040  *SRF     *     00798 00\n         DC    C'SRFILE  '             E2D9C6C9D3C54040  *SRFILE  *     007A0 00\n         DC    C'SRSTAT  '             E2D9E2E3C1E34040  *SRSTAT  *     007A8 00\n         DC    C'SU      '             E2E4404040404040  *SU      *     007B0 00\n         DC    C'SYNC    '             E2E8D5C340404040  *SYNC    *     007B8 00\n         DC    C'SYSPROG '             E2E8E2D7D9D6C740  *SYSPROG *     007C0 00\n         DC    C'TEAEXTSO'             E3C5C1C5E7E3E2D6  *TEAEXTSO*     007C8 00\n         DC    C'TERM    '             E3C5D9D440404040  *TERM    *     007D0 00\n         DC    C'TERMINAL'             E3C5D9D4C9D5C1D3  *TERMINAL*     007D8 00\n         DC    C'TESTA   '             E3C5E2E3C1404040  *TESTA   *     007E0 00\n         DC    C'TESTAUTH'             E3C5E2E3C1E4E3C8  *TESTAUTH*     007E8 00\n         DC    C'TMONCICS'             E3D4D6D5C3C9C3E2  *TMONCICS*     007F0 00\n         DC    C'TMONDB2 '             E3D4D6D5C4C2F240  *TMONDB2 *     007F8 00\n         DC    C'TMONIMS '             E3D4D6D5C9D4E240  *TMONIMS *     00800 00\n         DC    C'TMONMVS '             E3D4D6D5D4E5E240  *TMONMVS *     00808 00\n         DC    C'TRACERTE'             E3D9C1C3C5D9E3C5  *TRACERTE*     00810 00\n         DC    C'TRANSMIT'             E3D9C1D5E2D4C9E3  *TRANSMIT*     00818 00\n         DC    C'TRAPFWD '             E3D9C1D7C6E6C440  *TRAPFWD *     00820 00\n         DC    C'TRMD    '             E3D9D4C440404040  *TRMD    *     00828 00\n         DC    C'TSOENQ  '             E3E2D6C5D5D84040  *TSOENQ  *     00830 00\n         DC    C'TSOSMS  '             E3E2D6E2D4E24040  *TSOSMS  *     00838 00\n         DC    C'UKEYCSA '             E4D2C5E8C3E2C140  *UKEYCSA *     00840 00\n         DC    C'USAT    '             E4E2C1E340404040  *USAT    *     00848 00\n         DC    C'USIT    '             E4E2C9E340404040  *USIT    *     00850 00\n         DC    C'USOT    '             E4E2D6E340404040  *USOT    *     00858 00\n         DC    C'USUT    '             E4E2E4E340404040  *USUT    *     00860 00\n         DC    C'VERIFY  '             E5C5D9C9C6E84040  *VERIFY  *     00868 00\n         DC    C'VFY     '             E5C6E84040404040  *VFY     *     00870 00\n         DC    C'VIEWUSER'             E5C9C5E6E4E2C5D9  *VIEWUSER*     00878 00\n         DC    C'VLFNOTE '             E5D3C6D5D6E3C540  *VLFNOTE *     00880 00\n         DC    C'VMCF    '             E5D4C3C640404040  *VMCF    *     00888 00\n         DC    C'VU      '             E5E4404040404040  *VU      *     00890 00\n         DC    C'WAITT   '             E6C1C9E3E3404040  *WAITT   *     00898 00\n         DC    C'WHOENQ  '             E6C8D6C5D5D84040  *WHOENQ  *     008A0 00\n         DC    C'WSSTAT  '             E6E2E2E3C1E34040  *WSSTAT  *     008A8 00\n         DC    C'XD      '             E7C4404040404040  *XD      *     008B0 00\n         DC    C'XDCCALLA'             E7C4C3C3C1D3D3C1  *XDCCALLA*     008B8 00\n         DC    C'XDCCMDA '             E7C4C3C3D4C4C140  *XDCCMDA *     008C0 00\n         DC    C'XF      '             E7C6404040404040  *XF      *     008C8 00\n         DC    C'XMDSMAIN'             E7D4C4E2D4C1C9D5  *XMDSMAIN*     008D0 00\n         DC    C'XMIT    '             E7D4C9E340404040  *XMIT    *     008D8 00\n         DC    C'XTRCUSER'             E7E3D9C3E4E2C5D9  *XTRCUSER*     008E0 00\n         DC    C'XU      '             E7E4404040404040  *XU      *     008E8 00\n         DC    C'YKCONMSG'             E8D2C3D6D5D4E2C7  *YKCONMSG*     008F0 00\n         DC    C'ZAP     '             E9C1D74040404040  *ZAP     *     008F8 00\n         DC    C'ZAP$    '             E9C1D75B40404040  *ZAP$    *     00900 00\n         DC    C'ZAPV    '             E9C1D7E540404040  *ZAPV    *     00908 00\n         DC    C'ZAPLWA  '             E9C1D7D3E6C14040  *ZAPLWA  *     00910 00\n         DC    C'TSUB    '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\nIKJEFTE8 CSECT                                                          00000 00\n         DC    C'IKJEFTE8'             C9D2D1C5C6E3C5F8  *IKJEFTE8*     00000 00\n         DC    C'85.092  '             F8F54BF0F9F24040  *85.092  *     00008 00\n         ENTRY APFPTABL                                                 00010 00\nAPFPTABL DC    C'ADRDSSU '             C1C4D9C4E2E2E440  *ADRDSSU *     00010 00\n         DC    C'ALPAUTH '             C1D3D7C1E4E3C840  *ALPAUTH *     00018 00\n         DC    C'APCACBL '             C1D7C3C1C3C2D340  *APCACBL *     00020 00\n         DC    C'APCANB  '             C1D7C3C1D5C24040  *APCANB  *     00028 00\n         DC    C'APCARB  '             C1D7C3C1D9C24040  *APCARB  *     00030 00\n         DC    C'APCAUB  '             C1D7C3C1E4C24040  *APCAUB  *     00038 00\n         DC    C'APFPGM  '             C1D7C6D7C7D44040  *APFPGM  *     00040 00\n         DC    C'ARMAUTH '             C1D9D4C1E4E3C840  *ARMAUTH *     00048 00\n         DC    C'CONSPROF'             C3D6D5E2D7D9D6C6  *CONSPROF*     00050 00\n         DC    C'CSFDAUTH'             C3E2C6C4C1E4E3C8  *CSFDAUTH*     00058 00\n         DC    C'CSFDPKDS'             C3E2C6C4D7D2C4E2  *CSFDPKDS*     00060 00\n         DC    C'CTMAES  '             C3E3D4C1C5E24040  *CTMAES  *     00068 00\n         DC    C'CTMDFL  '             C3E3D4C4C6D34040  *CTMDFL  *     00070 00\n         DC    C'CTMRUN  '             C3E3D4D9E4D54040  *CTMRUN  *     00078 00\n         DC    C'CTRCTR  '             C3E3D9C3E3D94040  *CTRCTR  *     00080 00\n         DC    C'CTRSPL  '             C3E3D9E2D7D34040  *CTRSPL  *     00088 00\n         DC    C'EMCICS61'             C5D4C3C9C3E2F6F1  *EMCICS61*     00090 00\n         DC    C'EMCSNAP '             C5D4C3E2D5C1D740  *EMCSNAP *     00098 00\n         DC    C'EMCTF   '             C5D4C3E3C6404040  *EMCTF   *     000A0 00\n         DC    C'EMCTFU  '             C5D4C3E3C6E44040  *EMCTFU  *     000A8 00\n         DC    C'EQQMINOR'             C5D8D8D4C9D5D6D9  *EQQMINOR*     000B0 00\n         DC    C'ERWMAUTH'             C5D9E6D4C1E4E3C8  *ERWMAUTH*     000B8 00\n         DC    C'FDRABR  '             C6C4D9C1C2D94040  *FDRABR  *     000C0 00\n         DC    C'FDRABRUT'             C6C4D9C1C2D9E4E3  *FDRABRUT*     000C8 00\n         DC    C'FDRCPK  '             C6C4D9C3D7D24040  *FDRCPK  *     000D0 00\n         DC    C'FDREPORT'             C6C4D9C5D7D6D9E3  *FDREPORT*     000D8 00\n         DC    C'FDRMONA '             C6C4D9D4D6D5C140  *FDRMONA *     000E0 00\n         DC    C'FDRPASA '             C6C4D9D7C1E2C140  *FDRPASA *     000E8 00\n         DC    C'FDRQUERY'             C6C4D9D8E4C5D9E8  *FDRQUERY*     000F0 00\n         DC    C'FDRSRSA '             C6C4D9E2D9E2C140  *FDRSRSA *     000F8 00\n         DC    C'GIMSMP  '             C7C9D4E2D4D74040  *GIMSMP  *     00100 00\n         DC    C'GJTRUCBS'             C7D1E3D9E4C3C2E2  *GJTRUCBS*     00108 00\n         DC    C'ICADCFGS'             C9C3C1C4C3C6C7E2  *ICADCFGS*     00110 00\n         DC    C'ICADCT  '             C9C3C1C4C3E34040  *ICADCT  *     00118 00\n         DC    C'ICADDCT '             C9C3C1C4C4C3E340  *ICADDCT *     00120 00\n         DC    C'ICADFTPD'             C9C3C1C4C6E3D7C4  *ICADFTPD*     00128 00\n         DC    C'ICADIKED'             C9C3C1C4C9D2C5C4  *ICADIKED*     00130 00\n         DC    C'ICADPFTP'             C9C3C1C4D7C6E3D7  *ICADPFTP*     00138 00\n         DC    C'ICADSLOG'             C9C3C1C4E2D3D6C7  *ICADSLOG*     00140 00\n         DC    C'ICADSOCK'             C9C3C1C4E2D6C3D2  *ICADSOCK*     00148 00\n         DC    C'ICADSOXD'             C9C3C1C4E2D6E7C4  *ICADSOXD*     00150 00\n         DC    C'ICADSTAK'             C9C3C1C4E2E3C1D2  *ICADSTAK*     00158 00\n         DC    C'ICHDSM00'             C9C3C8C4E2D4F0F0  *ICHDSM00*     00160 00\n         DC    C'ICHUEX00'             C9C3C8E4C5E7F0F0  *ICHUEX00*     00168 00\n         DC    C'ICHUT100'             C9C3C8E4E3F1F0F0  *ICHUT100*     00170 00\n         DC    C'ICHUT200'             C9C3C8E4E3F2F0F0  *ICHUT200*     00178 00\n         DC    C'ICHUT400'             C9C3C8E4E3F4F0F0  *ICHUT400*     00180 00\n         DC    C'IDCAMS  '             C9C4C3C1D4E24040  *IDCAMS  *     00188 00\n         DC    C'IEBCOPY '             C9C5C2C3D6D7E840  *IEBCOPY *     00190 00\n         DC    C'IKJEFF76'             C9D2D1C5C6C6F7F6  *IKJEFF76*     00198 00\n         DC    C'IOEAGFMT'             C9D6C5C1C7C6D4E3  *IOEAGFMT*     001A0 00\n         DC    C'IOEAGSLV'             C9D6C5C1C7E2D3E5  *IOEAGSLV*     001A8 00\n         DC    C'IOEBAK  '             C9D6C5C2C1D24040  *IOEBAK  *     001B0 00\n         DC    C'IOEBOS  '             C9D6C5C2D6E24040  *IOEBOS  *     001B8 00\n         DC    C'IOECM   '             C9D6C5C3D4404040  *IOECM   *     001C0 00\n         DC    C'IOEDCEER'             C9D6C5C4C3C5C5D9  *IOEDCEER*     001C8 00\n         DC    C'IOEDFSXP'             C9D6C5C4C6E2E7D7  *IOEDFSXP*     001D0 00\n         DC    C'IOEFTS  '             C9D6C5C6E3E24040  *IOEFTS  *     001D8 00\n         DC    C'IOEGRWAG'             C9D6C5C7D9E6C1C7  *IOEGRWAG*     001E0 00\n         DC    C'IOEMAPID'             C9D6C5D4C1D7C9C4  *IOEMAPID*     001E8 00\n         DC    C'IOENEWAG'             C9D6C5D5C5E6C1C7  *IOENEWAG*     001F0 00\n         DC    C'IOESALVG'             C9D6C5E2C1D3E5C7  *IOESALVG*     001F8 00\n         DC    C'IOESCOUT'             C9D6C5E2C3D6E4E3  *IOESCOUT*     00200 00\n         DC    C'IOESMBPW'             C9D6C5E2D4C2D7E6  *IOESMBPW*     00208 00\n         DC    C'IOEUDBG '             C9D6C5E4C4C2C740  *IOEUDBG *     00210 00\n         DC    C'IOEZADM '             C9D6C5E9C1C4D440  *IOEZADM *     00218 00\n         DC    C'IRMAUTH '             C9D9D4C1E4E3C840  *IRMAUTH *     00220 00\n         DC    C'IRRDIP00'             C9D9D9C4C9D7F0F0  *IRRDIP00*     00228 00\n         DC    C'IRRDPI00'             C9D9D9C4D7C9F0F0  *IRRDPI00*     00230 00\n         DC    C'IRRDSC00'             C9D9D9C4E2C3F0F0  *IRRDSC00*     00238 00\n         DC    C'IRRUT100'             C9D9D9E4E3F1F0F0  *IRRUT100*     00240 00\n         DC    C'IRRUT200'             C9D9D9E4E3F2F0F0  *IRRUT200*     00248 00\n         DC    C'IRRUT400'             C9D9D9E4E3F4F0F0  *IRRUT400*     00250 00\n         DC    C'ITPENTER'             C9E3D7C5D5E3C5D9  *ITPENTER*     00258 00\n         DC    C'JCLSRB  '             D1C3D3E2D9C24040  *JCLSRB  *     00260 00\n         DC    C'KEPSTCTO'             D2C5D7E2E3C3E3D6  *KEPSTCTO*     00268 00\n         DC    C'KOBROUTR'             D2D6C2D9D6E4E3D9  *KOBROUTR*     00270 00\n         DC    C'KOBSPFAU'             D2D6C2E2D7C6C1E4  *KOBSPFAU*     00278 00\n         DC    C'LOCKTERM'             D3D6C3D2E3C5D9D4  *LOCKTERM*     00280 00\n         DC    C'MIMTSO  '             D4C9D4E3E2D64040  *MIMTSO  *     00288 00\n         DC    C'MVPXDISP'             D4E5D7E7C4C9E2D7  *MVPXDISP*     00290 00\n         DC    C'NDVRC1  '             D5C4E5D9C3F14040  *NDVRC1  *     00298 00\n         DC    C'OBROUTR '             D6C2D9D6E4E3D940  *OBROUTR *     002A0 00\n         DC    C'OBSPFAU '             D6C2E2D7C6C1E440  *OBSPFAU *     002A8 00\n         DC    C'OLDCOPY '             D6D3C4C3D6D7E840  *OLDCOPY *     002B0 00\n         DC    C'OMCICS  '             D6D4C3C9C3E24040  *OMCICS  *     002B8 00\n         DC    C'OMEGAMON'             D6D4C5C7C1D4D6D5  *OMEGAMON*     002C0 00\n         DC    C'OMSPFAU '             D6D4E2D7C6C1E440  *OMSPFAU *     002C8 00\n         DC    C'PDSCLEAN'             D7C4E2C3D3C5C1D5  *PDSCLEAN*     002D0 00\n         DC    C'PDSCLEAR'             D7C4E2C3D3C5C1D9  *PDSCLEAR*     002D8 00\n         DC    C'PDSEAUTH'             D7C4E2C5C1E4E3C8  *PDSEAUTH*     002E0 00\n         DC    C'PDSFAST '             D7C4E2C6C1E2E340  *PDSFAST *     002E8 00\n         DC    C'PING    '             D7C9D5C740404040  *PING    *     002F0 00\n         DC    C'PSIPCTL '             D7E2C9D7C3E3D340  *PSIPCTL *     002F8 00\n         DC    C'RESOLVE '             D9C5E2D6D3E5C540  *RESOLVE *     00300 00\n         DC    C'REVVSAM '             D9C5E5E5E2C1D440  *REVVSAM *     00308 00\n         DC    C'REXCPCMD'             D9C5E7C3D7C3D4C4  *REXCPCMD*     00310 00\n         DC    C'SAMENDM '             E2C1D4C5D5C4D440  *SAMENDM *     00318 00\n         DC    C'SCRAMRE '             E2C3D9C1D4D9C540  *SCRAMRE *     00320 00\n         DC    C'SDSF    '             E2C4E2C640404040  *SDSF    *     00328 00\n         DC    C'SYSPROG '             E2E8E2D7D9D6C740  *SYSPROG *     00330 00\n         DC    C'TESTENQ '             E3C5E2E3C5D5D840  *TESTENQ *     00338 00\n         DC    C'TMONMVS '             E3D4D6D5D4E5E240  *TMONMVS *     00340 00\n         DC    C'TMSIOCAP'             E3D4E2C9D6C3C1D7  *TMSIOCAP*     00348 00\n         DC    C'TMSSCR  '             E3D4E2E2C3D94040  *TMSSCR  *     00350 00\n         DC    C'TSOENQ  '             E3E2D6C5D5D84040  *TSOENQ  *     00358 00\n         DC    C'TSOSPA  '             E3E2D6E2D7C14040  *TSOSPA  *     00360 00\n         DC    C'WHOENQ  '             E6C8D6C5D5D84040  *WHOENQ  *     00368 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\nIKJEFTNS CSECT                                                          00000 00\n         DC    C'IKJEFTNS'             C9D2D1C5C6E3D5E2  *IKJEFTNS*     00000 00\n         DC    C'76.033  '             F7F64BF0F3F34040  *76.033  *     00008 00\n         ENTRY NSCPTABL                                                 00010 00\nNSCPTABL DC    X'0008'                 0008              *..*           00010 00\n         DC    C'OPERATOR'             D6D7C5D9C1E3D6D9  *OPERATOR*     00012 00\n         DC    X'0004'                 0004              *..*           0001A 00\n         DC    C'OPER    '             D6D7C5D940404040  *OPER    *     0001C 00\n         DC    X'0008'                 0008              *..*           00024 00\n         DC    C'TERMINAL'             E3C5D9D4C9D5C1D3  *TERMINAL*     00026 00\n         DC    X'0004'                 0004              *..*           0002E 00\n         DC    C'TERM    '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'0000'                 0000              *..*           00038 00\n         DC    C'        '             E3C5D9D440404040  *TERM    *     00030 00\n         DC    X'FFFF'                 0000              *..*           00038 00\nIKJEFTAP CSECT                                                          00000 00\n         DC    C'IKJEFTAP'             C9D2D1C5C6E3C1D7  *IKJEFTAP*     00000 00\n         DC    C'86.120  '             F8F64BF1F2F04040  *86.120  *     00008 00\n         ENTRY APFTTABL                                                 00010 00\nAPFTTABL DC    C'$$      '             5B5B404040404040  *$$      *     00010 00\n         DC    C'AAATHCHK'             C1C1C1E3C8C3C8D2  *AAATHCHK*     00018 00\n         DC    C'AACMD001'             C1C1C3D4C4F0F0F1  *AACMD001*     00020 00\n         DC    C'AACMD002'             C1C1C3D4C4F0F0F2  *AACMD002*     00028 00\n         DC    C'AACMD003'             C1C1C3D4C4F0F0F3  *AACMD003*     00030 00\n         DC    C'AACMD004'             C1C1C3D4C4F0F0F4  *AACMD004*     00038 00\n         DC    C'AACMD005'             C1C1C3D4C4F0F0F5  *AACMD005*     00040 00\n         DC    C'AACMD006'             C1C1C3D4C4F0F0F6  *AACMD006*     00048 00\n         DC    C'AACMD007'             C1C1C3D4C4F0F0F7  *AACMD007*     00050 00\n         DC    C'AACMD008'             C1C1C3D4C4F0F0F8  *AACMD008*     00058 00\n         DC    C'AACMD009'             C1C1C3D4C4F0F0F9  *AACMD009*     00060 00\n         DC    C'AACMD014'             C1C1C3D4C4F0F1F4  *AACMD014*     00068 00\n         DC    C'AACMD015'             C1C1C3D4C4F0F1F5  *AACMD015*     00070 00\n         DC    C'AACNG001'             C1C1C3D5C7F0F0F1  *AACNG001*     00078 00\n         DC    C'AACNG002'             C1C1C3D5C7F0F0F2  *AACNG002*     00080 00\n         DC    C'AACNG003'             C1C1C3D5C7F0F0F3  *AACNG003*     00088 00\n         DC    C'AAGRPUSR'             C1C1C7D9D7E4E2D9  *AAGRPUSR*     00090 00\n         DC    C'AAPSWCHK'             C1C1D7E2E6C3C8D2  *AAPSWCHK*     00098 00\n         DC    C'AAREP011'             C1C1D9C5D7F0F1F1  *AAREP011*     000A0 00\n         DC    C'APFCMD  '             C1D7C6C3D4C44040  *APFCMD  *     000A8 00\n         DC    C'BACKUP  '             C2C1C3D2E4D74040  *BACKUP  *     000B0 00\n         DC    C'BBSDTCPA'             C2C2E2C4E3C3D7C1  *BBSDTCPA*     000B8 00\n         DC    C'BCMNUPD '             C2C3D4D5E4D7C440  *BCMNUPD *     000C0 00\n         DC    C'BDMNUPD '             C2C4D4D5E4D7C440  *BDMNUPD *     000C8 00\n         DC    C'CADU4804'             C3C1C4E4F4F8F0F4  *CADU4804*     000D0 00\n         DC    C'CADU4805'             C3C1C4E4F4F8F0F5  *CADU4805*     000D8 00\n         DC    C'CAT01IKB'             C3C1E3F0F1C9D2C2  *CAT01IKB*     000E0 00\n         DC    C'CAZ2CTSO'             C3C1E9F2C3E3E2D6  *CAZ2CTSO*     000E8 00\n         DC    C'CDSCB   '             C3C4E2C3C2404040  *CDSCB   *     000F0 00\n         DC    C'CSCCOPY '             C3E2C3C3D6D7E840  *CSCCOPY *     000F8 00\n         DC    C'CSFDAUTH'             C3E2C6C4C1E4E3C8  *CSFDAUTH*     00100 00\n         DC    C'CSFDPKDS'             C3E2C6C4D7D2C4E2  *CSFDPKDS*     00108 00\n         DC    C'EMCICS61'             C5D4C3C9C3E2F6F1  *EMCICS61*     00110 00\n         DC    C'EMCSNAP '             C5D4C3E2D5C1D740  *EMCSNAP *     00118 00\n         DC    C'EMCTF   '             C5D4C3E3C6404040  *EMCTF   *     00120 00\n         DC    C'EMCTFU  '             C5D4C3E3C6E44040  *EMCTFU  *     00128 00\n         DC    C'EOUCCSYM'             C5D6E4C3C3E2E8D4  *EOUCCSYM*     00130 00\n         DC    C'EQQMINOR'             C5D8D8D4C9D5D6D9  *EQQMINOR*     00138 00\n         DC    C'ERWMAUTH'             C5D9E6D4C1E4E3C8  *ERWMAUTH*     00140 00\n         DC    C'EX      '             C5E7404040404040  *EX      *     00148 00\n         DC    C'FDRABR  '             C6C4D9C1C2D94040  *FDRABR  *     00150 00\n         DC    C'FDRABRUT'             C6C4D9C1C2D9E4E3  *FDRABRUT*     00158 00\n         DC    C'FDRCPK  '             C6C4D9C3D7D24040  *FDRCPK  *     00160 00\n         DC    C'FDREPORT'             C6C4D9C5D7D6D9E3  *FDREPORT*     00168 00\n         DC    C'FDRMONA '             C6C4D9D4D6D5C140  *FDRMONA *     00170 00\n         DC    C'FDRPASA '             C6C4D9D7C1E2C140  *FDRPASA *     00178 00\n         DC    C'FDRQUERY'             C6C4D9D8E4C5D9E8  *FDRQUERY*     00180 00\n         DC    C'FDRSRSA '             C6C4D9E2D9E2C140  *FDRSRSA *     00188 00\n         DC    C'GIMSMP  '             C7C9D4E2D4D74040  *GIMSMP  *     00190 00\n         DC    C'GJTRUCBS'             C7D1E3D9E4C3C2E2  *GJTRUCBS*     00198 00\n         DC    C'IAMRECVR'             C9C1D4D9C5C3E5D9  *IAMRECVR*     001A0 00\n         DC    C'ICADCFGS'             C9C3C1C4C3C6C7E2  *ICADCFGS*     001A8 00\n         DC    C'ICADCT  '             C9C3C1C4C3E34040  *ICADCT  *     001B0 00\n         DC    C'ICADDCT '             C9C3C1C4C4C3E340  *ICADDCT *     001B8 00\n         DC    C'ICADFTPD'             C9C3C1C4C6E3D7C4  *ICADFTPD*     001C0 00\n         DC    C'ICADIKED'             C9C3C1C4C9D2C5C4  *ICADIKED*     001C8 00\n         DC    C'ICADPFTP'             C9C3C1C4D7C6E3D7  *ICADPFTP*     001D0 00\n         DC    C'ICADSLOG'             C9C3C1C4E2D3D6C7  *ICADSLOG*     001D8 00\n         DC    C'ICADSOCK'             C9C3C1C4E2D6C3D2  *ICADSOCK*     001E0 00\n         DC    C'ICADSOXD'             C9C3C1C4E2D6E7C4  *ICADSOXD*     001E8 00\n         DC    C'ICADSTAK'             C9C3C1C4E2E3C1D2  *ICADSTAK*     001F0 00\n         DC    C'ICHDSM00'             C9C3C8C4E2D4F0F0  *ICHDSM00*     001F8 00\n         DC    C'ICHUT100'             C9C3C8E4E3F1F0F0  *ICHUT100*     00200 00\n         DC    C'ICHUT200'             C9C3C8E4E3F2F0F0  *ICHUT200*     00208 00\n         DC    C'ICHUT400'             C9C3C8E4E3F4F0F0  *ICHUT400*     00210 00\n         DC    C'ICQASLI0'             C9C3D8C1E2D3C9F0  *ICQASLI0*     00218 00\n         DC    C'IEBCOPY '             C9C5C2C3D6D7E840  *IEBCOPY *     00220 00\n         DC    C'IKJEFF76'             C9D2D1C5C6C6F7F6  *IKJEFF76*     00228 00\n         DC    C'IM      '             C9D4404040404040  *IM      *     00230 00\n         DC    C'IOEAGFMT'             C9D6C5C1C7C6D4E3  *IOEAGFMT*     00238 00\n         DC    C'IOEAGSLV'             C9D6C5C1C7E2D3E5  *IOEAGSLV*     00240 00\n         DC    C'IOEBAK  '             C9D6C5C2C1D24040  *IOEBAK  *     00248 00\n         DC    C'IOEBOS  '             C9D6C5C2D6E24040  *IOEBOS  *     00250 00\n         DC    C'IOECM   '             C9D6C5C3D4404040  *IOECM   *     00258 00\n         DC    C'IOEDCEER'             C9D6C5C4C3C5C5D9  *IOEDCEER*     00260 00\n         DC    C'IOEDFSXP'             C9D6C5C4C6E2E7D7  *IOEDFSXP*     00268 00\n         DC    C'IOEFTS  '             C9D6C5C6E3E24040  *IOEFTS  *     00270 00\n         DC    C'IOEGRWAG'             C9D6C5C7D9E6C1C7  *IOEGRWAG*     00278 00\n         DC    C'IOEMAPID'             C9D6C5D4C1D7C9C4  *IOEMAPID*     00280 00\n         DC    C'IOENEWAG'             C9D6C5D5C5E6C1C7  *IOENEWAG*     00288 00\n         DC    C'IOESALVG'             C9D6C5E2C1D3E5C7  *IOESALVG*     00290 00\n         DC    C'IOESCOUT'             C9D6C5E2C3D6E4E3  *IOESCOUT*     00298 00\n         DC    C'IOEUDBG '             C9D6C5E4C4C2C740  *IOEUDBG *     002A0 00\n         DC    C'IOEZADM '             C9D6C5E9C1C4D440  *IOEZADM *     002A8 00\n         DC    C'IRRDPI00'             C9D9D9C4D7C9F0F0  *IRRDPI00*     002B0 00\n         DC    C'IRRDSC00'             C9D9D9C4E2C3F0F0  *IRRDSC00*     002B8 00\n         DC    C'IRRUT100'             C9D9D9E4E3F1F0F0  *IRRUT100*     002C0 00\n         DC    C'IRRUT200'             C9D9D9E4E3F2F0F0  *IRRUT200*     002C8 00\n         DC    C'IRRUT400'             C9D9D9E4E3F4F0F0  *IRRUT400*     002D0 00\n         DC    C'JCLSRB  '             D1C3D3E2D9C24040  *JCLSRB  *     002D8 00\n         DC    C'LSLT    '             D3E2D3E340404040  *LSLT    *     002E0 00\n         DC    C'MIMTSO  '             D4C9D4E3E2D64040  *MIMTSO  *     002E8 00\n         DC    C'MNAPFPRC'             D4D5C1D7C6D7D9C3  *MNAPFPRC*     002F0 00\n         DC    C'MNCDTPRC'             D4D5C3C4E3D7D9C3  *MNCDTPRC*     002F8 00\n         DC    C'MNCD2PRC'             D4D5C3C4F2D7D9C3  *MNCD2PRC*     00300 00\n         DC    C'MNGRPPRC'             D4D5C7D9D7D7D9C3  *MNGRPPRC*     00308 00\n         DC    C'MNLLTPRC'             D4D5D3D3E3D7D9C3  *MNLLTPRC*     00310 00\n         DC    C'MNLPAPRC'             D4D5D3D7C1D7D9C3  *MNLPAPRC*     00318 00\n         DC    C'MNPPTPRC'             D4D5D7D7E3D7D9C3  *MNPPTPRC*     00320 00\n         DC    C'MNRACPRC'             D4D5D9C1C3D7D9C3  *MNRACPRC*     00328 00\n         DC    C'MNRAUPRC'             D4D5D9C1E4D7D9C3  *MNRAUPRC*     00330 00\n         DC    C'MNRFRPRC'             D4D5D9C6D9D7D9C3  *MNRFRPRC*     00338 00\n         DC    C'MNSMFPRC'             D4D5E2D4C6D7D9C3  *MNSMFPRC*     00340 00\n         DC    C'MNSM4PRC'             D4D5E2D4F4D7D9C3  *MNSM4PRC*     00348 00\n         DC    C'MNSTCPRC'             D4D5E2E3C3D7D9C3  *MNSTCPRC*     00350 00\n         DC    C'MNSVCPRC'             D4D5E2E5C3D7D9C3  *MNSVCPRC*     00358 00\n         DC    C'MXI     '             D4E7C94040404040  *MXI     *     00360 00\n         DC    C'MXITSF  '             D4E7C9E3E2C64040  *MXITSF  *     00368 00\n         DC    C'NDVRC1  '             D5C4E5D9C3F14040  *NDVRC1  *     00370 00\n         DC    C'OBROUTR '             D6C2D9D6E4E3D940  *OBROUTR *     00378 00\n         DC    C'OBSPFAU '             D6C2E2D7C6C1E440  *OBSPFAU *     00380 00\n         DC    C'OLDCOPY '             D6D3C4C3D6D7E840  *OLDCOPY *     00388 00\n         DC    C'OMCICS  '             D6D4C3C9C3E24040  *OMCICS  *     00390 00\n         DC    C'OMEGAMON'             D6D4C5C7C1D4D6D5  *OMEGAMON*     00398 00\n         DC    C'OMSPFAU '             D6D4E2D7C6C1E440  *OMSPFAU *     003A0 00\n         DC    C'PDSCLEAN'             D7C4E2C3D3C5C1D5  *PDSCLEAN*     003A8 00\n         DC    C'PDSEAUTH'             D7C4E2C5C1E4E3C8  *PDSEAUTH*     003B0 00\n         DC    C'PDSFAST '             D7C4E2C6C1E2E340  *PDSFAST *     003B8 00\n         DC    C'PMGLAUTH'             D7D4C7D3C1E4E3C8  *PMGLAUTH*     003C0 00\n         DC    C'PSIPCTL '             D7E2C9D7C3E3D340  *PSIPCTL *     003C8 00\n         DC    C'PTLTSRB '             D7E3D3E3E2D9C240  *PTLTSRB *     003D0 00\n         DC    C'RCFRESET'             D9C3C6D9C5E2C5E3  *RCFRESET*     003D8 00\n         DC    C'REATSF  '             D9C5C1E3E2C64040  *REATSF  *     003E0 00\n         DC    C'SAMENDM '             E2C1D4C5D5C4D440  *SAMENDM *     003E8 00\n         DC    C'TMONMVS '             E3D4D6D5D4E5E240  *TMONMVS *     003F0 00\n         DC    C'TMSIOCAP'             E3D4E2C9D6C3C1D7  *TMSIOCAP*     003F8 00\n         DC    C'TMSSCR  '             E3D4E2E2C3D94040  *TMSSCR  *     00400 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         DC    C'        '                                              00910 00\n         YREGS\n         END\n//LKED.SYSLIN  DD *\n INCLUDE SYSLIBX\n ORDER   IKJEFTE2(P),IKJEFTE8,IKJEFTNS,IKJEFTAP\n MODE    RMODE(24),AMODE(24)\n SETCODE AC(1)\n ENTRY   IKJEFTAP\n ALIAS   IKJEFTAP,IKJEFTE2,IKJEFTE8,IKJEFTNS\n NAME    IKJTABLS(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASUB": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ASUB     TITLE 'ASUB - FILL IN ANY SLOT OF THE INCORE TSO AUTH TABLES'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   Program Name:   ASUB                                              *\n*                                                                     *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized, except for the display   *\n*                   functions.                                        *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized.                      *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n*    Description:   Display an Auth Table entry from the TSO/E \"auth\" *\n*                   program list tables in storage.  Or display the   *\n*                   entire table.  Or replace one entry with a new    *\n*                   program name.  If you are invoking a display      *\n*                   function, then the entire table is shown, unless  *\n*                   you enter a number, and then, only that slot is   *\n*                   shown.  Only tables manufactured from PARMLIB     *\n*                   entries are displayed or changed, not the ones    *\n*                   created from IKJTABLS in LPALIB, or from the      *\n*                   IKJTABLS load module that was present in an       *\n*                   APF-authorized STEPLIB.                           *\n*                                                                     *\n*       Function:   To substitute one new program name in the global  *\n*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n*                   IKJEFTAP, IKJEFTNS, or even to the PLATCMD or     *\n*                   PLATPGM lists, if they exist.  This is done to    *\n*                   any numbered entry of each table.  Or else merely *\n*                   display the contents of the entire table, or the  *\n*                   contents of any particular numbered entry.        *\n*                                                                     *\n*                   Also, a blanking function can be performed on     *\n*                   the last entry of any table, which is usually     *\n*                   blank anyway.  No blanking can be performed on    *\n*                   a slot in the middle of a table, because that     *\n*                   will invalidate all the table entries after the   *\n*                   blanked slot, and it is too dangerous to do,      *\n*                   when done irresponsibly.                          *\n*                                                                     *\n*         Syntax:   ASUB TTA nnn pgmname                              *\n*                                                                     *\n*                   Where TT is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD                           *\n*                   E8 - IKJEFTE8 = AUTHPGM                           *\n*                   AP - IKJEFTAP = AUTHTSF                           *\n*                   NS - IKJEFTNS = NOTBKGND                          *\n*                   PC - FCVE     = PLATCMD                           *\n*                   PP - PPVE     = PLATPGM                           *\n*                                                                     *\n*                   If the action code is B (blank the last           *\n*                   entry), then no program name is required.         *\n*                                                                     *\n*                   If the action code is D (display the last         *\n*                   entry), then no program name is required.         *\n*                   The default action is to display the entire       *\n*                   table, unless a number is entered.  If a          *\n*                   number is present, then only that entry           *\n*                   number is displayed.  If the number is larger     *\n*                   than the number of entries in that particular     *\n*                   table, then an informative error message is       *\n*                   issued, and the program ends with code = 4.       *\n*                                                                     *\n*                   If the action code is R (replace the program      *\n*                   name) then a number (the table entry number)      *\n*                   and a program name are required.  If you want     *\n*                   to blank the last slot, instead of putting a      *\n*                   program name into it, then use action code B.     *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to, and therefore no addition *\n*                   of names can be made.  The condition is reported. *\n*                                                                     *\n*             Note:  If an E2, E8, AP, or NS table which is being     *\n*                    used by the system, did not come from the        *\n*                    IKJTSOxx PARMLIB entry, but it came from the     *\n*                    default IKJTABLS entry in LPALIB, then an        *\n*                    appropriate error message is displayed, and      *\n*                    no action is performed on that table.            *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*                                                                     *\n*    2007/10/21 - 1.0  - Initial version - Got it to work.            *\n*                                                                     *\n*    2009/03/04 - 1.14 - Measure the tables, list the lengths.        *\n*                        Count/display the number of entries and      *\n*                         perceived blanks.  Try to detect the true   *\n*                         end of table in storage, by measuring,      *\n*                         even though (for PARMLIB-created tables)    *\n*                         we have a listed length.                    *\n*                                                                     *\n*    2016/10/30 - 1.15 - Allow a table to validly show question       *\n*                         marks (?) in a table entry.                 *\n*                        So if you want to nullify a table entry      *\n*                         effectively, change the entry to a ?        *\n*                         using the \"xxR\" function.  And \"xxD\"        *\n*                         will show the result accurately.            *\n*                        I don't want to put all the functionality    *\n*                         from TSUB into this program, because this   *\n*                         program affects the whole LPAR, whereas     *\n*                         TSUB only affects the owning TSO id.        *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.  *\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nASUB     CSECT\nASUB     AMODE 31\nASUB     RMODE 24\n         USING *,R15                                                  *  01493\n         B     BEGINN                   Eyecatcher\n         DC    CL8'ASUB  - '\nVERS#    DC    CL10'Ver 1.15'\n         DC    CL1' '\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL6'HLASM '\n         DC    C'&SYSVER'\n         DC    C' '\nBEGINN   DS    0H\n         DROP  R15\n         USING ASUB,R12,R11,R10\n         STM   R14,R12,12(R13)\n         LR    R12,R15                  Set up base registers.\n         ST    R1,SAVEPARM              Save CPPL pointer\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA          Point to new save area               01508\n         ST    R1,8(,R13)           Forward save area chain pointer      01509\n         ST    R13,4(,R1)           Backward save area chain pointer     01510\n         LR    R13,R1               New save area address                01511\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'                                                    01504\n* -----------------------\nINITCON  DS    0H                   Initialize constants\n         MVI   OFFFLAG,X'00'\n         MVI   PLATFLG,X'00'\n         MVI   NSCHFLG,X'00'\n         MVI   LINEB,X'40'\n         MVC   CODEPLAC(2),BLANKS\n         XC    FSTCOUNT,FSTCOUNT\n         XC    FSTNOUNT,FSTNOUNT\n         MVC   FSTFIELD(8),BLANKS\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         XC    SLOTBIN,SLOTBIN\n         MVC   SLOTSAVE,BLANKS\n         MVC   FSTNAME,BLANKS\n         MVI   CMDBCOPY-1,X'00'\n         MVC   CMDBCOPY,CMDBCOPY-1\n* -----------------------\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM         Get the address of the CPPL back\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         LA    R6,0\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n*        B     CONT0               Bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\n         DROP  R2\nCONT0    DS    0H                  Get starting addresses for tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'14'(,R2)       Point to CTLT control block\n         ST    R2,SAVECTLT         Save CTLT address for later use\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'34'(,R2)       Point to PLATCMD pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOFCVE              No. Say so.\n         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.\n         OI    PLATFLG,X'01'       Indicate that FCVE exists.\nTRYPPVE  DS    0H\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'40'(,R2)       Point to PLATPGM pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOPPVE              No. Say so.\n         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.\n         OI    PLATFLG,X'02'       Indicate that PPVE exists.\nTRYPPVEE DS    0H\n* ------\n*    There doesn't seem to be a way to tell from an old INMXPARM\n*    control block itself, that it is the old version.  So we use\n*    the position of the active PARMLIB member name in the TPVT.\n* ------\n         L     R2,SAVETPVT         Load TPVT address back.\n         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?\n         BNE   NEWSYSTM            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\nNEWSYSTM DS    0H\n* ------\n*    We start scanning for PARMs here.\n* ------\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         ST    R3,OFFSETSV\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n*\n* ----  Copy command buffer into pgm's buffer so we can control it.\n*\n         STM   R14,R1,SAVE1401     Now save registers 14 thru 1.\n         XR    R14,R14             Clear R14.\n         LH    R14,0(,R1)          Load full command buffer length.\n         S     R14,=F'5'           Subtract 4 for header, 1 for execute\n         EX    R14,COPYCMDB        Copy command into pgm's area.\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\n         B     GOGOGO              Jump over executed instruction.\nCOPYCMDB MVC   CMDBCOPY(0),4(R1)   <<< Executed >>>\nGOGOGO   DS    0H\n* ----\n         LA    R6,3                Load register for BCT loop.\n* >>>\n         LA    R1,CMDBCOPY         Point to command in our buffer\n         A     R1,OFFSETSV         Add offset, point to subcommands\n         ST    R1,CHARSTRT         Store starting point away\n* >>>\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of function name.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         CLI   0(R7),X'00'         Is this character hex zero?\n         BE    AFTFIRST            Yes, end of command in buffer copy.\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8           Save\n         ST    R6,SAVER6             the\n         ST    R1,SAVER1A              registers\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers\n         CLI   TABCODE+2,C'R'      Replace the entry in the given slot\n         BE    SEEIF0A1\n         CLI   TABCODE+2,C'B'      Blank the last slot\n         BE    SEEIF0A2\n         CLI   TABCODE+2,C'D'      Display contents of last slot\n         BE    SEEIF0A3\n         B     SEEIF000\nSEEIF0A1 DS    0H\n         OI    OFFFLAG,X'01'       Replace an entry\n         B     SEEIF001\nSEEIF0A2 DS    0H\n         OI    OFFFLAG,X'02'       Blank entry in the last slot\n         B     SEEIF001\nSEEIF0A3 DS    0H\n         OI    OFFFLAG,X'04'       Display an entry or entries\n         B     SEEIF001\nSEEIF000 DS    0H                  Wrong function code was entered...\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Program table name + Function code '\n         APUT  LINE,48\n* --- >\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Get out with code = 4.\nSEEIF001 DS    0H                  Which table to change\n         MVC   CODEPLAC(2),TABCODE\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Program table name + Function code '\n         APUT  LINE,48\n* --- >                            Handle each table separately.\n         CLC   TABCODE(2),=C'E2'   Change IKJEFTE2?\n         BE    E2CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'E8'   Change IKJEFTE8?\n         BE    E8CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'AP'   Change IKJEFTAP?\n         BE    APCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PC'   Change PLATCMD?\n         BE    PCCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PP'   Change PLATPGM?\n         BE    PPCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'NS'   Change IKJEFTNS?\n         BE    NSCHANGE            Yes. Branch.\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Invalid code entered.\nEOJ      DS    0H                  END OF JOB                            04216\n         L     R13,4(,R13)                                               04214\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4                            04215\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8                            04215\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJC\nE2CHANGE DS    0H                 Handle the E2 table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'8'(,R4)       POINT TO E2 TABLE\n         L     R4,0(,R4)\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Store start address of table\n         BAL   R9,PRTBLADR        Display table address\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    E2CHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nE2CHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'C'(,R2)       LOAD SIZE OF E2 TABLE\n         ST    R3,TABLELEN        Store listed table size\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOE2               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST E2 TABLE\n* - -\n         XR    R5,R5\n         LH    R5,X'10'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n         BAL   R9,MEASUR08        Measure the table\n         BAL   R9,LISTLNTH        Print lengths of table\n         BAL   R9,PRTNENTR        Print official number of entries\n* - -\n         XR    R5,R5\n         LH    R5,X'12'(,R2)      LOAD SIZE OF E2 ENTRY\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E2CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nE2CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nE8CHANGE DS    0H                 Handle the E8 table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'14'(,R4)      POINT TO E8 TABLE\n         L     R4,0(,R4)\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Store start address of table\n         BAL   R9,PRTBLADR        Display table address\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    E8CHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nE8CHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'18'(,R2)      Size of E8 table\n         ST    R3,TABLELEN        Store listed table size\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOE8               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST E8 TABLE\n* - -\n         XR    R5,R5\n         LH    R5,X'1C'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n         BAL   R9,MEASUR08        Measure the table\n         BAL   R9,LISTLNTH        Print lengths of table\n         BAL   R9,PRTNENTR        Print official number of entries\n* - -\n         XR    R5,R5\n         LH    R5,X'1E'(,R2)      LOAD SIZE OF E8 ENTRY\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E8CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nE8CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nAPCHANGE DS    0H                 Handle the AP table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'2C'(,R4)      POINT TO AP TABLE\n         L     R4,0(,R4)\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Store start address of table\n         BAL   R9,PRTBLADR        Display table address\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    APCHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nAPCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'30'(,R2)      Size of AP table\n         ST    R3,TABLELEN        Store listed table size\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOAP               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST AP TABLE\n* - -\n         XR    R5,R5\n         LH    R5,X'34'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n         BAL   R9,MEASUR08        Measure the table\n         BAL   R9,LISTLNTH        Print lengths of table\n         BAL   R9,PRTNENTR        Print official number of entries\n* - -\n         XR    R5,R5\n         LH    R5,X'36'(,R2)      LOAD SIZE OF AP ENTRY\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    APCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nAPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHANGE DS    0H                 Handle the PC table\n         TM    PLATFLG,X'01'\n         BZ    PCCHAERR\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVEFCVE        Get the PC table address\n         LR    R4,R2              Save it off\n* -- >                            Do Display\n*        MVC   LINE,LINE-1\n         ST    R4,DISPREG\n*        HEX   LINE+13,4,DISPREG\n*        MVC   LINE(8),=C'SAVEFCVE'\n*        APUT  LINE,30\n* -- >\n         L     R3,X'8'(,R4)\n         ST    R3,TABLELEN        Store listed table size\n         AR    R4,R3              POINT JUST PAST PC TABLE\n* - -\n         L     R3,X'C'(,R2)\n         ST    R3,TABLENUM\n         LA    R3,8\n         ST    R3,TABLESIZ\n         L     R3,SAVEFCVE\n         ST    R3,TABLADDR        Store start address of table\n         BAL   R9,PRTBLADR        Display table address\n         BAL   R9,MEASUR08        Measure the table\n         BAL   R9,LISTLNTH        Print lengths of table\n         BAL   R9,PRTNENTR        Print official number of entries\n         LA    R3,X'10'(,R3)\n         ST    R3,TABLSTRT\n* - -\n         LA    R5,8\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PCCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPCCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHAERR DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PC command not valid if no PC table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPCCHAEND DS    0H\n         B     EOJ0\nPPCHANGE DS    0H                 Handle the PP table\n         TM    PLATFLG,X'02'\n         BZ    PPCHAERR\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVEPPVE        Get the PP table address\n         LR    R4,R2              Save it off\n* -- >                            Do Display\n*        MVC   LINE,LINE-1\n         ST    R4,DISPREG\n*        HEX   LINE+13,4,DISPREG\n*        MVC   LINE(8),=C'SAVEPPVE'\n*        APUT  LINE,30\n* -- >\n         L     R3,X'8'(,R4)\n         ST    R3,TABLELEN        Store listed table size\n         AR    R4,R3              POINT JUST PAST PP TABLE\n* - -\n         L     R3,X'C'(,R2)\n         ST    R3,TABLENUM\n         LA    R3,8\n         ST    R3,TABLESIZ\n         L     R3,SAVEPPVE\n         ST    R3,TABLADDR        Store start address of table\n         BAL   R9,PRTBLADR        Display table address\n         BAL   R9,MEASUR08        Measure the table\n         BAL   R9,LISTLNTH        Print lengths of table\n         BAL   R9,PRTNENTR        Print official number of entries\n         LA    R3,X'10'(,R3)\n         ST    R3,TABLSTRT\n* - -\n         LA    R5,8\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PPCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPPCHAERR DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PP command not valid if no PP table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPPCHAEND DS    0H\n         B     EOJ0\nNSCHANGE DS    0H                 Handle the NS table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         OI    NSCHFLG,X'01'      Show SETTMODE we're doing NS\n         LR    R4,R2              Save location of CTLT\n         LA    R4,X'20'(,R4)      Point to NS table address\n         L     R4,0(,R4)          Point to NS table\n* - -\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Store start address of table\n         BAL   R9,PRTBLADR        Display table address\n         L     R1,TABLSTRT\n**-->>\n         CLC   =C' PARMLIB',8(R1) Indicator this table is from PARMLIB.\n         BE    NSCHENTY           It is, then we're cool.\n         BAL   R9,MISSPGM3        It isn't, then send message saying so\n         B     EOJ4               And exit with code = 4.\nNSCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n**-->>\n         LA    R1,X'10'(,R1)\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         L     R3,X'24'(,R2)      Load size of NS table\n         ST    R3,TABLELEN        Store listed table size\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NONS               No. Say so and get out.\n         AR    R4,R3              Point just past NS table\n* - -\n         XR    R5,R5\n         LH    R5,X'28'(,R2)      Load number of entries in table\n         ST    R5,TABLENUM        Store number of entries\n         BAL   R9,MEASUR10        Measure the table\n         BAL   R9,LISTLNTH        Print lengths of table\n         BAL   R9,PRTNENTR        Print official number of entries\n* - -\n         XR    R5,R5              Clear register\n         LH    R5,X'2A'(,R2)      Load size of NS entry\n* - -\n         ST    R5,TABLESIZ        Store size of each entry\n* - -\n         SR    R4,R5              Point to Last Slot\n         ST    R4,SAVLSLOT        Save location of last slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    NSCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nNSCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nNOE2     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E2'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOE8     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E8'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOAP     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'AP'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNONS     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'NS'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOFCVE   DS    0H\n         APUT  =C'No PLATCMD table found',22\n         B     TRYPPVE\nNOPPVE   DS    0H\n         APUT  =C'No PLATPGM table found',22\n         B     TRYPPVEE\n         B     EOJ0\nNOTNUMER DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEN),MESSAGEN\n         MVC   LINE+21(1),0(R7)\n         APUT  LINE,L'MESSAGEN\n         B     EOJ4\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'\nSAVETPVT DC    F'0'\nSAVECTLT DC    F'0'\nSAVEFCVE DC    F'0'\nSAVEPPVE DC    F'0'\nSAVEUPT  DC    F'0'\nSAVEECT  DC    F'0'\nSAVEPSCB DC    F'0'\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'\nFULLFOUR DC    F'4'\nFULLEIGT DC    F'8'\nFULLTWLV DC    F'12'\nSAVE1401 DC    5F'0'                  More for safety\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\nMOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED\nMOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED\nMOVFNUM  MVC   FSTNUME(*-*),0(R3)     EXECUTED\nPACK     PACK  WORKA,0(0,3)          <<< EXECUTED >>>                    06758\n** ---------------------------------------------------------------- **\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNAMES DS    0H\n         ST    R9,SAVER9B\nGETNAMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNAMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         BCTR  R5,0                Subtract one from end count\n         B     GETNAMST            And loop to find first non-blank.\nGETNAMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R6,8                BCT initial quantity - 8 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of program name.\nGETNAMLU DS    0H                  Loop to get entire name\n         CLI   0(R7),X'40'         First blank?\n         BE    GETNAMGT            Yes, got whole name.\n         CLI   0(R7),X'00'         First hex zeros?\n         BE    GETNAMGT            Yes, got whole name.\n         CR    R8,R5               End of command buffer?\n         BNL   GETNAMGT            Yes. Got all we can get.\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R7,1(,R7)           Bump where we are.\n         BCT   R6,GETNAMLU         Loop back.\nGETNAMGT DS    0H\n         ST    R8,SAVER8\n         ST    R8,FSTCOUNT\n         CLC   SAVER8,=F'0'\n         BNE   GETREALY\n         BAL   R9,MISSPGM2\n         B     EOJ4\nGETREALY DS    0H\n         MVC   FSTCHALF(2),FSTCOUNT+2\n         MVC   LINE,LINE-1\n         HEX   LINE,4,SAVER8\n         MVC   LINE+13(17),=C'Length of command'\n         APUT  LINE,30\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTNAME(8),BLANKS\n         EX    R8,MOVFSTN\n         OC    FSTNAME(8),BLANKS\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTNAME\n         MVC   LINE+13(17),=C'New program name '\n         APUT  LINE,30\n* - >\nGETNAMEN DS    0H\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGED  DS    0H                     The \"value was changed\" message.\n         ST    R9,SAVER9C\n         TM    OFFFLAG,X'01'\n         BO    CHANGEDA\n         TM    OFFFLAG,X'02'\n         BO    CHANGEDB\n         TM    OFFFLAG,X'04'\n         BO    CHANGEDD\nCHANGEDA DS    0H\n         MVC   MESSAG3A+5(4),TABENNUM+6\n         MVC   MESSAG3A+13(2),CODEPLAC\n         MVC   MESSAG3A+42(8),FSTNAME\n         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDB DS    0H\n         MVC   MESSAG3B+13(2),CODEPLAC\n         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDD DS    0H\n         TM    OFFFLAG,X'04'\n         BZ    CHANGEDX\n         CLC   SLOTBIN,=F'0'\n         BE    CHANGEND\nCHANGEDX DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Display of Slot contents.     '\n         APUT  LINE,30\nCHANGEND DS    0H\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNAMEPARM DS    0H\n         ST    R9,SAVER9D\n         TM    OFFFLAG,X'02'          Are we blanking?\n         BO    NAMEPEND               Yes. Don't need a name parameter\n         L     R8,SAVER8              Get number of characters used\n         CR    R8,R5                  More than what's left?\n         BNL   NAMEBAD1               Yes. Error.\n         C     R5,=F'3'               Is end bigger than 3?\n         BNH   NAMEBAD1               No. Error.\nNAMEGOOD DS    0H\n         S     R5,=F'3'               Subtract 3 from number till end.\n         BAL   R9,GETNUMES            Get the number of the pgm entry.\n         TM    OFFFLAG,X'04'          Displaying?\n         BO    NAMEPEND               Yes. No names wanted.\n         BAL   R9,GETNAMES            Get the name of pgm to shove in.\n         B     NAMEPEND\nNAMEBAD1 DS    0H\n         TM    OFFFLAG,X'04'          Are we displaying?\n         BO    NAMEPEND\n         BAL   R9,MISSPGM1\n         B     EOJ4\nNAMEPEND DS    0H\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADJNEXTP DS    0H\n         ST    R9,SAVER9E\n         MVC   CHARSTRT,CHARCONT\n         L     R1,CHARSTRT\nSEEIFENX DS    0H\n         CLI   0(R1),X'40'\n         BE    SEEIFENZ\n         LA    R1,1(,R1)\n         ST    R1,CHARSTRT\n         B     SEEIFENX\nSEEIFENZ DS    0H\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9F\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9F\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETTMODE DS    0H\n         ST    R9,SAVER9G\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* -- >\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n* -\n         TM    OFFFLAG,X'03'\n         BZ    ENDKZ\n         TM    NSCHFLG,X'01'\n         BO    TENSLOT\nEIGHSLOT DS    0H\n         L     R3,OURSLOT\n         TM    OFFFLAG,X'01'\n         BZ    BLANKIT\n         CLC   FSTNAME,BLANKS\n         BE    ENDKZ\n         MVC   0(8,R3),FSTNAME\n         B     ENDKZ\nBLANKIT  DS    0H\n         TM    OFFFLAG,X'02'\n         BZ    ENDKZ\n         L     R3,SAVLSLOT\n         MVC   0(8,R3),BLANKS\n         B     ENDKZ\nTENSLOT  DS    0H\n         L     R3,OURSLOT\n         TM    OFFFLAG,X'01'\n         BZ    BLANKTEN\n         CLC   FSTNAME,BLANKS\n         BE    ENDKZ\n         MVC   0(2,R3),FSTCHALF\n         MVC   2(8,R3),FSTNAME\n         B     ENDKZ\nBLANKTEN DS    0H\n         TM    OFFFLAG,X'02'\n         BZ    ENDKZ\n         L     R3,SAVLSLOT\n         MVC   0(2,R3),=X'FFFF'\n         MVC   2(8,R3),BLANKS\n         B     ENDKZ\nENDKZ    DS    0H\n* -\nNZ       MODESET KEY=NZERO\n* -- >      Back to ordinary life ----\n         L     R9,SAVER9G\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nERRORCOD DS    0H\n         ST    R9,SAVER9H\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11L,L'MESSA11L\n         APUT  MESSA11M,L'MESSA11M\n         APUT  MESSA11P,L'MESSA11P\n         APUT  MESSA11A,L'MESSA11A\n         APUT  MESSA11C,L'MESSA11C\n         APUT  MESSA11D,L'MESSA11D\n         APUT  MESSA11F,L'MESSA11F\n         APUT  MESSA11I,L'MESSA11I\n         APUT  MESSA11K,L'MESSA11K\n         APUT  MESSA11J,L'MESSA11J\n         APUT  MESSA11N,L'MESSA11N\n         APUT  MESSA11O,L'MESSA11O\n         L     R9,SAVER9H\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM1 DS    0H\n         ST    R9,SAVER9I\n         MVC   LINE,LINE-1\n         APUT  MESSA11G,L'MESSA11G\n         L     R9,SAVER9I\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM2 DS    0H\n         ST    R9,SAVER9J\n         MVC   LINE,LINE-1\n         APUT  MESSA11E,L'MESSA11E\n         L     R9,SAVER9J\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM3 DS    0H\n         ST    R9,SAVER9K\n         MVC   LINE,LINE-1\n         APUT  MESSA11H,L'MESSA11H\n         L     R9,SAVER9K\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPTABL DS    0H                Scan thru the particular table....\n         ST    R9,SAVER9L          Save BAL register\n         ST    R3,SAVER3A          Save\n         ST    R4,SAVER4A             the\n         ST    R5,SAVER5A                work\n         ST    R6,SAVER6A                   registers.\n         TM    OFFFLAG,X'02'       Are we blanking the last entry?\n         BO    DISPTEND            Yes. Don't have to scan entire table\n         XR    R3,R3               Zero\n         XR    R5,R5                  work\n         XR    R6,R6                     registers.\nDISPTSTR DS    0H\n         L     R3,TABLSTRT         Load start address of table\n         L     R6,TABLENUM         Load number of entries in table\n         L     R5,TABLESIZ         Load size of each entry\n         LA    R4,1                Start slot number count at 1\n         ST    R4,SLOTNOW          Stort slot number count away\n         CLC   SLOTBIN,=F'0'       If there's no slot num in param\n         BE    DISPTLUP            Then bypass error checking\n         C     R6,SLOTBIN          Compare table size to parm number\n         BNL   DISPTLUP            If parm number is LE, then display\nDISPTERR DS    0H                  Else error message and out.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Slot number specified '\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'is bigger than table size '\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         B     EOJ4\nDISPTLUP DS    0H                  Loop thru the table entries.\n         MVC   LINE,LINE-1\n         MVC   LINE(2),CODEPLAC\n         MVC   LINE+3(19),=C'Table Entry Number:'\n         CVD   R4,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         TM    NSCHFLG,X'01'       Is this the 10-byte NS table entry?\n         BO    DISPTBNS            Yes. Handle separately.\n         MVC   LINE+34(8),0(R3)\n         CLC   LINE+34(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+34(8),=C'*empty* '   Yes. Don't just show blanks.\n         B     DISPTBLK\nDISPTBNS DS    0H\n         HEX   LINE+34,2,0(R3)\n         MVC   LINE+40(8),2(R3)\n         CLC   LINE+40(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+40(8),=C'*empty* '   Yes. Don't just show blanks.\nDISPTBLK DS    0H                  Search each slot number.\n         CLC   SLOTBIN,=F'0'       Has a slot number been specified?\n         BE    DISPTYES            No. Just display all the slots.\n         CLC   SLOTBIN,SLOTNOW     Yes. Then are we at the one we want?\n         BNE   DISPTNOT            No. Just go further and search.\n* ---  Save contents of the current slot which was found - below\n         LR    R1,R5               Load table entry size\n         BCTR  R1,0                One less for execute\n         EX    R1,MOVESLOT         Save contents of slot for kicks\n         ST    R3,OURSLOT          Store its address - important....\n         MVC   TABENNUM(10),MASK10    Save edited version\n         ED    TABENNUM(10),CVDAREA+3    of this slot number\n         B     DISPTPEX               Branch past executed instruction\nMOVESLOT MVC   SLOTSAVE(*-*),0(R3)    EXECUTED\nDISPTPEX DS    0H\n* ---  Save contents of the current slot which was found - above\nDISPTYES DS    0H                  Print this slot entry\n         APUT  LINE,52\nDISPTNOT DS    0H                  Bump to next slot and loop back.\n         LA    R3,0(R5,R3)         Bump to next slot\n         LA    R4,1(,R4)           Bump count of slot number\n         ST    R4,SLOTNOW          Store new slot number away\n         BCT   R6,DISPTLUP         And loop to examine the new slot.\nDISPTEND DS    0H\n         L     R3,SAVER3A          Restore all the work registers.\n         L     R4,SAVER4A\n         L     R5,SAVER5A\n         L     R6,SAVER6A\n         L     R9,SAVER9L          Restore the BAL register.\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNUMES DS    0H\n         ST    R9,SAVER9M\nGETNUMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNUMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         S     R5,=F'1'            Subtract one from end count\n         B     GETNUMST            And loop to find first non-blank.\nGETNUMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R6,5                BCT initial quantity - 5 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of program number\nGETNUMLU DS    0H                  Loop to get entire number\n         CLI   0(R7),X'40'         First blank?\n         BE    GETNUMGT            Yes, got whole number\n         CLI   0(R7),X'00'         First hex zeros?\n         BE    GETNUMGT            Yes, got whole number\n         CR    R8,R5               End of command buffer?\n         BNL   GETNUMGT            Yes. Got all we can get.\n* --\n         CLI   0(R7),X'F0'         Check this parm if numeric.\n         BL    NOTNUMER\n         CLI   0(R7),X'F9'\n         BH    NOTNUMER\n* --\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R7,1(,R7)           Bump where we are.\n         BCT   R6,GETNUMLU         Loop back.\nGETNUMGT DS    0H                  Got the whole number - examine it.\n         ST    R8,SAVER8\n         ST    R8,FSTNOUNT         Get halfword value of slot number\n         MVC   FSTNHALF(2),FSTNOUNT+2\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTFIELD(8),BLANKS  5-char number plus 3 blanks\n         EX    R8,MOVFNUM          Get the number from the parm\n         EX    R8,PACK             Convert it to packed\n         CVB   R0,WORKA            Convert it to Binary                  06446\n         ST    R0,SLOTBIN          Store the value for later use         06447\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTFIELD    8-char number with blanks\n         MVC   LINE+13(19),=C'Entry slot number  '\n         APUT  LINE,32\n         LA    R8,1(,R8)           Restore number of chars after EX\n         ST    R8,CHARSIZE         Save this value off.\n         AR    R3,R8               Add it to R3 so we start past it.\n         ST    R3,CHARCONT         Store start value for next parm.\nGETNUMEN DS    0H\n         L     R9,SAVER9M\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTBLADR DS    0H\n         ST    R9,SAVER9N\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,TABLADDR     Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n         L     R9,SAVER9N\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ----------------------------------------------------------------- *\n*      Measure \"8-byte entry\" loaded table.                         *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR08 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9O           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         ST    R6,SAVER6B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\n         L     R6,TABLENUM          No of entries to limit loop\nME08LOOP DS    0H\n*     Try (real hard) to detect the end of the table  -  below\n         MVC   SAVECHAR(1),0(R5)    Save first character\n         CLC   =C'        ',0(R5)   Is this table entry a blank?\n         BE    ME08BLNK             Yes. Reached virtual end of table\n         CLC   ZEROES8(8),0(R5)     Is this \"entry\" hex zeros?\n         BE    ME08NOBL             Yes. Reached possible junk storage\n         CLC   =C' ',0(R5)          Is first character blank?\n         BE    ME08NOBL             Yes, not a valid table entry.\n         TR    SAVECHAR,TRTPGMNM    Check first char if appropriate.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE2',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE8',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTAP',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTNS',0(R5)\n         BE    ME08NOBL\n*     Try (real hard) to detect the end of the table  -  above\n         LA    R4,8(,R4)            Count next table entry\n         LA    R5,8(,R5)            Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         BCT   R6,ME08LOOP          Loop back till table end\n         B     ME08NOBL             No blanks if we fell through\nME08BLNK DS    0H\n         LA    R4,8(,R4)            Add length of blank entry\n         LA    R5,8(,R5)            Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME08NOBL DS    0H\n         STH   R4,ME08LENG          Store measured length of table.\n         ST    R5,ME08END           And record address of table end.\n*        BAL   R9,MESBLK08          Measure more blanks after table.\n*        TM    MEASFLG,X'01'        Been here already?\n*        BO    ME08NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME08NOSH DS    0H\n*        OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R6,SAVER6B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9O           Restore BAL register\n         BR    R9\nME08END  DS    F                    Store end-of-table address\nME08LENG DS    H                    Store table length\nBL08LENG DS    H                    Store length of blanks\nTO08LENG DS    H                    Store total, nonblank+blank\n* ----------------------------------------------------------------- *\nMEASUR10 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9R           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         ST    R6,SAVER6B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\n         L     R6,TABLENUM          No of entries to limit loop\nME10LOOP DS    0H\n         MVC   SAVECHAR(1),2(R5)    Save first character of pgm name\n         MVC   SAVECH08(1),9(R5)    Save last character of pgm name\n         CLC   BLKSTRNG(10),0(R5)   Full blank entry here?\n         BE    ME10BLNK             Yes. Count the blank entry.\n         CLC   ENDSTRNG(10),0(R5)   FFFF plus blank pgm name?\n         BE    ME10BLNK             Yes. Can still be considered blank.\n         CLC   =X'0000',0(R5)       Zeros in length field?\n         BE    ME10TEST             Yes. Test rest of entry.\n         B     ME10REST             Not zeros, go on.\nME10TEST DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check for strange character.\n         CLI   SAVECHAR,X'02'       Is it strange?\n         BE    ME10NOBL             Yes. This is not a blank entry.\nME10REST DS    0H\n         CLC   =X'FFFF',0(R5)       Test for end string separately.\n         BNE   ME10TES2             Not. Not at virtual end of table\n         B     ME10NOBL             FFFF alone. Not a blank entry.\nME10TES2 DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check for strange character.\n         CLI   SAVECHAR,X'02'\n         BE    ME10NOBL             Not. probably end of table.\n         TR    SAVECH08,TRTPGMNM    Check last char if strange.\n         CLI   SAVECH08,X'02'\n         BE    ME10NOBL             Not. probably end of table.\n         LA    R4,10(,R4)           Count next table entry\n         LA    R5,10(,R5)           Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         BCT   R6,ME10LOOP          Finished entry, try for more.\n         B     ME10NOBL\nME10BLNK DS    0H\n         LA    R4,10(,R4)           Add length of blank entry\n         LA    R5,10(,R5)           Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME10NOBL DS    0H\n         STH   R4,ME10LENG          Store measured length of table.\n         ST    R5,ME10END           And record address of table end.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME10NOSH DS    0H\n         L     R4,SAVER4B           Restore work register\n         L     R6,SAVER6B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9R           Restore BAL register\n         BR    R9\nME10END  DS    F                    Store end-of-table address\nME10LENG DS    H                    Store table length\nBL10LENG DS    H                    Store length of blanks\nTO10LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nENTRYDSP DS    0H\n         ST    R9,SAVER9P\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         L     R1,NTRYCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Non-blank table entries:'\n         MVC   LINE+35(25),=C'(these are the ones used)'\n         APUT  LINE,65\n         MVC   LINE,LINE-1\n         L     R1,BLNKCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Perceived blank entries:'\n         MVC   LINE+35(25),=C'(blank program name slot)'\n         APUT  LINE,65\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nENTRYEXI DS    0H\n         L     R9,SAVER9P\n         BR    R9\nENTRYDEN DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTNENTR DS    0H\n         ST    R9,SAVER9Q\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         L     R9,SAVER9Q\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nLISTLNTH DS    0H\n         ST    R9,SAVER9S\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Listed   length of this table:'\n         HEX   LINE+32,2,TABLELEN+2\n         L     R1,TABLELEN         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+45(10),MASK10  Move in the mask\n         ED    LINE+45(10),CVDAREA+3 Make it pretty\n         MVC   LINE+39(8),=C'Decimal:'\n         APUT  LINE,65\n         TM    NSCHFLG,X'01'\n         BO    LISTLN10\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Measured length of this table:'\n         HEX   LINE+32,2,ME08LENG\n         LH    R1,ME08LENG         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+45(10),MASK10  Move in the mask\n         ED    LINE+45(10),CVDAREA+3 Make it pretty\n         MVC   LINE+39(8),=C'Decimal:'\n         APUT  LINE,65\n         B     LISTLNEN\nLISTLN10 DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Measured length of this table:'\n         HEX   LINE+32,2,ME10LENG\n         LH    R1,ME10LENG         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+45(10),MASK10  Move in the mask\n         ED    LINE+45(10),CVDAREA+3 Make it pretty\n         MVC   LINE+39(8),=C'Decimal:'\n         APUT  LINE,65\nLISTLNEN DS    0H\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         L     R9,SAVER9S\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLKSTRNG DC    XL10'00004040404040404040'\nENDSTRNG DC    XL10'FFFF4040404040404040'\nZEROES8  DC    X'0000000000000000'\nMASK10   DC    XL10'40202020202020202120'\n         DC    C' '\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'ASUB Command - Display or Change PARMLIB Auth Table Enx\n               try - Ver 1.15'\nMESSAGEU DC    C'---- -------   ------- -- ------ ------- ---- ----- --x\n               ---   --- ----'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG3A DC    C'Slot      in XX table has been changed to         .'\nMESSAG3B DC    C'Last slot in XX table has been blanked.            '\nMESSAG3C DC    C'                                                      +\n                  '\nMESSA11A DC    C'Supply a table code, followed by an action code. '\nMESSA11B DC    C'Supply a program name, as the next parameter.   '\nMESSA11C DC    C'Valid table  codes are:  E2, E8, AP, NS, PC, PP. '\nMESSA11D DC    C'Valid action codes are:  R - replace, B - blank, D - d-\n               isplay.'\nMESSA11E DC    C'Please supply a program name.  '\nMESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-\n               on code.'\nMESSA11G DC   C'Please supply slot number to change, and program name.'\nMESSA11H DC    C'This table did not come from a PARMLIB specification.'\nMESSA11I DC    C'If D (display) is followed by a slot number, only that-\n                slot is shown.'\nMESSA11J DC    C'R (replace) requires a slot number, followed by a prog-\n               ram name.'\nMESSA11K DC    C'If D is not followed by a number, then the entire tabl-\n               e is displayed.'\nMESSA11L DC    C'  Instructions to use this program:                  '\nMESSA11M DC    C'  ------------ -- --- ---- -------                   '\nMESSA11N DC    C'B (blank) will blank the last table entry, which norma-\n               lly is blank.'\nMESSA11O DC    C'Only R (replace) and B (blank) require APF authorizati-\n               on. D does not.'\nMESSA11P DC    C'  ASUB TTA nnn pgmname (nnn optional for D, both requi-\n               red for R)'\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\nMESSDIAG DC    C'                                            '\nMESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '\nMESSAGEN DC    C'Supplied character        was not numeric. '\n         SPACE 3\n         LTORG\n         SPACE 3\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER1   DS    F                   Save R1 here\nSAVER1A  DS    F                   Save R1 here\nSAVER1B  DS    F                   Save R1 here\nSAVER3A  DS    F                   Save R3 here\nSAVER4A  DS    F                   Save R4 here\nSAVER4B  DS    F                   Save R4 here\nSAVER5A  DS    F                   Save R5 here\nSAVER5D  DS    F                   Save R5 here\nSAVER6   DS    F                   Save R6 here\nSAVER6A  DS    F                   Save R6 here\nSAVER6B  DS    F                   Save R6 here\nSAVER8   DS    F                   Save R8 here\nSAVER8A  DS    F                   Save R8 here\nSAVER8B  DS    F                   Save R8 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nSAVLSLOT DS    F                   Save place where Key 0 will change\nSLOTBIN  DS    F\nSLOTNOW  DS    F\nDISPREG  DS    F                   DISPLAY\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nCHARSIZE DS    F\nOURSLOT  DS    F\n* --- >\nTABLSTRT DS    F                   Start address of table\nTABLADDR DS    F                   Start address of table\nTABLENUM DS    F                   Number of entries in table\nTABLESIZ DS    F                   Size of a table entry\nTABLELEN DS    F                   Listed length of the table\n* --- >\nBLNKCNT  DS    F\nNTRYCNT  DS    F\n* --- >\nOFFSETSV DS    F\nWORKA    DC    D'0'                                                      06772\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nCODEPLAC DS    CL2\nPAD01    DS    CL4                 Filler\nSAVECHAR DS    X\nSAVECH08 DS    X\nOFFFLAG  DS    X                   Are we blanking the last entry?\nOLDFLAG  DS    X                   Old system detected if X'01'\nPLATFLG  DS    X\nNSCHFLG  DS    X\nPAD02    DS    CL4                 Filler\nFSTNAME  DC    CL8' '\nFSTCOUNT DS    F                   Number of characters in FSTNAME\nFSTCHALF DC    H'0'\nPAD03    DS    CL4                 Filler\nFSTFIELD DS    0CL8\nFSTNUME  DC    CL5' '\nFSTNUPAD DC    CL3' '\nFSTNOUNT DS    F                   Number of characters in FSTNAME\nFSTNHALF DC    H'0'\nPAD04    DS    CL4                 Filler\nSLOTSAVE DS    CL10\nPAD05    DS    CL4                 Filler\nSNDNAME  DC    CL8' '\nSNDCOUNT DS    F                   Number of characters in SNDNAME\nSNDCHALF DC    H'0'\nTABCODE  DC    CL8' '              Original OUTLIM character\nTABENNUM DC    CL10' '\n         DS    CL7                 PADDING\n         DS    CL1\nCMDBCOPY DS    CL252\n         DS    CL128               PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\nTRTPGMNM DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'40020202020202020202020202020202'\n         DC    X'02020202020202020202025B02020202'\n         DC    X'0202020202020202020202020202026F'\n         DC    X'02020202020202020202027B7C020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         SPACE\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASUB$": {"ttr": 2050, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=CBT.CBT493.FILE222.PDS(ASUB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,9),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n ENTRY   ASUB\n NAME    ASUB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASUBHELP": {"ttr": 2052, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized, except for the display   *\n*                   functions.                                        *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized.                      *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n*    Description:   Display an Auth Table entry from the TSO/E        *\n*                   program list tables in storage.  Or display the   *\n*                   entire table.  Or replace one entry with a new    *\n*                   program name.  If you are invoking a display      *\n*                   function, then the entire table is shown, unless  *\n*                   you enter a number, and then, only that slot is   *\n*                   shown.  Only tables manufactured from PARMLIB     *\n*                   entries are displayed or changed, not the ones    *\n*                   created from IKJTABLS in LPALIB.                  *\n*                                                                     *\n*                   The trick (of filling in the last table entry)    *\n*                   only works for PARMLIB-created tables, because    *\n*                   the tables whose origin is IKJTABLS have no       *\n*                   \"length attributes\" associated with them.  And    *\n*                   in those cases, where the tables came from        *\n*                   IKJTABLS CSECTs, the only way you know where      *\n*                   the end of that table is, is from a blank table   *\n*                   entry.  Then, the blank entry is the table's      *\n*                   delimiter.  So in this program, which only works  *\n*                   for the PARMLIB-created tables, you can           *\n*                   substitute a real program name in ANY program     *\n*                   entry slot, even a blank one at the end.  But     *\n*                   this technique does not work for IKJTABLS CSECTs  *\n*                   which create such table entries.  In tables       *\n*                   whose entries don't come from PARMLIB, you        *\n*                   ALWAYS need one blank entry at the end, to        *\n*                   delimit the table.  You can't fill that in with   *\n*                   a non-blank program name, if there's only one     *\n*                   blank entry at the table's end.                   *\n*                                                                     *\n*       Function:   To substitute one new program name in the global  *\n*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n*                   IKJEFTAP, IKJEFTNS, or even to the PLATCMD or     *\n*                   PLATPGM lists, if they exist.  This is done to    *\n*                   any numbered entry of each table.  Or else merely *\n*                   display the contents of the entire table, or the  *\n*                   contents of any particular numbered entry.        *\n*                                                                     *\n*                   Also, a blanking function can be performed on     *\n*                   the last entry of any table, which is usually     *\n*                   blank anyway.  No blanking can be performed on    *\n*                   a slot in the middle of a table, because that     *\n*                   will invalidate all the table entries after the   *\n*                   blanked slot, and it is too dangerous to do,      *\n*                   when done irresponsibly.                          *\n*                                                                     *\n*         Syntax:   ASUB TTA nnn pgmname                              *\n*                                                                     *\n*                   Where TT is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD                           *\n*                   E8 - IKJEFTE8 = AUTHPGM                           *\n*                   AP - IKJEFTAP = AUTHTSF                           *\n*                   NS - IKJEFTNS = NOTBKGND                          *\n*                   PC - FCVE     = PLATCMD                           *\n*                   PP - PPVE     = PLATPGM                           *\n*                                                                     *\n*                   If the action code is B (blank the last           *\n*                   entry), then no program name is required.         *\n*                                                                     *\n*                   If the action code is D (display the last         *\n*                   entry), then no program name is required.         *\n*                   The default action is to display the entire       *\n*                   table, unless a number is entered.  If a          *\n*                   number is present, then only that entry           *\n*                   number is displayed.  If the number is larger     *\n*                   than the number of entries in that particular     *\n*                   table, then an informative error message is       *\n*                   issued, and the program ends with code = 4.       *\n*                                                                     *\n*                   If the action code is R (replace the program      *\n*                   name) then a number (the table entry number)      *\n*                   and a program name are required.  If you want     *\n*                   to blank the last slot, instead of putting a      *\n*                   program name into it, then use action code B.     *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to, and therefore no addition *\n*                   of names can be made.  The condition is reported. *\n*                                                                     *\n*            Note:  If an E2, E8, AP, or NS table which is being      *\n*                   used by the system, did not come from the         *\n*                   IKJTSOxx PARMLIB entry, but it came from the      *\n*                   default IKJTABLS entry in LPALIB, then an         *\n*                   appropriate error message is displayed, and       *\n*                   no action is performed on that table.             *\n*                                                                     *\n*      Suggestion:  If you want to \"nullify\" any entry in one of      *\n*                   the tables, replace it with a question mark '?'   *\n*                   by entering ASUB xxR nn ? .                       *\n*                                                                     *\n*                   This will replace the program name entry with     *\n*                   a question mark (not an executable program)       *\n*                   but it will not nullify the subsequent table      *\n*                   entries.                                          *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUCMD": {"ttr": 2055, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE '   A U C M D  '\n***********************************************************************\n*                                                                     *\n*        'AUCMD'                                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        INSTALLATION. PRC, MCLEAN VA.\n*        DATE WRITTEN. JANUARY 6 1978.\n*        DATE UPDATED. SEPTEMBER 29 1981.\n*        ATTRIBUTES. RE-ENTRANT, AUTHORIZED.\n*        DESCRIPTION.\n*         THIS TSO COMMAND INVOKES A SPECIFIED TSO COMMAND\n*         AND RUNS IT AUTHORIZED.  FOR SYSTEMS SUPPORT USE ONLY.\n*         MODIFIED TO EXECUTE COMMANDS WITH OTHER NAMES THAN\n*         THE USUAL.\n*\n*        LOG OF CHANGES.\n*         04MAY81 - INSTALLED AT AFDSC/PENTAGON.\n*         29SEP81 - CHECK FOR ASMI. ISSUE TESTAUTH.\n*         15MAY85 - CHANGE THE CHECK FOR MY OWN PURPOSES. ALSO\n*                   ADD MECHANISM TO USE YOUR OWN SVC TO GET\n*                   INTO SUPERVISOR STATE. WE RUN WITH ISPF/PDF\n*                   V1 AND NEED IT.   JIM MARSHALL (JDM)\n*         30DEC12 - ALLOW ALL TSO USERIDS TO USE THIS COMMAND.\n*                   AMODE 31.\n*                   APF-AUTHORIZATION INFORMATION:\n*                   CMD NAME HAS TO BE IN THE IKJEFTE2 TABLE.\n*                   CHANGED \"NOT AUTHORIZED\" MESSAGE TO MAKE\n*                   IT LOOK LIKE THE COMMAND ISN'T THERE.\n*                   THIS IS IN RESPONSE TO THE TESTAUTH MACRO. (SBG)\n*         28NOV16 - ALLOW AUCMD TO EXECUTE PROGRAMS WITH MORE\n*                   OR LESS ARBITRARY NAMES. GOT RID OF IKJSCAN\n*                   NAME CHECKING COMPLETELY.   (SBG WITH BILL\n*                   GODFREY'S HELP)\n*         04DEC16 - CHANGE UPPERCASING TO TRANSLATE TABLE. NOT OC\n*                   AGAINST X'40'. INCLUDES MEMBER NAMES FROM\n*                   X'80' THRU X'BF' TO NOT CHANGE THEM.\n*\n*         THIS COMMAND SHOULD BE LINK-EDITED AUTHORIZED.\n*         THE NAME OF THIS COMMAND MUST BE ADDED TO THE TABLE\n*         OF AUTHORIZED COMMANDS IN CSECT IKJEFTE2.\n*         BUT THE NAMES OF THE COMMANDS INVOKED BY THIS COMMAND\n*         DO NOT HAVE TO BE IN THE TABLE, SO USE OF THIS COMMAND\n*         ALLOWS THE TABLE TO BE SMALLER.\n*\n*         I HAVE 2 MACROS COMMENTED OUT DOWN WHERE WE LINK OFF TO\n*         THE ACTUAL COMMAND. I RUN ISPF/PDF V1 (NOT AUTHORIZED)\n*         AND SO DO NOT USE THE MECHANISM DESCRIBED ABOVE. THUS\n*         WE NEED AN SVC TO GET OURSELVES IN AND OUT OF SUPERVISOR\n*         STATE. IF YOU HAVE SUCH A MECHANISM, JUST REPLACE THE\n*         COMMENTED MACROS WITH YOUR OWN. I DO NOT SUPPLY THE\n*         MACRO BECAUSE I WOULD THEN BE ACCUSED TO 'CONTRIBUTING\n*         TO THE DELINQUENCY OF A SYSTEMS PROGRAMMER'!!!!!\n*                                    JIM MARSHALL\n*\n*         WE USE THIS COMMAND TO INVOKE COMMANDS THAT ARE USED ONLY\n*         BY SYSTEMS PROGRAMMERS. AUTHORIZED COMMANDS THAT ARE USED\n*         BY NON-SYSTEM-PROGRAMMERS ARE PUT IN IKJEFTE2. THAT IS\n*         WHY THIS COMMAND CHECKS THE USERID, AND THAT IS WHY THIS\n*         COMMAND DOES NOT HAVE ITS OWN TABLE OF COMMAND NAMES.\n*\n*         WE ALSO LINK-EDIT A NON AUTHORIZED COPY OF THIS COMMAND,\n*         AND NAME THAT VERSION 'CMD'.  THEN WE ADD 'CMD' TO THE\n*         SUBCOMMAND TABLES IN 'EDIT' AND 'TEST', SO ANY TSO COMMAND\n*         CAN BE USED UNDER EDIT AND TEST BY USING 'CMD'. THIS IS NOT\n*         NECESSARY IF 'PCF' IS INSTALLED.\n*\n* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n*                    FOR DISPLAYS OF HEX DATA                        *\n* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R5,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R5,HEX\n         L     R5,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    HEXR  &TO,&REG,&FROM\n&NAME    DS    0H\n         ST    R5,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LR    R0,&REG\n         LA    R15,&TO\n         BAL   R5,HEX\n         L     R5,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    MOVE  &TO,&TOL,&FROM,&FROML\n         LCLB  &B(8)               0=FALSE 1=TRUE\n&B(1)    SETB  (T'&TO EQ 'O')\n&B(2)    SETB  (T'&TOL EQ 'O')\n&B(3)    SETB  (T'&FROM EQ 'O')\n&B(4)    SETB  (T'&FROML EQ 'O')\n         AIF   (&B(1) OR &B(2) OR &B(3)).REQOM\n&B(5)    SETB  ('&TO'(1,1) EQ '(')\n&B(6)    SETB  ('&TOL'(1,1) EQ '(')\n&B(7)    SETB  ('&FROM'(1,1) EQ '(')\n         AIF   (&B(4)).NOB8\n&B(8)    SETB  ('&FROML'(1,1) EQ '(')\n.NOB8   ANOP\n         AIF   (NOT(&B(5) AND &B(6) AND &B(7))).NALLR\n         AIF   (NOT &B(4) AND NOT &B(8)).NALLR\n         LR    R0,&TO(1)           RECEIVING FIELD\n         LR    R1,&TOL(1)          RECEIVING LENGTH\n         LR    R14,&FROM(1)        SENDING FIELD\n         AIF   (&B(4)).NOFROML\n         LR    R15,&FROML(1)       SENDING LENGTH\n         ICM   R15,B'1000',=X'40'  PAD IF SENDING IS SHORTER\n         AGO   .MVCL\n.NOFROML LR    R15,&TOL(1)         SENDING LENGTH\n.MVCL    MVCL  R0,R14\n         MEXIT\n.REQOM   MNOTE 4,'REQUIRED OPERAND(S) OMITTED'\n         MEXIT\n.NALLR   MNOTE 4,'ALL OPERANDS MUST BE IN REGISTER FORMAT (PARENS)'\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         EJECT\n* ------------------------------------------------------------------ *\n*           THIS IS THE BEGINNING OF THE PROGRAM CODE                *\n* ------------------------------------------------------------------ *\nAUCMD    CSECT\nAUCMD    RMODE 24\nAUCMD    AMODE 31\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'AUCMD'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL) SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(R13)       INITIALIZE FOR REENTRANCY\n         LR    R12,R15             LOAD NEW BASE REGISTER\n         LR    R2,R1               SAVE CPPL POINTER\n         L     R0,@SIZE            SIZE OF GETMAINED AREA\n         GETMAIN R,LV=(0)\n         LR    R9,R1               SAVE ADDR OF GOTTEN AREA\n         USING @DATA,R9\n         LR    R0,R9               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SR    R14,R14             CLEAR R14 AND R15\n         SR    R15,R15             CLEAR R14 AND R15\n         MVCL  R0,R14              ZERO IT ALL\n         SPACE 1\n         LR    R1,R9               POINT TO NEW SAVEAREA\n         ST    R13,4(,R1)          PUT OLD ADDRESS IN NEW SAVE AREA\n         ST    R1,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R1              SWITCH R13 TO NEW SAVE AREA\n* ------------------------------------------------------------------ *\nINITCON  DS    0H                  INITIALIZE CONSTANTS AND FLAGS\n         MVI   COMMANDA-1,X'40'    CLEAR COMMAND NAME AREA\n         MVC   COMMANDA,COMMANDA-1\n         MVC   COMMANDL,=X'0000'   INITIALIZE COMMAND LENGTH AREA\n         MVI   TESTLINE-1,X'40'    BLANK TEST OUTPUT AREA\n         MVC   TESTLINE,TESTLINE-1 FOR DISPLAYS\n         EJECT\n************************************************************\n*                                                          *\n*         CHECK USER'S AUTHORITY TO USE THIS COMMAND.      *\n*                                                          *\n************************************************************\n*\n         ST    R2,ORIGCPPL         CPPL THAT HAS BEEN PASSED TO US\n         L     R15,X'224'          PSAAOLD\n         L     R14,60(,R15)        ASCBTSB\n         LTR   R14,R14             TSO SESSION?\n         BNZ   IMPLTSO             YES - BRANCH\n         L     R14,X'AC'(,R15)     ASCBJBNI\n         LTR   R14,R14             STARTED TASK?\n         BZ    IMPLEXIT            YES - BRANCH\n         B     IMPLEXEC            NO - JOBS NOT AUTHORIZED\nIMPLTSO  L     R15,X'21C'          PSATOLD\n         L     R15,X'B4'(,R15)     TCBJSCB\n         L     R15,X'108'(,R15)    JSCBPSCB\n         ST    R15,ORIGPSCB        STORE ADDRESS OF PSCB AWAY\n         LR    R1,R15              AT PSCB, PUT INTO R1\n         L     R1,X'34'(,R1)       GET UPT ADDR FROM PSCB\n         ST    R1,ORIGUPT          STORE IT AWAY\n         L     R1,ORIGCPPL         RELOAD CPPL ADDRESS\n         L     R1,12(,R1)          GET ECT ADDRESS\n         ST    R1,ORIGECT          PRESERVE IT FOR LATER\n*\n         B     IMPLEXIT            AUTHORIZE EVERYONE\n*\n*      (EXAMPLE OF AUTH CODE BELOW - YOU CAN IMPLEMENT IT BETTER)\n*\n         CLC   0(4,R15),=C'SS02'   SYSTEMS SUPPORT USERID\n         BE    IMPLEXIT            YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         USER NOT AUTHORIZED - CALL IMPLICIT EXEC         *\n*                                                          *\n************************************************************\n         SPACE\nIMPLEXEC DS    0H\n         L     R15,0(,R2)          CPPLCBUF\n         XC    2(2,R15),2(R15)     SET CBUF OFFSET TO IMPLICIT EXEC\n         L     R15,12(,R2)         CPPLECT\n         CLI   20(R15),X'40'       ECTSCMD BLANK?\n         BNE   *+10                YES - SUBCOMMAND NOT FOUND\n         MVC   12(8,R15),=CL8'EXEC' NO - COMMAND NOT FOUND\n         L     R0,@SIZE\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         L     R1,24(,R13)         RESTORE CPPL POINTER\n         LA    R15,20(,R13)        POINT TO 8 BYTE WORKAREA\n         XC    0(8,R15),0(R15)     ZERO WORKAREA\n         XCTL  (2,12),EP=EXEC,SF=(E,(15))\n         SPACE\n************************************************************\n*                                                          *\n*             GETMAIN A NEW COMMAND BUFFER                 *\n*                                                          *\n************************************************************\n*         THIS IS OUR CODE TO AVOID USING IKJSCAN          *\n************************************************************\nIMPLEXIT DS    0H\n         TESTAUTH FCTN=1\n         LTR   R15,R15             ARE WE RUNNING AUTHORIZED\n         BNZ   NAUTH               NO - GO ISSUE ERROR MESSAGE\n         USING CPPL,R2\n         MVC   SAVEUPT,CPPLUPT     SAVE FOR LATER\n         L     R3,CPPLECT\n         ST    R3,SAVEECT          SAVE ECT ADDRESS FOR LATER\n         USING ECT,R3\n         TM    ECTSWS,ECTNOPD      ANY OPERANDS?\n         BO    NOPERAND            NO - BRANCH\n         DROP  R3\n         SPACE\n         L     R3,CPPLCBUF\n         CLC   2(2,R3),=H'0'       IS THERE AN OFFSET?\n* ----------------------------------------------------------- *\n*        THIS IS NOT A CORRECT DETERMINATOR OF OFFSET.        *\n*        IF NO OPERANDS, THEN OFFSET SHOULD BE FOUR           *\n*        LESS THAN THE LENGTH OF THE COMMAND BUFFER.          *\n* ----------------------------------------------------------- *\n         BE    NOPERAND            NO - BRANCH\n         LH    R4,0(,R3)           GET CBUF LENGTH\n         SH    R4,2(,R3)           SUBTRACT OFFSET\n         CH    R4,=H'4'            DOES OFFSET = LENGTH?\n         BNH   NOPERAND            YES - NO OPERANDS\n         LR    R0,R4\n         CH    R0,=H'256'          WILL 256 BYTES BE ADDRESSABLE\n         BNL   *+8                 YES, BRANCH\n         LH    R0,=H'256'          NO, MAKE AT LEAST 256 BYTES\n         O     R0,SUBPOOL\n         ST    R0,FREECBUF         STORE FOR LATER FREEMAIN\n         GETMAIN R,LV=(0)\n         ST    R1,FREECBUF+4\n         LR    R8,R1               ADDRESS OF NEW CPPL\n         XC    0(4,R8),0(R8)       CLEAR BEFORE REFILLING IT\n         STH   R4,0(,R8)           PUT NEW LENGTH IN\n         SH    R4,=H'4'            SUBTRACT PREFIX LENGTH\n         ST    R4,SAVELENG         KEEP IT JUST IN CASE\n         AH    R3,2(,R3)           POINT TO OPERAND - 4\n         AH    R3,=H'4'            POINT TO OPERAND\n         SPACE\n         LA    R7,4(,R8)           POINT TO RECEIVING FIELD\n         SPACE\n* -------------------   BELOW  -   REPLACED BY THE MOVE MACRO\n*        LR    R1,R4\n*        BCTR  R1,0\n*        B     *+10\n*        MVC   0(0,R7),0(R3)\n*        EX    R1,*-6\n* -------------------   ABOVE  -   REPLACED BY THE MOVE MACRO\n*\n*                                  FILL THE NEW CPPL\n         MOVE  (R7),(R4),(R3)\n         SPACE\n         MVC   NEWCPPL(16),0(R2)   COPY CPPL FOR NEW CBUF\n         LA    R2,NEWCPPL          ADDRESS NEW CPPL AREA\n         ST    R2,SAVECPPL         SAVE THE ADDRESS\n         ST    R8,CPPLCBUF         SAVE THE NEW COMMAND BUFFER\n*\n         ST    R3,SAVER3A\n         L     R3,CPPLECT          LOOK AT THE CPPL'S ECT\n         USING ECT,R3\n         OI    ECTSWS2,X'20'       ALLOW ? PARSE HELP\n         DROP  R3\n         L     R3,SAVER3A\n*\n************************************************************\n*                                                          *\n*         GET ACTUAL LENGTH OF THE COMMAND EXECUTED        *\n*          AND GET THE OFFSET TO PUT INTO THE CPPL         *\n*                                                          *\n************************************************************\n*\nGETCOMND DS    0H                  GET ACTUAL COMMAND LENGTH\n         ST    R6,SAVER6A          SAVE\n         ST    R5,SAVER5A              WORK\n         ST    R4,SAVER4A                  REGISTERS\n         LR    R5,R7               POINT TO NEW COMMAND\n         LA    R10,0               START COUNT AT 0\n         LR    R6,R4               LOAD LENGTH OF OCCUPIED BUFFER\nGETLOOP  DS    0H                  GET LENGTH OF ACTUAL COMMAND\n         CLI   0(R5),X'00'         X'00' DELIMITS\n         BE    GETCLEND\n         CLI   0(R5),X'40'         BLANK DELIMITS\n         BE    GETCLEND\n         LA    R5,1(,R5)           BUMP SEARCH ADDRESS\n         LA    R10,1(,R10)         COUNT COMMAND SIZE\n         BCT   R6,GETLOOP\nGETCLEND DS    0H\n         ST    R10,SAVECMDL        SAVE COMMAND SIZE COUNT\n         LR    R14,R10             GET READY FOR EXECUTE\n         BCTR  R14,0               ONE LESS FOR EXECUTE\n         MVC   COMMANDA(8),BLANKS  ASSURE ALL BLANKS TO START\n         EX    R14,MOVCOMND\n*\nGETOFFST DS    0H                  FIND COMMAND OFFSET\n         C     R6,=F'0'            NO PARM?\n         BE    GETNOPRM            TELL THE PROGRAM SO.\n         LA    R5,1(,R5)           BUMP ONE FURTHER\n         LA    R10,1(,R10)\n         CLI   0(R5),X'00'         NOW LOOK FOR NON-ZERO\n         BE    GETOFLUP\n         CLI   0(R5),X'40'         OR NON-BLANK\n         BE    GETOFLUP\n         B     GETOLEND\nGETOFLUP DS    0H                  IS ZERO OR BLANK, BUMP AGAIN.\n         BCT   R6,GETOFFST\nGETOLEND DS    0H                  SAVE OFFSET\n         CLI   0(R5),X'00'         LAST CHARACTER NON-ZERO\n         BE    GETNOPRM            FLAG NO PARM\n         CLI   0(R5),X'40'         OR NON-BLANK?\n         BE    GETNOPRM            FLAG NO PARM\n         B     GETYSPRM            THERE IS A PARM, GET OFFSET.\nGETNOPRM DS    0H                  IF THERE IS NO PARM.....\n         MVC   SAVEOFFS,SAVECMDL   NO PARM, COMMAND LENGTH IS OFFSET\n         B     GETLENDX            GOT OFFSET FOR THIS CASE\nGETYSPRM DS    0H\n         ST    R10,SAVEOFFS        THERE IS PARM, SAVE OFFSET FOUND\nGETLENDX DS    0H\n*\n         L     R8,CPPLCBUF         LOAD FOUND OFFSET\n         MVC   2(2,R8),SAVEOFFS+2     INTO NEW COMMAND BUFFER\n*\n         L     R6,SAVER6A          RESTORE\n         L     R5,SAVER5A              WORK\n         L     R4,SAVER4A                  REGISTERS\n*\nGETLEXIT DS    0H\n         B     MAKECPPL            GO MAKE A NEW CPPL WITH THIS INFO\n*\nMOVCOMND MVC   COMMANDA(0),0(R7)        EXECUTED\n************************************************************\n*                                                          *\n*         MAKE A NEW CPPL AND LINK TO CMD USING IT         *\n*                                                          *\n************************************************************\nMAKECPPL DS    0H\n         ST    R5,SAVER5B          SAVE OFF WORK REGISTER\n         ST    R6,SAVER6B          SAVE OFF WORK REGISTER\n         LA    R5,NEWCPPL          POINT TO NEW CPPL AREA\n*                                  MAKE THE CPPL\n         ST    R8,0(,R5)           PUT ADDRESS OF THE CMD BUFF IN\n         L     R6,SAVEUPT          COPY THE OLD UPT\n         ST    R6,4(,R5)           PUT IT INTO ITS PLACE\n         L     R6,ORIGPSCB         COPY ORIGINAL PSCB\n         ST    R6,8(,R5)           AND LOAD IT INTO CPPL\n         L     R6,ORIGECT          GET ORIGINAL ECT TO TINKER WITH,\n*                                   AND TINKER WITH IT.\n         USING ECT,R6\n         MVC   ECTPCMD(8),COMMANDA  THIS IS THE NEW COMMAND NAME\nMAKENGO  DS    0H\n         ST    R6,12(,R5)          LOAD ECT INTO ITS PLACE IN CPPL\n*\n         DROP  R6\n         L     R5,SAVER5B          RESTORE WORK REGISTER\n         L     R6,SAVER6B          RESTORE WORK REGISTER\n************************************************************\n*                                                          *\n*         ISSUE BLDL FOR COMMAND NAME FOUND BY SCAN        *\n*                                                          *\n************************************************************\nHANDLNAM DS    0H\n         MVC   BLDL(64),BLDLMODL\n         MVC   BLDLNAME(8),=CL8' '          CLEAR BLDLNAME AREA\n         L     R14,SAVECMDL                 LENGTH OF COMMAND\n         BCTR  R14,0                        LESS ONE FOR MOVE\n         EX    R14,MOVBNAME                 MOVE NAME INTO AREA\n*\n*   YOU HAVE TO UPPERCASE IT, OR THE LINK EP WILL NEVER FIND IT,\n*   SINCE WE'RE DISABLING THE BLDL.\n*\n*        OC    BLDLNAME(8),=C'        '     UPPERCASE IT\n         TR    BLDLNAME(8),TRTABLE          UPPERCASE IT\n         LA    R7,BLDLERR\n         B     NOBLDL              ZAP THIS TO BC 0 IF BLDL DESIRED\n         SPACE\n         BLDL  0,BLDL\n         SPACE\n         LTR   R15,R15\n         BNZR  R7\nNOBLDL   DS    0H\n         B     LINKIT                       LINK TO NEW COMMAND\nMOVBNAME MVC   BLDLNAME(0),0(R3)    << EXECUTED >>\n         SPACE\n************************************************************\n*                                                          *\n*         CALL THE COMMAND                                 *\n*                                                          *\n************************************************************\nLINKIT   DS    0H\n*        $#SVCKS                   ENTER SUPER STATE KEY=0\n         LA    R1,NEWCPPL          GIVE LINK THE NEW CPPL.\n         XC    LINKAREA(8),LINKAREA\n         LINK  EPLOC=BLDLNAME,SF=(E,LINKAREA)\n*\n*        $#SVCKP                   ENTER NON-SUPER STATE KEY=PROB\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         ISSUE ERROR MESSAGES                             *\n*                                                          *\n************************************************************\n         SPACE\nNAUTH    DS    0H                  COMMAND NOT AUTHORIZED\n         LA    R1,MSGNAUTH\n         LA    R0,L'MSGNAUTH\n         BAL   R14,PUTLINE\n         B     EXIT12\nNOPERAND DS    0H                  THERE ARE NO OPERANDS\n         LA    R1,MSGNOPER\n         LA    R0,L'MSGNOPER\n         BAL   R14,PUTLINE\n         B     EXIT12\n* ----------------------------------------------------------------- *\n*    WE ARE NOT WORRYING ABOUT SCAN ERRORS OR SCAN SYNTAX ERRORS,   *\n*    BECAUSE THAT IS THE REASON FOR THIS MODIFICATION.  WE ARE      *\n*    TRYING TO EXECUTE PROGRAMS WITH ANY NAME, NOT JUST PROGRAMS    *\n*    WITH NAMES THAT IBM APPROVES OF.                               *\n* ----------------------------------------------------------------- *\nSCANERR  DS    0H                  NOT RELEVANT FOR THIS MODIFICATON\n         LA    R1,MSGSCANE\n         LA    R0,L'MSGSCANE\n         BAL   R14,PUTLINE\n         B     EXIT12\nSCANSYNT DS    0H                  NOT RELEVANT FOR THIS MODIFICATON\n         LA    R1,MSGSCANS\n         LA    R0,L'MSGSCANS\n         BAL   R14,PUTLINE\n         B     EXIT12\n* ----------------------------------------------------------------- *\nBLDLERR  DS    0H\nIMPLOPND DS    0H\n         ST    R5,SAVER5A\n         LR    R4,R2               NEW CPPL POINTER\n         L     R6,4(,R13)          ORIGINAL SAVEAREA\n         L     R6,24(,R6)          RESTORE ORIGINAL CPPL POINTER\n         L     R2,0(R6)            POINT TO ORIGINAL CBUF\n         L     R4,0(R4)            POINT TO NEW CBUF\n         LH    R3,0(,R2)           ORIGINAL LENGTH\n         LH    R5,0(,R4)           NEW LENGTH\n         MOVE  (R2),(R3),(R4),(R5) MOVE NEW TO OLD AND PAD\n*                                  NOTE REGS NOT ALTERED BY MOVE\n*                                  BECAUSE WORKREGS USED IN MVCL\n         STH   R3,0(,R2)           RESTORE ORIGINAL LENGTH\n         LR    R1,R6               SET UP CPPL PTR FOR IMPLEXEC\n         L     R5,SAVER5A\n         B     IMPLEXEC\n         LA    R1,MSGBLDLE\n         LA    R0,L'MSGBLDLE\n         BAL   R14,PUTLINE\n         B     EXIT12\n* ----------------------------------------------------------------- *\nPUTLINE  ST    R14,PUTLINS\n         SVC   93\n         L     R14,PUTLINS\n         BR    R14\n* ----------------------------------------------------------------- *\nEXIT12   LA    R15,12                ABNORMAL EXIT\n*\nEXIT     LM    R0,R1,FREECBUF        PROGRAM EXIT\n         LTR   R0,R0\n         BZ    EXITX\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\nEXITX    LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(13)\n         L     R14,12(,R13)\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    HEX DISPLAY ROUTINE - KEEP IN\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R5                    RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* --------------------------------------------------------- *\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nBLANKS   DC    CL80' '\nMSGNOPER DC    C'REQUIRED OPERANDS MISSING'\nMSGSCANE DC    C'SCAN ERROR'\nMSGSCANS DC    C'INVALID COMMAND SYNTAX'\nMSGBLDLE DC    C'COMMAND NOT FOUND'\nMSGNAUTH DC    C'IKJ56500I COMMAND AUCMD NOT FOUND'\n         SPACE\nBLDLMODL DC    H'1,74',CL8' ',XL4'00',CL62' '\n         SPACE\nSUBPOOL  DC    A(X'01000000')\n         DC    F'0'\n*                F O R   U P P E R C A S I N G\nTRTABLE  DC    X'000102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C5D6E6F'\n         DC    X'707172737475767778797A7B7C6D7E7F'\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C7D8E8F'\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C8D9E9F'\n         DC    X'A0A1E2E3E4E5E6E7E8E9AA0B0C0D0E0F'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n*\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nNEWCPPL  DS    4F\nFREECBUF DS    2F\nLINKAREA DS    2F\nORIGPSCB DS    F\nORIGCPPL DS    F\nSAVEECT  DS    F\nORIGUPT  DS    F\nORIGECT  DS    F\nSAVEUPT  DS    F\nPUTLINS  DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\nSAVER5A  DS    F\nSAVER5B  DS    F\nSAVER6A  DS    F\nSAVER6B  DS    F\nSAVE1401 DS    6F\nSAVECPPL DS    F\nSAVECMDL DS    F\nSAVEOFFS DS    F\nSAVELENG DS    F\nSAVENCPP DS    F\nDISPLENG DS    F\nDISPADDR DS    F\nHEXSAVE  DS    3F\nSAV4HEX  DC    F'0'\n         DS    X\nTESTLINE DS    CL80\nCOMMANDL DS    H\n         DS    X\nCOMMANDA DS    CL8\n         DS    0D\nBLDL     DS    F\nBLDLNAME DS    CL8\n         DS    CL62\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJECT\n         SPACE\n         IKJCSPL\n         SPACE\n         IKJCSOA\n         SPACE\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "AUCMD$": {"ttr": 2309, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(AUCMD)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   AUCMD\n ALIAS   #\n SETCODE AC(1)\n SETSSI  CB493300\n ENTRY   AUCMD\n NAME    AUCMD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "AUTHLOAD": {"ttr": 2311, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "BACKDOOR": {"ttr": 2564, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* -------------- Contributed Anonymously ------------------ *\n* ------ This is separate from the rest of the file. ------ *\n*\nBACKDOOR TITLE 'UPDATE USER PROFILES ON THE RACF DATASET'\n*\n*        PARM IS:\n*              SOUSERID\n*        WHERE S IS 0 OR 1 TO TURN SPECIAL OFF OR ON\n*              O IS 0 OR 1 TO TURN OPERATIONS OFF OR ON\n*              USERID IS AN OPTIONAL USERID TO DO IT TO, DEFAULT IS\n*                     THE USERID RUNNING THE JOB\n*\nBACKDOOR $ENTER R12\n         SPACE 1\n*        CHECK IF USERID OF JOB IS OKAY (SYSTEMS PROGRAMMER)\n         USING PSA,R0\n         L     R9,PSAAOLD\n         USING ASCB,R9\n         L     R9,ASCBASXB\n         USING ASXB,R9\n         L     R9,ASXBSENV         @ACEE\n         USING ACEE,R9\n         DROP  R0\n         CLC   =C'SYS',ACEEUSRI    ONE OF US?\n         BNE   RETURN                NO, EXIT DOING NOTHING\n         MVC   USER,ACEEUSER       MOVE USERID IN CASE NONE IN PARM\n         DROP  R9\n         SPACE 1\n*        CHECK PARM\n***\n         L     R3,0(,R1)           GET PARM ADDRESS\n         LH    R4,0(R3)            LOAD LENGTH\n         LTR   R4,R4               WAS THERE A PARM?\n         BZ    NOPARM                NO\n         CH    R4,=H'2'            AT LEAST TWO BYTES OF PARM?\n         BL    NOPARM                NO, PARM IS NO GOOD\n         ICM   R5,B'1000',2(R3)    ON OR OFF (X'F1' OR X'F0')\n         SLL   R5,7                MAKE IT X'80' OR X'00'\n         STCM  R5,B'1000',SWSPEC   AND SAVE IT (SPECIAL)\n         ICM   R5,B'1000',3(R3)    ON OR OFF (X'F1' OR X'F0')\n         SLL   R5,7                MAKE IT X'80' OR X'00'\n         STCM  R5,B'1000',SWOPS    AND SAVE IT (OPERATIONS)\n         CH    R4,=H'2'            JUST THE SWITCHES?\n         BE    NOMOVE                YES, USE USERID FROM ACEE\n*                                    NO, LOOK FOR USERID\n         SH    R4,=H'2'            SUBTRACT LENGTH OF SWITCHES\n         CH    R4,=H'8'            TOO LONG?\n         BH    NOPARM                YES, INVALID SAME AS NO PARM\n         STC   R4,USERL            SAVE LENGTH\n         MVC   USERL+1(8),=CL8' '  BLANK OUT USERID\n         BCTR  R4,0                MINUS 1 FOR EX INSTRUCTION\n         EX    R4,MVC              MOVE USERID\nNOMOVE   DS    0H\n***\n         SPACE 1\n         ICHEINTY ALTERI,TYPE='USR',ENTRY=USERL,                       C\n               ACTIONS=(SPEC,OPS),TESTS=(CHEKSYST)\n         SPACE 3\n         $EXIT RC=(15)\nNOPARM   DS    0H\nRETURN   DS    0H\n         $EXIT RC=0\n         EJECT\n***********************************************************************\n* STORAGE USED BY PROGRAM                                             *\n***********************************************************************\nMVC      MVC   USERL+1(*-*),4(R3)\n         DC    C'BEGINNING OF SAVEAREA OF PROGRAM:'\nSAVEAREA DS    18F                     SAVE AREA FOR SYSTEM REGISTERS\n         DS    0F                  ALIGN EXIT LISTS ON FULLWORD\n*\nUSER     DS    0CL(LUSER)\nUSERL    DC    AL1(0)              LENGTH OF USERID\n         DC    CL8' '\nLUSER    EQU   *-USERL\nSWSPEC   DS    C\nSWOPS    DS    C\n***\nCHEKSYST ICHETEST FIELD=CONGRPNM,FLDATA=(8,SYSPROGS)\nSYSPROGS DC    CL8'SYSGRP'\nSPEC     ICHEACTN FIELD=FLAG2,FLDATA=(1,SWSPEC)\nOPS      ICHEACTN FIELD=FLAG3,FLDATA=(1,SWOPS)\n*\n         LTORG\n*\n         PUSH  PRINT\n         PRINT NOGEN\n         IHAPSA\n         IHAASCB\n         IHAASXB\n         IHAACEE\n         POP   PRINT\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CALANYD": {"ttr": 2567, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERA  JOB (ACCT#),IBMUSER,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//STEP0100 EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=*\n//SORTIN   DD *\n00010101\n//SORTOUT  DD DSN=ANYDATE.CALENDAR.FILE,\n//            DISP=(NEW,CATLG,DELETE),\n//            SPACE=(CYL,(50,50),RLSE)\n//*\n//SYSIN    DD *\n  OPTION COPY\n  OUTFIL REPEAT=3652059,IFOUTLEN=38,\n  IFTHEN=(WHEN=INIT,\n  BUILD=(001:01,8,\n         040:SEQNUM,7,ZD,START=0)),\n  IFTHEN=(WHEN=INIT,\n  OVERLAY=(001:1,8,Y4T,ADDDAYS,40,7,ZD,TOGREG=Y4T,\n           048:SEQNUM,2,ZD,RESTART=(1,6),START=7,\n           060:1,8,Y4T,LASTDAYM,TOGREG=Y4T,\n           070:60,8,Y4T,DATEDIFF,1,8,Y4T,\n           080:001,8,Y4T,TOJUL=Y4T,\n           090:001,8,Y4T,LASTDAYY,TOJUL=Y4T,\n           100:1,4,C'0229',\n           110:100,8,Y4T,WEEKDAY=DIGIT1,\n           009:76,2,\n           011:66,2,\n           013:48,2,ZD,DIV,+7,EDIT=(T),\n           016:1,8,Y4T,WEEKDAY=CHAR3,\n           019:084,3,\n           022:94,3,ZD,SUB,84,3,ZD,EDIT=(TTT),\n           025:110,1,CHANGE=(1,C'*',C'C'),NOMATCH=(C'L'),\n           029:60,8,Y4T,WEEKDAY=CHAR3,\n           032:SEQNUM,7,ZD)),\n  IFTHEN=(WHEN=GROUP,BEGIN=(7,2,CH,EQ,C'01'),\n          PUSH=(026:16,3,120:1,8)),\n  IFTHEN=(WHEN=(1,6,CH,EQ,C'000101'),\n  OVERLAY=(290:C'5 5 5 4 4 4 4'),HIT=NEXT),\n  IFTHEN=(WHEN=(1,6,CH,GT,C'000101'),\n  OVERLAY=(120:1,6,C'01',\n           130:120,8,Y4T,SUBDAYS,+1,TOJUL=Y4T,\n           140:130,7,Y4T,NEXTDMON,TOJUL=Y4T,\n           150:130,7,Y4T,NEXTDTUE,TOJUL=Y4T,\n           160:130,7,Y4T,NEXTDWED,TOJUL=Y4T,\n           170:130,7,Y4T,NEXTDTHU,TOJUL=Y4T,\n           180:130,7,Y4T,NEXTDFRI,TOJUL=Y4T,\n           190:130,7,Y4T,NEXTDSAT,TOJUL=Y4T,\n           200:130,7,Y4T,NEXTDSUN,TOJUL=Y4T,\n           210:060,8,Y4T,SUBDAYS,+7,TOJUL=Y4T,\n           220:210,7,Y4T,NEXTDMON,TOJUL=Y4T,\n           230:210,7,Y4T,NEXTDTUE,TOJUL=Y4T,\n           240:210,7,Y4T,NEXTDWED,TOJUL=Y4T,\n           250:210,7,Y4T,NEXTDTHU,TOJUL=Y4T,\n           260:210,7,Y4T,NEXTDFRI,TOJUL=Y4T,\n           270:210,7,Y4T,NEXTDSAT,TOJUL=Y4T,\n           280:210,7,Y4T,NEXTDSUN,TOJUL=Y4T,\n           290:((224,3,ZD,SUB,144,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           292:((234,3,ZD,SUB,154,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           294:((244,3,ZD,SUB,164,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           296:((254,3,ZD,SUB,174,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           298:((264,3,ZD,SUB,184,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           300:((274,3,ZD,SUB,194,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           302:((284,3,ZD,SUB,204,3,ZD),DIV,+7),ADD,+1,EDIT=(T)),\n           HIT=NEXT),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'MON'),\n  OVERLAY=(15:290,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'TUE'),\n  OVERLAY=(15:292,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'WED'),\n  OVERLAY=(15:294,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'THU'),\n  OVERLAY=(15:296,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'FRI'),\n  OVERLAY=(15:298,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'SAT'),\n  OVERLAY=(15:300,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'SUN'),\n  OVERLAY=(15:302,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T)))\n/*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CALFILE1": {"ttr": 2570, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERC  JOB (ACCT#),IBMUSER,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*-----------------------------------------------------------------*//\n//*                                                                 *//\n//*   DFSORT JCL TO GENERATE PHILIP POLCHINSKI'S CALENDAR FILE.     *//\n//*           (PLEASE SEE CBT FILES 930, 932, OR 933.)              *//\n//*                                                                 *//\n//*-----------------------------------------------------------------*//\n//STEP0100 EXEC PGM=SORT\n//SYSOUT   DD SYSOUT=*\n//SORTIN   DD *\n17530101\n//SORTOUT  DD DISP=(NEW,CATLG,DELETE),DSN=IBMUSER.CALFILE.DATA,\n//            UNIT=3390,DCB=(RECFM=FB,LRECL=35,BLKSIZE=27965),\n//            VOL=SER=WORKE4,SPACE=(CYL,(13,2),RLSE)\n//SYSIN    DD *\n  OPTION COPY\n  OUTFIL REPEAT=309725,IFOUTLEN=35,\n  IFTHEN=(WHEN=INIT,\n  BUILD=(001:01,8,\n         040:SEQNUM,6,ZD,START=0)),\n  IFTHEN=(WHEN=INIT,\n  OVERLAY=(001:1,8,Y4T,ADDDAYS,40,6,ZD,TOGREG=Y4T,\n           047:SEQNUM,2,ZD,RESTART=(1,6),START=7,\n           060:1,8,Y4T,LASTDAYM,TOGREG=Y4T,\n           070:60,8,Y4T,DATEDIFF,1,8,Y4T,\n           080:001,8,Y4T,TOJUL=Y4T,\n           090:001,8,Y4T,LASTDAYY,TOJUL=Y4T,\n           100:1,4,C'0229',\n           110:100,8,Y4T,WEEKDAY=DIGIT1,\n           120:1,6,C'01',\n           130:120,8,Y4T,SUBDAYS,+1,TOJUL=Y4T,\n           140:130,7,Y4T,NEXTDMON,TOJUL=Y4T,\n           150:130,7,Y4T,NEXTDTUE,TOJUL=Y4T,\n           160:130,7,Y4T,NEXTDWED,TOJUL=Y4T,\n           170:130,7,Y4T,NEXTDTHU,TOJUL=Y4T,\n           180:130,7,Y4T,NEXTDFRI,TOJUL=Y4T,\n           190:130,7,Y4T,NEXTDSAT,TOJUL=Y4T,\n           200:130,7,Y4T,NEXTDSUN,TOJUL=Y4T,\n           210:060,8,Y4T,SUBDAYS,+7,TOJUL=Y4T,\n           220:210,7,Y4T,NEXTDMON,TOJUL=Y4T,\n           230:210,7,Y4T,NEXTDTUE,TOJUL=Y4T,\n           240:210,7,Y4T,NEXTDWED,TOJUL=Y4T,\n           250:210,7,Y4T,NEXTDTHU,TOJUL=Y4T,\n           260:210,7,Y4T,NEXTDFRI,TOJUL=Y4T,\n           270:210,7,Y4T,NEXTDSAT,TOJUL=Y4T,\n           280:210,7,Y4T,NEXTDSUN,TOJUL=Y4T,\n           290:((224,3,ZD,SUB,144,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           292:((234,3,ZD,SUB,154,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           294:((244,3,ZD,SUB,164,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           296:((254,3,ZD,SUB,174,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           298:((264,3,ZD,SUB,184,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           300:((274,3,ZD,SUB,194,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           302:((284,3,ZD,SUB,204,3,ZD),DIV,+7),ADD,+1,EDIT=(T),\n           009:76,2,\n           011:66,2,\n           013:47,2,ZD,DIV,+7,EDIT=(T),\n           016:1,8,Y4T,WEEKDAY=CHAR3,\n           019:084,3,\n           022:94,3,ZD,SUB,84,3,ZD,EDIT=(TTT),\n           025:110,1,CHANGE=(1,C'*',C'C'),NOMATCH=(C'L'),\n           028:60,8,Y4T,WEEKDAY=CHAR3,\n           030:SEQNUM,6,ZD)),\n  IFTHEN=(WHEN=GROUP,BEGIN=(7,2,CH,EQ,C'01'),\n          PUSH=(026:16,2,120:1,8)),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'MON'),\n  OVERLAY=(15:290,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'TUE'),\n  OVERLAY=(15:292,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'WED'),\n  OVERLAY=(15:294,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'THU'),\n  OVERLAY=(15:296,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'FRI'),\n  OVERLAY=(15:298,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'SAT'),\n  OVERLAY=(15:300,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T))),\n  IFTHEN=(WHEN=(16,3,CH,EQ,C'SUN'),\n  OVERLAY=(15:302,1,14:15,1,ZD,SUB,13,1,ZD,EDIT=(T)))\n/*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CMD": {"ttr": 2573, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE '   A U C M D  '\n***********************************************************************\n*                                                                     *\n*        'AUCMD'       -     NON-APF-AUTHORIZED COPY                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        INSTALLATION. PRC, MCLEAN VA.\n*        DATE WRITTEN. JANUARY 6 1978.\n*        DATE UPDATED. SEPTEMBER 29 1981.\n*        ATTRIBUTES. RE-ENTRANT, AUTHORIZED.\n*        DESCRIPTION.\n*         THIS TSO COMMAND INVOKES A SPECIFIED TSO COMMAND\n*         AND RUNS IT AUTHORIZED.  FOR SYSTEMS SUPPORT USE ONLY.\n*         MODIFIED TO EXECUTE COMMANDS WITH OTHER NAMES THAN\n*         THE USUAL.\n*\n*        LOG OF CHANGES.\n*         04MAY81 - INSTALLED AT AFDSC/PENTAGON.\n*         29SEP81 - CHECK FOR ASMI. ISSUE TESTAUTH.\n*         15MAY85 - CHANGE THE CHECK FOR MY OWN PURPOSES. ALSO\n*                   ADD MECHANISM TO USE YOUR OWN SVC TO GET\n*                   INTO SUPERVISOR STATE. WE RUN WITH ISPF/PDF\n*                   V1 AND NEED IT.   JIM MARSHALL (JDM)\n*         30DEC12 - ALLOW ALL TSO USERIDS TO USE THIS COMMAND.\n*                   AMODE 31.\n*                   APF-AUTHORIZATION INFORMATION:\n*                   CMD NAME HAS TO BE IN THE IKJEFTE2 TABLE.\n*                   CHANGED \"NOT AUTHORIZED\" MESSAGE TO MAKE\n*                   IT LOOK LIKE THE COMMAND ISN'T THERE.\n*                   THIS IS IN RESPONSE TO THE TESTAUTH MACRO. (SBG)\n*         28NOV16 - ALLOW AUCMD TO EXECUTE PROGRAMS WITH MORE\n*                   OR LESS ARBITRARY NAMES. GOT RID OF IKJSCAN\n*                   NAME CHECKING COMPLETELY.   (SBG WITH BILL\n*                   GODFREY'S HELP)\n*         04DEC16 - CHANGE UPPERCASING TO TRANSLATE TABLE. NOT OC\n*                   AGAINST X'40'. INCLUDES MEMBER NAMES FROM\n*                   X'80' THRU X'BF' TO NOT CHANGE THEM.\n*\n*         THIS COMMAND SHOULD BE LINK-EDITED AUTHORIZED.\n*         THE NAME OF THIS COMMAND MUST BE ADDED TO THE TABLE\n*         OF AUTHORIZED COMMANDS IN CSECT IKJEFTE2.\n*         BUT THE NAMES OF THE COMMANDS INVOKED BY THIS COMMAND\n*         DO NOT HAVE TO BE IN THE TABLE, SO USE OF THIS COMMAND\n*         ALLOWS THE TABLE TO BE SMALLER.\n*\n*         I HAVE 2 MACROS COMMENTED OUT DOWN WHERE WE LINK OFF TO\n*         THE ACTUAL COMMAND. I RUN ISPF/PDF V1 (NOT AUTHORIZED)\n*         AND SO DO NOT USE THE MECHANISM DESCRIBED ABOVE. THUS\n*         WE NEED AN SVC TO GET OURSELVES IN AND OUT OF SUPERVISOR\n*         STATE. IF YOU HAVE SUCH A MECHANISM, JUST REPLACE THE\n*         COMMENTED MACROS WITH YOUR OWN. I DO NOT SUPPLY THE\n*         MACRO BECAUSE I WOULD THEN BE ACCUSED TO 'CONTRIBUTING\n*         TO THE DELINQUENCY OF A SYSTEMS PROGRAMMER'!!!!!\n*                                    JIM MARSHALL\n*\n*         WE USE THIS COMMAND TO INVOKE COMMANDS THAT ARE USED ONLY\n*         BY SYSTEMS PROGRAMMERS. AUTHORIZED COMMANDS THAT ARE USED\n*         BY NON-SYSTEM-PROGRAMMERS ARE PUT IN IKJEFTE2. THAT IS\n*         WHY THIS COMMAND CHECKS THE USERID, AND THAT IS WHY THIS\n*         COMMAND DOES NOT HAVE ITS OWN TABLE OF COMMAND NAMES.\n*\n*         WE ALSO LINK-EDIT A NON AUTHORIZED COPY OF THIS COMMAND,\n*         AND NAME THAT VERSION 'CMD'.  THEN WE ADD 'CMD' TO THE\n*         SUBCOMMAND TABLES IN 'EDIT' AND 'TEST', SO ANY TSO COMMAND\n*         CAN BE USED UNDER EDIT AND TEST BY USING 'CMD'. THIS IS NOT\n*         NECESSARY IF 'PCF' IS INSTALLED.\n*\n* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n*                    FOR DISPLAYS OF HEX DATA                        *\n* ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R5,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R5,HEX\n         L     R5,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    HEXR  &TO,&REG,&FROM\n&NAME    DS    0H\n         ST    R5,SAV4HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LR    R0,&REG\n         LA    R15,&TO\n         BAL   R5,HEX\n         L     R5,SAV4HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         MACRO\n&NAME    MOVE  &TO,&TOL,&FROM,&FROML\n         LCLB  &B(8)               0=FALSE 1=TRUE\n&B(1)    SETB  (T'&TO EQ 'O')\n&B(2)    SETB  (T'&TOL EQ 'O')\n&B(3)    SETB  (T'&FROM EQ 'O')\n&B(4)    SETB  (T'&FROML EQ 'O')\n         AIF   (&B(1) OR &B(2) OR &B(3)).REQOM\n&B(5)    SETB  ('&TO'(1,1) EQ '(')\n&B(6)    SETB  ('&TOL'(1,1) EQ '(')\n&B(7)    SETB  ('&FROM'(1,1) EQ '(')\n         AIF   (&B(4)).NOB8\n&B(8)    SETB  ('&FROML'(1,1) EQ '(')\n.NOB8   ANOP\n         AIF   (NOT(&B(5) AND &B(6) AND &B(7))).NALLR\n         AIF   (NOT &B(4) AND NOT &B(8)).NALLR\n         LR    R0,&TO(1)           RECEIVING FIELD\n         LR    R1,&TOL(1)          RECEIVING LENGTH\n         LR    R14,&FROM(1)        SENDING FIELD\n         AIF   (&B(4)).NOFROML\n         LR    R15,&FROML(1)       SENDING LENGTH\n         ICM   R15,B'1000',=X'40'  PAD IF SENDING IS SHORTER\n         AGO   .MVCL\n.NOFROML LR    R15,&TOL(1)         SENDING LENGTH\n.MVCL    MVCL  R0,R14\n         MEXIT\n.REQOM   MNOTE 4,'REQUIRED OPERAND(S) OMITTED'\n         MEXIT\n.NALLR   MNOTE 4,'ALL OPERANDS MUST BE IN REGISTER FORMAT (PARENS)'\n         MEND\n*  +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ *\n         EJECT\n* ------------------------------------------------------------------ *\n*           THIS IS THE BEGINNING OF THE PROGRAM CODE                *\n* ------------------------------------------------------------------ *\nAUCMD    CSECT\nAUCMD    RMODE 24\nAUCMD    AMODE 31\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'AUCMD'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL) SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(R13)       INITIALIZE FOR REENTRANCY\n         LR    R12,R15             LOAD NEW BASE REGISTER\n         LR    R2,R1               SAVE CPPL POINTER\n         L     R0,@SIZE            SIZE OF GETMAINED AREA\n         GETMAIN R,LV=(0)\n         LR    R9,R1               SAVE ADDR OF GOTTEN AREA\n         USING @DATA,R9\n         LR    R0,R9               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SR    R14,R14             CLEAR R14 AND R15\n         SR    R15,R15             CLEAR R14 AND R15\n         MVCL  R0,R14              ZERO IT ALL\n         SPACE 1\n         LR    R1,R9               POINT TO NEW SAVEAREA\n         ST    R13,4(,R1)          PUT OLD ADDRESS IN NEW SAVE AREA\n         ST    R1,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R1              SWITCH R13 TO NEW SAVE AREA\n* ------------------------------------------------------------------ *\nINITCON  DS    0H                  INITIALIZE CONSTANTS AND FLAGS\n         MVI   COMMANDA-1,X'40'    CLEAR COMMAND NAME AREA\n         MVC   COMMANDA,COMMANDA-1\n         MVC   COMMANDL,=X'0000'   INITIALIZE COMMAND LENGTH AREA\n         MVI   TESTLINE-1,X'40'    BLANK TEST OUTPUT AREA\n         MVC   TESTLINE,TESTLINE-1 FOR DISPLAYS\n         EJECT\n************************************************************\n*                                                          *\n*         CHECK USER'S AUTHORITY TO USE THIS COMMAND.      *\n*                                                          *\n************************************************************\n*\n         ST    R2,ORIGCPPL         CPPL THAT HAS BEEN PASSED TO US\n         L     R15,X'224'          PSAAOLD\n         L     R14,60(,R15)        ASCBTSB\n         LTR   R14,R14             TSO SESSION?\n         BNZ   IMPLTSO             YES - BRANCH\n         L     R14,X'AC'(,R15)     ASCBJBNI\n         LTR   R14,R14             STARTED TASK?\n         BZ    IMPLEXIT            YES - BRANCH\n         B     IMPLEXEC            NO - JOBS NOT AUTHORIZED\nIMPLTSO  L     R15,X'21C'          PSATOLD\n         L     R15,X'B4'(,R15)     TCBJSCB\n         L     R15,X'108'(,R15)    JSCBPSCB\n         ST    R15,ORIGPSCB        STORE ADDRESS OF PSCB AWAY\n         LR    R1,R15              AT PSCB, PUT INTO R1\n         L     R1,X'34'(,R1)       GET UPT ADDR FROM PSCB\n         ST    R1,ORIGUPT          STORE IT AWAY\n         L     R1,ORIGCPPL         RELOAD CPPL ADDRESS\n         L     R1,12(,R1)          GET ECT ADDRESS\n         ST    R1,ORIGECT          PRESERVE IT FOR LATER\n*\n         B     IMPLEXIT            AUTHORIZE EVERYONE\n*\n*      (EXAMPLE OF AUTH CODE BELOW - YOU CAN IMPLEMENT IT BETTER)\n*\n         CLC   0(4,R15),=C'SS02'   SYSTEMS SUPPORT USERID\n         BE    IMPLEXIT            YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         USER NOT AUTHORIZED - CALL IMPLICIT EXEC         *\n*                                                          *\n************************************************************\n         SPACE\nIMPLEXEC DS    0H\n         L     R15,0(,R2)          CPPLCBUF\n         XC    2(2,R15),2(R15)     SET CBUF OFFSET TO IMPLICIT EXEC\n         L     R15,12(,R2)         CPPLECT\n         CLI   20(R15),X'40'       ECTSCMD BLANK?\n         BNE   *+10                YES - SUBCOMMAND NOT FOUND\n         MVC   12(8,R15),=CL8'EXEC' NO - COMMAND NOT FOUND\n         L     R0,@SIZE\n         LR    R1,R13\n         L     R13,4(,R13)\n         FREEMAIN R,A=(1),LV=(0)\n         L     R1,24(,R13)         RESTORE CPPL POINTER\n         LA    R15,20(,R13)        POINT TO 8 BYTE WORKAREA\n         XC    0(8,R15),0(R15)     ZERO WORKAREA\n         XCTL  (2,12),EP=EXEC,SF=(E,(15))\n         SPACE\n************************************************************\n*                                                          *\n*             GETMAIN A NEW COMMAND BUFFER                 *\n*                                                          *\n************************************************************\n*         THIS IS OUR CODE TO AVOID USING IKJSCAN          *\n************************************************************\nIMPLEXIT DS    0H\n*        TESTAUTH FCTN=1\n*        LTR   R15,R15             ARE WE RUNNING AUTHORIZED\n*        BNZ   NAUTH               NO - GO ISSUE ERROR MESSAGE\n         USING CPPL,R2\n         MVC   SAVEUPT,CPPLUPT     SAVE FOR LATER\n         L     R3,CPPLECT\n         ST    R3,SAVEECT          SAVE ECT ADDRESS FOR LATER\n         USING ECT,R3\n         TM    ECTSWS,ECTNOPD      ANY OPERANDS?\n         BO    NOPERAND            NO - BRANCH\n         DROP  R3\n         SPACE\n         L     R3,CPPLCBUF\n         CLC   2(2,R3),=H'0'       IS THERE AN OFFSET?\n* ----------------------------------------------------------- *\n*        THIS IS NOT A CORRECT DETERMINATOR OF OFFSET.        *\n*        IF NO OPERANDS, THEN OFFSET SHOULD BE FOUR           *\n*        LESS THAN THE LENGTH OF THE COMMAND BUFFER.          *\n* ----------------------------------------------------------- *\n         BE    NOPERAND            NO - BRANCH\n         LH    R4,0(,R3)           GET CBUF LENGTH\n         SH    R4,2(,R3)           SUBTRACT OFFSET\n         CH    R4,=H'4'            DOES OFFSET = LENGTH?\n         BNH   NOPERAND            YES - NO OPERANDS\n         LR    R0,R4\n         CH    R0,=H'256'          WILL 256 BYTES BE ADDRESSABLE\n         BNL   *+8                 YES, BRANCH\n         LH    R0,=H'256'          NO, MAKE AT LEAST 256 BYTES\n         O     R0,SUBPOOL\n         ST    R0,FREECBUF         STORE FOR LATER FREEMAIN\n         GETMAIN R,LV=(0)\n         ST    R1,FREECBUF+4\n         LR    R8,R1               ADDRESS OF NEW CPPL\n         XC    0(4,R8),0(R8)       CLEAR BEFORE REFILLING IT\n         STH   R4,0(,R8)           PUT NEW LENGTH IN\n         SH    R4,=H'4'            SUBTRACT PREFIX LENGTH\n         ST    R4,SAVELENG         KEEP IT JUST IN CASE\n         AH    R3,2(,R3)           POINT TO OPERAND - 4\n         AH    R3,=H'4'            POINT TO OPERAND\n         SPACE\n         LA    R7,4(,R8)           POINT TO RECEIVING FIELD\n         SPACE\n* -------------------   BELOW  -   REPLACED BY THE MOVE MACRO\n*        LR    R1,R4\n*        BCTR  R1,0\n*        B     *+10\n*        MVC   0(0,R7),0(R3)\n*        EX    R1,*-6\n* -------------------   ABOVE  -   REPLACED BY THE MOVE MACRO\n*\n*                                  FILL THE NEW CPPL\n         MOVE  (R7),(R4),(R3)\n         SPACE\n         MVC   NEWCPPL(16),0(R2)   COPY CPPL FOR NEW CBUF\n         LA    R2,NEWCPPL          ADDRESS NEW CPPL AREA\n         ST    R2,SAVECPPL         SAVE THE ADDRESS\n         ST    R8,CPPLCBUF         SAVE THE NEW COMMAND BUFFER\n*\n         ST    R3,SAVER3A\n         L     R3,CPPLECT          LOOK AT THE CPPL'S ECT\n         USING ECT,R3\n         OI    ECTSWS2,X'20'       ALLOW ? PARSE HELP\n         DROP  R3\n         L     R3,SAVER3A\n*\n************************************************************\n*                                                          *\n*         GET ACTUAL LENGTH OF THE COMMAND EXECUTED        *\n*          AND GET THE OFFSET TO PUT INTO THE CPPL         *\n*                                                          *\n************************************************************\n*\nGETCOMND DS    0H                  GET ACTUAL COMMAND LENGTH\n         ST    R6,SAVER6A          SAVE\n         ST    R5,SAVER5A              WORK\n         ST    R4,SAVER4A                  REGISTERS\n         LR    R5,R7               POINT TO NEW COMMAND\n         LA    R10,0               START COUNT AT 0\n         LR    R6,R4               LOAD LENGTH OF OCCUPIED BUFFER\nGETLOOP  DS    0H                  GET LENGTH OF ACTUAL COMMAND\n         CLI   0(R5),X'00'         X'00' DELIMITS\n         BE    GETCLEND\n         CLI   0(R5),X'40'         BLANK DELIMITS\n         BE    GETCLEND\n         LA    R5,1(,R5)           BUMP SEARCH ADDRESS\n         LA    R10,1(,R10)         COUNT COMMAND SIZE\n         BCT   R6,GETLOOP\nGETCLEND DS    0H\n         ST    R10,SAVECMDL        SAVE COMMAND SIZE COUNT\n         LR    R14,R10             GET READY FOR EXECUTE\n         BCTR  R14,0               ONE LESS FOR EXECUTE\n         MVC   COMMANDA(8),BLANKS  ASSURE ALL BLANKS TO START\n         EX    R14,MOVCOMND\n*\nGETOFFST DS    0H                  FIND COMMAND OFFSET\n         C     R6,=F'0'            NO PARM?\n         BE    GETNOPRM            TELL THE PROGRAM SO.\n         LA    R5,1(,R5)           BUMP ONE FURTHER\n         LA    R10,1(,R10)\n         CLI   0(R5),X'00'         NOW LOOK FOR NON-ZERO\n         BE    GETOFLUP\n         CLI   0(R5),X'40'         OR NON-BLANK\n         BE    GETOFLUP\n         B     GETOLEND\nGETOFLUP DS    0H                  IS ZERO OR BLANK, BUMP AGAIN.\n         BCT   R6,GETOFFST\nGETOLEND DS    0H                  SAVE OFFSET\n         CLI   0(R5),X'00'         LAST CHARACTER NON-ZERO\n         BE    GETNOPRM            FLAG NO PARM\n         CLI   0(R5),X'40'         OR NON-BLANK?\n         BE    GETNOPRM            FLAG NO PARM\n         B     GETYSPRM            THERE IS A PARM, GET OFFSET.\nGETNOPRM DS    0H                  IF THERE IS NO PARM.....\n         MVC   SAVEOFFS,SAVECMDL   NO PARM, COMMAND LENGTH IS OFFSET\n         B     GETLENDX            GOT OFFSET FOR THIS CASE\nGETYSPRM DS    0H\n         ST    R10,SAVEOFFS        THERE IS PARM, SAVE OFFSET FOUND\nGETLENDX DS    0H\n*\n         L     R8,CPPLCBUF         LOAD FOUND OFFSET\n         MVC   2(2,R8),SAVEOFFS+2     INTO NEW COMMAND BUFFER\n*\n         L     R6,SAVER6A          RESTORE\n         L     R5,SAVER5A              WORK\n         L     R4,SAVER4A                  REGISTERS\n*\nGETLEXIT DS    0H\n         B     MAKECPPL            GO MAKE A NEW CPPL WITH THIS INFO\n*\nMOVCOMND MVC   COMMANDA(0),0(R7)        EXECUTED\n************************************************************\n*                                                          *\n*         MAKE A NEW CPPL AND LINK TO CMD USING IT         *\n*                                                          *\n************************************************************\nMAKECPPL DS    0H\n         ST    R5,SAVER5B          SAVE OFF WORK REGISTER\n         ST    R6,SAVER6B          SAVE OFF WORK REGISTER\n         LA    R5,NEWCPPL          POINT TO NEW CPPL AREA\n*                                  MAKE THE CPPL\n         ST    R8,0(,R5)           PUT ADDRESS OF THE CMD BUFF IN\n         L     R6,SAVEUPT          COPY THE OLD UPT\n         ST    R6,4(,R5)           PUT IT INTO ITS PLACE\n         L     R6,ORIGPSCB         COPY ORIGINAL PSCB\n         ST    R6,8(,R5)           AND LOAD IT INTO CPPL\n         L     R6,ORIGECT          GET ORIGINAL ECT TO TINKER WITH,\n*                                   AND TINKER WITH IT.\n         USING ECT,R6\n         MVC   ECTPCMD(8),COMMANDA  THIS IS THE NEW COMMAND NAME\nMAKENGO  DS    0H\n         ST    R6,12(,R5)          LOAD ECT INTO ITS PLACE IN CPPL\n*\n         DROP  R6\n         L     R5,SAVER5B          RESTORE WORK REGISTER\n         L     R6,SAVER6B          RESTORE WORK REGISTER\n************************************************************\n*                                                          *\n*         ISSUE BLDL FOR COMMAND NAME FOUND BY SCAN        *\n*                                                          *\n************************************************************\nHANDLNAM DS    0H\n         MVC   BLDL(64),BLDLMODL\n         MVC   BLDLNAME(8),=CL8' '          CLEAR BLDLNAME AREA\n         L     R14,SAVECMDL                 LENGTH OF COMMAND\n         BCTR  R14,0                        LESS ONE FOR MOVE\n         EX    R14,MOVBNAME                 MOVE NAME INTO AREA\n*\n*   YOU HAVE TO UPPERCASE IT, OR THE LINK EP WILL NEVER FIND IT,\n*   SINCE WE'RE DISABLING THE BLDL.\n*\n*        OC    BLDLNAME(8),=C'        '     UPPERCASE IT\n         TR    BLDLNAME(8),TRTABLE          UPPERCASE IT\n         LA    R7,BLDLERR\n         B     NOBLDL              ZAP THIS TO BC 0 IF BLDL DESIRED\n         SPACE\n         BLDL  0,BLDL\n         SPACE\n         LTR   R15,R15\n         BNZR  R7\nNOBLDL   DS    0H\n         B     LINKIT                       LINK TO NEW COMMAND\nMOVBNAME MVC   BLDLNAME(0),0(R3)    << EXECUTED >>\n         SPACE\n************************************************************\n*                                                          *\n*         CALL THE COMMAND                                 *\n*                                                          *\n************************************************************\nLINKIT   DS    0H\n*        $#SVCKS                   ENTER SUPER STATE KEY=0\n         LA    R1,NEWCPPL          GIVE LINK THE NEW CPPL.\n         XC    LINKAREA(8),LINKAREA\n         LINK  EPLOC=BLDLNAME,SF=(E,LINKAREA)\n*\n*        $#SVCKP                   ENTER NON-SUPER STATE KEY=PROB\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         ISSUE ERROR MESSAGES                             *\n*                                                          *\n************************************************************\n         SPACE\nNAUTH    DS    0H                  COMMAND NOT AUTHORIZED\n         LA    R1,MSGNAUTH\n         LA    R0,L'MSGNAUTH\n         BAL   R14,PUTLINE\n         B     EXIT12\nNOPERAND DS    0H                  THERE ARE NO OPERANDS\n         LA    R1,MSGNOPER\n         LA    R0,L'MSGNOPER\n         BAL   R14,PUTLINE\n         B     EXIT12\n* ----------------------------------------------------------------- *\n*    WE ARE NOT WORRYING ABOUT SCAN ERRORS OR SCAN SYNTAX ERRORS,   *\n*    BECAUSE THAT IS THE REASON FOR THIS MODIFICATION.  WE ARE      *\n*    TRYING TO EXECUTE PROGRAMS WITH ANY NAME, NOT JUST PROGRAMS    *\n*    WITH NAMES THAT IBM APPROVES OF.                               *\n* ----------------------------------------------------------------- *\nSCANERR  DS    0H                  NOT RELEVANT FOR THIS MODIFICATON\n         LA    R1,MSGSCANE\n         LA    R0,L'MSGSCANE\n         BAL   R14,PUTLINE\n         B     EXIT12\nSCANSYNT DS    0H                  NOT RELEVANT FOR THIS MODIFICATON\n         LA    R1,MSGSCANS\n         LA    R0,L'MSGSCANS\n         BAL   R14,PUTLINE\n         B     EXIT12\n* ----------------------------------------------------------------- *\nBLDLERR  DS    0H\nIMPLOPND DS    0H\n         ST    R5,SAVER5A\n         LR    R4,R2               NEW CPPL POINTER\n         L     R6,4(,R13)          ORIGINAL SAVEAREA\n         L     R6,24(,R6)          RESTORE ORIGINAL CPPL POINTER\n         L     R2,0(R6)            POINT TO ORIGINAL CBUF\n         L     R4,0(R4)            POINT TO NEW CBUF\n         LH    R3,0(,R2)           ORIGINAL LENGTH\n         LH    R5,0(,R4)           NEW LENGTH\n         MOVE  (R2),(R3),(R4),(R5) MOVE NEW TO OLD AND PAD\n*                                  NOTE REGS NOT ALTERED BY MOVE\n*                                  BECAUSE WORKREGS USED IN MVCL\n         STH   R3,0(,R2)           RESTORE ORIGINAL LENGTH\n         LR    R1,R6               SET UP CPPL PTR FOR IMPLEXEC\n         L     R5,SAVER5A\n         B     IMPLEXEC\n         LA    R1,MSGBLDLE\n         LA    R0,L'MSGBLDLE\n         BAL   R14,PUTLINE\n         B     EXIT12\n* ----------------------------------------------------------------- *\nPUTLINE  ST    R14,PUTLINS\n         SVC   93\n         L     R14,PUTLINS\n         BR    R14\n* ----------------------------------------------------------------- *\nEXIT12   LA    R15,12                ABNORMAL EXIT\n*\nEXIT     LM    R0,R1,FREECBUF        PROGRAM EXIT\n         LTR   R0,R0\n         BZ    EXITX\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\nEXITX    LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(13)\n         L     R14,12(,R13)\n         BR    R14\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    HEX DISPLAY ROUTINE - KEEP IN\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         BR    R5                    RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\n         SPACE\n* --------------------------------------------------------- *\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nBLANKS   DC    CL80' '\nMSGNOPER DC    C'REQUIRED OPERANDS MISSING'\nMSGSCANE DC    C'SCAN ERROR'\nMSGSCANS DC    C'INVALID COMMAND SYNTAX'\nMSGBLDLE DC    C'COMMAND NOT FOUND'\nMSGNAUTH DC    C'IKJ56500I COMMAND AUCMD NOT FOUND'\n         SPACE\nBLDLMODL DC    H'1,74',CL8' ',XL4'00',CL62' '\n         SPACE\nSUBPOOL  DC    A(X'01000000')\n         DC    F'0'\n*                F O R   U P P E R C A S I N G\nTRTABLE  DC    X'000102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C5D6E6F'\n         DC    X'707172737475767778797A7B7C6D7E7F'\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C7D8E8F'\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C8D9E9F'\n         DC    X'A0A1E2E3E4E5E6E7E8E9AA0B0C0D0E0F'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n*\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nNEWCPPL  DS    4F\nFREECBUF DS    2F\nLINKAREA DS    2F\nORIGPSCB DS    F\nORIGCPPL DS    F\nSAVEECT  DS    F\nORIGUPT  DS    F\nORIGECT  DS    F\nSAVEUPT  DS    F\nPUTLINS  DS    F\nSAVER3A  DS    F\nSAVER4A  DS    F\nSAVER5A  DS    F\nSAVER5B  DS    F\nSAVER6A  DS    F\nSAVER6B  DS    F\nSAVE1401 DS    6F\nSAVECPPL DS    F\nSAVECMDL DS    F\nSAVEOFFS DS    F\nSAVELENG DS    F\nSAVENCPP DS    F\nDISPLENG DS    F\nDISPADDR DS    F\nHEXSAVE  DS    3F\nSAV4HEX  DC    F'0'\n         DS    X\nTESTLINE DS    CL80\nCOMMANDL DS    H\n         DS    X\nCOMMANDA DS    CL8\n         DS    0D\nBLDL     DS    F\nBLDLNAME DS    CL8\n         DS    CL62\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJECT\n         SPACE\n         IKJCSPL\n         SPACE\n         IKJCSOA\n         SPACE\n         YREGS\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CMD$": {"ttr": 2824, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM - NON-AUTH COPY OF AUCMD\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,RLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(CMD)  (NON-AUTH)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=(OLD,PASS),DSN=&&TEMP\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  *\n INCLUDE SYSLIB\n ORDER   AUCMD\n ALIAS   ##\n SETCODE AC(0)\n SETSSI  CB493300\n ENTRY   AUCMD\n NAME    CMD(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNCLPGA": {"ttr": 2826, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CNCLPG   TITLE 'Make address space cancelable, non-swappable, etc. '\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Function:   To make an address space Cancelable or               *\n*                Non-cancelable, Forcible or Non-forcible,            *\n*                Swappable or Non-swappable.  Or BURN the             *\n*                address space (Version 1.3.9).  KILL the             *\n*                address space is same as BURN, but first             *\n*                the non-MEMTERM bits in the ASCB are                 *\n*                turned off (version 1.4.1).  In this                 *\n*                release, KILL is a synonym for BURN.                 *\n*                                                                     *\n*                APF-authorized TSO command.                          *\n*                Display functions (DISP, CSCB, - ) do not need       *\n*                 APF authorization.                                  *\n*                                                                     *\n*                Cancelable and non-cancelable are determined         *\n*                by bit settings in the address space's CSCB.         *\n*                See the notes below.                                 *\n*                                                                     *\n*                This program is NOT re-entrant.                      *\n*                                                                     *\n*                Enhanced:  (Version 1.3.x)                           *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Notes:                                                           *\n*                                                                     *\n*           CANCELABLE, NON-CANCELABLE, FORCIBLE, NON-FORCIBLE:       *\n*                                                                     *\n*    CSCB        Cancelable, Non-cancelable, Forcible, Non-forcible   *\n*    chain       are determined by bit settings in the address        *\n*                space's CSCB, which is part of the CSCB chain.       *\n*                                                                     *\n*    Jobname     Each active address space has a CSCB in the chain.   *\n*    and/or      You get to a particular address space by running     *\n*    ASID        the entire CSCB chain (mapped by the IEECHAIN        *\n*    match       macro) looking for a match on jobname and/or ASID,   *\n*                and preferably on both.                              *\n*                                                                     *\n*    DISPlay     There may be more than one address space for a       *\n*    or          given job name, and more than one CSCB entry         *\n*    \"CSCB\"      for a given ASID.  The CSCB or DISPlay option        *\n*    option      of CNCLPG will run the entire CSCB chain and         *\n*                it will show ALL the matches for the parameters      *\n*                given.  To display the ENTIRE CSCB chain from start  *\n*                to finish, use a dash ( - ) instead of the jobname.  *\n*                                                                     *\n*    Multiple    If only the jobname or the ASID number alone         *\n*    jobs        are used to do an ACTION, then CNCLPG will stop      *\n*    with the    at the FIRST CSCB which matches, when an ACTION is   *\n*    same name   called for (but NOT for a DISPLAY).  That is why     *\n*                it is better to run the DISPlay (or CSCB) function   *\n*                of CNCLPG first, to display all the possible CSCB    *\n*                entries that might match, before changing any        *\n*                particular address space.  There might be more       *\n*                than one address space with the same jobname or      *\n*                ASID, and you want to change only the correct        *\n*                one, NOT the wrong one.  So it is good practice      *\n*                to display first, and then do a change to the        *\n*                exact address space you want to affect, using        *\n*                BOTH the jobname and ASID(hhhh) parameters.          *\n*                                                                     *\n*           SWAPPABLE AND NON-SWAPPABLE:                              *\n*                                                                     *\n*    SWAP and    Setting an address space to be swappable or          *\n*    NSWP need   non-swappable, is accomplished by executing          *\n*    to run a    a SYSEVENT macro.  This has to execute in the        *\n*    SYSEVENT    target address space, and it was done here by        *\n*    macro in    scheduling an SRB to run in the target address       *\n*    the         space, when it is different from the address         *\n*    target      space running the program.                           *\n*    address                                                          *\n*    space                                                            *\n*                                                                     *\n*    -------------------------------------------------------------    *\n*    BURN        BURN -  Kill the designated address space with a     *\n*    (v 1.3.8)   CALLRTM TYPE=MEMTERM (like a FORCE).  Be careful !   *\n*    -------------------------------------------------------------    *\n*    KILL        KILL -  Kill the designated address space with a     *\n*    (v 1.4.1)   CALLRTM TYPE=MEMTERM (like a FORCE).  Be careful !   *\n*                BURN is now a synonym for KILL. It turns off the     *\n*                ASCBNOMT and ASCBNOMD flags (NON-FORCIBLE flags)     *\n*                before it does the CALLRTM TYPE=MEMTERM, so even     *\n*                if the job was *REALLY* non-forcible because those   *\n*                ASCB bits were set on, we can still kill it.         *\n*    -------------------------------------------------------------    *\n*                                                                     *\n*    Syntax:     TSO Command:  APF-authorized.                        *\n*                                                                     *\n*        CNCLPG |jobid \u00ddASID(hhhh)\u00a8 |CNCL|NCNC|FORC|NFRC|NSWP|SWAP    *\n*               |ASID(hhhh)         |CNCL|NCNC|FORC|NFRC|NSWP|SWAP    *\n*               |                   |CSCB or DISP                     *\n*               |-  (displays the entire CSCB chain)                  *\n*               |?  (displays help)                                   *\n*               |                   |BURN                             *\n*               |                   |KILL                             *\n*               |                   |RLxO or RLxF   (1.3)             *\n*               |                   |DACE           (1.3)             *\n*                                                                     *\n*    Date:       April 15, 2010                                       *\n*                                                                     *\n*    Latest Modification:   May 14, 2017                              *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    Technical Detail:  PUTLINE interface for TSO Output.             *\n*                                                                     *\n*                                                                     *\n*    Changes:  1.  SWAP, NSWP support dropped from this program.      *\n*                   Version is 1.0.0                                  *\n*                                                                     *\n*              2.  Messages and DISP improved, to just show matching  *\n*                   CSCB chain entries, instead of all of them.       *\n*                   - (dash) will show the entire CSCB chain.         *\n*                                                                     *\n*              3.  SWAP, NSWP support put back in this program.       *\n*                   Version is 1.1.0   (June 16, 2010)                *\n*                   It now does your own address space.  The cross    *\n*                   memory stuff was not put in yet, for other        *\n*                   address spaces.                                   *\n*                                                                     *\n*              4.  Now NSWP and SWAP works for all address spaces,    *\n*                   with cross memory stuff now put in.  (1.2.1)      *\n*                                                                     *\n*              5.  RLxO or RLxF functionality.  (1.3.x)               *\n*                                                                     *\n*              6.  Burn an address space, if that is desired.         *\n*                   (Oct 2013)  Version is 1.3.6.  Apply changes      *\n*                   from between CNCLPG 1.2.0 and 1.2.5.              *\n*                                                                     *\n*              7.  Add DACE function to format and display            *\n*                   another address space's ACEE.  (1.3.8)            *\n*                                                                     *\n*              8.  Fixed problem with R10 being used and overlaying   *\n*                   the third base.  R5 substituted for R10 to fix.   *\n*                                                                     *\n*              9.  S047 protection for RLxx and DACE functions.       *\n*                  Display 'Command was not invoked APF authorized.'  *\n*                   instead of getting the S047 abend.                *\n*                                                                     *\n*             10.  Enhance FACEE program to include IHAACEE macro     *\n*                   name fields.  (DACE function)  (1.3.9)            *\n*                                                                     *\n*             11.  Add 4 extra bits in ACEEFLG4 that can be flipped   *\n*                   by the RLxx function.  (1.4.0)                    *\n*                                                                     *\n*             12.  Kill an address space. Same as BURN in this        *\n*                  release.  Before you do the CALLRTM MEMTERM, the   *\n*                  non-forcible flags in the ASCB are turned off.     *\n*                   (May 2017)  Version is 1.4.1.                     *\n*                                                                     *\n*                                                                     *\n*   change   pgmr                   description                       *\n*   -------  -----   ----------------------------------------------   *\n*                                                                     *\n*   1.2.0             Add SRB code to allow nonswappable in xmem      *\n*                                                                     *\n*   1.3.0             Add RLxO and RLxF support                       *\n*                                                                     *\n*   1.3.1             Fix RLxO and RLxF support                       *\n*                     Fix bug when not \"on\" or \"off\" code entered     *\n*                      for RLx* function                              *\n*                                                                     *\n*   1.3.6             Add BURN function to this version. Apply        *\n*                      changes from CNCLPG 1.2.0 to 1.2.5.            *\n*                                                                     *\n*   1.3.8             Add DACE to format another address space's      *\n*                      ACEE and display its entire contents.          *\n*                      Fix third base register overlay problem.       *\n*                                                                     *\n*   1.3.9             Enhance DACE function to include names of       *\n*                      ACEE fields in macro IHAACEE.                  *\n*                                                                     *\n*   1.4.0             Add ACEEFLG4 bits that can be flipped by the    *\n*                      RLxx function.                                 *\n*                                                                     *\n*   1.4.1             Add KILL function. Same as BURN but turn off    *\n*                      the \"no-MEMTERM\" bits in the ASCB before       *\n*                      doing the CALLRTM TYPE=MEMTERM.                *\n*                      (The NON-FORCIBLE bits.)                       *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*  This macro lets you display hex values in a report.\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE           Save work registers.\n         LA    R1,&FROM                 Load from address.\n         LA    R0,&LEN                  Load length of hex number.\n         LA    R15,&TO                  Load to address.\n         BAL   R9,HEX                   BAL to routine.\n         LM    R15,R1,HEXSAVE           Restore work registers.\n         MEND\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n* --       End of Internal Macros......                            -- *\n* ------------------------------------------------------------------- *\n         SPACE 3\nCNCLPG   CSECT\nCNCLPG   AMODE 31\nCNCLPG   RMODE ANY\n*-------------------------------------------------------------*\n*        GENERAL PURPOSE REGISTERS                            *\n*-------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*-------------------------------------------------------------*\n*        ACCESS REGISTERS                                     *\n*-------------------------------------------------------------*\nAR0      EQU   0\nAR1      EQU   1\nAR2      EQU   2\nAR3      EQU   3\nAR4      EQU   4\nAR5      EQU   5\nAR6      EQU   6\nAR7      EQU   7\nAR8      EQU   8\nAR9      EQU   9\nAR10     EQU   10\nAR11     EQU   11\nAR12     EQU   12\nAR13     EQU   13\nAR14     EQU   14\nAR15     EQU   15\n*-------------------------------------------------------------*\n*                  BEGIN THE ACTUAL CODE                      *\n*-------------------------------------------------------------*\n         USING CNCLPG,R15          (Establish temporary base).\n         B     BEGIN               Skip over eyecatcher.\nEYEC0    DC    AL1(EYECL)          Exclusive length of header.\nEYEC     DC    C' CNCLPG - &SYSDATE - &SYSTIME -'   Eyecatcher\n         DC    C' VER 1.4.1   '\n         DC    C'   '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     Save caller's registers\n         LR    R6,R1               Preserve CPPL pointer.\n         LR    R12,R15             Copy base.\n         USING CNCLPG,R12,R11,R10  (Tell assembler).\n         LA    R11,4095(,R12)      Load bases.\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R14,R13             Copy caller's save area pointer.\n         LA    R13,SAVE            Point to my save area.\n         ST    R13,8(,R14)         Chain ...\n         ST    R14,SAVE+4          ... Save areas.\n         SPACE 1\nAUTHTEST DS    0H\n         ST    R1,SAVER1A\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCB WORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,180(,R1)         TCBJSCB\n         L     R1,264(,R1)         JSCBPSCB\n         LA    R1,0(,R1)           CLEAR HI ORDER BYTE\n         LTR   R1,R1               IS THERE A PSCB\n         BZ    NOTFOUND            NO, ISSUE COMMAND-NOT-FOUND MSG\n         TM    X'10'(R1),X'80'     PSCB OPER AUTHORITY?\n         BZ    NOTFOUND            NO, ISSUE COMMAND-NOT-FOUND MSG\n         L     R1,SAVER1A\nINITCON  DS    0H                  Initialize some constants.\n         MVI   FLAG1,X'00'\n         MVI   FLAG2,X'00'\n         MVI   FLAG3,X'00'\n         MVI   ONSWIT,X'00'\n         MVI   ERRASID,X'00'\n         MVI   CANCINDC,X'00'\n         MVI   KILLFLAG,X'00'\n         MVI   OUTPUT-1,X'40'\n         MVC   OUTPUT,OUTPUT-1\n         MVI   NEWCHACT,X'00'\n         L     R0,=V(ACEECSEC)     Save ACEE copy area CSECT entry\n         ST    R0,SAVACEEC          point and save it for later use.\n         L     R0,=V(FACEE)        Save entry point of FACEE which is\n         ST    R0,SAVFACEE          ACEE formatting and dump program.\nMYASID   DS    0H                  Get my own ASID.\n         L     R2,X'224'           Point to PSAAOLD (my ASCB)\n         LA    R2,X'24'(,R2)       Point to my own ASID (ASCBASID)\n         MVC   OWNASID(2),0(R2)    Save it for comparison later\n         B     PRTITLE             Branch past constant\n*\nOWNASID  DS    H                   Save my own ASID.\n*\nPRTITLE  DS    0H                  Print program title.\n         APUT  MESSAGET,L'MESSAGET\n         APUT  MESSAGEU,L'MESSAGEU\nCONT0    DS    0H                  Look at command's parameters.\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No.  Get out.\n         L     R1,0(,R6)           Pt to cmd buffer. (R6 reused later)\n         LTR   R1,R1               Any CMD buffer?\n         BZ    EOJ8                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,WMESS2            Zero, message to enter userid.\n         BC    5,EOJ8              Less, or overflow, out.\n** ---------------------------------------------------------------- **\nPARM     DS    0H                  Do all program functionality.\n         BAL   R9,GETIDS           Get parameters and execute\n*                                   any function called for.\n         B     EOJ0                Get out.\n** ---------------------------------------------------------------- **\nWMESS2   DS    0H                  Print help messages.\n         BAL   R9,PRINTERR\n         B     EOJ4\n** ---------------------------------------------------------------- **\nEOJ0     DS    0H                  End of job.\n         APUT  RETURN0,L'RETURN0\n         LA    R15,0               Set CC = 0.\n         B     RETURN\nEOJ4     DS    0H\n         APUT  RETURN4,L'RETURN4\n         LA    R15,4               Set CC = 4.\n         B     RETURN\nEOJ8     DS    0H\n         APUT  RETURN8,L'RETURN8\n         LA    R15,8               Set CC = 8.\n         B     RETURN\nRETURN   L     R13,SAVE+4          Return to caller.\n         ST    R15,16(,R13)        Put RC into passed save area.\n         LM    R14,R12,12(R13)\n         BR    R14\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Command not APF authorized message.\n         APUT  MESSAGNA,L'MESSAGNA\n         B     EOJ4\n** ---------------------------------------------------------------- **\nNOTFOUND DS    0H                  Command NOT ALLOWED message.\n         APUT  MESSAGAU,L'MESSAGAU\n         B     RETURN\n** ---------------------------------------------------------------- **\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              Get the parameters for the command.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   Notes:  The ASID(xxx) can be coded first, without a userid.   *\n*           A dash can be coded first, to run the entire CSCB     *\n*            chain and display all the jobnames in it, with       *\n*            their associated ASIDs.  ? coded first gives HELP.   *\n*           If you code the word CSCB or DISP(lay) after either   *\n*            a jobname or an ASID(hhhh) then a display of ALL     *\n*            matching CSCB chain entries will be displayed, and   *\n*            no changes will be made.                             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETIDS   DS    0H                  Get all parameters for the program.\n         ST    R9,SAVER9A\n         ST    R4,SAVER4C\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,8                Load reg for BCT loop.\n         LR    R7,R1               Initialize pointer to first\n         LA    R7,0(,R7)                character of the ID field.\n         LA    R8,0                Initialize character count.\n         MVC   JOBID(8),BLANKS     Clear (first param - JOBNAME) field.\n         LA    R4,JOBID            Point reg to beginng of JOBID field.\n*\nCUTIDLEN DS    0H                  Look at the JOBID field first.\n*                                  (May contain ASID( or CSCB.)\n*\n         CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the field.\n         MVC   0(1,R4),0(R7)       Move only one character at a time.\n         OC    JOBID(8),BLANKS     And uppercase the partial jobid.\n*\n*   Is this a run of the CSCB chain only?\n* -- >  Test for CSCB  first  ---- below\n         CLI   JOBID,C'-'          Did we code '-' first?\n         BNE   CSCBHELP            No. Try if help asked for.\n         B     CSCBRUN1            Yes. Run entire CSCB chain.\n* - > Help\nCSCBHELP DS    0H\n         CLI   JOBID,C'?'          Help?\n         BNE   NOCSCB              No. Skip this code.\n         BAL   R9,PRINTERR         Yes. Print messages\n         B     EOJ0                  and get out with code 0.\n* - > Help\nCSCBRUN1 DS    0H\n         ST    R8,SAVER8A          Store count for display if needed.\n         OI    FLAG2,X'40'         Mark that this is CSCB only run.\n         BAL   R9,RUNCSCB          Do the run for CSCB chain.\n         B     EOJ0                Out with normal return code.\nNOCSCB   DS    0H\n* -- >  Test for CSCB  first  ---- above\n*\n*   Was the ASCB(hhh) parameter coded without the jobid?\n* -- >  Test for ASID( first  ---- below\n         CLC   JOBID(L'ASIDC),ASIDC  Did we code ASID( in jobid field?\n         BNE   NOASIDF             No. Pass this code.\n         OI    FLAG1,X'01'         Flag that ASID( ) was first.\n         NI    FLAG1,X'FF'-X'02'   Turn off Jobname in jobid field flag\n         MVC   ASIDWKL(L'ASIDC),JOBID  Move the ASID( to proper field.\n         MVC   JOBID,BLANKS        Blank out Job ID if ASID( coded.\n         LA    R7,1(,R7)           Bump another character.\n         LA    R8,1(,R8)           Count another character.\n         LA    R6,1                Set number of branches later.\n*                                  This will limit number of params\n*                                   that are searched for.\n         B     ASIDONLY            Bypass all the real jobname stuff.\n* -- >  Test for ASID( first  ---- above\nNOASIDF  DS    0H                  ASID( is not the first parameter.\n         LA    R4,1(,R4)           Bump another character.\n         LA    R7,1(,R7)           Bump another character.\n         LA    R8,1(,R8)           Count another character.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for the next blank, up till 8.\nNOMORCUT DS    0H\n         STC   R8,SAVCOUNT         Save length of Jobname\n         L     R4,SAVER4C          Restore work register for use later.\n         OC    JOBID(8),BLANKS     Uppercase the new Job Id.\n         OI    FLAG1,X'02'         Set 'Jobname Coded' flag.\n*  -  Display the found JOBID - below\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Search Jobname:'\n         MVC   OUTPUT+17(8),JOBID\n         APUT  OUTPUT,30\n         APUT  MESSAGEL,L'MESSAGEL\n*  -  Display the found JOBID - above\n         LA    R6,1                Set number of branches later.\n*                                  This will limit number of params\n*                                   that are searched for.\n         B     LOOKKEYW\n*  Constants - below - ***\nJOBID    DC    C'        '         STORE PARM USERID HERE\nBLANKS   DC    C'        '         8 BLANKS\nMESSAGET DC    C'CNCLPG 1.4.1 - Make a Job, STC or TSU Cancelable, etc.X\n                (? for help)'\nMESSAGEU DC   C'------ ----- - ---- - ---- --- -- --- ----------- ----'\nMESSAGEL DC    C'----------------------------'\nMESSAGEM DC    C'-----------------------------------------------'\nMESSAG2A DC    C'Enter JOBNAME and/or ASID(hhhh) after COMMAND name,'\nMESSAG2B DC    C'   then CNCL, NCNC, FORC, NFRC, NSWP, SWAP, CSCB or DIx\n               SP.'\nMESSAG2C DC    C'   DISPlay or CSCB will display CSCB chain entries,'\nMESSAG2D DC    C'   without changing them.'\nMESSAG2V DC    C'To get rid of the address space, code BURN or KILL.'\nMESSAG2E DC    C' When affecting a job, we want to be accurate, '\nMESSAG2F DC    C'  therefore you should use the DISPlay option first.'\nMESSAG2Z DC    C'           SEE THE NOTES, BELOW.  '\nMESSAG2G DC   C' To display the whole CSCB, code - (dash) for JOBNAME.'\nMESSAG2H DC    C' To see this help message, code ? for JOBNAME.'\nMESSAG2I DC    C'Notes :     ** VERY IMPORTANT TO READ **'\nMESSAG2J DC   C' CSCB (DISP) display for an ASID shows all occurrences'\nMESSAG2K DC    C'  for that ASID, regardless of JOBNAME.      '\nMESSAG2L DC C' CSCB (DISP) display for a JOBNAME shows all occurrences'\nMESSAG2M DC    C'  for that JOBNAME, regardless of ASID.      '\nMESSAG2N DC    C' CNCL, NCNC, FORC, NFRC, NSWP, SWAP will change the FIx\n               RST'\nMESSAG2O DC    C'  entry in the CSCB chain that matches, if MULTIPLE '\nMESSAG2P DC    C'  entries exist. But DISP will display ALL applicable'\nMESSAG2Q DC    C'  matching entries in the CSCB chain, so you can see'\nMESSAG2R DC    C'  which one you want to change specifically.'\nMESSAG2S DC    C' When you code BOTH jobname and asid, to CHANGE it,'\nMESSAG2T DC    C'  then ONLY that specific job and asid gets changed.'\nMESSAGE3 DC    C'WE GOT HERE'\nMESSAGE4 DC    C'TEST CHECK THIS'\nMESSAGNG DC    C'Job was not done. SYSEVENT return code was     '\nMESSAGNS DC    C'Job xxxxxxxx for ASID HHHH made non-swappable.'\nMESSAGSW DC    C'Job xxxxxxxx for ASID HHHH was made swappable.'\nMESSAGAN DC    C'Job xxxxxxxx for ASID HHHH already non-swappable.'\nMESSAGAS DC    C'Job xxxxxxxx for ASID HHHH was already swappable.'\nMESSAGFN DC    C'Function xxxx was called for.'\nMESSAGBU DC    C'Job xxxxxxxx for ASID HHHH has been burned.'\nMESSAGKI DC    C'Job xxxxxxxx for ASID HHHH has been killed.'\nMESSAGAU DC    C'IKJ56500I COMMAND CNCLPG NOT FOUND'\nRETURN0  DC    C'Return code is 0'\nRETURN4  DC    C'Return code is 4'\nRETURN4R DC    C'Return code is 4 from the SETRLD function'\nRETURN8  DC    C'Return code is 8'\n*                     ***  Places to save registers  ***  below\nSAVER1A  DS    F\nSAVER3A  DS    F\n*AVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER3E  DS    F\nSAVER3F  DS    F\nSAVER4A  DS    F\nSAVER4B  DS    F\nSAVER4C  DS    F\nSAVER4D  DS    F\n*AVER5A  DS    F\nSAVER6A  DS    F\n*AVER6B  DS    F\nSAVER7A  DS    F\nSAVER7B  DS    F\nSAVER8A  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nSAVER9G  DS    F\nSAVER9H  DS    F\nSAVER9I  DS    F\nSAVER9J  DS    F\nSAVER9K  DS    F\nSAVER9L  DS    F\n*AVER9M  DS    F\n*AVER9N  DS    F\nSAVER9O  DS    F\n*AVER9P  DS    F\n*                     ***  Places to save registers  ***  above\nSAVCOUNT DS    X\nKILLFLAG DS    X\nDUBLZERO DC    D'0'\nFULLZERO DC    F'0'\nCANCINDC DC    X'00'\nCANCKEY0 DC    X'00'\nNEWCHACT DC    X'00'\n*  Constants - above - ***\nLOOKKEYW DS    0H                  Look for additional keywords.\n         LA    R7,1(,R7)           Bump command buffer pointer.\n         LA    R8,1(,R8)           Bump character counter.\n         CR    R8,R5               End of command buffer?\n         BNL   GETIDEND            Yes. Don't look any more.\n         MVC   ASIDWKL(5),BLANKS   Clear parameter work field.\n         MVC   ASIDWKL(5),0(R7)    Next 5 characters to work field.\nASIDONLY DS    0H                  Jump to here if ASID( coded first.\n         OC    ASIDWKL(4),BLANKS   Uppercase work field.\n         CLC   ASIDC,ASIDWKL       Is the ASID( keyword there?\n         BE    DOASID              Yes. Process it.\n         CLC   CNCLC,ASIDWKL       Is the CNCL  keyword there?\n         BE    DOCNCL              Yes. Process it.\n         CLC   NCNCC,ASIDWKL       Is the NCNC  keyword there?\n         BE    DONCNC              Yes. Process it.\n         CLC   SWAPC,ASIDWKL       Is the SWAP  keyword there?\n         BE    DOSWAP              Yes. Process it.\n         CLC   NSWPC,ASIDWKL       Is the NSWP  keyword there?\n         BE    DONSWP              Yes. Process it.\n         CLC   FORCC,ASIDWKL       Is the FORC  keyword there?\n         BE    DOFORC              Yes. Process it.\n         CLC   NFRCC,ASIDWKL       Is the NFRC  keyword there?\n         BE    DONFRC              Yes. Process it.\n         CLC   CSCBC,ASIDWKL       Is the CSCB  keyword there?\n         BE    DOCSCB              Yes. Process it.\n         CLC   DISPC,ASIDWKL       Is the DISP  keyword there?\n         BE    DOCSCB              Yes. Process it.\n         CLC   RL,ASIDWKL          Is RLxO or RLxF there?\n         BE    DOACEE              Yes. Process it.\n         CLC   BURNC,ASIDWKL       Is the BURN  keyword there?      BUR\n         BE    DOBURN              Yes. Process it.                 BUR\n         CLC   KILLC,ASIDWKL       Is the KILL  keyword there?      KIL\n         BE    DOKILL              Yes. Process it.                 KIL\n         CLC   DACEC,ASIDWKL       Is the DACE  keyword there?\n         BE    DODACEE             Yes. Process it.\n         B     LOOKKEYW            Go loop and look at next character.\nASIDWKL  DC    CL5' '              Second parameter work area.\n*\nASIDC    DC    C'ASID('            Literals....\nCNCLC    DC    C'CNCL'\nNCNCC    DC    C'NCNC'\nSWAPC    DC    C'SWAP'\nNSWPC    DC    C'NSWP'\nFORCC    DC    C'FORC'\nNFRCC    DC    C'NFRC'\nCSCBC    DC    C'CSCB'\nDISPC    DC    C'DISP'\nRL       DC    C'RL'\nBURNC    DC    C'BURN'\nKILLC    DC    C'KILL'\nDACEC    DC    C'DACE'\n*\nDOASID   DS    0H                  Look for hex value of the ASID.\n         OI    FLAG1,X'04'         Show that ASID( was coded.\n         BAL   R9,GETASID          Go get the rest of the parameters.\n         MVC   ASIDWKL(5),BLANKS   Blank out the second wkarea for\n*                                   a further parameter search.\n         B     LOOKKEYW            Re-loop to look further for params.\n*\nDOCNCL   DS    0H                  Handle CNCL (cancelable) keyword.\n         OI    CANCINDC,X'08'      Show which CHACT bit is affected.\n         OI    FLAG2,X'01'         Show that CNCL was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'01'        Set to OR the bits\n         NI    ONSWIT,X'FF'-X'02'   and not to AND the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n* ------------------------------------------------------------------- *\n*                                    Print the action code.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),CNCLC\n         APUT  OUTPUT,25\n*                                    Print the bit in CHACT affected.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDONCNC   DS    0H                  Handle NCNC (non-cancelable) keyword\n         OI    CANCINDC,X'08'      Show which CHACT bit is affected.\n         OI    FLAG2,X'02'         Show that NCNC was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'02'        Set to AND the bits\n         NI    ONSWIT,X'FF'-X'01'   and not to OR the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n*                                    Print the action code.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),NCNCC\n         APUT  OUTPUT,25\n*                                    Print the bit in CHACT affected.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDOSWAP   DS    0H                  Not active yet.\n         OI    FLAG2,X'04'\n         MVC   MESSAGFN+9(4),SWAPC\n         APUT  MESSAGFN,L'MESSAGFN\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         BAL   R9,KEY0SWNS\n         BCT   R6,LOOKKEYW\n         B     GETIDEND\n* ------------------------------------------------------------------- *\nDONSWP   DS    0H                  Not active yet.\n         OI    FLAG2,X'08'\n         MVC   MESSAGFN+9(4),NSWPC\n         APUT  MESSAGFN,L'MESSAGFN\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         BAL   R9,KEY0SWNS\n         BCT   R6,LOOKKEYW\n         B     GETIDEND\n* ------------------------------------------------------------------- *\nDOFORC   DS    0H                  Handle FORC (forcible) keyword\n         OI    FLAG2,X'10'         Show which CHACT bit is affected.\n         OI    CANCINDC,X'01'      Show that FORC was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'01'        Set to OR the bits\n         NI    ONSWIT,X'FF'-X'02'   and not to AND the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n*\n         MVC   OUTPUT,OUTPUT-1       Print the action code.\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),FORCC\n         APUT  OUTPUT,25\n*\n         MVC   OUTPUT,OUTPUT-1       Print the bit in CHACT affected.\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDONFRC   DS    0H                  Handle NFRC (non-forcible) keyword\n         OI    FLAG2,X'20'         Show which CHACT bit is affected.\n         OI    CANCINDC,X'01'      Show that NFRC was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'02'        Set to AND the bits\n         NI    ONSWIT,X'FF'-X'01'   and not to OR the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n*\n         MVC   OUTPUT,OUTPUT-1       Print the action code.\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),NFRCC\n         APUT  OUTPUT,25\n*\n         MVC   OUTPUT,OUTPUT-1       Print the bit in CHACT affected.\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDOCSCB   DS    0H\n         OI    FLAG1,X'08'         Show CSCB keyword was coded.\n         OI    FLAG2,X'40'         Show CSCB keyword was coded.\n         MVC   OUTPUT,OUTPUT-1       Print the action code.\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),CSCBC\n         MVC   OUTPUT+23(9),=C'(DISPlay)'\n         APUT  OUTPUT,35\n         BAL   R9,RUNCSCB          Run the CSCB chain with print.\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDOACEE   DS    0H                  Not active yet.\n         MVC   MESSAGFN+9(4),ASIDWKL  Display entered\n         APUT  MESSAGFN,L'MESSAGFN       function code.\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n         BAL   R9,SETRLD           Do RL function.\n         TM    FLAG3,X'01'         Not \"on\" or \"off\"?\n         BO    EOJ4                Report error.\n         B     GETKEYNR            End normally.\n* ------------------------------------------------------------------- *\nGETIDEND DS    0H                  End of keyword processing.\n         TM    FLAG2,X'FF'         Check if any real actions asked  BUR\n         BM    GETKEYNR            Yes, some were.\n         APUT  MESSAGEY,L'MESSAGEY    No. Display help messages.\n         BAL   R9,PRINTERR\n         B     EOJ4                   And end with code = 4.\nGETKEYNR DS    0H                  Real actions WERE asked for.\n         B     EOJ0                So end with normal return code.\n         L     R9,SAVER9A\n         BR    R9\n** ---------------------------------------------------------------- **\nSETRLD   DS    0H                  Do the RL function\n         BAKR  R9,0                Save all registers on the stack\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match\n         BAL   R9,GETASCB          Get the ASCB number\n         LR    R9,R15              Point to ASCB\n         L     R9,0(,R9)            Point to ASCB\n         L     R5,ASCBASXB-ASCB(,R9)   Get ASXB\n*--------------------------------------------------------------*\n*                    Get bit setting                           *\n*--------------------------------------------------------------*\n         LA    R9,ACEETBL         Get ACEE table with bit settings\n         USING ACEEFC,R9          Address our table\nLOOKFUN  DS    0H                 Loop thru table\n         CLI   FUNCT,255          Not found - end of table\n         BE    ERROR              Error; get out\n         CLC   FUNCT,ASIDWKL+2    Found function?\n         BE    FOUFUNC            YES;\n         LA    R9,3(,R9)          NEXT\n         B     LOOKFUN            LOOK FOR FUNCTION AGAIN\nFOUFUNC  DS    0H\n         MODESET MODE=SUP,KEY=ZERO\n         XR    R6,R6              Clear all Registers\n         LH    R6,FOUNASID        Get Asid\n         LA    R2,1               Give us AUTHORITY\n         AXSET AX=(2)\n         SSAR  R6                 Set SECONDARY ADDRESS SPACE\n         SAC   512                AR MODE\n         USING ACEE,R5            Address ACEE\n         LAM   R9,R9,=F'0'\n         LAM   AR7,AR7,=F'1'      SECONDARY ADDRESS SPACE\n         LAM   AR5,AR5,=F'1'      SECONDARY ADDRESS SPACE\n         L     R5,ASXBSENV-ASXB(,R5) Get ACEE\n         LA    R7,ACEEFLG1        Get flag one\n         XR    R8,R8              clear r8\n         IC    R8,DISP            get disp\n         LA    R7,0(R8,R7)        Point to byte\n         CLI   ASIDWKL+3,C'F'     Turn  it off\n         BE    OFF                YES;\n         CLI   ASIDWKL+3,C'O'     Turn  it on\n         BE    BITON              YES;\n         OI    FLAG3,X'01'        ERROR has been marked\n         B     RESET              Back to normal mode\nBITON    DS    0H\n         OC    0(1,R7),BITSET     set the bit\n         B     RESET\nOFF      DS    0H\n         MVI   BYTE,255           all f's\n         XC    BYTE,BITSET        Flip the bits\n         NC    0(1,R7),BYTE       turn it off\nRESET    DS    0H\n         LH    R6,OWNASID         re-set sasid\n         SSAR  R6\n         SAC   0\n         LAM   AR5,AR5,=F'0'      SECONDARY ADDRESS SPACE\n         LAM   AR7,AR7,=F'0'      SECONDARY ADDRESS SPACE\n         MODESET KEY=NZERO,MODE=PROB\n         TM    FLAG3,X'01'        Not \"on\" or \"off\" command?\n         BO    ERROR              Bad command. Show error. Code 4.\nRETZERO  DS    0H\n         XR    R15,R15            Clear return code\n         B     RET\nERROR    DS    0H                 Don't do actions, display entered\n         APUT  RETURN4R,L'RETURN4R\n         LA    R15,4                function, and show help.\nRET      DS    0H\n         PR\n** ---------------------------------------------------------------- **\n* ------------------------------------------------------------------- *\nDODACEE  DS    0H                  Display this ASID's ACEE\n         MVC   MESSAGFN+9(4),ASIDWKL  Display entered\n         APUT  MESSAGFN,L'MESSAGFN       function code.\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n         BAL   R9,SETDACEE         Do DACE function.\n         B     GETKEYNR            RETURN\nSETDACEE DS    0H                  Do the DACE function\n         BAKR  R9,0                Save all registers on the stack\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match\n         BAL   R9,GETASCB          Get the ASCB number\n         LR    R9,R15              Point to ASCB\n         L     R9,0(,R9)            Point to ASCB\n         L     R5,ASCBASXB-ASCB(,R9)   Get ASXB\n*--------------------------------------------------------------*\nCOPYACEE DS    0H                  Mimic the RL code to get ACEE\n         MODESET MODE=SUP,KEY=ZERO\n         XR    R6,R6               Clear all Registers\n         LH    R6,FOUNASID         Get Asid\n         LA    R2,1                Give us AUTHORITY\n         AXSET AX=(2)\n         SSAR  R6                  Set SECONDARY ADDRESS SPACE\n         SAC   512                 AR MODE\n         USING ACEE,R5             Address ACEE\n         LAM   R9,R9,=F'0'\n         LAM   AR7,AR7,=F'1'       SECONDARY ADDRESS SPACE\n         LAM   AR5,AR5,=F'1'       SECONDARY ADDRESS SPACE\n         L     R5,ASXBSENV-ASXB(,R5) Get ACEE\n         ST    R3,SAVER3F          Save\n         ST    R4,SAVER4D            work registers\n         L     R3,SAVACEEC         Get other adrspc's ACEE\n         USING ACEECSEC,R3\n         XC    ACEECOPY,ACEECOPY   Clear the area out\n         MVC   ACEECOPY(192),0(R5) Do the cross addrspc copy\n         ST    R5,ACEEADDR\n         LH    R6,OWNASID          re-set sasid\n         SSAR  R6\n         SAC   0\n         LAM   AR5,AR5,=F'0'       SECONDARY ADDRESS SPACE\n         LAM   AR7,AR7,=F'0'       SECONDARY ADDRESS SPACE\n         MODESET KEY=NZERO,MODE=PROB\n* -----------------------          Continue using the gotten data.\n*        APUT  ACEECOPY,96         Test display to see if the\n*        APUT  ACEECOPY+96,96       gotten data is correct.\n* -----------------------\n*                                  Call FACEE program to display\n*                                   the gotten ACEE block info.\n         L     R15,SAVFACEE        Load entry pt of FACEE program.\n         XR    R1,R1               Clear R1 to be sure.\n         L     R1,SAVACEEC         Load address of ACEE image.\n         BALR  R14,R15             Call FACEE to display the data.\n         DROP  R3\n         L     R3,SAVER3F          Restore\n         L     R4,SAVER4D            work registers\n         XR    R15,R15             Clear return code\n         PR\nSAVACEEC DC    A(0)                Address of ACEE gotten copy\nSAVFACEE DC    A(0)                Address of FACEE entry point\n** ---------------------------------------------------------------- **\nACEETBL  DC    C'S',X'80',X'00'     ACEESPEC\n         DC    C'O',X'20',X'00'     ACEEOPER\n         DC    C'U',X'10',X'00'     ACEEAUDT\n         DC    C'P',X'02',X'00'     ACEEPRIV\n         DC    C'K',X'01',X'00'     ACEERACF\n         DC    C'A',X'80',X'01'     ACEEALTR\n         DC    C'C',X'40',X'01'     ACEECNTL\n         DC    C'D',X'20',X'01'     ACEEUPDT\n         DC    C'R',X'10',X'01'     ACEEREAD\n         DC    C'0',X'01',X'01'     ACEENONE\n         DC    C'G',X'80',X'02'     ACEEGRPA\n         DC    C'N',X'01',X'02'     ACEENPWR\n         DC    C'H',X'20',X'12'     ACEEUATH\n         DC    C'V',X'08',X'12'     ACEEDASD\n         DC    C'T',X'04',X'12'     ACEETAPE\n         DC    C'M',X'02',X'12'     ACEETERM\n         DC    X'FF'\n*\nACEEFC   DSECT\nFUNCT    DS   C                     FUNCTION\nBITSET   DS   X                     Bit Setting\nDISP     DS   X                     Displacement from ACEEFLG1\nCNCLPG   CSECT                      Reestablish\nBYTE     DS   X\n** ---------------------------------------------------------------- **\nHEX      DS    0H                  Display hex values.\n         ST    R9,SAVER9B\n         MVC   1(1,R15),0(R1)      Move byte.\n         UNPK  0(3,R15),1(2,R15)   Unpack.\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         Increment output pointer.\n         LA    R1,1(,R1)           Increment input pointer.\n         BCT   R0,HEX              Decrement length, then loop.\n         MVI   0(R15),C' '         Blank the trailing byte.\n         L     R9,SAVER9B\n         BR    R9                  Return to caller.\nHEXTAB   DC    C'0123456789ABCDEF' Translate table.\n** ---------------------------------------------------------------- **\nGETASID  DS    0H                  Get hex ASID for 2 bytes.\n         ST    R9,SAVER9C          Save registers.\n         STM   R1,R6,SAVERGS1\n         LA    R6,4                Load BCT register.\n         LA    R4,ASIDWK           Point to ASID work area.\n         TM    FLAG1,X'02'         Ask if Job name was coded.\n         BZ    GETAFL01            Wasn't. Have to adjust pointers.\n         LA    R7,5(,R7)           Bump command buffer pointer.\n         LA    R8,5(,R8)           Bump character counter.\nGETAFL01 DS    0H\nGETASIDL DS    0H                  Loop to get hex ASID for 4 display\n*                                    bytes to convert to 2 hex bytes.\n         CLI   0(R7),C')'          Have we reached close parenthesis?\n         BE    GETASIDG            Yes, assume we've got it.\n         CLI   0(R7),C' '          Have we hit a blank?\n         BE    GETASIDG            Yes, assume we've got it.\n         MVC   0(1,R4),0(R7)       Otherwise move one character over.\n         LA    R4,1(,R4)           Bump one ASIDWK character (target)\n         LA    R7,1(,R7)           Bump command buffer pointer.\n         LA    R8,1(,R8)           Bump character counter.\n         BCT   R6,GETASIDL         Loop for 4 characters.\n         B     GETASIDG            We don't look for more than 4.\nGETASIDG DS    0H\n*        APUT  ASIDWK,4\n         LA    R4,ASIDWK           Point register at workarea again.\n         LA    R1,4                Maximum of 4 characters.\nGETASIDA DS    0H\n         CLI   3(R4),X'40'         Is last character a blank (<4 total)\n         BNE   GETASIDM            No. We're finished sliding.\n         BCTR  R4,0                Slide the pointer one place back.\n         BCT   R1,GETASIDA         Do it no more than 4 times.\nGETASIDM DS    0H\n         MVC   ASIDMV(4),0(R4)     Move 4 characters so last one\n*                                     is not blank.\n         MVC   ASIDWKSV(4),ASIDMV    Save these 4 characters\n         MVC   ASIDWKS(4),ASIDMV        in two places.\n         MVC   OUTPUT,OUTPUT-1       Clear output line.\n         MVC   OUTPUT(25),ASIDMSG    Move coded display format asid.\n         APUT  OUTPUT,40             And put out the message.\n         TR    ASIDMV(4),ASIDVAL     Translate display format message\n*                                      into format X'0h0h0h0h'.\n*        MVC   OUTPUT,OUTPUT-1       Test display of hex result.\n*        HEX   OUTPUT,4,ASIDMV\n*        APUT  OUTPUT,10\n         BAL   R9,VALIDTR            Validity check the hex number.\n         PACK  ASIDGET(3),ASIDMV(5)  Get rid of all zone nibbles.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Search ASID   :' Print resulting 2-bytes\n         HEX   OUTPUT+21,2,ASIDBIN\n         APUT  OUTPUT,30\n         APUT  MESSAGEL,L'MESSAGEL   Add underline for clear display.\n*\nGETASIDE DS    0H                    End of routine.\n         LM    R1,R6,SAVERGS1        Restore registers\n         L     R9,SAVER9C               and\n         BR    R9                          exit.\n** ----------------------------------------------------------------\n*\n*   GETASCB return ASCB give the asid of address space\n*\n*\n*\n*  Input:\n*      FOUNASID = ASID\n*  OutPut:\n*      r15 = 0    Error\n*      r15 = ASCB\n** ----------------------------------------------------------------\nGETASCB  DS    0H\n         ST    R9,SAVER9O            Save Register\n         L     R15,CVTPTR            R15 -> cvt\n         L     R15,CVTASVT-CVT(,R15)  R15 -> asvt\n         USING ASVT,R15\n         CLC   ASVTASVT-ASVT(4,R15),=C'ASVT'  check eyecatcher\n         BNE   NOASCB\n         LA    R15,ASVTENTY-ASVT(,R15) Get first asvt slot\n         LH    R0,FOUNASID           Get asid in question\n         BCTR  R0,0                  Down By 1\n         SLL   R0,2                  Multiply by 4\n         AR    R15,R0                Point to ASCB\n         BR    R9\nNOASCB   DS    0H\n         XR    R15,R15               Clear r15\n         L     R9,SAVER9O            Restore Register\n         BR    R9\nASIDWKB  DC    CL4'    '\nASIDWK   DC    CL4'    '\nASIDWKF  DC    CL4' '\nASIDMV   DC    CL4'    '\nASIDMVF  DC    CL4' '\nASIDBIN  DS    0XL2\nASIDGET  DC    XL4'00000000'\n\nSAVERGS1 DS    6F\n*                   Translate table to validity check ASID.\n*                     Convert display values to X'0h'\n*                     (where h is the hex value).\nASIDVAL  DS    0D\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'00CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CC0A0B0C0D0E0FCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CC0A0B0C0D0E0FCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'00010203040506070809CCCCCCCCCCCC'\nFILLER1  DS    CL8\nASIDMSG  DC    CL21'ASID parm entered  : '\nASIDWKSV DC    CL4' '\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\nFINDCSCB DS    0H                  Find CSCB entry to change or report.\n         ST    R9,SAVER9D          Save registers.\n         ST    R3,SAVER3A\nFINDCSST DS    0H                  Get the first CSCB.\n         L     R3,16               CVT\n         L     R3,X'94'(,R3)       MSER - pointer to CSCB chain.\n         ICM   R3,15,0(R3)         First CSCB entry.\n         USING CHAIN,R3            Tell assembler.\n         BZ    FINDCSEC            If zero, we are at end of CSCB chain\nFINDCSLP DS    0H                  Loop through the CSCB entries.\n         MVC   CSCBACTF(1),CHACT     Save CSCB ACT flag for this CSCB.\n         MVC   CSCBJOBI(8),CHKEY     Save CSCB Jobid (CHKEY).\n         MVC   CSCBPROC(8),CHCLS     Save CSCB PROC id (CHCLS).\n         MVC   CSCBASID(2),CHASID    Save CSCB ASID (CHASID).\n* ------------------------------------------------------------------- *\n* We first try to match a JOBID if coded, to the job id in this CSCB. *\n* If equal, we see if an ASID has been coded, and both have to match. *\n* Otherwise, with no match, we go to the end of the CSCB chain.       *\n* ------------------------------------------------------------------- *\nFINDCSMY DS    0H                  Find the CSCB that I want.\n         TM    FLAG1,X'04'         Was ASID( coded at all?\n         BZ    FINDCSJB            No. Just find a JOBID match.\n         TM    FLAG1,X'01'         Is the JOB id missing?\n         BO    FINDCSAS            Yes, just look for an ASID match.\n         TM    FLAG1,X'02'         Was JOB id coded?\n         BO    FINDCSJB            Yes. Look for it.\n         ICM   R3,15,0(R3)         Go to next CSCB.\n         BZ    FINDCSEC            If zero, we are at end of CSCB chain\n         B     FINDCSLP            Look at next CSCB entry in table.\nFINDCSJB DS    0H                  Check for JOBID match in this CSCB.\n         CLC   JOBID(8),CSCBJOBI   Compare coded JOBID to CSCB jobname.\n         BE    FINDCSIA            Equal, check if ASID is there.\n         ICM   R3,15,0(R3)         Otherwise go to the next CSCB.\n         BZ    FINDCSEC            Zero, end of the CSCB chain.\n         B     FINDCSLP            Not zero, look at the next entry.\nFINDCSIA DS    0H\n         TM    FLAG1,X'04'         Was ASID( coded?\n         BZ    FINDCSFD            No. Found it on just a job match.\n*                                   So this is the first job that\n*                                   matched, if there are multiple\n*                                   jobs with the same name.\nFINDCSAS DS    0H                  Check the ASID in the CSCB.\n         CLC   ASIDBIN(2),CSCBASID Is this our ASID? Does it match.\n         BE    FINDCSFD            I guess we found it.\n         ICM   R3,15,0(R3)         Go to the next CSCB.\n         BZ    FINDCSEC            Zero marks the end of the CSCB chain\n         B     FINDCSLP            Not zero. Look at the next entry.\nFINDCSFD DS    0H                  Our CSCB has been found.\n         ST    R3,FOUNCSCB         Save found CSCB address.\n         MVC   FOUNACTF,CHACT      Save\n         MVC   FOUNJOBI,CHKEY        CSCB\n         MVC   FOUNPROC,CHCLS          info.\n         MVC   FOUNASID,CHASID\n         BAL   R9,PRNTCSCB         Print info from the current CSCB.\n         BAL   R9,FORCHACT         Format some CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Put out an underline.\n         B     FINDCSEN            Go to end of routine.\n         DROP  R3\nFINDCSEC DS    0H                  Came to end of CSCB chain.\n         APUT  MESSAGEN,L'MESSAGEN   Then put out a message\n         B     EOJ4                  And end with code 4.\nFINDCSEN DS    0H\n         L     R3,SAVER3A\n         L     R9,SAVER9D\n         BR    R9\n*            Constants associated with this routine.    -    below\nFOUNACTF DC    X'00'\nFOUNCSCB DS    F                   FOUND CSCB ADDRESS\nFOUNJOBI DC    CL8' '\nFOUNPROC DC    CL8' '\nFOUNASID DC    H'0'\nCSCBACTF DC    X'00'\nCSCBJOBI DC    CL8' '\nCSCBPROC DC    CL8' '\nCSCBASID DC    H'0'\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\nVALIDTR  DS    0H                  Validate hex characters coded.\n         ST    R9,SAVER9E          Save\n         STM   R4,R6,SAVEWRK          registers.\n         LA    R4,ASIDMV           Point to translated display chars.\n         LA    R6,ASIDWKS          Point to chars with error signs.\n         LA    R5,4                BCT register - only 4 times.\nVALIDTRS DS    0H\n         CLI   0(R4),X'CC'         Is this an invalid character?\n         BE    VALIDTRR            Yes. Substitute a ? for message.\n         LA    R4,1(,R4)           Next translated character.\n         LA    R6,1(,R6)           Next char for error message.\n         BCT   R5,VALIDTRS         Loop to test validity of this char.\n         TM    ERRASID,X'01'       After 4 chars, any errors found?\n         BO    VALIDERR            Yes. Write messages.\n         B     VALIDTRE            No. Get out of routine.\nVALIDTRR DS    0H                  Come here if invalid char found.\n         OI    ERRASID,X'01'       Flag that at least one was found.\n         MVI   0(R6),C'?'          Substitute a ? for it in message.\n         LA    R4,1(,R4)           Next translated character.\n         LA    R6,1(,R6)           Next char in error message.\n         BCT   R5,VALIDTRS         Check that character for validity.\nVALIDERR DS    0H                  Error messages if char is invalid.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(37),ASIDBADM\n         APUT  OUTPUT,45\n*        MVC   OUTPUT,OUTPUT-1\n*        MVC   OUTPUT(51),MSGBADPR\n*        APUT  OUTPUT,52\n         B     EOJ4                Get out with code 4.\nVALIDTRE DS    0H\n         L     R4,SAVER4B          Restore regs used in this routine.\n         LM    R4,R6,SAVEWRK\n         BR    R9\n*            Constants associated with this routine.    -    below\nERRASID  DC    X'00'\nSAVEWRK  DS    3F\nMSGBADPR DC    C'Bad ASID entered. Use end parenthesis ) to delimit.'\nASIDBADM DC    CL33'Bad Characters marked with a ?:  '\nASIDWKS  DC    CL4' '\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\n* -- -- -- -- -- -- -- -- -- -- -- --    R3 points to a CSCB address\nPRNTCSCB DS    0H                  Print a CSCB entry.\n         ST    R9,SAVER9F          Save BAL register.\n         ST    R3,SAVECSCB         Saved found CSCB address.\n         USING CHAIN,R3\n*                   Print info from current CSCB\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Job  ID :'\n         MVC   OUTPUT+11(8),CHKEY\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Proc ID :'\n         MVC   OUTPUT+11(8),CHCLS\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'ASID    :'\n         HEX   OUTPUT+11,2,CHASID\n         APUT  OUTPUT,25\n         TM    FLAG2,X'80'                Is this a BURN or KILL?   KIL\n         BO    PRNTFINI                   Yes. Abridge the messages BUR\n         TM    FLAG2,X'40'                CSCB only run. i.e. DISPLAY\n         BO    PRNTCSC1\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(21),=C'Previous CHACT Flags:'\n         HEX   OUTPUT+23,1,CHACT\n         APUT  OUTPUT,25\n         B     PRNTCSC2\nPRNTCSC1 DS    0H\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(21),=C'Current  CHACT Flags:'\n         HEX   OUTPUT+23,1,CHACT\n         APUT  OUTPUT,25\nPRNTCSC2 DS    0H\n         DROP  R3\nPRNTFINI DS    0H\n         L     R3,SAVECSCB         Restore register to what it was.\n         L     R9,SAVER9F          Restore BAL register and\n*                                     branch back to caller.\n         BR    R9\nSAVECSCB DS    F                   Saved address of found CSCB.\n** ---------------------------------------------------------------- **\nRUNCSCB  DS    0H                  Run through the CSCB chain.\n         ST    R9,SAVER9G\n         ST    R3,SAVER3C\n         ST    R7,SAVER7A\nRUNCSCBT DS    0H\n         TM    FLAG2,X'40'         Only run if CSCB keyword was coded.\n         BZ    RUNCSCBE            Not coded, get out.\n*                                  Display this is a CSCB chain run.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(40),=C'This is a run of the CSCB Chain only ...'\n         APUT  OUTPUT,45\n         APUT  MESSAGEL,L'MESSAGEL   Print underline.\n*                                  Find the CSCB chain:\n         L     R3,16               CVT\n         L     R3,X'94'(,R3)       MSER - pointer to CSCB chain.\n         ICM   R3,15,0(R3)         First CSCB entry.\n         BZ    RUNCSCBE            If zero, end of CSCB chain.\n*                                  Otherwise points to next CSCB in\n*                                    the table.\n         USING CHAIN,R3\nRUNCSCBD DS    0H                  Loop through CSCB entries.\n         MVC   CSCBACTF(1),CHACT     Save CSCB ACT flag for this CSCB.\n         MVC   CSCBJOBI(8),CHKEY     Save CSCB JOBID (CHKEY).\n         MVC   CSCBPROC(8),CHCLS     Save CSCB PROC id (CHCLS).\n         MVC   CSCBASID(2),CHASID    Save CSCB ASID (CHASID).\n*  Test\n*        MVC   OUTPUT,OUTPUT-1\n*        HEX   OUTPUT,2,CHASID\n*        HEX   OUTPUT+6,2,ASIDBIN\n*        MVI   OUTPUT+15,C'i'\n*        APUT  OUTPUT,25\n*  Test\n* -- Limit print of entries to Jobname or ASID only ----  below\n         CLI   JOBID,C'-'          Are we printing the whole CSCB?\n         BE    RUNCSCBY            Yes.\n         CLC   ASIDBIN,=X'0000'    Was an ASID coded for a search?\n         BNE   RUNCSCB2            No. Just check for Jobname.\nRUNCSCB1 DS    0H                  Check for Jobname match.\n         XR    R7,R7               Clear work register.\n         IC    R7,SAVCOUNT         Insert saved length of Jobid.\n         BCTR  R7,0                Decrement for execute.\n         EX    R7,RUNCSCOM         Do the compare for proper length.\n*        BNE   RUNCSCBS            Not equal, don't print result.\n         BE    RUNCSCBP            Equal, print this CSCB entry.\nRUNCSCB2 DS    0H                  Check if ASID was coded.\n         CLC   ASIDBIN,CHASID      ASID match?\n         BNE   RUNCSCBS            No. Skip print of CSCB entry.\nRUNCSCBY DS    0H\n* -- Limit print of entries to Jobname or ASID only ----  above\nRUNCSCBP DS    0H                  Print this entry....\n         BAL   R9,PRNTCSCB         Print of current CSCB information.\n         BAL   R9,FORCHACT         Format some CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline line.\nRUNCSCBS DS    0H                  If skipping an entry print, go here.\n         ICM   R3,15,0(R3)         Go to next CSCB entry in table.\n         BZ    RUNCSCBE            If it is zero, end of CSCB chain.\n         B     RUNCSCBD            Not zero, loop to next entry and\n*                                    print it.\nRUNCSCBE DS    0H                  End of routine.\n         L     R3,SAVER3C          Restore\n         L     R7,SAVER7A\n         L     R9,SAVER9G             registers and\n         BR    R9                        go back to caller.\nRUNCSCOM CLC   JOBID(*-*),CHKEY   Executed\n         DROP  R3\n** ---------------------------------------------------------------- **\nKEYZERO  DS    0H                  Into Key 0 and change CSCB cntl blk.\n         ST    R9,SAVER9H\n         ST    R4,SAVER4A\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n* -- >    ***    Do as little as possible under Key 0.    ***\nKEYPRLIM DS    0H\n         TM    ONSWIT,X'01'        Are we OR-ing?\n         BZ    SWITOFF             No. Try AND-ing?\n         MVC   CANCKEY0,CANCINDC   Pre-process affecting bits.\n         B     SWITON              All done pre-processing.\nSWITOFF  DS    0H\n         TM    ONSWIT,X'02'        Are we AND-ing?\n         BZ    KEY0BYPS            No. Don't do anything else.\n         XC    CANCINDC,=X'FF'     Reverse the affected bits for AND.\n         MVC   CANCKEY0,CANCINDC   And move them to staging area.\nSWITON   DS    0H\n         USING CHAIN,R3\n         L     R3,FOUNCSCB         Save address of \"found CSCB\".\n*\n* -- >                             We're authorized. Go Key 0.\n         MODESET KEY=ZERO\n         TM    ONSWIT,X'01'        Are we OR-ing?\n         BZ    KEY0OFF             No. Try AND-ing.\n         OC    CHACT(1),CANCKEY0   Do the OR.\n         B     KEY0END             Out of Key 0.\nKEY0OFF  DS    0H\n         TM    ONSWIT,X'02'        Are we AND-ing?\n         BZ    KEY0END             No. Get out altogether.\n         NC    CHACT(1),CANCKEY0   Do the AND.\nKEY0END  DS    0H                  Out of Key 0.\n         MODESET KEY=NZERO\n*\nKEY0BYPS DS    0H                  Key 0 bypass - branch to here.\n         DROP  R3\n         L     R4,SAVER4A\n         L     R9,SAVER9H\n         BR    R9\n** ---------------------------------------------------------------- **\nPRNWCSCB DS    0H                  Print the changed CSCB entry.\n         ST    R9,SAVER9I          Save BAL register.\n         ST    R3,SAVER3D\n         L     R3,FOUNCSCB         Saved found CSCB address.\n         USING CHAIN,R3\n*                   Print info from changed CSCB.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Job  ID :'\n         MVC   OUTPUT+11(8),CHKEY\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Proc ID :'\n         MVC   OUTPUT+11(8),CHCLS\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'ASID    :'\n         HEX   OUTPUT+11,2,CHASID\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(21),=C'Modified CHACT Flags:'\n         HEX   OUTPUT+23,1,CHACT\n         APUT  OUTPUT,25\n         APUT  MESSAGEL,L'MESSAGEL\n         DROP  R3\n         L     R3,SAVER3D          Restore register to what it was.\n         L     R9,SAVER9I          Restore BAL register and\n         BR    R9                     branch back to caller.\n** ---------------------------------------------------------------- **\nFORCHACT DS    0H                  Format the CHACT Flags\n         ST    R9,SAVER9J          Save\n         ST    R3,SAVER3E             registers.\n         USING CHAIN,R3\nFORCANC0 DS    0H                  Show cancelable or not.\n         TM    CHACT,CHCL          Is job cancelable?\n         BO    FORCANC1            Yes, show cancelable.\n         BZ    FORCANC2            No. Show non-cancelable.\n         B     FORFORC0            Fall through, try forceable.\nFORCANC1 DS    0H\n         MVC   MESSTXT,MESSCAN     Tell em job is cancelable.\n         B     FORCANCP\nFORCANC2 DS    0H\n         MVC   MESSTXT,MESSNCN     Tell em job is non-cancelable.\nFORCANCP DS    0H                  Write the actual message out.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(28),FORMTMSG\n         APUT  OUTPUT,30\nFORFORC0 DS    0H                  Show forceable or not.\n         TM    CHACT,CHAFORCE      Is job forceable?\n         BO    FORFORC1            Yes, show forceable.\n         BZ    FORFORC2            No. Show non-forceable.\nFORFORC1 DS    0H\n         MVC   MESSTXT,MESSFOR     Tell em job is forceable.\n         B     FORFORCP\nFORFORC2 DS    0H\n         MVC   MESSTXT,MESSNFR     Tell em job is non-forceable.\nFORFORCP DS    0H                  Write the actual message out.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(28),FORMTMSG\n         APUT  OUTPUT,30\nFORCHEND DS    0H\n         DROP  R3\n         L     R3,SAVER3E          Restore\n         L     R9,SAVER9J             registers.\n         BR    R9\n*            Constants associated with this routine.    -    below\nMESSCAN  DC    CL14'Cancelable    '\nMESSNCN  DC    CL14'Non-Cancelable'\nMESSFOR  DC    CL14'Forcible      '\nMESSNFR  DC    CL14'Non-Forcible  '\nFORMTMSG DS    0CL28\nMESS000  DC    CL14'Job Status:   '\nMESSTXT  DC    CL14'              '\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\nPRINTERR DS    0H                    Print help messages.\n         ST    R9,SAVER9K            Save BAL register.\n         APUT  MESSAG2A,L'MESSAG2A\n         APUT  MESSAG2B,L'MESSAG2B\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         APUT  MESSAG2V,L'MESSAG2V\n         APUT  MESSAG2E,L'MESSAG2E\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2Z,L'MESSAG2Z\n         APUT  MESSAGEM,L'MESSAGEM\n         APUT  MESSAG2G,L'MESSAG2G\n         APUT  MESSAG2H,L'MESSAG2H\n         APUT  MESSAGEM,L'MESSAGEM\n         APUT  MESSAG2I,L'MESSAG2I\n         APUT  MESSAG2J,L'MESSAG2J\n         APUT  MESSAG2K,L'MESSAG2K\n         APUT  MESSAG2L,L'MESSAG2L\n         APUT  MESSAG2M,L'MESSAG2M\n         APUT  MESSAG2N,L'MESSAG2N\n         APUT  MESSAG2O,L'MESSAG2O\n         APUT  MESSAG2P,L'MESSAG2P\n         APUT  MESSAG2Q,L'MESSAG2Q\n         APUT  MESSAG2R,L'MESSAG2R\n         APUT  MESSAG2S,L'MESSAG2S\n         APUT  MESSAG2T,L'MESSAG2T\n         APUT  MESSAGEM,L'MESSAGEM\n         L     R9,SAVER9K            Restore BAL register.\n         BR    R9\n** ---------------------------------------------------------------- **\nDOBURN   DS    0H                        BURN process.              BUR\n         OI    KILLFLAG,X'02'            Announce BURN as keyword   BUR\nDOKILL   DS    0H                        Synonym but different msgs KIL\n         OI    KILLFLAG,X'01'            KILL instead of BURN       KIL\n*                                        Print the action code.     BUR\n         OI    FLAG2,X'80'               Mark as a KILL.            BUR\n         MVC   OUTPUT,OUTPUT-1           Print message accordingly  BUR\n         MVC   OUTPUT(15),=C'Action code   :'                       BUR\n         MVC   OUTPUT+17(4),KILLC                                   BUR\n         TM    KILLFLAG,X'02'            Is it really a KILL?       KIL\n         BZ    KEEPKILL                  No. Don't overlay message  KIL\n         MVC   OUTPUT+17(4),BURNC        Yes. Mark as a BURN.       KIL\nKEEPKILL DS    0H                                                   KIL\n         APUT  OUTPUT,25                                            BUR\n* -- >  Test if this command is being run APF Authorized - below    BUR\n         STM   R15,R1,SAVE14T1   Now save registers and test if APF BUR\n         XR    R15,R15                authorized.                   BUR\n         TESTAUTH FCTN=1           Are we authorized?               BUR\n         LTR   R15,R15             Test the return code.            BUR\n         BNZ   NOTAUTH           Not zero, tell not authorized.     BUR\n         LM    R15,R1,SAVE14T1   Restore registers used by TESTAUTH BUR\n* -- >  Test if this command is being run APF Authorized - above    BUR\n         BAL   R9,FINDCSCB               Get the Address Space.     BUR\n         MODESET KEY=ZERO,MODE=SUP                                  BUR\n         ST    R7,SAVER7B                Store work register        BUR\n         LH    R7,CSCBASID               Set ASID                   BUR\n*----->               KILL routine - below                          KIL\n         TM    KILLFLAG,X'01'            Is the KILL flag on?       KIL\n         BZ    EXITKILL                  No. Exit this routine.     KIL\n         CLC   CSCBASID,=X'0000'         Did FINDCSCB find a CSCB?  KIL\n         BE    EXITKILL                  No. Exit this routine.     KIL\n         MVC   FOUNASID,CSCBASID         Stage ASID to get the ASCB KIL\n         BAL   R9,GETASCB                Get the ASCB.              KIL\n         LTR   R15,R15                   Is there one?              KIL\n         BZ    EXITKILL                  No. Exit this routine.     KIL\n         ST    R15,SAVEASCB              Save address of ASCB.      KIL\n         L     R15,0(,R15)               Load it to address fields. KIL\n         USING ASCB,R15                                             KIL\n         NI    ASCBFLG2,255-ASCBNOMT     Turn off NON-FORCIBLE bit  KIL\n         NI    ASCBFLG2,255-ASCBNOMD     Turn off Dat error bit     KIL\n         DROP  R15                       Drop ASCB addressability   KIL\nEXITKILL DS    0H                        Now do CALLRTM MEMTERM.    KIL\n*----->               KILL routine - above                          KIL\n         ST    R13,SAVER13A              Save R13                   BUR\n         LA    R13,RTMSAVE               RTM save area              BUR\n         CALLRTM TYPE=MEMTERM,ASID=(R7),COMPCOD=100                 BUR\n         L     R13,SAVER13A              Restore R13                BUR\n         L     R7,SAVER7B                Restore work register      BUR\n         MODESET KEY=NZERO,MODE=PROB                                BUR\n         TM    KILLFLAG,X'02'            BURN msg instead of KILL?  KIL\n         BO    BURNMSG                   Yes. Run BURN message.     KIL\n         MVC   MESSAGKI+4(8),FOUNJOBI    Jobname into message       BUR\n         HEX   MESSAGKI+22,2,FOUNASID    ASID into message          BUR\n         APUT  MESSAGKI,L'MESSAGKI       Say job was burned.        BUR\n         B     BURNEND                   Skip BURN message          KIL\nBURNMSG  MVC   MESSAGBU+4(8),FOUNJOBI    Jobname into message       KIL\n         HEX   MESSAGBU+22,2,FOUNASID    ASID into message          KIL\n         APUT  MESSAGBU,L'MESSAGBU       Say job was burned.        KIL\nBURNEND  B     GETIDEND            After enough looks, end.         KIL\nRTMSAVE  DS    CL72                Work area for RTM                BUR\nSAVER13A DS    F                   Place to save R13                BUR\nSAVEASCB DS    F                   Save ASCB address                KIL\n** ---------------------------------------------------------------- **\nKEY0SWNS DS    0H                    Key 0 for SWAP or NSWP\n         ST    R9,SAVER9L            Save BAL register.\n         ST    R6,SAVER6A\nKEY0TSTA DS    0H\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n         TM    FLAG2,X'04'         Make ASID swappable?\n         BO    KEY0SWAP            Yes. Do it.\n         TM    FLAG2,X'08'         Make ASID non-swappable?\n         BO    KEY0NSWP            Yes. Do it.\n         B     KEY0EXIT            Not SWAP or NSWP, don't belong here.\n*\nKEY0NSWP DS    0H                    Make address space non-swappable.\n\n         CLC   OWNASID,FOUNASID      Target asid different from ours?\n         BE    KEY0DNSW              No. Just do SYSEVENT.\n         MVC   FUNC,=CL8'DONTSWAP'   Set nswapping function\n         BAL   R9,BUILDSRB           Build SRB block\n*\n* ISSUE SUCCESSFUL MESSAGE\n*\n         MVC   MESSAGNS+4(8),FOUNJOBI\n         HEX   MESSAGNS+22,2,FOUNASID\n         APUT  MESSAGNS,L'MESSAGNS\n         L     R6,SAVER6A            Restore Register\n         L     R9,SAVER9L            Restore BAL register.\n         BR    R9                    go back\nTEMPSAVE DS    4F                    save area\n* - cross address space stuff - above\nKEY0DNSW DS    0H\n         MODESET MODE=SUP,KEY=ZERO\nKEY0SYSD DS    0H\n         LH    R6,FOUNASID\n         SYSEVENT DONTSWAP,ASID=(R6),ENTRY=SVC\n*        STATUS SET,MC,STEP                  EXCLUSIVE TASK\n*        LA    R1,1                          LOAD NEW AUTH. INDEX\n*        AXSET AX=(1)                        SET NEW AUTH. INDEX\n*        ST    R0,OLDAX                      SAVE OLD AUTH. INDEX\n*        LH    R1,FOUNASID                   LOAD JES2 ASID.\n*        SSAR  R1                            SET SPACE SECONDARY JES2.\n*        ST    R1,SYSEVCOD\n*        LTR   R1,R1\n*        BNZ   KEY0NODO\n*        STATUS RESET,MC,STEP\nKEY0NNRM DS    0H\n         MODESET MODE=PROB,KEY=NZERO\n         MVC   MESSAGNS+4(8),FOUNJOBI\n         HEX   MESSAGNS+22,2,FOUNASID\n         APUT  MESSAGNS,L'MESSAGNS\n         B     KEY0EXIT\nKEY0SWAP DS    0H                    Make address space swappable.\n         CLC   OWNASID,FOUNASID      Target asid different from ours?\n         BE    KEY0DSWP              No. Just do SYSEVENT.\n         MVC   FUNC,=CL8'OKSWAP'     Set function\n         BAL   R9,BUILDSRB           Build SRB CSA CONTROL BLOCKS\n*\n*  issue successful message\n*\n         MVC   MESSAGSW+4(8),FOUNJOBI\n         HEX   MESSAGSW+22,2,FOUNASID\n         APUT  MESSAGSW,L'MESSAGSW\n         L     R6,SAVER6A            Restore Registers\n         L     R9,SAVER9L            Restore BAL register.\n         BR    R9\n* - cross address space stuff - below\n* - cross address space stuff - above\nKEY0DSWP DS    0H\n         LH    R6,FOUNASID\n         SYSEVENT OKSWAP,ASID=(R6),ENTRY=SVC\n*        STATUS RESET,MC,STEP\n*        ST    R1,SYSEVCOD\n*        LTR   R1,R1\n*        BNZ   KEY0NODO\nKEY0SNRM DS    0H\n         MODESET MODE=PROB,KEY=NZERO\n         MVC   MESSAGSW+4(8),FOUNJOBI\n         HEX   MESSAGSW+22,2,FOUNASID\n         APUT  MESSAGSW,L'MESSAGSW\n         B     KEY0EXIT\nKEY0NODO DS    0H\n         MODESET MODE=PROB,KEY=NZERO\n         HEX   MESSAGNG+43,1,SYSEVCOD+3\n         APUT  MESSAGNG,L'MESSAGNG\nKEY0EXIT DS    0H\n         L     R6,SAVER6A\n         L     R9,SAVER9L            Restore BAL register.\n         BR    R9\n*--------------------------------------------------------------*\n*                                                              *\n*        build srb control block and accompanying code         *\n*--------------------------------------------------------------*\nBUILDSRB DS    0H\n         STM   R6,R9,TEMPSAVE        Save Registers\n         BAL   R9,GETASCB            Find ASCB for this asid\n         LR    R9,R15                Hold ASCB\n         L     R9,0(,R9)             Point to ASCB\n         MODESET MODE=SUP,KEY=ZERO   Get into supervisor state\n*\nCSA_LEN  EQU  SRBSIZE+84             Csa SRBLOCK AND PARAMTERS\n*\n*---------------------------------------------------------------*\n*       Get CSA for SRB CONTROL BLOCK SUBPOOL 241               *\n*---------------------------------------------------------------*\n         STORAGE OBTAIN,SP=241,LENGTH=CSA_LEN Get Some CSA\n         LR    R6,R1                 Point r2 to srb control block\n         USING SRB,R6                Address SRB\n         XC    SRB(SRBSIZE),SRB      Clear out srb\n         ST    R9,SRBASCB            Save ASCB\n         LA    R8,SRBSIZE(,R6)       R8 -> paramlist\n*       Get CSA paramter list                                   *\n         ST    R8,SRBPARM            Store paramter list address\n         LA    R7,72(,R8)            Point to ECB\n         XC    0(4,R7),0(R7)         Clear ECB Address\n         LA    R7,4(,R7)             Point to ASCb\n         MVC   0(4,R7),X'224'        Move \"HOME\" PSAAOLD address sp\n         LA    R7,4(,R7)             bump to next param\n         CLC   FUNC,=C'DONTSWAP'     Q. non swappable function\n         BE    NONSWAP               yes; branch if so\n         MVC   0(4,R7),=C'OKSW'      otherwise swappable\n         B     SETEPA                set srb program entry point\nNONSWAP  DS    0H\n         MVC   0(4,R7),=C'DONT'      Set FUNCTION IN R7\n*---------------------------------------------------------------*\n*       Get CSA for SRB CONTROL BLOCK SUBPOOL 227               *\n*---------------------------------------------------------------*\nSETEPA   DS    0H\n         STORAGE OBTAIN,SP=227,LENGTH=SWAPLEN  Get Fixed CSA\n         ST    R1,SRBEPA             set entry point\n         LR    R14,R1                Hold that thought\n         LA    R15,SWAPLEN           Get Length\n         LR    R1,R15\n         LA    R0,SWAPXMEM           Point to SRB routine\n         MVCL  R14,R0                Move routine\n*\n         SCHEDULE SRB=(R6),SCOPE=GLOBAL,MODE=NONXM\n*\n         LA    R7,72(,R8)            Point to ECB\n*\n         WAIT  ECB=(R7)\n*\n         L     R9,SRBEPA             Get Entry Point Address\n*\n         STORAGE RELEASE,ADDR=(R6),LENGTH=CSA_LEN,SP=241\n*\n         STORAGE RELEASE,ADDR=(R9),LENGTH=SWAPLEN,SP=227\n*\n         MODESET KEY=NZERO,MODE=PROB\n*\n         LM    R6,R9,TEMPSAVE        Save Registers\n         BR    R9                    Return\nSYSEVCOD DC    F'0'                  SYSEVENT Return Code\nOLDAX    DS    F\nWAREA    DS    D                     Work area\nWAREB    DS    D                     Work area\n** ---------------------------------------------------------------- **\n** --         C  O  N  S  T  A  N  T  S                          -- **\n** ---------------------------------------------------------------- **\nMESSAGNA DC    C'Command was not invoked APF authorized.'\nMESSAGEN DC    C'End of CSCB chain was reached.'\nMESSAGEY DC    C'No valid keyword was coded.'\nFLAG1    DC    X'00'\n*              X'01'               ASID ONLY - NO JOBNAME\n*              X'02'               JOBNAME IS PRESENT.\n*              X'04'               ASID( WAS PRESENT IN PARMS.\n*              X'08'               CSCB CHAIN DISPLAY ONLY.\nFLAG2    DC    X'00'\n*              X'01'               CNCL WAS CODED\n*              X'02'               NCNC WAS CODED\n*              X'04'               SWAP WAS CODED\n*              X'08'               NSWP WAS CODED\n*              X'10'               FORC WAS CODED\n*              X'20'               CSCB WAS CODED\n*              X'80'               BURN WAS CODED                   BUR\n*              X'40'               CSCB chain run only.\nFLAG3    DC    X'00'\nONSWIT   DC    X'00'\n*              X'01'               TURN BIT ON\n*              X'02'               TURN BIT OFF\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVE     DS    9D                  Program Save Area\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\nFUNC     DS    CL8                 Swapppinmg function\n         LTORG\n*-----------------------------------------------------------------*\n*                         SRB CODE                                *\n*-----------------------------------------------------------------*\nSWAPXMEM DS    0D\n         DROP  R12,R11,R10\n         BASR  R5,0\n         USING *,R5                  Entry Point\n         LR    R10,R14               SAVE RETURN ADDRESS\n         LR    R13,R1\n*\n         LA    R9,72(,R13)          Point to ECB Address\n         LA    R8,76(,R13)          Point to ASCB Address\n         L     R8,0(,R8)\n         L     R7,80(,R13)          Get code\n*\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=STDSAVE\n*\n         C      R7,=C'OKSW'        OKSWAP\n         BE     SETSWAP\n*\n         XR    R1,R1               Undocumented instead of WAIT\n         SYSEVENT DONTSWAP,ENTRY=BRANCH\n*\n         B     UNLOCK\n*\nSETSWAP  DS    0H\n         XR    R1,R1               Undocumented instead of WAIT\n         SYSEVENT OKSWAP,ENTRY=BRANCH\n*\nUNLOCK   DS    0H\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=STDSAVE\n*\n*\n         POST  (R9),ASCB=(R8),ERRET=GOBACK,LINKAGE=BRANCH\n*\nGOBACK   LR    R14,R10               Return Address\n         BR    R14                   Return\n         LTORG\nSWAPRTM  DS    0D\nSWAPLEN  EQU   *-SWAPXMEM\n** ---------------------------------------------------------------- **\nACEECSEC CSECT\nACEECOPY DC    XL192'00'\nACEEADDR DC    F'0'\nACEECLEN EQU   *-ACEECSEC\n** ---------------------------------------------------------------- **\nCNCLPG   CSECT\n         IHAACEE\n         SPACE\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           Map the CVT.\n         IEECHAIN                  Map the CSCB control block.\n         IHASRB\n         IHAASVT\n         IHAASCB\n         IHAASXB\n         IRAOUCB\n         IHAPSA   DSECT=YES,LIST=YES                           HD APR88\n         IHAFRRS\n         EJECT                                                 HD APR88\n         IKJEFLWA\n         END   CNCLPG\n** ---------------------------------------------------------------- **\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         IHAPSA   DSECT=YES,LIST=YES                           HD APR88\n         EJECT\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END EPUTL\nFACEE    TITLE 'FACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS THE CALLABLE VERSION OF DACEE,    *\n*                   TO FORMAT AN ACEE IMAGE.                          *\n*                                                                     *\n*         SYNTAX:   EXPECTED IS R1 POINTING TO THE ACEECSEC CSECT     *\n*                                                                     *\n*                   ACEECSEC CSECT                                    *\n*                   ACEECOPY DC    XL192'00'    ACEE image to format  *\n*                   ACEEADDR DC    F'0'         Its original address  *\n*                   ACEECLEN EQU   *-ACEECSEC                         *\n*                                                                     *\n*                   CALL FACEE WITH R1 POINTING TO 192-BYTE AREA      *\n*                   CONTAINING THE IMAGE OF AN ACEE CONTROL BLOCK,    *\n*                   AS PART OF THE ACEECSEC CONTROL BLOCK.            *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF MANY ACEE FIELDS AND HEX DUMP    *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED, JUST FOR THE FORMATTING, BUT SINCE      *\n*                   OBTAINING THE CROSS-MEMORY ACEE REQUIRES          *\n*                   AUTHORIZATION, YOU NEED AC(1) IN THAT CASE.       *\n*                                                                     *\n*    SAMPLE CALL:                                                     *\n*                                                                     *\n*             L     R15,SAVFACEE  Load entry pt of FACEE program.     *\n*             XR    R1,R1         Clear R1 to be sure.                *\n*             L     R1,SAVACEEC   Load address of ACEE image CSECT.   *\n*             BALR  R14,R15       Call FACEE to display the data.     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nFACEE    CSECT\nFACEE    AMODE 31\nFACEE    RMODE 24\n* ------------------------------------------------------------------ *\n*                  ADAPTED FROM DACEE TSO COMMAND.                   *\n*                   THIS IS THE CALLABLE VERSION.                    *\n* ------------------------------------------------------------------ *\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'FACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         BAKR  R14,0\n*        STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R7,R1                 SAVE POINTER TO ACEECSEC CSECT.\n         USING FACEE,R12,R11         TWO BASE REGISTERS.\n         LA    R11,4095(,R12)        LOAD SECOND BASE.\n         LA    R11,1(,R11)\n         USING ACEE,R7\n         ST    R7,ACEEPNTR           GRAB POINTER TO ACEECSEC CSECT.\n         L     R8,192(,R7)           GO GET ORIGINAL ACEE ADDRESS.\n         ST    R8,REALACEE           AND PUT IT AWAY FOR DISPLAYING.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\nINITCON  DS    0H\n         MVI   LINE-1,X'40'          PRIME LINE-1 WITH A BLANK.\n         MVC   LINE,LINE-1           BLANK ENTIRE AREA.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - -   DO THE VARIOUS FORMATTING TASKS   - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDUMPACE  DS    0H\n         BAL   R9,HEADERS            PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME           SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG            FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP            HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                  NORMAL END\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJ4     LA    R15,4                 SET CC = 4.\nEOJ      DS    0H                    BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)          PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         PR\nEOJ0     SR    R15,R15               SET CC = 0.\n         B     EOJ                   CONT.\nEOJ8     LA    R15,8                 SET CC = 8.\n         B     EOJ                   CONT\n         EJECT\nFULLZERO DC    F'0'                  FIXED CONSTANT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFILLER0  DC    3F'0'                 Filler to resolve HEXTAB-240\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n*        HEX   LINE+20,4,ACEEPNTR    Don't use address of ACEE copy.\n         HEX   LINE+20,4,REALACEE    Use only the passed ACEE address.\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R7,ACEEPNTR\n         USING ACEEACEE,R7\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(8),X'15'(R7)\n         HEX   LINE+40,1,X'14'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R7)\n         HEX   LINE+40,1,X'1D'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),ACEEPROC\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R7)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R7)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R7)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R7,ACEEPNTR\n         ST    R7,SAVER7A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R7,SAVER7A\n         MVC   DMPADDR(16),0(R7)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R7,16(,R7)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R7,SAVER7A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nACEEPNTR DS    F\nREALACEE DS    F\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER7A  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IHAACEE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CNCLPGA$": {"ttr": 4100, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(CNCLPGA)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,20)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,30),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=IEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLIN   DD  DSN=&&TEMP,DISP=(OLD,PASS)\n//         DD  DDNAME=SYSIN\n//SYSIN    DD  *\n ENTRY   CNCLPG\n SETCODE AC(1)\n NAME    CNCLPGA(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNCLPGAO": {"ttr": 4102, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CNCLPG   TITLE 'Make address space cancelable, non-swappable, etc. '\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Function:   To make an address space Cancelable or               *\n*                Non-cancelable, Forcible or Non-forcible,            *\n*                Swappable or Non-swappable.  Or BURN the             *\n*                address space (Version 1.3.9)                        *\n*                                                                     *\n*                APF-authorized TSO command.                          *\n*                Display functions (DISP, CSCB, - ) do not need       *\n*                 APF authorization.                                  *\n*                                                                     *\n*                Cancelable and non-cancelable are determined         *\n*                by bit settings in the address space's CSCB.         *\n*                See the notes below.                                 *\n*                                                                     *\n*                This program is NOT re-entrant.                      *\n*                                                                     *\n*                Enhanced:  (Version 1.3.x)                           *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Notes:                                                           *\n*                                                                     *\n*           CANCELABLE, NON-CANCELABLE, FORCIBLE, NON-FORCIBLE:       *\n*                                                                     *\n*    CSCB        Cancelable, Non-cancelable, Forcible, Non-forcible   *\n*    chain       are determined by bit settings in the address        *\n*                space's CSCB, which is part of the CSCB chain.       *\n*                                                                     *\n*    Jobname     Each active address space has a CSCB in the chain.   *\n*    and/or      You get to a particular address space by running     *\n*    ASID        the entire CSCB chain (mapped by the IEECHAIN        *\n*    match       macro) looking for a match on jobname and/or ASID,   *\n*                and preferably on both.                              *\n*                                                                     *\n*    DISPlay     There may be more than one address space for a       *\n*    or          given job name, and more than one CSCB entry         *\n*    \"CSCB\"      for a given ASID.  The CSCB or DISPlay option        *\n*    option      of CNCLPG will run the entire CSCB chain and         *\n*                it will show ALL the matches for the parameters      *\n*                given.  To display the ENTIRE CSCB chain from start  *\n*                to finish, use a dash ( - ) instead of the jobname.  *\n*                                                                     *\n*    Multiple    If only the jobname or the ASID number alone         *\n*    jobs        are used to do an ACTION, then CNCLPG will stop      *\n*    with the    at the FIRST CSCB which matches, when an ACTION is   *\n*    same name   called for (but NOT for a DISPLAY).  That is why     *\n*                it is better to run the DISPlay (or CSCB) function   *\n*                of CNCLPG first, to display all the possible CSCB    *\n*                entries that might match, before changing any        *\n*                particular address space.  There might be more       *\n*                than one address space with the same jobname or      *\n*                ASID, and you want to change only the correct        *\n*                one, NOT the wrong one.  So it is good practice      *\n*                to display first, and then do a change to the        *\n*                exact address space you want to affect, using        *\n*                BOTH the jobname and ASID(hhhh) parameters.          *\n*                                                                     *\n*           SWAPPABLE AND NON-SWAPPABLE:                              *\n*                                                                     *\n*    SWAP and    Setting an address space to be swappable or          *\n*    NSWP need   non-swappable, is accomplished by executing          *\n*    to run a    a SYSEVENT macro.  This has to execute in the        *\n*    SYSEVENT    target address space, and it was done here by        *\n*    macro in    scheduling an SRB to run in the target address       *\n*    the         space, when it is different from the address         *\n*    target      space running the program.                           *\n*    address                                                          *\n*    space                                                            *\n*                                                                     *\n*    -------------------------------------------------------------    *\n*    BURN        BURN -  Kill the designated address space with a     *\n*    (v 1.3.8)   CALLRTM TYPE=MEMTERM (like a FORCE).  Be careful !   *\n*    -------------------------------------------------------------    *\n*                                                                     *\n*    Syntax:     TSO Command:  APF-authorized.                        *\n*                                                                     *\n*        CNCLPG |jobid \u00ddASID(hhhh)\u00a8 |CNCL|NCNC|FORC|NFRC|NSWP|SWAP    *\n*               |ASID(hhhh)         |CNCL|NCNC|FORC|NFRC|NSWP|SWAP    *\n*               |                   |CSCB or DISP                     *\n*               |-  (displays the entire CSCB chain)                  *\n*               |?  (displays help)                                   *\n*               |                   |BURN                             *\n*               |                   |RLxO or RLxF   (1.3)             *\n*               |                   |DACE           (1.3)             *\n*                                                                     *\n*    Date:       April 15, 2010                                       *\n*                                                                     *\n*    Latest Modification:   November 10, 2013                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    Technical Detail:  PUTLINE interface for TSO Output.             *\n*                                                                     *\n*                                                                     *\n*    Changes:  1.  SWAP, NSWP support dropped from this program.      *\n*                   Version is 1.0.0                                  *\n*                                                                     *\n*              2.  Messages and DISP improved, to just show matching  *\n*                   CSCB chain entries, instead of all of them.       *\n*                   - (dash) will show the entire CSCB chain.         *\n*                                                                     *\n*              3.  SWAP, NSWP support put back in this program.       *\n*                   Version is 1.1.0   (June 16, 2010)                *\n*                   It now does your own address space.  The cross    *\n*                   memory stuff was not put in yet, for other        *\n*                   address spaces.                                   *\n*                                                                     *\n*              4.  Now NSWP and SWAP works for all address spaces,    *\n*                   with cross memory stuff now put in.  (1.2.1)      *\n*                                                                     *\n*              5.  RLxO or RLxF functionality.  (1.3.x)               *\n*                                                                     *\n*              6.  Burn an address space, if that is desired.         *\n*                   (Oct 2013)  Version is 1.3.6.  Apply changes      *\n*                   from between CNCLPG 1.2.0 and 1.2.5.              *\n*                                                                     *\n*              7.  Add DACE function to format and display            *\n*                   another address space's ACEE.  (1.3.8)            *\n*                                                                     *\n*              8.  Fixed problem with R10 being used and overlaying   *\n*                   the third base.  R5 substituted for R10 to fix.   *\n*                                                                     *\n*              9.  S047 protection for RLxx and DACE functions.       *\n*                  Display 'Command was not invoked APF authorized.'  *\n*                   instead of getting the S047 abend.                *\n*                                                                     *\n*             10.  Enhance FACEE program to include IHAACEE macro     *\n*                   name fields.  (DACE function)  (1.3.9)            *\n*                                                                     *\n*   change   pgmr                   description                       *\n*   -------  -----   ----------------------------------------------   *\n*                                                                     *\n*   1.2.0             Add SRB code to allow nonswappable in xmem      *\n*                                                                     *\n*   1.3.0             Add RLxO and RLxF support                       *\n*   1.3.1             Fix RLxO and RLxF support                       *\n*                     Fix bug when not \"on\" or \"off\" code entered     *\n*                      for RLx* function                              *\n*   1.3.6             Add BURN function to this version. Apply        *\n*                      changes from CNCLPG 1.2.0 to 1.2.5.            *\n*   1.3.8             Add DACE to format another address space's      *\n*                      ACEE and display its entire contents.          *\n*                      Fix third base register overlay problem.       *\n*                                                                     *\n*   1.3.9             Enhance DACE function to include names of       *\n*                      ACEE fields in macro IHAACEE.                  *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n*  This macro lets you display hex values in a report.\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE           Save work registers.\n         LA    R1,&FROM                 Load from address.\n         LA    R0,&LEN                  Load length of hex number.\n         LA    R15,&TO                  Load to address.\n         BAL   R9,HEX                   BAL to routine.\n         LM    R15,R1,HEXSAVE           Restore work registers.\n         MEND\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n* --       End of Internal Macros......                            -- *\n* ------------------------------------------------------------------- *\n         SPACE 3\nCNCLPG   CSECT\nCNCLPG   AMODE 31\nCNCLPG   RMODE ANY\n*-------------------------------------------------------------*\n*        GENERAL PURPOSE REGISTERS                            *\n*-------------------------------------------------------------*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*-------------------------------------------------------------*\n*        ACCESS REGISTERS                                     *\n*-------------------------------------------------------------*\nAR0      EQU   0\nAR1      EQU   1\nAR2      EQU   2\nAR3      EQU   3\nAR4      EQU   4\nAR5      EQU   5\nAR6      EQU   6\nAR7      EQU   7\nAR8      EQU   8\nAR9      EQU   9\nAR10     EQU   10\nAR11     EQU   11\nAR12     EQU   12\nAR13     EQU   13\nAR14     EQU   14\nAR15     EQU   15\n*-------------------------------------------------------------*\n*                  BEGIN THE ACTUAL CODE                      *\n*-------------------------------------------------------------*\n         USING CNCLPG,R15          (Establish temporary base).\n         B     BEGIN               Skip over eyecatcher.\nEYEC0    DC    AL1(EYECL)          Exclusive length of header.\nEYEC     DC    C' CNCLPG - &SYSDATE - &SYSTIME -'   Eyecatcher\n         DC    C' VER 1.3.9   '\n         DC    C'   '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     Save caller's registers\n         LR    R6,R1               Preserve CPPL pointer.\n         LR    R12,R15             Copy base.\n         USING CNCLPG,R12,R11,R10  (Tell assembler).\n         LA    R11,4095(,R12)      Load bases.\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LR    R14,R13             Copy caller's save area pointer.\n         LA    R13,SAVE            Point to my save area.\n         ST    R13,8(,R14)         Chain ...\n         ST    R14,SAVE+4          ... Save areas.\n         SPACE 1\nINITCON  DS    0H                  Initialize some constants.\n         MVI   FLAG1,X'00'\n         MVI   FLAG2,X'00'\n         MVI   FLAG3,X'00'\n         MVI   ONSWIT,X'00'\n         MVI   ERRASID,X'00'\n         MVI   CANCINDC,X'00'\n         MVI   OUTPUT-1,X'40'\n         MVC   OUTPUT,OUTPUT-1\n         MVI   NEWCHACT,X'00'\n         L     R0,=V(ACEECSEC)     Save ACEE copy area CSECT entry      01729\n         ST    R0,SAVACEEC          point and save it for later use.    01730\n         L     R0,=V(FACEE)        Save entry point of FACEE which is\n         ST    R0,SAVFACEE          ACEE formatting and dump program.\nMYASID   DS    0H                  Get my own ASID.\n         L     R2,X'224'           Point to PSAAOLD (my ASCB)\n         LA    R2,X'24'(,R2)       Point to my own ASID (ASCBASID)\n         MVC   OWNASID(2),0(R2)    Save it for comparison later\n         B     PRTITLE             Branch past constant\n*\nOWNASID  DS    H                   Save my own ASID.\n*\nPRTITLE  DS    0H                  Print program title.\n         APUT  MESSAGET,L'MESSAGET\n         APUT  MESSAGEU,L'MESSAGEU\nCONT0    DS    0H                  Look at command's parameters.\n         LTR   R6,R6               Any CPPL?\n         BZ    EOJ8                No.  Get out.\n         L     R1,0(,R6)           Pt to cmd buffer. (R6 reused later)\n         LTR   R1,R1               Any CMD buffer?\n         BZ    EOJ8                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No. Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear hi order 3 bytes.\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of cmdbufr header\n         BC    8,WMESS2            Zero, message to enter userid.\n         BC    5,EOJ8              Less, or overflow, out.\n** ---------------------------------------------------------------- **\nPARM     DS    0H                  Do all program functionality.\n         BAL   R9,GETIDS           Get parameters and execute\n*                                   any function called for.\n         B     EOJ0                Get out.\n** ---------------------------------------------------------------- **\nWMESS2   DS    0H                  Print help messages.\n         BAL   R9,PRINTERR\n         B     EOJ4\n** ---------------------------------------------------------------- **\nEOJ0     DS    0H                  End of job.\n         APUT  RETURN0,L'RETURN0\n         LA    R15,0               Set CC = 0.\n         B     RETURN\nEOJ4     DS    0H\n         APUT  RETURN4,L'RETURN4\n         LA    R15,4               Set CC = 4.\n         B     RETURN\nEOJ8     DS    0H\n         APUT  RETURN8,L'RETURN8\n         LA    R15,8               Set CC = 8.\n         B     RETURN\nRETURN   L     R13,SAVE+4          Return to caller.\n         ST    R15,16(,R13)        Put RC into passed save area.\n         LM    R14,R12,12(R13)\n         BR    R14\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Command not APF authorized message.\n         APUT  MESSAGNA,L'MESSAGNA\n         B     EOJ4\n** ---------------------------------------------------------------- **\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              Get the parameters for the command.                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   Notes:  The ASID(xxx) can be coded first, without a userid.   *\n*           A dash can be coded first, to run the entire CSCB     *\n*            chain and display all the jobnames in it, with       *\n*            their associated ASIDs.  ? coded first gives HELP.   *\n*           If you code the word CSCB or DISP(lay) after either   *\n*            a jobname or an ASID(hhhh) then a display of ALL     *\n*            matching CSCB chain entries will be displayed, and   *\n*            no changes will be made.                             *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETIDS   DS    0H                  Get all parameters for the program.\n         ST    R9,SAVER9A\n         ST    R4,SAVER4C\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,8                Load reg for BCT loop.\n         LR    R7,R1               Initialize pointer to first\n         LA    R7,0(,R7)                character of the ID field.\n         LA    R8,0                Initialize character count.\n         MVC   JOBID(8),BLANKS     Clear (first param - JOBNAME) field.\n         LA    R4,JOBID            Point reg to beginng of JOBID field.\n*\nCUTIDLEN DS    0H                  Look at the JOBID field first.\n*                                  (May contain ASID( or CSCB.)\n*\n         CLI   0(R7),X'40'         Is this character a blank?\n         BE    NOMORCUT            Yes, we are at the end of the field.\n         MVC   0(1,R4),0(R7)       Move only one character at a time.\n         OC    JOBID(8),BLANKS     And uppercase the partial jobid.\n*\n*   Is this a run of the CSCB chain only?\n* -- >  Test for CSCB  first  ---- below\n         CLI   JOBID,C'-'          Did we code '-' first?\n         BNE   CSCBHELP            No. Try if help asked for.\n         B     CSCBRUN1            Yes. Run entire CSCB chain.\n* - > Help\nCSCBHELP DS    0H\n         CLI   JOBID,C'?'          Help?\n         BNE   NOCSCB              No. Skip this code.\n         BAL   R9,PRINTERR         Yes. Print messages\n         B     EOJ0                  and get out with code 0.\n* - > Help\nCSCBRUN1 DS    0H\n         ST    R8,SAVER8A          Store count for display if needed.\n         OI    FLAG2,X'40'         Mark that this is CSCB only run.\n         BAL   R9,RUNCSCB          Do the run for CSCB chain.\n         B     EOJ0                Out with normal return code.\nNOCSCB   DS    0H\n* -- >  Test for CSCB  first  ---- above\n*\n*   Was the ASCB(hhh) parameter coded without the jobid?\n* -- >  Test for ASID( first  ---- below\n         CLC   JOBID(L'ASIDC),ASIDC  Did we code ASID( in jobid field?\n         BNE   NOASIDF             No. Pass this code.\n         OI    FLAG1,X'01'         Flag that ASID( ) was first.\n         NI    FLAG1,X'FF'-X'02'   Turn off Jobname in jobid field flag\n         MVC   ASIDWKL(L'ASIDC),JOBID  Move the ASID( to proper field.\n         MVC   JOBID,BLANKS        Blank out Job ID if ASID( coded.\n         LA    R7,1(,R7)           Bump another character.\n         LA    R8,1(,R8)           Count another character.\n         LA    R6,1                Set number of branches later.\n*                                  This will limit number of params\n*                                   that are searched for.\n         B     ASIDONLY            Bypass all the real jobname stuff.\n* -- >  Test for ASID( first  ---- above\nNOASIDF  DS    0H                  ASID( is not the first parameter.\n         LA    R4,1(,R4)           Bump another character.\n         LA    R7,1(,R7)           Bump another character.\n         LA    R8,1(,R8)           Count another character.\n         CR    R8,R5               End of command buffer ?\n         BNL   NOMORCUT            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for the next blank, up till 8.\nNOMORCUT DS    0H\n         STC   R8,SAVCOUNT         Save length of Jobname\n         L     R4,SAVER4C          Restore work register for use later.\n         OC    JOBID(8),BLANKS     Uppercase the new Job Id.\n         OI    FLAG1,X'02'         Set 'Jobname Coded' flag.\n*  -  Display the found JOBID - below\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Search Jobname:'\n         MVC   OUTPUT+17(8),JOBID\n         APUT  OUTPUT,30\n         APUT  MESSAGEL,L'MESSAGEL\n*  -  Display the found JOBID - above\n         LA    R6,1                Set number of branches later.\n*                                  This will limit number of params\n*                                   that are searched for.\n         B     LOOKKEYW\n*  Constants - below - ***\nJOBID    DC    C'        '         STORE PARM USERID HERE\nBLANKS   DC    C'        '         8 BLANKS\nMESSAGET DC    C'CNCLPG 1.3.9 - Make a Job, STC or TSU Cancelable, etc.X\n                (? for help)'\nMESSAGEU DC   C'------ ----- - ---- - ---- --- -- --- ----------- ----'\nMESSAGEL DC    C'----------------------------'\nMESSAGEM DC    C'-----------------------------------------------'\nMESSAG2A DC    C'Enter JOBNAME and/or ASID(hhhh) after COMMAND name,'\nMESSAG2B DC    C'   then CNCL, NCNC, FORC, NFRC, NSWP, SWAP, CSCB or DIx\n               SP.'\nMESSAG2C DC    C'   DISPlay or CSCB will display CSCB chain entries,'\nMESSAG2D DC    C'   without changing them.'\nMESSAG2E DC    C' When changing a job, we want to be accurate, '\nMESSAG2F DC    C'  therefore you should use the DISPlay option first.'\nMESSAG2Z DC    C'           SEE THE NOTES, BELOW.  '\nMESSAG2G DC   C' To display the whole CSCB, code - (dash) for JOBNAME.'\nMESSAG2H DC    C' To see this help message, code ? for JOBNAME.'\nMESSAG2I DC    C'Notes :     ** VERY IMPORTANT TO READ **'\nMESSAG2J DC   C' CSCB (DISP) display for an ASID shows all occurrences'\nMESSAG2K DC    C'  for that ASID, regardless of JOBNAME.      '\nMESSAG2L DC C' CSCB (DISP) display for a JOBNAME shows all occurrences'\nMESSAG2M DC    C'  for that JOBNAME, regardless of ASID.      '\nMESSAG2N DC    C' CNCL, NCNC, FORC, NFRC, NSWP, SWAP will change the FIx\n               RST'\nMESSAG2O DC    C'  entry in the CSCB chain that matches, if MULTIPLE '\nMESSAG2P DC    C'  entries exist. But DISP will display ALL applicable'\nMESSAG2Q DC    C'  matching entries in the CSCB chain, so you can see'\nMESSAG2R DC    C'  which one you want to change specifically.'\nMESSAG2S DC    C' When you code BOTH jobname and asid, to CHANGE it,'\nMESSAG2T DC    C'  then ONLY that specific job and asid gets changed.'\nMESSAGE3 DC    C'WE GOT HERE'\nMESSAGE4 DC    C'TEST CHECK THIS'\nMESSAGNG DC    C'Job was not done. SYSEVENT return code was     '\nMESSAGNS DC    C'Job xxxxxxxx for ASID HHHH made non-swappable.'\nMESSAGSW DC    C'Job xxxxxxxx for ASID HHHH was made swappable.'\nMESSAGAN DC    C'Job xxxxxxxx for ASID HHHH already non-swappable.'\nMESSAGAS DC    C'Job xxxxxxxx for ASID HHHH was already swappable.'\nMESSAGFN DC    C'Function xxxx was called for.'\nMESSAGBU DC    C'Job xxxxxxxx for ASID HHHH has been burned.'\nRETURN0  DC    C'Return code is 0'\nRETURN4  DC    C'Return code is 4'\nRETURN4R DC    C'Return code is 4 from the SETRLD function'\nRETURN8  DC    C'Return code is 8'\n*                     ***  Places to save registers  ***  below\nSAVER3A  DS    F\n*AVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER3E  DS    F\nSAVER3F  DS    F\nSAVER4A  DS    F\nSAVER4B  DS    F\nSAVER4C  DS    F\nSAVER4D  DS    F\n*AVER5A  DS    F\nSAVER6A  DS    F\n*AVER6B  DS    F\nSAVER7A  DS    F\nSAVER7B  DS    F\nSAVER8A  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nSAVER9G  DS    F\nSAVER9H  DS    F\nSAVER9I  DS    F\nSAVER9J  DS    F\nSAVER9K  DS    F\nSAVER9L  DS    F\n*AVER9M  DS    F\n*AVER9N  DS    F\nSAVER9O  DS    F\n*AVER9P  DS    F\n*                     ***  Places to save registers  ***  above\nSAVCOUNT DS    X\nDUBLZERO DC    D'0'\nFULLZERO DC    F'0'\nCANCINDC DC    X'00'\nCANCKEY0 DC    X'00'\nNEWCHACT DC    X'00'\n*  Constants - above - ***\nLOOKKEYW DS    0H                  Look for additional keywords.\n         LA    R7,1(,R7)           Bump command buffer pointer.\n         LA    R8,1(,R8)           Bump character counter.\n         CR    R8,R5               End of command buffer?\n         BNL   GETIDEND            Yes. Don't look any more.\n         MVC   ASIDWKL(5),BLANKS   Clear parameter work field.\n         MVC   ASIDWKL(5),0(R7)    Next 5 characters to work field.\nASIDONLY DS    0H                  Jump to here if ASID( coded first.\n         OC    ASIDWKL(4),BLANKS   Uppercase work field.\n         CLC   ASIDC,ASIDWKL       Is the ASID( keyword there?\n         BE    DOASID              Yes. Process it.\n         CLC   CNCLC,ASIDWKL       Is the CNCL  keyword there?\n         BE    DOCNCL              Yes. Process it.\n         CLC   NCNCC,ASIDWKL       Is the NCNC  keyword there?\n         BE    DONCNC              Yes. Process it.\n         CLC   SWAPC,ASIDWKL       Is the SWAP  keyword there?\n         BE    DOSWAP              Yes. Process it.\n         CLC   NSWPC,ASIDWKL       Is the NSWP  keyword there?\n         BE    DONSWP              Yes. Process it.\n         CLC   FORCC,ASIDWKL       Is the FORC  keyword there?\n         BE    DOFORC              Yes. Process it.\n         CLC   NFRCC,ASIDWKL       Is the NFRC  keyword there?\n         BE    DONFRC              Yes. Process it.\n         CLC   CSCBC,ASIDWKL       Is the CSCB  keyword there?\n         BE    DOCSCB              Yes. Process it.\n         CLC   DISPC,ASIDWKL       Is the DISP  keyword there?\n         BE    DOCSCB              Yes. Process it.\n         CLC   RL,ASIDWKL          Is RLxO or RLxF there?\n         BE    DOACEE              Yes. Process it.\n         CLC   BURNC,ASIDWKL       Is the BURN  keyword there?      BUR\n         BE    DOBURN              Yes. Process it.                 BUR\n         CLC   DACEC,ASIDWKL       Is the DACE  keyword there?\n         BE    DODACEE             Yes. Process it.\n         B     LOOKKEYW            Go loop and look at next character.\nASIDWKL  DC    CL5' '              Second parameter work area.\n*\nASIDC    DC    C'ASID('            Literals....\nCNCLC    DC    C'CNCL'\nNCNCC    DC    C'NCNC'\nSWAPC    DC    C'SWAP'\nNSWPC    DC    C'NSWP'\nFORCC    DC    C'FORC'\nNFRCC    DC    C'NFRC'\nCSCBC    DC    C'CSCB'\nDISPC    DC    C'DISP'\nRL       DC    C'RL'\nBURNC    DC    C'BURN'\nDACEC    DC    C'DACE'\n*\nDOASID   DS    0H                  Look for hex value of the ASID.\n         OI    FLAG1,X'04'         Show that ASID( was coded.\n         BAL   R9,GETASID          Go get the rest of the parameters.\n         MVC   ASIDWKL(5),BLANKS   Blank out the second wkarea for\n*                                   a further parameter search.\n         B     LOOKKEYW            Re-loop to look further for params.\n*\nDOCNCL   DS    0H                  Handle CNCL (cancelable) keyword.\n         OI    CANCINDC,X'08'      Show which CHACT bit is affected.\n         OI    FLAG2,X'01'         Show that CNCL was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'01'        Set to OR the bits\n         NI    ONSWIT,X'FF'-X'02'   and not to AND the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n* ------------------------------------------------------------------- *\n*                                    Print the action code.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),CNCLC\n         APUT  OUTPUT,25\n*                                    Print the bit in CHACT affected.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDONCNC   DS    0H                  Handle NCNC (non-cancelable) keyword\n         OI    CANCINDC,X'08'      Show which CHACT bit is affected.\n         OI    FLAG2,X'02'         Show that NCNC was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'02'        Set to AND the bits\n         NI    ONSWIT,X'FF'-X'01'   and not to OR the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n*                                    Print the action code.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),NCNCC\n         APUT  OUTPUT,25\n*                                    Print the bit in CHACT affected.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDOSWAP   DS    0H                  Not active yet.\n         OI    FLAG2,X'04'\n         MVC   MESSAGFN+9(4),SWAPC\n         APUT  MESSAGFN,L'MESSAGFN\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         BAL   R9,KEY0SWNS\n         BCT   R6,LOOKKEYW\n         B     GETIDEND\n* ------------------------------------------------------------------- *\nDONSWP   DS    0H                  Not active yet.\n         OI    FLAG2,X'08'\n         MVC   MESSAGFN+9(4),NSWPC\n         APUT  MESSAGFN,L'MESSAGFN\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         BAL   R9,KEY0SWNS\n         BCT   R6,LOOKKEYW\n         B     GETIDEND\n* ------------------------------------------------------------------- *\nDOFORC   DS    0H                  Handle FORC (forcible) keyword\n         OI    FLAG2,X'10'         Show which CHACT bit is affected.\n         OI    CANCINDC,X'01'      Show that FORC was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'01'        Set to OR the bits\n         NI    ONSWIT,X'FF'-X'02'   and not to AND the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n*\n         MVC   OUTPUT,OUTPUT-1       Print the action code.\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),FORCC\n         APUT  OUTPUT,25\n*\n         MVC   OUTPUT,OUTPUT-1       Print the bit in CHACT affected.\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDONFRC   DS    0H                  Handle NFRC (non-forcible) keyword\n         OI    FLAG2,X'20'         Show which CHACT bit is affected.\n         OI    CANCINDC,X'01'      Show that NFRC was coded.\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match.\n         OI    ONSWIT,X'02'        Set to AND the bits\n         NI    ONSWIT,X'FF'-X'01'   and not to OR the bits.\n         BAL   R9,KEYZERO          Do the Key 0 changes to CSCB entry.\n         BAL   R9,PRNWCSCB         Print the info from the current CSCB\n         BAL   R9,FORCHACT         Format the relevant CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline.\n*\n         MVC   OUTPUT,OUTPUT-1       Print the action code.\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),NFRCC\n         APUT  OUTPUT,25\n*\n         MVC   OUTPUT,OUTPUT-1       Print the bit in CHACT affected.\n         MVC   OUTPUT(23),=C'Cancel Indicator Flag :'\n         HEX   OUTPUT+25,1,CANCINDC\n         APUT  OUTPUT,30\n*\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDOCSCB   DS    0H\n         OI    FLAG1,X'08'         Show CSCB keyword was coded.\n         OI    FLAG2,X'40'         Show CSCB keyword was coded.\n         MVC   OUTPUT,OUTPUT-1       Print the action code.\n         MVC   OUTPUT(15),=C'Action code   :'\n         MVC   OUTPUT+17(4),CSCBC\n         MVC   OUTPUT+23(9),=C'(DISPlay)'\n         APUT  OUTPUT,35\n         BAL   R9,RUNCSCB          Run the CSCB chain with print.\n         BCT   R6,LOOKKEYW         Look for another keyword.\n         B     GETIDEND            After enough looks, end.\n* ------------------------------------------------------------------- *\nDOACEE   DS    0H                  Not active yet.\n         MVC   MESSAGFN+9(4),ASIDWKL  Display entered\n         APUT  MESSAGFN,L'MESSAGFN       function code.\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n         BAL   R9,SETRLD           Do RL function.\n         TM    FLAG3,X'01'         Not \"on\" or \"off\"?\n         BO    EOJ4                Report error.\n         B     GETKEYNR            End normally.\n* ------------------------------------------------------------------- *\nGETIDEND DS    0H                  End of keyword processing.\n         TM    FLAG2,X'FF'         Check if any real actions asked  BUR\n         BM    GETKEYNR            Yes, some were.\n         APUT  MESSAGEY,L'MESSAGEY    No. Display help messages.\n         BAL   R9,PRINTERR\n         B     EOJ4                   And end with code = 4.\nGETKEYNR DS    0H                  Real actions WERE asked for.\n         B     EOJ0                So end with normal return code.\n         L     R9,SAVER9A\n         BR    R9\n** ---------------------------------------------------------------- **\nSETRLD   DS    0H                  Do the RL function\n         BAKR  R9,0                Save all registers on the stack\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match\n         BAL   R9,GETASCB          Get the ASCB number\n         LR    R9,R15              Point to ASCB\n         L     R9,0(,R9)            Point to ASCB\n         L     R5,ASCBASXB-ASCB(,R9)   Get ASXB\n*--------------------------------------------------------------*\n*                    Get bit setting                           *\n*--------------------------------------------------------------*\n         LA    R9,ACEETBL         Get ACEE table with bit settings\n         USING ACEEFC,R9          Address our table\nLOOKFUN  DS    0H                 Loop thru table\n         CLI   FUNCT,255          Not found - end of table\n         BE    ERROR              Error; get out\n         CLC   FUNCT,ASIDWKL+2    Found function?\n         BE    FOUFUNC            YES;\n         LA    R9,3(,R9)          NEXT\n         B     LOOKFUN            LOOK FOR FUNCTION AGAIN\nFOUFUNC  DS    0H\n         MODESET MODE=SUP,KEY=ZERO\n         XR    R6,R6              Clear all Registers\n         LH    R6,FOUNASID        Get Asid\n         LA    R2,1               Give us AUTHORITY\n         AXSET AX=(2)\n         SSAR  R6                 Set SECONDARY ADDRESS SPACE\n         SAC   512                AR MODE\n         USING ACEE,R5            Address ACEE\n         LAM   R9,R9,=F'0'\n         LAM   AR7,AR7,=F'1'      SECONDARY ADDRESS SPACE\n         LAM   AR5,AR5,=F'1'      SECONDARY ADDRESS SPACE\n         L     R5,ASXBSENV-ASXB(,R5) Get ACEE\n         LA    R7,ACEEFLG1        Get flag one\n         XR    R8,R8              clear r8\n         IC    R8,DISP            get disp\n         LA    R7,0(R8,R7)        Point to byte\n         CLI   ASIDWKL+3,C'F'     Turn  it off\n         BE    OFF                YES;\n         CLI   ASIDWKL+3,C'O'     Turn  it on\n         BE    BITON              YES;\n         OI    FLAG3,X'01'        ERROR has been marked\n         B     RESET              Back to normal mode\nBITON    DS    0H\n         OC    0(1,R7),BITSET     set the bit\n         B     RESET\nOFF      DS    0H\n         MVI   BYTE,255           all f's\n         XC    BYTE,BITSET        Flip the bits\n         NC    0(1,R7),BYTE       turn it off\nRESET    DS    0H\n         LH    R6,OWNASID         re-set sasid\n         SSAR  R6\n         SAC   0\n         LAM   AR5,AR5,=F'0'      SECONDARY ADDRESS SPACE\n         LAM   AR7,AR7,=F'0'      SECONDARY ADDRESS SPACE\n         MODESET KEY=NZERO,MODE=PROB\n         TM    FLAG3,X'01'        Not \"on\" or \"off\" command?\n         BO    ERROR              Bad command. Show error. Code 4.\nRETZERO  DS    0H\n         XR    R15,R15            Clear return code\n         B     RET\nERROR    DS    0H                 Don't do actions, display entered\n         APUT  RETURN4R,L'RETURN4R\n         LA    R15,4                function, and show help.\nRET      DS    0H\n         PR\n** ---------------------------------------------------------------- **\n* ------------------------------------------------------------------- *\nDODACEE  DS    0H                  Display this ASID's ACEE\n         MVC   MESSAGFN+9(4),ASIDWKL  Display entered\n         APUT  MESSAGFN,L'MESSAGFN       function code.\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n         BAL   R9,SETDACEE         Do DACE function.\n         B     GETKEYNR            RETURN\nSETDACEE DS    0H                  Do the DACE function\n         BAKR  R9,0                Save all registers on the stack\n         BAL   R9,FINDCSCB         Look thru CSCB chain for a match\n         BAL   R9,GETASCB          Get the ASCB number\n         LR    R9,R15              Point to ASCB\n         L     R9,0(,R9)            Point to ASCB\n         L     R5,ASCBASXB-ASCB(,R9)   Get ASXB\n*--------------------------------------------------------------*\nCOPYACEE DS    0H                  Mimic the RL code to get ACEE\n         MODESET MODE=SUP,KEY=ZERO\n         XR    R6,R6               Clear all Registers\n         LH    R6,FOUNASID         Get Asid\n         LA    R2,1                Give us AUTHORITY\n         AXSET AX=(2)\n         SSAR  R6                  Set SECONDARY ADDRESS SPACE\n         SAC   512                 AR MODE\n         USING ACEE,R5             Address ACEE\n         LAM   R9,R9,=F'0'\n         LAM   AR7,AR7,=F'1'       SECONDARY ADDRESS SPACE\n         LAM   AR5,AR5,=F'1'       SECONDARY ADDRESS SPACE\n         L     R5,ASXBSENV-ASXB(,R5) Get ACEE\n         ST    R3,SAVER3F          Save\n         ST    R4,SAVER4D            work registers\n         L     R3,SAVACEEC         Get other adrspc's ACEE\n         USING ACEECSEC,R3\n         XC    ACEECOPY,ACEECOPY   Clear the area out\n         MVC   ACEECOPY(192),0(R5) Do the cross addrspc copy\n         ST    R5,ACEEADDR\n         LH    R6,OWNASID          re-set sasid\n         SSAR  R6\n         SAC   0\n         LAM   AR5,AR5,=F'0'       SECONDARY ADDRESS SPACE\n         LAM   AR7,AR7,=F'0'       SECONDARY ADDRESS SPACE\n         MODESET KEY=NZERO,MODE=PROB\n* -----------------------          Continue using the gotten data.\n*        APUT  ACEECOPY,96         Test display to see if the\n*        APUT  ACEECOPY+96,96       gotten data is correct.\n* -----------------------\n*                                  Call FACEE program to display\n*                                   the gotten ACEE block info.\n         L     R15,SAVFACEE        Load entry pt of FACEE program.\n         XR    R1,R1               Clear R1 to be sure.\n         L     R1,SAVACEEC         Load address of ACEE image.\n         BALR  R14,R15             Call FACEE to display the data.\n         DROP  R3\n         L     R3,SAVER3F          Restore\n         L     R4,SAVER4D            work registers\n         XR    R15,R15             Clear return code\n         PR\nSAVACEEC DC    A(0)                Address of ACEE gotten copy\nSAVFACEE DC    A(0)                Address of FACEE entry point\n** ---------------------------------------------------------------- **\nACEETBL  DC    C'S',X'80',X'00'     ACEESPEC\n         DC    C'O',X'20',X'00'     ACEEOPER\n         DC    C'U',X'10',X'00'     ACEEAUDT\n         DC    C'P',X'02',X'00'     ACEEPRIV\n         DC    C'K',X'01',X'00'     ACEERACF\n         DC    C'A',X'80',X'01'     ACEEALTR\n         DC    C'C',X'40',X'01'     ACEECNTL\n         DC    C'D',X'20',X'01'     ACEEUPDT\n         DC    C'R',X'10',X'01'     ACEEREAD\n         DC    C'0',X'01',X'01'     ACEENONE\n         DC    C'G',X'80',X'02'     ACEEGRPA\n         DC    C'N',X'01',X'02'     ACEENPWR\n         DC    X'FF'\n*\nACEEFC   DSECT\nFUNCT    DS   C                     FUNCTION\nBITSET   DS   X                     Bit Setting\nDISP     DS   X                     Displacement from ACEEFLG1\nCNCLPG   CSECT                      Reestablish\nBYTE     DS   X\n** ---------------------------------------------------------------- **\nHEX      DS    0H                  Display hex values.\n         ST    R9,SAVER9B\n         MVC   1(1,R15),0(R1)      Move byte.\n         UNPK  0(3,R15),1(2,R15)   Unpack.\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         Increment output pointer.\n         LA    R1,1(,R1)           Increment input pointer.\n         BCT   R0,HEX              Decrement length, then loop.\n         MVI   0(R15),C' '         Blank the trailing byte.\n         L     R9,SAVER9B\n         BR    R9                  Return to caller.\nHEXTAB   DC    C'0123456789ABCDEF' Translate table.\n** ---------------------------------------------------------------- **\nGETASID  DS    0H                  Get hex ASID for 2 bytes.\n         ST    R9,SAVER9C          Save registers.\n         STM   R1,R6,SAVERGS1\n         LA    R6,4                Load BCT register.\n         LA    R4,ASIDWK           Point to ASID work area.\n         TM    FLAG1,X'02'         Ask if Job name was coded.\n         BZ    GETAFL01            Wasn't. Have to adjust pointers.\n         LA    R7,5(,R7)           Bump command buffer pointer.\n         LA    R8,5(,R8)           Bump character counter.\nGETAFL01 DS    0H\nGETASIDL DS    0H                  Loop to get hex ASID for 4 display\n*                                    bytes to convert to 2 hex bytes.\n         CLI   0(R7),C')'          Have we reached close parenthesis?\n         BE    GETASIDG            Yes, assume we've got it.\n         CLI   0(R7),C' '          Have we hit a blank?\n         BE    GETASIDG            Yes, assume we've got it.\n         MVC   0(1,R4),0(R7)       Otherwise move one character over.\n         LA    R4,1(,R4)           Bump one ASIDWK character (target)\n         LA    R7,1(,R7)           Bump command buffer pointer.\n         LA    R8,1(,R8)           Bump character counter.\n         BCT   R6,GETASIDL         Loop for 4 characters.\n         B     GETASIDG            We don't look for more than 4.\nGETASIDG DS    0H\n*        APUT  ASIDWK,4\n         LA    R4,ASIDWK           Point register at workarea again.\n         LA    R1,4                Maximum of 4 characters.\nGETASIDA DS    0H\n         CLI   3(R4),X'40'         Is last character a blank (<4 total)\n         BNE   GETASIDM            No. We're finished sliding.\n         BCTR  R4,0                Slide the pointer one place back.\n         BCT   R1,GETASIDA         Do it no more than 4 times.\nGETASIDM DS    0H\n         MVC   ASIDMV(4),0(R4)     Move 4 characters so last one\n*                                     is not blank.\n         MVC   ASIDWKSV(4),ASIDMV    Save these 4 characters\n         MVC   ASIDWKS(4),ASIDMV        in two places.\n         MVC   OUTPUT,OUTPUT-1       Clear output line.\n         MVC   OUTPUT(25),ASIDMSG    Move coded display format asid.\n         APUT  OUTPUT,40             And put out the message.\n         TR    ASIDMV(4),ASIDVAL     Translate display format message\n*                                      into format X'0h0h0h0h'.\n*        MVC   OUTPUT,OUTPUT-1       Test display of hex result.\n*        HEX   OUTPUT,4,ASIDMV\n*        APUT  OUTPUT,10\n         BAL   R9,VALIDTR            Validity check the hex number.\n         PACK  ASIDGET(3),ASIDMV(5)  Get rid of all zone nibbles.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(15),=C'Search ASID   :' Print resulting 2-bytes\n         HEX   OUTPUT+21,2,ASIDBIN\n         APUT  OUTPUT,30\n         APUT  MESSAGEL,L'MESSAGEL   Add underline for clear display.\n*\nGETASIDE DS    0H                    End of routine.\n         LM    R1,R6,SAVERGS1        Restore registers\n         L     R9,SAVER9C               and\n         BR    R9                          exit.\n** ----------------------------------------------------------------\n*\n*   GETASCB return ASCB give the asid of address space\n*\n*\n*\n*  Input:\n*      FOUNASID = ASID\n*  OutPut:\n*      r15 = 0    Error\n*      r15 = ASCB\n** ----------------------------------------------------------------\nGETASCB  DS    0H\n         ST    R9,SAVER9O            Save Register\n         L     R15,CVTPTR            R15 -> cvt\n         L     R15,CVTASVT-CVT(,R15)  R15 -> asvt\n         USING ASVT,R15\n         CLC   ASVTASVT-ASVT(4,R15),=C'ASVT'  check eyecatcher\n         BNE   NOASCB\n         LA    R15,ASVTENTY-ASVT(,R15) Get first asvt slot\n         LH    R0,FOUNASID           Get asid in question\n         BCTR  R0,0                  Down By 1\n         SLL   R0,2                  Multiply by 4\n         AR    R15,R0                Point to ASCB\n         BR    R9\nNOASCB   DS    0H\n         XR    R15,R15               Clear r15\n         L     R9,SAVER9O            Restore Register\n         BR    R9\nASIDWKB  DC    CL4'    '\nASIDWK   DC    CL4'    '\nASIDWKF  DC    CL4' '\nASIDMV   DC    CL4'    '\nASIDMVF  DC    CL4' '\nASIDBIN  DS    0XL2\nASIDGET  DC    XL4'00000000'\n\nSAVERGS1 DS    6F\n*                   Translate table to validity check ASID.\n*                     Convert display values to X'0h'\n*                     (where h is the hex value).\nASIDVAL  DS    0D\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'00CCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CC0A0B0C0D0E0FCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CC0A0B0C0D0E0FCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n         DC    XL16'00010203040506070809CCCCCCCCCCCC'\nFILLER1  DS    CL8\nASIDMSG  DC    CL21'ASID parm entered  : '\nASIDWKSV DC    CL4' '\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\nFINDCSCB DS    0H                  Find CSCB entry to change or report.\n         ST    R9,SAVER9D          Save registers.\n         ST    R3,SAVER3A\nFINDCSST DS    0H                  Get the first CSCB.\n         L     R3,16               CVT\n         L     R3,X'94'(,R3)       MSER - pointer to CSCB chain.\n         ICM   R3,15,0(R3)         First CSCB entry.\n         USING CHAIN,R3            Tell assembler.\n         BZ    FINDCSEC            If zero, we are at end of CSCB chain\nFINDCSLP DS    0H                  Loop through the CSCB entries.\n         MVC   CSCBACTF(1),CHACT     Save CSCB ACT flag for this CSCB.\n         MVC   CSCBJOBI(8),CHKEY     Save CSCB Jobid (CHKEY).\n         MVC   CSCBPROC(8),CHCLS     Save CSCB PROC id (CHCLS).\n         MVC   CSCBASID(2),CHASID    Save CSCB ASID (CHASID).\n* ------------------------------------------------------------------- *\n* We first try to match a JOBID if coded, to the job id in this CSCB. *\n* If equal, we see if an ASID has been coded, and both have to match. *\n* Otherwise, with no match, we go to the end of the CSCB chain.       *\n* ------------------------------------------------------------------- *\nFINDCSMY DS    0H                  Find the CSCB that I want.\n         TM    FLAG1,X'04'         Was ASID( coded at all?\n         BZ    FINDCSJB            No. Just find a JOBID match.\n         TM    FLAG1,X'01'         Is the JOB id missing?\n         BO    FINDCSAS            Yes, just look for an ASID match.\n         TM    FLAG1,X'02'         Was JOB id coded?\n         BO    FINDCSJB            Yes. Look for it.\n         ICM   R3,15,0(R3)         Go to next CSCB.\n         BZ    FINDCSEC            If zero, we are at end of CSCB chain\n         B     FINDCSLP            Look at next CSCB entry in table.\nFINDCSJB DS    0H                  Check for JOBID match in this CSCB.\n         CLC   JOBID(8),CSCBJOBI   Compare coded JOBID to CSCB jobname.\n         BE    FINDCSIA            Equal, check if ASID is there.\n         ICM   R3,15,0(R3)         Otherwise go to the next CSCB.\n         BZ    FINDCSEC            Zero, end of the CSCB chain.\n         B     FINDCSLP            Not zero, look at the next entry.\nFINDCSIA DS    0H\n         TM    FLAG1,X'04'         Was ASID( coded?\n         BZ    FINDCSFD            No. Found it on just a job match.\n*                                   So this is the first job that\n*                                   matched, if there are multiple\n*                                   jobs with the same name.\nFINDCSAS DS    0H                  Check the ASID in the CSCB.\n         CLC   ASIDBIN(2),CSCBASID Is this our ASID? Does it match.\n         BE    FINDCSFD            I guess we found it.\n         ICM   R3,15,0(R3)         Go to the next CSCB.\n         BZ    FINDCSEC            Zero marks the end of the CSCB chain\n         B     FINDCSLP            Not zero. Look at the next entry.\nFINDCSFD DS    0H                  Our CSCB has been found.\n         ST    R3,FOUNCSCB         Save found CSCB address.\n         MVC   FOUNACTF,CHACT      Save\n         MVC   FOUNJOBI,CHKEY        CSCB\n         MVC   FOUNPROC,CHCLS          info.\n         MVC   FOUNASID,CHASID\n         BAL   R9,PRNTCSCB         Print info from the current CSCB.\n         BAL   R9,FORCHACT         Format some CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Put out an underline.\n         B     FINDCSEN            Go to end of routine.\n         DROP  R3\nFINDCSEC DS    0H                  Came to end of CSCB chain.\n         APUT  MESSAGEN,L'MESSAGEN   Then put out a message\n         B     EOJ4                  And end with code 4.\nFINDCSEN DS    0H\n         L     R3,SAVER3A\n         L     R9,SAVER9D\n         BR    R9\n*            Constants associated with this routine.    -    below\nFOUNACTF DC    X'00'\nFOUNCSCB DS    F                   FOUND CSCB ADDRESS\nFOUNJOBI DC    CL8' '\nFOUNPROC DC    CL8' '\nFOUNASID DC    H'0'\nCSCBACTF DC    X'00'\nCSCBJOBI DC    CL8' '\nCSCBPROC DC    CL8' '\nCSCBASID DC    H'0'\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\nVALIDTR  DS    0H                  Validate hex characters coded.\n         ST    R9,SAVER9E          Save\n         STM   R4,R6,SAVEWRK          registers.\n         LA    R4,ASIDMV           Point to translated display chars.\n         LA    R6,ASIDWKS          Point to chars with error signs.\n         LA    R5,4                BCT register - only 4 times.\nVALIDTRS DS    0H\n         CLI   0(R4),X'CC'         Is this an invalid character?\n         BE    VALIDTRR            Yes. Substitute a ? for message.\n         LA    R4,1(,R4)           Next translated character.\n         LA    R6,1(,R6)           Next char for error message.\n         BCT   R5,VALIDTRS         Loop to test validity of this char.\n         TM    ERRASID,X'01'       After 4 chars, any errors found?\n         BO    VALIDERR            Yes. Write messages.\n         B     VALIDTRE            No. Get out of routine.\nVALIDTRR DS    0H                  Come here if invalid char found.\n         OI    ERRASID,X'01'       Flag that at least one was found.\n         MVI   0(R6),C'?'          Substitute a ? for it in message.\n         LA    R4,1(,R4)           Next translated character.\n         LA    R6,1(,R6)           Next char in error message.\n         BCT   R5,VALIDTRS         Check that character for validity.\nVALIDERR DS    0H                  Error messages if char is invalid.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(37),ASIDBADM\n         APUT  OUTPUT,45\n*        MVC   OUTPUT,OUTPUT-1\n*        MVC   OUTPUT(51),MSGBADPR\n*        APUT  OUTPUT,52\n         B     EOJ4                Get out with code 4.\nVALIDTRE DS    0H\n         L     R4,SAVER4B          Restore regs used in this routine.\n         LM    R4,R6,SAVEWRK\n         BR    R9\n*            Constants associated with this routine.    -    below\nERRASID  DC    X'00'\nSAVEWRK  DS    3F\nMSGBADPR DC    C'Bad ASID entered. Use end parenthesis ) to delimit.'\nASIDBADM DC    CL33'Bad Characters marked with a ?:  '\nASIDWKS  DC    CL4' '\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\n* -- -- -- -- -- -- -- -- -- -- -- --    R3 points to a CSCB address\nPRNTCSCB DS    0H                  Print a CSCB entry.\n         ST    R9,SAVER9F          Save BAL register.\n         ST    R3,SAVECSCB         Saved found CSCB address.\n         USING CHAIN,R3\n*                   Print info from current CSCB\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Job  ID :'\n         MVC   OUTPUT+11(8),CHKEY\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Proc ID :'\n         MVC   OUTPUT+11(8),CHCLS\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'ASID    :'\n         HEX   OUTPUT+11,2,CHASID\n         APUT  OUTPUT,25\n         TM    FLAG2,X'80'                Is this a BURN action?    BUR\n         BO    PRNTFINI                   Yes. Abridge the messages BUR\n         TM    FLAG2,X'40'\n         BO    PRNTCSC1\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(21),=C'Previous CHACT Flags:'\n         HEX   OUTPUT+23,1,CHACT\n         APUT  OUTPUT,25\n         B     PRNTCSC2\nPRNTCSC1 DS    0H\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(21),=C'Current  CHACT Flags:'\n         HEX   OUTPUT+23,1,CHACT\n         APUT  OUTPUT,25\nPRNTCSC2 DS    0H\n         DROP  R3\nPRNTFINI DS    0H\n         L     R3,SAVECSCB         Restore register to what it was.\n         L     R9,SAVER9F          Restore BAL register and\n*                                     branch back to caller.\n         BR    R9\nSAVECSCB DS    F                   Saved address of found CSCB.\n** ---------------------------------------------------------------- **\nRUNCSCB  DS    0H                  Run through the CSCB chain.\n         ST    R9,SAVER9G\n         ST    R3,SAVER3C\n         ST    R7,SAVER7A\nRUNCSCBT DS    0H\n         TM    FLAG2,X'40'         Only run if CSCB keyword was coded.\n         BZ    RUNCSCBE            Not coded, get out.\n*                                  Display this is a CSCB chain run.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(40),=C'This is a run of the CSCB Chain only ...'\n         APUT  OUTPUT,45\n         APUT  MESSAGEL,L'MESSAGEL   Print underline.\n*                                  Find the CSCB chain:\n         L     R3,16               CVT\n         L     R3,X'94'(,R3)       MSER - pointer to CSCB chain.\n         ICM   R3,15,0(R3)         First CSCB entry.\n         BZ    RUNCSCBE            If zero, end of CSCB chain.\n*                                  Otherwise points to next CSCB in\n*                                    the table.\n         USING CHAIN,R3\nRUNCSCBD DS    0H                  Loop through CSCB entries.\n         MVC   CSCBACTF(1),CHACT     Save CSCB ACT flag for this CSCB.\n         MVC   CSCBJOBI(8),CHKEY     Save CSCB JOBID (CHKEY).\n         MVC   CSCBPROC(8),CHCLS     Save CSCB PROC id (CHCLS).\n         MVC   CSCBASID(2),CHASID    Save CSCB ASID (CHASID).\n*  Test\n*        MVC   OUTPUT,OUTPUT-1\n*        HEX   OUTPUT,2,CHASID\n*        HEX   OUTPUT+6,2,ASIDBIN\n*        MVI   OUTPUT+15,C'i'\n*        APUT  OUTPUT,25\n*  Test\n* -- Limit print of entries to Jobname or ASID only ----  below\n         CLI   JOBID,C'-'          Are we printing the whole CSCB?\n         BE    RUNCSCBY            Yes.\n         CLC   ASIDBIN,=X'0000'    Was an ASID coded for a search?\n         BNE   RUNCSCB2            No. Just check for Jobname.\nRUNCSCB1 DS    0H                  Check for Jobname match.\n         XR    R7,R7               Clear work register.\n         IC    R7,SAVCOUNT         Insert saved length of Jobid.\n         BCTR  R7,0                Decrement for execute.\n         EX    R7,RUNCSCOM         Do the compare for proper length.\n*        BNE   RUNCSCBS            Not equal, don't print result.\n         BE    RUNCSCBP            Equal, print this CSCB entry.\nRUNCSCB2 DS    0H                  Check if ASID was coded.\n         CLC   ASIDBIN,CHASID      ASID match?\n         BNE   RUNCSCBS            No. Skip print of CSCB entry.\nRUNCSCBY DS    0H\n* -- Limit print of entries to Jobname or ASID only ----  above\nRUNCSCBP DS    0H                  Print this entry....\n         BAL   R9,PRNTCSCB         Print of current CSCB information.\n         BAL   R9,FORCHACT         Format some CHACT flags.\n         APUT  MESSAGEL,L'MESSAGEL   Print an underline line.\nRUNCSCBS DS    0H                  If skipping an entry print, go here.\n         ICM   R3,15,0(R3)         Go to next CSCB entry in table.\n         BZ    RUNCSCBE            If it is zero, end of CSCB chain.\n         B     RUNCSCBD            Not zero, loop to next entry and\n*                                    print it.\nRUNCSCBE DS    0H                  End of routine.\n         L     R3,SAVER3C          Restore\n         L     R7,SAVER7A\n         L     R9,SAVER9G             registers and\n         BR    R9                        go back to caller.\nRUNCSCOM CLC   JOBID(*-*),CHKEY   Executed\n         DROP  R3\n** ---------------------------------------------------------------- **\nKEYZERO  DS    0H                  Into Key 0 and change CSCB cntl blk.\n         ST    R9,SAVER9H\n         ST    R4,SAVER4A\n*\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n*\n* -- >    ***    Do as little as possible under Key 0.    ***\nKEYPRLIM DS    0H\n         TM    ONSWIT,X'01'        Are we OR-ing?\n         BZ    SWITOFF             No. Try AND-ing?\n         MVC   CANCKEY0,CANCINDC   Pre-process affecting bits.\n         B     SWITON              All done pre-processing.\nSWITOFF  DS    0H\n         TM    ONSWIT,X'02'        Are we AND-ing?\n         BZ    KEY0BYPS            No. Don't do anything else.\n         XC    CANCINDC,=X'FF'     Reverse the affected bits for AND.\n         MVC   CANCKEY0,CANCINDC   And move them to staging area.\nSWITON   DS    0H\n         USING CHAIN,R3\n         L     R3,FOUNCSCB         Save address of \"found CSCB\".\n*\n* -- >                             We're authorized. Go Key 0.\n         MODESET KEY=ZERO\n         TM    ONSWIT,X'01'        Are we OR-ing?\n         BZ    KEY0OFF             No. Try AND-ing.\n         OC    CHACT(1),CANCKEY0   Do the OR.\n         B     KEY0END             Out of Key 0.\nKEY0OFF  DS    0H\n         TM    ONSWIT,X'02'        Are we AND-ing?\n         BZ    KEY0END             No. Get out altogether.\n         NC    CHACT(1),CANCKEY0   Do the AND.\nKEY0END  DS    0H                  Out of Key 0.\n         MODESET KEY=NZERO\n*\nKEY0BYPS DS    0H                  Key 0 bypass - branch to here.\n         DROP  R3\n         L     R4,SAVER4A\n         L     R9,SAVER9H\n         BR    R9\n** ---------------------------------------------------------------- **\nPRNWCSCB DS    0H                  Print the changed CSCB entry.\n         ST    R9,SAVER9I          Save BAL register.\n         ST    R3,SAVER3D\n         L     R3,FOUNCSCB         Saved found CSCB address.\n         USING CHAIN,R3\n*                   Print info from changed CSCB.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Job  ID :'\n         MVC   OUTPUT+11(8),CHKEY\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'Proc ID :'\n         MVC   OUTPUT+11(8),CHCLS\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(9),=C'ASID    :'\n         HEX   OUTPUT+11,2,CHASID\n         APUT  OUTPUT,25\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(21),=C'Modified CHACT Flags:'\n         HEX   OUTPUT+23,1,CHACT\n         APUT  OUTPUT,25\n         APUT  MESSAGEL,L'MESSAGEL\n         DROP  R3\n         L     R3,SAVER3D          Restore register to what it was.\n         L     R9,SAVER9I          Restore BAL register and\n         BR    R9                     branch back to caller.\n** ---------------------------------------------------------------- **\nFORCHACT DS    0H                  Format the CHACT Flags\n         ST    R9,SAVER9J          Save\n         ST    R3,SAVER3E             registers.\n         USING CHAIN,R3\nFORCANC0 DS    0H                  Show cancelable or not.\n         TM    CHACT,CHCL          Is job cancelable?\n         BO    FORCANC1            Yes, show cancelable.\n         BZ    FORCANC2            No. Show non-cancelable.\n         B     FORFORC0            Fall through, try forceable.\nFORCANC1 DS    0H\n         MVC   MESSTXT,MESSCAN     Tell em job is cancelable.\n         B     FORCANCP\nFORCANC2 DS    0H\n         MVC   MESSTXT,MESSNCN     Tell em job is non-cancelable.\nFORCANCP DS    0H                  Write the actual message out.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(28),FORMTMSG\n         APUT  OUTPUT,30\nFORFORC0 DS    0H                  Show forceable or not.\n         TM    CHACT,CHAFORCE      Is job forceable?\n         BO    FORFORC1            Yes, show forceable.\n         BZ    FORFORC2            No. Show non-forceable.\nFORFORC1 DS    0H\n         MVC   MESSTXT,MESSFOR     Tell em job is forceable.\n         B     FORFORCP\nFORFORC2 DS    0H\n         MVC   MESSTXT,MESSNFR     Tell em job is non-forceable.\nFORFORCP DS    0H                  Write the actual message out.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT(28),FORMTMSG\n         APUT  OUTPUT,30\nFORCHEND DS    0H\n         DROP  R3\n         L     R3,SAVER3E          Restore\n         L     R9,SAVER9J             registers.\n         BR    R9\n*            Constants associated with this routine.    -    below\nMESSCAN  DC    CL14'Cancelable    '\nMESSNCN  DC    CL14'Non-Cancelable'\nMESSFOR  DC    CL14'Forcible      '\nMESSNFR  DC    CL14'Non-Forcible  '\nFORMTMSG DS    0CL28\nMESS000  DC    CL14'Job Status:   '\nMESSTXT  DC    CL14'              '\n*            Constants associated with this routine.    -    above\n** ---------------------------------------------------------------- **\nPRINTERR DS    0H                    Print help messages.\n         ST    R9,SAVER9K            Save BAL register.\n         APUT  MESSAG2A,L'MESSAG2A\n         APUT  MESSAG2B,L'MESSAG2B\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         APUT  MESSAG2E,L'MESSAG2E\n         APUT  MESSAG2F,L'MESSAG2F\n         APUT  MESSAG2Z,L'MESSAG2Z\n         APUT  MESSAGEM,L'MESSAGEM\n         APUT  MESSAG2G,L'MESSAG2G\n         APUT  MESSAG2H,L'MESSAG2H\n         APUT  MESSAGEM,L'MESSAGEM\n         APUT  MESSAG2I,L'MESSAG2I\n         APUT  MESSAG2J,L'MESSAG2J\n         APUT  MESSAG2K,L'MESSAG2K\n         APUT  MESSAG2L,L'MESSAG2L\n         APUT  MESSAG2M,L'MESSAG2M\n         APUT  MESSAG2N,L'MESSAG2N\n         APUT  MESSAG2O,L'MESSAG2O\n         APUT  MESSAG2P,L'MESSAG2P\n         APUT  MESSAG2Q,L'MESSAG2Q\n         APUT  MESSAG2R,L'MESSAG2R\n         APUT  MESSAG2S,L'MESSAG2S\n         APUT  MESSAG2T,L'MESSAG2T\n         APUT  MESSAGEM,L'MESSAGEM\n         L     R9,SAVER9K            Restore BAL register.\n         BR    R9\n** ---------------------------------------------------------------- **\nDOBURN   DS    0H                        BURN process.              BUR\n*                                        Print the action code.     BUR\n         OI    FLAG2,X'80'               Mark as a BURN.            BUR\n         MVC   OUTPUT,OUTPUT-1                                      BUR\n         MVC   OUTPUT(15),=C'Action code   :'                       BUR\n         MVC   OUTPUT+17(4),BURNC                                   BUR\n         APUT  OUTPUT,25                                            BUR\n* -- >  Test if this command is being run APF Authorized - below    BUR\n         STM   R15,R1,SAVE14T1   Now save registers and test if APF BUR\n         XR    R15,R15                authorized.                   BUR\n         TESTAUTH FCTN=1           Are we authorized?               BUR\n         LTR   R15,R15             Test the return code.            BUR\n         BNZ   NOTAUTH           Not zero, tell not authorized.     BUR\n         LM    R15,R1,SAVE14T1   Restore registers used by TESTAUTH BUR\n* -- >  Test if this command is being run APF Authorized - above    BUR\n         BAL   R9,FINDCSCB               Get the Address Space.     BUR\n         MODESET KEY=ZERO,MODE=SUP                                  BUR\n         ST    R7,SAVER7B                Store work register        BUR\n         LH    R7,CSCBASID               Set ASID                   BUR\n         ST    R13,SAVER13A              Save R13                   BUR\n         LA    R13,RTMSAVE               RTM save area              BUR\n         CALLRTM TYPE=MEMTERM,ASID=(R7),COMPCOD=100                 BUR\n         L     R13,SAVER13A              Restore R13                BUR\n         L     R7,SAVER7B                Restore work register      BUR\n         MODESET KEY=NZERO,MODE=PROB                                BUR\n         MVC   MESSAGBU+4(8),FOUNJOBI    Jobname into message       BUR\n         HEX   MESSAGBU+22,2,FOUNASID    ASID into message          BUR\n         APUT  MESSAGBU,L'MESSAGBU       Say job was burned.        BUR\n         B     GETIDEND            After enough looks, end.         BUR\nRTMSAVE  DS    CL72                Work area for RTM                BUR\nSAVER13A DS    F                   Place to save R13                BUR\n** ---------------------------------------------------------------- **\nKEY0SWNS DS    0H                    Key 0 for SWAP or NSWP\n         ST    R9,SAVER9L            Save BAL register.\n         ST    R6,SAVER6A\nKEY0TSTA DS    0H\n* -- >  Test if this command is being run APF Authorized - below\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >  Test if this command is being run APF Authorized - above\n         TM    FLAG2,X'04'         Make ASID swappable?\n         BO    KEY0SWAP            Yes. Do it.\n         TM    FLAG2,X'08'         Make ASID non-swappable?\n         BO    KEY0NSWP            Yes. Do it.\n         B     KEY0EXIT            Not SWAP or NSWP, don't belong here.\n*\nKEY0NSWP DS    0H                    Make address space non-swappable.\n\n         CLC   OWNASID,FOUNASID      Target asid different from ours?\n         BE    KEY0DNSW              No. Just do SYSEVENT.\n         MVC   FUNC,=CL8'DONTSWAP'   Set nswapping function\n         BAL   R9,BUILDSRB           Build SRB block\n*\n* ISSUE SUCCESSFUL MESSAGE\n*\n         MVC   MESSAGNS+4(8),FOUNJOBI\n         HEX   MESSAGNS+22,2,FOUNASID\n         APUT  MESSAGNS,L'MESSAGNS\n         L     R6,SAVER6A            Restore Register\n         L     R9,SAVER9L            Restore BAL register.\n         BR    R9                    go back\nTEMPSAVE DS    4F                    save area\n* - cross address space stuff - above\nKEY0DNSW DS    0H\n         MODESET MODE=SUP,KEY=ZERO\nKEY0SYSD DS    0H\n         LH    R6,FOUNASID\n         SYSEVENT DONTSWAP,ASID=(R6),ENTRY=SVC\n*        STATUS SET,MC,STEP                  EXCLUSIVE TASK\n*        LA    R1,1                          LOAD NEW AUTH. INDEX\n*        AXSET AX=(1)                        SET NEW AUTH. INDEX\n*        ST    R0,OLDAX                      SAVE OLD AUTH. INDEX\n*        LH    R1,FOUNASID                   LOAD JES2 ASID.\n*        SSAR  R1                            SET SPACE SECONDARY JES2.\n*        ST    R1,SYSEVCOD\n*        LTR   R1,R1\n*        BNZ   KEY0NODO\n*        STATUS RESET,MC,STEP\nKEY0NNRM DS    0H\n         MODESET MODE=PROB,KEY=NZERO\n         MVC   MESSAGNS+4(8),FOUNJOBI\n         HEX   MESSAGNS+22,2,FOUNASID\n         APUT  MESSAGNS,L'MESSAGNS\n         B     KEY0EXIT\nKEY0SWAP DS    0H                    Make address space swappable.\n         CLC   OWNASID,FOUNASID      Target asid different from ours?\n         BE    KEY0DSWP              No. Just do SYSEVENT.\n         MVC   FUNC,=CL8'OKSWAP'     Set function\n         BAL   R9,BUILDSRB           Build SRB CSA CONTROL BLOCKS\n*\n*  issue successful message\n*\n         MVC   MESSAGSW+4(8),FOUNJOBI\n         HEX   MESSAGSW+22,2,FOUNASID\n         APUT  MESSAGSW,L'MESSAGSW\n         L     R6,SAVER6A            Restore Registers\n         L     R9,SAVER9L            Restore BAL register.\n         BR    R9\n* - cross address space stuff - below\n* - cross address space stuff - above\nKEY0DSWP DS    0H\n         LH    R6,FOUNASID\n         SYSEVENT OKSWAP,ASID=(R6),ENTRY=SVC\n*        STATUS RESET,MC,STEP\n*        ST    R1,SYSEVCOD\n*        LTR   R1,R1\n*        BNZ   KEY0NODO\nKEY0SNRM DS    0H\n         MODESET MODE=PROB,KEY=NZERO\n         MVC   MESSAGSW+4(8),FOUNJOBI\n         HEX   MESSAGSW+22,2,FOUNASID\n         APUT  MESSAGSW,L'MESSAGSW\n         B     KEY0EXIT\nKEY0NODO DS    0H\n         MODESET MODE=PROB,KEY=NZERO\n         HEX   MESSAGNG+43,1,SYSEVCOD+3\n         APUT  MESSAGNG,L'MESSAGNG\nKEY0EXIT DS    0H\n         L     R6,SAVER6A\n         L     R9,SAVER9L            Restore BAL register.\n         BR    R9\n*--------------------------------------------------------------*\n*                                                              *\n*        build srb control block and accompanying code         *\n*--------------------------------------------------------------*\nBUILDSRB DS    0H\n         STM   R6,R9,TEMPSAVE        Save Registers\n         BAL   R9,GETASCB            Find ASCB for this asid\n         LR    R9,R15                Hold ASCB\n         L     R9,0(,R9)             Point to ASCB\n         MODESET MODE=SUP,KEY=ZERO   Get into supervisor state\n*\nCSA_LEN  EQU  SRBSIZE+84             Csa SRBLOCK AND PARAMTERS\n*\n*---------------------------------------------------------------*\n*       Get CSA for SRB CONTROL BLOCK SUBPOOL 241               *\n*---------------------------------------------------------------*\n         STORAGE OBTAIN,SP=241,LENGTH=CSA_LEN Get Some CSA\n         LR    R6,R1                 Point r2 to srb control block\n         USING SRB,R6                Address SRB\n         XC    SRB(SRBSIZE),SRB      Clear out srb\n         ST    R9,SRBASCB            Save ASCB\n         LA    R8,SRBSIZE(,R6)       R8 -> paramlist\n*       Get CSA paramter list                                   *\n         ST    R8,SRBPARM            Store paramter list address\n         LA    R7,72(,R8)            Point to ECB\n         XC    0(4,R7),0(R7)         Clear ECB Address\n         LA    R7,4(,R7)             Point to ASCb\n         MVC   0(4,R7),X'224'        Move \"HOME\" PSAAOLD address sp\n         LA    R7,4(,R7)             bump to next param\n         CLC   FUNC,=C'DONTSWAP'     Q. non swappable function\n         BE    NONSWAP               yes; branch if so\n         MVC   0(4,R7),=C'OKSW'      otherwise swappable\n         B     SETEPA                set srb program entry point\nNONSWAP  DS    0H\n         MVC   0(4,R7),=C'DONT'      Set FUNCTION IN R7\n*---------------------------------------------------------------*\n*       Get CSA for SRB CONTROL BLOCK SUBPOOL 227               *\n*---------------------------------------------------------------*\nSETEPA   DS    0H\n         STORAGE OBTAIN,SP=227,LENGTH=SWAPLEN  Get Fixed CSA\n         ST    R1,SRBEPA             set entry point\n         LR    R14,R1                Hold that thought\n         LA    R15,SWAPLEN           Get Length\n         LR    R1,R15\n         LA    R0,SWAPXMEM           Point to SRB routine\n         MVCL  R14,R0                Move routine\n*\n         SCHEDULE SRB=(R6),SCOPE=GLOBAL,MODE=NONXM\n*\n         LA    R7,72(,R8)            Point to ECB\n*\n         WAIT  ECB=(R7)\n*\n         L     R9,SRBEPA             Get Entry Point Address\n*\n         STORAGE RELEASE,ADDR=(R6),LENGTH=CSA_LEN,SP=241\n*\n         STORAGE RELEASE,ADDR=(R9),LENGTH=SWAPLEN,SP=227\n*\n         MODESET KEY=NZERO,MODE=PROB\n*\n         LM    R6,R9,TEMPSAVE        Save Registers\n         BR    R9                    Return\nSYSEVCOD DC    F'0'                  SYSEVENT Return Code\nOLDAX    DS    F\nWAREA    DS    D                     Work area\nWAREB    DS    D                     Work area\n** ---------------------------------------------------------------- **\n** --         C  O  N  S  T  A  N  T  S                          -- **\n** ---------------------------------------------------------------- **\nMESSAGNA DC    C'Command was not invoked APF authorized.'\nMESSAGEN DC    C'End of CSCB chain was reached.'\nMESSAGEY DC    C'No valid keyword was coded.'\nFLAG1    DC    X'00'\n*              X'01'               ASID ONLY - NO JOBNAME\n*              X'02'               JOBNAME IS PRESENT.\n*              X'04'               ASID( WAS PRESENT IN PARMS.\n*              X'08'               CSCB CHAIN DISPLAY ONLY.\nFLAG2    DC    X'00'\n*              X'01'               CNCL WAS CODED\n*              X'02'               NCNC WAS CODED\n*              X'04'               SWAP WAS CODED\n*              X'08'               NSWP WAS CODED\n*              X'10'               FORC WAS CODED\n*              X'20'               CSCB WAS CODED\n*              X'80'               BURN WAS CODED                   BUR\nFLAG3    DC    X'00'\nONSWIT   DC    X'00'\n*              X'01'               TURN BIT ON\n*              X'02'               TURN BIT OFF\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVE     DS    9D                  Program Save Area\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\nFUNC     DS    CL8                 Swapppinmg function\n         LTORG\n*-----------------------------------------------------------------*\n*                         SRB CODE                                *\n*-----------------------------------------------------------------*\nSWAPXMEM DS    0D\n         DROP  R12,R11,R10\n         BASR  R5,0\n         USING *,R5                  Entry Point\n         LR    R10,R14               SAVE RETURN ADDRESS\n         LR    R13,R1\n*\n         LA    R9,72(,R13)          Point to ECB Address\n         LA    R8,76(,R13)          Point to ASCB Address\n         L     R8,0(,R8)\n         L     R7,80(,R13)          Get code\n*\n         SETLOCK OBTAIN,TYPE=LOCAL,MODE=UNCOND,REGS=STDSAVE\n*\n         C      R7,=C'OKSW'        OKSWAP\n         BE     SETSWAP\n*\n         SYSEVENT DONTSWAP,ENTRY=BRANCH\n*\n         B      UNLOCK\n*\nSETSWAP  DS     0H\n         SYSEVENT OKSWAP,ENTRY=BRANCH\n*\nUNLOCK   DS     0H\n         SETLOCK RELEASE,TYPE=LOCAL,REGS=STDSAVE\n*\n*\n         POST  (R9),ASCB=(R8),ERRET=GOBACK,LINKAGE=BRANCH\n*\nGOBACK   LR    R14,R10               Return Address\n         BR    R14                   Return\n         LTORG\nSWAPRTM  DS    0D\nSWAPLEN  EQU   *-SWAPXMEM\n** ---------------------------------------------------------------- **\nACEECSEC CSECT\nACEECOPY DC    XL192'00'\nACEEADDR DC    F'0'\nACEECLEN EQU   *-ACEECSEC\n** ---------------------------------------------------------------- **\nCNCLPG   CSECT\n         IHAACEE\n         SPACE\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           Map the CVT.\n         IEECHAIN                  Map the CSCB control block.\n         IHASRB\n         IHAASVT\n         IHAASCB\n         IHAASXB\n         IRAOUCB\n         IHAPSA   DSECT=YES,LIST=YES                           HD APR88\n         IHAFRRS\n         EJECT                                                 HD APR88\n         IKJEFLWA\n         END   CNCLPG\n** ---------------------------------------------------------------- **\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         IHAPSA   DSECT=YES,LIST=YES                           HD APR88\n         EJECT\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END EPUTL\nFACEE    TITLE 'FACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS THE CALLABLE VERSION OF DACEE,    *\n*                   TO FORMAT AN ACEE IMAGE.                          *\n*                                                                     *\n*         SYNTAX:   EXPECTED IS R1 POINTING TO THE ACEECSEC CSECT     *\n*                                                                     *\n*                   ACEECSEC CSECT                                    *\n*                   ACEECOPY DC    XL192'00'    ACEE image to format  *\n*                   ACEEADDR DC    F'0'         Its original address  *\n*                   ACEECLEN EQU   *-ACEECSEC                         *\n*                                                                     *\n*                   CALL FACEE WITH R1 POINTING TO 192-BYTE AREA      *\n*                   CONTAINING THE IMAGE OF AN ACEE CONTROL BLOCK,    *\n*                   AS PART OF THE ACEECSEC CONTROL BLOCK.            *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF MANY ACEE FIELDS AND HEX DUMP    *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED, JUST FOR THE FORMATTING, BUT SINCE      *\n*                   OBTAINING THE CROSS-MEMORY ACEE REQUIRES          *\n*                   AUTHORIZATION, YOU NEED AC(1) IN THAT CASE.       *\n*                                                                     *\n*    SAMPLE CALL:                                                     *\n*                                                                     *\n*             L     R15,SAVFACEE  Load entry pt of FACEE program.     *\n*             XR    R1,R1         Clear R1 to be sure.                *\n*             L     R1,SAVACEEC   Load address of ACEE image CSECT.   *\n*             BALR  R14,R15       Call FACEE to display the data.     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nFACEE    CSECT\nFACEE    AMODE 31\nFACEE    RMODE 24\n* ------------------------------------------------------------------ *\n*                  ADAPTED FROM DACEE TSO COMMAND.                   *\n*                   THIS IS THE CALLABLE VERSION.                    *\n* ------------------------------------------------------------------ *\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'FACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         BAKR  R14,0\n*        STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R7,R1                 SAVE POINTER TO ACEECSEC CSECT.\n         USING FACEE,R12,R11         TWO BASE REGISTERS.\n         LA    R11,4095(,R12)        LOAD SECOND BASE.\n         LA    R11,1(,R11)\n         USING ACEE,R7\n         ST    R7,ACEEPNTR           GRAB POINTER TO ACEECSEC CSECT.\n         L     R8,192(,R7)           GO GET ORIGINAL ACEE ADDRESS.\n         ST    R8,REALACEE           AND PUT IT AWAY FOR DISPLAYING.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\nINITCON  DS    0H\n         MVI   LINE-1,X'40'          PRIME LINE-1 WITH A BLANK.\n         MVC   LINE,LINE-1           BLANK ENTIRE AREA.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - -   DO THE VARIOUS FORMATTING TASKS   - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDUMPACE  DS    0H\n         BAL   R9,HEADERS            PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME           SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG            FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP            HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                  NORMAL END\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJ4     LA    R15,4                 SET CC = 4.\nEOJ      DS    0H                    BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)          PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         PR\nEOJ0     SR    R15,R15               SET CC = 0.\n         B     EOJ                   CONT.\nEOJ8     LA    R15,8                 SET CC = 8.\n         B     EOJ                   CONT\n         EJECT\nFULLZERO DC    F'0'                  FIXED CONSTANT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFILLER0  DC    3F'0'                 Filler to resolve HEXTAB-240\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n*        HEX   LINE+20,4,ACEEPNTR    Don't use address of ACEE copy.\n         HEX   LINE+20,4,REALACEE    Use only the passed ACEE address.\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R7,ACEEPNTR\n         USING ACEEACEE,R7\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(7),X'15'(R7)\n         HEX   LINE+40,1,X'14'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R7)\n         HEX   LINE+40,1,X'1D'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),ACEEPROC\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R7)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R7)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R7)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R7,ACEEPNTR\n         ST    R7,SAVER7A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R7,SAVER7A\n         MVC   DMPADDR(16),0(R7)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R7,16(,R7)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R7,SAVER7A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nACEEPNTR DS    F\nREALACEE DS    F\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER7A  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IHAACEE\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPFX": {"ttr": 5126, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CPFX     TITLE 'CPFX - CHANGE UPT PREFIX WITH 8-CHAR SUPPORT '\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   CPFX PREFIX                                       *\n*                   CPFX -     (To duplicate PROFILE NOPREFIX)        *\n*                                                                     *\n*       FUNCTION:   CHANGE PREFIX FIELD IN UPT WITH 8-CHAR SUPPORT    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nCPFX     CSECT\nCPFX     RMODE 24\nCPFX     AMODE 31\n         USING CPFX,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'CPFX   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         XC    FLAG2,FLAG2         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                      GET CONTROL BLOCKS                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR         Save address of PSCB.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n* -- >                             Simulate PROFILE NOPREFIX\n         CLC   NEWID(1),=CL1'-'    Is command CPFX - ?\n         BNE   NONULL              No. Then don't set flag.\n         OI    FLAG2,X'01'         Yes. Set flag for nullify.\nNONULL   DS    0H                  End of null processing here.\n* -- >\n         L     R4,X'34'(,R2)       LOAD UPT ADDRESS\n         USING UPT,R4\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         TM    FLAG2,X'01'         Intercept NOPREFIX request\n         BO    BATNULL0            And go to its processing\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. UPDATE BOTH FIELDS.\n         TM    FLAG1,X'01'         IS SUPPORT OFF?\n         BO    BATCHERR            THEN POST ERROR MESSAGE.\n         MVC   UPTPREFX(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   UPTPREFL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   UPT+X'21'(8),NEWID       PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'             PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 BYPASS OTHER PROCESSING\nBATNULL0 DS    0H                  NOPREFIX processing for 8-character\n         MVC   UPTPREFX(7),BLANKS  Blank \"old prefix\" field.\n         MVC   UPTPREFL(1),=X'00'  Mark length there as zero.\n         MVC   UPT+X'21'(8),BLANKS  Blank \"new prefix\" field.\n         MVC   UPT+x'29'(1),=x'00'  Mark length there as zero.\n         B     BATCHCU8                 BYPASS OTHER PROCESSING\nBATCHERR DS    0H                  8-CHARACTER ID BUT NOT SUPPORTED\n         TPUT  MSG0,L'MSG0\n         B     EOJ4\nBATCHNL7 DS    0H\n         MVC   UPT+X'21'(8),NEWID  PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'        PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         B     BATCHCU8            FILL IN OLD FIELDS TOO.\nBATCHCNT DS    0H                  CHECK INVALID LENGTH.\n         TM    FLAG2,X'01'         Nullify prefix for 7-character?\n         BO    BATNULL1            Yes, go and do it.\n         C     R8,=F'8'            No. Test for invalid length 8.\n         BE    BATCHERR            If 8, send error message.\n         B     BATCHOLD            Less than 8. Fill old fields.\n*\nBATNULL1 DS    0H                  Nullify without 8-char support\n         MVC   UPTPREFX(7),BLANKS  Blank old prefix.\n         MVC   UPTPREFL(1),=X'00'  Mark its length as zero.\n         B     BATCHCU8            Get out of routine. Done.\n*\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         MVC   UPT+X'21'(8),ZEROES ZERO NEW PREFIX FIELD\n         MVI   UPT+X'29',X'00'     ZERO NEW PREFIX LENGTH\nBATCHCU8 DS    0H                  END OF UPT PREFIX MANIPULATION\nLINKBC   DS    0H\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         XC    FLAG1,FLAG1\n         XC    FLAG2,FLAG2\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nFLAG2    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CPFX$": {"ttr": 5131, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=IBMUSER,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(CPFX)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.UID8.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.UID8.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB495222\n NAME    CPFX(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSCBID": {"ttr": 5133, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER.\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nCSCBID   CSECT\nCSCBID   RMODE 24\nCSCBID   AMODE 31\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING CSCBID,R12          TELL THE ASSEMBLER R12 IS BASE\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nRUNCHAIN L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R3,X'38'(,R10)      POINT TO ASCBCSCB\n         MVC   MSGLINE+18(7),8(R3)    MOVE USERID IN FROM CSCB\n         APUT  MSGLINE,L'MSGLINE      DISPLAY THE MESSAGE ON THE TUBE\nRETURN   DS    0H\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14                 RETURN TO CALLER\nSAVE     DC    18F'0'              MY SAVE AREA\nMSGLINE  DC    C'My CSCB Userid is        '      LINE FOR MESSAGE\n         LTORG\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CSCBID$": {"ttr": 5383, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.S19.MACLIB\n//         DD DISP=SHR,DSN=IBMUSER.S19.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(CSCBID)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   CSCBID\n SETSSI  CB477247\n SETCODE AC(0)\n NAME    CSCBID(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVTZ24": {"ttr": 5385, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CVTZ24   TITLE 'Flip CVTOSLVL bits to simulate z/OS 2.4 for tests.   '\n*  -----------------------------------------------------------------  *\n*                                                                     *\n*    Function:   To pretend that your z/OS 2.1, 2.2, 2.3 system       *\n*                is z/OS 2.4.                                         *\n*                                                                     *\n*          CVTZ24 N    -  Turn off the z/OS 2.4 bit.                  *\n*                                                                     *\n*          CVTZ24 Y    -  Turn on the z/OS 2.4 bit, and previous.     *\n*                                                                     *\n*          CVTZ24 W    -  Wipe out the backup CVTOSLVL                *\n*                                                                     *\n*          CVTZ24 B    -  Make a backup of CVTOSLVL.                  *\n*                                                                     *\n*          CVTZ24 R    -  Restore to z/OS level V2 from backup        *\n*                                                                     *\n*          CVTZ24 (anything else) - Display original CVTOSLVL         *\n*                                   Display backup at CVTMAP+X'5DC'   *\n*                                   No action performed.              *\n*                                                                     *\n*          Note.  The purpose of this program is to test programs     *\n*                 written for z/OS 2.4 on previous level systems.     *\n*                 We set the CVTOSLVL to 2.4 or reset it to what      *\n*                 it previouly was.                                   *\n*                                                                     *\n*    Date:       February 13, 2019                                    *\n*                                                                     *\n*    Technical Detail:  PUTLINE interface for TSO Output.             *\n*                                                                     *\n*    Release Dependencies:  Needs z/OS 2.1 or above.                  *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*    Changes:                                                         *\n*                                                                     *\n*                                                                     *\n*                                                                     *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   15,1,HEXSAVE\n         LA    1,&FROM\n         LA    0,&LEN\n         LA    15,&TO\n         BAL   4,HEX\n         LM    15,1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n* --       End of Internal Macros......                            -- *\n* ------------------------------------------------------------------- *\n         SPACE 3\nCVTZ24   CSECT\nCVTZ24   AMODE 31\nCVTZ24   RMODE ANY\n         YREGS\n         USING CVTZ24,R15          (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' CVTZ24 - &SYSDATE - &SYSTIME -'\n         DC    C'     Pretend your z/OS V2 system is 2.4    '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING CVTZ24,R12          (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n         SPACE 1\n         MVI   SAVEPRM,X'00'       INITIALIZE PARM SAVE AREA\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    TURNEND             B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         MVC   SAVEPRM(1),0(R2)\n** ---------------------------------------------------------------- **\n* --- Parms gotten at this point.                           -------- *\n* --- Parm Values:                                                 - *\n*                    Y - Turn on CVTH77C0 bit in CVTOSLV6\n*                        Back up CVTOSLVL before setting this bit.\n*\n*                    N - Turn off CVTH77C0 bit in CVTOSLV6\n*\n*                    W - Zero the backup of CVTOSLVL at CVTMAP+X'5DC'\n*\n*                    B - Make the backup of CVTOSLVL at CVTMAP+X'5DC'\n*\n*                    R - Restore CVTOSLVL to its previous value, if\n*                         there is a backup at CVTMAP+X5DC'\n*\n** ---------------------------------------------------------------- **\n* -- >       Test if this command is being run APF Authorized\n*\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n** ---------------------------------------------------------------- **\n* -- >                             We're authorized. Go Key 0.\nFINDDATA DS    0H\n* -- >     Tests for release dependency - below\n         L     R6,16               Get CVT\n         USING CVT,R6\n         TM    CVTDCB,CVTOSEXT     Does CVTOSLVL exist?\n         BZ    RELERR              No. Wrong release.\n         CLI   CVTOSLV6,X'00'      Not z/OS V2 ?\n         BE    RELERR              Wrong release.\n* -- >     Tests for release dependency - above\n** ---------------------------------------------------------------- **\nMESSAGES DS    0H                         Program Title\n         APUT  '  Turn on z/OS 2.4 existence bit, No or Yes ',44\n         APUT  '  ---- -- ---- --- --------- ---- -- -- --- ',44\n         APUT  '                                            ',44\n** ---------------------------------------------------------------- **\n**       Show the original values in CVTOSLVL                       **\n** ---------------------------------------------------------------- **\n         STM   R14,R1,SAVE14T1            Save registers for APUT.\n         MVI   OUTPUT-1,X'40'\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+2(26),=C'Original CVTOSLVL Flags:  '\n         HEX   OUTPUT+28,8,CVTOSLVL\n         APUT  OUTPUT,60\n         LM    R14,R1,SAVE14T1            Restore registers for APUT.\n** ---------------------------------------------------------------- **\n**       Do the MODESET here......                                  **\n** ---------------------------------------------------------------- **\n         MODESET KEY=ZERO\n         CLI   0(R2),C'Y'                 Turn the 2.4 bit on?\n         BE    TURNITON                   Yes. Do it.\n         CLI   0(R2),C'N'                 Turn the 2.4 bit off?\n         BE    TURNITOF                   Yes. Do it.\n         CLI   0(R2),C'W'                 Wipe the backup clean?\n         BE    WIPEBACK                   Yes. Do it.\n         CLI   0(R2),C'B'                 Make a backup only?\n         BE    MAKEBACK                   Yes. Do it.\n         CLI   0(R2),C'R'                 Restore if there's backup.\n         BE    GOREST                     Yes. Do it.\n         MVI   SAVEPRM,C'X'               Show nothing is being done.\n         B     TURNEND\n*\nTURNITON DS    0H                         Pretend that you're 2.4\n         BAL   R9,DOBACK                  First make a backup.\n         OI    CVTOSLV6,X'F8'             Then flip all bits thru 2.4\n         B     TURNEND                    Do the report.\n*\nTURNITOF DS    0H                         Turn off 2.4\n         BAL   R9,DOREST                  Restore at least thru 2.1\n*                                         and fill in the rest of bits\n         NI    CVTOSLV6,X'F7'             Make sure 2.4 bit is off\n         B     TURNEND                    Do the report.\n*\nWIPEBACK DS    0H                         Wipe the backup area\n         MVC   CVTMAP+X'5DC'(8),=XL8'00'  at CVTMAP+X'5DC'\n         B     TURNEND                    Do the report.\n*\nMAKEBACK DS    0H                         Make a backup with\n         BAL   R9,DOBACK                  no other action.\n         B     TURNEND                    Do the report.\n*\nGOREST   DS    0H                         Restore V2 whichever release\n         BAL   R9,DOREST                  if there is a backup\n         B     TURNEND                    Do the report.\nTURNEND  DS    0H\n*\n         MODESET KEY=NZERO\n** ---------------------------------------------------------------- **\n**       End of MODESET here......                                  **\n** ---------------------------------------------------------------- **\n**       Write out the rest of the messages now.                    **\n** ---------------------------------------------------------------- **\n         STM   R14,R1,SAVE14T1            Save registers for APUT.\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+2(26),=C'Execution Parm         :  '\n         MVC   OUTPUT+28(1),SAVEPRM\n         APUT  OUTPUT,60\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+2(26),=C'Backup   CVTOSLVL Flags:  '\n         HEX   OUTPUT+28,8,CVTMAP+X'5DC'\n         APUT  OUTPUT,60\n         CLI   SAVEPRM,C'X'\n         BE    NOACTION\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+2(26),=C'Modified CVTOSLVL Flags:  '\n         HEX   OUTPUT+28,8,CVTOSLVL\n         APUT  OUTPUT,60\n         LM    R14,R1,SAVE14T1            Restore registers, and\n         B     RETURN\n*\nNOACTION DS    0H\n         MVC   OUTPUT,OUTPUT-1\n         MVC   OUTPUT+2(20),=C'No action performed.'\n         APUT  OUTPUT,40\n         LM    R14,R1,SAVE14T1            Restore registers, and\n         B     RETURN                       Get out....\n** ---------------------------------------------------------------- **\nRETURN   L     R13,SAVE+4             E\n         LM    R14,R12,12(R13)          X\n         SR    R15,R15                    I\n         BR    R14                          T\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Command not APF authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         B     RETURN\n** ---------------------------------------------------------------- **\nRELERR   DS    0H                  Wrong release message.\n         APUT  MESSAG1C,L'MESSAG1C\n         B     RETURN\n** ---------------------------------------------------------------- **\n**              S U B R O U T I N E S                               **\n** ---------------------------------------------------------------- **\nDOBACK   DS    0H\n         ST    R9,SAVER9A\n         CLC   CVTMAP+X'5DC'(8),=XL8'00'  Is CVTOSLVL backup there?\n         BNE   DOBACKE                    Yes. Don't overlay it.\n         MVC   CVTMAP+X'5DC'(8),CVTOSLVL  Make the backup.\nDOBACKE  DS    0H\n         L     R9,SAVER9A\n         BR    R9\n** ---------------------------------------------------------------- **\nDOREST   DS    0H                         Have to make 2.1 at least.\n         ST    R9,SAVER9A\n         CLC   CVTMAP+X'5DC'(8),=XL8'00'  Is CVTOSLVL backup there?\n         BE    DORESTE                    No. Don't wipe out CVTOSLVL.\n         CLC   CVTOSLVL(6),=X'FFFFFFFFEF7F' All bits thru 1.13 there?\n         BNE   DORESTE                    No. Ain't whatya think.\n         MVC   CVTOSLV6(1),CVTMAP+X'5E2'  Move bits from backup.\n         OI    CVTOSLV6,X'80'             Ensure z/OS 2.1 at least.\nDORESTE  DS    0H\n         L     R9,SAVER9A\n         BR    R9\n** ---------------------------------------------------------------- **\n** --         C  O  N  S  T  A  N  T  S                          -- **\n** ---------------------------------------------------------------- **\nMESSAG1C DC    C'CVTZ24 is not supported on z/OS 1.13 and previous.'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nSAVEPRM  DC    X'00'\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVER9A  DS    F\n         DS    0D\nSAVE     DS    9D                  Program Save Area\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\n         LTORG\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           Map the CVT.\n         IGVDGNB                   Map the DGNB control block.\n         END   CVTZ24\n** ---------------------------------------------------------------- **\n*  -----------------------------------------------------------------  *\n*  --           Create PUTLINE environment.                       --  *\n*  -----------------------------------------------------------------  *\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DACEE": {"ttr": 5640, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE  | (NO PARM)  -  DUMP ONLY ACEE             *\n*                          | T  OR  U   -  DUMP ACEE AND UTOKEN       *\n*                          | X          -  DUMP ACEE AND ACEX         *\n*                          | A          -  DUMP ALL THREE             *\n*                                                                     *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n*                                       DISPLAY HEX VALUES\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.4'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'        INITIALIZE OUTPUT LINE\n         MVC   LINE,LINE-1\nGETPARM  DS    0H\n         STM   R1,R3,SAVE1T3       SAVE WORK REGISTERS\n         L     R1,CPPLPTR          RESTORE PARM POINTER\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    GETPARME            B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    GETPARME            B IF NOT.\n         LH    R3,0(,R2)           LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    GETPARME            B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    GETPARME            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n         ST    R2,SAVER2A          SAVE PARM LOCATION\n         MVC   STORPARM(1),0(R2)   SAVE PARM\n         LM    R1,R3,SAVE1T3       RESTORE WORK REGISTERS\nGETPARME DS    0H                  END OF ROUTINE\n* --- PARMS GOTTEN AT THIS POINT, IF ANY. ----- *\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\n         LA    R3,X'A4'(,R3)       POINT TO UTOKEN ADDRESS\n         L     R3,0(,R3)           POINT TO UTOKEN\n         ST    R3,UTOKPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\n         LA    R3,X'98'(,R3)       POINT TO ACEX ADDRESS\n         L     R3,0(,R3)           POINT TO ACEX\n         ST    R3,ACEXPTR          STORE UTOKEN ADDRESS\n         L     R3,ACEEPTR          RESTORE R3 TO PREV CONTENT\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n* ------------------------------------------------------------------- *\n*                                  PARMS TO DISPLAY EXTRA STUFF       *\n* ------------------------------------------------------------------- *\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UTDO\n         CLI   STORPARM,C'T'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         CLI   STORPARM,C'U'       DISPLAY ACEE AND TOKEN\n         BE    UTDO\n         B     UTDONT              DON'T DISPLAY UTOKEN\nUTDO     BAL   R9,UTOKDMP          HEX DUMP UTOKEN IN TWO FORMATS\nUTDONT   DS    0H\n         CLI   STORPARM,C'A'       DISPLAY ACEE+TOKEN+ACEX\n         BE    UXDO\n         CLI   STORPARM,C'X'       DISPLAY ACEE AND ACEX\n         BE    UXDO\n         B     UXDONT              DON'T DISPLAY ACEX\nUXDO     BAL   R9,ACEXDMP          HEX DUMP ACEX IN TWO FORMATS\nUXDONT   DS    0H\n* ------------------------------------------------------------------- *\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE  ADDRESS:  '\n         HEX   LINE+20,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'TOKEN ADDRESS:  '\n         HEX   LINE+20,4,UTOKPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEX  ADDRESS:  '\n         HEX   LINE+20,4,ACEXPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(8),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nUTOKDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9G\n         L     R3,UTOKPTR\n         ST    R3,SAVER3E\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(17),=C'(UTOKEN CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,UTOKPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,5\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPT DS    0H\n         L     R3,SAVER3E\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'TOKEN'\n         HEX   LINE+9,2,STORCNT\n         MVI   LINE+8,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3E\n         BCT   R6,LINELUPT\n         L     R9,SAVER9G\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEXDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9H\n         L     R3,ACEXPTR\n         ST    R3,SAVER3F\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEX CONTENTS)'\n         MVC   LINE+30(10),=C'Address:  '\n         HEX   LINE+40,4,ACEXPTR\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         LA    R6,9\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUPX DS    0H\n         L     R3,SAVER3F\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEX '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3F\n         BCT   R6,LINELUPX\n         L     R9,SAVER9H\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER2A  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER3E  DS    F\nSAVER3F  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nSAVER9G  DS    F\nSAVER9H  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nACEXPTR  DS    F\nUTOKPTR  DS    F\nSAVE1T3  DS    3F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nSTORPARM DS    C\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "DACEE$": {"ttr": 6149, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB ,'IBMUSER',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(DACEE)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   DACEE\n SETCODE AC(0)\n NAME    DACEE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DACEEO": {"ttr": 6151, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "DACEE    TITLE 'DACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.                                          *\n*                                                                     *\n*         SYNTAX:   DACEE                                             *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF ACEE FIELDS AND HEX DUMP         *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED.                                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nDACEE    CSECT\nDACEE    AMODE 31\nDACEE    RMODE 24\n         USING DACEE,R12,R11\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'DACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         ST    R1,CPPLPTR          PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R3,16               POINT TO CVT.\n         L     R3,0(,R3)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R3)         POINT TO ASCB.\n         L     R9,4(,R3)           POINT TO TCB.\n         L     R3,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R3)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\nINITCON  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\nPREP     DS    0H\n         L     R3,X'6C'(,R10)      POINT TO ASXB\n         L     R3,X'C8'(,R3)       POINT TO ACEE\n         USING ACEE,R7\n         ST    R3,ACEEPTR\nDUMPACE  DS    0H\n         BAL   R9,HEADERS          PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME         SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG          FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP          HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n         HEX   LINE+20,4,ACEEPTR\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),1(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,21(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R3,ACEEPTR\n*\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(7),X'15'(R3)\n         HEX   LINE+40,1,X'14'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R3)\n         HEX   LINE+40,1,X'1D'(R3)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),X'2C'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R3)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R3)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R3)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R3,ACEEPTR\n         ST    R3,SAVER3A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R3,SAVER3A\n         MVC   DMPADDR(16),0(R3)\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R3,16(,R3)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R3,SAVER3A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'GROUP-UID ',C'ONLYUID   '\n         DC    X'40',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'AUTHCLIENT',C'          '\n         DC    X'08',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER3A  DS    F\nSAVER3B  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nACEEPTR  DS    F\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         IHAACEE\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FACEE": {"ttr": 6410, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FACEE    TITLE 'FACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS THE CALLABLE VERSION OF DACEE,    *\n*                   TO FORMAT AN ACEE IMAGE.                          *\n*                                                                     *\n*         SYNTAX:   EXPECTED IS R1 POINTING TO THE ACEECSEC CSECT     *\n*                                                                     *\n*                   ACEECSEC CSECT                                    *\n*                   ACEECOPY DC    XL192'00'    ACEE image to format  *\n*                   ACEEADDR DC    F'0'         Its original address  *\n*                   ACEECLEN EQU   *-ACEECSEC                         *\n*                                                                     *\n*                   CALL FACEE WITH R1 POINTING TO 192-BYTE AREA      *\n*                   CONTAINING THE IMAGE OF AN ACEE CONTROL BLOCK,    *\n*                   AS PART OF THE ACEECSEC CONTROL BLOCK.            *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF MANY ACEE FIELDS AND HEX DUMP    *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED, JUST FOR THE FORMATTING, BUT SINCE      *\n*                   OBTAINING THE CROSS-MEMORY ACEE REQUIRES          *\n*                   AUTHORIZATION, YOU NEED AC(1) IN THAT CASE.       *\n*                                                                     *\n*    SAMPLE CALL:                                                     *\n*                                                                     *\n*             L     R15,SAVFACEE  Load entry pt of FACEE program.     *\n*             XR    R1,R1         Clear R1 to be sure.                *\n*             L     R1,SAVACEEC   Load address of ACEE image CSECT.   *\n*             BALR  R14,R15       Call FACEE to display the data.     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nFACEE    CSECT\nFACEE    AMODE 31\nFACEE    RMODE 24\n* ------------------------------------------------------------------ *\n*                  ADAPTED FROM DACEE TSO COMMAND.                   *\n*                   THIS IS THE CALLABLE VERSION.                    *\n* ------------------------------------------------------------------ *\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'FACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         BAKR  R14,0\n*        STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R7,R1                 SAVE POINTER TO ACEECSEC CSECT.\n         USING FACEE,R12,R11         TWO BASE REGISTERS.\n         LA    R11,4095(,R12)        LOAD SECOND BASE.\n         LA    R11,1(,R11)\n         USING ACEE,R7\n         ST    R7,ACEEPNTR           GRAB POINTER TO ACEECSEC CSECT.\n         L     R8,192(,R7)           GO GET ORIGINAL ACEE ADDRESS.\n         ST    R8,REALACEE           AND PUT IT AWAY FOR DISPLAYING.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\nINITCON  DS    0H\n         MVI   LINE-1,X'40'          PRIME LINE-1 WITH A BLANK.\n         MVC   LINE,LINE-1           BLANK ENTIRE AREA.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - -   DO THE VARIOUS FORMATTING TASKS   - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDUMPACE  DS    0H\n         BAL   R9,HEADERS            PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME           SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG            FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP            HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                  NORMAL END\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJ4     LA    R15,4                 SET CC = 4.\nEOJ      DS    0H                    BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)          PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         PR\nEOJ0     SR    R15,R15               SET CC = 0.\n         B     EOJ                   CONT.\nEOJ8     LA    R15,8                 SET CC = 8.\n         B     EOJ                   CONT\n         EJECT\nFULLZERO DC    F'0'                  FIXED CONSTANT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFILLER0  DC    3F'0'                 Filler to resolve HEXTAB-240\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n*        HEX   LINE+20,4,ACEEPNTR    Don't use address of ACEE copy.\n         HEX   LINE+20,4,REALACEE    Use only the passed ACEE address.\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+8(8),3(R3)\n         MVC   LINE+20(10),21(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,31(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R7,ACEEPNTR\n         USING ACEEACEE,R7\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(7),X'15'(R7)\n         HEX   LINE+40,1,X'14'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R7)\n         HEX   LINE+40,1,X'1D'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),ACEEPROC\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R7)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R7)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R7)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R7,ACEEPNTR\n         ST    R7,SAVER7A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R7,SAVER7A\n         MVC   DMPADDR(16),0(R7)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R7,16(,R7)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R7,SAVER7A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'  ACEESPEC',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'  ACEEADSP',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'  ACEEOPER',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'  ACEEAUDT',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'  ACEELOGU',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  ACEEPRIV',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'  ACEERACF',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'  ACEEALTR',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'  ACEECNTL',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'  ACEEUPDT',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'  ACEEREAD',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  ACEENONE',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'  ACEEGRPA',C'GROUP+UID ',C'ONLYUID   '\n         DC    X'40',C'  ACEERASP',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'  ACEECLNT',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'  ACEEACLT',C'AUTHCLIENT',C'          '\n         DC    X'08',C'  ACEETSKP',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'  ACEEIUSP',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'  ACEEDUID',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'  ACEENPWR',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'  RESERVED',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'  RESERVED',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'  ACEEUATH',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  ACEEDASD',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'  ACEETAPE',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'  ACEETERM',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'  ACEEMODE',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'  ACEEVMSK',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'  ACEED4OK',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'  ACEEXNVR',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'  ACEESTOK',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'  ACEENSTE',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'  ACEEDALY',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'  ACEERAUI',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'  ACEERUAA',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'  ACEERUAV',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'  RESERVED',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'  RESERVED',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'  RESERVED',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'  RESERVED',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'  RESERVED',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nACEEPNTR DS    F\nREALACEE DS    F\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER7A  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IHAACEE\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "FACEEO": {"ttr": 6913, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "FACEE    TITLE 'FACEE - DUMP CONTENTS OF THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS THE CALLABLE VERSION OF DACEE,    *\n*                   TO FORMAT AN ACEE IMAGE.                          *\n*                                                                     *\n*         SYNTAX:   EXPECTED IS R1 POINTING TO THE ACEECSEC CSECT     *\n*                                                                     *\n*                   ACEECSEC CSECT                                    *\n*                   ACEECOPY DC    XL192'00'    ACEE image to format  *\n*                   ACEEADDR DC    F'0'         Its original address  *\n*                   ACEECLEN EQU   *-ACEECSEC                         *\n*                                                                     *\n*                   CALL FACEE WITH R1 POINTING TO 192-BYTE AREA      *\n*                   CONTAINING THE IMAGE OF AN ACEE CONTROL BLOCK,    *\n*                   AS PART OF THE ACEECSEC CONTROL BLOCK.            *\n*                                                                     *\n*       FUNCTION:   SHOW CONTENTS OF MANY ACEE FIELDS AND HEX DUMP    *\n*                   THE ENTIRE CONTROL BLOCK.                         *\n*                                                                     *\n*                   PUTLINE TERMINAL INTERFACE ALLOWS THE             *\n*                   TRAPPING OF OUTPUT.  NO APF AUTHORIZATION         *\n*                   REQUIRED, JUST FOR THE FORMATTING, BUT SINCE      *\n*                   OBTAINING THE CROSS-MEMORY ACEE REQUIRES          *\n*                   AUTHORIZATION, YOU NEED AC(1) IN THAT CASE.       *\n*                                                                     *\n*    SAMPLE CALL:                                                     *\n*                                                                     *\n*             L     R15,SAVFACEE  Load entry pt of FACEE program.     *\n*             XR    R1,R1         Clear R1 to be sure.                *\n*             L     R1,SAVACEEC   Load address of ACEE image CSECT.   *\n*             BALR  R14,R15       Call FACEE to display the data.     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R9,SAV9HEX\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         L     R9,SAV9HEX\n         MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nFACEE    CSECT\nFACEE    AMODE 31\nFACEE    RMODE 24\n* ------------------------------------------------------------------ *\n*                  ADAPTED FROM DACEE TSO COMMAND.                   *\n*                   THIS IS THE CALLABLE VERSION.                    *\n* ------------------------------------------------------------------ *\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'FACEE   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         BAKR  R14,0\n*        STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R7,R1                 SAVE POINTER TO ACEECSEC CSECT.\n         USING FACEE,R12,R11         TWO BASE REGISTERS.\n         LA    R11,4095(,R12)        LOAD SECOND BASE.\n         LA    R11,1(,R11)\n         USING ACEE,R7\n         ST    R7,ACEEPNTR           GRAB POINTER TO ACEECSEC CSECT.\n         L     R8,192(,R7)           GO GET ORIGINAL ACEE ADDRESS.\n         ST    R8,REALACEE           AND PUT IT AWAY FOR DISPLAYING.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\nINITCON  DS    0H\n         MVI   LINE-1,X'40'          PRIME LINE-1 WITH A BLANK.\n         MVC   LINE,LINE-1           BLANK ENTIRE AREA.\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - -   DO THE VARIOUS FORMATTING TASKS   - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDUMPACE  DS    0H\n         BAL   R9,HEADERS            PRINT PROGRAM HEADER\n         BAL   R9,ACEENAME           SHOW NAMED FIELDS IN THE ACEE\n         BAL   R9,ACEEFLG            FORMAT CONTENTS OF ACEE FLAGS\n         BAL   R9,ACEEDMP            HEX DUMP ACEE IN TWO FORMATS\n         B     EOJ0                  NORMAL END\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nEOJ4     LA    R15,4                 SET CC = 4.\nEOJ      DS    0H                    BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)          PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         PR\nEOJ0     SR    R15,R15               SET CC = 0.\n         B     EOJ                   CONT.\nEOJ8     LA    R15,8                 SET CC = 8.\n         B     EOJ                   CONT\n         EJECT\nFULLZERO DC    F'0'                  FIXED CONSTANT\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* - -           S  U  B  R  O  U  T  I  N  E  S               - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFILLER0  DC    3F'0'                 Filler to resolve HEXTAB-240\nHEX      DS    0H                    Print hex numbers in display form\n         ST    R9,SAVER9F\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9F\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\nSAV9HEX  DS    F\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEADERS  DS    0H                    Display program header\n         ST    R9,SAVER9C\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),=C'SHOW AND DUMP CONTENTS OF THE ACEE'\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+10(34),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(16),=C'ACEE ADDRESS:   '\n*        HEX   LINE+20,4,ACEEPNTR    Don't use address of ACEE copy.\n         HEX   LINE+20,4,REALACEE    Use only the passed ACEE address.\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL1\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(42),FLAGL2\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,62\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEFLG  DS    0H                    Display contents of ACEE flags\n         ST    R9,SAVER9A\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         MVC   LINE+36(12),=C'(ACEE FLAGS)'\n         APUT  LINE,55\n*\n* --                                      FLAG 1\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'26'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG1:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG1TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 2\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'27'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG2:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG2TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 3\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'28'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG3:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG3TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 4\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'38'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG4:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG4TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 5\n         L     R4,ACEEPNTR\n         MVC   FLFLG(1),X'85'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG5:  '\n         HEX   LINE+12,1,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG5TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --                                      FLAG 6\n         L     R4,ACEEPNTR\n         MVC   FLFLG(2),X'86'(R4)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(7),=C'FLG6:  '\n         HEX   LINE+12,2,FLFLG\n         APUT  LINE,55\n         LA    R3,FLG6TBL\n         LA    R6,8\n         BAL   R9,FLGLOOP\n* --\n         L     R9,SAVER9A\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nFLGLOOP  DS    0H                    Go thru flag table for each flag\n         ST    R9,SAVER9D\n         MVC   TSFLG(1),0(R3)\n         XR    R2,R2\n         IC    R2,TSFLG\n         EX    R2,TMFLG\n         BNO   PRTSND\nPRTFST   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),1(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nPRTSND   DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         HEX   LINE+3,1,TSFLG\n         MVC   LINE+10(10),11(R3)\n         APUT  LINE,55\n         B     FLGLBCK\nFLGLBCK  DS    0H\n         LA    R3,21(,R3)\n         BCT   R6,FLGLOOP\nFLGLEND  DS    0H\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nTMFLG    TM    FLFLG,X'00'           Contents of these are modified\nTSFLG    DC    X'00'\nFLFLG    DC    X'0000'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEENAME DS    0H                    Display name fields in the ACEE\n         ST    R9,SAVER9E\n         L     R7,ACEEPNTR\n         USING ACEEACEE,R7\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1                     Userid\n         MVC   LINE+2(L'USRIDMS),USRIDMS\n         MVC   LINE+20(7),X'15'(R7)\n         HEX   LINE+40,1,X'14'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Group ID\n         MVC   LINE+2(L'GRPIDMS),GRPIDMS\n         MVC   LINE+20(8),X'1E'(R7)\n         HEX   LINE+40,1,X'1D'(R7)\n         MVI   LINE+40,X'40'\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Proc ID for STC\n         MVC   LINE+2(L'PRCIDMS),PRCIDMS\n         MVC   LINE+20(8),ACEEPROC\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1                     Terminal ID\n         MVC   LINE+2(L'TRMIDMS),TRMIDMS\n         MVC   LINE+20(8),X'40'(R7)\n         APUT  LINE,55\n*\n         MVC   LINE,LINE-1\n         MVC   LINE+2(L'SURIDMS),SURIDMS       Surrogate Userid\n         CLC   =X'0000',X'90'(R7)\n         BE    NOSURMVE\n         MVC   LINE+20(8),X'90'(R7)\nNOSURMVE DS    0H\n         APUT  LINE,55\n*\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nACEEDMP  DS    0H           Dump contents in HEX and ISPF 3-line format\n         ST    R9,SAVER9B\n*\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+7(15),=C'(ACEE CONTENTS)'\n         APUT  LINE,55\n         MVC   LINE,LINE-1\n         MVC   LINE+2(26),DASHES\n         APUT  LINE,55\n         L     R7,ACEEPNTR\n         ST    R7,SAVER7A\n         LA    R6,12\n         LA    R5,0\n         STCM  R5,3,STORCNT\nLINELUP  DS    0H\n         L     R7,SAVER7A\n         MVC   DMPADDR(16),0(R7)\n         MVI   LINE-1,X'40'\n         MVC   LINE,LINE-1\n         MVC   LINE+2(5),=C'ACEE '\n         HEX   LINE+8,2,STORCNT\n         MVI   LINE+7,C'+'\n         HEX   LINE+17,4,DMPADDR\n         HEX   LINE+27,4,DMPADDR+4\n         HEX   LINE+37,4,DMPADDR+8\n         HEX   LINE+47,4,DMPADDR+12\n         APUT  LINE,62\n* --- >\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL0\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL1\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   DMPWORK,DMPADDR\n         TR    DMPWORK(16),TRTBL2\n         MVC   LINE,LINE-1\n         MVC   LINE+17(16),DMPWORK\n         APUT  LINE,62\n         MVC   LINE,LINE-1\n         MVC   LINE+17(38),DASHES\n         APUT  LINE,62\n* --- >\n         LA    R7,16(,R7)\n         LA    R5,16(,R5)\n         STCM  R5,3,STORCNT\n         ST    R7,SAVER7A\n         BCT   R6,LINELUP\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE\nUSRIDMS  DC    C'ACEE USERID    :             LENGTH:     '\nGRPIDMS  DC    C'ACEE GROUP ID  :             LENGTH:     '\nPRCIDMS  DC    C'ACEE PROCEDURE :                         '\nTRMIDMS  DC    C'ACEE TERMINAL  :                         '\nSURIDMS  DC    C'ACEE SURROGATE :                         '\nBLANKS   DC    C'        '         8 BLANKS\nDASHES   DC    C'--------------------------------------------'\nFLAGL1   DC    C'FLAG 1 - +26     FLAG2 - +27   FLAG3 - +28'\nFLAGL2   DC    C'FLAG 4 - +38(2)  FLAG5 - +85   FLAG6 - +86'\nNOID     DC    X'0000000000000000'\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nTRTBL0   DS    0D\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'404040404040404040404A4B4C4D4E4F'\n         DC    XL16'504040404040404040405A5B5C5D5E5F'\n         DC    XL16'606140404040404040406A6B6C6D6E6F'\n         DC    XL16'404040404040404040407A7B7C7D7E7F'\n         DC    XL16'40818283848586878889404040404040'\n         DC    XL16'40919293949596979899404040404040'\n         DC    XL16'4040A2A3A4A5A6A7A8A9404040404040'\n         DC    XL16'40404040404040404040404040404040'\n         DC    XL16'C0C1C2C3C4C5C6C7C8C9404040404040'\n         DC    XL16'D0D1D2D3D4D5D6D7D8D9404040404040'\n         DC    XL16'E040E2E3E4E5E6E7E8E9404040404040'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9404040404040'\nTRTBL1   DS    0D\n         DC    XL16'F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0'\n         DC    XL16'F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1F1'\n         DC    XL16'F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2F2'\n         DC    XL16'F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3F3'\n         DC    XL16'F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4F4'\n         DC    XL16'F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5F5'\n         DC    XL16'F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6F6'\n         DC    XL16'F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7F7'\n         DC    XL16'F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8F8'\n         DC    XL16'F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9F9'\n         DC    XL16'C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1C1'\n         DC    XL16'C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2C2'\n         DC    XL16'C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3C3'\n         DC    XL16'C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4C4'\n         DC    XL16'C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5C5'\n         DC    XL16'C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6C6'\nTRTBL2   DS    0D\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         DC    XL16'F0F1F2F3F4F5F6F7F8F9C1C2C3C4C5C6'\n         LTORG\nCPPLPTR  DC    F'0'\nFLG1TBL  DS    0F\n         DC    X'80',C'SPECIAL   ',C'NOSPECIAL '\n         DC    X'40',C'ADSP      ',C'NOADSP    '\n         DC    X'20',C'OPERATIONS',C'NOOPERATNS'\n         DC    X'10',C'AUDITOR   ',C'NOAUDITOR '\n         DC    X'08',C'RACFLOG   ',C'NORACFLOG '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'PRIV      ',C'NOPRIV    '\n         DC    X'01',C'RACFDEFUSR',C'NORACFDEFU'\n         SPACE 3\nFLG2TBL  DS    0F\n         DC    X'80',C'DEFALTR   ',C'NODEFALTR '\n         DC    X'40',C'DEFCNTL   ',C'NODEFCNTL '\n         DC    X'20',C'DEFUPDT   ',C'NODEFUPDT '\n         DC    X'10',C'DEFREAD   ',C'NODEFREAD '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'DEFNOAUTH ',C'NODEFNOAUT'\n         SPACE 3\nFLG3TBL  DS    0F\n         DC    X'80',C'GROUP-UID ',C'ONLYUID   '\n         DC    X'40',C'RACFADRSPC',C'NOTRACFADR'\n         DC    X'20',C'UNAUTHCLNT',C'          '\n         DC    X'10',C'AUTHCLIENT',C'          '\n         DC    X'08',C'TASKLVL   ',C'NOTASKLVL '\n         DC    X'04',C'INITUSP   ',C'NOINITUSP '\n         DC    X'02',C'DEFAULTUID',C'NODEFLTUID'\n         DC    X'01',C'NOPSWDREQ ',C'PSWDREQ   '\n         SPACE 3\nFLG4TBL  DS    0F\n         DC    X'80',C'HEX80     ',C'NOHEX80   '\n         DC    X'40',C'HEX40     ',C'NOHEX40   '\n         DC    X'20',C'DEFUSERS  ',C'NODEFUSERS'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'PROTDASD  ',C'NOPROTDASD'\n         DC    X'04',C'PROTTAPE  ',C'NOPROTTAPE'\n         DC    X'02',C'PROTTERM  ',C'NOPROTTERM'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG5TBL  DS    0F\n         DC    X'80',C'ACEEAMOD31',C'ACEEAMOD24'\n         DC    X'40',C'PLCL1024  ',C'PLCL128   '\n         DC    X'20',C'DAT4USED  ',C'DAT4NOTUSD'\n         DC    X'10',C'ENVROBJOTH',C'ENVROBJHER'\n         DC    X'08',C'SERVAUTH  ',C'NOSERVAUTH'\n         DC    X'04',C'ENVNSTFSTA',C'NOENVNSTAF'\n         DC    X'02',C'DAILYLOGON',C'NODALYLOGN'\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nFLG6TBL  DS    0F\n         DC    X'80',C'RESTACCUID',C'NORESTACCU'\n         DC    X'40',C'RESTACUXOT',C'NORESACUXO'\n         DC    X'20',C'CHKDOTHER ',C'NOCHKOTHER'\n         DC    X'10',C'HEX10     ',C'NOHEX10   '\n         DC    X'08',C'HEX08     ',C'NOHEX08   '\n         DC    X'04',C'HEX04     ',C'NOHEX04   '\n         DC    X'02',C'HEX02     ',C'NOHEX02   '\n         DC    X'01',C'HEX01     ',C'NOHEX01   '\n         SPACE 3\nACEEPNTR DS    F\nREALACEE DS    F\nDATAAREA DSECT\nSAVE     DS    9D\nSAVACEE  DS    F\nSAVER7A  DS    F\nSAVER3C  DS    F\nSAVER3D  DS    F\nSAVER9A  DS    F\nSAVER9B  DS    F\nSAVER9C  DS    F\nSAVER9D  DS    F\nSAVER9E  DS    F\nSAVER9F  DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nDMPADDR  DS    XL16\nDMPWORK  DS    XL16\nSTORCNT  DS    XL2\nNEWIDL   DS    XL1\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DC    C' '\nLINE     DS    CL133\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IHAACEE\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IBMUSER0": {"ttr": 7171, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/octet-stream", "datatype": "binary", "extension": ".bin"}, "IEBTSUB": {"ttr": 7173, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TSUB     TITLE 'TSUB - MAINTAIN LWA-POINTED-TO INCORE TSO AUTH TABLES'\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   Program Name:   TSUB                                              *\n*                                                                     *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized except for the display    *\n*                   functions.                                        *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized.                      *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n* Short Function:   This program deals with existing TSO \"auth\"       *\n*                   tables that are pointed to by fields in the       *\n*                   LWA (Logon Work Area) which is created for a      *\n*                   TSO session at LOGON time.  These tables are      *\n*                   the actual tables that your TSO session uses      *\n*                   to determine program authorization.  Many of      *\n*                   the characteristics of these tables can be        *\n*                   changed or reset by the TSUB program.  The        *\n*                   changes that TSUB can do, are of two types:       *\n*                                                                     *\n*                   1.  Replacing or blanking any table entry.        *\n*                   2.  Altering the LWA flags or fields that         *\n*                       determine this table's properties.            *\n*                                                                     *\n*                Details:                                             *\n*                                                                     *\n*                   1.  TSUB can substitute a different program name  *\n*                       or insert a blank entry into any valid slot   *\n*                       of a TSO \"auth\" table that belongs to your    *\n*                       TSO session.                                  *\n*                                                                     *\n*                       Blanking (not the last entry) is dangerous    *\n*                       (see below) because it invalidates all the    *\n*                       subsequent non-blank table entries.  But the  *\n*                       technique of blanking an entry can be used    *\n*                       carefully if you are sure of what you want    *\n*                       to accomplish.                                *\n*                                                                     *\n*                   2.  TSUB can change the characteristics of your   *\n*                       own session's TSO \"auth\" tables, that are     *\n*                       pointed to by the LWA, by means of changing   *\n*                       the LWA (Logon Work Area) settings for each   *\n*                       table.  For example, LWA table lengths can    *\n*                       be supplied or removed.  LWA flags marking    *\n*                       the table as coming from a STEPLIB can be     *\n*                       set, or removed.  Even the physical table     *\n*                       header can be altered to make the table       *\n*                       look as though it came from PARMLIB.          *\n*                                                                     *\n*   Introduction:   At LOGON time for a TSO session, the system       *\n*                   copies a set of the E2, E8, AP, and NS TSO        *\n*                   authorization tables into SP 252 protected Key 0  *\n*                   storage which lies in the TSO user's address      *\n*                   space.  These are the tables WHICH ARE ACTUALLY   *\n*                   USED by that TSO session, and their location is   *\n*                   pointed to in the LWA control block (Logon Work   *\n*                   Area).  The duration of these tables is for the   *\n*                   life of that TSO session.  TSO LOGON processing   *\n*                   creates both the LWA itself, and the copies of    *\n*                   the auth tables that are used. TSUB displays and  *\n*                   manipulates this copy of these tables--the ones   *\n*                   that are actually in use. Thus, changes to these  *\n*                   tables are effective immediately, and their       *\n*                   scope affects only the issuing TSO session.       *\n*                                                                     *\n*                   Where does TSO get these tables from, at LOGON    *\n*                   time?                                             *\n*                                                                     *\n*              Case 1.  The most commonly found source for the auth   *\n*                       tables pointed to in the LWA, is the \"common  *\n*                       storage\" tables created from the active       *\n*                       PARMLIB member IKJTSOxx.  Those are pointed   *\n*                       to by the TPVT control block + X'14' which    *\n*                       is the CTLT.  If the CTLT is the source of    *\n*                       the LWA tables, then lengths of the tables,   *\n*                       and the size of each entry, are copied from   *\n*                       the CTLT into the LWA (Logon Work Area).      *\n*                       Use the program called ASUB to directly       *\n*                       access the public tables from PARMLIB that    *\n*                       are pointed to by the CTLT (undocumented)     *\n*                       control block.  Our program, TSUB, accesses   *\n*                       the copy of those tables which is pointed to  *\n*                       by the LWA, which were created for the TSO    *\n*                       session at LOGON time, and which are unique   *\n*                       to the current TSO session.                   *\n*                                                                     *\n*              Case 2.  If a list of table entries for one or more    *\n*                       of the tables:  E2, E8, AP, or NS is not      *\n*                       found in the IKJTSOxx PARMLIB member that     *\n*                       is currently active, then the table in the    *\n*                       LWA is not copied from the IKJTABLS module    *\n*                       in LPALIB, but it is just pointed to.  Thus   *\n*                       in such a situation, TSUB cannot alter the    *\n*                       particular table.  The actual table is        *\n*                       located in PLPA, in that particular case.     *\n*                                                                     *\n*              Case 3.  If a copy of the IKJTABLS load module         *\n*                       containing csects IKJEFTE2, IKJEFTE8,         *\n*                       IKJEFTAP, and IKJEFTNS is found in an         *\n*                       APF-authorized STEPLIB that the TSO session   *\n*                       has access to (running as an APF authorized   *\n*                       STEPLIB only), then those E2, E8, NS, and AP  *\n*                       tables are copied into the LWA at LOGON       *\n*                       time, from that CSECT in the STEPLIB copy of  *\n*                       IKJTABLS.  Therefore the table entries in     *\n*                       the respective CSECTs of the IKJTABLS in the  *\n*                       authorized STEPLIB are the ones which are in  *\n*                       force for that user's TSO session.  But in    *\n*                       that case, no \"table lengths\" or \"number of   *\n*                       table entries\" from these tables, are         *\n*                       available.  The table is delimited by the     *\n*                       first blank entry in it.  This TSUB program   *\n*                       has the ability to blank any numbered table   *\n*                       entry.  Since a blank entry is a delimiter    *\n*                       for the entire table, and all entries after   *\n*                       the blank entry are no longer used, you       *\n*                       have to be very careful.  Therefore, when     *\n*                       blanking entries, you should usually blank    *\n*                       the last one only, unless you have a very     *\n*                       good reason to blank out a different entry,   *\n*                       other than the last one.  The good news is    *\n*                       that the effect of the TSUB program only      *\n*                       lasts for the duration of this LOGON, and     *\n*                       only for the userid that is currently running *\n*                       the TSUB program.                             *\n*                                                                     *\n*            Note - Tables copied from a CSECT in IKJTABLS do not     *\n*                   have lengths associated with them.  They are      *\n*                   delimited by a blank table entry at the end.      *\n*                   Therefore the copy of each such table pointed     *\n*                   to by the LWA, does not have any length           *\n*                   associated with it.  Therefore we can only        *\n*                   judge its length by looking at the first blank    *\n*                   entry that has been found by a forward scan.      *\n*                                                                     *\n*                   This program, TSUB, directly manipulates the      *\n*                   \"live\" authorization tables pointed to by the     *\n*                   LWA.  Supported tables are:  E2, E2, NS and       *\n*                   AP.  The public PP (Platform Program) table       *\n*                   and PC (Platform Command) table, not in the       *\n*                   LWA, are also supported by this program, if       *\n*                   they had been created by their presence in the    *\n*                   active IKJTSOxx PARMLIB member.                   *\n*                                                                     *\n*    Description:   Display an Auth Table entry from any of the       *\n*                   TSO/E program list tables:  IKJEFTE2, IKJEFTE8,   *\n*                   IKJEFTNS or IKJEFTAP that are in storage.  Or     *\n*                   display the entire table.  Or replace a numbered  *\n*                   entry with a new program name.  Or blank out      *\n*                   any numbered entry.  (Be very careful if you are  *\n*                   attempting to blank an entry.  Blanking an entry  *\n*                   invalidates ALL subsequent entries).  If you are  *\n*                   invoking a display function, then the entire      *\n*                   table is shown, unless you enter a number, and    *\n*                   then, only that slot is shown.  The tables        *\n*                   handled by this program are the actual tables     *\n*                   pointed to by the LWA of the issuing TSO/E        *\n*                   address space, and they lie in that user's        *\n*                   TSO/E address space (unless they were pointed to, *\n*                   and are from an IKJTABLS load module that is in   *\n*                   the LPA list.)                                    *\n*                                                                     *\n*       Function:   To substitute one new program name in the local   *\n*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n*                   IKJEFTAP, IKJEFTNS lists.  This is done to any    *\n*                   numbered entry of each table.  Or else merely to  *\n*                   display the contents of the entire table, or the  *\n*                   contents of any particular numbered entry.        *\n*                                                                     *\n*                   The effect of replacing any program name is       *\n*                   immediate.  The scope of the change, is just for  *\n*                   the issuing current TSO userid.                   *\n*                                                                     *\n*                   You can blank out any numbered entry in any of    *\n*                   the four tables.  But blanking an entry, will     *\n*                   invalidate all subsequent table entries which     *\n*                   follow the blanked entry slot.  So be careful!    *\n*                                                                     *\n*                   Or, you can use this program to list the complete *\n*                   contents of any of the auth tables which are      *\n*                   incore.                                           *\n*                                                                     *\n*                   Additionally, as described below, you can change  *\n*                   fields in the LWA which characterize the          *\n*                   individual tables--size characteristics and       *\n*                   whether or not the table came from STEPLIB.       *\n*                                                                     *\n*         Syntax:   TSUB ttA nnn pgmname                              *\n*                                                                     *\n*                   Where tt is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD  entry in IKJTSOxx        *\n*                   E8 - IKJEFTE8 = AUTHPGM  entry in IKJTSOxx        *\n*                   AP - IKJEFTAP = AUTHTSF  entry in IKJTSOxx        *\n*                   NS - IKJEFTNS = NOTBKGND entry in IKJTSOxx        *\n*                                                                     *\n*                   If the action code is B (blank the numbered       *\n*                   entry), then no program name is required,         *\n*                   but a number is required.  When blanking a        *\n*                   table entry, BE VERY CAREFUL !!!!!                *\n*                                                                     *\n*       WARNING  >  If you blank out an entry which is not the        *\n*       WARNING  >  last entry in the particular table, then          *\n*       WARNING  >  all subsequent entries in that table are          *\n*       WARNING  >  rendered invalid!  It is best to restore          *\n*       WARNING  >  a non-blank entry to that slot, using the         *\n*       WARNING  >  ttR function, where tt is the table code.         *\n*                   Then you will be able to display the rest         *\n*                   of the table using the ttD function.              *\n*                                                                     *\n*                   If the action code is D (display the given        *\n*                   entry), then no program name is required.         *\n*                   The default action is to display the entire       *\n*                   table, unless a number is entered.  If a          *\n*                   number is present, then only that entry           *\n*                   number is displayed.  If the number is larger     *\n*                   than the number of entries in that particular     *\n*                   table, then an informative error message is       *\n*                   issued, and the program ends with code = 4.       *\n*                                                                     *\n*                   If the action code is R (replace the program      *\n*                   name) then a number (the table entry number)      *\n*                   and a program name are required.  If you want     *\n*                   to blank that slot, instead of putting a          *\n*                   program name into it, then use action code B.     *\n*                   But if you are blanking any slot which is not     *\n*                   the last slot, then PLEASE HEED THE WARNING       *\n*                   THAT IS ABOVE.                                    *\n*                                                                     *\n*                   If the action code is H, then TSUB will replace   *\n*                   the last 8 bytes of the table header with the     *\n*                   literal: C' PARMLIB', as if the table were        *\n*                   created from the IKJTSOxx member in PARMLIB.      *\n*                                                                     *\n*                   If the action code is L, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus all the potential blank   *\n*                   entries at the end of the table.  So this number  *\n*                   will often reflect more entries than TSO will     *\n*                   actually use.  Additionally, TSUB can change or   *\n*                   blank any one of these entries, because TSUB's    *\n*                   range depends on the number of entries indicated  *\n*                   by the LWA length.  (If there's no length, then   *\n*                   TSUB uses the length of all non-blank entries     *\n*                   plus the first blank, if it exists.)              *\n*                                                                     *\n*                   If the action code is M, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus one blank entry, if any   *\n*                   perceived blank entries exist at the end of the   *\n*                   table.                                            *\n*                                                                     *\n*                   If the action code is Z, then TSUB will look at   *\n*                   the LWA length value for that table, and it will  *\n*                   zero that length value, whether it already was    *\n*                   zero, or not.                                     *\n*                                                                     *\n*                   If the action code is S, then TSUB will make      *\n*                   the given table look like it came from STEPLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will not overlay the session's auth table.        *\n*                                                                     *\n*                   If the action code is P, then TSUB will make      *\n*                   the given table look like it came from PARMLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will overlay the session's auth table.            *\n*                                                                     *\n*                   If the action code is X, then TSUB will display   *\n*                   all the LPA address ranges (undocumented).        *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to.  The condition is         *\n*                   reported.  If these keywords WERE coded in the    *\n*                   IKJTSOxx member of PARMLIB which is currently     *\n*                   active, then the PC and PP table codes in TSUB    *\n*                   WILL ACT ON THE COMMON STORAGE COPY of THESE      *\n*                   TWO TABLES ONLY.                                  *\n*                                                                     *\n*  Recommendation:  First list the entire table using the \"D\"         *\n*                   action code, and then decide which entry, by      *\n*                   number, that you want to replace.                 *\n*                                                                     *\n*                   Then use the \"R\" action code, to replace the      *\n*                   particular numbered entry you have chosen.        *\n*                                                                     *\n*            Note:  The E2, E8, AP, or NS table which is being        *\n*                   used by the system, can come from either the      *\n*                   IKJTSOxx PARMLIB entry, or it can come from       *\n*                   an IKJTABLS load module which was running         *\n*                   from an APF authorized library as a STEPLIB,      *\n*                   or a default IKJTABLS entry in LPALIB.  Each      *\n*                   CSECT is copied into the TSO user's address       *\n*                   space, albeit in a protected key, and pointed     *\n*                   to by the user's LWA, except in the case of an    *\n*                   IKJTABLS CSECT that is in LPALIB.  These are      *\n*                   the actual auth tables, E2, E8, AP, NS, in        *\n*                   use by that TSO address space.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2008/09/10 - 1.0 - Initial version - Got it to work.             *\n*                       TSUB can blank any slot.  I'm allowing        *\n*                       that for now, because the scope of the        *\n*                       possible damage is only for that TSO          *\n*                       session as long as it is logged on.           *\n*                       The LWA auth tables are all reset by          *\n*                       logging on to that TSO session again.         *\n*                                                                     *\n*    2008/09/15 - 1.0 - Filled in and cleaned up some of the doc.     *\n*                                                                     *\n*    2009/01/28 - 1.0 - Added action codes: H, L, Z, S, P             *\n*                                                                     *\n*         All action codes except D need APF-authorization.           *\n*                                                                     *\n*         What they do:                                               *\n*                                                                     *\n*            H - Add PARMLIB-like table header, in 2nd 8-bytes.       *\n*            L - Supply length of table in LWA with ALL the blanks.   *\n*            M - Supply length of table to first blank, in LWA.       *\n*            Z - Zero the table length marked in the LWA.             *\n*            S - Mark that the table came from STEPLIB, so            *\n*                 someone (else's) PARMLIB UPDATE(xx) won't           *\n*                 overlay it.                                         *\n*            P - Turn off STEPLIB bit in LWA and mark that it         *\n*                 came from PARMLIB.  Now PARMLIB UPDATE(xx)          *\n*                 will overlay the table.                             *\n*            X - (undocumented) Gives LPA storage range display.      *\n*                                                                     *\n*         Other action codes are: (these are the original ones)       *\n*                                                                     *\n*            D - Display table entries by slot number.                *\n*            R - Replace the entry in a given slot, by another one.   *\n*            B - Blank a given table entry, by slot number.           *\n*                                                                     *\n*    2009/02/01 - 1.1 - Fourth and fifth base registers.              *\n*                                                                     *\n*         Improved message clarity.  Told messages to show states,    *\n*          \"before\" and \"after\" any changes were made.                *\n*                                                                     *\n*    2009/02/12 - 1.1 - Fix bug in calculating length of NS table.    *\n*         Fix convoluted logic in calculating table lengths.          *\n*                                                                     *\n*    2009/02/13 - 1.1 - Measure perceived blanks after logical end    *\n*         of the table.  For NS table, blank an entry with X'0000'    *\n*         for the \"length\" field, instead of X'FFFF', to see more     *\n*         perceived blanks, if there are any.                         *\n*                                                                     *\n*    2009/02/16 - 1.1 - Added option M to tailor length to reflect    *\n*         only up to the first blank.  Changed option L to make the   *\n*         LWA length equal to all non-blank entries plus all blank    *\n*         entries too.  Thus the table can be expanded, even if       *\n*         lengths are there.                                          *\n*                                                                     *\n*    2009/02/18 -1.1.31 Cosmetic changes. Put in Version numbers.     *\n*                                                                     *\n*    2009/02/20 -1.1.32 Improved displays for PC and PP tables.       *\n*                       Made sure S,P,H,L,M,Z options for PC and PP   *\n*                       actually do nothing, and say they do nothing. *\n*                       Made \"error display\" messages better.         *\n*                                                                     *\n*    2009/02/24 -1.1.33 Better messages if PLATPGM or PLATCMD tables  *\n*                       are missing.                                  *\n*                                                                     *\n*    2009/03/03 -1.1.34 More cosmetic changes in title & messages.    *\n*                                                                     *\n*    2011/03/24 -1.1.37 If an installation has an \"authorization SVC\" *\n*                       already installed, put in a provision to use  *\n*                       it with conditional assembly.  Of course,     *\n*                       you have to code your own appropriate         *\n*                       invocation code for the SVC, and its number,  *\n*                       in the AUTHON and AUTHOFF macros provided     *\n*                       in this code here.  Otherwise, SETC the &SVC  *\n*                       variable to 'NOSVC'                           *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n***********************************************************************\n*  If you are turning on authorization for this program using a\n*   \"trick SVC\", then do   &SVC  SETC  'SVC'\n*   and put your SVC invocation code in the AUTHON and AUTHOFF macros.\n*\n         LCLC  &SVC,&SVCX\n*&SVC     SETC  'NOSVC'\n&SVC     SETC  'SVC'\nSVNO     EQU   168\n&SVCX    SETC  '168'\n         AIF   ('&SVC' EQ 'NOSVC').SVTEST1\n         AIF   ('&SVC' EQ 'SVC').SVTEST1\n&SVC     SETC  'NOSVC'\n.SVTEST1 ANOP\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         AIF   ('&SVC' EQ 'NOSVC').NOSVC01\n*  Put your own SVC Auth turn on code here.....\n         MACRO\n&AON     AUTHON\n         ST    R1,SAVER1C\n         LA    R0,1\n         L     R1,=C'AUTH'\n         SVC   SVNO\n         L     R1,SAVER1C\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Put your own SVC Auth turn off code here.....\n         MACRO\n&AOFF    AUTHOFF\n         ST    R1,SAVER1C\n         L     R1,=C'NONE'\n         SVC   SVNO\n         L     R1,SAVER1C\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n.NOSVC01 ANOP\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nTSUB     CSECT\nTSUB     AMODE 31\nTSUB     RMODE 24\n         USING *,R15                                                  *\n         B     BEGINN               Eyecatcher\nMAXBLANK DC    F'120'        Guess of max number of blanks after table\n         DC    CL5'TSUB '\nVERS#    DC    CL10'Ver 1.37'\n         DC    CL1' '\n         AIF   ('&SVC' EQ 'SVC').NOSVC00\n         DC    C'&SVC'\n.NOSVC00 ANOP\n         AIF   ('&SVC' EQ 'NOSVC').SVC00\n         DC    C'&SVC'\n         DC    C' '\n         DC    C'&SVCX'\n.SVC00   ANOP\n         DC    CL18' - &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         DROP  R15\n         USING TSUB,R12,R11,R10,R6,R7  Set up base registers.\n         STM   R14,R12,12(R13)\n         LR    R12,R15                 Set up base registers.\n         ST    R1,SAVEPARM          Save CPPL pointer to use later.\n         LA    R11,4095(,R12)       Second base.\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)       Third base.\n         LA    R10,1(,R10)\n         LA    R6,4095(,R10)        Fourth base.\n         LA    R6,1(,R6)\n         LA    R7,4095(,R6)         Fifth base.\n         LA    R7,1(,R7)\n         LA    R1,SAVEAREA          Point to new save area\n         ST    R1,8(,R13)           Forward save area chain pointer\n         ST    R13,4(,R1)           Backward save area chain pointer\n         LR    R13,R1               New save area address\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'               Non-reentrant save area\n* -----------------------\nINITCON  DS    0H                   Initialize constants to be sure.\n         MVI   OFFFLAG,X'00'\n         MVI   PLATFLG,X'00'\n         MVI   MEASFLG,X'00'\n         MVI   LPAFLAG,X'00'\n         MVI   SHBLFLG,X'00'\n         MVI   LPADFLG,X'00'\n         MVI   NSCHFLG,X'00'\n         MVI   HAVLFLG,X'00'\n         MVI   LWAPFLG,X'00'\n         MVI   LWAMFLG,X'00'\n         MVI   TIDFLAG,X'00'\n         MVI   OLDFLAG,X'00'\n         MVI   FLAGZ,X'00'\n         MVI   LINEB,X'40'\n         MVI   LINAB,X'40'\n         XC    FSTCOUNT,FSTCOUNT\n         XC    FSTNOUNT,FSTNOUNT\n         MVC   FSTFIELD(8),BLANKS\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n         MVC   CODEPLAC(2),BLANKS\n         MVC   DISPHDR(16),BLANKS\n         XC    SLOTBIN,SLOTBIN\n         XC    BLNKCNT,BLNKCNT\n         XC    NTRYCNT,NTRYCNT\n         XC    SAVETCUR,SAVETCUR\n         MVC   SLOTSAVE,BLANKS\n         MVC   FSTNAME,BLANKS\n         MVI   CMDBCOPY-1,X'00'\n         MVC   CMDBCOPY,CMDBCOPY-1\n* -----------------------\nGETPSCB  DS    0H                  See if we are allowed to\n*                                  run this program.\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM         Get the address of the CPPL back\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n         NOP   GETLWA              Zap to bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    GETLWA              Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\n         DROP  R2\n***** ----- >>>>>\nGETLWA   DS    0H                  Obtain all the relevant fields\n*                                  from the LWA (Logon Work Area)\n         L     R2,X'224'           Point to PSAAOLD\n         L     R2,X'6C'(,R2)       Point to ASXB\n         L     R2,X'14'(,R2)       Point to LWA\n         ST    R2,LWAADDR          Store LWA address\n         USING LWA,R2\n* ------------------------------------------------------------------ *\n*    Save all the relevant information from the LWA, to use later.   *\n* ------------------------------------------------------------------ *\n         ST    R5,SAVER5B          Store original contents of R5\n         L     R5,LWATNS           Pointer to NS table\n         ST    R5,SAVETNS          Save it.\n         L     R5,LWATE2           Pointer to E2 table\n         ST    R5,SAVETE2          Save it.\n         L     R5,LWATE8           Pointer to E8 table\n         ST    R5,SAVETE8          Save it.\n         L     R5,LWATAP           Pointer to AP table\n         ST    R5,SAVETAP          Save it.\n         XR    R5,R5               Clear register to be double sure.\n         LH    R5,LWATNSLN         Length of NS table if available\n         STH   R5,SAVETNSL         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NONSSIZE            No\n         OI    LWAMFLG,X'40'       Yes. Indicate that in a flag.\nNONSSIZE DS    0H\n         LH    R5,LWATE2LN         Length of E2 table if available\n         STH   R5,SAVETE2L         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOE2SIZE            No\n         OI    LWAMFLG,X'20'       Yes. Indicate that in a flag.\nNOE2SIZE DS    0H\n         LH    R5,LWATE8LN         Length of E8 table if available\n         STH   R5,SAVETE8L         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOE8SIZE            No\n         OI    LWAMFLG,X'10'       Yes. Indicate that in a flag.\nNOE8SIZE DS    0H\n         LH    R5,LWATAPLN         Length of AP table if available\n         STH   R5,SAVETAPL         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOAPSIZE            No\n         OI    LWAMFLG,X'80'       Yes. Indicate that in a flag.\nNOAPSIZE DS    0H\n         L     R5,SAVER5B          Restore original R5 contents\n         MVC   LWAPFLG,LWAPRMLB    Save flags showing which tables\n*                                  came from STEPLIB, if any.\n         DROP  R2\n* ------------------------------------------------------------------ *\n*    At this point we have finished saving things out of the LWA.    *\n* ------------------------------------------------------------------ *\n*    Now we have to find the LPA boundaries.                         *\n* ------------------------------------------------------------------ *\nLPAINFO  DS    0H\n         BAL   R9,GETLPABD         Get list of LPA storage boundaries.\n* ------------------------------------------------------------------ *\n***** ----- >>>>>  We can handle the public Platform Command and     *\n***** ----- >>>>>  Platform Program tables, if they exist.           *\n* ------------------------------------------------------------------ *\nGETPCPP  DS    0H            Info about Platpgm and Platcmd Tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'14'(,R2)       Point to CTLT control block\n         ST    R2,SAVECTLT         Save CTLT address for later use\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'34'(,R2)       Point to PLATCMD pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOFCVE              No. Say so.\n         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.\n         OI    PLATFLG,X'01'       Indicate that FCVE exists.\nTRYPPVE  DS    0H\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'40'(,R2)       Point to PLATPGM pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOPPVE              No. Say so.\n         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.\n         OI    PLATFLG,X'02'       Indicate that PPVE exists.\nTRYPPVEE DS    0H\n         B     CHKOLVER            Skip over relevant error messages.\n* -------------------------------------------------------------- *\n* ------           Error messages if tables don't exist   ------ *\n* -------------------------------------------------------------- *\nNOFCVE   DS    0H\n         APUT  =C'No PLATCMD table found',22\n         B     TRYPPVE\nNOPPVE   DS    0H\n         APUT  =C'No PLATPGM table found',22\n         B     TRYPPVEE\n* ----------------------------------------------------------------- *\n*    There doesn't seem to be a way to tell from an old INMXPARM    *\n*    control block itself, that it is the old version.  So we use   *\n*    the position of the active PARMLIB member name in the TPVT.    *\n* ----------------------------------------------------------------- *\nCHKOLVER DS    0H\n         L     R2,SAVETPVT         Load TPVT address back.\n         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?\n         BNE   PARMSCAN            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\n* -------------------------------------------------------------- *\n*    After we got the system information we finally start        *\n*     scanning the TSO command for parms, here.                  *\n* -------------------------------------------------------------- *\nPARMSCAN DS    0H\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         ST    R3,OFFSETSV         Save offset value.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n*\n* ----  Copy command buffer into pgm's buffer so we can control it.\n*\n         STM   R14,R1,SAVE1401     Now save registers 14 thru 1.\n         XR    R14,R14             Clear R14.\n         LH    R14,0(,R1)          Load full command buffer length.\n         S     R14,=F'5'           Subtract 4 for header, 1 for execute\n         ICM   R14,14,FULLZERO     Ensure cmd buffer smaller than 255\n         EX    R14,COPYCMDB        Copy command into pgm's area.\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\n         B     GOGOGO              Jump over executed instruction.\nCOPYCMDB MVC   CMDBCOPY(0),4(R1)   <<< Executed >>>\nGOGOGO   DS    0H\n* ----\n         LA    R2,3                Load register for BCT loop.\n* >>>\n         LA    R1,CMDBCOPY         Point to command in our buffer\n         A     R1,OFFSETSV         Add offset, point to subcommands\n         ST    R1,CHARSTRT         Store starting point away\n* >>>\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of function name.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R4),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         CLI   0(R4),X'00'         Is this character hex zero?\n         BE    AFTFIRST            Yes, end of command in buffer copy.\n         LA    R4,1(,R4)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R2,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8A          Save register\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers.\n         CLI   TABCODE+2,C'X'      Special action code, code X.\n         BNE   SEEIFJ01            Not this. Just go on.\n         OI    LPADFLG,X'01'       Set flag to display LPA range.\nSEEIFJ01 DS    0H\n*--*\n         TM    LPADFLG,X'01'       Display LPA range only?\n         BZ    SEEIFK01            No. Do all regular processing.\n         BAL   R9,GETLPRNT         Yes. Display LPA range and exit.\n         B     EOJ0                Out of program with Code 0\nSEEIFK01 DS    0H\n*--*\n         CLI   TABCODE+2,C'R'      Replace the entry in the given slot\n         BE    SEEIF0A1\n         CLI   TABCODE+2,C'B'      Blank the given slot\n         BE    SEEIF0A2\n         CLI   TABCODE+2,C'D'      Display contents of given slot\n         BE    SEEIF0A3              or all slots.\n         CLI   TABCODE+2,C'H'      Alter table header\n         BE    SEEIF0A4\n         CLI   TABCODE+2,C'L'      Supply length for table in LWA\n         BE    SEEIF0A5              including trailing blank entries.\n         CLI   TABCODE+2,C'M'      Supply length for table in LWA plus\n         BE    SEEIF0M5              one trailing blank, if there.\n         CLI   TABCODE+2,C'Z'      Zero length for table in LWA\n         BE    SEEIF0A6\n         CLI   TABCODE+2,C'S'      Say this table came from STEPLIB\n         BE    SEEIF0A7\n         CLI   TABCODE+2,C'P'      Say this table is not from STEPLIB\n         BE    SEEIF0A8\n         B     SEEIF000\nSEEIF0A1 DS    0H\n         OI    OFFFLAG,X'01'       Replace an entry\n         B     SEEIF001\nSEEIF0A2 DS    0H\n         OI    OFFFLAG,X'02'       Blank entry in the last slot\n         B     SEEIF001\nSEEIF0A3 DS    0H\n         OI    OFFFLAG,X'04'       Display an entry or entries\n         B     SEEIF001\nSEEIF0A4 DS    0H\n         OI    OFFFLAG,X'08'       Alter table header\n         B     SEEIF001\nSEEIF0M5 DS    0H                  Short length with one blank\n         OI    SHBLFLG,X'01'\nSEEIF0A5 DS    0H\n         OI    OFFFLAG,X'10'       Supply length for table in LWA\n         B     SEEIF001\nSEEIF0A6 DS    0H\n         OI    OFFFLAG,X'20'       Zero length for table in LWA\n         B     SEEIF001\nSEEIF0A7 DS    0H\n         OI    OFFFLAG,X'40'       Say this table came from STEPLIB\n         B     SEEIF001\nSEEIF0A8 DS    0H\n         OI    OFFFLAG,X'80'       Say this table not from STEPLIB\n         B     SEEIF001\nSEEIF000 DS    0H                  Wrong function code was entered...\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Program table code + Function code '\n         APUT  LINE,48\n* --- >\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Get out with code = 4.\nSEEIF001 DS    0H                  Which table to change\n         MVC   CODEPLAC(2),TABCODE    Save table code.\n* --- >\n         TM    OFFFLAG,X'04'       Display only--no changes to be made\n         BO    NOBEFORE            Don't show \"before changes\" message\n         STM   R14,R1,SAVE1401     Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGED,L'MESSAGED Say \"after making changes\"\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\nNOBEFORE DS    0H\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Program table code + Function code '\n         APUT  LINE,48\n* --- >                            Handle each table separately.\n         CLC   TABCODE(2),=C'E2'   Change IKJEFTE2?\n         BE    E2CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'E8'   Change IKJEFTE8?\n         BE    E8CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'AP'   Change IKJEFTAP?\n         BE    APCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PC'   Change PLATCMD?\n         BE    PCCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PP'   Change PLATPGM?\n         BE    PPCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'NS'   Change IKJEFTNS?\n         BE    NSCHANGE            Yes. Branch.\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Invalid code entered.\nEOJ      DS    0H                  END OF JOB\n         L     R13,4(,R13)\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\n**                                                                  **\n**   Different Table Handling Routines                              **\n**   --------- ----- -------- --------                              **\n**                                                                  **\n**  At this point, we have the routines which handle each of the    **\n**  separate types of tables.  E2, E8, AP, and NS, for which the    **\n**  live LWA version is handled.  But we also do the FCVE and       **\n**  PPVE (Platform Command and Platform Program) tables pointed     **\n**  to by the TPVT (TSO Parmlib Vector Table) control block, and    **\n**  those two tables, if they exist, are similarly handled.  But    **\n**  the FCVE and PPVE tables (table codes PC and PP respectively,   **\n**  in this program) are in common storage, and are not in the      **\n**  TSO user's address space.                                       **\n**                                                                  **\n** ---------------------------------------------------------------- **\nE2CHANGE DS    0H                 Handle the E2 table\n         OI    TIDFLAG,X'20'      Show we're doing the E2 table.\n         MVC   TABLEID,=C'E2'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R4,SAVETE2         Point to saved E2 table address\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nE2CHENTY DS    0H                 Show we have a size for E2 table\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    E2CHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'20'      Do we have a size for the E2 table?\n         BZ    E2CHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETE2L    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E2CHYSSZ\nE2CHNOSZ DS    0H                 Show message that we have no size\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE2CHYSSZ DS    0H\n         TM    LWAPFLG,X'20'      Was the E2 table loaded from STEPLIB?\n         BZ    E2CHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E2CHYSST\nE2CHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE2CHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETE2L        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   E2CHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     E2CHNOHB           And go on.\nE2CHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETE2L  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nE2CHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - >\n         LA    R5,8               Size of each E2 table entry\n         ST    R5,TABLESIZ        Store size of each entry\n*                                 We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Store this location\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E2CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nE2CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nE8CHANGE DS    0H                 Handle the E8 table\n         OI    TIDFLAG,X'10'      Show we're doing the E8 table.\n         MVC   TABLEID,=C'E8'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R4,SAVETE8         Point to saved E8 table address\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nE8CHENTY DS    0H                 Deal with the E8 table.             .\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    E8CHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'10'      Do we have a size for the E8 table?\n         BZ    E8CHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETE8L    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E8CHYSSZ\nE8CHNOSZ DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE8CHYSSZ DS    0H\n         TM    LWAPFLG,X'10'      Was the E8 table loaded from STEPLIB?\n         BZ    E8CHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E8CHYSST\nE8CHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE8CHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETE8L        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   E8CHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     E8CHNOHB           And go on.\nE8CHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETE8L  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nE8CHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         LA    R5,8               Size of each E8 table entry\n         ST    R5,TABLESIZ        Store size of each entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Store this location\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E8CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nE8CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nAPCHANGE DS    0H                 Handle the AP table\n         OI    TIDFLAG,X'80'      Show we're doing the AP table.\n         MVC   TABLEID,=C'AP'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n* - -\n         L     R4,SAVETAP         Get address of AP table\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nAPCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    APCHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'80'      Do we have a size for the AP table?\n         BZ    APCHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETAPL    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     APCHYSSZ\nAPCHNOSZ DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nAPCHYSSZ DS    0H\n         TM    LWAPFLG,X'80'      Was the AP table loaded from STEPLIB?\n         BZ    APCHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     APCHYSST\nAPCHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nAPCHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETAPL        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   APCHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     APCHNOHB           And go on.\nAPCHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETAPL  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nAPCHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         LA    R5,8               Size of each AP table entry\n         ST    R5,TABLESIZ        Store size of each entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Save this location.\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    APCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nAPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nPCCHANGE DS    0H                 Handle the PC table\n         OI    TIDFLAG,X'01'      Show PC table chosen.\n         MVC   TABLEID,=C'PC'\n         TM    PLATFLG,X'01'      Does the table exist?\n         BZ    PCCHAERR           No. Report error.\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R2,SAVEFCVE        Get the PC table address\n         LR    R4,R2              Save it off\n         ST    R4,DISPREG         Store register contents for display\n* -- >                            Do Display\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,DISPREG      Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n* -- >\n         L     R3,X'8'(,R4)       Point to length of table\n         STH   R3,SAVETCUR        Store it to show non-zero\n         AR    R4,R3              Point just past PC table\n         ST    R4,TABLEND         And mark the projected end of table\n* - -\n         L     R3,X'C'(,R2)       Get number of table entries\n         ST    R3,TABLENUM        Preserve number for table search\n         LA    R3,8               Load table size\n         ST    R3,TABLESIZ        And store it for DISPTABL routine\n** -- **\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Table length in Hex:  '\n         HEX   LINE+25,2,SAVETCUR\n         APUT  LINE,45\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n** -- **\n         L     R3,SAVEFCVE        Get the platcmd table start address\n         LA    R3,X'10'(,R3)      Bump past its header\n         ST    R3,TABLSTRT        And store the starting place away\n* - -\n         LA    R5,8               Get 8 bytes ready for subtraction\n         SR    R4,R5              Back up to the last slot\n         ST    R4,SAVLSLOT        Save location of last table slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PCCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPCCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHAERR DS    0H                 Say no PC table exists.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PC command not valid if no PC table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPCCHAEND DS    0H\n         B     EOJ0\n** ---------------------------------------------------------------- **\nPPCHANGE DS    0H                 Handle the PP table\n         OI    TIDFLAG,X'02'      Show PP table chosen.\n         MVC   TABLEID,=C'PP'\n         TM    PLATFLG,X'02'      Is there a Platpgm table?\n         BZ    PPCHAERR           If no, then display error condition\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R2,SAVEPPVE        Get the PP table address\n         LR    R4,R2              Save it off\n         ST    R4,DISPREG         Store PP table address for display\n* -- >                            Do Display\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,DISPREG      Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n* -- >\n         L     R3,X'8'(,R4)       Size of PP table in bytes\n         STH   R3,SAVETCUR        Show it's non-zero\n         AR    R4,R3              Point just past the PP table\n         ST    R4,TABLEND         Mark the end of table for DISPTABL\n* - -\n         L     R3,X'C'(,R2)       Get number of table entries\n         ST    R3,TABLENUM        Store that number away for DISPTABL\n         LA    R3,8               Size of each entry\n         ST    R3,TABLESIZ        Store that away too\n** -- **\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Table length in Hex:  '\n         HEX   LINE+25,2,SAVETCUR\n         APUT  LINE,45\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n** -- **\n         L     R3,SAVEPPVE        Get start address of PP table\n         LA    R3,X'10'(,R3)      Add 16 to bump past header\n         ST    R3,TABLSTRT        Store search starting address away\n* - -\n         LA    R5,8               Load size of one entry\n         SR    R4,R5              Back up to last slot address\n         ST    R4,SAVLSLOT        And save it off.\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PPCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPPCHAERR DS    0H                 Say no PC table exists.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PP command not valid if no PP table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPPCHAEND DS    0H\n         B     EOJ0\n** ---------------------------------------------------------------- **\nNSCHANGE DS    0H                 Handle the NS table\n         OI    TIDFLAG,X'40'      Show we're doing the NS table.\n         MVC   TABLEID,=C'NS'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         OI    NSCHFLG,X'01'      Show SETTMODE we're doing NS\n* - -\n         L     R4,SAVETNS         Saved location of the NS table\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR10        Measure the table\n*\n         L     R1,TABLSTRT        Load it to start table search later\n**-->>\nNSCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    NSCHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'40'      Do we have a size for the NS table?\n         BZ    NSCHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETNSL    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NSCHYSSZ\nNSCHNOSZ DS    0H                 Say we have no size for the NS table\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nNSCHYSSZ DS    0H\n         TM    LWAPFLG,X'40'      Was the NS table loaded from STEPLIB?\n         BZ    NSCHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NSCHYSST           Don't put out contradictory messages\nNSCHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nNSCHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past the table header\n         ST    R1,TABLSTRT        Store new start address for DISPTABL\n* - -\n         LH    R2,SAVETNSL        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   NSCHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME10LENG        Measured table length.\n***\n         B     NSCHNOHB           And go on.\nNSCHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETNSL  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nNSCHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n*        S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         S     R5,=F'16'\n         STM   R2,R3,SAVER23      Save work registers.\n         XR    R2,R2              Zero work registers.\n         XR    R3,R3\n         LR    R3,R5              Feed length into work register\n         D     R2,=F'10'          Divide by 10.\n         LR    R5,R3              Save the result.\n         LM    R2,R3,SAVER23      Restore work registers.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         XR    R5,R5              Clear register\n         LA    R5,10              Size of each NS table entry\n         ST    R5,TABLESIZ        Store size of each table entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point to Last Slot\n         ST    R4,SAVLSLOT        Save location of last slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    NSCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nNSCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\n* ----------------------------------------------------------------- *\n*     Various \"abnormal ending\" routines.                           *\n* ----------------------------------------------------------------- *\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJC\n* ----------------------------------------------------------------- *\nNOE2     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E2'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOE8     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E8'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOAP     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'AP'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNONS     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'NS'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOTNUMER DS    0H                 Message that a parm was not numeric\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEN),MESSAGEN\n         MVC   LINE+21(1),0(R4)\n         APUT  LINE,L'MESSAGEN\n         B     EOJ4\n** ---------------------------------------------------------------- **\n**    Some of the Register and Pointer Save Areas                   **\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'                   Parm address from R1 at entry\nSAVETPVT DC    F'0'                   Address of TPVT control block\nSAVECTLT DC    F'0'                   Address of CTLT control block\nSAVEFCVE DC    F'0'                   Address of Platcmd table if non-0\nSAVEPPVE DC    F'0'                   Address of Platpgm table if non-0\nSAVEUPT  DC    F'0'                   Address of UPT\nSAVEECT  DC    F'0'                   Address of ECT\nSAVEPSCB DC    F'0'                   Address of PSCB\nSAVETNS  DC    F'0'                   Address of NS table\nSAVETE2  DC    F'0'                   Address of E2 table\nSAVETE8  DC    F'0'                   Address of E8 table\nSAVETAP  DC    F'0'                   Address of AP table\nSAVETNSL DC    H'0'                   Length of NS table, if nonzero\nSAVETE2L DC    H'0'                   Length of E2 table, if nonzero\nSAVETE8L DC    H'0'                   Length of E8 table, if nonzero\nSAVETAPL DC    H'0'                   Length of AP table, if nonzero\nSAVETCUR DC    H'0'                   Copied length of current table\nSAVETNEW DC    H'0'                   Changed length of current table\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'                   Fullword of numeric 0\nFULLFOUR DC    F'4'                   Fullword 4\nFULLEIGT DC    F'8'                   Fullowrd 8\nFULLTWLV DC    F'12'                  Fullword 12\nSAVE1401 DC    5F'0'                  More for safety\nLWAADDR  DC    F'0'                   Address of LWA control block\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\nMOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED\nMOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED\nMOVFNUM  MVC   FSTNUME(*-*),0(R3)     EXECUTED\nPACK     PACK  WORKA,0(0,3)          <<< EXECUTED >>>\n** ---------------------------------------------------------------- **\n*          * - - - - - - - - - - - - - - - - - - - - - - - - *\n*          *            S U B R O U T I N E S                *\n*          * - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**  These are executed using a BAL R9,subroutn  instruction.        **\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNAMES DS    0H                  Get program name from parm.\n         ST    R9,SAVER9B          Save BAL register\n         ST    R2,SAVER2D          Save work register\nGETNAMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNAMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         BCTR  R5,0                Subtract one from end count\n         B     GETNAMST            And loop to find first non-blank.\nGETNAMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R2,8                BCT initial quantity - 8 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of program name.\nGETNAMLU DS    0H                  Loop to get entire name\n         CLI   0(R4),X'40'         First blank?\n         BE    GETNAMGT            Yes, got whole name.\n         CLI   0(R4),X'00'         First hex zeros?\n         BE    GETNAMGT            Yes, got whole name.\n         CR    R8,R5               End of command buffer?\n         BNL   GETNAMGT            Yes. Got all we can get.\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R4,1(,R4)           Bump where we are.\n         BCT   R2,GETNAMLU         Loop back.\nGETNAMGT DS    0H\n         ST    R8,SAVER8A          Save character count\n         ST    R8,FSTCOUNT         Again.\n         CLC   SAVER8A,=F'0'       Is character count (left) 0?\n         BNE   GETREALY            No. Go on processing for name.\n         BAL   R9,MISSPGM2         Say we're missing a program name.\n         B     EOJ4                And get out with code = 4.\nGETREALY DS    0H\n         MVC   FSTCHALF(2),FSTCOUNT+2    Get halfword program length\n         MVC   LINE,LINE-1               Print it in message\n         HEX   LINE,4,SAVER8A\n         MVC   LINE+13(17),=C'Length of command'\n         APUT  LINE,30\n         L     R3,CHARCONT         Load starting place again.\n         BCTR  R8,0                One less for EXECUTE.\n         MVC   FSTNAME(8),BLANKS   Blank entire target field.\n         EX    R8,MOVFSTN          Move program name to target.\n         OC    FSTNAME(8),BLANKS   Uppercase the program name.\n         MVC   LINE,LINE-1         And print its name out.\n         MVC   LINE(8),FSTNAME\n         MVC   LINE+13(17),=C'New program name '\n         APUT  LINE,30\n* - >\nGETNAMEN DS    0H                  Exit this routine.\n         L     R2,SAVER2D          Restore work register\n         L     R9,SAVER9B          Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGED  DS    0H                     The \"value was changed\" message.\n         ST    R9,SAVER9C\n         TM    LPAFLAG,X'01'          Is the table within LPA?\n         BO    CHANGEND               Yes. Change already shown.\n         TM    FLAGZ,X'02'            Is parm number past end of table?\n         BO    CHANGEDN               Yes. Bypass all operations here.\n         TM    OFFFLAG,X'01'          Replacement?\n         BO    CHANGEDA               Say what was replaced\n         TM    OFFFLAG,X'02'          Blanking?\n         BO    CHANGEDB               Say what was blanked\n         TM    OFFFLAG,X'04'          Display?\n         BO    CHANGEDD               Skip saying anything was changed.\n         TM    OFFFLAG,X'08'          Change header to \" PARMLIB\"?\n         BO    CHANGEDH               Write message that its done.\n         TM    OFFFLAG,X'10'          Supply lengths in LWA?\n         BO    CHANGEDK               Write appropriate messages.\n         TM    OFFFLAG,X'20'          Zero lengths in LWA?\n         BO    CHANGEDZ               Write appropriate messages.\n*                                     X'40' dealt with in SETSTEPL\n*                                     X'80' dealt with in NOTSTEPL\n         B     CHANGEND\nCHANGEDA DS    0H                     Replacing a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3A+5(4),TABENNUM+6\n         MVC   MESSAG3A+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3A+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDB DS    0H                     Blanking a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3B+5(4),TABENNUM+6\n         MVC   MESSAG3B+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3B+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDD DS    0H                     Displaying table entries (entry)\n         TM    OFFFLAG,X'04'\n         BZ    CHANGEDX               Not display? Say what's in slot.\n         CLC   SLOTBIN,=F'0'          Display entire table?\n         BE    CHANGEND               Don't say anything changed.\nCHANGEDX DS    0H                     Say we're displaying 1 slot.\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Display of Slot contents.     '\n         APUT  LINE,30\n         B     CHANGEND\nCHANGEDN DS    0H                     Say nothing changed.\n         APUT  MESSAG2D,L'MESSAG2D\n         B     CHANGEND\nCHANGEDH DS    0H                 Putting \" PARMLIB\" in table header.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\".\n         APUT  MESSAG3D,L'MESSAG3D\n         BAL   R9,PRTABLHD        Table Header Display Routine\n         B     CHANGEND\nCHANGEDK DS    0H                 \"Supply table lengths\" message.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1               Print a blank line.\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\".\n         MVC   MESSAG3E+19(2),TABLEID    Put table id into message.\n         HEX   MESSAG3E+48,2,SAVETCUR    Old message length\n         CLC   TABLEID,=C'NS'            Is it the NS table?\n         BE    CHANGK01\n         HEX   MESSAG3E+60,2,SAVETNEW    8-byte table length\n         B     CHANGK02\nCHANGK01 DS    0H\n         TM    SHBLFLG,X'01'\n         BO    CHANGKA1\n         HEX   MESSAG3E+60,2,TO10LENG    10-byte table length\n         B     CHANGK02\nCHANGKA1 DS    0H\n         HEX   MESSAG3E+60,2,ME10LENG    10-byte table length\nCHANGK02 DS    0H\n         MVI   MESSAG3E+64,C'.'          Finish \"table length\" message.\n         APUT  MESSAG3E,L'MESSAG3E\n*                                        Message after change.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETNEW    New message length\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         B     CHANGEND\nCHANGEDZ DS    0H                 Zeroing table lengths in the LWA.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\"\n         MVC   MESSAG3F+19(2),TABLEID\n         HEX   MESSAG3F+33,2,SAVETNEW\n         MVI   MESSAG3F+37,C'.'\n         APUT  MESSAG3F,L'MESSAG3F\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         B     CHANGEND\nCHANGEND DS    0H\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNAMEPARM DS    0H\n         ST    R9,SAVER9D\n         TM    LPADFLG,X'01'          Displaying LPA range?\n         BO    NAMEPEND               Don't look for a number here.\n*-*\n         TM    OFFFLAG,X'08'          Just changing table header?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*\n*-*-*\n         TM    OFFFLAG,X'10'          Supply table length in LWA.\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*\n*-*-*-*\n         TM    OFFFLAG,X'20'          Zero table length in LWA.\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'          Set on STEPLIB flag for table?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'          Set off STEPLIB flag for table?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*-*-*\n         L     R8,SAVER8A             Get number of characters used\n         CR    R8,R5                  More than what's left?\n         BNL   NAMEBAD1               Yes. Error.\n         C     R5,=F'3'               Is end bigger than 3?\n         BNH   NAMEBAD1               No. Error.\nNAMEGOOD DS    0H\n         S     R5,=F'3'               Subtract 3 from number till end.\n         BAL   R9,GETNUMES            Get the number of the pgm entry.\n         TM    OFFFLAG,X'02'          Are we blanking?\n         BO    NAMEPEND               Yes. Don't need a name parameter\n         TM    OFFFLAG,X'04'          Displaying?\n         BO    NAMEPEND               Yes. No names wanted.\n         BAL   R9,GETNAMES            Get the name of pgm to shove in.\n         B     NAMEPEND\nNAMEBAD1 DS    0H                     Get here if there's no parameter.\n         TM    OFFFLAG,X'04'          Are we displaying?\n         BO    NAMEPEND               No error. Just get out normally.\n         TM    OFFFLAG,X'02'\n         BO    NAMEBAD2\n         BAL   R9,MISSPGM1            We're replacing. Ask for both.\n         B     EOJ4                   RC = 4\nNAMEBAD2 DS    0H\n         BAL   R9,MISSPGM3\n         B     EOJ4                   RC = 4\nNAMEPEND DS    0H\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADJNEXTP DS    0H                     Get to first blank\n         ST    R9,SAVER9E\n         MVC   CHARSTRT,CHARCONT      Set up\n         L     R1,CHARSTRT\nSEEIFENX DS    0H                     Loop\n         CLI   0(R1),X'40'            First blank?\n         BE    SEEIFENZ               Yes, then end.\n         LA    R1,1(,R1)              Bump to next character\n         ST    R1,CHARSTRT            Store address away\n         B     SEEIFENX               Loop back\nSEEIFENZ DS    0H\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9F\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         MVC   LINE+56(8),VERS#       Version number into title\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9F\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETTMODE DS    0H                  Routine that does Key 0 stuff.\n         ST    R9,SAVER9G\n         TM    FLAGZ,X'02'         Is parm number past end of table?\n         BO    SETTMEND            Yes. Don't do key zero operations.\n         TM    LPAFLAG,X'01'       Is the table in LPA region?\n         BO    SETTMEND            Yes. Do not attempt to change it.\n* -- >       Test if this command is being run APF Authorized\n         AIF   ('&SVC' EQ 'SVC').DOSVC\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n.DOSVC   ANOP\n* -- >\n         AIF   ('&SVC' EQ 'NOSVC').NOSVC02\n         AUTHON\n.NOSVC02 ANOP\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n* -\n         TM    OFFFLAG,X'04'       Only displaying entr(ies)?\n         BNZ   ENDKZ               Yes. No Key 0 stuff done.\n         CLI   LPAFLAG,X'01'       Did the table come from LPALIB?\n         BE    ENDKZ               Yes. Don't try to alter table.\n         TM    NSCHFLG,X'01'       Are we doing the NS table?\n         BO    TENSLOT             Yes. Handle its special needs.\nEIGHSLOT DS    0H                  8-character tables.\n*-*                                Altering table header only\n         TM    OFFFLAG,X'08'       Alter table header?\n         BZ    GONOHDRA            No. Escape this section.\n         TM    TIDFLAG,X'03'       Dealing with PC or PP?\n         BNZ   GONOHDRA            Yes. Show nothing was changed.\n         L     R3,HDRADDR          Load header address\n         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.\n         B     ENDKZ               Get out of supervisor state.\nGONOHDRA DS    0H\n*-*\n*-*-*\n         TM    OFFFLAG,X'30'       Supplying length to LWA field?\n         BZ    GONZLWA1            No. Don't do this routine.\n         BAL   R9,MEASUR08         Measure it.\n         BAL   R9,WHERSIZE         Load size into proper place in LWA.\n         B     ENDKZ               Get out of supervisor state.\nGONZLWA1 DS    0H\n*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?\n         BZ    NOGSTEP1            No. Skip step.\n         BAL   R9,SETSTEPL         Set the STEPLIB flag on.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTEP1 DS    0H\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?\n         BZ    NOGSTOF1            No. Skip step.\n         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTOF1 DS    0H\n*-*-*-*-*-*\n         L     R3,OURSLOT          Address of slot to replace name in.\n         TM    OFFFLAG,X'01'       Replacing function here?\n         BZ    BLANKIT             No. Do blanking function.\n         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?\n         BE    ENDKZ               No. It is blank. Nothing to do.\n         MVC   0(8,R3),FSTNAME     Non-blank. Move in new pgm name.\n         B     ENDKZ               And get out.\nBLANKIT  DS    0H                  Blank an 8-character table entry\n         TM    OFFFLAG,X'02'       Blanking function here?\n         BZ    ENDKZ               No. Can't do anything.\n         L     R3,OURSLOT          Address of slot entry to blank\n         MVC   0(8,R3),BLANKS      Move the blanks in.\n         B     ENDKZ               And get out.\nTENSLOT  DS    0H                  10-character tables.\n         L     R3,OURSLOT          Address of slot to replace name in.\n         TM    OFFFLAG,X'01'       Replacing function here?\n         BZ    BLANKTEN            No. Do blanking function.\n         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?\n         BE    ENDKZ               No. It is blank. Nothing to do.\n         MVC   0(2,R3),FSTCHALF    Put length of the new program name.\n         MVC   2(8,R3),FSTNAME     Put in the new program name.\n         B     ENDKZ               Get out of supervisor state.\nBLANKTEN DS    0H                  Blank the 10-character table entry\n*-*                                Altering table header only\n         TM    OFFFLAG,X'08'       Alter table header?\n         BZ    GONOHDRB            No. Escape this section.\n         TM    TIDFLAG,X'03'       Dealing with PC or PP?\n         BNZ   GONOHDRB            Yes. Show nothing was changed.\n         L     R3,HDRADDR          Load header address\n         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.\n         B     ENDKZ               Get out of supervisor state.\nGONOHDRB DS    0H\n*-*\n*-*-*\n         TM    OFFFLAG,X'30'       Supplying length to LWA field?\n         BZ    GONZLWA2            No. Don't do this routine.\n         BAL   R9,MEASUR10         Measure it.\n         BAL   R9,WHERSIZE         Load size into proper place in LWA.\n         B     ENDKZ               Get out of supervisor state.\nGONZLWA2 DS    0H\n*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?\n         BZ    NOGSTEP2            No. Skip step.\n         BAL   R9,SETSTEPL         Set the STEPLIB flag.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTEP2 DS    0H\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?\n         BZ    NOGSTOF2            No. Skip step.\n         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTOF2 DS    0H\n*-*-*-*-*-*\n         TM    OFFFLAG,X'02'       Blanking function here?\n         BZ    ENDKZ               No. Can't do anything.\n         L     R3,OURSLOT          Address of slot entry to blank.\n         MVC   0(2,R3),=X'0000'    Move X'FFFF' to mark table end\n         MVC   2(8,R3),BLANKS      And move the blanks to pgm name slot\n         B     ENDKZ               Get out of supervisor state.\nENDKZ    DS    0H                  Get ready to get out of Key 0.\n* -\nNZ       MODESET KEY=NZERO\n         AIF   ('&SVC' EQ 'NOSVC').NOSVC03\n         AUTHOFF\n.NOSVC03 ANOP\n* -- >      Back to ordinary life ----\nSETTMEND DS    0H                  Bypass Key 0 stuff.\n         L     R9,SAVER9G\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nERRORCOD DS    0H                  Give instructions if wrong things\n*                                   were entered, how to do it right.\n         ST    R9,SAVER9H\n         TM    LPADFLG,X'01'\n         BO    ERRORCOE\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11L,L'MESSA11L\n         APUT  MESSA11M,L'MESSA11M\n         APUT  MESSA11P,L'MESSA11P\n         APUT  MESSA11A,L'MESSA11A\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11C,L'MESSA11C\n         APUT  MESSA11D,L'MESSA11D\n         APUT  MESSA11Z,L'MESSA11Z\n         APUT  MESSA11Y,L'MESSA11Y\n         APUT  MESSA11X,L'MESSA11X\n         APUT  MESSA11F,L'MESSA11F\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11I,L'MESSA11I\n         APUT  MESSA11K,L'MESSA11K\n         APUT  MESSA11J,L'MESSA11J\n         APUT  MESSA11N,L'MESSA11N\n         APUT  MESSA11Q,L'MESSA11Q\n         APUT  MESSA11O,L'MESSA11O\n*        MVC   LINE,LINE-1\n*        APUT  LINE,30\nERRORCOE DS    0H\n         L     R9,SAVER9H\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM1 DS    0H                     Supply a slot number & pgm name.\n         ST    R9,SAVER9I\n         MVC   LINE,LINE-1\n         APUT  MESSA11G,L'MESSA11G\n         L     R9,SAVER9I\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM2 DS    0H                     Supply a program name to put in.\n         ST    R9,SAVER9J\n         MVC   LINE,LINE-1\n         APUT  MESSA11E,L'MESSA11E\n         L     R9,SAVER9J\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM3 DS    0H                     Supply a slot number to Blank.\n         ST    R9,SAVER9N\n         MVC   LINE,LINE-1\n         APUT  MESSA12Q,L'MESSA12Q\n         L     R9,SAVER9N\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPTABL DS    0H                Scan thru the particular table....\n         ST    R9,SAVER9L          Save BAL register\n         ST    R3,SAVER3A          Save\n         ST    R4,SAVER4A             the\n         ST    R5,SAVER5A                work\n         ST    R2,SAVER2G                   registers.\n*-*\n         TM    OFFFLAG,X'08'     Just altering table header?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*\n*-*-*\n         TM    OFFFLAG,X'10'     Just supplying an LWA size?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*\n*-*-*-*\n         TM    OFFFLAG,X'20'     Zeroing out LWA size?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'     Setting table to come from STEPLIB?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'     Setting table not from STEPLIB?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*-*-*\n         XR    R3,R3               Zero\n         XR    R5,R5                  work\n         XR    R2,R2                     registers.\nDISPTSTR DS    0H\n         L     R3,TABLSTRT         Load start address of table\n         L     R2,TABLENUM         Load number of entries in table\n         L     R5,TABLESIZ         Load size of each entry\n         LA    R4,1                Start slot number count at 1\n         ST    R4,SLOTNOW          Store slot number count away\n         ST    R3,OURSLOT          Initialize slot address.\n         CLC   SLOTBIN,=F'0'       If there's no slot num in parameter\n         BE    DISPTLUP            Then bypass error checking\n         C     R2,SLOTBIN          Compare table size to parm number\n         BNL   DISPTLUP            If parm number is LE, then display\nDISPTERR DS    0H                  Else error message and out.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Slot number specified '\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'is bigger than table size '\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         B     EOJ4\nDISPTLUP DS    0H                  Loop thru the table entries.\n         MVC   LINE,LINE-1\n         MVC   LINE(2),CODEPLAC    Move in table code.\n         MVC   LINE+3(19),=C'Table Entry Number:'\n         CVD   R4,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   TABENNUM(10),MASK10      Preserve printable slot number\n         ED    TABENNUM(10),CVDAREA+3\n         TM    NSCHFLG,X'01'       Is this the 10-byte NS table entry?\n         BO    DISPTBNS            Yes. Handle separately.\n         MVC   LINE+34(8),0(R3)\n         CLC   LINE+34(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+34(8),=C'*empty* '   Yes. Don't just show blanks.\n         OI    FLAGZ,X'01'         We found a blank table entry.\n         TM    FLAGZ,X'04'         Do we have table lengths?\n         BO    DISPTBLK            Yes, then use the table lengths\n* -------                           that we have.\n*                                  No table lengths here. So....\n         ST    R3,OURSLOT          Preserve empty slot address\n         ST    R4,SLOTNOW          Also preserve this slot number.\n         B     DISPTYES            And then stop on first blank.\nDISPTBNS DS    0H\n         HEX   LINE+34,2,0(R3)     Display size of this entry\n         MVC   LINE+40(8),2(R3)    Move in program name to slot\n         CLC   LINE+40(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+40(8),=C'*empty* '   Yes. Don't just show blanks.\n         OI    FLAGZ,X'01'         We found a blank table entry.\n         TM    FLAGZ,X'04'         Do we have table lengths?\n         BO    DISPTBLK            Yes, then use the table lengths\n* -------                           that we have.\n*                                  No table lengths here. So....\n         ST    R3,OURSLOT          Preserve empty slot address\n         ST    R4,SLOTNOW          Also preserve this slot number.\n         B     DISPTYES            And then stop on first blank.\nDISPTBLK DS    0H                  Search each slot number.\n         CLC   SLOTBIN,=F'0'       Has a slot number been specified?\n         BE    DISPTYES            No. Just display all the slots.\n         CLC   SLOTBIN,SLOTNOW     Yes. Then are we at the one we want?\n         BNE   DISPTNOT            No. Just go further and search.\n         OI    FLAGZ,X'08'         We're at the desired slot.\n* ---  Save contents of the current slot which was found - below\n         ST    R3,OURSLOT          Preserve this slot's address\n         LR    R1,R5               Load table entry size\n         BCTR  R1,0                One less for execute\n         EX    R1,MOVESLOT         Save contents of slot for kicks\n         B     DISPTPEX               Branch past executed instruction\nMOVESLOT MVC   SLOTSAVE(*-*),0(R3)    EXECUTED\nDISPTPEX DS    0H\n* ---  Save contents of the current slot which was found - above\nDISPTYES DS    0H                  Print this slot entry\n         APUT  LINE,52\n         TM    FLAGZ,X'01'         Is this a blank table entry?\n         BO    DISPTEND            Yes, end the table search.\n         TM    FLAGZ,X'08'         Are we at the slot # we specified?\n         BO    DISPTEND            Yes. Stop the search.\nDISPTNOT DS    0H                  Bump to next slot and loop back.\n         C     R3,TABLEND          Compare to end from adding bytes.\n         BH    DISPTEND            Past it, then end the search.\n         LA    R3,0(R5,R3)         Bump to next slot\n         ST    R3,OURSLOT          Store its address - important....\n         LA    R4,1(,R4)           Bump count of slot number\n         ST    R4,SLOTNOW          Store new slot number away\n         ST    R2,SAVER2E\n         BCT   R2,DISPTLUP         And loop to examine the new slot.\n*\nDISPTEND DS    0H                  END OF TABLE SEARCH ROUTINE\n* - >                              Display message if desired slot is\n* - >                               past the end of the table.\n         CLC   SLOTBIN,SLOTNOW     Is the parm number past the end?\n         BNH   DISPTNOP            No. Don't report a problem.\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'exceeds scanned table size'\n         L     R1,SLOTNOW          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         OI    FLAGZ,X'02'         Flag a problem situation.\nDISPTNOP DS    0H\nDISPTSKP DS    0H\n* - >\n         L     R3,SAVER3A          Restore all the work registers.\n         L     R4,SAVER4A\n         L     R5,SAVER5A\n         L     R2,SAVER2G\n         L     R9,SAVER9L          Restore the BAL register.\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNUMES DS    0H                  Get the number after the table code\n         ST    R9,SAVER9M           + the action code. If it exists.\n         ST    R2,SAVER2F\nGETNUMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNUMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         S     R5,=F'1'            Subtract one from end count\n         B     GETNUMST            And loop to find first non-blank.\nGETNUMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R2,5                BCT initial quantity - 5 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of program number\nGETNUMLU DS    0H                  Loop to get entire number\n         CLI   0(R4),X'40'         First blank?\n         BE    GETNUMGT            Yes, got whole number\n         CLI   0(R4),X'00'         First hex zeros?\n         BE    GETNUMGT            Yes, got whole number\n         CR    R8,R5               End of command buffer?\n         BNL   GETNUMGT            Yes. Got all we can get.\n* --                               Test EBCDIC number if numeric.\n         CLI   0(R4),X'F0'         Check character if numeric digit.\n         BL    NOTNUMER            Less than X'F0', not a number.\n         CLI   0(R4),X'F9'         More than X'F9'?\n         BH    NOTNUMER            Not a number.\n* --\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R4,1(,R4)           Bump where we are.\n         BCT   R2,GETNUMLU         Loop back.\nGETNUMGT DS    0H                  Got the whole number - examine it.\n         ST    R8,SAVER8A\n         ST    R8,FSTNOUNT         Get halfword value of slot number\n         MVC   FSTNHALF(2),FSTNOUNT+2\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTFIELD(8),BLANKS  5-char number plus 3 blanks\n         EX    R8,MOVFNUM          Get the number from the parm\n         EX    R8,PACK             Convert it to packed\n         CVB   R0,WORKA            Convert it to Binary\n         ST    R0,SLOTBIN          Store the value for later use\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTFIELD    8-char number with blanks\n         MVC   LINE+13(19),=C'Entry slot number  '\n         APUT  LINE,32\n         LA    R8,1(,R8)           Restore number of chars after EX\n         ST    R8,CHARSIZE         Save this value off.\n         AR    R3,R8               Add it to R3 so we start past it.\n         ST    R3,CHARCONT         Store start value for next parm.\nGETNUMEN DS    0H\n         L     R2,SAVER2F\n         L     R9,SAVER9M\n         BR    R9\n* ----------------------------------------------------------------- *\n*      Measure \"8-byte entry\" loaded table.                         *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR08 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9O           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\nME08LOOP DS    0H\n*     Try (real hard) to detect the end of the table  -  below\n         MVC   SAVECHAR(1),0(R5)    Save first character\n         CLC   =C'        ',0(R5)   Is this table entry a blank?\n         BE    ME08BLNK             Yes. Reached virtual end of table\n         CLC   ZEROES8(8),0(R5)     Is this \"entry\" hex zeros?\n         BE    ME08NOBL             Yes. Reached possible junk storage\n         CLC   =C' ',0(R5)          Is first character blank?\n         BE    ME08NOBL             Yes, not a valid table entry.\n         TR    SAVECHAR,TRTPGMNM    Check first char if appropriate.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE2',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE8',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTAP',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTNS',0(R5)\n         BE    ME08NOBL\n*     Try (real hard) to detect the end of the table  -  above\n         LA    R4,8(,R4)            Count next table entry\n         LA    R5,8(,R5)            Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         B     ME08LOOP             Loop back till perceived table end\nME08BLNK DS    0H\n         LA    R4,8(,R4)            Add length of blank entry\n         LA    R5,8(,R5)            Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME08NOBL DS    0H\n         STH   R4,ME08LENG          Store measured length of table.\n         ST    R5,ME08END           And record address of table end.\n         BAL   R9,MESBLK08          Measure more blanks after table.\n         TM    MEASFLG,X'01'        Been here already?\n         BO    ME08NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME08NOSH DS    0H\n         OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9O           Restore BAL register\n         BR    R9\nME08END  DS    F                    Store end-of-table address\nME08LENG DS    H                    Store table length\nBL08LENG DS    H                    Store length of blanks\nTO08LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMESBLK08 DS    0H                   See how many more blanks we have.\n         ST    R9,SAVER9Y           Save BAL register\n         ST    R5,SAVER5E           Save work register\n         L     R5,ME08END           Start at measured end of table.\nMESBLL08 DS    0H                   Loop\n         CLC   =C'        ',0(R5)   Is this entry a blank?\n         BNE   MESBLE08             Yes. Stop counting blanks.\n         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?\n         BH    MESBLE08             Yes. Don't find more blanks.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\n         LA    R5,8(,R5)            Bump to next entry.\n         B     MESBLL08             Loop until no blanks or max.\nMESBLE08 DS    0H\n         L     R1,BLNKCNT           Total count of found blanks\n         LTR   R1,R1\n         BZ    MESBLX08\n         BCTR  R1,0                 Really one less\nMESBLX08 DS    0H\n         SLL   R1,3                 Multiply by 8\n         STH   R1,BL08LENG          Length of blank entries\n         AH    R1,ME08LENG          Add length of non-blank entries\n         STH   R1,TO08LENG          Total length of both\n*>*----\n*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.\n*        MVC   LINE,LINE-1\n*        HEX   LINE,2,ME08LENG\n*        HEX   LINE+10,2,BL08LENG\n*        HEX   LINE+20,2,TO08LENG\n*        APUT  LINE,30\n*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.\n*>*----\n         L     R5,SAVER5E           Restore work register\n         L     R9,SAVER9Y           Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ----------------------------------------------------------------- *\n*      Measure \"10-byte entry\" loaded table.                        *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR10 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9P           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\nME10LOOP DS    0H\n         MVC   SAVECHAR(1),2(R5)    Save first character of pgm name\n         MVC   SAVECH08(1),9(R5)    Save last character of pgm name\n         CLC   BLKSTRNG(10),0(R5)   Full blank entry here?\n         BE    ME10BLNK             Yes. Count the blank entry.\n         CLC   ENDSTRNG(10),0(R5)   FFFF plus blank pgm name?\n         BE    ME10BLNK             Yes. Can still be considered blank.\n         CLC   =X'0000',0(R5)       Test-test-test-test-test\n         BE    ME10TEST             Test rest of \"entry\n         B     ME10REST             Not zeros, go on.\nME10TEST DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check for strange character.\n         CLI   SAVECHAR,X'02'       Is it strange?\n         BE    ME10NOBL             Yes. This is not a blank entry.\nME10REST DS    0H\n         CLC   =X'FFFF',0(R5)       Test for end string separately.\n         BNE   ME10TES2             Not. Not at virtual end of table\n         B     ME10NOBL             FFFF alone. Not a blank entry.\nME10TES2 DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check first char not upcase alpha.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME10NOBL\n         TR    SAVECH08,TRTPGMNM    Check last char not upcase alpha.\n         CLI   SAVECH08,X'02'       Not. probably end of table.\n         BE    ME10NOBL\n         LA    R4,10(,R4)           Count next table entry\n         LA    R5,10(,R5)           Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         B     ME10LOOP             Finished this entry, try for more.\nME10BLNK DS    0H\n         LA    R4,10(,R4)           Add length of blank entry\n         LA    R5,10(,R5)           Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME10NOBL DS    0H\n         STH   R4,ME10LENG          Store measured length of table.\n         ST    R5,ME10END           And record address of table end.\n         BAL   R9,MESBLK10          Measure more blanks after table.\n         TM    MEASFLG,X'01'        Been here already?\n         BO    ME10NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME10NOSH DS    0H\n         OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9P           Restore BAL register\n         BR    R9\nME10END  DS    F                    Store end-of-table address\nME10LENG DS    H                    Store table length\nBL10LENG DS    H                    Store length of blanks\nTO10LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMESBLK10 DS    0H                   See how many more blanks we have.\n         ST    R9,SAVER9Y           Save BAL register\n         ST    R5,SAVER5E           Save work register\n         L     R5,ME10END           Start at measured end of table.\nMESBLL10 DS    0H                   Loop\n         CLC   =C'        ',2(R5)   Is this entry a blank entry?\n         BNE   MESBLE10             No. End of perceived blanks.\n         CLC   =X'0000',0(R5)       Length is zero?\n         BNE   MESBLE10             No. End of perceived blanks.\n         CLC   =X'FFFF',0(R5)       Real table end?\n         BE    MESBLE10             Yes. Consider it end of table.\n         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?\n         BH    MESBLE10             Yes. Don't find more blanks.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\n         LA    R5,10(,R5)           Bump to next entry.\n         B     MESBLL10             Loop until no blanks or max.\nMESBLE10 DS    0H\n         L     R1,BLNKCNT           Number of blank entries\n         LTR   R1,R1\n         BZ    MESBLX10\n         BCTR  R1,0                 Really one less\nMESBLX10 DS    0H\n         STM   R2,R3,SAVER23        Save work registers\n         XR    R2,R2                Clear R2\n         XR    R3,R3                Clear R3\n         LR    R3,R1                Dump count into R2 for mult.\n         M     R2,=F'10'            Multiply by entry size\n         STH   R3,BL10LENG          Store length of blank entries\n         AH    R3,ME10LENG          Add length of non-blank entries\n         STH   R3,TO10LENG          Total length of both\n         LM    R2,R3,SAVER23        Restore work registers\n*>*----\n*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.\n*        MVC   LINE,LINE-1\n*        HEX   LINE,2,ME10LENG\n*        HEX   LINE+10,2,BL10LENG\n*        HEX   LINE+20,2,TO10LENG\n*        HEX   LINE+30,4,BLNKCNT\n*        APUT  LINE,50\n*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.\n*>*----\n         L     R5,SAVER5E           Restore work register\n         L     R9,SAVER9Y           Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------ *\nWHERSIZE DS    0H                   Point to size field to update.\n* ------------------------------------------------------------------ *\n*    This is executed after MEASUR08 or MEASUR10.                    *\n*    The idea here is to update the appropriate length field for     *\n*      the appropriate table, after having measured the size.        *\n*    This routine is also used for zeroing the table lengths.        *\n*    This routine is executed in supervisor state. Called from       *\n*      the SETTMODE routine.                                         *\n* ------------------------------------------------------------------ *\n*   ***  Note:  We unconditionally update the table lengths.  ***    *\n* ------------------------------------------------------------------ *\n         ST    R9,SAVER9Q           Save BAL register\n         ST    R2,SAVER2B           Save work registers\n         ST    R3,SAVER3C\n         TM    OFFFLAG,X'30'        Are we updating or zeroing lengths?\n         BZ    WHEREXIT             No. We have no business here.\n         L     R2,LWAADDR           Point to the Logon Work Area.\n         USING LWA,R2               Address its fields.\n*-----------------------------*\nWHERCHUZ DS    0H                   Which table are we dealing with?\n*-----------------------------*\n         TM    TIDFLAG,X'20'           E2?\n         BO    WHERE2\n         TM    TIDFLAG,X'10'           E8?\n         BO    WHERE8\n         TM    TIDFLAG,X'80'           AP?\n         BO    WHERAP\n         TM    TIDFLAG,X'40'           NS?\n         BO    WHERNS\n         B     WHEREXIT\n*-----------------------------*\nWHERE2   DS    0H                      Update E2 length\n         TM    SHBLFLG,X'01'\n         BO    WHERE2SH\n         MVC   LWATE2LN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERE2E\nWHERE2SH DS    0H\n         MVC   LWATE2LN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERE2E  DS    0H\n*-*-*-*\nWHERE2Z  DS    0H                      If zeroing, then zero E2 length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHE2NOZ1                No. Bypass this.\n         MVC   LWATE2LN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHE2NOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERE8   DS    0H                      Update E8 length\n         TM    SHBLFLG,X'01'\n         BO    WHERE8SH\n         MVC   LWATE8LN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERE8E\nWHERE8SH DS    0H\n         MVC   LWATE8LN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERE8E  DS    0H\n*-*-*-*\nWHERE8Z  DS    0H                      If zeroing, then zero E8 length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHE8NOZ1                No. Bypass this.\n         MVC   LWATE8LN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHE8NOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERAP   DS    0H                      Update AP length\n         TM    SHBLFLG,X'01'\n         BO    WHERAPSH\n         MVC   LWATAPLN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERAPE\nWHERAPSH DS    0H\n         MVC   LWATAPLN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERAPE  DS    0H\n*-*-*-*\nWHERAPZ  DS    0H                      If zeroing, then zero AP length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHAPNOZ1                No. Bypass this.\n         MVC   LWATAPLN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHAPNOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERNS   DS    0H                      Update NS length\n         TM    SHBLFLG,X'01'\n         BO    WHERNSSH\n         MVC   LWATNSLN(2),TO10LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO10LENG    Save length for message\n         B     WHERNSE\nWHERNSSH DS    0H\n         MVC   LWATNSLN(2),ME10LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME10LENG    Save length for message\nWHERNSE  DS    0H\n*-*-*-*\nWHERNSZ  DS    0H                      If zeroing, then zero NS length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHNSNOZ1                No. Bypass this.\n         MVC   LWATNSLN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHNSNOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHEREXIT DS    0H\n         L     R2,SAVER2B              Restore work registers\n         L     R3,SAVER3C\n         L     R9,SAVER9Q\n         BR    R9\n         DROP  R2\nTABLEID  DC    CL2' '\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETSTEPL DS    0H                     Routine to turn on STEPLIB flags\n         ST    R9,SAVER9R\n         ST    R2,SAVER2C                Save work register\n         L     R2,LWAADDR\n         USING LWA,R2\nSETSWTBL DS    0H                     Check which table we're seeing\n         TM    TIDFLAG,X'03'          PC OR PP table?\n         BNZ   SETSTEPN               Say nothing changed.\n         TM    TIDFLAG,X'20'          E2?\n         BO    SETSDOE2\n         TM    TIDFLAG,X'10'          E8?\n         BO    SETSDOE8\n         TM    TIDFLAG,X'80'          AP?\n         BO    SETSDOAP\n         TM    TIDFLAG,X'40'          NS?\n         BO    SETSDONS\nSETSDOE2 DS    0H\n         OI    LWAPRMLB,LWATE2ST         STEPLIB flag on for E2\n         B     SETSWTBE\nSETSDOE8 DS    0H\n         OI    LWAPRMLB,LWATE8ST         STEPLIB flag on for E8\n         B     SETSWTBE\nSETSDOAP DS    0H\n         OI    LWAPRMLB,LWATAPST         STEPLIB flag on for AP\n         B     SETSWTBE\nSETSDONS DS    0H\n         OI    LWAPRMLB,LWATNSST         STEPLIB flag on for NS\n         B     SETSWTBE\nSETSWTBE DS    0H                        Print informative message\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\"\n         MVC   LINE,LINE-1\n         MVC   LINE(71),=C'Table    marked from STEPLIB so PARMLIB UPDA-\n               TE(xx) will not overlay it.'\n         MVC   LINE+6(2),TABLEID\n         APUT  LINE,71\n         B     SETSTEPE\nSETSTEPN DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     SETSTEPE\nSETSTEPE DS    0H\n         L     R2,SAVER2C             Restore work register\n         L     R9,SAVER9R\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNOTSTEPL DS    0H                    Routine to turn off STEPLIB flags\n         ST    R9,SAVER9K\n         ST    R2,SAVER2C             Save work register\n         L     R2,LWAADDR\n         USING LWA,R2\nNOTSWTBL DS    0H                     Check which table we're seeing\n         TM    TIDFLAG,X'03'          PC OR PP table?\n         BNZ   NOTSTEPN               Say nothing changed.\n         TM    TIDFLAG,X'20'          E2?\n         BO    NOTSDOE2\n         TM    TIDFLAG,X'10'          E8?\n         BO    NOTSDOE8\n         TM    TIDFLAG,X'80'          AP?\n         BO    NOTSDOAP\n         TM    TIDFLAG,X'40'          NS?\n         BO    NOTSDONS\nNOTSDOE2 DS    0H\n         NI    LWAPRMLB,X'FF'-LWATE2ST   STEPLIB flag off for E2\n         B     NOTSWTBE\nNOTSDOE8 DS    0H\n         NI    LWAPRMLB,X'FF'-LWATE8ST   STEPLIB flag off for E8\n         B     NOTSWTBE\nNOTSDOAP DS    0H\n         NI    LWAPRMLB,X'FF'-LWATAPST   STEPLIB flag off for AP\n         B     NOTSWTBE\nNOTSDONS DS    0H\n         NI    LWAPRMLB,X'FF'-LWATNSST   STEPLIB flag off for NS\n         B     NOTSWTBE\nNOTSWTBE DS    0H                     Print informative message.\n         MVC   LINE,LINE-1            Print a blank first.\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   LINE,LINE-1\n         MVC   LINE(71),=C'Table    marked from not from STEPLIB. PARML-\n               IB UPDATE(xx) can overlay. '\n         MVC   LINE+6(2),TABLEID      Move table name into message.\n         APUT  LINE,71\n         B     NOTSTEPE\nNOTSTEPN DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NOTSTEPE\nNOTSTEPE DS    0H\n         L     R2,SAVER2C             Restore work register\n         L     R9,SAVER9K\n         BR    R9\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETLPABD DS    0H                  Get storage boundary values for LPA\n         ST    R9,SAVER9S\nGETLSTRT DS    0H\n         ST    R5,SAVER5C          Prepare a bunch of work registers\n         ST    R4,SAVER4C          Prepare a bunch of work registers\n         L     R5,X'10'            Point to CVT.\n         USING CVT,R5              Tell Assembler.\n         L     R4,CVTSMEXT         Point to CVT Extension.\n         USING CVTVSTGX,R4         Tell Assembler.\n         MVC   SAVMLPAS,CVTMLPAS   MLPA start\n         MVC   SAVMLPAE,CVTMLPAE   MLPA end\n         MVC   SAVFLPAS,CVTFLPAS   FLPA start\n         MVC   SAVFLPAE,CVTFLPAE   FLPA end\n         MVC   SAVPLPAS,CVTPLPAS   PLPA start\n         MVC   SAVPLPAE,CVTPLPAE   PLPA end\n         MVC   SAVEMLPS,CVTEMLPS   E-MLPA start\n         MVC   SAVEMLPE,CVTEMLPE   E-MLPA end\n         MVC   SAVEFLPS,CVTEFLPS   E-FLPA start\n         MVC   SAVEFLPE,CVTEFLPE   E-FLPA end\n         MVC   SAVEPLPS,CVTEPLPS   E-PLPA start\n         MVC   SAVEPLPE,CVTEPLPE   E-PLPA end\n         L     R5,SAVER5C          Restore the work registers\n         L     R4,SAVER4C          Restore the work registers\n         L     R9,SAVER9S\n         DROP  R5,R4\n         BR    R9                  Return\n*                                  Constants needed here.\nSAVMLPAS DC    A(0)\nSAVMLPAE DC    A(0)\nSAVFLPAS DC    A(0)\nSAVFLPAE DC    A(0)\nSAVPLPAS DC    A(0)\nSAVPLPAE DC    A(0)\nSAVEMLPS DC    A(0)\nSAVEMLPE DC    A(0)\nSAVEFLPS DC    A(0)\nSAVEFLPE DC    A(0)\nSAVEPLPS DC    A(0)\nSAVEPLPE DC    A(0)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETLPRNT DS    0H         Routine to Print LPA Range - action code X\n         ST    R9,SAVER9T\n         TM    LPADFLG,X'01'         Code wasn't X. Don't print.\n         BZ    GETLPRTE              Just restore R9 and go on.\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),=C' --- LPA RANGE DISPLAY ---  '\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'MLPA'\n         HEX   LINE+10,4,SAVMLPAS    MLPA range\n         HEX   LINE+20,4,SAVMLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'FLPA'\n         HEX   LINE+10,4,SAVFLPAS    FLPA range\n         HEX   LINE+20,4,SAVFLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'PLPA'      PLPA range\n         HEX   LINE+10,4,SAVPLPAS\n         HEX   LINE+20,4,SAVPLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-MLPA'    E-MLPA range\n         HEX   LINE+10,4,SAVEMLPS\n         HEX   LINE+20,4,SAVEMLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-FLPA'    E-FLPA range\n         HEX   LINE+10,4,SAVEFLPS\n         HEX   LINE+20,4,SAVEFLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-PLPA'    E-PLPA range\n         HEX   LINE+10,4,SAVEPLPS\n         HEX   LINE+20,4,SAVEPLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28     Print row of dashes at the bottom\n         APUT  LINE,35\nGETLPRTE DS    0H\n         L     R9,SAVER9T\n         BR    R9\nDASHES28 DC    28C'-'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTABLHD DS    0H\n         ST    R9,SAVER9U\n*                                 Print out table header\n         STM   R14,R1,SAVE1401    Now save registers 14 thru 1.\n         L     R1,TABLADDR        Load table start address.\n         MVC   DISPHDR(16),0(R1)  Move header info to display area.\n         ST    R1,HDRADDR         Store header address for alter\n         MVC   LINE,LINE-1        Clear line\n         MVC   LINE(15),=C'Table Header:  '  Move in title.\n         MVC   LINE+15(16),DISPHDR           Move in title info.\n         APUT  LINE,35\n         MVC   LINE,LINE-1        Clear line for next time\n         LM    R14,R1,SAVE1401    Restore  registers 14 thru 1.\n*-*\n         L     R9,SAVER9U\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**   When this routine is invoked, TABLADDR points to the start     **\n**    of the real table.                                            **\n** ---------------------------------------------------------------- **\nTESTLPA  DS    0H             Test if an address is in any LPA range\n         ST    R9,SAVER9W\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+20,4,TABLADDR     Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\nTESLSTRT DS    0H\n         CLC   TABLADDR,SAVMLPAS      Smaller than MLPA start?\n         BL    TESLTST1\n         CLC   TABLADDR,SAVMLPAE      Larger than MLPA end?\n         BH    TESLTST1\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST1 DS    0H\n         CLC   TABLADDR,SAVFLPAS      Smaller than FLPA start?\n         BL    TESLTST2\n         CLC   TABLADDR,SAVFLPAE      Larger than FLPA end?\n         BH    TESLTST2\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST2 DS    0H\n         CLC   TABLADDR,SAVPLPAS      Smaller than PLPA start?\n         BL    TESLTST3\n         CLC   TABLADDR,SAVPLPAE      Larger than PLPA end?\n         BH    TESLTST3\n         OI    LPAFLAG,X'01'\n         B     TESLMSG                In between, flag it and exit.\nTESLTST3 DS    0H\n         CLC   TABLADDR,SAVEMLPS      Smaller than E-MLPA start?\n         BL    TESLTST4\n         CLC   TABLADDR,SAVEMLPE      Larger than E-MLPA end?\n         BH    TESLTST4\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST4 DS    0H\n         CLC   TABLADDR,SAVEFLPS      Smaller than E-FLPA start?\n         BL    TESLTST5\n         CLC   TABLADDR,SAVEFLPE      Larger than E-FLPA end?\n         BH    TESLTST5\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST5 DS    0H\n         CLC   TABLADDR,SAVEPLPS      Smaller than E-PLPA start?\n         BL    TESLMSG\n         CLC   TABLADDR,SAVEPLPE      Larger than E-PLPA end?\n         BH    TESLMSG\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLMSG  DS    0H\n*-*-*->>                          Message the result of the LPA test.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         TM    LPAFLAG,X'01'      Is the address within LPA?\n         BZ    TESLMSGA           No. Say not.\n         MVC   LINE(40),=C'Table address lies within an LPA region.'\n         B     TESLMSGP           Go send the message.\nTESLMSGA DS    0H\n         MVC   LINE(42),=C'Table address is not within an LPA region.'\nTESLMSGP DS    0H                 Send the message.\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\nTESLEND  DS    0H\n         L     R9,SAVER9W\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGEDL DS    0H                     Say table was in LPALIB so that\n*                                       therefore nothing was changed.\n         ST    R9,SAVER9V\n         TM    LPAFLAG,X'01'          Table was loaded in the LPALIB\n*                                      storage range. Can't change it.\n         BZ    CHANGEEN\n         APUT  MESSAG2E,L'MESSAG2E    Say that table was from LPALIB.\n         APUT  MESSAG2D,L'MESSAG2D    Say that nothing was changed.\nCHANGEEN DS    0H\n         L     R9,SAVER9V\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nENTRYDSP DS    0H\n         ST    R9,SAVER9X\n         TM    TIDFLAG,X'03'      PC or PP table?\n         BNZ   ENTRYEXI           Yes. No display here.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         L     R1,NTRYCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Non-blank table entries:'\n         MVC   LINE+35(25),=C'(these are the ones used)'\n         APUT  LINE,65\n         MVC   LINE,LINE-1\n         L     R1,BLNKCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Perceived blank entries:'\n         MVC   LINE+35(25),=C'(potential for expansion)'\n         APUT  LINE,65\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nENTRYEXI DS    0H\n         L     R9,SAVER9X\n         BR    R9\nENTRYDEN DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**   Here are the rest of the constants for the program.            **\n** ---------------------------------------------------------------- **\nBLKSTRNG DC    XL10'00004040404040404040'\nENDSTRNG DC    XL10'FFFF4040404040404040'\nZEROES8  DC    X'0000000000000000'\nMASK10   DC    XL10'40202020202020202120'\n         DC    C' '\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'TSUB Command - Display/Change USERID Auth Table Entry -\n               - xxxxxxxx'\nMESSAGEU DC    C'---- -------   ------- ------ ------ ---- ----- ----- -\n                 --------'\nMESSAGEC DC    C'  **--------   AFTER MAKING CHANGES   -------**'\nMESSAGED DC    C'  **--- STATE BEFORE MAKING TABLE CHANGES ---**'\nMESSAG1A DC    C'Table XX pointed to by the LWA has length available. H+\n               ex xxxx '\nMESSAG1B DC    C'Table XX pointed to by the LWA has no lengths. Blanks +\n               will delimit.'\nMESSAG1C DC    C'Table XX pointed to by the LWA came from an APF STEPLI+\n               B.'\nMESSAG1D DC    C'Table XX pointed to by the LWA did not come from an AP+\n               F STEPLIB.'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2E DC    C'Table is in LPALIB, and we will not attempt to alter i+\n               t.'\nMESSAG3A DC    C'Slot      in XX table has been changed to         .'\nMESSAG3B DC    C'Slot      in XX table has been blanked.            '\nMESSAG3C DC    C'                                                      +\n                  '\nMESSAG3D DC    C'Last 8 bytes of table header altered to \" PARMLIB\". '\nMESSAG3E DC    C'LWA size for table    has been changed from Hex xxxx t+\n               o Hex xxxx.'\nMESSAG3F DC    C'LWA size for table    is now Hex xxxx. '\nMESSA11A DC    C'  Supply a table code TT, followed by an action code A-\n               .'\nMESSA11B DC    C'Supply a program name, as the next parameter.   '\nMESSA11C DC    C'Valid table  codes are:  E2, E8, AP, NS, PC, PP. '\nMESSA11D DC    C'Valid action codes are:  R - replace, B - blank, D - d-\n               isplay,'\nMESSA11Z DC    C'  H - header, L - supply full table length, Z - zero t-\n               able length,'\nMESSA11Y DC    C'  S - mark table from STEPLIB, P - mark table from PAR-\n               MLIB,'\nMESSA11X DC    C'  X - display LPA storage ranges, M - supply minimum t-\n               able length.'\nMESSA11E DC    C'Please supply a program name.  '\nMESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-\n               on code.'\nMESSA11G DC   C'Please supply slot number to change, and program name.'\nMESSA11I DC    C'If D (display) is followed by a slot number, only that-\n                slot is shown.'\nMESSA11J DC    C'R (replace) requires a slot number, followed by a prog-\n               ram name.'\nMESSA11K DC    C'If D is not followed by a number, then the entire tabl-\n               e is displayed.'\nMESSA11L DC    C'  Instructions to use this program:                  '\nMESSA11M DC    C'  ------------ -- --- ---- -------                   '\nMESSA11N DC    C'B (blank) blanks the slot number given. Higher slots a-\n               re invalidated.'\nMESSA11O DC    C'D does not need APF authorization. All other codes req-\n               uire it.'\nMESSA11P DC    C'TSUB TTA nnn pgmname (nnn optional for D, both require-\n               d for R)'\nMESSA11Q DC    C'Codes: H,L,M,Z,P,S,X do not require extra parameters.'\nMESSA12Q DC    C'Please supply slot number to blank out. BE CAREFUL !'\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\nMESSDIAG DC    C'                                            '\nMESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '\nMESSAGEN DC    C'Supplied character        was not numeric. '\n         SPACE 3\n         LTORG\n         SPACE 3\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER23  DS    2F                  Save pair of regs R2, R3\nSAVER1A  DS    F                   Save R1 here\nSAVER1B  DS    F                   Save R1 here\nSAVER1C  DS    F                   Save R1 here\nSAVER2A  DS    F                   Save R2 here\nSAVER2B  DS    F                   Save R2 here\nSAVER2C  DS    F                   Save R2 here\nSAVER2D  DS    F                   Save R2 here\nSAVER2E  DS    F                   Save R2 here\nSAVER2F  DS    F                   Save R2 here\nSAVER2G  DS    F                   Save R2 here\nSAVER3A  DS    F                   Save R3 here\nSAVER3B  DS    F                   Save R3 here\nSAVER3C  DS    F                   Save R3 here\nSAVER4A  DS    F                   Save R4 here\nSAVER4B  DS    F                   Save R4 here\nSAVER4C  DS    F                   Save R4 here\nSAVER5A  DS    F                   Save R5 here\nSAVER5B  DS    F                   Save R5 here\nSAVER5C  DS    F                   Save R5 here\nSAVER5D  DS    F                   Save R5 here\nSAVER5E  DS    F                   Save R5 here\nSAVER5F  DS    F                   Save R5 here\nSAVER8A  DS    F                   Save R8 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nSAVLSLOT DS    F                   Save place where Key 0 will change\nSLOTBIN  DS    F                   Fullword binary value of slot number\nSLOTNOW  DS    F                   Slot number being searched\nDISPREG  DS    F                   DISPLAY\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nCHARSIZE DS    F\nOURSLOT  DS    F                   Address of current slot searched\nFOUNSLOT DS    F\nTABLEND  DS    F                   Estimated or real end addr of table\n* --- >\nTABLSTRT DS    F                   Start address of table\nTABLADDR DS    F                   Store address of current table\nTABLENUM DS    F                   Number of entries in table\nTABLESIZ DS    F                   Size of a table entry\n* --- >\nBLNKCNT  DS    F\nNTRYCNT  DS    F\n* --- >\nOFFSETSV DS    F\nWORKA    DC    D'0'                Work area for CVB\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nCODEPLAC DS    CL2                 Store entered table code here\nPAD01    DS    CL4                 Filler\nSAVECHAR DS    X\nSAVECH08 DS    X\nMEASFLG  DS    X\nSHBLFLG  DS    X\nOFFFLAG  DS    X                   Are we blanking the last entry?\nOLDFLAG  DS    X                   Old system detected if X'01'\nTIDFLAG  DS    X                   Which table are we handling.\nLPAFLAG  DS    X                   Is the table address in the LPA?\nLPADFLG  DS    X                   Do LPA range display.\nPLATFLG  DS    X                   FCVE or PPVE exist.\nHAVLFLG  DS    X                   Have length of table available\nNSCHFLG  DS    X                   Dealing the 10-byte NS table?\nLWAPFLG  DS    X                   LWAPRMLB flag copied into program\n*              X'80'               LWATAPST TAP came from STEPLIB\n*              X'40'               LWATNSST TNS came from STEPLIB\n*              X'20'               LWATE2ST TE2 came from STEPLIB\n*              X'10'               LWATE8ST TE8 came from STEPLIB\nLWAMFLG  DS    X                   Which tables have a size in the LWA.\n*              X'80'               AP has a size in the LWA.\n*              X'40'               NS has a size in the LWA.\n*              X'20'               E2 has a size in the LWA.\n*              X'10'               E8 has a size in the LWA.\nFLAGZ    DS    X\n*              X'01'               Found a blank entry. End table srch.\n*              X'02'               Parm number is past the end of table\n*              X'04'               Table lengths have been supplied.\nPAD02    DS    CL4                 Filler\nFSTNAME  DC    CL8' '              Entered program name for \"Replace\"\nFSTCOUNT DS    F                   Number of characters in FSTNAME\nFSTCHALF DC    H'0'\nPAD03    DS    CL4                 Filler\nTABENNUM DC    CL10' '\nPAD03A   DS    CL4                 Filler\nFSTFIELD DS    0CL8\nFSTNUME  DC    CL5' '\nFSTNUPAD DC    CL3' '\nFSTNOUNT DS    F                   Number of characters in FSTNAME\nFSTNHALF DC    H'0'\nPAD04    DS    CL4                 Filler\nSLOTSAVE DS    CL10\nPAD05    DS    CL4                 Filler\nSNDNAME  DC    CL8' '\nSNDCOUNT DS    F                   Number of characters in SNDNAME\nSNDCHALF DC    H'0'\nTABCODE  DC    CL8' '              Original OUTLIM character\n         DS    CL7                 PADDING\nDISPHDR  DS    CL16                Table header display area\n         DS    CL1\nHDRADDR  DS    F                   Address of table header\nCMDBCOPY DS    CL252\n         DS    CL128               PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\nLINAB    DS    C                   LINE-1\nLINA     DS    CL137               Output line area\nLINAT    EQU   LINA+7              Indented line\nTRTPGMNM DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'40020202020202020202020202020202'\n         DC    X'02020202020202020202025B02020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202027B7C020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         SPACE\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         IKJEFLWA\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IGC0024B": {"ttr": 8455, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "         TITLE 'SUPERVISOR CALL 242 (ACQUIRE/RELINQUISH AUTHORIZATION)'\nIGC0024B CSECT\n         SPACE 2\n*---------------------------------------------------------------------*\n*                                                                     *\n* INPUT PARAMTERS                                                     *\n*                                                                     *\n* R1 - MUST CONTAIN 'AUTH' TO TURN AUTHORIZATION ON                   *\n* R1 - MUST CONTAIN 'NONE' TO TURN AUTHORIZATION OFF                  *\n*                                                                     *\n*      TO CALL THE SVC --                                             *\n*        L     R1,=C'AUTH'                                            *\n*        L     R1,=C'NONE'       FOLLOWED BY                          *\n*        SVC   242                                                    *\n*                                                                     *\n*    YOU CAN PUT EXTRA SECURITY IN HERE AS YOU WISH........           *\n*                                                                     *\n*---------------------------------------------------------------------*\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR8       EQU   8\nR12      EQU   12\nR14      EQU   14\n         SPACE 2\n         BALR  R12,0              LOAD R12\n         USING *,R12               & ESTABLISH AS BASE.\n         B     LOADJSCB\n         DC    C'IGC0024B'\n         DC    C' '\n         DC    C'&SYSDATE'\n         DC    C' '\n         DC    C'&SYSTIME'\nFF       DC    X'FFFFFFFF'        FOR FLIPPING BITS.\n         DC    C' '\nLOADJSCB DS    0H\n         L     R2,180(,R4)        LOAD R2 WITH ADDRESS OF JSCB.\n         L     R8,FF              PREPARE FOR BIT FLIPPING.\n         XR    R1,R8              FLIP BITS.\n         C     R1,CODEON          WAS CODE PASSED TO TURN ON?\n         BE    AUTHON             YES. DO AUTHORIZATION.\n         C     R1,CODEOFF         WAS CODE PASSED TO TURN OFF?\n         BE    AUTHOFF            YES. TURN OFF AUTHORIZATION.\n         B     EXIT               NEITHER. NO ACTION.\nAUTHON   DS    0H\n         OI    236(R2),X'01'      SET AUTHORIZATION BIT.\n         B     EXIT               GO EXIT.\n         SPACE 1\nAUTHOFF  DS    0H\n         NI    236(R2),X'FE'      RESET AUTHORIZATION BIT.\n         SPACE 1\nEXIT     DS    0H\n         BR    R14                -EXIT.\n         SPACE 1\nCODEON   DC    X'3E1B1C37'        AUTH XORED\nCODEOFF  DC    X'2A292A3A'        NONE XORED\n         SPACE 1\n         END  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LOADLIB": {"ttr": 8457, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "LSLT": {"ttr": 10762, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "LSLT     TITLE 'LSLT - FILL IN THE LAST SLOT OF INCORE TSO AUTH TABLES'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized.                          *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized                       *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                                                                     *\n*    Description:   Fill the \"LAST SLOT\" of the already created       *\n*                   TSO/E program list tables in storage, with one    *\n*                   new program name.                                 *\n*                                                                     *\n*       Function:   To add one new program name to the global incore  *\n*                   TSO auth tables, IKJEFTE2, IKJEFTE8, or           *\n*                   IKJEFTAP, IKJEFTNS, or even to the PLATCMD or     *\n*                   PLATPGM lists, if they exist.  This is done to    *\n*                   the last entry of each table, which had been      *\n*                   left empty by the last IPL, SET IKJTSO=xx, or     *\n*                   PARMLIB UPDATE(xx) operation.  That is how IBM    *\n*                   has designed things.  They leave one extra blank  *\n*                   entry at the end, and this is what we are taking  *\n*                   advantage of.                                     *\n*                                                                     *\n*         Syntax:   LSLT TTA pgmname                                  *\n*                                                                     *\n*                   Where TT is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD                           *\n*                   E8 - IKJEFTE8 = AUTHPGM                           *\n*                   AP - IKJEFTAP = AUTHTSF                           *\n*                   NS - IKJEFTNS = NOTBKGND                          *\n*                   PC - FCVE     = PLATCMD                           *\n*                   PP - PPVE     = PLATPGM                           *\n*                                                                     *\n*                   If the action code is B (blank the last           *\n*                   entry), then no program name is required.         *\n*                                                                     *\n*                   If the action code is D (display the last         *\n*                   entry), then no program name is required.         *\n*                                                                     *\n*                   If the action code is A (add a new program        *\n*                   name) then one program name is required.          *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to, and therefore no addition *\n*                   of names can be made.  The condition is reported. *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2007/07/09 - 1.0 - Initial version - Tested with TSO/E Version   *\n*                       3.                                            *\n*                                                                     *\n*    2007/07/10 - 1.0 - Removed REPLACE (R) action code for now.      *\n*                                                                     *\n*    2007/07/15 - 1.0 - Changed DISPLAY (D) action code from X'08'    *\n*                       to X'04'.  The Replace function has been      *\n*                       completely removed from the specs of this     *\n*                       program, so it makes sense to call DISPLAY    *\n*                       X'04' instead of X'08'.                       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nLSLT     CSECT\nLSLT     AMODE 31\nLSLT     RMODE 24\n         USING *,R15                                                  *  01493\n         B     BEGINN                   Eyecatcher\n         DC    CL15'LSLT VER 1.0 -'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         DROP  R15\n         USING LSLT,R12,R11,R10\n         STM   R14,R12,12(R13)\n         LR    R12,R15                  Set up base registers.\n         ST    R1,SAVEPARM              Save CPPL pointer\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)\n         LA    R10,1(,R10)\n         LA    R1,SAVEAREA          Point to new save area               01508\n         ST    R1,8(,R13)           Forward save area chain pointer      01509\n         ST    R13,4(,R1)           Backward save area chain pointer     01510\n         LR    R13,R1               New save area address                01511\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'                                                    01504\n* -----------------------\nINITCON  DS    0H                   Initialize constants\n         MVI   OFFFLAG,X'00'\n         MVI   PLATFLG,X'00'\n         MVI   NSCHFLG,X'00'\n         MVI   LINEB,X'40'\n         MVC   CODEPLAC(2),BLANKS\n* -----------------------\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         LA    R6,0\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n*        B     CONT0               Bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    CONT0               Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\n         DROP  R2\nCONT0    DS    0H                  Get starting addresses for tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'14'(,R2)       Point to CTLT control block\n         ST    R2,SAVECTLT         Save CTLT address for later use\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'34'(,R2)       Point to PLATCMD pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOFCVE              No. Say so.\n         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.\n         OI    PLATFLG,X'01'       Indicate that FCVE exists.\nTRYPPVE  DS    0H\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'40'(,R2)       Point to PLATPGM pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOPPVE              No. Say so.\n         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.\n         OI    PLATFLG,X'02'       Indicate that PPVE exists.\nTRYPPVEE DS    0H\n* ------\n*    There doesn't seem to be a way to tell from an old INMXPARM\n*    control block itself, that it is the old version.  So we use\n*    the position of the active PARMLIB member name in the TPVT.\n* ------\n         L     R2,SAVETPVT         Load TPVT address back.\n         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?\n         BNE   NEWSYSTM            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\nNEWSYSTM DS    0H\n* ------\n*    We start scanning for PARMs here.\n* ------\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n         AR    R1,R3               Point ...\n         LA    R1,4(,R1)           ... to char.\n         LA    R6,3                Load register for BCT loop.\n         ST    R1,CHARSTRT         Store address away for safekeeping\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of function name.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R7),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         LA    R7,1(,R7)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R6,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8           Save\n         ST    R6,SAVER6             the\n         ST    R1,SAVER1A              registers\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers\n         CLI   TABCODE+2,C'A'      Add an entry into the last slot\n         BE    SEEIF0A1\n         CLI   TABCODE+2,C'B'      Blank the last slot\n         BE    SEEIF0A2\n         CLI   TABCODE+2,C'D'      Display contents of last slot\n         BE    SEEIF0A3\n         B     SEEIF000\nSEEIF0A1 DS    0H\n         OI    OFFFLAG,X'01'       Add entry into last slot\n         B     SEEIF001\nSEEIF0A2 DS    0H\n         OI    OFFFLAG,X'02'       Blank entry in last slot\n         B     SEEIF001\nSEEIF0A3 DS    0H\n         OI    OFFFLAG,X'04'       Display the last slot contents\n         B     SEEIF001\nSEEIF000 DS    0H                  Which table to change\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB\n         MVC   LINE(3),TABCODE\n         HEX   LINE+6,1,OFFFLAG\n         MVC   LINE+13(33),=C'Command supplied + Function code '\n         APUT  LINE,46\n* --- >\n         BAL   R9,ERRORCOD\n         B     EOJ4\nSEEIF001 DS    0H                  Which table to change\n         MVC   CODEPLAC(2),TABCODE\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB\n         MVC   LINE(3),TABCODE\n         HEX   LINE+6,1,OFFFLAG\n         MVC   LINE+13(33),=C'Command supplied + Function code '\n         APUT  LINE,46\n* --- >                            Handle each table separately.\n         CLC   TABCODE(2),=C'E2'   Change IKJEFTE2?\n         BE    E2CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'E8'   Change IKJEFTE8?\n         BE    E8CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'AP'   Change IKJEFTAP?\n         BE    APCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PC'   Change PLATCMD?\n         BE    PCCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PP'   Change PLATPGM?\n         BE    PPCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'NS'   Change IKJEFTNS?\n         BE    NSCHANGE            Yes. Branch.\n         BAL   R9,ERRORCOD\n         B     EOJ4                Invalid code entered.\nEOJ      DS    0H                                                        04216\n         L     R13,4(,R13)                                               04214\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4                            04215\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8                            04215\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJC\nE2CHANGE DS    0H                 Handle the E2 table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'8'(,R4)       POINT TO E2 TABLE\n         L     R4,0(,R4)\n         L     R3,X'C'(,R2)       LOAD SIZE OF E2 TABLE\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOE2               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST E2 TABLE\n         XR    R5,R5\n         LH    R5,X'12'(,R2)      LOAD SIZE OF E2 ENTRY\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E2CHANGX           No. We must do a real change.\n         BAL   R9,DISPLAST        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nE2CHANGX DS    0H\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nE8CHANGE DS    0H                 Handle the E8 table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'14'(,R4)      POINT TO E8 TABLE\n         L     R4,0(,R4)\n         L     R3,X'18'(,R2)      Size of E8 table\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOE8               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST E8 TABLE\n         XR    R5,R5\n         LH    R5,X'1E'(,R2)      LOAD SIZE OF E8 ENTRY\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E8CHANGX           No. We must do a real change.\n         BAL   R9,DISPLAST        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nE8CHANGX DS    0H\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nAPCHANGE DS    0H                 Handle the AP table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         LR    R4,R2\n         LA    R4,X'2C'(,R4)      POINT TO AP TABLE\n         L     R4,0(,R4)\n         L     R3,X'30'(,R2)      Size of AP table\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NOAP               No. Say so and get out.\n         AR    R4,R3              POINT JUST PAST AP TABLE\n         XR    R5,R5\n         LH    R5,X'36'(,R2)      LOAD SIZE OF AP ENTRY\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    APCHANGX           No. We must do a real change.\n         BAL   R9,DISPLAST        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nAPCHANGX DS    0H\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHANGE DS    0H                 Handle the PC table\n         TM    PLATFLG,X'01'\n         BZ    PCCHAERR\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVEFCVE        Get the PC table address\n         LR    R4,R2              Save it off\n* -- >                            Do Display\n         MVC   LINE,LINE-1\n         ST    R4,DISPREG\n         HEX   LINE+13,4,DISPREG\n         MVC   LINE(8),=C'SAVEFCVE'\n         APUT  LINE,30\n* -- >\n         L     R3,8(,R4)\n         AR    R4,R3              POINT JUST PAST PC TABLE\n         LA    R5,8\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PCCHANGX           No. We must do a real change.\n         BAL   R9,DISPLAST        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPCCHANGX DS    0H\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHAERR DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PC command not valid if no PC table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPCCHAEND DS    0H\n         B     EOJ0\nPPCHANGE DS    0H                 Handle the PP table\n         TM    PLATFLG,X'02'\n         BZ    PPCHAERR\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVEPPVE        Get the PP table address\n         LR    R4,R2              Save it off\n* -- >                            Do Display\n         MVC   LINE,LINE-1\n         ST    R4,DISPREG\n         HEX   LINE+13,4,DISPREG\n         MVC   LINE(8),=C'SAVEPPVE'\n         APUT  LINE,30\n* -- >\n         L     R3,8(,R4)\n         AR    R4,R3              POINT JUST PAST PP TABLE\n         LA    R5,8\n         SR    R4,R5              POINT TO LAST SLOT\n         ST    R4,SAVLSLOT\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PPCHANGX           No. We must do a real change.\n         BAL   R9,DISPLAST        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPPCHANGX DS    0H\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPPCHAERR DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PP command not valid if no PP table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPPCHAEND DS    0H\n         B     EOJ0\nNSCHANGE DS    0H                 Handle the NS table\n         BAL   R9,ADJNEXTP\n         BAL   R9,NAMEPARM\n         L     R2,SAVECTLT\n         OI    NSCHFLG,X'01'      Show SETTMODE we're doing NS\n         LR    R4,R2              Save location of CTLT\n         LA    R4,X'20'(,R4)      Point to NS table address\n         L     R4,0(,R4)          Point to NS table\n         L     R3,X'24'(,R2)      Load size of NS table\n         LTR   R3,R3              Is there any Parmlib-supplied one?\n         BZ    NONS               No. Say so and get out.\n         AR    R4,R3              Point just past NS table\n         XR    R5,R5              Clear register\n         LH    R5,X'2A'(,R2)      Load size of NS entry\n         SR    R4,R5              Point to Last Slot\n         ST    R4,SAVLSLOT        Save location of last slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    NSCHANGX           No. We must do a real change.\n         BAL   R9,DISPLAST        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nNSCHANGX DS    0H\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nNOE2     DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E2'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOE8     DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E8'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOAP     DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'AP'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNONS     DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'NS'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\nNOFCVE   DS    0H\n         APUT  =C'No FCVE found',13\n         B     TRYPPVE\nNOPPVE   DS    0H\n         APUT  =C'No PPVE found',13\n         B     TRYPPVEE\n         B     EOJ0\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'\nSAVETPVT DC    F'0'\nSAVECTLT DC    F'0'\nSAVEFCVE DC    F'0'\nSAVEPPVE DC    F'0'\nSAVEUPT  DC    F'0'\nSAVEECT  DC    F'0'\nSAVEPSCB DC    F'0'\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'\nFULLFOUR DC    F'4'\nFULLEIGT DC    F'8'\nFULLTWLV DC    F'12'\nSAVE1401 DC    5F'0'                  More for safety\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\nMOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED\nMOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED\n** ---------------------------------------------------------------- **\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n*            S U B R O U T I N E S                *\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNAMES DS    0H\n         ST    R9,SAVER9B\nGETNAMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNAMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         S     R5,=F'1'            Subtract one from end count\n         B     GETNAMST            And loop to find first non-blank.\nGETNAMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R6,8                BCT initial quantity - 8 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R7,R1               Initialize pointer\n         LA    R7,0(,R7)           to first character of program name.\nGETNAMLU DS    0H                  Loop to get entire name\n         CLI   0(R7),X'40'         First blank?\n         BE    GETNAMGT            Yes, got whole name.\n         CR    R8,R5               End of command buffer?\n         BNL   GETNAMGT            Yes. Got all we can get.\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R7,1(,R7)           Bump where we are.\n         BCT   R6,GETNAMLU         Loop back.\nGETNAMGT DS    0H\n         ST    R8,SAVER8\n         ST    R8,FSTCOUNT\n         MVC   FSTCHALF(2),FSTCOUNT+2\n         MVC   LINE,LINE-1\n         HEX   LINE,4,SAVER8\n         MVC   LINE+13(17),=C'Length of command'\n         APUT  LINE,30\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTNAME(8),BLANKS\n         EX    R8,MOVFSTN\n         OC    FSTNAME(8),BLANKS\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTNAME\n         MVC   LINE+13(17),=C'New program name '\n         APUT  LINE,30\n         TM    OFFFLAG,X'02'\n         BZ    GETNAMEN\n* - >\n*        TM    OFFFLAG,X'02'\n*        BO    GETNOERR\n*        CLC   FSTNAME,BLANKS\n*        BNE   GETNOERR\n*        BAL   R9,MISSPGM1\n*        B     EOJ4\nGETNOERR DS    0H\n* - >\nGETNAMEN DS    0H\n         L     R9,SAVER9B\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGED  DS    0H                     The \"value was changed\" message.\n         ST    R9,SAVER9C\n         TM    OFFFLAG,X'01'\n         BO    CHANGEDA\n         TM    OFFFLAG,X'02'\n         BO    CHANGEDB\n         TM    OFFFLAG,X'04'\n         BO    CHANGEDD\nCHANGEDA DS    0H\n         MVC   MESSAG3A+13(2),CODEPLAC\n         MVC   MESSAG3A+42(8),FSTNAME\n         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDB DS    0H\n         MVC   MESSAG3B+13(2),CODEPLAC\n         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDD DS    0H\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Display of Last Slot contents.'\n         APUT  LINE,30\nCHANGEND DS    0H\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNAMEPARM DS    0H\n         ST    R9,SAVER9D\n         TM    OFFFLAG,X'06'          Are we blanking or displaying?\n         BNZ   NAMEPEND               Yes. Don't need a name parameter\n         L     R8,SAVER8              Get number of characters used\n         CR    R8,R5                  More than what's left?\n         BNL   NAMEBAD1               Yes. Error.\n         C     R5,=F'3'               Is end bigger than 3?\n         BNH   NAMEBAD1               No. Error.\nNAMEGOOD DS    0H\n         S     R5,=F'3'               Subtract 3 from number till end.\n         BAL   R9,GETNAMES            Get the name of pgm to shove in.\n         B     NAMEPEND\nNAMEBAD1 DS    0H\n         BAL   R9,MISSPGM1\n         B     EOJ4\nNAMEPEND DS    0H\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADJNEXTP DS    0H\n         ST    R9,SAVER9E\n         MVC   CHARSTRT,CHARCONT\n         L     R1,CHARSTRT\nSEEIFENX DS    0H\n         CLI   0(R1),X'40'\n         BE    SEEIFENZ\n         LA    R1,1(,R1)\n         ST    R1,CHARSTRT\n         B     SEEIFENX\nSEEIFENZ DS    0H\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9F\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9F\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETTMODE DS    0H\n         ST    R9,SAVER9G\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* -- >\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n* -\n         TM    NSCHFLG,X'01'\n         BO    TENSLOT\nEIGHSLOT DS    0H\n         L     R3,SAVLSLOT\n         TM    OFFFLAG,X'01'\n         BZ    BLANKIT\n         MVC   0(8,R3),FSTNAME\n         B     ENDKZ\nBLANKIT  DS    0H\n         TM    OFFFLAG,X'02'\n         BZ    ENDKZ\n         MVC   0(8,R3),BLANKS\n         B     ENDKZ\nTENSLOT  DS    0H\n         L     R3,SAVLSLOT\n         TM    OFFFLAG,X'01'\n         BZ    BLANKTEN\n         MVC   0(2,R3),FSTCHALF\n         MVC   2(8,R3),FSTNAME\n         B     ENDKZ\nBLANKTEN DS    0H\n         TM    OFFFLAG,X'02'\n         BZ    ENDKZ\n         MVC   0(2,R3),=X'FFFF'\n         MVC   2(8,R3),BLANKS\n         B     ENDKZ\nENDKZ    DS    0H\n* -\nNZ       MODESET KEY=NZERO\n* -- >      Back to ordinary life ----\n         L     R9,SAVER9G\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nERRORCOD DS    0H\n         ST    R9,SAVER9H\n         MVC   LINE,LINE-1\n         APUT  MESSA11A,L'MESSA11A\n         APUT  MESSA11C,L'MESSA11C\n         APUT  MESSA11D,L'MESSA11D\n         APUT  MESSA11F,L'MESSA11F\n         L     R9,SAVER9H\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM1 DS    0H\n         ST    R9,SAVER9I\n         MVC   LINE,LINE-1\n         APUT  MESSA11G,L'MESSA11G\n         L     R9,SAVER9I\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM2 DS    0H\n         ST    R9,SAVER9J\n         MVC   LINE,LINE-1\n         APUT  MESSA11E,L'MESSA11E\n         L     R9,SAVER9J\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPLAST DS    0H\n         ST    R9,SAVER9K\n         TM    NSCHFLG,X'01'\n         BO    TENDISP\nEIGHDISP DS    0H\n         L     R3,SAVLSLOT\n         MVC   LINE,LINE-1\n         MVC   LINE(21),=C'Last Slot Contents - '\n         MVC   LINE+21(13),=C'Table Name:  '\n         MVC   LINE+34(2),CODEPLAC\n         MVC   LINE+44(8),0(R3)\n         CLC   LINE+44(8),BLANKS\n         BNE   EIGHNOBL\n         MVC   LINE+44(8),=C'*empty* '\nEIGHNOBL DS    0H\n         APUT  LINE,52\n         B     DISPLEND\nTENDISP  DS    0H\n         L     R3,SAVLSLOT\n         MVC   LINE,LINE-1\n         MVC   LINE(21),=C'Last Slot Contents - '\n         MVC   LINE+21(13),=C'Table Name:  '\n         MVC   LINE+34(2),CODEPLAC\n         HEX   LINE+38,2,0(R3)\n         MVC   LINE+44(8),2(R3)\n         CLC   LINE+44(8),BLANKS\n         BNE   TENNOBL\n         MVC   LINE+44(8),=C'*empty* '\nTENNOBL  DS    0H\n         APUT  LINE,52\n         B     DISPLEND\nDISPLEND DS    0H\n         L     R9,SAVER9K\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'LSLT Command - Add or Change Last Auth Table Entry  '\nMESSAGEU DC    C'---- -------   --- -- ------ ---- ---- ----- -----  '\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG3A DC    C'Last slot in XX table has been changed to         .'\nMESSAG3B DC    C'Last slot in XX table has been blanked.            '\nMESSAG3C DC    C'                                                      +\n                  '\nMESSA11A DC    C'Supply a table code, followed by an action code. '\nMESSA11B DC    C'Supply a program name, as the next parameter.   '\nMESSA11C DC    C'Valid table  codes are:  E2, E8, AP, NS, PC, PP. '\nMESSA11D DC    C'Valid action codes are:  A - add, B - blank, D - displ-\n               ay.'\nMESSA11E DC    C'Supply a second program name.  '\nMESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-\n               on code.'\nMESSA11G DC    C'Please supply one program name to add to the table.'\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\nMESSDIAG DC    C'                                            '\nMESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '\n         SPACE 3\n         LTORG\n         SPACE 3\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER1   DS    F                   Save R1 here\nSAVER1A  DS    F                   Save R1 here\nSAVER6   DS    F                   Save R6 here\nSAVER8   DS    F                   Save R8 here\nSAVER9   DS    F                   Save R9 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nSAVLSLOT DS    F                   Save place where Key 0 will change\nDISPREG  DS    F                   DISPLAY\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nCODEPLAC DS    CL2\nPAD01    DS    CL4                 Filler\nOFFFLAG  DS    X                   Are we blanking the last entry?\nOLDFLAG  DS    X                   Old system detected if X'01'\nPLATFLG  DS    X\nNSCHFLG  DS    X\nPAD02    DS    CL4                 Filler\nFSTNAME  DC    CL8' '\nFSTCOUNT DS    F                   Number of characters in FSTNAME\nFSTCHALF DC    H'0'\nSNDNAME  DC    CL8' '\nSNDCOUNT DS    F                   Number of characters in SNDNAME\nSNDCHALF DC    H'0'\nTABCODE  DC    CL8' '              Original OUTLIM character\n         DS    CL72                PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\n         SPACE\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n* -\n* -      *** TEST CODE FOR TPUTTING DIAGNOSTICS ***\n*        ST    R1,SAVER1\n*        MVI   LINE-1,X'40'\n*        MVC   LINE,LINE-1\n*        HEX   LINE,10,TABCODE\n*        APUT  LINE,21\n*        L     R1,SAVER1\n* -\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "LSLT$": {"ttr": 11274, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=CBT.CBT493.FILE222.PDS(LSLT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,9),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n ENTRY   LSLT\n NAME    LSLT(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LSLTHELP": {"ttr": 11521, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized.                          *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized                       *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                                                                     *\n*    Description:   Fill the \"LAST SLOT\" of the already created       *\n*                   TSO/E program list tables in storage, with one    *\n*                   new program name.                                 *\n*                                                                     *\n*       Function:   To add one new program name to the global incore  *\n*                   TSO auth tables, IKJEFTE2, IKJEFTE8, or           *\n*                   IKJEFTAP, IKJEFTNS, or even to the PLATCMD or     *\n*                   PLATPGM lists, if they exist.  This is done to    *\n*                   the last entry of each table, which had been      *\n*                   left empty by the last IPL, SET IKJTSO=xx, or     *\n*                   PARMLIB UPDATE(xx) operation.  That is how IBM    *\n*                   has designed things.  They leave one extra blank  *\n*                   entry at the end, and this is what we are taking  *\n*                   advantage of.                                     *\n*                                                                     *\n*                   This trick (of filling in the last table entry)   *\n*                   only works for PARMLIB-created tables, because    *\n*                   the tables whose origin is IKJTABLS have no       *\n*                   \"length attributes\" associated with them.  And    *\n*                   in those cases, where the tables came from        *\n*                   IKJTABLS CSECTs, the only way you know where      *\n*                   the end of that table is, is from a blank table   *\n*                   entry.  Then, the blank entry is the table's      *\n*                   delimiter.                                        *\n*                                                                     *\n*         Syntax:   LSLT TTA pgmname                                  *\n*                                                                     *\n*                   Where TT is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD                           *\n*                   E8 - IKJEFTE8 = AUTHPGM                           *\n*                   AP - IKJEFTAP = AUTHTSF                           *\n*                   NS - IKJEFTNS = NOTBKGND                          *\n*                   PC - FCVE     = PLATCMD                           *\n*                   PP - PPVE     = PLATPGM                           *\n*                                                                     *\n*                   If the action code is B (blank the last           *\n*                   entry), then no program name is required.         *\n*                                                                     *\n*                   If the action code is D (display the last         *\n*                   entry), then no program name is required.         *\n*                                                                     *\n*                   If the action code is A (add a new program        *\n*                   name) then one program name is required.          *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to, and therefore no addition *\n*                   of names can be made.  The condition is reported. *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NUL8": {"ttr": 11523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "NUL8     TITLE 'NUL8 - CHANGE PSCBUSER AND PSCBUSRL TO USERID YOU WANT'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   NUL8     USERID                                   *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID IN PSCB AND LWA                     *\n*                     AND CHANGE THE UPT PREFIX AS WELL.              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         YREGS\nSP000    EQU   0\n         SPACE 1\nNUL8     CSECT\n         USING NUL8,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'NUL8 VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         L     R4,X'34'(,R2)       LOAD UPT ADDRESS\n         USING UPT,R4\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. UPDATE BOTH FIELDS.\n         TM    FLAG1,X'01'         IS SUPPORT OFF?\n         BO    BATCHERR            THEN POST ERROR MESSAGE.\n         MVC   PSCBUSER(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   PSCBUSRL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   PSCB+X'54'(8),NEWID      PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'            PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   UPTPREFL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   UPT+X'21'(8),NEWID       PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'             PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 BYPASS OTHER PROCESSING\nBATCHERR DS    0H                  8-CHARACTER ID BUT NOT SUPPORTED\n         TPUT  MSG0,L'MSG0\n         B     EOJ4\nBATCHNL7 DS    0H\n         MVC   PSCB+X'54'(8),NEWID PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'       PUT LENGTH IN NEW FIELD\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   UPT+X'21'(8),NEWID  PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'        PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         B     BATCHCU8            FILL IN OLD FIELDS TOO.\nBATCHCNT DS    0H                  CHECK INVALID LENGTH.\n         C     R8,=F'8'            IS LENGTH 8?\n         BE    BATCHERR            YES. SEND ERROR MESSAGE.\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   PSCB+X'54'(8),ZEROES    NULLIFY NEW PSCBUID8\n         MVI   PSCB+X'20',X'00'        NULLIFY PSCBU8L\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         MVC   UPT+X'21'(8),ZEROES ZERO NEW PREFIX FIELD\n         MVI   UPT+X'29',X'00'     ZERO NEW PREFIX LENGTH\nBATCHCU8 DS    0H\n* ---------------------------- >   LWA SUPPORT\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         TM    FLAG1,X'02'         8-CHARACTER ID IN EFFECT?\n         BNO   NOLWA8              NOPE. SKIP THAT UPDATE.\nNOTEQ8   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHARS IN NEWID?\n         BL    LESTH8              YES. EXIT WITH ERROR MESSAGE.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  INVALIDATE OLD FIELD\n         B     LESTH8A\nLESTH8   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),NEWID   USE OLD FIELD TOO\nLESTH8A  DS    0H\n         LA    R3,X'1DC'(,R1)      NEW LWA USERID FIELD\n         MVC   0(8,R3),NEWID       LOAD NEW FIELD TOO\n         B     YESLWA8\nNOLWA8   DS    0H\n         TM    FLAG1,X'01'         NEW SYSTEM BUT NO 8-CHAR\n         BZ    NO8SUP              NOPE. SAME UPDATE AS BEFORE.\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      NO. FILL NEW LWA USERID FIELD TOO\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         B     YESLWA8\nNO8SUP   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      POINT TO THE NEW USERID FIELD\n         MVC   0(8,R3),ZEROES      AND NULLIFY WITH ZEROES\nYESLWA8  DS    0H\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUL8$": {"ttr": 11528, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(NUL8)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   NUL8\n SETSSI  CB495247\n SETCODE AC(1)\n NAME    NUL8(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PSCBID": {"ttr": 11530, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*      TSO COMMAND PROCESSOR TO DISPLAY THE USERID OF THE INVOKER.\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nPSCBID   CSECT\nPSCBID   RMODE 24\nPSCBID   AMODE 24\n         STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             LOAD ENTRY POINT INTO BASE REGISTER\n         USING PSCBID,R12          TELL THE ASSEMBLER R12 IS BASE\n         LR    R15,R13             SAVE CALLER'S SAVE ADDRESS\n         LA    R13,SAVE            GET OUR SAVEAREA ADDRESS\n         ST    R15,SAVE+4          STORE HIS SAVEAREA INTO MINE + 4\n         ST    R13,8(,R15)         STORE MINE INTO HIS SAVEAREA + 8\nRUNCHAIN L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         USING PSCB,R2\n* -----  8-character userid support -------- *   below\n         CLI   PSCBUSER,C'>'           DOES OLD USER FIELD HAVE '>'\n         BNE   EIGHTEND                NO. SKIP THIS CODE.\n         MVC   MSGLINE+18(8),PSCB+X'54'  MOVE 8 BYTES FROM NEW FIELD\n         APUT  MSGLINE,L'MSGLINE       DISPLAY THE MESSAGE ON THE TUBE\n         B     RETURN\nEIGHTEND DS    0H\n* -----  8-character userid support -------- *   above\n         MVC   MSGLINE+18(7),PSCBUSER  MOVE USERID IN FROM PSCB\n         APUT  MSGLINE,L'MSGLINE       DISPLAY THE MESSAGE ON THE TUBE\n         DROP  R2\nRETURN   DS    0H\n         L     R13,SAVE+4          RELOAD CALLER'S SAVEAREA POINTER\n         LM    R14,R12,12(R13)     RELOAD REGISTERS\n         BR    R14                 RETURN TO CALLER\nSAVE     DC    18F'0'              MY SAVE AREA\nMSGLINE  DC    C'My PSCB Userid is         '      LINE FOR MESSAGE\n         LTORG\n         IKJPSCB\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PSCBID$": {"ttr": 11780, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(PSCBID)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   PSCBID\n SETSSI  CB495247\n SETCODE AC(0)\n NAME    PSCBID(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFSPEC": {"ttr": 11782, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "XXXX,   GOOD LUCK !!\n\nTHIS JOB ASSEMBLES A SMALL PGM THAT FLIPS ON THE SPECIAL BIT IN\nTHE ACEE OF THE RUNNING JOB GIVING IT THE AUTHORITY TO GIVE ANY\nUSERID (XXXXXXX) RACF SPECIAL (PERMANENTLY).  ONCE THIS JOB ENDS\nTHE RUNNING USERID HAS NO OVERT AUTHORITY (UNLESS THEY ARE XXXXXXX)\n.\n.\nCHANGE XXXXXXX TO THE USERID TO BE GIVEN SPECIAL\nNEED AN OBJECT LIBRARY  FB/80/32720\nNEED AN APF AUTHORIZED LIBRARY\n.\n.\n.  THIS IS A VERY DANGEROUS PIECE OF CODE (FROM A SECURITY\n.  PERSPECTIVE).  GUARD IT WELL     :-D\n.\n.\n// PROVIDE\n// A VALID JOBCARD\n// HERE\n//*********************************************************************\n//*                ASSEMBLE  STEP                                     *\n//*********************************************************************\n//ASM     EXEC PGM=ASMA90,REGION=4096K,\n//             PARM='DECK'\n//SYSLIN   DD  DUMMY\n//SYSIN    DD  *\nSPECIAL  CSECT\n         SAVE  (14,12)\n         LR    R12,R15\n         USING SPECIAL,R12\n         B     GO\n         DC    C' SPECIAL    V1.0  -      &SYSDATE'\nGO       ST    R13,SAVEAREA+4\n         LA    R13,SAVEAREA\n         MODESET KEY=ZERO\n         L     R3,X'224'                      ADDR OF ASCB\n         LA    R3,0(,R3)                      ASCB\n         L     R4,X'6C'(,R3)                  ADDR OF ASXB\n         LA    R4,0(R4)                       ASXB\n         L     R5,X'C8'(,R4)                  ADDR OF ACEE\n         LA    R5,0(R5)                       ACEE\n         OI    X'26'(R5),X'80'                OR ON SPECIAL BIT\n*        EX    R0,*            COMMENTED OUT ABEND (TO LOOK IN DUMP)\nENDIT    L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n         DS    0D\nSAVEAREA DS    18F\n         YREGS\n         END\n/*\n//SYSPUNCH DD DSN=WHATEVER.OBJ(SPECIAL),DISP=OLD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//******************************************************************\n//*             LINK STEP                                          *\n//******************************************************************\n//LINK     EXEC PGM=IEWL,PARM='LET,LIST,NCAL,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSLMOD  DD  DSN=AN.APF.AUTH.LIBRARY,DISP=SHR\n//OBJECT   DD  DSN=WHATEVER.OBJ(SPECIAL),DISP=OLD\n//SYSLIN   DD  *\n INCLUDE OBJECT(SPECIAL)\n SETCODE AC(1)\n NAME    SPECIAL(R)\n/*\n//STEP001   EXEC PGM=IKJEFT01\n//*       PROVES USERID DOESN'T (YET) HAVE SPECIAL\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  *\n LU XXXXXXX\n//******************************************************************\n//*             EXECUTE STEP                                       *\n//******************************************************************\n//*\n//RUNIT    EXEC PGM=SPECIAL,REGION=2M\n//*    DOES THE DEED\n//STEPLIB  DD  DSN=AN.APF.AUTH.LIBRARY,DISP=SHR\n//SYSABEND DD  SYSOUT=*\n//STEP003   EXEC PGM=IKJEFT01,COND=EVEN\n//*    GIVES USERID SPEC AND LIST IT\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  *\n ALU XXXXXXX SPEC\n LU XXXXXXX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RDHSVCA8": {"ttr": 11785, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERS JOB (0,0),'TEST',NOTIFY=&SYSUID,\n//             CLASS=A,MSGCLASS=X,MSGLEVEL=(1,1)\n//*\n//** INSERT/REMOVE/REPLACE an SVC - or - Dump the SVCTABLE\n//*\n//*    This job was created for the purpose of testing the SVC\n//*  install program.  This jobstream installs RDHAPSVC which is\n//*  the SVC that provides APF Authorization in an ISPF\n//*  environment.\n//*\n//*UMP      EXEC PGM=RDHINSTL,PARM=DUMP\n//*REMOVE   EXEC PGM=RDHINSTL,PARM='REMOVE,RDHAPSVC,168'\n//*REPLACE  EXEC PGM=RDHINSTL,PARM='REPLACE,RDHAPSVC,168'\n//*\n//INSERT    EXEC PGM=RDHINSTL,PARM='INSERT,RDHAPSVC,168'\n//STEPLIB  DD  DISP=SHR,DSN=IBMUSER.LOAD      <== AUTHORIZED LIBRARY\n//SYSPRINT DD  SYSOUT=*\n//\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RLOAD": {"ttr": 11787, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RLOAD    TITLE 'RACF SWITCH ATTRIBUTES  '\n*-------------------------------------------------------*\n*        TURN ON BITS IN ACEE OF ADDRESS SPACE          *\n*                 F TURNS THESE OFF                     *\n*                 EXAMPLE:  RLOAD SF                    *\n*-------------------------------------------------------*\n*       RLOAD  S   ACEESPEC                             *\n*       RLOAD  O   ACEEOPER                             *\n*       RLOAD  U   ACEEAUDT                             *\n*       RLOAD  K   ACEERACF                             *\n*       RLOAD  P   ACEEPRIV                             *\n*       RLOAD  A   ACEEALTR                             *\n*       RLOAD  C   ACEECNTL                             *\n*       RLOAD  D   ACEEUPDT                             *\n*       RLOAD  R   ACEEREAD                             *\n*       RLOAD  0   ACEENONE                             *\n*       RLOAD  N   ACEENPWR                             *\n*       RLOAD  G   ACEEGRPA                             *\n*       RLOAD  H   ACEEUATH                             *\n*       RLOAD  V   ACEEDASD                             *\n*       RLOAD  T   ACEETAPE                             *\n*       RLOAD  M   ACEETERM                             *\n*       RLOAD  I   ACEEROA                              *\n*       RLOAD  L   ACEELOGU                             *\n*       RLOAD  1   DEFINED USER FROM ACEE UTOKEN        *\n*       RLOAD  2   PRIVILEGED USER FROM ACEE UTOKEN     *\n*       RLOAD  3   TRUSTED USER FROM ACEE UTOKEN        *\n*       RLOAD  4   USER MARKED SURROGATE                *\n*       RLOAD  5   USER MARKED SPECIAL IN UTOKEN        *\n*       RLOAD  6   USER MARKED REMOTE IN UTOKEN         *\n*-------------------------------------------------------*\n*           THIS COMMAND IS NOW RE-ENTRANT              *\n*           AND IT IS IN THE PUBLIC DOMAIN              *\n*-------------------------------------------------------*\n         YREGS\n         SPACE 3\nRLOAD    CSECT\nRLOAD    AMODE 31\nRLOAD    RMODE 24\n         USING RLOAD,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' RLOAD - &SYSDATE - &SYSTIME  '\n         DC    C'--  Public Domain  --    '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         LR    R6,R1               SAVE PARM POINTER\n         USING RLOAD,R12,R10       (TELL ASSEMBLER).\n         LA    R10,4095(,R12)      SECOND BASE,\n         LA    R10,1(,R10)         JUST IN CASE.\n         LA    R0,WORKLEN          LOAD LENGTH FOR GETMAIN\n         GETMAIN R,LV=(0)\n         LR    R13,R1                 Point R13 to workarea\n         USING WORKAREA,R13           Address workarea\n         LR    R14,R13                Copy workarea address\n         L     R15,=A(WORKLEN)        Get length of workarea\n         XR    R0,R0                  Clear\n         XR    R1,R1                  Clear\n         MVCL  R14,R0                 Init to zeros\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\nINITCON  DS    0H\n         XC    FLAG0,FLAG0         CLEAR FLAGS\n         XC    FLAG1,FLAG1\n         XC    FLAG2,FLAG2\n         XC    FLAG3,FLAG3\n*\nTESTPARM DS    0H\n         LR    R1,R6               RESTORE PARM POINTER\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(,R2)           LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    FINDDATA            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n* --- PARMS GOTTEN AT THIS POINT.  ARE WE TURNING ATTRIBUTES -------- *\n* --- GLOBALLY OFF, OR GLOBALLY ON ? -------------------------------- *\nSWOFF    CLI   1(R2),C'F'          ARE WE TURNING ATTRIBUTES OFF?\n         BNE   SWON                NO. DEFAULT TO TURN THEM ON.\n         OI    FLAG2,FLAG2OFF      PUT THE PGM INTO \"TURN OFF\" MODE\n         NI    FLAG2,255-FLAG2ON   TURN OFF \"TURN ON\" MODE\n         B     SETFLAGS            GO SET ATTRIBUTE FLAGS\nSWON     OI    FLAG2,FLAG2ON       PUT THE PROGRAM INTO \"TURN ON\" MODE\n         NI    FLAG2,255-FLAG2OFF  TURN OFF \"TURN OFF\" MODE\n* --- WHAT ATTRIBUTE ARE WE SWITCHING WITH THIS INVOCATION ? -------- *\nSETFLAGS DS    0H\nSPECIAL  CLI   0(R2),C'S'          WE WANT SPECIAL ?\n         BNE   OPER                NO. GO ON\n         OI    FLAG1,FLAGSPEC      SET UP FOR SPECIAL\n         B     FINDDATA\nOPER     CLI   0(R2),C'O'          WE WANT OPERATIONS ?\n         BNE   AUDITOR             NO. GO ON\n         OI    FLAG1,FLAGOPER      SET UP FOR OPERATIONS\n         B     FINDDATA\nAUDITOR  CLI   0(R2),C'U'          WE WANT AUDITOR ?\n         BNE   RACFDEF             NO. GO ON\n         OI    FLAG1,FLAGAUDT      SET UP FOR AUDITOR\n         B     FINDDATA\nRACFDEF  CLI   0(R2),C'K'          WE WANT RACF DEFINED?\n         BNE   PRIVLEG             NO. GO ON\n         OI    FLAG1,FLAGRACF      SET UP FOR RACF DEFINED\n         B     FINDDATA\nPRIVLEG  CLI   0(R2),C'P'          PRIVILEGED ATTRIBUTE?\n         BNE   DEFALTER            NO. GO ON\n         OI    FLAG0,FLAGPRIV      SET UP FOR PRIVILEGED BIT\n         B     FINDDATA\nDEFALTER CLI   0(R2),C'A'          WE WANT DEFAULT TO ALTER DATA ?\n         BNE   DEFCNTL             NO. GO ON\n         OI    FLAG1,FLAGALTR      SET UP FOR DEFAULT IS ALTER\n         B     FINDDATA\nDEFCNTL  CLI   0(R2),C'C'          WE WANT DEFAULT TO CONTROL ?\n         BNE   DEFUPDT             NO. GO ON\n         OI    FLAG1,FLAGCNTL      SET UP FOR DEFAULT TO CONTROL\n         B     FINDDATA\nDEFUPDT  CLI   0(R2),C'D'          WE WANT DEFAULT TO UPDATE DATA?\n         BNE   DEFNOACC            NO. GO ON\n         OI    FLAG1,FLAGUPDT      SET UP FOR DEFAULT TO UPDATE DATA\n         B     FINDDATA\nDEFNOACC CLI   0(R2),C'0'          WE WANT DEFAULT TO NO ACCESS?\n         BNE   NOPASSWD            NO. GO ON\n         OI    FLAG0,FLAGNONE      SET UP FOR DEFAULT TO NO ACCESS\n         B     FINDDATA\nNOPASSWD CLI   0(R2),C'N'          WE WANT TO SET ACEENPWD BIT?\n         BNE   GROUPACC            NO. GO ON\n         OI    FLAG0,FLAGNPWD      SET ACEENPWD BIT\n         B     FINDDATA\nGROUPACC CLI   0(R2),C'G'          WE WANT TO SET GROUPACC BIT?\n         BNE   DEFREAD             NO. GO ON\n         OI    FLAG0,FLAGGRPA      SET GROUP ACCESS BIT\n         B     FINDDATA\nDEFREAD  CLI   0(R2),C'R'          WE WANT DEFAULT TO READ DATA ?\n         BNE   AUTHUSER            NO. GO ON\n         OI    FLAG1,FLAGREAD      SET UP FOR DEFAULT TO READ DATA\n         B     FINDDATA\nAUTHUSER CLI   0(R2),C'H'          AUTH TO DEFINE OTHER USERS?\n         BNE   AUTHDASD\n         OI    FLAG0,FLAGUATH\n         B     FINDDATA\nAUTHDASD CLI   0(R2),C'V'          AUTH TO PROTECT DASD VOLUMES?\n         BNE   AUTHTAPE\n         OI    FLAG0,FLAGDASD\n         B     FINDDATA\nAUTHTAPE CLI   0(R2),C'T'          AUTH TO PROTECT TAPE VOLUMES?\n         BNE   AUTHTERM\n         OI    FLAG0,FLAGTAPE\n         B     FINDDATA\nAUTHTERM CLI   0(R2),C'M'          AUTH TO PROTECT TERMINALS?\n         BNE   AUTHROA\n         OI    FLAG0,FLAGTERM\n         B     FINDDATA\nAUTHROA  CLI   0(R2),C'I'          AUTH FOR READ ONLY AUDITOR?\n         BNE   DEFDUSER\n         OI    FLAG3,FLAGROA\n         B     FINDDATA\nDEFDUSER CLI   0(R2),C'1'          IS THE USERID NOT DEFAULTED?\n         BNE   PRIVUSER\n         OI    FLAG3,FLAGDEFD\n         B     FINDDATA\nPRIVUSER CLI   0(R2),C'2'          IS THE USER PRIVILEGED IN UTOKEN?\n         BNE   TRSTUSER\n         OI    FLAG3,FLAGPRVU\n         B     FINDDATA\nTRSTUSER CLI   0(R2),C'3'          IS THE USER TRUSTED IN UTOKEN?\n         BNE   AUTHLOGU\n         OI    FLAG3,FLAGTRSU\n         B     FINDDATA\nAUTHLOGU CLI   0(R2),C'L'          RACF LOGGING?\n         BNE   SURRUSER\n         OI    FLAG3,FLAGLOGU\n         B     FINDDATA\nSURRUSER CLI   0(R2),C'4'          IS THE USER SURROGATE IN UTOKEN?\n         BNE   TSPCUSER\n         OI    FLAG3,FLAGSURR\n         B     FINDDATA\nTSPCUSER CLI   0(R2),C'5'          IS THE USER SPECIAL IN UTOKEN?\n         BNE   REMTUSER\n         OI    FLAG3,FLAGTSPC\n         B     FINDDATA\nREMTUSER CLI   0(R2),C'6'          IS THE USER REMOTE IN UTOKEN?\n         BNE   FINDDATA\n         OI    FLAG3,FLAGTREM\n         B     FINDDATA\n* --- FLAG CHOSEN, GET THE ACEE. ------------------------------------ *\nFINDDATA L     R5,X'10'            POINT TO THE CVT.\n         L     R5,0(,R5)           POINT TO TCB WORDS.\n         L     R5,12(,R5)          POINT TO MY ASCB.\n         USING ASCB,R5             (TELL ASSEMBLER).\n         L     R5,ASCBASXB         POINT TO MY ASXB.\n         USING ASXB,R5             (TELL ASSEMBLER).\n         L     R5,ASXBSENV         POINT TO MY ACEE.\n         USING ACEE,R5             (TELL ASSEMBLER).\n*        TM    FLAG3,FLAGDEFD+FLAGPRVU\n         BZ    DOIT\n         L     R4,X'A4'(,R5)       POINT TO UTOKEN OF ACEE\n         LA    R7,2(,R4)           POINT TO TOKFLG1 BITS OF UTOKEN\n         LA    R4,4(,R4)           POINT TO TOKFLG2 BITS OF UTOKEN\n* --- WE'RE IN THE ACEE.  NOW DO IT. -------------------------------- *\n* --- FIRST, DETERMINE IF WE'RE TURNING STUFF OFF OR ON. ------------ *\nDOIT     DS    0H\n         TM    FLAG2,FLAG2ON           ON?\n         BO    ON                      YES. GO TO SETTING ON.\n         TM    FLAG2,FLAG2OFF          OFF?\n         BO    OFF                     YES. GO TO SETTING OFF.\n         B     RETURN                  NO FLAG, NO CHANGE.\n* --- WE'RE TURNING STUFF ON. --------------------------------------- *\nON       DS    0H\n         MODESET KEY=ZERO\nSPECON   TM    FLAG1,FLAGSPEC\n         BNO   OPERON\n         OI    ACEEFLG1,ACEESPEC\n         B     ENDMOD\nOPERON   TM    FLAG1,FLAGOPER\n         BNO   AUDTON\n         OI    ACEEFLG1,ACEEOPER\n         B     ENDMOD\nAUDTON   TM    FLAG1,FLAGAUDT\n         BNO   RACFON\n         OI    ACEEFLG1,ACEEAUDT\n         B     ENDMOD\nRACFON   TM    FLAG1,FLAGRACF\n         BNO   PRIVON\n         OI    ACEEFLG1,ACEERACF\n         B     ENDMOD\nPRIVON   TM    FLAG0,FLAGPRIV\n         BNO   ALTRON\n         OI    ACEEFLG1,ACEEPRIV\n         B     ENDMOD\nALTRON   TM    FLAG1,FLAGALTR\n         BNO   CNTLON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEALTR\n         B     ENDMOD\nCNTLON   TM    FLAG1,FLAGCNTL\n         BNO   UPDTON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEECNTL\n         B     ENDMOD\nUPDTON   TM    FLAG1,FLAGUPDT\n         BNO   NOACCON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEUPDT\n         B     ENDMOD\nNOACCON  TM    FLAG0,FLAGNONE\n         BNO   NPWDON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEENONE\n         B     ENDMOD\nNPWDON   TM    FLAG0,FLAGNPWD\n         BNO   GACCON\n         OI    ACEEFLG3,ACEENPWR\n         B     ENDMOD\nGACCON   TM    FLAG0,FLAGGRPA\n         BNO   READON\n         OI    ACEEFLG3,ACEEGRPA\n         B     ENDMOD\nREADON   TM    FLAG1,FLAGREAD\n         BNO   UATHON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEREAD\n         B     ENDMOD\nUATHON   TM    FLAG0,FLAGUATH\n         BNO   DASDON\n         OI    ACEEFLG4,ACEEUATH\n         B     ENDMOD\nDASDON   TM    FLAG0,FLAGDASD\n         BNO   TAPEON\n         OI    ACEEFLG4,ACEEDASD\n         B     ENDMOD\nTAPEON   TM    FLAG0,FLAGTAPE\n         BNO   TERMON\n         OI    ACEEFLG4,ACEETAPE\n         B     ENDMOD\nTERMON   TM    FLAG0,FLAGTERM\n         BNO   ROAON\n         OI    ACEEFLG4,ACEETERM\n         B     ENDMOD\nROAON    TM    FLAG3,FLAGROA\n         BNO   DEFDUSR\n         OI    ACEEFLG1,X'04'\n         B     ENDMOD\nDEFDUSR  TM    FLAG3,FLAGDEFD\n         BNO   PRVDUSR\n         NI    0(R4),255-X'40'\n         B     ENDMOD\nPRVDUSR  TM    FLAG3,FLAGPRVU\n         BNO   TRSDUSR\n         OI    0(R4),X'01'\n         B     ENDMOD\nTRSDUSR  TM    FLAG3,FLAGTRSU\n         BNO   LOGUON\n         OI    0(R4),X'08'\n         B     ENDMOD\nLOGUON   TM    FLAG3,FLAGLOGU\n         BNO   SURRUSR\n         OI    ACEEFLG1,ACEELOGU\n         B     ENDMOD\nSURRUSR  TM    FLAG3,FLAGSURR\n         BNO   TSPCUSR\n         OI    0(R4),X'04'\n         B     ENDMOD\nTSPCUSR  TM    FLAG3,FLAGTSPC\n         BNO   TREMUSR\n         OI    0(R7),X'02'\n         B     ENDMOD\nTREMUSR  TM    FLAG3,FLAGTREM\n         BNO   ENDMOD\n         OI    0(R4),X'02'\n         B     ENDMOD\n* --- WE'RE TURNING STUFF OFF. -------------------------------------- *\nOFF      DS    0H\n         MODESET KEY=ZERO\nSPECOFF  TM    FLAG1,FLAGSPEC\n         BNO   OPEROFF\n         NI    ACEEFLG1,255-ACEESPEC\n         B     ENDMOD\nOPEROFF  TM    FLAG1,FLAGOPER\n         BNO   AUDTOFF\n         NI    ACEEFLG1,255-ACEEOPER\n         B     ENDMOD\nAUDTOFF  TM    FLAG1,FLAGAUDT\n         BNO   RACFOFF\n         NI    ACEEFLG1,255-ACEEAUDT\n         B     ENDMOD\nRACFOFF  TM    FLAG1,FLAGRACF\n         BNO   PRIVOFF\n         NI    ACEEFLG1,255-ACEERACF\n         B     ENDMOD\nPRIVOFF  TM    FLAG0,FLAGPRIV\n         BNO   ALTROFF\n         NI    ACEEFLG1,255-ACEEPRIV\n         B     ENDMOD\nALTROFF  TM    FLAG1,FLAGALTR\n         BNO   CNTLOFF\n         NI    ACEEFLG2,255-ACEEALTR\n         B     ENDMOD\nCNTLOFF  TM    FLAG1,FLAGCNTL\n         BNO   UPDTOFF\n         NI    ACEEFLG2,255-ACEECNTL\n         B     ENDMOD\nUPDTOFF  TM    FLAG1,FLAGUPDT\n         BNO   NOACCOFF\n         NI    ACEEFLG2,255-ACEEUPDT\n         B     ENDMOD\nNOACCOFF TM    FLAG0,FLAGNONE\n         BNO   NPWDOFF\n         NI    ACEEFLG2,255-ACEENONE\n         B     ENDMOD\nNPWDOFF  TM    FLAG0,FLAGNPWD\n         BNO   GACCOFF\n         NI    ACEEFLG3,255-ACEENPWR\n         B     ENDMOD\nGACCOFF  TM    FLAG0,FLAGGRPA\n         BNO   READOFF\n         NI    ACEEFLG3,255-ACEEGRPA\n         B     ENDMOD\nREADOFF  TM    FLAG1,FLAGREAD\n         BNO   UATHOFF\n         NI    ACEEFLG2,255-ACEEREAD\n         B     ENDMOD\nUATHOFF  TM    FLAG0,FLAGUATH\n         BNO   DASDOFF\n         NI    ACEEFLG4,255-ACEEUATH\n         B     ENDMOD\nDASDOFF  TM    FLAG0,FLAGDASD\n         BNO   TAPEOFF\n         NI    ACEEFLG4,255-ACEEDASD\n         B     ENDMOD\nTAPEOFF  TM    FLAG0,FLAGTAPE\n         BNO   TERMOFF\n         NI    ACEEFLG4,255-ACEETAPE\n         B     ENDMOD\nTERMOFF  TM    FLAG0,FLAGTERM\n         BNO   ROAOFF\n         NI    ACEEFLG4,255-ACEETERM\n         B     ENDMOD\nROAOFF   TM    FLAG3,FLAGROA\n         BNO   UDEFUSR\n         NI    ACEEFLG1,255-X'04'\n         B     ENDMOD\nUDEFUSR  TM    FLAG3,FLAGDEFD\n         BNO   UPRVUSR\n         OI    0(R4),X'40'\n         B     ENDMOD\nUPRVUSR  TM    FLAG3,FLAGPRVU\n         BNO   UTRSUSR\n         NI    0(R4),255-X'01'\n         B     ENDMOD\nUTRSUSR  TM    FLAG3,FLAGTRSU\n         BNO   LOGUOFF\n         NI    0(R4),255-X'08'\n         B     ENDMOD\nLOGUOFF  TM    FLAG3,FLAGLOGU\n         BNO   UTRSURR\n         NI    ACEEFLG1,255-ACEELOGU\n         B     ENDMOD\nUTRSURR  TM    FLAG3,FLAGSURR\n         BNO   UTRTSPC\n         NI    0(R4),255-X'04'\n         B     ENDMOD\nUTRTSPC  TM    FLAG3,FLAGTSPC\n         BNO   UTRTREM\n         NI    0(R7),255-X'02'\n         B     ENDMOD\nUTRTREM  TM    FLAG3,FLAGTREM\n         BNO   ENDMOD\n         NI    0(R4),255-X'02'\n         B     ENDMOD\nENDMOD   DS    0H\n         MODESET KEY=NZERO\n*        SHOULDN'T BE NECESSARY BECAUSE WE'RE REENTRANT NOW.....\n         MVI   0(R2),X'00'             MAKE SURE THIS ADDRESS IS\n         MVI   1(R2),X'00'               CLEAN FOR NEXT USE\n         DROP  R5\nRETURN   DS    0H                      RETURN TO CALLER\n         LR    R1,R13                  LOAD ADDRESS TO FREEMAIN\n         LA    R0,WORKLEN              LENGTH TO FREE\n         L     R13,SAVE+4              LOAD RETURN ADDRESS\n         FREEMAIN R,A=(1),LV=(0)\n         SR    R15,R15                 DON'T MAKE WAVES\n         LM    R14,R12,12(R13)         RELOAD REGISTERS\n         BR    R14                     BACK\n         LTORG\n         DS    0D\n*  INTERNALLY DEFINED FLAGS\nWORKAREA DSECT\nSAVE     DC    9D'0'\nSAVER4A  DS    F\nFLAG0    DC    X'00'\nFLAGNPWD EQU   B'10000000'             NO PASSWORD REQUIRED\nFLAGGRPA EQU   B'01000000'             GROUP AND USERID IN ACCESS LIST\nFLAGNONE EQU   B'00100000'             NONE    ACEEFLG2\nFLAGPRIV EQU   B'00010000'             STC PRIVILEGED ATTRIBUTE\nFLAGUATH EQU   B'00001000'             AUTH TO DEFINE USERS\nFLAGDASD EQU   B'00000100'             AUTH TO PROTECT DASD\nFLAGTAPE EQU   B'00000010'             AUTH TO PROTECT TAPE\nFLAGTERM EQU   B'00000001'             AUTH TO PROTECT TERMINALS\nFLAG1    DC    X'00'\nFLAGSPEC EQU   B'10000000'             SPECIAL\nFLAGOPER EQU   B'01000000'             OPERATIONS\nFLAGAUDT EQU   B'00100000'             AUDITOR\nFLAGRACF EQU   B'00010000'             RACF    ACEEFLG1\nFLAGALTR EQU   B'00001000'             ALTER   ACEEFLG2\nFLAGCNTL EQU   B'00000100'             CONTROL ACEEFLG2\nFLAGUPDT EQU   B'00000010'             UPDATE  ACEEFLG2\nFLAGREAD EQU   B'00000001'             READ    ACEEFLG2\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nFLAG3    DC    X'00'\nFLAGDEFD EQU   B'10000000'             USER IS NOT UNDEFINED IN UTOKEN\nFLAGPRVU EQU   B'01000000'             USER IS PRIVILEGED IN UTOKEN\nFLAGTRSU EQU   B'00100000'             USER IS TRUSTED IN UTOKEN\nFLAGLOGU EQU   B'00010000'             USER IS LOGGED\nFLAGSURR EQU   B'00001000'             USER IS SURROGATE\nFLAGTSPC EQU   B'00000100'             USER MARKED SPECIAL IN UTOKEN\nFLAGROA  EQU   B'00000010'             USER HAS READ ONLY AUDITOR\nFLAGTREM EQU   B'00000001'             USER MARKED REMOTE IN UTOKEN\n         DS    0D\nWORKLEN  EQU   *-WORKAREA\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES,LIST=YES  MAP THE CVT.\n         IHAASCB LIST=YES          MAP THE ASCB.\n         IHAASXB LIST=YES          MAP THE ASXB.\n         IHAACEE                   MAP THE ACEE.\n         END   RLOAD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RLOAD$": {"ttr": 12037, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB ,'A-NONYMOUS',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(RLOAD)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    RLOAD(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RLOAD#": {"ttr": 12039, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "  S   ACEESPEC\n  O   ACEEOPER\n  U   ACEEAUDT\n  K   ACEERACF\n  P   ACEEPRIV\n  A   ACEEALTR       F TURNS THESE OFF\n  C   ACEECNTL\n  D   ACEEUPDT\n  R   ACEEREAD\n  0   ACEENONE\n  N   ACEENPWR\n  G   ACEEGRPA\n  H   ACEEUATH\n  V   ACEEDASD\n  T   ACEETAPE\n  M   ACEETERM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RLOADO": {"ttr": 12041, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RLOAD    TITLE 'RACF SWITCH ATTRIBUTES                          '\n*-------------------------------------------------------*\n*       TURN ON BITS IN ACEE OF ADDRESS SPACE           *\n*                F TURNS THESE OFF                      *\n*                EXAMPLE:  RLOAD SF                     *\n*             RLOAD  S   ACEESPEC                       *\n*             RLOAD  O   ACEEOPER                       *\n*             RLOAD  U   ACEEAUDT                       *\n*             RLOAD  K   ACEERACF                       *\n*             RLOAD  P   ACEEPRIV                       *\n*             RLOAD  A   ACEEALTR                       *\n*             RLOAD  C   ACEECNTL                       *\n*             RLOAD  D   ACEEUPDT                       *\n*             RLOAD  R   ACEEREAD                       *\n*             RLOAD  0   ACEENONE                       *\n*             RLOAD  N   ACEENPWR                       *\n*             RLOAD  G   ACEEGRPA                       *\n*-------------------------------------------------------*\n         YREGS\n         SPACE 3\nRLOAD    CSECT\nRLOAD    AMODE 31\nRLOAD    RMODE 24\n         USING RLOAD,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' RLOAD - &SYSDATE - &SYSTIME -'\n         DC    C'     --------------------------------    '\n         DC    C'             '\n         DC    C'                   '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING RLOAD,R12           (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         MVC   SAVE,SAVEACON       PRE-CLEAR SAVE AREA\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n*\nINITCON  DS    0H                  CLEAR FLAGS INITIALLY\n         MVI   FLAG0,X'00'\n         MVI   FLAG1,X'00'\n         MVI   FLAG2,X'00'\n*\nTESTPARM DS    0H\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    FINDDATA            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n* --- PARMS GOTTEN AT THIS POINT.  ARE WE TURNING ATTRIBUTES -------- *\n* --- GLOBALLY OFF, OR GLOBALLY ON ? -------------------------------- *\nSWOFF    CLI   1(R2),C'F'          ARE WE TURNING ATTRIBUTES OFF?\n         BNE   SWON                NO. DEFAULT TO TURN THEM ON.\n         OI    FLAG2,FLAG2OFF      PUT THE PGM INTO \"TURN OFF\" MODE\n         NI    FLAG2,255-FLAG2ON   TURN OFF \"TURN ON\" MODE\n         B     SETFLAGS            GO SET ATTRIBUTE FLAGS\nSWON     OI    FLAG2,FLAG2ON       PUT THE PROGRAM INTO \"TURN ON\" MODE\n         NI    FLAG2,255-FLAG2OFF  TURN OFF \"TURN OFF\" MODE\n* --- WHAT ATTRIBUTE ARE WE SWITCHING WITH THIS INVOCATION ? -------- *\nSETFLAGS DS    0H\nSPECIAL  CLI   0(R2),C'S'          WE WANT SPECIAL ?\n         BNE   OPER                NO. GO ON\n         OI    FLAG1,FLAGSPEC      SET UP FOR SPECIAL\n         B     FINDDATA\nOPER     CLI   0(R2),C'O'          WE WANT OPERATIONS ?\n         BNE   AUDITOR             NO. GO ON\n         OI    FLAG1,FLAGOPER      SET UP FOR OPERATIONS\n         B     FINDDATA\nAUDITOR  CLI   0(R2),C'U'          WE WANT AUDITOR ?\n         BNE   RACFDEF             NO. GO ON\n         OI    FLAG1,FLAGAUDT      SET UP FOR AUDITOR\n         B     FINDDATA\nRACFDEF  CLI   0(R2),C'K'          WE WANT RACF DEFINED?\n         BNE   PRIVLEG             NO. GO ON\n         OI    FLAG1,FLAGRACF      SET UP FOR RACF DEFINED\n         B     FINDDATA\nPRIVLEG  CLI   0(R2),C'P'          PRIVILEGED ATTRIBUTE?\n         BNE   DEFALTER            NO. GO ON\n         OI    FLAG0,FLAGPRIV      SET UP FOR PRIVILEGED BIT\n         B     FINDDATA\nDEFALTER CLI   0(R2),C'A'          WE WANT DEFAULT TO ALTER DATA ?\n         BNE   DEFCNTL             NO. GO ON\n         OI    FLAG1,FLAGALTR      SET UP FOR DEFAULT IS ALTER\n         B     FINDDATA\nDEFCNTL  CLI   0(R2),C'C'          WE WANT DEFAULT TO CONTROL ?\n         BNE   DEFUPDT             NO. GO ON\n         OI    FLAG1,FLAGCNTL      SET UP FOR DEFAULT TO CONTROL\n         B     FINDDATA\nDEFUPDT  CLI   0(R2),C'D'          WE WANT DEFAULT TO UPDATE DATA?\n         BNE   DEFNOACC            NO. GO ON\n         OI    FLAG1,FLAGUPDT      SET UP FOR DEFAULT TO UPDATE DATA\n         B     FINDDATA\nDEFNOACC CLI   0(R2),C'0'          WE WANT DEFAULT TO NO ACCESS?\n         BNE   NOPASSWD            NO. GO ON\n         OI    FLAG0,FLAGNONE      SET UP FOR DEFAULT TO NO ACCESS\n         B     FINDDATA\nNOPASSWD CLI   0(R2),C'N'          WE WANT TO SET ACEENPWD BIT?\n         BNE   GROUPACC            NO. GO ON\n         OI    FLAG0,FLAGNPWD      SET ACEENPWD BIT\n         B     FINDDATA\nGROUPACC CLI   0(R2),C'G'          WE WANT TO SET GROUPACC BIT?\n         BNE   DEFREAD             NO. GO ON\n         OI    FLAG0,FLAGGRPA      SET GROUP ACCESS BIT\n         B     FINDDATA\nDEFREAD  CLI   0(R2),C'R'          WE WANT DEFAULT TO READ DATA ?\n         BNE   FINDDATA            NO. GO ON\n         OI    FLAG1,FLAGREAD      SET UP FOR DEFAULT TO READ DATA\n* --- FLAG CHOSEN, GET THE ACEE. ------------------------------------ *\nFINDDATA L     R5,X'10'            POINT TO THE CVT.\n         L     R5,0(,R5)           POINT TO TCB WORDS.\n         L     R5,12(,R5)          POINT TO MY ASCB.\n         USING ASCB,R5             (TELL ASSEMBLER).\n         L     R5,ASCBASXB         POINT TO MY ASXB.\n         USING ASXB,R5             (TELL ASSEMBLER).\n         L     R5,ASXBSENV         POINT TO MY ACEE.\n         USING ACEE,R5             (TELL ASSEMBLER).\n* --- WE'RE IN THE ACEE.  NOW DO IT. -------------------------------- *\n* --- FIRST, DETERMINE IF WE'RE TURNING STUFF OFF OR ON. ------------ *\nDOIT     DS    0H\n         TM    FLAG2,FLAG2ON           ON?\n         BO    ON                      YES. GO TO SETTING ON.\n         TM    FLAG2,FLAG2OFF          OFF?\n         BO    OFF                     YES. GO TO SETTING OFF.\n         B     RETURN                  NO FLAG, NO CHANGE.\n* --- WE'RE TURNING STUFF ON. --------------------------------------- *\nON       DS    0H\n         MODESET KEY=ZERO\nSPECON   TM    FLAG1,FLAGSPEC\n         BNO   OPERON\n         OI    ACEEFLG1,ACEESPEC\n         B     ENDMOD\nOPERON   TM    FLAG1,FLAGOPER\n         BNO   AUDTON\n         OI    ACEEFLG1,ACEEOPER\n         B     ENDMOD\nAUDTON   TM    FLAG1,FLAGAUDT\n         BNO   RACFON\n         OI    ACEEFLG1,ACEEAUDT\n         B     ENDMOD\nRACFON   TM    FLAG1,FLAGRACF\n         BNO   PRIVON\n         OI    ACEEFLG1,ACEERACF\n         B     ENDMOD\nPRIVON   TM    FLAG0,FLAGPRIV\n         BNO   ALTRON\n         OI    ACEEFLG1,ACEEPRIV\n         B     ENDMOD\nALTRON   TM    FLAG1,FLAGALTR\n         BNO   CNTLON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEALTR\n         B     ENDMOD\nCNTLON   TM    FLAG1,FLAGCNTL\n         BNO   UPDTON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEECNTL\n         B     ENDMOD\nUPDTON   TM    FLAG1,FLAGUPDT\n         BNO   NOACCON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEUPDT\n         B     ENDMOD\nNOACCON  TM    FLAG0,FLAGNONE\n         BNO   NPWDON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEENONE\n         B     ENDMOD\nNPWDON   TM    FLAG0,FLAGNPWD\n         BNO   GACCON\n         OI    ACEEFLG3,ACEENPWR\n         B     ENDMOD\nGACCON   TM    FLAG0,FLAGGRPA\n         BNO   READON\n         OI    ACEEFLG3,ACEEGRPA\n         B     ENDMOD\nREADON   TM    FLAG1,FLAGREAD\n         BNO   ENDMOD\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEREAD\n         B     ENDMOD\n* --- WE'RE TURNING STUFF OFF. -------------------------------------- *\nOFF      DS    0H\n         MODESET KEY=ZERO\nSPECOFF  TM    FLAG1,FLAGSPEC\n         BNO   OPEROFF\n         NI    ACEEFLG1,255-ACEESPEC\n         B     ENDMOD\nOPEROFF  TM    FLAG1,FLAGOPER\n         BNO   AUDTOFF\n         NI    ACEEFLG1,255-ACEEOPER\n         B     ENDMOD\nAUDTOFF  TM    FLAG1,FLAGAUDT\n         BNO   RACFOFF\n         NI    ACEEFLG1,255-ACEEAUDT\n         B     ENDMOD\nRACFOFF  TM    FLAG1,FLAGRACF\n         BNO   PRIVOFF\n         NI    ACEEFLG1,255-ACEERACF\n         B     ENDMOD\nPRIVOFF  TM    FLAG0,FLAGPRIV\n         BNO   ALTROFF\n         NI    ACEEFLG1,255-ACEEPRIV\n         B     ENDMOD\nALTROFF  TM    FLAG1,FLAGALTR\n         BNO   CNTLOFF\n         NI    ACEEFLG2,255-ACEEALTR\n         B     ENDMOD\nCNTLOFF  TM    FLAG1,FLAGCNTL\n         BNO   UPDTOFF\n         NI    ACEEFLG2,255-ACEECNTL\n         B     ENDMOD\nUPDTOFF  TM    FLAG1,FLAGUPDT\n         BNO   NOACCOFF\n         NI    ACEEFLG2,255-ACEEUPDT\n         B     ENDMOD\nNOACCOFF TM    FLAG0,FLAGNONE\n         BNO   NPWDOFF\n         NI    ACEEFLG2,255-ACEENONE\n         B     ENDMOD\nNPWDOFF  TM    FLAG0,FLAGNPWD\n         BNO   GACCOFF\n         NI    ACEEFLG3,255-ACEENPWR\n         B     ENDMOD\nGACCOFF  TM    FLAG0,FLAGGRPA\n         BNO   READOFF\n         NI    ACEEFLG3,255-ACEEGRPA\n         B     ENDMOD\nREADOFF  TM    FLAG1,FLAGREAD\n         BNO   ENDMOD\n         NI    ACEEFLG2,255-ACEEREAD\nENDMOD   DS    0H\n         MODESET KEY=NZERO\n         MVI   0(R2),X'00'             MAKE SURE THIS ADDRESS IS\n         MVI   1(R2),X'00'               CLEAN FOR NEXT USE\n         DROP  R5\nRETURN   L     R13,SAVE+4              E\n         LM    R14,R12,12(R13)           X\n         SR    R15,R15                     I\n         BR    R14                           T\n         LTORG\n         DS    F\n*  INTERNALLY DEFINED FLAGS\nSAVEACON DC    16F'0'\nFLAG0    DC    X'00'\nFLAGNPWD EQU   B'10000000'             NO PASSWORD REQUIRED\nFLAGGRPA EQU   B'01000000'             GROUP AND USERID IN ACCESS LIST\nFLAGNONE EQU   B'00100000'             NONE    ACEEFLG2\nFLAGPRIV EQU   B'00010000'             STC PRIVILEGED ATTRIBUTE\nFLAG1    DC    X'00'\nFLAGSPEC EQU   B'10000000'             SPECIAL\nFLAGOPER EQU   B'01000000'             OPERATIONS\nFLAGAUDT EQU   B'00100000'             AUDITOR\nFLAGRACF EQU   B'00010000'             RACF    ACEEFLG1\nFLAGALTR EQU   B'00001000'             ALTER   ACEEFLG2\nFLAGCNTL EQU   B'00000100'             CONTROL ACEEFLG2\nFLAGUPDT EQU   B'00000010'             UPDATE  ACEEFLG2\nFLAGREAD EQU   B'00000001'             READ    ACEEFLG2\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\nSAVE     DS    9D\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           MAP THE CVT.\n         IHAASCB LIST=YES          MAP THE ASCB.\n         IHAASXB LIST=YES          MAP THE ASXB.\n         IHAACEE                   MAP THE ACEE.\n         END   RLOAD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RLOADOLD": {"ttr": 12289, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RLOAD    TITLE 'RACF LOAD ATTRIBUTES                            '\n         MACRO\n&NAME    REGS\n         LCLA  &I\n&I       SETA  0\n.LUP     ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE 15).LUP\n         MEND\n         SPACE 3\nRLOAD    CSECT\nRLOAD    AMODE 31\nRLOAD    RMODE 24\n         REGS\n         USING RLOAD,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nHEAD0    DC    AL1(HEADL)          EXCLUSIVE LENGTH OF HEADER.\nHEAD     DC    C' RLOAD - &SYSDATE - &SYSTIME -'\n         DC    C'                                         '\n         DC    C'             '\n         DC    C'                   '\nHEADL    EQU   *-HEAD\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING RLOAD,R12           (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n         SPACE 1\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    RLDSTART            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         CLI   0(R2),C'S'          SPECIAL?\n         BNE   RETURN              B IF NOT.\n* ------------------------------------------------------------- *\n*     DO IT TO IT.                                              *\n* ------------------------------------------------------------- *\nRLDSTART L     R5,X'10'            POINT TO THE CVT.\n         L     R5,0(,R5)           POINT TO TCB WORDS.\n         L     R5,12(,R5)          POINT TO MY ASCB.\n         USING ASCB,R5             (TELL ASSEMBLER).\n         L     R5,ASCBASXB         POINT TO MY ASXB.\n         USING ASXB,R5             (TELL ASSEMBLER).\n         L     R5,ASXBSENV         POINT TO MY ACEE.\n         USING ACEE,R5             (TELL ASSEMBLER).\nDOIT     DS    0H\n         MODESET KEY=ZERO\n         OI    ACEEFLG1,ACEESPEC   GET ATTRIBUTE\n         MODESET KEY=NZERO\n         DROP  R5\nRETURN   L     R13,SAVE+4             E\n         LM    R14,R12,12(R13)          X\n         SR    R15,R15                    I\n         BR    R14                          T\nSAVE     DS    9D\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           MAP THE CVT.\n         IHAASCB LIST=YES          MAP THE ASCB.\n         IHAASXB LIST=YES          MAP THE ASXB.\n         IHAACEE                   MAP THE ACEE.\n         END   RLOAD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RLOAD1ST": {"ttr": 12292, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "RLOAD    TITLE 'RACF SWITCH ATTRIBUTES                          '\n*  YOU'VE GOT TO FIGURE OUT HOW THIS PROGRAM WORKS BY LOOKING AT THE\n*  CODE.  SORRY.  I'M NOT GOING TO HELP YOU ANY MORE.\n         MACRO\n&NAME    REGS\n         LCLA  &I\n&I       SETA  0\n.LUP     ANOP\nR&I      EQU   &I\n&I       SETA  &I+1\n         AIF   (&I LE 15).LUP\n         MEND\n         SPACE 3\nRLOAD    CSECT\nRLOAD    AMODE 31\nRLOAD    RMODE 24\n         REGS\n         USING RLOAD,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' RLOAD - &SYSDATE - &SYSTIME -'\n         DC    C'     --------------------------------    '\n         DC    C'             '\n         DC    C'                   '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING RLOAD,R12           (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n         SPACE 1\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    FINDDATA            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     OI    0(R2),C' '          UPPERCASE.\n         OI    1(R2),C' '          UPPERCASE.\n* --- PARMS GOTTEN AT THIS POINT.  ARE WE TURNING ATTRIBUTES -------- *\n* --- GLOBALLY OFF, OR GLOBALLY ON ? -------------------------------- *\nSWOFF    CLI   1(R2),C'F'          ARE WE TURNING ATTRIBUTES OFF?\n         BNE   SWON                NO. DEFAULT TO TURN THEM ON.\n         OI    FLAG2,FLAG2OFF      PUT THE PGM INTO \"TURN OFF\" MODE\n         B     SETFLAGS            GO SET ATTRIBUTE FLAGS\nSWON     OI    FLAG2,FLAG2ON       PUT THE PROGRAM INTO \"TURN ON\" MODE\n         TM    FLAG2,FLAG2OFF+FLAG2ON    IMPOSSIBLE - CAN'T BE BOTH\n         BNO   SETFLAGS            NO PROBLEM - TEST ATTRIBS\n         NI    FLAG2,255-FLAG2OFF  RESOLVE THE CONTRADICTION TO \"ON\"\n* --- WHAT ATTRIBUTE ARE WE SWITCHING WITH THIS INVOCATION ? -------- *\nSETFLAGS DS    0H\nSPECIAL  CLI   0(R2),C'S'          WE WANT SPECIAL ?\n         BNE   OPER                NO. GO ON\n         OI    FLAG1,FLAGSPEC      SET UP FOR SPECIAL\n         B     FINDDATA\nOPER     CLI   0(R2),C'O'          WE WANT OPERATIONS ?\n         BNE   AUDITOR             NO. GO ON\n         OI    FLAG1,FLAGOPER      SET UP FOR OPERATIONS\n         B     FINDDATA\nAUDITOR  CLI   0(R2),C'U'          WE WANT AUDITOR ?\n         BNE   DEFALTER            NO. GO ON\n         OI    FLAG1,FLAGAUDT      SET UP FOR AUDITOR\n         B     FINDDATA\nDEFALTER CLI   0(R2),C'A'          WE WANT DEFAULT TO ALTER DATA ?\n         BNE   DEFCNTL             NO. GO ON\n         OI    FLAG1,FLAGALTR      SET UP FOR DEFAULT IS ALTER\n         B     FINDDATA\nDEFCNTL  CLI   0(R2),C'C'          WE WANT DEFAULT TO CONTROL ?\n         BNE   DEFUPDT             NO. GO ON\n         OI    FLAG1,FLAGCNTL      SET UP FOR DEFAULT TO CONTROL\n         B     FINDDATA\nDEFUPDT  CLI   0(R2),C'D'          WE WANT DEFAULT TO UPDATE DATA?\n         BNE   DEFREAD             NO. GO ON\n         OI    FLAG1,FLAGUPDT      SET UP FOR DEFAULT TO UPDATE DATA\n         B     FINDDATA\nDEFREAD  CLI   0(R2),C'R'          WE WANT DEFAULT TO READ DATA ?\n         BNE   FINDDATA            NO. GO ON\n         OI    FLAG1,FLAGREAD      SET UP FOR DEFAULT TO READ DATA\n* --- FLAG CHOSEN, GET THE ACEE. ------------------------------------ *\nFINDDATA L     R5,X'10'            POINT TO THE CVT.\n         L     R5,0(,R5)           POINT TO TCB WORDS.\n         L     R5,12(,R5)          POINT TO MY ASCB.\n         USING ASCB,R5             (TELL ASSEMBLER).\n         L     R5,ASCBASXB         POINT TO MY ASXB.\n         USING ASXB,R5             (TELL ASSEMBLER).\n         L     R5,ASXBSENV         POINT TO MY ACEE.\n         USING ACEE,R5             (TELL ASSEMBLER).\n* --- WE'RE IN THE ACEE.  NOW DO IT. -------------------------------- *\n* --- FIRST, DETERMINE IF WE'RE TURNING STUFF OFF OR ON. ------------ *\nDOIT     DS    0H\n         TM    FLAG2,FLAG2ON\n         BO    ON\n         TM    FLAG2,FLAG2OFF\n         BO    OFF\n         B     RETURN                  NO FLAG, NO CHANGE.\n* --- WE'RE TURNING STUFF ON. --------------------------------------- *\nON       DS    0H\n         MODESET KEY=ZERO\nSPECON   TM    FLAG1,FLAGSPEC\n         BNO   OPERON\n         OI    ACEEFLG1,ACEESPEC\n         B     ENDMOD\nOPERON   TM    FLAG1,FLAGOPER\n         BNO   AUDTON\n         OI    ACEEFLG1,ACEEOPER\n         B     ENDMOD\nAUDTON   TM    FLAG1,FLAGAUDT\n         BNO   ALTRON\n         OI    ACEEFLG1,ACEEAUDT\n         B     ENDMOD\nALTRON   TM    FLAG1,FLAGALTR\n         BNO   CNTLON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEALTR\n         B     ENDMOD\nCNTLON   TM    FLAG1,FLAGCNTL\n         BNO   UPDTON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEECNTL\n         B     ENDMOD\nUPDTON   TM    FLAG1,FLAGUPDT\n         BNO   READON\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEUPDT\n         B     ENDMOD\nREADON   TM    FLAG1,FLAGREAD\n         BNO   ENDMOD\n         MVI   ACEEFLG2,X'00'\n         OI    ACEEFLG2,ACEEREAD\n         B     ENDMOD\n* --- WE'RE TURNING STUFF OFF. -------------------------------------- *\nOFF      DS    0H\n         MODESET KEY=ZERO\nSPECOFF  TM    FLAG1,FLAGSPEC\n         BNO   OPEROFF\n         NI    ACEEFLG1,255-ACEESPEC\n         B     ENDMOD\nOPEROFF  TM    FLAG1,FLAGOPER\n         BNO   AUDTOFF\n         NI    ACEEFLG1,255-ACEEOPER\n         B     ENDMOD\nAUDTOFF  TM    FLAG1,FLAGAUDT\n         BNO   ALTROFF\n         NI    ACEEFLG1,255-ACEEAUDT\n         B     ENDMOD\nALTROFF  TM    FLAG1,FLAGALTR\n         BNO   CNTLOFF\n         NI    ACEEFLG2,255-ACEEALTR\n         OI    ACEEFLG2,ACEENONE\n         B     ENDMOD\nCNTLOFF  TM    FLAG1,FLAGCNTL\n         BNO   UPDTOFF\n         NI    ACEEFLG2,255-ACEECNTL\n         OI    ACEEFLG2,ACEENONE\n         B     ENDMOD\nUPDTOFF  TM    FLAG1,FLAGUPDT\n         BNO   READOFF\n         NI    ACEEFLG2,255-ACEEUPDT\n         OI    ACEEFLG2,ACEENONE\n         B     ENDMOD\nREADOFF  TM    FLAG1,FLAGREAD\n         BNO   ENDMOD\n         NI    ACEEFLG2,255-ACEEREAD\n         OI    ACEEFLG2,ACEENONE\nENDMOD   DS    0H\n         MODESET KEY=NZERO\n         DROP  R5\nRETURN   L     R13,SAVE+4             E\n         LM    R14,R12,12(R13)          X\n         SR    R15,R15                    I\n         BR    R14                          T\nFLAG1    DC    X'00'\nFLAGSPEC EQU   B'10000000'             SPECIAL\nFLAGOPER EQU   B'01000000'             OPERATIONS\nFLAGAUDT EQU   B'00100000'             AUDITOR\nFLAGALTR EQU   B'00001000'             ALTER   ACEEFLG2\nFLAGCNTL EQU   B'00000100'             CONTROL ACEEFLG2\nFLAGUPDT EQU   B'00000010'             UPDATE  ACEEFLG2\nFLAGREAD EQU   B'00000001'             READ    ACEEFLG2\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN FLAG ON\nFLAG2OFF EQU   B'01000000'             TURN FLAG OFF\nSAVE     DS    9D\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           MAP THE CVT.\n         IHAASCB LIST=YES          MAP THE ASCB.\n         IHAASXB LIST=YES          MAP THE ASXB.\n         IHAACEE                   MAP THE ACEE.\n         END   RLOAD\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPECIAL": {"ttr": 12296, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "XXXX,   GOOD LUCK !!\n\nTHIS JOB ASSEMBLES A SMALL PGM THAT FLIPS ON THE SPECIAL BIT IN\nTHE ACEE OF THE RUNNING JOB GIVING IT THE AUTHORITY TO GIVE ANY\nUSERID (XXXXXXX) RACF SPECIAL (PERMANENTLY).  ONCE THIS JOB ENDS\nTHE RUNNING USERID HAS NO OVERT AUTHORITY (UNLESS THEY ARE XXXXXXX)\n.\n.\nCHANGE XXXXXXX TO THE USERID TO BE GIVEN SPECIAL\nNEED AN OBJECT LIBRARY  FB/80/32720\nNEED AN APF AUTHORIZED LIBRARY\n.\nREGARDS,\n.\n.  THIS IS A VERY DANGEROUS PIECE OF CODE (FROM A SECURITY\n.  PERSPECTIVE).  GUARD IT WELL     :-D\n.\n.\n.\n.\n// PROVIDE\n// A VALID JOBCARD\n// HERE\n//*********************************************************************\n//*                ASSEMBLE  STEP                                     *\n//*********************************************************************\n//ASM     EXEC PGM=ASMA90,REGION=4096K,\n//             PARM='DECK'\n//SYSLIN   DD  DUMMY\n//SYSIN    DD  *\nSPECIAL  CSECT\n         SAVE  (14,12)\n         LR    R12,R15\n         USING SPECIAL,R12\n         B     GO\n         DC    C' SPECIAL    V1.0  -  RDH &SYSDATE'\nGO       ST    R13,SAVEAREA+4\n         LA    R13,SAVEAREA\n         MODESET KEY=ZERO\n         L     R3,X'224'                      ADDR OF ASCB\n         LA    R3,0(,R3)                      ASCB\n         L     R4,X'6C'(,R3)                  ADDR OF ASXB\n         LA    R4,0(R4)                       ASXB\n         L     R5,X'C8'(,R4)                  ADDR OF ACEE\n         LA    R5,0(R5)                       ACEE\n         OI    X'26'(R5),X'80'                OR ON SPECIAL BIT\n*        EX    R0,*            COMMENTED OUT ABEND (TO LOOK IN DUMP)\nENDIT    L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n         DS    0D\nSAVEAREA DS    18F\n         YREGS\n         END\n/*\n//SYSPUNCH DD DSN=WHATEVER.OBJ(SPECIAL),DISP=OLD\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.MODGEN,DISP=SHR\n//******************************************************************\n//*             LINK STEP                                          *\n//******************************************************************\n//LINK     EXEC PGM=IEWL,PARM='LET,LIST,NCAL,XREF'\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(5,5))\n//SYSLMOD  DD  DSN=AN.APF.AUTH.LIBRARY,DISP=SHR\n//OBJECT   DD  DSN=WHATEVER.OBJ(SPECIAL),DISP=OLD\n//SYSLIN   DD  *\n INCLUDE OBJECT(SPECIAL)\n SETCODE AC(1)\n NAME    SPECIAL(R)\n/*\n//STEP001   EXEC PGM=IKJEFT01\n//*       PROVES USERID DOESN'T (YET) HAVE SPECIAL\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  *\n LU XXXXXXX\n//******************************************************************\n//*             EXECUTE STEP                                       *\n//******************************************************************\n//*\n//RUNIT    EXEC PGM=SPECIAL,REGION=2M\n//*    DOES THE DEED\n//STEPLIB  DD  DSN=AN.APF.AUTH.LIBRARY,DISP=SHR\n//SYSABEND DD  SYSOUT=*\n//STEP003   EXEC PGM=IKJEFT01,COND=EVEN\n//*    GIVES USERID SPEC AND LIST IT\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  *\n ALU XXXXXXX SPEC\n LU XXXXXXX\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TOKGRUP": {"ttr": 12299, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TOKGRUP  TITLE 'TOKGRUP - CHANGE TOKEN SESSION OWNER GROUPID'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   TOKGRUP USERID                                    *\n*                   TOKGRUP -OFF                                      *\n*                                                                     *\n*       FUNCTION:   CHANGE PROCEDURE NAME IN ACEE.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nTOKGRUP  CSECT\n         USING TOKGRUP,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'TOKGRUP  VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         CLC   =C'-OFF',NEWID\n         BE    NOSURR\nISSURR   DS    0H\n         OI    FLAG2,FLAG2ON\n         B     PREP\nNOSURR   DS    0H\n         OI    FLAG2,FLAG2OFF\nPREP     DS    0H\n         LA    R8,1(,R8)           GET USERID LENGTH\n         STC   R8,NEWIDL           STORE IT AWAY\nKZ       MODESET KEY=ZERO\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         L     R1,X'A4'(,R1)       POINT TO ACEE UTOKEN\n         LA    R1,X'48'(,R1)       POINT TO SESSION OWNER GROUPID\n         TM    FLAG2,FLAG2OFF\n         BO    SURROFF\n         TM    FLAG2,FLAG2ON\n         BNO   KZ                  NO ACTION\nSURRNEW  DS    0H\n         MVC   0(8,R1),NEWID       CHANGE USERID\n         B     NZ\nSURROFF  DS    0H\n         MVC   0(8,R1),BLANKS      ASTERISK AND BLANKS\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNOID     DC    C'*       '\nNEWIDL   DC    XL1'00'\nNEWIDL1  DC    XL1'01'\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TOKUSER": {"ttr": 12545, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TOKUSER  TITLE 'TOKUSER - CHANGE TOKEN SESSION OWNER USERID'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   TOKUSER USERID                                    *\n*                   TOKUSER -OFF                                      *\n*                                                                     *\n*       FUNCTION:   CHANGE PROCEDURE NAME IN ACEE.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nTOKUSER  CSECT\n         USING TOKUSER,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'TOKUSER  VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         CLC   =C'-OFF',NEWID\n         BE    NOSURR\nISSURR   DS    0H\n         OI    FLAG2,FLAG2ON\n         B     PREP\nNOSURR   DS    0H\n         OI    FLAG2,FLAG2OFF\nPREP     DS    0H\n         LA    R8,1(,R8)           GET USERID LENGTH\n         STC   R8,NEWIDL           STORE IT AWAY\nKZ       MODESET KEY=ZERO\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         L     R1,X'A4'(,R1)       POINT TO ACEE UTOKEN\n         LA    R1,X'40'(,R1)       POINT TO SESSION OWNER USERID\n         TM    FLAG2,FLAG2OFF\n         BO    SURROFF\n         TM    FLAG2,FLAG2ON\n         BNO   KZ                  NO ACTION\nSURRNEW  DS    0H\n         MVC   0(8,R1),NEWID       CHANGE USERID\n         B     NZ\nSURROFF  DS    0H\n         MVC   0(8,R1),BLANKS      ASTERISK AND BLANKS\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNOID     DC    C'*       '\nNEWIDL   DC    XL1'00'\nNEWIDL1  DC    XL1'01'\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSUB": {"ttr": 12549, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TSUB     TITLE 'TSUB - MAINTAIN LWA-POINTED-TO INCORE TSO AUTH TABLES'\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   Program Name:   TSUB                                              *\n*                                                                     *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized except for the display    *\n*                   functions.                                        *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized.                      *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n* Short Function:   This program deals with existing TSO \"auth\"       *\n*                   tables that are pointed to by fields in the       *\n*                   LWA (Logon Work Area) which is created for a      *\n*                   TSO session at LOGON time.  These tables are      *\n*                   the actual tables that your TSO session uses      *\n*                   to determine program authorization.  Many of      *\n*                   the characteristics of these tables can be        *\n*                   changed or reset by the TSUB program.  The        *\n*                   changes that TSUB can do, are of two types:       *\n*                                                                     *\n*                   1.  Replacing or blanking any table entry.        *\n*                   2.  Altering the LWA flags or fields that         *\n*                       determine this table's properties.            *\n*                   3.  Effectively nullifying an entry by            *\n*                       putting a C'?' into it.  This effectively     *\n*                       removes the entry, without nullifying any     *\n*                       of the following table entries.               *\n*                                                                     *\n*                Details:                                             *\n*                                                                     *\n*                   1.  TSUB can substitute a different program name  *\n*                       or insert a blank entry into any valid slot   *\n*                       of a TSO \"auth\" table that belongs to your    *\n*                       TSO session.                                  *\n*                                                                     *\n*                       Blanking (not the last entry) is dangerous    *\n*                       (see below) because it invalidates all the    *\n*                       subsequent non-blank table entries.  But the  *\n*                       technique of blanking an entry can be used    *\n*                       carefully if you are sure of what you want    *\n*                       to accomplish.                                *\n*                                                                     *\n*                       But you can effectively nullify a table       *\n*                       entry without blanking it, using the          *\n*                       \"nullify\" function \"N\" instead of the         *\n*                       \"blanking\" function \"B\".  The nullifying      *\n*                       function inserts a C'?' into the slot,        *\n*                       allowing all following slots to still         *\n*                       work, since a ? entry is not a blank that     *\n*                       delimits the table.                           *\n*                                                                     *\n*                   2.  TSUB can change the characteristics of your   *\n*                       own session's TSO \"auth\" tables, that are     *\n*                       pointed to by the LWA, by means of changing   *\n*                       the LWA (Logon Work Area) settings for each   *\n*                       table.  For example, LWA table lengths can    *\n*                       be supplied or removed.  LWA flags marking    *\n*                       the table as coming from a STEPLIB can be     *\n*                       set, or removed.  Even the physical table     *\n*                       header can be altered to make the table       *\n*                       look as though it came from PARMLIB.          *\n*                                                                     *\n*   Introduction:   At LOGON time for a TSO session, the system       *\n*                   copies a set of the E2, E8, AP, and NS TSO        *\n*                   authorization tables into SP 252 protected Key 0  *\n*                   storage which lies in the TSO user's address      *\n*                   space.  These are the tables WHICH ARE ACTUALLY   *\n*                   USED by that TSO session, and their location is   *\n*                   pointed to in the LWA control block (Logon Work   *\n*                   Area).  The duration of these tables is for the   *\n*                   life of that TSO session.  TSO LOGON processing   *\n*                   creates both the LWA itself, and the copies of    *\n*                   the auth tables that are used. TSUB displays and  *\n*                   manipulates this copy of these tables--the ones   *\n*                   that are actually in use. Thus, changes to these  *\n*                   tables are effective immediately, and their       *\n*                   scope affects only the issuing TSO session.       *\n*                                                                     *\n*                   Where does TSO get these tables from, at LOGON    *\n*                   time?                                             *\n*                                                                     *\n*              Case 1.  The most commonly found source for the auth   *\n*                       tables pointed to in the LWA, is the \"common  *\n*                       storage\" tables created from the active       *\n*                       PARMLIB member IKJTSOxx.  Those are pointed   *\n*                       to by the TPVT control block + X'14' which    *\n*                       is the CTLT.  If the CTLT is the source of    *\n*                       the LWA tables, then lengths of the tables,   *\n*                       and the size of each entry, are copied from   *\n*                       the CTLT into the LWA (Logon Work Area).      *\n*                       Use the program called ASUB to directly       *\n*                       access the public tables from PARMLIB that    *\n*                       are pointed to by the CTLT (undocumented)     *\n*                       control block.  Our program, TSUB, accesses   *\n*                       the copy of those tables which is pointed to  *\n*                       by the LWA, which were created for the TSO    *\n*                       session at LOGON time, and which are unique   *\n*                       to the current TSO session.                   *\n*                                                                     *\n*              Case 2.  If a list of table entries for one or more    *\n*                       of the tables:  E2, E8, AP, or NS is not      *\n*                       found in the IKJTSOxx PARMLIB member that     *\n*                       is currently active, then the table in the    *\n*                       LWA is not copied from the IKJTABLS module    *\n*                       in LPALIB, but it is just pointed to.  Thus   *\n*                       in such a situation, TSUB cannot alter the    *\n*                       particular table.  The actual table is        *\n*                       located in PLPA, in that particular case.     *\n*                                                                     *\n*              Case 3.  If a copy of the IKJTABLS load module         *\n*                       containing csects IKJEFTE2, IKJEFTE8,         *\n*                       IKJEFTAP, and IKJEFTNS is found in an         *\n*                       APF-authorized STEPLIB that the TSO session   *\n*                       has access to (running as an APF authorized   *\n*                       STEPLIB only), then those E2, E8, NS, and AP  *\n*                       tables are copied into the LWA at LOGON       *\n*                       time, from that CSECT in the STEPLIB copy of  *\n*                       IKJTABLS.  Therefore the table entries in     *\n*                       the respective CSECTs of the IKJTABLS in the  *\n*                       authorized STEPLIB are the ones which are in  *\n*                       force for that user's TSO session.  But in    *\n*                       that case, no \"table lengths\" or \"number of   *\n*                       table entries\" from these tables, are         *\n*                       available.  The table is delimited by the     *\n*                       first blank entry in it.  This TSUB program   *\n*                       has the ability to blank any numbered table   *\n*                       entry.  Since a blank entry is a delimiter    *\n*                       for the entire table, and all entries after   *\n*                       the blank entry are no longer used, you       *\n*                       have to be very careful.  Therefore, when     *\n*                       blanking entries, you should usually blank    *\n*                       the last one only, unless you have a very     *\n*                       good reason to blank out a different entry,   *\n*                       other than the last one.  The good news is    *\n*                       that the effect of the TSUB program only      *\n*                       lasts for the duration of this LOGON, and     *\n*                       only for the userid that is currently running *\n*                       the TSUB program.                             *\n*                                                                     *\n*            Note - Tables copied from a CSECT in IKJTABLS do not     *\n*                   have lengths associated with them.  They are      *\n*                   delimited by a blank table entry at the end.      *\n*                   Therefore the copy of each such table pointed     *\n*                   to by the LWA, does not have any length           *\n*                   associated with it.  Therefore we can only        *\n*                   judge its length by looking at the first blank    *\n*                   entry that has been found by a forward scan.      *\n*                                                                     *\n*                   This program, TSUB, directly manipulates the      *\n*                   \"live\" authorization tables pointed to by the     *\n*                   LWA.  Supported tables are:  E2, E2, NS and       *\n*                   AP.  The public PP (Platform Program) table       *\n*                   and PC (Platform Command) table, not in the       *\n*                   LWA, are also supported by this program, if       *\n*                   they had been created by their presence in the    *\n*                   active IKJTSOxx PARMLIB member.                   *\n*                                                                     *\n*    Description:   Display an Auth Table entry from any of the       *\n*                   TSO/E program list tables:  IKJEFTE2, IKJEFTE8,   *\n*                   IKJEFTNS or IKJEFTAP that are in storage.  Or     *\n*                   display the entire table.  Or replace a numbered  *\n*                   entry with a new program name.  Or blank out      *\n*                   any numbered entry.  (Be very careful if you are  *\n*                   attempting to blank an entry.  Blanking an entry  *\n*                   invalidates ALL subsequent entries).  If you are  *\n*                   invoking a display function, then the entire      *\n*                   table is shown, unless you enter a number, and    *\n*                   then, only that slot is shown.  The tables        *\n*                   handled by this program are the actual tables     *\n*                   pointed to by the LWA of the issuing TSO/E        *\n*                   address space, and they lie in that user's        *\n*                   TSO/E address space (unless they were pointed to, *\n*                   and are from an IKJTABLS load module that is in   *\n*                   the LPA list.)                                    *\n*                                                                     *\n*       Function:   To substitute one new program name in the local   *\n*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n*                   IKJEFTAP, IKJEFTNS lists.  This is done to any    *\n*                   numbered entry of each table.  Or else merely to  *\n*                   display the contents of the entire table, or the  *\n*                   contents of any particular numbered entry.        *\n*                                                                     *\n*                   The effect of replacing any program name is       *\n*                   immediate.  The scope of the change, is just for  *\n*                   the issuing current TSO userid.                   *\n*                                                                     *\n*                   You can blank out any numbered entry in any of    *\n*                   the four tables.  But blanking an entry, will     *\n*                   invalidate all subsequent table entries which     *\n*                   follow the blanked entry slot.  So be careful!    *\n*                                                                     *\n*                   Better than blanking an entry, you can \"nullify\"  *\n*                   an entry, which inserts a \"?\" character into the  *\n*                   table entry instead of blanks.  The subsequent    *\n*                   table entries remain valid.  The \"nullify\"        *\n*                   function is \"N\".  The \"blanking\" function is      *\n*                   \"B\".                                              *\n*                                                                     *\n*                   Or, you can use this program to list the complete *\n*                   contents of any of the auth tables which are      *\n*                   incore.                                           *\n*                                                                     *\n*                   Additionally, as described below, you can change  *\n*                   fields in the LWA which characterize the          *\n*                   individual tables--size characteristics and       *\n*                   whether or not the table came from STEPLIB.       *\n*                                                                     *\n*         Syntax:   TSUB ttA nnn pgmname                              *\n*                                                                     *\n*                   Where tt is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD  entry in IKJTSOxx        *\n*                   E8 - IKJEFTE8 = AUTHPGM  entry in IKJTSOxx        *\n*                   AP - IKJEFTAP = AUTHTSF  entry in IKJTSOxx        *\n*                   NS - IKJEFTNS = NOTBKGND entry in IKJTSOxx        *\n*                   PP -            PLATPGM  table in IKJTSOxx        *\n*                   PC -            PLATCMD  table in IKJTSOxx        *\n*                                                                     *\n*                   If the action code is B (blank the numbered       *\n*                   entry), then no program name is required,         *\n*                   but a number is required.  When blanking a        *\n*                   table entry, BE VERY CAREFUL !!!!!                *\n*                                                                     *\n*                   If the action code is N (nullify the numbered     *\n*                   entry), then no program name is required,         *\n*                   but a number is required.  Nullifying a table     *\n*                   entry will insert a \"?\" (question mark) into      *\n*                   that particular table slot, effectively           *\n*                   nullifying that entry, but NOT the entries        *\n*                   which follow, since blanks are the table          *\n*                   delimiters.                                       *\n*                                                                     *\n*     IMPORTANT  >  Under most circumstances, you should use the      *\n*       N O T E  >  \"nullify\" function \"N\" instead of the \"blanking\"  *\n*                >  function \"B\".  N will only nullify that one       *\n*                >  table entry, leaving all subsequent entries       *\n*                >  valid.  Blanking an entry will leave all          *\n*                >  subsequent table entries invalid.                 *\n*                                                                     *\n*       WARNING  >  If you blank out an entry which is not the        *\n*       WARNING  >  last entry in the particular table, then          *\n*       WARNING  >  all subsequent entries in that table are          *\n*       WARNING  >  rendered invalid!  It is best to restore          *\n*       WARNING  >  a non-blank entry to that slot, using the         *\n*       WARNING  >  ttR function, where tt is the table code.         *\n*                   Then you will be able to display the rest         *\n*                   of the table using the ttD function.              *\n*                                                                     *\n*                   If the action code is D (display the given        *\n*                   entry), then no program name is required.         *\n*                   The default action is to display the entire       *\n*                   table, unless a number is entered.  If a          *\n*                   number is present, then only that entry           *\n*                   number is displayed.  If the number is larger     *\n*                   than the number of entries in that particular     *\n*                   table, then an informative error message is       *\n*                   issued, and the program ends with code = 4.       *\n*                                                                     *\n*                   If the action code is R (replace the program      *\n*                   name) then a number (the table entry number)      *\n*                   and a program name are required.  If you want     *\n*                   to blank that slot, instead of putting a          *\n*                   program name into it, then use action code B.     *\n*                   But if you are blanking any slot which is not     *\n*                   the last slot, then PLEASE HEED THE WARNING       *\n*                   THAT IS ABOVE.                                    *\n*                                                                     *\n*                   If the action code is H, then TSUB will replace   *\n*                   the last 8 bytes of the table header with the     *\n*                   literal: C' PARMLIB', as if the table were        *\n*                   created from the IKJTSOxx member in PARMLIB.      *\n*                                                                     *\n*                   If the action code is L, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus all the potential blank   *\n*                   entries at the end of the table.  So this number  *\n*                   will often reflect more entries than TSO will     *\n*                   actually use.  Additionally, TSUB can change or   *\n*                   blank any one of these entries, because TSUB's    *\n*                   range depends on the number of entries indicated  *\n*                   by the LWA length.  (If there's no length, then   *\n*                   TSUB uses the length of all non-blank entries     *\n*                   plus the first blank, if it exists.)              *\n*                                                                     *\n*                   If the action code is M, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus one blank entry, if any   *\n*                   perceived blank entries exist at the end of the   *\n*                   table.                                            *\n*                                                                     *\n*                   If the action code is Z, then TSUB will look at   *\n*                   the LWA length value for that table, and it will  *\n*                   zero that length value, whether it already was    *\n*                   zero, or not.                                     *\n*                                                                     *\n*                   If the action code is S, then TSUB will make      *\n*                   the given table look like it came from STEPLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will not overlay the session's auth table.        *\n*                                                                     *\n*                   If the action code is P, then TSUB will make      *\n*                   the given table look like it came from PARMLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will overlay the session's auth table.            *\n*                                                                     *\n*                   If the action code is X, then TSUB will display   *\n*                   all the LPA address ranges (undocumented).        *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to.  The condition is         *\n*                   reported.  If these keywords WERE coded in the    *\n*                   IKJTSOxx member of PARMLIB which is currently     *\n*                   active, then the PC and PP table codes in TSUB    *\n*                   WILL ACT ON THE COMMON STORAGE COPY of THESE      *\n*                   TWO TABLES ONLY.                                  *\n*                                                                     *\n*  Recommendation:  First list the entire table using the \"D\"         *\n*                   action code, and then decide which entry, by      *\n*                   number, that you want to replace.                 *\n*                                                                     *\n*                   Then use the \"R\" action code, to replace the      *\n*                   particular numbered entry you have chosen.        *\n*                                                                     *\n*            Note:  The E2, E8, AP, or NS table which is being        *\n*                   used by the system, can come from either the      *\n*                   IKJTSOxx PARMLIB entry, or it can come from       *\n*                   an IKJTABLS load module which was running         *\n*                   from an APF authorized library as a STEPLIB,      *\n*                   or a default IKJTABLS entry in LPALIB.  Each      *\n*                   CSECT is copied into the TSO user's address       *\n*                   space, albeit in a protected key, and pointed     *\n*                   to by the user's LWA, except in the case of an    *\n*                   IKJTABLS CSECT that is in LPALIB.  These are      *\n*                   the actual auth tables, E2, E8, AP, NS, in        *\n*                   use by that TSO address space.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2008/09/10 - 1.0 - Initial version - Got it to work.             *\n*                       TSUB can blank any slot.  I'm allowing        *\n*                       that for now, because the scope of the        *\n*                       possible damage is only for that TSO          *\n*                       session as long as it is logged on.           *\n*                       The LWA auth tables are all reset by          *\n*                       logging on to that TSO session again.         *\n*                                                                     *\n*    2008/09/15 - 1.0 - Filled in and cleaned up some of the doc.     *\n*                                                                     *\n*    2009/01/28 - 1.0 - Added action codes: H, L, Z, S, P             *\n*                                                                     *\n*         All action codes except D need APF-authorization.           *\n*                                                                     *\n*         What they do:                                               *\n*                                                                     *\n*            H - Add PARMLIB-like table header, in 2nd 8-bytes.       *\n*            L - Supply length of table in LWA with ALL the blanks.   *\n*            M - Supply length of table to first blank, in LWA.       *\n*            Z - Zero the table length marked in the LWA.             *\n*            S - Mark that the table came from STEPLIB, so            *\n*                 someone (else's) PARMLIB UPDATE(xx) won't           *\n*                 overlay it.                                         *\n*            P - Turn off STEPLIB bit in LWA and mark that it         *\n*                 came from PARMLIB.  Now PARMLIB UPDATE(xx)          *\n*                 will overlay the table.                             *\n*            X - (undocumented) Gives LPA storage range display.      *\n*                                                                     *\n*         Other action codes are: (these are the original ones)       *\n*                                                                     *\n*            D - Display table entries by slot number.                *\n*            R - Replace the entry in a given slot, by another one.   *\n*            B - Blank a given table entry, by slot number.           *\n*            N - Nullify a given table entry, by slot number.         *\n*                 (It works by inserting a ? (question mark)          *\n*                  into that table slot.)                             *\n*                                                                     *\n*    2009/02/01 - 1.1 - Fourth and fifth base registers.              *\n*                                                                     *\n*         Improved message clarity.  Told messages to show states,    *\n*          \"before\" and \"after\" any changes were made.                *\n*                                                                     *\n*    2009/02/12 - 1.1 - Fix bug in calculating length of NS table.    *\n*         Fix convoluted logic in calculating table lengths.          *\n*                                                                     *\n*    2009/02/13 - 1.1 - Measure perceived blanks after logical end    *\n*         of the table.  For NS table, blank an entry with X'0000'    *\n*         for the \"length\" field, instead of X'FFFF', to see more     *\n*         perceived blanks, if there are any.                         *\n*                                                                     *\n*    2009/02/16 - 1.1 - Added option M to tailor length to reflect    *\n*         only up to the first blank.  Changed option L to make the   *\n*         LWA length equal to all non-blank entries plus all blank    *\n*         entries too.  Thus the table can be expanded, even if       *\n*         lengths are there.                                          *\n*                                                                     *\n*    2009/02/18 -1.1.31 Cosmetic changes. Put in Version numbers.     *\n*                                                                     *\n*    2009/02/20 -1.1.32 Improved displays for PC and PP tables.       *\n*                       Made sure S,P,H,L,M,Z options for PC and PP   *\n*                       actually do nothing, and say they do nothing. *\n*                       Made \"error display\" messages better.         *\n*                                                                     *\n*    2009/02/24 -1.1.33 Better messages if PLATPGM or PLATCMD tables  *\n*                       are missing.                                  *\n*                                                                     *\n*    2009/03/03 -1.1.34 More cosmetic changes in title & messages.    *\n*                                                                     *\n*    2011/03/24 -1.1.37 If an installation has an \"authorization SVC\" *\n*                       already installed, put in a provision to use  *\n*                       it with conditional assembly.  Of course,     *\n*                       you have to code your own appropriate         *\n*                       invocation code for the SVC, and its number,  *\n*                       in the AUTHON and AUTHOFF macros provided     *\n*                       in this code here.  Otherwise, SETC the &SVC  *\n*                       variable to 'NOSVC'                           *\n*                                                                     *\n*    2016/10/30 -1.1.38 A Blanking function on a table entry will     *\n*                       invalidate all subsequent table entries.      *\n*                       So I introduced a \"nullify\" function \"N\"      *\n*                       which will put a question mark, followed      *\n*                       by seven blanks, into a table entry,          *\n*                       effectively nullifying that entry, without    *\n*                       nullifying all the following entries too.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n***********************************************************************\n*  If you are turning on authorization for this program using a\n*   \"trick SVC\", then do   &SVC  SETC  'SVC'\n*   and put your SVC invocation code in the AUTHON and AUTHOFF macros.\n*\n         LCLC  &SVC,&SVCX\n&SVC     SETC  'NOSVC'\n*&SVC     SETC  'SVC'\nSVNO     EQU   242\n&SVCX    SETC  '242'\n         AIF   ('&SVC' EQ 'NOSVC').SVTEST1\n         AIF   ('&SVC' EQ 'SVC').SVTEST1\n&SVC     SETC  'NOSVC'\n.SVTEST1 ANOP\n*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         AIF   ('&SVC' EQ 'NOSVC').NOSVC01\n*  Put your own SVC Auth turn on code here.....\n         MACRO\n&AON     AUTHON\n         ST    R1,SAVER1C\n         L     R1,=C'AUTH'\n         SVC   SVNO\n         L     R1,SAVER1C\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Put your own SVC Auth turn off code here.....\n         MACRO\n&AOFF    AUTHOFF\n         ST    R1,SAVER1C\n         L     R1,=C'NONE'\n         SVC   SVNO\n         L     R1,SAVER1C\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n.NOSVC01 ANOP\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nTSUB     CSECT\nTSUB     AMODE 31\nTSUB     RMODE 24\n         USING *,R15                                                  *\n         B     BEGINN               Eyecatcher\nMAXBLANK DC    F'120'        Guess of max number of blanks after table\n         DC    CL5'TSUB '\nVERS#    DC    CL10'Ver 1.38'\n         DC    CL1' '\n         AIF   ('&SVC' EQ 'SVC').NOSVC00\n         DC    C'&SVC'\n.NOSVC00 ANOP\n         AIF   ('&SVC' EQ 'NOSVC').SVC00\n         DC    C'&SVC'\n         DC    C' '\n         DC    C'&SVCX'\n.SVC00   ANOP\n         DC    CL18' - &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         DROP  R15\n         USING TSUB,R12,R11,R10,R6,R7  Set up base registers.\n         STM   R14,R12,12(R13)\n         LR    R12,R15                 Set up base registers.\n         ST    R1,SAVEPARM          Save CPPL pointer to use later.\n         LA    R11,4095(,R12)       Second base.\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)       Third base.\n         LA    R10,1(,R10)\n         LA    R6,4095(,R10)        Fourth base.\n         LA    R6,1(,R6)\n         LA    R7,4095(,R6)         Fifth base.\n         LA    R7,1(,R7)\n         LA    R1,SAVEAREA          Point to new save area\n         ST    R1,8(,R13)           Forward save area chain pointer\n         ST    R13,4(,R1)           Backward save area chain pointer\n         LR    R13,R1               New save area address\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'               Non-reentrant save area\n* -----------------------\nINITCON  DS    0H                   Initialize constants to be sure.\n         MVI   OFFFLAG,X'00'\n         MVI   PLATFLG,X'00'\n         MVI   MEASFLG,X'00'\n         MVI   LPAFLAG,X'00'\n         MVI   SHBLFLG,X'00'\n         MVI   LPADFLG,X'00'\n         MVI   NSCHFLG,X'00'\n         MVI   HAVLFLG,X'00'\n         MVI   LWAPFLG,X'00'\n         MVI   LWAMFLG,X'00'\n         MVI   TIDFLAG,X'00'\n         MVI   OLDFLAG,X'00'\n         MVI   FLAGZ,X'00'\n         MVI   LINEB,X'40'\n         MVI   LINAB,X'40'\n         XC    FSTCOUNT,FSTCOUNT\n         XC    FSTNOUNT,FSTNOUNT\n         MVC   FSTFIELD(8),BLANKS\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n         MVC   CODEPLAC(2),BLANKS\n         MVC   DISPHDR(16),BLANKS\n         XC    SLOTBIN,SLOTBIN\n         XC    BLNKCNT,BLNKCNT\n         XC    NTRYCNT,NTRYCNT\n         XC    SAVETCUR,SAVETCUR\n         MVC   SLOTSAVE,BLANKS\n         MVC   FSTNAME,BLANKS\n         MVI   CMDBCOPY-1,X'00'\n         MVC   CMDBCOPY,CMDBCOPY-1\n* -----------------------\nGETPSCB  DS    0H                  See if we are allowed to\n*                                  run this program.\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM         Get the address of the CPPL back\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n         NOP   GETLWA              Zap to bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    GETLWA              Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\n         DROP  R2\n***** ----- >>>>>\nGETLWA   DS    0H                  Obtain all the relevant fields\n*                                  from the LWA (Logon Work Area)\n         L     R2,X'224'           Point to PSAAOLD\n         L     R2,X'6C'(,R2)       Point to ASXB\n         L     R2,X'14'(,R2)       Point to LWA\n         ST    R2,LWAADDR          Store LWA address\n         USING LWA,R2\n* ------------------------------------------------------------------ *\n*    Save all the relevant information from the LWA, to use later.   *\n* ------------------------------------------------------------------ *\n         ST    R5,SAVER5B          Store original contents of R5\n         L     R5,LWATNS           Pointer to NS table\n         ST    R5,SAVETNS          Save it.\n         L     R5,LWATE2           Pointer to E2 table\n         ST    R5,SAVETE2          Save it.\n         L     R5,LWATE8           Pointer to E8 table\n         ST    R5,SAVETE8          Save it.\n         L     R5,LWATAP           Pointer to AP table\n         ST    R5,SAVETAP          Save it.\n         XR    R5,R5               Clear register to be double sure.\n         LH    R5,LWATNSLN         Length of NS table if available\n         STH   R5,SAVETNSL         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NONSSIZE            No\n         OI    LWAMFLG,X'40'       Yes. Indicate that in a flag.\nNONSSIZE DS    0H\n         LH    R5,LWATE2LN         Length of E2 table if available\n         STH   R5,SAVETE2L         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOE2SIZE            No\n         OI    LWAMFLG,X'20'       Yes. Indicate that in a flag.\nNOE2SIZE DS    0H\n         LH    R5,LWATE8LN         Length of E8 table if available\n         STH   R5,SAVETE8L         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOE8SIZE            No\n         OI    LWAMFLG,X'10'       Yes. Indicate that in a flag.\nNOE8SIZE DS    0H\n         LH    R5,LWATAPLN         Length of AP table if available\n         STH   R5,SAVETAPL         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOAPSIZE            No\n         OI    LWAMFLG,X'80'       Yes. Indicate that in a flag.\nNOAPSIZE DS    0H\n         L     R5,SAVER5B          Restore original R5 contents\n         MVC   LWAPFLG,LWAPRMLB    Save flags showing which tables\n*                                  came from STEPLIB, if any.\n         DROP  R2\n* ------------------------------------------------------------------ *\n*    At this point we have finished saving things out of the LWA.    *\n* ------------------------------------------------------------------ *\n*    Now we have to find the LPA boundaries.                         *\n* ------------------------------------------------------------------ *\nLPAINFO  DS    0H\n         BAL   R9,GETLPABD         Get list of LPA storage boundaries.\n* ------------------------------------------------------------------ *\n***** ----- >>>>>  We can handle the public Platform Command and     *\n***** ----- >>>>>  Platform Program tables, if they exist.           *\n* ------------------------------------------------------------------ *\nGETPCPP  DS    0H            Info about Platpgm and Platcmd Tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'14'(,R2)       Point to CTLT control block\n         ST    R2,SAVECTLT         Save CTLT address for later use\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'34'(,R2)       Point to PLATCMD pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOFCVE              No. Say so.\n         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.\n         OI    PLATFLG,X'01'       Indicate that FCVE exists.\nTRYPPVE  DS    0H\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'40'(,R2)       Point to PLATPGM pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOPPVE              No. Say so.\n         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.\n         OI    PLATFLG,X'02'       Indicate that PPVE exists.\nTRYPPVEE DS    0H\n         B     CHKOLVER            Skip over relevant error messages.\n* -------------------------------------------------------------- *\n* ------           Error messages if tables don't exist   ------ *\n* -------------------------------------------------------------- *\nNOFCVE   DS    0H\n         APUT  =C'No PLATCMD table found',22\n         B     TRYPPVE\nNOPPVE   DS    0H\n         APUT  =C'No PLATPGM table found',22\n         B     TRYPPVEE\n* ----------------------------------------------------------------- *\n*    There doesn't seem to be a way to tell from an old INMXPARM    *\n*    control block itself, that it is the old version.  So we use   *\n*    the position of the active PARMLIB member name in the TPVT.    *\n* ----------------------------------------------------------------- *\nCHKOLVER DS    0H\n         L     R2,SAVETPVT         Load TPVT address back.\n         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?\n         BNE   PARMSCAN            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\n* -------------------------------------------------------------- *\n*    After we got the system information we finally start        *\n*     scanning the TSO command for parms, here.                  *\n* -------------------------------------------------------------- *\nPARMSCAN DS    0H\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         ST    R3,OFFSETSV         Save offset value.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n*\n* ----  Copy command buffer into pgm's buffer so we can control it.\n*\n         STM   R14,R1,SAVE1401     Now save registers 14 thru 1.\n         XR    R14,R14             Clear R14.\n         LH    R14,0(,R1)          Load full command buffer length.\n         S     R14,=F'5'           Subtract 4 for header, 1 for execute\n         ICM   R14,14,FULLZERO     Ensure cmd buffer smaller than 255\n         EX    R14,COPYCMDB        Copy command into pgm's area.\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\n         B     GOGOGO              Jump over executed instruction.\nCOPYCMDB MVC   CMDBCOPY(0),4(R1)   <<< Executed >>>\nGOGOGO   DS    0H\n* ----\n         LA    R2,3                Load register for BCT loop.\n* >>>\n         LA    R1,CMDBCOPY         Point to command in our buffer\n         A     R1,OFFSETSV         Add offset, point to subcommands\n         ST    R1,CHARSTRT         Store starting point away\n* >>>\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of function name.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R4),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         CLI   0(R4),X'00'         Is this character hex zero?\n         BE    AFTFIRST            Yes, end of command in buffer copy.\n         LA    R4,1(,R4)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R2,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8A          Save register\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers.\n         CLI   TABCODE+2,C'X'      Special action code, code X.\n         BNE   SEEIFJ01            Not this. Just go on.\n         OI    LPADFLG,X'01'       Set flag to display LPA range.\nSEEIFJ01 DS    0H\n*--*\n         TM    LPADFLG,X'01'       Display LPA range only?\n         BZ    SEEIFK01            No. Do all regular processing.\n         BAL   R9,GETLPRNT         Yes. Display LPA range and exit.\n         B     EOJ0                Out of program with Code 0\nSEEIFK01 DS    0H\n*--*\n         CLI   TABCODE+2,C'R'      Replace the entry in the given slot\n         BE    SEEIF0A1\n         CLI   TABCODE+2,C'B'      Blank the given slot\n         BE    SEEIF0A2\n         CLI   TABCODE+2,C'D'      Display contents of given slot\n         BE    SEEIF0A3              or all slots.\n         CLI   TABCODE+2,C'H'      Alter table header\n         BE    SEEIF0A4\n         CLI   TABCODE+2,C'L'      Supply length for table in LWA\n         BE    SEEIF0A5              including trailing blank entries.\n         CLI   TABCODE+2,C'M'      Supply length for table in LWA plus\n         BE    SEEIF0M5              one trailing blank, if there.\n         CLI   TABCODE+2,C'Z'      Zero length for table in LWA\n         BE    SEEIF0A6\n         CLI   TABCODE+2,C'S'      Say this table came from STEPLIB\n         BE    SEEIF0A7\n         CLI   TABCODE+2,C'P'      Say this table is not from STEPLIB\n         BE    SEEIF0A8\n         CLI   TABCODE+2,C'N'      Are we nullifying an entry?\n         BE    SEEIF0A9\n         B     SEEIF000\nSEEIF0A1 DS    0H\n         OI    OFFFLAG,X'01'       Replace an entry\n         B     SEEIF001\nSEEIF0A2 DS    0H\n         OI    OFFFLAG,X'02'       Blank entry in the last slot\n         B     SEEIF001\nSEEIF0A3 DS    0H\n         OI    OFFFLAG,X'04'       Display an entry or entries\n         B     SEEIF001\nSEEIF0A4 DS    0H\n         OI    OFFFLAG,X'08'       Alter table header\n         B     SEEIF001\nSEEIF0M5 DS    0H                  Short length with one blank\n         OI    SHBLFLG,X'01'\nSEEIF0A5 DS    0H\n         OI    OFFFLAG,X'10'       Supply length for table in LWA\n         B     SEEIF001\nSEEIF0A6 DS    0H\n         OI    OFFFLAG,X'20'       Zero length for table in LWA\n         B     SEEIF001\nSEEIF0A7 DS    0H\n         OI    OFFFLAG,X'40'       Say this table came from STEPLIB\n         B     SEEIF001\nSEEIF0A8 DS    0H\n         OI    OFFFLAG,X'80'       Say this table not from STEPLIB\n         B     SEEIF001\nSEEIF0A9 DS    0H\n         OI    OFFFLAG1,X'10'      Use OFFFLAF1\n         MVI   OFFFLAG,X'00'         instead of OFFFLAG.\n         B     SEEIF001\nSEEIF000 DS    0H                  Wrong function code was entered...\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         HEX   LINE+8,1,OFFFLAG1\n         MVC   LINE+15(37),=C'Program table code + Function code '\n         APUT  LINE,50\n* --- >\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Get out with code = 4.\nSEEIF001 DS    0H                  Which table to change\n         MVC   CODEPLAC(2),TABCODE    Save table code.\n* --- >\n         TM    OFFFLAG,X'04'       Display only--no changes to be made\n         BO    NOBEFORE            Don't show \"before changes\" message\n         STM   R14,R1,SAVE1401     Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGED,L'MESSAGED Say \"after making changes\"\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\nNOBEFORE DS    0H\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         HEX   LINE+8,1,OFFFLAG1\n         MVC   LINE+15(37),=C'Program table code + Function code '\n         APUT  LINE,50\n* --- >                            Handle each table separately.\n         CLC   TABCODE(2),=C'E2'   Change IKJEFTE2?\n         BE    E2CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'E8'   Change IKJEFTE8?\n         BE    E8CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'AP'   Change IKJEFTAP?\n         BE    APCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PC'   Change PLATCMD?\n         BE    PCCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PP'   Change PLATPGM?\n         BE    PPCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'NS'   Change IKJEFTNS?\n         BE    NSCHANGE            Yes. Branch.\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Invalid code entered.\nEOJ      DS    0H                  END OF JOB\n         L     R13,4(,R13)\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\n**                                                                  **\n**   Different Table Handling Routines                              **\n**   --------- ----- -------- --------                              **\n**                                                                  **\n**  At this point, we have the routines which handle each of the    **\n**  separate types of tables.  E2, E8, AP, and NS, for which the    **\n**  live LWA version is handled.  But we also do the FCVE and       **\n**  PPVE (Platform Command and Platform Program) tables pointed     **\n**  to by the TPVT (TSO Parmlib Vector Table) control block, and    **\n**  those two tables, if they exist, are similarly handled.  But    **\n**  the FCVE and PPVE tables (table codes PC and PP respectively,   **\n**  in this program) are in common storage, and are not in the      **\n**  TSO user's address space.                                       **\n**                                                                  **\n** ---------------------------------------------------------------- **\nE2CHANGE DS    0H                 Handle the E2 table\n         OI    TIDFLAG,X'20'      Show we're doing the E2 table.\n         MVC   TABLEID,=C'E2'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R4,SAVETE2         Point to saved E2 table address\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nE2CHENTY DS    0H                 Show we have a size for E2 table\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    E2CHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'20'      Do we have a size for the E2 table?\n         BZ    E2CHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETE2L    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E2CHYSSZ\nE2CHNOSZ DS    0H                 Show message that we have no size\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE2CHYSSZ DS    0H\n         TM    LWAPFLG,X'20'      Was the E2 table loaded from STEPLIB?\n         BZ    E2CHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E2CHYSST\nE2CHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE2CHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETE2L        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   E2CHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     E2CHNOHB           And go on.\nE2CHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETE2L  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nE2CHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - >\n         LA    R5,8               Size of each E2 table entry\n         ST    R5,TABLESIZ        Store size of each entry\n*                                 We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Store this location\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E2CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nE2CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nE8CHANGE DS    0H                 Handle the E8 table\n         OI    TIDFLAG,X'10'      Show we're doing the E8 table.\n         MVC   TABLEID,=C'E8'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R4,SAVETE8         Point to saved E8 table address\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nE8CHENTY DS    0H                 Deal with the E8 table.             .\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    E8CHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'10'      Do we have a size for the E8 table?\n         BZ    E8CHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETE8L    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E8CHYSSZ\nE8CHNOSZ DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE8CHYSSZ DS    0H\n         TM    LWAPFLG,X'10'      Was the E8 table loaded from STEPLIB?\n         BZ    E8CHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E8CHYSST\nE8CHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE8CHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETE8L        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   E8CHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     E8CHNOHB           And go on.\nE8CHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETE8L  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nE8CHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         LA    R5,8               Size of each E8 table entry\n         ST    R5,TABLESIZ        Store size of each entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Store this location\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E8CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nE8CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nAPCHANGE DS    0H                 Handle the AP table\n         OI    TIDFLAG,X'80'      Show we're doing the AP table.\n         MVC   TABLEID,=C'AP'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n* - -\n         L     R4,SAVETAP         Get address of AP table\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nAPCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    APCHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'80'      Do we have a size for the AP table?\n         BZ    APCHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETAPL    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     APCHYSSZ\nAPCHNOSZ DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nAPCHYSSZ DS    0H\n         TM    LWAPFLG,X'80'      Was the AP table loaded from STEPLIB?\n         BZ    APCHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     APCHYSST\nAPCHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nAPCHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETAPL        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   APCHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     APCHNOHB           And go on.\nAPCHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETAPL  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nAPCHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         LA    R5,8               Size of each AP table entry\n         ST    R5,TABLESIZ        Store size of each entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Save this location.\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    APCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nAPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nPCCHANGE DS    0H                 Handle the PC table\n         OI    TIDFLAG,X'01'      Show PC table chosen.\n         MVC   TABLEID,=C'PC'\n         TM    PLATFLG,X'01'      Does the table exist?\n         BZ    PCCHAERR           No. Report error.\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R2,SAVEFCVE        Get the PC table address\n         LR    R4,R2              Save it off\n         ST    R4,DISPREG         Store register contents for display\n* -- >                            Do Display\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,DISPREG      Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n* -- >\n         L     R3,X'8'(,R4)       Point to length of table\n         STH   R3,SAVETCUR        Store it to show non-zero\n         AR    R4,R3              Point just past PC table\n         ST    R4,TABLEND         And mark the projected end of table\n* - -\n         L     R3,X'C'(,R2)       Get number of table entries\n         ST    R3,TABLENUM        Preserve number for table search\n         LA    R3,8               Load table size\n         ST    R3,TABLESIZ        And store it for DISPTABL routine\n** -- **\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Table length in Hex:  '\n         HEX   LINE+25,2,SAVETCUR\n         APUT  LINE,45\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n** -- **\n         L     R3,SAVEFCVE        Get the platcmd table start address\n         LA    R3,X'10'(,R3)      Bump past its header\n         ST    R3,TABLSTRT        And store the starting place away\n* - -\n         LA    R5,8               Get 8 bytes ready for subtraction\n         SR    R4,R5              Back up to the last slot\n         ST    R4,SAVLSLOT        Save location of last table slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PCCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPCCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHAERR DS    0H                 Say no PC table exists.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PC command not valid if no PC table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPCCHAEND DS    0H\n         B     EOJ0\n** ---------------------------------------------------------------- **\nPPCHANGE DS    0H                 Handle the PP table\n         OI    TIDFLAG,X'02'      Show PP table chosen.\n         MVC   TABLEID,=C'PP'\n         TM    PLATFLG,X'02'      Is there a Platpgm table?\n         BZ    PPCHAERR           If no, then display error condition\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R2,SAVEPPVE        Get the PP table address\n         LR    R4,R2              Save it off\n         ST    R4,DISPREG         Store PP table address for display\n* -- >                            Do Display\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,DISPREG      Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n* -- >\n         L     R3,X'8'(,R4)       Size of PP table in bytes\n         STH   R3,SAVETCUR        Show it's non-zero\n         AR    R4,R3              Point just past the PP table\n         ST    R4,TABLEND         Mark the end of table for DISPTABL\n* - -\n         L     R3,X'C'(,R2)       Get number of table entries\n         ST    R3,TABLENUM        Store that number away for DISPTABL\n         LA    R3,8               Size of each entry\n         ST    R3,TABLESIZ        Store that away too\n** -- **\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Table length in Hex:  '\n         HEX   LINE+25,2,SAVETCUR\n         APUT  LINE,45\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n** -- **\n         L     R3,SAVEPPVE        Get start address of PP table\n         LA    R3,X'10'(,R3)      Add 16 to bump past header\n         ST    R3,TABLSTRT        Store search starting address away\n* - -\n         LA    R5,8               Load size of one entry\n         SR    R4,R5              Back up to last slot address\n         ST    R4,SAVLSLOT        And save it off.\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PPCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPPCHAERR DS    0H                 Say no PC table exists.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PP command not valid if no PP table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPPCHAEND DS    0H\n         B     EOJ0\n** ---------------------------------------------------------------- **\nNSCHANGE DS    0H                 Handle the NS table\n         OI    TIDFLAG,X'40'      Show we're doing the NS table.\n         MVC   TABLEID,=C'NS'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         OI    NSCHFLG,X'01'      Show SETTMODE we're doing NS\n* - -\n         L     R4,SAVETNS         Saved location of the NS table\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR10        Measure the table\n*\n         L     R1,TABLSTRT        Load it to start table search later\n**-->>\nNSCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    NSCHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'40'      Do we have a size for the NS table?\n         BZ    NSCHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETNSL    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NSCHYSSZ\nNSCHNOSZ DS    0H                 Say we have no size for the NS table\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nNSCHYSSZ DS    0H\n         TM    LWAPFLG,X'40'      Was the NS table loaded from STEPLIB?\n         BZ    NSCHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NSCHYSST           Don't put out contradictory messages\nNSCHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nNSCHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past the table header\n         ST    R1,TABLSTRT        Store new start address for DISPTABL\n* - -\n         LH    R2,SAVETNSL        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   NSCHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME10LENG        Measured table length.\n***\n         B     NSCHNOHB           And go on.\nNSCHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETNSL  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nNSCHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n*        S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         S     R5,=F'16'\n         STM   R2,R3,SAVER23      Save work registers.\n         XR    R2,R2              Zero work registers.\n         XR    R3,R3\n         LR    R3,R5              Feed length into work register\n         D     R2,=F'10'          Divide by 10.\n         LR    R5,R3              Save the result.\n         LM    R2,R3,SAVER23      Restore work registers.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         XR    R5,R5              Clear register\n         LA    R5,10              Size of each NS table entry\n         ST    R5,TABLESIZ        Store size of each table entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point to Last Slot\n         ST    R4,SAVLSLOT        Save location of last slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    NSCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nNSCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\n* ----------------------------------------------------------------- *\n*     Various \"abnormal ending\" routines.                           *\n* ----------------------------------------------------------------- *\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJC\n* ----------------------------------------------------------------- *\nNOE2     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E2'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOE8     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E8'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOAP     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'AP'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNONS     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'NS'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOTNUMER DS    0H                 Message that a parm was not numeric\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEN),MESSAGEN\n         MVC   LINE+21(1),0(R4)\n         APUT  LINE,L'MESSAGEN\n         B     EOJ4\n** ---------------------------------------------------------------- **\n**    Some of the Register and Pointer Save Areas                   **\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'                   Parm address from R1 at entry\nSAVETPVT DC    F'0'                   Address of TPVT control block\nSAVECTLT DC    F'0'                   Address of CTLT control block\nSAVEFCVE DC    F'0'                   Address of Platcmd table if non-0\nSAVEPPVE DC    F'0'                   Address of Platpgm table if non-0\nSAVEUPT  DC    F'0'                   Address of UPT\nSAVEECT  DC    F'0'                   Address of ECT\nSAVEPSCB DC    F'0'                   Address of PSCB\nSAVETNS  DC    F'0'                   Address of NS table\nSAVETE2  DC    F'0'                   Address of E2 table\nSAVETE8  DC    F'0'                   Address of E8 table\nSAVETAP  DC    F'0'                   Address of AP table\nSAVETNSL DC    H'0'                   Length of NS table, if nonzero\nSAVETE2L DC    H'0'                   Length of E2 table, if nonzero\nSAVETE8L DC    H'0'                   Length of E8 table, if nonzero\nSAVETAPL DC    H'0'                   Length of AP table, if nonzero\nSAVETCUR DC    H'0'                   Copied length of current table\nSAVETNEW DC    H'0'                   Changed length of current table\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'                   Fullword of numeric 0\nFULLFOUR DC    F'4'                   Fullword 4\nFULLEIGT DC    F'8'                   Fullowrd 8\nFULLTWLV DC    F'12'                  Fullword 12\nSAVE1401 DC    5F'0'                  More for safety\nLWAADDR  DC    F'0'                   Address of LWA control block\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\nMOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED\nMOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED\nMOVFNUM  MVC   FSTNUME(*-*),0(R3)     EXECUTED\nPACK     PACK  WORKA,0(0,3)          <<< EXECUTED >>>\n** ---------------------------------------------------------------- **\n*          * - - - - - - - - - - - - - - - - - - - - - - - - *\n*          *            S U B R O U T I N E S                *\n*          * - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**  These are executed using a BAL R9,subroutn  instruction.        **\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNAMES DS    0H                  Get program name from parm.\n         ST    R9,SAVER9B          Save BAL register\n         ST    R2,SAVER2D          Save work register\nGETNAMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNAMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         BCTR  R5,0                Subtract one from end count\n         B     GETNAMST            And loop to find first non-blank.\nGETNAMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R2,8                BCT initial quantity - 8 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of program name.\nGETNAMLU DS    0H                  Loop to get entire name\n         CLI   0(R4),X'40'         First blank?\n         BE    GETNAMGT            Yes, got whole name.\n         CLI   0(R4),X'00'         First hex zeros?\n         BE    GETNAMGT            Yes, got whole name.\n         CR    R8,R5               End of command buffer?\n         BNL   GETNAMGT            Yes. Got all we can get.\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R4,1(,R4)           Bump where we are.\n         BCT   R2,GETNAMLU         Loop back.\nGETNAMGT DS    0H\n         ST    R8,SAVER8A          Save character count\n         ST    R8,FSTCOUNT         Again.\n         CLC   SAVER8A,=F'0'       Is character count (left) 0?\n         BNE   GETREALY            No. Go on processing for name.\n         BAL   R9,MISSPGM2         Say we're missing a program name.\n         B     EOJ4                And get out with code = 4.\nGETREALY DS    0H\n         MVC   FSTCHALF(2),FSTCOUNT+2    Get halfword program length\n         MVC   LINE,LINE-1               Print it in message\n         HEX   LINE,4,SAVER8A\n         MVC   LINE+13(17),=C'Length of command'\n         APUT  LINE,30\n         L     R3,CHARCONT         Load starting place again.\n         BCTR  R8,0                One less for EXECUTE.\n         MVC   FSTNAME(8),BLANKS   Blank entire target field.\n         EX    R8,MOVFSTN          Move program name to target.\n         OC    FSTNAME(8),BLANKS   Uppercase the program name.\n         MVC   LINE,LINE-1         And print its name out.\n         MVC   LINE(8),FSTNAME\n         MVC   LINE+13(17),=C'New program name '\n         APUT  LINE,30\n* - >\nGETNAMEN DS    0H                  Exit this routine.\n         L     R2,SAVER2D          Restore work register\n         L     R9,SAVER9B          Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGED  DS    0H                     The \"value was changed\" message.\n         ST    R9,SAVER9C\n         TM    LPAFLAG,X'01'          Is the table within LPA?\n         BO    CHANGEND               Yes. Change already shown.\n         TM    FLAGZ,X'02'            Is parm number past end of table?\n         BO    CHANGEDN               Yes. Bypass all operations here.\n         TM    OFFFLAG,X'01'          Replacement?\n         BO    CHANGEDA               Say what was replaced\n         TM    OFFFLAG,X'02'          Blanking?\n         BO    CHANGEDB               Say what was blanked\n         TM    OFFFLAG,X'04'          Display?\n         BO    CHANGEDD               Skip saying anything was changed.\n         TM    OFFFLAG,X'08'          Change header to \" PARMLIB\"?\n         BO    CHANGEDH               Write message that its done.\n         TM    OFFFLAG,X'10'          Supply lengths in LWA?\n         BO    CHANGEDK               Write appropriate messages.\n         TM    OFFFLAG,X'20'          Zero lengths in LWA?\n         BO    CHANGEDZ               Write appropriate messages.\n         TM    OFFFLAG1,X'10'         Nullifying a table entry?\n         BO    CHANGENU               Write appropriate messages.\n*                                     X'40' dealt with in SETSTEPL\n*                                     X'80' dealt with in NOTSTEPL\n         B     CHANGEND\nCHANGEDA DS    0H                     Replacing a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3A+5(4),TABENNUM+6\n         MVC   MESSAG3A+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3A+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDB DS    0H                     Blanking a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3B+5(4),TABENNUM+6\n         MVC   MESSAG3B+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3B+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.\n         B     CHANGEND\nCHANGENU DS    0H                     Blanking a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3G+5(4),TABENNUM+6\n         MVC   MESSAG3G+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3G+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3G,L'MESSAG3G    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDD DS    0H                     Displaying table entries (entry)\n         TM    OFFFLAG,X'04'\n         BZ    CHANGEDX               Not display? Say what's in slot.\n         CLC   SLOTBIN,=F'0'          Display entire table?\n         BE    CHANGEND               Don't say anything changed.\nCHANGEDX DS    0H                     Say we're displaying 1 slot.\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Display of Slot contents.     '\n         APUT  LINE,30\n         B     CHANGEND\nCHANGEDN DS    0H                     Say nothing changed.\n         APUT  MESSAG2D,L'MESSAG2D\n         B     CHANGEND\nCHANGEDH DS    0H                 Putting \" PARMLIB\" in table header.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\".\n         APUT  MESSAG3D,L'MESSAG3D\n         BAL   R9,PRTABLHD        Table Header Display Routine\n         B     CHANGEND\nCHANGEDK DS    0H                 \"Supply table lengths\" message.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1               Print a blank line.\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\".\n         MVC   MESSAG3E+19(2),TABLEID    Put table id into message.\n         HEX   MESSAG3E+48,2,SAVETCUR    Old message length\n         CLC   TABLEID,=C'NS'            Is it the NS table?\n         BE    CHANGK01\n         HEX   MESSAG3E+60,2,SAVETNEW    8-byte table length\n         B     CHANGK02\nCHANGK01 DS    0H\n         TM    SHBLFLG,X'01'\n         BO    CHANGKA1\n         HEX   MESSAG3E+60,2,TO10LENG    10-byte table length\n         B     CHANGK02\nCHANGKA1 DS    0H\n         HEX   MESSAG3E+60,2,ME10LENG    10-byte table length\nCHANGK02 DS    0H\n         MVI   MESSAG3E+64,C'.'          Finish \"table length\" message.\n         APUT  MESSAG3E,L'MESSAG3E\n*                                        Message after change.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETNEW    New message length\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         B     CHANGEND\nCHANGEDZ DS    0H                 Zeroing table lengths in the LWA.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\"\n         MVC   MESSAG3F+19(2),TABLEID\n         HEX   MESSAG3F+33,2,SAVETNEW\n         MVI   MESSAG3F+37,C'.'\n         APUT  MESSAG3F,L'MESSAG3F\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         B     CHANGEND\nCHANGEND DS    0H\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNAMEPARM DS    0H\n         ST    R9,SAVER9D\n         TM    LPADFLG,X'01'          Displaying LPA range?\n         BO    NAMEPEND               Don't look for a number here.\n*-*\n         TM    OFFFLAG,X'08'          Just changing table header?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*\n*-*-*\n         TM    OFFFLAG,X'10'          Supply table length in LWA.\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*\n*-*-*-*\n         TM    OFFFLAG,X'20'          Zero table length in LWA.\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'          Set on STEPLIB flag for table?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'          Set off STEPLIB flag for table?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*-*-*\n         L     R8,SAVER8A             Get number of characters used\n         CR    R8,R5                  More than what's left?\n         BNL   NAMEBAD1               Yes. Error.\n         C     R5,=F'3'               Is end bigger than 3?\n         BNH   NAMEBAD1               No. Error.\nNAMEGOOD DS    0H\n         S     R5,=F'3'               Subtract 3 from number till end.\n         BAL   R9,GETNUMES            Get the number of the pgm entry.\n         TM    OFFFLAG,X'02'          Are we blanking?\n         BO    NAMEPEND               Yes. Don't need a name parameter\n         TM    OFFFLAG,X'04'          Displaying?\n         BO    NAMEPEND               Yes. No names wanted.\n         TM    OFFFLAG1,X'10'         Nullifying an entry?\n         BO    NAMEPEND               Yes. No names needed.\n         BAL   R9,GETNAMES            Get the name of pgm to shove in.\n         B     NAMEPEND\nNAMEBAD1 DS    0H                     Get here if there's no parameter.\n         TM    OFFFLAG,X'04'          Are we displaying?\n         BO    NAMEPEND               No error. Just get out normally.\n         TM    OFFFLAG,X'02'\n         BO    NAMEBAD2\n         BAL   R9,MISSPGM1            We're replacing. Ask for both.\n         B     EOJ4                   RC = 4\nNAMEBAD2 DS    0H\n         BAL   R9,MISSPGM3\n         B     EOJ4                   RC = 4\nNAMEPEND DS    0H\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADJNEXTP DS    0H                     Get to first blank\n         ST    R9,SAVER9E\n         MVC   CHARSTRT,CHARCONT      Set up\n         L     R1,CHARSTRT\nSEEIFENX DS    0H                     Loop\n         CLI   0(R1),X'40'            First blank?\n         BE    SEEIFENZ               Yes, then end.\n         LA    R1,1(,R1)              Bump to next character\n         ST    R1,CHARSTRT            Store address away\n         B     SEEIFENX               Loop back\nSEEIFENZ DS    0H\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9F\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         MVC   LINE+56(8),VERS#       Version number into title\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9F\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETTMODE DS    0H                  Routine that does Key 0 stuff.\n         ST    R9,SAVER9G\n         TM    FLAGZ,X'02'         Is parm number past end of table?\n         BO    SETTMEND            Yes. Don't do key zero operations.\n         TM    LPAFLAG,X'01'       Is the table in LPA region?\n         BO    SETTMEND            Yes. Do not attempt to change it.\n* -- >       Test if this command is being run APF Authorized\n         AIF   ('&SVC' EQ 'SVC').DOSVC\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n.DOSVC   ANOP\n* -- >\n         AIF   ('&SVC' EQ 'NOSVC').NOSVC02\n         AUTHON\n.NOSVC02 ANOP\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n* -\n         TM    OFFFLAG,X'04'       Only displaying entr(ies)?\n         BNZ   ENDKZ               Yes. No Key 0 stuff done.\n         CLI   LPAFLAG,X'01'       Did the table come from LPALIB?\n         BE    ENDKZ               Yes. Don't try to alter table.\n         TM    NSCHFLG,X'01'       Are we doing the NS table?\n         BO    TENSLOT             Yes. Handle its special needs.\nEIGHSLOT DS    0H                  8-character tables.\n*-*                                Altering table header only\n         TM    OFFFLAG,X'08'       Alter table header?\n         BZ    GONOHDRA            No. Escape this section.\n         TM    TIDFLAG,X'03'       Dealing with PC or PP?\n         BNZ   GONOHDRA            Yes. Show nothing was changed.\n         L     R3,HDRADDR          Load header address\n         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.\n         B     ENDKZ               Get out of supervisor state.\nGONOHDRA DS    0H\n*-*\n*-*-*\n         TM    OFFFLAG,X'30'       Supplying length to LWA field?\n         BZ    GONZLWA1            No. Don't do this routine.\n         BAL   R9,MEASUR08         Measure it.\n         BAL   R9,WHERSIZE         Load size into proper place in LWA.\n         B     ENDKZ               Get out of supervisor state.\nGONZLWA1 DS    0H\n*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?\n         BZ    NOGSTEP1            No. Skip step.\n         BAL   R9,SETSTEPL         Set the STEPLIB flag on.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTEP1 DS    0H\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?\n         BZ    NOGSTOF1            No. Skip step.\n         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTOF1 DS    0H\n*-*-*-*-*-*\n         L     R3,OURSLOT          Address of slot to replace name in.\n         TM    OFFFLAG,X'01'       Replacing function here?\n         BZ    BLANKIT             No. Do blanking function.\n         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?\n         BE    ENDKZ               No. It is blank. Nothing to do.\n         MVC   0(8,R3),FSTNAME     Non-blank. Move in new pgm name.\n         B     ENDKZ               And get out.\nBLANKIT  DS    0H                  Blank an 8-character table entry\n         TM    OFFFLAG,X'02'       Blanking function here?\n         BZ    NULLIT              No. Try the next possibility.\n         L     R3,OURSLOT          Address of slot entry to blank\n         MVC   0(8,R3),BLANKS      Move the blanks in.\n         B     ENDKZ               And get out.\nNULLIT   DS    0H                  Nullify an entry by inserting ?.\n         TM    OFFFLAG1,X'10'      Nullifying function here?\n         BZ    ENDKZ               No. Can't do anything.\n         L     R3,OURSLOT          Yes. Load current slot number.\n         MVC   0(8,R3),QUEST08     Change it to C'?       '\n         B     ENDKZ               And get out.\nTENSLOT  DS    0H                  10-character tables.\n         L     R3,OURSLOT          Address of slot to replace name in.\n         TM    OFFFLAG,X'01'       Replacing function here?\n         BZ    BLANKTEN            No. Do blanking function.\n         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?\n         BE    ENDKZ               No. It is blank. Nothing to do.\n         MVC   0(2,R3),FSTCHALF    Put length of the new program name.\n         MVC   2(8,R3),FSTNAME     Put in the new program name.\n         B     ENDKZ               Get out of supervisor state.\nBLANKTEN DS    0H                  Blank the 10-character table entry\n*-*                                Altering table header only\n         TM    OFFFLAG,X'08'       Alter table header?\n         BZ    GONOHDRB            No. Escape this section.\n         TM    TIDFLAG,X'03'       Dealing with PC or PP?\n         BNZ   GONOHDRB            Yes. Show nothing was changed.\n         L     R3,HDRADDR          Load header address\n         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.\n         B     ENDKZ               Get out of supervisor state.\nGONOHDRB DS    0H\n*-*\n*-*-*\n         TM    OFFFLAG,X'30'       Supplying length to LWA field?\n         BZ    GONZLWA2            No. Don't do this routine.\n         BAL   R9,MEASUR10         Measure it.\n         BAL   R9,WHERSIZE         Load size into proper place in LWA.\n         B     ENDKZ               Get out of supervisor state.\nGONZLWA2 DS    0H\n*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?\n         BZ    NOGSTEP2            No. Skip step.\n         BAL   R9,SETSTEPL         Set the STEPLIB flag.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTEP2 DS    0H\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?\n         BZ    NOGSTOF2            No. Skip step.\n         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTOF2 DS    0H\n*-*-*-*-*-*\n         TM    OFFFLAG,X'02'       Blanking function here?\n         BZ    NULLTEN             No. Can't do anything.\n         L     R3,OURSLOT          Address of slot entry to blank.\n         MVC   0(2,R3),=X'0000'    Move X'FFFF' to mark table end\n         MVC   2(8,R3),BLANKS      And move the blanks to pgm name slot\n         B     ENDKZ               Get out of supervisor state.\nNULLTEN  DS    0H\n         TM    OFFFLAG1,X'10'      Slot nullify function here?\n         BZ    ENDKZ               No. No action here.\n         L     R3,OURSLOT          Yes. Point to current slot in table\n         MVC   0(2,R3),=X'0001'    This is NS, so insert length.\n         MVC   2(8,R3),QUEST08     Insert Question Mark.\n         B     ENDKZ\nENDKZ    DS    0H                  Get ready to get out of Key 0.\n* -\nNZ       MODESET KEY=NZERO\n         AIF   ('&SVC' EQ 'NOSVC').NOSVC03\n         AUTHOFF\n.NOSVC03 ANOP\n* -- >      Back to ordinary life ----\nSETTMEND DS    0H                  Bypass Key 0 stuff.\n         L     R9,SAVER9G\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nERRORCOD DS    0H                  Give instructions if wrong things\n*                                   were entered, how to do it right.\n         ST    R9,SAVER9H\n         TM    LPADFLG,X'01'\n         BO    ERRORCOE\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11L,L'MESSA11L\n         APUT  MESSA11M,L'MESSA11M\n         APUT  MESSA11P,L'MESSA11P\n         APUT  MESSA11A,L'MESSA11A\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11C,L'MESSA11C\n         APUT  MESSA11D,L'MESSA11D\n         APUT  MESSA11Z,L'MESSA11Z\n         APUT  MESSA11Y,L'MESSA11Y\n         APUT  MESSA11X,L'MESSA11X\n         APUT  MESSA11F,L'MESSA11F\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11I,L'MESSA11I\n         APUT  MESSA11K,L'MESSA11K\n         APUT  MESSA11J,L'MESSA11J\n         APUT  MESSA11N,L'MESSA11N\n         APUT  MESSA11Q,L'MESSA11Q\n         APUT  MESSA11O,L'MESSA11O\n*        MVC   LINE,LINE-1\n*        APUT  LINE,30\nERRORCOE DS    0H\n         L     R9,SAVER9H\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM1 DS    0H                     Supply a slot number & pgm name.\n         ST    R9,SAVER9I\n         MVC   LINE,LINE-1\n         APUT  MESSA11G,L'MESSA11G\n         L     R9,SAVER9I\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM2 DS    0H                     Supply a program name to put in.\n         ST    R9,SAVER9J\n         MVC   LINE,LINE-1\n         APUT  MESSA11E,L'MESSA11E\n         L     R9,SAVER9J\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM3 DS    0H                     Supply a slot number to Blank.\n         ST    R9,SAVER9N\n         MVC   LINE,LINE-1\n         APUT  MESSA12Q,L'MESSA12Q\n         L     R9,SAVER9N\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPTABL DS    0H                Scan thru the particular table....\n         ST    R9,SAVER9L          Save BAL register\n         ST    R3,SAVER3A          Save\n         ST    R4,SAVER4A             the\n         ST    R5,SAVER5A                work\n         ST    R2,SAVER2G                   registers.\n*-*\n         TM    OFFFLAG,X'08'     Just altering table header?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*\n*-*-*\n         TM    OFFFLAG,X'10'     Just supplying an LWA size?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*\n*-*-*-*\n         TM    OFFFLAG,X'20'     Zeroing out LWA size?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'     Setting table to come from STEPLIB?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'     Setting table not from STEPLIB?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*-*-*\n         XR    R3,R3               Zero\n         XR    R5,R5                  work\n         XR    R2,R2                     registers.\nDISPTSTR DS    0H\n         L     R3,TABLSTRT         Load start address of table\n         L     R2,TABLENUM         Load number of entries in table\n         L     R5,TABLESIZ         Load size of each entry\n         LA    R4,1                Start slot number count at 1\n         ST    R4,SLOTNOW          Store slot number count away\n         ST    R3,OURSLOT          Initialize slot address.\n         CLC   SLOTBIN,=F'0'       If there's no slot num in parameter\n         BE    DISPTLUP            Then bypass error checking\n         C     R2,SLOTBIN          Compare table size to parm number\n         BNL   DISPTLUP            If parm number is LE, then display\nDISPTERR DS    0H                  Else error message and out.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Slot number specified '\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'is bigger than table size '\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         B     EOJ4\nDISPTLUP DS    0H                  Loop thru the table entries.\n         MVC   LINE,LINE-1\n         MVC   LINE(2),CODEPLAC    Move in table code.\n         MVC   LINE+3(19),=C'Table Entry Number:'\n         CVD   R4,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   TABENNUM(10),MASK10      Preserve printable slot number\n         ED    TABENNUM(10),CVDAREA+3\n         TM    NSCHFLG,X'01'       Is this the 10-byte NS table entry?\n         BO    DISPTBNS            Yes. Handle separately.\n         MVC   LINE+34(8),0(R3)\n         CLC   LINE+34(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+34(8),=C'*empty* '   Yes. Don't just show blanks.\n         OI    FLAGZ,X'01'         We found a blank table entry.\n         TM    FLAGZ,X'04'         Do we have table lengths?\n         BO    DISPTBLK            Yes, then use the table lengths\n* -------                           that we have.\n*                                  No table lengths here. So....\n         ST    R3,OURSLOT          Preserve empty slot address\n         ST    R4,SLOTNOW          Also preserve this slot number.\n         B     DISPTYES            And then stop on first blank.\nDISPTBNS DS    0H\n         HEX   LINE+34,2,0(R3)     Display size of this entry\n         MVC   LINE+40(8),2(R3)    Move in program name to slot\n         CLC   LINE+40(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+40(8),=C'*empty* '   Yes. Don't just show blanks.\n         OI    FLAGZ,X'01'         We found a blank table entry.\n         TM    FLAGZ,X'04'         Do we have table lengths?\n         BO    DISPTBLK            Yes, then use the table lengths\n* -------                           that we have.\n*                                  No table lengths here. So....\n         ST    R3,OURSLOT          Preserve empty slot address\n         ST    R4,SLOTNOW          Also preserve this slot number.\n         B     DISPTYES            And then stop on first blank.\nDISPTBLK DS    0H                  Search each slot number.\n         CLC   SLOTBIN,=F'0'       Has a slot number been specified?\n         BE    DISPTYES            No. Just display all the slots.\n         CLC   SLOTBIN,SLOTNOW     Yes. Then are we at the one we want?\n         BNE   DISPTNOT            No. Just go further and search.\n         OI    FLAGZ,X'08'         We're at the desired slot.\n* ---  Save contents of the current slot which was found - below\n         ST    R3,OURSLOT          Preserve this slot's address\n         LR    R1,R5               Load table entry size\n         BCTR  R1,0                One less for execute\n         EX    R1,MOVESLOT         Save contents of slot for kicks\n         B     DISPTPEX               Branch past executed instruction\nMOVESLOT MVC   SLOTSAVE(*-*),0(R3)    EXECUTED\nDISPTPEX DS    0H\n* ---  Save contents of the current slot which was found - above\nDISPTYES DS    0H                  Print this slot entry\n         APUT  LINE,52\n         TM    FLAGZ,X'01'         Is this a blank table entry?\n         BO    DISPTEND            Yes, end the table search.\n         TM    FLAGZ,X'08'         Are we at the slot # we specified?\n         BO    DISPTEND            Yes. Stop the search.\nDISPTNOT DS    0H                  Bump to next slot and loop back.\n         C     R3,TABLEND          Compare to end from adding bytes.\n         BH    DISPTEND            Past it, then end the search.\n         LA    R3,0(R5,R3)         Bump to next slot\n         ST    R3,OURSLOT          Store its address - important....\n         LA    R4,1(,R4)           Bump count of slot number\n         ST    R4,SLOTNOW          Store new slot number away\n         ST    R2,SAVER2E\n         BCT   R2,DISPTLUP         And loop to examine the new slot.\n*\nDISPTEND DS    0H                  END OF TABLE SEARCH ROUTINE\n* - >                              Display message if desired slot is\n* - >                               past the end of the table.\n         CLC   SLOTBIN,SLOTNOW     Is the parm number past the end?\n         BNH   DISPTNOP            No. Don't report a problem.\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'exceeds scanned table size'\n         L     R1,SLOTNOW          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         OI    FLAGZ,X'02'         Flag a problem situation.\nDISPTNOP DS    0H\nDISPTSKP DS    0H\n* - >\n         L     R3,SAVER3A          Restore all the work registers.\n         L     R4,SAVER4A\n         L     R5,SAVER5A\n         L     R2,SAVER2G\n         L     R9,SAVER9L          Restore the BAL register.\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNUMES DS    0H                  Get the number after the table code\n         ST    R9,SAVER9M           + the action code. If it exists.\n         ST    R2,SAVER2F\nGETNUMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNUMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         S     R5,=F'1'            Subtract one from end count\n         B     GETNUMST            And loop to find first non-blank.\nGETNUMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R2,5                BCT initial quantity - 5 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of program number\nGETNUMLU DS    0H                  Loop to get entire number\n         CLI   0(R4),X'40'         First blank?\n         BE    GETNUMGT            Yes, got whole number\n         CLI   0(R4),X'00'         First hex zeros?\n         BE    GETNUMGT            Yes, got whole number\n         CR    R8,R5               End of command buffer?\n         BNL   GETNUMGT            Yes. Got all we can get.\n* --                               Test EBCDIC number if numeric.\n         CLI   0(R4),X'F0'         Check character if numeric digit.\n         BL    NOTNUMER            Less than X'F0', not a number.\n         CLI   0(R4),X'F9'         More than X'F9'?\n         BH    NOTNUMER            Not a number.\n* --\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R4,1(,R4)           Bump where we are.\n         BCT   R2,GETNUMLU         Loop back.\nGETNUMGT DS    0H                  Got the whole number - examine it.\n         ST    R8,SAVER8A\n         ST    R8,FSTNOUNT         Get halfword value of slot number\n         MVC   FSTNHALF(2),FSTNOUNT+2\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTFIELD(8),BLANKS  5-char number plus 3 blanks\n         EX    R8,MOVFNUM          Get the number from the parm\n         EX    R8,PACK             Convert it to packed\n         CVB   R0,WORKA            Convert it to Binary\n         ST    R0,SLOTBIN          Store the value for later use\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTFIELD    8-char number with blanks\n         MVC   LINE+13(19),=C'Entry slot number  '\n         APUT  LINE,32\n         LA    R8,1(,R8)           Restore number of chars after EX\n         ST    R8,CHARSIZE         Save this value off.\n         AR    R3,R8               Add it to R3 so we start past it.\n         ST    R3,CHARCONT         Store start value for next parm.\nGETNUMEN DS    0H\n         L     R2,SAVER2F\n         L     R9,SAVER9M\n         BR    R9\n* ----------------------------------------------------------------- *\n*      Measure \"8-byte entry\" loaded table.                         *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR08 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9O           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\nME08LOOP DS    0H\n*     Try (real hard) to detect the end of the table  -  below\n         MVC   SAVECHAR(1),0(R5)    Save first character\n         CLC   =C'        ',0(R5)   Is this table entry a blank?\n         BE    ME08BLNK             Yes. Reached virtual end of table\n         CLC   ZEROES8(8),0(R5)     Is this \"entry\" hex zeros?\n         BE    ME08NOBL             Yes. Reached possible junk storage\n         CLC   =C' ',0(R5)          Is first character blank?\n         BE    ME08NOBL             Yes, not a valid table entry.\n         TR    SAVECHAR,TRTPGMNM    Check first char if appropriate.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE2',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE8',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTAP',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTNS',0(R5)\n         BE    ME08NOBL\n*     Try (real hard) to detect the end of the table  -  above\n         LA    R4,8(,R4)            Count next table entry\n         LA    R5,8(,R5)            Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         B     ME08LOOP             Loop back till perceived table end\nME08BLNK DS    0H\n         LA    R4,8(,R4)            Add length of blank entry\n         LA    R5,8(,R5)            Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME08NOBL DS    0H\n         STH   R4,ME08LENG          Store measured length of table.\n         ST    R5,ME08END           And record address of table end.\n         BAL   R9,MESBLK08          Measure more blanks after table.\n         TM    MEASFLG,X'01'        Been here already?\n         BO    ME08NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME08NOSH DS    0H\n         OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9O           Restore BAL register\n         BR    R9\nME08END  DS    F                    Store end-of-table address\nME08LENG DS    H                    Store table length\nBL08LENG DS    H                    Store length of blanks\nTO08LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMESBLK08 DS    0H                   See how many more blanks we have.\n         ST    R9,SAVER9Y           Save BAL register\n         ST    R5,SAVER5E           Save work register\n         L     R5,ME08END           Start at measured end of table.\nMESBLL08 DS    0H                   Loop\n         CLC   =C'        ',0(R5)   Is this entry a blank?\n         BNE   MESBLE08             Yes. Stop counting blanks.\n         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?\n         BH    MESBLE08             Yes. Don't find more blanks.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\n         LA    R5,8(,R5)            Bump to next entry.\n         B     MESBLL08             Loop until no blanks or max.\nMESBLE08 DS    0H\n         L     R1,BLNKCNT           Total count of found blanks\n         LTR   R1,R1\n         BZ    MESBLX08\n         BCTR  R1,0                 Really one less\nMESBLX08 DS    0H\n         SLL   R1,3                 Multiply by 8\n         STH   R1,BL08LENG          Length of blank entries\n         AH    R1,ME08LENG          Add length of non-blank entries\n         STH   R1,TO08LENG          Total length of both\n*>*----\n*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.\n*        MVC   LINE,LINE-1\n*        HEX   LINE,2,ME08LENG\n*        HEX   LINE+10,2,BL08LENG\n*        HEX   LINE+20,2,TO08LENG\n*        APUT  LINE,30\n*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.\n*>*----\n         L     R5,SAVER5E           Restore work register\n         L     R9,SAVER9Y           Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ----------------------------------------------------------------- *\n*      Measure \"10-byte entry\" loaded table.                        *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR10 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9P           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\nME10LOOP DS    0H\n         MVC   SAVECHAR(1),2(R5)    Save first character of pgm name\n         MVC   SAVECH08(1),9(R5)    Save last character of pgm name\n         CLC   BLKSTRNG(10),0(R5)   Full blank entry here?\n         BE    ME10BLNK             Yes. Count the blank entry.\n         CLC   ENDSTRNG(10),0(R5)   FFFF plus blank pgm name?\n         BE    ME10BLNK             Yes. Can still be considered blank.\n         CLC   =X'0000',0(R5)       Test-test-test-test-test\n         BE    ME10TEST             Test rest of \"entry\n         B     ME10REST             Not zeros, go on.\nME10TEST DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check for strange character.\n         CLI   SAVECHAR,X'02'       Is it strange?\n         BE    ME10NOBL             Yes. This is not a blank entry.\nME10REST DS    0H\n         CLC   =X'FFFF',0(R5)       Test for end string separately.\n         BNE   ME10TES2             Not. Not at virtual end of table\n         B     ME10NOBL             FFFF alone. Not a blank entry.\nME10TES2 DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check first char not upcase alpha.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME10NOBL\n         TR    SAVECH08,TRTPGMNM    Check last char not upcase alpha.\n         CLI   SAVECH08,X'02'       Not. probably end of table.\n         BE    ME10NOBL\n         LA    R4,10(,R4)           Count next table entry\n         LA    R5,10(,R5)           Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         B     ME10LOOP             Finished this entry, try for more.\nME10BLNK DS    0H\n         LA    R4,10(,R4)           Add length of blank entry\n         LA    R5,10(,R5)           Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME10NOBL DS    0H\n         STH   R4,ME10LENG          Store measured length of table.\n         ST    R5,ME10END           And record address of table end.\n         BAL   R9,MESBLK10          Measure more blanks after table.\n         TM    MEASFLG,X'01'        Been here already?\n         BO    ME10NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME10NOSH DS    0H\n         OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9P           Restore BAL register\n         BR    R9\nME10END  DS    F                    Store end-of-table address\nME10LENG DS    H                    Store table length\nBL10LENG DS    H                    Store length of blanks\nTO10LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMESBLK10 DS    0H                   See how many more blanks we have.\n         ST    R9,SAVER9Y           Save BAL register\n         ST    R5,SAVER5E           Save work register\n         L     R5,ME10END           Start at measured end of table.\nMESBLL10 DS    0H                   Loop\n         CLC   =C'        ',2(R5)   Is this entry a blank entry?\n         BNE   MESBLE10             No. End of perceived blanks.\n         CLC   =X'0000',0(R5)       Length is zero?\n         BNE   MESBLE10             No. End of perceived blanks.\n         CLC   =X'FFFF',0(R5)       Real table end?\n         BE    MESBLE10             Yes. Consider it end of table.\n         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?\n         BH    MESBLE10             Yes. Don't find more blanks.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\n         LA    R5,10(,R5)           Bump to next entry.\n         B     MESBLL10             Loop until no blanks or max.\nMESBLE10 DS    0H\n         L     R1,BLNKCNT           Number of blank entries\n         LTR   R1,R1\n         BZ    MESBLX10\n         BCTR  R1,0                 Really one less\nMESBLX10 DS    0H\n         STM   R2,R3,SAVER23        Save work registers\n         XR    R2,R2                Clear R2\n         XR    R3,R3                Clear R3\n         LR    R3,R1                Dump count into R2 for mult.\n         M     R2,=F'10'            Multiply by entry size\n         STH   R3,BL10LENG          Store length of blank entries\n         AH    R3,ME10LENG          Add length of non-blank entries\n         STH   R3,TO10LENG          Total length of both\n         LM    R2,R3,SAVER23        Restore work registers\n*>*----\n*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.\n*        MVC   LINE,LINE-1\n*        HEX   LINE,2,ME10LENG\n*        HEX   LINE+10,2,BL10LENG\n*        HEX   LINE+20,2,TO10LENG\n*        HEX   LINE+30,4,BLNKCNT\n*        APUT  LINE,50\n*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.\n*>*----\n         L     R5,SAVER5E           Restore work register\n         L     R9,SAVER9Y           Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------ *\nWHERSIZE DS    0H                   Point to size field to update.\n* ------------------------------------------------------------------ *\n*    This is executed after MEASUR08 or MEASUR10.                    *\n*    The idea here is to update the appropriate length field for     *\n*      the appropriate table, after having measured the size.        *\n*    This routine is also used for zeroing the table lengths.        *\n*    This routine is executed in supervisor state. Called from       *\n*      the SETTMODE routine.                                         *\n* ------------------------------------------------------------------ *\n*   ***  Note:  We unconditionally update the table lengths.  ***    *\n* ------------------------------------------------------------------ *\n         ST    R9,SAVER9Q           Save BAL register\n         ST    R2,SAVER2B           Save work registers\n         ST    R3,SAVER3C\n         TM    OFFFLAG,X'30'        Are we updating or zeroing lengths?\n         BZ    WHEREXIT             No. We have no business here.\n         L     R2,LWAADDR           Point to the Logon Work Area.\n         USING LWA,R2               Address its fields.\n*-----------------------------*\nWHERCHUZ DS    0H                   Which table are we dealing with?\n*-----------------------------*\n         TM    TIDFLAG,X'20'           E2?\n         BO    WHERE2\n         TM    TIDFLAG,X'10'           E8?\n         BO    WHERE8\n         TM    TIDFLAG,X'80'           AP?\n         BO    WHERAP\n         TM    TIDFLAG,X'40'           NS?\n         BO    WHERNS\n         B     WHEREXIT\n*-----------------------------*\nWHERE2   DS    0H                      Update E2 length\n         TM    SHBLFLG,X'01'\n         BO    WHERE2SH\n         MVC   LWATE2LN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERE2E\nWHERE2SH DS    0H\n         MVC   LWATE2LN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERE2E  DS    0H\n*-*-*-*\nWHERE2Z  DS    0H                      If zeroing, then zero E2 length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHE2NOZ1                No. Bypass this.\n         MVC   LWATE2LN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHE2NOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERE8   DS    0H                      Update E8 length\n         TM    SHBLFLG,X'01'\n         BO    WHERE8SH\n         MVC   LWATE8LN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERE8E\nWHERE8SH DS    0H\n         MVC   LWATE8LN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERE8E  DS    0H\n*-*-*-*\nWHERE8Z  DS    0H                      If zeroing, then zero E8 length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHE8NOZ1                No. Bypass this.\n         MVC   LWATE8LN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHE8NOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERAP   DS    0H                      Update AP length\n         TM    SHBLFLG,X'01'\n         BO    WHERAPSH\n         MVC   LWATAPLN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERAPE\nWHERAPSH DS    0H\n         MVC   LWATAPLN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERAPE  DS    0H\n*-*-*-*\nWHERAPZ  DS    0H                      If zeroing, then zero AP length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHAPNOZ1                No. Bypass this.\n         MVC   LWATAPLN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHAPNOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERNS   DS    0H                      Update NS length\n         TM    SHBLFLG,X'01'\n         BO    WHERNSSH\n         MVC   LWATNSLN(2),TO10LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO10LENG    Save length for message\n         B     WHERNSE\nWHERNSSH DS    0H\n         MVC   LWATNSLN(2),ME10LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME10LENG    Save length for message\nWHERNSE  DS    0H\n*-*-*-*\nWHERNSZ  DS    0H                      If zeroing, then zero NS length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHNSNOZ1                No. Bypass this.\n         MVC   LWATNSLN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHNSNOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHEREXIT DS    0H\n         L     R2,SAVER2B              Restore work registers\n         L     R3,SAVER3C\n         L     R9,SAVER9Q\n         BR    R9\n         DROP  R2\nTABLEID  DC    CL2' '\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETSTEPL DS    0H                     Routine to turn on STEPLIB flags\n         ST    R9,SAVER9R\n         ST    R2,SAVER2C                Save work register\n         L     R2,LWAADDR\n         USING LWA,R2\nSETSWTBL DS    0H                     Check which table we're seeing\n         TM    TIDFLAG,X'03'          PC OR PP table?\n         BNZ   SETSTEPN               Say nothing changed.\n         TM    TIDFLAG,X'20'          E2?\n         BO    SETSDOE2\n         TM    TIDFLAG,X'10'          E8?\n         BO    SETSDOE8\n         TM    TIDFLAG,X'80'          AP?\n         BO    SETSDOAP\n         TM    TIDFLAG,X'40'          NS?\n         BO    SETSDONS\nSETSDOE2 DS    0H\n         OI    LWAPRMLB,LWATE2ST         STEPLIB flag on for E2\n         B     SETSWTBE\nSETSDOE8 DS    0H\n         OI    LWAPRMLB,LWATE8ST         STEPLIB flag on for E8\n         B     SETSWTBE\nSETSDOAP DS    0H\n         OI    LWAPRMLB,LWATAPST         STEPLIB flag on for AP\n         B     SETSWTBE\nSETSDONS DS    0H\n         OI    LWAPRMLB,LWATNSST         STEPLIB flag on for NS\n         B     SETSWTBE\nSETSWTBE DS    0H                        Print informative message\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\"\n         MVC   LINE,LINE-1\n         MVC   LINE(71),=C'Table    marked from STEPLIB so PARMLIB UPDA-\n               TE(xx) will not overlay it.'\n         MVC   LINE+6(2),TABLEID\n         APUT  LINE,71\n         B     SETSTEPE\nSETSTEPN DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     SETSTEPE\nSETSTEPE DS    0H\n         L     R2,SAVER2C             Restore work register\n         L     R9,SAVER9R\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNOTSTEPL DS    0H                    Routine to turn off STEPLIB flags\n         ST    R9,SAVER9K\n         ST    R2,SAVER2C             Save work register\n         L     R2,LWAADDR\n         USING LWA,R2\nNOTSWTBL DS    0H                     Check which table we're seeing\n         TM    TIDFLAG,X'03'          PC OR PP table?\n         BNZ   NOTSTEPN               Say nothing changed.\n         TM    TIDFLAG,X'20'          E2?\n         BO    NOTSDOE2\n         TM    TIDFLAG,X'10'          E8?\n         BO    NOTSDOE8\n         TM    TIDFLAG,X'80'          AP?\n         BO    NOTSDOAP\n         TM    TIDFLAG,X'40'          NS?\n         BO    NOTSDONS\nNOTSDOE2 DS    0H\n         NI    LWAPRMLB,X'FF'-LWATE2ST   STEPLIB flag off for E2\n         B     NOTSWTBE\nNOTSDOE8 DS    0H\n         NI    LWAPRMLB,X'FF'-LWATE8ST   STEPLIB flag off for E8\n         B     NOTSWTBE\nNOTSDOAP DS    0H\n         NI    LWAPRMLB,X'FF'-LWATAPST   STEPLIB flag off for AP\n         B     NOTSWTBE\nNOTSDONS DS    0H\n         NI    LWAPRMLB,X'FF'-LWATNSST   STEPLIB flag off for NS\n         B     NOTSWTBE\nNOTSWTBE DS    0H                     Print informative message.\n         MVC   LINE,LINE-1            Print a blank first.\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   LINE,LINE-1\n         MVC   LINE(71),=C'Table    marked from not from STEPLIB. PARML-\n               IB UPDATE(xx) can overlay. '\n         MVC   LINE+6(2),TABLEID      Move table name into message.\n         APUT  LINE,71\n         B     NOTSTEPE\nNOTSTEPN DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NOTSTEPE\nNOTSTEPE DS    0H\n         L     R2,SAVER2C             Restore work register\n         L     R9,SAVER9K\n         BR    R9\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETLPABD DS    0H                  Get storage boundary values for LPA\n         ST    R9,SAVER9S\nGETLSTRT DS    0H\n         ST    R5,SAVER5C          Prepare a bunch of work registers\n         ST    R4,SAVER4C          Prepare a bunch of work registers\n         L     R5,X'10'            Point to CVT.\n         USING CVT,R5              Tell Assembler.\n         L     R4,CVTSMEXT         Point to CVT Extension.\n         USING CVTVSTGX,R4         Tell Assembler.\n         MVC   SAVMLPAS,CVTMLPAS   MLPA start\n         MVC   SAVMLPAE,CVTMLPAE   MLPA end\n         MVC   SAVFLPAS,CVTFLPAS   FLPA start\n         MVC   SAVFLPAE,CVTFLPAE   FLPA end\n         MVC   SAVPLPAS,CVTPLPAS   PLPA start\n         MVC   SAVPLPAE,CVTPLPAE   PLPA end\n         MVC   SAVEMLPS,CVTEMLPS   E-MLPA start\n         MVC   SAVEMLPE,CVTEMLPE   E-MLPA end\n         MVC   SAVEFLPS,CVTEFLPS   E-FLPA start\n         MVC   SAVEFLPE,CVTEFLPE   E-FLPA end\n         MVC   SAVEPLPS,CVTEPLPS   E-PLPA start\n         MVC   SAVEPLPE,CVTEPLPE   E-PLPA end\n         L     R5,SAVER5C          Restore the work registers\n         L     R4,SAVER4C          Restore the work registers\n         L     R9,SAVER9S\n         DROP  R5,R4\n         BR    R9                  Return\n*                                  Constants needed here.\nSAVMLPAS DC    A(0)\nSAVMLPAE DC    A(0)\nSAVFLPAS DC    A(0)\nSAVFLPAE DC    A(0)\nSAVPLPAS DC    A(0)\nSAVPLPAE DC    A(0)\nSAVEMLPS DC    A(0)\nSAVEMLPE DC    A(0)\nSAVEFLPS DC    A(0)\nSAVEFLPE DC    A(0)\nSAVEPLPS DC    A(0)\nSAVEPLPE DC    A(0)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETLPRNT DS    0H         Routine to Print LPA Range - action code X\n         ST    R9,SAVER9T\n         TM    LPADFLG,X'01'         Code wasn't X. Don't print.\n         BZ    GETLPRTE              Just restore R9 and go on.\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),=C' --- LPA RANGE DISPLAY ---  '\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'MLPA'\n         HEX   LINE+10,4,SAVMLPAS    MLPA range\n         HEX   LINE+20,4,SAVMLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'FLPA'\n         HEX   LINE+10,4,SAVFLPAS    FLPA range\n         HEX   LINE+20,4,SAVFLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'PLPA'      PLPA range\n         HEX   LINE+10,4,SAVPLPAS\n         HEX   LINE+20,4,SAVPLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-MLPA'    E-MLPA range\n         HEX   LINE+10,4,SAVEMLPS\n         HEX   LINE+20,4,SAVEMLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-FLPA'    E-FLPA range\n         HEX   LINE+10,4,SAVEFLPS\n         HEX   LINE+20,4,SAVEFLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-PLPA'    E-PLPA range\n         HEX   LINE+10,4,SAVEPLPS\n         HEX   LINE+20,4,SAVEPLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28     Print row of dashes at the bottom\n         APUT  LINE,35\nGETLPRTE DS    0H\n         L     R9,SAVER9T\n         BR    R9\nDASHES28 DC    28C'-'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTABLHD DS    0H\n         ST    R9,SAVER9U\n*                                 Print out table header\n         STM   R14,R1,SAVE1401    Now save registers 14 thru 1.\n         L     R1,TABLADDR        Load table start address.\n         MVC   DISPHDR(16),0(R1)  Move header info to display area.\n         ST    R1,HDRADDR         Store header address for alter\n         MVC   LINE,LINE-1        Clear line\n         MVC   LINE(15),=C'Table Header:  '  Move in title.\n         MVC   LINE+15(16),DISPHDR           Move in title info.\n         APUT  LINE,35\n         MVC   LINE,LINE-1        Clear line for next time\n         LM    R14,R1,SAVE1401    Restore  registers 14 thru 1.\n*-*\n         L     R9,SAVER9U\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**   When this routine is invoked, TABLADDR points to the start     **\n**    of the real table.                                            **\n** ---------------------------------------------------------------- **\nTESTLPA  DS    0H             Test if an address is in any LPA range\n         ST    R9,SAVER9W\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+20,4,TABLADDR     Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\nTESLSTRT DS    0H\n         CLC   TABLADDR,SAVMLPAS      Smaller than MLPA start?\n         BL    TESLTST1\n         CLC   TABLADDR,SAVMLPAE      Larger than MLPA end?\n         BH    TESLTST1\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST1 DS    0H\n         CLC   TABLADDR,SAVFLPAS      Smaller than FLPA start?\n         BL    TESLTST2\n         CLC   TABLADDR,SAVFLPAE      Larger than FLPA end?\n         BH    TESLTST2\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST2 DS    0H\n         CLC   TABLADDR,SAVPLPAS      Smaller than PLPA start?\n         BL    TESLTST3\n         CLC   TABLADDR,SAVPLPAE      Larger than PLPA end?\n         BH    TESLTST3\n         OI    LPAFLAG,X'01'\n         B     TESLMSG                In between, flag it and exit.\nTESLTST3 DS    0H\n         CLC   TABLADDR,SAVEMLPS      Smaller than E-MLPA start?\n         BL    TESLTST4\n         CLC   TABLADDR,SAVEMLPE      Larger than E-MLPA end?\n         BH    TESLTST4\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST4 DS    0H\n         CLC   TABLADDR,SAVEFLPS      Smaller than E-FLPA start?\n         BL    TESLTST5\n         CLC   TABLADDR,SAVEFLPE      Larger than E-FLPA end?\n         BH    TESLTST5\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST5 DS    0H\n         CLC   TABLADDR,SAVEPLPS      Smaller than E-PLPA start?\n         BL    TESLMSG\n         CLC   TABLADDR,SAVEPLPE      Larger than E-PLPA end?\n         BH    TESLMSG\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLMSG  DS    0H\n*-*-*->>                          Message the result of the LPA test.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         TM    LPAFLAG,X'01'      Is the address within LPA?\n         BZ    TESLMSGA           No. Say not.\n         MVC   LINE(40),=C'Table address lies within an LPA region.'\n         B     TESLMSGP           Go send the message.\nTESLMSGA DS    0H\n         MVC   LINE(42),=C'Table address is not within an LPA region.'\nTESLMSGP DS    0H                 Send the message.\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\nTESLEND  DS    0H\n         L     R9,SAVER9W\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGEDL DS    0H                     Say table was in LPALIB so that\n*                                       therefore nothing was changed.\n         ST    R9,SAVER9V\n         TM    LPAFLAG,X'01'          Table was loaded in the LPALIB\n*                                      storage range. Can't change it.\n         BZ    CHANGEEN\n         APUT  MESSAG2E,L'MESSAG2E    Say that table was from LPALIB.\n         APUT  MESSAG2D,L'MESSAG2D    Say that nothing was changed.\nCHANGEEN DS    0H\n         L     R9,SAVER9V\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nENTRYDSP DS    0H\n         ST    R9,SAVER9X\n         TM    TIDFLAG,X'03'      PC or PP table?\n         BNZ   ENTRYEXI           Yes. No display here.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         L     R1,NTRYCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Non-blank table entries:'\n         MVC   LINE+35(25),=C'(these are the ones used)'\n         APUT  LINE,65\n         MVC   LINE,LINE-1\n         L     R1,BLNKCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Perceived blank entries:'\n         MVC   LINE+35(25),=C'(potential for expansion)'\n         APUT  LINE,65\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nENTRYEXI DS    0H\n         L     R9,SAVER9X\n         BR    R9\nENTRYDEN DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**   Here are the rest of the constants for the program.            **\n** ---------------------------------------------------------------- **\nBLKSTRNG DC    XL10'00004040404040404040'\nENDSTRNG DC    XL10'FFFF4040404040404040'\nZEROES8  DC    X'0000000000000000'\nMASK10   DC    XL10'40202020202020202120'\n         DC    C' '\nBLANKS   DC    C'                                            '\nQUEST08  DC    C'?       '     Nullify table entry without terminating\nMESSAGET DC    C'TSUB Command - Display/Change USERID Auth Table Entry -\n               - xxxxxxxx'\nMESSAGEU DC    C'---- -------   ------- ------ ------ ---- ----- ----- -\n                 --------'\nMESSAGEC DC    C'  **--------   AFTER MAKING CHANGES   -------**'\nMESSAGED DC    C'  **--- STATE BEFORE MAKING TABLE CHANGES ---**'\nMESSAG1A DC    C'Table XX pointed to by the LWA has length available. H+\n               ex xxxx '\nMESSAG1B DC    C'Table XX pointed to by the LWA has no lengths. Blanks +\n               will delimit.'\nMESSAG1C DC    C'Table XX pointed to by the LWA came from an APF STEPLI+\n               B.'\nMESSAG1D DC    C'Table XX pointed to by the LWA did not come from an AP+\n               F STEPLIB.'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2E DC    C'Table is in LPALIB, and we will not attempt to alter i+\n               t.'\nMESSAG3A DC    C'Slot      in XX table has been changed to         .'\nMESSAG3B DC    C'Slot      in XX table has been blanked.            '\nMESSAG3C DC    C'                                                      +\n                  '\nMESSAG3D DC    C'Last 8 bytes of table header altered to \" PARMLIB\". '\nMESSAG3E DC    C'LWA size for table    has been changed from Hex xxxx t+\n               o Hex xxxx.'\nMESSAG3F DC    C'LWA size for table    is now Hex xxxx. '\nMESSAG3G DC    C'Slot      in XX table has been nullified.          '\nMESSA11A DC    C'  Supply a table code TT, followed by an action code A-\n               .'\nMESSA11B DC    C'Supply a program name, as the next parameter.   '\nMESSA11C DC    C'Valid table  codes are:  E2, E8, AP, NS, PC, PP. '\nMESSA11D DC    C'Valid action codes are:  R - replace, B - blank, D - d-\n               isplay,'\nMESSA11Z DC    C'  H - header, L - supply full table length, Z - zero t-\n               able length,'\nMESSA11Y DC    C'  S - mark table from STEPLIB, P - mark table from PAR-\n               MLIB,'\nMESSA11X DC    C'  X - display LPA storage ranges, M - supply minimum t-\n               able length.'\nMESSA11E DC    C'Please supply a program name.  '\nMESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-\n               on code.'\nMESSA11G DC   C'Please supply slot number to change, and program name.'\nMESSA11I DC    C'If D (display) is followed by a slot number, only that-\n                slot is shown.'\nMESSA11J DC    C'R (replace) requires a slot number, followed by a prog-\n               ram name.'\nMESSA11K DC    C'If D is not followed by a number, then the entire tabl-\n               e is displayed.'\nMESSA11L DC    C'  Instructions to use this program:                  '\nMESSA11M DC    C'  ------------ -- --- ---- -------                   '\nMESSA11N DC    C'B (blank) blanks the slot number given. Higher slots a-\n               re invalidated.'\nMESSA11O DC    C'D does not need APF authorization. All other codes req-\n               uire it.'\nMESSA11P DC    C'TSUB TTA nnn pgmname (nnn optional for D, both require-\n               d for R)'\nMESSA11Q DC    C'Codes: H,L,M,Z,P,S,X do not require extra parameters.'\nMESSA12Q DC    C'Please supply slot number to blank out. BE CAREFUL !'\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\nMESSDIAG DC    C'                                            '\nMESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '\nMESSAGEN DC    C'Supplied character        was not numeric. '\n         SPACE 3\n         LTORG\n         SPACE 3\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER23  DS    2F                  Save pair of regs R2, R3\nSAVER1A  DS    F                   Save R1 here\nSAVER1B  DS    F                   Save R1 here\nSAVER1C  DS    F                   Save R1 here\nSAVER2A  DS    F                   Save R2 here\nSAVER2B  DS    F                   Save R2 here\nSAVER2C  DS    F                   Save R2 here\nSAVER2D  DS    F                   Save R2 here\nSAVER2E  DS    F                   Save R2 here\nSAVER2F  DS    F                   Save R2 here\nSAVER2G  DS    F                   Save R2 here\nSAVER3A  DS    F                   Save R3 here\nSAVER3B  DS    F                   Save R3 here\nSAVER3C  DS    F                   Save R3 here\nSAVER4A  DS    F                   Save R4 here\nSAVER4B  DS    F                   Save R4 here\nSAVER4C  DS    F                   Save R4 here\nSAVER5A  DS    F                   Save R5 here\nSAVER5B  DS    F                   Save R5 here\nSAVER5C  DS    F                   Save R5 here\nSAVER5D  DS    F                   Save R5 here\nSAVER5E  DS    F                   Save R5 here\nSAVER5F  DS    F                   Save R5 here\nSAVER8A  DS    F                   Save R8 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nSAVLSLOT DS    F                   Save place where Key 0 will change\nSLOTBIN  DS    F                   Fullword binary value of slot number\nSLOTNOW  DS    F                   Slot number being searched\nDISPREG  DS    F                   DISPLAY\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nCHARSIZE DS    F\nOURSLOT  DS    F                   Address of current slot searched\nFOUNSLOT DS    F\nTABLEND  DS    F                   Estimated or real end addr of table\n* --- >\nTABLSTRT DS    F                   Start address of table\nTABLADDR DS    F                   Store address of current table\nTABLENUM DS    F                   Number of entries in table\nTABLESIZ DS    F                   Size of a table entry\n* --- >\nBLNKCNT  DS    F\nNTRYCNT  DS    F\n* --- >\nOFFSETSV DS    F\nWORKA    DC    D'0'                Work area for CVB\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nCODEPLAC DS    CL2                 Store entered table code here\nPAD01    DS    CL4                 Filler\nSAVECHAR DS    X\nSAVECH08 DS    X\nMEASFLG  DS    X\nSHBLFLG  DS    X\nOFFFLAG  DS    X                   What function are we doing?\nOFFFLAG1 DS    X                   Extra function flag\nOLDFLAG  DS    X                   Old system detected if X'01'\nTIDFLAG  DS    X                   Which table are we handling.\nLPAFLAG  DS    X                   Is the table address in the LPA?\nLPADFLG  DS    X                   Do LPA range display.\nPLATFLG  DS    X                   FCVE or PPVE exist.\nHAVLFLG  DS    X                   Have length of table available\nNSCHFLG  DS    X                   Dealing the 10-byte NS table?\nLWAPFLG  DS    X                   LWAPRMLB flag copied into program\n*              X'80'               LWATAPST TAP came from STEPLIB\n*              X'40'               LWATNSST TNS came from STEPLIB\n*              X'20'               LWATE2ST TE2 came from STEPLIB\n*              X'10'               LWATE8ST TE8 came from STEPLIB\nLWAMFLG  DS    X                   Which tables have a size in the LWA.\n*              X'80'               AP has a size in the LWA.\n*              X'40'               NS has a size in the LWA.\n*              X'20'               E2 has a size in the LWA.\n*              X'10'               E8 has a size in the LWA.\nFLAGZ    DS    X\n*              X'01'               Found a blank entry. End table srch.\n*              X'02'               Parm number is past the end of table\n*              X'04'               Table lengths have been supplied.\nPAD02    DS    CL4                 Filler\nFSTNAME  DC    CL8' '              Entered program name for \"Replace\"\nFSTCOUNT DS    F                   Number of characters in FSTNAME\nFSTCHALF DC    H'0'\nPAD03    DS    CL4                 Filler\nTABENNUM DC    CL10' '\nPAD03A   DS    CL4                 Filler\nFSTFIELD DS    0CL8\nFSTNUME  DC    CL5' '\nFSTNUPAD DC    CL3' '\nFSTNOUNT DS    F                   Number of characters in FSTNAME\nFSTNHALF DC    H'0'\nPAD04    DS    CL4                 Filler\nSLOTSAVE DS    CL10\nPAD05    DS    CL4                 Filler\nSNDNAME  DC    CL8' '\nSNDCOUNT DS    F                   Number of characters in SNDNAME\nSNDCHALF DC    H'0'\nTABCODE  DC    CL8' '              Original OUTLIM character\n         DS    CL7                 PADDING\nDISPHDR  DS    CL16                Table header display area\n         DS    CL1\nHDRADDR  DS    F                   Address of table header\nCMDBCOPY DS    CL252\n         DS    CL128               PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\nLINAB    DS    C                   LINE-1\nLINA     DS    CL137               Output line area\nLINAT    EQU   LINA+7              Indented line\nTRTPGMNM DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'40020202020202020202020202020202'\n         DC    X'02020202020202020202025B02020202'\n         DC    X'0202020202020202020202020202026F'\n         DC    X'02020202020202020202027B7C020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         SPACE\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         IKJEFLWA\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUB$": {"ttr": 13834, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=A,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD,NOXREF)\n//*TEPLIB  DD DISP=SHR,DSN=IBMUSER.S19.HLASM\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.S19.MACLIB\n//         DD DISP=SHR,DSN=IBMUSER.S19.MODGEN\n//         DD DISP=SHR,DSN=IBMUSER.B.ASM\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(TSUB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,9),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n ENTRY   TSUB\n NAME    TSUB(R)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSUB#01": {"ttr": 14081, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E8D\n\n     This is from a userid that took its tables from PARMLIB.\n     Note the messages below, to that effect.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nE8D   04     Program table code + Function code\nTable address:      0000B3E8\nTable address is not within an LPA region.\nNon-blank table entries:      33   (these are the ones used)\nPerceived blank entries:       1   (potential for expansion)\nTable E8 pointed to by the LWA has length available. Hex 0120.\nTable E8 pointed to by the LWA did not come from an APF STEPLIB.\nTable Header:  IKJEFTE8 PARMLIB\nNumber of valid entries:      34\nE8 Table Entry Number:         1  ICHUT100\nE8 Table Entry Number:         2  ICHUT200\nE8 Table Entry Number:         3  ICHUT400\nE8 Table Entry Number:         4  ICHDSM00\nE8 Table Entry Number:         5  IRRDSC00\nE8 Table Entry Number:         6  IRRUT100\nE8 Table Entry Number:         7  IRRUT200\nE8 Table Entry Number:         8  IRRUT400\nE8 Table Entry Number:         9  IRRDPI00\nE8 Table Entry Number:        10  CSFDAUTH\nE8 Table Entry Number:        11  ICADCT\nE8 Table Entry Number:        12  ICADDCT\nE8 Table Entry Number:        13  ICADCFGS\nE8 Table Entry Number:        14  ICADPFTP\nE8 Table Entry Number:        15  ICADFTPD\nE8 Table Entry Number:        16  ICADSLOG\nE8 Table Entry Number:        17  ICADSOCK\nE8 Table Entry Number:        18  ICADSOXD\nE8 Table Entry Number:        19  ICADSTAK\nE8 Table Entry Number:        20  ICADIKED\nE8 Table Entry Number:        21  IEBCOPY\nE8 Table Entry Number:        22  IOEGRWAG\nE8 Table Entry Number:        23  IOENEWAG\nE8 Table Entry Number:        24  IOESALVG\nE8 Table Entry Number:        25  IOEBAK\nE8 Table Entry Number:        26  IOEBOS\nE8 Table Entry Number:        27  IOECM\nE8 Table Entry Number:        28  IOEDCEER\nE8 Table Entry Number:        29  IOEDFSXP\nE8 Table Entry Number:        30  IOEFTS\nE8 Table Entry Number:        31  IOEMAPID\nE8 Table Entry Number:        32  IOESCOUT\nE8 Table Entry Number:        33  IOEUDBG\nE8 Table Entry Number:        34  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#02": {"ttr": 14083, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB APD\n\n     This was from a userid that loaded its tables from PARMLIB.\n     See messages below, in the command output.\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nAPD   04     Program table code + Function code\nTable address:      0000B7E0\nTable address is not within an LPA region.\nNon-blank table entries:       5   (these are the ones used)\nPerceived blank entries:       1   (potential for expansion)\nTable AP pointed to by the LWA has length available. Hex 0040.\nTable AP pointed to by the LWA did not come from an APF STEPLIB.\nTable Header:  IKJEFTAP PARMLIB\nNumber of valid entries:       6\nAP Table Entry Number:         1  CSFDAUTH\nAP Table Entry Number:         2  LWATMGR\nAP Table Entry Number:         3  IEBCOPY\nAP Table Entry Number:         4  ICQASLI0\nAP Table Entry Number:         5  IKJEFF76\nAP Table Entry Number:         6  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#03": {"ttr": 14085, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2D\n\n    This was on a userid where there was an APF-authorized STEPLIB\n    library that had an IKJTABLS load library assembled from the\n    example on File 185 called ASMTABLS.  Note the message in TSUB\n    to that effect.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nE2D   04     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     294   (these are the ones used)\nPerceived blank entries:      30   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     295\nE2 Table Entry Number:         1  $$\nE2 Table Entry Number:         2  $HOWMVS\nE2 Table Entry Number:         3  $MDSMAIN\nE2 Table Entry Number:         4  ABUDSN\nE2 Table Entry Number:         5  AD\nE2 Table Entry Number:         6  ADB2UTIL\nE2 Table Entry Number:         7  ADDDIR\nE2 Table Entry Number:         8  ADDFILE\nE2 Table Entry Number:         9  ADDGROUP\nE2 Table Entry Number:        10  ADDSD\nE2 Table Entry Number:        11  ADDUSER\nE2 Table Entry Number:        12  ADIR\nE2 Table Entry Number:        13  ADNR\nE2 Table Entry Number:        14  ADYOPCMD\nE2 Table Entry Number:        15  AF\nE2 Table Entry Number:        16  AG\nE2 Table Entry Number:        17  AHOWMVS\nE2 Table Entry Number:        18  ALD\nE2 Table Entry Number:        19  ALF\nE2 Table Entry Number:        20  ALG\nE2 Table Entry Number:        21  ALTDIR\nE2 Table Entry Number:        22  ALTDSD\nE2 Table Entry Number:        23  ALTER\nE2 Table Entry Number:        24  ALTFILE\nE2 Table Entry Number:        25  ALTGROUP\nE2 Table Entry Number:        26  ALTUSER\nE2 Table Entry Number:        27  ALU\nE2 Table Entry Number:        28  APCACBL\nE2 Table Entry Number:        29  APCANB\nE2 Table Entry Number:        30  APCARB\nE2 Table Entry Number:        31  APCAUB\nE2 Table Entry Number:        32  APFCMD\nE2 Table Entry Number:        33  ASUB\nE2 Table Entry Number:        34  AU\nE2 Table Entry Number:        35  BACKUP\nE2 Table Entry Number:        36  BCMDEL\nE2 Table Entry Number:        37  BCMDEL1\nE2 Table Entry Number:        38  BCMNAUTH\nE2 Table Entry Number:        39  BCMNUPD\nE2 Table Entry Number:        40  BDATA\nE2 Table Entry Number:        41  BDMNUPD\nE2 Table Entry Number:        42  BINDDATA\nE2 Table Entry Number:        43  BLKUPD\nE2 Table Entry Number:        44  BUDDSN\nE2 Table Entry Number:        45  BUDGET\nE2 Table Entry Number:        46  CAE$BQRY\nE2 Table Entry Number:        47  CANCELU\nE2 Table Entry Number:        48  CAS9UDTN\nE2 Table Entry Number:        49  CDELPAIR\nE2 Table Entry Number:        50  CDMRSTAT\nE2 Table Entry Number:        51  CDSCB\nE2 Table Entry Number:        52  CESTPAIR\nE2 Table Entry Number:        53  CHKPT\nE2 Table Entry Number:        54  CINMX\nE2 Table Entry Number:        55  CLCHECK\nE2 Table Entry Number:        56  CNVTCAT\nE2 Table Entry Number:        57  CO\nE2 Table Entry Number:        58  COFDMON\nE2 Table Entry Number:        59  CONNECT\nE2 Table Entry Number:        60  CONSPROF\nE2 Table Entry Number:        61  CPSCB\nE2 Table Entry Number:        62  CQUERYSG\nE2 Table Entry Number:        63  CRECOVER\nE2 Table Entry Number:        64  CSCAN\nE2 Table Entry Number:        65  CSUSPEND\nE2 Table Entry Number:        66  DCAS\nE2 Table Entry Number:        67  DD\nE2 Table Entry Number:        68  DDIR\nE2 Table Entry Number:        69  DEF\nE2 Table Entry Number:        70  DEFINE\nE2 Table Entry Number:        71  DEL\nE2 Table Entry Number:        72  DELDIR\nE2 Table Entry Number:        73  DELDSD\nE2 Table Entry Number:        74  DELETE\nE2 Table Entry Number:        75  DELFILE\nE2 Table Entry Number:        76  DELGROUP\nE2 Table Entry Number:        77  DELUSER\nE2 Table Entry Number:        78  DF\nE2 Table Entry Number:        79  DG\nE2 Table Entry Number:        80  DITTO\nE2 Table Entry Number:        81  DITTOA\nE2 Table Entry Number:        82  DITTOU\nE2 Table Entry Number:        83  DMRSHR\nE2 Table Entry Number:        84  DRI\nE2 Table Entry Number:        85  DU\nE2 Table Entry Number:        86  ERWMAUTH\nE2 Table Entry Number:        87  EX\nE2 Table Entry Number:        88  EXP\nE2 Table Entry Number:        89  EXPORT\nE2 Table Entry Number:        90  EYU9XENF\nE2 Table Entry Number:        91  EZAZSSI\nE2 Table Entry Number:        92  EZBREINI\nE2 Table Entry Number:        93  EZBTNINI\nE2 Table Entry Number:        94  FCESTABL\nE2 Table Entry Number:        95  FCQUERY\nE2 Table Entry Number:        96  FCWITHDR\nE2 Table Entry Number:        97  FTPD\nE2 Table Entry Number:        98  FTPDNS\nE2 Table Entry Number:        99  GJTRUCBS\nE2 Table Entry Number:       100  IEBCOPY\nE2 Table Entry Number:       101  IKJEHDSF\nE2 Table Entry Number:       102  IKJEHDS1\nE2 Table Entry Number:       103  IKJPRMLB\nE2 Table Entry Number:       104  IM\nE2 Table Entry Number:       105  IMP\nE2 Table Entry Number:       106  IMPORT\nE2 Table Entry Number:       107  IOBSNMP\nE2 Table Entry Number:       108  IQIEXPN\nE2 Table Entry Number:       109  IQIMAIN\nE2 Table Entry Number:       110  IQIQUERY\nE2 Table Entry Number:       111  IQIQUIT\nE2 Table Entry Number:       112  IRRDPI00\nE2 Table Entry Number:       113  ISPICP\nE2 Table Entry Number:       114  ISRPCP\nE2 Table Entry Number:       115  LBADV\nE2 Table Entry Number:       116  LBAGENT\nE2 Table Entry Number:       117  LD\nE2 Table Entry Number:       118  LDATA\nE2 Table Entry Number:       119  LDIR\nE2 Table Entry Number:       120  LDIRECT\nE2 Table Entry Number:       121  LF\nE2 Table Entry Number:       122  LFILE\nE2 Table Entry Number:       123  LG\nE2 Table Entry Number:       124  LISTB\nE2 Table Entry Number:       125  LISTBC\nE2 Table Entry Number:       126  LISTD\nE2 Table Entry Number:       127  LISTDATA\nE2 Table Entry Number:       128  LISTDS\nE2 Table Entry Number:       129  LISTDSD\nE2 Table Entry Number:       130  LISTGRP\nE2 Table Entry Number:       131  LISTUSER\nE2 Table Entry Number:       132  LLWA\nE2 Table Entry Number:       133  LMRKTSO\nE2 Table Entry Number:       134  LOCKTERM\nE2 Table Entry Number:       135  LOOK\nE2 Table Entry Number:       136  LPQ\nE2 Table Entry Number:       137  LPR\nE2 Table Entry Number:       138  LPRM\nE2 Table Entry Number:       139  LPROC\nE2 Table Entry Number:       140  LSLT\nE2 Table Entry Number:       141  LU\nE2 Table Entry Number:       142  LWATMGR\nE2 Table Entry Number:       143  MAKEUSER\nE2 Table Entry Number:       144  MIMTSO\nE2 Table Entry Number:       145  MODDVIPA\nE2 Table Entry Number:       146  MU\nE2 Table Entry Number:       147  MVPMAIN\nE2 Table Entry Number:       148  MVPXDISP\nE2 Table Entry Number:       149  MVSCPCMD\nE2 Table Entry Number:       150  NAMEDXFR\nE2 Table Entry Number:       151  NAMED4\nE2 Table Entry Number:       152  NDVRC1\nE2 Table Entry Number:       153  NETSTAT\nE2 Table Entry Number:       154  NSUPDATE\nE2 Table Entry Number:       155  NSUPDAT4\nE2 Table Entry Number:       156  NYPPW\nE2 Table Entry Number:       157  OC\nE2 Table Entry Number:       158  OMPROUTE\nE2 Table Entry Number:       159  OP\nE2 Table Entry Number:       160  OPER\nE2 Table Entry Number:       161  OPERATOR\nE2 Table Entry Number:       162  OPINFO\nE2 Table Entry Number:       163  OPING\nE2 Table Entry Number:       164  OPSCMD\nE2 Table Entry Number:       165  OPSCONSL\nE2 Table Entry Number:       166  OPSOSCMD\nE2 Table Entry Number:       167  OPSPARM\nE2 Table Entry Number:       168  OPSREPLY\nE2 Table Entry Number:       169  OPSTAT\nE2 Table Entry Number:       170  OPSWTO\nE2 Table Entry Number:       171  OSNMPD\nE2 Table Entry Number:       172  OTRACERT\nE2 Table Entry Number:       173  PACKRAT\nE2 Table Entry Number:       174  PARMLIB\nE2 Table Entry Number:       175  PASSWORD\nE2 Table Entry Number:       176  PDIR\nE2 Table Entry Number:       177  PDSCLEAN\nE2 Table Entry Number:       178  PDSEAUTH\nE2 Table Entry Number:       179  PE\nE2 Table Entry Number:       180  PERMDIR\nE2 Table Entry Number:       181  PERMFILE\nE2 Table Entry Number:       182  PERMIT\nE2 Table Entry Number:       183  PF\nE2 Table Entry Number:       184  PHRASE\nE2 Table Entry Number:       185  PING\nE2 Table Entry Number:       186  POPPER\nE2 Table Entry Number:       187  PRINT\nE2 Table Entry Number:       188  PW\nE2 Table Entry Number:       189  Q\nE2 Table Entry Number:       190  QUEUE\nE2 Table Entry Number:       191  Q522\nE2 Table Entry Number:       192  RACDCERT\nE2 Table Entry Number:       193  RACFSIM\nE2 Table Entry Number:       194  RACLINK\nE2 Table Entry Number:       195  RACONVRT\nE2 Table Entry Number:       196  RACPRIV\nE2 Table Entry Number:       197  RALT\nE2 Table Entry Number:       198  RALTER\nE2 Table Entry Number:       199  RDEF\nE2 Table Entry Number:       200  RDEFINE\nE2 Table Entry Number:       201  RDEL\nE2 Table Entry Number:       202  RDELETE\nE2 Table Entry Number:       203  RE\nE2 Table Entry Number:       204  RECEIVE\nE2 Table Entry Number:       205  RELOGON\nE2 Table Entry Number:       206  REMOVE\nE2 Table Entry Number:       207  REPRO\nE2 Table Entry Number:       208  RESOLVE\nE2 Table Entry Number:       209  REVIEW\nE2 Table Entry Number:       210  REVVSAM\nE2 Table Entry Number:       211  REXCPCMD\nE2 Table Entry Number:       212  RL\nE2 Table Entry Number:       213  RLIST\nE2 Table Entry Number:       214  RLOAD\nE2 Table Entry Number:       215  RLOADA\nE2 Table Entry Number:       216  RMM\nE2 Table Entry Number:       217  RPF\nE2 Table Entry Number:       218  RPFE\nE2 Table Entry Number:       219  RSH\nE2 Table Entry Number:       220  RSHD\nE2 Table Entry Number:       221  RVARY\nE2 Table Entry Number:       222  SAMENDM\nE2 Table Entry Number:       223  SDSF\nE2 Table Entry Number:       224  SE\nE2 Table Entry Number:       225  SEARCH\nE2 Table Entry Number:       226  SECURE\nE2 Table Entry Number:       227  SEND\nE2 Table Entry Number:       228  SETC\nE2 Table Entry Number:       229  SETCACHE\nE2 Table Entry Number:       230  SETPASSW\nE2 Table Entry Number:       231  SETPW\nE2 Table Entry Number:       232  SETPW2\nE2 Table Entry Number:       233  SETR\nE2 Table Entry Number:       234  SETROPTS\nE2 Table Entry Number:       235  SETUSER\nE2 Table Entry Number:       236  SHCDS\nE2 Table Entry Number:       237  SM\nE2 Table Entry Number:       238  SMTP\nE2 Table Entry Number:       239  SNTPD\nE2 Table Entry Number:       240  SPACE\nE2 Table Entry Number:       241  SPY\nE2 Table Entry Number:       242  SR\nE2 Table Entry Number:       243  SRDIR\nE2 Table Entry Number:       244  SRF\nE2 Table Entry Number:       245  SRFILE\nE2 Table Entry Number:       246  SRSTAT\nE2 Table Entry Number:       247  STEPLIB\nE2 Table Entry Number:       248  STEPLIBN\nE2 Table Entry Number:       249  SU\nE2 Table Entry Number:       250  SYNC\nE2 Table Entry Number:       251  SYSPROG\nE2 Table Entry Number:       252  TEAEXTSO\nE2 Table Entry Number:       253  TERM\nE2 Table Entry Number:       254  TERMINAL\nE2 Table Entry Number:       255  TESTA\nE2 Table Entry Number:       256  TESTAUTH\nE2 Table Entry Number:       257  TMONCICS\nE2 Table Entry Number:       258  TMONDB2\nE2 Table Entry Number:       259  TMONIMS\nE2 Table Entry Number:       260  TMONMVS\nE2 Table Entry Number:       261  TRACERTE\nE2 Table Entry Number:       262  TRANSMIT\nE2 Table Entry Number:       263  TRAPFWD\nE2 Table Entry Number:       264  TRMD\nE2 Table Entry Number:       265  TSOENQ\nE2 Table Entry Number:       266  TSOSMS\nE2 Table Entry Number:       267  TSUB\nE2 Table Entry Number:       268  UKEYCSA\nE2 Table Entry Number:       269  USAT\nE2 Table Entry Number:       270  USIT\nE2 Table Entry Number:       271  USOT\nE2 Table Entry Number:       272  USUT\nE2 Table Entry Number:       273  VERIFY\nE2 Table Entry Number:       274  VFY\nE2 Table Entry Number:       275  VIEWUSER\nE2 Table Entry Number:       276  VLFNOTE\nE2 Table Entry Number:       277  VMCF\nE2 Table Entry Number:       278  VU\nE2 Table Entry Number:       279  WAITT\nE2 Table Entry Number:       280  WHOENQ\nE2 Table Entry Number:       281  WSSTAT\nE2 Table Entry Number:       282  XD\nE2 Table Entry Number:       283  XDCCALLA\nE2 Table Entry Number:       284  XDCCMDA\nE2 Table Entry Number:       285  XF\nE2 Table Entry Number:       286  XMDSMAIN\nE2 Table Entry Number:       287  XMIT\nE2 Table Entry Number:       288  XTRCUSER\nE2 Table Entry Number:       289  XU\nE2 Table Entry Number:       290  YKCONMSG\nE2 Table Entry Number:       291  ZAP\nE2 Table Entry Number:       292  ZAP$\nE2 Table Entry Number:       293  ZAPLWA\nE2 Table Entry Number:       294  ZAPV\nE2 Table Entry Number:       295  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#04": {"ttr": 14091, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2R 295 CQX\n\n     This command replaces the former contents of slot 294, which\n     had been empty, with the program name entry CQX.  This has the\n     effect of allowing execution of the CQX command as an APF\n     authorized program.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2R   01     Program table code + Function code\n295          Entry slot number\n00000003     Length of command\nCQX          New program name\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     294   (these are the ones used)\nPerceived blank entries:      30   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     295\nE2 Table Entry Number:       295  *empty*\n\n  **--------   AFTER MAKING CHANGES   -------**\nSlot  295 in E2 table has been changed to CQX     .\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#05": {"ttr": 14093, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2L   (compare TSUB E2M - example TSUB#06)\n\n     This command measures the length of the IKJEFTE2 table in\n     the user's address space, to (and including) all trailing blank\n     table entries.  Then that length is plugged into the LWA field\n     which is supposed to contain the length of the IKJEFTE2 table.\n     The messages below, tell you what happened.  Another TSUB E2D\n     command will tell you the resulting state of the E2 table.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2L   10     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\n\n  **--------   AFTER MAKING CHANGES   -------**\nLWA size for table E2 has been changed from Hex 0000 to Hex 0A30.\nTable E2 pointed to by the LWA has length available. Hex 0A30.\n\nReturn Code = 0\n\n-----------------------------------------------------------------\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nE2D   04     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has length available. Hex 0A30.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     324\nE2 Table Entry Number:         1  $$\nE2 Table Entry Number:         2  $HOWMVS\nE2 Table Entry Number:         3  $MDSMAIN\nE2 Table Entry Number:         4  ABUDSN\nE2 Table Entry Number:         5  AD\nE2 Table Entry Number:         6  ADB2UTIL\nE2 Table Entry Number:         7  ADDDIR\nE2 Table Entry Number:         8  ADDFILE\nE2 Table Entry Number:         9  ADDGROUP\nE2 Table Entry Number:        10  ADDSD\nE2 Table Entry Number:        11  ADDUSER\nE2 Table Entry Number:        12  ADIR\nE2 Table Entry Number:        13  ADNR\nE2 Table Entry Number:        14  ADYOPCMD\nE2 Table Entry Number:        15  AF\nE2 Table Entry Number:        16  AG\nE2 Table Entry Number:        17  AHOWMVS\nE2 Table Entry Number:        18  ALD\nE2 Table Entry Number:        19  ALF\nE2 Table Entry Number:        20  ALG\nE2 Table Entry Number:        21  ALTDIR\nE2 Table Entry Number:        22  ALTDSD\nE2 Table Entry Number:        23  ALTER\nE2 Table Entry Number:        24  ALTFILE\nE2 Table Entry Number:        25  ALTGROUP\nE2 Table Entry Number:        26  ALTUSER\nE2 Table Entry Number:        27  ALU\nE2 Table Entry Number:        28  APCACBL\nE2 Table Entry Number:        29  APCANB\nE2 Table Entry Number:        30  APCARB\nE2 Table Entry Number:        31  APCAUB\nE2 Table Entry Number:        32  APFCMD\nE2 Table Entry Number:        33  ASUB\nE2 Table Entry Number:        34  AU\nE2 Table Entry Number:        35  BACKUP\nE2 Table Entry Number:        36  BCMDEL\nE2 Table Entry Number:        37  BCMDEL1\nE2 Table Entry Number:        38  BCMNAUTH\nE2 Table Entry Number:        39  BCMNUPD\nE2 Table Entry Number:        40  BDATA\nE2 Table Entry Number:        41  BDMNUPD\nE2 Table Entry Number:        42  BINDDATA\nE2 Table Entry Number:        43  BLKUPD\nE2 Table Entry Number:        44  BUDDSN\nE2 Table Entry Number:        45  BUDGET\nE2 Table Entry Number:        46  CAE$BQRY\nE2 Table Entry Number:        47  CANCELU\nE2 Table Entry Number:        48  CAS9UDTN\nE2 Table Entry Number:        49  CDELPAIR\nE2 Table Entry Number:        50  CDMRSTAT\nE2 Table Entry Number:        51  CDSCB\nE2 Table Entry Number:        52  CESTPAIR\nE2 Table Entry Number:        53  CHKPT\nE2 Table Entry Number:        54  CINMX\nE2 Table Entry Number:        55  CLCHECK\nE2 Table Entry Number:        56  CNVTCAT\nE2 Table Entry Number:        57  CO\nE2 Table Entry Number:        58  COFDMON\nE2 Table Entry Number:        59  CONNECT\nE2 Table Entry Number:        60  CONSPROF\nE2 Table Entry Number:        61  CPSCB\nE2 Table Entry Number:        62  CQUERYSG\nE2 Table Entry Number:        63  CRECOVER\nE2 Table Entry Number:        64  CSCAN\nE2 Table Entry Number:        65  CSUSPEND\nE2 Table Entry Number:        66  DCAS\nE2 Table Entry Number:        67  DD\nE2 Table Entry Number:        68  DDIR\nE2 Table Entry Number:        69  DEF\nE2 Table Entry Number:        70  DEFINE\nE2 Table Entry Number:        71  DEL\nE2 Table Entry Number:        72  DELDIR\nE2 Table Entry Number:        73  DELDSD\nE2 Table Entry Number:        74  DELETE\nE2 Table Entry Number:        75  DELFILE\nE2 Table Entry Number:        76  DELGROUP\nE2 Table Entry Number:        77  DELUSER\nE2 Table Entry Number:        78  DF\nE2 Table Entry Number:        79  DG\nE2 Table Entry Number:        80  DITTO\nE2 Table Entry Number:        81  DITTOA\nE2 Table Entry Number:        82  DITTOU\nE2 Table Entry Number:        83  DMRSHR\nE2 Table Entry Number:        84  DRI\nE2 Table Entry Number:        85  DU\nE2 Table Entry Number:        86  ERWMAUTH\nE2 Table Entry Number:        87  EX\nE2 Table Entry Number:        88  EXP\nE2 Table Entry Number:        89  EXPORT\nE2 Table Entry Number:        90  EYU9XENF\nE2 Table Entry Number:        91  EZAZSSI\nE2 Table Entry Number:        92  EZBREINI\nE2 Table Entry Number:        93  EZBTNINI\nE2 Table Entry Number:        94  FCESTABL\nE2 Table Entry Number:        95  FCQUERY\nE2 Table Entry Number:        96  FCWITHDR\nE2 Table Entry Number:        97  FTPD\nE2 Table Entry Number:        98  FTPDNS\nE2 Table Entry Number:        99  GJTRUCBS\nE2 Table Entry Number:       100  IEBCOPY\nE2 Table Entry Number:       101  IKJEHDSF\nE2 Table Entry Number:       102  IKJEHDS1\nE2 Table Entry Number:       103  IKJPRMLB\nE2 Table Entry Number:       104  IM\nE2 Table Entry Number:       105  IMP\nE2 Table Entry Number:       106  IMPORT\nE2 Table Entry Number:       107  IOBSNMP\nE2 Table Entry Number:       108  IQIEXPN\nE2 Table Entry Number:       109  IQIMAIN\nE2 Table Entry Number:       110  IQIQUERY\nE2 Table Entry Number:       111  IQIQUIT\nE2 Table Entry Number:       112  IRRDPI00\nE2 Table Entry Number:       113  ISPICP\nE2 Table Entry Number:       114  ISRPCP\nE2 Table Entry Number:       115  LBADV\nE2 Table Entry Number:       116  LBAGENT\nE2 Table Entry Number:       117  LD\nE2 Table Entry Number:       118  LDATA\nE2 Table Entry Number:       119  LDIR\nE2 Table Entry Number:       120  LDIRECT\nE2 Table Entry Number:       121  LF\nE2 Table Entry Number:       122  LFILE\nE2 Table Entry Number:       123  LG\nE2 Table Entry Number:       124  LISTB\nE2 Table Entry Number:       125  LISTBC\nE2 Table Entry Number:       126  LISTD\nE2 Table Entry Number:       127  LISTDATA\nE2 Table Entry Number:       128  LISTDS\nE2 Table Entry Number:       129  LISTDSD\nE2 Table Entry Number:       130  LISTGRP\nE2 Table Entry Number:       131  LISTUSER\nE2 Table Entry Number:       132  LLWA\nE2 Table Entry Number:       133  LMRKTSO\nE2 Table Entry Number:       134  LOCKTERM\nE2 Table Entry Number:       135  LOOK\nE2 Table Entry Number:       136  LPQ\nE2 Table Entry Number:       137  LPR\nE2 Table Entry Number:       138  LPRM\nE2 Table Entry Number:       139  LPROC\nE2 Table Entry Number:       140  LSLT\nE2 Table Entry Number:       141  LU\nE2 Table Entry Number:       142  LWATMGR\nE2 Table Entry Number:       143  MAKEUSER\nE2 Table Entry Number:       144  MIMTSO\nE2 Table Entry Number:       145  MODDVIPA\nE2 Table Entry Number:       146  MU\nE2 Table Entry Number:       147  MVPMAIN\nE2 Table Entry Number:       148  MVPXDISP\nE2 Table Entry Number:       149  MVSCPCMD\nE2 Table Entry Number:       150  NAMEDXFR\nE2 Table Entry Number:       151  NAMED4\nE2 Table Entry Number:       152  NDVRC1\nE2 Table Entry Number:       153  NETSTAT\nE2 Table Entry Number:       154  NSUPDATE\nE2 Table Entry Number:       155  NSUPDAT4\nE2 Table Entry Number:       156  NYPPW\nE2 Table Entry Number:       157  OC\nE2 Table Entry Number:       158  OMPROUTE\nE2 Table Entry Number:       159  OP\nE2 Table Entry Number:       160  OPER\nE2 Table Entry Number:       161  OPERATOR\nE2 Table Entry Number:       162  OPINFO\nE2 Table Entry Number:       163  OPING\nE2 Table Entry Number:       164  OPSCMD\nE2 Table Entry Number:       165  OPSCONSL\nE2 Table Entry Number:       166  OPSOSCMD\nE2 Table Entry Number:       167  OPSPARM\nE2 Table Entry Number:       168  OPSREPLY\nE2 Table Entry Number:       169  OPSTAT\nE2 Table Entry Number:       170  OPSWTO\nE2 Table Entry Number:       171  OSNMPD\nE2 Table Entry Number:       172  OTRACERT\nE2 Table Entry Number:       173  PACKRAT\nE2 Table Entry Number:       174  PARMLIB\nE2 Table Entry Number:       175  PASSWORD\nE2 Table Entry Number:       176  PDIR\nE2 Table Entry Number:       177  PDSCLEAN\nE2 Table Entry Number:       178  PDSEAUTH\nE2 Table Entry Number:       179  PE\nE2 Table Entry Number:       180  PERMDIR\nE2 Table Entry Number:       181  PERMFILE\nE2 Table Entry Number:       182  PERMIT\nE2 Table Entry Number:       183  PF\nE2 Table Entry Number:       184  PHRASE\nE2 Table Entry Number:       185  PING\nE2 Table Entry Number:       186  POPPER\nE2 Table Entry Number:       187  PRINT\nE2 Table Entry Number:       188  PW\nE2 Table Entry Number:       189  Q\nE2 Table Entry Number:       190  QUEUE\nE2 Table Entry Number:       191  Q522\nE2 Table Entry Number:       192  RACDCERT\nE2 Table Entry Number:       193  RACFSIM\nE2 Table Entry Number:       194  RACLINK\nE2 Table Entry Number:       195  RACONVRT\nE2 Table Entry Number:       196  RACPRIV\nE2 Table Entry Number:       197  RALT\nE2 Table Entry Number:       198  RALTER\nE2 Table Entry Number:       199  RDEF\nE2 Table Entry Number:       200  RDEFINE\nE2 Table Entry Number:       201  RDEL\nE2 Table Entry Number:       202  RDELETE\nE2 Table Entry Number:       203  RE\nE2 Table Entry Number:       204  RECEIVE\nE2 Table Entry Number:       205  RELOGON\nE2 Table Entry Number:       206  REMOVE\nE2 Table Entry Number:       207  REPRO\nE2 Table Entry Number:       208  RESOLVE\nE2 Table Entry Number:       209  REVIEW\nE2 Table Entry Number:       210  REVVSAM\nE2 Table Entry Number:       211  REXCPCMD\nE2 Table Entry Number:       212  RL\nE2 Table Entry Number:       213  RLIST\nE2 Table Entry Number:       214  RLOAD\nE2 Table Entry Number:       215  RLOADA\nE2 Table Entry Number:       216  RMM\nE2 Table Entry Number:       217  RPF\nE2 Table Entry Number:       218  RPFE\nE2 Table Entry Number:       219  RSH\nE2 Table Entry Number:       220  RSHD\nE2 Table Entry Number:       221  RVARY\nE2 Table Entry Number:       222  SAMENDM\nE2 Table Entry Number:       223  SDSF\nE2 Table Entry Number:       224  SE\nE2 Table Entry Number:       225  SEARCH\nE2 Table Entry Number:       226  SECURE\nE2 Table Entry Number:       227  SEND\nE2 Table Entry Number:       228  SETC\nE2 Table Entry Number:       229  SETCACHE\nE2 Table Entry Number:       230  SETPASSW\nE2 Table Entry Number:       231  SETPW\nE2 Table Entry Number:       232  SETPW2\nE2 Table Entry Number:       233  SETR\nE2 Table Entry Number:       234  SETROPTS\nE2 Table Entry Number:       235  SETUSER\nE2 Table Entry Number:       236  SHCDS\nE2 Table Entry Number:       237  SM\nE2 Table Entry Number:       238  SMTP\nE2 Table Entry Number:       239  SNTPD\nE2 Table Entry Number:       240  SPACE\nE2 Table Entry Number:       241  SPY\nE2 Table Entry Number:       242  SR\nE2 Table Entry Number:       243  SRDIR\nE2 Table Entry Number:       244  SRF\nE2 Table Entry Number:       245  SRFILE\nE2 Table Entry Number:       246  SRSTAT\nE2 Table Entry Number:       247  STEPLIB\nE2 Table Entry Number:       248  STEPLIBN\nE2 Table Entry Number:       249  SU\nE2 Table Entry Number:       250  SYNC\nE2 Table Entry Number:       251  SYSPROG\nE2 Table Entry Number:       252  TEAEXTSO\nE2 Table Entry Number:       253  TERM\nE2 Table Entry Number:       254  TERMINAL\nE2 Table Entry Number:       255  TESTA\nE2 Table Entry Number:       256  TESTAUTH\nE2 Table Entry Number:       257  TMONCICS\nE2 Table Entry Number:       258  TMONDB2\nE2 Table Entry Number:       259  TMONIMS\nE2 Table Entry Number:       260  TMONMVS\nE2 Table Entry Number:       261  TRACERTE\nE2 Table Entry Number:       262  TRANSMIT\nE2 Table Entry Number:       263  TRAPFWD\nE2 Table Entry Number:       264  TRMD\nE2 Table Entry Number:       265  TSOENQ\nE2 Table Entry Number:       266  TSOSMS\nE2 Table Entry Number:       267  TSUB\nE2 Table Entry Number:       268  UKEYCSA\nE2 Table Entry Number:       269  USAT\nE2 Table Entry Number:       270  USIT\nE2 Table Entry Number:       271  USOT\nE2 Table Entry Number:       272  USUT\nE2 Table Entry Number:       273  VERIFY\nE2 Table Entry Number:       274  VFY\nE2 Table Entry Number:       275  VIEWUSER\nE2 Table Entry Number:       276  VLFNOTE\nE2 Table Entry Number:       277  VMCF\nE2 Table Entry Number:       278  VU\nE2 Table Entry Number:       279  WAITT\nE2 Table Entry Number:       280  WHOENQ\nE2 Table Entry Number:       281  WSSTAT\nE2 Table Entry Number:       282  XD\nE2 Table Entry Number:       283  XDCCALLA\nE2 Table Entry Number:       284  XDCCMDA\nE2 Table Entry Number:       285  XF\nE2 Table Entry Number:       286  XMDSMAIN\nE2 Table Entry Number:       287  XMIT\nE2 Table Entry Number:       288  XTRCUSER\nE2 Table Entry Number:       289  XU\nE2 Table Entry Number:       290  YKCONMSG\nE2 Table Entry Number:       291  ZAP\nE2 Table Entry Number:       292  ZAP$\nE2 Table Entry Number:       293  ZAPLWA\nE2 Table Entry Number:       294  ZAPV\nE2 Table Entry Number:       295  CQX\nE2 Table Entry Number:       296  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#06": {"ttr": 14341, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2M    (like E2L except the new length\n                                 only includes ONE blank at the end.)\n\n     This command measures the length of the IKJEFTE2 table in\n     the user's address space, to (and including) the first blank\n     table entry.  Then this length is plugged into the LWA field\n     which is supposed to contain the length of the IKJEFTE2 table.\n     The messages below, tell you what happened.  Another TSUB E2D\n     command will tell you the resulting state of the E2 table.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2M   10     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has length available. Hex 0A30.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     324\n\n  **--------   AFTER MAKING CHANGES   -------**\nLWA size for table E2 has been changed from Hex 0A30 to Hex 0950.\nTable E2 pointed to by the LWA has length available. Hex 0950.\n\nReturn Code = 0\n\n-----------------------------------------------------------------\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nE2D   04     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has length available. Hex 0950.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\nE2 Table Entry Number:         1  $$\nE2 Table Entry Number:         2  $HOWMVS\nE2 Table Entry Number:         3  $MDSMAIN\nE2 Table Entry Number:         4  ABUDSN\nE2 Table Entry Number:         5  AD\nE2 Table Entry Number:         6  ADB2UTIL\nE2 Table Entry Number:         7  ADDDIR\nE2 Table Entry Number:         8  ADDFILE\nE2 Table Entry Number:         9  ADDGROUP\nE2 Table Entry Number:        10  ADDSD\nE2 Table Entry Number:        11  ADDUSER\nE2 Table Entry Number:        12  ADIR\nE2 Table Entry Number:        13  ADNR\nE2 Table Entry Number:        14  ADYOPCMD\nE2 Table Entry Number:        15  AF\nE2 Table Entry Number:        16  AG\nE2 Table Entry Number:        17  AHOWMVS\nE2 Table Entry Number:        18  ALD\nE2 Table Entry Number:        19  ALF\nE2 Table Entry Number:        20  ALG\nE2 Table Entry Number:        21  ALTDIR\nE2 Table Entry Number:        22  ALTDSD\nE2 Table Entry Number:        23  ALTER\nE2 Table Entry Number:        24  ALTFILE\nE2 Table Entry Number:        25  ALTGROUP\nE2 Table Entry Number:        26  ALTUSER\nE2 Table Entry Number:        27  ALU\nE2 Table Entry Number:        28  APCACBL\nE2 Table Entry Number:        29  APCANB\nE2 Table Entry Number:        30  APCARB\nE2 Table Entry Number:        31  APCAUB\nE2 Table Entry Number:        32  APFCMD\nE2 Table Entry Number:        33  ASUB\nE2 Table Entry Number:        34  AU\nE2 Table Entry Number:        35  BACKUP\nE2 Table Entry Number:        36  BCMDEL\nE2 Table Entry Number:        37  BCMDEL1\nE2 Table Entry Number:        38  BCMNAUTH\nE2 Table Entry Number:        39  BCMNUPD\nE2 Table Entry Number:        40  BDATA\nE2 Table Entry Number:        41  BDMNUPD\nE2 Table Entry Number:        42  BINDDATA\nE2 Table Entry Number:        43  BLKUPD\nE2 Table Entry Number:        44  BUDDSN\nE2 Table Entry Number:        45  BUDGET\nE2 Table Entry Number:        46  CAE$BQRY\nE2 Table Entry Number:        47  CANCELU\nE2 Table Entry Number:        48  CAS9UDTN\nE2 Table Entry Number:        49  CDELPAIR\nE2 Table Entry Number:        50  CDMRSTAT\nE2 Table Entry Number:        51  CDSCB\nE2 Table Entry Number:        52  CESTPAIR\nE2 Table Entry Number:        53  CHKPT\nE2 Table Entry Number:        54  CINMX\nE2 Table Entry Number:        55  CLCHECK\nE2 Table Entry Number:        56  CNVTCAT\nE2 Table Entry Number:        57  CO\nE2 Table Entry Number:        58  COFDMON\nE2 Table Entry Number:        59  CONNECT\nE2 Table Entry Number:        60  CONSPROF\nE2 Table Entry Number:        61  CPSCB\nE2 Table Entry Number:        62  CQUERYSG\nE2 Table Entry Number:        63  CRECOVER\nE2 Table Entry Number:        64  CSCAN\nE2 Table Entry Number:        65  CSUSPEND\nE2 Table Entry Number:        66  DCAS\nE2 Table Entry Number:        67  DD\nE2 Table Entry Number:        68  DDIR\nE2 Table Entry Number:        69  DEF\nE2 Table Entry Number:        70  DEFINE\nE2 Table Entry Number:        71  DEL\nE2 Table Entry Number:        72  DELDIR\nE2 Table Entry Number:        73  DELDSD\nE2 Table Entry Number:        74  DELETE\nE2 Table Entry Number:        75  DELFILE\nE2 Table Entry Number:        76  DELGROUP\nE2 Table Entry Number:        77  DELUSER\nE2 Table Entry Number:        78  DF\nE2 Table Entry Number:        79  DG\nE2 Table Entry Number:        80  DITTO\nE2 Table Entry Number:        81  DITTOA\nE2 Table Entry Number:        82  DITTOU\nE2 Table Entry Number:        83  DMRSHR\nE2 Table Entry Number:        84  DRI\nE2 Table Entry Number:        85  DU\nE2 Table Entry Number:        86  ERWMAUTH\nE2 Table Entry Number:        87  EX\nE2 Table Entry Number:        88  EXP\nE2 Table Entry Number:        89  EXPORT\nE2 Table Entry Number:        90  EYU9XENF\nE2 Table Entry Number:        91  EZAZSSI\nE2 Table Entry Number:        92  EZBREINI\nE2 Table Entry Number:        93  EZBTNINI\nE2 Table Entry Number:        94  FCESTABL\nE2 Table Entry Number:        95  FCQUERY\nE2 Table Entry Number:        96  FCWITHDR\nE2 Table Entry Number:        97  FTPD\nE2 Table Entry Number:        98  FTPDNS\nE2 Table Entry Number:        99  GJTRUCBS\nE2 Table Entry Number:       100  IEBCOPY\nE2 Table Entry Number:       101  IKJEHDSF\nE2 Table Entry Number:       102  IKJEHDS1\nE2 Table Entry Number:       103  IKJPRMLB\nE2 Table Entry Number:       104  IM\nE2 Table Entry Number:       105  IMP\nE2 Table Entry Number:       106  IMPORT\nE2 Table Entry Number:       107  IOBSNMP\nE2 Table Entry Number:       108  IQIEXPN\nE2 Table Entry Number:       109  IQIMAIN\nE2 Table Entry Number:       110  IQIQUERY\nE2 Table Entry Number:       111  IQIQUIT\nE2 Table Entry Number:       112  IRRDPI00\nE2 Table Entry Number:       113  ISPICP\nE2 Table Entry Number:       114  ISRPCP\nE2 Table Entry Number:       115  LBADV\nE2 Table Entry Number:       116  LBAGENT\nE2 Table Entry Number:       117  LD\nE2 Table Entry Number:       118  LDATA\nE2 Table Entry Number:       119  LDIR\nE2 Table Entry Number:       120  LDIRECT\nE2 Table Entry Number:       121  LF\nE2 Table Entry Number:       122  LFILE\nE2 Table Entry Number:       123  LG\nE2 Table Entry Number:       124  LISTB\nE2 Table Entry Number:       125  LISTBC\nE2 Table Entry Number:       126  LISTD\nE2 Table Entry Number:       127  LISTDATA\nE2 Table Entry Number:       128  LISTDS\nE2 Table Entry Number:       129  LISTDSD\nE2 Table Entry Number:       130  LISTGRP\nE2 Table Entry Number:       131  LISTUSER\nE2 Table Entry Number:       132  LLWA\nE2 Table Entry Number:       133  LMRKTSO\nE2 Table Entry Number:       134  LOCKTERM\nE2 Table Entry Number:       135  LOOK\nE2 Table Entry Number:       136  LPQ\nE2 Table Entry Number:       137  LPR\nE2 Table Entry Number:       138  LPRM\nE2 Table Entry Number:       139  LPROC\nE2 Table Entry Number:       140  LSLT\nE2 Table Entry Number:       141  LU\nE2 Table Entry Number:       142  LWATMGR\nE2 Table Entry Number:       143  MAKEUSER\nE2 Table Entry Number:       144  MIMTSO\nE2 Table Entry Number:       145  MODDVIPA\nE2 Table Entry Number:       146  MU\nE2 Table Entry Number:       147  MVPMAIN\nE2 Table Entry Number:       148  MVPXDISP\nE2 Table Entry Number:       149  MVSCPCMD\nE2 Table Entry Number:       150  NAMEDXFR\nE2 Table Entry Number:       151  NAMED4\nE2 Table Entry Number:       152  NDVRC1\nE2 Table Entry Number:       153  NETSTAT\nE2 Table Entry Number:       154  NSUPDATE\nE2 Table Entry Number:       155  NSUPDAT4\nE2 Table Entry Number:       156  NYPPW\nE2 Table Entry Number:       157  OC\nE2 Table Entry Number:       158  OMPROUTE\nE2 Table Entry Number:       159  OP\nE2 Table Entry Number:       160  OPER\nE2 Table Entry Number:       161  OPERATOR\nE2 Table Entry Number:       162  OPINFO\nE2 Table Entry Number:       163  OPING\nE2 Table Entry Number:       164  OPSCMD\nE2 Table Entry Number:       165  OPSCONSL\nE2 Table Entry Number:       166  OPSOSCMD\nE2 Table Entry Number:       167  OPSPARM\nE2 Table Entry Number:       168  OPSREPLY\nE2 Table Entry Number:       169  OPSTAT\nE2 Table Entry Number:       170  OPSWTO\nE2 Table Entry Number:       171  OSNMPD\nE2 Table Entry Number:       172  OTRACERT\nE2 Table Entry Number:       173  PACKRAT\nE2 Table Entry Number:       174  PARMLIB\nE2 Table Entry Number:       175  PASSWORD\nE2 Table Entry Number:       176  PDIR\nE2 Table Entry Number:       177  PDSCLEAN\nE2 Table Entry Number:       178  PDSEAUTH\nE2 Table Entry Number:       179  PE\nE2 Table Entry Number:       180  PERMDIR\nE2 Table Entry Number:       181  PERMFILE\nE2 Table Entry Number:       182  PERMIT\nE2 Table Entry Number:       183  PF\nE2 Table Entry Number:       184  PHRASE\nE2 Table Entry Number:       185  PING\nE2 Table Entry Number:       186  POPPER\nE2 Table Entry Number:       187  PRINT\nE2 Table Entry Number:       188  PW\nE2 Table Entry Number:       189  Q\nE2 Table Entry Number:       190  QUEUE\nE2 Table Entry Number:       191  Q522\nE2 Table Entry Number:       192  RACDCERT\nE2 Table Entry Number:       193  RACFSIM\nE2 Table Entry Number:       194  RACLINK\nE2 Table Entry Number:       195  RACONVRT\nE2 Table Entry Number:       196  RACPRIV\nE2 Table Entry Number:       197  RALT\nE2 Table Entry Number:       198  RALTER\nE2 Table Entry Number:       199  RDEF\nE2 Table Entry Number:       200  RDEFINE\nE2 Table Entry Number:       201  RDEL\nE2 Table Entry Number:       202  RDELETE\nE2 Table Entry Number:       203  RE\nE2 Table Entry Number:       204  RECEIVE\nE2 Table Entry Number:       205  RELOGON\nE2 Table Entry Number:       206  REMOVE\nE2 Table Entry Number:       207  REPRO\nE2 Table Entry Number:       208  RESOLVE\nE2 Table Entry Number:       209  REVIEW\nE2 Table Entry Number:       210  REVVSAM\nE2 Table Entry Number:       211  REXCPCMD\nE2 Table Entry Number:       212  RL\nE2 Table Entry Number:       213  RLIST\nE2 Table Entry Number:       214  RLOAD\nE2 Table Entry Number:       215  RLOADA\nE2 Table Entry Number:       216  RMM\nE2 Table Entry Number:       217  RPF\nE2 Table Entry Number:       218  RPFE\nE2 Table Entry Number:       219  RSH\nE2 Table Entry Number:       220  RSHD\nE2 Table Entry Number:       221  RVARY\nE2 Table Entry Number:       222  SAMENDM\nE2 Table Entry Number:       223  SDSF\nE2 Table Entry Number:       224  SE\nE2 Table Entry Number:       225  SEARCH\nE2 Table Entry Number:       226  SECURE\nE2 Table Entry Number:       227  SEND\nE2 Table Entry Number:       228  SETC\nE2 Table Entry Number:       229  SETCACHE\nE2 Table Entry Number:       230  SETPASSW\nE2 Table Entry Number:       231  SETPW\nE2 Table Entry Number:       232  SETPW2\nE2 Table Entry Number:       233  SETR\nE2 Table Entry Number:       234  SETROPTS\nE2 Table Entry Number:       235  SETUSER\nE2 Table Entry Number:       236  SHCDS\nE2 Table Entry Number:       237  SM\nE2 Table Entry Number:       238  SMTP\nE2 Table Entry Number:       239  SNTPD\nE2 Table Entry Number:       240  SPACE\nE2 Table Entry Number:       241  SPY\nE2 Table Entry Number:       242  SR\nE2 Table Entry Number:       243  SRDIR\nE2 Table Entry Number:       244  SRF\nE2 Table Entry Number:       245  SRFILE\nE2 Table Entry Number:       246  SRSTAT\nE2 Table Entry Number:       247  STEPLIB\nE2 Table Entry Number:       248  STEPLIBN\nE2 Table Entry Number:       249  SU\nE2 Table Entry Number:       250  SYNC\nE2 Table Entry Number:       251  SYSPROG\nE2 Table Entry Number:       252  TEAEXTSO\nE2 Table Entry Number:       253  TERM\nE2 Table Entry Number:       254  TERMINAL\nE2 Table Entry Number:       255  TESTA\nE2 Table Entry Number:       256  TESTAUTH\nE2 Table Entry Number:       257  TMONCICS\nE2 Table Entry Number:       258  TMONDB2\nE2 Table Entry Number:       259  TMONIMS\nE2 Table Entry Number:       260  TMONMVS\nE2 Table Entry Number:       261  TRACERTE\nE2 Table Entry Number:       262  TRANSMIT\nE2 Table Entry Number:       263  TRAPFWD\nE2 Table Entry Number:       264  TRMD\nE2 Table Entry Number:       265  TSOENQ\nE2 Table Entry Number:       266  TSOSMS\nE2 Table Entry Number:       267  TSUB\nE2 Table Entry Number:       268  UKEYCSA\nE2 Table Entry Number:       269  USAT\nE2 Table Entry Number:       270  USIT\nE2 Table Entry Number:       271  USOT\nE2 Table Entry Number:       272  USUT\nE2 Table Entry Number:       273  VERIFY\nE2 Table Entry Number:       274  VFY\nE2 Table Entry Number:       275  VIEWUSER\nE2 Table Entry Number:       276  VLFNOTE\nE2 Table Entry Number:       277  VMCF\nE2 Table Entry Number:       278  VU\nE2 Table Entry Number:       279  WAITT\nE2 Table Entry Number:       280  WHOENQ\nE2 Table Entry Number:       281  WSSTAT\nE2 Table Entry Number:       282  XD\nE2 Table Entry Number:       283  XDCCALLA\nE2 Table Entry Number:       284  XDCCMDA\nE2 Table Entry Number:       285  XF\nE2 Table Entry Number:       286  XMDSMAIN\nE2 Table Entry Number:       287  XMIT\nE2 Table Entry Number:       288  XTRCUSER\nE2 Table Entry Number:       289  XU\nE2 Table Entry Number:       290  YKCONMSG\nE2 Table Entry Number:       291  ZAP\nE2 Table Entry Number:       292  ZAP$\nE2 Table Entry Number:       293  ZAPLWA\nE2 Table Entry Number:       294  ZAPV\nE2 Table Entry Number:       295  CQX\nE2 Table Entry Number:       296  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#07": {"ttr": 14347, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2Z\n\n     This command zeroes the length of the IKJEFTE2 table in the\n     user's address space, as marked in the LWA field that contains\n     the length of the IKJEFTE2 table.  The messages below, tell\n     you what happened.  TSUB E2D tells you the resulting state of\n     the E2 table.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2Z   20     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has length available. Hex 0950.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\n\n  **--------   AFTER MAKING CHANGES   -------**\nLWA size for table E2 is now Hex 0000.\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\n\nReturn Code = 0\n\n--------------------------------------------------------------------\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nE2D   04     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\nE2 Table Entry Number:         1  $$\nE2 Table Entry Number:         2  $HOWMVS\nE2 Table Entry Number:         3  $MDSMAIN\nE2 Table Entry Number:         4  ABUDSN\nE2 Table Entry Number:         5  AD\nE2 Table Entry Number:         6  ADB2UTIL\nE2 Table Entry Number:         7  ADDDIR\nE2 Table Entry Number:         8  ADDFILE\nE2 Table Entry Number:         9  ADDGROUP\nE2 Table Entry Number:        10  ADDSD\nE2 Table Entry Number:        11  ADDUSER\nE2 Table Entry Number:        12  ADIR\nE2 Table Entry Number:        13  ADNR\nE2 Table Entry Number:        14  ADYOPCMD\nE2 Table Entry Number:        15  AF\nE2 Table Entry Number:        16  AG\nE2 Table Entry Number:        17  AHOWMVS\nE2 Table Entry Number:        18  ALD\nE2 Table Entry Number:        19  ALF\nE2 Table Entry Number:        20  ALG\nE2 Table Entry Number:        21  ALTDIR\nE2 Table Entry Number:        22  ALTDSD\nE2 Table Entry Number:        23  ALTER\nE2 Table Entry Number:        24  ALTFILE\nE2 Table Entry Number:        25  ALTGROUP\nE2 Table Entry Number:        26  ALTUSER\nE2 Table Entry Number:        27  ALU\nE2 Table Entry Number:        28  APCACBL\nE2 Table Entry Number:        29  APCANB\nE2 Table Entry Number:        30  APCARB\nE2 Table Entry Number:        31  APCAUB\nE2 Table Entry Number:        32  APFCMD\nE2 Table Entry Number:        33  ASUB\nE2 Table Entry Number:        34  AU\nE2 Table Entry Number:        35  BACKUP\nE2 Table Entry Number:        36  BCMDEL\nE2 Table Entry Number:        37  BCMDEL1\nE2 Table Entry Number:        38  BCMNAUTH\nE2 Table Entry Number:        39  BCMNUPD\nE2 Table Entry Number:        40  BDATA\nE2 Table Entry Number:        41  BDMNUPD\nE2 Table Entry Number:        42  BINDDATA\nE2 Table Entry Number:        43  BLKUPD\nE2 Table Entry Number:        44  BUDDSN\nE2 Table Entry Number:        45  BUDGET\nE2 Table Entry Number:        46  CAE$BQRY\nE2 Table Entry Number:        47  CANCELU\nE2 Table Entry Number:        48  CAS9UDTN\nE2 Table Entry Number:        49  CDELPAIR\nE2 Table Entry Number:        50  CDMRSTAT\nE2 Table Entry Number:        51  CDSCB\nE2 Table Entry Number:        52  CESTPAIR\nE2 Table Entry Number:        53  CHKPT\nE2 Table Entry Number:        54  CINMX\nE2 Table Entry Number:        55  CLCHECK\nE2 Table Entry Number:        56  CNVTCAT\nE2 Table Entry Number:        57  CO\nE2 Table Entry Number:        58  COFDMON\nE2 Table Entry Number:        59  CONNECT\nE2 Table Entry Number:        60  CONSPROF\nE2 Table Entry Number:        61  CPSCB\nE2 Table Entry Number:        62  CQUERYSG\nE2 Table Entry Number:        63  CRECOVER\nE2 Table Entry Number:        64  CSCAN\nE2 Table Entry Number:        65  CSUSPEND\nE2 Table Entry Number:        66  DCAS\nE2 Table Entry Number:        67  DD\nE2 Table Entry Number:        68  DDIR\nE2 Table Entry Number:        69  DEF\nE2 Table Entry Number:        70  DEFINE\nE2 Table Entry Number:        71  DEL\nE2 Table Entry Number:        72  DELDIR\nE2 Table Entry Number:        73  DELDSD\nE2 Table Entry Number:        74  DELETE\nE2 Table Entry Number:        75  DELFILE\nE2 Table Entry Number:        76  DELGROUP\nE2 Table Entry Number:        77  DELUSER\nE2 Table Entry Number:        78  DF\nE2 Table Entry Number:        79  DG\nE2 Table Entry Number:        80  DITTO\nE2 Table Entry Number:        81  DITTOA\nE2 Table Entry Number:        82  DITTOU\nE2 Table Entry Number:        83  DMRSHR\nE2 Table Entry Number:        84  DRI\nE2 Table Entry Number:        85  DU\nE2 Table Entry Number:        86  ERWMAUTH\nE2 Table Entry Number:        87  EX\nE2 Table Entry Number:        88  EXP\nE2 Table Entry Number:        89  EXPORT\nE2 Table Entry Number:        90  EYU9XENF\nE2 Table Entry Number:        91  EZAZSSI\nE2 Table Entry Number:        92  EZBREINI\nE2 Table Entry Number:        93  EZBTNINI\nE2 Table Entry Number:        94  FCESTABL\nE2 Table Entry Number:        95  FCQUERY\nE2 Table Entry Number:        96  FCWITHDR\nE2 Table Entry Number:        97  FTPD\nE2 Table Entry Number:        98  FTPDNS\nE2 Table Entry Number:        99  GJTRUCBS\nE2 Table Entry Number:       100  IEBCOPY\nE2 Table Entry Number:       101  IKJEHDSF\nE2 Table Entry Number:       102  IKJEHDS1\nE2 Table Entry Number:       103  IKJPRMLB\nE2 Table Entry Number:       104  IM\nE2 Table Entry Number:       105  IMP\nE2 Table Entry Number:       106  IMPORT\nE2 Table Entry Number:       107  IOBSNMP\nE2 Table Entry Number:       108  IQIEXPN\nE2 Table Entry Number:       109  IQIMAIN\nE2 Table Entry Number:       110  IQIQUERY\nE2 Table Entry Number:       111  IQIQUIT\nE2 Table Entry Number:       112  IRRDPI00\nE2 Table Entry Number:       113  ISPICP\nE2 Table Entry Number:       114  ISRPCP\nE2 Table Entry Number:       115  LBADV\nE2 Table Entry Number:       116  LBAGENT\nE2 Table Entry Number:       117  LD\nE2 Table Entry Number:       118  LDATA\nE2 Table Entry Number:       119  LDIR\nE2 Table Entry Number:       120  LDIRECT\nE2 Table Entry Number:       121  LF\nE2 Table Entry Number:       122  LFILE\nE2 Table Entry Number:       123  LG\nE2 Table Entry Number:       124  LISTB\nE2 Table Entry Number:       125  LISTBC\nE2 Table Entry Number:       126  LISTD\nE2 Table Entry Number:       127  LISTDATA\nE2 Table Entry Number:       128  LISTDS\nE2 Table Entry Number:       129  LISTDSD\nE2 Table Entry Number:       130  LISTGRP\nE2 Table Entry Number:       131  LISTUSER\nE2 Table Entry Number:       132  LLWA\nE2 Table Entry Number:       133  LMRKTSO\nE2 Table Entry Number:       134  LOCKTERM\nE2 Table Entry Number:       135  LOOK\nE2 Table Entry Number:       136  LPQ\nE2 Table Entry Number:       137  LPR\nE2 Table Entry Number:       138  LPRM\nE2 Table Entry Number:       139  LPROC\nE2 Table Entry Number:       140  LSLT\nE2 Table Entry Number:       141  LU\nE2 Table Entry Number:       142  LWATMGR\nE2 Table Entry Number:       143  MAKEUSER\nE2 Table Entry Number:       144  MIMTSO\nE2 Table Entry Number:       145  MODDVIPA\nE2 Table Entry Number:       146  MU\nE2 Table Entry Number:       147  MVPMAIN\nE2 Table Entry Number:       148  MVPXDISP\nE2 Table Entry Number:       149  MVSCPCMD\nE2 Table Entry Number:       150  NAMEDXFR\nE2 Table Entry Number:       151  NAMED4\nE2 Table Entry Number:       152  NDVRC1\nE2 Table Entry Number:       153  NETSTAT\nE2 Table Entry Number:       154  NSUPDATE\nE2 Table Entry Number:       155  NSUPDAT4\nE2 Table Entry Number:       156  NYPPW\nE2 Table Entry Number:       157  OC\nE2 Table Entry Number:       158  OMPROUTE\nE2 Table Entry Number:       159  OP\nE2 Table Entry Number:       160  OPER\nE2 Table Entry Number:       161  OPERATOR\nE2 Table Entry Number:       162  OPINFO\nE2 Table Entry Number:       163  OPING\nE2 Table Entry Number:       164  OPSCMD\nE2 Table Entry Number:       165  OPSCONSL\nE2 Table Entry Number:       166  OPSOSCMD\nE2 Table Entry Number:       167  OPSPARM\nE2 Table Entry Number:       168  OPSREPLY\nE2 Table Entry Number:       169  OPSTAT\nE2 Table Entry Number:       170  OPSWTO\nE2 Table Entry Number:       171  OSNMPD\nE2 Table Entry Number:       172  OTRACERT\nE2 Table Entry Number:       173  PACKRAT\nE2 Table Entry Number:       174  PARMLIB\nE2 Table Entry Number:       175  PASSWORD\nE2 Table Entry Number:       176  PDIR\nE2 Table Entry Number:       177  PDSCLEAN\nE2 Table Entry Number:       178  PDSEAUTH\nE2 Table Entry Number:       179  PE\nE2 Table Entry Number:       180  PERMDIR\nE2 Table Entry Number:       181  PERMFILE\nE2 Table Entry Number:       182  PERMIT\nE2 Table Entry Number:       183  PF\nE2 Table Entry Number:       184  PHRASE\nE2 Table Entry Number:       185  PING\nE2 Table Entry Number:       186  POPPER\nE2 Table Entry Number:       187  PRINT\nE2 Table Entry Number:       188  PW\nE2 Table Entry Number:       189  Q\nE2 Table Entry Number:       190  QUEUE\nE2 Table Entry Number:       191  Q522\nE2 Table Entry Number:       192  RACDCERT\nE2 Table Entry Number:       193  RACFSIM\nE2 Table Entry Number:       194  RACLINK\nE2 Table Entry Number:       195  RACONVRT\nE2 Table Entry Number:       196  RACPRIV\nE2 Table Entry Number:       197  RALT\nE2 Table Entry Number:       198  RALTER\nE2 Table Entry Number:       199  RDEF\nE2 Table Entry Number:       200  RDEFINE\nE2 Table Entry Number:       201  RDEL\nE2 Table Entry Number:       202  RDELETE\nE2 Table Entry Number:       203  RE\nE2 Table Entry Number:       204  RECEIVE\nE2 Table Entry Number:       205  RELOGON\nE2 Table Entry Number:       206  REMOVE\nE2 Table Entry Number:       207  REPRO\nE2 Table Entry Number:       208  RESOLVE\nE2 Table Entry Number:       209  REVIEW\nE2 Table Entry Number:       210  REVVSAM\nE2 Table Entry Number:       211  REXCPCMD\nE2 Table Entry Number:       212  RL\nE2 Table Entry Number:       213  RLIST\nE2 Table Entry Number:       214  RLOAD\nE2 Table Entry Number:       215  RLOADA\nE2 Table Entry Number:       216  RMM\nE2 Table Entry Number:       217  RPF\nE2 Table Entry Number:       218  RPFE\nE2 Table Entry Number:       219  RSH\nE2 Table Entry Number:       220  RSHD\nE2 Table Entry Number:       221  RVARY\nE2 Table Entry Number:       222  SAMENDM\nE2 Table Entry Number:       223  SDSF\nE2 Table Entry Number:       224  SE\nE2 Table Entry Number:       225  SEARCH\nE2 Table Entry Number:       226  SECURE\nE2 Table Entry Number:       227  SEND\nE2 Table Entry Number:       228  SETC\nE2 Table Entry Number:       229  SETCACHE\nE2 Table Entry Number:       230  SETPASSW\nE2 Table Entry Number:       231  SETPW\nE2 Table Entry Number:       232  SETPW2\nE2 Table Entry Number:       233  SETR\nE2 Table Entry Number:       234  SETROPTS\nE2 Table Entry Number:       235  SETUSER\nE2 Table Entry Number:       236  SHCDS\nE2 Table Entry Number:       237  SM\nE2 Table Entry Number:       238  SMTP\nE2 Table Entry Number:       239  SNTPD\nE2 Table Entry Number:       240  SPACE\nE2 Table Entry Number:       241  SPY\nE2 Table Entry Number:       242  SR\nE2 Table Entry Number:       243  SRDIR\nE2 Table Entry Number:       244  SRF\nE2 Table Entry Number:       245  SRFILE\nE2 Table Entry Number:       246  SRSTAT\nE2 Table Entry Number:       247  STEPLIB\nE2 Table Entry Number:       248  STEPLIBN\nE2 Table Entry Number:       249  SU\nE2 Table Entry Number:       250  SYNC\nE2 Table Entry Number:       251  SYSPROG\nE2 Table Entry Number:       252  TEAEXTSO\nE2 Table Entry Number:       253  TERM\nE2 Table Entry Number:       254  TERMINAL\nE2 Table Entry Number:       255  TESTA\nE2 Table Entry Number:       256  TESTAUTH\nE2 Table Entry Number:       257  TMONCICS\nE2 Table Entry Number:       258  TMONDB2\nE2 Table Entry Number:       259  TMONIMS\nE2 Table Entry Number:       260  TMONMVS\nE2 Table Entry Number:       261  TRACERTE\nE2 Table Entry Number:       262  TRANSMIT\nE2 Table Entry Number:       263  TRAPFWD\nE2 Table Entry Number:       264  TRMD\nE2 Table Entry Number:       265  TSOENQ\nE2 Table Entry Number:       266  TSOSMS\nE2 Table Entry Number:       267  TSUB\nE2 Table Entry Number:       268  UKEYCSA\nE2 Table Entry Number:       269  USAT\nE2 Table Entry Number:       270  USIT\nE2 Table Entry Number:       271  USOT\nE2 Table Entry Number:       272  USUT\nE2 Table Entry Number:       273  VERIFY\nE2 Table Entry Number:       274  VFY\nE2 Table Entry Number:       275  VIEWUSER\nE2 Table Entry Number:       276  VLFNOTE\nE2 Table Entry Number:       277  VMCF\nE2 Table Entry Number:       278  VU\nE2 Table Entry Number:       279  WAITT\nE2 Table Entry Number:       280  WHOENQ\nE2 Table Entry Number:       281  WSSTAT\nE2 Table Entry Number:       282  XD\nE2 Table Entry Number:       283  XDCCALLA\nE2 Table Entry Number:       284  XDCCMDA\nE2 Table Entry Number:       285  XF\nE2 Table Entry Number:       286  XMDSMAIN\nE2 Table Entry Number:       287  XMIT\nE2 Table Entry Number:       288  XTRCUSER\nE2 Table Entry Number:       289  XU\nE2 Table Entry Number:       290  YKCONMSG\nE2 Table Entry Number:       291  ZAP\nE2 Table Entry Number:       292  ZAP$\nE2 Table Entry Number:       293  ZAPLWA\nE2 Table Entry Number:       294  ZAPV\nE2 Table Entry Number:       295  CQX\nE2 Table Entry Number:       296  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSUB#08": {"ttr": 14598, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2S\n\n     This command throws a bit in the LWA that says that the\n     IKJEFTE2 table came from a STEPLIB, and not from an IKJTSOxx\n     PARMLIB member.  This has the effect that when someone issues\n     a command PARMLIB UPDATE(xx) or SET IKJTSO=xx later, then\n     your IKJEFTE2 table which is now marked that it came from\n     STEPLIB, will not be overlaid from the \"common storage\" copy\n     of the table.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2S   40     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\n\n  **--------   AFTER MAKING CHANGES   -------**\nTable E2 marked from STEPLIB so PARMLIB UPDATE(xx) will not overlay it.\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUB#09": {"ttr": 14600, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2P\n\n     This command zeroes a bit in the LWA that says that the\n     IKJEFTE2 table came from a STEPLIB, and not from an IKJTSOxx\n     PARMLIB member.  Thus the table is marked that it came from\n     PARMLIB (even if it didn't).  This has the effect that when\n     someone issues a command PARMLIB UPDATE(xx) or SET IKJTSO=xx\n     later, then your IKJEFTE2 table which is now marked that it\n     came from PARMLIB, will be completely overlaid from the\n     \"common storage\" copy of the table.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2P   80     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA came from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\n\n  **--------   AFTER MAKING CHANGES   -------**\nTable E2 marked from not from STEPLIB. PARMLIB UPDATE(xx) can overlay.\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUB#10": {"ttr": 14602, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Output of command:  TSUB E2H\n\n     This command alters the header of the IKJEFTE2 table, which\n     originally came from a STEPLIB, and not from an IKJTSOxx\n     PARMLIB member, to make it look as if it came from an IKJTSOxx\n     PARMLIB member.  The messages tell you what was done.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\n\n  **--- STATE BEFORE MAKING TABLE CHANGES ---**\nE2H   08     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     295   (these are the ones used)\nPerceived blank entries:      29   (potential for expansion)\nTable E2 pointed to by the LWA has no lengths. Blanks will delimit.\nTable E2 pointed to by the LWA did not come from an APF STEPLIB.\nTable Header:  IKJEFTE276.152\nNumber of valid entries:     296\n\n  **--------   AFTER MAKING CHANGES   -------**\nLast 8 bytes of table header altered to \" PARMLIB\".\nTable Header:  IKJEFTE2 PARMLIB\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUB#11": {"ttr": 14604, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TRICKS OF THE TRADE\n\nTSUB E2D, AFTER TSUB E2L followed by TSUB E2R 300 CQX\n\nExplanation.\n\n    The original E2 table had 294 non-blank entries followed by 30 blank\nentries.  Of course, TSO stops when it reaches the first blank, which is\nthe 295th slot.  However, after issuing TSUB E2L, the length of the\ntable (not there before, because the table came from a STEPLIB, and then\nI issued E2P which is not necessary) was increased to enough for 324\nslots.  The main thing here is the TSUB E2L.\n\n    Once the length of the table was increased to 324 slots, even though\nTSO will not honor anything after the first blank, TSUB will be able to\nreplace any of the blank entries with non-blanks.  This is because TSUB\nfigures out how many slots you have, in two ways.  If there is no table\nlength, then TSUB measures the table until the first blank.  If there is\na table length, then TSUB figures out, from that length, how many table\nentries there should be.  From the length of 324 entries, TSUB still has\nthe ability to change one of the later entries to a program name.  You\ncan tell what happened from the TSUB E2D display, because there are 324\nentries, 294 non-blank contiguous entries at the beginning, followed by\nonly 5 blank entries.  That means that the 6th entry is non-blank.\n\n    So theoretically, you can fill in 10 new program names, contiguously\nwhile still leaving the first blank entry, and you can activate them all\nat once, by putting a non-blank entry in the first blank spot, making 11\nnon-blank contiguous entries all of a sudden, which TSO will now honor.\n\n    Nice trick.  Only made possible by the new \"L\" action code.\n\n\nTSUB Command - Display or Change Auth Table or Entry\n---- -------   ------- -- ------ ---- ----- -- -----\nE2D   04     Program table code + Function code\nTable address:      0000C000\nTable address is not within an LPA region.\nNon-blank table entries:     294   (these are the ones used)\nPerceived blank entries:       5   (potential for expansion)\nTable E2 pointed to by the LWA has length available. Hex 0A30.\nTable E2 pointed to by the LWA did not come from an APF STEPLIB.\nTable Header:  IKJEFTE2 PARMLIB\nNumber of valid entries:     324\nE2 Table Entry Number:         1  $$\nE2 Table Entry Number:         2  $HOWMVS\nE2 Table Entry Number:         3  $MDSMAIN\nE2 Table Entry Number:         4  ABUDSN\nE2 Table Entry Number:         5  AD\nE2 Table Entry Number:         6  ADB2UTIL\nE2 Table Entry Number:         7  ADDDIR\nE2 Table Entry Number:         8  ADDFILE\nE2 Table Entry Number:         9  ADDGROUP\nE2 Table Entry Number:        10  ADDSD\nE2 Table Entry Number:        11  ADDUSER\nE2 Table Entry Number:        12  ADIR\nE2 Table Entry Number:        13  ADNR\nE2 Table Entry Number:        14  ADYOPCMD\nE2 Table Entry Number:        15  AF\nE2 Table Entry Number:        16  AG\nE2 Table Entry Number:        17  AHOWMVS\nE2 Table Entry Number:        18  ALD\nE2 Table Entry Number:        19  ALF\nE2 Table Entry Number:        20  ALG\nE2 Table Entry Number:        21  ALTDIR\nE2 Table Entry Number:        22  ALTDSD\nE2 Table Entry Number:        23  ALTER\nE2 Table Entry Number:        24  ALTFILE\nE2 Table Entry Number:        25  ALTGROUP\nE2 Table Entry Number:        26  ALTUSER\nE2 Table Entry Number:        27  ALU\nE2 Table Entry Number:        28  APCACBL\nE2 Table Entry Number:        29  APCANB\nE2 Table Entry Number:        30  APCARB\nE2 Table Entry Number:        31  APCAUB\nE2 Table Entry Number:        32  APFCMD\nE2 Table Entry Number:        33  ASUB\nE2 Table Entry Number:        34  AU\nE2 Table Entry Number:        35  BACKUP\nE2 Table Entry Number:        36  BCMDEL\nE2 Table Entry Number:        37  BCMDEL1\nE2 Table Entry Number:        38  BCMNAUTH\nE2 Table Entry Number:        39  BCMNUPD\nE2 Table Entry Number:        40  BDATA\nE2 Table Entry Number:        41  BDMNUPD\nE2 Table Entry Number:        42  BINDDATA\nE2 Table Entry Number:        43  BLKUPD\nE2 Table Entry Number:        44  BUDDSN\nE2 Table Entry Number:        45  BUDGET\nE2 Table Entry Number:        46  CAE$BQRY\nE2 Table Entry Number:        47  CANCELU\nE2 Table Entry Number:        48  CAS9UDTN\nE2 Table Entry Number:        49  CDELPAIR\nE2 Table Entry Number:        50  CDMRSTAT\nE2 Table Entry Number:        51  CDSCB\nE2 Table Entry Number:        52  CESTPAIR\nE2 Table Entry Number:        53  CHKPT\nE2 Table Entry Number:        54  CINMX\nE2 Table Entry Number:        55  CLCHECK\nE2 Table Entry Number:        56  CNVTCAT\nE2 Table Entry Number:        57  CO\nE2 Table Entry Number:        58  COFDMON\nE2 Table Entry Number:        59  CONNECT\nE2 Table Entry Number:        60  CONSPROF\nE2 Table Entry Number:        61  CPSCB\nE2 Table Entry Number:        62  CQUERYSG\nE2 Table Entry Number:        63  CRECOVER\nE2 Table Entry Number:        64  CSCAN\nE2 Table Entry Number:        65  CSUSPEND\nE2 Table Entry Number:        66  DCAS\nE2 Table Entry Number:        67  DD\nE2 Table Entry Number:        68  DDIR\nE2 Table Entry Number:        69  DEF\nE2 Table Entry Number:        70  DEFINE\nE2 Table Entry Number:        71  DEL\nE2 Table Entry Number:        72  DELDIR\nE2 Table Entry Number:        73  DELDSD\nE2 Table Entry Number:        74  DELETE\nE2 Table Entry Number:        75  DELFILE\nE2 Table Entry Number:        76  DELGROUP\nE2 Table Entry Number:        77  DELUSER\nE2 Table Entry Number:        78  DF\nE2 Table Entry Number:        79  DG\nE2 Table Entry Number:        80  DITTO\nE2 Table Entry Number:        81  DITTOA\nE2 Table Entry Number:        82  DITTOU\nE2 Table Entry Number:        83  DMRSHR\nE2 Table Entry Number:        84  DRI\nE2 Table Entry Number:        85  DU\nE2 Table Entry Number:        86  ERWMAUTH\nE2 Table Entry Number:        87  EX\nE2 Table Entry Number:        88  EXP\nE2 Table Entry Number:        89  EXPORT\nE2 Table Entry Number:        90  EYU9XENF\nE2 Table Entry Number:        91  EZAZSSI\nE2 Table Entry Number:        92  EZBREINI\nE2 Table Entry Number:        93  EZBTNINI\nE2 Table Entry Number:        94  FCESTABL\nE2 Table Entry Number:        95  FCQUERY\nE2 Table Entry Number:        96  FCWITHDR\nE2 Table Entry Number:        97  FTPD\nE2 Table Entry Number:        98  FTPDNS\nE2 Table Entry Number:        99  GJTRUCBS\nE2 Table Entry Number:       100  IEBCOPY\nE2 Table Entry Number:       101  IKJEHDSF\nE2 Table Entry Number:       102  IKJEHDS1\nE2 Table Entry Number:       103  IKJPRMLB\nE2 Table Entry Number:       104  IM\nE2 Table Entry Number:       105  IMP\nE2 Table Entry Number:       106  IMPORT\nE2 Table Entry Number:       107  IOBSNMP\nE2 Table Entry Number:       108  IQIEXPN\nE2 Table Entry Number:       109  IQIMAIN\nE2 Table Entry Number:       110  IQIQUERY\nE2 Table Entry Number:       111  IQIQUIT\nE2 Table Entry Number:       112  IRRDPI00\nE2 Table Entry Number:       113  ISPICP\nE2 Table Entry Number:       114  ISRPCP\nE2 Table Entry Number:       115  LBADV\nE2 Table Entry Number:       116  LBAGENT\nE2 Table Entry Number:       117  LD\nE2 Table Entry Number:       118  LDATA\nE2 Table Entry Number:       119  LDIR\nE2 Table Entry Number:       120  LDIRECT\nE2 Table Entry Number:       121  LF\nE2 Table Entry Number:       122  LFILE\nE2 Table Entry Number:       123  LG\nE2 Table Entry Number:       124  LISTB\nE2 Table Entry Number:       125  LISTBC\nE2 Table Entry Number:       126  LISTD\nE2 Table Entry Number:       127  LISTDATA\nE2 Table Entry Number:       128  LISTDS\nE2 Table Entry Number:       129  LISTDSD\nE2 Table Entry Number:       130  LISTGRP\nE2 Table Entry Number:       131  LISTUSER\nE2 Table Entry Number:       132  LLWA\nE2 Table Entry Number:       133  LMRKTSO\nE2 Table Entry Number:       134  LOCKTERM\nE2 Table Entry Number:       135  LOOK\nE2 Table Entry Number:       136  LPQ\nE2 Table Entry Number:       137  LPR\nE2 Table Entry Number:       138  LPRM\nE2 Table Entry Number:       139  LPROC\nE2 Table Entry Number:       140  LSLT\nE2 Table Entry Number:       141  LU\nE2 Table Entry Number:       142  LWATMGR\nE2 Table Entry Number:       143  MAKEUSER\nE2 Table Entry Number:       144  MIMTSO\nE2 Table Entry Number:       145  MODDVIPA\nE2 Table Entry Number:       146  MU\nE2 Table Entry Number:       147  MVPMAIN\nE2 Table Entry Number:       148  MVPXDISP\nE2 Table Entry Number:       149  MVSCPCMD\nE2 Table Entry Number:       150  NAMEDXFR\nE2 Table Entry Number:       151  NAMED4\nE2 Table Entry Number:       152  NDVRC1\nE2 Table Entry Number:       153  NETSTAT\nE2 Table Entry Number:       154  NSUPDATE\nE2 Table Entry Number:       155  NSUPDAT4\nE2 Table Entry Number:       156  NYPPW\nE2 Table Entry Number:       157  OC\nE2 Table Entry Number:       158  OMPROUTE\nE2 Table Entry Number:       159  OP\nE2 Table Entry Number:       160  OPER\nE2 Table Entry Number:       161  OPERATOR\nE2 Table Entry Number:       162  OPINFO\nE2 Table Entry Number:       163  OPING\nE2 Table Entry Number:       164  OPSCMD\nE2 Table Entry Number:       165  OPSCONSL\nE2 Table Entry Number:       166  OPSOSCMD\nE2 Table Entry Number:       167  OPSPARM\nE2 Table Entry Number:       168  OPSREPLY\nE2 Table Entry Number:       169  OPSTAT\nE2 Table Entry Number:       170  OPSWTO\nE2 Table Entry Number:       171  OSNMPD\nE2 Table Entry Number:       172  OTRACERT\nE2 Table Entry Number:       173  PACKRAT\nE2 Table Entry Number:       174  PARMLIB\nE2 Table Entry Number:       175  PASSWORD\nE2 Table Entry Number:       176  PDIR\nE2 Table Entry Number:       177  PDSCLEAN\nE2 Table Entry Number:       178  PDSEAUTH\nE2 Table Entry Number:       179  PE\nE2 Table Entry Number:       180  PERMDIR\nE2 Table Entry Number:       181  PERMFILE\nE2 Table Entry Number:       182  PERMIT\nE2 Table Entry Number:       183  PF\nE2 Table Entry Number:       184  PHRASE\nE2 Table Entry Number:       185  PING\nE2 Table Entry Number:       186  POPPER\nE2 Table Entry Number:       187  PRINT\nE2 Table Entry Number:       188  PW\nE2 Table Entry Number:       189  Q\nE2 Table Entry Number:       190  QUEUE\nE2 Table Entry Number:       191  Q522\nE2 Table Entry Number:       192  RACDCERT\nE2 Table Entry Number:       193  RACFSIM\nE2 Table Entry Number:       194  RACLINK\nE2 Table Entry Number:       195  RACONVRT\nE2 Table Entry Number:       196  RACPRIV\nE2 Table Entry Number:       197  RALT\nE2 Table Entry Number:       198  RALTER\nE2 Table Entry Number:       199  RDEF\nE2 Table Entry Number:       200  RDEFINE\nE2 Table Entry Number:       201  RDEL\nE2 Table Entry Number:       202  RDELETE\nE2 Table Entry Number:       203  RE\nE2 Table Entry Number:       204  RECEIVE\nE2 Table Entry Number:       205  RELOGON\nE2 Table Entry Number:       206  REMOVE\nE2 Table Entry Number:       207  REPRO\nE2 Table Entry Number:       208  RESOLVE\nE2 Table Entry Number:       209  REVIEW\nE2 Table Entry Number:       210  REVVSAM\nE2 Table Entry Number:       211  REXCPCMD\nE2 Table Entry Number:       212  RL\nE2 Table Entry Number:       213  RLIST\nE2 Table Entry Number:       214  RLOAD\nE2 Table Entry Number:       215  RLOADA\nE2 Table Entry Number:       216  RMM\nE2 Table Entry Number:       217  RPF\nE2 Table Entry Number:       218  RPFE\nE2 Table Entry Number:       219  RSH\nE2 Table Entry Number:       220  RSHD\nE2 Table Entry Number:       221  RVARY\nE2 Table Entry Number:       222  SAMENDM\nE2 Table Entry Number:       223  SDSF\nE2 Table Entry Number:       224  SE\nE2 Table Entry Number:       225  SEARCH\nE2 Table Entry Number:       226  SECURE\nE2 Table Entry Number:       227  SEND\nE2 Table Entry Number:       228  SETC\nE2 Table Entry Number:       229  SETCACHE\nE2 Table Entry Number:       230  SETPASSW\nE2 Table Entry Number:       231  SETPW\nE2 Table Entry Number:       232  SETPW2\nE2 Table Entry Number:       233  SETR\nE2 Table Entry Number:       234  SETROPTS\nE2 Table Entry Number:       235  SETUSER\nE2 Table Entry Number:       236  SHCDS\nE2 Table Entry Number:       237  SM\nE2 Table Entry Number:       238  SMTP\nE2 Table Entry Number:       239  SNTPD\nE2 Table Entry Number:       240  SPACE\nE2 Table Entry Number:       241  SPY\nE2 Table Entry Number:       242  SR\nE2 Table Entry Number:       243  SRDIR\nE2 Table Entry Number:       244  SRF\nE2 Table Entry Number:       245  SRFILE\nE2 Table Entry Number:       246  SRSTAT\nE2 Table Entry Number:       247  STEPLIB\nE2 Table Entry Number:       248  STEPLIBN\nE2 Table Entry Number:       249  SU\nE2 Table Entry Number:       250  SYNC\nE2 Table Entry Number:       251  SYSPROG\nE2 Table Entry Number:       252  TEAEXTSO\nE2 Table Entry Number:       253  TERM\nE2 Table Entry Number:       254  TERMINAL\nE2 Table Entry Number:       255  TESTA\nE2 Table Entry Number:       256  TESTAUTH\nE2 Table Entry Number:       257  TMONCICS\nE2 Table Entry Number:       258  TMONDB2\nE2 Table Entry Number:       259  TMONIMS\nE2 Table Entry Number:       260  TMONMVS\nE2 Table Entry Number:       261  TRACERTE\nE2 Table Entry Number:       262  TRANSMIT\nE2 Table Entry Number:       263  TRAPFWD\nE2 Table Entry Number:       264  TRMD\nE2 Table Entry Number:       265  TSOENQ\nE2 Table Entry Number:       266  TSOSMS\nE2 Table Entry Number:       267  TSUB\nE2 Table Entry Number:       268  UKEYCSA\nE2 Table Entry Number:       269  USAT\nE2 Table Entry Number:       270  USIT\nE2 Table Entry Number:       271  USOT\nE2 Table Entry Number:       272  USUT\nE2 Table Entry Number:       273  VERIFY\nE2 Table Entry Number:       274  VFY\nE2 Table Entry Number:       275  VIEWUSER\nE2 Table Entry Number:       276  VLFNOTE\nE2 Table Entry Number:       277  VMCF\nE2 Table Entry Number:       278  VU\nE2 Table Entry Number:       279  WAITT\nE2 Table Entry Number:       280  WHOENQ\nE2 Table Entry Number:       281  WSSTAT\nE2 Table Entry Number:       282  XD\nE2 Table Entry Number:       283  XDCCALLA\nE2 Table Entry Number:       284  XDCCMDA\nE2 Table Entry Number:       285  XF\nE2 Table Entry Number:       286  XMDSMAIN\nE2 Table Entry Number:       287  XMIT\nE2 Table Entry Number:       288  XTRCUSER\nE2 Table Entry Number:       289  XU\nE2 Table Entry Number:       290  YKCONMSG\nE2 Table Entry Number:       291  ZAP\nE2 Table Entry Number:       292  ZAP$\nE2 Table Entry Number:       293  ZAPLWA\nE2 Table Entry Number:       294  ZAPV\nE2 Table Entry Number:       295  *empty*\n\nReturn Code = 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUBHELP": {"ttr": 14852, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "***********************************************************************\n*                                                                     *\n*   Program Name:   TSUB                                              *\n*                                                                     *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized except for the display    *\n*                   functions.                                        *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized.                      *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n* Short Function:   This program deals with existing TSO \"auth\"       *\n*                   tables that are pointed to by fields in the       *\n*                   LWA (Logon Work Area) which is created for a      *\n*                   TSO session at LOGON time.  These tables are      *\n*                   the actual tables that your TSO session uses      *\n*                   to determine program authorization.  Many of      *\n*                   the characteristics of these tables can be        *\n*                   changed or reset by the TSUB program.  The        *\n*                   changes that TSUB can do, are of two types:       *\n*                                                                     *\n*                   1.  Replacing or blanking any table entry.        *\n*                   2.  Altering the LWA flags or fields that         *\n*                       determine this table's properties.            *\n*                   3.  Effectively nullifying an entry by            *\n*                       putting a C'?' into it.  This effectively     *\n*                       removes the entry, without nullifying any     *\n*                       of the following table entries.               *\n*                                                                     *\n*                Details:                                             *\n*                                                                     *\n*                   1.  TSUB can substitute a different program name  *\n*                       or insert a blank entry into any valid slot   *\n*                       of a TSO \"auth\" table that belongs to your    *\n*                       TSO session.                                  *\n*                                                                     *\n*                       Blanking (not the last entry) is dangerous    *\n*                       (see below) because it invalidates all the    *\n*                       subsequent non-blank table entries.  But the  *\n*                       technique of blanking an entry can be used    *\n*                       carefully if you are sure of what you want    *\n*                       to accomplish.                                *\n*                                                                     *\n*                       But you can effectively nullify a table       *\n*                       entry without blanking it, using the          *\n*                       \"nullify\" function \"N\" instead of the         *\n*                       \"blanking\" function \"B\".  The nullifying      *\n*                       function inserts a C'?' into the slot,        *\n*                       allowing all following slots to still         *\n*                       work, since a ? entry is not a blank that     *\n*                       delimits the table.                           *\n*                                                                     *\n*                   2.  TSUB can change the characteristics of your   *\n*                       own session's TSO \"auth\" tables, that are     *\n*                       pointed to by the LWA, by means of changing   *\n*                       the LWA (Logon Work Area) settings for each   *\n*                       table.  For example, LWA table lengths can    *\n*                       be supplied or removed.  LWA flags marking    *\n*                       the table as coming from a STEPLIB can be     *\n*                       set, or removed.  Even the physical table     *\n*                       header can be altered to make the table       *\n*                       look as though it came from PARMLIB.          *\n*                                                                     *\n*   Introduction:   At LOGON time for a TSO session, the system       *\n*                   copies a set of the E2, E8, AP, and NS TSO        *\n*                   authorization tables into SP 252 protected Key 0  *\n*                   storage which lies in the TSO user's address      *\n*                   space.  These are the tables WHICH ARE ACTUALLY   *\n*                   USED by that TSO session, and their location is   *\n*                   pointed to in the LWA control block (Logon Work   *\n*                   Area).  The duration of these tables is for the   *\n*                   life of that TSO session.  TSO LOGON processing   *\n*                   creates both the LWA itself, and the copies of    *\n*                   the auth tables that are used. TSUB displays and  *\n*                   manipulates this copy of these tables--the ones   *\n*                   that are actually in use. Thus, changes to these  *\n*                   tables are effective immediately, and their       *\n*                   scope affects only the issuing TSO session.       *\n*                                                                     *\n*                   Where does TSO get these tables from, at LOGON    *\n*                   time?                                             *\n*                                                                     *\n*              Case 1.  The most commonly found source for the auth   *\n*                       tables pointed to in the LWA, is the \"common  *\n*                       storage\" tables created from the active       *\n*                       PARMLIB member IKJTSOxx.  Those are pointed   *\n*                       to by the TPVT control block + X'14' which    *\n*                       is the CTLT.  If the CTLT is the source of    *\n*                       the LWA tables, then lengths of the tables,   *\n*                       and the size of each entry, are copied from   *\n*                       the CTLT into the LWA (Logon Work Area).      *\n*                       Use the program called ASUB to directly       *\n*                       access the public tables from PARMLIB that    *\n*                       are pointed to by the CTLT (undocumented)     *\n*                       control block.  Our program, TSUB, accesses   *\n*                       the copy of those tables which is pointed to  *\n*                       by the LWA, which were created for the TSO    *\n*                       session at LOGON time, and which are unique   *\n*                       to the current TSO session.                   *\n*                                                                     *\n*              Case 2.  If a list of table entries for one or more    *\n*                       of the tables:  E2, E8, AP, or NS is not      *\n*                       found in the IKJTSOxx PARMLIB member that     *\n*                       is currently active, then the table in the    *\n*                       LWA is not copied from the IKJTABLS module    *\n*                       in LPALIB, but it is just pointed to.  Thus   *\n*                       in such a situation, TSUB cannot alter the    *\n*                       particular table.  The actual table is        *\n*                       located in PLPA, in that particular case.     *\n*                                                                     *\n*              Case 3.  If a copy of the IKJTABLS load module         *\n*                       containing csects IKJEFTE2, IKJEFTE8,         *\n*                       IKJEFTAP, and IKJEFTNS is found in an         *\n*                       APF-authorized STEPLIB that the TSO session   *\n*                       has access to (running as an APF authorized   *\n*                       STEPLIB only), then those E2, E8, NS, and AP  *\n*                       tables are copied into the LWA at LOGON       *\n*                       time, from that CSECT in the STEPLIB copy of  *\n*                       IKJTABLS.  Therefore the table entries in     *\n*                       the respective CSECTs of the IKJTABLS in the  *\n*                       authorized STEPLIB are the ones which are in  *\n*                       force for that user's TSO session.  But in    *\n*                       that case, no \"table lengths\" or \"number of   *\n*                       table entries\" from these tables, are         *\n*                       available.  The table is delimited by the     *\n*                       first blank entry in it.  This TSUB program   *\n*                       has the ability to blank any numbered table   *\n*                       entry.  Since a blank entry is a delimiter    *\n*                       for the entire table, and all entries after   *\n*                       the blank entry are no longer used, you       *\n*                       have to be very careful.  Therefore, when     *\n*                       blanking entries, you should usually blank    *\n*                       the last one only, unless you have a very     *\n*                       good reason to blank out a different entry,   *\n*                       other than the last one.  The good news is    *\n*                       that the effect of the TSUB program only      *\n*                       lasts for the duration of this LOGON, and     *\n*                       only for the userid that is currently running *\n*                       the TSUB program.                             *\n*                                                                     *\n*            Note - Tables copied from a CSECT in IKJTABLS do not     *\n*                   have lengths associated with them.  They are      *\n*                   delimited by a blank table entry at the end.      *\n*                   Therefore the copy of each such table pointed     *\n*                   to by the LWA, does not have any length           *\n*                   associated with it.  Therefore we can only        *\n*                   judge its length by looking at the first blank    *\n*                   entry that has been found by a forward scan.      *\n*                                                                     *\n*                   This program, TSUB, directly manipulates the      *\n*                   \"live\" authorization tables pointed to by the     *\n*                   LWA.  Supported tables are:  E2, E2, NS and       *\n*                   AP.  The public PP (Platform Program) table       *\n*                   and PC (Platform Command) table, not in the       *\n*                   LWA, are also supported by this program, if       *\n*                   they had been created by their presence in the    *\n*                   active IKJTSOxx PARMLIB member.                   *\n*                                                                     *\n*    Description:   Display an Auth Table entry from any of the       *\n*                   TSO/E program list tables:  IKJEFTE2, IKJEFTE8,   *\n*                   IKJEFTNS or IKJEFTAP that are in storage.  Or     *\n*                   display the entire table.  Or replace a numbered  *\n*                   entry with a new program name.  Or blank out      *\n*                   any numbered entry.  (Be very careful if you are  *\n*                   attempting to blank an entry.  Blanking an entry  *\n*                   invalidates ALL subsequent entries).  If you are  *\n*                   invoking a display function, then the entire      *\n*                   table is shown, unless you enter a number, and    *\n*                   then, only that slot is shown.  The tables        *\n*                   handled by this program are the actual tables     *\n*                   pointed to by the LWA of the issuing TSO/E        *\n*                   address space, and they lie in that user's        *\n*                   TSO/E address space (unless they were pointed to, *\n*                   and are from an IKJTABLS load module that is in   *\n*                   the LPA list.)                                    *\n*                                                                     *\n*       Function:   To substitute one new program name in the local   *\n*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n*                   IKJEFTAP, IKJEFTNS lists.  This is done to any    *\n*                   numbered entry of each table.  Or else merely to  *\n*                   display the contents of the entire table, or the  *\n*                   contents of any particular numbered entry.        *\n*                                                                     *\n*                   The effect of replacing any program name is       *\n*                   immediate.  The scope of the change, is just for  *\n*                   the issuing current TSO userid.                   *\n*                                                                     *\n*                   You can blank out any numbered entry in any of    *\n*                   the four tables.  But blanking an entry, will     *\n*                   invalidate all subsequent table entries which     *\n*                   follow the blanked entry slot.  So be careful!    *\n*                                                                     *\n*                   Better than blanking an entry, you can \"nullify\"  *\n*                   an entry, which inserts a \"?\" character into the  *\n*                   table entry instead of blanks.  The subsequent    *\n*                   table entries remain valid.  The \"nullify\"        *\n*                   function is \"N\".  The \"blanking\" function is      *\n*                   \"B\".                                              *\n*                                                                     *\n*                   Or, you can use this program to list the complete *\n*                   contents of any of the auth tables which are      *\n*                   incore.                                           *\n*                                                                     *\n*                   Additionally, as described below, you can change  *\n*                   fields in the LWA which characterize the          *\n*                   individual tables--size characteristics and       *\n*                   whether or not the table came from STEPLIB.       *\n*                                                                     *\n*         Syntax:   TSUB ttA nnn pgmname                              *\n*                                                                     *\n*                   Where tt is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD  entry in IKJTSOxx        *\n*                   E8 - IKJEFTE8 = AUTHPGM  entry in IKJTSOxx        *\n*                   AP - IKJEFTAP = AUTHTSF  entry in IKJTSOxx        *\n*                   NS - IKJEFTNS = NOTBKGND entry in IKJTSOxx        *\n*                   PP -            PLATPGM  table in IKJTSOxx        *\n*                   PC -            PLATCMD  table in IKJTSOxx        *\n*                                                                     *\n*                   If the action code is B (blank the numbered       *\n*                   entry), then no program name is required,         *\n*                   but a number is required.  When blanking a        *\n*                   table entry, BE VERY CAREFUL !!!!!                *\n*                                                                     *\n*                   If the action code is N (nullify the numbered     *\n*                   entry), then no program name is required,         *\n*                   but a number is required.  Nullifying a table     *\n*                   entry will insert a \"?\" (question mark) into      *\n*                   that particular table slot, effectively           *\n*                   nullifying that entry, but NOT the entries        *\n*                   which follow, since blanks are the table          *\n*                   delimiters.                                       *\n*                                                                     *\n*     IMPORTANT  >  Under most circumstances, you should use the      *\n*       N O T E  >  \"nullify\" function \"N\" instead of the \"blanking\"  *\n*                >  function \"B\".  N will only nullify that one       *\n*                >  table entry, leaving all subsequent entries       *\n*                >  valid.  Blanking an entry will leave all          *\n*                >  subsequent table entries invalid.                 *\n*                                                                     *\n*       WARNING  >  If you blank out an entry which is not the        *\n*       WARNING  >  last entry in the particular table, then          *\n*       WARNING  >  all subsequent entries in that table are          *\n*       WARNING  >  rendered invalid!  It is best to restore          *\n*       WARNING  >  a non-blank entry to that slot, using the         *\n*       WARNING  >  ttR function, where tt is the table code.         *\n*                   Then you will be able to display the rest         *\n*                   of the table using the ttD function.              *\n*                                                                     *\n*                   If the action code is D (display the given        *\n*                   entry), then no program name is required.         *\n*                   The default action is to display the entire       *\n*                   table, unless a number is entered.  If a          *\n*                   number is present, then only that entry           *\n*                   number is displayed.  If the number is larger     *\n*                   than the number of entries in that particular     *\n*                   table, then an informative error message is       *\n*                   issued, and the program ends with code = 4.       *\n*                                                                     *\n*                   If the action code is R (replace the program      *\n*                   name) then a number (the table entry number)      *\n*                   and a program name are required.  If you want     *\n*                   to blank that slot, instead of putting a          *\n*                   program name into it, then use action code B.     *\n*                   But if you are blanking any slot which is not     *\n*                   the last slot, then PLEASE HEED THE WARNING       *\n*                   THAT IS ABOVE.                                    *\n*                                                                     *\n*                   If the action code is H, then TSUB will replace   *\n*                   the last 8 bytes of the table header with the     *\n*                   literal: C' PARMLIB', as if the table were        *\n*                   created from the IKJTSOxx member in PARMLIB.      *\n*                                                                     *\n*                   If the action code is L, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus all the potential blank   *\n*                   entries at the end of the table.  So this number  *\n*                   will often reflect more entries than TSO will     *\n*                   actually use.  Additionally, TSUB can change or   *\n*                   blank any one of these entries, because TSUB's    *\n*                   range depends on the number of entries indicated  *\n*                   by the LWA length.  (If there's no length, then   *\n*                   TSUB uses the length of all non-blank entries     *\n*                   plus the first blank, if it exists.)              *\n*                                                                     *\n*                   If the action code is M, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus one blank entry, if any   *\n*                   perceived blank entries exist at the end of the   *\n*                   table.                                            *\n*                                                                     *\n*                   If the action code is Z, then TSUB will look at   *\n*                   the LWA length value for that table, and it will  *\n*                   zero that length value, whether it already was    *\n*                   zero, or not.                                     *\n*                                                                     *\n*                   If the action code is S, then TSUB will make      *\n*                   the given table look like it came from STEPLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will not overlay the session's auth table.        *\n*                                                                     *\n*                   If the action code is P, then TSUB will make      *\n*                   the given table look like it came from PARMLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will overlay the session's auth table.            *\n*                                                                     *\n*                   If the action code is X, then TSUB will display   *\n*                   all the LPA address ranges (undocumented).        *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to.  The condition is         *\n*                   reported.  If these keywords WERE coded in the    *\n*                   IKJTSOxx member of PARMLIB which is currently     *\n*                   active, then the PC and PP table codes in TSUB    *\n*                   WILL ACT ON THE COMMON STORAGE COPY of THESE      *\n*                   TWO TABLES ONLY.                                  *\n*                                                                     *\n*  Recommendation:  First list the entire table using the \"D\"         *\n*                   action code, and then decide which entry, by      *\n*                   number, that you want to replace.                 *\n*                                                                     *\n*                   Then use the \"R\" action code, to replace the      *\n*                   particular numbered entry you have chosen.        *\n*                                                                     *\n*            Note:  The E2, E8, AP, or NS table which is being        *\n*                   used by the system, can come from either the      *\n*                   IKJTSOxx PARMLIB entry, or it can come from       *\n*                   an IKJTABLS load module which was running         *\n*                   from an APF authorized library as a STEPLIB,      *\n*                   or a default IKJTABLS entry in LPALIB.  Each      *\n*                   CSECT is copied into the TSO user's address       *\n*                   space, albeit in a protected key, and pointed     *\n*                   to by the user's LWA, except in the case of an    *\n*                   IKJTABLS CSECT that is in LPALIB.  These are      *\n*                   the actual auth tables, E2, E8, AP, NS, in        *\n*                   use by that TSO address space.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2008/09/10 - 1.0 - Initial version - Got it to work.             *\n*                       TSUB can blank any slot.  I'm allowing        *\n*                       that for now, because the scope of the        *\n*                       possible damage is only for that TSO          *\n*                       session as long as it is logged on.           *\n*                       The LWA auth tables are all reset by          *\n*                       logging on to that TSO session again.         *\n*                                                                     *\n*    2008/09/15 - 1.0 - Filled in and cleaned up some of the doc.     *\n*                                                                     *\n*    2009/01/28 - 1.0 - Added action codes: H, L, Z, S, P             *\n*                                                                     *\n*         All action codes except D need APF-authorization.           *\n*                                                                     *\n*         What they do:                                               *\n*                                                                     *\n*            H - Add PARMLIB-like table header, in 2nd 8-bytes.       *\n*            L - Supply length of table in LWA with ALL the blanks.   *\n*            M - Supply length of table to first blank, in LWA.       *\n*            Z - Zero the table length marked in the LWA.             *\n*            S - Mark that the table came from STEPLIB, so            *\n*                 someone (else's) PARMLIB UPDATE(xx) won't           *\n*                 overlay it.                                         *\n*            P - Turn off STEPLIB bit in LWA and mark that it         *\n*                 came from PARMLIB.  Now PARMLIB UPDATE(xx)          *\n*                 will overlay the table.                             *\n*            X - (undocumented) Gives LPA storage range display.      *\n*                                                                     *\n*         Other action codes are: (these are the original ones)       *\n*                                                                     *\n*            D - Display table entries by slot number.                *\n*            R - Replace the entry in a given slot, by another one.   *\n*            B - Blank a given table entry, by slot number.           *\n*            N - Nullify a given table entry, by slot number.         *\n*                 (It works by inserting a ? (question mark)          *\n*                  into that table slot.)                             *\n*                                                                     *\n*    2009/02/01 - 1.1 - Fourth and fifth base registers.              *\n*                                                                     *\n*         Improved message clarity.  Told messages to show states,    *\n*          \"before\" and \"after\" any changes were made.                *\n*                                                                     *\n*    2009/02/12 - 1.1 - Fix bug in calculating length of NS table.    *\n*         Fix convoluted logic in calculating table lengths.          *\n*                                                                     *\n*    2009/02/13 - 1.1 - Measure perceived blanks after logical end    *\n*         of the table.  For NS table, blank an entry with X'0000'    *\n*         for the \"length\" field, instead of X'FFFF', to see more     *\n*         perceived blanks, if there are any.                         *\n*                                                                     *\n*    2009/02/16 - 1.1 - Added option M to tailor length to reflect    *\n*         only up to the first blank.  Changed option L to make the   *\n*         LWA length equal to all non-blank entries plus all blank    *\n*         entries too.  Thus the table can be expanded, even if       *\n*         lengths are there.                                          *\n*                                                                     *\n*    2009/02/18 -1.1.31 Cosmetic changes. Put in Version numbers.     *\n*                                                                     *\n*    2009/02/20 -1.1.32 Improved displays for PC and PP tables.       *\n*                       Made sure S,P,H,L,M,Z options for PC and PP   *\n*                       actually do nothing, and say they do nothing. *\n*                       Made \"error display\" messages better.         *\n*                                                                     *\n*    2009/02/24 -1.1.33 Better messages if PLATPGM or PLATCMD tables  *\n*                       are missing.                                  *\n*                                                                     *\n*    2009/03/03 -1.1.34 More cosmetic changes in title & messages.    *\n*                                                                     *\n*    2011/03/24 -1.1.37 If an installation has an \"authorization SVC\" *\n*                       already installed, put in a provision to use  *\n*                       it with conditional assembly.  Of course,     *\n*                       you have to code your own appropriate         *\n*                       invocation code for the SVC, and its number,  *\n*                       in the AUTHON and AUTHOFF macros provided     *\n*                       in this code here.  Otherwise, SETC the &SVC  *\n*                       variable to 'NOSVC'                           *\n*                                                                     *\n*    2016/10/30 -1.1.38 A Blanking function on a table entry will     *\n*                       invalidate all subsequent table entries.      *\n*                       So I introduced a \"nullify\" function \"N\"      *\n*                       which will put a question mark, followed      *\n*                       by seven blanks, into a table entry,          *\n*                       effectively nullifying that entry, without    *\n*                       nullifying all the following entries too.     *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSUB36": {"ttr": 15105, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TSUB     TITLE 'TSUB - MAINTAIN LWA-POINTED-TO INCORE TSO AUTH TABLES'\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*   Program Name:   TSUB                                              *\n*                                                                     *\n*  Documentation:   This program is meant to be run as a TSO          *\n*                   command, APF authorized except for the display    *\n*                   functions.                                        *\n*                                                                     *\n*    Environment:   TSO command, APF Authorized.                      *\n*                   PUTLINE interface enabled by APUT, EPUTL.         *\n*                   This program is non-reentrant.                    *\n*                                                                     *\n* Short Function:   This program deals with existing TSO \"auth\"       *\n*                   tables that are pointed to by fields in the       *\n*                   LWA (Logon Work Area) which is created for a      *\n*                   TSO session at LOGON time.  These tables are      *\n*                   the actual tables that your TSO session uses      *\n*                   to determine program authorization.  Many of      *\n*                   the characteristics of these tables can be        *\n*                   changed or reset by the TSUB program.  The        *\n*                   changes that TSUB can do, are of two types:       *\n*                                                                     *\n*                   1.  Replacing or blanking any table entry.        *\n*                   2.  Altering the LWA flags or fields that         *\n*                       determine this table's properties.            *\n*                                                                     *\n*                Details:                                             *\n*                                                                     *\n*                   1.  TSUB can substitute a different program name  *\n*                       or insert a blank entry into any valid slot   *\n*                       of a TSO \"auth\" table that belongs to your    *\n*                       TSO session.                                  *\n*                                                                     *\n*                       Blanking (not the last entry) is dangerous    *\n*                       (see below) because it invalidates all the    *\n*                       subsequent non-blank table entries.  But the  *\n*                       technique of blanking an entry can be used    *\n*                       carefully if you are sure of what you want    *\n*                       to accomplish.                                *\n*                                                                     *\n*                   2.  TSUB can change the characteristics of your   *\n*                       own session's TSO \"auth\" tables, that are     *\n*                       pointed to by the LWA, by means of changing   *\n*                       the LWA (Logon Work Area) settings for each   *\n*                       table.  For example, LWA table lengths can    *\n*                       be supplied or removed.  LWA flags marking    *\n*                       the table as coming from a STEPLIB can be     *\n*                       set, or removed.  Even the physical table     *\n*                       header can be altered to make the table       *\n*                       look as though it came from PARMLIB.          *\n*                                                                     *\n*   Introduction:   At LOGON time for a TSO session, the system       *\n*                   copies a set of the E2, E8, AP, and NS TSO        *\n*                   authorization tables into SP 252 protected Key 0  *\n*                   storage which lies in the TSO user's address      *\n*                   space.  These are the tables WHICH ARE ACTUALLY   *\n*                   USED by that TSO session, and their location is   *\n*                   pointed to in the LWA control block (Logon Work   *\n*                   Area).  The duration of these tables is for the   *\n*                   life of that TSO session.  TSO LOGON processing   *\n*                   creates both the LWA itself, and the copies of    *\n*                   the auth tables that are used. TSUB displays and  *\n*                   manipulates this copy of these tables--the ones   *\n*                   that are actually in use. Thus, changes to these  *\n*                   tables are effective immediately, and their       *\n*                   scope affects only the issuing TSO session.       *\n*                                                                     *\n*                   Where does TSO get these tables from, at LOGON    *\n*                   time?                                             *\n*                                                                     *\n*              Case 1.  The most commonly found source for the auth   *\n*                       tables pointed to in the LWA, is the \"common  *\n*                       storage\" tables created from the active       *\n*                       PARMLIB member IKJTSOxx.  Those are pointed   *\n*                       to by the TPVT control block + X'14' which    *\n*                       is the CTLT.  If the CTLT is the source of    *\n*                       the LWA tables, then lengths of the tables,   *\n*                       and the size of each entry, are copied from   *\n*                       the CTLT into the LWA (Logon Work Area).      *\n*                       Use the program called ASUB to directly       *\n*                       access the public tables from PARMLIB that    *\n*                       are pointed to by the CTLT (undocumented)     *\n*                       control block.  Our program, TSUB, accesses   *\n*                       the copy of those tables which is pointed to  *\n*                       by the LWA, which were created for the TSO    *\n*                       session at LOGON time, and which are unique   *\n*                       to the current TSO session.                   *\n*                                                                     *\n*              Case 2.  If a list of table entries for one or more    *\n*                       of the tables:  E2, E8, AP, or NS is not      *\n*                       found in the IKJTSOxx PARMLIB member that     *\n*                       is currently active, then the table in the    *\n*                       LWA is not copied from the IKJTABLS module    *\n*                       in LPALIB, but it is just pointed to.  Thus   *\n*                       in such a situation, TSUB cannot alter the    *\n*                       particular table.  The actual table is        *\n*                       located in PLPA, in that particular case.     *\n*                                                                     *\n*              Case 3.  If a copy of the IKJTABLS load module         *\n*                       containing csects IKJEFTE2, IKJEFTE8,         *\n*                       IKJEFTAP, and IKJEFTNS is found in an         *\n*                       APF-authorized STEPLIB that the TSO session   *\n*                       has access to (running as an APF authorized   *\n*                       STEPLIB only), then those E2, E8, NS, and AP  *\n*                       tables are copied into the LWA at LOGON       *\n*                       time, from that CSECT in the STEPLIB copy of  *\n*                       IKJTABLS.  Therefore the table entries in     *\n*                       the respective CSECTs of the IKJTABLS in the  *\n*                       authorized STEPLIB are the ones which are in  *\n*                       force for that user's TSO session.  But in    *\n*                       that case, no \"table lengths\" or \"number of   *\n*                       table entries\" from these tables, are         *\n*                       available.  The table is delimited by the     *\n*                       first blank entry in it.  This TSUB program   *\n*                       has the ability to blank any numbered table   *\n*                       entry.  Since a blank entry is a delimiter    *\n*                       for the entire table, and all entries after   *\n*                       the blank entry are no longer used, you       *\n*                       have to be very careful.  Therefore, when     *\n*                       blanking entries, you should usually blank    *\n*                       the last one only, unless you have a very     *\n*                       good reason to blank out a different entry,   *\n*                       other than the last one.  The good news is    *\n*                       that the effect of the TSUB program only      *\n*                       lasts for the duration of this LOGON, and     *\n*                       only for the userid that is currently running *\n*                       the TSUB program.                             *\n*                                                                     *\n*            Note - Tables copied from a CSECT in IKJTABLS do not     *\n*                   have lengths associated with them.  They are      *\n*                   delimited by a blank table entry at the end.      *\n*                   Therefore the copy of each such table pointed     *\n*                   to by the LWA, does not have any length           *\n*                   associated with it.  Therefore we can only        *\n*                   judge its length by looking at the first blank    *\n*                   entry that has been found by a forward scan.      *\n*                                                                     *\n*                   This program, TSUB, directly manipulates the      *\n*                   \"live\" authorization tables pointed to by the     *\n*                   LWA.  Supported tables are:  E2, E2, NS and       *\n*                   AP.  The public PP (Platform Program) table       *\n*                   and PC (Platform Command) table, not in the       *\n*                   LWA, are also supported by this program, if       *\n*                   they had been created by their presence in the    *\n*                   active IKJTSOxx PARMLIB member.                   *\n*                                                                     *\n*    Description:   Display an Auth Table entry from any of the       *\n*                   TSO/E program list tables:  IKJEFTE2, IKJEFTE8,   *\n*                   IKJEFTNS or IKJEFTAP that are in storage.  Or     *\n*                   display the entire table.  Or replace a numbered  *\n*                   entry with a new program name.  Or blank out      *\n*                   any numbered entry.  (Be very careful if you are  *\n*                   attempting to blank an entry.  Blanking an entry  *\n*                   invalidates ALL subsequent entries).  If you are  *\n*                   invoking a display function, then the entire      *\n*                   table is shown, unless you enter a number, and    *\n*                   then, only that slot is shown.  The tables        *\n*                   handled by this program are the actual tables     *\n*                   pointed to by the LWA of the issuing TSO/E        *\n*                   address space, and they lie in that user's        *\n*                   TSO/E address space (unless they were pointed to, *\n*                   and are from an IKJTABLS load module that is in   *\n*                   the LPA list.)                                    *\n*                                                                     *\n*       Function:   To substitute one new program name in the local   *\n*                   incore TSO auth tables, IKJEFTE2, IKJEFTE8, or    *\n*                   IKJEFTAP, IKJEFTNS lists.  This is done to any    *\n*                   numbered entry of each table.  Or else merely to  *\n*                   display the contents of the entire table, or the  *\n*                   contents of any particular numbered entry.        *\n*                                                                     *\n*                   The effect of replacing any program name is       *\n*                   immediate.  The scope of the change, is just for  *\n*                   the issuing current TSO userid.                   *\n*                                                                     *\n*                   You can blank out any numbered entry in any of    *\n*                   the four tables.  But blanking an entry, will     *\n*                   invalidate all subsequent table entries which     *\n*                   follow the blanked entry slot.  So be careful!    *\n*                                                                     *\n*                   Or, you can use this program to list the complete *\n*                   contents of any of the auth tables which are      *\n*                   incore.                                           *\n*                                                                     *\n*                   Additionally, as described below, you can change  *\n*                   fields in the LWA which characterize the          *\n*                   individual tables--size characteristics and       *\n*                   whether or not the table came from STEPLIB.       *\n*                                                                     *\n*         Syntax:   TSUB ttA nnn pgmname                              *\n*                                                                     *\n*                   Where tt is a table code, and A is an action      *\n*                   code.                                             *\n*                                                                     *\n*                   The table code is a nickname for any of the       *\n*                   TSO/E auth tables which are incore.  They are:    *\n*                                                                     *\n*                   E2 - IKJEFTE2 = AUTHCMD  entry in IKJTSOxx        *\n*                   E8 - IKJEFTE8 = AUTHPGM  entry in IKJTSOxx        *\n*                   AP - IKJEFTAP = AUTHTSF  entry in IKJTSOxx        *\n*                   NS - IKJEFTNS = NOTBKGND entry in IKJTSOxx        *\n*                                                                     *\n*                   If the action code is B (blank the numbered       *\n*                   entry), then no program name is required,         *\n*                   but a number is required.  When blanking a        *\n*                   table entry, BE VERY CAREFUL !!!!!                *\n*                                                                     *\n*       WARNING  >  If you blank out an entry which is not the        *\n*       WARNING  >  last entry in the particular table, then          *\n*       WARNING  >  all subsequent entries in that table are          *\n*       WARNING  >  rendered invalid!  It is best to restore          *\n*       WARNING  >  a non-blank entry to that slot, using the         *\n*       WARNING  >  ttR function, where tt is the table code.         *\n*                   Then you will be able to display the rest         *\n*                   of the table using the ttD function.              *\n*                                                                     *\n*                   If the action code is D (display the given        *\n*                   entry), then no program name is required.         *\n*                   The default action is to display the entire       *\n*                   table, unless a number is entered.  If a          *\n*                   number is present, then only that entry           *\n*                   number is displayed.  If the number is larger     *\n*                   than the number of entries in that particular     *\n*                   table, then an informative error message is       *\n*                   issued, and the program ends with code = 4.       *\n*                                                                     *\n*                   If the action code is R (replace the program      *\n*                   name) then a number (the table entry number)      *\n*                   and a program name are required.  If you want     *\n*                   to blank that slot, instead of putting a          *\n*                   program name into it, then use action code B.     *\n*                   But if you are blanking any slot which is not     *\n*                   the last slot, then PLEASE HEED THE WARNING       *\n*                   THAT IS ABOVE.                                    *\n*                                                                     *\n*                   If the action code is H, then TSUB will replace   *\n*                   the last 8 bytes of the table header with the     *\n*                   literal: C' PARMLIB', as if the table were        *\n*                   created from the IKJTSOxx member in PARMLIB.      *\n*                                                                     *\n*                   If the action code is L, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus all the potential blank   *\n*                   entries at the end of the table.  So this number  *\n*                   will often reflect more entries than TSO will     *\n*                   actually use.  Additionally, TSUB can change or   *\n*                   blank any one of these entries, because TSUB's    *\n*                   range depends on the number of entries indicated  *\n*                   by the LWA length.  (If there's no length, then   *\n*                   TSUB uses the length of all non-blank entries     *\n*                   plus the first blank, if it exists.)              *\n*                                                                     *\n*                   If the action code is M, then TSUB will look to   *\n*                   create a length value for that table.  This value *\n*                   is equal to the length of a table with all the    *\n*                   non-blank entries, plus one blank entry, if any   *\n*                   perceived blank entries exist at the end of the   *\n*                   table.                                            *\n*                                                                     *\n*                   If the action code is Z, then TSUB will look at   *\n*                   the LWA length value for that table, and it will  *\n*                   zero that length value, whether it already was    *\n*                   zero, or not.                                     *\n*                                                                     *\n*                   If the action code is S, then TSUB will make      *\n*                   the given table look like it came from STEPLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will not overlay the session's auth table.        *\n*                                                                     *\n*                   If the action code is P, then TSUB will make      *\n*                   the given table look like it came from PARMLIB,   *\n*                   so that a subsequent PARMLIB UPDATE(xx) command   *\n*                   will overlay the session's auth table.            *\n*                                                                     *\n*                   If the action code is X, then TSUB will display   *\n*                   all the LPA address ranges (undocumented).        *\n*                                                                     *\n*                   If the PLATCMD or PLATPGM keywords (and at least  *\n*                   one name) were not coded in the active IKJTSOxx   *\n*                   PARMLIB entry, then there is no control block of  *\n*                   names to be pointed to.  The condition is         *\n*                   reported.  If these keywords WERE coded in the    *\n*                   IKJTSOxx member of PARMLIB which is currently     *\n*                   active, then the PC and PP table codes in TSUB    *\n*                   WILL ACT ON THE COMMON STORAGE COPY of THESE      *\n*                   TWO TABLES ONLY.                                  *\n*                                                                     *\n*  Recommendation:  First list the entire table using the \"D\"         *\n*                   action code, and then decide which entry, by      *\n*                   number, that you want to replace.                 *\n*                                                                     *\n*                   Then use the \"R\" action code, to replace the      *\n*                   particular numbered entry you have chosen.        *\n*                                                                     *\n*            Note:  The E2, E8, AP, or NS table which is being        *\n*                   used by the system, can come from either the      *\n*                   IKJTSOxx PARMLIB entry, or it can come from       *\n*                   an IKJTABLS load module which was running         *\n*                   from an APF authorized library as a STEPLIB,      *\n*                   or a default IKJTABLS entry in LPALIB.  Each      *\n*                   CSECT is copied into the TSO user's address       *\n*                   space, albeit in a protected key, and pointed     *\n*                   to by the user's LWA, except in the case of an    *\n*                   IKJTABLS CSECT that is in LPALIB.  These are      *\n*                   the actual auth tables, E2, E8, AP, NS, in        *\n*                   use by that TSO address space.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  Change Log:                                                        *\n*    2008/09/10 - 1.0 - Initial version - Got it to work.             *\n*                       TSUB can blank any slot.  I'm allowing        *\n*                       that for now, because the scope of the        *\n*                       possible damage is only for that TSO          *\n*                       session as long as it is logged on.           *\n*                       The LWA auth tables are all reset by          *\n*                       logging on to that TSO session again.         *\n*                                                                     *\n*    2008/09/15 - 1.0 - Filled in and cleaned up some of the doc.     *\n*                                                                     *\n*    2009/01/28 - 1.0 - Added action codes: H, L, Z, S, P             *\n*                                                                     *\n*         All action codes except D need APF-authorization.           *\n*                                                                     *\n*         What they do:                                               *\n*                                                                     *\n*            H - Add PARMLIB-like table header, in 2nd 8-bytes.       *\n*            L - Supply length of table in LWA with ALL the blanks.   *\n*            M - Supply length of table to first blank, in LWA.       *\n*            Z - Zero the table length marked in the LWA.             *\n*            S - Mark that the table came from STEPLIB, so            *\n*                 someone (else's) PARMLIB UPDATE(xx) won't           *\n*                 overlay it.                                         *\n*            P - Turn off STEPLIB bit in LWA and mark that it         *\n*                 came from PARMLIB.  Now PARMLIB UPDATE(xx)          *\n*                 will overlay the table.                             *\n*            X - (undocumented) Gives LPA storage range display.      *\n*                                                                     *\n*         Other action codes are: (these are the original ones)       *\n*                                                                     *\n*            D - Display table entries by slot number.                *\n*            R - Replace the entry in a given slot, by another one.   *\n*            B - Blank a given table entry, by slot number.           *\n*                                                                     *\n*    2009/02/01 - 1.1 - Fourth and fifth base registers.              *\n*                                                                     *\n*         Improved message clarity.  Told messages to show states,    *\n*          \"before\" and \"after\" any changes were made.                *\n*                                                                     *\n*    2009/02/12 - 1.1 - Fix bug in calculating length of NS table.    *\n*         Fix convoluted logic in calculating table lengths.          *\n*                                                                     *\n*    2009/02/13 - 1.1 - Measure perceived blanks after logical end    *\n*         of the table.  For NS table, blank an entry with X'0000'    *\n*         for the \"length\" field, instead of X'FFFF', to see more     *\n*         perceived blanks, if there are any.                         *\n*                                                                     *\n*    2009/02/16 - 1.1 - Added option M to tailor length to reflect    *\n*         only up to the first blank.  Changed option L to make the   *\n*         LWA length equal to all non-blank entries plus all blank    *\n*         entries too.  Thus the table can be expanded, even if       *\n*         lengths are there.                                          *\n*                                                                     *\n*    2009/02/18 -1.1.31 Cosmetic changes. Put in Version numbers.     *\n*                                                                     *\n*    2009/02/20 -1.1.32 Improved displays for PC and PP tables.       *\n*                       Made sure S,P,H,L,M,Z options for PC and PP   *\n*                       actually do nothing, and say they do nothing. *\n*                       Made \"error display\" messages better.         *\n*                                                                     *\n*    2009/02/24 -1.1.33 Better messages if PLATPGM or PLATCMD tables  *\n*                       are missing.                                  *\n*                                                                     *\n*    2009/03/03 -1.1.34 More cosmetic changes in title & messages.    *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*       I N S T R E A M    M A C R O S                                *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n***********************************************************************\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         YREGS\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  ---------------------------------------------------------------  *\n*    This macro is used to display hex values in a printed report.\n*  ---------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R9,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------- *\n         MACRO\n&LABEL   APUT  &MSG,                    @MESSAGE TEXT                  &\n               &LEN,                    @LENGTH OF MESSAGE             &\n               &RSA=,                   OPTIONAL 2 WORD SAVE AREA      &\n               &EPA=                    EPUTL EPA\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*  --> E@PUT\n.*\n.*  THIS MACRO SETS UP A PARAMETERS AND INVOKES THE EPUTL ROUTINE.\n.*\n.*\n.*  ARGUMENTS: -----------------------------------------------------\n.*\n.*      &MSG : ADDRESS OF MESSAGE TEXT OR A LITERAL\n.*\n.*      &LEN : LENGTH OF MESSAGE TEXT (DEFAULT IS L'&MSG)\n.*\n.*      &RSA :(OPTIONAL) 1 WORD SAVE AREA TO PRESERVE R14 FOR TPUT\n.*            COMPATIBILITY.\n.*\n.*      &EPA :(OPTIONAL) EPA FOR EPUTL ROUTINE\n.*\n.*\n.*   EXAMPLES: -----------------------------------------------------\n.*\n.*      1) APUT  'LITERAL'\n.*\n.*      2) APUT  (R3),80\n.*\n.*      3) APUT  LABEL\n.*\n.*      4) APUT  LABEL,40\n.*\n.*\n.* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n.*\n.*\n.*  LOCAL SET SYMBOLS\n.*\n         LCLC  &SMA                     MESSAGE ADDRESS (REG)\n         LCLC  &SML                     MESSAGE LENGTH (REG)\n         LCLC  &SEP                     EPA (REGISTER)\n.*\n         LCLC  &L1,&L2,&L3              LOCAL LABELS\n.*\n&L1      SETC  'EP'.'&SYSNDX'.'L1'      LOCAL LABELS\n&L2      SETC  'EP'.'&SYSNDX'.'L2'      LOCAL LABELS\n&L3      SETC  'EP'.'&SYSNDX'.'L3'      LOCAL LABELS\n.*\n.*\n.*  MESSAGE ADDRESS\n.*\n         AIF   (T'&LABEL EQ 'O').A0500                      *HMD 11/86*\n.*                                                          *HMD 11/86*\n&LABEL   DS    0H                                           *HMD 11/86*\n.*                                                          *HMD 11/86*\n.A0500   ANOP                                               *HMD 11/86*\n         AIF   ('&MSG' NE '').A2000\n         MNOTE 8,'''&MSG='' MISSING / REQUIRED'\n         MEXIT\n.*\n.A2000   ANOP\n         AIF   ('&MSG'(1,1) NE '(').A2400\n&SMA     SETC  '&MSG'(2,K'&MSG-2)\n         LR    R1,&SMA                  @MESSAGE TEXT\n         AGO   .A2600\n.*\n.A2400   ANOP\n         AIF   ('&MSG'(1,1) NE '''').A2500\n         B     &L3                      BRANCH AROUND MESSAGE\n&L2      DC    C&MSG\n&L3      DS    0H\n         LA    R1,&L2                   @MESSAGE\n         AGO   .A2600\n.*\n.A2500   ANOP\n         LA    R1,&MSG                  @MESSAGE TEXT\n.A2600   ANOP\n.*\n.*  MESSAGE LENGTH\n.*\n         AIF   ('&LEN' NE '').A3000\n         AIF   ('&MSG'(1,1) NE '''').A2800\n         LA    R0,L'&L2                 MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2800   ANOP\n         AIF   ('&MSG'(1,1) EQ '(').A2900\n         LA    R0,L'&MSG                MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A2900   ANOP\n         MNOTE 8,'''LEN'' MISSING / REQUIRED'\n         MEXIT\n.*\n.A3000   ANOP\n         AIF   ('&LEN'(1,1) NE '(').A3400\n&SML     SETC  '&LEN'(2,K'&LEN-2)\n         LR    R0,&SML                  MESSAGE LENGTH\n         AGO   .A3600\n.*\n.A3400   ANOP\n         LA    R0,&LEN                  MESSAGE LENGTH\n.A3600   ANOP\n.*\n.*  RSA\n.*\n         AIF   ('&RSA' EQ '').A4900\n         ST    R14,&RSA                 SAVE REGS 14\n.A4900   ANOP\n.*\n.*  ENTRY POINT\n.*\n         AIF   ('&EPA' NE '').A5000\n         L     R15,=V(EPUTL)            EPA\n         AGO   .A5600\n.*\n.A5000   AIF   ('&EPA'(1,1) NE '(').A5400\n&SEP     SETC  '&EPA'(2,K'&EPA-2)\n         LR    R15,&SEP                 EPA\n         AGO   .A5600\n.*\n.A5400   ANOP\n         L     R15,&EPA                 EPA\n.*\n.A5600   ANOP\n.*\n.*  CALL LINKAGE\n.*\n.ACALL   BALR  R14,R15                  CALL PUTLINE ROUTINE\n.*\n         AIF   ('&RSA' EQ '').A6900\n         L     R14,&RSA                 RESTORE R14\n.A6900   ANOP\n.*\n.AMEND   MEND\n* ------------------------------------------------------------------- *\nTSUB     CSECT\nTSUB     AMODE 31\nTSUB     RMODE 24\n         USING *,R15                                                  *\n         B     BEGINN               Eyecatcher\nMAXBLANK DC    F'120'        Guess of max number of blanks after table\n         DC    CL5'TSUB '\nVERS#    DC    CL10'Ver 1.35'\n         DC    CL18' - &SYSDATE &SYSTIME '\nBEGINN   DS    0H\n         DROP  R15\n         USING TSUB,R12,R11,R10,R6,R7  Set up base registers.\n         STM   R14,R12,12(R13)\n         LR    R12,R15                 Set up base registers.\n         ST    R1,SAVEPARM          Save CPPL pointer to use later.\n         LA    R11,4095(,R12)       Second base.\n         LA    R11,1(,R11)\n         LA    R10,4095(,R11)       Third base.\n         LA    R10,1(,R10)\n         LA    R6,4095(,R10)        Fourth base.\n         LA    R6,1(,R6)\n         LA    R7,4095(,R6)         Fifth base.\n         LA    R7,1(,R7)\n         LA    R1,SAVEAREA          Point to new save area\n         ST    R1,8(,R13)           Forward save area chain pointer\n         ST    R13,4(,R1)           Backward save area chain pointer\n         LR    R13,R1               New save area address\n         B     INITCON              Branch past save area\n         SPACE 1\n* -----------------------\nSAVEAREA DC    18F'0'               Non-reentrant save area\n* -----------------------\nINITCON  DS    0H                   Initialize constants to be sure.\n         MVI   OFFFLAG,X'00'\n         MVI   PLATFLG,X'00'\n         MVI   MEASFLG,X'00'\n         MVI   LPAFLAG,X'00'\n         MVI   SHBLFLG,X'00'\n         MVI   LPADFLG,X'00'\n         MVI   NSCHFLG,X'00'\n         MVI   HAVLFLG,X'00'\n         MVI   LWAPFLG,X'00'\n         MVI   LWAMFLG,X'00'\n         MVI   TIDFLAG,X'00'\n         MVI   OLDFLAG,X'00'\n         MVI   FLAGZ,X'00'\n         MVI   LINEB,X'40'\n         MVI   LINAB,X'40'\n         XC    FSTCOUNT,FSTCOUNT\n         XC    FSTNOUNT,FSTNOUNT\n         MVC   FSTFIELD(8),BLANKS\n         MVI   BLANKS-1,X'40'\n         MVC   BLANKS,BLANKS-1\n         MVC   CODEPLAC(2),BLANKS\n         MVC   DISPHDR(16),BLANKS\n         XC    SLOTBIN,SLOTBIN\n         XC    BLNKCNT,BLNKCNT\n         XC    NTRYCNT,NTRYCNT\n         XC    SAVETCUR,SAVETCUR\n         MVC   SLOTSAVE,BLANKS\n         MVC   FSTNAME,BLANKS\n         MVI   CMDBCOPY-1,X'00'\n         MVC   CMDBCOPY,CMDBCOPY-1\n* -----------------------\nGETPSCB  DS    0H                  See if we are allowed to\n*                                  run this program.\n         L     R2,16               POINT TO CVT.\n         L     R2,0(,R2)           POINT TO TCB/ASCB WORDS\n         L     R2,4(,R2)           POINT TO TCB.\n         L     R2,X'B4'(,R2)       POINT TO JSCB.\n         L     R2,X'108'(,R2)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ4                GET OUT.  NOT TSO.\n         L     R1,SAVEPARM         Get the address of the CPPL back\n         USING CPPL,R1\n         L     R0,CPPLUPT          Copy CPPL fields for possible\n         ST    R0,SAVEUPT            later use, if needed.\n         L     R0,CPPLPSCB\n         ST    R0,SAVEPSCB\n         L     R0,CPPLECT\n         ST    R0,SAVEECT\n         DROP  R1\n         BAL   R9,PGMTITLE         First display the program title.\n         USING PSCB,R2\nCHEKAUTH DS    0H\n         NOP   GETLWA              Zap to bypass authorization check\n         TM    PSCBATR1,PSCBACCT   ACCT user?\n         BO    GETLWA              Yes.  Continue.\n         TM    PSCBATR1,PSCBCTRL   OPER user?\n         BZ    EOJ4                No.  Get out.\n         DROP  R2\n***** ----- >>>>>\nGETLWA   DS    0H                  Obtain all the relevant fields\n*                                  from the LWA (Logon Work Area)\n         L     R2,X'224'           Point to PSAAOLD\n         L     R2,X'6C'(,R2)       Point to ASXB\n         L     R2,X'14'(,R2)       Point to LWA\n         ST    R2,LWAADDR          Store LWA address\n         USING LWA,R2\n* ------------------------------------------------------------------ *\n*    Save all the relevant information from the LWA, to use later.   *\n* ------------------------------------------------------------------ *\n         ST    R5,SAVER5B          Store original contents of R5\n         L     R5,LWATNS           Pointer to NS table\n         ST    R5,SAVETNS          Save it.\n         L     R5,LWATE2           Pointer to E2 table\n         ST    R5,SAVETE2          Save it.\n         L     R5,LWATE8           Pointer to E8 table\n         ST    R5,SAVETE8          Save it.\n         L     R5,LWATAP           Pointer to AP table\n         ST    R5,SAVETAP          Save it.\n         XR    R5,R5               Clear register to be double sure.\n         LH    R5,LWATNSLN         Length of NS table if available\n         STH   R5,SAVETNSL         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NONSSIZE            No\n         OI    LWAMFLG,X'40'       Yes. Indicate that in a flag.\nNONSSIZE DS    0H\n         LH    R5,LWATE2LN         Length of E2 table if available\n         STH   R5,SAVETE2L         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOE2SIZE            No\n         OI    LWAMFLG,X'20'       Yes. Indicate that in a flag.\nNOE2SIZE DS    0H\n         LH    R5,LWATE8LN         Length of E8 table if available\n         STH   R5,SAVETE8L         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOE8SIZE            No\n         OI    LWAMFLG,X'10'       Yes. Indicate that in a flag.\nNOE8SIZE DS    0H\n         LH    R5,LWATAPLN         Length of AP table if available\n         STH   R5,SAVETAPL         Save whatever was there in program.\n         LTR   R5,R5               Has a size been supplied in the LWA?\n         BZ    NOAPSIZE            No\n         OI    LWAMFLG,X'80'       Yes. Indicate that in a flag.\nNOAPSIZE DS    0H\n         L     R5,SAVER5B          Restore original R5 contents\n         MVC   LWAPFLG,LWAPRMLB    Save flags showing which tables\n*                                  came from STEPLIB, if any.\n         DROP  R2\n* ------------------------------------------------------------------ *\n*    At this point we have finished saving things out of the LWA.    *\n* ------------------------------------------------------------------ *\n*    Now we have to find the LPA boundaries.                         *\n* ------------------------------------------------------------------ *\nLPAINFO  DS    0H\n         BAL   R9,GETLPABD         Get list of LPA storage boundaries.\n* ------------------------------------------------------------------ *\n***** ----- >>>>>  We can handle the public Platform Command and     *\n***** ----- >>>>>  Platform Program tables, if they exist.           *\n* ------------------------------------------------------------------ *\nGETPCPP  DS    0H            Info about Platpgm and Platcmd Tables\n         L     R2,16               Point to CVT\n         L     R2,X'9C'(,R2)       Point to TSVT (TSO Vector Table)\n         L     R2,X'4C'(,R2)       Point to TPVT\n         ST    R2,SAVETPVT         Save TPVT address for later use\n         L     R2,X'14'(,R2)       Point to CTLT control block\n         ST    R2,SAVECTLT         Save CTLT address for later use\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'34'(,R2)       Point to PLATCMD pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOFCVE              No. Say so.\n         ST    R2,SAVEFCVE         Yes. Store the FCVE pointer away.\n         OI    PLATFLG,X'01'       Indicate that FCVE exists.\nTRYPPVE  DS    0H\n         L     R2,SAVETPVT         Load TPVT address back\n         L     R2,X'40'(,R2)       Point to PLATPGM pointer\n         LTR   R2,R2               Is there any?\n         BZ    NOPPVE              No. Say so.\n         ST    R2,SAVEPPVE         Yes. Store the PPVE pointer away.\n         OI    PLATFLG,X'02'       Indicate that PPVE exists.\nTRYPPVEE DS    0H\n         B     CHKOLVER            Skip over relevant error messages.\n* -------------------------------------------------------------- *\n* ------           Error messages if tables don't exist   ------ *\n* -------------------------------------------------------------- *\nNOFCVE   DS    0H\n         APUT  =C'No PLATCMD table found',22\n         B     TRYPPVE\nNOPPVE   DS    0H\n         APUT  =C'No PLATPGM table found',22\n         B     TRYPPVEE\n* ----------------------------------------------------------------- *\n*    There doesn't seem to be a way to tell from an old INMXPARM    *\n*    control block itself, that it is the old version.  So we use   *\n*    the position of the active PARMLIB member name in the TPVT.    *\n* ----------------------------------------------------------------- *\nCHKOLVER DS    0H\n         L     R2,SAVETPVT         Load TPVT address back.\n         CLC   =C'IKJ',7(R2)       Parmlib member name in old position?\n         BNE   PARMSCAN            No. It's a new TSO/E version\n         OI    OLDFLAG,X'01'       Yes. Flag that the system is old.\n* -------------------------------------------------------------- *\n*    After we got the system information we finally start        *\n*     scanning the TSO command for parms, here.                  *\n* -------------------------------------------------------------- *\nPARMSCAN DS    0H\n         L     R1,SAVEPARM         Original R1 from entry to program.\n         LTR   R1,R1               Any CPPL?\n         BZ    EOJ8                No. Get out.\n         L     R1,0(,R1)           Point to Command Buffer\n         LTR   R1,R1               Any Command Buffer?\n         BZ    EOJ4                Get out if none.\n         LH    R3,0(,R1)           Load length.\n         CH    R3,=H'4'            Anything?\n         BNH   EOJ4                No.  Get out.\n         LR    R5,R3               Length of command + 4\n         ICM   R5,14,FULLZERO      Clear high order 3 bytes.\n         ST    R1,CMBUFAD          Save Command Buffer Address\n         LH    R3,2(,R1)           Load offset.\n         ST    R3,OFFSETSV         Save offset value.\n         SR    R5,R3               Subtract offset from full length+4\n         SH    R5,=H'4'            Correct for length of CMDBUFR header\n*                                  in the command buffer.\n         BC    8,EOJC              Zero, Message\n         BC    5,EOJC              Less, or overflow, out.\n         ST    R5,CMBUFEND         Store away the number of bytes left\n         L     R1,CMBUFAD          Load Command Buffer Address\n*\n* ----  Copy command buffer into pgm's buffer so we can control it.\n*\n         STM   R14,R1,SAVE1401     Now save registers 14 thru 1.\n         XR    R14,R14             Clear R14.\n         LH    R14,0(,R1)          Load full command buffer length.\n         S     R14,=F'5'           Subtract 4 for header, 1 for execute\n         ICM   R14,14,FULLZERO     Ensure cmd buffer smaller than 255\n         EX    R14,COPYCMDB        Copy command into pgm's area.\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\n         B     GOGOGO              Jump over executed instruction.\nCOPYCMDB MVC   CMDBCOPY(0),4(R1)   <<< Executed >>>\nGOGOGO   DS    0H\n* ----\n         LA    R2,3                Load register for BCT loop.\n* >>>\n         LA    R1,CMDBCOPY         Point to command in our buffer\n         A     R1,OFFSETSV         Add offset, point to subcommands\n         ST    R1,CHARSTRT         Store starting point away\n* >>>\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of function name.\n         LA    R8,0                Initialize character count\nCUTIDLEN CLI   0(R4),X'40'         Is this character a blank?\n         BE    AFTFIRST            Yes, end of the first parm.\n         CLI   0(R4),X'00'         Is this character hex zero?\n         BE    AFTFIRST            Yes, end of command in buffer copy.\n         LA    R4,1(,R4)           Bump another character\n         LA    R8,1(,R8)           Count another character\n         CR    R8,R5               End of command buffer ?\n         BNL   AFTFIRST            Yes. Get out now.\n         BCT   R2,CUTIDLEN         Try for blank again.\nAFTFIRST DS    0H\n         MVC   TABCODE(8),BLANKS   Clear field\n         BCTR  R8,0                Subtract 1 for execute.\n         L     R1,CHARSTRT         Reload R1 to be sure it's correct.\n         EX    R8,MOVOUTL          Move entered parameter to program.\n         LA    R8,1(,R8)           Restore number of characters\n         AR    R1,R8               Point past last search\n         ST    R1,CHARCONT         Continue from here\n         ST    R8,SAVER8A          Save register\n* ---- >\nSEEIFPRM DS    0H                  Check if a command is here\n         OC    TABCODE(3),BLANKS   Uppercase. Won't affect numbers.\n         CLI   TABCODE+2,C'X'      Special action code, code X.\n         BNE   SEEIFJ01            Not this. Just go on.\n         OI    LPADFLG,X'01'       Set flag to display LPA range.\nSEEIFJ01 DS    0H\n*--*\n         TM    LPADFLG,X'01'       Display LPA range only?\n         BZ    SEEIFK01            No. Do all regular processing.\n         BAL   R9,GETLPRNT         Yes. Display LPA range and exit.\n         B     EOJ0                Out of program with Code 0\nSEEIFK01 DS    0H\n*--*\n         CLI   TABCODE+2,C'R'      Replace the entry in the given slot\n         BE    SEEIF0A1\n         CLI   TABCODE+2,C'B'      Blank the given slot\n         BE    SEEIF0A2\n         CLI   TABCODE+2,C'D'      Display contents of given slot\n         BE    SEEIF0A3              or all slots.\n         CLI   TABCODE+2,C'H'      Alter table header\n         BE    SEEIF0A4\n         CLI   TABCODE+2,C'L'      Supply length for table in LWA\n         BE    SEEIF0A5              including trailing blank entries.\n         CLI   TABCODE+2,C'M'      Supply length for table in LWA plus\n         BE    SEEIF0M5              one trailing blank, if there.\n         CLI   TABCODE+2,C'Z'      Zero length for table in LWA\n         BE    SEEIF0A6\n         CLI   TABCODE+2,C'S'      Say this table came from STEPLIB\n         BE    SEEIF0A7\n         CLI   TABCODE+2,C'P'      Say this table is not from STEPLIB\n         BE    SEEIF0A8\n         B     SEEIF000\nSEEIF0A1 DS    0H\n         OI    OFFFLAG,X'01'       Replace an entry\n         B     SEEIF001\nSEEIF0A2 DS    0H\n         OI    OFFFLAG,X'02'       Blank entry in the last slot\n         B     SEEIF001\nSEEIF0A3 DS    0H\n         OI    OFFFLAG,X'04'       Display an entry or entries\n         B     SEEIF001\nSEEIF0A4 DS    0H\n         OI    OFFFLAG,X'08'       Alter table header\n         B     SEEIF001\nSEEIF0M5 DS    0H                  Short length with one blank\n         OI    SHBLFLG,X'01'\nSEEIF0A5 DS    0H\n         OI    OFFFLAG,X'10'       Supply length for table in LWA\n         B     SEEIF001\nSEEIF0A6 DS    0H\n         OI    OFFFLAG,X'20'       Zero length for table in LWA\n         B     SEEIF001\nSEEIF0A7 DS    0H\n         OI    OFFFLAG,X'40'       Say this table came from STEPLIB\n         B     SEEIF001\nSEEIF0A8 DS    0H\n         OI    OFFFLAG,X'80'       Say this table not from STEPLIB\n         B     SEEIF001\nSEEIF000 DS    0H                  Wrong function code was entered...\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Program table code + Function code '\n         APUT  LINE,48\n* --- >\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Get out with code = 4.\nSEEIF001 DS    0H                  Which table to change\n         MVC   CODEPLAC(2),TABCODE    Save table code.\n* --- >\n         TM    OFFFLAG,X'04'       Display only--no changes to be made\n         BO    NOBEFORE            Don't show \"before changes\" message\n         STM   R14,R1,SAVE1401     Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGED,L'MESSAGED Say \"after making changes\"\n         LM    R14,R1,SAVE1401     Restore registers 14 thru 1.\nNOBEFORE DS    0H\n* --- >                            Display what we entered, plus code\n         MVC   LINE,LINEB          Clear line\n         MVC   LINE(3),TABCODE     Move code in\n         HEX   LINE+6,1,OFFFLAG    Display contents of flag\n         MVC   LINE+13(35),=C'Program table code + Function code '\n         APUT  LINE,48\n* --- >                            Handle each table separately.\n         CLC   TABCODE(2),=C'E2'   Change IKJEFTE2?\n         BE    E2CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'E8'   Change IKJEFTE8?\n         BE    E8CHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'AP'   Change IKJEFTAP?\n         BE    APCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PC'   Change PLATCMD?\n         BE    PCCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'PP'   Change PLATPGM?\n         BE    PPCHANGE            Yes. Branch.\n         CLC   TABCODE(2),=C'NS'   Change IKJEFTNS?\n         BE    NSCHANGE            Yes. Branch.\n         BAL   R9,ERRORCOD         Indicate error and display syntax.\n         B     EOJ4                Invalid code entered.\nEOJ      DS    0H                  END OF JOB\n         L     R13,4(,R13)\n         LR    R15,R5              Put in real return code\n         ST    R15,16(,R13)        Shove it where it belongs\n         L     R14,12(,R13)        R14 and\n         LM    R0,R12,20(R13)        rest of registers\n         BR    R14                 Go back to caller\nEOJ0     DS    0H                  Return code 0\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR0       Show Return Code 0\n         APUT  MESSAGR0,L'MESSAGR0\n         LA    R5,0                Set CC = 0\n         B     EOJ                 Now end the program\nEOJ4     DS    0H                  Return code 4\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR4       Show Return Code 4\n         APUT  LINE,L'MESSAGR4\n         L     R5,FULLFOUR         Set CC = 4\n         B     EOJ                 Now end the program\nEOJ8     DS    0H                  Return code 8\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGR8       Show Return Code 8\n         APUT  LINE,L'MESSAGR8\n         L     R5,FULLEIGT         Set CC = 8\n         B     EOJ                 Now end the program\nEOJC     DS    0H                  Return code 12\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         MVC   LINE,LINE-1         Clear output area\n         MVC   LINE,MESSAGRC       Show Return Code 12\n         APUT  LINE,L'MESSAGRC\n         L     R5,FULLTWLV         Set CC = 12\n         B     EOJ                 Now end the program\n** ---------------------------------------------------------------- **\n**                                                                  **\n**   Different Table Handling Routines                              **\n**   --------- ----- -------- --------                              **\n**                                                                  **\n**  At this point, we have the routines which handle each of the    **\n**  separate types of tables.  E2, E8, AP, and NS, for which the    **\n**  live LWA version is handled.  But we also do the FCVE and       **\n**  PPVE (Platform Command and Platform Program) tables pointed     **\n**  to by the TPVT (TSO Parmlib Vector Table) control block, and    **\n**  those two tables, if they exist, are similarly handled.  But    **\n**  the FCVE and PPVE tables (table codes PC and PP respectively,   **\n**  in this program) are in common storage, and are not in the      **\n**  TSO user's address space.                                       **\n**                                                                  **\n** ---------------------------------------------------------------- **\nE2CHANGE DS    0H                 Handle the E2 table\n         OI    TIDFLAG,X'20'      Show we're doing the E2 table.\n         MVC   TABLEID,=C'E2'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R4,SAVETE2         Point to saved E2 table address\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nE2CHENTY DS    0H                 Show we have a size for E2 table\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    E2CHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'20'      Do we have a size for the E2 table?\n         BZ    E2CHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETE2L    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E2CHYSSZ\nE2CHNOSZ DS    0H                 Show message that we have no size\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE2CHYSSZ DS    0H\n         TM    LWAPFLG,X'20'      Was the E2 table loaded from STEPLIB?\n         BZ    E2CHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E2CHYSST\nE2CHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE2CHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETE2L        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   E2CHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     E2CHNOHB           And go on.\nE2CHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETE2L  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nE2CHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - >\n         LA    R5,8               Size of each E2 table entry\n         ST    R5,TABLESIZ        Store size of each entry\n*                                 We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Store this location\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E2CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nE2CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nE8CHANGE DS    0H                 Handle the E8 table\n         OI    TIDFLAG,X'10'      Show we're doing the E8 table.\n         MVC   TABLEID,=C'E8'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R4,SAVETE8         Point to saved E8 table address\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nE8CHENTY DS    0H                 Deal with the E8 table.             .\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    E8CHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'10'      Do we have a size for the E8 table?\n         BZ    E8CHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETE8L    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E8CHYSSZ\nE8CHNOSZ DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE8CHYSSZ DS    0H\n         TM    LWAPFLG,X'10'      Was the E8 table loaded from STEPLIB?\n         BZ    E8CHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     E8CHYSST\nE8CHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nE8CHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETE8L        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   E8CHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     E8CHNOHB           And go on.\nE8CHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETE8L  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nE8CHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         LA    R5,8               Size of each E8 table entry\n         ST    R5,TABLESIZ        Store size of each entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Store this location\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    E8CHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nE8CHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nAPCHANGE DS    0H                 Handle the AP table\n         OI    TIDFLAG,X'80'      Show we're doing the AP table.\n         MVC   TABLEID,=C'AP'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n* - -\n         L     R4,SAVETAP         Get address of AP table\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR08        Measure the table\n*\n         L     R1,TABLSTRT        Load it back into work register\n**-->>\nAPCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    APCHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'80'      Do we have a size for the AP table?\n         BZ    APCHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETAPL    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     APCHYSSZ\nAPCHNOSZ DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nAPCHYSSZ DS    0H\n         TM    LWAPFLG,X'80'      Was the AP table loaded from STEPLIB?\n         BZ    APCHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     APCHYSST\nAPCHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nAPCHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past header\n         ST    R1,TABLSTRT        Store new start address\n* - -\n         LH    R2,SAVETAPL        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   APCHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME08LENG        Measured table length.\n***\n         B     APCHNOHB           And go on.\nAPCHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETAPL  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nAPCHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n         S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         SRL   R5,3               Divide by 8.\n         BCTR  R5,0               Actually two fewer entries, because\n         BCTR  R5,0                of the header.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         LA    R5,8               Size of each AP table entry\n         ST    R5,TABLESIZ        Store size of each entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point past end of table - guessed.\n         ST    R4,SAVLSLOT        Save this location.\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    APCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nAPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\nPCCHANGE DS    0H                 Handle the PC table\n         OI    TIDFLAG,X'01'      Show PC table chosen.\n         MVC   TABLEID,=C'PC'\n         TM    PLATFLG,X'01'      Does the table exist?\n         BZ    PCCHAERR           No. Report error.\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R2,SAVEFCVE        Get the PC table address\n         LR    R4,R2              Save it off\n         ST    R4,DISPREG         Store register contents for display\n* -- >                            Do Display\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,DISPREG      Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n* -- >\n         L     R3,X'8'(,R4)       Point to length of table\n         STH   R3,SAVETCUR        Store it to show non-zero\n         AR    R4,R3              Point just past PC table\n         ST    R4,TABLEND         And mark the projected end of table\n* - -\n         L     R3,X'C'(,R2)       Get number of table entries\n         ST    R3,TABLENUM        Preserve number for table search\n         LA    R3,8               Load table size\n         ST    R3,TABLESIZ        And store it for DISPTABL routine\n** -- **\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Table length in Hex:  '\n         HEX   LINE+25,2,SAVETCUR\n         APUT  LINE,45\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n** -- **\n         L     R3,SAVEFCVE        Get the platcmd table start address\n         LA    R3,X'10'(,R3)      Bump past its header\n         ST    R3,TABLSTRT        And store the starting place away\n* - -\n         LA    R5,8               Get 8 bytes ready for subtraction\n         SR    R4,R5              Back up to the last slot\n         ST    R4,SAVLSLOT        Save location of last table slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PCCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPCCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPCCHAERR DS    0H                 Say no PC table exists.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PC command not valid if no PC table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPCCHAEND DS    0H\n         B     EOJ0\n** ---------------------------------------------------------------- **\nPPCHANGE DS    0H                 Handle the PP table\n         OI    TIDFLAG,X'02'      Show PP table chosen.\n         MVC   TABLEID,=C'PP'\n         TM    PLATFLG,X'02'      Is there a Platpgm table?\n         BZ    PPCHAERR           If no, then display error condition\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         L     R2,SAVEPPVE        Get the PP table address\n         LR    R4,R2              Save it off\n         ST    R4,DISPREG         Store PP table address for display\n* -- >                            Do Display\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+21,4,DISPREG      Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\n* -- >\n         L     R3,X'8'(,R4)       Size of PP table in bytes\n         STH   R3,SAVETCUR        Show it's non-zero\n         AR    R4,R3              Point just past the PP table\n         ST    R4,TABLEND         Mark the end of table for DISPTABL\n* - -\n         L     R3,X'C'(,R2)       Get number of table entries\n         ST    R3,TABLENUM        Store that number away for DISPTABL\n         LA    R3,8               Size of each entry\n         ST    R3,TABLESIZ        Store that away too\n** -- **\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Table length in Hex:  '\n         HEX   LINE+25,2,SAVETCUR\n         APUT  LINE,45\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n** -- **\n         L     R3,SAVEPPVE        Get start address of PP table\n         LA    R3,X'10'(,R3)      Add 16 to bump past header\n         ST    R3,TABLSTRT        Store search starting address away\n* - -\n         LA    R5,8               Load size of one entry\n         SR    R4,R5              Back up to last slot address\n         ST    R4,SAVLSLOT        And save it off.\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    PPCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message\n         B     EOJ0\nPPCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\nPPCHAERR DS    0H                 Say no PC table exists.\n         MVC   LINE,LINE-1\n         MVC   LINE(43),=C'PP command not valid if no PP table exists.'\n         APUT  LINE,43\n         B     EOJ4\nPPCHAEND DS    0H\n         B     EOJ0\n** ---------------------------------------------------------------- **\nNSCHANGE DS    0H                 Handle the NS table\n         OI    TIDFLAG,X'40'      Show we're doing the NS table.\n         MVC   TABLEID,=C'NS'     Identify which table\n         BAL   R9,ADJNEXTP        Get to first blank\n         BAL   R9,NAMEPARM        Get rest of parms from the command\n         OI    NSCHFLG,X'01'      Show SETTMODE we're doing NS\n* - -\n         L     R4,SAVETNS         Saved location of the NS table\n         ST    R4,TABLSTRT        Store start address of table\n         ST    R4,TABLADDR        Keep start address of table\n*\n         BAL   R9,TESTLPA         Check if table address is in LPA\n         BAL   R9,CHANGEDL        LPA message (conditional)\n         BAL   R9,MEASUR10        Measure the table\n*\n         L     R1,TABLSTRT        Load it to start table search later\n**-->>\nNSCHENTY DS    0H                 Table was made from a IKJTSOxx entry.\n         TM    LPAFLAG,X'01'      Is this table in LPA?\n         BO    NSCHYSST           Yes. Don't message the properties.\n         TM    LWAMFLG,X'40'      Do we have a size for the NS table?\n         BZ    NSCHNOSZ           No.\n         OI    FLAGZ,X'04'        Yes. Flag that we have a size.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETNSL    Move in length amount\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NSCHYSSZ\nNSCHNOSZ DS    0H                 Say we have no size for the NS table\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nNSCHYSSZ DS    0H\n         TM    LWAPFLG,X'40'      Was the NS table loaded from STEPLIB?\n         BZ    NSCHNOST           No. Say that it wasn't.\n         STM   R14,R1,SAVE1401    Yes. Put out message saying it was.\n         MVC   MESSAG1C+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1C,L'MESSAG1C\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NSCHYSST           Don't put out contradictory messages\nNSCHNOST DS    0H                 Message. Table not from STEPLIB.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   MESSAG1D+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1D,L'MESSAG1D\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nNSCHYSST DS    0H\n*-*                               Print out table header\n         BAL   R9,PRTABLHD        Table Header Display Routine\n*-*\n         LA    R1,X'10'(,R1)      Bump past the table header\n         ST    R1,TABLSTRT        Store new start address for DISPTABL\n* - -\n         LH    R2,SAVETNSL        Load LWA Table Length\n         LTR   R2,R2              Is it there?\n         BNZ   NSCHHAVB           There is a length, so we use it.\n* - -                             None there, have to guess.\n***\n         LH    R3,ME10LENG        Measured table length.\n***\n         B     NSCHNOHB           And go on.\nNSCHHAVB DS    0H                 We have a table length given.\n         MVC   SAVETCUR,SAVETNSL  This is the length we use for now.\n         LR    R3,R2              Dump the number into R3.\nNSCHNOHB DS    0H\n         L     R4,TABLADDR        Load start address of table\n         AR    R4,R3              Point past the guessed end of table.\n*        S     R4,=F'16'          Compensate for 16 byte head start.\n         ST    R4,TABLEND         Store away guessed table end.\n* - -\n         LR    R5,R3              Dump best length into register.\n         S     R5,=F'16'\n         STM   R2,R3,SAVER23      Save work registers.\n         XR    R2,R2              Zero work registers.\n         XR    R3,R3\n         LR    R3,R5              Feed length into work register\n         D     R2,=F'10'          Divide by 10.\n         LR    R5,R3              Save the result.\n         LM    R2,R3,SAVER23      Restore work registers.\n         ST    R5,TABLENUM        Store the number of entries.\n***\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         ST    R1,SAVER1B\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         L     R1,SAVER1B\n         MVC   LINE(24),=C'Number of valid entries:'\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n***\n* - -\n         XR    R5,R5              Clear register\n         LA    R5,10              Size of each NS table entry\n         ST    R5,TABLESIZ        Store size of each table entry\n* - -                             We'll stop the search at first blank\n         SR    R4,R5              Point to Last Slot\n         ST    R4,SAVLSLOT        Save location of last slot\n         TM    OFFFLAG,X'04'      Is this just a contents display?\n         BZ    NSCHANGX           No. We must do a real change.\n         BAL   R9,DISPTABL        Yes. Just display.\n         BAL   R9,CHANGED         Message that nothing changed.\n         B     EOJ0\nNSCHANGX DS    0H\n         BAL   R9,DISPTABL        Search table for the proper entry.\n         BAL   R9,SETTMODE        Do the Key 0 stuff\n         BAL   R9,CHANGED         Tell em we changed the values.\n         B     EOJ0\n** ---------------------------------------------------------------- **\n* ----------------------------------------------------------------- *\n*     Various \"abnormal ending\" routines.                           *\n* ----------------------------------------------------------------- *\nNOTAUTH  DS    0H                     Command not authorized message.\n         APUT  MESSAG2C,L'MESSAG2C\n         APUT  MESSAG2D,L'MESSAG2D\n         B     EOJC\n* ----------------------------------------------------------------- *\nNOE2     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E2'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOE8     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'E8'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOAP     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'AP'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNONS     DS    0H                 No Parmlib-supplied table there.\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEP),MESSAGEP\n         MVC   LINE+20(2),=C'NS'\n         APUT  LINE,L'MESSAGEP\n         B     EOJ4\n* ----------------------------------------------------------------- *\nNOTNUMER DS    0H                 Message that a parm was not numeric\n         MVC   LINE,LINE-1\n         MVC   LINE(L'MESSAGEN),MESSAGEN\n         MVC   LINE+21(1),0(R4)\n         APUT  LINE,L'MESSAGEN\n         B     EOJ4\n** ---------------------------------------------------------------- **\n**    Some of the Register and Pointer Save Areas                   **\n** ---------------------------------------------------------------- **\nSAVEPARM DC    F'0'                   Parm address from R1 at entry\nSAVETPVT DC    F'0'                   Address of TPVT control block\nSAVECTLT DC    F'0'                   Address of CTLT control block\nSAVEFCVE DC    F'0'                   Address of Platcmd table if non-0\nSAVEPPVE DC    F'0'                   Address of Platpgm table if non-0\nSAVEUPT  DC    F'0'                   Address of UPT\nSAVEECT  DC    F'0'                   Address of ECT\nSAVEPSCB DC    F'0'                   Address of PSCB\nSAVETNS  DC    F'0'                   Address of NS table\nSAVETE2  DC    F'0'                   Address of E2 table\nSAVETE8  DC    F'0'                   Address of E8 table\nSAVETAP  DC    F'0'                   Address of AP table\nSAVETNSL DC    H'0'                   Length of NS table, if nonzero\nSAVETE2L DC    H'0'                   Length of E2 table, if nonzero\nSAVETE8L DC    H'0'                   Length of E8 table, if nonzero\nSAVETAPL DC    H'0'                   Length of AP table, if nonzero\nSAVETCUR DC    H'0'                   Copied length of current table\nSAVETNEW DC    H'0'                   Changed length of current table\n** ---------------------------------------------------------------- **\nFULLZERO DC    F'0'                   Fullword of numeric 0\nFULLFOUR DC    F'4'                   Fullword 4\nFULLEIGT DC    F'8'                   Fullowrd 8\nFULLTWLV DC    F'12'                  Fullword 12\nSAVE1401 DC    5F'0'                  More for safety\nLWAADDR  DC    F'0'                   Address of LWA control block\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVOUTL  MVC   TABCODE(*-*),0(R1)     EXECUTED\nMOVFSTN  MVC   FSTNAME(*-*),0(R3)     EXECUTED\nMOVSNDN  MVC   SNDNAME(*-*),0(R1)     EXECUTED\nMOVFNUM  MVC   FSTNUME(*-*),0(R3)     EXECUTED\nPACK     PACK  WORKA,0(0,3)          <<< EXECUTED >>>\n** ---------------------------------------------------------------- **\n*          * - - - - - - - - - - - - - - - - - - - - - - - - *\n*          *            S U B R O U T I N E S                *\n*          * - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**  These are executed using a BAL R9,subroutn  instruction.        **\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         ST    R9,SAVER9A\n         MVC   1(1,R15),0(R1)        Move byte\n         UNPK  0(3,R15),1(2,R15)     Unpack\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)           Increment output pointer\n         LA    R1,1(,R1)             Increment input pointer\n         BCT   R0,HEX                Decrement length, then loop\n         MVI   0(R15),C' '           Blank the trailing byte\n         L     R9,SAVER9A\n         BR    R9                    Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'   Translate table\nHEXSAVE  DS    3F                    Register save for HEX macro\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNAMES DS    0H                  Get program name from parm.\n         ST    R9,SAVER9B          Save BAL register\n         ST    R2,SAVER2D          Save work register\nGETNAMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNAMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         BCTR  R5,0                Subtract one from end count\n         B     GETNAMST            And loop to find first non-blank.\nGETNAMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R2,8                BCT initial quantity - 8 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of program name.\nGETNAMLU DS    0H                  Loop to get entire name\n         CLI   0(R4),X'40'         First blank?\n         BE    GETNAMGT            Yes, got whole name.\n         CLI   0(R4),X'00'         First hex zeros?\n         BE    GETNAMGT            Yes, got whole name.\n         CR    R8,R5               End of command buffer?\n         BNL   GETNAMGT            Yes. Got all we can get.\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R4,1(,R4)           Bump where we are.\n         BCT   R2,GETNAMLU         Loop back.\nGETNAMGT DS    0H\n         ST    R8,SAVER8A          Save character count\n         ST    R8,FSTCOUNT         Again.\n         CLC   SAVER8A,=F'0'       Is character count (left) 0?\n         BNE   GETREALY            No. Go on processing for name.\n         BAL   R9,MISSPGM2         Say we're missing a program name.\n         B     EOJ4                And get out with code = 4.\nGETREALY DS    0H\n         MVC   FSTCHALF(2),FSTCOUNT+2    Get halfword program length\n         MVC   LINE,LINE-1               Print it in message\n         HEX   LINE,4,SAVER8A\n         MVC   LINE+13(17),=C'Length of command'\n         APUT  LINE,30\n         L     R3,CHARCONT         Load starting place again.\n         BCTR  R8,0                One less for EXECUTE.\n         MVC   FSTNAME(8),BLANKS   Blank entire target field.\n         EX    R8,MOVFSTN          Move program name to target.\n         OC    FSTNAME(8),BLANKS   Uppercase the program name.\n         MVC   LINE,LINE-1         And print its name out.\n         MVC   LINE(8),FSTNAME\n         MVC   LINE+13(17),=C'New program name '\n         APUT  LINE,30\n* - >\nGETNAMEN DS    0H                  Exit this routine.\n         L     R2,SAVER2D          Restore work register\n         L     R9,SAVER9B          Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGED  DS    0H                     The \"value was changed\" message.\n         ST    R9,SAVER9C\n         TM    LPAFLAG,X'01'          Is the table within LPA?\n         BO    CHANGEND               Yes. Change already shown.\n         TM    FLAGZ,X'02'            Is parm number past end of table?\n         BO    CHANGEDN               Yes. Bypass all operations here.\n         TM    OFFFLAG,X'01'          Replacement?\n         BO    CHANGEDA               Say what was replaced\n         TM    OFFFLAG,X'02'          Blanking?\n         BO    CHANGEDB               Say what was blanked\n         TM    OFFFLAG,X'04'          Display?\n         BO    CHANGEDD               Skip saying anything was changed.\n         TM    OFFFLAG,X'08'          Change header to \" PARMLIB\"?\n         BO    CHANGEDH               Write message that its done.\n         TM    OFFFLAG,X'10'          Supply lengths in LWA?\n         BO    CHANGEDK               Write appropriate messages.\n         TM    OFFFLAG,X'20'          Zero lengths in LWA?\n         BO    CHANGEDZ               Write appropriate messages.\n*                                     X'40' dealt with in SETSTEPL\n*                                     X'80' dealt with in NOTSTEPL\n         B     CHANGEND\nCHANGEDA DS    0H                     Replacing a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3A+5(4),TABENNUM+6\n         MVC   MESSAG3A+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3A+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3A,L'MESSAG3A    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDB DS    0H                     Blanking a table entry.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   MESSAG3B+5(4),TABENNUM+6\n         MVC   MESSAG3B+13(2),CODEPLAC     Move in table code.\n         MVC   MESSAG3B+42(8),FSTNAME      Move in program name.\n         APUT  MESSAG3B,L'MESSAG3B    Tell em we changed the value.\n         B     CHANGEND\nCHANGEDD DS    0H                     Displaying table entries (entry)\n         TM    OFFFLAG,X'04'\n         BZ    CHANGEDX               Not display? Say what's in slot.\n         CLC   SLOTBIN,=F'0'          Display entire table?\n         BE    CHANGEND               Don't say anything changed.\nCHANGEDX DS    0H                     Say we're displaying 1 slot.\n         MVC   LINE,LINE-1\n         MVC   LINE(30),=C'Display of Slot contents.     '\n         APUT  LINE,30\n         B     CHANGEND\nCHANGEDN DS    0H                     Say nothing changed.\n         APUT  MESSAG2D,L'MESSAG2D\n         B     CHANGEND\nCHANGEDH DS    0H                 Putting \" PARMLIB\" in table header.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\".\n         APUT  MESSAG3D,L'MESSAG3D\n         BAL   R9,PRTABLHD        Table Header Display Routine\n         B     CHANGEND\nCHANGEDK DS    0H                 \"Supply table lengths\" message.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1               Print a blank line.\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\".\n         MVC   MESSAG3E+19(2),TABLEID    Put table id into message.\n         HEX   MESSAG3E+48,2,SAVETCUR    Old message length\n         CLC   TABLEID,=C'NS'            Is it the NS table?\n         BE    CHANGK01\n         HEX   MESSAG3E+60,2,SAVETNEW    8-byte table length\n         B     CHANGK02\nCHANGK01 DS    0H\n         TM    SHBLFLG,X'01'\n         BO    CHANGKA1\n         HEX   MESSAG3E+60,2,TO10LENG    10-byte table length\n         B     CHANGK02\nCHANGKA1 DS    0H\n         HEX   MESSAG3E+60,2,ME10LENG    10-byte table length\nCHANGK02 DS    0H\n         MVI   MESSAG3E+64,C'.'          Finish \"table length\" message.\n         APUT  MESSAG3E,L'MESSAG3E\n*                                        Message after change.\n         MVC   MESSAG1A+6(2),CODEPLAC    Move in table code.\n         HEX   MESSAG1A+57,2,SAVETNEW    New message length\n         MVI   MESSAG1A+61,C'.'          Put period at end.\n         APUT  MESSAG1A,L'MESSAG1A\n         B     CHANGEND\nCHANGEDZ DS    0H                 Zeroing table lengths in the LWA.\n         TM    TIDFLAG,X'03'      Dealing with PC or PP?\n         BNZ   CHANGEDN           Yes. Show nothing was changed.\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC       Say \"before making changes\"\n         MVC   MESSAG3F+19(2),TABLEID\n         HEX   MESSAG3F+33,2,SAVETNEW\n         MVI   MESSAG3F+37,C'.'\n         APUT  MESSAG3F,L'MESSAG3F\n         MVC   MESSAG1B+6(2),CODEPLAC    Move in table code.\n         APUT  MESSAG1B,L'MESSAG1B\n         B     CHANGEND\nCHANGEND DS    0H\n         L     R9,SAVER9C\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNAMEPARM DS    0H\n         ST    R9,SAVER9D\n         TM    LPADFLG,X'01'          Displaying LPA range?\n         BO    NAMEPEND               Don't look for a number here.\n*-*\n         TM    OFFFLAG,X'08'          Just changing table header?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*\n*-*-*\n         TM    OFFFLAG,X'10'          Supply table length in LWA.\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*\n*-*-*-*\n         TM    OFFFLAG,X'20'          Zero table length in LWA.\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'          Set on STEPLIB flag for table?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'          Set off STEPLIB flag for table?\n         BO    NAMEPEND               Yes. Then don't look for number.\n*-*-*-*-*-*\n         L     R8,SAVER8A             Get number of characters used\n         CR    R8,R5                  More than what's left?\n         BNL   NAMEBAD1               Yes. Error.\n         C     R5,=F'3'               Is end bigger than 3?\n         BNH   NAMEBAD1               No. Error.\nNAMEGOOD DS    0H\n         S     R5,=F'3'               Subtract 3 from number till end.\n         BAL   R9,GETNUMES            Get the number of the pgm entry.\n         TM    OFFFLAG,X'02'          Are we blanking?\n         BO    NAMEPEND               Yes. Don't need a name parameter\n         TM    OFFFLAG,X'04'          Displaying?\n         BO    NAMEPEND               Yes. No names wanted.\n         BAL   R9,GETNAMES            Get the name of pgm to shove in.\n         B     NAMEPEND\nNAMEBAD1 DS    0H                     Get here if there's no parameter.\n         TM    OFFFLAG,X'04'          Are we displaying?\n         BO    NAMEPEND               No error. Just get out normally.\n         TM    OFFFLAG,X'02'\n         BO    NAMEBAD2\n         BAL   R9,MISSPGM1            We're replacing. Ask for both.\n         B     EOJ4                   RC = 4\nNAMEBAD2 DS    0H\n         BAL   R9,MISSPGM3\n         B     EOJ4                   RC = 4\nNAMEPEND DS    0H\n         L     R9,SAVER9D\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nADJNEXTP DS    0H                     Get to first blank\n         ST    R9,SAVER9E\n         MVC   CHARSTRT,CHARCONT      Set up\n         L     R1,CHARSTRT\nSEEIFENX DS    0H                     Loop\n         CLI   0(R1),X'40'            First blank?\n         BE    SEEIFENZ               Yes, then end.\n         LA    R1,1(,R1)              Bump to next character\n         ST    R1,CHARSTRT            Store address away\n         B     SEEIFENX               Loop back\nSEEIFENZ DS    0H\n         L     R9,SAVER9E\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         LTORG\n************************************************************\nPGMTITLE DS    0H                     Display program name\n         ST    R9,SAVER9F\n         MVC   LINE,LINE-1            Blank line\n         MVC   LINE,MESSAGET          Move title line in\n         MVC   LINE+56(8),VERS#       Version number into title\n         APUT  LINE,L'MESSAGET        And put out to tube\n         MVC   LINE,LINE-1            Blank line again\n         MVC   LINE,MESSAGEU          Move underlines in\n         APUT  LINE,L'MESSAGEU        And put them out also\n         L     R9,SAVER9F\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETTMODE DS    0H                  Routine that does Key 0 stuff.\n         ST    R9,SAVER9G\n         TM    FLAGZ,X'02'         Is parm number past end of table?\n         BO    SETTMEND            Yes. Don't do key zero operations.\n         TM    LPAFLAG,X'01'       Is the table in LPA region?\n         BO    SETTMEND            Yes. Do not attempt to change it.\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE1401     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE1401     Restore registers used by TESTAUTH.\n* -- >\n* -- >      Key Zero ---- Here's where we change the stuff.\nKZ       MODESET KEY=ZERO\n* -\n         TM    OFFFLAG,X'04'       Only displaying entr(ies)?\n         BNZ   ENDKZ               Yes. No Key 0 stuff done.\n         CLI   LPAFLAG,X'01'       Did the table come from LPALIB?\n         BE    ENDKZ               Yes. Don't try to alter table.\n         TM    NSCHFLG,X'01'       Are we doing the NS table?\n         BO    TENSLOT             Yes. Handle its special needs.\nEIGHSLOT DS    0H                  8-character tables.\n*-*                                Altering table header only\n         TM    OFFFLAG,X'08'       Alter table header?\n         BZ    GONOHDRA            No. Escape this section.\n         TM    TIDFLAG,X'03'       Dealing with PC or PP?\n         BNZ   GONOHDRA            Yes. Show nothing was changed.\n         L     R3,HDRADDR          Load header address\n         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.\n         B     ENDKZ               Get out of supervisor state.\nGONOHDRA DS    0H\n*-*\n*-*-*\n         TM    OFFFLAG,X'30'       Supplying length to LWA field?\n         BZ    GONZLWA1            No. Don't do this routine.\n         BAL   R9,MEASUR08         Measure it.\n         BAL   R9,WHERSIZE         Load size into proper place in LWA.\n         B     ENDKZ               Get out of supervisor state.\nGONZLWA1 DS    0H\n*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?\n         BZ    NOGSTEP1            No. Skip step.\n         BAL   R9,SETSTEPL         Set the STEPLIB flag on.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTEP1 DS    0H\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?\n         BZ    NOGSTOF1            No. Skip step.\n         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTOF1 DS    0H\n*-*-*-*-*-*\n         L     R3,OURSLOT          Address of slot to replace name in.\n         TM    OFFFLAG,X'01'       Replacing function here?\n         BZ    BLANKIT             No. Do blanking function.\n         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?\n         BE    ENDKZ               No. It is blank. Nothing to do.\n         MVC   0(8,R3),FSTNAME     Non-blank. Move in new pgm name.\n         B     ENDKZ               And get out.\nBLANKIT  DS    0H                  Blank an 8-character table entry\n         TM    OFFFLAG,X'02'       Blanking function here?\n         BZ    ENDKZ               No. Can't do anything.\n         L     R3,OURSLOT          Address of slot entry to blank\n         MVC   0(8,R3),BLANKS      Move the blanks in.\n         B     ENDKZ               And get out.\nTENSLOT  DS    0H                  10-character tables.\n         L     R3,OURSLOT          Address of slot to replace name in.\n         TM    OFFFLAG,X'01'       Replacing function here?\n         BZ    BLANKTEN            No. Do blanking function.\n         CLC   FSTNAME,BLANKS      Yes. Is new entry non-blank?\n         BE    ENDKZ               No. It is blank. Nothing to do.\n         MVC   0(2,R3),FSTCHALF    Put length of the new program name.\n         MVC   2(8,R3),FSTNAME     Put in the new program name.\n         B     ENDKZ               Get out of supervisor state.\nBLANKTEN DS    0H                  Blank the 10-character table entry\n*-*                                Altering table header only\n         TM    OFFFLAG,X'08'       Alter table header?\n         BZ    GONOHDRB            No. Escape this section.\n         TM    TIDFLAG,X'03'       Dealing with PC or PP?\n         BNZ   GONOHDRB            Yes. Show nothing was changed.\n         L     R3,HDRADDR          Load header address\n         MVC   8(8,R3),=C' PARMLIB'  Move in standard table header.\n         B     ENDKZ               Get out of supervisor state.\nGONOHDRB DS    0H\n*-*\n*-*-*\n         TM    OFFFLAG,X'30'       Supplying length to LWA field?\n         BZ    GONZLWA2            No. Don't do this routine.\n         BAL   R9,MEASUR10         Measure it.\n         BAL   R9,WHERSIZE         Load size into proper place in LWA.\n         B     ENDKZ               Get out of supervisor state.\nGONZLWA2 DS    0H\n*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'       Set STEPLIB flag in LWA for table?\n         BZ    NOGSTEP2            No. Skip step.\n         BAL   R9,SETSTEPL         Set the STEPLIB flag.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTEP2 DS    0H\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'       STEPLIB flag off in LWA for table?\n         BZ    NOGSTOF2            No. Skip step.\n         BAL   R9,NOTSTEPL         Set the STEPLIB flag off.\n         B     ENDKZ               Get out of supervisor state.\nNOGSTOF2 DS    0H\n*-*-*-*-*-*\n         TM    OFFFLAG,X'02'       Blanking function here?\n         BZ    ENDKZ               No. Can't do anything.\n         L     R3,OURSLOT          Address of slot entry to blank.\n         MVC   0(2,R3),=X'0000'    Move X'FFFF' to mark table end\n         MVC   2(8,R3),BLANKS      And move the blanks to pgm name slot\n         B     ENDKZ               Get out of supervisor state.\nENDKZ    DS    0H                  Get ready to get out of Key 0.\n* -\nNZ       MODESET KEY=NZERO\n* -- >      Back to ordinary life ----\nSETTMEND DS    0H                  Bypass Key 0 stuff.\n         L     R9,SAVER9G\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nERRORCOD DS    0H                  Give instructions if wrong things\n*                                   were entered, how to do it right.\n         ST    R9,SAVER9H\n         TM    LPADFLG,X'01'\n         BO    ERRORCOE\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11L,L'MESSA11L\n         APUT  MESSA11M,L'MESSA11M\n         APUT  MESSA11P,L'MESSA11P\n         APUT  MESSA11A,L'MESSA11A\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11C,L'MESSA11C\n         APUT  MESSA11D,L'MESSA11D\n         APUT  MESSA11Z,L'MESSA11Z\n         APUT  MESSA11Y,L'MESSA11Y\n         APUT  MESSA11X,L'MESSA11X\n         APUT  MESSA11F,L'MESSA11F\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSA11I,L'MESSA11I\n         APUT  MESSA11K,L'MESSA11K\n         APUT  MESSA11J,L'MESSA11J\n         APUT  MESSA11N,L'MESSA11N\n         APUT  MESSA11Q,L'MESSA11Q\n         APUT  MESSA11O,L'MESSA11O\n*        MVC   LINE,LINE-1\n*        APUT  LINE,30\nERRORCOE DS    0H\n         L     R9,SAVER9H\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM1 DS    0H                     Supply a slot number & pgm name.\n         ST    R9,SAVER9I\n         MVC   LINE,LINE-1\n         APUT  MESSA11G,L'MESSA11G\n         L     R9,SAVER9I\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM2 DS    0H                     Supply a program name to put in.\n         ST    R9,SAVER9J\n         MVC   LINE,LINE-1\n         APUT  MESSA11E,L'MESSA11E\n         L     R9,SAVER9J\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMISSPGM3 DS    0H                     Supply a slot number to Blank.\n         ST    R9,SAVER9N\n         MVC   LINE,LINE-1\n         APUT  MESSA12Q,L'MESSA12Q\n         L     R9,SAVER9N\n         BR    R9                     Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDISPTABL DS    0H                Scan thru the particular table....\n         ST    R9,SAVER9L          Save BAL register\n         ST    R3,SAVER3A          Save\n         ST    R4,SAVER4A             the\n         ST    R5,SAVER5A                work\n         ST    R2,SAVER2G                   registers.\n*-*\n         TM    OFFFLAG,X'08'     Just altering table header?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*\n*-*-*\n         TM    OFFFLAG,X'10'     Just supplying an LWA size?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*\n*-*-*-*\n         TM    OFFFLAG,X'20'     Zeroing out LWA size?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*\n*-*-*-*-*\n         TM    OFFFLAG,X'40'     Setting table to come from STEPLIB?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*-*\n*-*-*-*-*-*\n         TM    OFFFLAG,X'80'     Setting table not from STEPLIB?\n         BO    DISPTSKP          Yes. Don't display table at all.\n*-*-*-*-*-*\n         XR    R3,R3               Zero\n         XR    R5,R5                  work\n         XR    R2,R2                     registers.\nDISPTSTR DS    0H\n         L     R3,TABLSTRT         Load start address of table\n         L     R2,TABLENUM         Load number of entries in table\n         L     R5,TABLESIZ         Load size of each entry\n         LA    R4,1                Start slot number count at 1\n         ST    R4,SLOTNOW          Store slot number count away\n         ST    R3,OURSLOT          Initialize slot address.\n         CLC   SLOTBIN,=F'0'       If there's no slot num in parameter\n         BE    DISPTLUP            Then bypass error checking\n         C     R2,SLOTBIN          Compare table size to parm number\n         BNL   DISPTLUP            If parm number is LE, then display\nDISPTERR DS    0H                  Else error message and out.\n         MVC   LINE,LINE-1\n         MVC   LINE(22),=C'Slot number specified '\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'is bigger than table size '\n         L     R1,TABLENUM         Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         B     EOJ4\nDISPTLUP DS    0H                  Loop thru the table entries.\n         MVC   LINE,LINE-1\n         MVC   LINE(2),CODEPLAC    Move in table code.\n         MVC   LINE+3(19),=C'Table Entry Number:'\n         CVD   R4,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   TABENNUM(10),MASK10      Preserve printable slot number\n         ED    TABENNUM(10),CVDAREA+3\n         TM    NSCHFLG,X'01'       Is this the 10-byte NS table entry?\n         BO    DISPTBNS            Yes. Handle separately.\n         MVC   LINE+34(8),0(R3)\n         CLC   LINE+34(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+34(8),=C'*empty* '   Yes. Don't just show blanks.\n         OI    FLAGZ,X'01'         We found a blank table entry.\n         TM    FLAGZ,X'04'         Do we have table lengths?\n         BO    DISPTBLK            Yes, then use the table lengths\n* -------                           that we have.\n*                                  No table lengths here. So....\n         ST    R3,OURSLOT          Preserve empty slot address\n         ST    R4,SLOTNOW          Also preserve this slot number.\n         B     DISPTYES            And then stop on first blank.\nDISPTBNS DS    0H\n         HEX   LINE+34,2,0(R3)     Display size of this entry\n         MVC   LINE+40(8),2(R3)    Move in program name to slot\n         CLC   LINE+40(8),BLANKS   Is this a blank entry.\n         BNE   DISPTBLK            No.\n         MVC   LINE+40(8),=C'*empty* '   Yes. Don't just show blanks.\n         OI    FLAGZ,X'01'         We found a blank table entry.\n         TM    FLAGZ,X'04'         Do we have table lengths?\n         BO    DISPTBLK            Yes, then use the table lengths\n* -------                           that we have.\n*                                  No table lengths here. So....\n         ST    R3,OURSLOT          Preserve empty slot address\n         ST    R4,SLOTNOW          Also preserve this slot number.\n         B     DISPTYES            And then stop on first blank.\nDISPTBLK DS    0H                  Search each slot number.\n         CLC   SLOTBIN,=F'0'       Has a slot number been specified?\n         BE    DISPTYES            No. Just display all the slots.\n         CLC   SLOTBIN,SLOTNOW     Yes. Then are we at the one we want?\n         BNE   DISPTNOT            No. Just go further and search.\n         OI    FLAGZ,X'08'         We're at the desired slot.\n* ---  Save contents of the current slot which was found - below\n         ST    R3,OURSLOT          Preserve this slot's address\n         LR    R1,R5               Load table entry size\n         BCTR  R1,0                One less for execute\n         EX    R1,MOVESLOT         Save contents of slot for kicks\n         B     DISPTPEX               Branch past executed instruction\nMOVESLOT MVC   SLOTSAVE(*-*),0(R3)    EXECUTED\nDISPTPEX DS    0H\n* ---  Save contents of the current slot which was found - above\nDISPTYES DS    0H                  Print this slot entry\n         APUT  LINE,52\n         TM    FLAGZ,X'01'         Is this a blank table entry?\n         BO    DISPTEND            Yes, end the table search.\n         TM    FLAGZ,X'08'         Are we at the slot # we specified?\n         BO    DISPTEND            Yes. Stop the search.\nDISPTNOT DS    0H                  Bump to next slot and loop back.\n         C     R3,TABLEND          Compare to end from adding bytes.\n         BH    DISPTEND            Past it, then end the search.\n         LA    R3,0(R5,R3)         Bump to next slot\n         ST    R3,OURSLOT          Store its address - important....\n         LA    R4,1(,R4)           Bump count of slot number\n         ST    R4,SLOTNOW          Store new slot number away\n         ST    R2,SAVER2E\n         BCT   R2,DISPTLUP         And loop to examine the new slot.\n*\nDISPTEND DS    0H                  END OF TABLE SEARCH ROUTINE\n* - >                              Display message if desired slot is\n* - >                               past the end of the table.\n         CLC   SLOTBIN,SLOTNOW     Is the parm number past the end?\n         BNH   DISPTNOP            No. Don't report a problem.\n         L     R1,SLOTBIN          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+22(10),MASK10  Move in the mask\n         ED    LINE+22(10),CVDAREA+3 Make it pretty\n         MVC   LINE+34(26),=C'exceeds scanned table size'\n         L     R1,SLOTNOW          Display field\n         CVD   R1,CVDAREA          Convert count to printable\n         MVC   LINE+60(10),MASK10  Move in the mask\n         ED    LINE+60(10),CVDAREA+3 Make it pretty\n         APUT  LINE,72\n         OI    FLAGZ,X'02'         Flag a problem situation.\nDISPTNOP DS    0H\nDISPTSKP DS    0H\n* - >\n         L     R3,SAVER3A          Restore all the work registers.\n         L     R4,SAVER4A\n         L     R5,SAVER5A\n         L     R2,SAVER2G\n         L     R9,SAVER9L          Restore the BAL register.\n         BR    R9                  Return to caller\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETNUMES DS    0H                  Get the number after the table code\n         ST    R9,SAVER9M           + the action code. If it exists.\n         ST    R2,SAVER2F\nGETNUMST DS    0H                  Get rid of leading blanks\n         L     R1,CHARCONT         Point to start of character\n         CLI   0(R1),X'40'         Is it a blank?\n         BNE   GETNUMNZ            No. Get the entire name.\n         LA    R1,1(,R1)           Yes. Bump start place one up.\n         ST    R1,CHARCONT         And store the place away for now.\n         C     R5,=F'1'            End of cmd buffer one away?\n         BNH   EOJ4                Yes. Error.\n         S     R5,=F'1'            Subtract one from end count\n         B     GETNUMST            And loop to find first non-blank.\nGETNUMNZ DS    0H                  Got first non-blank. Get whole name.\n         LA    R2,5                BCT initial quantity - 5 chars.\n         LA    R8,0                Character count\n         L     R1,CHARCONT         Load starting place\n         LR    R4,R1               Initialize pointer\n         LA    R4,0(,R4)           to first character of program number\nGETNUMLU DS    0H                  Loop to get entire number\n         CLI   0(R4),X'40'         First blank?\n         BE    GETNUMGT            Yes, got whole number\n         CLI   0(R4),X'00'         First hex zeros?\n         BE    GETNUMGT            Yes, got whole number\n         CR    R8,R5               End of command buffer?\n         BNL   GETNUMGT            Yes. Got all we can get.\n* --                               Test EBCDIC number if numeric.\n         CLI   0(R4),X'F0'         Check character if numeric digit.\n         BL    NOTNUMER            Less than X'F0', not a number.\n         CLI   0(R4),X'F9'         More than X'F9'?\n         BH    NOTNUMER            Not a number.\n* --\n         LA    R8,1(,R8)           Bump character counter.\n         LA    R4,1(,R4)           Bump where we are.\n         BCT   R2,GETNUMLU         Loop back.\nGETNUMGT DS    0H                  Got the whole number - examine it.\n         ST    R8,SAVER8A\n         ST    R8,FSTNOUNT         Get halfword value of slot number\n         MVC   FSTNHALF(2),FSTNOUNT+2\n         L     R3,CHARCONT\n         BCTR  R8,0                One less for EXECUTE\n         MVC   FSTFIELD(8),BLANKS  5-char number plus 3 blanks\n         EX    R8,MOVFNUM          Get the number from the parm\n         EX    R8,PACK             Convert it to packed\n         CVB   R0,WORKA            Convert it to Binary\n         ST    R0,SLOTBIN          Store the value for later use\n         MVC   LINE,LINE-1\n         MVC   LINE(8),FSTFIELD    8-char number with blanks\n         MVC   LINE+13(19),=C'Entry slot number  '\n         APUT  LINE,32\n         LA    R8,1(,R8)           Restore number of chars after EX\n         ST    R8,CHARSIZE         Save this value off.\n         AR    R3,R8               Add it to R3 so we start past it.\n         ST    R3,CHARCONT         Store start value for next parm.\nGETNUMEN DS    0H\n         L     R2,SAVER2F\n         L     R9,SAVER9M\n         BR    R9\n* ----------------------------------------------------------------- *\n*      Measure \"8-byte entry\" loaded table.                         *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR08 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9O           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\nME08LOOP DS    0H\n*     Try (real hard) to detect the end of the table  -  below\n         MVC   SAVECHAR(1),0(R5)    Save first character\n         CLC   =C'        ',0(R5)   Is this table entry a blank?\n         BE    ME08BLNK             Yes. Reached virtual end of table\n         CLC   ZEROES8(8),0(R5)     Is this \"entry\" hex zeros?\n         BE    ME08NOBL             Yes. Reached possible junk storage\n         CLC   =C' ',0(R5)          Is first character blank?\n         BE    ME08NOBL             Yes, not a valid table entry.\n         TR    SAVECHAR,TRTPGMNM    Check first char if appropriate.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE2',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTE8',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTAP',0(R5)\n         BE    ME08NOBL\n         CLC   =C'IKJEFTNS',0(R5)\n         BE    ME08NOBL\n*     Try (real hard) to detect the end of the table  -  above\n         LA    R4,8(,R4)            Count next table entry\n         LA    R5,8(,R5)            Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         B     ME08LOOP             Loop back till perceived table end\nME08BLNK DS    0H\n         LA    R4,8(,R4)            Add length of blank entry\n         LA    R5,8(,R5)            Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME08NOBL DS    0H\n         STH   R4,ME08LENG          Store measured length of table.\n         ST    R5,ME08END           And record address of table end.\n         BAL   R9,MESBLK08          Measure more blanks after table.\n         TM    MEASFLG,X'01'        Been here already?\n         BO    ME08NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME08NOSH DS    0H\n         OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9O           Restore BAL register\n         BR    R9\nME08END  DS    F                    Store end-of-table address\nME08LENG DS    H                    Store table length\nBL08LENG DS    H                    Store length of blanks\nTO08LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMESBLK08 DS    0H                   See how many more blanks we have.\n         ST    R9,SAVER9Y           Save BAL register\n         ST    R5,SAVER5E           Save work register\n         L     R5,ME08END           Start at measured end of table.\nMESBLL08 DS    0H                   Loop\n         CLC   =C'        ',0(R5)   Is this entry a blank?\n         BNE   MESBLE08             Yes. Stop counting blanks.\n         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?\n         BH    MESBLE08             Yes. Don't find more blanks.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\n         LA    R5,8(,R5)            Bump to next entry.\n         B     MESBLL08             Loop until no blanks or max.\nMESBLE08 DS    0H\n         L     R1,BLNKCNT           Total count of found blanks\n         LTR   R1,R1\n         BZ    MESBLX08\n         BCTR  R1,0                 Really one less\nMESBLX08 DS    0H\n         SLL   R1,3                 Multiply by 8\n         STH   R1,BL08LENG          Length of blank entries\n         AH    R1,ME08LENG          Add length of non-blank entries\n         STH   R1,TO08LENG          Total length of both\n*>*----\n*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.\n*        MVC   LINE,LINE-1\n*        HEX   LINE,2,ME08LENG\n*        HEX   LINE+10,2,BL08LENG\n*        HEX   LINE+20,2,TO08LENG\n*        APUT  LINE,30\n*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.\n*>*----\n         L     R5,SAVER5E           Restore work register\n         L     R9,SAVER9Y           Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ----------------------------------------------------------------- *\n*      Measure \"10-byte entry\" loaded table.                        *\n* ----------------------------------------------------------------- *\n*      R5 contains the entry point of the table.                    *\n* ----------------------------------------------------------------- *\nMEASUR10 DS    0H                 R5 has beginning address of table.\n         ST    R9,SAVER9P           Save BAL register\n         ST    R5,SAVER5D           Save work register\n         ST    R4,SAVER4B           Save work register\n         L     R5,TABLADDR          Load start of table\n         XC    BLNKCNT,BLNKCNT      Zero the counters\n         XC    NTRYCNT,NTRYCNT\n         LA    R4,16                Count size of header\n         LA    R5,16(,R5)           Bump past header\nME10LOOP DS    0H\n         MVC   SAVECHAR(1),2(R5)    Save first character of pgm name\n         MVC   SAVECH08(1),9(R5)    Save last character of pgm name\n         CLC   BLKSTRNG(10),0(R5)   Full blank entry here?\n         BE    ME10BLNK             Yes. Count the blank entry.\n         CLC   ENDSTRNG(10),0(R5)   FFFF plus blank pgm name?\n         BE    ME10BLNK             Yes. Can still be considered blank.\n         CLC   =X'0000',0(R5)       Test-test-test-test-test\n         BE    ME10TEST             Test rest of \"entry\n         B     ME10REST             Not zeros, go on.\nME10TEST DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check for strange character.\n         CLI   SAVECHAR,X'02'       Is it strange?\n         BE    ME10NOBL             Yes. This is not a blank entry.\nME10REST DS    0H\n         CLC   =X'FFFF',0(R5)       Test for end string separately.\n         BNE   ME10TES2             Not. Not at virtual end of table\n         B     ME10NOBL             FFFF alone. Not a blank entry.\nME10TES2 DS    0H\n         TR    SAVECHAR,TRTPGMNM    Check first char not upcase alpha.\n         CLI   SAVECHAR,X'02'       Not. probably end of table.\n         BE    ME10NOBL\n         TR    SAVECH08,TRTPGMNM    Check last char not upcase alpha.\n         CLI   SAVECH08,X'02'       Not. probably end of table.\n         BE    ME10NOBL\n         LA    R4,10(,R4)           Count next table entry\n         LA    R5,10(,R5)           Bump to next entry\n         L     R1,NTRYCNT           Increment \"entry count\" counter\n         A     R1,=F'1'\n         ST    R1,NTRYCNT\n         B     ME10LOOP             Finished this entry, try for more.\nME10BLNK DS    0H\n         LA    R4,10(,R4)           Add length of blank entry\n         LA    R5,10(,R5)           Bump past blank entry.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\nME10NOBL DS    0H\n         STH   R4,ME10LENG          Store measured length of table.\n         ST    R5,ME10END           And record address of table end.\n         BAL   R9,MESBLK10          Measure more blanks after table.\n         TM    MEASFLG,X'01'        Been here already?\n         BO    ME10NOSH             Don't show count again.\n         BAL   R9,ENTRYDSP          Show number of entries.\nME10NOSH DS    0H\n         OI    MEASFLG,X'01'        Show we did this once.\n         L     R4,SAVER4B           Restore work register\n         L     R5,SAVER5D           Restore work register\n         L     R9,SAVER9P           Restore BAL register\n         BR    R9\nME10END  DS    F                    Store end-of-table address\nME10LENG DS    H                    Store table length\nBL10LENG DS    H                    Store length of blanks\nTO10LENG DS    H                    Store total, nonblank+blank\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nMESBLK10 DS    0H                   See how many more blanks we have.\n         ST    R9,SAVER9Y           Save BAL register\n         ST    R5,SAVER5E           Save work register\n         L     R5,ME10END           Start at measured end of table.\nMESBLL10 DS    0H                   Loop\n         CLC   =C'        ',2(R5)   Is this entry a blank entry?\n         BNE   MESBLE10             No. End of perceived blanks.\n         CLC   =X'0000',0(R5)       Length is zero?\n         BNE   MESBLE10             No. End of perceived blanks.\n         CLC   =X'FFFF',0(R5)       Real table end?\n         BE    MESBLE10             Yes. Consider it end of table.\n         CLC   BLNKCNT,MAXBLANK     Have we exceeded the maximum guess?\n         BH    MESBLE10             Yes. Don't find more blanks.\n         L     R1,BLNKCNT           Increment \"blank entry\" counter\n         A     R1,=F'1'\n         ST    R1,BLNKCNT\n         LA    R5,10(,R5)           Bump to next entry.\n         B     MESBLL10             Loop until no blanks or max.\nMESBLE10 DS    0H\n         L     R1,BLNKCNT           Number of blank entries\n         LTR   R1,R1\n         BZ    MESBLX10\n         BCTR  R1,0                 Really one less\nMESBLX10 DS    0H\n         STM   R2,R3,SAVER23        Save work registers\n         XR    R2,R2                Clear R2\n         XR    R3,R3                Clear R3\n         LR    R3,R1                Dump count into R2 for mult.\n         M     R2,=F'10'            Multiply by entry size\n         STH   R3,BL10LENG          Store length of blank entries\n         AH    R3,ME10LENG          Add length of non-blank entries\n         STH   R3,TO10LENG          Total length of both\n         LM    R2,R3,SAVER23        Restore work registers\n*>*----\n*        STM   R14,R1,SAVE1401      Save registers 14 thru 1.\n*        MVC   LINE,LINE-1\n*        HEX   LINE,2,ME10LENG\n*        HEX   LINE+10,2,BL10LENG\n*        HEX   LINE+20,2,TO10LENG\n*        HEX   LINE+30,4,BLNKCNT\n*        APUT  LINE,50\n*        LM    R14,R1,SAVE1401      Load registers 14 thru 1.\n*>*----\n         L     R5,SAVER5E           Restore work register\n         L     R9,SAVER9Y           Restore BAL register\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n* ------------------------------------------------------------------ *\nWHERSIZE DS    0H                   Point to size field to update.\n* ------------------------------------------------------------------ *\n*    This is executed after MEASUR08 or MEASUR10.                    *\n*    The idea here is to update the appropriate length field for     *\n*      the appropriate table, after having measured the size.        *\n*    This routine is also used for zeroing the table lengths.        *\n*    This routine is executed in supervisor state. Called from       *\n*      the SETTMODE routine.                                         *\n* ------------------------------------------------------------------ *\n*   ***  Note:  We unconditionally update the table lengths.  ***    *\n* ------------------------------------------------------------------ *\n         ST    R9,SAVER9Q           Save BAL register\n         ST    R2,SAVER2B           Save work registers\n         ST    R3,SAVER3C\n         TM    OFFFLAG,X'30'        Are we updating or zeroing lengths?\n         BZ    WHEREXIT             No. We have no business here.\n         L     R2,LWAADDR           Point to the Logon Work Area.\n         USING LWA,R2               Address its fields.\n*-----------------------------*\nWHERCHUZ DS    0H                   Which table are we dealing with?\n*-----------------------------*\n         TM    TIDFLAG,X'20'           E2?\n         BO    WHERE2\n         TM    TIDFLAG,X'10'           E8?\n         BO    WHERE8\n         TM    TIDFLAG,X'80'           AP?\n         BO    WHERAP\n         TM    TIDFLAG,X'40'           NS?\n         BO    WHERNS\n         B     WHEREXIT\n*-----------------------------*\nWHERE2   DS    0H                      Update E2 length\n         TM    SHBLFLG,X'01'\n         BO    WHERE2SH\n         MVC   LWATE2LN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERE2E\nWHERE2SH DS    0H\n         MVC   LWATE2LN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERE2E  DS    0H\n*-*-*-*\nWHERE2Z  DS    0H                      If zeroing, then zero E2 length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHE2NOZ1                No. Bypass this.\n         MVC   LWATE2LN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHE2NOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERE8   DS    0H                      Update E8 length\n         TM    SHBLFLG,X'01'\n         BO    WHERE8SH\n         MVC   LWATE8LN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERE8E\nWHERE8SH DS    0H\n         MVC   LWATE8LN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERE8E  DS    0H\n*-*-*-*\nWHERE8Z  DS    0H                      If zeroing, then zero E8 length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHE8NOZ1                No. Bypass this.\n         MVC   LWATE8LN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHE8NOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERAP   DS    0H                      Update AP length\n         TM    SHBLFLG,X'01'\n         BO    WHERAPSH\n         MVC   LWATAPLN(2),TO08LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO08LENG    Save length for message\n         B     WHERAPE\nWHERAPSH DS    0H\n         MVC   LWATAPLN(2),ME08LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME08LENG    Save length for message\nWHERAPE  DS    0H\n*-*-*-*\nWHERAPZ  DS    0H                      If zeroing, then zero AP length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHAPNOZ1                No. Bypass this.\n         MVC   LWATAPLN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHAPNOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHERNS   DS    0H                      Update NS length\n         TM    SHBLFLG,X'01'\n         BO    WHERNSSH\n         MVC   LWATNSLN(2),TO10LENG    Move length to LWA\n         MVC   SAVETNEW(2),TO10LENG    Save length for message\n         B     WHERNSE\nWHERNSSH DS    0H\n         MVC   LWATNSLN(2),ME10LENG    Move length to LWA\n         MVC   SAVETNEW(2),ME10LENG    Save length for message\nWHERNSE  DS    0H\n*-*-*-*\nWHERNSZ  DS    0H                      If zeroing, then zero NS length\n         TM    OFFFLAG,X'20'           Zeroing length?\n         BZ    WHNSNOZ1                No. Bypass this.\n         MVC   LWATNSLN(2),=X'0000'    Move length to LWA\n         MVC   SAVETNEW(2),=X'0000'    Save length for message\nWHNSNOZ1 DS    0H\n*-*-*-*\n         B     WHEREXIT                Finished, get out of routine.\n*-----------------------------*\nWHEREXIT DS    0H\n         L     R2,SAVER2B              Restore work registers\n         L     R3,SAVER3C\n         L     R9,SAVER9Q\n         BR    R9\n         DROP  R2\nTABLEID  DC    CL2' '\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSETSTEPL DS    0H                     Routine to turn on STEPLIB flags\n         ST    R9,SAVER9R\n         ST    R2,SAVER2C                Save work register\n         L     R2,LWAADDR\n         USING LWA,R2\nSETSWTBL DS    0H                     Check which table we're seeing\n         TM    TIDFLAG,X'03'          PC OR PP table?\n         BNZ   SETSTEPN               Say nothing changed.\n         TM    TIDFLAG,X'20'          E2?\n         BO    SETSDOE2\n         TM    TIDFLAG,X'10'          E8?\n         BO    SETSDOE8\n         TM    TIDFLAG,X'80'          AP?\n         BO    SETSDOAP\n         TM    TIDFLAG,X'40'          NS?\n         BO    SETSDONS\nSETSDOE2 DS    0H\n         OI    LWAPRMLB,LWATE2ST         STEPLIB flag on for E2\n         B     SETSWTBE\nSETSDOE8 DS    0H\n         OI    LWAPRMLB,LWATE8ST         STEPLIB flag on for E8\n         B     SETSWTBE\nSETSDOAP DS    0H\n         OI    LWAPRMLB,LWATAPST         STEPLIB flag on for AP\n         B     SETSWTBE\nSETSDONS DS    0H\n         OI    LWAPRMLB,LWATNSST         STEPLIB flag on for NS\n         B     SETSWTBE\nSETSWTBE DS    0H                        Print informative message\n         MVC   LINE,LINE-1\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\"\n         MVC   LINE,LINE-1\n         MVC   LINE(71),=C'Table    marked from STEPLIB so PARMLIB UPDA-\n               TE(xx) will not overlay it.'\n         MVC   LINE+6(2),TABLEID\n         APUT  LINE,71\n         B     SETSTEPE\nSETSTEPN DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     SETSTEPE\nSETSTEPE DS    0H\n         L     R2,SAVER2C             Restore work register\n         L     R9,SAVER9R\n         DROP  R2\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nNOTSTEPL DS    0H                    Routine to turn off STEPLIB flags\n         ST    R9,SAVER9K\n         ST    R2,SAVER2C             Save work register\n         L     R2,LWAADDR\n         USING LWA,R2\nNOTSWTBL DS    0H                     Check which table we're seeing\n         TM    TIDFLAG,X'03'          PC OR PP table?\n         BNZ   NOTSTEPN               Say nothing changed.\n         TM    TIDFLAG,X'20'          E2?\n         BO    NOTSDOE2\n         TM    TIDFLAG,X'10'          E8?\n         BO    NOTSDOE8\n         TM    TIDFLAG,X'80'          AP?\n         BO    NOTSDOAP\n         TM    TIDFLAG,X'40'          NS?\n         BO    NOTSDONS\nNOTSDOE2 DS    0H\n         NI    LWAPRMLB,X'FF'-LWATE2ST   STEPLIB flag off for E2\n         B     NOTSWTBE\nNOTSDOE8 DS    0H\n         NI    LWAPRMLB,X'FF'-LWATE8ST   STEPLIB flag off for E8\n         B     NOTSWTBE\nNOTSDOAP DS    0H\n         NI    LWAPRMLB,X'FF'-LWATAPST   STEPLIB flag off for AP\n         B     NOTSWTBE\nNOTSDONS DS    0H\n         NI    LWAPRMLB,X'FF'-LWATNSST   STEPLIB flag off for NS\n         B     NOTSWTBE\nNOTSWTBE DS    0H                     Print informative message.\n         MVC   LINE,LINE-1            Print a blank first.\n         APUT  LINE,30\n         APUT  MESSAGEC,L'MESSAGEC    Say \"before making changes\".\n         MVC   LINE,LINE-1\n         MVC   LINE(71),=C'Table    marked from not from STEPLIB. PARML-\n               IB UPDATE(xx) can overlay. '\n         MVC   LINE+6(2),TABLEID      Move table name into message.\n         APUT  LINE,71\n         B     NOTSTEPE\nNOTSTEPN DS    0H\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         APUT  MESSAG2D,L'MESSAG2D   Say nothing changed.\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n         B     NOTSTEPE\nNOTSTEPE DS    0H\n         L     R2,SAVER2C             Restore work register\n         L     R9,SAVER9K\n         BR    R9\n         DROP  R2\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETLPABD DS    0H                  Get storage boundary values for LPA\n         ST    R9,SAVER9S\nGETLSTRT DS    0H\n         ST    R5,SAVER5C          Prepare a bunch of work registers\n         ST    R4,SAVER4C          Prepare a bunch of work registers\n         L     R5,X'10'            Point to CVT.\n         USING CVT,R5              Tell Assembler.\n         L     R4,CVTSMEXT         Point to CVT Extension.\n         USING CVTVSTGX,R4         Tell Assembler.\n         MVC   SAVMLPAS,CVTMLPAS   MLPA start\n         MVC   SAVMLPAE,CVTMLPAE   MLPA end\n         MVC   SAVFLPAS,CVTFLPAS   FLPA start\n         MVC   SAVFLPAE,CVTFLPAE   FLPA end\n         MVC   SAVPLPAS,CVTPLPAS   PLPA start\n         MVC   SAVPLPAE,CVTPLPAE   PLPA end\n         MVC   SAVEMLPS,CVTEMLPS   E-MLPA start\n         MVC   SAVEMLPE,CVTEMLPE   E-MLPA end\n         MVC   SAVEFLPS,CVTEFLPS   E-FLPA start\n         MVC   SAVEFLPE,CVTEFLPE   E-FLPA end\n         MVC   SAVEPLPS,CVTEPLPS   E-PLPA start\n         MVC   SAVEPLPE,CVTEPLPE   E-PLPA end\n         L     R5,SAVER5C          Restore the work registers\n         L     R4,SAVER4C          Restore the work registers\n         L     R9,SAVER9S\n         DROP  R5,R4\n         BR    R9                  Return\n*                                  Constants needed here.\nSAVMLPAS DC    A(0)\nSAVMLPAE DC    A(0)\nSAVFLPAS DC    A(0)\nSAVFLPAE DC    A(0)\nSAVPLPAS DC    A(0)\nSAVPLPAE DC    A(0)\nSAVEMLPS DC    A(0)\nSAVEMLPE DC    A(0)\nSAVEFLPS DC    A(0)\nSAVEFLPE DC    A(0)\nSAVEPLPS DC    A(0)\nSAVEPLPE DC    A(0)\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nGETLPRNT DS    0H         Routine to Print LPA Range - action code X\n         ST    R9,SAVER9T\n         TM    LPADFLG,X'01'         Code wasn't X. Don't print.\n         BZ    GETLPRTE              Just restore R9 and go on.\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),=C' --- LPA RANGE DISPLAY ---  '\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'MLPA'\n         HEX   LINE+10,4,SAVMLPAS    MLPA range\n         HEX   LINE+20,4,SAVMLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'FLPA'\n         HEX   LINE+10,4,SAVFLPAS    FLPA range\n         HEX   LINE+20,4,SAVFLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(4),=C'PLPA'      PLPA range\n         HEX   LINE+10,4,SAVPLPAS\n         HEX   LINE+20,4,SAVPLPAE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-MLPA'    E-MLPA range\n         HEX   LINE+10,4,SAVEMLPS\n         HEX   LINE+20,4,SAVEMLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-FLPA'    E-FLPA range\n         HEX   LINE+10,4,SAVEFLPS\n         HEX   LINE+20,4,SAVEFLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(6),=C'E-PLPA'    E-PLPA range\n         HEX   LINE+10,4,SAVEPLPS\n         HEX   LINE+20,4,SAVEPLPE\n         APUT  LINE,35\n         MVC   LINE,LINE-1\n         MVC   LINE(28),DASHES28     Print row of dashes at the bottom\n         APUT  LINE,35\nGETLPRTE DS    0H\n         L     R9,SAVER9T\n         BR    R9\nDASHES28 DC    28C'-'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nPRTABLHD DS    0H\n         ST    R9,SAVER9U\n*                                 Print out table header\n         STM   R14,R1,SAVE1401    Now save registers 14 thru 1.\n         L     R1,TABLADDR        Load table start address.\n         MVC   DISPHDR(16),0(R1)  Move header info to display area.\n         ST    R1,HDRADDR         Store header address for alter\n         MVC   LINE,LINE-1        Clear line\n         MVC   LINE(15),=C'Table Header:  '  Move in title.\n         MVC   LINE+15(16),DISPHDR           Move in title info.\n         APUT  LINE,35\n         MVC   LINE,LINE-1        Clear line for next time\n         LM    R14,R1,SAVE1401    Restore  registers 14 thru 1.\n*-*\n         L     R9,SAVER9U\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**   When this routine is invoked, TABLADDR points to the start     **\n**    of the real table.                                            **\n** ---------------------------------------------------------------- **\nTESTLPA  DS    0H             Test if an address is in any LPA range\n         ST    R9,SAVER9W\n*-*-*->>                          Print the address out so we can see.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         MVC   LINE(16),=C'Table address:  '\n         HEX   LINE+20,4,TABLADDR     Display address in Hex\n         APUT  LINE,35\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\nTESLSTRT DS    0H\n         CLC   TABLADDR,SAVMLPAS      Smaller than MLPA start?\n         BL    TESLTST1\n         CLC   TABLADDR,SAVMLPAE      Larger than MLPA end?\n         BH    TESLTST1\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST1 DS    0H\n         CLC   TABLADDR,SAVFLPAS      Smaller than FLPA start?\n         BL    TESLTST2\n         CLC   TABLADDR,SAVFLPAE      Larger than FLPA end?\n         BH    TESLTST2\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST2 DS    0H\n         CLC   TABLADDR,SAVPLPAS      Smaller than PLPA start?\n         BL    TESLTST3\n         CLC   TABLADDR,SAVPLPAE      Larger than PLPA end?\n         BH    TESLTST3\n         OI    LPAFLAG,X'01'\n         B     TESLMSG                In between, flag it and exit.\nTESLTST3 DS    0H\n         CLC   TABLADDR,SAVEMLPS      Smaller than E-MLPA start?\n         BL    TESLTST4\n         CLC   TABLADDR,SAVEMLPE      Larger than E-MLPA end?\n         BH    TESLTST4\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST4 DS    0H\n         CLC   TABLADDR,SAVEFLPS      Smaller than E-FLPA start?\n         BL    TESLTST5\n         CLC   TABLADDR,SAVEFLPE      Larger than E-FLPA end?\n         BH    TESLTST5\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLTST5 DS    0H\n         CLC   TABLADDR,SAVEPLPS      Smaller than E-PLPA start?\n         BL    TESLMSG\n         CLC   TABLADDR,SAVEPLPE      Larger than E-PLPA end?\n         BH    TESLMSG\n         OI    LPAFLAG,X'01'          In between, flag it and exit.\n         B     TESLMSG\nTESLMSG  DS    0H\n*-*-*->>                          Message the result of the LPA test.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1        Clear line area.\n         TM    LPAFLAG,X'01'      Is the address within LPA?\n         BZ    TESLMSGA           No. Say not.\n         MVC   LINE(40),=C'Table address lies within an LPA region.'\n         B     TESLMSGP           Go send the message.\nTESLMSGA DS    0H\n         MVC   LINE(42),=C'Table address is not within an LPA region.'\nTESLMSGP DS    0H                 Send the message.\n         APUT  LINE,45\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\n*-*-*->>\nTESLEND  DS    0H\n         L     R9,SAVER9W\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nCHANGEDL DS    0H                     Say table was in LPALIB so that\n*                                       therefore nothing was changed.\n         ST    R9,SAVER9V\n         TM    LPAFLAG,X'01'          Table was loaded in the LPALIB\n*                                      storage range. Can't change it.\n         BZ    CHANGEEN\n         APUT  MESSAG2E,L'MESSAG2E    Say that table was from LPALIB.\n         APUT  MESSAG2D,L'MESSAG2D    Say that nothing was changed.\nCHANGEEN DS    0H\n         L     R9,SAVER9V\n         BR    R9\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nENTRYDSP DS    0H\n         ST    R9,SAVER9X\n         TM    TIDFLAG,X'03'      PC or PP table?\n         BNZ   ENTRYEXI           Yes. No display here.\n         STM   R14,R1,SAVE1401    Save registers 14 thru 1.\n         MVC   LINE,LINE-1\n         L     R1,NTRYCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Non-blank table entries:'\n         MVC   LINE+35(25),=C'(these are the ones used)'\n         APUT  LINE,65\n         MVC   LINE,LINE-1\n         L     R1,BLNKCNT\n         CVD   R1,CVDAREA\n         MVC   LINE+22(10),MASK10\n         ED    LINE+22(10),CVDAREA+3\n         MVC   LINE(24),=C'Perceived blank entries:'\n         MVC   LINE+35(25),=C'(potential for expansion)'\n         APUT  LINE,65\n         LM    R14,R1,SAVE1401    Restore registers 14 thru 1.\nENTRYEXI DS    0H\n         L     R9,SAVER9X\n         BR    R9\nENTRYDEN DS    0H\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n** ---------------------------------------------------------------- **\n**   Here are the rest of the constants for the program.            **\n** ---------------------------------------------------------------- **\nBLKSTRNG DC    XL10'00004040404040404040'\nENDSTRNG DC    XL10'FFFF4040404040404040'\nZEROES8  DC    X'0000000000000000'\nMASK10   DC    XL10'40202020202020202120'\n         DC    C' '\nBLANKS   DC    C'                                            '\nMESSAGET DC    C'TSUB Command - Display/Change USERID Auth Table Entry -\n               - xxxxxxxx'\nMESSAGEU DC    C'---- -------   ------- ------ ------ ---- ----- ----- -\n                 --------'\nMESSAGEC DC    C'  **--------   AFTER MAKING CHANGES   -------**'\nMESSAGED DC    C'  **--- STATE BEFORE MAKING TABLE CHANGES ---**'\nMESSAG1A DC    C'Table XX pointed to by the LWA has length available. H+\n               ex xxxx '\nMESSAG1B DC    C'Table XX pointed to by the LWA has no lengths. Blanks +\n               will delimit.'\nMESSAG1C DC    C'Table XX pointed to by the LWA came from an APF STEPLI+\n               B.'\nMESSAG1D DC    C'Table XX pointed to by the LWA did not come from an AP+\n               F STEPLIB.'\nMESSAG2C DC    C'Command was not invoked APF authorized.'\nMESSAG2D DC    C'Nothing was changed.  '\nMESSAG2E DC    C'Table is in LPALIB, and we will not attempt to alter i+\n               t.'\nMESSAG3A DC    C'Slot      in XX table has been changed to         .'\nMESSAG3B DC    C'Slot      in XX table has been blanked.            '\nMESSAG3C DC    C'                                                      +\n                  '\nMESSAG3D DC    C'Last 8 bytes of table header altered to \" PARMLIB\". '\nMESSAG3E DC    C'LWA size for table    has been changed from Hex xxxx t+\n               o Hex xxxx.'\nMESSAG3F DC    C'LWA size for table    is now Hex xxxx. '\nMESSA11A DC    C'  Supply a table code TT, followed by an action code A-\n               .'\nMESSA11B DC    C'Supply a program name, as the next parameter.   '\nMESSA11C DC    C'Valid table  codes are:  E2, E8, AP, NS, PC, PP. '\nMESSA11D DC    C'Valid action codes are:  R - replace, B - blank, D - d-\n               isplay,'\nMESSA11Z DC    C'  H - header, L - supply full table length, Z - zero t-\n               able length,'\nMESSA11Y DC    C'  S - mark table from STEPLIB, P - mark table from PAR-\n               MLIB,'\nMESSA11X DC    C'  X - display LPA storage ranges, M - supply minimum t-\n               able length.'\nMESSA11E DC    C'Please supply a program name.  '\nMESSA11F DC    C'Full command is in the form TTA, TT=table code, A=acti-\n               on code.'\nMESSA11G DC   C'Please supply slot number to change, and program name.'\nMESSA11I DC    C'If D (display) is followed by a slot number, only that-\n                slot is shown.'\nMESSA11J DC    C'R (replace) requires a slot number, followed by a prog-\n               ram name.'\nMESSA11K DC    C'If D is not followed by a number, then the entire tabl-\n               e is displayed.'\nMESSA11L DC    C'  Instructions to use this program:                  '\nMESSA11M DC    C'  ------------ -- --- ---- -------                   '\nMESSA11N DC    C'B (blank) blanks the slot number given. Higher slots a-\n               re invalidated.'\nMESSA11O DC    C'D does not need APF authorization. All other codes req-\n               uire it.'\nMESSA11P DC    C'TSUB TTA nnn pgmname (nnn optional for D, both require-\n               d for R)'\nMESSA11Q DC    C'Codes: H,L,M,Z,P,S,X do not require extra parameters.'\nMESSA12Q DC    C'Please supply slot number to blank out. BE CAREFUL !'\nMESSAGR0 DC    C'Return Code = 0 '\nMESSAGR4 DC    C'Return Code = 4 '\nMESSAGR8 DC    C'Return Code = 8 '\nMESSAGRC DC    C'Return Code = 12'\nMESSDIAG DC    C'                                            '\nMESSAGEP DC    C'No Parmlib-supplied XX table was found in storage. '\nMESSAGEN DC    C'Supplied character        was not numeric. '\n         SPACE 3\n         LTORG\n         SPACE 3\nCVDAREA  DS    D                   For CVD instruction\nSAVEAPUT DS    2D\nSAVER23  DS    2F                  Save pair of regs R2, R3\nSAVER1A  DS    F                   Save R1 here\nSAVER1B  DS    F                   Save R1 here\nSAVER2A  DS    F                   Save R2 here\nSAVER2B  DS    F                   Save R2 here\nSAVER2C  DS    F                   Save R2 here\nSAVER2D  DS    F                   Save R2 here\nSAVER2E  DS    F                   Save R2 here\nSAVER2F  DS    F                   Save R2 here\nSAVER2G  DS    F                   Save R2 here\nSAVER3A  DS    F                   Save R3 here\nSAVER3B  DS    F                   Save R3 here\nSAVER3C  DS    F                   Save R3 here\nSAVER4A  DS    F                   Save R4 here\nSAVER4B  DS    F                   Save R4 here\nSAVER4C  DS    F                   Save R4 here\nSAVER5A  DS    F                   Save R5 here\nSAVER5B  DS    F                   Save R5 here\nSAVER5C  DS    F                   Save R5 here\nSAVER5D  DS    F                   Save R5 here\nSAVER5E  DS    F                   Save R5 here\nSAVER5F  DS    F                   Save R5 here\nSAVER8A  DS    F                   Save R8 here\nSAVER9A  DS    F                   BAL Register Save Area\nSAVER9B  DS    F                   BAL Register Save Area\nSAVER9C  DS    F                   BAL Register Save Area\nSAVER9D  DS    F                   BAL Register Save Area\nSAVER9E  DS    F                   BAL Register Save Area\nSAVER9F  DS    F                   BAL Register Save Area\nSAVER9G  DS    F                   BAL Register Save Area\nSAVER9H  DS    F                   BAL Register Save Area\nSAVER9I  DS    F                   BAL Register Save Area\nSAVER9J  DS    F                   BAL Register Save Area\nSAVER9K  DS    F                   BAL Register Save Area\nSAVER9L  DS    F                   BAL Register Save Area\nSAVER9M  DS    F                   BAL Register Save Area\nSAVER9N  DS    F                   BAL Register Save Area\nSAVER9O  DS    F                   BAL Register Save Area\nSAVER9P  DS    F                   BAL Register Save Area\nSAVER9Q  DS    F                   BAL Register Save Area\nSAVER9R  DS    F                   BAL Register Save Area\nSAVER9S  DS    F                   BAL Register Save Area\nSAVER9T  DS    F                   BAL Register Save Area\nSAVER9U  DS    F                   BAL Register Save Area\nSAVER9V  DS    F                   BAL Register Save Area\nSAVER9W  DS    F                   BAL Register Save Area\nSAVER9X  DS    F                   BAL Register Save Area\nSAVER9Y  DS    F                   BAL Register Save Area\nCMBUFEND DS    F                   Number of bytes to end of cmd buff\nSAVLSLOT DS    F                   Save place where Key 0 will change\nSLOTBIN  DS    F                   Fullword binary value of slot number\nSLOTNOW  DS    F                   Slot number being searched\nDISPREG  DS    F                   DISPLAY\nCMBUFAD  DS    F                   Command Buffer address\nCHARSTRT DS    F                   Address of first parm character\nCHARCONT DS    F                   Address of next parm character\nCHARSIZE DS    F\nOURSLOT  DS    F                   Address of current slot searched\nFOUNSLOT DS    F\nTABLEND  DS    F                   Estimated or real end addr of table\n* --- >\nTABLSTRT DS    F                   Start address of table\nTABLADDR DS    F                   Store address of current table\nTABLENUM DS    F                   Number of entries in table\nTABLESIZ DS    F                   Size of a table entry\n* --- >\nBLNKCNT  DS    F\nNTRYCNT  DS    F\n* --- >\nOFFSETSV DS    F\nWORKA    DC    D'0'                Work area for CVB\nNUMVSTRT DC    X'00'               Character count of first parm\nNUMCOUTL DC    X'00'               Entered first parm length\nCODEPLAC DS    CL2                 Store entered table code here\nPAD01    DS    CL4                 Filler\nSAVECHAR DS    X\nSAVECH08 DS    X\nMEASFLG  DS    X\nSHBLFLG  DS    X\nOFFFLAG  DS    X                   Are we blanking the last entry?\nOLDFLAG  DS    X                   Old system detected if X'01'\nTIDFLAG  DS    X                   Which table are we handling.\nLPAFLAG  DS    X                   Is the table address in the LPA?\nLPADFLG  DS    X                   Do LPA range display.\nPLATFLG  DS    X                   FCVE or PPVE exist.\nHAVLFLG  DS    X                   Have length of table available\nNSCHFLG  DS    X                   Dealing the 10-byte NS table?\nLWAPFLG  DS    X                   LWAPRMLB flag copied into program\n*              X'80'               LWATAPST TAP came from STEPLIB\n*              X'40'               LWATNSST TNS came from STEPLIB\n*              X'20'               LWATE2ST TE2 came from STEPLIB\n*              X'10'               LWATE8ST TE8 came from STEPLIB\nLWAMFLG  DS    X                   Which tables have a size in the LWA.\n*              X'80'               AP has a size in the LWA.\n*              X'40'               NS has a size in the LWA.\n*              X'20'               E2 has a size in the LWA.\n*              X'10'               E8 has a size in the LWA.\nFLAGZ    DS    X\n*              X'01'               Found a blank entry. End table srch.\n*              X'02'               Parm number is past the end of table\n*              X'04'               Table lengths have been supplied.\nPAD02    DS    CL4                 Filler\nFSTNAME  DC    CL8' '              Entered program name for \"Replace\"\nFSTCOUNT DS    F                   Number of characters in FSTNAME\nFSTCHALF DC    H'0'\nPAD03    DS    CL4                 Filler\nTABENNUM DC    CL10' '\nPAD03A   DS    CL4                 Filler\nFSTFIELD DS    0CL8\nFSTNUME  DC    CL5' '\nFSTNUPAD DC    CL3' '\nFSTNOUNT DS    F                   Number of characters in FSTNAME\nFSTNHALF DC    H'0'\nPAD04    DS    CL4                 Filler\nSLOTSAVE DS    CL10\nPAD05    DS    CL4                 Filler\nSNDNAME  DC    CL8' '\nSNDCOUNT DS    F                   Number of characters in SNDNAME\nSNDCHALF DC    H'0'\nTABCODE  DC    CL8' '              Original OUTLIM character\n         DS    CL7                 PADDING\nDISPHDR  DS    CL16                Table header display area\n         DS    CL1\nHDRADDR  DS    F                   Address of table header\nCMDBCOPY DS    CL252\n         DS    CL128               PADDING\n         DS    0F                  ALIGN ON FULLWORD\nLINEB    DS    C                   LINE-1\nLINE     DS    CL137               Output line area\nLINET    EQU   LINE+7              Indented line\nLINAB    DS    C                   LINE-1\nLINA     DS    CL137               Output line area\nLINAT    EQU   LINA+7              Indented line\nTRTPGMNM DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'40020202020202020202020202020202'\n         DC    X'02020202020202020202025B02020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02020202020202020202027B7C020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         DC    X'02C1C2C3C4C5C6C7C8C9020202020202'\n         DC    X'02D1D2D3D4D5D6D7D8D9020202020202'\n         DC    X'0202E2E3E4E5E6E7E8E9020202020202'\n         DC    X'02020202020202020202020202020202'\n         SPACE\n         IKJCPPL\n         IKJPSCB\n         CVT      LIST=YES,DSECT=YES\n         IKJTSVT\n         IKJEFLWA\n         END\nEPUTL    TITLE 'PUTLINE FOR FEWER THAN 83 ARGUMENTS IN THE KEY OF C MAJ&\n               OR'\nEPUTL    CSECT                                              *HMD 10/85*\n         LCLB  &XA                                          *HMD 10/85*\n&XA      SETB  1                  SET TO ZERO ON NON/XA     *HMD 10/85*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  MODULE NAME  . . . . EPUTL\n*\n*  ALIASES  . . . . . . NONE\n*\n*  DATE WRITTEN . . . . 06/85\n*  UPDATED      . . . . 04/88                                  HD APR88\n*\n*  AUTHOR . . . . . . . JIM ELSWORTH\n*  UPDATOR  . . . . . . HOWARD M. DEAN                         HD APR88\n*\n*  ENVIRONMENT  . . . . TSO COMMAND-PROCESSOR\n*\n*  PURPOSE:\n*    ALLOW AN EASY INTERFACE TO PUTLINE ROUTINE\n*\n*\n*  DESCRIPTION:\n*    BUILDS PUTLINE PARAMETER LIST BASED ON INPUT ARGUMENTS.\n*    ISSUES SINGLE LINE PUTLINE.\n*\n*\n*  ATTRIBUTES:\n*    REENTRANT\n*\n*  FEATURES:\n*    WILL RUN UNDER BATCH TMP SINCE PUTLINE USED INSTEAD OF TPUT.\n*\n*  CALLED MODULES:\n*    PUTLINE\n*\n*  ASSUMPTIONS:\n*    CALLED BY A TSO-CP THAT IS OBSERVING STANDARD LINKAGE\n*\n*  ABENDS:\n*    POSSIBLE 0CX IF BAD ARGUEMNTS\n*\n*  CAVEATS:\n*    UNPREDICTABLE RESULTS IF FIRST PROGRAM RUNNING UNDER THIS TCB\n*    DID NOT SAVE (14,12) BEFOR R1 WAS MODIFIED.\n*\n*\n*  INPUT ARGUMENTS:\n*    1)  R1 : ADDRESS OF MESSAGE TEXT\n*    2)  R0 : LENGTH OF MESSAGE TEXT\n*    3) R13 : STANDARD OS SAVE AREA\n*    4) R14 : RETURN ADDRESS\n*    5) R15 : ENTRY ADDRESS\n*\n*               ( CONTINUED ... )\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*\n*  OUTPUT ARGUMENT: RETURN CODE FROM PUTLINE OR\n*\nRCBA     EQU   100                 BAD MESSAGE ADDRESS\nRCBL     EQU   104                 MESSAGE LENGTH <1 OR >MAXMSG\n*\nMAXMSG   EQU   128                 MAXIMUM MESSAGE LENGTH\n*\n*\n*  REGISTERS USED:\n*\nR0       EQU   0                   MESSAGE LENGTH AT ENTRY\nR1       EQU   1                   MESSAGE ADDRESS AT ENTRY\nR2       EQU   2                   WORK\nRMA      EQU   4                   @MESSAGE TEXT\nRML      EQU   5                   MESSAGE LENGTH\nRUPT     EQU   6                   @UPT (USER PROFILE TABLE)\nRECT     EQU   7                   @ECT\nR12      EQU   12                  CSECT BASE\nR13      EQU   13                  @SAVE AREA AND DYNAMIC WORK AREA\nR14      EQU   14                  WORK/LINKAGE\nR15      EQU   15                  WORK/LINKAGE\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         EJECT\n         IKJCPPL\n         EJECT\n         IKJTCB   LIST=YES                                  *HMD 10/85*\n         EJECT                                              *HMD 10/85*\n         CVT      DSECT=YES,LIST=YES                        *HMD 10/85*\n         EJECT\n         IHAPSA   LIST=YES                                     HD APR88\n         EJECT                                                 HD APR88\nPUTLDS   DSECT\n         DS    18F                      OS SAVE AREA\nPUTAAA   EQU   *\nPUTECB   DS    F                        ECB\nPUTIOPL  DS    4F                       IOPLADS\nPUTBLOK  PUTLINE MF=L\nPUTLEN   DS    H                        LENGTH\nPUTZZZ   DS    H                        RESERVED\nPUTMSG   DS    (MAXMSG)C                MESSAGE TEXT AREA\nPUTSIZE  EQU   *-PUTLDS                 SIZE OF PUTLINE PARMS\n         EJECT\n***********************************************************************\n*  SET UP LINKAGE\n***********************************************************************\n         SPACE 1\nEPUTL    CSECT\n         AIF  (NOT &XA).X001                                *HMD 10/85*\nEPUTL    AMODE 31\n.X001    ANOP                                               *HMD 10/85*\n         STM   14,12,12(13)       SAVE CALLERS REGS\n         LR    R12,R15            COPY EPA\n         USING EPUTL,R12          ADDRESSABILITY\n         AIF   (NOT &XA).X002                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE,        STANDARD OS SA PLUS ANY EXTRA        &\n               LOC=RES            RELATIVE TO 16MB LINE\n         AGO   .X003                                        *HMD 10/85*\n.X002    ANOP                                               *HMD 10/85*\n         GETMAIN RU,              LV=LENGTH                            &\n               LV=PUTSIZE         STANDARD OS SA PLUS ANY EXTRA\n.X003    ANOP                                               *HMD 10/85*\n         ST    1,8(13)            OUR SAVE AREA POINTER\n         ST    13,4(1)            POINTER TO CALLERS SAVE AREA\n         LR    13,1               @OUR SAVE AREA\n         USING PUTLDS,R13         MAP SA AND WORK AREA\n         L     R14,4(R13)         POINT TO CALLERS RSA\n         LM    R0,R1,20(R14)      RESTORE REGS CHANGED BY GETMAIN\n         SPACE 2\n***********************************************************************\n*  UNLOAD ARGUMENTS AND VALIDATE WHERE POSSIBLE\n***********************************************************************\n         SPACE 1\n         LA    R15,RCBA                 ASSUME BAD ADDRESS\n         LTR   RMA,R1                   MESSAGE ADDRESS\n         BNP   RETURN                   GOOD ASSUMPTION\n         LA    R15,RCBL                 ASSUME BAD LENGTH\n         LTR   RML,R0                   POSITIVE?\n         BNP   RETURN                   -NO\n         C     RML,=A(MAXMSG)           MORE THAN MAX?\n         BH    RETURN                   -YES\n         SPACE 2\n***********************************************************************\n*  BUILD PARAMETER LIST\n***********************************************************************\n         SPACE 1\n         LA    R15,4(RML)               MESSAGE LENGTH\n         STH   R15,PUTLEN                 PLUS HEADER\n         XC    PUTZZZ,PUTZZZ            CLEAR 2ND HWORD OF RDW\n         BCTR  RML,0                    REDUCE FOR MOVE\n         EX    RML,PUTMOVE\n         EJECT\n***********************************************************************\n*  DIG UP ADDRESS OF UPT AND ECT\n***********************************************************************\n         SPACE 1\n         L     R2,PSATOLD-PSA           @TCB                   HD APR88\n         L     R2,TCBFSA-TCB(R2)        @1ST PROBLEM PGM SAVE AREA\n         L     R2,24(R2)                REG1 THAT WAS PASSED TO CP\n         USING CPPL,R2                  MAP CPPL\n         L     RUPT,CPPLUPT             @UPT\n         L     RECT,CPPLECT             @ECT\n         SPACE 2\n***********************************************************************\n*  ISSUE PUTLINE CALL\n***********************************************************************\n         SPACE 1\n         XC    PUTECB,PUTECB            CLEAR ECB\n         XC    PUTBLOK(12),PUTBLOK      CLEAR PARM BLOCK       HD APR88\n         PUTLINE PARM=PUTBLOK,          PARAMETER BLOCK                &\n               UPT=(RUPT),              @UPT                           &\n               ECT=(RECT),              @ECT                           &\n               ECB=PUTECB,              @ECB                           &\n               OUTPUT=(PUTLEN,TERM,SINGLE,DATA),                       &\n               MF=(E,PUTIOPL)\n         EJECT\n***********************************************************************\n*  RETURN TO CALLER\n***********************************************************************\n         SPACE 1\nRETURN   EQU   *\n         LR    2,R13                    @OUR SAVE AREA\n         LR    3,R15                    SAVE RETURN CODE\n         L     R13,4(R13)               @CALLERS SAVE AREA\n         FREEMAIN RU,LV=PUTSIZE,A=(R2),SP=0\n         LR    R15,3                    RESTORE RC\n         RETURN (14,12),RC=(15)         RESTORE CALLERS REGS\n         SPACE 5\n***********************************************************************\n*  CONSTANTS AND NON-REENTRANT WORK AREAS\n***********************************************************************\n         SPACE 1\nPUTMOVE  MVC   PUTMSG(*-*),0(RMA)       MOVE MESSAGE TO BUFFER\n         SPACE 2\n         LTORG\n         SPACE 2\n         END   EPUTL\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSVT8": {"ttr": 16389, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "TSVT8    TITLE 'SWITCH ON/OFF 8-CHARACTER USERID SUPPORT z/OS 2.3'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*   GENERAL 8-CHARACTER USERID SUPPORT IS CONTROLLED BY THE         *\n*    SWITCH IN THE TSVT (TSO VECTOR TABLE) PLUS BYTE +6.            *\n*                                                                   *\n*   THIS PROGRAM IS IN THE PUBLIC DOMAIN.                           *\n*                                                                   *\n*   This support was first deployed in z/OS 2.3.                    *\n*                                                                   *\n*   IN PREVIOUS SYSTEMS, THIS BYTE WAS X'00'  (Reserved)            *\n*   IN CURRENT SYSTEMS, IF THE BYTE IS X'07' THEN 8-CHAR USERID     *\n*     SUPPORT IS OFF.                                               *\n*   IN CURRENT SYSTEMS, IF THE BYTE IS X'08' THEN 8-CHAR USERID     *\n*     SUPPORT IS ON.                                                *\n*                                                                   *\n*   EVIDENTLY, TPVT+X'4D' WAS ALTERED FROM A RESERVED BYTE TO       *\n*     HAVE TO BE IN SYNC WITH TSVT+6.  CHANGES HAVE BEEN MADE       *\n*     TO THIS PROGRAM TO ALTER BOTH OF THEM AT THE SAME TIME.       *\n*     IT SEEMS THAT TSVT+6 IS THE MAIN SWITCH.  IF TPVT+4D          *\n*     IS DIFFERENT, IT DOESN'T SEEM TO TURN OFF OR ON SUPPORT.      *\n*     (8-CHARACTER USERID SUPPORT IN Z/OS 2.3 AND HIGHER.)          *\n*                                                                   *\n*   The TSO developer told me the following:                        *\n*                                                                   *\n*   \"The two values should be in sync.  The TPVT denotes the        *\n*   current parmlib setting in place, and the TSVT is the           *\n*   current system setting.  The TSVT is also used in synching      *\n*   multiple systems in a Plex.\"                                    *\n*                                                                   *\n*   He also told me the following information, regarding z/OS 2.4.  *\n*                                                                   *\n*   \"The processing has not changed between releases.  There is     *\n*   no switch that activates this support.  The byte you are        *\n*   referring to denotes the maximum length of a userid allowed     *\n*   to be specified at LOGON (or when using the TSO parse macros    *\n*   that support 8 character IDs).  This allows a user who is       *\n*   currently logged on as an 8 character user to still process     *\n*   correctly if the maximum is downgraded during their session.\"   *\n*                                                                   *\n*   THIS PROGRAM FLIPS THE SWITCH TO ANY OF THESE VALUES.           *\n*                                                                   *\n*   SYNTAX:     TSVT8 0      SETS THE SWITCH TO X'00'               *\n*               TSVT8 7      SETS THE SWITCH TO X'07'               *\n*               TSVT8 8      SETS THE SWITCH TO X'08'               *\n*                                                                   *\n*   PURPOSE:    TO TURN 8-CHARACTER USERID SUPPORT ON OR OFF        *\n*               FOR TESTING PURPOSES.                               *\n*                                                                   *\n*   ATTRIBUTES:    NON-REENTRANT                                    *\n*                  APF-AUTHORIZED                                   *\n*                                                                   *\n*   CHANGES:                                                        *\n*      V1.1  - 07/20/2017 - Display the address of the switch byte  *\n*                 which is the TSVT + X'6'.                         *\n*      V2.0  - 12/13/2018 - Keep the TPVT+X'4D' byte in sync  TPVT-1*\n*                 with the TSVT + X'6' byte.                  TPVT-1*\n*                 Report status of both bytes.                TPVT-1*\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  -----------------------------------------------------------------  *\n*                  MACRO TO DISPLAY HEX VALUES                        *\n*  -----------------------------------------------------------------  *\n         MACRO\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    STM   R15,R1,HEXSAVE\n         LA    R1,&FROM\n         LA    R0,&LEN\n         LA    R15,&TO\n         BAL   R4,HEX\n         LM    R15,R1,HEXSAVE\n         MEND\n*  -----------------------------------------------------------------  *\n         YREGS\nTSVT8    CSECT\nTSVT8    AMODE 31\nTSVT8    RMODE 24\n         USING TSVT8,R15           (ESTABLISH TEMPORARY BASE).\n         B     BEGIN               SKIP OVER HEADER.\nEYEC0    DC    AL1(EYECL)          EXCLUSIVE LENGTH OF HEADER.\nEYEC     DC    C' TSVT8 - &SYSDATE - &SYSTIME -'\n         DC    C'  VERSION  2.0  '                               TPVT-1\n         DC    CL16' Public Domain '\nEYECL    EQU   *-EYEC\n         DROP  R15                 (DROP TEMPORARY BASE).\nBEGIN    STM   R14,R12,12(R13)     SAVE CALLER'S REGISTERS\n         LR    R12,R15             COPY BASE.\n         USING TSVT8,R12           (TELL ASSEMBLER).\n         LR    R14,R13             COPY CALLER'S SAVE AREA POINTER.\n         MVC   SAVE,SAVEACON       PRE-CLEAR SAVE AREA\n         LA    R13,SAVE            POINT TO MY SAVE AREA.\n         ST    R13,8(,R14)         CHAIN ...\n         ST    R14,SAVE+4          ... SAVE AREAS.\n*\nINITCON  DS    0H                  CLEAR FLAGS INITIALLY\n         MVI   FLAG1,X'00'         CLEAR FLAG\n         XC    TSVTNEW,TSVTNEW     CLEAR\n         XC    TPVTNEW,TPVTNEW     CLEAR                         TPVT-1\n         XC    TSVTPL6,TSVTPL6     CLEAR\n         XC    TPVTPL4D,TPVTPL4D   CLEAR                         TPVT-1\n         MVI   OUTPUT-1,X'40'      CLEAR\n         MVC   OUTPUT,OUTPUT-1      OUTPUT LINE\n*\nTESTPARM DS    0H\n         LTR   R1,R1               ANY CPPL OR PARM POINTER?\n         BZ    RETURN              B IF NOT.\n         L     R2,0(,R1)           POINT TO BUFFER\n         LTR   R2,R2               ANY?\n         BZ    RETURN              B IF NOT.\n         LH    R3,0(R2)            LOAD LENGTH.\n         LTR   R3,R3               ANY?\n         BZ    RETURN              B IF NOT.\n         CLI   2(R2),X'00'         COMMAND PROCESSOR INVOCATION?\n         BE    RLDCP\n         LA    R2,2(,R2)           POINT TO PARM.\n         B     PARM\nRLDCP    CH    R3,=H'4'            ANY PARM?\n         BE    FINDDATA            B IF NOT.\n         AH    R2,2(,R2)           POINT TO ...\n         LA    R2,4(,R2)           ... PARM.\nPARM     DS    0H\n* --- PARMS GOTTEN AT THIS POINT.  NOW WE ARE FLIPPING THE SWITCH --- *\n*\nPRTTITL  DS    0H                  PRINT PROGRAM TITLE\n         STM   R14,R1,SAVE14T1\n         TPUT  TITLINE,L'TITLINE\n         TPUT  TITDASH,L'TITDASH\n         LM    R14,R1,SAVE14T1\n*\nSETFLAGS DS    0H\n         XC    FLAG1,FLAG1         INITIALIZE FLAG INDICATOR\nOLDPRM0  CLI   0(R2),C'0'          IS THE PARM C'0' ?\n         BNE   NEWBUT7             NO. GO ON\n         OI    FLAG1,FLAG0OLD      INDICATE WE WANT X'00'\n         B     FINDDATA\nNEWBUT7  CLI   0(R2),C'7'          IS THE PARM C'7' ?\n         BNE   NEWAND8             NO. GO ON\n         OI    FLAG1,FLAG7NEW      INDICATE WE WANT X'07'\n         B     FINDDATA\nNEWAND8  CLI   0(R2),C'8'          IS THE PARM C'8' ?\n         BNE   FINDDATA            NO. GO ON\n         OI    FLAG1,FLAG8NEW      INDICATE WE WANT X'08'\n         B     FINDDATA\n* --- FLAG CHOSEN, GET THE TSVT. ------------------------------------ *\n         USING CVTMAP,R5\nFINDDATA L     R5,CVTPTR           POINT TO THE CVT.\n         L     R5,CVTTVT           POINT TO TSVT.\n         ST    R5,SAVETSVT         SAVE ADDRESS OF TSVT\n         L     R6,X'4C'(,R5)       GET TPVT                      TPVT-1\n         ST    R6,SAVETPVT         SAVE ADDRESS OF TPVT          TPVT-1\n         A     R6,=F'77'           NEW LOCATION AT X'4D' OF TPVT TPVT-1\n         MVC   TPVTPL4D(1),0(R6)   STORE CURRENT SETTING         TPVT-1\n         ST    R6,DISPTP4D         STORE FOR DISPLAY AND REUSE   TPVT-1\n         XR    R6,R6               CLEAR REG TO REUSE IT         TPVT-1\n         LR    R6,R5               Get TSVT + 6 for display\n         A     R6,=F'6'            Add the 6 bytes\n         ST    R6,DISPADDR         Store for display\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(20),=C'Address of TSVT+6:  '   Move text.\n         HEX   OUTPUT+20,4,DISPADDR                  Address.\n         TPUT  OUTPUT,60\n         MVC   OUTPUT,OUTPUT-1     Clear output line.            TPVT-1\n         MVC   OUTPUT(20),=C'Address of TPVT+4D: '   Move text.  TPVT-1\n         HEX   OUTPUT+20,4,DISPTP4D                  Address.    TPVT-1\n         TPUT  OUTPUT,60                                         TPVT-1\n         MVC   TSVTPL6(1),6(R5)    STORE CURRENT SWITCH SETTING\n         DROP  R5\n* ------------------------------------------------------------------- *\n*                                  Show previous status of byte.\n         STM   R14,R1,SAVE14T1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(30),=C'Previous TSVT+6 setting was:  '\n         HEX   OUTPUT+32,1,6(R5)   Print original byte setting.\n*        HEX   OUTPUT+40,1,TSVTPL6   Print original byte setting.\n         TPUT  OUTPUT,45\n         L     R6,DISPTP4D                                       TPVT-1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.            TPVT-1\n         MVC   OUTPUT(30),=C'Previous TPVT+4D setting was: '     TPVT-1\n         HEX   OUTPUT+32,1,0(R6)   Print original byte setting.  TPVT-1\n*        HEX   OUTPUT+40,1,TPVTPL4D  Print original byte setting.TPVT-1\n         TPUT  OUTPUT,45                                         TPVT-1\n         LM    R14,R1,SAVE14T1\n* --- HOW ARE WE SETTING THE SWITCH? -------------------------------- *\nON       DS    0H                  Invalid parm entered.\n         CLI   FLAG1,X'00'         Didn't change the flag?\n         BE    NOCHANGE            Then show no change and get out.\n* -- >       Test if this command is being run APF Authorized\n         STM   R15,R1,SAVE14T1     Now save registers and test if APF\n         XR    R15,R15                  authorized.\n         TESTAUTH FCTN=1           Are we authorized?\n         LTR   R15,R15             Test the return code.\n         BNZ   NOTAUTH             Not zero, tell not authorized.\n         LM    R15,R1,SAVE14T1     Restore registers used by TESTAUTH.\n* -- >                             We're authorized. Go Key 0.\n         MODESET KEY=ZERO\nSETOLDWY DS    0H\n         MVI   6(R5),X'00'         Initially clear the switch byte.\n         MVI   0(R6),X'00'                                       TPVT-1\n         TM    FLAG1,FLAG0OLD      Are we resetting it to X'00'?\n         BNO   SETNEW7             No. Try next parm.\n         MVI   6(R5),X'00'         Move X'00' to the switch byte.\n         MVI   TSVTNEW,X'00'       Save the new setting.\n         MVI   0(R6),X'00'                                       TPVT-1\n         MVI   TPVTNEW,X'00'       Save the new setting.         TPVT-1\n         B     ENDMOD              Go problem state.\nSETNEW7  TM    FLAG1,FLAG7NEW      Do we want to set X'07'?\n         BNO   SETNEW8             No. Try next parm.\n         OI    6(R5),X'07'         Yes. Move X'07' to switch byte.\n         MVI   TSVTNEW,X'07'       Save the new setting.\n         OI    0(R6),X'07'         Yes. Move X'07' to switch.    TPVT-1\n         MVI   TPVTNEW,X'07'       Save the new setting.         TPVT-1\n         B     ENDMOD              Go problem state.\nSETNEW8  TM    FLAG1,FLAG8NEW      Do we want to set X'08'?\n         BNO   ENDMOD              No. Not resetting at all.\n         OI    6(R5),X'08'         Set switch byte to X'08'.\n         MVI   TSVTNEW,X'08'       Save the new setting.\n         OI    0(R6),X'08'         Set switch byte to X'08'.     TPVT-1\n         MVI   TPVTNEW,X'08'       Save the new setting.         TPVT-1\n         B     ENDMOD              Problem state.\nENDMOD   DS    0H\n         MODESET KEY=NZERO\n         MVI   0(R2),X'00'         Make sure this parm address is\n         MVI   1(R2),X'00'           clean for next use.\nNEWTSVT  DS    0H                  Print new status of switch byte.\n         STM   R14,R1,SAVE14T1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.\n         MVC   OUTPUT(30),=C'Changed  TSVT+6 setting is :  '\n         HEX   OUTPUT+32,1,6(R5)   Print changed byte setting.\n*        HEX   OUTPUT+40,1,TSVTNEW Print changed byte setting.\n         TPUT  OUTPUT,45\n*                                                                TPVT-1\n         MVC   OUTPUT,OUTPUT-1     Clear output line.            TPVT-1\n         MVC   OUTPUT(30),=C'Changed  TPVT+4D setting is:  '     TPVT-1\n         HEX   OUTPUT+32,1,0(R6)   Print changed byte setting.   TPVT-1\n*        HEX   OUTPUT+40,1,TPVTNEW Print changed byte setting.   TPVT-1\n         TPUT  OUTPUT,45                                         TPVT-1\n         LM    R14,R1,SAVE14T1\nRETURN0  SR    R15,R15             RC = 0\nRETURN   L     R13,SAVE+4          General return to caller.\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\n         LTORG\n** ---------------------------------------------------------------- **\nNOTAUTH  DS    0H                  Message that we are not authorized\n         TPUT  MSG00,L'MSG00\n         LA    R15,8               RC = 8\n         B     RETURN\n** ---------------------------------------------------------------- **\nNOCHANGE DS    0H                  Message that nothing changed.\n         TPUT  MSG01,L'MSG01\n         TPUT  MSG02,L'MSG02                                     TPVT-1\n         LA    R15,4               RC = 4\n         B     RETURN\n** ---------------------------------------------------------------- **\nHEX      DS    0H\n         MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R4                  RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                           CONSTANTS                               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVEACON DC    16F'0'\nTITLINE  DC   C'TSVT8  TEST/ALTER 8-CHARACTER ID SUPPORT - V2.0' TPVT-1\nTITDASH  DC    C'-----  ---------- ----------- -- -------   ----'\nMSG00    DC    C'Program must be run APF-Authorized.'\nMSG01    DC    C'No changes have been made to TSVT+6 '           TPVT-1\nMSG02    DC    C'No changes have been made to TPVT+4D'           TPVT-1\nFLAG1    DC    X'00'\nFLAG0OLD EQU   B'10000000'             X'00'\nFLAG7NEW EQU   B'01000000'             X'07'\nFLAG8NEW EQU   B'00100000'             X'08'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                           VARIABLES                               *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nSAVE     DS    9D\nHEXSAVE  DS    3F                  SAVE FOR HEX MACRO\nSAVETSVT DS    F\nSAVETPVT DS    F                                                 TPVT-1\nDISPADDR DS    F\nDISPTP4D DS    F                                                 TPVT-1\nTSVTPL6  DS    X                   PREVIOUS SETTING              TPVT-1\nTPVTPL4D DS    X                   PREVIOUS SETTING              TPVT-1\nTSVTNEW  DS    X\nTPVTNEW  DS    X                                                 TPVT-1\nSAVE14T1 DS    2D                  Save \"system-used\" registers.\n         DC    C' '                Blank before OUTPUT line.\nOUTPUT   DC    CL80'  '            Variable output line.\nSAVELEN  EQU   *-SAVE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         TITLE '- MAPPING MACROS.'\n         CVT   DSECT=YES           MAP THE CVT.\n         END   TSVT8\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSVT8$": {"ttr": 16395, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB ,'SAM GOLOB',\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(TSVT8)\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=SYSDA,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,NORENT,NOREUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.UID8.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.UID8.LOAD\n//OBJECT   DD DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    TSVT8(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UACEE": {"ttr": 16397, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UACEE    TITLE 'UACEE - CHANGE USERID FIELD IN THE ACEE'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   UACEE USERID                                      *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ACEE                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUACEE    CSECT\nUACEE    RMODE 24\nUACEE    AMODE 31\n         USING UACEE,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UACEE   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* ------------------------------------------------------------------- *\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n* ---------------------------- >   ACEE SUPPORT BELOW\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n* ---------------------------- >   ACEE SUPPORT ABOVE\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UACEE$": {"ttr": 16644, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(UACEE)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   UACEE\n SETSSI  CB495222\n SETCODE AC(1)\n NAME    UACEE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UGRP": {"ttr": 16646, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UGRP     TITLE 'UGRP - CHANGE ACEE GROUP ID'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   UGRP GROUPID                                      *\n*                   UGRP -OFF                                         *\n*                                                                     *\n*       FUNCTION:   CHANGE GROUP ID IN ACEE.                          *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUGRP     CSECT\n         USING UGRP,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UGRP   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         CLC   =C'-OFF',NEWID\n         BE    NOSURR\nISSURR   DS    0H\n         OI    FLAG2,FLAG2ON\n         B     PREP\nNOSURR   DS    0H\n         OI    FLAG2,FLAG2OFF\nPREP     DS    0H\n         LA    R8,1(,R8)           GET USERID LENGTH\n         STC   R8,NEWIDL           STORE IT AWAY\nKZ       MODESET KEY=ZERO\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         TM    FLAG2,FLAG2OFF\n         BO    SURROFF\n         TM    FLAG2,FLAG2ON\n         BNO   KZ                  NO ACTION\nSURRNEW  DS    0H\n         MVC   X'1E'(8,R1),NEWID   CHANGE USERID\n         MVC   X'1D'(1,R1),NEWIDL  USERID LENGTH\n         B     NZ\nSURROFF  DS    0H\n         MVC   X'1E'(8,R1),BLANKS  ASTERISK AND BLANKS\n         MVI   X'1E'(R1),C'*'\n         MVI   X'1D'(R1),X'01'     LENGTH 1\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNOID     DC    C'*       '\nNEWIDL   DC    XL1'00'\nNEWIDL1  DC    XL1'01'\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UGRP$": {"ttr": 16650, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(UGRP)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    UGRP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULWA": {"ttr": 16652, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "ULWA     TITLE 'ULWA - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   ULWA USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  LWA ONLY                    ,     *\n*                                                                     *\n*       CHANGES :   V1.2 - 07/27/2017 - SBG                           *\n*                   Correct LWARNM contents when 8-character userid   *\n*                   support is on, and the userid has 8 characters.   *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nULWA     CSECT\nULWA     RMODE 24\nULWA     AMODE 31\n         USING ULWA,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'ULWA   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         B     BATCHCU8                 DONE WITH PSCB PROCESSING\n*                                  PROPER 8-CHAR SUPPORT DONE.\nBATCHERR DS    0H                  8-CHARACTER IDS NOT SUPPORTED\n         TPUT  MSG0,L'MSG0         SHOW ERROR MESSAGE\n         B     EOJ4\nBATCHCU8 DS    0H\n* ---------------------------- >   LWA SUPPORT\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         TM    FLAG1,X'02'         8-CHARACTER ID IN EFFECT?\n         BNO   NOLWA8              NOPE. SKIP THAT UPDATE.\nNOTEQ8   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHARS IN NEWID?\n         BL    LESTH8              YES. EXIT WITH ERROR MESSAGE.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  BLANK ENTIRE FIELD.\n         B     LESTH8A\nLESTH8   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   X'49'(7,R1),NEWID   USE OLD FIELD TOO\nLESTH8A  DS    0H\n         LA    R3,X'1DC'(,R1)      NEW LWA USERID FIELD\n         MVC   0(8,R3),NEWID       LOAD NEW FIELD TOO\n         B     YESLWA8\nNOLWA8   DS    0H\n         TM    FLAG1,X'01'         NEW SYSTEM BUT NO 8-CHAR\n         BZ    NO8SUP              NOPE. SAME UPDATE AS BEFORE.\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   X'49'(8,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         LA    R3,X'1DC'(,R1)      NO. FILL NEW LWA USERID FIELD TOO\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         B     YESLWA8\nNO8SUP   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      POINT TO NEW USERID FIELD TOO\n         MVC   0(8,R3),ZEROES      AND LOAD WITH USERID\nYESLWA8  DS    0H\n* ---------------------------- >   END LWA SUPPORT\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULWA$": {"ttr": 16656, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(ULWA)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB495222\n NAME    ULWA(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UNAME": {"ttr": 16897, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UNAME    TITLE 'UNAME - CHANGE ACEE USER NAME'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*       SYNTAX  :   UNAME NEWNAME                                     *\n*                   UNAME 'NAME WITH BLANKS'                          *\n*                   UNAME -OFF       (TO 'BLANK' THE USER NAME)       *\n*                   UNAME -DEF       (SET NAME TO IBM DEFAULT)        *\n*                                    (X'15' PLUS 20 X'FF'S)           *\n*                                                                     *\n*       FUNCTION:   CHANGE USER NAME POINTED TO BY THE ACEE           *\n*                                                                     *\n*       NOTE    :   THE ACEEUNAM FIELD (FULLWORD) POINTS TO THE       *\n*                   AREA WHERE THE USER NAME IS.  SOMETIMES THE       *\n*                   POINTER IS ZEROES.  IN THAT CASE, WE GETMAIN      *\n*                   24 BYTES OF STORAGE IN LSQA (SUBPOOL 253)         *\n*                   AND POINT ACEEUNAM TO IT.  THEN WE PUT THE        *\n*                   USERNAME INTO THAT GETMAINED AREA.                *\n*                                                                     *\n*                   WE USE THE STORAGE MACRO INSTEAD OF GETMAIN,      *\n*                   BECAUSE IT IS EASIER TO USE AND WE HAVE MORE      *\n*                   CONTROL.                                          *\n*                                                                     *\n*       DATE    :   NOV 03, 2020                                      *\n*                                                                     *\n*       CHANGES :   NOV 04, 2020 - MARKED RE-ENTRANT                  *\n*                                                                     *\n*                   NOV 05, 2020 - PUT TCBADDR PARAMETER INTO         *\n*                       THE STORAGE MACRO, SO THAT THE TCB WON'T      *\n*                       GO AWAY DURING THE TSO SESSION.               *\n*                       (THANKS TO A DEAR FRIEND FOR THIS ADVICE.)    *\n*                                                                     *\n*                       FIX RETURN CODE PROCESSING SO IT WORKS NOW.   *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n* ------------------------------------------------------------------- *\n         MACRO\n.*     --------------------------------------\n.*     DISPLAY HEX VALUES IN CHARACTER FORMAT\n.*     --------------------------------------\n&NAME    HEX   &TO,&LEN,&FROM\n&NAME    DS    0H\n         ST    R7,SAVER7A               Save area for BAL register\n         STM   R15,R1,HEXSAVE           Save work registers\n         LA    R1,&FROM                 Load from address\n         LA    R0,&LEN                  Load number of chars to move\n         LA    R15,&TO                  Load to address\n         BAL   R7,HEX                   Go to routine - do the work\n         LM    R15,R1,HEXSAVE           Restore work registers\n         L     R7,SAVER7A               Restore BAL register\n         MEND\n         EJECT\n* ------------------------------------------------------------------- *\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUNAME    CSECT\n         USING UNAME,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UNAME  VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\nINITCON  DS    0H\n         MVI   FLAG2,X'00'\n         MVI   BLANKS-1,X'40'\n         MVI   OUTPUT-1,X'40'\n         MVI   NEWID-1,X'40'\n         MVC   BLANKS(40),BLANKS-1      INIT BLANKS\n         MVC   OUTPUT(40),OUTPUT-1      INIT OUTPUT\n         MVC   NEWID(20),NEWID-1        INIT NEWID\n         MVC   SAVER3A,FULLZERO\n         MVC   SAVER4A,FULLZERO\n         MVC   SAVER4B,FULLZERO\n         MVC   SAVER7A,FULLZERO\n         MVC   SAVEACUN,FULLZERO\n         MVC   ACEEADDR,FULLZERO\n         MVC   CMBUFAD,FULLZERO\nCHKIFTSO DS    0H\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\n         DROP  R2\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,20               LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN DS    0H\n         CLI   0(R7),X'7D'         IS THIS CHARACTER A QUOTE?\n         BNE   CUTNOQUO\n         LA    R7,1(,R7)           BUMP PAST QUOTE\n         LA    R1,1(,R1)           BUMP PAST QUOTE\n         B     QUOTLOOK            DO NOT WORRY ABOUT BLANKS\nCUTNOQUO DS    0H\n         CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTNOQUO         TRY FOR BLANK AGAIN\nQUOTLOOK DS    0H\n         CLI   0(R7),X'7D'         IS THIS CHARACTER A QUOTE?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,QUOTLOOK         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(20),BLANKS    CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(20),BLANKS    UPPERCASE IT.\n         CLC   =C'-OFF',NEWID      ARE WE BLANKING THE USERID?\n         BE    BLANKIT             YES.\n         CLC   DEFAULTC(4),NEWID   ARE WE DEFAULTING THE NAME?\n         BE    DEFAULIT            YES.\nISMODIF  DS    0H                  NO. WE ARE CHANGING IT.\n         OI    FLAG2,FLAG2ON       SHOW CHANGE\n         B     PREP                NEXT\nBLANKIT  DS    0H                  WE ARE BLANKING IT\n         OI    FLAG2,FLAG2OFF      SHOW BLANKING\n         B     PREP                NEXT\nDEFAULIT DS    0H                  WE ARE DEFAULTING IT\n         OI    FLAG2,FLAG2DEF      SHOW DEFAULTING\nPREP     DS    0H\n         LA    R8,1(,R8)           GET USERID LENGTH\n         STC   R8,NEWIDL           STORE IT AWAY\nKZ       MODESET KEY=ZERO,MODE=SUP\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         ST    R1,ACEEADDR         SAVE ACEE ADDRESS\n         L     R1,X'64'(,R1)       POINT TO USER NAME STORAGE\n         MVC   SAVEACUN,FULLZERO\n         ST    R1,SAVEACUN         SAVE POINTER TO USER NAME\n         L     R1,SAVEACUN         RELOAD POINTER TO USER NAME\n         LTR   R1,R1               IS THE STORAGE THERE?\n         BZ    GETSTOR             NO. GET IT.\n         B     TESTFLAG            IT'S THERE. DON'T GET MORE.\nGETSTOR  DS    0H                  WHEN YOU NEED STORAGE TO PUT NAME\n         L     R9,X'218'           MY TCB\n         L     R9,X'7C'(,R9)       TCBJSTCB (STAYS AROUND ALL LOGON)\n* -------------------------------------------------------------- *\n*  TCB PARAMETER CORRECTS A BUG THAT OCCURRED DURING REPEATED    *\n*  INVOCATION OF THIS COMMAND.  THE STORAGE MACRO WAS LOOKING    *\n*  AT THE WRONG TCB AND WAS CLEARING STORAGE WITHOUT BEING ABLE  *\n*  TO REFILL IT WITH THE USER NAME.  (THANKS FRIEND WHO HELPED)  *\n* -------------------------------------------------------------- *\n         STORAGE OBTAIN,LOC=BELOW,SP=253,LENGTH=24,KEY=0,ADDR=(R1),    X\n               TCBADDR=(R9)\n*  FIRST BYTE IS A LENGTH, FOLLOWED BY UP TO 20 CHARACTERS.\n         MVC   SAVEACUN,FULLZERO\n         ST    R1,SAVEACUN         SAVE POINTER TO STORAGE\n         LTR   R1,R1               DID WE GET STORAGE?\n         BZ    EOJ4                NO. ERROR.\n         L     R2,ACEEADDR         POINT TO ACEE\n         ST    R1,X'64'(,R2)       PUT STORAGE LOCATION INTO ACEE\nTESTFLAG TM    FLAG2,FLAG2OFF      NULLIFYING USERID?\n         BO    USERNULL            YES. DO THAT.\n         TM    FLAG2,FLAG2DEF      DEFAULTING USERID?\n         BO    USERDFLT            YES. DO THAT.\n         TM    FLAG2,FLAG2ON       CHANGING USERID?\n         BNO   KZ                  NEITHER. SO DO NOTHING.\nUSIDNEW  DS    0H\n         L     R1,SAVEACUN         POINT TO USER NAME\n         ST    R3,SAVER3A          SAVE REGISTER FOR WORK.\n         L     R3,SAVEACUN         POINT TO USER NAME\n         MVC   1(20,R3),BLANKS     INITIALIZE TO BLANKS\n         MVC   1(20,R3),NEWID      CHANGE USERID\n         MVC   0(1,R3),NEWIDL      USERID LENGTH\n         L     R3,SAVER3A          RESTORE REGISTER.\n         B     NZ\nUSERNULL DS    0H                  NULLIFY THE USER NAME ENTRY\n         ST    R3,SAVER3A\n         L     R3,SAVEACUN         POINT TO USER NAME\n         MVC   1(20,R3),BLANKS     ASTERISK AND BLANKS\n         MVI   1(R3),C'*'\n         MVI   0(R3),X'01'         LENGTH 1\n         L     R3,SAVER3A\n         B     NZ\nUSERDFLT DS    0H                  NULLIFY THE USER NAME ENTRY\n         ST    R3,SAVER3A\n         L     R3,SAVEACUN         POINT TO USER NAME\n         MVC   1(20,R3),HILEVS     2OX'FF'\n         MVI   0(R3),X'15'         LENGTH 21 AS IN DEFAULT SETTING\n         L     R3,SAVER3A\nNZ       MODESET KEY=NZERO,MODE=PROB\n         B     EOJ0                NORMAL END\nEOJ4     LA    R5,4                SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LR    R15,R5              RELOAD RC AFTER FREEMAIN\n         ST    R15,16(,R13)        PUT IT INTO THE RIGHT PLACE\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R5,R5               SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R5,8                SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nHEX      MVC   1(1,R15),0(R1)         Move byte\n         UNPK  0(3,R15),1(2,R15)      Unpack\n         TR    0(2,R15),HEXTAB-240    Translate\n         LA    R15,2(,R15)            Increment output pointer\n         LA    R1,1(,R1)              Increment input pointer\n         BCT   R0,HEX                 Decrement length, then loop\n         MVI   0(R15),C' '            Blank the trailing byte\n         BR    R7                     Return to caller\nHEXTAB   DC    C'0123456789ABCDEF'    Translate table\n         SPACE\n         SPACE 3\n         LTORG\n         SPACE 3\nHILEVS   DC    20X'FF'                       LITERALS\nDEFAULTC DC    CL8'-DEFAULT'\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*            D A T A    A R E A   -   D Y N A M I C                 *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nSTORAPUT DS    5F\nHEXSAVE  DS    3F\nSAVER3A  DS    F\nSAVER4A  DS    F\nSAVER4B  DS    F\nSAVER7A  DS    F\nSAVEACUN DS    F\nACEEADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWIDL   DC    XL1'00'\n*\n         DC    X'40'           |\nBLANKS   DC    CL40' '         |  40 BLANKS\n         DC    X'40'           |\nOUTPUT   DC    CL40' '         |  40 BLANKS FOR OUTPUT\n         DC    X'40'           |\nNEWID    DC    CL20' '         |  STORE NEW USER NAME HERE\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             CHANGE USER NAME\nFLAG2OFF EQU   B'01000000'             NULLIFY USER NAME\nFLAG2DEF EQU   B'00100000'             DEFAULT USER NAME\n         DS    CL72               BUFFER FOR EXPANSION\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UNAME$": {"ttr": 16903, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(UNAME)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET,RENT,REUS'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    UNAME(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPRC": {"ttr": 16905, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UPRC     TITLE 'UPRC - CHANGE ACEE PROCEDURE ID'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   UPRC PROCNAME                                     *\n*                   UPRC -OFF                                         *\n*                                                                     *\n*       FUNCTION:   CHANGE PROCEDURE NAME IN ACEE.                    *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUPRC     CSECT\n         USING UPRC,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UPRC   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         CLC   =C'-OFF',NEWID\n         BE    NOSURR\nISSURR   DS    0H\n         OI    FLAG2,FLAG2ON\n         B     PREP\nNOSURR   DS    0H\n         OI    FLAG2,FLAG2OFF\nPREP     DS    0H\n         LA    R8,1(,R8)           GET USERID LENGTH\n         STC   R8,NEWIDL           STORE IT AWAY\nKZ       MODESET KEY=ZERO\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         TM    FLAG2,FLAG2OFF\n         BO    SURROFF\n         TM    FLAG2,FLAG2ON\n         BNO   KZ                  NO ACTION\nSURRNEW  DS    0H\n         MVC   X'2C'(8,R1),NEWID   CHANGE USERID\n         B     NZ\nSURROFF  DS    0H\n         MVC   X'2C'(8,R1),BLANKS  ASTERISK AND BLANKS\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNOID     DC    C'*       '\nNEWIDL   DC    XL1'00'\nNEWIDL1  DC    XL1'01'\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UPRC$": {"ttr": 16909, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(UPRC)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    UPRC(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USAT": {"ttr": 16911, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USAT     TITLE 'USAT - CHANGE PSCBUSER AND PSCBUSRL TO USERID YOU WANT'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USAT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID IN PSCB                             *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSAT     CSECT\n         USING USAT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USAT VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n*        MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n*        LR    R1,R11              POINT R1 TO CPPL.\n*        LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USATO": {"ttr": 17155, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USAT     TITLE 'USAT - CHANGE PSCBUSER AND PSCBUSRL TO USERID YOU WANT'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USAT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID IN PSCB                             *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSAT     CSECT\n         USING USAT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USAT VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n*        ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n*        L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USET": {"ttr": 17158, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USET     TITLE 'USET - PRIV. CMD. TO RESET USERID FROM PREFIX.'\n*%A PPLINK           AC(1)\n         SPACE 1\nUSET     CSECT\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         USING USET,R12\n         LA    R2,SAVE\n         ST    R2,8(,R13)\n         ST    R13,SAVE+4\n         LR    R13,R2\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                B IF NOT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                B IF NOT.  NO MESSAGE.\n*        BO    CONT0               B IF YES.\n*        VTPUT 'YOU ARE NOT AUTHORIZED TO USE THIS COMMAND.'\n*        B     EOJ8\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    CONT1               NO.\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    CONT1               B IF NOT.\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   CONT1               B IF NOT.\n         LH    R3,2(,R1)           LOAD OFFSET.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         OI    0(R1),C' '          UPPERCASE IT.\n         CLI   0(R1),C'A'          CHANGE ALL FIELDS?\n         BNE   CONT1A              B IF NOT.\n         OI    FLAG,ALLFLG         SET ALL FIELDS FLAG.\n         B     CONT1               CONTINUE.\nCONT1A   CLI   0(R1),C'N'          NOCONFIRM?\n         BNE   CONT1               CONTINUE IF NOT.\n         OI    FLAG,ALLFLG+NOCONFLG SET ALL-FIELDS AND NOCONFIRM.\n         OI    1(R1),C' '          UPPERCASE NEXT CHAR.\n         CLI   1(R1),C'N'          NO LISTB?\n         BNE   CONT1               B IF NOT TO SUPPRESS LISTB.\n         OI    FLAG,NOLBFG         TURN ON NO LISTB FLAG.\nCONT1    L     R3,PSCBUPT          POINT TO UPT.\n         USING UPT,R3\n         CLI   UPTPREFL,X'00'      ANY PREFIX?\n         BE    EOJ0                B IF NOT.  BYE.\n         CLC   PSCBUSER(8),UPTPREFX   PREFIX ALREADY SAME AS USERID?\n         BNE   KZ0                    B IF NOT.  CHANGE IT.\n         TM    FLAG,ALLFLG         BUT ARE WE TO CHANGE ALL FIELDS?\n         BZ    EOJ0                B IF NOT.  BYE.\n         L     R1,12(,R9)          POINT TO TIOT.\n         CLC   0(7,R1),UPTPREFX    JOBNAME AND PREFIX SAME?\n         BE    EOJ0                B IF YES.  BYE.\nKZ0      L     R1,16               PT TO CVT.\n         L     R1,0(,R1)           PT TO TCB/ASCB WORDS.\n         L     R1,12(,R1)          PT TO ASCB.\n         L     R8,X'3C'(,R1)       PT TO TSB.\n         LTR   R8,R8               ANY TSB?\n         BNZ   KZ1                 B IF YES.  ONLINE USER.\n         OI    FLAG,BATCH          ON BATCH FLAG.\n         B     KZ                  CONTINUE.\nKZ1      SR    R1,R1               CLEAR LENGTH REG.\n         IC    R1,UPTPREFL         LOAD PREFIX LENGTH.\n         SH    R1,=H'2'            SUBTRACT 2 FOR SS LEN 1 LESS.\n         BM    UCHECK              B IF TOO SMALL.\n         EX    R1,COMPPREF         NEW PREFIX SAME AS FIRST USER CHS?\n         BE    KZ                  B IF YES.\n         TM    FLAG,NOCONFLG       NO CONFIRM?\n         BO    KZ                  B IF NO CONFIRM.\nUCHECK   LA    R1,1(,R1)           CREATE FULL SS LEN.\n         EX    R1,MOVEP3           MOVE PREFIX TO MESSAGE.\n         TPUT  EMSG3,EMSG3L,ASIS   SAY: ARE YOU SURE?\n         TGET  SAVE,4              GET ANSWER.\n         OI    SAVE,C' '           UPPERCASE ANS.\n         CLI   SAVE,C'Y'           ANS YES?\n         BNE   EOJ0                B IF NOT.\nKZ       MODESET KEY=ZERO\n         TM    FLAG,BATCH          BATCH USER?\n         BZ    NOTBATCH            B IF NOT.\n         OI    PSCBATR1,PSCBVMNT   SET MOUNT FLAG IN PSCB.\n         B     BATCHCNT            CONTINUE\nNOTBATCH CLC   PSCBUSER(7),X'58'(R8)  RUNNING UNDER ACF?\n         BNE   BATCHCNT            B IF NOT.\n         MVC   X'58'(7,R8),UPTPREFX  MOVE PREFIX TO TSB PSWD FIELD ...\n*                                  ... FOR ACF2.\nBATCHCNT MVC   PSCBUSER(8),UPTPREFX  SET USERID TO PREFIX.\n         MVC   PSCBUSRL,UPTPREFL   MOVE PREFIX LENGTH TO USERID LENGTH.\n         TM    FLAG,NOLBFG         NO LISTB?\n         BO    POSTLB              B IF NO LISTB.\n         MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\nPOSTLB   TM    FLAG,ALLFLG         CHANGE ALL FIELDS?\n         BZ    NZ                  B IF NOT.\n         L     R1,12(,R9)          POINT TO TIOT.\n         MVC   0(7,R1),UPTPREFX    SET TIOT JOBNAME TO PREFIX.\n         MVI   7(R1),C' '          SET LAST CHAR TO BLANK.\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME.\n         LTR   R1,R1               ANYTHING?\n         BZ    NOAJ                B IF NOTHING.\n         MVC   0(7,R1),UPTPREFX    SET ASCB JOBNAME TO PREFIX.\n         MVI   7(R1),C' '          SET LAST CHAR TO BLANK.\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME?\n         BZ    NZ                  B IF NOT.\n         MVC   X'C0'(7,R1),UPTPREFX SET ASXB JOBNAME TO PREFIX.\nNZ       MODESET KEY=NZERO\n         TM    FLAG,BATCH          BATCH USER?\n         BO    EOJ0                B IF YES.  NO MESSAGES.\n         SR    R4,R4\n         IC    R4,UPTPREFL         LOAD PREFIX LENGTH.\n         BCTR  R4,*-*              CREATE SS LENGTH.\n         TM    FLAG,ALLFLG         ALL FIELDS CHANGED?\n         BO    ALLMSG              B IF YES\n         EX    R4,MOVEPREF         MOVE PREFIX TO MESSAGE.\n         TPUT  EMSG,EMSGL          OUTPUT BYE MESSAGE.\n         B     EOJ0                B IF NOT.\nALLMSG   EX    R4,MOVEP2           MOVE PREFIX TO MSG.\n         TPUT  EMSG2,EMSG2L        OUTPUT SECONDARY MSG.\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      L     R13,SAVE+4          BYE.\n         L     R14,12(,R13)\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         SPACE 1\nSAVE     DS    9D\nCOMPPREF CLC   UPTPREFX(*-*),PSCBUSER   EXECUTED.\nMOVEPREF MVC   EMSGUSER(*-*),UPTPREFX   EXECUTED.\nMOVEP2   MVC   EMSG2USR(*-*),UPTPREFX   EXECUTED.\nMOVEP3   MVC   EMSG3USR(*-*),UPTPREFX   EXECUTED.\nFLAG     DC    X'00'               FLAGS.\nALLFLG   EQU   B'10000000'         CHANGE ALL FIELDS.\nBATCH    EQU   B'01000000'         BATCH USER.\nNOCONFLG EQU   B'00100000'         NO CONFIRM FLAG.\nNOLBFG   EQU   B'00010000'         NO LISTB FLAG.\n         SPACE 1\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\nEMSG     DC    C'USERID reset to '\nEMSGUSER DC    CL8' '\nEMSGL    EQU   *-EMSG\nEMSG2    DC    C'JOBNAME and USERID reset to '\nEMSG2USR DC    CL8' '\nEMSG2L   EQU   *-EMSG2\nEMSG3    DC    C'Are you sure you want your USERID to be '\nEMSG3USR DC    CL7' ',C'?'\nEMSG3L   EQU   *-EMSG3\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USIT": {"ttr": 17162, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USIT     TITLE 'USIT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USIT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID IN ASCB, ASXB, PSCB, TIOT           *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSIT     CSECT\n         USING USIT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USIT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\nLINKBC   DS    0H\n*        MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n*        LR    R1,R11              POINT R1 TO CPPL.\n*        LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USITO": {"ttr": 17166, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USIT     TITLE 'USIT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USIT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID IN ASCB, ASXB, PSCB, TIOT           *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSIT     CSECT\n         USING USIT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USIT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\nLINKBC   MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USOT": {"ttr": 17412, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USOT     TITLE 'USOT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USOT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID: ASCB, ASXB, TIOT, PSCB, ACEE       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSOT     CSECT\n         USING USOT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USOT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n         BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\nLINKBC   DS    0H\n*        MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n*        LR    R1,R11              POINT R1 TO CPPL.\n*        LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USOTO": {"ttr": 17416, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USOT     TITLE 'USOT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USOT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID: ASCB, ASXB, TIOT, PSCB, ACEE       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSOT     CSECT\n         USING USOT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USOT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n         BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\nLINKBC   MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USPT": {"ttr": 17420, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USPT     TITLE 'USPT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USPT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID: ASCB, ASXB, TIOT, PSCB, ACEE       *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSPT     CSECT\n         USING USPT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USPT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n*        LTR   R1,R1               NONE ?\n*        BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n*        CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n*        BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n*        CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n*        BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\nLINKBC   DS    0H\n*        MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n*        LR    R1,R11              POINT R1 TO CPPL.\n*        LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USPT$": {"ttr": 17424, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(USPT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    USPT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USTT": {"ttr": 17665, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USTT     TITLE 'USTT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   USTT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB, LWA,  OUCB, CSCX, TSBX      *\n*                     AND CHANGE THE UPT PREFIX AS WELL.              *\n*                                                                     *\n*       CHANGES :   V1.2 - 07/27/2017                                 *\n*                   Correct LWARNM contents when 8-character userid   *\n*                   support is on, and the userid has 8 characters.   *\n*                                                                     *\n*                   V1.3 - 07/28/2017                                 *\n*                   Add change of prefix to other changes, as per     *\n*                   CPFX program.                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSTT     CSECT\nUSTT     RMODE 24\nUSTT     AMODE 31\n         USING USTT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USTT   VER 1.3'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         ST    R7,SAVER7A          SAVE WORK REGISTER\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         L     R7,SAVER7A          RESTORE WORK REGISTER\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         L     R4,X'34'(,R2)       LOAD UPT ADDRESS\n         USING UPT,R4\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. DO PROCESSING FOR 7 OR LESS\n         TM    FLAG1,X'01'         IS 8-CHAR SUPPORT OFF?\n         BO    BATCHERR            YES, POST ERROR MESSAGE.\n*                                  NO. UPDATE ALL FIELDS.\n         MVC   PSCBUSER(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   PSCBUSRL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   PSCB+X'54'(8),NEWID      PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'            PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   UPTPREFL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   UPT+X'21'(8),NEWID       PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'             PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 DONE WITH PSCB PROCESSING\n*                                  PROPER 8-CHAR SUPPORT DONE.\nBATCHERR DS    0H                  8-CHARACTER IDS NOT SUPPORTED\n         TPUT  MSG0,L'MSG0         SHOW ERROR MESSAGE\n         B     EOJ4\nBATCHNL7 DS    0H                  NEWID IS 7 CHARS OR LESS\n*                                  AND THE SYSTEM SUPPORTS 8-CHAR.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   PSCB+X'54'(8),NEWID PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'       PUT LENGTH IN NEW FIELD\n         MVC   UPT+X'21'(8),NEWID  PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'        PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         B     BATCHCU8            DONE WITH PSCB PROCESSING\n*\nBATCHCNT DS    0H                  SYSTEM DOES NOT SUPPORT 8-CHAR\n         C     R8,=F'8'            CHECK IF ID LENGTH IS 8\n         BE    BATCHERR            IT IS. SEND ERROR MESSAGE.\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n*                                  AND ZERO NEW FIELDS.\n         MVC   PSCB+X'54'(8),ZEROES   NEW FIELD NOW WORKING YET\n         MVI   PSCB+X'20',X'00'    PUT ZEROES IN NEW FIELD LENGTH\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         MVC   UPT+X'21'(8),ZEROES ZERO NEW PREFIX FIELD\n         MVI   UPT+X'29',X'00'     ZERO NEW PREFIX LENGTH\nBATCHCU8 DS    0H\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n*        LTR   R1,R1               NONE ?\n*        BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nGETJCT   DS    0H\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX\n         MVC   X'18'(8,R1),NEWID   MOVE IN NEWID\nGETJMR   DS    0H  *---------- >   JMR USERID\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX\n         ST    R7,SAVER7B          SAVE WORK REGISTER\n         XR    R7,R7               CLEAR WORK REGISTER\n         ICM   R7,7,X'96'(R1)      POINT TO JMR POINTER\n         MVC   X'10'(8,R7),BLANKS  BLANK OUT ID FIELD\n         MVC   X'10'(8,R7),NEWID   PUT IN NEW ID\n         L     R7,SAVER7B          RESTORE WORK REGISTER\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n*        CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n*        BZ    LINKBC              B IF NONE\n         MVC   X'C0'(8,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         L     R4,X'A4'(,R1)       POINT TO UTOKEN\n         MVC   X'40'(8,R4),NEWID   CHANGE UTOKEN USERID\n*        CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n*        BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n* ---------------------------- >   LWA SUPPORT\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         TM    FLAG1,X'02'         8-CHARACTER ID IN EFFECT?\n         BNO   NOLWA8              NOPE. SKIP THAT UPDATE.\nNOTEQ8   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHARS IN NEWID?\n         BL    LESTH8              YES. EXIT WITH ERROR MESSAGE.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  BLANK ENTIRE FIELD.\n         B     LESTH8A\nLESTH8   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   X'49'(7,R1),NEWID   USE OLD FIELD TOO\nLESTH8A  DS    0H\n         LA    R3,X'1DC'(,R1)      NEW LWA USERID FIELD\n         MVC   0(8,R3),NEWID       LOAD NEW FIELD TOO\n         B     YESLWA8\nNOLWA8   DS    0H\n         TM    FLAG1,X'01'         NEW SYSTEM BUT NO 8-CHAR\n         BZ    NO8SUP              NOPE. SAME UPDATE AS BEFORE.\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   X'49'(8,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         LA    R3,X'1DC'(,R1)      NO. FILL NEW LWA USERID FIELD TOO\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         B     YESLWA8\nNO8SUP   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      POINT TO NEW USERID FIELD TOO\n         MVC   0(8,R3),ZEROES      AND LOAD WITH USERID\nYESLWA8  DS    0H\n* ---------------------------- >   END LWA SUPPORT\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         LR    R8,R1               SAVE CSCB ADDRESS\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\n         LR    R1,R8               RELOAD CSCB\n         L     R1,X'DC'(,R1)       POINT TO CSCX\n         MVC   X'18'(8,R1),NEWID   MOVE ID TO CSCX\n         L     R1,X'90'(,R10)      POINT TO ASCBOUCB\n         LA    R1,X'D0'(,R1)       POINT TO OUCBUSRD\n         MVC   X'0'(8,R1),NEWID    CHANGE USERID\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'F0'(,R1)       POINT TO VAB\n         L     R1,4(,R1)           POINT TO CAUB\n         MVC   X'14'(8,R1),NEWID   MOVE ID TO CAUB\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'A8'(,R1)       POINT TO JSAB\n         MVC   X'2C'(8,R1),NEWID   MOVE USERID TO USERID\n         MVC   X'1C'(8,R1),NEWID   MOVE USERID TO JOBNAME\nLINKBC   DS    0H\n         L     R1,X'3C'(,R10)      POINT TO TSB\n         MVC   X'90'(8,R1),NEWID   MOVE IN USERID\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nSAVER7A  DS    F\nSAVER7B  DS    F\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USTT$": {"ttr": 17671, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(USTT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB500222\n NAME    USTT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USUR": {"ttr": 17673, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USUR     TITLE 'USUR - CHANGE ACEE SURROGATE ID'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USUR USERID                                       *\n*                   USUR -OFF                                         *\n*                                                                     *\n*       FUNCTION:   CHANGE SURROGATE USERID IN ACEE.                  *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSUR     CSECT\n         USING USUR,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USUR   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         CLC   =C'-OFF',NEWID\n         BE    NOSURR\nISSURR   DS    0H\n         OI    FLAG2,FLAG2ON\n         B     PREP\nNOSURR   DS    0H\n         OI    FLAG2,FLAG2OFF\nPREP     DS    0H\n         LA    R8,1(,R8)           GET USERID LENGTH\n         STC   R8,NEWIDL           STORE IT AWAY\nKZ       MODESET KEY=ZERO\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         TM    FLAG2,FLAG2OFF\n         BO    SURROFF\n         TM    FLAG2,FLAG2ON\n         BNO   KZ                  NO ACTION\nSURRNEW  DS    0H\n         MVC   X'90'(8,R1),NEWID   CHANGE USERID\n         B     NZ\nSURROFF  DS    0H\n         MVC   X'90'(8,R1),NOID    ZERO OUT SURROGATE ID FIELD\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nFLAG2    DS    X\nFLAG2ON  EQU   B'10000000'             TURN ON\nFLAG2OFF EQU   B'01000000'             TURN OFF\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNOID     DC    X'0000000000000000'\nNEWIDL   DC    XL1'00'\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USUR$": {"ttr": 17677, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(USUR)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n NAME    USUR(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USUT": {"ttr": 17679, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USUT     TITLE 'USUT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USUT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSUT     CSECT\nUSUT     RMODE 24\nUSUT     AMODE 31\n         USING USUT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USUT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n         BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\nLINKBC   DS    0H\n*        MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n*        LR    R1,R11              POINT R1 TO CPPL.\n*        LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USUTO": {"ttr": 17924, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USUT     TITLE 'USUT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USUT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSUT     CSECT\nUSUT     RMODE 24\nUSUT     AMODE 31\n         USING USUT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USUT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n         BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\nLINKBC   MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n         LR    R1,R11              POINT R1 TO CPPL.\n         LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USVT": {"ttr": 17928, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USVT     TITLE 'USVT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USVT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB                              *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSVT     CSECT\nUSVT     RMODE 24\nUSVT     AMODE 31\n         USING USVT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USVT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n*        LTR   R1,R1               NONE ?\n*        BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n*        CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n*        BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n*        CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n*        BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\nLINKBC   DS    0H\n*        MVC   0(4,R11),=A(BPARM)  MOVE PARM POINTER TO CPPL.\n*        LR    R1,R11              POINT R1 TO CPPL.\n*        LINK  EP=LISTBC           DO LISTBC COMMAND.\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USVT$": {"ttr": 17932, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(USVT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   USVT\n SETSSI  CB483247\n SETCODE AC(1)\n NAME    USVT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USWT": {"ttr": 17934, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USWT     TITLE 'USWT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   USWT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB, LWA                         *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSWT     CSECT\nUSWT     RMODE 24\nUSWT     AMODE 31\n         USING USWT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USWT   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,7                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\nBATCHCNT MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n         LTR   R1,R1               NONE ?\n         BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n         CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n         BZ    LINKBC              B IF NONE\n         MVC   X'C0'(7,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n         BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         LA    R3,X'49'(,R1)         POINT TO LWA USERID\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\nLINKBC   DS    0H\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\nDATAAREA DSECT\nSAVE     DS    9D\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USWT$": {"ttr": 18178, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=IBMUSER.S19.MACLIB\n//         DD DISP=SHR,DSN=IBMUSER.S19.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(USWT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   USWT\n SETSSI  CB477247\n SETCODE AC(1)\n NAME    USWT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USXT": {"ttr": 18180, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USXT     TITLE 'USXT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   USXT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB, LWA,  OUCB, CSCX, TSBX      *\n*                                                                     *\n*       CHANGES :   V1.2 - 07/27/2017 - SBG                           *\n*                   Correct LWARNM contents when 8-character userid   *\n*                   support is on, and the userid has 8 characters.   *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSXT     CSECT\nUSXT     RMODE 24\nUSXT     AMODE 31\n         USING USXT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USXT   VER 1.2'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. DO PROCESSING FOR 7 OR LESS\n         TM    FLAG1,X'01'         IS 8-CHAR SUPPORT OFF?\n         BO    BATCHERR            YES, POST ERROR MESSAGE.\n*                                  NO. UPDATE ALL FIELDS.\n         MVC   PSCBUSER(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   PSCBUSRL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   PSCB+X'54'(8),NEWID      PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'            PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 DONE WITH PSCB PROCESSING\n*                                  PROPER 8-CHAR SUPPORT DONE.\nBATCHERR DS    0H                  8-CHARACTER IDS NOT SUPPORTED\n         TPUT  MSG0,L'MSG0         SHOW ERROR MESSAGE\n         B     EOJ4\nBATCHNL7 DS    0H                  NEWID IS 7 CHARS OR LESS\n*                                  AND THE SYSTEM SUPPORTS 8-CHAR.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   PSCB+X'54'(8),NEWID PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'       PUT LENGTH IN NEW FIELD\n         B     BATCHCU8            DONE WITH PSCB PROCESSING\n*\nBATCHCNT DS    0H                  SYSTEM DOES NOT SUPPORT 8-CHAR\n         C     R8,=F'8'            CHECK IF ID LENGTH IS 8\n         BE    BATCHERR            IT IS. SEND ERROR MESSAGE.\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n*                                  AND ZERO NEW FIELDS.\n         MVC   PSCB+X'54'(8),ZEROES   NEW FIELD NOW WORKING YET\n         MVI   PSCB+X'20',X'00'    PUT ZEROES IN NEW FIELD LENGTH\nBATCHCU8 DS    0H\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n*        LTR   R1,R1               NONE ?\n*        BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n*        CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n*        BZ    LINKBC              B IF NONE\n         MVC   X'C0'(8,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n*        CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n*        BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n* ---------------------------- >   LWA SUPPORT\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         TM    FLAG1,X'02'         8-CHARACTER ID IN EFFECT?\n         BNO   NOLWA8              NOPE. SKIP THAT UPDATE.\nNOTEQ8   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHARS IN NEWID?\n         BL    LESTH8              YES. EXIT WITH ERROR MESSAGE.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  BLANK ENTIRE FIELD.\n         B     LESTH8A\nLESTH8   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   X'49'(7,R1),NEWID   USE OLD FIELD TOO\nLESTH8A  DS    0H\n         LA    R3,X'1DC'(,R1)      NEW LWA USERID FIELD\n         MVC   0(8,R3),NEWID       LOAD NEW FIELD TOO\n         B     YESLWA8\nNOLWA8   DS    0H\n         TM    FLAG1,X'01'         NEW SYSTEM BUT NO 8-CHAR\n         BZ    NO8SUP              NOPE. SAME UPDATE AS BEFORE.\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   X'49'(8,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         LA    R3,X'1DC'(,R1)      NO. FILL NEW LWA USERID FIELD TOO\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         B     YESLWA8\nNO8SUP   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      POINT TO NEW USERID FIELD TOO\n         MVC   0(8,R3),ZEROES      AND LOAD WITH USERID\nYESLWA8  DS    0H\n* ---------------------------- >   END LWA SUPPORT\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         LR    R8,R1               SAVE CSCB ADDRESS\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\n         LR    R1,R8               RELOAD CSCB\n         L     R1,X'DC'(,R1)       POINT TO CSCX\n         MVC   X'18'(8,R1),NEWID   MOVE ID TO CSCX\n         L     R1,X'90'(,R10)      POINT TO ASCBOUCB\n         LA    R1,X'D0'(,R1)       POINT TO OUCBUSRD\n         MVC   X'0'(8,R1),NEWID    CHANGE USERID\nLINKBC   DS    0H\n         L     R1,X'3C'(,R10)      POINT TO TSB\n         MVC   X'90'(8,R1),NEWID   MOVE IN USERID\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USXT$": {"ttr": 18185, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(USXT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=IBMUSER.UID8.LOAD\n//SYSLMOD  DD  DISP=SHR,DSN=IBMUSER.UID8.LOAD\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB495222\n NAME    USXT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USYT": {"ttr": 18187, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USYT     TITLE 'USYT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   USYT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB, LWA,  OUCB, CSCX, TSBX      *\n*                     AND CHANGE THE UPT PREFIX AS WELL.              *\n*                                                                     *\n*       CHANGES :   V1.2 - 07/27/2017                                 *\n*                   Correct LWARNM contents when 8-character userid   *\n*                   support is on, and the userid has 8 characters.   *\n*                                                                     *\n*                   V1.3 - 07/28/2017                                 *\n*                   Add change of prefix to other changes, as per     *\n*                   CPFX program.                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSYT     CSECT\nUSYT     RMODE 24\nUSYT     AMODE 31\n         USING USYT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USYT   VER 1.3'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         L     R4,X'34'(,R2)       LOAD UPT ADDRESS\n         USING UPT,R4\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. DO PROCESSING FOR 7 OR LESS\n         TM    FLAG1,X'01'         IS 8-CHAR SUPPORT OFF?\n         BO    BATCHERR            YES, POST ERROR MESSAGE.\n*                                  NO. UPDATE ALL FIELDS.\n         MVC   PSCBUSER(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   PSCBUSRL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   PSCB+X'54'(8),NEWID      PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'            PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   UPTPREFL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   UPT+X'21'(8),NEWID       PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'             PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 DONE WITH PSCB PROCESSING\n*                                  PROPER 8-CHAR SUPPORT DONE.\nBATCHERR DS    0H                  8-CHARACTER IDS NOT SUPPORTED\n         TPUT  MSG0,L'MSG0         SHOW ERROR MESSAGE\n         B     EOJ4\nBATCHNL7 DS    0H                  NEWID IS 7 CHARS OR LESS\n*                                  AND THE SYSTEM SUPPORTS 8-CHAR.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   PSCB+X'54'(8),NEWID PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'       PUT LENGTH IN NEW FIELD\n         MVC   UPT+X'21'(8),NEWID  PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'        PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         B     BATCHCU8            DONE WITH PSCB PROCESSING\n*\nBATCHCNT DS    0H                  SYSTEM DOES NOT SUPPORT 8-CHAR\n         C     R8,=F'8'            CHECK IF ID LENGTH IS 8\n         BE    BATCHERR            IT IS. SEND ERROR MESSAGE.\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n*                                  AND ZERO NEW FIELDS.\n         MVC   PSCB+X'54'(8),ZEROES   NEW FIELD NOW WORKING YET\n         MVI   PSCB+X'20',X'00'    PUT ZEROES IN NEW FIELD LENGTH\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         MVC   UPT+X'21'(8),ZEROES ZERO NEW PREFIX FIELD\n         MVI   UPT+X'29',X'00'     ZERO NEW PREFIX LENGTH\nBATCHCU8 DS    0H\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n*        LTR   R1,R1               NONE ?\n*        BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n*        CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n*        BZ    LINKBC              B IF NONE\n         MVC   X'C0'(8,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n*        CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n*        BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n* ---------------------------- >   LWA SUPPORT\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         TM    FLAG1,X'02'         8-CHARACTER ID IN EFFECT?\n         BNO   NOLWA8              NOPE. SKIP THAT UPDATE.\nNOTEQ8   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHARS IN NEWID?\n         BL    LESTH8              YES. EXIT WITH ERROR MESSAGE.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  BLANK ENTIRE FIELD.\n         B     LESTH8A\nLESTH8   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   X'49'(7,R1),NEWID   USE OLD FIELD TOO\nLESTH8A  DS    0H\n         LA    R3,X'1DC'(,R1)      NEW LWA USERID FIELD\n         MVC   0(8,R3),NEWID       LOAD NEW FIELD TOO\n         B     YESLWA8\nNOLWA8   DS    0H\n         TM    FLAG1,X'01'         NEW SYSTEM BUT NO 8-CHAR\n         BZ    NO8SUP              NOPE. SAME UPDATE AS BEFORE.\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   X'49'(8,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         LA    R3,X'1DC'(,R1)      NO. FILL NEW LWA USERID FIELD TOO\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         B     YESLWA8\nNO8SUP   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      POINT TO NEW USERID FIELD TOO\n         MVC   0(8,R3),ZEROES      AND LOAD WITH USERID\nYESLWA8  DS    0H\n* ---------------------------- >   END LWA SUPPORT\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         LR    R8,R1               SAVE CSCB ADDRESS\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\n         LR    R1,R8               RELOAD CSCB\n         L     R1,X'DC'(,R1)       POINT TO CSCX\n         MVC   X'18'(8,R1),NEWID   MOVE ID TO CSCX\n         L     R1,X'90'(,R10)      POINT TO ASCBOUCB\n         LA    R1,X'D0'(,R1)       POINT TO OUCBUSRD\n         MVC   X'0'(8,R1),NEWID    CHANGE USERID\nLINKBC   DS    0H\n         L     R1,X'3C'(,R10)      POINT TO TSB\n         MVC   X'90'(8,R1),NEWID   MOVE IN USERID\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USYT$": {"ttr": 18433, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(USYT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB495222\n NAME    USYT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "USZT": {"ttr": 18435, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "USZT     TITLE 'USZT - CHANGE USERID FIELDS FOR A TSO SESSION'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   USZT USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  ASCB, ASXB, TIOT, PSCB, ACEE,     *\n*                                   CSCB, LWA,  OUCB, CSCX, TSBX      *\n*                     AND CHANGE THE UPT PREFIX AS WELL.              *\n*                                                                     *\n*       CHANGES :   V1.2 - 07/27/2017                                 *\n*                   Correct LWARNM contents when 8-character userid   *\n*                   support is on, and the userid has 8 characters.   *\n*                                                                     *\n*                   V1.3 - 07/28/2017                                 *\n*                   Add change of prefix to other changes, as per     *\n*                   CPFX program.                                     *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n         YREGS\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUSZT     CSECT\nUSZT     RMODE 24\nUSZT     AMODE 31\n         USING USZT,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'USZT   VER 1.3'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* BREAK IN HERE IF 8-CHAR ID SUPPORT IS IN EFFECT.\n         ST    R7,SAVER7A          SAVE WORK REGISTER\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         L     R7,SAVER7A          RESTORE WORK REGISTER\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\n         L     R4,X'34'(,R2)       LOAD UPT ADDRESS\n         USING UPT,R4\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         TM    FLAG1,X'03'         IS NEW SUPPORT IN EFFECT?\n         BZ    BATCHCNT            NO. DO OLD PROCESSING.\n         C     R8,=F'8'            IS LENGTH 8?\n         BL    BATCHNL7            NO. DO PROCESSING FOR 7 OR LESS\n         TM    FLAG1,X'01'         IS 8-CHAR SUPPORT OFF?\n         BO    BATCHERR            YES, POST ERROR MESSAGE.\n*                                  NO. UPDATE ALL FIELDS.\n         MVC   PSCBUSER(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   PSCBUSRL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   PSCB+X'54'(8),NEWID      PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'            PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),=C'>7BYTES'  PUT INDICATOR IN OLD FIELD\n         MVC   UPTPREFL(1),=X'07'       PUT STANDARD LENGTH OF 7\n         MVC   UPT+X'21'(8),NEWID       PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'             PUT LENGTH IN NEW FIELD\n         B     BATCHCU8                 DONE WITH PSCB PROCESSING\n*                                  PROPER 8-CHAR SUPPORT DONE.\nBATCHERR DS    0H                  8-CHARACTER IDS NOT SUPPORTED\n         TPUT  MSG0,L'MSG0         SHOW ERROR MESSAGE\n         B     EOJ4\nBATCHNL7 DS    0H                  NEWID IS 7 CHARS OR LESS\n*                                  AND THE SYSTEM SUPPORTS 8-CHAR.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n         MVC   PSCB+X'54'(8),NEWID PUT WHOLE ID IN NEW FIELD\n         STC   R8,PSCB+X'20'       PUT LENGTH IN NEW FIELD\n         MVC   UPT+X'21'(8),NEWID  PUT WHOLE ID IN NEW FIELD\n         STC   R8,UPT+X'29'        PUT LENGTH IN NEW FIELD\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         B     BATCHCU8            DONE WITH PSCB PROCESSING\n*\nBATCHCNT DS    0H                  SYSTEM DOES NOT SUPPORT 8-CHAR\n         C     R8,=F'8'            CHECK IF ID LENGTH IS 8\n         BE    BATCHERR            IT IS. SEND ERROR MESSAGE.\nBATCHOLD DS    0H                  LENGTH NOT 8. FILL OLD FIELDS.\n         MVC   PSCBUSER(7),NEWID   SET USERID TO PARAMETER VALUE\n         STC   R8,PSCBUSRL         PUT USERID LENGTH INTO PSCB\n*                                  AND ZERO NEW FIELDS.\n         MVC   PSCB+X'54'(8),ZEROES   NEW FIELD NOW WORKING YET\n         MVI   PSCB+X'20',X'00'    PUT ZEROES IN NEW FIELD LENGTH\n         MVC   UPTPREFX(7),NEWID   SET PREFIX TO PARAMETER VALUE\n         STC   R8,UPT+X'17'        PUT PREFIX LENGTH INTO UPTB\n         MVC   UPT+X'21'(8),ZEROES ZERO NEW PREFIX FIELD\n         MVI   UPT+X'29',X'00'     ZERO NEW PREFIX LENGTH\nBATCHCU8 DS    0H\n         L     R1,12(,R9)          POINT TO TIOT\n         MVC   0(8,R1),NEWID       SET TIOT JOBNAME TO NEWID\n         L     R1,X'B0'(,R10)      POINT TO ASCB JOBNAME\n*        LTR   R1,R1               NONE ?\n*        BZ    NOAJ                B IF NOTHING\n         MVC   0(8,R1),NEWID       SET ASCB JOBNAME TO NEWID\nGETJCT   DS    0H\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX\n         MVC   X'18'(8,R1),NEWID   MOVE IN NEWID\nGETJMR   DS    0H  *---------- >   JMR USERID\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R1,X'104'(,R1)      POINT TO JCT PREFIX\n         ST    R7,SAVER7B          SAVE WORK REGISTER\n         XR    R7,R7               CLEAR WORK REGISTER\n         ICM   R7,7,X'96'(R1)      POINT TO JMR POINTER\n         MVC   X'10'(8,R7),BLANKS  BLANK OUT ID FIELD\n         MVC   X'10'(8,R7),NEWID   PUT IN NEW ID\n         L     R7,SAVER7B          RESTORE WORK REGISTER\nNOAJ     L     R1,X'6C'(,R10)      POINT TO ASXB\n*        CLI   X'C0'(R1),X'00'     ANY JOBNAME ?\n*        BZ    LINKBC              B IF NONE\n         MVC   X'C0'(8,R1),NEWID   SET ASXB JOBNAME TO NEWID\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n*        CLI   X'14'(R1),X'00'     ANY USERID LENGTH\n*        BZ    LINKBC              B IF NONE\n         STC   R8,X'14'(,R1)       CHANGE USERID LENGTH\n         MVC   X'15'(8,R1),NEWID   CHANGE USERID\n* ---------------------------- >   LWA SUPPORT\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'14'(,R1)       POINT TO LWA\n         TM    FLAG1,X'02'         8-CHARACTER ID IN EFFECT?\n         BNO   NOLWA8              NOPE. SKIP THAT UPDATE.\nNOTEQ8   DS    0H\n         C     R8,=F'8'            DID WE CODE 8 CHARS IN NEWID?\n         BL    LESTH8              YES. EXIT WITH ERROR MESSAGE.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  BLANK ENTIRE FIELD.\n         B     LESTH8A\nLESTH8   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         MVC   X'49'(7,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   X'49'(7,R1),NEWID   USE OLD FIELD TOO\nLESTH8A  DS    0H\n         LA    R3,X'1DC'(,R1)      NEW LWA USERID FIELD\n         MVC   0(8,R3),NEWID       LOAD NEW FIELD TOO\n         B     YESLWA8\nNOLWA8   DS    0H\n         TM    FLAG1,X'01'         NEW SYSTEM BUT NO 8-CHAR\n         BZ    NO8SUP              NOPE. SAME UPDATE AS BEFORE.\n         C     R8,=F'8'            DID WE CODE 8 CHAR ID?\n         BNL   BATCHERR            YES. NO SUPPORT, SO ERRMSG.\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   X'49'(8,R1),BLANKS  CLEAR ENTIRE FIELD FIRST.\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         LA    R3,X'1DC'(,R1)      NO. FILL NEW LWA USERID FIELD TOO\n         MVC   0(8,R3),NEWID       AND LOAD WITH USERID\n         B     YESLWA8\nNO8SUP   DS    0H\n         STC   R8,X'48'(,R1)       CHANGE USERID LENGTH\n         LA    R3,X'49'(,R1)       POINT TO LWA USERID\n         MVC   0(7,R3),NEWID       CHANGE USERID\n         LA    R3,X'1DC'(,R1)      POINT TO NEW USERID FIELD TOO\n         MVC   0(8,R3),ZEROES      AND LOAD WITH USERID\nYESLWA8  DS    0H\n* ---------------------------- >   END LWA SUPPORT\n         L     R1,X'38'(,R10)      POINT TO ASCBCSCB\n         LR    R8,R1               SAVE CSCB ADDRESS\n         MVC   X'8'(8,R1),NEWID    CHANGE USERID\n         LR    R1,R8               RELOAD CSCB\n         L     R1,X'DC'(,R1)       POINT TO CSCX\n         MVC   X'18'(8,R1),NEWID   MOVE ID TO CSCX\n         L     R1,X'90'(,R10)      POINT TO ASCBOUCB\n         LA    R1,X'D0'(,R1)       POINT TO OUCBUSRD\n         MVC   X'0'(8,R1),NEWID    CHANGE USERID\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'F0'(,R1)       POINT TO VAB\n         L     R1,4(,R1)           POINT TO CAUB\n         MVC   X'14'(8,R1),NEWID   MOVE ID TO CAUB\n         L     R1,X'150'(,R10)     POINT TO ASSB\n         L     R1,X'A8'(,R1)       POINT TO JSAB\n         MVC   X'2C'(8,R1),NEWID   MOVE USERID TO USERID\n         MVC   X'1C'(8,R1),NEWID   MOVE USERID TO JOBNAME\nLINKBC   DS    0H\n         L     R1,X'3C'(,R10)      POINT TO TSB\n         MVC   X'90'(8,R1),NEWID   MOVE IN USERID\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nSAVER7A  DS    F\nSAVER7B  DS    F\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "USZT$": {"ttr": 18441, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(USZT)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETCODE AC(1)\n SETSSI  CB495222\n NAME    USZT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UTKGP": {"ttr": 18443, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UTKGP    TITLE 'UTKGP - CHANGE USERID FIELD IN THE UTOKEN'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   UTKGP USERID                                      *\n*                                                                     *\n*       FUNCTION:   CHANGE GROUPID:   UTOKEN                          *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUTKGP    CSECT\nUTKGP    RMODE 24\nUTKGP    AMODE 31\n         USING UTKGP,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UTKGP   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* ------------------------------------------------------------------- *\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n* ---------------------------- >   ACEE SUPPORT BELOW\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         L     R1,X'A4'(,R1)       POINT TO UTOKEN\n         MVC   X'48'(8,R1),NEWID   CHANGE TOKEN GROUPID\n* ---------------------------- >   ACEE SUPPORT ABOVE\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTKGP$": {"ttr": 18447, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(UTKGP)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   UTKGP\n SETSSI  CB500222\n SETCODE AC(1)\n NAME    UTKGP(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UTKID": {"ttr": 18689, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UTKID    TITLE 'UTKID - CHANGE USERID FIELD IN THE UTOKEN'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*                   THIS PROGRAM IS IN THE PUBLIC DOMAIN.             *\n*                                                                     *\n*         SYNTAX:   UTKID USERID                                      *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID:  UTOKEN                            *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUTKID    CSECT\nUTKID    RMODE 24\nUTKID    AMODE 31\n         USING UTKID,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UTKID   VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL16' Public Domain '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         ST    R2,PSCBADDR\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO. STOP ACTION.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n* ------------------------------------------------------------------- *\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n* CHECK HERE IF NEW USERID IS 8-CHARACTERS.\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n* ---------------------------- >   ACEE SUPPORT BELOW\n         L     R1,X'6C'(,R10)      POINT TO ASXB\n         L     R1,X'C8'(,R1)       POINT TO ACEE\n         L     R1,X'A4'(,R1)       POINT TO UTOKEN\n         MVC   X'40'(8,R1),NEWID   CHANGE USERID\n* ---------------------------- >   ACEE SUPPORT ABOVE\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nZEROES   DC    XL8'00'             8 ZEROES\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "UTKID$": {"ttr": 18693, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,USER=IBMUSER,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.B.ASM(UTKID)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   UTKID\n SETSSI  CB500222\n SETCODE AC(1)\n NAME    UTKID(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UTSB": {"ttr": 18695, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "UTSB     TITLE 'UTSB - CHANGE PSCBUSER AND PSCBUSRL TO USERID YOU WANT'\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*  DOCUMENTATION:   THIS PROGRAM IS MEANT TO BE RUN AS A TSO          *\n*                   COMMAND.   MUST BE RUN AUTHORIZED.                *\n*                                                                     *\n*         SYNTAX:   UTSB USERID                                       *\n*                                                                     *\n*       FUNCTION:   CHANGE USERID IN TSBX - NEEDED FOR LOGONHERE      *\n*                                                                     *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         SPACE 1\n*        REGS\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE 1\nSP000    EQU   0\n         SPACE 1\nUTSB     CSECT\n         USING UTSB,R12\n         B     BEGINN-*(,R15)\n         DC    AL1(16),CL16'UTSB VER 1.1'\n         DC    CL16' &SYSDATE &SYSTIME '\nBEGINN   STM   R14,R12,12(R13)\n         LR    R12,R15\n         LR    R11,R1              PRESERVE CPPL POINTER.\n         GETMAIN RU,LV=DATALEN,SP=SP000,LOC=BELOW\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING DATAAREA,R13\n         SPACE 1\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*              TEST FOR 8-CHARACTER USERID SUPPORT                  *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         XC    FLAG1,FLAG1         ZERO FLAG BYTE\n         L     R6,16               CVT\n         L     R6,X'9C'(,R6)       TSVT\n         ST    R6,TSVTADDR         STORE TSVT ADDRESS\n         TM    6(R6),X'08'         IS THIS FIELD 08?\n         BO    TEST8CHR            FLIP FLAG BIT\n         CLI   6(R6),X'00'         IS IT 00, THE OLD WAY?\n         BE    TEST8END            YES. DON'T FLIP ANYTHING\nTEST7CHR DS    0H                  NOT 00 AND NOT 08.\n         OI    FLAG1,X'01'         SUPPORT ON BUT 7-CHAR UID LIMIT\n         B     TEST8END            THEN GET OUT\nTEST8CHR DS    0H                  8-CHAR SUPPORT IS ON\n         OI    FLAG1,X'02'         SUPPORT ON AND 8-CHAR UID LIMIT\nTEST8END DS    0H                  END OF ROUTINE\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n         L     R1,16               POINT TO CVT.\n         L     R1,0(,R1)           POINT TO TCB/ASCB WORDS\n         L     R10,12(,R1)         POINT TO ASCB.\n         L     R9,4(,R1)           POINT TO TCB.\n         L     R1,X'B4'(,R9)       POINT TO JSCB.\n         L     R2,X'108'(,R1)      POINT TO PSCB.\n         LA    R2,0(,R2)           CLEAR HIGH BYTE.\n         LTR   R2,R2               ANY PSCB?\n         BZ    EOJ8                GET OUT.  NOT TSO.\n         USING PSCB,R2\n         TM    PSCBATR1,PSCBACCT   ACCT USER?\n         BO    CONT0               YES.  CONTINUE.\n         TM    PSCBATR1,PSCBCTRL   OPER USER?\n         BZ    EOJ4                NO.  GET OUT.\nCONT0    LTR   R11,R11             ANY CPPL?\n         BZ    EOJ8                NO.  GET OUT\n         L     R1,0(,R11)          PT TO CMD BUFFER.\n         LTR   R1,R1               ANY CMD BUFFER?\n         BZ    EOJ4                GET OUT IF NONE\n         LH    R3,0(,R1)           LOAD LENGTH.\n         CH    R3,=H'4'            ANYTHING?\n         BNH   EOJ4                NO.  GET OUT.\n         LR    R5,R3               LENGTH OF COMMAND + 4\n         ICM   R5,14,FULLZERO      CLEAR HI ORDER 3 BYTES\n         ST    R1,CMBUFAD          STORE COMMAND BUFFER ADDRESS\n         L     R1,CMBUFAD          RELOAD COMMAND BUFFER ADDRESS\n         LH    R3,2(,R1)           LOAD OFFSET.\n         SR    R5,R3               SUBTRACT OFFSET FROM FULL LENGTH+4\n         SH    R5,=H'4'            CORRECT FOR LENGTH OF CMDBUFR HEADER\n         BC    13,EOJ8             LESS THAN ZERO OR OVERFLOW, OUT.\n         AR    R1,R3               POINT ...\n         LA    R1,4(,R1)           ... TO CHAR.\n         LA    R6,8                LOAD REG FOR BCT LOOP\n         LR    R7,R1               INITIALIZE POINTER\n         LA    R7,0(,R7)                TO FIRST CHARACTER OF ID\n         LA    R8,0                INITIALIZE CHARACTER COUNT\nCUTIDLEN CLI   0(R7),X'40'         IS THIS CHARACTER A BLANK?\n         BE    NOMORCUT            YES, WE ARE AT THE END OF THE ID.\n         LA    R7,1(,R7)           BUMP ANOTHER CHARACTER\n         LA    R8,1(,R8)           COUNT ANOTHER CHARACTER\n         CR    R8,R5               END OF COMMAND BUFFER ?\n         BNL   NOMORCUT            YES. GET OUT NOW.\n         BCT   R6,CUTIDLEN         TRY FOR BLANK AGAIN\nNOMORCUT DS    0H\n         MVC   NEWID(8),BLANKS     CLEAR FIELD\n         BCTR  R8,0                SUBTRACT 1 FOR EXECUTE\n         EX    R8,MOVEID           MAKE SUBCOMMAND INTO NEW ID\n         OC    NEWID(8),BLANKS     UPPERCASE IT.\nKZ       MODESET KEY=ZERO\n         LA    R8,1(,R8)           BUMP REG BACK TO WHERE IT WAS\n         L     R1,X'224'\n         L     R1,X'3C'(,R1)\n         MVC   X'90'(8,R1),NEWID\nNZ       MODESET KEY=NZERO\n         B     EOJ0                NORMAL END\nEOJ4     LA    R15,4               SET CC = 4.\nEOJ      DS    0H                  BYE.\n         LR    R1,R13\n         L     R13,4(,R13)\n         ST    R15,16(,R13)        PUT RC INTO PASSED SAVE AREA\n         L     R14,12(,R13)\n         FREEMAIN RU,LV=DATALEN,A=(R1),SP=SP000\n         LM    R0,R12,20(R13)\n         BR    R14\nEOJ0     SR    R15,R15             SET CC = 0.\n         B     EOJ                 CONT.\nEOJ8     LA    R15,8               SET CC = 8.\n         B     EOJ                 CONT\n         EJECT\nFULLZERO DC    F'0'\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMOVEID   MVC   NEWID(*-*),0(R1)    EXECUTED\n* - - - - - - - - - - - - - - - - - - - - - - - - *\nMSG0     DC    C'8-CHARACTER USERIDS ARE NOT SUPPORTED.'\nBLANKS   DC    C'        '         8 BLANKS\nBPARM    DC    AL2(BPARME-BPARM,0),C'NON'\nBPARME   EQU   *\n         SPACE 3\n         LTORG\n         SPACE 3\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\n*                     GETMAINED DATA AREA                           *\n* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - *\nDATAAREA DSECT\nSAVE     DS    9D\nPSCBADDR DS    F\nTSVTADDR DS    F\nCMBUFAD  DS    F                   COMMAND BUFFER ADDRESS\nFLAG1    DS    X\nNEWID    DC    C'        '         STORE NEW USERID HERE\n         DS    CL72\n         DS    0D\n         SPACE 1\nDATALEN  EQU   *-DATAAREA          LENGTH OF DATA AREA\n         IKJUPT\n         IKJPSCB\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "UTSB$": {"ttr": 18699, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//IBMUSERU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*     ASM LINKEDIT FROM SOURCE ASM\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=IBMUSER.UID8.TOOLKIT(UTSB)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,4),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   UTSB\n SETSSI  CB495247\n SETCODE AC(1)\n NAME    UTSB(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT222/FILE222.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT222", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}