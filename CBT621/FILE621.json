{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012501000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 646646, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE621.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 646646, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE621.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x0b\\x07'", "DS1TRBAL": "b'^\\xb2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x8a\\x00\\x0b\\x04\\x8b\\x00\\x07\\x00\\x0c'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)_\\x01\\t)_\\x01E\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-22T00:00:00", "modifydate": "2009-10-22T01:45:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-478"}, "text": "REGULAR CBT TAPE - VERSION 478    FILE:  621\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT478.FILE621\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 11 MEMBERS COUNTED; CUMULATIVE SIZE IS 5,722 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/22/09    01:45:46    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00X\\x01\\x03\\to\\x01\\x03\\to\\x08H\\x00\\x17\\x00\\x17\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-04-06T00:00:00", "modifydate": "2003-04-06T08:48:58", "lines": 23, "newlines": 23, "modlines": 0, "user": "SBGOLOB"}, "text": "\"Zhou, Guanghui\" wrote:\n\nHi Sam,\n\nI have designed some TCP/IP NPF Exit Programs to print mainframe\ndatasets directly to any network printer with PCL language support.\nMost laser printers support PCL, such as HP, Xerox, Canon, Lexmark.\nThe program will also generate a banner page to identify the\nsender.\n\n\nIf these programs can be accepted in CBT Tape, I would send them\nvia FTP. Please help to reply.\n\nBest Regards!\n\nHunter Guanghui Zhou\nSenior Systems Engineer, Information Technology\nSobeys Capital Inc. 6355 Viscount Road\nMississagua, L4V 1W2, Ontario, Canada\nTel: 1-(905)-671-5208\nEmail: guanghui.zhou@sobeys.com\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x001\\x01\\x06\\x11_\\x01\\x06\\x11_\\t!\\x00\\x1a\\x00\\x14\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2006-04-25T00:00:00", "modifydate": "2006-04-25T09:21:31", "lines": 26, "newlines": 20, "modlines": 0, "user": "SBGOLOB"}, "text": "Note from Sam Golob:\n\n   I have made adjustments to the support information in\n   this file, according to the email address and (cell)\n   phone number for Hunter Zhou, which is listed here.\n\nSubject:     Good Luck!\nFrom:        \"Zhou, Hunter\" <hunter.zhou@sobeys.com>\nDate:        Fri, 21 Apr 2006 08:42:57 -0400\nTo:          <zhough2000@yahoo.com>\n\nDear All,\n\nAs you might already know, today is my last day in Sobeys.\n\nI wish you continue to success and enjoy everyday in Sobeys.\nPlease keep in touch, and I can be reached at my personal email\naddress zhough2000@yahoo.com.\n\nThanks again for everything.\n\nYours Sincerely,\n\nHunter Zhou\nEmail: zhough2000@yahoo.com\nCell: (416) 602-9567\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "$$NOTE3": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x04\\x01\\t)_\\x01\\t)_\\x01@\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2009-10-22T00:00:00", "modifydate": "2009-10-22T01:40:04", "lines": 24, "newlines": 24, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:   Update to FILE621\nFrom:      dmitche@shazam.net\nDate:      21 Oct 2009 12:54:44 -0500\nTo:        sbgolob@cbttape.org\n\nHi Sam,\n\nAttached please find a copy of NPFIXASM from File621.  I have\naltered it to include the following changes:\n\n*CHANGES                                                              *\n*@DM101909   Add system ID and HW name to HOST line on banner page    *\n*@DM102009   Update PCL form PT02, force simplex, 6LPI, 10CPI         *\n\nLet me know if you have any questions, I hope someone will find this\nof use.\n\nRegards\nDana\n\n--\nDana Mitchell\ndmitche@shazam.net\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE621": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04N\\x00\\x00\\x01\\t)_\\x01\\t)_\\x01E\\x00A\\x00A\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf8@@@'", "ispf": {"version": "04.78", "flags": 0, "createdate": "2009-10-22T00:00:00", "modifydate": "2009-10-22T01:45:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "CBT-478"}, "text": "//***FILE 621 is from Hunter Zhou, and contains some TCP/IP NPF     *   FILE 621\n//*           Exit Programs to print mainframe datasets directly    *   FILE 621\n//*           to any network printer with PCL language support.     *   FILE 621\n//*           Most laser printers support PCL, such as HP,          *   FILE 621\n//*           Xerox, Canon, Lexmark.  The program will also         *   FILE 621\n//*           generate a banner page to identify the sender.        *   FILE 621\n//*                                                                 *   FILE 621\n//*     Package Name: NPF Input Record Exit Programs for            *   FILE 621\n//*                   network printers                              *   FILE 621\n//*     Design      : Hunter Guanghui Zhou                          *   FILE 621\n//*                   Phone: 1-(416)-602-9567                       *   FILE 621\n//*                   E-mail: zhough2000@yahoo.com                  *   FILE 621\n//*     Date        : September 2003                                *   FILE 621\n//*                                                                 *   FILE 621\n//*     Package Description                                         *   FILE 621\n//*     -------------------                                         *   FILE 621\n//*      TCP/IP NPF(Network Print Facility) is a free feature       *   FILE 621\n//*      of OS/390 and z/OS. It can print JES and VTAM data to      *   FILE 621\n//*      network printers via TCP/IP printer servers(LPD            *   FILE 621\n//*      servers).                                                  *   FILE 621\n//*                                                                 *   FILE 621\n//*      NPF provides three different exit interfaces. Here I       *   FILE 621\n//*      created one of them: Input Record Exit. The Input          *   FILE 621\n//*      Record Exit is used to insert a banner page, update        *   FILE 621\n//*      the input record.                                          *   FILE 621\n//*                                                                 *   FILE 621\n//*      Normallly, NPF uses LPR program to send data to remote     *   FILE 621\n//*      printer servers. However, for those printer without        *   FILE 621\n//*      Postscript support features, you cannot print your         *   FILE 621\n//*      data sets in landscape via LPR.                            *   FILE 621\n//*                                                                 *   FILE 621\n//*      This package extends the capability of NPF with            *   FILE 621\n//*      following features:                                        *   FILE 621\n//*                                                                 *   FILE 621\n//*        .Pure TCP/IP, not require SNA gateway                    *   FILE 621\n//*        .Send data directly from Mainframe to network            *   FILE 621\n//*         printers                                                *   FILE 621\n//*        .Insert PCL commands to control the printer              *   FILE 621\n//*         settings.                                               *   FILE 621\n//*        .Support duplex print out (if the printers support).     *   FILE 621\n//*        .Support following Carriage Control data:                *   FILE 621\n//*           .ASA Carriage Control Commands                        *   FILE 621\n//*           .Printer Channel Commands (Machine Code)              *   FILE 621\n//*        .Provide banner page to identify the printer out.        *   FILE 621\n//*                                                                 *   FILE 621\n//*      Here I included 8 exit programs generated by single        *   FILE 621\n//*      assembler source in single JCL. The options are given      *   FILE 621\n//*      via Compiler EXEC SYSPARM.                                 *   FILE 621\n//*                                                                 *   FILE 621\n//*  EXIT     Printer Type        Orientation PAPER   CC  Duplex    *   FILE 621\n//*  ======== =================== =========== ======= === ======    *   FILE 621\n//*  EXPCLLG0 IP Printer w/ PCL 5  LANDSCAPE  Legal   Yes Yes       *   FILE 621\n//*  EXPCLLG1 IP Printer w/ PCL 5  PORTRAIT   Legal   No  Yes       *   FILE 621\n//*  EXPCLLS0 IP Printer w/ PCL 5  LANDSCAPE  Default Yes Yes       *   FILE 621\n//*  EXPCLLS1 IP Printer w/ PCL 5  LANDSCAPE  Default No  Yes       *   FILE 621\n//*  EXPCLPT0 IP Printer w/ PCL 5  PORTRAIT   Default Yes Yes       *   FILE 621\n//*  EXPCLPT1 IP Printer w/ PCL 5  PORTRAIT   Default No  Yes       *   FILE 621\n//*  EXTEXT00 IP Printer w/ TEXT   DEFAULT    Default No  No        *   FILE 621\n//*  EXTEXT01 IP Printer w/ TEXT   DEFAULT    Default Yes No        *   FILE 621\n//*                                                                 *   FILE 621\n//*      EXTEXT01 sends text file (translated any CC to ASCII       *   FILE 621\n//*      control codes) to network text printers. You can use       *   FILE 621\n//*      it to send print data to network impact printers, such     *   FILE 621\n//*      as Printronix P5000.                                       *   FILE 621\n//*                                                                 *   FILE 621\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@README": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x14\\x01\\x03(\\x9f\\x01\\x06\\x11_\\t#\\x01\\x9c\\x01\\x9d\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-10-16T00:00:00", "modifydate": "2006-04-25T09:23:14", "lines": 412, "newlines": 413, "modlines": 0, "user": "ZHOU"}, "text": "                   NPF Input Record Exit Package\n---------------------------------------------------------------------\nPackage Name: NPF Input Record Exit Programs for IP network printers\nDesign      : Hunter Guanghui Zhou\n              Phone: 1-(416)-602-9567\n              E-mail: zhough2000@yahoo.com\nDate        : September, 2003\n\nPackage Description\n-------------------\n TCP/IP NPF(Network Print Facility) is a free feature of OS/390 and\n z/OS. It can print JES and VTAM data to network printers via\n TCP/IP printer servers(LPD servers).\n\n NPF provide three different exit interfaces. Here I created one\n of them: Input Record Exit. The Input Record Exit is used to\n insert a banner page, update the input record.\n\n Normallly, NPF uses LPR program to send data to remote printer\n servers. However, for those printer without Postscript support\n features, you cannot print your data sets in landscape via LPR.\n\n This package extends the capability of NPF with following features:\n   .Pure TCP/IP, not require SNA gateway\n   .Send data directly from Mainframe to network printers\n   .Insert PCL commands to control the printer settings.\n   .Support duplex print out (if the printers support).\n   .Support following Carriage Control data:\n      .ASA Carriage Control Commands\n      .Printer Channel Commands (Machine Code)\n   .Provide banner page to identify the printer out.\n\n The program support both PCL printers and TEXT printers (impact\n printers. You can use PCL forms for laser printers and non-PCL\n for impact printers.\n\nBuild the exit load modules via NPFIXJCL\n========================================\n\n The exit load modules are built for different purposes, which are\n the conbination of the options for printing, such as banner page,\n translate carriage control byte, use PCL and forms and orientations.\n\nThe job NPFIXJCL builds the exit load module according to the input\nin SYSIN DD.\n\nFollowing information is required to specified in SYSIN DD:\n  SOURCE        THE SOURCE ASSEMBLER PROGRAM MEMBER NAME\n  SOURCELIB     THE PDS OF SOURCE PROGRAM\n  TCPIPMACLIB   TCP/IP MACRO LIBRARY\n  REFRESHLLA    WHETHER TO REFRESH LINKLST AFTER BUILD EXIT MODULES.\n  LOADLIB       THE LOADLIB TO STORE THE EXIT PROGRAMS, MUST BE IN\n                YOUR SYSTEM LINKLST\n  JOBCARD       JOBCARD MEMBER\n  LISTDETAIL    The compile and link list option.\n  EXIT          Each EXIT statement is a load module to be built\n  LOGO          THE LOGO OF THE BANNER PAGE\n  E2ATABLE      THE EBCDIC TO ASCII TRANSLATION TABLE.\n\n\nSyntax of SYSIN DD of job NPFIXJCL\n==================================\nComments start with '#'\n\n#######################################################################\n#              INPUT FILE FOR NPF EXIT BUIULD PROGRAM\n#              ======================================\n# KEYWORD DESCRIPTIONS:\n# SOURCE      : OPTIONAL, DEFAULT=NPFIXASM\n#               THE SOURCE ASSEMBLER PROGRAM MEMBER NAME\n# SOURCELIB   : OPTIONAL, DEFAULT=PDS of current REXX program.\n#               THE PDS OF SOURCE PROGRAM\n# TCPIPMACLIB : OPTIONAL, DEFAULT= TCPIP.SEZACMAC\n#               TCP/IP MACRO LIBRARY\n# REFRESHLLA  : OPTIONAL, DEFAULT= YES\n#               WHETHER TO REFRESH LINKLST AFTER BUILD EXIT MODULES.\n# LOADLIB     : MANDATORY, no DEFAULT\n#               THE LOADLIB TO STORE THE EXIT PROGRAMS, MUST BE IN\n#               YOUR SYSTEM LINKLST\n# JOBCARD     : OPTIONAL, DEFAULT=Member NPFEXBJC of current REXX PDS.\n#               The jobcard information to be extracted from.\n# LISTDETAIL  : OPTIONAL, DEFAULT=NO\n#               The compile and link LIST/NOLIST option in EXEC PARM.\n# EXIT        : MANDATORY, No default\n#               Each EXIT statement is a load module to be built\n#               See the comments below for detail description.\n#######################################################################\n  LOADLIB     = SYS1.TEST.LINKLIB                # loadlib for exits\n######################################################################\n# Field Descriptions in EXIT statement\n# ------------------------------------\n# TITL   : The title for each exit load module, must be 'EXIT'.\n# MODULE : The load module name which will be build into LOADLIB.\n# BNR    : YES/NO to generate the banner page.\n#          If no, the hostname is ignored.\n# CC     : YES/NO to translate the carriage control characters.\n# PCL    : YES/NO to insert PCL commands for printers support PCL.\n#          Normally the laser printers will support PCL commands.\n#          If no, the FORM field is ignored.\n# FORM   : The predefined form for PCL commands.\n#          The form will control the font-size, orientation, and\n#          paper types.\n#           FORM ORIENT    PAPER    Duplex SPACES PITCH\n#           ==== ========= ======== ====== ====== =====\n#           PT00 PORTRAIT  DEFATULT YES      5     17\n#           PT01 PORTRAIT  DEFATULT YES      5     14\n#           PT02 PORTRAIT  DEFATULT NO       5     17\n#           LS00 LANDSCAPE DEFAULT  YES      4.5   14\n#           LS01 LANDSCAPE DEFAULT  YES      5.7   13\n#           LS02 LANDSCAPE DEFAULT  NO       4.5   14\n#           LG00 LANDSCAPE LEGAL    YES      4.5   14\n#           LG01 PORTRAIT  LEGAL    YES      5     17\n#     * Duplex YES means use duplex if the printer supports it.\n#     * SPACES 5 means 5/48 inch vertical motion index, or\n#       spaces between lines.\n#     * PITCH is the number of characters per inch, or pitch.\n#       This reflects the size of the font.\n# SKP      : YES/NO to skip the first form feed control character\n#          This is for Carriage Control files.\n# HOSTNAME : The TCP/IP Hostname of the mainframe to use the exit.\n#          This hostname is only used in banner page for informational\n#          purpose. Host name is ignored if BNR is NO.\n######################################################################\n#TITL MODULE   BNR CC  PCL FORM SKP HOSTNAME             NPF FORM/DEST\n#==== ======== === === === ==== === ===================  =============\n EXIT=EXPCLLS0,YES,YES,YES,LS00,YES,maintest.agora.lan # LSCC\n EXIT=EXPCLLS1,YES,NO ,YES,LS00,YES,maintest.agora.lan # LSNC\n EXIT=EXPCLLS2,YES,YES,YES,LS01,YES,maintest.agora.lan # LSC1\n EXIT=EXPCLLS3,YES,YES,YES,LS02,YES,maintest.agora.lan # LSSC\n EXIT=EXPCLPT0,YES,YES,YES,PT00,YES,maintest.agora.lan # PTCC\n EXIT=EXPCLPT1,YES,NO ,YES,PT00,YES,maintest.agora.lan # PTNC\n EXIT=EXPCLPT2,YES,YES,YES,PT01,YES,maintest.agora.lan # PTC1\n EXIT=EXPCLPT3,YES,YES,YES,PT02,YES,maintest.agora.lan # PTSC\n EXIT=EXPCLLG0,YES,YES,YES,LG00,YES,maintest.agora.lan # LGCC\n EXIT=EXPCLLG1,YES,YES,YES,LG01,YES,maintest.agora.lan # LGSC\n EXIT=EXTEXT00,NO ,NO ,NO ,    ,YES,maintest.agora.lan # TXT0\n EXIT=EXTEXT01,NO ,YES,NO ,    ,YES,maintest.agora.lan # TXT1\n EXIT=EXTEXT02,YES,YES,NO ,    ,YES,maintest.agora.lan # TXT2\n######################################################################\n# LOGO OF THE BANNER PAGE\n# =======================\n#\n# 1. MAXIMUM 17 RECORDS (lines)\n# 2. EACH RECORD IS 80 BYTE LONG, program will pad with spaces\n# 3. ANY RECORDS BEYOND 17th LINE WILL BE IGNORED.\n# 4. If the total records less than 17, then the empty records will be\n#    added to make up total 17 records.\n# 5. No comments is allowed.\nBANNER_LOGO_START\n*  OS/390 V2.10                               TCP/IP Network Print Facility    *\n*            ...                                                .::::.         *\n*         .:::::       :::                                      ::::::         *\n*        .:::'''       :::               ...      ...  ..       ::::::         *\n*        :::  .:::::.  :::::::.   .:::::.'::.    .::'.:::  .::::'::::'::::.    *\n*        ::: .:::::::. ::::::::. .:::::::.'::.  .::':::''  ::::::    ::::::    *\n*        ::: :::   ::: :::   ::: :::  ::'' ':::.::  :::    ::::::    ::::::    *\n*       .::: :::   ::: :::   ::: :::.:' .   ::::'  .:::    '::::.::::.::::'    *\n*    ..::::' '::...::' '::...::' ':::. :::  :::' ::::'          ::::::         *\n*    ::::''   ':::::'   ':::::'   ':::::'' .::'  :::'           ::::::         *\n*    '''                                  .::'                  '::::'         *\n*                                        .::'                                  *\n*                     Sobeys Ontario Mainframe System                          *\n*                                                                              *\n*                          Network Print Service                               *\n*                                                                              *\n*     Information Technology, 6355 Viscount Road, Mississauga, ON L4V 1W2      *\nBANNER_LOGO_STOP\n######################################################################\n# EBCDIC TO ASCII Translation table\n# =================================\n# 1. Any leading spaces and empty line will be ignored.\n# 2. There must be 16 lines with 32 bytes each line\n# 3. The bytes must be from 0-9 A-F.\n# 4. Any trailing comments will be ignored.\nEBCDIC_TO_ASCCII_TABLE_START\n   00010203DC09C37FCAB2D50B0C0D0E0F  #00\n   10111213DBDA08C11819C8F21C1D1E1F  #10\n   C4B3C0D9BF0A171BB4C2C5B0B1050607  #20\n   CDBA16BCBBC9CC04B9CBCEDF1415FE1A  #30\n   20FF838485A0C68687A4BD2E3C282B7C  #40\n   268288898AA18C8B8DE121242A293BAA  #50\n   2D2FB68EB7B5C78F80A5DD2C255F3E3F  #60\n   9B90D2D3D4D6D7D8DE603A2340273D22  #70\n   9D616263646566676869AEAFD0ECE7F1  #80\n   F86A6B6C6D6E6F707172A6A791F792CF  #90\n   E67E737475767778797AADA8D1EDE8A9  #A0\n   5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E  #B0\n   7B414243444546474849F0939495A2E4  #C0\n   7D4A4B4C4D4E4F505152FB968197A398  #D0\n   5CF6535455565758595AFDE299E3E0E5  #E0\n   30313233343536373839FCEA9AEBE99F  #F0\nEBCDIC_TO_ASCCII_TABLE_STOP\n######################################################################\n/*\n#######################################################################\n#              INPUT FILE FOR NPF EXIT BUIULD PROGRAM\n#              ======================================\n# KEYWORD DESCRIPTIONS:\n# SOURCE      : OPTIONAL, DEFAULT=EXITNPFR\n#               THE SOURCE ASSEMBLER PROGRAM MEMBER NAME\n# SOURCELIB   : OPTIONAL, DEFAULT=PDS of current REXX program.\n#               THE PDS OF SOURCE PROGRAM\n# TCPIPMACLIB : OPTIONAL, DEFAULT= TCPIP.SEZACMAC\n#               TCP/IP MACRO LIBRARY\n# REFRESHLLA  : OPTIONAL, DEFAULT= YES\n#               WHETHER TO REFRESH LINKLST AFTER BUILD EXIT MODULES.\n# LOADLIB     : MANDATORY, no DEFAULT\n#               THE LOADLIB TO STORE THE EXIT PROGRAMS, MUST BE IN\n#               YOUR SYSTEM LINKLST\n# JOBCARD     : OPTIONAL, DEFAULT=Member NPFEXBJC of current REXX PDS.\n#               JOBCARD MEMBER\n# LISTDETAIL  : OPTIONAL, DEFAULT=NO\n#               The compile and link list option.\n# EXIT        : MANDATORY, No default\n#               Each EXIT statement is a load module to be built\n#               See the comments below for detail description.\n#######################################################################\n  LOADLIB     = SYS1.TEST.LINKLIB                # loadlib for exits\n######################################################################\n# Field Descriptions in EXIT statement\n# ------------------------------------\n# TITL   : The title for each exit load module, must be 'EXIT'.\n# MODULE : The load module name which will be build into LOADLIB.\n# BNR    : YES/NO to generate the banner page.\n#          If no, the hostname is ignored.\n# CC     : YES/NO to translate the carriage control characters.\n# PCL    : YES/NO to insert PCL commands for printers support PCL.\n#          Normally the laser printers will support PCL commands.\n#          If no, the FORM field is ignored.\n# FORM   : The predefined form for PCL commands.\n#          The form will control the font-size, orientation, and\n#          paper types.\n#           FORM ORIENT    PAPER    Duplex SPACES PITCH\n#           ==== ========= ======== ====== ====== =====\n#           PT00 PORTRAIT  DEFATULT YES      5     17\n#           PT01 PORTRAIT  DEFATULT YES      5     14\n#           PT02 PORTRAIT  DEFATULT NO       5     17\n#           LS00 LANDSCAPE DEFAULT  YES      4.5   14\n#           LS01 LANDSCAPE DEFAULT  YES      5.7   13\n#           LS02 LANDSCAPE DEFAULT  NO       4.5   14\n#           LG00 LANDSCAPE LEGAL    YES      4.5   14\n#           LG01 PORTRAIT  LEGAL    YES      5     17\n#     * Duplex YES means use duplex if the printer supports it.\n#     * SPACES 5 means 5/48 inch vertical motion index, or\n#       spaces between lines.\n#     * PITCH is the number of characters per inch, or pitch.\n#       This reflects the size of the font.\n# SKP      : YES/NO to skip the first form feed control character\n#          This is for Carriage Control files.\n# HOSTNAME : The TCP/IP Hostname of the mainframe to use the exit.\n#          This hostname is only used in banner page for informational\n#          purpose. Host name is ignored if BNR is NO.\n######################################################################\n#TITL MODULE   BNR CC  PCL FORM SKP HOSTNAME  NPF FORM\n#==== ======== === === === ==== === ========================= ========\n EXIT=EXPCLLS0,YES,YES,YES,LS00,YES,maintest.agora.lan\n EXIT=EXPCLLS1,YES,NO ,YES,LS00,YES,maintest.agora.lan\n EXIT=EXPCLLS2,YES,YES,YES,LS01,YES,maintest.agora.lan\n EXIT=EXPCLLS3,YES,YES,YES,LS02,YES,maintest.agora.lan\n EXIT=EXPCLPT0,YES,YES,YES,PT00,YES,maintest.agora.lan\n EXIT=EXPCLPT1,YES,NO ,YES,PT00,YES,maintest.agora.lan\n EXIT=EXPCLPT2,YES,YES,YES,PT01,YES,maintest.agora.lan\n EXIT=EXPCLPT3,YES,YES,YES,PT02,YES,maintest.agora.lan\n EXIT=EXPCLLG0,YES,YES,YES,LG00,YES,maintest.agora.lan\n EXIT=EXPCLLG1,YES,YES,YES,LG01,YES,maintest.agora.lan\n EXIT=EXTEXT00,NO ,NO ,NO ,    ,YES,maintest.agora.lan\n EXIT=EXTEXT01,NO ,YES,NO ,    ,YES,maintest.agora.lan\n EXIT=EXTEXT02,YES,YES,NO ,    ,YES,maintest.agora.lan\n######################################################################\n# LOGO OF THE BANNER PAGE\n# =======================\n#\n# 1. MAXIMUM 17 RECORDS (lines)\n# 2. EACH RECORD IS 80 BYTE LONG, program will pad with spaces\n# 3. ANY RECORDS BEYOND 17th LINE WILL BE IGNORED.\n# 4. If the total records less than 17, then the empty records will be\n#    added to make up total 17 records.\nBANNER_LOGO_START\n*  OS/390 V2.10                               TCP/IP Network Print Facility    *\n*            ...                                                .::::.         *\n*         .:::::       :::                                      ::::::         *\n*        .:::'''       :::               ...      ...  ..       ::::::         *\n*        :::  .:::::.  :::::::.   .:::::.'::.    .::'.:::  .::::'::::'::::.    *\n*        ::: .:::::::. ::::::::. .:::::::.'::.  .::':::''  ::::::    ::::::    *\n*        ::: :::   ::: :::   ::: :::  ::'' ':::.::  :::    ::::::    ::::::    *\n*       .::: :::   ::: :::   ::: :::.:' .   ::::'  .:::    '::::.::::.::::'    *\n*    ..::::' '::...::' '::...::' ':::. :::  :::' ::::'          ::::::         *\n*    ::::''   ':::::'   ':::::'   ':::::'' .::'  :::'           ::::::         *\n*    '''                                  .::'                  '::::'         *\n*                                        .::'                                  *\n*                     Sobeys Ontario Mainframe System                          *\n*                                                                              *\n*                          Network Print Service                               *\n*                                                                              *\n*     Information Technology, 6355 Viscount Road, Mississauga, ON L4V 1W2      *\nBANNER_LOGO_STOP\n######################################################################\n# EBCDIC TO ASCII Translation table\n# =================================\n# 1. Any leading spaces and empty line will be ignored.\n# 2. There must be 16 lines with 32 bytes each line\n# 3. The bytes must be from 0-9 A-F.\n# 4. Any trailing comments will be ignored.\nEBCDIC_TO_ASCCII_TABLE_START\n   00010203DC09C37FCAB2D50B0C0D0E0F  #00\n   10111213DBDA08C11819C8F21C1D1E1F  #10\n   C4B3C0D9BF0A171BB4C2C5B0B1050607  #20\n   CDBA16BCBBC9CC04B9CBCEDF1415FE1A  #30\n   20FF838485A0C68687A4BD2E3C282B7C  #40\n   268288898AA18C8B8DE121242A293BAA  #50\n   2D2FB68EB7B5C78F80A5DD2C255F3E3F  #60\n   9B90D2D3D4D6D7D8DE603A2340273D22  #70\n   9D616263646566676869AEAFD0ECE7F1  #80\n   F86A6B6C6D6E6F707172A6A791F792CF  #90\n   E67E737475767778797AADA8D1EDE8A9  #A0\n   5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E  #B0\n   7B414243444546474849F0939495A2E4  #C0\n   7D4A4B4C4D4E4F505152FB968197A398  #D0\n   5CF6535455565758595AFDE299E3E0E5  #E0\n   30313233343536373839FCEA9AEBE99F  #F0\nEBCDIC_TO_ASCCII_TABLE_STOP\n######################################################################\n\nNPF Customization Instructions\n------------------------------\n  1.Compile and generate load module into any LINKLST library.\n    Refer the sample compile job EXITNPFC.\n\n  2.In TCP/IP Network Print Facility ISPF Panels,\n    a. Select O for Options\n    b. Select A for ADD\n    c. Enter the option name, i.e. EXPCLLS0\n    d. Enter EXPCLLS0 as the name of 'Input Record Exit'\n    e. Enter 'BINARY NOBURST' as the LPR options\n\n  3.Create a NPF printer to use this NPF option\n    In TCP/IP Network Print Facility ISPF Panels,\n    a. Select R for Routing\n    b. Select A for ADD\n    c. Enter the printer name, i.e. VCIT3\n       Enter the minor name i.e. ALSCC(Class A, Form LSCC)\n    d. Enter EXPCLLS0 as the option name\n       Enter IP address of target network PCL printer.\n       Enter IPPRT as printer name, or given by printer server.\n\n NPF Configuration Example\n *************************\n Here is sample definitions for network printer with TCP/IP address\n 211.128.74.49:\n\n 1. NPF Options\n We define 4 NPF options for 4 different forms\n OPTION   EXIT NAME LPR OPTION\n ======== ========= ===================\n EXPCLLG0 EXPCLLG0  BINARY NOBURST\n EXPCLLS0 EXPCLLS0  BINARY NOBURST\n EXPCLPT0 EXPCLPT0  BINARY NOBURST\n EXPCLPT1 EXPCLPT1  BINARY NOBURST\n\n 2. NPF Routing\n We define 4 NPF routings with follow\n\n MAJOR    MINOR OPTION   IP ADDR        PRINTER NAME\n ======== ===== ======== ============== ============\n VCIT1    ASTD  EXPCLPT0 211.128.74.49  ITPRT\n VCIT1    ALGCC EXPCLLG0 211.128.74.49  ITPRT\n VCIT1    ALSCC EXPCLLS0 211.128.74.49  ITPRT\n VCIT1    APTCC EXPCLPT1 211.128.74.49  ITPRT\n\n Here IP Addr is the IP address of network printer, Printer name is any\n name for printer, or printer name in printer server if you use the\n printer server other than network printer.\n Major Name is JES DEST name (printer name).\n Minor Name is SYSOUT CLASS plus FORM name.\n\n MAJOR of VCIT1 and MINOR ALSCC mean the output data will be accepted\n when its DEST is VCIT1, SYSOUT CLASS is A and FORM is LSCC.\n\nUsage Instruction\n-----------------\n1. Make sure NPF is installed and running (both NPF Writer and\n  Queue manager).\n\n2. You should print the dataset with Carriage Control attributes\n  i.e. FBA, VBA datasets, to printer with option CC.\n\n3. Refer sample JCL to print the data set:\n //PRINT   EXEC PGM=IEBGENER\n //SYSPRINT  DD SYSOUT=*\n //SYSOUT    DD SYSOUT=*\n //SYSIN     DD DUMMY\n //SYSUT1    DD DISP=SHR,DSN=SP2487.TEMP\n //SYSUT2    DD SYSOUT=(A,,LSCC),DEST=VCIT1\n\n\nRestrictions\n------------\n Because the job information can be only provided by JES2 in JSPA,\n this package may not suitable for VTAM printers.\n\n This package has been only tested in OS/390 V2.10.\n\nQuestions & suggestions\n=======================\n Should you have any question, please contact Hunter Zhou at\n zhough2000@yahoo.com .\n\n April, 2003\n\n Hunter Guanghui Zhou\n Phone: 1-(416)-602-9567\n E-mail: zhough2000@yahoo.com\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NPFIXASM": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\t)_\\x01\\t)_\\x01A\\x05\\x04\\x05\\x04\\x00\\x00\\xc4\\xd4\\xc9\\xe3\\xc3\\xc8\\xc5@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2009-10-22T00:00:00", "modifydate": "2009-10-22T01:41:00", "lines": 1284, "newlines": 1284, "modlines": 0, "user": "DMITCHE"}, "text": "EXITNPFR TITLE 'NPF Input Record Exit Program for network printers'\n***********************************************************************\n*---------------------------------------------------------------------*\n*                   NPF Input Record Exit                             *\n*---------------------------------------------------------------------*\n* Program: EXITNPFR                                                   *\n* Purpose: NPF Input Record Exit for network printers                 *\n* Design : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* Date   : April 14, 2003                                             *\n* Description:                                                        *\n*   This exit program is used for network printers with following     *\n*   specifications:                                                   *\n*                                                                     *\n* Printer Type        Orientation PAPER   CC  Duplex Lines/Page       *\n* =================== =========== ======= === ====== ==========       *\n* IP Printer w/ PCL 5  LANDSCAPE  Default Yes Yes    64               *\n*                                                                     *\n* Installation Instructions:                                          *\n*                                                                     *\n*  1.Compile and generate load module into any LINKLST library.       *\n*  2.In TCP/IP Network Print Facility ISPF Panels,                    *\n*    a. Select O for Options                                          *\n*    b. Select A for ADD                                              *\n*    c. Enter the option name, i.e. EXITNPFR                          *\n*    d. Enter EXITNPFR as the name of 'Input Record Exit'             *\n*    e. Enter 'BINARY CFFIRST' as the LPR options                     *\n*  3.Create a NPF printer to use this NPF option                      *\n*    In TCP/IP Network Print Facility ISPF Panels,                    *\n*    a. Select R for Routing                                          *\n*    b. Select A for ADD                                              *\n*    c. Enter the printer name, i.e. VCIT3                            *\n*       Enter the minor name i.e. ALSCC(Class A, Form LSCC)           *\n*    d. Enter EXITNPFR as the option name                             *\n*       Enter IP address of target network PCL printer.               *\n*       Enter IPPRT as printer name, or given by printer server.      *\n*                                                                     *\n* Compile:                                                            *\n*   This exit program is a reentrent program. RENT option must be     *\n*   specified in LINK PARM.                                           *\n*   The host name should be given in SYSPARM in PARM.C.               *\n*                                                                     *\n* //COMPILE EXEC ASMACL,PARM.L='LIST,RENT',                           *\n* //  PARM.C='SYSPARM(maintest.agora.lan)'    <== host name           *\n* //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(EXITNPFR)             *\n* //C.SYSLIB  DD DISP=SHR,DSN=TCPIP.SEZACMAC                          *\n* //          DD DISP=SHR,DSN=SYS1.MACLIB                             *\n* //          DD DISP=SHR,DSN=SYS1.MODGEN                             *\n* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB                       *\n* //L.SYSIN   DD *                                                    *\n*   NAME EXITNPFR(R)                                                  *\n* /*                                                                  *\n*                                                                     *\n* Usage  Instruction:                                                 *\n*  Make sure NPF is installed and running (both NPF Writer and        *\n*  Queue manager).                                                    *\n*                                                                     *\n*  You should print the dataset with Carriage Control attributes      *\n*  i.e. FBA, VBA datasets.                                            *\n*                                                                     *\n*  Sample JCL to print the data set                                   *\n* //PRINT   EXEC PGM=IEBGENER                                         *\n* //SYSPRINT  DD SYSOUT=*                                             *\n* //SYSOUT    DD SYSOUT=*                                             *\n* //SYSUT1    DD DISP=SHR,DSN=SP2487.TEMP                             *\n* //SYSUT2    DD SYSOUT=(A,,LSCC),DEST=VCIT3                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*CHANGES                                                              *\n*@DM101909   Add system ID and HW name to HOST line on banner page    *\n*@DM102009   Update PCL form PT02, force simplex, 6LPI, 10CPI         *\n*                                                                     *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        END OF DESCRIPTION OF THE PROGRAM                            *\n***********************************************************************\nEXITNPFR CSECT\nEXITNPFR AMODE ANY\nEXITNPFR RMODE ANY\n* LOCAL CONSTANTS\n         LCLC  &USEBNR,&USECC,&USEPCL,&PCLFORM,&SKIP1FF,&HOSTNAME\n&USEBNR  SETC  '&SYSPARM'(1,1)          FLAG TO USE BANNER\n&USECC   SETC  '&SYSPARM'(3,1)          FLAG TO USE CARRIAGE CONTROL\n&USEPCL  SETC  '&SYSPARM'(5,1)          FLAG TO INSERT PCL COMMANDS\n&SKIP1FF SETC  '&SYSPARM'(7,1)          FLAG TO SKIP FIRST FORM-FEED\n&PCLFORM SETC  '&SYSPARM'(9,4)          THE PCL FORM NAME\n&HOSTNAME SETC '&SYSPARM'(14,44)        THE HOST NAME OF SYSTEM\n***********************************************************************\n* COMPILE STAGE SYSPARM SYNTAX CHECKING\n***********************************************************************\n         AIF   ('&USEBNR'  NE '1' AND '&USEBNR'  NE '0').ERRBNR,       X\n               ('&USECC'   NE '1' AND '&USECC'   NE '0').ERRCC,        X\n               ('&USEPCL'  NE '1' AND '&USEPCL'  NE '0').ERRPCL1,      X\n               ('&SKIP1FF' NE '1' AND '&SKIP1FF' NE '0').ERR1FF,       X\n               ('&PCLFORM' EQ '    ' AND '&USEPCL' EQ '1').ERRPCL2,    X\n               ('&PCLFORM' EQ 'PT00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'PT01').OKPCLF,                          X\n               ('&PCLFORM' EQ 'PT02').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS01').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS02').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LG00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LG01').OKPCLF,                          X\n               ('&PCLFORM' EQ '    ').OKPCLF\n         AGO   .START\n.ERRBNR  MNOTE 12,'Use banner flag (USEBNR=&USEBNR) is not 0 or 1.'\n         AGO   .END\n.ERRCC   MNOTE 12,'Use CC     flag (USECC=&USECC) is not 0 or 1.'\n         AGO   .END\n.ERR1FF  MNOTE 12,'Skip first form feed (&SKIP1FF) is not 0 or 1.'\n         AGO   .END\n.ERRPCL1 MNOTE 12,'Use PCL    flag (USEPCL=&USEPCL) is not 0 or 1.'\n         AGO   .END\n.ERRPCL2 MNOTE 12,'The PCL Form cannot be blank when USEPCL is 1.'\n         AGO   .END\n.ERRPCLF MNOTE 12,'The PCL form (&PCLFORM) is not pre-defined name.'\n         MNOTE 12,'PCL Forms are: PT00,LS00,LG00,LG01 and 4 spaces.'\n         AGO   .END\n.OKPCLF  AGO   .START\n.START   ANOP\n***********************************************************************\n* NORMAL PROCESSING\n***********************************************************************\n*              Registers           entry       EXITNPFR    exit\nR0       EQU   0                   n/a         work        =entry\nR1       EQU   1                   >>IRELIST   work        =entry\nR2       EQU   2                   n/a         work        =entry\nR3       EQU   3                   n/a         work        =entry\nR4       EQU   4                   n/a         work        =entry\nR5       EQU   5                   n/a         work        =entry\nR6       EQU   6                   n/a         work        =entry\nR7       EQU   7                   n/a         work        =entry\nR8       EQU   8                   n/a         >IRXSTATD   =entry\nR9       EQU   9                   n/a         >RTDATA     =entry\nR10      EQU   10                  n/a         >IRELIST    =entry\nR11      EQU   11                  n/a         base 2      =entry\nR12      EQU   12                  n/a         base 1      =entry\nR13      EQU   13                  >callsave   >XPCLSTG    =entry\nR14      EQU   14                  >return     work        =entry\nR15      EQU   15                  >EXITNPFR   retcode     retcode\n         USING EXITNPFR,R15       Establish temporary base register\n         B     XPCL0000           Branch around constants\n         DC    CL23'PROGRAM NAME(EXITNPFR)'      Module identifier\n         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'\n         DC    CL48'NPF Record Exit Program For Network Printers'\n         DC    CL33'SETTINGS: BANNER(&USEBNR) CC(&USECC) PCL(&USEPCL)'\n         DC    CL25'SKIP1FF(&SKIP1FF) PCLFORM(&PCLFORM)'\n         DC    CL55'HOSTNAME(&HOSTNAME)'\n         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '\nXPCLASE2 DC    A(EXITNPFR+4096)   Second base register if needed\nXPCL0000 DS    0H\n         STM   R14,R12,12(R13)    Save caller's registers\n         LR    R12,R15            Change base registers\n         DROP  R15                Tell assembler\n         USING EXITNPFR,R12,R11\n         L     R11,XPCLASE2       Establish second base register\n         L     R10,0(R1)          Get address of exit parameter list\n         USING IRELIST,R10        Make exit parameter list addressable\n         L     R9,IRERTD          Get address of routing data area\n         USING RTDATA,R9          Make routing data area addressable\n         L     R8,IRESTRG         Get address of IRE static memory\n         USING IRXSTATD,R8        Make IRE static storage addressable\n         ICM   R1,15,IRXDSTGA     Get address of IRE dynamic storage\n         BNZ   XPCL0020           Storage has already been allocated\n         GETMAIN RC,LV=STGLEN,LOC=BELOW   Get program storage\n         LTR   R15,R15            Did GETMAIN work?\n         BZ    XPCL0010           Yes\n         WTO   'EXITNPFR GETMAIN FAILED!'\n         LA    R15,8              No,  show error\n         B     RET00010           Return to NPF\nXPCL0010 DS    0H\n         ST    R1,IRXDSTGA        Save dynamic storage address\nXPCL0020 DS    0H\n         ST    R1,8(0,R13)        Complete save area pointers\n         ST    R13,4(0,R1)\n         LR    R13,R1             Point to dynamic storage area\n         USING XPCLSTG,R13        Tell assembler\n         USING RECSTG,XPCLSTG+XPCLSTGL Tell assembler\n         CLC   RTFUNCTN(4),=CL8'OPEN' Is this OPEN call?\n         BE    OPN00000           Yes\n         CLC   RTFUNCTN(3),=CL8'PUT'  Is this PUT call?\n         BE    PUT00000           Yes\n         CLC   RTFUNCTN(5),=CL8'CLOSE' Is this CLOSE call?\n         BE    CLS00000           Yes\n         CLC   RTFUNCTN(7),=CL8'RELEASE' Is this RELEASE call?\n         BE    REL00000           Yes\n         CLC   RTFUNCTN(4),=CL8'TERM' Is this TERM call?\n         BE    TRM00000           Yes\n         WTO   'EXITNPFR UNKNOWN FUNCTION'\n         LA    R15,4              Bad function, show error\n         B     RET00000           Return to NPF\n*---------------------------------------------------------------------*\n*        Process OPEN call\n*---------------------------------------------------------------------*\nOPN00000 DS    0H\n         MVI   IRXFLAG,IRX1STR    Set flag for READ FIRST RECORD\n         MVI   CCMODE,CCMODASA    DEFAULT IS ASA CARRIAGE CONTROL MODE\n         XC    BNRLNCTR,BNRLNCTR  RESET SET BANNER LINE COUNTER\n         MVI   BNRBFEOF,NO        SET BANNER LAST LINE TO NO.\n         MVI   PCLFLAG,PCLINIT    SET PCL FLAG TO INIT\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*        Process PUT call\n*---------------------------------------------------------------------*\n* PROCESSING STEPS:\n* 1. INIT\n*    R2: CURRENT LOCATION OF TARGET RECORD BUFFER\n*    R3: CURRENT LOCATION OF SOURCE RECORD\n*    R4: WORK\n*    R5: MVCREC: LENGTH OF BYTES TO BE COPIED\n*    R5:  TRREC: LENGTH OF BYTES TO BE COPIED\n*    R6: MVCREC: TARGET ADDRESS TO BE COPIED TO\n*    R6:  TRREC: TARGET ADDRESS TO BE TRANSLATED\n*    R7: MVCREC: SOURCE ADDRESS TO BE COPIED FROM\n*    R7:  TRREC: ADDRESS OF TRANSLATION TABLE\n*\n* 2. SAVE AND TEST RECORD INFO: RECORD TYPE AND RECORD LENGTH\n*\n* 3. TEST RECORD FORMAT\n*   FOR VARIABLE LENGTH: R2 += 4; R3 += 4\n*\n* 4. TEST FIRST RECORD?\n*    YES: A. INSERT PCL COMMAND\n*         B. CHANGE THE CARIAGE CONTROL COMMAND AS FOLLOWS:\n*            '1' TO '+': FORM FEED TO OVERSTRIKE\n*            ' ' TO '+': SINGLE SPACE TO OVERSTRIKE\n*            '0' TO ' ': DOUBLE SPACE TO SIGNLE SPACE\n*            '-' TO '0': TRIPLE SPACE TO BDOUBLE SPACE\n* 5. INSERT CARRIAGE COMMAND AS FOLLOW:\n*    '1': ADD CRLF(X'0D25') AND FORM FEED BYTE (X'0C), R2 += 3\n*    ' ': ADD ONE CRLF (X'0D25')     R2 += 2\n*    '0': ADD TWO CRLF               R2 += 4\n*    '-': ADD THREE CRLF             R2 += 6\n* 6. COPY THE RECORD DATA FROM SOURCE TO TARGET RECORD\n*    SKIP THE FIRST CC BYTE          R2 += (RECLEN-1)\n*\n* 7. UPDATE VARIABLE HEADER 4 BYTES IF IT'S VARIABLE FORMAT\n*\n* 8. SAVE THE RECORD LENGTH TO RECLEN\n*\n* 9. TRANSLATE THE DATA PART IN TARGET RECORD INTO ASCII\n*\n*10. TELL NPF:\n*   . NOT SAVE THE CURRENT RECORD\n*   . INSERT A NEW RECORD (JUST GENERATED) IN NEXT CONTROL RETURN\n******************************************************************\nPUT00000 DS    0H\n*------PROCESS BANNER PAGE ---------------------------------------\n         CLI   IRXFLAG,IRX1STR    IS THIS THE FIRST TIME CALL?\n         BNE   PUT00100           NO, PROCESS NEXT STEP\n         CLI   USEBNR,YES         INSERT BANNER PAGE\n         BE    BNR00000           YES, PROCESS GENERATE BANNER PAGE\n         MVI   IRXFLAG,IRX1STP    UPDATE THE IRX FLAG TO IRX1STP\n*------PROCESS PCL COMMAND----------------------------------------\nPUT00100 DS    0H\n         CLI   IRXFLAG,IRX1STP    TIME TO PROCESS PCL COMMAND?\n         BNE   PUT00800           NO, SKIP THE PCL PROCESS\n         BAL   R4,INSPCL          CALL INSERT PCL COMMAND\n         B     RET00000           RETURN TO NPF IF PCL CMD INSERTED.\n*------PROCESS INPUT RECORDS -------------------------------------\nPUT00800 DS    0H\n         CLI   IRXFLAG,IRXNXTI    INSERT THE NEXT RECORD?\n         BE    PUT04000           YES, CALL INSERT RECORD\n* READ RECORD INFO\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R2,RECORD          LOAD THE TARGET RECORD ADDR\n         L     R3,IREBPTR         LOAD THE SOURCE RECORD ADDR\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   PUT01000           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD FORMAT\n         LA    R2,4(0,R2)         SKIP THE TARGET VB RECORD HEADER\n         LA    R3,4(0,R3)         SKIP THE SOURCE VB RECORD HEADER\n* BEGIN TO PROCESS THE RECORD\nPUT01000 DS    0H\n         CLI   USECC,YES          REQUIRE TO TRANSLATE CC BYTE?\n         BE    PUT01100           YES, JUMP TO PROCESS CC\n*---------------------------------------------------------------------*\n* PROCESS NON-CC RECORDS\n*---------------------------------------------------------------------*\n         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC\n         LR    R7,R3              LOAD THE START OF SORUCE RECORD\n         L     R5,RECLEN          LOAD THE RECORD LENGTH\n         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2\n         BCTR  R5,0\n         EX    R5,MVCREC          COPY THE RECORD\n         MVC   0(2,R2),CRLF       COPY CRLF\n         LA    R2,2(0,R2)         UPDATE THE CURRENT POSITION\n         B     PUT01600\n*--------------------------------------------------------------------\n* PROCESS CC RECORD: ASA CC AND MC MODE\n*--------------------------------------------------------------------\nPUT01100 DS    0H\n         MVI   COPYREC,YES        DEFAULT IS TO COPY THE SOURCE RECORD\n         MVC   CCBYTE(1),0(R3)    SAVE THE CARRIAGE CONTROL BYTE\n*--------------------------------------------------------------------\n* PROCESS THE FIRST RECORD WITH MACHINE CODES\n*--------------------------------------------------------------------\n         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?\n         BNE   PUT01200           NO, PROCESS NEXT NON-FIRST RECORD\n         CLI   0(R3),MCTPFF       IS THIS MACHINE CODE BYTE X'8B'?\n         BNE   PUT01300           CONTINUE IN ASA MODE\n* PROCESS MACHINE CODE MODE\n         MVI   CCMODE,CCMODMC     SET MACHINE CODE CARRIAGE MODE\n         MVI   CCBYTESV,MCTPFF    SAVE CCBYTE(FF) TO CCBYTESV\n         MVI   IRXFLAG,IRX1STM    SET THE FLAG TO FIRST MC RECORD\n         MVI   IRERFLG,X'00'      Tell NPF to READ NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n* PROCESS NON-FIRST RECORDS\n*---------------------------------------------------------------------*\nPUT01200 DS    0H\n         CLI   CCMODE,CCMODMC     IS THIS MC MODE?\n         BNE   PUT01300           NO, CONTINUE TO PROCESS\n* SWITCH CCBYTE AND CCBYTESV\n         MVC   CCBYTETM(1),CCBYTE\n         MVC   CCBYTE(1),CCBYTESV\n         MVC   CCBYTESV(1),CCBYTETM\n*---------------------------------------------------------------------*\n* PROCESS ALL CC RECORDS\n*---------------------------------------------------------------------*\nPUT01300 EQU   *\n         BAL   R4,INSERTCC        INSERT CARRIAGE CONTROL COMMANDS\n*---------------------------------------------------------------------*\n* COPY THE RECORD FROM SOURCE FOR CC RECORDS\n*---------------------------------------------------------------------*\n         CLI   COPYREC,YES        NEED TO COPY THE RECORD?\n         BNE   PUT01600           NO, SKIP TO COPY IT\n         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC\n         LR    R7,R3              LOAD THE START OF SORUCE RECORD\n         L     R5,IREDLEN         LOAD THE RECORD LENGTH\n         LA    R7,1(0,R7)         SKIP THE FIRST CC BYTE\n         BCTR  R5,0               SKIP THE FIRST CC BYTE IN LENGTH\n         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2\n         BCTR  R5,0\n         EX    R5,MVCREC          COPY THE RECORD\n*---------------------------------------------------------------------*\n* UPDATE THE VARIABLE RECORD HEADER\n*---------------------------------------------------------------------*\nPUT01600 BAL   R4,UPDREC          UPDATE THE RECORD\n*---------------------------------------------------------------------*\n*TELL NPF OF NEXT ACTION\n*---------------------------------------------------------------------*\nPUT01800 DS    0H\n         L     R5,RECLEN          LOAD THE RECORD LENGTH\n         LTR   R5,R5              RECORD LENGTH IS 0?\n         BZ    PUT01850\n         MVI   IRXFLAG,IRXNXTI    SET THE FLAG TO INSERT NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'01'      Tell NPF to INSERT NEXT RECORD\n         B     PUT01900\n* IF THE RECORD LENGTH IS 0, THEN READ THE NEXT RECORD, AND DO NOT\n* WRITE CURRENT EMPTY RECORD.\nPUT01850 EQU   *\n         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO INSERT NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'00'      Tell NPF to INSERT NEXT RECORD\nPUT01900 XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*Process inserting next record\n*---------------------------------------------------------------------*\nPUT04000 DS    0H\n*SAVE THE RECORD\n         LA    R6,RECORD\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN\n         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE\n*TELL NPF OF NEXT ACTION\n         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO READ NEXT RECORD\n         MVI   IREWFLG,X'00'      Write this new record\n         MVI   IRERFLG,X'00'      Tell NPF to read NEXT record\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*        Process CLOSE call\n*---------------------------------------------------------------------*\nCLS00000 DS    0H\n         MVI   IREWFLG,X'01'      No record to write\n         MVI   IRERFLG,X'00'      Normal return from CLOSE\n         XR    R15,R15            Zero return code\n         B     RET00000\n*---------------------------------------------------------------------*\n*        Process RELEASE or TERM call\n*---------------------------------------------------------------------*\nREL00000 DS    0H\nTRM00000 DS    0H\n         LR    R1,R13             Get address of dynamic storage\n         L     R13,SAVEAREA+4     Get address of caller's save area\n         FREEMAIN RU,LV=STGLEN,A=(R1) Free dynamic storage\n         XR    R15,R15            Zero return code\n         B     RET00010\n\n*---------------------------------------------------------------------*\n*        Return to NPF\n*---------------------------------------------------------------------*\nRET00000 DS    0H                 Switch back to caller's save area\n         L     R13,SAVEAREA+4     Return to caller\nRET00010 DS    0H                 Already back to caller's save area\n         ST    R15,16(R13)        Set return code in saved R15\n         LM    R14,R12,12(R13)    Restore caller's registers\n         BSM   0,R14\n*---------------------------------------------------------------------*\n*                     PRINT BANNER PAGE                               *\n*---------------------------------------------------------------------*\n* PROGRAM LOGIC:                                                      *\n* WHEN TO PRINT THE BANNGER PAGE:                                     *\n*  .WHEN IRXFLAG IS IRX1STR                                           *\n*  .WHEN BNRPOS-BNRBUF < BNRBFLEN                                     *\n* WHEN TO BRANCH:                                                     *\n*  .WHEN IRXFLAG IS IRX1STR                                           *\n* WHEN TO STOP PRINT BANNGER PAGE AND CHANGE THE STATUS:              *\n*  .WHEN BNRPOS-BNRBUF >= BNRBFLEN                                    *\n*  .CHANGE STATUS OF IRXFLAG TO IRX1STP                               *\n*                                                                     *\n* STEP 1. IF BNRLNCTR==0, THEN GET FIELD INFOMRATION:                 *\n*  . READ RECORD INFORMATION                                          *\n*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *\n*  . FILL THE FIELDS WITH SPACES                                      *\n*  . FILL THE FIELDS FROM JSPA AND NPF RTD                            *\n*  . FILL THE TIME AND DATE FIELD FROM TIME MACRO AND EDIT            *\n*  . TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL           *\n*                                                                     *\n* STEP 2. NORMAL PROCESSING (WHEN NPF RETURN CONTROL)                 *\n*  . COPY RECORD FROM BANNER TABLE TO WORK RECORD BUFFER              *\n*  . COPY THE FIELD VALUE TO WORK RECORD BUFFER                       *\n*  . UPDATE RECORD LENGTH AND VARIABLE RECORD HEADER                  *\n*  . TRANSLATE THE RECORD DATA INTO ASCII                             *\n*  . UPDATE THE NPF FIELD TO SAVE CURRENT WORK RECORD                 *\n*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *\n*                                                                     *\n* STEP 3. TEST IF THE LAST BANNER RECORD REACHED.                     *\n*  . IF YES, UPDATE THE STATUS OF IRXFLAG TO IRX1STP                  *\n*            TELL NPF TO WRITE CURRENT RECORD                         *\n*            TELL NPF TO READ THE FIRST RECORD ON SOURCE FILE         *\n*  . IF NO,  TELL NPF TO WRITE CURRENT RECORD                         *\n*            TELL NPF TO INSERT A RECORD ON NEXT RETURN CONTROL       *\n*                                                                     *\n* STEP 4. RETURN THE CONTROL BACK TO NPF                              *\n***********************************************************************\nBNR00000 DS    0H                 PRINT BANNER PAGE\n* MAIN BRANCH\n         CLI   BNRLNCTR,X'00'     IS THIS FIRST TIME TO CALL BANNER?\n         BNE   BNR02000           NO, CONTINUE TO PROCESS\n*-------------------------------------------------------------------*\n* BANNER INITIALIZATION\n* READ INFORMATION OF BANNER FIELDS.\n*    A. READ JES2 JOB INFORMATION IN JSPA DSECT                       *\n*    B. READ PRINTER DEFINITION IN RDT                                *\n*    C. GET CURRENT TIME AND DATE                                     *\n*-------------------------------------------------------------------*\nBNR01000 DS    0H\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R6,BNRBUF          LOAD THE START OF BANNER BUFFER\n         ST    R6,BNRBFPOS        SAVE THE CURRENT POSITION OF LINES\n         MVI   BNRLNCTR,X'01'     LOAD THE LINE COUNTER BY 1\n* INIT ALL FIELDS WITH SPACE\n         LA    R5,BNRFDLEN        LOAD THE LENGTH OF FIELD INTO R5\n         BCTR  R5,0\n         BCTR  R5,0\n         MVC   BNRPNTR(44),BNRPNTRC COPY THE MODEL FOR PRINTER NAME\n         LA    R6,BNRHOST         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRUSER         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRJBNM         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRDSSN         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRDDNM         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRTIME         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         MVC   0(DATEPTNL,R6),DATEPTN   COPY EDIT PATTERN\n* COPY JSPA\n         L     R2,IRECPAD         LOAD THE JES/VTAM PARAMETER AREA\n         L     R2,0(R2)           LOAD THE ADDRESS OF GETDS AREA\n         USING GDSPARM,R2         ADDRESSABILITY FOR GDSPARM\n         L     R3,GDSJSPA         LOAD THE JSPA AREA\n         USING JSPA,R3            ADDRESSABILITY FOR JSPA\n         LH    R4,JSPALEN         LOAD THE JSPA LENGTH\n         AR    R4,R3              MOVE TO THE EXTENTION OF JSPA\n         USING JSPEXT,R4          ADDRESSABILITY OF JPSAEXT\n         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME\n         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME\n         MVI   8(R6),C'/'         JOBNAME/JOBID SEPARATER\n         MVC   9(8,R6),JSPAJBID   COPY THE JOBID\n         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME\n         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME\n         LA    R6,BNRUSER         LOAD THE USERID FIELD\n         MVC   0(8,R6),JSPCEUID   COPY THE USERID\n         MVI   8(R6),C'/'\n         MVC   9(20,R6),JSPJPNAM  COPY THE PROGRAMMER NAME\n         LA    R6,BNRDDNM\n         MVC   0(8,R6),JSPJDSDD   COPY THE DD NAME\n         LA    R6,BNRDSSN\n         MVC   0(8,R6),JSPJDSSN   COPY THE STEP NAME\n         LA    R6,BNRDEST\n         MVC   0(8,R6),RTDAMAJK   COPY MAJOR ROUTING KEY FOR DEST\n         LA    R7,RTDAMINK        MINOR ROUTING KEY (CLASS + FORM)\n         LA    R6,BNRCLAS\n         MVC   0(1,R6),0(R7)      COPY THE SYSOUT CLASS\n         LA    R6,BNRFORM\n         MVC   0(4,R6),1(R7)      COPY THE FORM NAME\n         DROP  R2,R3,R4\n* UPDATE TIME AND DATE\n         TIME  DEC,DATESAVE,LINKAGE=SYSTEM,  GET TIME/DATE AT DATAAREA X\n               MF=(E,TIMELST),DATETYPE=YYYYMMDD\n*        MACDATE  09/08/99\n         LA    R6,BNRTIME         LOAD THE TIME FIELD\n         LA    R7,DATEAREA        LOAD THE DATA AREA (16 BYTES)\n         MVI   0(R7),X'01'        SAVE X'01' for significant lead 0\n         ED    0(9,R6),0(R7)      EDIT TIME\n         ED    9(12,R6),9(R7)     EDIT DATE\n         MVC   0(20,R6),4(R6)     SHIFT TIME FIELD TO LEFT BY 4 BYTES\n* FILL IN HOST INFO                                           @DM101909\n         L     R6,16              Get cvt pointer             @DM101909\n         MVC   BNRHOST(8),340(R6) Move in SYSTEM name         @DM101909\n         L     R6,140(r6)         Get ECVT pointer            @DM101909\n         MVC   BNRHOST+9(8),336(R6)  Move in HW name          @DM101909\n*\n* TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL\n         MVI   IREWFLG,X'01'      Not Write CURRENT record\n         MVI   IRERFLG,X'01'      Tell NPF to insert new record NEXT\n         B     BNR04000           JUMP TO NORMAL PROCESSING\n*-------------------------------------------------------------------*\n* BANNER PAGE NORMAL PROCESSING\n*-------------------------------------------------------------------*\nBNR02000 DS    0H\n         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR02100           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD FORMAT\n         LA    R6,4(0,R6)         SKIP THE VB RECORD HEADER\n* COPY THE RECORD FROM BNRBUF TO RECORD\nBNR02100 DS    0H\n         LA    R5,BNRRCLEN\n         BCTR  R5,0\n         L     R7,BNRBFPOS           LOAD CURRENT POSITION\n         EX    R5,MVCREC             COPY CURRENT RECORD TO TARGET\n         LA    R7,BNRRCLEN(0,R6)     LOAD THE LAST POSITION TO R7\n         MVC   0(2,R7),CRLF          COPY THE CRLF TO THE END\n* PROCESS THE FIELD VALUES\nBNR02200 DS    0H\n         LA    R7,BNRLNCTR           LOAD THE LINE COUNTER\n         CLI   0(R7),BNRHOSTL        IS THIS A HOST NAME LINE?\n         BE    BNR02210\n         CLI   0(R7),BNRPNTRL        IS THIS A PRINT NAME LINE?\n         BE    BNR02220\n         CLI   0(R7),BNRUSERL        IS THIS A USERID    LINE?\n         BE    BNR02230\n         CLI   0(R7),BNRDSSNL        IS THIS A STEP NAME LINE?\n         BE    BNR02240\n         CLI   0(R7),BNRDDNML        IS THIS A DD   NAME LINE?\n         BE    BNR02250\n         CLI   0(R7),BNRJBNML        IS THIS A JOB  NAME LINE?\n         BE    BNR02260\n         CLI   0(R7),BNRTIMEL        IS THIS A TIME&DATE LINE?\n         BE    BNR02270\n* NORMAL CONSTANT FIELD\n         B     BNR03000\n* PROCESS HOST NAME FIELD\nBNR02210 LA    R7,BNRHOST              LOAD THE HOST NAME TO BE COPIED\n         B     BNR02500\nBNR02220 LA    R7,BNRPNTR              LOAD THE PRINTNAME TO BE COPIED\n         B     BNR02500\nBNR02230 LA    R7,BNRUSER              LOAD THE USER NAME TO BE COPIED\n         B     BNR02500\nBNR02240 LA    R7,BNRDSSN              LOAD THE STEP NAME TO BE COPIED\n         B     BNR02500\nBNR02250 LA    R7,BNRDDNM              LOAD THE DD   NAME TO BE COPIED\n         B     BNR02500\nBNR02260 LA    R7,BNRJBNM              LOAD THE JOB  NAME TO BE COPIED\n         B     BNR02500\nBNR02270 LA    R7,BNRTIME              LOAD THE TIME&DATE TO BE COPIED\n         B     BNR02500\n* COPY THE FIELD\nBNR02500 DS    0H\n         LA    R6,BNRFDBYT(0,R6)       MOVE TO FIELD POSITION\n         LA    R5,BNRFDLEN             LOAD THE FIELD LENGTH\n         BCTR  R5,0\n         EX    R5,MVCREC\nBNR03000 DS    0H\n* INCREASE THE LINE COUNTER BY 1\n         XR    R6,R6\n         IC    R6,BNRLNCTR             LOAD THE COUNTER\n         LA    R6,1(0,R6)              ADD THE COUNTER BY 1\n         STC   R6,BNRLNCTR             SAVE THE COUNTER\n* UPDATE THE RECORD LENGTH FOR NORMAL RECORDS\n         LA    R5,BNRRCLEN+2           RECORD LENGTH: ADD 2 BYTES CRLF\n         ST    R5,RECLEN               SAVE RECORD LENGTH\n* UPDATE THE CURRENT LOCATION\n         L     R7,BNRBFPOS             LOAD THE CURRENT POSITION\n         LA    R7,BNRRCLEN(0,R7)       UPDATE THE CURRENT POSITION\n         ST    R7,BNRBFPOS             SAVE THE CURRENT POSITION\n         LA    R6,BNRBFEND             LOAD THE END POSITION\n* TEST IF THE LAST RECORD REACHED.\n         CR    R7,R6                   REACH AT THE END OF BUFFER?\n         BL    BNR03100                NO, CONTINUE TO PROCESS\n* PROCESS THE LAST LINE IN BANNER PAGE\n         MVI   BNRBFEOF,YES            SET LAST LINE FLAG TO YES\n         LA    R6,RECORD\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR03050           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         LA    R6,4(0,R6)         ADD THE RECORD LENGTH BY 4\nBNR03050 DS    0H\n         MVI   BNRRCLEN+2(R6),FF       SAVE FORM FEED\n         LA    R5,1(0,R5)              ADD RECORD LENGTH BY 1 (FF)\n         ST    R5,RECLEN               CRLF=2 BYTES, FF=1 BYTE\nBNR03100 DS    0H\n         LA    R6,RECORD\n* UPDATE RECORD LENGTH: R5: RECORD LENGTH, R6: RECORD ADDRESS\n* UPDATE THE VARIABLE RECORD HEADER\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR03200           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         LA    R7,4(0,R5)         ADD THE RECORD LENGTH BY 4\n         ST    R7,RECLEN          SAVE RECORD LENGTH IN RECLEN\n         STH   R7,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES\n         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'\n         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'\n         LA    R6,4(0,R6)         MOVE THE R6 TO DATA FOR TR\n* TRANSLATE THE RECORD INTO ASCII\nBNR03200 DS    0H\n         BCTR  R5,0\n         LA    R7,E2ATAB\n         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII\nBNR03400 DS    0H\n* SAVE THE RECORD INFO FOR NPF TO PUT\n         LA    R6,RECORD          LOAD RECORD ADDRESS\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         L     R6,RECLEN          LOAD THE RECORD LENGTH\n         ST    R6,IREDLEN         SAVE RECORD LENGTH TO IREDLEN\n* UPDATE & TEST THE CURRENT LOCATION\n         CLI   BNRBFEOF,YES       LOAD THE EOF FLAG ADDRESS\n         BNE   BNR03500                NO, CONTINUE TO PROCESS\n* IF LAST RECORD, UPDATE THE STATUS OF IRXFLAG TO IRX1STP\n* REACH AT THE END OF BANNER BUFFER\n         MVI   IRXFLAG,IRX1STP         UPDATE THE IRX FLAG TO IRX1STP\n         MVI   IREWFLG,X'00'           Write this record\n         MVI   IRERFLG,X'02'           Tell NPF to read FIRST RECORD\n         B     BNR04000\n* NOT REACH AT THE END OF BANNER BUFFER\nBNR03500 DS    0H\n         MVI   IREWFLG,X'00'           Write this record\n         MVI   IRERFLG,X'01'           Tell NPF to INSERT NEXT RECORD\nBNR04000 DS    0H\n         XR    R15,R15                 Zero return code\n         B     RET00000\n***********************************************************************\n*---------------------------------------------------------------------*\n* ROUTINE: RESTFLD\n* PURPOSE: FILL OUT THE FIELD WITH SPACES\n* INPUT  :\n*    R4: RETURN CONTROL\n*    R5: THE LENGTH OF THE FIELD - 2\n*    R6: THE START POSITION OF THE FIELD\n***********************************************************************\nRESTFLD  EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         LR    R7,R6\n         LA    R6,1(0,R6)\n         MVI   0(R7),C' '\n         EX    R5,MVCREC\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: INSERTCC\n* PURPOSE: INSERT CARRIAGE CONTROL CODE BYTE TO OUTPUT RECORD\n* INPUT  :\n*    R2: THE START POSITION OF OUTPUT RECORD\n*    R4: RETURN CONTROL\n* OUTPUT :\n*    R6: WORK\n* STEPS:\n***********************************************************************\n*---------------------------------------------------------------------*\n***********************************************************************\nINSERTCC EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?\n         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED\n         CLI   IRXFLAG,IRX1STM    IS THIS READ THE FIRST RECORD OF MC?\n         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED\n         B     INC05000\n* PROCESS SKIP THE FIRST FORM-FEED BYTE\nINC01000 EQU   *\n         CLI   SKIP1FF,YES        SKIP FIRST FORM-FEED?\n         BE    INC08000           YES, SKIP TO INSERT THE CC BYTE\n         MVI   0(R2),FF           SET THE FIRST FORM-FEED WITHOUT CRLF\n         LA    R2,1(0,R2)         MOVE R2 TO NEW START POSITION\n         B     INC08000           SKIP TO SCAN THE TABLE\n* INSERT ASCII CC\nINC05000 LA    R6,CCBYTE          LOAD CCBYTE\n         BAL   R4,FINDCC          LOAD THE RECORD INTO R7\n* INSERT THE ASCII CONTROL BYTES\n         LR    R6,R2              LOAD THE TARGET RECORD ADDRESS\n         LH    R5,0(R7)           LOAD THE RECORD LENGTH\n         LA    R7,4(0,R7)         SKIP THE LENGTH AND CONTROL BYTE\n         BCTR  R5,0\n         BCTR  R5,0\n         BCTR  R5,0\n         BCTR  R5,0\n         LTR   R5,R5              IS INSERT BYTES ZERO? OVERSTRIKE?\n         BZ    INC09000           YES, DO NOTHING\n         AR    R2,R5              MOVE THE TARGET ADDRESS TO NEW ADDR.\n         BCTR  R5,0               DECREASE R5 BY 1 FOR MVC\n         EX    R5,MVCREC          COPY THE ASCII BYTES TO TARGET\nINC08000 EQU   *\n* GET THE COPY RECORD FLAG USING CCBYTESV\n         LA    R6,CCBYTESV        LOAD CCBYTESV\n         BAL   R4,FINDCC          LOAD THE RECORD INTO R7\n         MVC   COPYREC(1),3(R7)   COPY THE SAVE SOURCE RECORD TAG\nINC09000 EQU   *\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: FINDCC\n* PURPOSE: FIND CARRIAGE CONTROL CODE BYTE IN THE TABLE\n* INPUT  :\n*    R6: START POSITION OF CCBYTE\n*    R4: RETURN CONTROL\n* OUTPUT :\n*    R5: WORK\n*    R7: START POSITION OF THE RECORD RELATED TO THIS CC BYTE\n* STEPS:\n***********************************************************************\n*---------------------------------------------------------------------*\n***********************************************************************\nFINDCC   EQU   *\n         ST    R4,SAVERTN2\n         LA    R7,CCATAB          LOAD ASA TRANSLATION TABLE\n         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?\n         BNE   FNC01000           NO, CONTINUE\n         LA    R7,CCMTAB          LOAD MC TRANSLATION TABLE\nFNC01000 EQU   *\n         L     R4,0(R7)           GET THE TABLE LENGTH\n         AR    R4,R7              MOVE TO THE END OF THE TABLE\n         LA    R7,4(0,R7)         MOVE TO THE FIRST RECORD\nFNC01100 EQU   *                  BEGIN LOOP\n         LH    R5,0(R7)           LOAD THE RECORD LENGTH\n         CLC   0(1,R6),2(R7)      IS THIS THE RIGHT CC BYTE?\n         BE    FNC02000           YES, PROCESS THE INSERT\n         AR    R7,R5              MOVE TO THE NEXT RECORD\n         CR    R7,R4              REACH AT THE END OF TABLE?\n         BL    FNC01100           NO, PROCESS NEXT RECORD\n* IF NOT FIND, GET THE FIRST RECORD AS DEFAULT\n         LA    R7,CCATAB+4        LOAD ASA TRANSLATION TABLE\n         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?\n         BNE   FNC02000           NO, CONTINUE\n         LA    R7,CCMTAB+4        LOAD MC TRANSLATION TABLE\nFNC02000 EQU   *\n         L     R4,SAVERTN2\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: INSPCL\n* PURPOSE: INSERT PCL COMMAND AT THE BEGINING OF INPUT RECORDS.\n*          IT SHOULD BE BETWEEN BANNER PAGE AND FIRST RECORD\n* INPUT  :\n*    R4: RETURN CONTROL\n*  PCLFORM: THE PREDEFINED FORM NAME\n* OUTPUT :\n*    R4: WORK\n*    R5: WORK\n*    R6: WORK\n*    R7: WORK\n***********************************************************************\n*---------------------------------------------------------------------*\nINSPCL   EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         CLI   USEPCL,YES         REQUIRE TO INSERT PCL COMMAND?\n         BNE   INP08000           NO, SKIP PCL COMMAND PROCESSING\n         CLI   PCLFLAG,PCLINST    IS THIS FIRST TIME CALL?\n         BE    INP06000           YES, SAVE RECORD\n* PREPARE THE PCL COMMAND IN RECORD FOR THE FIRST TIME CALL.\n* FIND THE GIVEN PCL COMMAND SEQUENCE VIA TABLE PCLTAB\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R7,PCLTAB          LOAD THE START OF PCL TABLE\n         L     R5,0(R7)           LOAD THE LENGTH OF PCL TABLE\n         AR    R5,R7              MOVE TO THE END OF THE PCL TABLE\n         LA    R7,4(0,R7)         SKIP THE TABLE LENGTH\nINP01000 DS    0H\n         CLC   PCLFORM(4),0(R7)   IS THIS THE GIVEN FORM?\n         BE    INP02000           YES, PROCESS IT.\n         LA    R7,PCLRECL(0,R7)   MOVE TO THE NEXT RECORD\n         CR    R7,R5              REACH AT THE END OF TABLE?\n         BL    INP01000           NO, TEST THE NEXT RECORD\n* IF THE FORM IS NOT FOUND, USE THE FIRST ONE AS DEFAULT.\n         LA    R7,PCLTAB+4        OTHERWISE USE THE FIRST RECORD AS DEF\nINP02000 DS    0H\n         L     R7,4(R7)           LOAD THE ADDRESS OF PCL COMMAND\n         LH    R5,0(R7)           LOAD THE PCL COMMAND LENGTH\n         LA    R7,2(0,R7)         SKIP THE LENGTH 2 BYTES\n         BCTR  R5,0\n         BCTR  R5,0\n* END OF PCL TABLE SEARCHING: SOURCE IN R7, LENGTH IN R5\n         LR    R2,R5              COPY THE RECORD LENGTH\n         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   INP03000           NO, PROCESS THE FIXED LENGTH RECORD\n         LA    R6,4(0,R6)         SKIP VB HEADER\nINP03000 DS    0H\n         BCTR  R5,0               DECREASE THE PCLLEN BY 1\n         EX    R5,MVCREC          COPY THE PCL COMMAND TO RECORD BUFFER\n         AR    R2,R6              MOVE R2 TO THE LAST BYTE\n         BAL   R4,UPDREC          CALL UPDATE RECORD ROUTINE\n         MVI   PCLFLAG,PCLINST    UPDATE THE STATUS TO INSERT PCL CMD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'01'      Tell NPF to INSERT A NEW RECORD\n         B     INP09000           END OF RECORD PREPARATION\n* SAVE THE CURRENT RECORD FOR PCLFLAG=PCLINST\nINP06000 DS    0H\n* SAVE THE RECORD INFO FOR NPF TO PUT\n         LA    R6,RECORD\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN\n         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE\n         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI\n         MVI   IREWFLG,X'00'      Write this record\n         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD\n         B     INP09000\n* SKIP PCL COMMAND PROCESSING\nINP08000 DS    0H\n         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD\nINP09000 DS    0H\n         XR    R15,R15            Zero return code\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n* ROUTINE: UPDREC\n* PURPOSE: UPDATE THE RECORD HEADER AND TRANSLATE IT TO ASCII\n*        1. UPDATE RECLEN WITH ACTUAL RECORD LENGTH\n*        2. UPDATE VB RECORD HEADER IF IT'S VB\n*        3. TRANSLATE THE RECORD INTO ASCII\n* INPUT  :\n*    R2: THE LAST POSITION OF TARGET RECORD\n*    R4: RETURN CONTROL\n*  PCLFORM: THE PREDEFINED FORM NAME\n* OUTPUT :\n*    R2: NEW LOCATION OF TARGET RECORD\n*    R5: WORK\n*    R6: WORK\n*    R7: WORK\n* UPDATE THE VARIABLE RECORD HEADER\n*---------------------------------------------------------------------*\nUPDREC   EQU   *\n         ST    R4,SAVERTN2        SAVE THE CALLER'S ADDRESS\n* GET THE RECORD LENGTH IN R5\n         LA    R6,RECORD          LOAD THE START POSITION\n         LR    R5,R2              LOAD THE LAST POSITION IN R5\n         SR    R5,R6              SUBTRACT THEM TO GET THE RECORD LEN\n         ST    R5,RECLEN          SAVE THE CURRENT RECORD LENGTH\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   UPD01000           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         STH   R5,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES\n         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'\n         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'\n         LA    R6,4(0,R6)         MOVE THE R6 TO DATA\n*---------------------------------------------------------------------*\n* TRANSLATE THE RECORD INTO ASCII\n*---------------------------------------------------------------------*\nUPD01000 DS    0H\n         BCTR  R5,0\n         LA    R7,E2ATAB          LOAD THE EBCIDC TO ASCII TABLE\n         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII\n         L     R4,SAVERTN2\n         BR    R4\n*---------------------------------------------------------------------*\n*        PROGRAM CONSTANTS DATA AREA\n*---------------------------------------------------------------------*\n         LTORG\n*---------------------------------------------------------------------*\n* CONSTANT TO CONTROL HOW THE PRINT OUTPUT GENERATED\n*---------------------------------------------------------------------*\nPCLFORM  DC    CL4'&PCLFORM'     ; THE FORM NAME\nUSEBNR   DC    X'&USEBNR'        ; FLAG TO INSERT BANNER PAGE OR NOT\nUSEPCL   DC    X'&USEPCL'        ; FLAG TO INSERT PCL COMMAND OR NOT\nUSECC    DC    X'&USECC'         ; FLAG TO CONVERT CARRIAGE CONTROL\nSKIP1FF  DC    X'&SKIP1FF'       ; FLAG TO SKIP FORM FEED OF 1ST RECORD\nYES      EQU   X'1'              ; YES\nNO       EQU   X'0'              ; NO\n*---------------------------------------------------------------------*\nMVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5\nTRREC    TR    0(0,R6),0(R7)     ; TRANSLATE FROM R7 to R6,length R5\nCRLF     DC    XL2'0D25'         ; CR-LF IN EBCDIC CODE\nFF       EQU   X'0C'             ; FORM FEED BYTE IN EBCDIC\nMCTPFF   EQU   X'8B'              THE FIRST BYTE OF FIRST MC RECORD\nCCTPFF   EQU   C'1'               CC BYTE '1' FORM FEED\n*---------------------------------------------------------------------*\nCCATAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE\n* ASA CARRIAGE CONTROL BYTES\n* DEFAULT BYTE: CCA1SP: SINGLE RETURN\n         DC    AL4(CCATABL)      TABLE LENGTH\n*              LENGTH       COMMAND WRITE? INSERT ASCII COMMANDS\nCCA1SP   DC    AL2(CCA1SPL),CL1' ',XL1'1',XL2'0D25'\nCCA1SPL  EQU   *-CCA1SP          1 SPACE LINE: CRLF\nCCAAFF   DC    AL2(CCAAFFL),CL1'1',XL1'1',XL3'0D250C'\nCCAAFFL  EQU   *-CCAAFF          ASA FORM FEED: CRLF + FF\nCCA0SP   DC    AL2(CCA0SPL),CL1'+',XL1'1'\nCCA0SPL  EQU   *-CCA0SP          0 SPACE LINE: DO NOTHING\nCCA2SP   DC    AL2(CCA2SPL),CL1'0',XL1'1',XL4'0D250D25'\nCCA2SPL  EQU   *-CCA2SP          1 SPACE LINE: CRLF\nCCA3SP   DC    AL2(CCA3SPL),CL1'-',XL1'1',XL6'0D250D250D25'\nCCA3SPL  EQU   *-CCA3SP          1 SPACE LINE: CRLF\n* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCA1SP\nCCATABL EQU    *-CCATAB         THE LENGTH OF THE TABLE\n*---------------------------------------------------------------------*\nCCMTAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE\n* MACHINE CODE CONTROL BYTES (PRINTER CHANNEL COMMANDS)\n* DEFAULT BYTE: CCMWS1L: SINGLE RETURN\n         DC    AL4(CCMTABL)      TABLE LENGTH\n*              LENGTH        COMMAND WRITE? INSERT ASCII COMMANDS\nCCMWS1L  DC    AL2(CCMWS1LL),XL1'09',XL1'1',XL2'0D25'\nCCMWS1LL EQU   *-CCMWS1L         Write and Space 1 line\nCCMWS2L  DC    AL2(CCMWS2LL),XL1'11',XL1'1',XL4'0D250D25'\nCCMWS2LL EQU   *-CCMWS2L         Write and Space 2 lines\nCCMWS3L  DC    AL2(CCMWS3LL),XL1'19',XL1'1',XL6'0D250D250D25'\nCCMWS3LL EQU   *-CCMWS3L         Write and Space 3 lines\nCCMWSC1  DC    AL2(CCMWSC1L),XL1'89',XL1'1',XL4'0D250C'\nCCMWSC1L EQU   *-CCMWSC1         Write and Skip to Channel 1: CRLF + FF\nCCMSP1L  DC    AL2(CCMSP1LL),XL1'0B',XL1'0',XL2'0D25'\nCCMSP1LL EQU   *-CCMSP1L         Space 1 line immidiate\nCCMSP2L  DC    AL2(CCMSP2LL),XL1'13',XL1'0',XL4'0D250D25'\nCCMSP2LL EQU   *-CCMSP2L         Space 2 lines immidiate\nCCMSP3L  DC    AL2(CCMSP3LL),XL1'1B',XL1'0',XL6'0D250D250D25'\nCCMSP3LL EQU   *-CCMSP3L         Space 3 lines immidiate\nCCMSKC1  DC    AL2(CCMSKC1L),XL1'8B',XL1'0',XL1'0C'\nCCMSKC1L EQU   *-CCMSKC1         Skip to Channel 1 Immediate: FORM FEED\n* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCMSP1L\nCCMTABL EQU    *-CCMTAB         THE LENGTH OF THE TABLE\n*---------------------------------------------------------------------*\n* MACHINE CODE  BYTE  (PRINTER CHANNEL COMMANDS)\n* MACHINE CODE TO CARRIAGE CONTROL TRANSLATION TABLE\n* PRE-DEFINED FORMS OF PCL COMMANDS\nMCTAB    DS    0F                ; FULL WORD ALIGNMENT\n         DC    AL4(MCTABL)       ; LENGTH OF THIS TABLE\nMCTP1SP  DC    X'09',C' '         Write and Space 1 Lines: DEFAULT\nMCRECL   EQU   *-MCTP1SP          RECORD LENGTH\n         DC    X'8B',C'1'         Skip to Channel 1 Immediate:FORM FEED\n         DC    X'89',C'1'         Write and skip to Channel 1:FORM FEED\n         DC    X'11',C'0'         Write and Space 2 Lines\n         DC    X'19',C'-'         Write and Space 3 Lines\n         DC    X'0B',C' '         Space 1 Line Immediate\n         DC    X'13',C'0'         Space 2 Lines Immediate\n         DC    X'1B',C'-'         Space 3 Lines Immediate\n         DC    X'01',C'+'         Write Without Spacing\n* ALL OTHER MACHINE CODE WILL BE TRANSLATED TO CCTP1SP\nMCTABL   EQU   *-MCTAB            TABLE LENGTH\n*---------------------------------------------------------------------*\n* PRE-DEFINED FORMS OF PCL COMMANDS\nPCLTAB   DS    0F                ; FULL WORD ALIGNMENT\n         DC    AL4(PCLTABL)      ; LENGTH OF THIS PCL TABLE\nPCLFPT00 DC    CL4'PT00',AL4(PCLPT00)  PORTRAIT,  DEFATULT PAPER\nPCLRECL  EQU   *-PCLFPT00              RECORD LENGTH\nPCLFPT01 DC    CL4'PT01',AL4(PCLPT01)  PORTRAIT,  DEFATULT PAPER\nPCLFPT02 DC    CL4'PT02',AL4(PCLPT02)  PORTRAIT,  DEFATULT PAPER\nPCLFLS00 DC    CL4'LS00',AL4(PCLLS00)  LANDSCAPE, DEFAULT PAPER\nPCLFLS01 DC    CL4'LS01',AL4(PCLLS01)  LANDSCAPE, DEFAULT PAPER\nPCLFLS02 DC    CL4'LS02',AL4(PCLLS02)  LANDSCAPE, DEFAULT PAPER\nPCLFLG00 DC    CL4'LG00',AL4(PCLLG00)  LANDSCAPE, LEGAL PAPER\nPCLFLG01 DC    CL4'LG01',AL4(PCLLG01)  PORTRAIT,  LEGAL PAPER\nPCLTABL  EQU   *-PCLTAB                THE END OF TABLE\n*---------------------------------------------------------------------*\n* PCL 5 Commands in EBCDIC format\n* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth\nPCLLS00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS00L EQU   *-PCLLS00\n* PCL FORM: PCLCLS01 FOR LANDSCAPE, DEFAULT PAPER, 13 pitch\nPCLLS01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l5.7C'  5.7/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s13H'        Use 13 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS01L EQU   *-PCLLS01\n* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth, SIMPLEX\nPCLLS02  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS02L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS02L EQU   *-PCLLS02\n* PCL FORM: PCLCLG00 FOR LANDSCAPE, LEGAL   PAPER\nPCLLG00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLG00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l3A'    Select LEGAL paper\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLG00L EQU   *-PCLLG00\n* PCL FORM: PCLCLG01 FOR PORTRAIT,  LEGAL   PAPER\nPCLLG01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLG01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l3A'    Select LEGAL paper\n         DC    X'27',X'50',C'l0O'    Select PORTRAIT  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    5/48 inch vertical motion index\n         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLG01L EQU   *-PCLLG01\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 17 PITCH\nPCLPT00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s17H'        Use 17 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT00L EQU   *-PCLPT00\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 14 PITCH\nPCLPT01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT01L EQU   *-PCLPT01\n* PCL FORM: PCLCPT02 FOR PORTRAIT,  DEFAULT PAPER, 10 PITCH, SIMPLEX\nPCLPT02  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT02L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l6D'    6 lines per inch ve@DM102009\n         DC    X'27',X'50',C'l0S'    Force SIMPLEX      @DM102009\n         DC    X'27',C'(s10H'        Use 10 pitch (chara@DM102009\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT02L EQU   *-PCLPT02\n*---------------------------------------------------------------------*\n*EBCDIC-to-ASCII table for Canadian Bilingual CECP Code Page 037\n*\n*             000102030405060708090A0B0C0D0E0F\nE2ATAB   DS 0CL256\n         DC X'00010203DC09C37FCAB2D50B0C0D0E0F' ;00;\n         DC X'10111213DBDA08C11819C8F21C1D1E1F' ;10;\n         DC X'C4B3C0D9BF0A171BB4C2C5B0B1050607' ;20;\n         DC X'CDBA16BCBBC9CC04B9CBCEDF1415FE1A' ;30;\n         DC X'20FF838485A0C68687A4BD2E3C282B7C' ;40;\n         DC X'268288898AA18C8B8DE121242A293BAA' ;50;\n         DC X'2D2FB68EB7B5C78F80A5DD2C255F3E3F' ;60;\n         DC X'9B90D2D3D4D6D7D8DE603A2340273D22' ;70;\n         DC X'9D616263646566676869AEAFD0ECE7F1' ;80;\n         DC X'F86A6B6C6D6E6F707172A6A791F792CF' ;90;\n         DC X'E67E737475767778797AADA8D1EDE8A9' ;A0;\n         DC X'5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E' ;B0;\n         DC X'7B414243444546474849F0939495A2E4' ;C0;\n         DC X'7D4A4B4C4D4E4F505152FB968197A398' ;D0;\n         DC X'5CF6535455565758595AFDE299E3E0E5' ;E0;\n         DC X'30313233343536373839FCEA9AEBE99F' ;F0;\n* BANNER PAGE LAYOUT\n*                                                                 LINE#\nBNRBUF   DS 0C\n         DC C'****************************************'\n         DC C'****************************************'              01\n         DC C'*                                       '\n         DC C'                                       *'              02\n         DC C'*            ...                        '\n         DC C'                        .::::.         *'              03\n         DC C'*         .:::::       :::              '\n         DC C'                        ::::::         *'              04\n         DC C'*        .:::''''''       :::              '\n         DC C' ...      ...  ..       ::::::         *'              05\n         DC C'*        :::  .:::::.  :::::::.   .:::::'\n         DC C'.''::.    .::''.:::  .::::''::::''::::.    *'          06\n         DC C'*        ::: .:::::::. ::::::::. .::::::'\n         DC C':.''::.  .::'':::''''  ::::::    ::::::    *'          07\n         DC C'*        ::: :::   ::: :::   ::: :::  ::'''\n         DC C''' '':::.::  :::    ::::::    ::::::    *'             08\n         DC C'*       .::: :::   ::: :::   ::: :::.:'' '\n         DC C'.   ::::''  .:::    ''::::.::::.::::''    *'           09\n         DC C'*    ..::::'' ''::...::'' ''::...::'' '':::. :'\n         DC C'::  :::'' ::::''          ::::::         *'            0A\n         DC C'*    ::::''''   '':::::''   '':::::''   '':::::'''\n         DC C''' .::''  :::''           ::::::         *'            0B\n         DC C'*    ''''''                                '\n         DC C'  .::''                  ''::::''         *'           0C\n         DC C'*                                       '\n         DC C' .::''                                  *'             0D\n         DC C'*                                       '\n         DC C'                                       *'              0E\n         DC C'*                     Sobeys Ontario Pro'\n         DC C'duction Mainframe                      *'              0F\n         DC C'*                                       '\n         DC C'                                       *'              10\n         DC C'*                           Network Prin'\n         DC C'ting Service                           *'              11\n         DC C'*                                       '\n         DC C'                                       *'              12\n         DC C'*       ********************************'\n         DC C'********************************       *'              13\n         DC C'*       * FROM HOST   :                 '\n         DC C'                               *       *'              14\n         DC C'*       * TO PRINTER  :                 '\n         DC C'                               *       *'              15\n         DC C'*       * USERID/NAME :                 '\n         DC C'                               *       *'              16\n         DC C'*       * JOB NAME/ID :                 '\n         DC C'                               *       *'              17\n         DC C'*       * STEP NAME   :                 '\n         DC C'                               *       *'              18\n         DC C'*       * DD NAME     :                 '\n         DC C'                               *       *'              19\n         DC C'*       * PRINT TIME  :                 '\n         DC C'                               *       *'              1A\n         DC C'*       ********************************'\n         DC C'********************************       *'              1B\n         DC C'*                                       '\n         DC C'                                       *'              1C\n         DC C'****************************************'\n         DC C'****************************************'              1D\nBNRBFEND DS 0C\nBNRBFLEN EQU BNRBFEND-BNRBUF      BANNER PAGE BUFFER LENGTH\n*\nBNRHOSTO DC    CL44'         '           PAGE: HOSTNAME FROM@DM101909\nBNRPNTRC DC    CL44'DEST(        ), SYSOUT CLASS( ), FORM(    )'\n* TIME AND DATE EDIT FORMATS\nDATEPTN  DC    X'40212020207A21204020202020612120612120'\n* EDIT MEANING:  b ( d d d : d d b ( d d d / d d / d d\nDATEPTNL EQU   *-DATEPTN\n*---------------------------------------------------------------------*\n*        PROGRAM DSECTS: MAPING DSECTS\n*---------------------------------------------------------------------*\n* MAPPING DSECTS\nIRXSTATD DSECT                    16 byte static IRE storage\nIRXDSTGA DS    A                  Address of dynamic storage area\n*\n* File Status: control the procedures of record processing:\n*  Initial: IRX1STR, set in OPEN routine\n*  In status of IRX1STR, process the banner page.\n*    If no banner required, or banner page is processed,\n*    the status is changed to IRX1STP.\n*  In status of IRX1STP, process the PCL command.\n*    If no PCL command required, or PCL command is processed,\n*    the status is changed to IRX1STI.\n*  In status of IRX1STI, process the first record.\n*    After the first record is processed,\n*    the status is changed to IRXNXTR.\n*\n*\nIRXFLAG  DS    X                  File status flag\nIRX1STR  EQU   X'00'              ... Flag of first time call\nIRX1STP  EQU   X'01'              ... Flag to process PCL commands\nIRX1STI  EQU   X'02'              ... Flag to process first record\nIRXNXTR  EQU   X'03'              ... READ NEXT RECORD (NOT FISRT)\nIRXNXTI  EQU   X'04'              ... INSERT NEXT RECORD (NOT FIRST)\nIRX1STM  EQU   X'05'              ... FIRST RECORD FOR MACHINE CODE\n*                                 ... ACTUALLY THE SECOND RECORD\n         DS    3X                 unused\n         DS    D                  unused\n*---------------------------------------------------------------------*\n*        PROGRAM DSECTS: DYNAMIC ALLOCATED STORAGE\n*---------------------------------------------------------------------*\nXPCLSTG  DSECT\nSAVEAREA DS    18F                Save Area\nSAVERTN1 DS    F                  save area for LEVEL 1 CALL\nSAVERTN2 DS    F                  save area for LEVEL 2 CALL\n* TIME MACRO LIST FORM\nTIMELST  TIME  LINKAGE=SYSTEM,MF=L   TIME LIST FORM\nRECLEN   DS    F                  RECORD LENGTH FOR FIX LENGTH\n* RECORD TYPE BYTE\nRECFM    DS    C                  RECORD LENGTH TYPE V OR F\nRECFMFB  EQU   C'F'               FIXED LENGTH RECORD TYPE\nRECFMVB  EQU   C'V'               VARIABLE LENGTH RECORD TYPE\n* FLAG TO SHOW IF COPY THE SOURCE RECORD\nCOPYREC  DS    X                  VALUE: YES OR NO\n* CARRIAGE CONTROL BYTE\nCCBYTE   DS    X                  CURRENT CC BYTE\nCCBYTESV DS    X                  CC BYTE OF PREVIOUS RECORD\nCCBYTETM DS    X                  TEMPORARY BUFFER FOR EXCHANGE CCBYTE\n* CARRIAGE CONTROL TYPE\nCCMODE   DS    X                  CARRIAGE CONTROL TYPE\nCCMODASA EQU   X'0'               ASA CARRIAGE CONTROL MODE\nCCMODMC  EQU   X'1'               PRINTER CHANNEL COMMANDS(MAHINE CODE)\n* ASA CARRIAGE CONTROL BYTE TYPES\nCCTP0SP  EQU   C'+'               CC BYTE '+' 0 LINE FEED (OVERSTRIKE)\nCCTP1SP  EQU   C' '               CC BYTE ' ' 1 LINE FEED\nCCTP2SP  EQU   C'0'               CC BYTE '0' 2 LINE FEED\nCCTP3SP  EQU   C'-'               CC BYTE '-' 3 LINE FEED\n* END OF MACHINE CODE TRANSLATION TABLE\n* BANNER PAGE FIELD DEFINITIONS\nBNRHOST  DS    CL44'         '    BANNER PAGE: HOSTNAME FROM@DM101909\nBNRHOSTL EQU   X'14'              BANNER PAGE: FROM HOST LINE #\n*PRINTER MODEL\nBNRPNTR  DS    0CL44              BANNER PAGE: PRINTER NAME\n         DS    CL5\nBNRDEST  DS    CL8                BANNER PAGE: PRINTER DEST\n         DS    CL16\nBNRCLAS  DS    CL1                BANNER PAGE: SYSOUT CLASS\n         DS    CL8\nBNRFORM  DS    CL4                BANNER PAGE: PRINT FORM\n         DS    CL2\n*END OF PRINTER MODEL\nBNRPNTRL EQU   X'15'              BANNER PAGE: PRINTER NAME LINE #\nBNRUSER  DS    CL44               BANNER PAGE: USER NAME\nBNRUSERL EQU   X'16'              BANNER PAGE: USER NAME LINE #\nBNRJBNM  DS    CL44               BANNER PAGE: JOB NAME\nBNRJBNML EQU   X'17'              BANNER PAGE: JOB NAME LINE #\nBNRDSSN  DS    CL44               BANNER PAGE: STEP NAME\nBNRDSSNL EQU   X'18'              BANNER PAGE: STEP NAME LINE #\nBNRDDNM  DS    CL44               BANNER PAGE: DD NAME\nBNRDDNML EQU   X'19'              BANNER PAGE: DD NAME LINE #\nBNRTIME  DS    CL44               BANNER PAGE: TIME AND DATE\nBNRTIMEL EQU   X'1A'              BANNER PAGE: TIME AND DATE LINE #\n*\nBNRLNCTR DS    X                  CURRENT LINE NUMBER IN BANER PAGE\nBNRBFPOS DS    F                  CURRENT LINE START ADDRESS\nBNRBFEOF DS    X                  FLAG TO TELL IF AT THE LAST LINE\n* BANNER LENGTH CONSTANTS\nBNRFDBYT EQU   X'18'              FIELD START POSITION      : 24\nBNRFDLEN EQU   X'2C'              FIELD LENGTH IN BYTES     : 44\nBNRRCLEN EQU   X'50'              BANNER RECORD LENGTH      : 80\n* PCL COMMAND FLAGS\nPCLFLAG  DS    X                  FLAG FOR PCL COMMAND PROCESSING\nPCLINIT  EQU   X'00'              INITIAL STATUS, NOT YET PROCESSED.\nPCLINST  EQU   X'01'              REQUIRE TO PROCESS PCL COMMAND\n*\nDATEAREA DS    0CL17              TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    X                  '01' FOR TEMPORARY BYTE\nDATESAVE DS    CL16               TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    0D                 Round up to double word boundary\nXPCLSTGL EQU   *-XPCLSTG          Length of dynamic storage area\n********************************************************************\n* DUMMY SECTION: DATA TABLE\n********************************************************************\n         DS    0D                 Round up to double word boundary\n* WORK RECORD BUFFER: SINGLE RECORD PER EXECUTION CONTROL\nRECSTG   DSECT\nRECORD   DS    CL4092             MAXIMUM 4092 BYTE OF RECORDS\nRECSTGL  EQU   *-RECSTG           LENGTH OF THIS DSECT\nSTGLEN   EQU   XPCLSTGL+RECSTGL   TOTAL DSECT LENGTH\n         SPACE 5\n         EZAPPFCD IRE=DSECT,   DSECT for input record exit parameters  X\n               RDA=DSECT       DSECT for routing data area\n         SPACE 5\n         IAZFSIP LIST=YES          JES FSI PARAMETER LIST\n         SPACE 5\n         IAZJSPA LIST=YES          JOB SEPARATOR PAGE DATA AREA\n         SPACE 5\n.END     END   EXITNPFR            End of EXPCLLS0  module\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NPFIXASO": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x009\\x01\\x03(\\x9f\\x01\\x06\\x11_\\t\\x15\\x04\\xf4\\x04\\xf2\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-10-16T00:00:00", "modifydate": "2006-04-25T09:15:39", "lines": 1268, "newlines": 1266, "modlines": 0, "user": "ZHOU"}, "text": "EXITNPFR TITLE 'NPF Input Record Exit Program for network printers'\n***********************************************************************\n*---------------------------------------------------------------------*\n*                   NPF Input Record Exit                             *\n*---------------------------------------------------------------------*\n* Program: EXITNPFR                                                   *\n* Purpose: NPF Input Record Exit for network printers                 *\n* Design : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* Date   : April 14, 2003                                             *\n* Description:                                                        *\n*   This exit program is used for network printers with following     *\n*   specifications:                                                   *\n*                                                                     *\n* Printer Type        Orientation PAPER   CC  Duplex Lines/Page       *\n* =================== =========== ======= === ====== ==========       *\n* IP Printer w/ PCL 5  LANDSCAPE  Default Yes Yes    64               *\n*                                                                     *\n* Installation Instructions:                                          *\n*                                                                     *\n*  1.Compile and generate load module into any LINKLST library.       *\n*  2.In TCP/IP Network Print Facility ISPF Panels,                    *\n*    a. Select O for Options                                          *\n*    b. Select A for ADD                                              *\n*    c. Enter the option name, i.e. EXITNPFR                          *\n*    d. Enter EXITNPFR as the name of 'Input Record Exit'             *\n*    e. Enter 'BINARY CFFIRST' as the LPR options                     *\n*  3.Create a NPF printer to use this NPF option                      *\n*    In TCP/IP Network Print Facility ISPF Panels,                    *\n*    a. Select R for Routing                                          *\n*    b. Select A for ADD                                              *\n*    c. Enter the printer name, i.e. VCIT3                            *\n*       Enter the minor name i.e. ALSCC(Class A, Form LSCC)           *\n*    d. Enter EXITNPFR as the option name                             *\n*       Enter IP address of target network PCL printer.               *\n*       Enter IPPRT as printer name, or given by printer server.      *\n*                                                                     *\n* Compile:                                                            *\n*   This exit program is a reentrent program. RENT option must be     *\n*   specified in LINK PARM.                                           *\n*   The host name should be given in SYSPARM in PARM.C.               *\n*                                                                     *\n* //COMPILE EXEC ASMACL,PARM.L='LIST,RENT',                           *\n* //  PARM.C='SYSPARM(maintest.agora.lan)'    <== host name           *\n* //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(EXITNPFR)             *\n* //C.SYSLIB  DD DISP=SHR,DSN=TCPIP.SEZACMAC                          *\n* //          DD DISP=SHR,DSN=SYS1.MACLIB                             *\n* //          DD DISP=SHR,DSN=SYS1.MODGEN                             *\n* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB                       *\n* //L.SYSIN   DD *                                                    *\n*   NAME EXITNPFR(R)                                                  *\n* /*                                                                  *\n*                                                                     *\n* Usage  Instruction:                                                 *\n*  Make sure NPF is installed and running (both NPF Writer and        *\n*  Queue manager).                                                    *\n*                                                                     *\n*  You should print the dataset with Carriage Control attributes      *\n*  i.e. FBA, VBA datasets.                                            *\n*                                                                     *\n*  Sample JCL to print the data set                                   *\n* //PRINT   EXEC PGM=IEBGENER                                         *\n* //SYSPRINT  DD SYSOUT=*                                             *\n* //SYSOUT    DD SYSOUT=*                                             *\n* //SYSUT1    DD DISP=SHR,DSN=SP2487.TEMP                             *\n* //SYSUT2    DD SYSOUT=(A,,LSCC),DEST=VCIT3                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        END OF DESCRIPTION OF THE PROGRAM                            *\n***********************************************************************\nEXITNPFR CSECT\nEXITNPFR AMODE ANY\nEXITNPFR RMODE ANY\n* LOCAL CONSTANTS\n         LCLC  &USEBNR,&USECC,&USEPCL,&PCLFORM,&SKIP1FF,&HOSTNAME\n&USEBNR  SETC  '&SYSPARM'(1,1)          FLAG TO USE BANNER\n&USECC   SETC  '&SYSPARM'(3,1)          FLAG TO USE CARRIAGE CONTROL\n&USEPCL  SETC  '&SYSPARM'(5,1)          FLAG TO INSERT PCL COMMANDS\n&SKIP1FF SETC  '&SYSPARM'(7,1)          FLAG TO SKIP FIRST FORM-FEED\n&PCLFORM SETC  '&SYSPARM'(9,4)          THE PCL FORM NAME\n&HOSTNAME SETC '&SYSPARM'(14,44)        THE HOST NAME OF SYSTEM\n***********************************************************************\n* COMPILE STAGE SYSPARM SYNTAX CHECKING\n***********************************************************************\n         AIF   ('&USEBNR'  NE '1' AND '&USEBNR'  NE '0').ERRBNR,       X\n               ('&USECC'   NE '1' AND '&USECC'   NE '0').ERRCC,        X\n               ('&USEPCL'  NE '1' AND '&USEPCL'  NE '0').ERRPCL1,      X\n               ('&SKIP1FF' NE '1' AND '&SKIP1FF' NE '0').ERR1FF,       X\n               ('&PCLFORM' EQ '    ' AND '&USEPCL' EQ '1').ERRPCL2,    X\n               ('&PCLFORM' EQ 'PT00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'PT01').OKPCLF,                          X\n               ('&PCLFORM' EQ 'PT02').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS01').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS02').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LG00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LG01').OKPCLF,                          X\n               ('&PCLFORM' EQ '    ').OKPCLF\n         AGO   .START\n.ERRBNR  MNOTE 12,'Use banner flag (USEBNR=&USEBNR) is not 0 or 1.'\n         AGO   .END\n.ERRCC   MNOTE 12,'Use CC     flag (USECC=&USECC) is not 0 or 1.'\n         AGO   .END\n.ERR1FF  MNOTE 12,'Skip first form feed (&SKIP1FF) is not 0 or 1.'\n         AGO   .END\n.ERRPCL1 MNOTE 12,'Use PCL    flag (USEPCL=&USEPCL) is not 0 or 1.'\n         AGO   .END\n.ERRPCL2 MNOTE 12,'The PCL Form cannot be blank when USEPCL is 1.'\n         AGO   .END\n.ERRPCLF MNOTE 12,'The PCL form (&PCLFORM) is not pre-defined name.'\n         MNOTE 12,'PCL Forms are: PT00,LS00,LG00,LG01 and 4 spaces.'\n         AGO   .END\n.OKPCLF  AGO   .START\n.START   ANOP\n***********************************************************************\n* NORMAL PROCESSING\n***********************************************************************\n*              Registers           entry       EXITNPFR    exit\nR0       EQU   0                   n/a         work        =entry\nR1       EQU   1                   >>IRELIST   work        =entry\nR2       EQU   2                   n/a         work        =entry\nR3       EQU   3                   n/a         work        =entry\nR4       EQU   4                   n/a         work        =entry\nR5       EQU   5                   n/a         work        =entry\nR6       EQU   6                   n/a         work        =entry\nR7       EQU   7                   n/a         work        =entry\nR8       EQU   8                   n/a         >IRXSTATD   =entry\nR9       EQU   9                   n/a         >RTDATA     =entry\nR10      EQU   10                  n/a         >IRELIST    =entry\nR11      EQU   11                  n/a         base 2      =entry\nR12      EQU   12                  n/a         base 1      =entry\nR13      EQU   13                  >callsave   >XPCLSTG    =entry\nR14      EQU   14                  >return     work        =entry\nR15      EQU   15                  >EXITNPFR   retcode     retcode\n         USING EXITNPFR,R15       Establish temporary base register\n         B     XPCL0000           Branch around constants\n         DC    CL23'PROGRAM NAME(EXITNPFR)'      Module identifier\n         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'\n         DC    CL48'NPF Record Exit Program For Network Printers'\n         DC    CL33'SETTINGS: BANNER(&USEBNR) CC(&USECC) PCL(&USEPCL)'\n         DC    CL25'SKIP1FF(&SKIP1FF) PCLFORM(&PCLFORM)'\n         DC    CL55'HOSTNAME(&HOSTNAME)'\n         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '\nXPCLASE2 DC    A(EXITNPFR+4096)   Second base register if needed\nXPCL0000 DS    0H\n         STM   R14,R12,12(R13)    Save caller's registers\n         LR    R12,R15            Change base registers\n         DROP  R15                Tell assembler\n         USING EXITNPFR,R12,R11\n         L     R11,XPCLASE2       Establish second base register\n         L     R10,0(R1)          Get address of exit parameter list\n         USING IRELIST,R10        Make exit parameter list addressable\n         L     R9,IRERTD          Get address of routing data area\n         USING RTDATA,R9          Make routing data area addressable\n         L     R8,IRESTRG         Get address of IRE static memory\n         USING IRXSTATD,R8        Make IRE static storage addressable\n         ICM   R1,15,IRXDSTGA     Get address of IRE dynamic storage\n         BNZ   XPCL0020           Storage has already been allocated\n         GETMAIN RC,LV=STGLEN,LOC=BELOW   Get program storage\n         LTR   R15,R15            Did GETMAIN work?\n         BZ    XPCL0010           Yes\n         WTO   'EXITNPFR GETMAIN FAILED!'\n         LA    R15,8              No,  show error\n         B     RET00010           Return to NPF\nXPCL0010 DS    0H\n         ST    R1,IRXDSTGA        Save dynamic storage address\nXPCL0020 DS    0H\n         ST    R1,8(0,R13)        Complete save area pointers\n         ST    R13,4(0,R1)\n         LR    R13,R1             Point to dynamic storage area\n         USING XPCLSTG,R13        Tell assembler\n         USING RECSTG,XPCLSTG+XPCLSTGL Tell assembler\n         CLC   RTFUNCTN(4),=CL8'OPEN' Is this OPEN call?\n         BE    OPN00000           Yes\n         CLC   RTFUNCTN(3),=CL8'PUT'  Is this PUT call?\n         BE    PUT00000           Yes\n         CLC   RTFUNCTN(5),=CL8'CLOSE' Is this CLOSE call?\n         BE    CLS00000           Yes\n         CLC   RTFUNCTN(7),=CL8'RELEASE' Is this RELEASE call?\n         BE    REL00000           Yes\n         CLC   RTFUNCTN(4),=CL8'TERM' Is this TERM call?\n         BE    TRM00000           Yes\n         WTO   'EXITNPFR UNKNOWN FUNCTION'\n         LA    R15,4              Bad function, show error\n         B     RET00000           Return to NPF\n*---------------------------------------------------------------------*\n*        Process OPEN call\n*---------------------------------------------------------------------*\nOPN00000 DS    0H\n         MVI   IRXFLAG,IRX1STR    Set flag for READ FIRST RECORD\n         MVI   CCMODE,CCMODASA    DEFAULT IS ASA CARRIAGE CONTROL MODE\n         XC    BNRLNCTR,BNRLNCTR  RESET SET BANNER LINE COUNTER\n         MVI   BNRBFEOF,NO        SET BANNER LAST LINE TO NO.\n         MVI   PCLFLAG,PCLINIT    SET PCL FLAG TO INIT\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*        Process PUT call\n*---------------------------------------------------------------------*\n* PROCESSING STEPS:\n* 1. INIT\n*    R2: CURRENT LOCATION OF TARGET RECORD BUFFER\n*    R3: CURRENT LOCATION OF SOURCE RECORD\n*    R4: WORK\n*    R5: MVCREC: LENGTH OF BYTES TO BE COPIED\n*    R5:  TRREC: LENGTH OF BYTES TO BE COPIED\n*    R6: MVCREC: TARGET ADDRESS TO BE COPIED TO\n*    R6:  TRREC: TARGET ADDRESS TO BE TRANSLATED\n*    R7: MVCREC: SOURCE ADDRESS TO BE COPIED FROM\n*    R7:  TRREC: ADDRESS OF TRANSLATION TABLE\n*\n* 2. SAVE AND TEST RECORD INFO: RECORD TYPE AND RECORD LENGTH\n*\n* 3. TEST RECORD FORMAT\n*   FOR VARIABLE LENGTH: R2 += 4; R3 += 4\n*\n* 4. TEST FIRST RECORD?\n*    YES: A. INSERT PCL COMMAND\n*         B. CHANGE THE CARIAGE CONTROL COMMAND AS FOLLOWS:\n*            '1' TO '+': FORM FEED TO OVERSTRIKE\n*            ' ' TO '+': SINGLE SPACE TO OVERSTRIKE\n*            '0' TO ' ': DOUBLE SPACE TO SIGNLE SPACE\n*            '-' TO '0': TRIPLE SPACE TO BDOUBLE SPACE\n* 5. INSERT CARRIAGE COMMAND AS FOLLOW:\n*    '1': ADD CRLF(X'0D25') AND FORM FEED BYTE (X'0C), R2 += 3\n*    ' ': ADD ONE CRLF (X'0D25')     R2 += 2\n*    '0': ADD TWO CRLF               R2 += 4\n*    '-': ADD THREE CRLF             R2 += 6\n* 6. COPY THE RECORD DATA FROM SOURCE TO TARGET RECORD\n*    SKIP THE FIRST CC BYTE          R2 += (RECLEN-1)\n*\n* 7. UPDATE VARIABLE HEADER 4 BYTES IF IT'S VARIABLE FORMAT\n*\n* 8. SAVE THE RECORD LENGTH TO RECLEN\n*\n* 9. TRANSLATE THE DATA PART IN TARGET RECORD INTO ASCII\n*\n*10. TELL NPF:\n*   . NOT SAVE THE CURRENT RECORD\n*   . INSERT A NEW RECORD (JUST GENERATED) IN NEXT CONTROL RETURN\n******************************************************************\nPUT00000 DS    0H\n*------PROCESS BANNER PAGE ---------------------------------------\n         CLI   IRXFLAG,IRX1STR    IS THIS THE FIRST TIME CALL?\n         BNE   PUT00100           NO, PROCESS NEXT STEP\n         CLI   USEBNR,YES         INSERT BANNER PAGE\n         BE    BNR00000           YES, PROCESS GENERATE BANNER PAGE\n         MVI   IRXFLAG,IRX1STP    UPDATE THE IRX FLAG TO IRX1STP\n*------PROCESS PCL COMMAND----------------------------------------\nPUT00100 DS    0H\n         CLI   IRXFLAG,IRX1STP    TIME TO PROCESS PCL COMMAND?\n         BNE   PUT00800           NO, SKIP THE PCL PROCESS\n         BAL   R4,INSPCL          CALL INSERT PCL COMMAND\n         B     RET00000           RETURN TO NPF IF PCL CMD INSERTED.\n*------PROCESS INPUT RECORDS -------------------------------------\nPUT00800 DS    0H\n         CLI   IRXFLAG,IRXNXTI    INSERT THE NEXT RECORD?\n         BE    PUT04000           YES, CALL INSERT RECORD\n* READ RECORD INFO\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R2,RECORD          LOAD THE TARGET RECORD ADDR\n         L     R3,IREBPTR         LOAD THE SOURCE RECORD ADDR\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   PUT01000           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD FORMAT\n         LA    R2,4(0,R2)         SKIP THE TARGET VB RECORD HEADER\n         LA    R3,4(0,R3)         SKIP THE SOURCE VB RECORD HEADER\n* BEGIN TO PROCESS THE RECORD\nPUT01000 DS    0H\n         CLI   USECC,YES          REQUIRE TO TRANSLATE CC BYTE?\n         BE    PUT01100           YES, JUMP TO PROCESS CC\n*---------------------------------------------------------------------*\n* PROCESS NON-CC RECORDS\n*---------------------------------------------------------------------*\n         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC\n         LR    R7,R3              LOAD THE START OF SORUCE RECORD\n         L     R5,RECLEN          LOAD THE RECORD LENGTH\n         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2\n         BCTR  R5,0\n         EX    R5,MVCREC          COPY THE RECORD\n         MVC   0(2,R2),CRLF       COPY CRLF\n         LA    R2,2(0,R2)         UPDATE THE CURRENT POSITION\n         B     PUT01600\n*--------------------------------------------------------------------\n* PROCESS CC RECORD: ASA CC AND MC MODE\n*--------------------------------------------------------------------\nPUT01100 DS    0H\n         MVI   COPYREC,YES        DEFAULT IS TO COPY THE SOURCE RECORD\n         MVC   CCBYTE(1),0(R3)    SAVE THE CARRIAGE CONTROL BYTE\n*--------------------------------------------------------------------\n* PROCESS THE FIRST RECORD WITH MACHINE CODES\n*--------------------------------------------------------------------\n         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?\n         BNE   PUT01200           NO, PROCESS NEXT NON-FIRST RECORD\n         CLI   0(R3),MCTPFF       IS THIS MACHINE CODE BYTE X'8B'?\n         BNE   PUT01300           CONTINUE IN ASA MODE\n* PROCESS MACHINE CODE MODE\n         MVI   CCMODE,CCMODMC     SET MACHINE CODE CARRIAGE MODE\n         MVI   CCBYTESV,MCTPFF    SAVE CCBYTE(FF) TO CCBYTESV\n         MVI   IRXFLAG,IRX1STM    SET THE FLAG TO FIRST MC RECORD\n         MVI   IRERFLG,X'00'      Tell NPF to READ NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n* PROCESS NON-FIRST RECORDS\n*---------------------------------------------------------------------*\nPUT01200 DS    0H\n         CLI   CCMODE,CCMODMC     IS THIS MC MODE?\n         BNE   PUT01300           NO, CONTINUE TO PROCESS\n* SWITCH CCBYTE AND CCBYTESV\n         MVC   CCBYTETM(1),CCBYTE\n         MVC   CCBYTE(1),CCBYTESV\n         MVC   CCBYTESV(1),CCBYTETM\n*---------------------------------------------------------------------*\n* PROCESS ALL CC RECORDS\n*---------------------------------------------------------------------*\nPUT01300 EQU   *\n         BAL   R4,INSERTCC        INSERT CARRIAGE CONTROL COMMANDS\n*---------------------------------------------------------------------*\n* COPY THE RECORD FROM SOURCE FOR CC RECORDS\n*---------------------------------------------------------------------*\n         CLI   COPYREC,YES        NEED TO COPY THE RECORD?\n         BNE   PUT01600           NO, SKIP TO COPY IT\n         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC\n         LR    R7,R3              LOAD THE START OF SORUCE RECORD\n         L     R5,IREDLEN         LOAD THE RECORD LENGTH\n         LA    R7,1(0,R7)         SKIP THE FIRST CC BYTE\n         BCTR  R5,0               SKIP THE FIRST CC BYTE IN LENGTH\n         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2\n         BCTR  R5,0\n         EX    R5,MVCREC          COPY THE RECORD\n*---------------------------------------------------------------------*\n* UPDATE THE VARIABLE RECORD HEADER\n*---------------------------------------------------------------------*\nPUT01600 BAL   R4,UPDREC          UPDATE THE RECORD\n*---------------------------------------------------------------------*\n*TELL NPF OF NEXT ACTION\n*---------------------------------------------------------------------*\nPUT01800 DS    0H\n         L     R5,RECLEN          LOAD THE RECORD LENGTH\n         LTR   R5,R5              RECORD LENGTH IS 0?\n         BZ    PUT01850\n         MVI   IRXFLAG,IRXNXTI    SET THE FLAG TO INSERT NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'01'      Tell NPF to INSERT NEXT RECORD\n         B     PUT01900\n* IF THE RECORD LENGTH IS 0, THEN READ THE NEXT RECORD, AND DO NOT\n* WRITE CURRENT EMPTY RECORD.\nPUT01850 EQU   *\n         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO INSERT NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'00'      Tell NPF to INSERT NEXT RECORD\nPUT01900 XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*Process inserting next record\n*---------------------------------------------------------------------*\nPUT04000 DS    0H\n*SAVE THE RECORD\n         LA    R6,RECORD\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN\n         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE\n*TELL NPF OF NEXT ACTION\n         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO READ NEXT RECORD\n         MVI   IREWFLG,X'00'      Write this new record\n         MVI   IRERFLG,X'00'      Tell NPF to read NEXT record\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*        Process CLOSE call\n*---------------------------------------------------------------------*\nCLS00000 DS    0H\n         MVI   IREWFLG,X'01'      No record to write\n         MVI   IRERFLG,X'00'      Normal return from CLOSE\n         XR    R15,R15            Zero return code\n         B     RET00000\n*---------------------------------------------------------------------*\n*        Process RELEASE or TERM call\n*---------------------------------------------------------------------*\nREL00000 DS    0H\nTRM00000 DS    0H\n         LR    R1,R13             Get address of dynamic storage\n         L     R13,SAVEAREA+4     Get address of caller's save area\n         FREEMAIN RU,LV=STGLEN,A=(R1) Free dynamic storage\n         XR    R15,R15            Zero return code\n         B     RET00010\n\n*---------------------------------------------------------------------*\n*        Return to NPF\n*---------------------------------------------------------------------*\nRET00000 DS    0H                 Switch back to caller's save area\n         L     R13,SAVEAREA+4     Return to caller\nRET00010 DS    0H                 Already back to caller's save area\n         ST    R15,16(R13)        Set return code in saved R15\n         LM    R14,R12,12(R13)    Restore caller's registers\n         BSM   0,R14\n*---------------------------------------------------------------------*\n*                     PRINT BANNER PAGE                               *\n*---------------------------------------------------------------------*\n* PROGRAM LOGIC:                                                      *\n* WHEN TO PRINT THE BANNGER PAGE:                                     *\n*  .WHEN IRXFLAG IS IRX1STR                                           *\n*  .WHEN BNRPOS-BNRBUF < BNRBFLEN                                     *\n* WHEN TO BRANCH:                                                     *\n*  .WHEN IRXFLAG IS IRX1STR                                           *\n* WHEN TO STOP PRINT BANNGER PAGE AND CHANGE THE STATUS:              *\n*  .WHEN BNRPOS-BNRBUF >= BNRBFLEN                                    *\n*  .CHANGE STATUS OF IRXFLAG TO IRX1STP                               *\n*                                                                     *\n* STEP 1. IF BNRLNCTR==0, THEN GET FIELD INFOMRATION:                 *\n*  . READ RECORD INFORMATION                                          *\n*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *\n*  . FILL THE FIELDS WITH SPACES                                      *\n*  . FILL THE FIELDS FROM JSPA AND NPF RTD                            *\n*  . FILL THE TIME AND DATE FIELD FROM TIME MACRO AND EDIT            *\n*  . TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL           *\n*                                                                     *\n* STEP 2. NORMAL PROCESSING (WHEN NPF RETURN CONTROL)                 *\n*  . COPY RECORD FROM BANNER TABLE TO WORK RECORD BUFFER              *\n*  . COPY THE FIELD VALUE TO WORK RECORD BUFFER                       *\n*  . UPDATE RECORD LENGTH AND VARIABLE RECORD HEADER                  *\n*  . TRANSLATE THE RECORD DATA INTO ASCII                             *\n*  . UPDATE THE NPF FIELD TO SAVE CURRENT WORK RECORD                 *\n*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *\n*                                                                     *\n* STEP 3. TEST IF THE LAST BANNER RECORD REACHED.                     *\n*  . IF YES, UPDATE THE STATUS OF IRXFLAG TO IRX1STP                  *\n*            TELL NPF TO WRITE CURRENT RECORD                         *\n*            TELL NPF TO READ THE FIRST RECORD ON SOURCE FILE         *\n*  . IF NO,  TELL NPF TO WRITE CURRENT RECORD                         *\n*            TELL NPF TO INSERT A RECORD ON NEXT RETURN CONTROL       *\n*                                                                     *\n* STEP 4. RETURN THE CONTROL BACK TO NPF                              *\n***********************************************************************\nBNR00000 DS    0H                 PRINT BANNER PAGE\n* MAIN BRANCH\n         CLI   BNRLNCTR,X'00'     IS THIS FIRST TIME TO CALL BANNER?\n         BNE   BNR02000           NO, CONTINUE TO PROCESS\n*-------------------------------------------------------------------*\n* BANNER INITIALIZATION\n* READ INFORMATION OF BANNER FIELDS.\n*    A. READ JES2 JOB INFORMATION IN JSPA DSECT                       *\n*    B. READ PRINTER DEFINITION IN RDT                                *\n*    C. GET CURRENT TIME AND DATE                                     *\n*-------------------------------------------------------------------*\nBNR01000 DS    0H\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R6,BNRBUF          LOAD THE START OF BANNER BUFFER\n         ST    R6,BNRBFPOS        SAVE THE CURRENT POSITION OF LINES\n         MVI   BNRLNCTR,X'01'     LOAD THE LINE COUNTER BY 1\n* INIT ALL FIELDS WITH SPACE\n         LA    R5,BNRFDLEN        LOAD THE LENGTH OF FIELD INTO R5\n         BCTR  R5,0\n         BCTR  R5,0\n         MVC   BNRPNTR(44),BNRPNTRC COPY THE MODEL FOR PRINTER NAME\n         LA    R6,BNRUSER         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRJBNM         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRDSSN         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRDDNM         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRTIME         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         MVC   0(DATEPTNL,R6),DATEPTN   COPY EDIT PATTERN\n* COPY JSPA\n         L     R2,IRECPAD         LOAD THE JES/VTAM PARAMETER AREA\n         L     R2,0(R2)           LOAD THE ADDRESS OF GETDS AREA\n         USING GDSPARM,R2         ADDRESSABILITY FOR GDSPARM\n         L     R3,GDSJSPA         LOAD THE JSPA AREA\n         USING JSPA,R3            ADDRESSABILITY FOR JSPA\n         LH    R4,JSPALEN         LOAD THE JSPA LENGTH\n         AR    R4,R3              MOVE TO THE EXTENTION OF JSPA\n         USING JSPEXT,R4          ADDRESSABILITY OF JPSAEXT\n         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME\n         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME\n         MVI   8(R6),C'/'         JOBNAME/JOBID SEPARATER\n         MVC   9(8,R6),JSPAJBID   COPY THE JOBID\n         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME\n         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME\n         LA    R6,BNRUSER         LOAD THE USERID FIELD\n         MVC   0(8,R6),JSPCEUID   COPY THE USERID\n         MVI   8(R6),C'/'\n         MVC   9(20,R6),JSPJPNAM  COPY THE PROGRAMMER NAME\n         LA    R6,BNRDDNM\n         MVC   0(8,R6),JSPJDSDD   COPY THE DD NAME\n         LA    R6,BNRDSSN\n         MVC   0(8,R6),JSPJDSSN   COPY THE STEP NAME\n         LA    R6,BNRDEST\n         MVC   0(8,R6),RTDAMAJK   COPY MAJOR ROUTING KEY FOR DEST\n         LA    R7,RTDAMINK        MINOR ROUTING KEY (CLASS + FORM)\n         LA    R6,BNRCLAS\n         MVC   0(1,R6),0(R7)      COPY THE SYSOUT CLASS\n         LA    R6,BNRFORM\n         MVC   0(4,R6),1(R7)      COPY THE FORM NAME\n         DROP  R2,R3,R4\n* UPDATE TIME AND DATE\n         TIME  DEC,DATESAVE,LINKAGE=SYSTEM,  GET TIME/DATE AT DATAAREA X\n               MF=(E,TIMELST),DATETYPE=YYYYMMDD\n*        MACDATE  09/08/99\n         LA    R6,BNRTIME         LOAD THE TIME FIELD\n         LA    R7,DATEAREA        LOAD THE DATA AREA (16 BYTES)\n         MVI   0(R7),X'01'        SAVE X'01' for significant lead 0\n         ED    0(9,R6),0(R7)      EDIT TIME\n         ED    9(12,R6),9(R7)     EDIT DATE\n         MVC   0(20,R6),4(R6)     SHIFT TIME FIELD TO LEFT BY 4 BYTES\n* TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL\n         MVI   IREWFLG,X'01'      Not Write CURRENT record\n         MVI   IRERFLG,X'01'      Tell NPF to insert new record NEXT\n         B     BNR04000           JUMP TO NORMAL PROCESSING\n*-------------------------------------------------------------------*\n* BANNER PAGE NORMAL PROCESSING\n*-------------------------------------------------------------------*\nBNR02000 DS    0H\n         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR02100           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD FORMAT\n         LA    R6,4(0,R6)         SKIP THE VB RECORD HEADER\n* COPY THE RECORD FROM BNRBUF TO RECORD\nBNR02100 DS    0H\n         LA    R5,BNRRCLEN\n         BCTR  R5,0\n         L     R7,BNRBFPOS           LOAD CURRENT POSITION\n         EX    R5,MVCREC             COPY CURRENT RECORD TO TARGET\n         LA    R7,BNRRCLEN(0,R6)     LOAD THE LAST POSITION TO R7\n         MVC   0(2,R7),CRLF          COPY THE CRLF TO THE END\n* PROCESS THE FIELD VALUES\nBNR02200 DS    0H\n         LA    R7,BNRLNCTR           LOAD THE LINE COUNTER\n         CLI   0(R7),BNRHOSTL        IS THIS A HOST NAME LINE?\n         BE    BNR02210\n         CLI   0(R7),BNRPNTRL        IS THIS A PRINT NAME LINE?\n         BE    BNR02220\n         CLI   0(R7),BNRUSERL        IS THIS A USERID    LINE?\n         BE    BNR02230\n         CLI   0(R7),BNRDSSNL        IS THIS A STEP NAME LINE?\n         BE    BNR02240\n         CLI   0(R7),BNRDDNML        IS THIS A DD   NAME LINE?\n         BE    BNR02250\n         CLI   0(R7),BNRJBNML        IS THIS A JOB  NAME LINE?\n         BE    BNR02260\n         CLI   0(R7),BNRTIMEL        IS THIS A TIME&DATE LINE?\n         BE    BNR02270\n* NORMAL CONSTANT FIELD\n         B     BNR03000\n* PROCESS HOST NAME FIELD\nBNR02210 LA    R7,BNRHOST              LOAD THE HOST NAME TO BE COPIED\n         B     BNR02500\nBNR02220 LA    R7,BNRPNTR              LOAD THE PRINTNAME TO BE COPIED\n         B     BNR02500\nBNR02230 LA    R7,BNRUSER              LOAD THE USER NAME TO BE COPIED\n         B     BNR02500\nBNR02240 LA    R7,BNRDSSN              LOAD THE STEP NAME TO BE COPIED\n         B     BNR02500\nBNR02250 LA    R7,BNRDDNM              LOAD THE DD   NAME TO BE COPIED\n         B     BNR02500\nBNR02260 LA    R7,BNRJBNM              LOAD THE JOB  NAME TO BE COPIED\n         B     BNR02500\nBNR02270 LA    R7,BNRTIME              LOAD THE TIME&DATE TO BE COPIED\n         B     BNR02500\n* COPY THE FIELD\nBNR02500 DS    0H\n         LA    R6,BNRFDBYT(0,R6)       MOVE TO FIELD POSITION\n         LA    R5,BNRFDLEN             LOAD THE FIELD LENGTH\n         BCTR  R5,0\n         EX    R5,MVCREC\nBNR03000 DS    0H\n* INCREASE THE LINE COUNTER BY 1\n         XR    R6,R6\n         IC    R6,BNRLNCTR             LOAD THE COUNTER\n         LA    R6,1(0,R6)              ADD THE COUNTER BY 1\n         STC   R6,BNRLNCTR             SAVE THE COUNTER\n* UPDATE THE RECORD LENGTH FOR NORMAL RECORDS\n         LA    R5,BNRRCLEN+2           RECORD LENGTH: ADD 2 BYTES CRLF\n         ST    R5,RECLEN               SAVE RECORD LENGTH\n* UPDATE THE CURRENT LOCATION\n         L     R7,BNRBFPOS             LOAD THE CURRENT POSITION\n         LA    R7,BNRRCLEN(0,R7)       UPDATE THE CURRENT POSITION\n         ST    R7,BNRBFPOS             SAVE THE CURRENT POSITION\n         LA    R6,BNRBFEND             LOAD THE END POSITION\n* TEST IF THE LAST RECORD REACHED.\n         CR    R7,R6                   REACH AT THE END OF BUFFER?\n         BL    BNR03100                NO, CONTINUE TO PROCESS\n* PROCESS THE LAST LINE IN BANNER PAGE\n         MVI   BNRBFEOF,YES            SET LAST LINE FLAG TO YES\n         LA    R6,RECORD\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR03050           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         LA    R6,4(0,R6)         ADD THE RECORD LENGTH BY 4\nBNR03050 DS    0H\n         MVI   BNRRCLEN+2(R6),FF       SAVE FORM FEED\n         LA    R5,1(0,R5)              ADD RECORD LENGTH BY 1 (FF)\n         ST    R5,RECLEN               CRLF=2 BYTES, FF=1 BYTE\nBNR03100 DS    0H\n         LA    R6,RECORD\n* UPDATE RECORD LENGTH: R5: RECORD LENGTH, R6: RECORD ADDRESS\n* UPDATE THE VARIABLE RECORD HEADER\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR03200           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         LA    R7,4(0,R5)         ADD THE RECORD LENGTH BY 4\n         ST    R7,RECLEN          SAVE RECORD LENGTH IN RECLEN\n         STH   R7,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES\n         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'\n         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'\n         LA    R6,4(0,R6)         MOVE THE R6 TO DATA FOR TR\n* TRANSLATE THE RECORD INTO ASCII\nBNR03200 DS    0H\n         BCTR  R5,0\n         LA    R7,E2ATAB\n         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII\nBNR03400 DS    0H\n* SAVE THE RECORD INFO FOR NPF TO PUT\n         LA    R6,RECORD          LOAD RECORD ADDRESS\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         L     R6,RECLEN          LOAD THE RECORD LENGTH\n         ST    R6,IREDLEN         SAVE RECORD LENGTH TO IREDLEN\n* UPDATE & TEST THE CURRENT LOCATION\n         CLI   BNRBFEOF,YES       LOAD THE EOF FLAG ADDRESS\n         BNE   BNR03500                NO, CONTINUE TO PROCESS\n* IF LAST RECORD, UPDATE THE STATUS OF IRXFLAG TO IRX1STP\n* REACH AT THE END OF BANNER BUFFER\n         MVI   IRXFLAG,IRX1STP         UPDATE THE IRX FLAG TO IRX1STP\n         MVI   IREWFLG,X'00'           Write this record\n         MVI   IRERFLG,X'02'           Tell NPF to read FIRST RECORD\n         B     BNR04000\n* NOT REACH AT THE END OF BANNER BUFFER\nBNR03500 DS    0H\n         MVI   IREWFLG,X'00'           Write this record\n         MVI   IRERFLG,X'01'           Tell NPF to INSERT NEXT RECORD\nBNR04000 DS    0H\n         XR    R15,R15                 Zero return code\n         B     RET00000\n***********************************************************************\n*---------------------------------------------------------------------*\n* ROUTINE: RESTFLD\n* PURPOSE: FILL OUT THE FIELD WITH SPACES\n* INPUT  :\n*    R4: RETURN CONTROL\n*    R5: THE LENGTH OF THE FIELD - 2\n*    R6: THE START POSITION OF THE FIELD\n***********************************************************************\nRESTFLD  EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         LR    R7,R6\n         LA    R6,1(0,R6)\n         MVI   0(R7),C' '\n         EX    R5,MVCREC\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: INSERTCC\n* PURPOSE: INSERT CARRIAGE CONTROL CODE BYTE TO OUTPUT RECORD\n* INPUT  :\n*    R2: THE START POSITION OF OUTPUT RECORD\n*    R4: RETURN CONTROL\n* OUTPUT :\n*    R6: WORK\n* STEPS:\n***********************************************************************\n*---------------------------------------------------------------------*\n***********************************************************************\nINSERTCC EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?\n         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED\n         CLI   IRXFLAG,IRX1STM    IS THIS READ THE FIRST RECORD OF MC?\n         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED\n         B     INC05000\n* PROCESS SKIP THE FIRST FORM-FEED BYTE\nINC01000 EQU   *\n         CLI   SKIP1FF,YES        SKIP FIRST FORM-FEED?\n         BE    INC08000           YES, SKIP TO INSERT THE CC BYTE\n         MVI   0(R2),FF           SET THE FIRST FORM-FEED WITHOUT CRLF\n         LA    R2,1(0,R2)         MOVE R2 TO NEW START POSITION\n         B     INC08000           SKIP TO SCAN THE TABLE\n* INSERT ASCII CC\nINC05000 LA    R6,CCBYTE          LOAD CCBYTE\n         BAL   R4,FINDCC          LOAD THE RECORD INTO R7\n* INSERT THE ASCII CONTROL BYTES\n         LR    R6,R2              LOAD THE TARGET RECORD ADDRESS\n         LH    R5,0(R7)           LOAD THE RECORD LENGTH\n         LA    R7,4(0,R7)         SKIP THE LENGTH AND CONTROL BYTE\n         BCTR  R5,0\n         BCTR  R5,0\n         BCTR  R5,0\n         BCTR  R5,0\n         LTR   R5,R5              IS INSERT BYTES ZERO? OVERSTRIKE?\n         BZ    INC09000           YES, DO NOTHING\n         AR    R2,R5              MOVE THE TARGET ADDRESS TO NEW ADDR.\n         BCTR  R5,0               DECREASE R5 BY 1 FOR MVC\n         EX    R5,MVCREC          COPY THE ASCII BYTES TO TARGET\nINC08000 EQU   *\n* GET THE COPY RECORD FLAG USING CCBYTESV\n         LA    R6,CCBYTESV        LOAD CCBYTESV\n         BAL   R4,FINDCC          LOAD THE RECORD INTO R7\n         MVC   COPYREC(1),3(R7)   COPY THE SAVE SOURCE RECORD TAG\nINC09000 EQU   *\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: FINDCC\n* PURPOSE: FIND CARRIAGE CONTROL CODE BYTE IN THE TABLE\n* INPUT  :\n*    R6: START POSITION OF CCBYTE\n*    R4: RETURN CONTROL\n* OUTPUT :\n*    R5: WORK\n*    R7: START POSITION OF THE RECORD RELATED TO THIS CC BYTE\n* STEPS:\n***********************************************************************\n*---------------------------------------------------------------------*\n***********************************************************************\nFINDCC   EQU   *\n         ST    R4,SAVERTN2\n         LA    R7,CCATAB          LOAD ASA TRANSLATION TABLE\n         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?\n         BNE   FNC01000           NO, CONTINUE\n         LA    R7,CCMTAB          LOAD MC TRANSLATION TABLE\nFNC01000 EQU   *\n         L     R4,0(R7)           GET THE TABLE LENGTH\n         AR    R4,R7              MOVE TO THE END OF THE TABLE\n         LA    R7,4(0,R7)         MOVE TO THE FIRST RECORD\nFNC01100 EQU   *                  BEGIN LOOP\n         LH    R5,0(R7)           LOAD THE RECORD LENGTH\n         CLC   0(1,R6),2(R7)      IS THIS THE RIGHT CC BYTE?\n         BE    FNC02000           YES, PROCESS THE INSERT\n         AR    R7,R5              MOVE TO THE NEXT RECORD\n         CR    R7,R4              REACH AT THE END OF TABLE?\n         BL    FNC01100           NO, PROCESS NEXT RECORD\n* IF NOT FIND, GET THE FIRST RECORD AS DEFAULT\n         LA    R7,CCATAB+4        LOAD ASA TRANSLATION TABLE\n         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?\n         BNE   FNC02000           NO, CONTINUE\n         LA    R7,CCMTAB+4        LOAD MC TRANSLATION TABLE\nFNC02000 EQU   *\n         L     R4,SAVERTN2\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: INSPCL\n* PURPOSE: INSERT PCL COMMAND AT THE BEGINING OF INPUT RECORDS.\n*          IT SHOULD BE BETWEEN BANNER PAGE AND FIRST RECORD\n* INPUT  :\n*    R4: RETURN CONTROL\n*  PCLFORM: THE PREDEFINED FORM NAME\n* OUTPUT :\n*    R4: WORK\n*    R5: WORK\n*    R6: WORK\n*    R7: WORK\n***********************************************************************\n*---------------------------------------------------------------------*\nINSPCL   EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         CLI   USEPCL,YES         REQUIRE TO INSERT PCL COMMAND?\n         BNE   INP08000           NO, SKIP PCL COMMAND PROCESSING\n         CLI   PCLFLAG,PCLINST    IS THIS FIRST TIME CALL?\n         BE    INP06000           YES, SAVE RECORD\n* PREPARE THE PCL COMMAND IN RECORD FOR THE FIRST TIME CALL.\n* FIND THE GIVEN PCL COMMAND SEQUENCE VIA TABLE PCLTAB\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R7,PCLTAB          LOAD THE START OF PCL TABLE\n         L     R5,0(R7)           LOAD THE LENGTH OF PCL TABLE\n         AR    R5,R7              MOVE TO THE END OF THE PCL TABLE\n         LA    R7,4(0,R7)         SKIP THE TABLE LENGTH\nINP01000 DS    0H\n         CLC   PCLFORM(4),0(R7)   IS THIS THE GIVEN FORM?\n         BE    INP02000           YES, PROCESS IT.\n         LA    R7,PCLRECL(0,R7)   MOVE TO THE NEXT RECORD\n         CR    R7,R5              REACH AT THE END OF TABLE?\n         BL    INP01000           NO, TEST THE NEXT RECORD\n* IF THE FORM IS NOT FOUND, USE THE FIRST ONE AS DEFAULT.\n         LA    R7,PCLTAB+4        OTHERWISE USE THE FIRST RECORD AS DEF\nINP02000 DS    0H\n         L     R7,4(R7)           LOAD THE ADDRESS OF PCL COMMAND\n         LH    R5,0(R7)           LOAD THE PCL COMMAND LENGTH\n         LA    R7,2(0,R7)         SKIP THE LENGTH 2 BYTES\n         BCTR  R5,0\n         BCTR  R5,0\n* END OF PCL TABLE SEARCHING: SOURCE IN R7, LENGTH IN R5\n         LR    R2,R5              COPY THE RECORD LENGTH\n         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   INP03000           NO, PROCESS THE FIXED LENGTH RECORD\n         LA    R6,4(0,R6)         SKIP VB HEADER\nINP03000 DS    0H\n         BCTR  R5,0               DECREASE THE PCLLEN BY 1\n         EX    R5,MVCREC          COPY THE PCL COMMAND TO RECORD BUFFER\n         AR    R2,R6              MOVE R2 TO THE LAST BYTE\n         BAL   R4,UPDREC          CALL UPDATE RECORD ROUTINE\n         MVI   PCLFLAG,PCLINST    UPDATE THE STATUS TO INSERT PCL CMD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'01'      Tell NPF to INSERT A NEW RECORD\n         B     INP09000           END OF RECORD PREPARATION\n* SAVE THE CURRENT RECORD FOR PCLFLAG=PCLINST\nINP06000 DS    0H\n* SAVE THE RECORD INFO FOR NPF TO PUT\n         LA    R6,RECORD\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN\n         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE\n         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI\n         MVI   IREWFLG,X'00'      Write this record\n         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD\n         B     INP09000\n* SKIP PCL COMMAND PROCESSING\nINP08000 DS    0H\n         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD\nINP09000 DS    0H\n         XR    R15,R15            Zero return code\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n* ROUTINE: UPDREC\n* PURPOSE: UPDATE THE RECORD HEADER AND TRANSLATE IT TO ASCII\n*        1. UPDATE RECLEN WITH ACTUAL RECORD LENGTH\n*        2. UPDATE VB RECORD HEADER IF IT'S VB\n*        3. TRANSLATE THE RECORD INTO ASCII\n* INPUT  :\n*    R2: THE LAST POSITION OF TARGET RECORD\n*    R4: RETURN CONTROL\n*  PCLFORM: THE PREDEFINED FORM NAME\n* OUTPUT :\n*    R2: NEW LOCATION OF TARGET RECORD\n*    R5: WORK\n*    R6: WORK\n*    R7: WORK\n* UPDATE THE VARIABLE RECORD HEADER\n*---------------------------------------------------------------------*\nUPDREC   EQU   *\n         ST    R4,SAVERTN2        SAVE THE CALLER'S ADDRESS\n* GET THE RECORD LENGTH IN R5\n         LA    R6,RECORD          LOAD THE START POSITION\n         LR    R5,R2              LOAD THE LAST POSITION IN R5\n         SR    R5,R6              SUBTRACT THEM TO GET THE RECORD LEN\n         ST    R5,RECLEN          SAVE THE CURRENT RECORD LENGTH\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   UPD01000           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         STH   R5,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES\n         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'\n         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'\n         LA    R6,4(0,R6)         MOVE THE R6 TO DATA\n*---------------------------------------------------------------------*\n* TRANSLATE THE RECORD INTO ASCII\n*---------------------------------------------------------------------*\nUPD01000 DS    0H\n         BCTR  R5,0\n         LA    R7,E2ATAB          LOAD THE EBCIDC TO ASCII TABLE\n         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII\n         L     R4,SAVERTN2\n         BR    R4\n*---------------------------------------------------------------------*\n*        PROGRAM CONSTANTS DATA AREA\n*---------------------------------------------------------------------*\n         LTORG\n*---------------------------------------------------------------------*\n* CONSTANT TO CONTROL HOW THE PRINT OUTPUT GENERATED\n*---------------------------------------------------------------------*\nPCLFORM  DC    CL4'&PCLFORM'     ; THE FORM NAME\nUSEBNR   DC    X'&USEBNR'        ; FLAG TO INSERT BANNER PAGE OR NOT\nUSEPCL   DC    X'&USEPCL'        ; FLAG TO INSERT PCL COMMAND OR NOT\nUSECC    DC    X'&USECC'         ; FLAG TO CONVERT CARRIAGE CONTROL\nSKIP1FF  DC    X'&SKIP1FF'       ; FLAG TO SKIP FORM FEED OF 1ST RECORD\nYES      EQU   X'1'              ; YES\nNO       EQU   X'0'              ; NO\n*---------------------------------------------------------------------*\nMVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5\nTRREC    TR    0(0,R6),0(R7)     ; TRANSLATE FROM R7 to R6,length R5\nCRLF     DC    XL2'0D25'         ; CR-LF IN EBCDIC CODE\nFF       EQU   X'0C'             ; FORM FEED BYTE IN EBCDIC\nMCTPFF   EQU   X'8B'              THE FIRST BYTE OF FIRST MC RECORD\nCCTPFF   EQU   C'1'               CC BYTE '1' FORM FEED\n*---------------------------------------------------------------------*\nCCATAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE\n* ASA CARRIAGE CONTROL BYTES\n* DEFAULT BYTE: CCA1SP: SINGLE RETURN\n         DC    AL4(CCATABL)      TABLE LENGTH\n*              LENGTH       COMMAND WRITE? INSERT ASCII COMMANDS\nCCA1SP   DC    AL2(CCA1SPL),CL1' ',XL1'1',XL2'0D25'\nCCA1SPL  EQU   *-CCA1SP          1 SPACE LINE: CRLF\nCCAAFF   DC    AL2(CCAAFFL),CL1'1',XL1'1',XL3'0D250C'\nCCAAFFL  EQU   *-CCAAFF          ASA FORM FEED: CRLF + FF\nCCA0SP   DC    AL2(CCA0SPL),CL1'+',XL1'1'\nCCA0SPL  EQU   *-CCA0SP          0 SPACE LINE: DO NOTHING\nCCA2SP   DC    AL2(CCA2SPL),CL1'0',XL1'1',XL4'0D250D25'\nCCA2SPL  EQU   *-CCA2SP          1 SPACE LINE: CRLF\nCCA3SP   DC    AL2(CCA3SPL),CL1'-',XL1'1',XL6'0D250D250D25'\nCCA3SPL  EQU   *-CCA3SP          1 SPACE LINE: CRLF\n* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCA1SP\nCCATABL EQU    *-CCATAB         THE LENGTH OF THE TABLE\n*---------------------------------------------------------------------*\nCCMTAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE\n* MACHINE CODE CONTROL BYTES (PRINTER CHANNEL COMMANDS)\n* DEFAULT BYTE: CCMWS1L: SINGLE RETURN\n         DC    AL4(CCMTABL)      TABLE LENGTH\n*              LENGTH        COMMAND WRITE? INSERT ASCII COMMANDS\nCCMWS1L  DC    AL2(CCMWS1LL),XL1'09',XL1'1',XL2'0D25'\nCCMWS1LL EQU   *-CCMWS1L         Write and Space 1 line\nCCMWS2L  DC    AL2(CCMWS2LL),XL1'11',XL1'1',XL4'0D250D25'\nCCMWS2LL EQU   *-CCMWS2L         Write and Space 2 lines\nCCMWS3L  DC    AL2(CCMWS3LL),XL1'19',XL1'1',XL6'0D250D250D25'\nCCMWS3LL EQU   *-CCMWS3L         Write and Space 3 lines\nCCMWSC1  DC    AL2(CCMWSC1L),XL1'89',XL1'1',XL4'0D250C'\nCCMWSC1L EQU   *-CCMWSC1         Write and Skip to Channel 1: CRLF + FF\nCCMSP1L  DC    AL2(CCMSP1LL),XL1'0B',XL1'0',XL2'0D25'\nCCMSP1LL EQU   *-CCMSP1L         Space 1 line immidiate\nCCMSP2L  DC    AL2(CCMSP2LL),XL1'13',XL1'0',XL4'0D250D25'\nCCMSP2LL EQU   *-CCMSP2L         Space 2 lines immidiate\nCCMSP3L  DC    AL2(CCMSP3LL),XL1'1B',XL1'0',XL6'0D250D250D25'\nCCMSP3LL EQU   *-CCMSP3L         Space 3 lines immidiate\nCCMSKC1  DC    AL2(CCMSKC1L),XL1'8B',XL1'0',XL1'0C'\nCCMSKC1L EQU   *-CCMSKC1         Skip to Channel 1 Immediate: FORM FEED\n* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCMSP1L\nCCMTABL EQU    *-CCMTAB         THE LENGTH OF THE TABLE\n*---------------------------------------------------------------------*\n* MACHINE CODE  BYTE  (PRINTER CHANNEL COMMANDS)\n* MACHINE CODE TO CARRIAGE CONTROL TRANSLATION TABLE\n* PRE-DEFINED FORMS OF PCL COMMANDS\nMCTAB    DS    0F                ; FULL WORD ALIGNMENT\n         DC    AL4(MCTABL)       ; LENGTH OF THIS TABLE\nMCTP1SP  DC    X'09',C' '         Write and Space 1 Lines: DEFAULT\nMCRECL   EQU   *-MCTP1SP          RECORD LENGTH\n         DC    X'8B',C'1'         Skip to Channel 1 Immediate:FORM FEED\n         DC    X'89',C'1'         Write and skip to Channel 1:FORM FEED\n         DC    X'11',C'0'         Write and Space 2 Lines\n         DC    X'19',C'-'         Write and Space 3 Lines\n         DC    X'0B',C' '         Space 1 Line Immediate\n         DC    X'13',C'0'         Space 2 Lines Immediate\n         DC    X'1B',C'-'         Space 3 Lines Immediate\n         DC    X'01',C'+'         Write Without Spacing\n* ALL OTHER MACHINE CODE WILL BE TRANSLATED TO CCTP1SP\nMCTABL   EQU   *-MCTAB            TABLE LENGTH\n*---------------------------------------------------------------------*\n* PRE-DEFINED FORMS OF PCL COMMANDS\nPCLTAB   DS    0F                ; FULL WORD ALIGNMENT\n         DC    AL4(PCLTABL)      ; LENGTH OF THIS PCL TABLE\nPCLFPT00 DC    CL4'PT00',AL4(PCLPT00)  PORTRAIT,  DEFATULT PAPER\nPCLRECL  EQU   *-PCLFPT00              RECORD LENGTH\nPCLFPT01 DC    CL4'PT01',AL4(PCLPT01)  PORTRAIT,  DEFATULT PAPER\nPCLFPT02 DC    CL4'PT02',AL4(PCLPT02)  PORTRAIT,  DEFATULT PAPER\nPCLFLS00 DC    CL4'LS00',AL4(PCLLS00)  LANDSCAPE, DEFAULT PAPER\nPCLFLS01 DC    CL4'LS01',AL4(PCLLS01)  LANDSCAPE, DEFAULT PAPER\nPCLFLS02 DC    CL4'LS02',AL4(PCLLS02)  LANDSCAPE, DEFAULT PAPER\nPCLFLG00 DC    CL4'LG00',AL4(PCLLG00)  LANDSCAPE, LEGAL PAPER\nPCLFLG01 DC    CL4'LG01',AL4(PCLLG01)  PORTRAIT,  LEGAL PAPER\nPCLTABL  EQU   *-PCLTAB                THE END OF TABLE\n*---------------------------------------------------------------------*\n* PCL 5 Commands in EBCDIC format\n* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth\nPCLLS00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS00L EQU   *-PCLLS00\n* PCL FORM: PCLCLS01 FOR LANDSCAPE, DEFAULT PAPER, 13 pitch\nPCLLS01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l5.7C'  5.7/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s13H'        Use 13 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS01L EQU   *-PCLLS01\n* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth, SIMPLEX\nPCLLS02  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS02L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS02L EQU   *-PCLLS02\n* PCL FORM: PCLCLG00 FOR LANDSCAPE, LEGAL   PAPER\nPCLLG00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLG00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l3A'    Select LEGAL paper\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLG00L EQU   *-PCLLG00\n* PCL FORM: PCLCLG01 FOR PORTRAIT,  LEGAL   PAPER\nPCLLG01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLG01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l3A'    Select LEGAL paper\n         DC    X'27',X'50',C'l0O'    Select PORTRAIT  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    5/48 inch vertical motion index\n         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLG01L EQU   *-PCLLG01\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 17 PITCH\nPCLPT00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s17H'        Use 17 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT00L EQU   *-PCLPT00\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 14 PITCH\nPCLPT01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT01L EQU   *-PCLPT01\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 15 PITCH, SIMPLEX\nPCLPT02  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT02L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT02L EQU   *-PCLPT02\n*---------------------------------------------------------------------*\n*EBCDIC-to-ASCII table for Canadian Bilingual CECP Code Page 037\n*\n*             000102030405060708090A0B0C0D0E0F\nE2ATAB   DS 0CL256\n         DC X'00010203DC09C37FCAB2D50B0C0D0E0F' ;00;\n         DC X'10111213DBDA08C11819C8F21C1D1E1F' ;10;\n         DC X'C4B3C0D9BF0A171BB4C2C5B0B1050607' ;20;\n         DC X'CDBA16BCBBC9CC04B9CBCEDF1415FE1A' ;30;\n         DC X'20FF838485A0C68687A4BD2E3C282B7C' ;40;\n         DC X'268288898AA18C8B8DE121242A293BAA' ;50;\n         DC X'2D2FB68EB7B5C78F80A5DD2C255F3E3F' ;60;\n         DC X'9B90D2D3D4D6D7D8DE603A2340273D22' ;70;\n         DC X'9D616263646566676869AEAFD0ECE7F1' ;80;\n         DC X'F86A6B6C6D6E6F707172A6A791F792CF' ;90;\n         DC X'E67E737475767778797AADA8D1EDE8A9' ;A0;\n         DC X'5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E' ;B0;\n         DC X'7B414243444546474849F0939495A2E4' ;C0;\n         DC X'7D4A4B4C4D4E4F505152FB968197A398' ;D0;\n         DC X'5CF6535455565758595AFDE299E3E0E5' ;E0;\n         DC X'30313233343536373839FCEA9AEBE99F' ;F0;\n* BANNER PAGE LAYOUT\n*                                                                 LINE#\nBNRBUF   DS 0C\n         DC C'****************************************'\n         DC C'****************************************'              01\n         DC C'*                                       '\n         DC C'                                       *'              02\n         DC C'*            ...                        '\n         DC C'                        .::::.         *'              03\n         DC C'*         .:::::       :::              '\n         DC C'                        ::::::         *'              04\n         DC C'*        .:::''''''       :::              '\n         DC C' ...      ...  ..       ::::::         *'              05\n         DC C'*        :::  .:::::.  :::::::.   .:::::'\n         DC C'.''::.    .::''.:::  .::::''::::''::::.    *'          06\n         DC C'*        ::: .:::::::. ::::::::. .::::::'\n         DC C':.''::.  .::'':::''''  ::::::    ::::::    *'          07\n         DC C'*        ::: :::   ::: :::   ::: :::  ::'''\n         DC C''' '':::.::  :::    ::::::    ::::::    *'             08\n         DC C'*       .::: :::   ::: :::   ::: :::.:'' '\n         DC C'.   ::::''  .:::    ''::::.::::.::::''    *'           09\n         DC C'*    ..::::'' ''::...::'' ''::...::'' '':::. :'\n         DC C'::  :::'' ::::''          ::::::         *'            0A\n         DC C'*    ::::''''   '':::::''   '':::::''   '':::::'''\n         DC C''' .::''  :::''           ::::::         *'            0B\n         DC C'*    ''''''                                '\n         DC C'  .::''                  ''::::''         *'           0C\n         DC C'*                                       '\n         DC C' .::''                                  *'             0D\n         DC C'*                                       '\n         DC C'                                       *'              0E\n         DC C'*                     Sobeys Ontario Pro'\n         DC C'duction Mainframe                      *'              0F\n         DC C'*                                       '\n         DC C'                                       *'              10\n         DC C'*                           Network Prin'\n         DC C'ting Service                           *'              11\n         DC C'*                                       '\n         DC C'                                       *'              12\n         DC C'*       ********************************'\n         DC C'********************************       *'              13\n         DC C'*       * FROM HOST   :                 '\n         DC C'                               *       *'              14\n         DC C'*       * TO PRINTER  :                 '\n         DC C'                               *       *'              15\n         DC C'*       * USERID/NAME :                 '\n         DC C'                               *       *'              16\n         DC C'*       * JOB NAME/ID :                 '\n         DC C'                               *       *'              17\n         DC C'*       * STEP NAME   :                 '\n         DC C'                               *       *'              18\n         DC C'*       * DD NAME     :                 '\n         DC C'                               *       *'              19\n         DC C'*       * PRINT TIME  :                 '\n         DC C'                               *       *'              1A\n         DC C'*       ********************************'\n         DC C'********************************       *'              1B\n         DC C'*                                       '\n         DC C'                                       *'              1C\n         DC C'****************************************'\n         DC C'****************************************'              1D\nBNRBFEND DS 0C\nBNRBFLEN EQU BNRBFEND-BNRBUF      BANNER PAGE BUFFER LENGTH\n*\nBNRHOST  DC    CL44'&HOSTNAME'           PAGE: HOSTNAME FROM PARM\nBNRPNTRC DC    CL44'DEST(        ), SYSOUT CLASS( ), FORM(    )'\n* TIME AND DATE EDIT FORMATS\nDATEPTN  DC    X'40212020207A21204020202020612120612120'\n* EDIT MEANING:  b ( d d d : d d b ( d d d / d d / d d\nDATEPTNL EQU   *-DATEPTN\n*---------------------------------------------------------------------*\n*        PROGRAM DSECTS: MAPING DSECTS\n*---------------------------------------------------------------------*\n* MAPPING DSECTS\nIRXSTATD DSECT                    16 byte static IRE storage\nIRXDSTGA DS    A                  Address of dynamic storage area\n*\n* File Status: control the procedures of record processing:\n*  Initial: IRX1STR, set in OPEN routine\n*  In status of IRX1STR, process the banner page.\n*    If no banner required, or banner page is processed,\n*    the status is changed to IRX1STP.\n*  In status of IRX1STP, process the PCL command.\n*    If no PCL command required, or PCL command is processed,\n*    the status is changed to IRX1STI.\n*  In status of IRX1STI, process the first record.\n*    After the first record is processed,\n*    the status is changed to IRXNXTR.\n*\n*\nIRXFLAG  DS    X                  File status flag\nIRX1STR  EQU   X'00'              ... Flag of first time call\nIRX1STP  EQU   X'01'              ... Flag to process PCL commands\nIRX1STI  EQU   X'02'              ... Flag to process first record\nIRXNXTR  EQU   X'03'              ... READ NEXT RECORD (NOT FISRT)\nIRXNXTI  EQU   X'04'              ... INSERT NEXT RECORD (NOT FIRST)\nIRX1STM  EQU   X'05'              ... FIRST RECORD FOR MACHINE CODE\n*                                 ... ACTUALLY THE SECOND RECORD\n         DS    3X                 unused\n         DS    D                  unused\n*---------------------------------------------------------------------*\n*        PROGRAM DSECTS: DYNAMIC ALLOCATED STORAGE\n*---------------------------------------------------------------------*\nXPCLSTG  DSECT\nSAVEAREA DS    18F                Save Area\nSAVERTN1 DS    F                  save area for LEVEL 1 CALL\nSAVERTN2 DS    F                  save area for LEVEL 2 CALL\n* TIME MACRO LIST FORM\nTIMELST  TIME  LINKAGE=SYSTEM,MF=L   TIME LIST FORM\nRECLEN   DS    F                  RECORD LENGTH FOR FIX LENGTH\n* RECORD TYPE BYTE\nRECFM    DS    C                  RECORD LENGTH TYPE V OR F\nRECFMFB  EQU   C'F'               FIXED LENGTH RECORD TYPE\nRECFMVB  EQU   C'V'               VARIABLE LENGTH RECORD TYPE\n* FLAG TO SHOW IF COPY THE SOURCE RECORD\nCOPYREC  DS    X                  VALUE: YES OR NO\n* CARRIAGE CONTROL BYTE\nCCBYTE   DS    X                  CURRENT CC BYTE\nCCBYTESV DS    X                  CC BYTE OF PREVIOUS RECORD\nCCBYTETM DS    X                  TEMPORARY BUFFER FOR EXCHANGE CCBYTE\n* CARRIAGE CONTROL TYPE\nCCMODE   DS    X                  CARRIAGE CONTROL TYPE\nCCMODASA EQU   X'0'               ASA CARRIAGE CONTROL MODE\nCCMODMC  EQU   X'1'               PRINTER CHANNEL COMMANDS(MAHINE CODE)\n* ASA CARRIAGE CONTROL BYTE TYPES\nCCTP0SP  EQU   C'+'               CC BYTE '+' 0 LINE FEED (OVERSTRIKE)\nCCTP1SP  EQU   C' '               CC BYTE ' ' 1 LINE FEED\nCCTP2SP  EQU   C'0'               CC BYTE '0' 2 LINE FEED\nCCTP3SP  EQU   C'-'               CC BYTE '-' 3 LINE FEED\n* END OF MACHINE CODE TRANSLATION TABLE\n* BANNER PAGE FIELD DEFINITIONS\nBNRHOSTL EQU   X'14'              BANNER PAGE: FROM HOST LINE #\n*PRINTER MODEL\nBNRPNTR  DS    0CL44              BANNER PAGE: PRINTER NAME\n         DS    CL5\nBNRDEST  DS    CL8                BANNER PAGE: PRINTER DEST\n         DS    CL16\nBNRCLAS  DS    CL1                BANNER PAGE: SYSOUT CLASS\n         DS    CL8\nBNRFORM  DS    CL4                BANNER PAGE: PRINT FORM\n         DS    CL2\n*END OF PRINTER MODEL\nBNRPNTRL EQU   X'15'              BANNER PAGE: PRINTER NAME LINE #\nBNRUSER  DS    CL44               BANNER PAGE: USER NAME\nBNRUSERL EQU   X'16'              BANNER PAGE: USER NAME LINE #\nBNRJBNM  DS    CL44               BANNER PAGE: JOB NAME\nBNRJBNML EQU   X'17'              BANNER PAGE: JOB NAME LINE #\nBNRDSSN  DS    CL44               BANNER PAGE: STEP NAME\nBNRDSSNL EQU   X'18'              BANNER PAGE: STEP NAME LINE #\nBNRDDNM  DS    CL44               BANNER PAGE: DD NAME\nBNRDDNML EQU   X'19'              BANNER PAGE: DD NAME LINE #\nBNRTIME  DS    CL44               BANNER PAGE: TIME AND DATE\nBNRTIMEL EQU   X'1A'              BANNER PAGE: TIME AND DATE LINE #\n*\nBNRLNCTR DS    X                  CURRENT LINE NUMBER IN BANER PAGE\nBNRBFPOS DS    F                  CURRENT LINE START ADDRESS\nBNRBFEOF DS    X                  FLAG TO TELL IF AT THE LAST LINE\n* BANNER LENGTH CONSTANTS\nBNRFDBYT EQU   X'18'              FIELD START POSITION      : 24\nBNRFDLEN EQU   X'2C'              FIELD LENGTH IN BYTES     : 44\nBNRRCLEN EQU   X'50'              BANNER RECORD LENGTH      : 80\n* PCL COMMAND FLAGS\nPCLFLAG  DS    X                  FLAG FOR PCL COMMAND PROCESSING\nPCLINIT  EQU   X'00'              INITIAL STATUS, NOT YET PROCESSED.\nPCLINST  EQU   X'01'              REQUIRE TO PROCESS PCL COMMAND\n*\nDATEAREA DS    0CL17              TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    X                  '01' FOR TEMPORARY BYTE\nDATESAVE DS    CL16               TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    0D                 Round up to double word boundary\nXPCLSTGL EQU   *-XPCLSTG          Length of dynamic storage area\n********************************************************************\n* DUMMY SECTION: DATA TABLE\n********************************************************************\n         DS    0D                 Round up to double word boundary\n* WORK RECORD BUFFER: SINGLE RECORD PER EXECUTION CONTROL\nRECSTG   DSECT\nRECORD   DS    CL4092             MAXIMUM 4092 BYTE OF RECORDS\nRECSTGL  EQU   *-RECSTG           LENGTH OF THIS DSECT\nSTGLEN   EQU   XPCLSTGL+RECSTGL   TOTAL DSECT LENGTH\n         SPACE 5\n         EZAPPFCD IRE=DSECT,   DSECT for input record exit parameters  X\n               RDA=DSECT       DSECT for routing data area\n         SPACE 5\n         IAZFSIP LIST=YES          JES FSI PARAMETER LIST\n         SPACE 5\n         IAZJSPA LIST=YES          JOB SEPARATOR PAGE DATA AREA\n         SPACE 5\n.END     END   EXITNPFR            End of EXPCLLS0  module\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NPFIXJCL": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03(\\x9f\\x01\\x03(\\x9f#R\\x00\\x8b\\x00\\x8b\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-10-16T00:00:00", "modifydate": "2003-10-16T23:52:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "ZHOU"}, "text": "//SP2487ZG JOB (DCTS2INF),HUNTER.Z,MSGCLASS=X,MSGLEVEL=(1,1),\n//         CLASS=9,NOTIFY=&SYSUID\n//*Purpose:  Generate NPF Exit load modules\n//BUILDNX  EXEC PGM=IKJEFT01,PARM=NPFIXREX\n//SYSEXEC  DD   DISP=SHR,DSN=SYS1.PACKAGE.NPFEXIT.INSTALL <== this PDS\n//SYSTSPRT DD   SYSOUT=*\n//SYSTSIN  DD   DUMMY\n//SYSIN    DD   *\n#######################################################################\n#              INPUT FILE FOR NPF EXIT BUIULD PROGRAM\n#              ======================================\n# Comments start with '#'\n# KEYWORD DESCRIPTIONS:\n# SOURCE      : OPTIONAL, DEFAULT=NPFIXASM\n#               THE SOURCE ASSEMBLER PROGRAM MEMBER NAME\n# SOURCELIB   : OPTIONAL, DEFAULT=PDS of current REXX program.\n#               THE PDS OF SOURCE PROGRAM\n# TCPIPMACLIB : OPTIONAL, DEFAULT= TCPIP.SEZACMAC\n#               TCP/IP MACRO LIBRARY\n# REFRESHLLA  : OPTIONAL, DEFAULT= YES\n#               WHETHER TO REFRESH LINKLST AFTER BUILD EXIT MODULES.\n# LOADLIB     : MANDATORY, no DEFAULT\n#               THE LOADLIB TO STORE THE EXIT PROGRAMS, MUST BE IN\n#               YOUR SYSTEM LINKLST\n# JOBCARD     : OPTIONAL, DEFAULT=Member NPFEXBJC of current REXX PDS.\n#               The jobcard information to be extracted from.\n# LISTDETAIL  : OPTIONAL, DEFAULT=NO\n#               The compile and link LIST/NOLIST option in EXEC PARM.\n# EXIT        : MANDATORY, No default\n#               Each EXIT statement is a load module to be built\n#               See the comments below for detail description.\n#######################################################################\n  LOADLIB     = SYS1.TEST.LINKLIB                # loadlib for exits\n######################################################################\n# Field Descriptions in EXIT statement\n# ------------------------------------\n# TITL   : The title for each exit load module, must be 'EXIT'.\n# MODULE : The load module name which will be build into LOADLIB.\n# BNR    : YES/NO to generate the banner page.\n#          If no, the hostname is ignored.\n# CC     : YES/NO to translate the carriage control characters.\n# PCL    : YES/NO to insert PCL commands for printers support PCL.\n#          Normally the laser printers will support PCL commands.\n#          If no, the FORM field is ignored.\n# FORM   : The predefined form for PCL commands.\n#          The form will control the font-size, orientation, and\n#          paper types.\n#           FORM ORIENT    PAPER    Duplex SPACES PITCH\n#           ==== ========= ======== ====== ====== =====\n#           PT00 PORTRAIT  DEFATULT YES      5     17\n#           PT01 PORTRAIT  DEFATULT YES      5     14\n#           PT02 PORTRAIT  DEFATULT NO       5     17\n#           LS00 LANDSCAPE DEFAULT  YES      4.5   14\n#           LS01 LANDSCAPE DEFAULT  YES      5.7   13\n#           LS02 LANDSCAPE DEFAULT  NO       4.5   14\n#           LG00 LANDSCAPE LEGAL    YES      4.5   14\n#           LG01 PORTRAIT  LEGAL    YES      5     17\n#     * Duplex YES means use duplex if the printer supports it.\n#     * SPACES 5 means 5/48 inch vertical motion index, or\n#       spaces between lines.\n#     * PITCH is the number of characters per inch, or pitch.\n#       This reflects the size of the font.\n# SKP      : YES/NO to skip the first form feed control character\n#          This is for Carriage Control files.\n# HOSTNAME : The TCP/IP Hostname of the mainframe to use the exit.\n#          This hostname is only used in banner page for informational\n#          purpose. Host name is ignored if BNR is NO.\n######################################################################\n#TITL MODULE   BNR CC  PCL FORM SKP HOSTNAME             NPF FORM/DEST\n#==== ======== === === === ==== === ===================  =============\n EXIT=EXPCLLS0,YES,YES,YES,LS00,YES,maintest.agora.lan # LSCC\n EXIT=EXPCLLS1,YES,NO ,YES,LS00,YES,maintest.agora.lan # LSNC\n EXIT=EXPCLLS2,YES,YES,YES,LS01,YES,maintest.agora.lan # LSC1\n EXIT=EXPCLLS3,YES,YES,YES,LS02,YES,maintest.agora.lan # LSSC\n EXIT=EXPCLPT0,YES,YES,YES,PT00,YES,maintest.agora.lan # PTCC\n EXIT=EXPCLPT1,YES,NO ,YES,PT00,YES,maintest.agora.lan # PTNC\n EXIT=EXPCLPT2,YES,YES,YES,PT01,YES,maintest.agora.lan # PTC1\n EXIT=EXPCLPT3,YES,YES,YES,PT02,YES,maintest.agora.lan # PTSC\n EXIT=EXPCLLG0,YES,YES,YES,LG00,YES,maintest.agora.lan # LGCC\n EXIT=EXPCLLG1,YES,YES,YES,LG01,YES,maintest.agora.lan # LGSC\n EXIT=EXTEXT00,NO ,NO ,NO ,    ,YES,maintest.agora.lan # TXT0\n EXIT=EXTEXT01,NO ,YES,NO ,    ,YES,maintest.agora.lan # TXT1\n EXIT=EXTEXT02,YES,YES,NO ,    ,YES,maintest.agora.lan # TXT2\n######################################################################\n# LOGO OF THE BANNER PAGE\n# =======================\n#\n# 1. MAXIMUM 17 RECORDS (lines)\n# 2. EACH RECORD IS 80 BYTE LONG, program will pad with spaces\n# 3. ANY RECORDS BEYOND 17th LINE WILL BE IGNORED.\n# 4. If the total records less than 17, then the empty records will be\n#    added to make up total 17 records.\n# 5. No comments is allowed.\nBANNER_LOGO_START\n*  OS/390 V2.10                               TCP/IP Network Print Facility    *\n*            ...                                                .::::.         *\n*         .:::::       :::                                      ::::::         *\n*        .:::'''       :::               ...      ...  ..       ::::::         *\n*        :::  .:::::.  :::::::.   .:::::.'::.    .::'.:::  .::::'::::'::::.    *\n*        ::: .:::::::. ::::::::. .:::::::.'::.  .::':::''  ::::::    ::::::    *\n*        ::: :::   ::: :::   ::: :::  ::'' ':::.::  :::    ::::::    ::::::    *\n*       .::: :::   ::: :::   ::: :::.:' .   ::::'  .:::    '::::.::::.::::'    *\n*    ..::::' '::...::' '::...::' ':::. :::  :::' ::::'          ::::::         *\n*    ::::''   ':::::'   ':::::'   ':::::'' .::'  :::'           ::::::         *\n*    '''                                  .::'                  '::::'         *\n*                                        .::'                                  *\n*                     Sobeys Ontario Mainframe System                          *\n*                                                                              *\n*                          Network Print Service                               *\n*                                                                              *\n*     Information Technology, 6355 Viscount Road, Mississauga, ON L4V 1W2      *\nBANNER_LOGO_STOP\n######################################################################\n# EBCDIC TO ASCII Translation table\n# =================================\n# 1. Any leading spaces and empty line will be ignored.\n# 2. There must be 16 lines with 32 bytes each line\n# 3. The bytes must be from 0-9 A-F.\n# 4. Any trailing comments will be ignored.\nEBCDIC_TO_ASCCII_TABLE_START\n   00010203DC09C37FCAB2D50B0C0D0E0F  #00\n   10111213DBDA08C11819C8F21C1D1E1F  #10\n   C4B3C0D9BF0A171BB4C2C5B0B1050607  #20\n   CDBA16BCBBC9CC04B9CBCEDF1415FE1A  #30\n   20FF838485A0C68687A4BD2E3C282B7C  #40\n   268288898AA18C8B8DE121242A293BAA  #50\n   2D2FB68EB7B5C78F80A5DD2C255F3E3F  #60\n   9B90D2D3D4D6D7D8DE603A2340273D22  #70\n   9D616263646566676869AEAFD0ECE7F1  #80\n   F86A6B6C6D6E6F707172A6A791F792CF  #90\n   E67E737475767778797AADA8D1EDE8A9  #A0\n   5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E  #B0\n   7B414243444546474849F0939495A2E4  #C0\n   7D4A4B4C4D4E4F505152FB968197A398  #D0\n   5CF6535455565758595AFDE299E3E0E5  #E0\n   30313233343536373839FCEA9AEBE99F  #F0\nEBCDIC_TO_ASCCII_TABLE_STOP\n######################################################################\n/*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NPFIXREX": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x002\\x01\\x03(\\x9f\\x01\\x06\\x11_\\t\\x18\\x04\\xac\\x04\\xaa\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-10-16T00:00:00", "modifydate": "2006-04-25T09:18:32", "lines": 1196, "newlines": 1194, "modlines": 0, "user": "ZHOU"}, "text": "/* REXX */\n/* REXX Program: NPFEXBLD\n   Purpose: Build NPF Exit Load Module\n   Design: Hunter Guanghui Zhou\n           Phone: 1-(416)-602-9567\n           E-mail: zhough2000@yahoo.com\n   Last Update: September 2003\n\n  SYSIN DD DESCRIPTION\n  ====================\n#######################################################################\n#              INPUT FILE FOR NPF EXIT BUIULD PROGRAM\n#              ======================================\n# KEYWORD DESCRIPTIONS:\n# SOURCE      : OPTIONAL, DEFAULT=NPFIXASM\n#               THE SOURCE ASSEMBLER PROGRAM MEMBER NAME\n# SOURCELIB   : OPTIONAL, DEFAULT=PDS of current REXX program.\n#               THE PDS OF SOURCE PROGRAM\n# TCPIPMACLIB : OPTIONAL, DEFAULT= TCPIP.SEZACMAC\n#               TCP/IP MACRO LIBRARY\n# REFRESHLLA  : OPTIONAL, DEFAULT= YES\n#               WHETHER TO REFRESH LINKLST AFTER BUILD EXIT MODULES.\n# LOADLIB     : MANDATORY, no DEFAULT\n#               THE LOADLIB TO STORE THE EXIT PROGRAMS, MUST BE IN\n#               YOUR SYSTEM LINKLST\n# JOBCARD     : OPTIONAL, DEFAULT=Member NPFIXJCL of current REXX PDS.\n#               JOBCARD MEMBER\n# LISTDETAIL  : OPTIONAL, DEFAULT=NO\n#               The compile and link list option.\n# EXIT        : MANDATORY, No default\n#               Each EXIT statement is a load module to be built\n#               See the comments below for detail description.\n#######################################################################\n  LOADLIB     = SYS1.TEST.LINKLIB                # loadlib for exits\n######################################################################\n# Field Descriptions in EXIT statement\n# ------------------------------------\n# TITL   : The title for each exit load module, must be 'EXIT'.\n# MODULE : The load module name which will be build into LOADLIB.\n# BNR    : YES/NO to generate the banner page.\n#          If no, the hostname is ignored.\n# CC     : YES/NO to translate the carriage control characters.\n# PCL    : YES/NO to insert PCL commands for printers support PCL.\n#          Normally the laser printers will support PCL commands.\n#          If no, the FORM field is ignored.\n# FORM   : The predefined form for PCL commands.\n#          The form will control the font-size, orientation, and\n#          paper types.\n#           FORM ORIENT    PAPER    Duplex SPACES PITCH\n#           ==== ========= ======== ====== ====== =====\n#           PT00 PORTRAIT  DEFATULT YES      5     17\n#           PT01 PORTRAIT  DEFATULT YES      5     14\n#           PT02 PORTRAIT  DEFATULT NO       5     17\n#           LS00 LANDSCAPE DEFAULT  YES      4.5   14\n#           LS01 LANDSCAPE DEFAULT  YES      5.7   13\n#           LS02 LANDSCAPE DEFAULT  NO       4.5   14\n#           LG00 LANDSCAPE LEGAL    YES      4.5   14\n#           LG01 PORTRAIT  LEGAL    YES      5     17\n#     * Duplex YES means use duplex if the printer supports it.\n#     * SPACES 5 means 5/48 inch vertical motion index, or\n#       spaces between lines.\n#     * PITCH is the number of characters per inch, or pitch.\n#       This reflects the size of the font.\n# SKP      : YES/NO to skip the first form feed control character\n#          This is for Carriage Control files.\n# HOSTNAME : The TCP/IP Hostname of the mainframe to use the exit.\n#          This hostname is only used in banner page for informational\n#          purpose. Host name is ignored if BNR is NO.\n######################################################################\n#TITL MODULE   BNR CC  PCL FORM SKP HOSTNAME\n#==== ======== === === === ==== === ==================================\n EXIT=EXPCLLS0,YES,YES,YES,LS00,YES,maintest.agora.lan\n EXIT=EXPCLLS1,YES,NO ,YES,LS00,YES,maintest.agora.lan\n EXIT=EXPCLLS2,YES,YES,YES,LS01,YES,maintest.agora.lan\n EXIT=EXPCLLS3,YES,YES,YES,LS02,YES,maintest.agora.lan\n EXIT=EXPCLPT0,YES,YES,YES,PT00,YES,maintest.agora.lan\n EXIT=EXPCLPT1,YES,NO ,YES,PT00,YES,maintest.agora.lan\n EXIT=EXPCLPT2,YES,YES,YES,PT01,YES,maintest.agora.lan\n EXIT=EXPCLPT3,YES,YES,YES,PT02,YES,maintest.agora.lan\n EXIT=EXPCLLG0,YES,YES,YES,LG00,YES,maintest.agora.lan\n EXIT=EXPCLLG1,YES,YES,YES,LG01,YES,maintest.agora.lan\n EXIT=EXTEXT00,NO ,NO ,NO ,    ,YES,maintest.agora.lan\n EXIT=EXTEXT01,NO ,YES,NO ,    ,YES,maintest.agora.lan\n EXIT=EXTEXT02,YES,YES,NO ,    ,YES,maintest.agora.lan\n######################################################################\n# LOGO OF THE BANNER PAGE\n# =======================\n#\n# 1. MAXIMUM 17 RECORDS (lines)\n# 2. EACH RECORD IS 80 BYTE LONG, program will pad with spaces\n# 3. ANY RECORDS BEYOND 17th LINE WILL BE IGNORED.\n# 4. If the total records less than 17, then the empty records will be\n#    added to make up total 17 records.\nBANNER_LOGO_START\n*  OS/390 V2.10                               TCP/IP Network Print Facility    *\n*            ...                                                .::::.         *\n*         .:::::       :::                                      ::::::         *\n*        .:::'''       :::               ...      ...  ..       ::::::         *\n*        :::  .:::::.  :::::::.   .:::::.'::.    .::'.:::  .::::'::::'::::.    *\n*        ::: .:::::::. ::::::::. .:::::::.'::.  .::':::''  ::::::    ::::::    *\n*        ::: :::   ::: :::   ::: :::  ::'' ':::.::  :::    ::::::    ::::::    *\n*       .::: :::   ::: :::   ::: :::.:' .   ::::'  .:::    '::::.::::.::::'    *\n*    ..::::' '::...::' '::...::' ':::. :::  :::' ::::'          ::::::         *\n*    ::::''   ':::::'   ':::::'   ':::::'' .::'  :::'           ::::::         *\n*    '''                                  .::'                  '::::'         *\n*                                        .::'                                  *\n*                     Sobeys Ontario Mainframe System                          *\n*                                                                              *\n*                          Network Print Service                               *\n*                                                                              *\n*     Information Technology, 6355 Viscount Road, Mississauga, ON L4V 1W2      *\nBANNER_LOGO_STOP\n######################################################################\n# EBCDIC TO ASCII Translation table\n# =================================\n# 1. Any leading spaces and empty line will be ignored.\n# 2. There must be 16 lines with 32 bytes each line\n# 3. The bytes must be from 0-9 A-F.\n# 4. Any trailing comments will be ignored.\nEBCDIC_TO_ASCCII_TABLE_START\n   00010203DC09C37FCAB2D50B0C0D0E0F  #00\n   10111213DBDA08C11819C8F21C1D1E1F  #10\n   C4B3C0D9BF0A171BB4C2C5B0B1050607  #20\n   CDBA16BCBBC9CC04B9CBCEDF1415FE1A  #30\n   20FF838485A0C68687A4BD2E3C282B7C  #40\n   268288898AA18C8B8DE121242A293BAA  #50\n   2D2FB68EB7B5C78F80A5DD2C255F3E3F  #60\n   9B90D2D3D4D6D7D8DE603A2340273D22  #70\n   9D616263646566676869AEAFD0ECE7F1  #80\n   F86A6B6C6D6E6F707172A6A791F792CF  #90\n   E67E737475767778797AADA8D1EDE8A9  #A0\n   5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E  #B0\n   7B414243444546474849F0939495A2E4  #C0\n   7D4A4B4C4D4E4F505152FB968197A398  #D0\n   5CF6535455565758595AFDE299E3E0E5  #E0\n   30313233343536373839FCEA9AEBE99F  #F0\nEBCDIC_TO_ASCCII_TABLE_STOP\n######################################################################\n*/\n\n\n/* server starts here. */\nmain:\n  parse arg mainargs\n  Code=ValdiateDDAllocation();    if Code\\=0 then x=Exit_Error(Code)\n  Code=Init_Main();               if Code\\=0 then x=Exit_Error(Code)\n  x=ShowWelcomeInfo()\n  if mainargs \\= '' then do\n      Code=ProcessOptions(mainargs)\n      Exit_Error(Code)\n  end\n  Code=ReadConfig();              if Code\\=0 then x=Exit_Error(Code)\n  Code=UpdateSource();            if Code\\=0 then x=Exit_Error(Code)\n  Code=BuildCompileJCL();         if Code\\=0 then x=Exit_Error(Code)\n  Code=SubmitCompileJCL();        if Code\\=0 then x=Exit_Error(Code)\n  Exit_Error(Code)\n/* end of main program */\n\n\nProcessOptions:\n  parse arg options\n  upper options\n  if left(options,7) == 'MVSCMD ' then do\n     parse var options 'MVSCMD' mvs_cmd\n     x=Console_Command(mvs_cmd)\n  end\n  else do\n     x=log('NXB007E The option' options ' is invalid.')\n     return 8\n  end\nreturn 0\n\n\nValdiateDDAllocation:\n  drop vda_code\n  vda_code = 0\n  if CheckDDName('SYSIN')==0 then do\n     x=log('NXB010E The madatory SYSIN DD is missing.')\n     vda_code = 8\n  end\n\n  return vda_code\n\nInit_Main:\n  Start_Time = Time()\n  Start_Date = Date()\n  ShutDown   = 0\n  TaskName   = mvsvar('SYMDEF','JOBNAME')\n  ProgramTitle = 'Generate NPF Exit Load Module Program'\n\n  /* Program Required Programs: */\n  PGM_WTO        = '*(WTO)'\n  PGM_Wait       = '*(WAIT)'\n\n  /* Confiuguration Settings */\n  DROP CompileJCL.   /* Archive Skeleton JCL */\n  DROP Keyword.\n  DROP Config.\n  DROP Type.\n  DROP NoBlank.\n\n  DROP ExitRec.   /* EXIT Load Module Statements in Config.*/\n  DROP OLogo.     /* Banner Page Logo Statements in Config.*/\n  DROP NLogo.     /* Banner Page Logo Statements in Assembler */\n  DROP E2ATable.  /* EASCII to ASCII table Statements in Config.*/\n\n  DROP DSSField.  /* Data Set Status Record Fields. */\n  DROP DSSFBeg.\n  DROP DSSFLen.\n  DROP DSList.     /* current datasets ready to processing */\n  DROP DSExisting. /* existing datasets in DSStatus. */\n  DROP ARCKeywords.\n  DROP ARCKeyLines.\n\n  x=msg('OFF')\n  iSOURCE                       =1\n  iSOURCELIB                    =2\n  iTCPMACLIB                    =3\n  iREFRESHLLA                   =4\n  iLISTDETAIL                   =5\n  iLOADLIB                      =6\n  iJOBCARD                      =7\n  iEXIT                         =8\n  TotalKeywords                 =8\n\n  Keyword.iSOURCE               = 'SOURCE'\n  Keyword.iSOURCELIB            = 'SOURCELIB'\n  Keyword.iTCPMACLIB            = 'TCPIPMACLIB'\n  Keyword.iREFRESHLLA           = 'REFRESHLLA'\n  Keyword.iLISTDETAIL           = 'LISTDETAIL'\n  Keyword.iLOADLIB              = 'LOADLIB'\n  Keyword.iJOBCARD              = 'JOBCARD'\n  Keyword.iEXIT                 = 'EXIT'\n\n  Config.iSOURCE                = 'NPFIXASM'\n  Config.iSOURCELIB             = ''\n  Config.iTCPMACLIB             = 'TCPIP.SEZACMAC'\n  Config.iREFRESHLLA            = 'YES'\n  Config.iLISTDETAIL            = 'NO'\n  Config.iLOADLIB               = ''\n  Config.iJOBCARD               = ''\n  Config.iEXIT                  = ''\n\n  Type.iSOURCE                  = 'ANY'\n  Type.iSOURCELIB               = 'DATASET'\n  Type.iTCPMACLIB               = 'DATASET'\n  Type.iREFRESHLLA              = 'ANY'\n  Type.iLISTDETAIL              = 'ANY'\n  Type.iLOADLIB                 = 'DATASET'\n  Type.iJOBCARD                 = 'DATASET'\n  Type.iEXIT                    = 'ANY'\n\n  NOBlank.iSOURCE                = 'NO'   /* YES: cannot be blank. */\n  NOBlank.iSOURCELIB             = 'NO'   /* YES: cannot be blank. */\n  NOBlank.iTCPMACLIB             = 'NO'   /* YES: cannot be blank. */\n  NOBlank.iREFRESHLLA            = 'NO'   /* YES: cannot be blank. */\n  NOBlank.iLISTDETAIL            = 'NO'   /* YES: cannot be blank. */\n  NOBlank.iLOADLIB               = 'YES'  /* NO : can be blank.    */\n  NOBlank.iJOBCARD               = 'NO'   /* NO : can be blank.    */\n  NOBlank.iEXIT                  = 'YES'\n\n  Config.0                      = TotalKeywords\n  NOBlank.0                     = TotalKeywords\n  Keyword.0                     = TotalKeywords\n  Type.0                        = TotalKeywords\n\n\n  /* #     FORM ORIENT    PAPER    Duplex SPACES PITCH\n     #     ==== ========= ======== ====== ====== =====\n     #     PT00 PORTRAIT  DEFATULT YES      5     17\n     #     PT01 PORTRAIT  DEFATULT YES      5     14\n     #     PT02 PORTRAIT  DEFATULT NO       5     17\n     #     LS00 LANDSCAPE DEFAULT  YES      4.5   14\n     #     LS01 LANDSCAPE DEFAULT  YES      5.7   13\n     #     LS02 LANDSCAPE DEFAULT  NO       4.5   14\n     #     LG00 LANDSCAPE LEGAL    YES      4.5   14\n     #     LG01 PORTRAIT  LEGAL    YES      5     17\n\n  */\n  PCLForm.1  = 'PT00'\n  PCLForm.2  = 'PT01'\n  PCLForm.3  = 'PT02'\n  PCLForm.4  = 'LS00'\n  PCLForm.5  = 'LS01'\n  PCLForm.6  = 'LS02'\n  PCLForm.7  = 'LG00'\n  PCLForm.8  = 'LG01'\n  PCLForm.0  = 8\n  Debug      = 0\n  LogoUpdated = 0\n  E2AUpdated = 0\n  /* Updated Source dataset and Member name   */\n  UpdateSourceDS = ''\n  x=GetSystemInfo()\n\n  return 0\n\nGetSystemInfo:\n  drop SYSINFO.\n  SYS_OS       = 1\n  SYS_SYSPROC  = 2\n  SYS_USERID   = 3\n  SYS_JOBNAME  = 4\n  SYS_JOBID    = 5\n  SYS_JOBTYPE  = 6\n  SYS_ASID     = 7\n  SYS_SYSID    = 8\n  SYS_PROGRAM  = 9\n  SYS_JES      = 10\n  SYS_EXECDSN  = 11\n  SYS_EXECNAME = 12\n  SYS_TOTAL    = 12        /*Total number of system info items. */\n  tcb      = ptr(540)\n  ascb     = ptr(548)\n  tiot     = ptr(tcb+12)\n  jscb     = ptr(tcb+180)\n  ssib     = ptr(jscb+316)\n  asid     = c2x(stg(ascb+36,2))\n  jobtype  = stg(ssib+12,3)\n  jobnum   = strip(stg(ssib+15,5),'L',0)\n  stepname = stg(tiot+8,8)\n  procstep = stg(tiot+16,8)\n  program  = stg(jscb+360,8)\n  parse source . . execname execdsn rest\n\n  if pos('.', execdsn)==0 then /* If execdsn is a DDNAME */\n     execdsn=Get_DDDataset_Name(execdsn,execname)\n\n  SYSINFO.0            = SYS_TOTAL\n  SYSINFO.SYS_OS       = mvsvar('SYSOPSYS')\n  SYSINFO.SYS_SYSID    = mvsvar('SYSNAME')\n  SYSINFO.SYS_JOBNAME  = mvsvar('SYMDEF','JOBNAME')\n  SYSINFO.SYS_SYSPROC  = sysvar('SYSPROC')\n  SYSINFO.SYS_USERID   = sysvar('SYSUID')\n  SYSINFO.SYS_JES      = sysvar('SYSJES')\n  SYSINFO.SYS_JOBTYPE  = jobtype\n  SYSINFO.SYS_JOBID    = jobtype||right(jobnum,5,'0')\n  SYSINFO.SYS_ASID     = asid\n  SYSINFO.SYS_PROGRAM  = program\n  SYSINFO.SYS_PROCSTEP = procstep\n  SYSINFO.SYS_EXECDSN  = execdsn\n  SYSINFO.SYS_EXECNAME = execname\n\nreturn 0\n\n/******************************************************/\n/* Function: ReadConfig()                              */\n/* Read configuration from CONFIG DD                  */\n/******************************************************/\nReadConfig:\n  RCode = 0\n  DROP InLines.\n  'EXECIO * DISKR SYSIN (STEM InLines. FINIS'\n  if RC\\=0 then do\n    x= Log(\"NXB070E There is an error while reading SYSIN DD\")\n    return 8\n  end\n\n  ex_count=0\n  ex_logo=0\n  ex_e2a=0\n  iLogo=0\n  iE2A=0\n  do iline=1 to InLines.0\n    record = Strip(InLines.iline)\n\n    /* read Logo of Banner Page */\n    if left(record,17) == 'BANNER_LOGO_START' then do\n       ex_logo=1; iterate; end\n    if left(record,16) == 'BANNER_LOGO_STOP' then do\n       ex_logo=0; iterate; end\n    if ex_logo then do\n       iLogo = iLogo + 1; OLogo.iLogo = InLines.iLine; iterate; end\n\n    /* Remote all commets */\n    if left(record,1) = '#' then iterate\n    if pos('#',record) > 1 then\n       record = strip(substr(record,1,pos('#',record)-1))\n    if length(record) == 0 then iterate\n\n    /* read EBCDIC to ASCII table */\n    if left(record,28) == 'EBCDIC_TO_ASCCII_TABLE_START' then do\n       ex_e2a=1; iterate; end\n    if left(record,27) == 'EBCDIC_TO_ASCCII_TABLE_STOP' then do\n       ex_e2a=0; iterate; end\n    if ex_e2a then do\n       iE2A=iE2A+1; upper record; E2ATable.iE2A=record; iterate; end\n\n    /* process normal configuration settings */\n\n    parse var record Title '=' Value\n\n    Upper Title\n    Value = Strip(Value)\n    Title = Strip(Title)\n    do keyitem=1 to Keyword.0\n      if Title=Keyword.keyitem & Value \\= '' then do\n        if TestStringType(Value, Type.keyitem) == 'NO' then do\n           RC2=Log(\"NXB071E Input of \" Title \"is invlaid.\")\n           RCode = 8\n           leave\n        end\n        if Title \\= 'EXIT' then Config.keyitem = Value\n        else do /* Read EXIT Load Module Records */\n           ex_count = ex_count + 1\n           ExitRec.ex_count = Value\n           Config.keyitem = ex_count\n        end\n        if debug then x=debug('Read' Keyword.keyitem'='Value)\n      end\n    end\n  end\n  ExitRec.0 = ex_count\n  OLogo.0 = iLogo\n  E2ATable.0 = iE2A\n\n  upper Config.iREFRESHLLA\n\n  if Config.iSOURCELIB == '' then\n     Config.iSOURCELIB = SYSINFO.SYS_EXECDSN\n\n  if Config.iJOBCARD == '' then\n     Config.iJOBCARD = SYSINFO.SYS_EXECDSN||'(NPFIXJCL)'\n\n  x=log('NXB072I Here are the build options in SYSIN:')\n  do keyitem=1 to Config.0\n    x=log('NXB072I   '||left(Keyword.keyitem,12)||'= 'Config.keyitem)\n    if NOBlank.keyitem = 'YES' & Config.keyitem = '' then do\n      RC2=Log(\"NXB072E In input: \"Keyword.keyitem,\n                   \"cannot be blank.\")\n      RCode = 8\n    end\n  end\n\n  if \\CheckDataset(Config.iLOADLIB,'PDS') then do\n      RCode=8\n      RC2=Log(\"NXB073E The loadlib \"Config.iLOADLIB,\n                   \"does not exist.\")\n  end\n\n  if \\CheckDataset(Config.iSOURCELIB,'PDS') then do\n      RCode=8\n      RC2=Log(\"NXB073E The source library \"Config.iSOURCELIB,\n                   \"does not exist.\")\n  end\n\n  if \\CheckDataset(Config.iTCPMACLIB,'PDS') then do\n      RCode=8\n      RC2=Log(\"NXB074E The source library \"Config.iTCPMACLIB,\n                   \"does not exist.\")\n  end\n\n  if \\CheckDatasetExistance(Config.iTCPMACLIB'('EZAPPFCD')') then do\n      RCode=8\n      RC2=Log(\"NXB075E The TCP/IP MACLIB \"Config.iTCPMACLIB,\n                   \"do have EZAPPFCD MACRO.\")\n  end\n\n  if Config.iREFRESHLLA \\= 'YES' & Config.iREFRESHLLA \\= 'NO' then do\n      RCode=8\n      RC2=Log(\"NXB076E The value of REFRESHLLA must be either\",\n                   \"YES or NO.\")\n  end\n\n  if \\CheckDatasetExistance(Config.iJOBCARD) then do\n      x=Log(\"NXB077E Cannot find the JOBCARD file \",\n           Config.iJOBCARD)\n      RCode=8\n  end\n\n  if ValidateLogo()>0     then RCode=8\n  if ValidateE2ATable()>0 then RCode=8\n\n  UpdateSourceDS = Config.iSourceLib||'(NPFIXUST)'\nreturn RCode\n\n/* Validate the Logo\n */\nValidateLogo:\n   if OLogo.0 == 0 then return 0\n   LogoUpdated = 1\n   if OLogo.0 < 17 then do\n      do iLogo=OLogo.0 to 17; OLogo.iLogo=left(' ',80); end\n   end\n   OLogo.0 = 17\n   iNL = 0\n   /* split the logo record from 1 to 2 */\n   do iLogo=1 to OLogo.0\n      NewRec = substr(left(OLogo.iLogo, 80),1,80)\n      iNL = iNL + 1\n      NLogo.iNL = substr(NewRec, 1, 40)\n      iNL = iNL + 1\n      NLogo.iNL = substr(NewRec, 41, 40)\n   end\n   NLogo.0 = iNL\n   /* Convert ' to '' */\n   do iLogo=1 to NLogo.0\n      NewRec = NLogo.iLogo\n      NLogo.iLogo = ''\n      do iNL=1 to 40\n        Char = substr(NewRec,iNL,1)\n        NLogo.iLogo = NLogo.iLogo||Char\n        if Char == \"'\" then\n        NLogo.iLogo = NLogo.iLogo||Char\n      end\n   end\n\nreturn 0\n\n/* Validate the EBCDIC to ASCII table.\n */\nValidateE2ATable:\n   validbytes = '0123456789ABCDEF'\n   if E2ATable.0 == 0 then return 0\n   E2AUpdated = 1\n   if E2ATable.0 \\= 16 then do\n      x=Log('NXB110E The EBCDIC to ASCII table must be 16 lines')\n      return 8\n   end\n\n   do iE2A=1 to 16\n      if length(E2ATable.iE2A) \\= 32 then do\n         x=Log('NXB111E The line length of EBCDIC to ASCII',\n                    'table must be 32 bytes.')\n         return 8\n      end\n      do iCol=1 to 32\n         byte = substr(E2ATable.iE2A,iCol,1)\n         if pos(byte, Validbytes) ==0 then do\n            x=Log('NXB112E The byte in EBCDIC 2 ASCII table must',\n            'be 0-9 A-F')\n            return 8\n         end\n      end\n   end\nreturn 0\n\n/*===================================================================*/\n/* Check if the given dataset is given type.\n   return 1: Match!\n   return 0: not match\n*/\nCheckDataset:\n  parse arg GivenDSName,CD_DSNType\n  if GivenDSName=='' then return 1\n  if CD_DSNType == '' then CD_DSNType = 'SEQUENTIAL'\n  if left(GivenDSName,1) \\= \"'\" then GivenDSName = \"'\"GivenDSName\"'\"\n  upper GivenDSName CD_DSNType\n  Drop DDResults.\n  DSNType = LISTDSI(GivenDSName)\n  if DSNType > 4 then DO\n    if CD_DSNType == 'ANY' then return 0\n    if SYSREASON = '005' then ErrMsg=GivenDSName' does not exist.'\n    ErrMsg=GivenDSName,\n        ' - Error while reading, code:'DSNType', reason:'SYSREASON'.'\n    x=Log('NXB060E' ErrMsg)\n    return 0\n  end\n  if CD_DSNType == 'ANY' then return 1\n\n  select\n     when SYSDSORG = 'PO' then FIleType = 'PDS'\n     when SYSDSORG = 'PS' then FIleType = 'SEQUENTIAL'\n     when SYSDSORG = 'DA' then FIleType = 'LIBRARY'\n     when SYSDSORG = 'VS' then FIleType = 'VSAM'\n     otherwise FileType = SYSDSORG\n  end\n  if CD_DSNType == 'SEQUENTIAL' then do\n    if FileType == 'PDS' then do\n      if pos('(', Cfg_File) == 0  then do\n    RC2=Log(\"NXB061E You must give the member in PDS \"GivenDSName)\n        return 0\n      end\n      else return 1\n    end\n  end\n  if CD_DSNType \\= FileType then do\n     RC2=Log(\"NXB062E The \"GivenDSName \"must be \"CD_DSNType,\n        \", but it's \"FileType)\n     return 0\n  end\n  return 1\n\n/* Check the existance of the given dataset or PDS member\n   return 1: Match!\n   return 0: not match\n*/\nCheckDatasetExistance:\n   parse arg CKDS_DSN\n   /* File(Mem1,Mem2...)*/\n   drop DSName Member\n   if pos('(',CKDS_DSN)>0 then do\n         parse var CKDS_DSN DSName '(' Member ')'\n         DSName = Strip(DSName)\n         Member = Strip(Member)\n   end\n   else do\n         DSName = Strip(CKDS_DSN)\n         Member = ''\n   end\n   parse value CheckDatasetType(DSName) with CKDSCode ':' CKDSDesp\n\n   if CKDSCode \\= 0            then return 0\n   if Member   == ''           then return 1\n   if CKDSDesp \\= 'PDS'        then return 0  /* Only PDS has members */\n   if sysdsn(\"'\"CKDS_DSN\"'\") == 'OK' then return 1\n   return 0\n\nCheckDatasetType:\n   parse arg DSNTParms\n   TypeDSName=DSNTParms\n   if left(DSNTParms,1) \\= \"'\" then TypeDSName = \"'\"TypeDSName\n   if right(DSNTParms,1) \\= \"'\" then TypeDSName = TypeDSName\"'\"\n\n   DSNType = LISTDSI(TypeDSName)\n   if DSNType > 4 then DO\n     if SYSREASON = '005' then return '1:'TypeDSName' does not exist.'\n     return '2:'TypeDSName,\n         ' - Error while reading, code:'DSNType', reason:'SYSREASON'.'\n   end\n   select\n      when SYSDSORG = 'PO' then FIleType = 'PDS'\n      when SYSDSORG = 'PS' then FIleType = 'SEQUENTIAL'\n      when SYSDSORG = 'DA' then FIleType = 'LIBRARY'\n      when SYSDSORG = 'VS' then FIleType = 'VSAM'\n      otherwise FileType = SYSDSORG\n   end\n   return '0:'FileType\n\n/* Build the comiple JCL here */\nBuildCompileJCL:\n   drop JCL.\n   bc_code = 0\n   iJCL=0\n   JCL.0 = 0\n   x=log(\"NXB060I Generate the compile JCL for exit modules.\")\n   bc_code=BuildJobCard()\n   if bc_code >0 then return bc_code\n\n   do iBCJ=1 to ExitRec.0\n      if BuildOneModule(ExitRec.iBCJ)>0 then bc_code = 8\n   end\n\n   /* call this program again to issue the console command. */\n   if Config.iREFRESHLLA == 'YES' then do\n      x=addjcl(left(\"//*\",70,\"*\"))\n      x=addjcl(\"//* ISSUE CONSOLE COMMAND TO REFRESH THE LINKLST\")\n      x=addjcl(\"//* COMMAND TO BE ISSUED: F LLA,REFRESH\")\n      x=addjcl(\"//REFRESH  EXEC PGM=IKJEFT01,COND=(0,NE),\")\n      x=addjcl(\"//   PARM='NPFIXREX MVSCMD F LLA,REFRESH'\")\n      x=addjcl(\"//SYSEXEC  DD   DISP=SHR,DSN=\"SYSINFO.SYS_EXECDSN)\n      x=addjcl(\"//SYSTSPRT DD   SYSOUT=*\")\n      x=addjcl(\"//SYSTSIN  DD   DUMMY\")\n      x=addjcl(\"//SYSIN    DD   DUMMY\")\n   end\n   x=addjcl(left(\"//*\",70,\"*\"))\n   JCL.0 = iJCL\n\nreturn bc_code\n\nBuildJobCard:\n   \"FREE F(JOBCARD)\"\n   \"ALLOC F(JOBCARD) DA('\"Config.iJOBCARD\"') SHR REUSE\"\n   \"EXECIO * DISKR JOBCARD (STEM InLines. FINIS\"\n   if RC\\=0 then do\n      x= Log(\"NXB070E There is an error while reading JOB Info.\")\n      return 8\n   end\n   iBJC = 0\n   ijobcard = 0\n   do iBJC=1 to InLines.0\n      rec =substr(InLines.iBJC,1,72) /* just read 72 bytes */\n      parse var rec title key .\n      title = strip(title)\n      if left(title,2)=='//' & key=='JOB' & left(title,3)\\='// ' then do\n         x=addjcl(rec)\n         ijobcard = 1\n         iterate\n      end\n      if ijobcard == 0 then iterate\n\n      if left(title,3) == '// ' then do\n         x=addjcl(rec)\n         iterate\n      end\n      else leave\n   end\n   x=addjcl('//* This JCL is submitted by 'ProgramTitle)\n   x=addjcl('//* Purpose: Build the NPF exit load module.')\n   x=addjcl('//* Support: Hunter Zhou, zhough2000@yahoo.com     ')\n   x=addjcl('//* ')\nreturn 0\n\nBuildOneModule:\n   parse arg record\n   parse var record bm_module ',' bm_banner ',' bm_cc ',',\n      bm_pcl ',' bm_form ',' bm_skip1ff ',' bm_hostname .\n   bo_code = 0\n   bm_module = strip(bm_module)\n   bm_banner = strip(bm_banner)\n   bm_cc     = strip(bm_cc)\n   bm_pcl    = strip(bm_pcl)\n   bm_form   = strip(bm_form)\n   bm_skip1ff= strip(bm_skip1ff)\n   bm_hostname= strip(bm_hostname)\n   if Config.iLISTDETAIL == 'NO' then  bm_listopt = 'NOLIST,'\n   else bm_listopt = 'LIST,'\n   x=addjcl(left(\"//*\",70,\"*\"))\n   x=addjcl(\"//* Build NPF exit load module \"bm_module)\n   x=addjcl('//* Configuration Summary for this load module:')\n   x=addjcl('//*   MODULE:' bm_module)\n   x=addjcl('//*   BANNER:' bm_banner)\n   x=addjcl('//*   CC    :' bm_cc)\n   x=addjcl('//*   PCL   :' bm_pcl)\n   x=addjcl('//*   FORM  :' bm_form)\n   x=addjcl('//*   SKIPFF:' bm_skip1ff)\n   x=addjcl('//*   HOSTNAME:' bm_hostname)\n   if bm_module == '' then do\n      RC2=Log(\"NXB081E Load Module is invalid\")\n      bo_code = 8\n      bm_module = ''\n   end\n   /* validate others ... */\n   upper bm_banner bm_module bm_cc bm_pcl bm_pcl bm_form bm_skip1ff\n\n   /* Check Banner */\n   if bm_banner=='YES' then bm_banner=1\n   else if bm_banner=='NO' then bm_banner=0\n   else do\n      RC2=Log(\"NXB082E Banner must be YES or NO.\")\n      bo_code = 8\n      bm_banner  = ''\n   end\n\n   /* Check cc */\n   if bm_cc=='YES' then bm_cc=1\n   else if bm_cc=='NO' then bm_cc=0\n   else do\n      RC2=Log(\"NXB083E CC must be YES or NO.\")\n      bo_code = 8\n      bm_cc   = ''\n   end\n\n   /* Check pcl*/\n   if bm_pcl=='YES' then bm_pcl=1\n   else if bm_pcl=='NO' then bm_pcl=0\n   else do\n      RC2=Log(\"NXB084E PCL must be YES or NO.\")\n      bo_code = 8\n      bm_pcl  = ''\n   end\n\n   /* Check pcl*/\n   if bm_skip1ff=='YES' then bm_skip1ff=1\n   else if bm_skip1ff=='NO' then bm_skip1ff=0\n   else do\n      RC2=Log(\"NXB084E SKIP1FF must be YES or NO.\")\n      bo_code = 8\n      bm_skip1ff  = ''\n   end\n\n   /* Check form */\n   if_found = 0\n   if bm_form \\= '' then do\n      do iform=1 to PCLForm.0\n         if bm_form == PCLForm.iform then do\n            if_found = 1\n            leave\n         end\n      end\n      if if_found == 0 then do\n         RC2=Log('NXB085E The form'bm_form'is invalid.')\n         bo_code = 8\n      end\n   end\n   else do\n      if bm_PCL == 1 then do\n         RC2=Log(\"NXB086E The form cannot be blank if PCL=YES.\")\n         bo_code = 8\n      end\n      bm_form = '    '\n   end\n\n   if bo_code \\= 0 then return bo_code\n   x=addjcl(\"//\"bm_module\" EXEC ASMACL,COND=(0,NE),\",\n           ||\"PARM.L='\"bm_listopt\"RENT',\")\n   x=addjcl(\"//  PARM.C='\"bm_listopt,\n           ||\"SYSPARM(\"bm_banner\",\"bm_cc\",\"bm_pcl\",\",\n           ||bm_skip1ff\",\"bm_form\",\"bm_hostname\")'\")\n   x=addjcl(\"//C.SYSIN   DD DISP=SHR,DSN=\"UpdateSourceDS)\n   x=addjcl(\"//C.SYSLIB  DD DISP=SHR,DSN=SYS1.MACLIB\")\n   x=addjcl(\"//          DD DISP=SHR,DSN=SYS1.MODGEN\")\n   x=addjcl(\"//          DD DISP=SHR,DSN=TCPIP.SEZACMAC\")\n   x=addjcl(\"//L.SYSLMOD DD DISP=SHR,DSN=\"Config.iLOADLIB)\n   x=addjcl(\"//L.SYSIN   DD *\")\n   x=addjcl(\"  NAME \"bm_module\"(R)\")\n   x=addjcl(\"/*                \")\n   JCL.0=iJCL\nreturn bo_code\n\naddjcl:\n  parse arg statement\n  iJCL=iJCL+1\n  JCL.iJCL = statement\nreturn 0\n\nSubmitCompileJCL:\n  \"FREE F(SUBMIT)\"\n  \"ALLOC F(SUBMIT) SYSOUT WRITER(INTRDR) LRECL(80) RECFM(F,B)\"\n  if RC \\= 0 then do\n     x=log('NXB131E ALLOC ERROR FOR SUBMIT,RC='RC)\n     return 8\n  end\n  \"EXECIO * DISKW SUBMIT (STEM JCL. FINIS\"\n  if RC \\= 0 then do\n     x=log('NXB132E WRITE ERROR FOR SUBMIT,RC='RC)\n     return 8\n  end\n  \"FREE F(SUBMIT)\"\n  x=log('NXB060I The compile JCL for all exit modules is submitted.')\nreturn 0\n\n/*Update Source;\n  Update Assembler source program.\n  1. EBCDIC to ASCII table.\n  2. Logo of Banner page\n */\nUpdateSource:\n  drop OldSrc. NewSrc. iNSC iOSC iE2A\n  if \\LogoUpdated & \\E2AUpdated then do\n     UpdateSourceDS = Config.iSOURCELIB\"(\"Config.iSOURCE\")\"\n     return 0\n  end\n  OldSourceDS = Config.iSOURCELIB\"(\"Config.iSOURCE\")\"\n  x=log('NXB140I Update Assembler for Logo and EBCDIC to ASCII table.')\n  \"FREE F(SOURCE)\"\n  \"ALLOC F(SOURCE) DA('\"OldSourceDS\"') SHR REUSE\"\n  if RC \\= 0 then do\n     x=log('NXB140E ALLOC ERROR FOR SOURCE,RC='RC)\n     return 8\n  end\n  \"EXECIO * DISKR SOURCE (STEM OldSrc. FINIS\"\n  if RC \\= 0 then do\n     x=log('NXB141E ALLOC ERROR FOR SOURCE,RC='RC)\n     return 8\n  end\n  \"FREE F(SOURCE)\"\n\n  iLogo=0\n  iE2A=0\n  NewSrc.1=left('*',70,'*')||'*'\n  NewSrc.2=left('* THIS ASSEMBLER SOURCE IS ALTERED BY NPF EXIT',\n                ,70,'*')||'*'\n  NewSrc.3=left('* PROGRAM. THIS ASSEMBLER IS CUSTOMIZED YOUR',\n                ,70,'*')||'*'\n  NewSrc.4=left('* INSTALLATION (BANNER PAGE & EBCDIC-ASCII TABLE).',\n                ,70,'*')||'*'\n  NewSrc.5=left('*',70,'*')||'*'\n  iNSC  =5\n  do iOSC=1 to OldSrc.0\n    parse var OldSrc.iOSC Title Key Val .\n    Title = strip(Title,'T')\n    Key = Strip(Key)\n    Val = Strip(Val)\n    if LogoUpdated & Title=='BNRBUF' & Key == 'DS' & Val == '0C' then do\n       ipos = pos(\" DS\", OldSrc.iOSC)\n       pref = left(\" \",ipos)||\"DC C\"||\"'\"\n       sufx = \"  ;Logo\"\n       iNSC  = iNSC + 1\n       NewSrc.iNSC = OldSrc.iOSC\n       iNSC  = iNSC + 1\n       iOSC  = iOSC + 1\n       NewSrc.iNSC = OldSrc.iOSC\n       iNSC  = iNSC + 1\n       iOSC  = iOSC + 1\n       NewSrc.iNSC = OldSrc.iOSC\n       do iLogo=1 to NLogo.0\n          iNSC  = iNSC + 1\n          NewSrc.iNSC=pref||NLogo.iLogo||\"'\"\n          NewSrc.iNSC=left(NewSrc.iNSC, 64)||sufx\n       end\n       iOSC=iOSC+34  /* skip 34 lines from old source */\n       iterate\n    end\n    if E2AUpdated & Title=='E2ATAB' & Key=='DS' & Val=='0CL256' then do\n       iNSC  = iNSC + 1\n       NewSrc.iNSC = OldSrc.iOSC\n       ipos = pos(\" DS\", OldSrc.iOSC)\n       pref = left(\" \",ipos)||\"DC X\"||\"'\"\n       sufx = \"'  ; EBCDIC TO ASCII\"\n       do iE2A=1 to E2ATable.0\n          iNSC  = iNSC + 1\n          NewSrc.iNSC=pref||E2ATable.iE2A||sufx\n       end\n       iOSC=iOSC+16  /* skip 34 lines from old source */\n       iterate\n    end\n    iNSC  = iNSC + 1\n    NewSrc.iNSC = OldSrc.iOSC\n  end\n\n  \"ALLOC F(SOURCE) DA('\"UpdateSourceDS\"') SHR REUSE\"\n  if RC \\= 0 then do\n     x=log('NXB142E ALLOC ERROR FOR SOURCE,RC='RC)\n     return 8\n  end\n  \"EXECIO * DISKW SOURCE (STEM NewSrc. FINIS\"\n  if RC \\= 0 then do\n     x=log('NXB143E WRITE ERROR FOR SOURCE,RC='RC)\n     return 8\n  end\n  \"FREE F(SOURCE)\"\n\n  drop OldSrc. NewSrc. iNSC iOSC iE2A\nreturn 0\n/*\n*************************************************\n*  Verify if given DD name is allocated or not. *\n*  If not found, return 0                       *\n*  If found, return nnn dataset names           *\n*     nnn is total number of datasets allocated.*\n*     the dataset names separated by spaces.    *\n*************************************************/\nCheckDDName:\n  parse Arg reqdd .\n  tcb = d2x(C2d(Storage('21c', 4)) + 12)\n  tiot = c2d(Storage(tcb, 4))+24\n  xlen = 0\n  xstring = ''\n  dsnames = 0\n  Do Forever\n    tiot = tiot + xlen\n    addr = tiot\n    xlen = C2d(Storage(D2x(addr), 1))\n    If xlen = 0 Then leave\n    If Bitand(Storage(d2x(addr + 1), 1), '80'x) = '80'x Then iterate\n    addr = tiot + 4\n    ddname = Strip(Storage(D2x(addr), 8))\n    if ddname \\='' & dsnames>0 then leave\n    if ddname == reqdd | dsnames>0 then do\n        addr = tiot + 12\n        dsnaddr = d2x(c2d(Storage(d2x(addr),3)) + 16)\n        xstring = xstring||' '||strip(Storage(dsnaddr, 44), 'T')\n        dsnames = dsnames + 1\n    end\n  End\n  drop tcb tiot xlen addr ddname\n  if dsnames==0 then return 0\n  else Return dsnames||xstring\n\n/*===================================================================*/\n/* Given the DD Name and member name, found the data set which\n   in given DD and has the given member name\n */\nGet_DDDataset_Name:\n  parse arg DDName,Member\n  drop output.\n  drop dddsn.\n  x=outtrap('output.')\n  \"LISTALC STATUS SYSNAMES\"\n  x=outtrap('off')\n  if output.0 <0 then return \"\"\n  num=0; begin = 0\n  do i=1 to output.0\n     if pos('--', output.i)==1 then iterate\n     if pos('NULLFILE', output.i)==1 then iterate\n     DSN=output.i; i=i+1; DD =output.i\n     if pos('  'DDName, DD)==1 then do\n        begin = 1;\n        num=num+1;  DDDSN.num = strip(DSN);   iterate\n     end\n     if pos('          ',DD)==1 & begin ==1 then do\n        num=num+1;  DDDSN.num = strip(DSN);   iterate\n     end\n     else if begin==1 then leave\n  end\n  DDDSN.0 = num\n  if DDDSN.0 ==0 then return ''\n  if Member == '' then return DDDSN.1  /* If no member name given */\n  found = 0; gdn_DSName = ''\n  do i=1 to DDDSN.0\n     drop output.\n     x=outtrap('output.')\n     \"LISTDS '\"DDDSN.i\"' MEMBERS\"\n     x=outtrap('off')\n     if output.0 < 1 then iterate\n     begin = 0\n     do j=1 to output.0\n       if pos('--MEMBER', output.j) == 1 then do\n          begin = 1; iterate\n       end\n       if begin ==0 then iterate\n       if begin ==1 & pos('--', output.j)==1 then leave\n       if begin ==1 then do\n          thismember = strip(output.j)\n          if thismember == member then do\n             found = 1;\n             gdn_DSName=DDDSN.i\n             leave\n          end\n       end\n     end\n     if found==1 then leave\n  end\n  drop output.\n  drop dddsn.\nreturn gdn_DSName\n\n/******************************************************/\n/* Function: TestStringType(String,'NUMBER')              */\n/* Read configuration from given DD name.             */\n/* Support Type:\n    NUMBER       : for numbers (0-9)\n    IPADDRESS    : for numbers plus '.'\n    DATASET      : for (0-9, a-z, A-Z, '_', '.')\n    PATH         : for FILENAME plus '/'\n    CHAR         : for (a-z, A-Z)\n    ALPHANUMBER  : for DIGITS plus CHAR plus '_'\n*/\n/******************************************************/\nTestStringType:\n  Parse arg String,Type\n\n    if Type = '' | String = '' then return 'NO'\n    if Type = 'ANY' then return 'YES'\n    Drop STypes.\n    STypes.1 = 'NUMBER'\n    STypes.2 = 'IPADDRESS'\n    STypes.3 = 'DATASET'\n    STypes.4 = 'DATASETWILD'   /*  'SP2487.ZHOUG.*' */\n    STypes.5 = 'PATH'\n    STypes.6 = 'CHAR'\n    STypes.7 = 'ALPHANUMERIC'\n    STypes.8 = 'CHARNUMERIC'\n    STypes.0 = 8\n\n    Found = 0\n    do item=1 to STypes.0\n       if STypes.Item = Type then do; Found = 1; leave; end\n    end\n\n    if Found = 0 then return 'NO';\n\n    Drop Chars.\n    Citem = 1\n\n    if Type \\= 'CHAR' then do\n      do item=240 to 249; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      Chars.0 = Citem - 1;\n    end\n\n    if Type \\= 'NUMBER' & Type \\= 'IPADDRESS' then do\n      do item=129 to 137; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      do item=145 to 153; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      do item=162 to 169; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      do item=193 to 201; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      do item=209 to 217; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      do item=226 to 233; Chars.Citem=D2C(item); Citem = Citem + 1; end\n      Chars.0 = Citem - 1;\n    end\n\n    if Type = 'IPADDRESS' | Type = 'DATASET',\n     | Type = 'DATASETWILD' | Type='PATH' then do\n      Chars.Citem='.'; Citem = Citem + 1;\n    end\n\n    if Type = 'DATASETWILD' then do\n      Chars.Citem='*'; Citem = Citem + 1;\n    end\n\n    if Type = 'PATH' then do\n      Chars.Citem='/'; Citem = Citem + 1;\n      Chars.Citem='\\'; Citem = Citem + 1;\n    end\n\n    if Type = 'DATASET' | Type = 'DATASETWILD' | Type='PATH' then do\n      Chars.Citem='_'; Citem = Citem + 1;\n      Chars.Citem='@'; Citem = Citem + 1;\n    end\n\n    if Type = 'DATASET' then do\n      Chars.Citem='('; Citem = Citem + 1;\n      Chars.Citem=')'; Citem = Citem + 1;\n    end\n\n    if Type = 'DATASETWILD' then do\n      Chars.Citem='?'; Citem = Citem + 1;\n    end\n\n    Chars.0 = Citem - 1;\n    MyCode = 'YES'\n    do Sitem=1 to length(String)\n       Found=0\n       do Citem = 1 to Chars.0\n          if substr(String, Sitem, 1 ) = Chars.Citem then do\n             Found = 1; leave\n          end\n       end\n       if Found=0 then do; MyCode='NO'; leave; end\n    end\n\n return MyCode\n\nShowWelcomeInfo:\n   say ' Program    :' ProgramTitle\n   say ' Start time :' Start_Date Start_Time\n   say ' Design     : Hunter Zhou,  (zhough2000@yahoo.com)     '\n   say ' Support    : Hunter Zhou,  (416) 602-9567'\n   say left('=',80,'=')\n   x=log('NXB001I Welcome to 'ProgramTitle)\n   x=log('NXB002I This program is to build the NPF exit load module.')\n   return 0\n/******************************************************/\n/* Function: ErrorLog()                               */\n/******************************************************/\nerrorlog:\n   parse arg err_Msg\n   say date('S')||\",\"||time()||\",ERROR: \"err_Msg\n   return 0\n\n/******************************************************/\n/* Function: Log()                                    */\n/******************************************************/\ndebug:\n   parse arg log_Msg\n   say date('S')||\",\"||time()||\" NXBDBGI \"log_Msg\n   return 0\n\nlog:\n   parse arg log_Msg\n   say date('S')||\",\"||time()||\" \"log_Msg\n   return 0\n\n/******************************************************/\n/* Function: wto() send message to WTO and SYSPRINT   */\n/******************************************************/\nwto:\n  parse arg wto_Msg\n  x=l_wto(wto_Msg)\n  x=Log(wto_Msg)\nreturn 0\n\n/******************************************************/\n/* calltso: Call external program in TSO.             */\n/******************************************************/\ncalltso:\n  parse arg pgm,prm\n  if prm\\='' then\n       address tso \"CALL \"pgm\" '\"prm\"'\"\n  else\n       address tso \"CALL \"pgm\nreturn 0\n\n/******************************************************/\n/* InUse: Check if the dataset is in use              */\n/******************************************************/\nInUse:\n   parse arg dsn\n   x = queryenq(\"'\"dsn\"'\")\n   if enqjob.0 >0 then return 1\n   else return 0\n\n/*===================================================================*/\n/* return a radmon number ranged from the server port */\nrand:\n  parse arg length\n  if length == '' then length = 6\n  if \\datatype(length,'NUM') then length = 6\n  min=left(X2D(SYSINFO.SYS_ASID),length,'0')\n  return left(random(min,min+99999),length,'0')\n/*===================================================================*/\n/* return the pointer at given address. */\nptr: return c2d(storage(d2x(arg(1)),4))\n/*===================================================================*/\n/* return the contents at given address. */\nstg: return storage(d2x(arg(1)),arg(2))\n\n/* YYYYMMDDSSSSS */\nGetTimeStamp:\n  return Date('S')||Time('S')\n\nConsole_Command:\n  parse arg CC_Command\n  x=Log(\"NXB160I ISSUE MVS Command:\" CC_Command)\n  CC_CART = 'IX'||substr(Time('L'),10,6)\n  address tso \"CONSPROF SOLDISP(NO)\"\n  address tso \"CONSOLE  ACTIVATE NAME(\"CC_CART\")\"\n  address tso \"CONSOLE  SYSCMD(\"||CC_Command||\") CART('\"||CC_CART||\"')\"\n  address tso \"CONSOLE  DEACTIVATE\"\n  address tso \"CONSPROF SOLDISP(YES)\"\nreturn 0\n\nExit_Error:\n  parse arg Error_Code\n  x=Log('NXB900I 'ProgramTitle 'is finished with code' Error_Code'.')\n  exit(Error_Code)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NPFIXUST": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x003\\x01\\x03(\\x9f\\x01\\x06\\x11_\\t\\x19\\x04\\xf9\\x04\\xf7\\x00\\x00\\xe9\\xc8\\xd6\\xe4@@@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2003-10-16T00:00:00", "modifydate": "2006-04-25T09:19:33", "lines": 1273, "newlines": 1271, "modlines": 0, "user": "ZHOU"}, "text": "***********************************************************************\n* THIS ASSEMBLER SOURCE IS ALTERED BY NPF EXIT*************************\n* PROGRAM. THIS ASSEMBLER IS CUSTOMIZED YOUR***************************\n* INSTALLATION (BANNER PAGE & EBCDIC-ASCII TABLE).*********************\n***********************************************************************\nEXITNPFR TITLE 'NPF Input Record Exit Program for network printers'\n***********************************************************************\n*---------------------------------------------------------------------*\n*                   NPF Input Record Exit                             *\n*---------------------------------------------------------------------*\n* Program: EXITNPFR                                                   *\n* Purpose: NPF Input Record Exit for network printers                 *\n* Design : Hunter Guanghui Zhou                                       *\n*          Phone: 1-(416)-602-9567                                    *\n*          E-mail: zhough2000@yahoo.com                               *\n* Date   : April 14, 2003                                             *\n* Description:                                                        *\n*   This exit program is used for network printers with following     *\n*   specifications:                                                   *\n*                                                                     *\n* Printer Type        Orientation PAPER   CC  Duplex Lines/Page       *\n* =================== =========== ======= === ====== ==========       *\n* IP Printer w/ PCL 5  LANDSCAPE  Default Yes Yes    64               *\n*                                                                     *\n* Installation Instructions:                                          *\n*                                                                     *\n*  1.Compile and generate load module into any LINKLST library.       *\n*  2.In TCP/IP Network Print Facility ISPF Panels,                    *\n*    a. Select O for Options                                          *\n*    b. Select A for ADD                                              *\n*    c. Enter the option name, i.e. EXITNPFR                          *\n*    d. Enter EXITNPFR as the name of 'Input Record Exit'             *\n*    e. Enter 'BINARY CFFIRST' as the LPR options                     *\n*  3.Create a NPF printer to use this NPF option                      *\n*    In TCP/IP Network Print Facility ISPF Panels,                    *\n*    a. Select R for Routing                                          *\n*    b. Select A for ADD                                              *\n*    c. Enter the printer name, i.e. VCIT3                            *\n*       Enter the minor name i.e. ALSCC(Class A, Form LSCC)           *\n*    d. Enter EXITNPFR as the option name                             *\n*       Enter IP address of target network PCL printer.               *\n*       Enter IPPRT as printer name, or given by printer server.      *\n*                                                                     *\n* Compile:                                                            *\n*   This exit program is a reentrent program. RENT option must be     *\n*   specified in LINK PARM.                                           *\n*   The host name should be given in SYSPARM in PARM.C.               *\n*                                                                     *\n* //COMPILE EXEC ASMACL,PARM.L='LIST,RENT',                           *\n* //  PARM.C='SYSPARM(maintest.agora.lan)'    <== host name           *\n* //C.SYSIN   DD DISP=SHR,DSN=SP2487.ASM.SOURCE(EXITNPFR)             *\n* //C.SYSLIB  DD DISP=SHR,DSN=TCPIP.SEZACMAC                          *\n* //          DD DISP=SHR,DSN=SYS1.MACLIB                             *\n* //          DD DISP=SHR,DSN=SYS1.MODGEN                             *\n* //L.SYSLMOD DD DISP=SHR,DSN=SYS1.USER.LINKLIB                       *\n* //L.SYSIN   DD *                                                    *\n*   NAME EXITNPFR(R)                                                  *\n* /*                                                                  *\n*                                                                     *\n* Usage  Instruction:                                                 *\n*  Make sure NPF is installed and running (both NPF Writer and        *\n*  Queue manager).                                                    *\n*                                                                     *\n*  You should print the dataset with Carriage Control attributes      *\n*  i.e. FBA, VBA datasets.                                            *\n*                                                                     *\n*  Sample JCL to print the data set                                   *\n* //PRINT   EXEC PGM=IEBGENER                                         *\n* //SYSPRINT  DD SYSOUT=*                                             *\n* //SYSOUT    DD SYSOUT=*                                             *\n* //SYSUT1    DD DISP=SHR,DSN=SP2487.TEMP                             *\n* //SYSUT2    DD SYSOUT=(A,,LSCC),DEST=VCIT3                          *\n*                                                                     *\n*---------------------------------------------------------------------*\n*        END OF DESCRIPTION OF THE PROGRAM                            *\n***********************************************************************\nEXITNPFR CSECT\nEXITNPFR AMODE ANY\nEXITNPFR RMODE ANY\n* LOCAL CONSTANTS\n         LCLC  &USEBNR,&USECC,&USEPCL,&PCLFORM,&SKIP1FF,&HOSTNAME\n&USEBNR  SETC  '&SYSPARM'(1,1)          FLAG TO USE BANNER\n&USECC   SETC  '&SYSPARM'(3,1)          FLAG TO USE CARRIAGE CONTROL\n&USEPCL  SETC  '&SYSPARM'(5,1)          FLAG TO INSERT PCL COMMANDS\n&SKIP1FF SETC  '&SYSPARM'(7,1)          FLAG TO SKIP FIRST FORM-FEED\n&PCLFORM SETC  '&SYSPARM'(9,4)          THE PCL FORM NAME\n&HOSTNAME SETC '&SYSPARM'(14,44)        THE HOST NAME OF SYSTEM\n***********************************************************************\n* COMPILE STAGE SYSPARM SYNTAX CHECKING\n***********************************************************************\n         AIF   ('&USEBNR'  NE '1' AND '&USEBNR'  NE '0').ERRBNR,       X\n               ('&USECC'   NE '1' AND '&USECC'   NE '0').ERRCC,        X\n               ('&USEPCL'  NE '1' AND '&USEPCL'  NE '0').ERRPCL1,      X\n               ('&SKIP1FF' NE '1' AND '&SKIP1FF' NE '0').ERR1FF,       X\n               ('&PCLFORM' EQ '    ' AND '&USEPCL' EQ '1').ERRPCL2,    X\n               ('&PCLFORM' EQ 'PT00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'PT01').OKPCLF,                          X\n               ('&PCLFORM' EQ 'PT02').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS01').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LS02').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LG00').OKPCLF,                          X\n               ('&PCLFORM' EQ 'LG01').OKPCLF,                          X\n               ('&PCLFORM' EQ '    ').OKPCLF\n         AGO   .START\n.ERRBNR  MNOTE 12,'Use banner flag (USEBNR=&USEBNR) is not 0 or 1.'\n         AGO   .END\n.ERRCC   MNOTE 12,'Use CC     flag (USECC=&USECC) is not 0 or 1.'\n         AGO   .END\n.ERR1FF  MNOTE 12,'Skip first form feed (&SKIP1FF) is not 0 or 1.'\n         AGO   .END\n.ERRPCL1 MNOTE 12,'Use PCL    flag (USEPCL=&USEPCL) is not 0 or 1.'\n         AGO   .END\n.ERRPCL2 MNOTE 12,'The PCL Form cannot be blank when USEPCL is 1.'\n         AGO   .END\n.ERRPCLF MNOTE 12,'The PCL form (&PCLFORM) is not pre-defined name.'\n         MNOTE 12,'PCL Forms are: PT00,LS00,LG00,LG01 and 4 spaces.'\n         AGO   .END\n.OKPCLF  AGO   .START\n.START   ANOP\n***********************************************************************\n* NORMAL PROCESSING\n***********************************************************************\n*              Registers           entry       EXITNPFR    exit\nR0       EQU   0                   n/a         work        =entry\nR1       EQU   1                   >>IRELIST   work        =entry\nR2       EQU   2                   n/a         work        =entry\nR3       EQU   3                   n/a         work        =entry\nR4       EQU   4                   n/a         work        =entry\nR5       EQU   5                   n/a         work        =entry\nR6       EQU   6                   n/a         work        =entry\nR7       EQU   7                   n/a         work        =entry\nR8       EQU   8                   n/a         >IRXSTATD   =entry\nR9       EQU   9                   n/a         >RTDATA     =entry\nR10      EQU   10                  n/a         >IRELIST    =entry\nR11      EQU   11                  n/a         base 2      =entry\nR12      EQU   12                  n/a         base 1      =entry\nR13      EQU   13                  >callsave   >XPCLSTG    =entry\nR14      EQU   14                  >return     work        =entry\nR15      EQU   15                  >EXITNPFR   retcode     retcode\n         USING EXITNPFR,R15       Establish temporary base register\n         B     XPCL0000           Branch around constants\n         DC    CL23'PROGRAM NAME(EXITNPFR)'      Module identifier\n         DC    CL29'COMPILE TIME(&SYSDATE &SYSTIME)'\n         DC    CL48'NPF Record Exit Program For Network Printers'\n         DC    CL33'SETTINGS: BANNER(&USEBNR) CC(&USECC) PCL(&USEPCL)'\n         DC    CL25'SKIP1FF(&SKIP1FF) PCLFORM(&PCLFORM)'\n         DC    CL55'HOSTNAME(&HOSTNAME)'\n         DC    CL48'Design: Hunter Zhou, zhough2000@yahoo.com    '\nXPCLASE2 DC    A(EXITNPFR+4096)   Second base register if needed\nXPCL0000 DS    0H\n         STM   R14,R12,12(R13)    Save caller's registers\n         LR    R12,R15            Change base registers\n         DROP  R15                Tell assembler\n         USING EXITNPFR,R12,R11\n         L     R11,XPCLASE2       Establish second base register\n         L     R10,0(R1)          Get address of exit parameter list\n         USING IRELIST,R10        Make exit parameter list addressable\n         L     R9,IRERTD          Get address of routing data area\n         USING RTDATA,R9          Make routing data area addressable\n         L     R8,IRESTRG         Get address of IRE static memory\n         USING IRXSTATD,R8        Make IRE static storage addressable\n         ICM   R1,15,IRXDSTGA     Get address of IRE dynamic storage\n         BNZ   XPCL0020           Storage has already been allocated\n         GETMAIN RC,LV=STGLEN,LOC=BELOW   Get program storage\n         LTR   R15,R15            Did GETMAIN work?\n         BZ    XPCL0010           Yes\n         WTO   'EXITNPFR GETMAIN FAILED!'\n         LA    R15,8              No,  show error\n         B     RET00010           Return to NPF\nXPCL0010 DS    0H\n         ST    R1,IRXDSTGA        Save dynamic storage address\nXPCL0020 DS    0H\n         ST    R1,8(0,R13)        Complete save area pointers\n         ST    R13,4(0,R1)\n         LR    R13,R1             Point to dynamic storage area\n         USING XPCLSTG,R13        Tell assembler\n         USING RECSTG,XPCLSTG+XPCLSTGL Tell assembler\n         CLC   RTFUNCTN(4),=CL8'OPEN' Is this OPEN call?\n         BE    OPN00000           Yes\n         CLC   RTFUNCTN(3),=CL8'PUT'  Is this PUT call?\n         BE    PUT00000           Yes\n         CLC   RTFUNCTN(5),=CL8'CLOSE' Is this CLOSE call?\n         BE    CLS00000           Yes\n         CLC   RTFUNCTN(7),=CL8'RELEASE' Is this RELEASE call?\n         BE    REL00000           Yes\n         CLC   RTFUNCTN(4),=CL8'TERM' Is this TERM call?\n         BE    TRM00000           Yes\n         WTO   'EXITNPFR UNKNOWN FUNCTION'\n         LA    R15,4              Bad function, show error\n         B     RET00000           Return to NPF\n*---------------------------------------------------------------------*\n*        Process OPEN call\n*---------------------------------------------------------------------*\nOPN00000 DS    0H\n         MVI   IRXFLAG,IRX1STR    Set flag for READ FIRST RECORD\n         MVI   CCMODE,CCMODASA    DEFAULT IS ASA CARRIAGE CONTROL MODE\n         XC    BNRLNCTR,BNRLNCTR  RESET SET BANNER LINE COUNTER\n         MVI   BNRBFEOF,NO        SET BANNER LAST LINE TO NO.\n         MVI   PCLFLAG,PCLINIT    SET PCL FLAG TO INIT\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*        Process PUT call\n*---------------------------------------------------------------------*\n* PROCESSING STEPS:\n* 1. INIT\n*    R2: CURRENT LOCATION OF TARGET RECORD BUFFER\n*    R3: CURRENT LOCATION OF SOURCE RECORD\n*    R4: WORK\n*    R5: MVCREC: LENGTH OF BYTES TO BE COPIED\n*    R5:  TRREC: LENGTH OF BYTES TO BE COPIED\n*    R6: MVCREC: TARGET ADDRESS TO BE COPIED TO\n*    R6:  TRREC: TARGET ADDRESS TO BE TRANSLATED\n*    R7: MVCREC: SOURCE ADDRESS TO BE COPIED FROM\n*    R7:  TRREC: ADDRESS OF TRANSLATION TABLE\n*\n* 2. SAVE AND TEST RECORD INFO: RECORD TYPE AND RECORD LENGTH\n*\n* 3. TEST RECORD FORMAT\n*   FOR VARIABLE LENGTH: R2 += 4; R3 += 4\n*\n* 4. TEST FIRST RECORD?\n*    YES: A. INSERT PCL COMMAND\n*         B. CHANGE THE CARIAGE CONTROL COMMAND AS FOLLOWS:\n*            '1' TO '+': FORM FEED TO OVERSTRIKE\n*            ' ' TO '+': SINGLE SPACE TO OVERSTRIKE\n*            '0' TO ' ': DOUBLE SPACE TO SIGNLE SPACE\n*            '-' TO '0': TRIPLE SPACE TO BDOUBLE SPACE\n* 5. INSERT CARRIAGE COMMAND AS FOLLOW:\n*    '1': ADD CRLF(X'0D25') AND FORM FEED BYTE (X'0C), R2 += 3\n*    ' ': ADD ONE CRLF (X'0D25')     R2 += 2\n*    '0': ADD TWO CRLF               R2 += 4\n*    '-': ADD THREE CRLF             R2 += 6\n* 6. COPY THE RECORD DATA FROM SOURCE TO TARGET RECORD\n*    SKIP THE FIRST CC BYTE          R2 += (RECLEN-1)\n*\n* 7. UPDATE VARIABLE HEADER 4 BYTES IF IT'S VARIABLE FORMAT\n*\n* 8. SAVE THE RECORD LENGTH TO RECLEN\n*\n* 9. TRANSLATE THE DATA PART IN TARGET RECORD INTO ASCII\n*\n*10. TELL NPF:\n*   . NOT SAVE THE CURRENT RECORD\n*   . INSERT A NEW RECORD (JUST GENERATED) IN NEXT CONTROL RETURN\n******************************************************************\nPUT00000 DS    0H\n*------PROCESS BANNER PAGE ---------------------------------------\n         CLI   IRXFLAG,IRX1STR    IS THIS THE FIRST TIME CALL?\n         BNE   PUT00100           NO, PROCESS NEXT STEP\n         CLI   USEBNR,YES         INSERT BANNER PAGE\n         BE    BNR00000           YES, PROCESS GENERATE BANNER PAGE\n         MVI   IRXFLAG,IRX1STP    UPDATE THE IRX FLAG TO IRX1STP\n*------PROCESS PCL COMMAND----------------------------------------\nPUT00100 DS    0H\n         CLI   IRXFLAG,IRX1STP    TIME TO PROCESS PCL COMMAND?\n         BNE   PUT00800           NO, SKIP THE PCL PROCESS\n         BAL   R4,INSPCL          CALL INSERT PCL COMMAND\n         B     RET00000           RETURN TO NPF IF PCL CMD INSERTED.\n*------PROCESS INPUT RECORDS -------------------------------------\nPUT00800 DS    0H\n         CLI   IRXFLAG,IRXNXTI    INSERT THE NEXT RECORD?\n         BE    PUT04000           YES, CALL INSERT RECORD\n* READ RECORD INFO\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R2,RECORD          LOAD THE TARGET RECORD ADDR\n         L     R3,IREBPTR         LOAD THE SOURCE RECORD ADDR\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   PUT01000           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD FORMAT\n         LA    R2,4(0,R2)         SKIP THE TARGET VB RECORD HEADER\n         LA    R3,4(0,R3)         SKIP THE SOURCE VB RECORD HEADER\n* BEGIN TO PROCESS THE RECORD\nPUT01000 DS    0H\n         CLI   USECC,YES          REQUIRE TO TRANSLATE CC BYTE?\n         BE    PUT01100           YES, JUMP TO PROCESS CC\n*---------------------------------------------------------------------*\n* PROCESS NON-CC RECORDS\n*---------------------------------------------------------------------*\n         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC\n         LR    R7,R3              LOAD THE START OF SORUCE RECORD\n         L     R5,RECLEN          LOAD THE RECORD LENGTH\n         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2\n         BCTR  R5,0\n         EX    R5,MVCREC          COPY THE RECORD\n         MVC   0(2,R2),CRLF       COPY CRLF\n         LA    R2,2(0,R2)         UPDATE THE CURRENT POSITION\n         B     PUT01600\n*--------------------------------------------------------------------\n* PROCESS CC RECORD: ASA CC AND MC MODE\n*--------------------------------------------------------------------\nPUT01100 DS    0H\n         MVI   COPYREC,YES        DEFAULT IS TO COPY THE SOURCE RECORD\n         MVC   CCBYTE(1),0(R3)    SAVE THE CARRIAGE CONTROL BYTE\n*--------------------------------------------------------------------\n* PROCESS THE FIRST RECORD WITH MACHINE CODES\n*--------------------------------------------------------------------\n         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?\n         BNE   PUT01200           NO, PROCESS NEXT NON-FIRST RECORD\n         CLI   0(R3),MCTPFF       IS THIS MACHINE CODE BYTE X'8B'?\n         BNE   PUT01300           CONTINUE IN ASA MODE\n* PROCESS MACHINE CODE MODE\n         MVI   CCMODE,CCMODMC     SET MACHINE CODE CARRIAGE MODE\n         MVI   CCBYTESV,MCTPFF    SAVE CCBYTE(FF) TO CCBYTESV\n         MVI   IRXFLAG,IRX1STM    SET THE FLAG TO FIRST MC RECORD\n         MVI   IRERFLG,X'00'      Tell NPF to READ NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n* PROCESS NON-FIRST RECORDS\n*---------------------------------------------------------------------*\nPUT01200 DS    0H\n         CLI   CCMODE,CCMODMC     IS THIS MC MODE?\n         BNE   PUT01300           NO, CONTINUE TO PROCESS\n* SWITCH CCBYTE AND CCBYTESV\n         MVC   CCBYTETM(1),CCBYTE\n         MVC   CCBYTE(1),CCBYTESV\n         MVC   CCBYTESV(1),CCBYTETM\n*---------------------------------------------------------------------*\n* PROCESS ALL CC RECORDS\n*---------------------------------------------------------------------*\nPUT01300 EQU   *\n         BAL   R4,INSERTCC        INSERT CARRIAGE CONTROL COMMANDS\n*---------------------------------------------------------------------*\n* COPY THE RECORD FROM SOURCE FOR CC RECORDS\n*---------------------------------------------------------------------*\n         CLI   COPYREC,YES        NEED TO COPY THE RECORD?\n         BNE   PUT01600           NO, SKIP TO COPY IT\n         LR    R6,R2              LOAD CURRENT POSITION OF TARGET REC\n         LR    R7,R3              LOAD THE START OF SORUCE RECORD\n         L     R5,IREDLEN         LOAD THE RECORD LENGTH\n         LA    R7,1(0,R7)         SKIP THE FIRST CC BYTE\n         BCTR  R5,0               SKIP THE FIRST CC BYTE IN LENGTH\n         AR    R2,R5              UPDATE THE CURRENT POSITION IN R2\n         BCTR  R5,0\n         EX    R5,MVCREC          COPY THE RECORD\n*---------------------------------------------------------------------*\n* UPDATE THE VARIABLE RECORD HEADER\n*---------------------------------------------------------------------*\nPUT01600 BAL   R4,UPDREC          UPDATE THE RECORD\n*---------------------------------------------------------------------*\n*TELL NPF OF NEXT ACTION\n*---------------------------------------------------------------------*\nPUT01800 DS    0H\n         L     R5,RECLEN          LOAD THE RECORD LENGTH\n         LTR   R5,R5              RECORD LENGTH IS 0?\n         BZ    PUT01850\n         MVI   IRXFLAG,IRXNXTI    SET THE FLAG TO INSERT NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'01'      Tell NPF to INSERT NEXT RECORD\n         B     PUT01900\n* IF THE RECORD LENGTH IS 0, THEN READ THE NEXT RECORD, AND DO NOT\n* WRITE CURRENT EMPTY RECORD.\nPUT01850 EQU   *\n         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO INSERT NEXT RECORD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'00'      Tell NPF to INSERT NEXT RECORD\nPUT01900 XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*Process inserting next record\n*---------------------------------------------------------------------*\nPUT04000 DS    0H\n*SAVE THE RECORD\n         LA    R6,RECORD\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN\n         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE\n*TELL NPF OF NEXT ACTION\n         MVI   IRXFLAG,IRXNXTR    SET THE FLAG TO READ NEXT RECORD\n         MVI   IREWFLG,X'00'      Write this new record\n         MVI   IRERFLG,X'00'      Tell NPF to read NEXT record\n         XR    R15,R15            Zero return code\n         B     RET00000           Go return to NPF\n*---------------------------------------------------------------------*\n*        Process CLOSE call\n*---------------------------------------------------------------------*\nCLS00000 DS    0H\n         MVI   IREWFLG,X'01'      No record to write\n         MVI   IRERFLG,X'00'      Normal return from CLOSE\n         XR    R15,R15            Zero return code\n         B     RET00000\n*---------------------------------------------------------------------*\n*        Process RELEASE or TERM call\n*---------------------------------------------------------------------*\nREL00000 DS    0H\nTRM00000 DS    0H\n         LR    R1,R13             Get address of dynamic storage\n         L     R13,SAVEAREA+4     Get address of caller's save area\n         FREEMAIN RU,LV=STGLEN,A=(R1) Free dynamic storage\n         XR    R15,R15            Zero return code\n         B     RET00010\n\n*---------------------------------------------------------------------*\n*        Return to NPF\n*---------------------------------------------------------------------*\nRET00000 DS    0H                 Switch back to caller's save area\n         L     R13,SAVEAREA+4     Return to caller\nRET00010 DS    0H                 Already back to caller's save area\n         ST    R15,16(R13)        Set return code in saved R15\n         LM    R14,R12,12(R13)    Restore caller's registers\n         BSM   0,R14\n*---------------------------------------------------------------------*\n*                     PRINT BANNER PAGE                               *\n*---------------------------------------------------------------------*\n* PROGRAM LOGIC:                                                      *\n* WHEN TO PRINT THE BANNGER PAGE:                                     *\n*  .WHEN IRXFLAG IS IRX1STR                                           *\n*  .WHEN BNRPOS-BNRBUF < BNRBFLEN                                     *\n* WHEN TO BRANCH:                                                     *\n*  .WHEN IRXFLAG IS IRX1STR                                           *\n* WHEN TO STOP PRINT BANNGER PAGE AND CHANGE THE STATUS:              *\n*  .WHEN BNRPOS-BNRBUF >= BNRBFLEN                                    *\n*  .CHANGE STATUS OF IRXFLAG TO IRX1STP                               *\n*                                                                     *\n* STEP 1. IF BNRLNCTR==0, THEN GET FIELD INFOMRATION:                 *\n*  . READ RECORD INFORMATION                                          *\n*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *\n*  . FILL THE FIELDS WITH SPACES                                      *\n*  . FILL THE FIELDS FROM JSPA AND NPF RTD                            *\n*  . FILL THE TIME AND DATE FIELD FROM TIME MACRO AND EDIT            *\n*  . TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL           *\n*                                                                     *\n* STEP 2. NORMAL PROCESSING (WHEN NPF RETURN CONTROL)                 *\n*  . COPY RECORD FROM BANNER TABLE TO WORK RECORD BUFFER              *\n*  . COPY THE FIELD VALUE TO WORK RECORD BUFFER                       *\n*  . UPDATE RECORD LENGTH AND VARIABLE RECORD HEADER                  *\n*  . TRANSLATE THE RECORD DATA INTO ASCII                             *\n*  . UPDATE THE NPF FIELD TO SAVE CURRENT WORK RECORD                 *\n*  . UPDATE THE FLAGS (BNRBFPOS, BNRLNCTR)                            *\n*                                                                     *\n* STEP 3. TEST IF THE LAST BANNER RECORD REACHED.                     *\n*  . IF YES, UPDATE THE STATUS OF IRXFLAG TO IRX1STP                  *\n*            TELL NPF TO WRITE CURRENT RECORD                         *\n*            TELL NPF TO READ THE FIRST RECORD ON SOURCE FILE         *\n*  . IF NO,  TELL NPF TO WRITE CURRENT RECORD                         *\n*            TELL NPF TO INSERT A RECORD ON NEXT RETURN CONTROL       *\n*                                                                     *\n* STEP 4. RETURN THE CONTROL BACK TO NPF                              *\n***********************************************************************\nBNR00000 DS    0H                 PRINT BANNER PAGE\n* MAIN BRANCH\n         CLI   BNRLNCTR,X'00'     IS THIS FIRST TIME TO CALL BANNER?\n         BNE   BNR02000           NO, CONTINUE TO PROCESS\n*-------------------------------------------------------------------*\n* BANNER INITIALIZATION\n* READ INFORMATION OF BANNER FIELDS.\n*    A. READ JES2 JOB INFORMATION IN JSPA DSECT                       *\n*    B. READ PRINTER DEFINITION IN RDT                                *\n*    C. GET CURRENT TIME AND DATE                                     *\n*-------------------------------------------------------------------*\nBNR01000 DS    0H\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R6,BNRBUF          LOAD THE START OF BANNER BUFFER\n         ST    R6,BNRBFPOS        SAVE THE CURRENT POSITION OF LINES\n         MVI   BNRLNCTR,X'01'     LOAD THE LINE COUNTER BY 1\n* INIT ALL FIELDS WITH SPACE\n         LA    R5,BNRFDLEN        LOAD THE LENGTH OF FIELD INTO R5\n         BCTR  R5,0\n         BCTR  R5,0\n         MVC   BNRPNTR(44),BNRPNTRC COPY THE MODEL FOR PRINTER NAME\n         LA    R6,BNRUSER         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRJBNM         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRDSSN         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRDDNM         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         LA    R6,BNRTIME         FILL FIELD WITH SPACES\n         BAL   R4,RESTFLD         CALL THE RESET FIELD ROUTINE\n         MVC   0(DATEPTNL,R6),DATEPTN   COPY EDIT PATTERN\n* COPY JSPA\n         L     R2,IRECPAD         LOAD THE JES/VTAM PARAMETER AREA\n         L     R2,0(R2)           LOAD THE ADDRESS OF GETDS AREA\n         USING GDSPARM,R2         ADDRESSABILITY FOR GDSPARM\n         L     R3,GDSJSPA         LOAD THE JSPA AREA\n         USING JSPA,R3            ADDRESSABILITY FOR JSPA\n         LH    R4,JSPALEN         LOAD THE JSPA LENGTH\n         AR    R4,R3              MOVE TO THE EXTENTION OF JSPA\n         USING JSPEXT,R4          ADDRESSABILITY OF JPSAEXT\n         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME\n         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME\n         MVI   8(R6),C'/'         JOBNAME/JOBID SEPARATER\n         MVC   9(8,R6),JSPAJBID   COPY THE JOBID\n         LA    R6,BNRJBNM         LOAD ADDRESS OF JOBNAME\n         MVC   0(8,R6),JSPAJBNM   COPY THE JOBNAME\n         LA    R6,BNRUSER         LOAD THE USERID FIELD\n         MVC   0(8,R6),JSPCEUID   COPY THE USERID\n         MVI   8(R6),C'/'\n         MVC   9(20,R6),JSPJPNAM  COPY THE PROGRAMMER NAME\n         LA    R6,BNRDDNM\n         MVC   0(8,R6),JSPJDSDD   COPY THE DD NAME\n         LA    R6,BNRDSSN\n         MVC   0(8,R6),JSPJDSSN   COPY THE STEP NAME\n         LA    R6,BNRDEST\n         MVC   0(8,R6),RTDAMAJK   COPY MAJOR ROUTING KEY FOR DEST\n         LA    R7,RTDAMINK        MINOR ROUTING KEY (CLASS + FORM)\n         LA    R6,BNRCLAS\n         MVC   0(1,R6),0(R7)      COPY THE SYSOUT CLASS\n         LA    R6,BNRFORM\n         MVC   0(4,R6),1(R7)      COPY THE FORM NAME\n         DROP  R2,R3,R4\n* UPDATE TIME AND DATE\n         TIME  DEC,DATESAVE,LINKAGE=SYSTEM,  GET TIME/DATE AT DATAAREA X\n               MF=(E,TIMELST),DATETYPE=YYYYMMDD\n*        MACDATE  09/08/99\n         LA    R6,BNRTIME         LOAD THE TIME FIELD\n         LA    R7,DATEAREA        LOAD THE DATA AREA (16 BYTES)\n         MVI   0(R7),X'01'        SAVE X'01' for significant lead 0\n         ED    0(9,R6),0(R7)      EDIT TIME\n         ED    9(12,R6),9(R7)     EDIT DATE\n         MVC   0(20,R6),4(R6)     SHIFT TIME FIELD TO LEFT BY 4 BYTES\n* TELL NPF TO INSERT A NEW RECORD ON NEXT RETURN CONTROL\n         MVI   IREWFLG,X'01'      Not Write CURRENT record\n         MVI   IRERFLG,X'01'      Tell NPF to insert new record NEXT\n         B     BNR04000           JUMP TO NORMAL PROCESSING\n*-------------------------------------------------------------------*\n* BANNER PAGE NORMAL PROCESSING\n*-------------------------------------------------------------------*\nBNR02000 DS    0H\n         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR02100           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD FORMAT\n         LA    R6,4(0,R6)         SKIP THE VB RECORD HEADER\n* COPY THE RECORD FROM BNRBUF TO RECORD\nBNR02100 DS    0H\n         LA    R5,BNRRCLEN\n         BCTR  R5,0\n         L     R7,BNRBFPOS           LOAD CURRENT POSITION\n         EX    R5,MVCREC             COPY CURRENT RECORD TO TARGET\n         LA    R7,BNRRCLEN(0,R6)     LOAD THE LAST POSITION TO R7\n         MVC   0(2,R7),CRLF          COPY THE CRLF TO THE END\n* PROCESS THE FIELD VALUES\nBNR02200 DS    0H\n         LA    R7,BNRLNCTR           LOAD THE LINE COUNTER\n         CLI   0(R7),BNRHOSTL        IS THIS A HOST NAME LINE?\n         BE    BNR02210\n         CLI   0(R7),BNRPNTRL        IS THIS A PRINT NAME LINE?\n         BE    BNR02220\n         CLI   0(R7),BNRUSERL        IS THIS A USERID    LINE?\n         BE    BNR02230\n         CLI   0(R7),BNRDSSNL        IS THIS A STEP NAME LINE?\n         BE    BNR02240\n         CLI   0(R7),BNRDDNML        IS THIS A DD   NAME LINE?\n         BE    BNR02250\n         CLI   0(R7),BNRJBNML        IS THIS A JOB  NAME LINE?\n         BE    BNR02260\n         CLI   0(R7),BNRTIMEL        IS THIS A TIME&DATE LINE?\n         BE    BNR02270\n* NORMAL CONSTANT FIELD\n         B     BNR03000\n* PROCESS HOST NAME FIELD\nBNR02210 LA    R7,BNRHOST              LOAD THE HOST NAME TO BE COPIED\n         B     BNR02500\nBNR02220 LA    R7,BNRPNTR              LOAD THE PRINTNAME TO BE COPIED\n         B     BNR02500\nBNR02230 LA    R7,BNRUSER              LOAD THE USER NAME TO BE COPIED\n         B     BNR02500\nBNR02240 LA    R7,BNRDSSN              LOAD THE STEP NAME TO BE COPIED\n         B     BNR02500\nBNR02250 LA    R7,BNRDDNM              LOAD THE DD   NAME TO BE COPIED\n         B     BNR02500\nBNR02260 LA    R7,BNRJBNM              LOAD THE JOB  NAME TO BE COPIED\n         B     BNR02500\nBNR02270 LA    R7,BNRTIME              LOAD THE TIME&DATE TO BE COPIED\n         B     BNR02500\n* COPY THE FIELD\nBNR02500 DS    0H\n         LA    R6,BNRFDBYT(0,R6)       MOVE TO FIELD POSITION\n         LA    R5,BNRFDLEN             LOAD THE FIELD LENGTH\n         BCTR  R5,0\n         EX    R5,MVCREC\nBNR03000 DS    0H\n* INCREASE THE LINE COUNTER BY 1\n         XR    R6,R6\n         IC    R6,BNRLNCTR             LOAD THE COUNTER\n         LA    R6,1(0,R6)              ADD THE COUNTER BY 1\n         STC   R6,BNRLNCTR             SAVE THE COUNTER\n* UPDATE THE RECORD LENGTH FOR NORMAL RECORDS\n         LA    R5,BNRRCLEN+2           RECORD LENGTH: ADD 2 BYTES CRLF\n         ST    R5,RECLEN               SAVE RECORD LENGTH\n* UPDATE THE CURRENT LOCATION\n         L     R7,BNRBFPOS             LOAD THE CURRENT POSITION\n         LA    R7,BNRRCLEN(0,R7)       UPDATE THE CURRENT POSITION\n         ST    R7,BNRBFPOS             SAVE THE CURRENT POSITION\n         LA    R6,BNRBFEND             LOAD THE END POSITION\n* TEST IF THE LAST RECORD REACHED.\n         CR    R7,R6                   REACH AT THE END OF BUFFER?\n         BL    BNR03100                NO, CONTINUE TO PROCESS\n* PROCESS THE LAST LINE IN BANNER PAGE\n         MVI   BNRBFEOF,YES            SET LAST LINE FLAG TO YES\n         LA    R6,RECORD\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR03050           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         LA    R6,4(0,R6)         ADD THE RECORD LENGTH BY 4\nBNR03050 DS    0H\n         MVI   BNRRCLEN+2(R6),FF       SAVE FORM FEED\n         LA    R5,1(0,R5)              ADD RECORD LENGTH BY 1 (FF)\n         ST    R5,RECLEN               CRLF=2 BYTES, FF=1 BYTE\nBNR03100 DS    0H\n         LA    R6,RECORD\n* UPDATE RECORD LENGTH: R5: RECORD LENGTH, R6: RECORD ADDRESS\n* UPDATE THE VARIABLE RECORD HEADER\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   BNR03200           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         LA    R7,4(0,R5)         ADD THE RECORD LENGTH BY 4\n         ST    R7,RECLEN          SAVE RECORD LENGTH IN RECLEN\n         STH   R7,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES\n         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'\n         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'\n         LA    R6,4(0,R6)         MOVE THE R6 TO DATA FOR TR\n* TRANSLATE THE RECORD INTO ASCII\nBNR03200 DS    0H\n         BCTR  R5,0\n         LA    R7,E2ATAB\n         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII\nBNR03400 DS    0H\n* SAVE THE RECORD INFO FOR NPF TO PUT\n         LA    R6,RECORD          LOAD RECORD ADDRESS\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         L     R6,RECLEN          LOAD THE RECORD LENGTH\n         ST    R6,IREDLEN         SAVE RECORD LENGTH TO IREDLEN\n* UPDATE & TEST THE CURRENT LOCATION\n         CLI   BNRBFEOF,YES       LOAD THE EOF FLAG ADDRESS\n         BNE   BNR03500                NO, CONTINUE TO PROCESS\n* IF LAST RECORD, UPDATE THE STATUS OF IRXFLAG TO IRX1STP\n* REACH AT THE END OF BANNER BUFFER\n         MVI   IRXFLAG,IRX1STP         UPDATE THE IRX FLAG TO IRX1STP\n         MVI   IREWFLG,X'00'           Write this record\n         MVI   IRERFLG,X'02'           Tell NPF to read FIRST RECORD\n         B     BNR04000\n* NOT REACH AT THE END OF BANNER BUFFER\nBNR03500 DS    0H\n         MVI   IREWFLG,X'00'           Write this record\n         MVI   IRERFLG,X'01'           Tell NPF to INSERT NEXT RECORD\nBNR04000 DS    0H\n         XR    R15,R15                 Zero return code\n         B     RET00000\n***********************************************************************\n*---------------------------------------------------------------------*\n* ROUTINE: RESTFLD\n* PURPOSE: FILL OUT THE FIELD WITH SPACES\n* INPUT  :\n*    R4: RETURN CONTROL\n*    R5: THE LENGTH OF THE FIELD - 2\n*    R6: THE START POSITION OF THE FIELD\n***********************************************************************\nRESTFLD  EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         LR    R7,R6\n         LA    R6,1(0,R6)\n         MVI   0(R7),C' '\n         EX    R5,MVCREC\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: INSERTCC\n* PURPOSE: INSERT CARRIAGE CONTROL CODE BYTE TO OUTPUT RECORD\n* INPUT  :\n*    R2: THE START POSITION OF OUTPUT RECORD\n*    R4: RETURN CONTROL\n* OUTPUT :\n*    R6: WORK\n* STEPS:\n***********************************************************************\n*---------------------------------------------------------------------*\n***********************************************************************\nINSERTCC EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         CLI   IRXFLAG,IRX1STI    IS THIS READ THE FIRST RECORD?\n         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED\n         CLI   IRXFLAG,IRX1STM    IS THIS READ THE FIRST RECORD OF MC?\n         BE    INC01000           YES PROCESS SKIP FIRST FORM-FEED\n         B     INC05000\n* PROCESS SKIP THE FIRST FORM-FEED BYTE\nINC01000 EQU   *\n         CLI   SKIP1FF,YES        SKIP FIRST FORM-FEED?\n         BE    INC08000           YES, SKIP TO INSERT THE CC BYTE\n         MVI   0(R2),FF           SET THE FIRST FORM-FEED WITHOUT CRLF\n         LA    R2,1(0,R2)         MOVE R2 TO NEW START POSITION\n         B     INC08000           SKIP TO SCAN THE TABLE\n* INSERT ASCII CC\nINC05000 LA    R6,CCBYTE          LOAD CCBYTE\n         BAL   R4,FINDCC          LOAD THE RECORD INTO R7\n* INSERT THE ASCII CONTROL BYTES\n         LR    R6,R2              LOAD THE TARGET RECORD ADDRESS\n         LH    R5,0(R7)           LOAD THE RECORD LENGTH\n         LA    R7,4(0,R7)         SKIP THE LENGTH AND CONTROL BYTE\n         BCTR  R5,0\n         BCTR  R5,0\n         BCTR  R5,0\n         BCTR  R5,0\n         LTR   R5,R5              IS INSERT BYTES ZERO? OVERSTRIKE?\n         BZ    INC09000           YES, DO NOTHING\n         AR    R2,R5              MOVE THE TARGET ADDRESS TO NEW ADDR.\n         BCTR  R5,0               DECREASE R5 BY 1 FOR MVC\n         EX    R5,MVCREC          COPY THE ASCII BYTES TO TARGET\nINC08000 EQU   *\n* GET THE COPY RECORD FLAG USING CCBYTESV\n         LA    R6,CCBYTESV        LOAD CCBYTESV\n         BAL   R4,FINDCC          LOAD THE RECORD INTO R7\n         MVC   COPYREC(1),3(R7)   COPY THE SAVE SOURCE RECORD TAG\nINC09000 EQU   *\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: FINDCC\n* PURPOSE: FIND CARRIAGE CONTROL CODE BYTE IN THE TABLE\n* INPUT  :\n*    R6: START POSITION OF CCBYTE\n*    R4: RETURN CONTROL\n* OUTPUT :\n*    R5: WORK\n*    R7: START POSITION OF THE RECORD RELATED TO THIS CC BYTE\n* STEPS:\n***********************************************************************\n*---------------------------------------------------------------------*\n***********************************************************************\nFINDCC   EQU   *\n         ST    R4,SAVERTN2\n         LA    R7,CCATAB          LOAD ASA TRANSLATION TABLE\n         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?\n         BNE   FNC01000           NO, CONTINUE\n         LA    R7,CCMTAB          LOAD MC TRANSLATION TABLE\nFNC01000 EQU   *\n         L     R4,0(R7)           GET THE TABLE LENGTH\n         AR    R4,R7              MOVE TO THE END OF THE TABLE\n         LA    R7,4(0,R7)         MOVE TO THE FIRST RECORD\nFNC01100 EQU   *                  BEGIN LOOP\n         LH    R5,0(R7)           LOAD THE RECORD LENGTH\n         CLC   0(1,R6),2(R7)      IS THIS THE RIGHT CC BYTE?\n         BE    FNC02000           YES, PROCESS THE INSERT\n         AR    R7,R5              MOVE TO THE NEXT RECORD\n         CR    R7,R4              REACH AT THE END OF TABLE?\n         BL    FNC01100           NO, PROCESS NEXT RECORD\n* IF NOT FIND, GET THE FIRST RECORD AS DEFAULT\n         LA    R7,CCATAB+4        LOAD ASA TRANSLATION TABLE\n         CLI   CCMODE,CCMODMC     IS MACHINE CODE MODE?\n         BNE   FNC02000           NO, CONTINUE\n         LA    R7,CCMTAB+4        LOAD MC TRANSLATION TABLE\nFNC02000 EQU   *\n         L     R4,SAVERTN2\n         BR    R4\n*---------------------------------------------------------------------*\n* ROUTINE: INSPCL\n* PURPOSE: INSERT PCL COMMAND AT THE BEGINING OF INPUT RECORDS.\n*          IT SHOULD BE BETWEEN BANNER PAGE AND FIRST RECORD\n* INPUT  :\n*    R4: RETURN CONTROL\n*  PCLFORM: THE PREDEFINED FORM NAME\n* OUTPUT :\n*    R4: WORK\n*    R5: WORK\n*    R6: WORK\n*    R7: WORK\n***********************************************************************\n*---------------------------------------------------------------------*\nINSPCL   EQU   *\n         ST    R4,SAVERTN1        SAVE THE CALLER'S ADDRESS\n         CLI   USEPCL,YES         REQUIRE TO INSERT PCL COMMAND?\n         BNE   INP08000           NO, SKIP PCL COMMAND PROCESSING\n         CLI   PCLFLAG,PCLINST    IS THIS FIRST TIME CALL?\n         BE    INP06000           YES, SAVE RECORD\n* PREPARE THE PCL COMMAND IN RECORD FOR THE FIRST TIME CALL.\n* FIND THE GIVEN PCL COMMAND SEQUENCE VIA TABLE PCLTAB\n         MVC   RECFM(1),RTDARTYP  SAVE THE record TYPE\n         MVC   RECLEN(4),IREDLEN  SAVE THE record LENGTH\n         LA    R7,PCLTAB          LOAD THE START OF PCL TABLE\n         L     R5,0(R7)           LOAD THE LENGTH OF PCL TABLE\n         AR    R5,R7              MOVE TO THE END OF THE PCL TABLE\n         LA    R7,4(0,R7)         SKIP THE TABLE LENGTH\nINP01000 DS    0H\n         CLC   PCLFORM(4),0(R7)   IS THIS THE GIVEN FORM?\n         BE    INP02000           YES, PROCESS IT.\n         LA    R7,PCLRECL(0,R7)   MOVE TO THE NEXT RECORD\n         CR    R7,R5              REACH AT THE END OF TABLE?\n         BL    INP01000           NO, TEST THE NEXT RECORD\n* IF THE FORM IS NOT FOUND, USE THE FIRST ONE AS DEFAULT.\n         LA    R7,PCLTAB+4        OTHERWISE USE THE FIRST RECORD AS DEF\nINP02000 DS    0H\n         L     R7,4(R7)           LOAD THE ADDRESS OF PCL COMMAND\n         LH    R5,0(R7)           LOAD THE PCL COMMAND LENGTH\n         LA    R7,2(0,R7)         SKIP THE LENGTH 2 BYTES\n         BCTR  R5,0\n         BCTR  R5,0\n* END OF PCL TABLE SEARCHING: SOURCE IN R7, LENGTH IN R5\n         LR    R2,R5              COPY THE RECORD LENGTH\n         LA    R6,RECORD          LOAD ADDR OF TARGET RECORD\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   INP03000           NO, PROCESS THE FIXED LENGTH RECORD\n         LA    R6,4(0,R6)         SKIP VB HEADER\nINP03000 DS    0H\n         BCTR  R5,0               DECREASE THE PCLLEN BY 1\n         EX    R5,MVCREC          COPY THE PCL COMMAND TO RECORD BUFFER\n         AR    R2,R6              MOVE R2 TO THE LAST BYTE\n         BAL   R4,UPDREC          CALL UPDATE RECORD ROUTINE\n         MVI   PCLFLAG,PCLINST    UPDATE THE STATUS TO INSERT PCL CMD\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'01'      Tell NPF to INSERT A NEW RECORD\n         B     INP09000           END OF RECORD PREPARATION\n* SAVE THE CURRENT RECORD FOR PCLFLAG=PCLINST\nINP06000 DS    0H\n* SAVE THE RECORD INFO FOR NPF TO PUT\n         LA    R6,RECORD\n         ST    R6,IREBPTR         SAVE THE RECORD TO IREBPTR\n         MVC   IREDLEN(4),RECLEN  SAVE RECORD LENGTH TO IREDLEN\n         MVC   RTDARTYP(1),RECFM  SAVE THE record TYPE\n         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI\n         MVI   IREWFLG,X'00'      Write this record\n         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD\n         B     INP09000\n* SKIP PCL COMMAND PROCESSING\nINP08000 DS    0H\n         MVI   IRXFLAG,IRX1STI    UPDATE THE IRX FLAG TO IRX1STI\n         MVI   IREWFLG,X'01'      DO NOT Write this record\n         MVI   IRERFLG,X'02'      Tell NPF to read FIRST RECORD\nINP09000 DS    0H\n         XR    R15,R15            Zero return code\n         L     R4,SAVERTN1\n         BR    R4\n*---------------------------------------------------------------------*\n*---------------------------------------------------------------------*\n* ROUTINE: UPDREC\n* PURPOSE: UPDATE THE RECORD HEADER AND TRANSLATE IT TO ASCII\n*        1. UPDATE RECLEN WITH ACTUAL RECORD LENGTH\n*        2. UPDATE VB RECORD HEADER IF IT'S VB\n*        3. TRANSLATE THE RECORD INTO ASCII\n* INPUT  :\n*    R2: THE LAST POSITION OF TARGET RECORD\n*    R4: RETURN CONTROL\n*  PCLFORM: THE PREDEFINED FORM NAME\n* OUTPUT :\n*    R2: NEW LOCATION OF TARGET RECORD\n*    R5: WORK\n*    R6: WORK\n*    R7: WORK\n* UPDATE THE VARIABLE RECORD HEADER\n*---------------------------------------------------------------------*\nUPDREC   EQU   *\n         ST    R4,SAVERTN2        SAVE THE CALLER'S ADDRESS\n* GET THE RECORD LENGTH IN R5\n         LA    R6,RECORD          LOAD THE START POSITION\n         LR    R5,R2              LOAD THE LAST POSITION IN R5\n         SR    R5,R6              SUBTRACT THEM TO GET THE RECORD LEN\n         ST    R5,RECLEN          SAVE THE CURRENT RECORD LENGTH\n* TEST RECORD FORMAT\n         CLI   RECFM,RECFMVB      IS THIS A VARIABLE RECORD TYPE?\n         BNE   UPD01000           NO, PROCESS THE FIXED LENGTH RECORD\n* PROCESS VARIABLE RECORD HEADER\n         STH   R5,0(R6)           SAVE RECORD LENGTH IN FIRST 2 BYTES\n         MVI   2(R6),X'00'        SET THE THIRD BYTE WITH X'00'\n         MVI   3(R6),X'00'        SET THE FOURTH BYTE WITH X'00'\n         LA    R6,4(0,R6)         MOVE THE R6 TO DATA\n*---------------------------------------------------------------------*\n* TRANSLATE THE RECORD INTO ASCII\n*---------------------------------------------------------------------*\nUPD01000 DS    0H\n         BCTR  R5,0\n         LA    R7,E2ATAB          LOAD THE EBCIDC TO ASCII TABLE\n         EX    R5,TRREC           TRANSLATE THE RECORD INTO ASCII\n         L     R4,SAVERTN2\n         BR    R4\n*---------------------------------------------------------------------*\n*        PROGRAM CONSTANTS DATA AREA\n*---------------------------------------------------------------------*\n         LTORG\n*---------------------------------------------------------------------*\n* CONSTANT TO CONTROL HOW THE PRINT OUTPUT GENERATED\n*---------------------------------------------------------------------*\nPCLFORM  DC    CL4'&PCLFORM'     ; THE FORM NAME\nUSEBNR   DC    X'&USEBNR'        ; FLAG TO INSERT BANNER PAGE OR NOT\nUSEPCL   DC    X'&USEPCL'        ; FLAG TO INSERT PCL COMMAND OR NOT\nUSECC    DC    X'&USECC'         ; FLAG TO CONVERT CARRIAGE CONTROL\nSKIP1FF  DC    X'&SKIP1FF'       ; FLAG TO SKIP FORM FEED OF 1ST RECORD\nYES      EQU   X'1'              ; YES\nNO       EQU   X'0'              ; NO\n*---------------------------------------------------------------------*\nMVCREC   MVC   0(0,R6),0(R7)     ; COPY RECORD FROM R7 to R6,length R5\nTRREC    TR    0(0,R6),0(R7)     ; TRANSLATE FROM R7 to R6,length R5\nCRLF     DC    XL2'0D25'         ; CR-LF IN EBCDIC CODE\nFF       EQU   X'0C'             ; FORM FEED BYTE IN EBCDIC\nMCTPFF   EQU   X'8B'              THE FIRST BYTE OF FIRST MC RECORD\nCCTPFF   EQU   C'1'               CC BYTE '1' FORM FEED\n*---------------------------------------------------------------------*\nCCATAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE\n* ASA CARRIAGE CONTROL BYTES\n* DEFAULT BYTE: CCA1SP: SINGLE RETURN\n         DC    AL4(CCATABL)      TABLE LENGTH\n*              LENGTH       COMMAND WRITE? INSERT ASCII COMMANDS\nCCA1SP   DC    AL2(CCA1SPL),CL1' ',XL1'1',XL2'0D25'\nCCA1SPL  EQU   *-CCA1SP          1 SPACE LINE: CRLF\nCCAAFF   DC    AL2(CCAAFFL),CL1'1',XL1'1',XL3'0D250C'\nCCAAFFL  EQU   *-CCAAFF          ASA FORM FEED: CRLF + FF\nCCA0SP   DC    AL2(CCA0SPL),CL1'+',XL1'1'\nCCA0SPL  EQU   *-CCA0SP          0 SPACE LINE: DO NOTHING\nCCA2SP   DC    AL2(CCA2SPL),CL1'0',XL1'1',XL4'0D250D25'\nCCA2SPL  EQU   *-CCA2SP          1 SPACE LINE: CRLF\nCCA3SP   DC    AL2(CCA3SPL),CL1'-',XL1'1',XL6'0D250D250D25'\nCCA3SPL  EQU   *-CCA3SP          1 SPACE LINE: CRLF\n* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCA1SP\nCCATABL EQU    *-CCATAB         THE LENGTH OF THE TABLE\n*---------------------------------------------------------------------*\nCCMTAB   DS    0F      CARRIAGE CONTROL TO ASCII TRANSLATION TABLE\n* MACHINE CODE CONTROL BYTES (PRINTER CHANNEL COMMANDS)\n* DEFAULT BYTE: CCMWS1L: SINGLE RETURN\n         DC    AL4(CCMTABL)      TABLE LENGTH\n*              LENGTH        COMMAND WRITE? INSERT ASCII COMMANDS\nCCMWS1L  DC    AL2(CCMWS1LL),XL1'09',XL1'1',XL2'0D25'\nCCMWS1LL EQU   *-CCMWS1L         Write and Space 1 line\nCCMWS2L  DC    AL2(CCMWS2LL),XL1'11',XL1'1',XL4'0D250D25'\nCCMWS2LL EQU   *-CCMWS2L         Write and Space 2 lines\nCCMWS3L  DC    AL2(CCMWS3LL),XL1'19',XL1'1',XL6'0D250D250D25'\nCCMWS3LL EQU   *-CCMWS3L         Write and Space 3 lines\nCCMWSC1  DC    AL2(CCMWSC1L),XL1'89',XL1'1',XL4'0D250C'\nCCMWSC1L EQU   *-CCMWSC1         Write and Skip to Channel 1: CRLF + FF\nCCMSP1L  DC    AL2(CCMSP1LL),XL1'0B',XL1'0',XL2'0D25'\nCCMSP1LL EQU   *-CCMSP1L         Space 1 line immidiate\nCCMSP2L  DC    AL2(CCMSP2LL),XL1'13',XL1'0',XL4'0D250D25'\nCCMSP2LL EQU   *-CCMSP2L         Space 2 lines immidiate\nCCMSP3L  DC    AL2(CCMSP3LL),XL1'1B',XL1'0',XL6'0D250D250D25'\nCCMSP3LL EQU   *-CCMSP3L         Space 3 lines immidiate\nCCMSKC1  DC    AL2(CCMSKC1L),XL1'8B',XL1'0',XL1'0C'\nCCMSKC1L EQU   *-CCMSKC1         Skip to Channel 1 Immediate: FORM FEED\n* ALL OTHER CARRIAGE CONTROL BYTES WILL BE TREATED AS CCMSP1L\nCCMTABL EQU    *-CCMTAB         THE LENGTH OF THE TABLE\n*---------------------------------------------------------------------*\n* MACHINE CODE  BYTE  (PRINTER CHANNEL COMMANDS)\n* MACHINE CODE TO CARRIAGE CONTROL TRANSLATION TABLE\n* PRE-DEFINED FORMS OF PCL COMMANDS\nMCTAB    DS    0F                ; FULL WORD ALIGNMENT\n         DC    AL4(MCTABL)       ; LENGTH OF THIS TABLE\nMCTP1SP  DC    X'09',C' '         Write and Space 1 Lines: DEFAULT\nMCRECL   EQU   *-MCTP1SP          RECORD LENGTH\n         DC    X'8B',C'1'         Skip to Channel 1 Immediate:FORM FEED\n         DC    X'89',C'1'         Write and skip to Channel 1:FORM FEED\n         DC    X'11',C'0'         Write and Space 2 Lines\n         DC    X'19',C'-'         Write and Space 3 Lines\n         DC    X'0B',C' '         Space 1 Line Immediate\n         DC    X'13',C'0'         Space 2 Lines Immediate\n         DC    X'1B',C'-'         Space 3 Lines Immediate\n         DC    X'01',C'+'         Write Without Spacing\n* ALL OTHER MACHINE CODE WILL BE TRANSLATED TO CCTP1SP\nMCTABL   EQU   *-MCTAB            TABLE LENGTH\n*---------------------------------------------------------------------*\n* PRE-DEFINED FORMS OF PCL COMMANDS\nPCLTAB   DS    0F                ; FULL WORD ALIGNMENT\n         DC    AL4(PCLTABL)      ; LENGTH OF THIS PCL TABLE\nPCLFPT00 DC    CL4'PT00',AL4(PCLPT00)  PORTRAIT,  DEFATULT PAPER\nPCLRECL  EQU   *-PCLFPT00              RECORD LENGTH\nPCLFPT01 DC    CL4'PT01',AL4(PCLPT01)  PORTRAIT,  DEFATULT PAPER\nPCLFPT02 DC    CL4'PT02',AL4(PCLPT02)  PORTRAIT,  DEFATULT PAPER\nPCLFLS00 DC    CL4'LS00',AL4(PCLLS00)  LANDSCAPE, DEFAULT PAPER\nPCLFLS01 DC    CL4'LS01',AL4(PCLLS01)  LANDSCAPE, DEFAULT PAPER\nPCLFLS02 DC    CL4'LS02',AL4(PCLLS02)  LANDSCAPE, DEFAULT PAPER\nPCLFLG00 DC    CL4'LG00',AL4(PCLLG00)  LANDSCAPE, LEGAL PAPER\nPCLFLG01 DC    CL4'LG01',AL4(PCLLG01)  PORTRAIT,  LEGAL PAPER\nPCLTABL  EQU   *-PCLTAB                THE END OF TABLE\n*---------------------------------------------------------------------*\n* PCL 5 Commands in EBCDIC format\n* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth\nPCLLS00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS00L EQU   *-PCLLS00\n* PCL FORM: PCLCLS01 FOR LANDSCAPE, DEFAULT PAPER, 13 pitch\nPCLLS01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l5.7C'  5.7/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s13H'        Use 13 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS01L EQU   *-PCLLS01\n* PCL FORM: PCLCLS00 FOR LANDSCAPE, DEFAULT PAPER, 14 picth, SIMPLEX\nPCLLS02  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLS02L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',C'(s14H'        Use 15 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLS02L EQU   *-PCLLS02\n* PCL FORM: PCLCLG00 FOR LANDSCAPE, LEGAL   PAPER\nPCLLG00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLG00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l3A'    Select LEGAL paper\n         DC    X'27',X'50',C'l1O'    Select landscape <EC>&l1O\n         DC    X'27',X'50',C'l4.5C'  4.5/48 inch vertical motion index\n         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLG00L EQU   *-PCLLG00\n* PCL FORM: PCLCLG01 FOR PORTRAIT,  LEGAL   PAPER\nPCLLG01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLLG01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l3A'    Select LEGAL paper\n         DC    X'27',X'50',C'l0O'    Select PORTRAIT  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    5/48 inch vertical motion index\n         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLLG01L EQU   *-PCLLG01\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 17 PITCH\nPCLPT00  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT00L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s17H'        Use 17 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT00L EQU   *-PCLPT00\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 14 PITCH\nPCLPT01  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT01L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',X'50',C'l1S'    Duplex, long-side binding\n         DC    X'27',C'(s14H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT01L EQU   *-PCLPT01\n* PCL FORM: PCLCPT00 FOR PORTRAIT,  DEFAULT PAPER, 15 PITCH, SIMPLEX\nPCLPT02  DS    0H                    HP PCL 5 Command sequences\n         DC    AL2(PCLPT02L)         LENGTH OF THIS PCL COMMAND\n         DC    X'27',C'E'            Reset PCL settings\n         DC    X'27',X'50',C'l0O'    Select portrait  <EC>&l0O\n         DC    X'27',X'50',C'l5C'    6x1/48 inch vertical motion index\n         DC    X'27',C'(s17H'        Use 14 pitch (characters / inch)\n         DC    X'27',C'(s0P'         Fixed Spacing\n         DC    X'27',C'(s0S'         Style of upright solid\n         DC    X'27',C'(s0B'         Stroke Weight: Medium, Book Text\nPCLPT02L EQU   *-PCLPT02\n*---------------------------------------------------------------------*\n*EBCDIC-to-ASCII table for Canadian Bilingual CECP Code Page 037\n*\n*             000102030405060708090A0B0C0D0E0F\nE2ATAB   DS 0CL256\n         DC X'00010203DC09C37FCAB2D50B0C0D0E0F'  ; EBCDIC TO ASCII\n         DC X'10111213DBDA08C11819C8F21C1D1E1F'  ; EBCDIC TO ASCII\n         DC X'C4B3C0D9BF0A171BB4C2C5B0B1050607'  ; EBCDIC TO ASCII\n         DC X'CDBA16BCBBC9CC04B9CBCEDF1415FE1A'  ; EBCDIC TO ASCII\n         DC X'20FF838485A0C68687A4BD2E3C282B7C'  ; EBCDIC TO ASCII\n         DC X'268288898AA18C8B8DE121242A293BAA'  ; EBCDIC TO ASCII\n         DC X'2D2FB68EB7B5C78F80A5DD2C255F3E3F'  ; EBCDIC TO ASCII\n         DC X'9B90D2D3D4D6D7D8DE603A2340273D22'  ; EBCDIC TO ASCII\n         DC X'9D616263646566676869AEAFD0ECE7F1'  ; EBCDIC TO ASCII\n         DC X'F86A6B6C6D6E6F707172A6A791F792CF'  ; EBCDIC TO ASCII\n         DC X'E67E737475767778797AADA8D1EDE8A9'  ; EBCDIC TO ASCII\n         DC X'5E9CBEFAB8F5F4ACABF35B5DEEF9EF9E'  ; EBCDIC TO ASCII\n         DC X'7B414243444546474849F0939495A2E4'  ; EBCDIC TO ASCII\n         DC X'7D4A4B4C4D4E4F505152FB968197A398'  ; EBCDIC TO ASCII\n         DC X'5CF6535455565758595AFDE299E3E0E5'  ; EBCDIC TO ASCII\n         DC X'30313233343536373839FCEA9AEBE99F'  ; EBCDIC TO ASCII\n* BANNER PAGE LAYOUT\n*                                                                 LINE#\nBNRBUF   DS 0C\n         DC C'****************************************'\n         DC C'****************************************'              01\n         DC C'*  OS/390 V2.10                         '           ;Logo\n         DC C'      TCP/IP Network Print Facility    *'           ;Logo\n         DC C'*            ...                        '           ;Logo\n         DC C'                        .::::.         *'           ;Logo\n         DC C'*         .:::::       :::              '           ;Logo\n         DC C'                        ::::::         *'           ;Logo\n         DC C'*        .:::''''''       :::              '        ;Logo\n         DC C' ...      ...  ..       ::::::         *'           ;Logo\n         DC C'*        :::  .:::::.  :::::::.   .:::::'           ;Logo\n         DC C'.''::.    .::''.:::  .::::''::::''::::.    *'       ;Logo\n         DC C'*        ::: .:::::::. ::::::::. .::::::'           ;Logo\n         DC C':.''::.  .::'':::''''  ::::::    ::::::    *'       ;Logo\n         DC C'*        ::: :::   ::: :::   ::: :::  ::'           ;Logo\n         DC C''''' '':::.::  :::    ::::::    ::::::    *'        ;Logo\n         DC C'*       .::: :::   ::: :::   ::: :::.:'' '          ;Logo\n         DC C'.   ::::''  .:::    ''::::.::::.::::''    *'        ;Logo\n         DC C'*    ..::::'' ''::...::'' ''::...::'' '':::. :'     ;Logo\n         DC C'::  :::'' ::::''          ::::::         *'         ;Logo\n         DC C'*    ::::''''   '':::::''   '':::::''   '':::::'    ;Logo\n         DC C''''' .::''  :::''           ::::::         *'       ;Logo\n         DC C'*    ''''''                                '        ;Logo\n         DC C'  .::''                  ''::::''         *'        ;Logo\n         DC C'*                                       '           ;Logo\n         DC C' .::''                                  *'          ;Logo\n         DC C'*                     Sobeys Ontario Mai'           ;Logo\n         DC C'nframe System                          *'           ;Logo\n         DC C'*                                       '           ;Logo\n         DC C'                                       *'           ;Logo\n         DC C'*                          Network Print'           ;Logo\n         DC C' Service                               *'           ;Logo\n         DC C'*                                       '           ;Logo\n         DC C'                                       *'           ;Logo\n         DC C'*     Information Technology, 6355 Visco'           ;Logo\n         DC C'unt Road, Mississauga, ON L4V 1W2      *'           ;Logo\n         DC C'*       ********************************'\n         DC C'********************************       *'              13\n         DC C'*       * FROM HOST   :                 '\n         DC C'                               *       *'              14\n         DC C'*       * TO PRINTER  :                 '\n         DC C'                               *       *'              15\n         DC C'*       * USERID/NAME :                 '\n         DC C'                               *       *'              16\n         DC C'*       * JOB NAME/ID :                 '\n         DC C'                               *       *'              17\n         DC C'*       * STEP NAME   :                 '\n         DC C'                               *       *'              18\n         DC C'*       * DD NAME     :                 '\n         DC C'                               *       *'              19\n         DC C'*       * PRINT TIME  :                 '\n         DC C'                               *       *'              1A\n         DC C'*       ********************************'\n         DC C'********************************       *'              1B\n         DC C'*                                       '\n         DC C'                                       *'              1C\n         DC C'****************************************'\n         DC C'****************************************'              1D\nBNRBFEND DS 0C\nBNRBFLEN EQU BNRBFEND-BNRBUF      BANNER PAGE BUFFER LENGTH\n*\nBNRHOST  DC    CL44'&HOSTNAME'           PAGE: HOSTNAME FROM PARM\nBNRPNTRC DC    CL44'DEST(        ), SYSOUT CLASS( ), FORM(    )'\n* TIME AND DATE EDIT FORMATS\nDATEPTN  DC    X'40212020207A21204020202020612120612120'\n* EDIT MEANING:  b ( d d d : d d b ( d d d / d d / d d\nDATEPTNL EQU   *-DATEPTN\n*---------------------------------------------------------------------*\n*        PROGRAM DSECTS: MAPING DSECTS\n*---------------------------------------------------------------------*\n* MAPPING DSECTS\nIRXSTATD DSECT                    16 byte static IRE storage\nIRXDSTGA DS    A                  Address of dynamic storage area\n*\n* File Status: control the procedures of record processing:\n*  Initial: IRX1STR, set in OPEN routine\n*  In status of IRX1STR, process the banner page.\n*    If no banner required, or banner page is processed,\n*    the status is changed to IRX1STP.\n*  In status of IRX1STP, process the PCL command.\n*    If no PCL command required, or PCL command is processed,\n*    the status is changed to IRX1STI.\n*  In status of IRX1STI, process the first record.\n*    After the first record is processed,\n*    the status is changed to IRXNXTR.\n*\n*\nIRXFLAG  DS    X                  File status flag\nIRX1STR  EQU   X'00'              ... Flag of first time call\nIRX1STP  EQU   X'01'              ... Flag to process PCL commands\nIRX1STI  EQU   X'02'              ... Flag to process first record\nIRXNXTR  EQU   X'03'              ... READ NEXT RECORD (NOT FISRT)\nIRXNXTI  EQU   X'04'              ... INSERT NEXT RECORD (NOT FIRST)\nIRX1STM  EQU   X'05'              ... FIRST RECORD FOR MACHINE CODE\n*                                 ... ACTUALLY THE SECOND RECORD\n         DS    3X                 unused\n         DS    D                  unused\n*---------------------------------------------------------------------*\n*        PROGRAM DSECTS: DYNAMIC ALLOCATED STORAGE\n*---------------------------------------------------------------------*\nXPCLSTG  DSECT\nSAVEAREA DS    18F                Save Area\nSAVERTN1 DS    F                  save area for LEVEL 1 CALL\nSAVERTN2 DS    F                  save area for LEVEL 2 CALL\n* TIME MACRO LIST FORM\nTIMELST  TIME  LINKAGE=SYSTEM,MF=L   TIME LIST FORM\nRECLEN   DS    F                  RECORD LENGTH FOR FIX LENGTH\n* RECORD TYPE BYTE\nRECFM    DS    C                  RECORD LENGTH TYPE V OR F\nRECFMFB  EQU   C'F'               FIXED LENGTH RECORD TYPE\nRECFMVB  EQU   C'V'               VARIABLE LENGTH RECORD TYPE\n* FLAG TO SHOW IF COPY THE SOURCE RECORD\nCOPYREC  DS    X                  VALUE: YES OR NO\n* CARRIAGE CONTROL BYTE\nCCBYTE   DS    X                  CURRENT CC BYTE\nCCBYTESV DS    X                  CC BYTE OF PREVIOUS RECORD\nCCBYTETM DS    X                  TEMPORARY BUFFER FOR EXCHANGE CCBYTE\n* CARRIAGE CONTROL TYPE\nCCMODE   DS    X                  CARRIAGE CONTROL TYPE\nCCMODASA EQU   X'0'               ASA CARRIAGE CONTROL MODE\nCCMODMC  EQU   X'1'               PRINTER CHANNEL COMMANDS(MAHINE CODE)\n* ASA CARRIAGE CONTROL BYTE TYPES\nCCTP0SP  EQU   C'+'               CC BYTE '+' 0 LINE FEED (OVERSTRIKE)\nCCTP1SP  EQU   C' '               CC BYTE ' ' 1 LINE FEED\nCCTP2SP  EQU   C'0'               CC BYTE '0' 2 LINE FEED\nCCTP3SP  EQU   C'-'               CC BYTE '-' 3 LINE FEED\n* END OF MACHINE CODE TRANSLATION TABLE\n* BANNER PAGE FIELD DEFINITIONS\nBNRHOSTL EQU   X'14'              BANNER PAGE: FROM HOST LINE #\n*PRINTER MODEL\nBNRPNTR  DS    0CL44              BANNER PAGE: PRINTER NAME\n         DS    CL5\nBNRDEST  DS    CL8                BANNER PAGE: PRINTER DEST\n         DS    CL16\nBNRCLAS  DS    CL1                BANNER PAGE: SYSOUT CLASS\n         DS    CL8\nBNRFORM  DS    CL4                BANNER PAGE: PRINT FORM\n         DS    CL2\n*END OF PRINTER MODEL\nBNRPNTRL EQU   X'15'              BANNER PAGE: PRINTER NAME LINE #\nBNRUSER  DS    CL44               BANNER PAGE: USER NAME\nBNRUSERL EQU   X'16'              BANNER PAGE: USER NAME LINE #\nBNRJBNM  DS    CL44               BANNER PAGE: JOB NAME\nBNRJBNML EQU   X'17'              BANNER PAGE: JOB NAME LINE #\nBNRDSSN  DS    CL44               BANNER PAGE: STEP NAME\nBNRDSSNL EQU   X'18'              BANNER PAGE: STEP NAME LINE #\nBNRDDNM  DS    CL44               BANNER PAGE: DD NAME\nBNRDDNML EQU   X'19'              BANNER PAGE: DD NAME LINE #\nBNRTIME  DS    CL44               BANNER PAGE: TIME AND DATE\nBNRTIMEL EQU   X'1A'              BANNER PAGE: TIME AND DATE LINE #\n*\nBNRLNCTR DS    X                  CURRENT LINE NUMBER IN BANER PAGE\nBNRBFPOS DS    F                  CURRENT LINE START ADDRESS\nBNRBFEOF DS    X                  FLAG TO TELL IF AT THE LAST LINE\n* BANNER LENGTH CONSTANTS\nBNRFDBYT EQU   X'18'              FIELD START POSITION      : 24\nBNRFDLEN EQU   X'2C'              FIELD LENGTH IN BYTES     : 44\nBNRRCLEN EQU   X'50'              BANNER RECORD LENGTH      : 80\n* PCL COMMAND FLAGS\nPCLFLAG  DS    X                  FLAG FOR PCL COMMAND PROCESSING\nPCLINIT  EQU   X'00'              INITIAL STATUS, NOT YET PROCESSED.\nPCLINST  EQU   X'01'              REQUIRE TO PROCESS PCL COMMAND\n*\nDATEAREA DS    0CL17              TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    X                  '01' FOR TEMPORARY BYTE\nDATESAVE DS    CL16               TIME MACRO FORMAT: HHMMSSssYYYYMMDD\n         DS    0D                 Round up to double word boundary\nXPCLSTGL EQU   *-XPCLSTG          Length of dynamic storage area\n********************************************************************\n* DUMMY SECTION: DATA TABLE\n********************************************************************\n         DS    0D                 Round up to double word boundary\n* WORK RECORD BUFFER: SINGLE RECORD PER EXECUTION CONTROL\nRECSTG   DSECT\nRECORD   DS    CL4092             MAXIMUM 4092 BYTE OF RECORDS\nRECSTGL  EQU   *-RECSTG           LENGTH OF THIS DSECT\nSTGLEN   EQU   XPCLSTGL+RECSTGL   TOTAL DSECT LENGTH\n         SPACE 5\n         EZAPPFCD IRE=DSECT,   DSECT for input record exit parameters  X\n               RDA=DSECT       DSECT for routing data area\n         SPACE 5\n         IAZFSIP LIST=YES          JES FSI PARAMETER LIST\n         SPACE 5\n         IAZJSPA LIST=YES          JOB SEPARATOR PAGE DATA AREA\n         SPACE 5\n.END     END   EXITNPFR            End of EXPCLLS0  module\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT621/FILE621.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT621", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}