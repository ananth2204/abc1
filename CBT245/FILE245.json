{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011552000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 17, "INMDSNAM": "CBT.V500.FILE245.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE245.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\n'", "DS1TRBAL": "b'@H'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\xb3\\x00\\n\\x01\\xb4\\x00\\x0e\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"#INDEX": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93&\\x9f\"V\\x00^\\x00\\t\\x00\\x00\\xc4\\xd7\\xe2\\xd7\\xd7\\xd7@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-09-26T22:56:00", "lines": 94, "newlines": 9, "modlines": 0, "user": "DPSPPP"}, "text": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n                    GOODIES DOCUMENTATION\n  ~~~~~~~~          ~~~~~~~~~~~~~~~~~~~~~\n  CONTRIBUTED  BY\n                    - RICHARD HAYDOCK\n                      SYSTEMS PROGRAMMER\n                      NORWICH UNION INSURANCE\n\n                      EMAIL - GBNUHCCF ON IBM MAIL EXCHANGE\n                      PHONE - 0603 687709\n ____________________________________________________________________\n\n\n   INDEX OF MEMBERS\n   ================\n\n   NAME      DESCRIPTION\n   --------  -----------------------------------------------------------\n\n   #INDEX    INDEX OF OTHER MEMBERS OF THIS DATASET\n   #README   PLEASE READ THIS MEMBER\n   CHECKGRP  REXX TO CHECK WHETHER A USER IS CONNECTED TO A GIVEN GROUP\n   DSMMACS   MACROS USED BY THE NUIGACCT COMMAND\n   FINDGRP   SOURCE FOR TSO COMMAND TO SET TSO GROUP VARIABLE (& OTHERS)\n   FINDSYS   SOURCE FOR TSO COMMAND TO SET TSO SYSID VARIABLE\n   IEFUTL    NU VERSION OF THE SMF TIME LIMIT EXIT\n   ISPDFLTS  CUSTOMISED ISPF DEFAULT SETTINGS\n   ISPXDT    ISPF EXIT DEFINITION TABLE\n   ISPX16L1  ISPF EXIT 16, USED TO CHANGE NAMING FOR ISPF TEMPORARY D/S\n   NUCHACC   CHANGE ACCOUNT CODE VARIABLE (PANEL)\n   NUCHGRP   DISPLAY RACF GROUPS/CHANGE DEFAULT (PANEL)\n   NUCVPRF   CONVERT CONTENTS OF OLD ISPF PROFILE (PANEL)\n   NUDSREN   BULK DATASET RENAMING AID (PANEL)\n   NUIGACCT  SOURCE FOR TSO COMMAND TO SET UP ISPF VARIABLES FOR CURRENT\n             CONNECT GROUP AND ACCOUNT CODE\n   NUTETE    MAPPING DSECT FOR NU ACCOUNT CODE INFO. CONTROL BLOCK\n   PARMSEX   EXAMPLES OF PARAMETERS RECOGNISED BY THE STARTUP REXX\n   PARMSGRP  SAMPLE GROUP LEVEL TSO PARAMETERS\n   PARMSSYS  SAMPLE SYSTEM LEVEL TSO PARAMETERS\n   PARMSUSR  SAMPLE USER LEVEL TSO PARAMETERS\n   RESETACC  DISPLAY/RESET ACCOUNT CODE VARIABLE (PANEL)\n   ROG*      REXX EXECS USED TO VALIDATE/RESET ISPF READ-ONLY VARIABLES\n   SNUCVPRF  CONVERT CONTENTS OF OLD ISPF PROFILE (ISPF SKELETON)\n             N.B. THIS SKELETON IS NAMED 'NUCVPRF' IN THE NU ENVIRONMENT\n             IT HAS BEEN RENAMED HERE AS THERE IS ALSO A PANEL NUCVPRF\n   SNUDSREN  BULK DATASET RENAMING AID (ISPF SKELETON)\n             N.B. THIS SKELETON IS NAMED 'NUDSREN' IN THE NU ENVIRONMENT\n             IT HAS BEEN RENAMED HERE AS THERE IS ALSO A PANEL NUDSREN\n   SPU       PERSONAL USERIDS FACILITIES (PANEL)\n   SPUM01    MESSAGES FOR PU FACILITIES\n   STARTUP   REXX EXEC RUN BY THE UNIVERSAL LOGON PROCEDURE (TSOPROC)\n   TNUCHACC  HELP PANEL FOR PANEL NUCHACC\n   TNUCHGRP  HELP PANEL FOR PANEL NUCHGRP\n   TNUCVPRF  HELP PANEL FOR PANEL NUCVPRF\n   TNUDSREN  HELP PANEL FOR PANEL NUDSREN\n   TSOA000   INITIAL PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA000X  REXX EXEC WHICH DRIVES THE TSO PARAMETER ADMIN DIALOG\n   TSOA001   PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA002   PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA003   PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA004   PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA005   PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA006   PANEL FOR 'TSO PARAMETER ADMIN' DIALOG\n   TSOA01    MESSAGES FOR TSO PARAMETER ADMIN DIALOG\n   TSOA02    MESSAGES FOR TSO PARAMETER ADMIN DIALOG\n   TSODFLT   TSO LOGON PROCEDURE GIVING BASIC ISPF CAPABILITY\n   TSOLOAD1  JCL USED TO CREATE SYSTEM ISPF DATASETS (LIVE SYSTEMS)\n   TSOLOAD3  JCL USED TO CREATE SYSTEM ISPF DATASETS (TEST SYSTEM)\n   TSOLOAD6  JCL USED TO CREATE SYSTEM ISPF DATASETS (SYSPROGS SYSTEM)\n   TSOPARM   PROCLIB MEMBER ALLOWING SPECIFICATION OF 'A' OR 'B' D/S\n   TSOPROC   UNIVERSAL LOGON PROCEDURE USED BY (NEARLY) ALL NU TSO USERS\n   TSOTESTA  LOGON PROCEDURE FOR TESTING NEW 'A' LIBRARIES\n   TSOTS     LOGON PROCEDURE USED BY 'TERMINAL SUPERVISORS' (A LARGE\n             GROUP OF TSO USERS WITH A RESTRICTED FUNCTION)\n   TSPU      HELP PANEL FOR SPU\n   TTSOA000  HELP PANEL FOR TSOA000\n   TTSOA001  HELP PANEL FOR TSOA001\n   TTSOA002  HELP PANEL FOR TSOA002\n   TTSOA003  HELP PANEL FOR TSOA003\n   XNUCA1A   FRONT END REXX TO DRIVE CA/1 ISPF DIALOG (A)\n   XNUCA1B   FRONT END REXX TO DRIVE CA/1 ISPF DIALOG (B)\n             AS THE CA/1 ISPF DIALOG USES ITS OWN ISPF NEWAPPL, IT\n             IS NECESSARY TO SET UP LIBDEFS AFTER SETTING THE NEWAPPL\n   XNUCHACC  REXX TO DRIVE OPTION 3 FROM PANEL SPU\n   XNUCHGRP  REXX TO DRIVE OPTION 1 FROM PANEL SPU\n   XNUCVPRF  REXX TO DRIVE OPTION 4 FROM PANEL SPU\n   XNUCVPR1  REXX INVOKED BY ISPF SKELETON NUCVPRF\n   XNUDSREN  REXX TO DRIVE OPTION 2 FROM PANEL SPU\n   XNUDSRN1  REXX INVOKED BY ISPF SKELETON NUDSREN\n   XNURNPRF  REXX USED TO RENAME ISPF PROFILES\n             (USED AFTER SUCCESSFUL RUNNING OF XNUCVPR1 TO START USING\n             A NEWLY-BUILT ISPF PROFILE)\n   XNUTSM53  FRONT END REXX TO DRIVE TSO/MON 5.3 DIALOG\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "#README": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x11\\x9f\\x00\\x93\\x11\\x9f\\x18\\x13\\x00\\xeb\\x00|\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-04-29T00:00:00", "modifydate": "1993-04-29T18:13:00", "lines": 235, "newlines": 124, "modlines": 0, "user": "HAYDOCR"}, "text": "\n  GENERAL NOTES ON THIS LIBRARY\n  =============================\n\n  PREPARED - 29/04/93\n\n  BY       - RICHARD HAYDOCK\n             SYSTEMS PROGRAMMER\n             NORWICH UNION INSURANCE\n\n             EMAIL - GBNUHCCF ON IBM MAIL EXCHANGE\n             PHONE - 0603 687709\n\n  FOLLOWING A PRESENTATION ON 'TSO AND PERSONAL USERIDS AT NORWICH\n  UNION' GIVEN AT THE UK LARGE SYSTEMS GUIDE ON 24/03/93 (BRITISH GAS,\n  SOUTHAMPTON) I PUT THIS COLLECTION OF BITS AND PIECES TOGETHER FOR\n  THE GUIDE GOODIES TAPE\n\n  AT NORWICH UNION, A 'PROJECT' IS EFFECTIVELY THE SAME AS A RACF GROUP\n  MANY OF OUR TSO USERS BELONG TO MORE THAN ONE 'PROJECT' SO IN THE PAST\n  THEY HAD A NUMBER OF TSO USERIDS, BUT NOW THEY HAVE ONE USERID WHICH\n  IS CONNECTED TO A NUMBER OF RACF GROUPS FOR TSO PURPOSES\n\n  RACF GROUPS USED FOR TSO AT NU HAVE NAMES WHICH BEGIN 'NU' AND ARE\n  5 CHARACTERS IN LENGTH\n\n  THE BITS AND PIECES ARE AS FOLLOWS:\n\n  JCL USED TO CREATE SYSTEM LIBRARIES\n  -----------------------------------\n\n  TSOLOAD1- IS USED TO CREATE A SET OF LARGE SYSTEM LIBRARIES FOR USE\n            BY ALL TSO USERS ON OUR PRODUCTION SYSTEMS (IBM1 AND IBM2)\n\n  TSOLOAD3- SIMILAR TO TSOLOAD1, BUILDS LIBRARIES FOR IBM3 (OUR MAIN\n            TESTING SYSTEM)\n\n  TSOLOAD6- SIMILAR TO TSOLOAD1, BUILDS LIBRARIES FOR IBM6 (OUR SYSTEMS\n            PROGRAMMER TEST SYSTEM)\n\n  FOR EACH ENVIRONMENT, WE MAINTAIN TWO SETS OF LIBRARIES - AN 'A' SET\n  AND A 'B' SET. AT A GIVEN TIME, ONLY ONE SET IS ALLOCATED TO A LARGE\n  NUMBER OF USERS, SO THE OTHER SET CAN BE REBUILT WITHOUT CAUSING\n  CONTENTION. ONCE A NEW SET OF LIBRARIES HAS BEEN BUILT AND TESTED, IT\n  CAN BE 'ROLLED IN' BY CHANGING THE SYSTEM LEVEL TSO PARAMETERS.\n\n  A FEW DAYS AFTER A SUCCESSFUL 'ROLL-IN' THE INACTIVE SET OF LIBRARIES\n  IS RE-BUILT TO MIRROR THE SET JUST ROLLED IN. THIS MEANS WE HAVE TWO\n  IDENTICAL SETS WHICH BACK EACH OTHER UP UNTIL WE NEXT NEED TO MAKE\n  CHANGES.\n\n  THIS SYSTEM USES SEVERAL HUNDRED CYLINDERS OF EXTRA DASD, BUT GIVES A\n  FLEXIBLE AND RESILIENT ENVIRONMENT AND ELIMINATES THE NEED FOR LONG\n  CONCATENATIONS OF DATASETS.\n\n  TO MINIMISE THE EXTRA DASD USAGE, WE ONLY COPY THE MOST COMMONLY USED\n  ISPF DIALOG ELEMENTS INTO THE LARGE SYSTEM LIBRARIES. GROUPS USING\n  LESS COMMONLY USED FACILITIES (SUCH AS RACF DIALOGS) CAN EITHER USE\n  FRONT-END DRIVERS TO MAKE NECESSARY ALLOCATIONS AND INVOKE THE\n  FACILITY, OR ARRANGE FOR EXTRA ALLOCATIONS TO BE MADE WHEN THEY LOG ON\n\n  LOGON PROCEDURES, 'STARTUP' REXX AND TSO PARAMETERS\n  ---------------------------------------------------\n\n  TSODFLT - IS A SIMPLE LOGON PROCEDURE ALLOWING BASIC ISPF ACCESS\n\n  TSOTS   - IS A LOGON PROCEDURE USED BY 'TERMINAL SUPERVISORS' - A\n            LARGE GROUP OF TSO USERS WHO DO NOT NEED THE FULL RANGE\n            OF POSSIBILITIES OFFERED BY 'TSOPROC'\n\n  TSOPARM - MEMBER OF SYS1.PROCLIB REFERENCED BY 'TSOTS' TO DETERMINE\n            WHETHER 'A' OR 'B' SYSTEM LIBRARIES SHOULD BE ALLOCATED\n\n  TSOPROC - IS THE NU 'STANDARD' LOGON PROCEDURE. IT ALLOCATES ONLY\n            SYS1.ISRCLIB IN WHICH WE KEEP:\n\n  TSOTESTA- IS SIMILAR TO TSOPROC BUT USED FOR LOGGING ON WITH A NEW\n            SET OF 'A' SYSTEM LIBRARIES WHEN THE 'B' LIBRARIES ARE IN\n            PRODUCTION. BY USING TSOTESTA, WE CAN GET EARLY WARNING OF\n            DIALOG ERRORS WITHOUT EXPOSING ALL OUR USERS TO THEM\n\n            WE ALSO HAVE A PROCEDURE CALLED TSOTESTB FOR TESTING NEW\n            'B' LIBRARIES\n\n  STARTUP - A REXX EXEC WHICH ALLOCATES THE USER'S ISPF PROFILES AND\n            PROCESSES 'TSO PARAMETER' DATASETS IN ORDER TO DETERMINE\n            WHICH DATASETS SHOULD BE ALLOCATED TO THE USER'S TSO/ISPF\n            SESSION, AND THEN ALLOCATES THEM. OTHER PROCESSING MAY ALSO\n            BE DONE DEPENDING ON THE PARAMETERS ENCOUNTERED.\n\n  PARMSEX - A LIST OF EXAMPLE PARAMETERS SHOWING THE SYNTAX RECOGNISED\n            BY 'STARTUP'\n\n  PARMSUSR- MY OWN 'PERSONAL' TSO PARAMETERS FOR USE ON OUR TEST SYSTEM\n            (CALLED IBM3). THEY ARE STORED IN THE ISPF PROFILE I USE ON\n            IBM3\n\n  PARMSGRP- TSO PARAMETERS FOR USE BY ALL MEMBERS OF THE GROUP (NUSSS)\n            TO WHICH I AM CONNECTED FOR TSO PURPOSES\n\n  PARMSSYS- TSO PARAMETERS FOR USE BY ALL USERS OF TSO ON IBM3\n\n  ROG*    - ALL MEMBERS PREFIXED 'ROG' ARE USED TO SET UP ISPF READ\n            ONLY VARIABLES FOR ACCOUNT CODE, SYSTEM ID AND RACF CURRENT\n            CONNECT GROUP. THE STARTUP REXX INVOKES 'ROGS'\n\n  ISPF DIALOG FOR ADMINISTRATION OF TSO PARAMETERS\n  ------------------------------------------------\n\n  ONLY SYSTEMS PROGRAMMERS CAN MODIFY SYSTEM LEVEL PARAMETERS\n\n  TRUSTED INDIVIDUALS WITHIN GROUPS CAN MODIFY THOSE PARAMETERS WHICH\n  BELONG TO THEIR GROUP(S) SO THEY HAVE SOME CONTROL OVER WHAT WILL BE\n  ALLOCATED TO THEIR GROUP MEMBERS AFTER LOGGING ON.\n\n  INDIVIDUAL USERS CAN (IF THEY WISH) SET UP PERSONAL PARAMETERS IN\n  ORDER TO HAVE PERSONALISED ISPF ENVIRONMENTS.\n\n  USERS CAN DISPLAY/MODIFY PARAMETERS AT USER, GROUP OR SYSTEM LEVEL\n  IN ISOLATION, OR OBTAIN A 'MERGED' LIST WHICH LOOKS A LITTLE LIKE\n  THE RESULT OF ISSUING A 'TSO LISTALC' COMMAND AFTER LOGGING ON.\n\n  NORWICH UNION HAS ITS OWN STANDARD VERSION OF THE 'ISR@PRIM' PANEL\n  WHICH WE INSIST ON USERS USING. IT HAS 3 SPECIAL OPTIONS:\n\n  'S' - SYSTEM PROVIDED, NU-SPECIFIC FACILITIES\n  'P' - PROJECT FUNCTIONS. THESE FUNCTIONS ARE ENTIRELY UNDER THE\n        CONTROL OF THE PROJECT (GROUP OF USERS) SO THERE ARE DIFFERENT\n        SETS OF PROJECT FUNCTIONS FOR DIFFERENT RACF GROUPS.\n  'U' - USER FUNCTIONS. THESE ARE AVAILABLE FOR INDIVIDUALS FAMILIAR\n        WITH ISPF WHO WISH TO SET UP DIALOGS OF THEIR OWN.\n\n  THE ELEMENTS OF THE TSO PARAMETER ADMIN DIALOG ARE:\n\n  TSOA000 - REXX TO DRIVE THE DIALOG (THIS IS PACKAGED AS MEMBER\n            TSOA000X HERE, AS ITS NAME IS THE SAME AS ONE OF THE PANELS)\n\n  TSOA000-TSOA006 - PANELS USED BY THIS DIALOG\n\n  TSOA01  - MESSAGES (1)\n  TSOA02  - MESSAGES (2)\n\n  TTSOA000-TTSOA003 - HELP PANELS FOR TSOA000-TSOA003\n\n  ISPF DIALOG USED BY USERS CONVERTING TO USE PERSONAL USERIDS FOR TSO\n  --------------------------------------------------------------------\n\n  THIS DIALOG BEGINS WITH PANEL SPU (HELP PANEL TSPU).\n  MESSAGES ARE IN MEMBER SPUM01\n  THERE ARE 4 OPTIONS:\n\n  1 - DISPLAY RACF GROUPS YOU ARE CONNECTED TO, SELECT NEW DEFAULT IF\n      DESIRED\n\n  2 - DATASET RENAMING UTILITY (USEFUL FOR USERS WITH LARGE NUMBERS OF\n      PERSONAL DATASETS). FOR VSAM DATASETS, DO NOT TRY TO CHANGE THE\n      HIGH LEVEL QUALIFIER. THIS UTILITY USES IDCAMS 'ALTER NEWNAME'\n      COMMANDS TO RENAME VSAM CLUSTER COMPONENTS.\n\n  3 - DISPLAY/CHANGE ISPF ACCOUNT CODE VARIABLE\n      (THE NU-DEFINED ISPF VARIABLE CALLED 'Z#ACCT' IS USED BY THIS\n      UTILITY. THE IBM-DEFINED 'ZACCTNUM' VARIABLE IS UNCHANGEABLE)\n\n  4 - ISPF PROFILE CONVERTER. USEFUL FOR USERS WHOSE OLD IDS HAD A HIGH\n      LEVEL OF ISPF CUSTOMISATION.\n\n  THE CALL SEQUENCES ARE AS FOLLOWS:\n\n  1 - REXX XNUCHGRP, PANEL NUCHGRP (HELP PANEL - TNUCHGRP)\n\n  2 - REXX XNUDSREN, PANEL NUDSREN (HELP PANEL - TNUDSREN)\n      SKEL NUDSREN   INVOKES REXX XNUDSRN1 IN BATCH MODE\n\n      (NOTE - SKEL NUDSREN IS PACKAGED AS SNUDSREN DUE TO NAME CLASH)\n\n  3 - REXX XNUCHACC, PANEL RESETACC (HELP PANEL - TNUCHACC)\n\n  4 - REXX XNUCVPRF, PANEL NUCVPRF (HELP PANEL - TNUCVPRF)\n      SKEL NUCVPRF   INVOKES REXX XNUCVPR1 IN BATCH MODE\n\n      (NOTE - SKEL NUCVPRF IS PACKAGED AS SNUCVPRF DUE TO NAME CLASH)\n\n      AFTER USING OPTION 4, USERS ARE INVITED TO RUN THE REXX XNURNPRF\n      FROM OUTSIDE ISPF. THIS BACKS UP THE ISPF PROFILE THEY WERE USING\n      AND ACTIVATES TO THE ONE JUST CREATED FOR THEM\n\n  OTHER REXX UTILITIES\n  --------------------\n\n  CHECKGRP - USED TO CHECK WHETHER OR NOT A USER IS CONNECTED TO A\n             SPECIFIED RACF GROUP. THIS IS OFTEN USED AS A CONTROL\n             MECHANISM TO DECIDE WHETHER OR NOT IT IS APPROPRIATE FOR\n             A GIVEN USER TO USE A CERTAIN APPLICATION.\n\n  XNUCA1A  - USED TO INVOKE THE CA-ONE ISPF DIALOG. CA-ONE IS A TAPE\n             MANAGEMENT SYSTEM USED BY A FEW OF OUR GROUPS, SO THOSE\n             THAT NEED IT CAN INVOKE IT USING 'XNUCA1A' WITHOUT NEEDING\n             TO ALLOCATE ANY OTHER LIBRARIES.\n\n  XNUCA1B  - CALLED BY XNUCA1A TO COMPLETE THE INVOCATION OF CA-ONE\n\n  XNUTSM53 - USED TO INVOKE TSO/MON 5.3\n             THIS INVOCATION IS SIMPLER THAN THAT OF CA-ONE SINCE\n             NO ISPF 'NEWAPPL' IS INVOLVED\n\n  ASSEMBLER CODE\n  --------------\n\n  ISP*     - USED TO MAKE ISPF USER EXIT 16 WORK. APART FROM CODING UP\n             ISPF EXIT 16 ITSELF, THE INSTALLATION ALSO HAS TO CODE A\n             MODIFIED 'ISPDFLTS' MODULE TO INDICATE TO ISPF THAT USER\n             EXITS ARE BEING TAKEN, AND 'ISPXDT' (EXIT DEFINITION TABLE)\n             TO IDENTIFY WHICH EXITS ARE IN USE, WHAT THE CSECT NAMES\n             ARE ETC. SEE ISPF 'INSTALLATION & CUSTOMISATION' FOR MORE\n             DETAILS.\n\n  IEFUTL   - NU VERSION OF THE SMF USER TIME LIMIT EXIT. SHOWS HOW RACF\n             IS USED TO CONTROL WHICH USERS ARE EXEMPT FROM TIMEOUT\n             CONTROL AND CPU TIME LIMIT CONTROL. THIS VERSION OF IEFUTL\n             NO LONGER REQUIRES ANY MODIFICATION BY US.\n\n  NUIGACCT - TSO COMMAND USED TO SET UP ISPF VARIABLES FOR ACCOUNT CODE\n             SYSTEM NAME AND CURRENT RACF CONNECT GROUP\n\n             DSMMACS AND NUTETE ARE NEEDED TO ASSEMBLE NUIGACCT - IT\n             HAS TO RUN IN AN ISPF ENVIRONMENT\n\n  FINDGRP  - TSO COMMAND USED TO SET UP TSO VARIABLE 'GRPID' AND OTHERS\n             (SEE SOURCE). USEFUL IN CLISTS OR REXXS TO FIND A USER'S\n             CURRENT CONNECT GROUP WHEN PERSONAL USERIDS ARE IN USE.\n\n  FINDSYS  - TSO COMMAND USED TO SET UP TSO VARIABLE 'SYSID'\n\n  THE FINDGRP AND FINDSYS COMMANDS ARE BOTH USED BY THE 'STARTUP' REXX\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CHECKGRP": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x05\\x003\\x003\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:05:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC:      CHECKGRP                                             */\n  /*                                                                 */\n  /* AUTHOR:    Richard Haydock                                      */\n  /*                                                                 */\n  /* WRITTEN:   Aug 1992                                             */\n  /*                                                                 */\n  /* CALLED BY: TSO users                                            */\n  /*                                                                 */\n  /* PURPOSE:   Check whether user belongs to a specified group      */\n  /*                                                                 */\n  /* FUNCTION:  Input a RACF group to be tested                      */\n  /*                                                                 */\n  /*            Optionally, input another user. By default, the      */\n  /*            user who called CHECKGRP will be tested.             */\n  /*                                                                 */\n  /*            The output from an LU command is scanned.            */\n  /*                                                                 */\n  /*            If one of the user's connect groups matches the one  */\n  /*            input then rc = 0 otherwise rc = 8                   */\n  /*                                                                 */\n  /* CODES   :  0 - user is connected to group being checked         */\n  /*            8 - user is definitely not connected to the group    */\n  /*           12 - non-zero RC from LU command (not authorised to   */\n  /*                list user, or unknown user specified)            */\n  /*                                                                 */\n  /*******************************************************************/\n  arg group user .\n\n  if user = \"\" then user = userid()\n\n  trapvar = outtrap(\"temp.\",'*',\"noconcat\")\n  \"LU\" user\n  list_rc = rc\n  trapvar = outtrap('off')\n\n  if list_rc \u00ac= 0 then exit 12\n\n  do count = 1 to temp.0\n    testword = \" GROUP=\" || group || \" \"\n    x = pos(testword,temp.count)\n    if x = 0\n      then\n        iterate\n      else\n        exit 0                              /* group found           */\n  end\n\n  exit 8\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "DSMMACS": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16 \\x08\\xb6\\x08\\xb6\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:20:00", "lines": 2230, "newlines": 2230, "modlines": 0, "user": "HAYDOCR"}, "text": "         MACRO\n         DSMINFO\n*        PUSH PRINT\n*        PRINT ON,GEN\n         SPACE\n***********************************************************************\n*                                                                     *\n*        SPF DIALOG SERVICE MANAGEMENT ASSIST MACROS                  *\n*                                                                     *\n*        WRITTEN BY IAN L. RAMAGE                                     *\n*                                                                     *\n* &NAME   VDEF  &VAR,&T,&GRP,&LEN=,&TYP=,&ERROR=YES                   *\n* &NAME   VDEL  &GRP,&ERROR=YES                                       *\n* &NAME   VRESET &GRP,&ERROR=YES                                      *\n* &NAME   VGET  &GRP,&ERROR=YES                                       *\n* &NAME   VPUT  &GRP,&ERROR=YES,&POOL=PROF                            *\n* &NAME   EDIT  &DSN,&VOL,&ERROR=YES                                  *\n* &NAME   BROWSE &DSN,&VOL,&ERROR=YES                                 *\n* &NAME   LOG &MSG,&ERROR=YES                                         *\n* &NAME   CONTROL &TYPE,&MODE,&LINE,&ERROR=YES                        *\n* &NAME   TBCREATE &TAB,&KEYS,&FORMAT,&OPT,&REP,&ERROR=YES,&LIB=      *\n* &NAME   TBOPEN &TAB,&OPT,&ERROR=YES,&LIB=                           *\n* &NAME   TBERASE &TAB,&ERROR=YES                                     *\n* &NAME   TBEND &TAB,&ERROR=YES                                       *\n* &NAME   TBSAVE &TAB,&COPY,&ALT,&PAD,&ERROR=YES                      *\n* &NAME   TBCLOSE &TAB,&COPY,&ALT,&PAD,&ERROR=YES,&LIB=               *\n* &NAME   TBSARG &TAB,&ARG,&ERROR=YES                                 *\n* &NAME   TBSCAN &TAB,&ARG,&ERROR=YES                                 *\n* &NAME   TBSKIP &TAB,&NUM,&ERROR=YES                                 *\n* &NAME   TBPUT &TAB,&ERROR=YES                                       *\n* &NAME   TBADD &TAB,&ERROR=YES                                       *\n* &NAME   TBMOD &TAB,&ERROR=YES                                       *\n* &NAME   TBEXIST &TAB,&ERROR=YES                                     *\n* &NAME   TBTOP &TAB,&ERROR=YES                                       *\n* &NAME   TBBOTTOM &TAB,&ERROR=YES                                    *\n* &NAME   TBDELETE &TAB,&ERROR=YES                                    *\n* &NAME   TBVCLEAR &TAB,&ERROR=YES                                    *\n* &NAME   DISPLAY &PANEL,&MSG,&ERROR=YES                              *\n* &NAME   TBDISPL &TAB,&PANEL,&MSG,&ERROR=YES                         *\n* &NAME   VLEN  &VAR,&OPT                                             *\n* &NAME   VMSG  &MSG,&MSGID                                           *\n* &NAME   FTERASE &MEM,&ERROR=YES                                     *\n* &NAME   FTCLOSE &MEM,&ERROR=YES                                     *\n* &NAME   FTOPEN &T,&ERROR=YES                                        *\n* &NAME   FTINCL &SKEL,&NOFT,&ERROR=YES                               *\n* &NAME   BLK &N,&LEN,&FILL=' '                                       *\n* &NAME   BLANK &N,&LEN,&FILL=' '                                     *\n* &NAME   VTST  &GRP                                                  *\n* &NAME   SELECT &BUF,&LEN=,&ERROR=YES                                *\n* &NAME   SETMSG &MSGID,&ERROR=YES                                    *\n* &NAME   VSPF                                                        *\n* &NAME   ISPQRY                                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n*        POP  PRINT\n         MEND\n         MACRO\n&NAME    VDEF  &VAR,&T,&GRP,&LEN=,&TYP=,&ERROR=YES,&LAST=N,&EQU=,&ORG=\n.**********************************************************************\n.*                                                                    *\n.*       VDEF MACRO                                VDEF MACRO         *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &XL(200),&XGRP(200)\n         GBLA  &NL,&NV,&NG,&NS,&TGRP,&MAXD\n         GBLB  &DEF(21),&GET(21),&SHR(21),&MDEF,&MGET,&MSHR,&GRPT\n         GBLC  &XVAR(200),&XGET(200),&XSHR(200),&VTYP\n         LCLA  &C,&L,&GRX,&GRXX,&GRXY\n         LCLC  &A\n         AIF   (&MDEF).NOFS\n&MDEF    SETB  1\n         VDEF  DMFUNC,TYP=C,LEN=8\n         VDEF  DMRCODE,TYP=F,LEN=4\n.NOFS    ANOP\n         VTYP  &VAR\n         AIF   (T'&TYP EQ 'O').GETTYP\n&A       SETC  '&TYP'\n         AGO   .TYPS\n.GETTYP  ANOP\n&A       SETC  T'&VAR\n.TYPS    AIF   ('&A' NE 'A').NOSETF\n&A       SETC  'F'\n.NOSETF  AIF   ('&A' EQ 'C' OR '&A' EQ 'F' OR '&A' EQ 'B' OR '&A' EQ 'X'\n               ').TYPOK\n         MNOTE 12,'INVALID TYPE - &A '\n         MEXIT\n.TYPOK   ANOP\n         AIF   (T'&LEN EQ 'O').GETLEN\n&L       SETA  &LEN\n         AGO   .LENS\n.GETLEN  ANOP\n&L       SETA  L'&VAR\n.LENS    ANOP\n&C       SETA  1\n         AIF   (T'&GRP EQ 'O').SETTYP\n&GRX     SETA  &GRP+1\n         AGO   .GOTTYP\n.SETTYP  ANOP\n&GRX     SETA  1\n.GOTTYP  ANOP\n         AIF   (NOT &GRPT).NOGTST\n         AIF   (&TGRP EQ &GRX).NOGTST\n&GRXX    SETA  &GRX-1\n&GRXY    SETA  &TGRP-1\n         MNOTE 4,'GROUP CHANGE FROM &GRXY TO &GRXX '\n.NOGTST  ANOP\n         AIF   (&NV EQ 0).FRSTV\n         INVLEN &L\n.NDUP    AIF   ('&VAR' EQ '&XVAR(&C)').DUPVV\n&C       SETA  &C+1\n         AIF   (&C LE &NV).NDUP\n&XVAR(&C) SETC '&VAR'\n&NV      SETA  &C\n         AGO   .DUPV\n.DUPVV   ANOP  AIF   (&GRX EQ &XGRP(&C)).DUPV\n         MNOTE 12,'DUPLICATE VARIABLE &VAR'\n         MEXIT\n.FRSTV   ANOP\n&XVAR(1) SETC  '&VAR'\n&XL(1)   SETA  &L\n&NV      SETA  1\n&NL      SETA  1\n&NG      SETA  1\n.DUPV    ANOP\n&XGRP(&C) SETA &GRX\n         AIF   (&DEF(&GRX)).DUNGRP\n         OI    GENGRP+&GRX-1,X'80'\n&DEF(&GRX) SETB  1\n         AIF   (&GRX LE &MAXD).DUNGRP\n&MAXD    SETA  &GRX\n.DUNGRP  ANOP\n         AIF   ('&T' EQ 'S').GTSHR\n         AIF   ('&T' EQ 'T').NOGET\n&XGET(&NG) SETC '&VAR'\n&NG      SETA  &NG+1\n&GET(&GRX) SETB 1\n&MGET    SETB  1\n         AGO   .NOGET\n.GTSHR   ANOP\n&NS      SETA  &NS+1\n&XSHR(&NS) SETC '&VAR'\n&SHR(&GRX) SETB 1\n&MSHR    SETB  1\n.NOGET   ANOP\n         SPACE\n         MNOTE *,'VARIABLE NAME - &VAR, TYPE - &A, LENGTH - &L GROUP - &\n               &GRP '\n&NAME    LA    R14,VDEFINE    *DEFINE VARIABLE TO SPF\n         AIF   ('&VTYP' NE 'C').VARSETC\n         LA    R15,C&VAR       *VARIABLE NAME\n         AGO   .VARSETA\n.VARSETC AIF   ('&VTYP' EQ 'R').VARSETR\n         LA    R15,&VAR\n         AGO   .VARSETA\n.VARSETR AIF   ('&VAR'(2,2) EQ '15').VARSETA\n         LR    R15,&VAR\n.VARSETA ANOP\n         LA    R0,&VAR\n         LA    R1,VARTYP&A    *VARIABLE TYPE\n         STM   R14,R1,VISPPARM\n         LA    R1,VAR&L       *VARIABLE LENGTH\n         ST    R1,VISPPARM+16\n         OI    VISPPARM+16,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF DEFINE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n         SPACE\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    VDEL  &GRP,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       VDEL MACRO                                VDEL MACRO         *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &DEF(21)\n         LCLA  &GRZ,&GRX\n         LCLC  &LAB\n&LAB     SETC  'VDL&SYSNDX'\n         AIF   (T'&GRP EQ 'O').SETTYP\n         AIF   ('&GRP' EQ 'ALL').DOALL\n&GRZ     SETA  &GRP\n         AGO   .GOTTYP\n.SETTYP  ANOP\n&GRZ     SETA  0\n.GOTTYP  ANOP\n&GRX     SETA  &GRZ+1\n         AIF   (NOT &DEF(&GRX)).NODEL\n&NAME    TM    GENGRP+&GRX-1,X'80'\n         BZ    &LAB\n         XI    GENGRP+&GRX-1,X'80'\n         LA    R14,VDELETE    *REMOVE VARIABLES FROM SPF\n         LA    R15,CNDLST&GRZ\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF DELETE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG1\n         BH    DSMERR\n.NOMSG1  ANOP\n&LAB     DS    0H\n         AGO   .NODEL\n.DOALL   ANOP\n&NAME    LA    R14,VDELETE    *REMOVE VARIABLES FROM SPF\n         ST    R14,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R2,21\n         LA    R3,CNDLST\n&LAB.R   LCR   R15,R2\n         LA    R15,GENGRP+21(R15)\n         TM    0(R15),X'80'\n         BZ    &LAB\n         XI    0(R15),X'80'\n         L     R15,0(0,R3)\n         STCM  R15,7,VISPPARM+5\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF REMOVE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n&LAB     LA    R3,4(0,R3)\n         BCT   R2,&LAB.R\n.NODEL   ANOP\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    VRESET &GRP,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       VRESET MACRO                              VRESET MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,VRESET  *REMOVE VARIABLES FROM SPF\n         ST    R14,VISPPARM\n         OI    VISPPARM,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF RESET  FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    VGET  &GRP,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       VGET MACRO                                VGET MACRO         *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &GET(21),&SHR(21),&DEF(21),&GRPT\n         GBLA  &TGRP,&MAXP\n         LCLA  &GRZ,&GRX,&GRXX,&GRXY\n         LCLC  &LAB\n&LAB     SETC  'VGT&SYSNDX'\n         AIF   (T'&GRP EQ 'O').SETTYP\n&GRZ     SETA  &GRP\n         AGO   .GOTTYP\n.SETTYP  ANOP\n&GRZ     SETA  0\n.GOTTYP  ANOP\n&GRX     SETA  &GRZ+1\n         AIF   (NOT &GRPT).NOGTST\n&GRPT    SETB  0\n         AIF   (&TGRP EQ &GRX).NOGTST\n&GRXX    SETA  &GRX-1\n&GRXY    SETA  &TGRP-1\n         MNOTE 4,'GROUP CHANGE FROM &GRXY TO &GRXX '\n.NOGTST  ANOP\n         AIF   (&GRX LE &MAXP).DUNGRP\n&MAXP    SETA  &GRX\n.DUNGRP  ANOP\n         AIF   (NOT &DEF(&GRX)).NOGT\n&NAME    DS    0H\n         AIF   (NOT &SHR(&GRX)).NOSH\n         LA    R14,VGET       *GET VARIABLES FROM SHARED VARIABLE POOL\n         LA    R15,CSLIST&GRZ\n         LA    R0,CSHR\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF GET FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOSH\n         BH    DSMERR\n.NOSH    ANOP\n         AIF   (NOT &GET(&GRX)).NOGT\n         TM    GENGRP+&GRX-1,X'40'\n         BO    &LAB\n         OI    GENGRP+&GRX-1,X'40'\n         LA    R14,VGET       *GET VARIABLES FROM SPF PROFILE\n         LA    R15,CPLIST&GRZ\n         LA    R0,CPROF\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF GET FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n&LAB     DS    0H\n.NOGT    ANOP\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    VPUT  &GRP,&ERROR=YES,&POOL=PROF\n.**********************************************************************\n.*                                                                    *\n.*       VPUT MACRO                                VPUT MACRO         *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &GRZ,&GRX\n         LCLC  &LAB\n         GBLB  &GET(21)\n&LAB     SETC  'VPT&SYSNDX'\n         AIF   (T'&GRP EQ 'O').SETTYP\n         AIF   ('&GRP' EQ 'ALL').DOALL\n&GRZ     SETA  &GRP\n         AGO   .GOTTYP\n.SETTYP  ANOP\n&GRZ     SETA  0\n.GOTTYP  ANOP\n&GRX     SETA  &GRZ+1\n         AIF   (NOT &GET(&GRX)).NOPT\n&NAME    DS    0H\n         LA    R14,VPUT       *PUT VARIABLES INTO &POOL POOL\n         LA    R15,CPLIST&GRZ\n         LA    R0,C&POOL\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF PUT FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOPT\n         BH    DSMERR\n         AGO   .NOPT\n.DOALL   ANOP\n&NAME    LA    R14,VPUT       *PUT VARIABLES INTO SPF PROFILE\n         LA    R0,CPROF\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         LA    R2,21\n         LA    R3,CPLIST\n&LAB.R   LCR   R15,R2\n         LA    R15,GENGRP+21(R15)\n         TM    0(R15),X'40'\n         BZ    &LAB\n         XI    0(R15),X'40'\n         L     R15,0(0,R3)\n         ST    R15,VISPPARM+4\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF PUT FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n&LAB     LA    R3,4(0,R3)\n         BCT   R2,&LAB.R\n.NOPT    ANOP\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    BUILDG &VAR,&T,&GRP,&LEN=,&TYP=,&LAST=N,&EQU=,&ORG=\n.**********************************************************************\n.*                                                                    *\n.*       BUILDG MACRO                              BUILDG MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLC  &GKEYS,&GNAMES\n         GBLB  &GK,&GN,&GO\n         GBLA  &GOLEN\n         AIF   (&GK).B030\n         AIF   ('&GKEYS' NE '').B010\n&GKEYS   SETC  '(&VAR'\n         AGO   .B020\n.B010    ANOP\n&GKEYS   SETC  '&GKEYS.,&VAR'\n.B020    ANOP\n         AIF   ('&LAST'(1,1) NE 'Y').B060\n&GKEYS   SETC  '&GKEYS.)'\n&GK      SETB  1\n         AGO   .B060\n.B030    ANOP\n         AIF   (&GN).B060\n         AIF   ('&GNAMES' NE '').B040\n&GNAMES  SETC  '(&VAR'\n         AGO   .B050\n.B040    ANOP\n&GNAMES  SETC  '&GNAMES.,&VAR'\n.B050    ANOP\n         AIF   ('&LAST'(1,1) NE 'Y').B060\n&GNAMES  SETC  '&GNAMES.)'\n&GN      SETB  1\n.B060    ANOP\n         AIF   (T'&ORG EQ 'O').B070\n         AIF   ('&ORG'(1,1) EQ '*').B070\n&GO      SETB  1\n.B070    ANOP\n         AIF   (NOT &GO).B080\n&GOLEN   SETA  &GOLEN+&LEN\n.B080    ANOP\n         AIF   (T'&ORG EQ 'O').B999\n         AIF   ('&ORG'(1,1) NE '*').B999\n&GO      SETB  0\n.B999    ANOP\n         MEND\n*\n         MACRO\n&NAME    DEFINE &VAR,&T,&GRP,&LEN=,&TYP=,&LAST=N,&EQU=,&ORG=\n         LCLC  &LN\n.**********************************************************************\n.*                                                                    *\n.*       DEFINE MACRO                              DEFINE MACRO       *\n.*                                                                    *\n.**********************************************************************\n         AIF   (T'&EQU EQ 'O').D020\n&LN      SETC  ' '\n         AIF   (T'&LEN EQ 'O').D010\n&LN      SETC  ',&LEN'\n.D010    ANOP\n&VAR     EQU   &EQU&LN\n         AGO   .D999\n.D020    ANOP\n         AIF   (T'&ORG EQ 'O').D030\n         AIF   ('&ORG'(1,1) EQ '*').D030\n         ORG   &ORG\n.D030    ANOP\n&VAR     DS    &TYP.L&LEN\n         AIF   (T'&ORG EQ 'O').D999\n         AIF   ('&ORG'(1,1) NE '*').D999\n         ORG\n.D999    ANOP\n         MEND\n*\n         MACRO\n&NAME    EDIT  &DSN,&VOL,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       EDIT MACRO                                EDIT MACRO         *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &ED\n&ED      SETB  1\n&NAME    LA    R14,EDIT       *INVOKE EDIT\n         LA    R15,&DSN\n         AIF   (T'&VOL EQ 'O').NOVOL\n         LA    R0,&VOL\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.NOVOL   ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF EDIT\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    BROWSE &DSN,&VOL,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       BROWSE MACRO                              BROWSE MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &BR\n&BR      SETB  1\n&NAME    LA    R14,BROWSE     *INVOKE BROWSE\n         LA    R15,&DSN\n         AIF   (T'&VOL EQ 'O').NOVOL\n         LA    R0,&VOL\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.NOVOL   ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF BROWSE\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n         MACRO\n&NAME    LOG &MSG,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       LOG MACRO                                 LOG MACRO          *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NMM\n         GBLB  &FT\n         GBLC  &XMSG(100)\n         LCLA  &C\n         AIF   (T'&MSG EQ 'O').NOMSG\n&C       SETA  1\n.NDUPM   AIF   ('&MSG' EQ '&XMSG(&C)').DUPMES\n&C       SETA  &C+1\n         AIF   (&C LE &NMM).NDUPM\n&NMM     SETA  &NMM+1\n&XMSG(&NMM) SETC '&MSG'\n.DUPMES  ANOP\n&NAME    LA    R14,LOG        *INVOKE LOG\n         LA    R15,&MSG\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF LOG\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n.NOMSG   MNOTE 12,'MSGID MISSING'\n         MEND\n*\n         MACRO\n&NAME    CONTROL &TYPE,&MODE,&LINE,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       CONTROL MACRO                             CONTROL MACRO      *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,CONTROL    *SWITCH SPF DISPLAY MODES\n         AIF   ('&TYPE' EQ 'DISPLAY').DODISP\n         AIF   ('&TYPE' EQ 'ERRORS').DOERR\n         AIF   ('&TYPE' EQ 'NONDISPL').DONDSP\n         AIF   ('&TYPE' EQ 'SPLIT').DOSPLT\n         MNOTE 12,'INVALID TYPE - &TYPE '\n         MEXIT\n.DOERR   ANOP\n         LA    R15,ERRORS\n         AIF   ('&MODE' EQ 'CANCEL').SETSPL\n         AIF   ('&MODE' EQ 'RETURN').SETSPL\n         MNOTE 12,'INVALID ERRORS - &MODE '\n         MEXIT\n.DONDSP  ANOP\n         LA    R15,NONDISPL\n         AIF   ('&MODE' EQ 'ENTER').SETSPL\n         AIF   ('&MODE' EQ 'END').SETSPL\n         MNOTE 12,'INVALID NONDISPL - &MODE '\n         MEXIT\n.DOSPLT  ANOP\n         LA    R15,SPLIT\n         AIF   ('&MODE' EQ 'ENABLE').SETSPL\n         AIF   ('&MODE' EQ 'DISABLE').SETSPL\n         MNOTE 12,'INVALID SPLIT - &MODE '\n         MEXIT\n.SETSPL  ANOP\n         LA    R0,&MODE\n         AGO   .SPRM\n.DODISP  ANOP\n         LA    R15,DISPLAY\n         AIF   ('&MODE' EQ 'LINE').LINE\n         AIF   ('&MODE' EQ 'REFRESH').REFRESH\n         AIF   ('&MODE' EQ 'LOCK').LOCK\n         AIF   ('&MODE' EQ 'SAVE').SAVE\n         AIF   ('&MODE' EQ 'RESTORE').RESTORE\n         AIF   ('&MODE' EQ 'SM').SM\n         MNOTE 12,'INVALID MODE - &MODE '\n         MEXIT\n.LOCK    ANOP\n.SAVE    ANOP\n.RESTORE ANOP\n.REFRESH AIF   (T'&LINE EQ 'O').LINE\n         MNOTE 12,'LINE NUMBER INVALID WITH MODE= &MODE '\n         MEXIT\n.LINE    ANOP\n.SM      ANOP\n         LA    R0,&MODE\n         AIF   (T'&LINE NE 'O').DOLIN\n.SPRM    ANOP\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.DOLIN   ANOP\n         INVLEN &LINE\n         LA    R1,VAR&LINE\n         STM   R14,R1,VISPPARM\n         OI    VISPPARM+12,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF CONTROL FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOGT    ANOP\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBCREATE &TAB,&KEYS,&FORMAT,&OPT,&REP,&ERROR=YES,&LIB=\n.**********************************************************************\n.*                                                                    *\n.*       TBCREATE MACRO                            TBCREATE MACRO     *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NT\n         GBLB  &TB\n         GBLC  &XTAB(100),&XTABN(100),&XTABK(100)\n         LCLA  &C\n         AIF   (&NT LT 1).NOTAB\n&C       SETA  1\n.NDUP    AIF   ('&TAB' EQ '&XTAB(&C)').DUPTAB\n&C       SETA  &C+1\n         AIF   (&C LE &NT).NDUP\n.NOTAB   ANOP\n&NT      SETA  &NT+1\n&TB      SETB  1\n&XTAB(&NT)  SETC '&TAB'\n.DUPTAB  ANOP\n&NAME    LA    R14,TBCREATE   *CREATE NEW SPF TABLE\n         MNOTE *,'TABLE NAME - &TAB, NAME LIST AT C&TAB.N'\n         LA    R15,C&TAB      *TABLE NAME\n         AIF   (T'&KEYS NE 'O').KEYTHER\n         SR    R0,R0          *NO KEYS\n         AGO   .AFKY\n.KEYTHER ANOP\n         LA    R0,C&TAB.K\n&XTABK(&NT) SETC '&KEYS'\n.AFKY    ANOP\n         LA    R1,C&TAB.N     *NAME LIST\n&XTABN(&NT) SETC '&FORMAT'\n         STM   R14,R1,VISPPARM\n         AIF   (T'&OPT NE 'O').OPTHER\n         LA    R1,WRITE       *DEFAULT WRITE TABLE AT END\n         AGO   .OPTSET\n.OPTHER  ANOP\n         AIF   ('&OPT' EQ 'WRITE' OR '&OPT' EQ 'NOWRITE').WROK\n         MNOTE 12,'INVALID WRITE/NOWRITE - &OPT'\n         MEXIT\n.WROK    ANOP\n         LA    R1,&OPT        *SET  OPTION\n.OPTSET  ANOP\n         ST    R1,VISPPARM+16\n         AIF   (T'&REP NE 'O').REPTHER\n         AIF   (T'&LIB NE 'O').ENREP\n         OI    VISPPARM+16,128\n         AGO   .ENREP\n.REPTHER ANOP\n         AIF   ('&REP' EQ 'REPLACE').REPOK\n         MNOTE 12,'INVALID REPLACE - &REP'\n         MEXIT\n.REPOK   ANOP\n         LA    R1,&REP\n         ST    R1,VISPPARM+20\n         AIF   (T'&LIB NE 'O').ENREP\n         OI    VISPPARM+20,128\n.ENREP   ANOP\n         AIF   (K'&LIB NE 1).NLIB1\n         MVI   LIBRARY+6,C'&LIB'\n.NLIB1   ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBCREATE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBOPEN &TAB,&OPT,&ERROR=YES,&LIB=\n.**********************************************************************\n.*                                                                    *\n.*       TBOPEN   MACRO                            TBOPEN   MACRO     *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NT\n         GBLB  &TB\n         GBLC  &XTAB(100)\n         LCLA  &C\n         AIF   (&NT LT 1).NOTAB\n&C       SETA  1\n.NDUP    AIF   ('&TAB' EQ '&XTAB(&C)').DUPTAB\n&C       SETA  &C+1\n         AIF   (&C LE &NT).NDUP\n.NOTAB   ANOP\n&NT      SETA  &NT+1\n&TB      SETB  1\n&XTAB(&NT)  SETC '&TAB'\n.DUPTAB  ANOP\n&NAME    LA    R14,TBOPEN\n         LA    R15,C&TAB\n         AIF   (T'&OPT EQ 'O').NOOPT\n         AIF   ('&OPT' EQ 'WRITE' OR '&OPT' EQ 'NOWRITE').WROK\n         MNOTE 12,'INVALID WRITE/NOWRITE - &OPT'\n         MEXIT\n.WROK    ANOP\n         LA    R0,&OPT\n         STM   R14,R0,VISPPARM\n         AIF   (T'&LIB NE 'O').MLIB\n         OI    VISPPARM+8,128\n         AGO   .CALLDSP\n.NOOPT   ANOP\n         STM   R14,R15,VISPPARM\n         AIF   (T'&LIB NE 'O').MLIB\n         OI    VISPPARM+4,128\n         AGO   .CALLDSP\n.MLIB    ANOP\n         MVC   VISPPARM+12(4),VISPPARM+24\n.CALLDSP ANOP\n         AIF   (K'&LIB NE 1).NLIB2\n         MVI   LIBRARY+6,C'&LIB'\n.NLIB2   ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBOPEN FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBERASE &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBERASE MACRO                            TBERASE MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBERASE\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBERASE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBEND &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBEND MACRO                                TBEND MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBEND\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBEND FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBCLOSE &TAB,&COPY,&ALT,&PAD,&ERROR=YES,&LIB=\n.**********************************************************************\n.*                                                                    *\n.*       TBCLOSE MACRO                            TBCLOSE MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBCLOSE\n         LA    R15,C&TAB\n         AIF   (T'&COPY NE 'O').COPYHER\n         LA    R0,CBLNK\n         AGO   .COPYSET\n.COPYHER ANOP\n         AIF   ('&COPY' EQ 'NEWCOPY' OR '&COPY' EQ 'REPLCOPY').WROK\n         MNOTE 12,'INVALID NEWCOPY/REPLCOPY - &COPY'\n         MEXIT\n.WROK    ANOP\n         LA    R0,&COPY       *SET  COPY OPTION\n.COPYSET ANOP\n         AIF   (T'&ALT NE 'O').ALTHER\n         LA    R1,CBLNK\n         AGO   .ALTSET\n.ALTHER ANOP\n         LA    R1,&ALT        *SET  ALT OPTION\n.ALTSET ANOP\n         STM   R14,R1,VISPPARM\n         AIF   (T'&PAD EQ 'O').NOPAD\n         AIF   (T'&PAD EQ 'N').REALPAD\n         LA    R0,&PAD\n         AGO   .STPRM\n.REALPAD ANOP\n         INVLEN &PAD\n         LA    R0,VAR&PAD\n.STPRM   ANOP\n         ST    R0,VISPPARM+16\n         AIF   (T'&LIB NE 'O').LIBM\n         OI    VISPPARM+16,128\n         AGO   .CALS\n.NOPAD   ANOP\n         AIF   (T'&LIB NE 'O').LIBM\n         OI    VISPPARM+12,128\n         AGO   .CALS\n.LIBM    ANOP\n         MVC   VISPPARM+20(4),VISPPARM+24\n.CALS    ANOP\n         AIF   (K'&LIB NE 1).NLIB3\n         MVI   LIBRARY+6,C'&LIB'\n.NLIB3   ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBCLOSE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBSAVE &TAB,&COPY,&ALT,&PAD,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBSAVE MACRO                              TBSAVE MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBSAVE\n         LA    R15,C&TAB\n         AIF   (T'&COPY NE 'O').COPYHER\n         LA    R0,CBLNK\n         AGO   .COPYSET\n.COPYHER ANOP\n         AIF   ('&COPY' EQ 'NEWCOPY' OR '&COPY' EQ 'REPLCOPY').WROK\n         MNOTE 12,'INVALID NEWCOPY/REPLCOPY - &COPY'\n         MEXIT\n.WROK    ANOP\n         LA    R0,&COPY       *SET  COPY OPTION\n.COPYSET ANOP\n         AIF   (T'&ALT NE 'O').ALTHER\n         LA    R1,CBLNK\n         AGO   .ALTSET\n.ALTHER ANOP\n         LA    R1,&ALT        *SET  ALT OPTION\n.ALTSET ANOP\n         STM   R14,R1,VISPPARM\n         AIF   (T'&PAD EQ 'O').NOPAD\n         AIF   (T'&PAD EQ 'N').REALPAD\n         LA    R0,&PAD\n         AGO   .STPRM\n.REALPAD ANOP\n         INVLEN &PAD\n         LA    R0,VAR&PAD\n.STPRM   ANOP\n         ST    R0,VISPPARM+16\n         OI    VISPPARM+16,128\n         AGO   .CALS\n.NOPAD   ANOP\n         OI    VISPPARM+12,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBSAVE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBSARG &TAB,&ARG,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBSARG MACRO                              TBSARG MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBSARG\n         LA    R15,C&TAB\n         AIF   (T'&ARG EQ 'O').NOARG\n         LA    R0,C&ARG\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.NOARG   ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBSARG FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBSCAN &TAB,&ARG,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBSCAN MACRO                              TBSCAN MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBSCAN\n         LA    R15,C&TAB\n         AIF   (T'&ARG EQ 'O').NOARG\n         LA    R0,C&ARG\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.NOARG   ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBSCAN FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBSKIP &TAB,&NUM,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBSKIP MACRO                              TBSKIP MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBSKIP\n         LA    R15,C&TAB\n         AIF   (T'&NUM EQ 'O').NONUM\n         AIF   (T'&NUM EQ 'N').REALNUM\n         LA    R0,&NUM\n         AGO   .STPRM\n.REALNUM ANOP\n         INVLEN &NUM\n         LA    R0,VAR&NUM\n.STPRM   ANOP\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.NONUM   ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBSKIP FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBPUT &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBPUT MACRO                                TBPUT MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBPUT\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBPUT FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBADD &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBADD MACRO                                TBADD MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBADD\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBADD FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBMOD &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBMOD MACRO                                TBMOD MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBMOD\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBMOD FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBEXIST &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBEXIST MACRO                              TBEXIST MACRO     *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBEXIST\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBEXIST FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBTOP &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBTOP MACRO                                TBTOP MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBTOP\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBTOP FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBBOTTOM &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBBOTTOM MACRO                          TBBOTTOM MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBBOTTOM\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBBOTTOM FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBDELETE &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBDELETE MACRO                          TBDELETE MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBDELETE\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBDELETE FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBVCLEAR &TAB,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBVCLEAR MACRO                             TBVCLEAR MACRO    *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,TBVCLEAR\n         LA    R15,C&TAB\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBVCLEAR FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    DISPLAY &PANEL,&MSG,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       DISPLAY MACRO                             DISPLAY MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NP,&NM,&NMM\n         GBLC  &XPAN(100),&XMSG(100),&VTYP\n         LCLA  &C\n         VTYP  &PANEL\n         AIF   ('&VTYP' NE 'C').DUPPAN\n         AIF   (&NP LT 1).NOPAN\n&C       SETA  1\n.NDUP    AIF   ('&PANEL' EQ '&XPAN(&C)').DUPPAN\n&C       SETA  &C+1\n         AIF   (&C LE &NP).NDUP\n.NOPAN   ANOP\n&NP      SETA  &NP+1\n&XPAN(&NP)  SETC '&PANEL'\n.DUPPAN  ANOP\n&NAME    LA    R14,DISPLAY\n         AIF   ('&VTYP' NE 'C').PANSETC\n         LA    R15,C&PANEL\n         AGO   .PANSETA\n.PANSETC AIF   ('&VTYP' EQ 'R').PANSETR\n         LA    R15,&PANEL\n         AGO   .PANSETA\n.PANSETR AIF   ('&PANEL'(2,2) EQ '15').PANSETA\n         LR    R15,&PANEL\n.PANSETA ANOP\n         AIF   (T'&MSG EQ 'O').NOMSG\n&C       SETA  1\n.NDUPM   AIF   ('&MSG' EQ '&XMSG(&C)').DUPMES\n&C       SETA  &C+1\n         AIF   (&C LE &NMM).NDUPM\n&NMM     SETA  &NMM+1\n&XMSG(&NMM) SETC '&MSG'\n.DUPMES  ANOP\n         LA    R0,&MSG\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALLDSP\n.NOMSG   ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALLDSP ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF DISPLAY FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n         AIF   (T'&MSG EQ 'O').NOMSG2\n         VMSG  &MSG,BLANK\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    TBDISPL &TAB,&PANEL,&MSG,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       TBDISPL MACRO                             TBDISPL MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NP,&NM,&NMM\n         GBLC  &XPAN(100),&XMSG(100),&VTYP\n         LCLA  &C\n         AIF   (T'&PANEL NE 'O').PROCPAN\n&VTYP    SETC  'O'\n         AGO   .DUPPAN\n.PROCPAN VTYP  &PANEL\n         AIF   ('&VTYP' NE 'C').DUPPAN\n         AIF   (&NP LT 1).NOPAN\n&C       SETA  1\n.NDUP    AIF   ('&PANEL' EQ '&XPAN(&C)').DUPPAN\n&C       SETA  &C+1\n         AIF   (&C LE &NP).NDUP\n.NOPAN   ANOP\n&NP      SETA  &NP+1\n&XPAN(&NP)  SETC '&PANEL'\n.DUPPAN  ANOP\n&NAME    LA    R14,TBDISPL\n         LA    R15,C&TAB\n         AIF   ('&VTYP' EQ 'O').NOPAN2\n         AIF   ('&VTYP' NE 'C').TABPC\n         LA    R0,C&PANEL\n         AGO   .TABPA\n.TABPC   AIF   ('&VTYP' EQ 'R').TABPR\n         LA    R0,&PANEL\n         AGO   .TABPA\n.TABPR   AIF   ('&PANEL'(2,2) EQ 'R0').TABPA\n         LR    R0,&PANEL\n.TABPA   ANOP\n         AIF   (T'&MSG EQ 'O').NOMSG\n&C       SETA  1\n.NDUPM   AIF   ('&MSG' EQ '&XMSG(&C)').DUPMES\n&C       SETA  &C+1\n         AIF   (&C LE &NMM).NDUPM\n&NMM     SETA  &NMM+1\n&XMSG(&NMM) SETC '&MSG'\n.DUPMES  ANOP\n         LA    R1,&MSG\n         STM   R14,R1,VISPPARM\n         OI    VISPPARM+12,128\n         AGO   .CALLDSP\n.NOPAN2  ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         AGO   .CALLDSP\n.NOMSG   ANOP\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n.CALLDSP ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF TBDISPL FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n         AIF   (T'&MSG EQ 'O').NOMSG2\n         VMSG  &MSG,BLANK\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n         VGEN  &TYP,&DSECT=NO\n.**********************************************************************\n.*                                                                    *\n.*       VGEN MACRO                                   VGEN MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NL,&NV,&NG,&NT,&NP,&NM,&NMM,&NS,&NDATA,&NNODEF\n         GBLA  &XL(200),&XGRP(200),&MAXP,&MAXD\n         GBLB  &GET(21),&DEF(21),&TB,&MS,&ED,&BR,&SHR(21),&FT,&MDEF\n         GBLB  &MGET,&MSHR,&X\n         GBLC  &XVAR(200),&XGET(200),&XTAB(100),&XTABN(100),&XTABK(100)\n         GBLC  &XPAN(100),&XMSGID(100),&XMSG(100),&XDATA(200)\n         GBLC  &XNODEF(200),&XSHR(200)\n         LCLA  &C,&L,&D,&I,&J,&N,&LL\n         LCLC  &VAR,&TL,&TLL\n&X       SETB  0\n         AIF   (NOT &MDEF).OUT\n         AIF   ('&TYP' EQ 'DATA').GENCAL\n         SPACE\nVISPLINK DC    V(ISPLINK)\nVISPEXEC DC    V(ISPEXEC)\n         SPACE\n.*\n.*       GENERATE VARIABLE NAMES FOR PUT\n.*\n&N       SETA  1\nCPLIST   DS    0F\n.PGRP    AIF   (&GET(&N) EQ 0).POGRP\n&I       SETA  &N-1\n         DC    A(CPLIST&I)\n         AGO   .UPPG\n.POGRP   ANOP\n         DC    A(0)\n.UPPG    ANOP\n&N       SETA  &N+1\n         AIF   (&N LE &MAXP).PGRP\n.*\n.*       GENERATE VARIABLE NAMES FOR DELETE\n.*\n&N       SETA  1\n         SPACE\nCNDLST   DS    0F\n.EGRP    AIF   (&DEF(&N) EQ 0).DEGRP\n&I       SETA  &N-1\n         DC    A(CNDLST&I)\n         AGO   .UPDG\n.DEGRP   ANOP\n         DC    A(0)\n.UPDG    ANOP\n&N       SETA  &N+1\n         AIF   (&N LE &MAXD).EGRP\n         SPACE\nVARTYPC  DC    CL8'CHAR'\nVARTYPF  DC    CL8'FIXED'\nVARTYPB  DC    CL8'BIT'\nVARTYPX  DC    CL8'HEX'\n         SPACE\nVDEFINE  DC    CL8'VDEFINE'\nVDELETE  DC    CL8'VDELETE'\nVRESET   DC    CL8'VRESET'\nSELECT   DC    CL8'SELECT'\nSETMSG   DC    CL8'SETMSG'\nLOG      DC    CL8'LOG'\n         AIF   (NOT &MGET).NGETD\nVGET     DC    CL8'VGET'\nVPUT     DC    CL8'VPUT'\nCPROF    DC    CL8'PROFILE'\nCSHR     DC    CL8'SHARED'\n.NGETD   AIF   (NOT &BR).NOBR\nBROWSE   DC    CL8'BROWSE'\n.NOBR    AIF   (NOT &ED).NOED\nEDIT     DC    CL8'EDIT'\n.NOED    AIF   (NOT &TB).NOTABS\nTBADD    DC    CL8'TBADD'\nTBBOTTOM DC    CL8'TBBOTTOM'\nTBCLOSE  DC    CL8'TBCLOSE'\nTBCREATE DC    CL8'TBCREATE'\nTBDELETE DC    CL8'TBDELETE'\nTBVCLEAR DC    CL8'TBVCLEAR'\nTBDISPL  DC    CL8'TBDISPL'\nTBEND    DC    CL8'TBEND'\nTBERASE  DC    CL8'TBERASE'\nTBGET    DC    CL8'TBGET'\nTBMOD    DC    CL8'TBMOD'\nTBOPEN   DC    CL8'TBOPEN'\nTBPUT    DC    CL8'TBPUT'\nTBSAVE   DC    CL8'TBSAVE'\nTBSCAN   DC    CL8'TBSCAN'\nTBSARG   DC    CL8'TBSARG'\nTBEXIST  DC    CL8'TBEXIST'\nTBSKIP   DC    CL8'TBSKIP'\nTBSORT   DC    CL8'TBSORT'\nTBTOP    DC    CL8'TBTOP'\nNEWCOPY  DC    CL8'NEWCOPY'\nREPLCOPY DC    CL8'REPLCOPY'\n.NOTABS  AIF   (NOT &FT).NOFT\nFTCLOSE  DC    CL8'FTCLOSE'\nFTERASE  DC    CL8'FTERASE'\nFTINCL   DC    CL8'FTINCL'\nFTOPEN   DC    CL8'FTOPEN'\nCTEMP    DC    CL8'TEMP'\nNOFT     DC    CL8'NOFT'\n.NOFT    ANOP\n         SPACE\nCBLNK    DC    CL8' '\nCTLD     DC    C'TLD'\nCISPF    DC    C'ISPF'\nISPQRY   DC    CL8'ISPQRY'\nDISPLAY  DC    CL8'DISPLAY'\nCONTROL  DC    CL8'CONTROL'\nLINE     DC    CL8'LINE'\nLOCK     DC    CL8'LOCK'\nSM       DC    CL8'SM'\nSAVE     DC    CL8'SAVE'\nRESTORE  DC    CL8'RESTORE'\nREFRESH  DC    CL8'REFRESH'\nREPLACE  DC    CL8'REPLACE'\nWRITE    DC    CL8'WRITE'\nNOWRITE  DC    CL8'NOWRITE'\nNONDISPL DC    CL8'NONDISPL'\nENTER    DC    CL8'ENTER'\nEND      DC    CL8'END'\nERRORS   DC    CL8'ERRORS'\nCANCEL   DC    CL8'CANCEL'\nRETURN   DC    CL8'RETURN'\nSPLIT    DC    CL8'SPLIT'\nENABLE   DC    CL8'ENABLE'\nDISABLE  DC    CL8'DISABLE'\n         SPACE\n.*\n.*\n.*       SORT XDATA\n.*\n         AIF   (&NDATA EQ 0).SRT1X\n         AIF   (&NDATA EQ 1).SRT1N\n&C       SETA  1\n.SRT1O   ANOP\n&TL      SETC  '&XDATA(&C)'\n&D       SETA  &C+1\n.SRT1I   ANOP\n         AIF   ('&TL' LT '&XDATA(&D)').SRT1C\n&TLL     SETC  '&TL'\n&TL      SETC  '&XDATA(&D)'\n&XDATA(&D) SETC '&TLL'\n.SRT1C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NDATA).SRT1I\n&XDATA(&C) SETC '&TL'\n&C       SETA  &C+1\n         AIF   (&C LT &NDATA).SRT1O\n.SRT1N   ANOP\n.*\n&C       SETA  1\n&D       SETA  1\n.XDATT   ANOP\n         AIF   ('&XDATA(&C)' LT '&XPAN(&D)').XDATI\n         AIF   ('&XDATA(&C)' EQ '&XPAN(&D)').XDATM\n&D       SETA  &D+1\n         AIF   (&D LE &NP).XDATT\n.XDATI   MNOTE 12,'INVALID XDATA - &XDATA(&C)'\n         MEXIT\n.XDATM   ANOP\n&C       SETA  &C+1\n         AIF   (&C GT &NDATA).SRT1X\n&D       SETA  &D+1\n         AIF   (&D GT &NP).XDATI\n         AGO   .XDATT\n.SRT1X   ANOP\n.*\n.*       SORT XNODEF\n.*\n         AIF   (&NNODEF EQ 0).SRT2X\n         AIF   (&NNODEF EQ 1).SRT2N\n&C       SETA  1\n.SRT2O   ANOP\n&TL      SETC  '&XNODEF(&C)'\n&D       SETA  &C+1\n.SRT2I   ANOP\n         AIF   ('&TL' LT '&XNODEF(&D)').SRT2C\n&TLL     SETC  '&TL'\n&TL      SETC  '&XNODEF(&D)'\n&XNODEF(&D) SETC '&TLL'\n.SRT2C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NNODEF).SRT2I\n&XNODEF(&C) SETC '&TL'\n&C       SETA  &C+1\n         AIF   (&C LT &NNODEF).SRT2O\n.SRT2N   ANOP\n&C       SETA  1\n&D       SETA  1\n.XNDT    AIF   ('&XNODEF(&C)' LT '&XPAN(&D)').XNDI\n         AIF   ('&XNODEF(&C)' EQ '&XPAN(&D)').XNDM\n&D       SETA  &D+1\n         AIF   (&D LE &NP).XNDT\n.XNDI    MNOTE 12,'INVALID XNODEF - &XNODEF(&C)'\n         MEXIT\n.XNDM    ANOP\n&C       SETA  &C+1\n         AIF   (&C GT &NDATA).SRT2X\n&D       SETA  &D+1\n         AIF   (&D GT &NP).XNDI\n         AGO   .XNDT\n.SRT2X   ANOP\n.*\n.*       SORT PANEL NAMES\n.*\n         AIF   (&NP LE 1).SRT5N\n&C       SETA  1\n.SRT5O   ANOP\n&TL      SETC  '&XPAN(&C)'\n&D       SETA  &C+1\n.SRT5I   ANOP\n         AIF   ('&TL' LT '&XPAN(&D)').SRT5C\n&TLL     SETC  '&TL'\n&TL      SETC  '&XPAN(&D)'\n&XPAN(&D) SETC '&TLL'\n.SRT5C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NP).SRT5I\n&XPAN(&C) SETC '&TL'\n&C       SETA  &C+1\n         AIF   (&C LT &NP).SRT5O\n.SRT5N   ANOP\n.*\n.*       GENERATE PANEL NAMES\n.*\n&C       SETA  1\n&I       SETA  1\n&J       SETA  1\n.NPAN    AIF   (&C GT &NP).ENPAN\n&VAR     SETC  '&XPAN(&C)'\n         AIF   (&I GT &NDATA).DATOK\n         AIF   ('&VAR' LT '&XDATA(&I)').DATOK\n&I       SETA  &I+1\n         AGO   .MDATA\n.DATOK   ANOP\nC&VAR    DC    CL8'&VAR'\n.MDATA   ANOP\n&C       SETA  &C+1\n         AGO   .NPAN\n.ENPAN   ANOP\n.*\n.*       GENERATE VARIABLE NAMES FOR RETRIEVAL FROM SHARED POOL\n.*\n         AIF   (NOT &MSHR).NOSHRX\n&N       SETA  1\n.MGRP    AIF   (&SHR(&N) EQ 0).MOGRP\n&I       SETA  &N-1\n         SPACE\nCSLIST&I DC    C'('\n&I       SETA  1\n&J       SETA  1\n.MXL     ANOP\n&TL      SETC  '&XSHR(&I)'\n.MXJ     AIF   ('&TL' EQ '&XVAR(&J)').MTGRP\n&J       SETA  &J+1\n         AGO   .MXJ\n.MTGRP   AIF   (&XGRP(&J) NE &N).MDGRP\n         DC    C'&TL '\n.MDGRP   ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &NS).MXL\n         DC    C')'\n.MOGRP   ANOP\n&N       SETA  &N+1\n         AIF   (&N LE 21).MGRP\n.NOSHRX  ANOP\n.*\n.*       GENERATE VARIABLE NAMES FOR RETRIEVAL FROM PROFILE\n.*\n         AIF   (NOT &MGET).NOGETX\n&N       SETA  1\n.NGRP    AIF   (&GET(&N) EQ 0).NOGRP\n&I       SETA  &N-1\n         SPACE\n         ACTR  30000\nCPLIST&I DC    C'('\n&I       SETA  1\n.NXL     ANOP\n&TL      SETC  '&XGET(&I)'\n&J       SETA  &I\n.NXJ     AIF   ('&TL' EQ '&XVAR(&J)').TGRP\n&J       SETA  &J+1\n         AGO   .NXJ\n.TGRP    AIF   (&XGRP(&J) NE &N).DGRP\n         DC    C'&TL '\n.DGRP    ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &NG).NXL\n         DC    C')'\n.NOGRP   ANOP\n&N       SETA  &N+1\n         AIF   (&N LE 21).NGRP\n.NOGETX  ANOP\n.*\n.*       SORT VARIABLE NAMES\n.*\n         AIF   (&NV LE 1).SRT7N\n&C       SETA  1\n.SRT7O   ANOP\n&TL      SETC  '&XVAR(&C)'\n&D       SETA  &C+1\n.SRT7I   ANOP\n         AIF   ('&TL' LT '&XVAR(&D)').SRT7C\n&TLL     SETC  '&TL'\n&TL      SETC  '&XVAR(&D)'\n&XVAR(&D) SETC '&TLL'\n&LL      SETA  &XGRP(&C)\n&XGRP(&C) SETA &XGRP(&D)\n&XGRP(&D) SETA &LL\n.SRT7C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NV).SRT7I\n&XVAR(&C) SETC '&TL'\n&C       SETA  &C+1\n         AIF   (&C LT &NV).SRT7O\n.SRT7N   ANOP\n.*\n.*       GENERATE VARIABLE NAMES FOR DEFINE\n.*\n         SPACE\n&C       SETA  1\n.NGENC   ANOP\n&VAR     SETC  '&XVAR(&C)'\nC&VAR    DC    C'(&VAR)'\n&C       SETA  &C+1\n         AIF   (&C LE &NV).NGENC\n.*\n.*       GENERATE VARIABLE NAMES FOR DELETE\n.*\n         ACTR  30000\n&N       SETA  1\n.JGRP    AIF   (&DEF(&N) EQ 0).JOGRP\n&I       SETA  &N-1\n         SPACE\nCNDLST&I DC    C'('\n&I       SETA  1\n.JXL     ANOP\n         AIF   (&XGRP(&I) NE &N).JDGRP\n         DC    C'&XVAR(&I) '\n.JDGRP   ANOP\n&I       SETA  &I+1\n         AIF   (&I LE &NV).JXL\n         DC    C')'\n.JOGRP   ANOP\n&N       SETA  &N+1\n         AIF   (&N LE 21).JGRP\n.*\n.*       SORT NUMBER CONSTANTS\n.*\n         AIF   (&NL LE 1).SRT6N\n&C       SETA  1\n.SRT6O   ANOP\n&L       SETA  &XL(&C)\n&D       SETA  &C+1\n.SRT6I   ANOP\n         AIF   (&L LT &XL(&D)).SRT6C\n&LL      SETA  &L\n&L       SETA  &XL(&D)\n&XL(&D)  SETA &LL\n.SRT6C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NL).SRT6I\n&XL(&C)  SETA &L\n&C       SETA  &C+1\n         AIF   (&C LT &NL).SRT6O\n.SRT6N   ANOP\n.*\n.*       GENERATE NUMBER CONSTANTS\n.*\n&C       SETA  1\n.NGENL   ANOP\n&L       SETA  &XL(&C)\nVAR&L    DC    F'&L'\n&C       SETA  &C+1\n         AIF   (&C LE &NL).NGENL\n         SPACE\n         AIF   (NOT &TB).NTABD\n.*\n.*       SORT TABLE NAMES\n.*\n         AIF   (&NT LE 1).SRT3N\n&C       SETA  1\n.SRT3O   ANOP\n&TL      SETC  '&XTAB(&C)'\n&D       SETA  &C+1\n.SRT3I   ANOP\n         AIF   ('&TL' LT '&XTAB(&D)').SRT3C\n&TLL     SETC  '&TL'\n&TL      SETC  '&XTAB(&D)'\n&XTAB(&D) SETC '&TLL'\n&TLL     SETC  '&XTABN(&C)'\n&XTABN(&C) SETC '&XTABN(&D)'\n&XTABN(&D) SETC '&TLL'\n&TLL     SETC  '&XTABK(&C)'\n&XTABK(&C) SETC '&XTABK(&D)'\n&XTABK(&D) SETC '&TLL'\n.SRT3C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NT).SRT3I\n&XTAB(&C) SETC '&TL'\n&C       SETA  &C+1\n         AIF   (&C LT &NT).SRT3O\n.SRT3N   ANOP\n.*\n.*       GENERATE TABLE NAMES AND FORMATS\n.*\n&C       SETA  1\n.NGENT   ANOP\n&VAR     SETC  '&XTAB(&C)'\nC&VAR    DC    CL8'&VAR'\n         AIF   (K'&XTABK(&C) EQ 0).NOCK\nC&VAR.K  DC    C'&XTABK(&C)'\n.NOCK    ANOP\n         AIF   (K'&XTABN(&C) EQ 0).NOCN\nC&VAR.N  DC    C'&XTABN(&C)'\n.NOCN    ANOP\n&C       SETA  &C+1\n         AIF   (&C LE &NT).NGENT\n         SPACE\n.NTABD   ANOP\n.*\n.*       SORT MESSAGE NUMBERS\n.*\n         AIF   (NOT &MS).NMSGD\n         AIF   (&NM LE 1).SRT4N\n&C       SETA  1\n.SRT4O   ANOP\n&TL      SETC  '&XMSGID(&C)'\n&D       SETA  &C+1\n.SRT4I   ANOP\n         AIF   ('&TL' LT '&XMSGID(&D)').SRT4C\n&TLL     SETC  '&TL'\n&TL      SETC  '&XMSGID(&D)'\n&XMSGID(&D) SETC '&TLL'\n.SRT4C   ANOP\n&D       SETA  &D+1\n         AIF   (&D LE &NM).SRT4I\n&XMSGID(&C) SETC '&TL'\n&C       SETA  &C+1\n         AIF   (&C LT &NM).SRT4O\n.SRT4N   ANOP\n.*\n.*       GENERATE MESSAGE NUMBERS\n.*\n&C       SETA  1\n.NGENM   ANOP\n&VAR     SETC  '&XMSGID(&C)'\nC&VAR    DC    CL8'&VAR'\n&C       SETA  &C+1\n         AIF   (&C LE &NM).NGENM\n.NMSGD   ANOP\n.*\n         AIF   ('&TYP' EQ 'CONSTANTS').OUT\n.*\n.* GENERATE DYNAMIC SECTION OF DATA\n.*\n.GENCAL  ANOP\n         SPACE\nVISPPARM CALL  ,(,,,,,),VL,MF=L\n         DC    A(LIBRARY+X'80000000')\n         SPACE\nLIBRARY  DC    CL8'ISPTABL'\nDMFUNC   DC    CL8' '\nDMRCODE  DC    F'0'\n.*\n.*       GENERATE PANEL NAMES IN DYNAMIC STORAGE\n.*\n&C       SETA  1\n.NDPAN   AIF   (&C GT &NDATA).ENDPN\n&VAR     SETC  '&XDATA(&C)'\nC&VAR    DC    CL8'&VAR'\n&C       SETA  &C+1\n         AGO   .NDPAN\n.ENDPN   ANOP\n         SPACE\n         AIF   (&NMM EQ 0).NOMSI\n.*\n&C       SETA  1\n.NGENMM  ANOP\n&VAR     SETC  '&XMSG(&C)'\n&VAR     DC    CL8' '\n&C       SETA  &C+1\n         AIF   (&C LT &NMM).NGENMM\n.NOMSI   ANOP\nGENGRP   DC    XL21'00'\n         DS    0F\n         SPACE\n.OUT     ANOP\n         MEND\n*\n         MACRO\n&NAME    VLEN  &VAR,&OPT\n.**********************************************************************\n.*                                                                    *\n.*       VLEN MACRO                                  VLEN MACRO       *\n.*                                                                    *\n.**********************************************************************\n         LCLC  &SS\n&SS      SETC  'L'''\n&NAME    LA    R1,&VAR+&SS&VAR-1\n         LA    R14,1\n         LNR   R14,R14\n         LA    R15,&VAR\n         CLI   0(R1),C' '\n         BNE   *+8\n         BXH   R1,R14,*-8\n         AIF   ('&OPT' EQ 'P').OUT\n         SR    R1,R15\n         AIF   ('&OPT' EQ 'X').OUT\n         LA    R1,1(0,R1)\n.OUT     ANOP\n         MEXIT\n         MEND\n*\n         MACRO\n         INVLEN &L\n.**********************************************************************\n.*                                                                    *\n.*       INVLEN MACRO                              INVLEN MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &XL(200)\n         GBLA  &NL\n         LCLA  &C\n&C       SETA  1\n.NLEN    ANOP\n         AIF   (&L EQ &XL(&C)).DUPL\n&C       SETA  &C+1\n         AIF   (&C LE &NL).NLEN\n&XL(&C)  SETA  &L\n&NL      SETA  &C\n.DUPL    MEXIT\n         MEND\n*\n         MACRO\n&NAME    VMSG  &MSG,&MSGID\n.**********************************************************************\n.*                                                                    *\n.*       VMSG MACRO                                VMSG MACRO         *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NM\n         GBLB  &MS\n         GBLC  &XMSGID(100)\n         LCLA  &C\n         AIF   ('&MSGID' EQ 'BLANK').BLKMSG\n         AIF   (&NM LT 1).NOMSG\n&C       SETA  1\n.NDUP    AIF   ('&MSGID' EQ '&XMSGID(&C)').DUPMSG\n&C       SETA  &C+1\n         AIF   (&C LE &NM).NDUP\n.NOMSG   ANOP\n&NM      SETA  &NM+1\n&MS      SETB  1\n&XMSGID(&NM) SETC '&MSGID'\n.DUPMSG  ANOP\n&NAME    MVC   &MSG.(8),C&MSGID\n         MEXIT\n.BLKMSG  ANOP\n&NAME    MVC   &MSG.(8),CBLNK\n         MEXIT\n         MEND\n*\n         MACRO\n&NAME    FTERASE &MEM,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       FTERASE MACRO                             FTERASE MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &FT\n&FT      SETB  1\n&NAME    LA    R14,FTERASE    *INVOKE FTERASE\n         LA    R15,&MEM\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF FTERASE\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    FTCLOSE &MEM,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       FTCLOSE MACRO                             FTCLOSE MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &FT\n&FT      SETB  1\n&NAME    LA    R14,FTCLOSE    *INVOKE FTCLOSE\n         AIF   (T'&MEM EQ 'O').NOMEM\n         LA    R15,&MEM\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         AGO   .CALS\n.NOMEM   ANOP\n         ST    R14,VISPPARM\n         OI    VISPPARM,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF FTCLOSE\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    FTOPEN &T,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       FTOPEN MACRO                              FTOPEN MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &FT\n&FT      SETB  1\n&NAME    LA    R14,FTOPEN     *INVOKE FTOPEN\n         AIF   (T'&T EQ 'O').NOTMP\n         LA    R15,CTEMP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         AGO   .CALS\n.NOTMP   ANOP\n         ST    R14,VISPPARM\n         OI    VISPPARM,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF FTOPEN\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    FTINCL &SKEL,&NOFT,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       FTINCL MACRO                              FTINCL MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &FT\n         GBLC  &VTYP\n         VTYP  &SKEL\n&FT      SETB  1\n&NAME    LA    R14,FTINCL     *INVOKE FTINCL\n         AIF   ('&VTYP' NE 'C').SKELTC\n         LA    R15,&SKEL\n         AGO   .SKELTA\n.SKELTC  AIF   ('&VTYP' EQ 'R').SKELTR\n         LA    R15,&SKEL\n         AGO   .SKELTA\n.SKELTR  AIF   ('&SKEL'(2,2) EQ '15').SKELTA\n         LR    R15,&SKEL\n.SKELTA  ANOP\n         AIF   (T'&NOFT EQ 'O').NONOFT\n         LA    R0,CNOFT\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         AGO   .CALS\n.NONOFT  ANOP\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n.CALS    ANOP\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF FTINCL\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n         DSMERR &PANEL=DMERR\n.**********************************************************************\n.*                                                                    *\n.*       DSMERR MACRO                              DSMERR MACRO       *\n.*                                                                    *\n.**********************************************************************\n         INVLEN 8\n         INVLEN 12\nDSMERR   L     R1,VISPPARM\n         MVC   DMFUNC,0(R1)\n         ST    R15,DMRCODE\n         DISPLAY &PANEL,ERROR=NO\n         MEXIT\n         MEND\n*\n         MACRO\n         VDATA &VEC\n.**********************************************************************\n.*                                                                    *\n.*       VDATA MACRO                                VDATA MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NDATA\n         GBLC  &XDATA(200)\n         LCLA  &CNT,&CC\n&CNT     SETA  N'&SYSLIST(1)\n         AIF   (&CNT EQ 0).NODATA\n&CC      SETA  0\n.NVAR    AIF   (&CC EQ &CNT).NODATA\n&NDATA   SETA  &NDATA+1\n&CC      SETA  &CC+1\n&XDATA(&NDATA) SETC '&VEC(&CC)'\n         AGO   .NVAR\n.NODATA  ANOP\n         MEXIT\n         MEND\n*\n         MACRO\n         VNODEF &VEC\n.**********************************************************************\n.*                                                                    *\n.*       VNODEF MACRO                               VNODEF MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NNODEF\n         GBLC  &XNODEF(200)\n         LCLA  &CNT,&CC\n&CNT     SETA  N'&SYSLIST(1)\n         AIF   (&CNT EQ 0).NONODEF\n&CC      SETA  0\n.NVAR    AIF   (&CC EQ &CNT).NONODEF\n&NNODEF  SETA  &NNODEF+1\n&CC      SETA  &CC+1\n&XNODEF(&NNODEF) SETC 'VEC(&CC)'\n         AGO   .NVAR\n.NONODEF ANOP\n         MEXIT\n         MEND\n*\n         MACRO\n         VTYP  &VAR\n.**********************************************************************\n.*                                                                    *\n.*       VTYP MACRO                                   VTYP MACRO      *\n.*                                                                    *\n.**********************************************************************\n         GBLC  &VTYP\n         LCLC  &LET\n&LET     SETC  '&VAR'(1,1)\n         AIF   ('&LET' EQ '(').VREG\n         AIF   ('&LET' LT  '0').VCONST\n&VTYP    SETC  'A'\n         MEXIT\n.VCONST  ANOP\n&VTYP    SETC  'C'\n         MEXIT\n.VREG    ANOP\n&VTYP    SETC  'R'\n         MEND\n*\n         MACRO\n&NAME    BLK &N,&LEN,&FILL=' '\n.**********************************************************************\n.*                                                                    *\n.*       BLK MACRO                                   BLK MACRO        *\n.*                                                                    *\n.**********************************************************************\n         LCLA  &L\n         AIF   (T'&LEN EQ 'U').GOTL2\n         AIF   (T'&LEN NE 'O').GOTL\n&L       SETA  L'&N\n         AGO   .GOTL2\n.GOTL    ANOP\n&L       SETA  &LEN\n.GOTL2   ANOP\n         AIF   ('&FILL' EQ 'ZERO').ZFIL\n&NAME    MVI   &N,C&FILL\n         AIF   (T'&LEN EQ 'U').MVCL\n         AIF   (&L EQ 1).OUT\n         MVC   &N+1(&L-1),&N\n.OUT     MEXIT\n.MVCL    ANOP\n         MVC   &N+1(&LEN-1),&N\n         MEXIT\n.ZFIL    ANOP\n         AIF   (T'&LEN EQ 'U').XCL\n&NAME    XC    &N.(&L),&N\n         MEXIT\n.XCL     ANOP\n&NAME    XC    &N.(&LEN),&N\n         MEXIT\n         MEND\n*\n         MACRO\n&NAME    BLANK &N,&LEN,&FILL=' '\n.**********************************************************************\n.*                                                                    *\n.*       BLANK MACRO                                  BLANK MACRO     *\n.*                                                                    *\n.**********************************************************************\n         AIF   (T'&LEN NE 'O').GOTL\n         MNOTE 12,'LENGTH OMITTED'\n         MEXIT\n.GOTL    ANOP\n&NAME    LA    14,&N\n         AIF   (T'&LEN EQ 'U').LDL\n         AIF   (&LEN GT 4095).LDL\n         LA    15,&LEN\n         AGO   .LLL\n.LDL     ANOP\n         CNOP  0,4\n         BAL   15,*+8\n         DC    A(&LEN)\n         L     15,0(0,15)\n.LLL     ANOP\n         SLR   0,0\n         AIF   ('&FILL' EQ 'ZERO').ZFIL\n         LA    R1,C&FILL\n         SLL   R1,24\n         AGO   .DUMUV\n.ZFIL    ANOP\n         SLR   R1,R1\n.DUMUV   ANOP\n         MVCL  14,0\n         MEXIT\n         MEND\n         MACRO\n&NAME    VTST  &GRP\n.**********************************************************************\n.*                                                                    *\n.*       VTST MACRO                                VTST MACRO         *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &TGRP\n         GBLB  &GRPT,&GET(21)\n         LCLA  &GRX,&GRXX\n         AIF   (T'&GRP EQ 'O').SETTYP\n&GRX     SETA  &GRP\n         AGO   .GOTTYP\n.SETTYP  ANOP\n&GRX     SETA  0\n.GOTTYP  ANOP\n         AIF   (NOT &GRPT).NOGTST\n         AIF   (NOT &GET(&TGRP)).NOGTST\n&GRXX    SETA  &TGRP-1\n         MNOTE 4,'VGET NOT DONE FOR GROUP &GRXX '\n.NOGTST  ANOP\n&NAME    TM    GENGRP+&GRX,X'80'\n&TGRP    SETA  &GRX+1\n&GRPT    SETB  1\n         MEND\n*\n         MACRO\n&NAME    SELECT &BUF,&LEN=,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       SELECT MACRO                              SELECT MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLB  &MDEF\n         LCLA &L\n&MDEF    SETB  1\n         AIF   (T'&LEN EQ 'O').GETLEN\n&L       SETA  &LEN\n         AGO   .LENS\n.GETLEN  ANOP\n&L       SETA  L'&BUF\n.LENS    INVLEN &L\n&NAME    LA    R14,SELECT     *INVOKE SELECT\n         LA    R15,VAR&L\n         LA    R0,&BUF\n         STM   R14,R0,VISPPARM\n         OI    VISPPARM+8,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF SELECT FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOGT    ANOP\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    SETMSG &MSGID,&ERROR=YES\n.**********************************************************************\n.*                                                                    *\n.*       SETMSG MACRO                              SETMSG MACRO       *\n.*                                                                    *\n.**********************************************************************\n         GBLA  &NM\n         GBLB  &MS,&MDEF\n         GBLC  &XMSGID(100)\n         LCLA  &C\n&MDEF    SETB  1\n         AIF   (&NM LT 1).NOMSG\n&C       SETA  1\n.NDUP    AIF   ('&MSGID' EQ '&XMSGID(&C)').DUPMSG\n&C       SETA  &C+1\n         AIF   (&C LE &NM).NDUP\n.NOMSG   ANOP\n&NM      SETA  &NM+1\n&MS      SETB  1\n&XMSGID(&NM) SETC '&MSGID'\n.DUPMSG  ANOP\n&NAME    LA    R14,SETMSG\n         LA    R15,C&MSGID\n         STM   R14,R15,VISPPARM\n         OI    VISPPARM+4,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF SETMSG FUNCTION\n         C     R15,VAR8\n         AIF   ('&ERROR' EQ 'NO').NOMSG2\n         BH    DSMERR\n.NOMSG2  MEXIT\n         MEND\n*\n         MACRO\n&NAME    VSPF\n.**********************************************************************\n.*                                                                    *\n.*       VSPF   MACRO                              VSPF   MACRO       *\n.*                                                                    *\n.**********************************************************************\n         LCLC  &LAB0,&LAB1,&LAB2\n&LAB0    SETC  'L&SYSNDX'\n&LAB1    SETC  'M&SYSNDX'\n&LAB2    SETC  'N&SYSNDX'\n         L     R15,540       * TCB ADDR\n&LAB0    L     R1,112(0,R15) * TCBFSA\n         LTR   R1,R1\n         BZ    &LAB1\n         CLC   40(4,R1),CISPF\n         BNE   &LAB1\n         CLI   24(R1),0\n         BNE   &LAB1\n         L     R1,24(0,R1)   * R1 ON ENTRY\n         LTR   R1,R1         * R1=0?\n         BZ    &LAB1\n         L     R1,0(0,R1)\n         CLC   0(3,R1),CTLD  * DOES R1 POINT TO TLD?\n         BE    &LAB2\n&LAB1    L     R15,132(0,R15) *OTCB\n         C     R15,124(0,R15) *OTCB=FTCB?\n         BNE   &LAB0          *NO - TRY AGAIN\n         LA    R15,8          *YES -NOT SPF RC=8\n         B     *+6\n&LAB2    SR    R15,R15        *CORRECT SPF ENVIRONMENT RC=0\n         MEXIT\n         MEND\n         MACRO\n&NAME    ISPQRY\n.**********************************************************************\n.*                                                                    *\n.*       ISPQRY MACRO                              ISPQRY MACRO       *\n.*                                                                    *\n.**********************************************************************\n&NAME    LA    R14,ISPQRY     *INVOKE ISPQRY\n         STM   R14,VISPPARM\n         OI    VISPPARM,128\n         LA    R1,VISPPARM\n         L     R15,VISPLINK\n         BALR  R14,R15        *CALL SPF ISPQRY\n*                             *CORRECT SPF ENVIRONMENT RC=0\n*                             *NOT     SPF ENVIRONMENT RC=20\n         MEXIT\n         MEND\n         EJECT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FINDGRP": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x04\\x01\\xd4\\x01\\xd4\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:04:00", "lines": 468, "newlines": 468, "modlines": 0, "user": "HAYDOCR"}, "text": "*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*\n*% Pgm Name: FINDGRP                                                 %*\n*%                                                                   %*\n*% Purpose : Chain up from the PSA through ASCB/ASXB to the ACEE.    %*\n*%           Get the USERID, NAME, Sys ATTRIBUTES, CURRENT CONNECT   %*\n*%           GROUP and the GROUP LIST ADDRESS from the ACEE.         %*\n*%           Chain to the CGRP block and build a list of groups      %*\n*%           the user is a member of plus any group attributes.      %*\n*%                                                                   %*\n*%           Create REXX/CLIST variables using pgm IKJCT441 as       %*\n*%           follows :- ICHUSER  = ACEE USERID                       %*\n*%                      ICHNAME  = ACEE User Name                    %*\n*%                      ICHCGRP  = ACEE Current Connect Group        %*\n*%                      GRPID    = ACEE Current Connect Group if     %*\n*%                                 it's an NUxxx group or user not   %*\n*%                                 connected to any NUxxx groups     %*\n*%                                 else first NUxxx group in list.   %*\n*%                      ICHSAUTH = System Attribute Flags            %*\n*%                                 Byte 1 \"S\" = Special              %*\n*%                                       else = \"*\"                  %*\n*%                                 Byte 2 \"O\" = Operations           %*\n*%                                       else = \"*\"                  %*\n*%                                 Byte 3 \"A\" = Auditor              %*\n*%                                       else = \"*\"                  %*\n*%                                 Byte 4 \"*\" = Not used             %*\n*%                      ICHGRPTR = ACEE List of Groups User is a     %*\n*%                                 member of plus the Connect        %*\n*%                                 Attributes. List is variable      %*\n*%                                 length and attr flags as above.   %*\n*%                                                                   %*\n*% Author  : David G. RALPH.       Date : 21/11/91                   %*\n*% Dept    : Computer Security.                                      %*\n*%                                                                   %*\n*%                                                                   %*\n*% Macro Libraries : SYS1.MODGEN                                     %*\n*%                   SYS1.MACLIB                                     %*\n*% Macros Mapping  : IHAPSA                                          %*\n*%                 : CVT                                             %*\n*%                 : IHAASCB                                         %*\n*%                 : IHAASXB                                         %*\n*%                 : IHAACEE                                         %*\n*%                 : ICHPCGRP                                        %*\n*%                 : IKJTSVT                                         %*\n*% Macros Program  : STORAGE - OBTAIN/RELEASE                        %*\n*%                 : CALL                                            %*\n*%                 : LINK                                            %*\n*%                                                                   %*\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\nFINDGRP  CSECT\nFINDGRP  AMODE 31\nFINDGRP  RMODE ANY\n         STM   R14,R12,12(R13)         STORE CALLING PROGRAMS REGISTERS\n         LR    R12,R15                 ESTABLISH R12 AS THE BASE\n         USING FINDGRP,R12             REGISTER FOR THE CSECT\n         LA    R14,SAVEAREA\n         ST    R13,4(R14)              CHAIN SAVE AREAS BACKWARD....\n         ST    R14,8(R13)              .............AND FORWARD\n         LR    R13,R14                 R13 POINTS TO THIS PROGRAM'S\n*\n*---------------------------------------------------------------------*\n* GET THE ADDRESS OF THE VARIABLE ACCESS ROUTINE (IKJCT441)           *\n*---------------------------------------------------------------------*\n*\nGETTSVT  DS    0H\n         USING PSA,R0\n         L     R15,FLCCVT              POINTER TO THE CVT\n*\n         DROP  R0\n         USING CVT,R15\n         L     R15,CVTTVT              POINTER TO THE TSO VECTOR TABLE\n*\n         DROP  R15\n         USING TSVT,R15\n         L     R15,TSVTVACC            POINTER TO IKJCT441\n*\n         DROP  R15\n*\n         LTR   R15,R15                 VALID ADDRESS FOR IKJCT441 ?\n         BNZ   TSVTOKAY\n*\n         MVC   CT441ADR,=F'0'          SET IKJCT441 ADDRESS = 0's\n         B     CHAINUP\n*\nTSVTOKAY DS    0H\n         ST    R15,CT441ADR            SAVE IKJCT441 ADDRESS FOR LATER\n*\n*---------------------------------------------------------------------*\n* CHAIN FROM PSA TO ASCB TO ASXB TO ACEE (RACF USER CONTROL BLOCK)    *\n*---------------------------------------------------------------------*\n*\nCHAINUP  DS    0H\n         USING PSA,R0\n         L     R2,PSAAOLD              POINTER TO THE ASCB\n*\n         DROP  R0\n         USING ASCB,R2\n         L     R2,ASCBASXB             THEN THE ASXB\n*\n         DROP  R2\n         USING ASXB,R2\n         L     R2,ASXBSENV             THEN THE ACEE\n*\n         DROP  R2\n         USING ACEE,R2\n*\n         CLC   ACEEACEE,=C'ACEE'       ENSURE WE HAVE ACEE CORRECT\n         BE    CHECKUID\n*\n         LA    R15,20                  NO ACEE, RC=20 AND EXIT\n         B     EXIT\n*\n*---------------------------------------------------------------------*\n* ENSURE VALID RACF USERID THEN MOVE IT FROM ACEE TO OUR WORK AREA    *\n*---------------------------------------------------------------------*\nCHECKUID DS    0H\n*\n         CLI   ACEEUSRI,C'*'           IS THIS A VALID RACF USERID\n         BNE   GETUID\n*\n         LA    R15,16                  NO ACEE, RC=16 AND EXIT\n         B     EXIT\n*\nGETUID   DS    0H\n         SR    R3,R3                   INITIALISE REG\n         IC    R3,ACEEUSRL             PICK UP LENGTH OF USERID\n         ST    R3,UIDLEN               SAVE LENGTH OF USERID\n         BCTR  R3,0                    SET LENGTH FOR MOVE\n         EX    R3,MOVEUSER\n*\n         B     GETCGRP\n*\nMOVEUSER MVC   USERID(*-*),ACEEUSRI    * * EXECUTED * *\n*\n*---------------------------------------------------------------------*\n* MOVE CURRENT CONNECT GROUP FROM ACEE TO OUR WORK AREA               *\n*---------------------------------------------------------------------*\n*\nGETCGRP  DS    0H\n         SR    R3,R3                   INITIALISE REG\n         IC    R3,ACEEGRPL             PICK UP LENGTH OF GROUP\n         ST    R3,GRPCLEN              SAVE LENGTH OF CURRENT GROUP\n         BCTR  R3,0                    SET LENGTH FOR MOVE\n         EX    R3,MOVEGRP              MOVE TO CURRENT GROUP FIELD\n         EX    R3,MOVEGRPX             MOVE TO ALIAS FIELD\n*\n         B     SYSATTRS\n*\nMOVEGRP  MVC   GROUP(*-*),ACEEGRPN     * * EXECUTED * *\nMOVEGRPX MVC   GROUPID(*-*),ACEEGRPN   * * EXECUTED * *\n*\n*---------------------------------------------------------------------*\n* SET OUR WORK SYSTEM ATTRIBUTE FLAGS ACCORDING TO ACEE FLAGS         *\n*---------------------------------------------------------------------*\n*\nSYSATTRS DS    0H\n         MVC   SYSAUTHS,=C'****'       INITIALISE SYSTEM FLAG FIELD\n*\nTESTSPEC TM    ACEEFLG1,ACEESPEC       TEST FOR 'SPECIAL'\n         BNO   TESTOPER\n         MVI   SYSAUTHS,C'S'           BYTE 1 ON FOR SPECIAL\n*\nTESTOPER TM    ACEEFLG1,ACEEOPER       TEST FOR 'OPERATIONS'\n         BNO   TESTAUDT\n         MVI   SYSAUTHS+1,C'O'         BYTE 2 ON FOR OPERATIONS\n*\nTESTAUDT TM    ACEEFLG1,ACEEAUDT       TEST FOR 'AUDITOR'\n         BNO   GETNAME\n         MVI   SYSAUTHS+2,C'A'         BYTE 3 ON FOR OPERATIONS\n*\n         B     GETNAME\n*\n*---------------------------------------------------------------------*\n* GET RACF NAME FIELD FROM ACEE INTO OUR WORK AREA                    *\n*---------------------------------------------------------------------*\n*\nGETNAME  DS    0H\n         L     R4,ACEEUNAM             POINTER TO NAME FIELD\n         LTR   R4,R4                   SEE IF THERE\n         BZ    GRPCHAIN\n*\n         SR    R3,R3\n         IC    R3,0(R4)                PICK UP LENGTH\n         BCTR  R3,0\n         ST    R3,UNAMLEN              SAVE LENGTH OF USER NAME\n         BCTR  R3,0\n         EX    R3,MOVENAME\n*\n         B     GRPCHAIN\n*\nMOVENAME MVC   NAME(*-*),1(R4)         * * EXECUTED * *\n*\n*---------------------------------------------------------------------*\n* CHAIN FROM ACEE TO CGRP (CONNECT GROUP NAME TABLE)                  *\n*---------------------------------------------------------------------*\n*\nGRPCHAIN DS    0H\n         L     R2,ACEEFCGP             ADDRESS OF CONNECT GROUP LIST\n         DROP  R2\n         USING CGRP,R2\n*\n         SR    R5,R5\n         ICM   R5,B'0111',CGRPLEN      GET LENGTH OF GROUP LIST\n         AR    R5,R2                   GET HIGH ADDRESS\n*\n         LA    R2,CGRPENT              ESTABLISH ADDRESSABILITY\n         DROP  R2                      ...TO\n         USING CGRPENTD,R2             ......CONNECTED GROUP DETAILS\n*\n*---------------------------------------------------------------------*\n* GET VIRTUAL AREA FOR LIST OF GROUPS                                 *\n*---------------------------------------------------------------------*\n*\n         STORAGE OBTAIN,                                               X\n               LENGTH=3576,                                            X\n               ADDR=GRPTADDR,                                          X\n               RELATED='GROUP TREE'    3576 BYTES WORK (IE:255*14)\n*\n         L     R3,GRPTADDR             ESTABLISH ADDRESSABILITY TO\n         USING GRPTREE,R3              ...TO GRP TREE WORK AREA\n*\n         SR    R6,R6                   INITIALISE FOR TREE LENGTH CTR\n*\n*---------------------------------------------------------------------*\n* GET CONNECTED GROUP DETAILS FROM CGRP INTO OUR WORK AREA            *\n*---------------------------------------------------------------------*\n*\nLOOPGRP  DS    0H\n         MVC   GRPATTR,=C'****'        INITIAIALISE GRP ATTR FLAGS\n*\n         MVC   GRPNAME,CGRPNAME        MOVE GROUP NAME TO LIST\n         MVI   GRPNAME+8,C' '          INSERT BLANK DELIMITER\n*\n         CLC   GROUPID(2),=C'NU'       ALIAS GROUP NUxxxx THEN CONTINUE\n         BE    TESTGSPC\n*\n         CLC   CGRPNAME(2),=C'NU'      THIS GROUP NUXXX\n         BNE   TESTGSPC\n*\n         MVC   GROUPID,CGRPNAME        SET THE ALIAS GROUP\n*\nTESTGSPC TM    CGRPAUTH,CGRPSPEC       TEST FOR 'SPECIAL'\n         BNO   TESTGOPR\n         MVI   GRPATTR,C'S'            INDICATE GROUP SPECIAL\n*\nTESTGOPR TM    CGRPAUTH,CGRPOPER       TEST FOR 'OPERATIONS'\n         BNO   TESTGAUD\n         MVI   GRPATTR+1,C'O'          INDICATE GROUP OPERATIONS\n*\nTESTGAUD TM    CGRPAUTH,CGRPAUDT       TEST FOR 'AUDITOR'\n         BNO   SETNEXTG\n         MVI   GRPATTR+2,C'A'          INDICATE GROUP AUDITOR\n*\nSETNEXTG DS    0H\n         MVI   GRPATTR+4,C' '          INSERT BLANK DELIMITER\n         LA    R6,14(,R6)              INCREMENT THE LENGTH OF TREE\n         ST    R6,GRPTLEN              SAVE LENGTH OF GROUPTREE\n*\n         LA    R2,24(R2)               POINT TO NEXT GROUP SEGMENT\n         CR    R2,R5                   IF NEXT ADDRESS LESS THAN\n         BNL   SETGRPV                 ...END ADDRESS STOP LOOP\n*\n         LA    R3,14(R3)               POINT TO NEXT OUT GRP FIELD\n*\n         B     LOOPGRP                 POINT TO NEXT OUT GRP FIELD\n*\n*---------------------------------------------------------------------*\n* SET ALL THE REXX/CLIST VARIABLES AND CALL IKJCT441                  *\n*---------------------------------------------------------------------*\n*\nSETGRPV  DS    0H\n         LA    R2,ICHUSER              POINT TO UID VARIABLE NAME\n         LA    R3,L'ICHUSER            LENGTH OF UID VARIABLE NAME\n         LA    R4,USERID               POINT TO UID VARIABLE VALUE\n         L     R5,UIDLEN               LENGTH OF UID VARIABLE VALUE\n         BAS   R14,CALL441\n*\n         LA    R2,ICHCGRP              POINT TO CGRP VAR NAME\n         LA    R3,L'ICHCGRP            LENGTH OF CGRP VAR NAME\n         LA    R4,GROUP                POINT TO CGRP VAR VALUE\n         L     R5,GRPCLEN              LENGTH OF CGRP VAR VALUE\n         BAS   R14,CALL441\n*\n         LA    R2,ICHSAUTH             POINT TO SYS AUTH VAR NAME\n         LA    R3,L'ICHSAUTH           LENGTH OF SYS AUTH VAR NAME\n         LA    R4,SYSAUTHS             POINT TO SYS AUTH VAR VALUE\n         LA    R5,4                    LENGTH OF SYS AUTH VAR VALUE\n         BAS   R14,CALL441\n*\n         LA    R2,ICHNAME              POINT TO USER-NAME VAR NAME\n         LA    R3,L'ICHNAME            LENGTH OF USER-NAME VAR NAME\n         LA    R4,NAME                 POINT TO USER-NAME VAR VALUE\n         L     R5,UNAMLEN              LENGTH OF USER-NAME VAR VALUE\n         BAS   R14,CALL441\n*\n         LA    R2,ICHGRPTR             POINT TO GRP TREE VAR NAME\n         LA    R3,L'ICHGRPTR           LENGTH OF GRP TREE VAR NAME\n         L     R4,GRPTADDR             POINT TO GRP TREE VAR VALUE\n         L     R5,GRPTLEN              LENGTH OF GRP TREE VAR VALUE\n         BAS   R14,CALL441\n*\n* DETERMINE LENGTH OF GRPID VALUE BEFORE PUTTING\n*\n         LA    R4,GROUPID              POINT TO START OF GROUPID\n         SR    R5,R5                   INITIALISE LENGTH COUNTER\nLENGRPID DS    0H\n         CLI   0(R4),C' '              IF BLANK THEN WE HAVE LENGTH\n         BE    PUTGRPID\n         LA    R5,1(R5)                ADD 1 TO LENGTH COUNT\n         LA    R4,1(R4)                POINT TO NEXT BYTE\n         C     R5,=F'8'                IF MAX LENGTH THEN\n         BL    LENGRPID                ...WE HAVE THE LENGTH\n*\nPUTGRPID DS    0H\n         LA    R2,GRPID                POINT TO GRPID VAR NAME\n         LA    R3,L'GRPID              LENGTH OF GRPID VAR NAME\n         LA    R4,GROUPID              POINT TO GRPID VAR VALUE\n         BAS   R14,CALL441\n*\n*\n*---------------------------------------------------------------------*\n* RESTORE REGISTERS, FREE STORAGE, SET RC (IF NEEDED) AND EXIT        *\n*---------------------------------------------------------------------*\n*\nFREESTOR DS    0H\n         STORAGE RELEASE,                                              X\n               LENGTH=3576,                                            X\n               ADDR=GRPTADDR,                                          X\n               RELATED='GROUP TREE'    RELEASE GROUP TREE WRK STORAGE\n*\n         SR    R15,R15                 SET RC = 0\n*\nEXIT     DS    0H\n         L     R13,4(R13)              RESTORE CALLING PROGRAMS\n         L     R14,12(R13)             ...REGISTERS EXCEPT\n         LM    R0,R12,20(R13)          ......REGISTER 15 (RETURN CODE)\n         BR    R14                     RETURN TO CALLER\n*\n*---------------------------------------------------------------------*\n* EXECUTE THE TSO VARIABLE UPDATE ROUTINE (IKJCT441)                  *\n*---------------------------------------------------------------------*\n*\nCALL441  DS    0H\n         ST    R14,SAVER14             SAVE THE VALUE OF 14 FOR RETURN\n*\n         ST    R2,NAMEPTR              SET THE VARIABLE NAME POINTER\n         ST    R3,NAMELEN              SET THE VARIABLE NAME LENGTH\n         ST    R4,VALUEPTR             SET THE VARIABLE VALUE POINTER\n         ST    R5,VALUELEN             SET THE VARIABLE VALUE LENGTH\n*\n         L     R15,CT441ADR            LOAD ADDR OF IKJCT441 FROM SAVE\n         LTR   R15,R15                 IF TSVT ADDR NOT KNOW\n         BZ    LINK441                 ...THEN USE LINK NOT CALL\n*\n         CALL  (15),                                                   X\n               (ECODE,                                                 X\n               NAMEPTR,                                                X\n               NAMELEN,                                                X\n               VALUEPTR,                                               X\n               VALUELEN,                                               X\n               TOKEN),                                                 X\n               VL\n*\n         B     RESETR14\n*\nLINK441  DS    0H\n         LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,                                           X\n               NAMEPTR,                                                X\n               NAMELEN,                                                X\n               VALUEPTR,                                               X\n               VALUELEN,                                               X\n               TOKEN),                                                 X\n               VL=1\n*\nRESETR14 DS    0H\n         L     R14,SAVER14             RESTORE RETURN ADDRESS\n         BR    R14                     AND GO BACK AGAIN\n*\n*\n*---------------------------------------------------------------------*\n* DATA STORAGE AND MAPPING MACROS                                     *\n*---------------------------------------------------------------------*\n*\n*\nSAVEAREA DS    18F                     A SAVE AREA\nSAVER14  DS    F                       A SAVE AREA FOR REG 14\n*\n* IKJCT441 REQUIRED STORAGE\n*\nCT441ADR DS    F                       SAVE AREA FOR IKJCT441 ADDRESS\nECODE    DC    A(TSVEUPDT)             ENTRY CODE FOR VARIABLE CREATE\nTOKEN    DC    F'0'                    REQUIRED BUT NOT USED\nNAMELEN  DS    F                       LENGTH OF VARIABLE NAME\nNAMEPTR  DS    A                       ADDRESS OF VARIABLE NAME\nVALUELEN DS    F                       LENGTH OF VARIABLE VALUE\nVALUEPTR DS    A                       ADDRESS OF VARIABLE VALUE\n*\n* NAMES OF VARIABLES TO BE PASSED TO REXX/CLIST\n*\nICHUSER  DC    C'ICHUSER'              VARIABLE NAME FOR USERID\nICHCGRP  DC    C'ICHCGRP'              VARIABLE NAME FOR CURRENT GROUP\nICHNAME  DC    C'ICHNAME'              VARIABLE NAME FOR NAME FIELD\nICHSAUTH DC    C'ICHSAUTH'             VARIABLE NAME FOR SYSTEM AUTH\nICHGRPTR DC    C'ICHGRPTR'             VARIABLE NAME FOR GROUP TREE\nGRPID    DC    C'GRPID'                VARIABLE NAME FOR ALIAS\n*\n* PROGRAM STORAGE FOR REXX/CLIST VALUES\n*\nUSERID   DC    CL8'        '           SPACE FOR USERID\nUIDLEN   DS    F                       SAVE LENGTH OF USERID\nGROUP    DC    CL8'        '           SPACE FOR GROUP\nGRPCLEN  DS    F                       SAVE LENGTH OF CURRENT GROUP\nGROUPID  DC    CL8'        '           SPACE FOR GROUP ALIAS\nSYSAUTHS DC    CL4'    '               SPACE FOR 'SPEC' 'OPER' 'AUDT'\nNAME     DC    CL20'        '          SPACE FOR NAME\nUNAMLEN  DC    F'0'                    SAVE LENGTH OF USER NAME\n*\nDWORD    DC    D'0'\n*\nGRPTLEN  DS    F                       SAVE LENGTH OF GROUP WRK TREE\nGRPTADDR DS    F                       SAVE ADDRESS OF GROUP WRK TREE\n*\nLITERALS EQU   *\n         LTORG\n*\nALLDSECT EQU   *\nGRPTREE  DSECT\nGRPNAME  DS    CL8\n         DS    C\nGRPATTR  DS    CL4\n         DS    C\n*\nFINDGRP  CSECT\n*\n         PRINT NOGEN\n*\n         IHAPSA\n*\n         CVT      DSECT=YES\n*\n         IHAASCB\n*\n         IHAASXB\n*\n         IHAACEE\n*\n         ICHPCGRP\n*\n         IKJTSVT\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FINDSYS": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x05\\x00\\xc0\\x00\\xc0\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:05:00", "lines": 192, "newlines": 192, "modlines": 0, "user": "HAYDOCR"}, "text": "*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*\n*% Pgm Name: FINDSYS                                                 %*\n*%                                                                   %*\n*% Purpose : Chain up from the PSA to the CVT to get the current     %*\n*%           system SMFID and pass it back as a REXX/CLIST variable  %*\n*%           called SYSID                                            %*\n*%                                                                   %*\n*%           Create REXX/CLIST variables using pgm IKJCT441 as       %*\n*%           follows :- SYSID    = CVTSNAME                          %*\n*%                                                                   %*\n*% Author  : David G. RALPH.       Date : 25/11/91                   %*\n*% Dept    : Computer Security.                                      %*\n*%                                                                   %*\n*% Macro Libraries : SYS1.MODGEN                                     %*\n*%                   SYS1.MACLIB                                     %*\n*%                                                                   %*\n*% Macros Mapping  : IHAPSA                                          %*\n*%                 : CVT                                             %*\n*%                 : IKJTSVT                                         %*\n*%                                                                   %*\n*% Macros Program  : STORAGE - OBTAIN/RELEASE                        %*\n*%                 : CALL                                            %*\n*%                 : LINK                                            %*\n*%                                                                   %*\n*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\nFINDSYS  CSECT\nFINDSYS  AMODE 31\nFINDSYS  RMODE ANY\n         STM   R14,R12,12(R13)         STORE CALLING PROGRAMS REGISTERS\n         LR    R12,R15                 ESTABLISH R12 AS THE BASE\n         USING FINDSYS,R12             REGISTER FOR THE CSECT\n         LA    R14,SAVEAREA\n         ST    R13,4(R14)              CHAIN SAVE AREAS BACKWARD....\n         ST    R14,8(R13)              .............AND FORWARD\n         LR    R13,R14                 R13 POINTS TO THIS PROGRAM'S\n*\n*---------------------------------------------------------------------*\n* GET THE ADDRESS OF THE VARIABLE ACCESS ROUTINE (IKJCT441)           *\n*---------------------------------------------------------------------*\n*\nGETTSVT  DS    0H\n         USING PSA,R0\n         L     R15,FLCCVT              POINTER TO THE CVT\n*\n         DROP  R0\n         USING CVT,R15                 CVT ADDRESSABILITY\n*\n         MVC   SMFID,CVTSNAME          SAVE THE SYSTEM NAME\n*\n         L     R15,CVTTVT              POINTER TO THE TSO VECTOR TABLE\n*\n         DROP  R15\n         USING TSVT,R15\n         L     R15,TSVTVACC            POINTER TO IKJCT441\n*\n         DROP  R15\n*\n         LTR   R15,R15                 VALID ADDRESS FOR IKJCT441 ?\n         BNZ   TSVTOKAY\n*\n         MVC   CT441ADR,=F'0'          SET IKJCT441 ADDRESS = 0's\n         B     SETSYSV\n*\nTSVTOKAY DS    0H\n         ST    R15,CT441ADR            SAVE IKJCT441 ADDRESS FOR LATER\n*\n*---------------------------------------------------------------------*\n* SET ALL THE REXX/CLIST VARIABLES AND CALL IKJCT441                  *\n*---------------------------------------------------------------------*\n*\nSETSYSV  DS    0H\n         LA    R2,SYSID                POINT TO SYSID VARIABLE NAME\n         LA    R3,L'SYSID              LENGTH OF SYSID VARIABLE NAME\n         LA    R4,SMFID                POINT TO UID VARIABLE VALUE\n         L     R5,SMFIDLEN             LENGTH OF UID VARIABLE VALUE\n         BAS   R14,CALL441\n*\n*---------------------------------------------------------------------*\n* RESTORE REGISTERS, SET RC AND EXIT                                  *\n*---------------------------------------------------------------------*\n*\n         SR    R15,R15                 SET RC = 0\n*\nEXIT     DS    0H\n         L     R13,4(R13)              RESTORE CALLING PROGRAMS\n         L     R14,12(R13)             ...REGISTERS BYPASSING\n         LM    R0,R12,20(R13)          ......REGISTER 15 (RC)\n         BR    R14                     RETURN TO CALLER\n*\n*---------------------------------------------------------------------*\n* EXECUTE THE TSO VARIABLE UPDATE ROUTINE (IKJCT441)                  *\n*---------------------------------------------------------------------*\n*\nCALL441  DS    0H\n         ST    R14,SAVER14             SAVE THE VALUE OF 14 FOR RETURN\n*\n         ST    R2,NAMEPTR              SET THE VARIABLE NAME POINTER\n         ST    R3,NAMELEN              SET THE VARIABLE NAME LENGTH\n         ST    R4,VALUEPTR             SET THE VARIABLE VALUE POINTER\n         ST    R5,VALUELEN             SET THE VARIABLE VALUE LENGTH\n*\n         L     R15,CT441ADR            LOAD ADDR OF IKJCT441 FROM SAVE\n         LTR   R15,R15                 IF TSVT ADDR NOT KNOW\n         BZ    LINK441                 ...THEN USE LINK NOT CALL\n*\n         CALL  (15),                                                   X\n               (ECODE,                                                 X\n               NAMEPTR,                                                X\n               NAMELEN,                                                X\n               VALUEPTR,                                               X\n               VALUELEN,                                               X\n               TOKEN),                                                 X\n               VL\n*\n         B     RESETR14\n*\nLINK441  DS    0H\n         LINK  EP=IKJCT441,                                            X\n               PARAM=(ECODE,                                           X\n               NAMEPTR,                                                X\n               NAMELEN,                                                X\n               VALUEPTR,                                               X\n               VALUELEN,                                               X\n               TOKEN),                                                 X\n               VL=1\n*\nRESETR14 DS    0H\n         L     R14,SAVER14             RESTORE RETURN ADDRESS\n         BR    R14                     AND GO BACK AGAIN\n*\n*\n*---------------------------------------------------------------------*\n* DATA STORAGE AND MAPPING MACROS                                     *\n*---------------------------------------------------------------------*\n*\n*\nSAVEAREA DS    18F                     A SAVE AREA\nSAVER14  DS    F                       A SAVE AREA FOR REG 14\n*\n* IKJCT441 REQUIRED STORAGE\n*\nCT441ADR DS    F                       SAVE AREA FOR IKJCT441 ADDRESS\nECODE    DC    A(TSVEUPDT)             ENTRY CODE FOR VARIABLE CREATE\nTOKEN    DC    F'0'                    REQUIRED BUT NOT USED\nNAMELEN  DS    F                       LENGTH OF VARIABLE NAME\nNAMEPTR  DS    A                       ADDRESS OF VARIABLE NAME\nVALUELEN DS    F                       LENGTH OF VARIABLE VALUE\nVALUEPTR DS    A                       ADDRESS OF VARIABLE VALUE\n*\n* NAMES OF VARIABLES TO BE PASSED TO REXX/CLIST\n*\nSYSID    DC    C'SYSID'                VARIABLE NAME FOR SYSTEM ID\n*\n* PROGRAM STORAGE FOR REXX/CLIST VALUES\n*\nSMFID    DC    CL4'    '               SPACE FOR SYSTEM ID\nSMFIDLEN DC    F'4'                    SAVE LENGTH OF SYSTEM ID\n*\nDWORD    DC    D'0'\n*\n*\nLITERALS EQU   *\n         LTORG\n*\nFINDSYS  CSECT\n*\n         PRINT NOGEN\n*\n         IHAPSA\n*\n         CVT      DSECT=YES\n*\n         IKJTSVT\n*\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IEFUTL": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x14\\x02\\x1d\\x02\\x1d\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:14:00", "lines": 541, "newlines": 541, "modlines": 0, "user": "HAYDOCR"}, "text": "IEFUTL   TITLE 'SMF USER TIME LIMIT EXIT'\n*/* REFER:  NUSPS.MVSESA.ASM(IEFUTL)\n*/* COMPID: SYSTEM\n*/* DOC     THIS IS A SAMPLE SMF EXIT ROUTINE THAT IS INVOKED WHEN A\n*/*         CPU TIME LIMIT OR CONTINUOUS WAIT TIME HAS BEEN EXCEEDED.\n******************************************************************* RAG\n*                                                                 * RAG\n*   AMENDED BY R. GORAM ON AUGUST 19 1981 TO TAILOR IT TO NU      * RAG\n*                                                                 * RAG\n*   ALL CHANGES BY ME ARE IDENTIFIED BY 'RAG' IN COLS 69 - 71.    * RAG\n*                                                                 * RAG\n******************************************************************* RAG\n******************************************************************* JGC\n*                                                                 * JGC\n*   AMENDED BY J. CULTIEN ON JULY 5TH, 1982 TO TAILOR IT TO NU    * JGC\n*                                                                 * JGC\n*   ALL CHANGES BY ME ARE IDENTIFIED BY 'JGC' IN COLS 69 - 71.    * JGC\n*                                                                 * JGC\n******************************************************************* JGC\n******************************************************************* JGC\n*                                                                 * JGC\n*   AMENDED BY R. GORAM   ON MARCH 7,  1983 TO REMOVE THE USE OF  * JGC\n*                                                                 * JGC\n*   BYTE 1 OF THE USER COMM. AREA AS THIS CAUSES PROBLEMS WITH    * JGC\n*                                                                 * JGC\n*   THE INTERFACE WITH IEFUJV WHEN JOB REQUEUED.                  * JGC\n*                                                                 * JGC\n******************************************************************* JGC\n******************************************************************* RT\n*                                                                 * RT\n*   AMENDED BY R.T. ON OCT 13 TO GIVE NUSPS01                     * RT\n*                                                                 * RT\n*   JEFF'S USER UNLIMITED TSO EXTENSION.                          * RT\n*                                                                 * RT\n******************************************************************* RT\n******************************************************************* ART\n*                                                                 * ART\n*   AMENDED BY ART  ON AUGUST 21 1989 TO GIVE ZLH469E AND ZLH343E * ART\n*                                                                 * ART\n*   UNLIMITED TSO EXTENSION.                                      * ART\n*                                                                 * ART\n******************************************************************* ART\n******************************************************************* ART\n*                                                                 * ART\n*   AMENDED BY ART ON SEPTEMBER 14 1989 TO GIVE ZLH347E AND USER  * ART\n*                                                                 * ART\n*   GROUPS NUOPD/NUOPS/NUCOS/NUCES UNLIMITED TSO EXTENSION.       * ART\n*                                                                 * ART\n*                                                                 * ART\n*   LOGIC TO GIVE NUOPS9 USERS UNLIMITED TSO EXTENSION HAS BEEN   * ART\n*                                                                 * ART\n*   REMOVED AS IT HAS BEEN SUPERSEDED BY THE NUOPS EXTENSION.     * ART\n*                                                                 * ART\n******************************************************************* ART\n******************************************************************* ART\n*                                                                 * ART\n*   AMENDED BY MJR ON DECEMBER  08 1989 TO REMOVE ZLH469E,        * ART\n*                                                                 * ART\n*   ZLH343E AND ZLH347E, REPLACING WITH NUUDP98,NUUDP99.          * ART\n*                                                                 * ART\n******************************************************************* ART\n******************************************************************* RNH\n*                                                                 * RNH\n*   AMENDED BY RNH ON OCTOBER   09 1990 TO PREVENT TSO USERS      * RNH\n*                                                                 * RNH\n*   NUNPS34 THRU' NUNPS44 TIMING OUT                              * RNH\n*                                                                 * RNH\n******************************************************************* RNH\n******************************************************************* CMH\n*                                                                 * CMH\n*   AMENDED BY CLIVE HALLAS FEBRUARY 6 1991 TO MAKE USERS         * CMH\n*                                                                 * CMH\n*   NUADS98 AND NUADS99 NON TIMEOUT.                              * CMH\n*                                                                 * CMH\n******************************************************************* CMH\n******************************************************************* CMH\n*                                                                 * CMH\n*   AMENDED BY ANDY COULSON OCTOBER    1991 TO MAKE USERS         * CMH\n*                                                                 * CMH\n*   NUOCS01 THROUGH TO NUOCS21 NON TIMEOUT.                       * CMH\n*                                                                 * CMH\n******************************************************************* CMH\n******************************************************************* RNH\n*                                                                 * RNH\n*   AMENDED BY RICHARD HAYDOCK DEC     1991 TO REMOVE HARD CODED  * RNH\n*                                                                 * RNH\n*   USERIDS. ADDED CALL TO RACF TO CHECK WHETHER EXTENSION IS     * RNH\n*                                                                 * RNH\n*   ALLOWED                                                       * RNH\n*                                                                 * RNH\n*   CURRENT PRIVELEGED IDS: ZLH*                                  * RNH\n*                           NUOPS                                 * RNH\n*                           NUCOS                                 * RNH\n*                           NUCES                                 * RNH\n*                           NUUDP98/99                            * RNH\n*                           NUNPS34-44                            * RNH\n*                           NUPKD                                 * RNH\n*                                                                 * RNH\n******************************************************************* RNH\n*                                                                     *\n*             MODULE NAME = IEFUTL                                    *\n*                                                                     *\n*             DESCRIPTIVE NAME =  MVS/SP SYSTEM IPO SUPPLIED          *\n*                                 USER TIME LIMIT EXIT                *\n*                                                                     *\n*             COPYRIGHT = NONE                                        *\n*                                                                     *\n*             FUNCTION =                                              *\n*                ALLOW JOBS TO BE CANCELLLED IF JOB (STEP) TIME       *\n*                   LIMIT EXCEEDED.                                   *\n*                ALLOW TSO SESSIONS TO HAVE ONE MORE MINUTE OF CPU    *\n*                   TIME IF JOB (STEP) TIME LIMIT EXCEEDED.           *\n*                ALLOW JOBS TO HAVE 20 MORE MINUTES OF WAIT TIME  * RAG\n*                   IF WAIT TIME LIMIT EXCEEDED.                      *\n*                ALLOW TSO SESSIONS TO BE CANCELLED IF WAIT TIME      *\n*                   LIMIT EXCEEDED.                                   *\n*                                                                     *\n*                OPERATION =                                          *\n*                   ANALYZE SMF COMMON EXIT PARAMETER AREA.           *\n*                   IF WAIT TIME LIMIT EXCEEDED SEE IF JOB.  NO,      *\n*                      IT IS A TSO SESSION.                       * JGC\n*                     IF JOB NAME = NUSPS01                       * ART\n*                                   ZLH469E  ZLH343E  ZLH347E     * ART\n*                                   NUOPD  NUOPS  NUCOS  NUCES    * ART\n*                       RETURN TO CALLER WITH A RETURN CODE OF 8  * JGC\n*                       IN REGISTER 15 TO INDICATE A WAIT TIME    * JGC\n*                       EXTENSION  AND  THE NUMBER OF SECONDS     * JGC\n*                       (3600 = 60 MINS) OF WAIT TIME EXTENSION   * JGC\n*                       IN REGISTER 1                             * JGC\n*                       (BECAUSE THE WAIT TIME EXTENSION IS       * JGC\n*                       GREATER THAN THE ACCOUNTING INTERVAL,     * JGC\n*                       THE EXTENSION WILL BE INFINITE.)          * JGC\n*                     ELSE                                        * JGC\n*                       CANCEL THE TSO SESSION                    * JGC\n*                     ENDIF                                       * JGC\n*                      YES, IT IS A JOB.               NOTIFY     * JGC\n*                      OPERATOR THAT ONE 20 MINUTE EXTENSION WILL * RAG\n*                      BE GRANTED.  RETURN TO CALLER WITH A RETURN    *\n*                      CODE OF 8 IN REGISTER 15 AND THE NUMBER        *\n*                     OF SECONDS (1200) OF WAIT TIME EXTENSION IN * RAG\n*                      REGISTER 1.  INCREMENT THE USER COMMUNICA-     *\n*                      TION FIELD TO INDICATE A WAIT TIME EXTENSION.  *\n*                   IF JOB OR STEP TIME LIMIT IS EXCEEDED SEE IF      *\n*                      TSO SESSION.  NO, CANCEL THE JOB (AS ABOVE).   *\n*                      YES, SEE IF TIME HAS ALREADY BEEN INCREMENTED  *\n*                      ONCE.  YES, CANCEL THE TSO SESSION (AS ABOVE). *\n*                      NO, INFORM THE USER THAT THE CPU TIME LIMIT    *\n*                      HAS BEEN EXCEEDED AND A 1 MINUTE EXTENSION     *\n*                      IS BEING GRANTED.  RETURN TO CALLER WITH A     *\n*                      RETURN CODE OF 8 IN REGISTER 15 AND THE        *\n*                      NUMBER OF SECONDS (60) OF CPU TIME EXTENSION   *\n*                      IN REGISTER 1.  INCREMENT THE USER COMMUNICA-  *\n*                      TION FIELD TO INDICATE A CPU TIME EXTENSION.   *\n*                                                                     *\n*             NOTES =                                                 *\n*                                                                     *\n*                DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE  *\n*                   IF A DIFFERENT CHARACTER SET IS NEEDED.           *\n*                                                                     *\n*                RESTRICTIONS = NONE                                  *\n*                                                                     *\n*                REGISTER CONVENTIONS = STANDARD CONVENTIONS.         *\n*                   REGISTERS 0/1     = USED BY SYSTEM                *\n*                   REGISTER  2       = RETURN CODE (TEMPORARY)       *\n*                   REGISTER  3       = WAIT TIME/EXTENSION (TEMP)    *\n*                   REGISTERS 4 AND 5 = SECURE R0 & R1 AT START       *\n*                   REGISTERS 6 AND 7 = UNUSED                        *\n*                   REGISTERS 8 AND 9 = USED TO SET UP RACROUTE CALL  *\n*                   REGISTER  10      = ADDRESS OF GETMAINED AREA     *\n*                   REGISTER  11      = ADDRESSABILITY TO COMMON      *\n*                                       EXIT PARAMETER AREA (JMR)     *\n*                   REGISTER  12      = ADDRESSABILITY TO IEFUTL      *\n*                                       CSECT                         *\n*                   REGISTER  13      = SAVE AREA REGISTER            *\n*                   REGISTER  14      = RETURN ADDRESS                *\n*                   REGISTER  15      = RETURN CODE                   *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                  'ZAP*'S)                                           *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = 452 BYTES                              *\n*                                                                     *\n*                ATTRIBUTES = SCHEDULER KEY 0, REENTRANT,             *\n*                   SUPERVISOR STATE, ENABLED                         *\n*                                                                     *\n*             ENTRY POINTS = IEFUTL (ONLY ENTRY POINT)                *\n*                                                                     *\n*                LINKAGE =                                            *\n*                   FROM INITIATOR VIA MODULE IEATLEXT                *\n*                                                                     *\n*             INPUT = REGISTER 1 POINTS TO A LIST OF FULL WORDS       *\n*                THE FIRST OF WHICH POINTS TO THE SMF COMMON          *\n*                EXIT PARAMETER AREA MAPPED BY SMFCEPA DSECT          *\n*                                                                     *\n*             OUTPUT = REGISTER 15 - RETURN CODE                      *\n*                REGISTER 1 - TIME LIMIT EXTENSION                    *\n*                USER COMMUNICATION FIELD - EXTENSION COUNT           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = SEE FUNCTION ABOVE                     *\n*                                                                     *\n*             EXIT - ERROR = NONE                                     *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = NONE                                      *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = NONE                                *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, WTO, RACROUTE, IEFJMR, TPUT              *\n*                                                                     *\n*             CHANGE ACTIVITY = NONE                                  *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n***********************************************************************\nIEFUTL   CSECT\nIEFUTL   AMODE 31\nIEFUTL   RMODE ANY\n         USING IEFUTL,R15          ESTABLISH BASE REGISTER FOR CSECT\n         B     UTLSTRT             BRANCH ROUND ID\n         DC    C'IEFUTL'           CSECT NAME\n         DC    C'&SYSDATE'         ASSEMBLY DATE\n         DC    C'&SYSTIME'         ASSEMBLY TIME\n         DS    0F                  ALIGNMENT\nUTLSTRT  EQU   *\n         STM   R14,R12,12(R13)     SAVE CALLERS REGS IN CALLERS SVAREA\n         LR    R12,R15             SET UP BASE REGISTER\n         DROP  R15\n         USING IEFUTL,R12          ESTABLISH BASE REGISTER\n*\n         LR    R4,R0               SAVE R0\n         LR    R5,R1               AND  R1\n*\n*        N.B. LOC=BELOW USED BECAUSE INPUT AREA FOR TPUT MACRO MUST BE\n*             BELOW 16 MB    RNH JAN 1992\n*\n         GETMAIN R,LV=WRKDSLEN,LOC=BELOW        GET STORAGE\n         LR    R10,R1                           SAVE ADDRESS\n         USING WRKDSECT,R10                     ANCHOR THE DSECT\n*\n         LA    R14,SAVEAREA        PUT CALLER SVAREA ADDR IN OWN SVAREA\n         ST    R14,8(R13)          SET FORWARD POINTER\n         ST    R13,SAVEAREA+4      SET BACK CHAIN TO CALLER\n         LA    R13,SAVEAREA        POINTER TO SAVE AREA\n         EJECT\n***********************************************************************\n*                                                                     *\n*        ESTABLISH ADDRESSABILITY TO SMF PARAMETER AREA DSECT         *\n*        EVALUATE REGISTER 0 = 0 - JOB CPU TIME EXCEEDED              *\n*                            = 4 - STEP CPU TIME EXCEEDED             *\n*                            = 8 - JOB WAIT TIME EXCEEDED             *\n*                                                                     *\n***********************************************************************\n*\n         L     R11,0(0,R5)             LOAD POINTER TO PARAMETER AREA\n         USING JMR,R11                 ESTABLISH ADDRESSABILITY TO SMF\n*                                      PARAMETER AREA DSECT\n         C     R4,FULL4                SEE IF JOB/STEP CPU EXCEEDED\n         BH    WAITTIME                NO.....GO DO ANALYSIS FOR WAIT\n*                                      TIME EXCEEDED\n*\n***********************************************************************\n*                                                                     *\n*        CPU TIME EXCEEDED - ONLY ALLOW TSO SESSION A 1 MINUTE        *\n*                            EXTENSION UNLESS 'PRIVILEGED' (CHECK  RNH*\n*                            THIS WITH A CALL TO RACF)             RNH*\n*                                                                     *\n***********************************************************************\n*\n         TM    JMRINDC,SMFTSO          SEE IF TSO SESSION\n         BNO   CANCEL                  NO.....GO CANCEL - ONLY EXTEND\n*                                      CPU TIME FOR TSO SESSIONS\n*\n         MVI   ENTITY,C' '             INITIALISE ENTITY TO SPACES\n         MVC   ENTITY+1(254),ENTITY\n         MVI   CLASS,C' '              INITIALISE CLASS TO SPACES\n         MVC   CLASS+1(254),CLASS\n         MVC   RACFLIST(RACFLEN),RACFMASK    INITIALISE\n*\n         LA    R9,6                    PUT 6 IN R9\n         STH   R9,ENTITLEN             SET UP LENGTH OF 'TSOCPU'\n         MVC   ENTITY(6),=C'TSOCPU'    SET UP ENTITY NAME OF 'TSOCPU'\n*\n         MVI   CLASSLEN,X'08'          SET UP LENGTH OF 'FACILITY'\n         MVC   CLASS(8),=C'FACILITY'   SET UP CLASS NAME OF 'FACILITY'\n*\n         LA    R8,CLASSLEN             ADDRESS OF CLASS LENGTH BYTE\n*\n         RACROUTE REQUEST=AUTH,        RACHECK CALL                    X\n               WORKA=RACFWORK,         512 BYTE WORK AREA              X\n               ENTITY=(ENTITY),        ADDRESS OF 'TSOCPU' CONST.      X\n               CLASS=(8),              CLASS                           X\n               ATTR=READ,              READ ACCESS REQUIRED            X\n               MF=(E,RACFLIST)         USE LISTED RACROUTE IN DSECT\n*\n         LTR   R15,R15                 TEST FOR ZERO RETURN CODE\n         BZ    INFINEXT                NO CANCELLATION IF AUTHORISED\n*\n         TM    JMRUCOM,X'80'           SEE IF CPU TIME HAS NOT YET BEEN\n*                                      EXTENDED ONCE\n*\n         BO    CANCEL                  NO....GO CANCEL TSO SESSION -\n*                                      ALREADY EXTENDED ONCE\n*\n         MVC   TPUTLIST(TPUTLEN),TPUTMASK     SET UP TPUT BUFFER\n         MVC   TPUTLIST(8),JMRJOB             MOVE IN JOBNAME (USERID)\n         TPUT  TPUTLIST,TPUTLEN\n*\n         OI    JMRUCOM,X'80'           INDICATE ONE EXTENSION GRANTED\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -\n*                                      EXTEND CPU TIME IN SECONDS\n         L     R3,FULL60               LOAD TIME EXTENSION IN SECONDS\n*                                      INTO REGISTER 1\n         B     RETURN                  GO RETURN TO CALLER\n*\n***********************************************************************\n*                                                                     *\n*        WAIT TIME EXCEEDED                                           *\n*           - ALLOW TSO SESSION TO BE CANCELLED                       *\n*             UNLESS THEY ARE AUTHORISED TO RACF FACILITY 'TIMEOUT' RNH\n*           - ALLOW JOB A 20 MINUTE EXTENSION AND NOTIFY OPERATOR   RAG\n*                                                                     *\n***********************************************************************\n*\nWAITTIME DS    0H\n         TM    JMRINDC,SMFTSO          SEE IF TSO SESSION\n         BNO   WAITTIM2                NO. PROCESS FOR BATCH JOB.   JGC\n**********************************************************************\n*                                                                    *\n*        RNH DEC 1991 - NEW CALL TO RACF REPLACES ALL PREVIOUS CHECKS*\n*                                                                    *\n**********************************************************************\n*\n         MVI   ENTITY,C' '             INITIALISE ENTITY TO SPACES\n         MVC   ENTITY+1(254),ENTITY\n         MVI   CLASS,C' '              INITIALISE CLASS TO SPACES\n         MVC   CLASS+1(254),CLASS\n         MVC   RACFLIST(RACFLEN),RACFMASK    INITIALISE\n*\n         LA    R9,7                    PUT 7 IN R9\n         STH   R9,ENTITLEN             SET UP LENGTH OF 'TSOWAIT'\n         MVC   ENTITY(7),=C'TSOWAIT'   SET UP ENTITY NAME OF 'TSOWAIT'\n*\n         MVI   CLASSLEN,X'08'          SET UP LENGTH OF 'FACILITY'\n         MVC   CLASS(8),=C'FACILITY'   SET UP CLASS NAME OF 'FACILITY'\n*\n         LA    R8,CLASSLEN             ADDRESS OF CLASS LENGTH BYTE\n*\n         RACROUTE REQUEST=AUTH,        RACHECK CALL                    X\n               WORKA=RACFWORK,         512 BYTE WORK AREA              X\n               ENTITY=(ENTITY),        ADDRESS OF 'TSOWAIT' CONST.     X\n               CLASS=(8),              CLASS                           X\n               ATTR=READ,              READ ACCESS REQUIRED            X\n               MF=(E,RACFLIST)         USE LISTED RACROUTE IN DSECT\n*\n         LTR   R15,R15                 CHECK RETURN CODE\n         BNZ   CANCEL                  TIMEOUT IF NOT AUTHORISED\n*\n**********************************************************************\n*                                                                    *\n*        INFINITE EXTENSION OF TSO SESSION FOR PRIVILEGED USERS      *\n*                                                                    *\n**********************************************************************\nINFINEXT DS    0H\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -  JGC\n*                                      EXTEND WAIT TIME IN SECONDS  JGC\n*                                                                   JGC\n         L     R3,WAIT3600             LOAD TIME EXTENSION IN       JGC\n*                                      SECONDS INTO REGISTER 1.     JGC\n*                                                                   JGC\n*        BECAUSE THE WAIT TIME EXTENSION IS GREATER THAN THE        JGC\n*        ACCOUNTING INTERVAL, THE EXTENSION WILL BE INFINITE.       JGC\n*                                                                   JGC\n         B     RETURN                                               JGC\nWAITTIM2 EQU   *                       NO. IT IS NOT A TSO SESSION  JGC\n*\n***********************************************************************\n*                                                                     *\n*        ALLOW JOB A 20 MINUTE EXTENSION AND NOTIFY OPERATOR      * RAG\n*                                                                     *\n***********************************************************************\n*\n         CLI   JMRUCOM,ZERO            SEE IF WAIT TIME HAS NOT YET\n*                                      BEEN EXTENDED ONCE\n         BNE   CANCEL                  NO....GO CANCEL JOB - WAIT TIME\n*                                      ALREADY EXTENDED ONCE\n*\n***********************************************************************\n*                                                                     *\n*        ROUTCDE=2 WAS USED SO THAT ENQ RET=TEST WAS UNNECESSARY      *\n*        ENQ RET=TEST IS NECESSARY FOR ROUTCDE=11 (WTP) WHETHER       *\n*           OR NOT THAT ROUTING OCCURS BY DEFAULT                     *\n*        WTP CAUSES AN ENQ OF THE FOLLOWING FORM:                     *\n*           MAJORNAME: SYSSJWTP                                       *\n*           MINORNAME: RPL + ASID (LENGTH OF 6)                       *\n*              RPL IS THE 4 BYTE REQUEST PARAMETER LIST POINTER       *\n*                 LOCATED AT OFFSET JSCBSMLR (X'128') IN THE JSCB     *\n*              ASID IS THE 2 BYTE ADDRESS SPACE IDENTIFIER            *\n*                 LOCATED AT OFFSET ASCBASID (X'24') IN THE ASCB      *\n*                                                                     *\n***********************************************************************\n*\n         MVC   WTO1LIST(WTO1LEN),WTO1MASK SET UP WTO MASK\n         MVC   WTO1LIST+92(8),JMRJOB   MOVE IN JOBNAME\n         WTO   MF=(E,WTO1LIST)         ISSUE WTO\n*\n         MVI   JMRUCOM,ONE             INDICATE ONE EXTENSION GRANTED\n         L     R2,FULL8                INDICATE RETURN CODE OF 8 -\n*                                      EXTEND CPU TIME IN SECONDS\n         L     R3,WAIT1200           LOAD TIME EXTENSION IN SECONDS RAG\n*                                      INTO REGISTER 1\n         B     RETURN                  GO RETURN TO CALLER\n*\n***********************************************************************\n*                                                                     *\n*        ZERO REGISTER 2 TO INDICATE CANCEL                           *\n*                                                                     *\n***********************************************************************\n*\nCANCEL   DS    0H\n         SR    R2,R2                   INDICATE RETURN CODE OF ZERO -\n*                                      CONTINUE (CANCEL)\n*\n***********************************************************************\n*                                                                     *\n*        NORMAL END PROCESSING                                        *\n*                                                                     *\n***********************************************************************\n*\nRETURN   DS    0H\n*\n         L     R13,SAVEAREA+4          PICK UP BACK CHAIN POINTER\n         FREEMAIN R,LV=WRKDSLEN,A=(R10)\n*\n         LR    R1,R3                   LOAD WAIT TIME/EXTENSION INTO R1\n         LR    R15,R2                  LOAD RETURN CODE FROM REGISTER 2\n         L     R14,12(0,R13)           LOAD ADDRESS FOR RETURN\n         LM    R2,R12,28(R13)          RESTORE REGISTERS 2 TO 12\n         BR    R14                     RETURN TO CALLER\n         SPACE 5\n**************************** CONSTANTS ********************************\nFULL4    DC    F'4'\nFULL8    DC    F'8'\nFULL60   DC    F'60'\nWAIT1200 DC    F'1200'                                             RAG\nWAIT3600 DC    F'3600'            EXTEND WAIT TIME = 60 MINS       JGC\n         SPACE 2\n**************************** MESSAGES  ********************************\n*\nRACFMASK RACROUTE REQUEST=AUTH,   RACHECK CALL                         X\n               MSGSUPP=YES,       MESSAGE SUPPRESSION                  X\n               RELEASE=1.8.1,                                          X\n               MF=L\n*\nWTO1MASK WTO   'WAIT TIME LIMIT HAS BEEN EXCEEDED. A SINGLE 20 MINUTE EX\n               XTENSION WILL BE GRANTED FOR JOB 12345678',             X\n               ROUTCDE=(2),DESC=(11),MF=L                           RAG\n*\nTPUTMASK DC    C'UUUUUUUU - CPU TIME LIMIT HAS BEEN EXCEEDED. A SINGLE X\n               ONE MINUTE EXTENSION WILL BE GRANTED. PLEASE LOGOFF SHORX\n               TLY'\n*\n         SPACE 2\n***************************** PATCH AREA ******************************\n         DS    0F\nPATCH    DC    8CL4'ZAP*'\n         EJECT\n********************************* EQUATES *****************************\nSMFTSO   EQU   X'01'\nONE      EQU   1\nZERO     EQU   0\n         SPACE 5\n***************************** REGISTER EQUATES ************************\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n************************ DSECTS (MAPPING MACROS) **********************\nWRKDSECT DSECT                    WORK AREA FOR RACF CALLS\n*\nRACFLIST RACROUTE REQUEST=AUTH,   RACHECK CALL                         X\n               MSGSUPP=YES,       MESSAGE SUPPRESSION                  X\n               RELEASE=1.8.1,                                          X\n               MF=L\nRACFLEN  EQU   *-RACFLIST\n*\nRACFWORK DS    512C               WORK AREA FOR RACROUTE\nSAVEAREA DS    18F                SAVE AREA\n*\nENTITREG DS    0D                 ALIGNMENT\n         DS    H                  PADDING\nENTITLEN DS    H                  RACF ENTITY NAME LENGTH BYTE\nENTITY   DS    255C               RACF ENTITY NAME\n*\nCLASSREG DS    0F                 ALIGNMENT\n         DS    XL3                PADDING\nCLASSLEN DS    X                  RACF CLASSNAME LENGTH BYTE\nCLASS    DS    255C               RACF CLASSNAME\n*\nWTO1LIST WTO   'WAIT TIME LIMIT HAS BEEN EXCEEDED. A SINGLE 20 MINUTE EX\n               XTENSION WILL BE GRANTED FOR JOB 12345678',             X\n               ROUTCDE=(2),DESC=(11),MF=L\nWTO1LEN  EQU   *-WTO1LIST\n*\nTPUTLIST DS    C'UUUUUUUU - CPU TIME LIMIT HAS BEEN EXCEEDED. A SINGLE X\n               ONE MINUTE EXTENSION WILL BE GRANTED. PLEASE LOGOFF SHORX\n               TLY'\nTPUTLEN  EQU   *-TPUTLIST\n*\nWRKDSLEN EQU   *-WRKDSECT\n*\n         IEFJMR                   MAPPING OF JMR DATA AREA\n         END   IEFUTL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPDFLTS": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x92(\\x9f\\x00\\x920\\x8f\\x15\\x15\\x00\\x1f\\x00$\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1992-10-15T00:00:00", "modifydate": "1992-11-03T15:15:00", "lines": 31, "newlines": 36, "modlines": 0, "user": "HAYDOCR"}, "text": "**********************************************************************\n*\n*  MODULE NAME       : ISPDFLTS\n*  ENTRY POINT NAME  : ISPDFLTS\n*  ATTRIBUTES        : RENT,AMODE(31),RMODE(ANY)\n*  DESCRIPTIVE NAME  : ISPF DEFAULTS CSECT\n*  FUNCTION          : DEFINE ISPF MAINTASK DEFAULTS TO BE USED\n*                      (THIS IS LINKED INTO THE ISPMAIN LOAD MODULE)\n*                      REF: ISPF PLANNING & CUSTOMISATION GUIDE\n*                      CMDSTKSZ = # OF BYTES USED FOR ISPF 'RETRIEVE'\n*                                 FUNCTION\n*                      EXITS    = 'YES' OR 'NO' DEPENDING ON WHETHER OR\n*                                 NOT ISPF IS TO USE ANY USER EXITS\n*  PARAMETERS        : NONE\n*  RETURN CODES      : NONE\n*  CALLING MODULES   : LINKED INTO ISPMAIN\n*  CALLED MODULES    :\n*  MACROS USED       : ISPMTAIL (ISPF MAINTASK TAILORING)\n*  MESSAGES ISSUED   :\n*  AUTHOR            : NAME - RICHARD HAYDOCK         DATE - 03/11/92\n*\n**********************************************************************\n*\n*  CHANGE HISTORY\n*\n*  PROGRAMMER NAME : ?\n*  DATE COMPLETED  : DD/MM/YY\n*  BRIEF DESCIPTION: ?\n*\n**********************************************************************\n         ISPMTAIL   TROWDEF=1,CMDSTKSZ=512,EXITS=YES\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPXDT": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x92(\\x9f\\x00\\x920\\x8f\\x15\\x01\\x00'\\x001\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1992-10-15T00:00:00", "modifydate": "1992-11-03T15:01:00", "lines": 39, "newlines": 49, "modlines": 0, "user": "HAYDOCR"}, "text": "**********************************************************************\n*\n*  MODULE NAME       : ISPXDT\n*  ENTRY POINT NAME  : ISPXDT\n*  ATTRIBUTES        : RENT,AMODE(31),RMODE(ANY)\n*  DESCRIPTIVE NAME  : ISPF EXIT DEFINITION TABLE\n*  FUNCTION          : DEFINES THE EXITS WHICH ISPF WILL TAKE\n*                      REF: ISPF CUSTOMISATION & PLANNING GUIDE\n*  PARAMETERS        : NONE\n*  RETURN CODES      : NONE\n*  CALLING MODULES   : ISPMAIN\n*  CALLED MODULES    : ISPX16L1 (ISPF EXIT 16)\n*  MACROS USED       : ISP*     (STANDARD ISPF MACROS)\n*  MESSAGES ISSUED   : NONE\n*  AUTHOR            : NAME - RICHARD HAYDOCK         DATE - 03/11/92\n*\n**********************************************************************\n*\n*  CHANGE HISTORY\n*\n*  PROGRAMMER NAME : ?\n*  DATE COMPLETED  : DD/MM/YY\n*  BRIEF DESCIPTION: ?\n*\n**********************************************************************\n*\n         ISPMXED  START\n*\n         ISPMXLST (16)\n*\n         ISPMXDEF 16\n         ISPMEPT  ISPX16L1\n         ISPMXEND\n*\n         ISPMXED  END\n*\n         ISPMXDD  START\n         ISPMXDD  END\n*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISPX16L1": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x00\\x92(\\x9f\\x00\\x920\\x8f\\x15\\x13\\x00\\x8a\\x00\\x90\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "1992-10-15T00:00:00", "modifydate": "1992-11-03T15:13:00", "lines": 138, "newlines": 144, "modlines": 0, "user": "HAYDOCR"}, "text": "**********************************************************************\n*\n*  MODULE NAME       : ISPX16L1\n*  ENTRY POINT NAME  : ISPX16L1\n*  ATTRIBUTES        : RENT,AMODE(31),RMODE(ANY)\n*  DESCRIPTIVE NAME  : ISPF EXIT 16 - TEMPORARY DATASET NAME EXIT\n*  FUNCTION          : MODIFY THE PREFIX OF ISPF-ALLOCATED TEMPORARY\n*                      DATASETS BY ADDING THE SYSTEM-ID\n*                      REF:ISPF/PDF PLANNING & CUSTOMIZING SC34-4257-01\n*  PARAMETERS        : R1 - PARAMATER LIST\n*                      THIS IS DETAILLED IN THE VOLUME ABOVE\n*                      THERE IS A STANDARD LIST USED BY ALL ISPF EXITS\n*                      FOLLOWED BY AN EXIT 16-SPECIFIC LIST\n*  RETURN CODES      : 0 (THIS IS IGNORED BY THE CALLER)\n*  CALLING MODULES   : ISPXDT\n*  CALLED MODULES    : NONE\n*  MACROS USED       : CVT     (MAPPING MACRO)\n*  MESSAGES ISSUED   : ?\n*  AUTHOR            : NAME - RICHARD HAYDOCK         DATE - 03/11/92\n*\n*\n*  CHANGE HISTORY\n*\n*  PROGRAMMER NAME : ?\n*  DATE COMPLETED  : DD/MM/YY\n*  BRIEF DESCIPTION: ?\n*\n**********************************************************************\n*\n*        REGISTER USAGE:\n*\n*        R0  - ?\n*        R1  - PARAMETER LIST ADDRESS ON ENTRY\n*        R2  - ?\n*        R3  - ?\n*        R4  - ?\n*        R5  - ?\n*        R6  - ?\n*        R7  - ?\n*        R8  - ?\n*        R9  - POINTER TO CVT WHILE SEARCHING FOR SMF-ID\n*        R10 - PARAMETER LIST ADDRESS\n*        R11 - DSECT ADDRESS\n*        R12 - BASE REGISTER\n*        R13 - SAVE AREA POINTER\n*        R14 - RETURN ADDRESS\n*        R15 - ENTRY POINT ADDRESS (AT START)\n*\n**********************************************************************\n*\nISPX16L1 CSECT\nISPX16L1 AMODE 31\nISPX16L1 RMODE ANY\n         USING ISPX16L1,R15        ESTABLISH BASE REGISTER FOR CSECT\n         B     ISPXSTRT            BRANCH ROUND ID\n         DC    C'ISPX16L1'         CSECT NAME\n         DC    C'&SYSDATE'         ASSEMBLY DATE\n         DC    C'&SYSTIME'         ASSEMBLY TIME\n         DS    0F                  ALIGNMENT\nISPXSTRT EQU   *\n         STM   R14,R12,12(R13)     SAVE CALLERS REGS IN CALLERS SVAREA\n         LR    R12,R15             SET UP BASE REGISTER\n         DROP  R15\n         USING ISPX16L1,R12        ESTABLISH BASE REGISTER\n         LR    R10,R1              SAVE PARAMETER LIST ADDRESS\n*\n         GETMAIN RC,LV=WRKDSLEN,SP=0,LOC=BELOW\n         LR    R11,R1              SAVE ADDRESS OF STORAGE\n         USING WRKDSECT,R11        ANCHOR DSECT\n*\n         LA    R14,SAVEAREA        PUT CALLER SVAREA ADDR IN OWN SVAREA\n         ST    R14,8(R13)          SET FORWARD POINTER\n         ST    R13,SAVEAREA+4      SET BACK CHAIN TO CALLER\n         LA    R13,SAVEAREA        POINTER TO SAVE AREA\n         EJECT\n*\nISPXMAIN EQU   *\n*\n         L     R9,CVTPTR               GET THE SYSTEM ID\n         USING CVT,R9\n         L     R5,CVTSMCA\n*\n         L     R8,28(R10)              ADDRESS OF PREFIX\n         L     R7,24(R10)              ADDRESS OF PREFIX LENGTH\n         LR    R6,R8                   ADDRESS OF PREFIX\n         A     R6,0(0,R7)              PLUS PREFIX LENGTH\n         MVI   0(R6),C'.'              ADD A DOT\n         MVC   1(4,R6),16(R5)          AND THE SYSTEM ID\n*\n         L     R5,0(0,R7)              PUT PREFIX LENGTH IN R5\n         A     R5,=F'5'                ADD 5 TO IT\n         ST    R5,0(0,R7)              AND STORE IT BACK AGAIN\n*\n***********************************************************************\n*                                                                     *\n*      RETURN ROUTINE - RELEASE AREAS, RESTORE REGS, RETURN TO CALLER *\n*                                                                     *\n***********************************************************************\n*\nISPXEND  EQU   *\n         L     R13,SAVEAREA+4      PICK UP BACK CHAIN POINTER\n*\n         FREEMAIN RC,LV=WRKDSLEN,A=(R11),SP=0\n*\n         L     R14,12(0,R13)       RESTORE R14\n         LM    R0,R12,20(R13)      RESTORE R0-R12\n         SR    R15,R15             SET ZERO RETURN CODE\n         BR    R14                 RETURN TO CALLER\n         EJECT\n*\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n         LTORG\n*\nWORKAREA DS    0D\n*\nWRKDSECT DSECT\n*\nSAVEAREA DS    18F\n*\nWRKDSLEN EQU   *-WRKDSECT\n         CVT   DSECT=YES\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "NUCHACC": {"ttr": 2060, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92%?\\x00\\x92%?\\x16A\\x00(\\x00(\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-09T16:41:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR DEFAULT(%+_)\n   $ TYPE(INPUT)  INTENS(LOW)      PAD(_)     CAPS(ON)  JUST(LEFT)\n   ! TYPE(INPUT)  INTENS(LOW)      PAD(NULLS)\n   \u00a2 TYPE(OUTPUT) INTENS(LOW)\n   # TYPE(&FTYPE) INTENS(&FINTENS2)\n   | TYPE(OUTPUT) INTENS(HIGH)\n   \\ TYPE(TEXT)   INTENS(&FINTENS)\n   ~ TYPE(TEXT)   INTENS(&FINTENS2)\n)BODY WINDOW(50,7)\n% &MSG\n%\n%   Account Code ===>$TEMPACCT          +\n%\n%\n+ PF1=Help, PF3=End, Enter=Reset Account Code.\n)INIT\n/*********************************************************************/\n/* Panel        : NUCHACC  - Reset users account code in flight.     */\n/* Author       : CSerSM/RB                                          */\n/* Date written : July 92                                            */\n/* Called by    : Panel SPU                                          */\n/*********************************************************************/\n.HELP = TNUCHACC\n)PROC\n  VER  (&TEMPACCT,NB)\n\n  &A1 = TRUNC(&TEMPACCT,'-')\n  VER (&A1,NB,PICT,'C')\n  &T  = .TRAIL\n\n  &A2 = TRUNC(&T,'-')\n  VER (&A2,NB,PICT,'CCCCC')\n\n  &T  = .TRAIL\n  &A3 = TRUNC(&T,'-')\n  VER (&A3,NB,PICT,'CCCC')\n\n  &A4 = .TRAIL\n  VER (&A4,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUCHGRP": {"ttr": 2062, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x04\\x00\\x00\\x00\\x92%?\\x00\\x92%?\\x16S\\x004\\x00'\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@\"", "ispf": {"version": "01.04", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-09T16:53:00", "lines": 52, "newlines": 39, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR\n * Type(output) Intens(low)  Just(asis) Caps(off)\n ! Type(output) Intens(high) Just(asis) Caps(off)\n $ Type(input)  Intens(high) Just(left) Caps(on)  Pad(_)\n)BODY EXPAND(\\\\)\n%------------ DISPLAY and CHANGE GROUP facility \\-\\-\n%COMMAND ===>_ZCMD                                         +\\ \\+Scroll%==>_BSCR+\n+\n+  This panel shows all the%RACF groups+you belong to.\n+\n%  YES+in the%Default?+column means this is your RACF default group\n%  YES+in the%Current?+column means this is the group you are using%now\n+\n+  You can select any%NU+prefixed group as your new%default+by typing%S+next to\n+  it in the%Select+column. Please press%PF1+for more information\n+\n+  PF1 -%HELP  +PF3 -%QUIT  +PF7 -%UP  +PF8 -%DOWN  +ENTER -%PROCESS\n+\n%Select   Group     Default?  Current?  Comments\n%-------  --------  --------  --------  --------------------------------------\n)MODEL\n  $Z+    *CONGROUP *DFTGROUP *CURGROUP !COMMENTS\n)INIT\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : NUCHGRP                                           */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 09/09/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : List RACF groups, set new default                 */\n  /*                                                                 */\n  /* COMMENTS    : Called from S.PU                                  */\n  /*                                                                 */\n  /*******************************************************************/\n  .HELP  = TNUCHGRP\n  .ZVARS = '(OPT)'\n  IF (&BSCR = &Z)\n     &BSCR = HALF\n  &OPT     = ' '\n  &ZTDMARK =\n'----------------------*** End of group list ***-------------------------------'\n)REINIT\n  &OPT     = ' '\n)PROC\n  IF (&ZTDSELS \u00ac= 0000)\n    VER (&OPT,LIST,S,MSG=SPUM010)\n  IF (&OPT = 'S')\n    IF (&DFTGROUP = 'YES')\n      VER (&OPT,LIST,&Z,MSG=SPUM011)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUCVPRF": {"ttr": 2064, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x923o\\x00\\x923o\\x154\\x005\\x004\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T15:34:00", "lines": 53, "newlines": 52, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR\n $ Type(input)  Intens(low)  Just(left)  Caps(on)  Pad(_)\n)BODY\n%PERSONAL USERIDS UTILITIES - ISPF Profile Converter ---------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+This utility will use an%existing ISPF profile+as a model for a%new one.\n+The following rules will apply to the conversion:\n%\n%1)+New profile name will be%<new-project>.<new-user>.&ZSYSNAME..ISPPROF.NEW\n%2)+Redundant members will not be copied forward from the model profile\n%3)+If TSO parameter members exist (members%TSO1, TSO2+or%TSO3+) they will be\n+   backed up and all occurrences of%<old-project>+and%<old-user>+changed.\n%4)+In members suffixed%PROF,+all occurrences of%<old-user>+will be changed to\n%   <new-user>.+Variables which should be confined to member%ROVTABL+are deleted\n%\n+   A batch job will be run.%Check the joblog.+If the job ended OK, then:\n+   Exit from%ISPF+and run the command%XNURNPRF+to use the converted profile.\n%\n+Enter details of%old dataset+and%new project/new user+below:-\n%\n+   Old dataset  %===>$PUOLDDSN                                    +\n+   New project  %===>$PUNEWP  +      New user%===>$PUNEWU +\n%\n+             Message class%===>$Z+            (%U, V+or%X+)\n+             Press%PF1+for help,%PF3+to exit or%ENTER+to continue\n)INIT\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : NUCVPRF                                           */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 12/10/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Use a copy of one user's ISPF profile to set up   */\n  /*               a profile for another user                        */\n  /*                                                                 */\n  /* COMMENTS    : Called from ISPF S.PU                             */\n  /*                                                                 */\n  /*******************************************************************/\n  .CURSOR   = PUOLDDSN\n  .HELP     = TNUCVPRF\n  .ZVARS    = '(PUMSGCL)'\n  &ZCMD     = &Z\n  &PUMSGCL  = V\n)PROC\n  VER  (&PUOLDDSN,NB,DSNAME)\n  VER  (&PUNEWP,NB,NAME)\n  VER  (&PUNEWU,NB,NAME)\n  VER  (&PUMSGCL,NB,LIST,U,V,X)\n  VPUT (PUOLDDSN, PUNEWP, PUNEWU) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUDSREN": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x92#\\x9f\\x00\\x92%?\\x16D\\x00<\\x00*\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1992-08-26T00:00:00", "modifydate": "1992-09-09T16:44:00", "lines": 60, "newlines": 42, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR\n $ Type(input)  Intens(low)  Just(left)  Caps(on)  Pad(_)\n ! Type(text)   Intens(&PRIMINT1)\n ? Type(text)   Intens(&PRIMINT2)\n)BODY\n%PERSONAL USERIDS UTILITIES - Dataset Renaming ---------------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+Enter%option+below.%CHECK+will not rename anything, but the report will tell\n+you all the datasets which%can+be renamed, and those which%cannot+\n%RENAME+will rename as many datasets as possible and also produce a report.\n%\n+Press%PF1+for a list of reasons why some datasets may not be renamed.\n%\n+             Option       %===>$PUMODE+       (%CHECK+or%RENAME+)\n%\n+Enter details of old project/old user and new project/new user below.\n%\n+             Old project  %===>$PUOLDP  +     New project%===>$PUNEWP  +\n+             Old user     %===>$PUOLDU +      New user   %===>$PUNEWU +\n%\n+Enter%Job class+and%message class+below.Use class%A+if you have less than%20+\n+datasets and class%H+only if you have more then%200+\n%\n+             Job class    %===>$Z+            (%A, B+or%H+)\n+             Message class%===>$Z+            (%U, V+or%X+)\n+\n+             Press%PF1+for help,%PF3+to exit or%ENTER+to continue\n+\n)INIT\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : NUDSREN                                           */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 09/09/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Rename datasets from <oldproj>.<olduser> prefix   */\n  /*               to <newproj>.<newuser> prefix                     */\n  /*                                                                 */\n  /* COMMENTS    : Called from ISPF S.PU                             */\n  /*                                                                 */\n  /*******************************************************************/\n  .HELP     = TNUDSREN\n  .ZVARS    = '(PUJOBCL,PUMSGCL)'\n  &ZCMD     = &Z\n  &PUMODE   = &Z\n  &PUJOBCL  = B\n  &PUMSGCL  = V\n)PROC\n  VER  (&PUMODE,NB,LIST,CHECK,RENAME)\n  VER  (&PUOLDP,NB,NAME)\n  VER  (&PUOLDU,NB,NAME)\n  VER  (&PUNEWP,NB,NAME)\n  VER  (&PUNEWU,NB,NAME)\n  VER  (&PUJOBCL,NB,LIST,A,B,H)\n  VER  (&PUMSGCL,NB,LIST,U,V,X)\n  VPUT (PUOLDP, PUOLDU, PUNEWP, PUNEWU) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUIGACCT": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x19\\x010\\x010\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:19:00", "lines": 304, "newlines": 304, "modlines": 0, "user": "HAYDOCR"}, "text": "         PRINT OFF\n         COPY DSMMACS\n         PRINT ON,GEN,DATA             LISTING OPTIONS\n         PUNCH ' MODE RMODE(ANY)'\n         PUNCH ' MODE AMODE(31)'\n         TITLE 'NU ACCOUNT CODE'       ASSEMBLER PAGE HEADING\nNUIGACCT CSECT                         BEGINNING OF CSECT\n*\n**********************************************************************\n*  MODULE NAME       : NUIGACCT\n*  ENTRY POINT NAME  : NUIGACCT\n*  ATTRIBUTES        : AMODE(31),RMODE(ANY)\n*  DESCRIPTIVE NAME  : NU ACCOUNT CODE PROGRAM\n*  FUNCTION          : THIS MODULE OBTAINS THE ACCOUNT CODE USED BY THE\n*                      CURRENT TSO/E USER AND RETURNS THE RESULT IN\n*                      ISPF VARIABLES.\n*                      THE RACF GROUP USED FOR LOGON IS ALSO STORED AS\n*                      AN ISPF VARIABLE\n*  PARAMETERS        : 1. CPPL\n*  RETURN CODES      : 0 - FOLLOWING ISPF VARIABLES SET:\n*                            &Z#ACCT   - FULL ACCOUNT CODE.\n*                            &ZPP#ACCT - PURPOSE CODE.\n*                            &ZCC#ACCT - COST CENTRE CODE.\n*                            &ZSY#ACCT - SYSTEM CODE.\n*                            &ZPJ#ACCT - PROJECT CODE.\n*                            &Z#GROUP  - RACF GROUP.\n*                      4 - ACCOUNT CODE NOT FOUND.\n*                      8 - ERROR IN VARIABLE ACCESS ROUTINE.\n*  CALLING MODULES   : TMP (USER)\n*  CALLED MODULES    : NONE\n*  MACROS USED       : IKJCPPL\n*                      IKJPSCB\n*                      IKJTSVT\n*                      NUTETE\n*                      CVT\n*  MESSAGES ISSUED   : NONE\n*  AUTHOR            : NAME - KEVAN DUNSTAN           DATE - 28/09/90\n*\n**********************************************************************\n*\n*  CHANGE HISTORY\n*\n*  Programmer Name:  Ian Ramage\n*  Date Completed:   23/10/90\n*  Brief Desciption:\n*\n*  Programmer Name:  Ian Ramage\n*  Date Completed:   03/09/91\n*  Brief Desciption:\n*\n*  Programmer Name:  Richard Haydock\n*  Date Completed:   01/04/92\n*  Brief Desciption:\n*\n*  Programmer Name:  Richard Haydock\n*  Date Completed:   21/04/92\n*  Brief Desciption:\n*\n*  Programmer Name:  Stephen Woolston\n*  Date Completed:   13/05/92\n*  Brief Desciption: New logic using ACEE and Connect Group table to\n*                    value Z#GROUP\n*\n**********************************************************************\n*\n         COPY  REGEQUS                 INSERT REGISTER EQUATES\n*\n*  SAVE REGISTERS, DEFINE BASE REGISTER & SET UP THIS,\n*  AND THE CALLING MODULE'S SAVE AREA.\n*\n         SAVE  (14,12),,NUIGACCT-&SYSTIME-&SYSDATE SAVE REGS, EXCEPT R1\n         LR    R12,R15                 LOAD BASE REGISTER\n         USING NUIGACCT,R12            USE R12 AS BASE REGISTER\n         LR    R11,R1                  SAVE ADDRESS OF PARM ADDR LIST\n         GETMAIN RU,LV=L_SA            ACQUIRE STORAGE FOR SAVE AREA\n         ST    R13,4(R1)               SAVE CALLER'S SAVE AREA ADDRESS\n         ST    R1,8(R13)               COMPLETE SAVE AREA CHAIN\n         LR    R13,R1                  ADDRESS ACQUIRED SAVE AREA\n         USING SAVEAREA,R13\n         MVI   ACTCODEL,C' '           PUT BLANKS IN VARIABLE FIELDS\n         MVC   ACTCODEL+1(ENAC-ACTCODEL-1),ACTCODEL\n*           GETSYSID\n*   RETURN AS ISPF VARIABLE THE SYSTEM SMF CODE.\n*   ... VARIABLE = ZSYSNAME AND SYSID\n         L     R3,CVTPTR                      GET THE SYSTEM ID\n         USING CVT,R3\n         L     R4,CVTSMCA\n         MVC   SYSID,16(R4)\n         MVC   ZSYSNAME,16(R4)\n         DROP  R3\n         VSPF\n         LTR   R15,R15\n         BNZ   DONE3\n         VDEF  SYSID,,1\n         VDEF  ZSYSNAME,,1\n         VPUT  1\n         USING CPPL,R11                ADDRESS CPPL\n         L     R11,CPPLPSCB            GET PSCB ADDRESS\n         DROP  R11                     FINISHED WITH REGISTER\n         USING PSCB,R11                ADDRESS PSCB\n         L     R11,PSCBEXD             GET ADDRESS OF TETE\n         LTR   R11,R11                 ZERO?\n         BZ    DONE2                   BRANCH IF SO\n         DROP  R11                     FINISHED WITH REGISTER\n         USING TETE,R11                ADDRESS TETE\n*\n         XR    R2,R2                   ZERO REGISTER\n         ICM   R2,B'0001',TETEACTL     GET LENGTH OF ACCOUNT CODE\n         ST    R2,ACTCODEL             SAVE IT\n         BZ    DONE2                   BRANCH IF ZERO\n         BCTR  R2,R0                   REDUCE BY ONE\n         EX    R2,MVC1                 MOVE ACCOUNT CODE TO OUR STORAGE\n*\n*   USE CONTROL BLOCK CHAINING TO FIND ACEE AND CGRP AND THEN USE\n*   THESE BLOCKS TO SET UP AN NU PREFIXED Z#GROUP -- SW 13/5/92\n*\nCHAINPSA DS    0H\n         USING PSA,R0                  ADDRESS THE PSA\n         L     R2,PSAAOLD              POINTER TO ASCB\n*\n         DROP  R0\n         USING ASCB,R2                 ADDRESS THE ASCB\n         L     R2,ASCBASXB             THEN THE ASXB\n*\n         DROP  R2\n         USING ASXB,R2                 ADDRESS THE ASXB\n         L     R2,ASXBSENV             THEN THE ACEE\n*\n         DROP  R2\n         USING ACEE,R2                 ADDRESS THE ACEE\n*\n         CLC   ACEEACEE,=C'ACEE'       CHECK THAT WE HAVE ACEE\n         BE    FINDGRP\nABEND0C1 DS    H'0'                    IF NOT, ABEND WITH AN 0C1\n*\nFINDGRP  DS    0H\n         CLC   ACEEGRPN(2),=C'NU'      IS THIS AN NU PREFIX?\n         BNE   FINDGRP2                NO => SEARCH CONNECT GROUP TABLE\n*\n         XR    R3,R3                   INITIALISE REG 3 WITH 0\n         IC    R3,ACEEGRPL             R3 HAS GROUP LENGTH\n         BCTR  R3,R0                   R3 = R3-1\n         LA    R2,ACEEGRPN             R2 LOCATES GROUP NAME\n         EX    R3,MVC2                 STORE GROUP NAME\n         B     ENDFIND\n*\nFINDGRP2 DS    0H\n         L     R2,ACEEFCGP             R2 LOCATES CONNECT GROUP LIST\n         DROP  R2\n         USING CGRP,R2\n*\n         XR    R5,R5                   R5 = 0\n         ICM   R5,B'0111',CGRPLEN      GET LENGTH OF GROUP LIST\n         AR    R5,R2                   R5 = GROUP LIST HIGH ADDRESS\n*\n         LA    R2,CGRPENT              ESTABLISH ADDRESSABILITY\n         DROP  R2                      .. TO\n         USING CGRPENTD,R2             .. CONNECTED GROUP DETAILS\n*\nFINDLOOP DS    0H\n         CLC   CGRPNAME(2),=C'NU'      IS THIS AN NU PREFIX?\n         BE    FOUND\n*\n         LA    R2,24(R2)               POINT TO NEXT GROUP SEGMENT\n         CR    R2,R5                   TEST IF PASSED LIST END\n         BL    FINDLOOP\n*\n         B     ENDFIND                 NO NU GROUP WAS FOUND\n*\nFOUND    DS    0H\n         MVC   Z#GROUP,CGRPNAME        MOVE GROUP NAME IN\n*\nENDFIND  DS    0H\n*\n         LA    R3,Z#ACCT               GET ADDRESS OF ACCOUNT CODE\n         L     R4,ACTCODEL             GET LENGTH  OF ACCOUNT CODE\n         XR    R5,R5\n         BCTR  R5,0\n         LA    R7,ZPP#ACCT\n         USING TEXTBLK,R7\n         BAL   R14,GETFLD\n         LA    R7,ZCC#ACCT\n         BAL   R14,GETFLD\n         LA    R7,ZSY#ACCT             GET ADDRESS OF PURPOSE BUFFER\n         BAL   R14,GETFLD\n         LA    R7,ZPJ#ACCT             GET ADDRESS OF PURPOSE BUFFER\n         BAL   R14,GETFLD\n         B     VAR0\nGETFLD   DS    0H\n*  INPUT AND OUTPUT R3-R5     @ STR,LENREM,LTEXT R5=0 FOR FIRST ENTRY\n         LA    R3,1(R5,R3)\n         LTR   R4,R4\n         BZ    ENSTR\nTRTS     BCTR  R4,0\n         EX    R4,TRTEST      TEST STRING\n         BC    8,ALTXT        NO DELIM\n*        BC    2,ZZSTR        LAST CHAR DELIM.\n         SR    R1,R3\n         BNZ   TXFND\n         B     ZZSTR          ZERO LENGTH FIELD\nTRTEST   TRT   0(1,R3),TRTABLE\nTXFND    EQU   *              END OF ITEM\n         LR    R5,R1          LEN\n         SR    R4,R1\nCHKL     CH    R1,*+10\n         BNH   *+12\n         LA    R1,7\n         OI    ERR,128\n         BCTR  R1,0\n         EX    R1,TXMOVE\nENSTR    XR    R15,R15\n         BR    R14            RETURN\nZZSTR    XR    R5,R5\n         B     ENSTR\nTXMOVE   MVC   TEXT(1),0(R3)\n*\nALTXT    LA    R4,1(0,R4)     ALL TEXT\n         LR    R5,R4\n         LR    R1,R4\n         SR    R4,R4\n         B     CHKL\n*\nVAR0     DS    0H                      CREATE VARIABLES\n         TM    ERR,64\n         BO    DONE99\n         VDEF  Z#ACCT,,2               STORE VARIABLES IN\n         VDEF  ZPP#ACCT,,2             SPF PROFILE\n         VDEF  ZCC#ACCT,,2\n         VDEF  ZSY#ACCT,,2\n         VDEF  ZPJ#ACCT,,2\n         VDEF  Z#GROUP,,2\n         VPUT  2\n*        TM    ERR,128\n*        BZ    NOSPF\n*        B     NOSPF        ** TEMP BYPASS CHECK**\n*RDSPL   DISPLAY NUIGACC1\n*        LTR   R15,R15\n*        BZ    RDSPL\nDONE1    DS    0H                      FINISHED\n         LA    R9,4                    SET RETURN CODE\n         B     DONE99                  CONTINUE\nDONE2    DS    0H                      FINISHED\n         LA    R9,12                   SET RETURN CODE\n         B     VAR0                    CONTINUE\nDONE3    DS    0H                      FINISHED\n         LA    R9,20                   SET RETURN CODE\nDONE99   DS    0H                      FINISHED\n*\n*\n*  RETURN TO CALLING MODULE.\n*\n         LR    R1,R13                  OBTAIN ADDR OF SAVE AREA\n         L     R13,4(R13)              OBTAIN CALLER'S SAVE AREA ADDR\n         FREEMAIN RU,LV=L_SA,A=(1)     RELEASE SAVE AREA STORAGE\n         LR    R15,R9                  SET RETURN CODE\n         RETURN (14,12),RC=(15)        RETURN TO CALLING MODULE,\n         DSMERR\n         LR    R9,R15                  SET RETURN CODE\n         B     DONE99\n*                                      RESTORING REGS FROM SAVE AREA\n*                                      AND BRANCHING ON R14;\n*                                      RETURN CODE IN R15\n*  CONSTANTS:\n*\nMVC1     MVC   Z#ACCT(0),TETEACT       MOVE ACCOUNT CODE TO OUR STORAGE\nMVC2     MVC   Z#GROUP(0),0(R2)        MOVE ACEE GROUP NAME TO STORAGE\n         VGEN CONSTANTS\nTRTABLE  DC    256AL1(0)\n         ORG   TRTABLE+C'-'\n         DC    C'-'\n         ORG\n         LTORG                         COLLECT AND ASSEMBLE LITERALS\n*\n*  DSECTS:\n*\nSAVEAREA DSECT                         THIS MODULE'S SAVE AREA\n         DS    18F\n         VGEN  DATA\nACTCODEL DC    F'35'                   VARIABLE VALUE LENGTH (MAX)\nSYSID    DC    CL4'XXXX'\nZSYSNAME DC    CL4'XXXX'\nZ#ACCT   DC    CL35' '                 ACCOUNT CODE VALUE\nZPP#ACCT DC    CL8' '                    PURPOSE VALUE\nZCC#ACCT DC    CL8' '                  COST CENTRE VALUE\nZSY#ACCT DC    CL8' '                  SYSTEM VALUE\nZPJ#ACCT DC    CL8' '                  PROJECT VALUE\nZ#GROUP  DC    CL8' '                  RACF GROUP\nENAC     EQU   *\nERR      DC    X'00'\nL_SA     EQU   *-SAVEAREA              SAVE AREA LENGTH\n         IKJCPPL\n         IKJPSCB\n         IKJTSVT\n         NUTETE\n         CVT   DSECT=YES\n         IHAPSA                        PSA DSECT\n         IHAASCB                       ASCB DSECT\n         IHAASXB                       ASXB DSECT\n         IHAACEE                       ACEE DSECT\n         ICHPCGRP                      CGRP DSECT\n*\nTEXTBLK  DSECT\nTEXT     DS    CL8\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "NUTETE": {"ttr": 2313, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x19\\x00\\x10\\x00\\x10\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:19:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "HAYDOCR"}, "text": "         MACRO\n         NUTETE\nTETE     DSECT\n***********************************************************************\n*\n*  Norwich Union TSO/E Exit-To-Exit Communications DSECT.\n*\n***********************************************************************\n         DS    0F\nTETEACTN DS    CL1                     Number of accounting fields\nTETEACTL DS    CL1                     Account code actual length\nTETEACT  DS    CL35                    Account code at LOGON\nL_TETEACT EQU *-TETEACT                Account code max length\nL_TETE   EQU *-TETE                    Total length of TETE\nTETESP   EQU   255                     Subpool for this control block\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARMSEX": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x10\\x00\\x1b\\x00\\x1b\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:10:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "HAYDOCR"}, "text": "Parameters recognised by the STARTUP REXX\n-----------------------------------------\n\nALLOC    ISPPLIB  NUMOD.MASTER.ISPPLIB\n\nCOMMAND  ISPSTART CMD(%INFOMAN) NEWAPPL(ISR)\n\nDUMMY    FRED\n\nISPFTEST\n\nLOGOFF\n\nPANEL    ISR@TEST\n\nPOSTREQ  DELETE 'MY.USELESS.OLD.DATASET'\n\nPREREQ   %MYCLIST\n\nSTOP\n\nSYSOUT   OUTFILE  RECFM(F B A) LRECL(133) BLKSIZE(1330)\n\nTEMPDSN  TEMPDD   RECFM(F) LRECL(4096) BLKSIZE(4096) SPACE(15,15) DIR(45)\n\nTERMINAL TERMFILE\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "PARMSGRP": {"ttr": 2317, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x11\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:11:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "HAYDOCR"}, "text": "ALLOC    ISPLLIB  NUSSS.MASTER.ISPLLIB\nALLOC    ISPMLIB  NUSSS.MASTER.ISPMLIB\nALLOC    ISPMLIB  NUSSS.TS.ISPMLIB\nALLOC    ISPPLIB  NUSSS.MASTER.ISPPLIB\nALLOC    ISPPLIB  NUSSS.TS.ISPPLIB\nALLOC    ISPSLIB  NUSSS.MASTER.ISPSLIB\nALLOC    ISPSLIB  NUSSS.TS.ISPSLIB\nALLOC    ISPTLIB  NUSSS.MASTER.ISPTLIB\nALLOC    NUSPLLIB NUSSS.MASTER.ISPLLIB\nALLOC    SYSEXEC  NUSSS.MASTER.ISPRLIB\nALLOC    SYSEXEC  NUSSS.TS.ISPRLIB\nALLOC    SYSPROC  NUSSS.MASTER.CLIST\nALLOC    SYSPROC  NUSSS.SS.CLIST\nALLOC    SYSPROC  NUSSS.TS.CLIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMSSYS": {"ttr": 2319, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x11\\x00\\x15\\x00\\x15\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:11:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "HAYDOCR"}, "text": "ALLOC    ADMGGMAP SYS2.DB2THRD.ADMGGMAP\nALLOC    ISPFILE  NU.CE.ISCMDS\nALLOC    ISPLLIB  SYSA.OP3TSOA.ISPLLIB\nALLOC    ISPMLIB  SYS3.ISPMLIB\nALLOC    ISPMLIB  SYSA.OP3TSOA.ISPMLIB\nALLOC    ISPPLIB  SYS3.ISPPLIB\nALLOC    ISPPLIB  SYSA.OP3TSOA.ISPPLIB\nALLOC    ISPSLIB  SYS3.ISPSLIB\nALLOC    ISPSLIB  SYSA.OP3TSOA.ISPSLIB\nALLOC    ISPTLIB  SYS3.ISPTLIB\nALLOC    ISPTLIB  SYSA.OP3TSOA.ISPTLIB\nALLOC    JLRCL    SYSA.OP0JSCAN.DOCOPTS\nALLOC    SYSEXEC  SYS3.ISPRLIB\nALLOC    SYSEXEC  SYSA.OP3TSOA.ISPRLIB\nALLOC    SYSHELP  SYS3.HELP\nALLOC    SYSHELP  SYSA.OP3TSOA.ISPHLIB\nALLOC    SYSPROC  SYS3.CLIST\nALLOC    SYSPROC  SYSA.OP3TSOA.ISPCLIB\nALLOC    VETACC   SYSA.OP0JSCAN.NUDATA(RACFLIST)\nALLOC    VETCART  SYSA.OP0JSCAN.NUDATA(CARTLIST)\nTERMINAL JLSSR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARMSUSR": {"ttr": 2321, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x12\\x00\\x07\\x00\\x07\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:12:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "HAYDOCR"}, "text": "ISPFTEST\nALLOC    ISPMLIB  NUTSO.HAYDOCR.ISPMLIB\nALLOC    ISPMLIB  NUSSS.MASTER.ISPMLIB\nALLOC    ISPPLIB  NUTSO.HAYDOCR.ISPPLIB\nALLOC    ISPSLIB  NUTSO.HAYDOCR.ISPSLIB\nALLOC    SYSEXEC  NUTSO.HAYDOCR.ISPRLIB\nALLOC    SYSPROC  NUTSO.HAYDOCR.CLIST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RESETACC": {"ttr": 2323, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92!?\\x00\\x92!?\\x10P\\x00(\\x00%\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-07-31T00:00:00", "modifydate": "1992-07-31T10:50:00", "lines": 40, "newlines": 37, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR DEFAULT(%+_)\n   $ TYPE(INPUT)  INTENS(LOW)      PAD(_)     CAPS(ON)  JUST(LEFT)\n   ! TYPE(INPUT)  INTENS(LOW)      PAD(NULLS)\n   \u00a2 TYPE(OUTPUT) INTENS(LOW)\n   # TYPE(&FTYPE) INTENS(&FINTENS2)\n   | TYPE(OUTPUT) INTENS(HIGH)\n   \\ TYPE(TEXT)   INTENS(&FINTENS)\n   ~ TYPE(TEXT)   INTENS(&FINTENS2)\n)BODY WINDOW(50,7)\n% &MSG\n%\n%   Account Code ===>$TEMPACCT          +\n%\n%\n+ PF1=Help, PF3=End, Enter=Reset Account Code.\n)INIT\n/*********************************************************************/\n/* Panel        : AAA      - Reset users account code in flight.     */\n/* Author       : CSerSM/RB                                          */\n/* Date written : July 92                                            */\n/* Called by    : AAA                                                */\n/*********************************************************************/\n.HELP = CMAACH01\n)PROC\n  VER  (&TEMPACCT,NB)\n\n  &A1 = TRUNC(&TEMPACCT,'-')\n  VER (&A1,NB,PICT,'C')\n  &T  = .TRAIL\n\n  &A2 = TRUNC(&T,'-')\n  VER (&A2,NB,PICT,'CCCCC')\n\n  &T  = .TRAIL\n  &A3 = TRUNC(&T,'-')\n  VER (&A3,NB,PICT,'CCCC')\n\n  &A4 = .TRAIL\n  VER (&A4,NB)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ROGD": {"ttr": 2325, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x02\\x00\\x00\\x00\\x903O\\x00\\x91\\x06_\\x12\\x15\\x00\\x11\\x00\\x11\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf3\\xf0@@@'", "ispf": {"version": "03.02", "flags": 0, "createdate": "1990-11-30T00:00:00", "modifydate": "1991-03-06T12:15:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "NUSPS30"}, "text": "/****************REXX*******************/\nARG OPT\nIF OPT = \"RESET\" THEN \"%ROGR\"\nLRC = LISTDSI(\"ISPTLIB\" \"FILE\")\nDSN1 = SYSDSNAME\nLRC = LISTDSI(\"ISPPROF\" \"FILE\")\nDSN2 = SYSDSNAME\nIF DSN1 \u00ac= DSN2 THEN  \"CONCAT DDN(ISPTLIB) DSN('\" || DSN2 || \"')\"\nIF RC > 1  THEN DO\n                 SAY \"CONCAT FAILED\"\n                 \"%ROGR\"\n                 EXIT\n                END\n\"ISPSTART  CMD(%ROGS \" || OPT || \") NEWAPPL(AAAA) \"\n\"K\"\nIF OPT \u00ac= \"FORCE\" & OPT \u00ac= \"RESET\" & OPT \u00ac= \" \" THEN OPT\n                                                ELSE \"ISPF\"\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ROGR": {"ttr": 2327, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x00\\x00\\x00\\x00\\x903O\\x00\\x903O\\t)\\x00\\t\\x00\\t\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf6\\xf4@@@'", "ispf": {"version": "03.00", "flags": 0, "createdate": "1990-11-30T00:00:00", "modifydate": "1990-11-30T09:29:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "NUSPS64"}, "text": "/****************REXX*******************/\nLRC = LISTDSI(\"ISPPROF\" \"FILE\")\nSTATUS = MSG(\"OFF\")\n\"DELETE '\" || SYSDSNAME || \"(AAAAPROF)' \"\n\"DELETE '\" || SYSDSNAME || \"(AAAAEDIT)' \"\n\"DELETE '\" || SYSDSNAME || \"(AAAAEDRT)' \"\nSTATUS = MSG(\"ON\")\n\"ISPSTART CMD(%ROGT \" || SYSDSNAME || \") NEWAPPL(AAAA) \"\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ROGS": {"ttr": 2561, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x1d\\x00\\x00\\x00\\x903O\\x00\\x92\\x10\\x1f\\x13I\\x00-\\x00,\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf3\\xf9@@@'", "ispf": {"version": "03.29", "flags": 0, "createdate": "1990-11-30T00:00:00", "modifydate": "1992-04-10T13:49:00", "lines": 45, "newlines": 44, "modlines": 0, "user": "NUSPS39"}, "text": "        /****************REXX*******************/\nARG OPT\nTABNAM = \"ROVTABL\"\nROVL   = \"ZSYSNAME SYSID Z#ACCT ZPP#ACCT ZCC#ACCT \",\n         \"ZSY#ACCT ZPJ#ACCT Z#S Z#GROUP\"\n\"ISPEXEC TBOPEN ROVTABL LIBRARY(ISPPROF) \"\nIF RC = 0 THEN DO\n                \"ISPEXEC TBSKIP   ROVTABL \"\n                \"ISPEXEC TBDELETE ROVTABL \"\n               END\n          ELSE DO\n                \"ISPEXEC TBCREATE ROVTABL LIBRARY(ISPPROF) \"\n                OPT = \"FORCE\"\n               END\n\"ISPEXEC SELECT CMD(NUIGACCT)\"\n\"ISPEXEC VGET (ZSYSNAME SYSID Z#ACCT ZPP#ACCT \",\n          \"ZCC#ACCT ZSY#ACCT ZPJ#ACCT ZLOGFDSP Z#GROUP) PROFILE \"\nZ#S = TABNAM || ZSYSNAME || SYSID || Z#ACCT || ZPP#ACCT || ZCC#ACCT ||,\n                ZSY#ACCT || ZPJ#ACCT || Z#GROUP\n\"ISPEXEC TBADD   ROVTABL SAVE(\" || ROVL || \")\"\n\"ISPEXEC TBCLOSE ROVTABL LIBRARY(ISPPROF) \"\nIF RC \u00ac= 0 THEN DO\n                 SAY \"ERROR STORING TABLE. CONTACT HELP DESK\"\n                 EXIT 99\n                END\n/*\"ISPEXEC CONTROL ERRORS RETURN \" */\n\"ISPEXEC SELECT CMD(%ROGU) NEWAPPL(ISR) \"\nIF RC=4 | OPT = \"FORCE\" | OPT = \"RESET\"  THEN ,\n             DO\n              IF OPT = \"RESET\" THEN TABNAM = \" \"\n              LRC = LISTDSI(\"ISPPROF\" \"FILE\")\n              TRAPVAR = OUTTRAP(\"SYSOUTLINE.\",'*',\"NOCONCAT\")\n              \"LISTD '\" || SYSDSNAME || \"'  MEMBERS\"\n              TRAPVAR = OUTTRAP('OFF')\n              DO A=7 TO SYSOUTLINE.0\n                 MEMBER = RIGHT(SYSOUTLINE.A,8)\n                 IF SUBSTR(MEMBER,5,4)  = 'PROF' & ,\n                    SUBSTR(MEMBER,1,4) \u00ac= 'AAAA' & ,\n                    SUBSTR(MEMBER,1,4) \u00ac= 'ISPS'  THEN\n                    \"ISPEXEC SELECT CMD(%ROGV \" || TABNAM || ,\n                      \") NEWAPPL(\" || STRIP(SUBSTR(MEMBER,1,4)) || \")\"\n              END\n             END\nIF OPT = \"RESET\" THEN  \"ISPEXEC TBERASE ROVTABL LIBRARY(ISPPROF) \"\nEXIT 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ROGT": {"ttr": 2563, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x00\\x00\\x00\\x00\\x903O\\x00\\x903O\\t)\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf6\\xf4@@@'", "ispf": {"version": "03.00", "flags": 0, "createdate": "1990-11-30T00:00:00", "modifydate": "1990-11-30T09:29:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "NUSPS64"}, "text": "        /****************REXX*******************/\nARG DSN\nTRAPVAR = OUTTRAP(\"SYSOUTLINE.\",'*',\"NOCONCAT\")\n\"LISTD '\" || DSN || \"'  MEMBERS\"\nTRAPVAR = OUTTRAP('OFF')\nDO A=7 TO SYSOUTLINE.0\n   TABNAM = RIGHT(SYSOUTLINE.A,8)\n   IF SUBSTR(TABNAM,5,4)  = 'PROF' & ,\n      SUBSTR(TABNAM,1,4) \u00ac= 'AAAA' & ,\n      SUBSTR(TABNAM,1,4) \u00ac= 'ISPS'  THEN\n         DO\n          \"ISPEXEC CONTROL ERRORS RETURN\"\n          \"ISPEXEC TBEND \"   || TABNAM\n          \"ISPEXEC TBOPEN \"  || TABNAM || \" LIBRARY(ISPPROF) \"\n          VARNAM   =\n          \"ISPEXEC TBSKIP \"  || TABNAM\n          \"ISPEXEC TBGET \"   || TABNAM || \" SAVENAME(VARNAM)\"\n          ZPROFAPP =\n          IF VARNAM = \" \" THEN EXIT\n          \"ISPEXEC VPUT (ZPROFAPP) PROFILE \"\n          \"ISPEXEC TBPUT \"   || TABNAM || \" SAVE\" VARNAM\n          \"ISPEXEC TBCLOSE \" || TABNAM || \" LIBRARY(ISPPROF) \"\n          TRACE OFF\n         END\nEND\nEXIT 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ROGU": {"ttr": 2565, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x07\\x00\\x00\\x00\\x903O\\x00\\x92\\x02O \\x18\\x00\\x07\\x00\\n\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "03.07", "flags": 0, "createdate": "1990-11-30T00:00:00", "modifydate": "1992-01-24T20:18:00", "lines": 7, "newlines": 10, "modlines": 0, "user": "NUSPS24"}, "text": "        /****************REXX*******************/\n\"ISPEXEC VGET (ZPROFAPP ZSYSNAME SYSID Z#ACCT ZPP#ACCT \",\n              \"ZCC#ACCT ZSY#ACCT ZPJ#ACCT Z#S Z#GROUP) PROFILE \"\nT= ZPROFAPP || ZSYSNAME || SYSID || Z#ACCT || ZPP#ACCT || ZCC#ACCT ||,\n               ZSY#ACCT || ZPJ#ACCT || Z#GROUP\nIF T = Z#S THEN EXIT 0\n           ELSE EXIT 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ROGV": {"ttr": 2567, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x03\\x03\\x00\\x00\\x00\\x903O\\x00\\x92\\x02O \\x19\\x00\\x06\\x00\\x06\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "03.03", "flags": 0, "createdate": "1990-11-30T00:00:00", "modifydate": "1992-01-24T20:19:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "NUSPS24"}, "text": "        /****************REXX*******************/\nARG ZPROFAPP\n\"ISPEXEC VPUT (ZPROFAPP) PROFILE \"\n\"ISPEXEC VERASE (Z#S ZSYSNAME SYSID Z#ACCT ZPP#ACCT \" || ,\n                 \"ZCC#ACCT ZSY#ACCT ZPJ#ACCT Z#GROUP) PROFILE \"\nEXIT 4\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SNUCVPRF": {"ttr": 2569, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x924/\\x00\\x924/\\x14(\\x00.\\x00.\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-07T00:00:00", "modifydate": "1992-12-07T14:28:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "HAYDOCR"}, "text": ")CM *******************************************************************\n)CM *                                                                 *\n)CM * SKELETON    : NUCVPRF                                           *\n)CM *                                                                 *\n)CM * AUTHOR      : RICHARD HAYDOCK                                   *\n)CM *                                                                 *\n)CM * LAST UPDATE : 12/10/92                                          *\n)CM *                                                                 *\n)CM * PURPOSE     : INVOKE REXX XNUCVPR1 IN BATCH                     *\n)CM *                                                                 *\n)CM * COMMENTS    : PART OF ISPF S.PU                                 *\n)CM *                                                                 *\n)CM *******************************************************************\n//&ZUSER.C JOB &ZACCTNUM,\n//             'CONVERT ISPF PROFILE',\n//             CLASS=A,\n//             MSGCLASS=&PUMSGCL,\n//             NOTIFY=&ZUSER\n/*JOBPARM S=ANY\n//*\n//SCONV   EXEC PGM=IKJEFT01,DYNAMNBR=50\n//*\n//SYSEXEC  DD  DISP=SHR,DSN=SYS3.ISPRLIB\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\n  PROF NOPREFIX\n  ISPSTART CMD(%XNUCVPR1 &PUOLDDSN &PUNEWP &PUNEWU &ZSYSNAME) +\n           NEWAPPL(@@@@)\n//ISPLOG   DD  SYSOUT=*,\n//             DCB=(RECFM=FB,LRECL=133,BLKSIZE=1330)\n//ISPPROF  DD  DSN=&&ISPPROF,\n//             DISP=(NEW,DELETE,DELETE),\n//             UNIT=SYSALLDA,\n//             SPACE=(TRK,(5,1,12)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//ISPMLIB  DD  DSN=SYS1.ISPMENU,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISRMENU,\n//             DISP=SHR\n//ISPPLIB  DD  DSN=SYS1.ISPPENU,\n//             DISP=SHR\n//ISPSLIB  DD  DSN=SYS1.ISPSLIB,\n//             DISP=SHR\n//ISPTLIB  DD  DSN=SYS1.ISPTENU,\n//             DISP=SHR\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SNUDSREN": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92%?\\x00\\x92%\\x8f\\x08\\x19\\x00$\\x00\\x17\\x00\\x00\\xd5\\xe4\\xe3\\xe2\\xe2\\xf3\\xf5@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-14T08:19:00", "lines": 36, "newlines": 23, "modlines": 0, "user": "NUTSS35"}, "text": ")CM *******************************************************************\n)CM *                                                                 *\n)CM * SKELETON    : NUDSREN                                           *\n)CM *                                                                 *\n)CM * AUTHOR      : RICHARD HAYDOCK                                   *\n)CM *                                                                 *\n)CM * LAST UPDATE : 09/09/92                                          *\n)CM *                                                                 *\n)CM * PURPOSE     : INVOKE REXX XNUDSRN1 IN BATCH                     *\n)CM *                                                                 *\n)CM * COMMENTS    : PART OF ISPF S.PU                                 *\n)CM *                                                                 *\n)CM *******************************************************************\n//&ZUSER.R JOB &ZACCTNUM,\n//             PURENAME,\n//             CLASS=&PUJOBCL,\n//             MSGCLASS=&PUMSGCL,\n//             NOTIFY=&ZUSER\n/*JOBPARM S=ANY\n//*\n//SRENAME EXEC PGM=IKJEFT01,\n//             DYNAMNBR=50\n//SYSLBC   DD  DISP=SHR,DSN=SYS1.BRODCAST\n//SYSEXEC  DD  DISP=SHR,DSN=SYS3.ISPRLIB\n//SYSTSPRT DD  SYSOUT=*\n//SYSTSIN  DD  *\n  %XNUDSRN1 &PUOLDQ &PUNEWQ &PUMODE\n//*\n//SPRINT  EXEC PGM=IEBGENER\n//SYSIN    DD  DUMMY\n//SYSPRINT DD  SYSOUT=*\n//SYSUT1   DD  DISP=SHR,DSN=&ZUSER..PURENAME\n//SYSUT2   DD  SYSOUT=A,\n//             HOLD=YES,\n//             DCB=(RECFM=FBA,LRECL=133,BLKSIZE=13300)\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPU": {"ttr": 2573, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92(o\\x00\\x92(o\\x16#\\x00$\\x00$\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-12T00:00:00", "modifydate": "1992-10-12T16:23:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "HAYDOCR"}, "text": ")BODY\n%PERSONAL USERIDS UTILITIES - Main Menu ----------------------------------------\n%COMMAND ===>_ZCMD                                                            +\n%\n%\n%     1+ Display the groups you belong to. Select new default if required\n+\n%     2+ Dataset renaming utility.\n+\n%     3+ Account code changing utility.\n+\n%     4+ ISPF profile converter.\n+\n+\n+\n+       (Other options may be added at a later date)\n+\n+\n+\n+\n+\n+\n+Enter=Process  PF1=Help  PF3=Exit\n%\n)INIT\n  .HELP = TSPU\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n                1,'CMD(%XNUCHGRP)'\n                2,'CMD(%XNUDSREN)'\n                3,'CMD(%XNUCHACC)'\n                4,'CMD(%XNUCVPRF)'\n              ' ',' '\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SPUM01": {"ttr": 2575, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x923o\\x00\\x923o\\x153\\x00\\x15\\x00\\x15\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T15:33:00", "lines": 21, "newlines": 21, "modlines": 0, "user": "HAYDOCR"}, "text": "SPUM010 'Invalid option'                .TYPE=WARNING\n'The only valid option is \"S\"'\n\nSPUM011 'Already the default'           .TYPE=WARNING\n'The selected group &CONGROUP is already your RACF default group'\n\nSPUM012 'Not a TSO group'               .TYPE=WARNING\n'The new default must begin with NU - &CONGROUP is not a TSO group'\n\nSPUM013 'Too many selections'           .TYPE=WARNING\n'You can only select one group as your new default'\n\nSPUM014 'Invalid new default'           .TYPE=WARNING\n'NUSSSTS is only used for the Terminal Supervisor option SSADMIN'\n\nSPUM015 'Not a TSO group'               .TYPE=WARNING\n'&CONGROUP is a LUS control group, not a TSO group'\n\nSPUM016 'Dataset not found'             .TYPE=WARNING\n'The specified dataset &PUOLDDSN was not found'\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "STARTUP": {"ttr": 2577, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x03\\x02\\xee\\x02\\xee\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:03:00", "lines": 750, "newlines": 750, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC:      STARTUP                                              */\n  /*                                                                 */\n  /* AUTHOR:    CTS/MVS/RNH                                          */\n  /*                                                                 */\n  /* WRITTEN:   SEPTEMBER 1991                                       */\n  /*                                                                 */\n  /* CALLED BY: LIVE LOGON PROCEDURES                                */\n  /*                                                                 */\n  /* PURPOSE:   SEE STEPS OUTLINED BELOW                             */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP1                                                           */\n  /*            SET UP VARIABLES AND DATASET NAMES                   */\n  /*                                                                 */\n  /*            FIND THE SYSTEM ID AND PROJECT_PREFIX VALUES         */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP2_ALLOC_ISPPROF      (SUBROUTINE)                           */\n  /*                                                                 */\n  /*            ALLOCATE ISPF PROFILE DATASET (CREATE IF NEEDED)     */\n  /*                                                                 */\n  /* STEP2_COPY_OLDPROF       (SUBROUTINE)                           */\n  /*                                                                 */\n  /*            COPY MEMBERS FROM OLD ISPF PROFILE TO A NEW ONE      */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP3                                                           */\n  /*            IF OPT = 'RESET' THEN RUN REXX 'ROGR'                */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP4_PROCESS_PARM_FILES  (SUBROUTINE)                          */\n  /*                                                                 */\n  /*          - DETERMINE IF THE USER IS AN END USER, AND IF SO      */\n  /*            ALLOCATE THE ISPPROF BEFORE OTHER DATASETS           */\n  /*          - CHECK EXISTENCE OF USER, PROJECT AND MASTER PARAMETER*/\n  /*            TABLES                                               */\n  /*          - CHECK EXISTENCE OF ENDUSER PARAMETER TABLE IF USER   */\n  /*            BELONGS TO A NUXXP OR NUXXT GROUP                    */\n  /*          - CALL STEP4_READ_PARMS AND STEP4_PROCESS_PARMS FOR    */\n  /*            EACH TABLE FOUND                                     */\n  /*          - CALL 'PDFBASIC' REXX IF MASTER TABLE NOT AVAILABLE   */\n  /*            AND SET FLAG TO SHOW THIS HAS BEEN DONE              */\n  /*          - ALLOCATE DATASETS                                    */\n  /*                                                                 */\n  /*        +++ SEE STEP4 COMMENT BOX FOR PERMISSIBLE KEYWORDS   +++ */\n  /*                                                                 */\n  /* STEP4_READ_PARMS          (SUBROUTINE)                          */\n  /*                                                                 */\n  /*            READ CONTENTS OF A PARAMETER TABLE INTO A STEM       */\n  /*                                                                 */\n  /* STEP4_PROCESS_PARMS       (SUBROUTINE)                          */\n  /*                                                                 */\n  /*          - PROCESS ALL PARAMETERS USING THE STEM                */\n  /*            CREATED BY THE PREVIOUS ROUTINE                      */\n  /*          - CALL 'STEP4_MERGE_FILE' WHEN THE KEYWORD IS 'ALLOC'  */\n  /*          - ISSUE ERROR MESSAGE FOR AN INVALID KEYWORD           */\n  /*                                                                 */\n  /* STEP4_MERGE_FILE          (SUBROUTINE)                          */\n  /*                                                                 */\n  /*            PROCESS A PARAMETER TABLE RECORD WHOSE KEYWORD IS    */\n  /*            'ALLOC'                                              */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP5                                                           */\n  /*            PUT ISPF PROFILE DATASET AT TOP OF ISPTLIB CONCAT    */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP6                                                           */\n  /*            CHECK RC - INVOKE REXX 'ROGR' IF RC > 0              */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP7                                                           */\n  /*            ISSUE 'ISPSTART' WITH PARM OF REXX 'ROGS'            */\n  /*            UNLESS EMERGENCY STARTUP HAS BEEN USED               */\n  /*                                                                 */\n  /*        +++ PROCESS 'PREREQ.' STEM IF THIS HAS BEEN USED  +++    */\n  /*                                                                 */\n  /*                                                                 */\n  /* STEP8_START_COMMAND                                             */\n  /*                                                                 */\n  /*            INVOKE ISPF UNLESS ANOTHER COMMAND WAS SPECIFIED     */\n  /*            IN WHICH CASE, RUN THE COMMAND                       */\n  /*                                                                 */\n  /*        +++ PROCESS 'POSTREQ.' STEM IF THIS HAS BEEN USED +++    */\n  /*                                                                 */\n  /*            CHECK LOGOFF_INDICATOR AND LOG OFF TSO IF SET TO \"Y\" */\n  /*                                                                 */\n  /*******************************************************************/\n  /*                                                                 */\n  /*            ARGUMENTS - PASSED BY THE LOGON PROCEDURE            */\n  /*            ----------                                           */\n  /*                                                                 */\n  /* OPT      : IF 'RESET' IS USED, THIS RESETS ISPF PROFILE VALUES  */\n  /*                                                                 */\n  /*                                                                 */\n  /*            VARIABLES - SOME CAN BE RESET ACCORDING TO CONTENTS  */\n  /*            ---------   OF PARAMETER DATASETS                    */\n  /*                                                                 */\n  /* APPL            : APPL_ID FOR ISPSTART                          */\n  /*                   (INITIALISED TO 'ISR')                        */\n  /*                                                                 */\n  /* ENDUSER_PREFIX  : PREFIX OF END-USER MASTER PARAMETER TABLE     */\n  /*                                                                 */\n  /* PDFBASIC        : EMERGENCY-START PARAMETER FILE IF NO OTHER    */\n  /*                   VALID PARAMETER TABLES FOUND OR ERRORS OCCUR  */\n  /*                                                                 */\n  /* ISPF_PANEL      : START PANEL FOR ISPF                          */\n  /*                   (INITIALISED TO 'ISR@PRIM')                   */\n  /*                                                                 */\n  /* LOGOFF_INDICATOR: SET TO 'Y' IF KEYWORD 'LOGOFF' IS FOUND IN    */\n  /*                   ANY PARAMETER TABLE                           */\n  /*                   (INITIALISED TO 'N')                          */\n  /*                   LOGOFF AFTER \"ISPF\" OR \"START_COMMAND\" IF SET */\n  /*                                                                 */\n  /* MEMBER_NAME     : NAME OF PARAMETER DATASET MEMBER TO USE       */\n  /*                                                                 */\n  /* MASTER_PREFIX   : PREFIX OF MASTER PARAMETER TABLE              */\n  /*                                                                 */\n  /* PARMFILE_SUFFIX : PRODUCTION-SUFFIX FOR ALL PARAMETER TABLE     */\n  /*                                                                 */\n  /* POSTREQ.        : POSSIBLE POSTREQUISITE COMMAND STEM           */\n  /*                   (INITIALLY EMPTY)                             */\n  /*                   RUN AFTER \"ISPF\" OR \"START_COMMAND\" IF SET    */\n  /*                                                                 */\n  /* PREREQ.         : POSSIBLE PREREQUISITE COMMAND STEM            */\n  /*                   (INITIALLY EMPTY)                             */\n  /*                   RUN BEFORE \"ISPF\" OR \"START_COMMAND\" IF SET   */\n  /*                                                                 */\n  /* PROJECT_PREFIX  : PREFIX OF PROJECT PARAMETER TABLE             */\n  /*                                                                 */\n  /* STANDARD        : FLAG TO SAY WHETHER STANDARD STARTUP IS USED  */\n  /*                   (INITIALISED TO 'YES')                        */\n  /*                                                                 */\n  /* START_COMMAND   : START COMMAND                                 */\n  /*                   (INITIALISED TO 'ISPF')                       */\n  /*                                                                 */\n  /* USERID          : ID OF USER LOGGING ON                         */\n  /*                                                                 */\n  /*******************************************************************/\n  /*                                                                 */\n  /* THE PARAMETER TABLENAMES ARE SET UP IN THE FOLLOWING WAY:       */\n  /* --------------------------------------------------------        */\n  /*                                                                 */\n  /* MASTER  : MASTER_PREFIX.PARMFILE_SUFFIX(MEMBER_NAME)            */\n  /*                                                                 */\n  /* ENDUSER : ENDUSER_PREFIX.PARMFILE_SUFFIX(MEMBER_NAME)           */\n  /*           (ONLY CHECKED FOR NUXXT, NUXXP, NUADS OR NUUPS USERS) */\n  /*                                                                 */\n  /* PROJECT : PROJECT_PREFIX.\"MASTER\".PARMFILE_SUFFIX(MEMBER_NAME)  */\n  /*                                                                 */\n  /* USER    : PROFDSN(MEMBER_NAME)                                  */\n  /*                                                                 */\n  /* TESTS FOR DUPLICATE DATASETS IN THE SAME CONCATENATION          */\n  /* TESTS FOR EXISTENCE OF DATASETS BEFORE THEY ARE ALLOCATED       */\n  /* THE ENDUSER, PROJECT AND USER PARMS NEED NOT EXIST              */\n  /* EMERGENCY STARTUP IS USED IF NO MASTER PARMS ARE FOUND          */\n  /*                                                                 */\n  /*******************************************************************/\n\n  ADDRESS TSO\n\n  ARG OPT                                /* GET OPTION IF SPECIFIED  */\n\n  X = TIME(R)                            /* RECORD START TIME        */\n\n  \"FINDSYS\"                              /* WHAT SYSTEM IS THIS ?    */\n  SYSTEM = SUBSTR(SYSID,4,1)             /* USE 4TH CHARACTER        */\n\n  /*---------------  DEFINE GLOBAL VARIABLES  -----------------------*/\n\n  APPL             = \"ISR\"\n  DS_COUNT         = 0\n  DS_COUNT_T       = 0\n  DSN_#_MAX        = 1\n  DSNTAB.          = \"\"\n  PDFBASIC         = \"'SYS1.ISRCLIB(PDFBASIC)'\"\n  ENDUSER_FLAG     = \"N\"\n  ENDUSER_PREFIX   = \"SYSA.OP\" || SYSTEM || \"TSOEU\"\n  F_COUNT          = 0\n  FILE_#_MAX       = 0\n  FILEDATA         = \"\"\n  FILETAB.         = \"\"\n  ISPF_PANEL       = \"ISR@PRIM\"\n  ISPFTEST         = \"\"\n  LOGOFF_INDICATOR = \"N\"\n  LOGON_PROC       = SYSVAR(\"SYSPROC\")\n  MASTER_PREFIX    = \"SYSA.OP\" || SYSTEM || \"TSO\"\n\n  MEMBER_SUFFIX    = \"\"\n  IF SUBSTR(LOGON_PROC,5,3) = \"DB2\" THEN\n    MEMBER_SUFFIX  = \"DB2\"\n  IF SUBSTR(LOGON_PROC,1,7) = \"TSOTEST\" THEN\n    MEMBER_SUFFIX  = SUBSTR(LOGON_PROC,8,1)\n  MEMBER_NAME      = \"TSO\" || SYSTEM || MEMBER_SUFFIX\n\n  PARMFILE_SUFFIX  = \"ISPTLIB\"\n  STANDARD         = \"YES\"\n  START_COMMAND    = \"ISPF\"\n  STOP_INDICATOR   = \"\"\n  POSTREQ.0        = 0\n  PREREQ.0         = 0\n  USERID           = SYSVAR(\"SYSUID\")\n\n  \"FINDGRP\"\n  PROJECT_PREFIX = GRPID\n\n  /*------------------  MAIN CONTROL OF REXX   ----------------------*/\n\n  \"PROFILE PREFIX(\"USERID\")\"\n\n  CALL STEP2_ALLOC_ISPPROF\n  \"ALLOCATE F(ISPPROF) DA('\"PROFDSN\"') SHR REUSE\"\n\n  IF OPT = \"RESET\" THEN \"%ROGR\"\n\n  CALL STEP4_PROCESS_PARM_FILES\n\n  LRC = LISTDSI(\"ISPTLIB\" \"FILE\")\n  IF SYSDSNAME \u00ac= PROFDSN THEN\n    \"CONCAT F(ISPTLIB) DA('\" || PROFDSN || \"') SHR\"\n\n  IF RC > 1 THEN\n    DO\n      SAY \"CONCAT OF ISPF PROFILE TO ISPTLIB FAILED\"\n      \"%ROGR\"\n      EXIT\n    END\n\n  IF ISPFTEST \u00ac= \"\" THEN\n    SAY \"- ISPF WILL BE STARTED IN\" ISPFTEST \"MODE\"\n  \"ISPSTART  CMD(%ROGS \" || OPT || \") NEWAPPL(AAAA)\" ISPFTEST\n\n  DO COUNT = 1 TO PREREQ.0\n    INTERPRET '\"' || PREREQ.COUNT || '\"'\n  END\n  \"K\"\n\n  \"%CHECKGRP NUMANTSO\"                      /* MANAGEMENT TSO ?      */\n  IF RC = 0 & START_COMMAND = \"ISPF\"\n    THEN\n      START_COMMAND = \"%MANTSO\"\n\n  STEP8_RC =  STEP8_START_COMMAND()\n\n  DO COUNT = 1 TO POSTREQ.0\n    INTERPRET '\"' || POSTREQ.COUNT || '\"'\n  END\n\n  IF LOGOFF_INDICATOR = \"Y\" THEN \"LOGOFF\"\n\n  EXIT 0\n\n  /*------------------  END EXECUTION          ----------------------*/\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE   : STEP2_ALLOC_ISPPROF                                 */\n  /*                                                                 */\n  /* PURPOSE   : ALLOCATE ISPPROF DATASET                            */\n  /*                                                                 */\n  /* PROCESSING: CHECK WHETHER 'NUTSO.<USERID>.<SYSID>.ISPPROF'      */\n  /*             EXISTS. IF SO, THIS IS THE VALUE OF 'PROFDSN'       */\n  /*                                                                 */\n  /*             IF NOT, CHECK WHETHER                               */\n  /*             '<PROJECT_PREFIX>.<USERID>.<SYSID>.ISPPROF'         */\n  /*             EXISTS, CREATE IT IF NOT                            */\n  /*                                                                 */\n  /*             IF A NEW PROFILE IS CREATED, SEE IF THERE IS A      */\n  /*             DATASET 'PROJECT_PREFIX.USERID.ISPPROF'             */\n  /*                                                                 */\n  /*             IF SO, CALL ROUTINE 'STEP2_COPY_OLDPROF' TO COPY    */\n  /*             ALL MEMBERS INTO THE NEW PROFILE DATASET            */\n  /*                                                                 */\n  /*             ALLOCATE THE PROFILE TO DDNAME 'ISPPROF'            */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP2_ALLOC_ISPPROF:\n\n  PROFDSN = \"NUTSO.\"USERID\".\"SYSID\".ISPPROF\"\n  IF SYSDSN(\"'\"PROFDSN\"'\") = \"OK\" THEN RETURN 0\n\n  PROFDSN = PROJECT_PREFIX\".\"USERID\".\"SYSID\".ISPPROF\"\n  OLDPROF = PROJECT_PREFIX\".\"USERID\".ISPPROF\"\n\n  IF SYSDSN(\"'\"PROFDSN\"'\") = \"OK\" THEN RETURN 0\n\n  \"ALLOCATE F(PROF) DA('\"PROFDSN\"') NEW,\n  UNIT(SYSALLDA) TRACKS SPACE(5,1) LRECL(80) CATALOG,\n  RECFM(F B) BLKSIZE(15760) DSORG(PO) DIR(45) REUSE\"\n\n  IF RC \u00ac= 0 THEN\n    DO\n      SAY \"ERROR CREATING ISPF PROFILE\" PROFDSN \"FOR\" USERID\n      EXIT\n    END\n\n  \"FREE F(PROF)\"\n  SAY \"ISPF PROFILE\" PROFDSN \"CREATED FOR\" USERID\n  IF SYSDSN(\"'\"OLDPROF\"'\") = \"DATASET NOT FOUND\" THEN RETURN 0\n\n  COPY_RC = STEP2_COPY_OLDPROF(OLDPROF PROFDSN)\n\nRETURN 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE  : STEP2_COPY_OLDPROF                                   */\n  /*                                                                 */\n  /* CALLED BY: STEP2_ALLOC_ISPPROF                                  */\n  /*                                                                 */\n  /* PURPOSE  : COPY CONTENTS OF OLD PROF TO NEW IF NECESSARY        */\n  /*                                                                 */\n  /* RETURNS  :  0 - OK                                              */\n  /*             8 - IEBCOPY FAILURE                                 */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP2_COPY_OLDPROF:\n\n  ARG OLDPROF PROFDSN\n\n  SAY \"ABOUT TO COPY FROM\" OLDPROF \"TO\" PROFDSN\n\n  \"ALLOC F(PROFIN)   DA('\"OLDPROF\"') SHR REUSE\"\n  \"ALLOC F(PROFOUT)  DA('\"PROFDSN\"') SHR REUSE\"\n  \"ALLOC F(SYSPRINT) SYSOUT(X) REUSE\"\n  \"ALLOC F(SYSIN)    SPACE(1)  TRACKS         REUSE \",\n                    \"LRECL(80) BLKSIZE(15440) RECFM(F B) DSORG(PS) \"\n\n/* ----------------------------------------------------------------- */\n/* PUT COMMANDS TO DRIVE IEBCOPY ONTO STACK, WRITE STACK TO TEMP DS. */\n/* ----------------------------------------------------------------- */\n\n  DELSTACK\n  QUEUE \"     COPY    OUTDD=PROFOUT,INDD=PROFIN\"\n  QUEUE \"\"\n  \"EXECIO * DISKW SYSIN (FINIS\"\n\n/* ----------------------------------------------------------------- */\n/* RUN IEBCOPY. THIS IS AN AUTHORISED PROGRAM, AND NEEDS TSOEXEC.    */\n/* ----------------------------------------------------------------- */\n\n  \"TSOEXEC CALL 'SYS1.LINKLIB(IEBCOPY)' \"\n  IF RC = 0\n    THEN\n      SAY \"ALL MEMBERS COPIED FROM\" OLDPROF \"TO\" PROFDSN\n    ELSE\n      SAY \"ERROR COPYING MEMBERS FROM\" OLDPROF \"TO\" PROFDSN\n\n/* ------------------------------------------------------------------ */\n/* FREE/REALLOCATE THE FILES USED BY IEBCOPY.                         */\n/* ------------------------------------------------------------------ */\n\n  \"FREE  F(PROFIN PROFOUT)\"\n  \"ALLOC F(SYSIN)    DA(*) REUSE\"\n  \"ALLOC F(SYSPRINT) DA(*) REUSE\"\n\nRETURN 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE   : STEP4                                               */\n  /*                                                                 */\n  /* PURPOSE   : CHECK IF THE USER IS AN END USER. SET THE END USER  */\n  /*             FLAG IF SO AND ALLOCATE THE ISPPROF DATASET         */\n  /*             CHECK FOR EXISTENCE OF MASTER, PROJECT & USER PARMS */\n  /*             ISSUE 'STANDARD STARTUP' MESSAGE IF NO PROJECT PARMS*/\n  /*             EMERGENCY START IF NO MASTER PARMS                  */\n  /*             ALLOCATE DATASETS AND SET UP OPTIONS AFTER SCANNING */\n  /*             PARAMETER TABLES                                    */\n  /*                                                                 */\n  /* PROCESSING: CHECK WHETHER OPT IS 'RESET' AND INVOKE REXX 'ROGR' */\n  /*             IF SO                                               */\n  /*                                                                 */\n  /* KEYWORDS  : ALLOC    - DEFINE PERMANENT DATASET TO BE ALLOCATED */\n  /*             COMMAND  - DEFINE COMMAND TO ISSUE IN STEP8         */\n  /*             DUMMY    - DDNAME TO ALLOCATE TO DUMMY              */\n  /*             ISPFTEST - CAUSES ISPF TO BE INVOKED IN TEST MODE   */\n  /*             LOGOFF   - CAUSES AUTO-LOGOFF ON RETURN FROM STEP8  */\n  /*             PANEL    - NAME OF ISPF PRIMARY OPTION PANEL TO USE */\n  /*             POSTREQ  - DEFINE COMMAND TO ISSUE AFTER STEP8      */\n  /*             PREREQ   - DEFINE COMMAND TO ISSUE BEFORE STEP8     */\n  /*             STOP     - STOPS SUBSEQUENT PARM TABLES BEING USED  */\n  /*             SYSOUT   - DDNAME TO ALLOCATE TO SYSOUT             */\n  /*             TEMPDSN  - DEFINE TEMPORARY DATASET TO BE ALLOCATED */\n  /*             TERMINAL - DDNAME TO ALLOCATE 'TERM=TS'             */\n  /*             WILDCARD - COMMAND TO BE EXECUTED AS SOON AS READ   */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP4_PROCESS_PARM_FILES:\n\n  /*=================================================================*/\n  /*  SEE IF USER IS LOGGING ON WITH A LIVE ENDUSER GROUP (NU??P),   */\n  /*  TEST ENDUSER GROUP (NU??T), NUADS GROUP OR AS A NUUPS GROUP    */\n  /*  IF SO, PUT THE ISPPROF D/S AT THE TOP OF 'ISPPLIB' AS THEY     */\n  /*  USE IT FOR THEIR PERSONAL MENUS AND PANELS                     */\n  /*=================================================================*/\n\n  USER_TYPE = SUBSTR(PROJECT_PREFIX,5,1)\n  IF USER_TYPE = \"P\" | USER_TYPE = \"T\" |,\n     PROJECT_PREFIX = \"NUADS\" | PROJECT_PREFIX = \"NUUPS\" THEN\n      DO\n        ENDUSER_FLAG=\"Y\"\n        CNTL.0 = 1\n        CNTL.1 = \"ALLOC    ISPPLIB  \" || PROFDSN\n        CALL STEP4_PROCESS_PARMS     /* ISPF PROFILE => ISPPLIB  */\n      END\n\n  /*=================================================================*/\n  /*  CHECK FOR EXISTENCE OF USER PARAMETER TABLE                    */\n  /*  PROCESS IF FOUND                                               */\n  /*=================================================================*/\n\n  CNTLDSN = \"'\" || PROFDSN || \"(\" || MEMBER_NAME || \")'\"\n\n  IF SYSDSN(CNTLDSN) = \"OK\" THEN\n    DO\n      STANDARD = \"NO\"\n      CALL STEP4_READ_PARMS\n      CALL STEP4_PROCESS_PARMS\n    END\n\n  /*=================================================================*/\n  /*  CHECK FOR EXISTENCE OF GROUP PARAMETER TABLE                   */\n  /*  PROCESS IF FOUND                                               */\n  /*  ISSUE 'STANDARD STARTUP' MESSAGE IF NOT FOUND                  */\n  /*=================================================================*/\n\n  IF STOP_INDICATOR = \"\" THEN\n    DO\n      CNTLDSN = \"'\" || PROJECT_PREFIX || \".MASTER.\" ||,\n        PARMFILE_SUFFIX || \"(\" || MEMBER_NAME || \")'\"\n\n      IF SYSDSN(CNTLDSN) = \"OK\" THEN\n        DO\n          STANDARD = \"NO\"\n          CALL STEP4_READ_PARMS\n          CALL STEP4_PROCESS_PARMS\n        END\n      ELSE\n        IF ISPFTEST = \"TEST\" THEN\n          SAY CNTLDSN \"NOT PROCESSED -\" SYSDSN(CNTLDSN)\n    END                                  /* OF IF STOP_INDICATOR...  */\n\n  /*=================================================================*/\n  /*  CHECK FOR EXISTENCE OF END-USER PARAMETER TABLE IF 5TH CHAR    */\n  /*  OF PROJECT_PREFIX IS \"T\" OR \"P\" OR PROJECT_PREFIX IS \"NUADS\"   */\n  /*  OR PROJECT_PREFIX IS \"NUUPS\"                                   */\n  /*  PROCESS IF FOUND                                               */\n  /*  ISSUE ERROR MESSAGE IF NOT FOUND                               */\n  /*=================================================================*/\n\n  IF ENDUSER_FLAG = \"Y\" THEN\n      DO\n        CNTLDSN = \"'\" || ENDUSER_PREFIX || \".\" ||,\n          PARMFILE_SUFFIX || \"(\" || MEMBER_NAME || \")'\"\n        IF SYSDSN(CNTLDSN) = \"OK\" THEN\n          DO\n            STANDARD = \"NO\"\n            CALL STEP4_READ_PARMS\n            CALL STEP4_PROCESS_PARMS     /* PROCESS ENDUSER PARMS    */\n          END\n        ELSE\n          IF ISPFTEST = \"TEST\" THEN\n            SAY CNTLDSN \"NOT PROCESSED -\" SYSDSN(CNTLDSN)\n      END                                /* OF IF SUBSTR(PROJECT...  */\n\n  /*=================================================================*/\n  /*  CHECK FOR EXISTENCE OF MASTER PARAMETER TABLE                  */\n  /*  PROCESS IF FOUND                                               */\n  /*  INVOKE EMERGENCY STARTUP IF NOT FOUND                          */\n  /*=================================================================*/\n\n  IF STOP_INDICATOR = \"\" THEN\n    DO\n      CNTLDSN = \"'\" || MASTER_PREFIX || \".\" ||,\n        PARMFILE_SUFFIX || \"(\" || MEMBER_NAME || \")'\"\n\n      IF SYSDSN(CNTLDSN) = \"OK\" THEN\n        DO\n          CALL STEP4_READ_PARMS\n          CALL STEP4_PROCESS_PARMS\n        END\n      ELSE\n        DO\n          SAY \"-\" SYSDSN(CNTLDSN) \"==>\" CNTLDSN\n          SAY \"- CONTACT MVS TEAM FOR ADVICE\"\n          \"EXEC \" PDFBASIC\n          \"ISPSTART  CMD(%ROGS \" || OPT || \") NEWAPPL(AAAA)\" ISPFTEST\n          \"K\"\n          \"ISPSTART PANEL(\" || ISPF_PANEL || \") NEWAPPL(\",\n            || APPL || \")\" ISPFTEST\n          EXIT\n        END\n    END                                  /* OF IF STOP_INDICATOR...  */\n\n  IF ISPFTEST = \"TEST\" THEN\n    IF STANDARD = \"YES\" THEN SAY \"STANDARD STARTUP WILL BE USED\"\n\n  /*----------------------------------------------*/\n  /* FIND DATASETS FOR FILES                      */\n  /*----------------------------------------------*/\n\n  FILE_# = WORDS(FILEDATA)\n  FILE = \"\"\n  DSN  = \"\"\n\n  DO F_#   = 1 TO FILE_#_MAX BY 1\n    FILE   = WORD(FILETAB.F_#,1)\n    D_#    = 1\n    CONCAT = 0\n\n    DO UNTIL DSNTAB.F_#.D_# = \"\"\n      RACFDSN =  WORD(DSNTAB.F_#.D_#,1)\n      DSN = DSN || \" \" || RACFDSN\n      DS_COUNT = DS_COUNT+1\n      CONCAT = CONCAT + 1\n      D_#    = D_#    + 1\n    END                                  /* OF DO UNTIL DSNTAB       */\n\n    \"ALLOCATE F(\" || FILE || \") DA(\" DSN \") SHR REUSE\"\n    IF ISPFTEST \u00ac= \"\" THEN\n      DO\n        SAY  DS_COUNT \"DATASET(S) OF\" CONCAT \"WERE\",\n          \"ALLOCATED TO FILE(\" || FILE || \")\"\n        DS_COUNT_T = DS_COUNT_T + DS_COUNT\n        F_COUNT = F_COUNT + 1\n        DS_COUNT = 0\n      END                                /* OF DO OF ISPFTEST        */\n\n    FILE = \"\"\n    DSN  = \"\"\n  END                                    /* OF F_# = 1 TO FILE       */\n\n  IF ISPFTEST \u00ac= \"\" THEN\n    SAY DS_COUNT_T \"DATASETS WERE ALLOCATED TO\" F_COUNT \"FILES\"\n\n  RETURN 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE   : STEP4_READ_PARMS                                    */\n  /*                                                                 */\n  /* PURPOSE   : READ ALL PARAMETER RECORDS IN A PARM TABLE          */\n  /*                                                                 */\n  /* PROCESSING: READ ALL RECORDS FROM PARAMETER TABLE INTO A STEM   */\n  /*             CALLED 'CNTL'                                       */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP4_READ_PARMS:\n\n  \"ALLOCATE F(CNTL) DA(\" || CNTLDSN || \") SHR REUSE\"\n  \"EXECIO * DISKR CNTL (STEM CNTL. FINIS\"\n  \"FREE F(CNTL)\"\n\n  RETURN 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE   : STEP4_PROCESS_PARMS                                 */\n  /*                                                                 */\n  /* PURPOSE   : PROCESS EACH PARAMETER RECORD IN A PARM TABLE       */\n  /*                                                                 */\n  /* PROCESSING: CHECK KEYWORD IN COLUMNS 1-8 OF PARM D/S RECORD     */\n  /*             IF 'ALLOC' THEN CALL STEP4_MERGE_FILE               */\n  /*             PROCESS OTHER VALID KEYWORD TYPES                   */\n  /*             ISSUE AN ERROR MESSAGE FOR ANY INVALID KEYWORD      */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP4_PROCESS_PARMS:\n\n  DO C_# = 1 TO CNTL.0 BY 1\n    KEYWORD = SUBSTR(CNTL.C_#,1,8)\n    SELECT\n\n      WHEN KEYWORD = \"ALLOC   \" THEN\n        CALL STEP4_MERGE_FILE\n\n      WHEN KEYWORD = \"ALLOCATE\" THEN\n        CALL STEP4_MERGE_FILE\n\n      WHEN KEYWORD = \"PANEL   \" THEN\n        ISPF_PANEL     = SUBSTR(CNTL.C_#,10,8)\n\n      WHEN KEYWORD = \"COMMAND \" THEN\n        DO\n          IF START_COMMAND = \"ISPF\" THEN\n            START_COMMAND  = SUBSTR(CNTL.C_#,10,71)\n        END\n\n      WHEN KEYWORD = \"PREREQ  \" THEN\n        DO\n          PREREQ.0     = PREREQ.0 + 1\n          TEMP         = PREREQ.0\n          PREREQ.TEMP  = SUBSTR(CNTL.C_#,10,71)\n        END\n\n      WHEN KEYWORD = \"POSTREQ \" THEN\n        DO\n          POSTREQ.0    = POSTREQ.0 + 1\n          TEMP         = POSTREQ.0\n          POSTREQ.TEMP = SUBSTR(CNTL.C_#,10,71)\n        END\n\n      WHEN KEYWORD = \"TEMPDSN \" THEN\n        DO\n          TEMPDDN  = SUBSTR(CNTL.C_#,10,8)\n          TEMPATTR = SUBSTR(CNTL.C_#,19,62)\n          TEMPATTR = \"NEW UNIT(SYSDA) TRACKS\" TEMPATTR\n          \"ALLOCATE F(\" || TEMPDDN || \")\" TEMPATTR\n          IF RC > 0 THEN\n            SAY \"ERROR - TEMPDDN \" DDNAME \"ALREADY ALLOCATED\"\n        END\n\n      WHEN KEYWORD = \"DUMMY\" THEN\n        DO\n          DUMMYDD = WORD(SUBSTR(CNTL.C_#,10,8),1)\n          \"ALLOCATE F(\" || DUMMYDD || \") DUMMY REUSE\"\n          IF RC > 0 THEN\n            SAY \"ERROR - DDNAME \" DUMMYDD \"NOT ALLOCATED\"\n        END\n\n      WHEN KEYWORD = \"SYSOUT  \" THEN\n        DO\n          SYSDDN  = SUBSTR(CNTL.C_#,10,8)\n          SYSATTR = SUBSTR(CNTL.C_#,19,62)\n          SYSATTR = \"SYSOUT\" SYSATTR\n          \"ALLOCATE F(\" || SYSDDN || \")\" SYSATTR \"REUSE\"\n          IF RC > 0 THEN\n            SAY \"ERROR - SYSOUT \" SYSDDN \"NOT ALLOCATED\"\n        END\n\n      WHEN KEYWORD = \"TERMINAL\" THEN\n        DO\n          TERMDD  = WORD(SUBSTR(CNTL.C_#,10,8),1)\n          \"ALLOCATE F(\" || TERMDD || \") DA(*) REUSE\"\n          IF RC > 0 THEN\n            SAY \"ERROR - DDNAME \" TERMDD \"NOT ALLOCATED\"\n        END\n\n      WHEN KEYWORD = \"LOGOFF  \" THEN\n        LOGOFF_INDICATOR = \"Y\"\n\n      WHEN KEYWORD = \"STOP    \" THEN\n        STOP_INDICATOR = \"STOP\"\n\n      WHEN KEYWORD = \"ISPFTEST\" THEN\n        ISPFTEST = \"TEST\"\n\n      WHEN KEYWORD = \"WILDCARD\" THEN\n        INTERPRET SUBSTR(CNTL.C_#,10,71)\n\n      OTHERWISE\n        SAY \"INVALID KEYWORD - \" KEYWORD\n\n    END                                  /* OF SELECT                */\n\n  END                                    /* OF DO C_# = 1 TO CNTL.0  */\n\n  RETURN 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE   : STEP4_MERGE_FILE                                    */\n  /*                                                                 */\n  /* PURPOSE   : PROCESS A PARAMETER RECORD WITH THE KEYWORD 'ALLOC' */\n  /*                                                                 */\n  /* PROCESSING: ADD SPECIFIED DATASET TO THE APPROPRIATE LIST PRIOR */\n  /*             TO ALLOCATION                                       */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP4_MERGE_FILE:\n\n  FILE       = SUBSTR(CNTL.C_#,10,8)\n  DSN        = \"'\" || WORD(SUBSTR(CNTL.C_#,19,44),1) || \"'\"\n  IF SYSDSN(DSN) = \"OK\" THEN\n    DO\n      NEW_FILE   = \"YES\"\n      DOBBLE     = \"NO\"\n      DO F_NO = 1 TO FILE_#_MAX BY 1\n        IF FILE = FILETAB.F_NO THEN\n          DO\n            NEW_FILE = \"NO\"\n            /* NEXT CHECK STOPS CONCATENATIONS FOR THESE DDNAMES    */\n            IF FILE = \"ISPTABL \" | FILE = \"SMPTABL\" | FILE = \"ISPFILE\",\n            THEN\n              DO\n                SAY \"ONLY 1 DATASET SHOULD BE ALLOCATED TO\" FILE\n                SAY DSN \"WILL NOT BE ALLOCATED\"\n              END\n            ELSE\n              DO\n                DSN_# = 1\n                DO WHILE DSNTAB.F_NO.DSN_# \u00ac= \"\"\n                  IF DSNTAB.F_NO.DSN_# = DSN THEN\n                    DOBBLE = \"YES\"\n                  DSN_# = DSN_# + 1\n                END                      /* OF WHILE DSNTAB          */\n                IF DOBBLE = \"NO\" THEN\n                  DSNTAB.F_NO.DSN_# = DSN\n              END\n          END                            /* OF IF FILE = FILE        */\n      END                                /* OF F_NO = 1 TO MAX       */\n      IF NEW_FILE = \"YES\" THEN\n        DO\n          FILE_#_MAX = FILE_#_MAX + 1\n          FILETAB.FILE_#_MAX = FILE\n          DSNTAB.FILE_#_MAX.1 = DSN\n        END                              /* OF NEW_FILE = YES        */\n    END                                  /* OF SYSDSN = OK           */\n  ELSE\n    DO\n      SAY DSN \"===>\" SYSDSN(DSN)\n      SAY \"- WILL NOT BE CONCATENATED TO\" FILE\n    END                                  /* OF SYSDSN \u00ac= OK          */\n\n  RETURN 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE   : STEP8_START_COMMAND                                 */\n  /*                                                                 */\n  /* PURPOSE   : INVOKE ISPF OR ALTERNATIVE COMMAND IF SPECIFIED     */\n  /*                                                                 */\n  /* PROCESSING: PROCESS COMMAND CONTAINED IN THE VARIABLE           */\n  /*             START_COMMAND                                       */\n  /*                                                                 */\n  /*******************************************************************/\n\nSTEP8_START_COMMAND:\n\n  IF ISPFTEST \u00ac= \"\" THEN\n    SAY \"STARTUP ENDED AT \" TIME() \"FOR\" USERID,\n      || \" <ELAPSED TIME \" SUBSTR(TIME(R),1,4) \"SECONDS>\"\n\n  IF START_COMMAND = \"ISPF\" THEN\n    \"ISPSTART PANEL(\" || ISPF_PANEL || \") NEWAPPL(\",\n      || APPL || \")\" ISPFTEST\n  ELSE\n    START_COMMAND\n\n  RETURN RC\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TNUCHACC": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92%?\\x00\\x92%?\\x16@\\x00\\x18\\x00\\x18\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-09T16:40:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR DEFAULT(%+_)\n   $ TYPE(INPUT)  INTENS(LOW)      PAD(_)     CAPS(ON)  JUST(LEFT)\n   ! TYPE(INPUT)  INTENS(LOW)      PAD(NULLS)\n   \u00a2 TYPE(OUTPUT) INTENS(LOW)\n   # TYPE(&FTYPE) INTENS(&FINTENS2)\n   | TYPE(OUTPUT) INTENS(HIGH)\n   \\ TYPE(TEXT)   INTENS(&FINTENS)\n   ~ TYPE(TEXT)   INTENS(&FINTENS2)\n)BODY WINDOW(50,8)\n%\n+ You must supply a new account code using the\n% correct format.+It must be a code that you\n+ are%authorised to use.\n+\n+ PF3=End\n)INIT\n/*********************************************************************/\n/* Panel        : TNUCHACC - Change ISPF account code variable - help*/\n/* Author       : CSerSM/RB                                          */\n/* Date written : August 1992                                        */\n/* Called by    : NUCHACC                                            */\n/*********************************************************************/\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TNUCHGRP": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x921O\\x00\\x921O\\x15(\\x00)\\x00)\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-11-09T00:00:00", "modifydate": "1992-11-09T15:28:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "HAYDOCR"}, "text": ")BODY EXPAND(\\\\)\n%------------ DISPLAY and CHANGE GROUP facility (HELP) \\-\\-\n%COMMAND ===>_ZCMD\n+\n+  The%DISPLAY and CHANGE GROUP+panel shows all the RACF groups you belong to.\n+\n+  Any of these could be your RACF%default+group - the default group is defined\n+  as part of your%user profile+on the RACF database.\n+\n+  Your%CURRENT+group will begin with%NU+because you are logged on to%TSO+\n+  This is not necessarily the same as your%default+group.\n+\n+  If you want to select a%new+default group, select%one+group with an%'S'\n+\n+  The change will take effect at your%next logon.+\n+\n+  This utility only lets you select%TSO+groups (which begin with%'NU').\n+  You cannot select%NUSSSTS+as it is reserved for the%SSADMIN+function.\n+  You cannot select a group ending in%LUS+either.\n+\n+  New Netview Access options for TSO on IBM1, IBM2 and IBM3 now exist. These\n+  allow you to pre-select any of the TSO groups you belong to and work\n+  independently of the RACF default. Contact HAYDOCR on MEMO for more details\n+\n)INIT\n  &ZCMD = &Z\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : TNUCHGRP                                          */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 09/09/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Help screen for NUCHGRP (list/change group screen)*/\n  /*                                                                 */\n  /* COMMENTS    :                                                   */\n  /*                                                                 */\n  /*******************************************************************/\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TNUCVPRF": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x923o\\x00\\x923o\\x15\\x03\\x00.\\x00+\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T15:03:00", "lines": 46, "newlines": 43, "modlines": 0, "user": "HAYDOCR"}, "text": ")ATTR\n $ Type(output) Intens(high) Just(left)  Caps(on)  Pad(_)\n)BODY\n%PERSONAL USERIDS UTILITIES - ISPF Profile Converter (HELP) --------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n+This utility will submit a job (Jobname%&PUJOBN +) to create a new ISPF\n+profile based on an existing one.%Check the joblog+to see what was done.\n%\n+You must provide the%dataset name+for the dataset to be used as a%model\n+The new dataset will be named%<new-project>.<new-user>.ISPPROF.NEW\n%\n+Assuming the conversion works OK, the user who will use the new profile needs\n+to%log on, exit from ISPF+and do the necessary%dataset renaming.\n%\n%eg+using%NUZZD.NUZZD50.ISPPROF+to set up%&PUNPROF\n+\n%1)+Old dataset name would be%NUZZD.NUZZD50.ISPPROF\n%2)+New-project and new-user would be%&Z#GROUP+and%&ZUSER\n%3)+Using the previous panel, set up%&PUNPROF..NEW\n%4)+Log on to$Z   +using project%&Z#GROUP+and user%&ZUSER +and exit from ISPF\n%5)+Type the command%XNURNPRF+which will do two dataset renames:\n   %&PUNPROF                       +to%&PUNPROF..OLD\n   %&PUNPROF..NEW                  +to%&PUNPROF\n%6)+Type%STARTUP+to resume ISPF or log off and log on again\n%\n)INIT\n  &ZCMD     = &Z\n  &PUJOBN   = '&ZUSER.C'\n  &PUNPROF  = '&Z#GROUP..&ZUSER..&ZSYSNAME..ISPPROF'\n  .ZVARS    = '(ZSYSNAME)'\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : TNUDSREN                                          */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 09/09/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Help screen for NUDSREN (Dataset rename utility)  */\n  /*                                                                 */\n  /* COMMENTS    :                                                   */\n  /*                                                                 */\n  /*******************************************************************/\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TNUDSREN": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92%?\\x00\\x92%?\\x16F\\x00*\\x00\\x1d\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-09T16:46:00", "lines": 42, "newlines": 29, "modlines": 0, "user": "HAYDOCR"}, "text": ")BODY\n%PERSONAL USERIDS UTILITIES - Dataset Renaming (HELP) --------------------------\n%COMMAND ===>_ZCMD                                                             +\n%\n%Please check the report+from your%rename+or%check+job carefully.\n+The following are reasons why datasets may not be renamed:\n%\n%1)+HSM migrated datasets can not be renamed. Either%HDELETE+them if they are\n+   not needed or%HRECALL+them, then re-run the utility when they have been\n+   recalled.%Datasets will not be HDELETEd or HRECALLed automatically\n%\n%2)+For each dataset to be renamed,%RACF+is checked to see if your user has\n+   authority to do the renaming. If not, no renaming is done.\n%\n%3)+Datasets on%tape+or%cartridge+and%GDGs+will not be renamed by this utility\n+   If you have any and need help, please contact%Security Development+on%87709\n%\n%4)+ISPF%profile+datasets will not be renamed. If you want to model your%new+\n+   ISPF profile on an%old+one, please use the separate utility on%S.PU+\n%\n%5)+If the proposed new name for a dataset%already exists,+the rename will not\n+   be attempted. The report will explain why the rename was not done.\n%\n%6)+If a dataset is%allocated+to another%job+or%user,+the rename will fail\n%\n)INIT\n  &ZCMD = &Z\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : TNUDSREN                                          */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 09/09/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Help screen for NUDSREN (Dataset rename utility)  */\n  /*                                                                 */\n  /* COMMENTS    :                                                   */\n  /*                                                                 */\n  /*******************************************************************/\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA000": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\t\\x0f\\x00\\x92\\t\\x0f\\x14A\\x00\\x14\\x00\\x14\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-30T00:00:00", "modifydate": "1992-03-30T14:41:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "NUSPS24"}, "text": ")attr\n ! type(input) intens(high) just(left) padc(_) caps(on)\n)BODY WINDOW(72,8)\n% COMMAND ===>_ZCMD\n+\n+ Browse/Edit parameters for,\n+\n+   For Level  : !Z      +  (USER,PROJECT,ENDUSER,SYSTEM or ALL )\n+   For System : !Z       + (TSO1,TSO2...)\n+\n% ENTER=Continue PF1=Help PF3=End.\n)INIT\n&ZCMD  = &Z\n.ZVARS = '(TSOATYPE,TSOAPROC)'\n.HELP  = TTSOA000\n)PROC\nVER (&TSOATYPE,NB,LIST,SYSTEM,PROJECT,USER,ENDUSER,ALL)\nVER (&TSOAPROC,NB,NAME)\nVPUT (TSOATYPE,TSOAPROC) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA000X": {"ttr": 3077, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x16\\x02\\xcc\\x02\\xcc\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:16:00", "lines": 716, "newlines": 716, "modlines": 0, "user": "HAYDOCR"}, "text": "/* REXX ************************************************************/\n/*                                                                 */\n/* EXEC:      TSOA000                                              */\n/* WRITTEN:   NOVEMBER  1991 BY MICHAEL THOGERSEN AND PETER HANSEN */\n/* CALLED BY: S.LOGON OR AS A TSO COMMAND                          */\n/* PURPOSE:   A 'USERFRIENDLY' INTERFACE  TO BROWSE/MODIFY TSO     */\n/*            ALLOCATIONS, IE. THE FILES THAT ARE USED BY THE NU   */\n/*            STARTUP MAY BE MAINTAINED USING THIS REXX.           */\n/*                                                                 */\n/* CHANGES:   1. JANUARY 1992 BY CSERSM/RB.                        */\n/*        :      REWRITEN, ALL FEATURES REVIEWED, OVERALL LOGIC    */\n/*        :      RE-CONSTRUCTED TO ALLOW THE ALL OPTION.           */\n/*        :   2. JULY 1992 BY CSERSA/RB.                           */\n/*        :      PROCEDURE SAVE_FILE EXTENDED TO STORE ISPF STATS  */\n/*        :      WHEN A MEMBER IS WRITTEN OUT.                     */\n/*        :      MORE COMMENTS ADDED TO VARIOUS SECTIONS.          */\n/*        :   3. NOVEMBER 1992 BY SECDEV/RNH.                      */\n/*        :      IMPLEMENT SUPPORT FOR PER-OSE ISPPROFS.           */\n/*        :   4. NOVEMBER 1992 BY CTSPMVS/SW.                      */\n/*        :      PERMIT CROSS-OSE ISPPROF EDITING.                 */\n/*        :   5. NOVEMBER 1992 BY CTSPMVS/SW.                      */\n/*        :      AMENDED SO AS TO REJECT UNSORTED TSO ALLOC LISTS  */\n/*        :      AND RE-ORG THEM SO THEY WILL BE CLEAN NEXT TIME.  */\n/*        :   6. DECEMBER 1992 BY SECDEV/RNH.                      */\n/*        :      AMENDED TO PROCESS 'NUTSO' PREFIXED ISPPROFS IF   */\n/*        :      FOUND, WHEN PROCESSING USER LEVEL PARAMETERS.     */\n/*******************************************************************/\n\nTRACE OFF\n\"PROFILE NOWTPMSG\"\nADDRESS ISPEXEC\n\"CONTROL ERRORS RETURN\"\n\n/*------------------  MAIN CONTROL OF REXX   ----------------------*/\n\nDO FOREVER\n  CALL INITIALISE_ALL_VARS\n  IF GET_PARMS() \u00ac= 0 THEN\n    DO\n      \"REMPOP\"\n      LEAVE\n    END\n  CALL BUILD_TEMP_TABLE\n  IF POPULATE_TABLE() < 8 THEN\n    IF TABLE_PROCESS() = 0 THEN\n      IF CHECK_RACF_RC = 0 THEN\n        CALL SAVE_FILE\n  \"TBEND \" TEMP_TABLE\n  \"REMPOP ALL \"              /* FOR GET_PARMS ADDPOP */\nEND                          /* OF DO FOREVER        */\n\nADDRESS TSO \"PROFILE WTPMSG\"\n\"TBEND \" TEMP_TABLE\n\nEXIT\n\n/* ================================================================== */\n/*              S U B R O U T I N E   S E C T I O N                   */\n/* ================================================================== */\n\n/* ----------------------------------------------------------------- */\n/*        GET NAME OF PROC AND TYPE THAT USER WISHES TO MAINTAIN.    */\n/*        IF PF3 PRESSED, THEN EXIT.                                 */\n/* ----------------------------------------------------------------- */\n\nGET_PARMS:\n\n   ZWINTTL = 'TSO-LOGON ALLOCATIONS'\n   \"ADDPOP ROW(1) COLUMN(1)\"\n   \"DISPLAY PANEL(TSOA000)\"\n   TARGET_SYSTEM  = SUBSTR(TSOAPROC,4,1)\n   LASTCC         = RC\n   TEMP_TABLE     = TSOAPROC||SUBSTR(TSOATYPE,1,1)\n   MASTER_PREFIX  = \"SYSA.OP\" || TARGET_SYSTEM || \"TSO.\"\n\nRETURN LASTCC\n\n\n/*-------------------------------------------------------------------*/\n/*    THIS SUBROUTINE CREATES THE TEMPORARY TABLE USED FOR DISPLAY   */\n/*-------------------------------------------------------------------*/\n\nBUILD_TEMP_TABLE:\n\n   \"TBEND \" TEMP_TABLE\n   \"TBCREATE \"TEMP_TABLE,\n             \"KEYS( KEYWORD DDNAME DDCOUNT I) ,\n              NAMES(SRC     DDDISP DSN      ) NOWRITE\"\n   CREATE_RC =  RC\n   IF CREATE_RC \u00ac= 0 THEN \"SETMSG MSG(TSOA011)\"\n   \"TBSORT \" TEMP_TABLE \" FIELDS(KEYWORD,C,A,  \",\n                               \" DDNAME,C,A,   \",\n                               \" DDCOUNT,N,A,  \",\n                               \" I,N,A )       \"\nRETURN CREATE_RC\n\n/*-------------------------------------------------------------------*/\n/*    THIS SUBROUTINE WILL READ THE ALLOC_DSN INTO THE TEMPORARY     */\n/*    ISPF TABLE FOR FURTHER PROCESSING.                             */\n/*-------------------------------------------------------------------*/\n\nPOPULATE_TABLE:\n\n    TEST_PROFNAME = \"NUTSO.\"SYSVAR(SYSUID)\".IBM\"TARGET_SYSTEM || ,\n                    \".ISPPROF\"\n    IF SYSDSN(\"'\"TEST_PROFNAME\"'\") = \"OK\"\n      THEN\n        PROFILE_PREFIX = \"NUTSO\"\n      ELSE\n        PROFILE_PREFIX = PROJECT_PREFIX\n    LIMIT = 1\n    SELECT\n      WHEN TSOATYPE = \"USER\" THEN\n        ALLOC_DSN = ,\n          PROFILE_PREFIX\".\"SYSVAR(SYSUID)\".IBM\"TARGET_SYSTEM || ,\n          \".ISPPROF(\"TSOAPROC\")\"\n      WHEN TSOATYPE = \"PROJECT\" THEN\n        ALLOC_DSN = PROJECT_PREFIX\".MASTER.ISPTLIB(\"TSOAPROC\")\"\n      WHEN TSOATYPE = \"SYSTEM\" THEN\n        ALLOC_DSN = MASTER_PREFIX||\"ISPTLIB(\"TSOAPROC\")\"\n      WHEN TSOATYPE = \"ENDUSER\" THEN\n        ALLOC_DSN = \"SYSA.OP\"TARGET_SYSTEM\"TSOEU.ISPTLIB(\"TSOAPROC\")\"\n      WHEN TSOATYPE = \"ALL\" THEN\n       DO\n        ALLOC_DSN1= ,\n          PROFILE_PREFIX\".\"SYSVAR(SYSUID)\".IBM\"TARGET_SYSTEM || ,\n          \".ISPPROF(\"TSOAPROC\")\"\n        ALLOC_DSN2= PROJECT_PREFIX\".MASTER.ISPTLIB(\"TSOAPROC\")\"\n        ALLOC_DSN3=\"SYSA.OP\"TARGET_SYSTEM\"TSOEU.ISPTLIB(\"TSOAPROC\")\"\n        ALLOC_DSN4= MASTER_PREFIX||\"ISPTLIB(\"TSOAPROC\")\"\n        CHECK_RACF_RC = 4\n        LIMIT = 4\n       END              /* END OF ALL BIT */\n      OTHERWISE\n        DO\n          SAY 'ERROR DETERMINING TYPE OF DATASET '\n          EXIT\n        END\n    END                                       /* END SELECT */\n\n    IF TSOATYPE \u00ac= 'ALL' THEN\n      DO\n        IF CHECK_RACF(ALLOC_DSN) = 4 THEN\n          IF SETUP_ADDPOP(TSOA004 1 1) \u00ac= 0 THEN\n            DO\n              \"REMPOP\"\n              RETURN 8\n            END\n      END\n     ELSE            /* FOR ALL, WARN NO UPDATES, EXIT IF PF3 */\n      DO\n        IF SETUP_ADDPOP(TSOA006 1 1) = 0 THEN\n          \"REMPOP\"\n         ELSE\n          RETURN 99\n      END\n    DO I = 1 TO LIMIT\n      IF TSOATYPE = 'ALL' THEN\n        INTERPRET 'ALLOC_DSN = ALLOC_DSN'||I\n      T = SYSDSN(\"'\"ALLOC_DSN\"'\")\n      IF T = \"OK\" | T = 'MEMBER NOT FOUND' THEN\n        CALL READ_FILE ALLOC_DSN I\n       ELSE\n        DO\n          IF TSOATYPE \u00ac= 'ALL' THEN\n            DO\n              MSG = SYSDSN(\"'\"ALLOC_DSN\"'\")\n              \"SETMSG MSG(TSOA013)\"\n            END\n        END\n    END\n\nRETURN CHECK_RACF_RC\n\n/*-------------------------------------------------------------------*/\n/* THIS SUBROUTINE CHECKS IF THE USER HAS THE REQUIRED ACCESS.       */\n/*-------------------------------------------------------------------*/\n\nCHECK_RACF:\n\n  PARSE ARG DSN\n  CHECK_RACF_RC = 4\n  ADDRESS TSO \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"DSN\",UPDATE'\"\n  IF RC = 0 THEN CHECK_RACF_RC = 0\n\nRETURN CHECK_RACF_RC\n\n/*-------------------------------------------------------------------*/\n/*    THIS SUBROUTINE BUILDS THE TEMPORARY TABLE USED FOR DISPLAY    */\n/*    FIRST DETERMINE WHAT THE USER WANTS THEN READ ALL INTO THE     */\n/*    TABLE AND FOR ONE-OFF KEYWORDS INTO PARMS.                     */\n/*-------------------------------------------------------------------*/\n\nREAD_FILE:\n\n    PARSE ARG ALLOC_DSN I\n    DDNAME      = \"\"\n    LAST_DDNAME = \"\"\n    IF TSOATYPE = 'ALL' THEN\n      DO\n        SELECT\n          WHEN I=1 THEN SRC = 'USER'\n          WHEN I=2 THEN SRC = 'PROJ'\n          WHEN I=3 THEN\n            DO\n              TYPE_CHAR = SUBSTR(PROJECT_PREFIX,5,1)\n              IF TYPE_CHAR = 'T'   | ,\n                 TYPE_CHAR = 'P'   | ,\n                 PROJECT_PREFIX = 'NUADS' THEN\n                   SRC = 'EU'\n                  ELSE\n                   RETURN\n            END\n          WHEN I=4 THEN SRC = 'SYS'\n          OTHERWISE NOP\n        END                          /* END OF SELECT */\n      END\n     ELSE\n      DO\n        SELECT\n          WHEN TSOATYPE = 'USER'    THEN SRC = 'USER'\n          WHEN TSOATYPE = 'PROJECT' THEN SRC = 'PROJ'\n          WHEN TSOATYPE = 'ENDUSER' THEN SRC = 'EU'\n          WHEN TSOATYPE = 'SYSTEM'  THEN SRC = 'SYS'\n          OTHERWISE SAY 'ITS A PROBLEM '\n        END\n      END\n    OFFSET  = 1000 * I\n    ADDRESS TSO \"DELSTACK\"               /* CLEAN STACK */\n    IF T= 'OK' THEN\n      DO\n        ADDRESS TSO \"ALLOC F(TSOA) DA('\"ALLOC_DSN\"') SHR REU\"\n        ADDRESS TSO \"EXECIO * DISKR TSOA (STEM INFILE. FINIS )\"\n      END\n     ELSE\n      INFILE.0 = 0                      /* NO RECORDS READ TO PROCESS */\n\n    DDCOUNT = OFFSET\n    DO J= 1 TO INFILE.0\n      KEYWORD = WORD(SUBSTR(INFILE.J,1,8),1)\n      SELECT\n        WHEN KEYWORD = \"ALLOC\"   | KEYWORD = \"ALLOCATE\" |,\n             KEYWORD = \"TEMPDSN\" | KEYWORD = \"TERMINAL\" |,\n             KEYWORD = \"SYSOUT\"  | KEYWORD = \"DUMMY\" THEN\n          DO\n            IF KEYWORD = 'ALLOCATE' THEN KEYWORD = 'ALLOC'\n            DDCOUNT = DDCOUNT + 10\n            DDNAME = WORD(SUBSTR(INFILE.J,10,8),1)\n            IF DDNAME \u00ac= LAST_DDNAME THEN\n              DO\n                DDDISP = DDNAME\n                LAST_DDNAME = DDNAME\n                DDCOUNT     = OFFSET + 10\n              END\n             ELSE\n                DDDISP = ''\n            DSN  = SUBSTR(INFILE.J,19,61)\n            IF TSOATYPE = 'ALL' THEN\n              DO\n                \"TBADD \" TEMP_TABLE  \" ORDER \"\n                IF RC \u00ac= 0 THEN\n                  DO\n                    \"EDIT DATASET('\"ALLOC_DSN\"') MACRO(TSOASORT)\"\n                    IF RC = 0 THEN\n                      DO\n                        SAY 'DATASET ' ALLOC_DSN ' HAS BEEN'\n                        SAY 'MANUALLY EDITED AND LEFT IN UNMANAGEABLE'\n                        SAY 'ORDER. S.LOGON WILL RE-ORGANISE IT AND'\n                        SAY 'THEN EXIT. PLEASE THEN RETRY S.LOGON.'\n                        EXIT\n                      END\n                  END\n              END\n             ELSE\n               DO\n                 DDCOUNT = RIGHT(DDCOUNT,2)\n                 \"TBADD \" TEMP_TABLE  \" ORDER\"\n                 IF RC = 8 THEN\n                   DO\n                     SAY 'DATASET ' ALLOC_DSN ' HAS BEEN'\n                     SAY 'MANUALLY EDITED AND LEFT IN UNMANAGEABLE'\n                     SAY 'ORDER. S.LOGON WILL RE-ORGANISE IT AND'\n                     SAY 'THEN EXIT. PLEASE THEN RETRY S.LOGON.'\n                     \"EDIT DATASET('\"ALLOC_DSN\"') MACRO(TSOASORT)\"\n                     EXIT\n                   END\n               END\n          END\n        WHEN KEYWORD = \"ISPFTEST\" THEN KWTST = \"TEST\"\n        WHEN KEYWORD = \"PANEL\"    THEN KWPAN = SUBSTR(INFILE.J,10,8)\n        WHEN KEYWORD = \"PREREQ\"   THEN KWPRE = SUBSTR(INFILE.J,10,70)\n        WHEN KEYWORD = \"POSTREQ\"  THEN KWPOS = SUBSTR(INFILE.J,10,70)\n        WHEN KEYWORD = \"COMMAND\"  THEN KWCMD = SUBSTR(INFILE.J,10,70)\n        WHEN KEYWORD = \"LOGOFF\"   THEN KWLOG = \"YES\"\n        WHEN KEYWORD = \"STOP\"     THEN KWSTO = \"YES\"\n        OTHERWISE  SAY 'WARNING - KEYWORD ' KEYWORD ' NOT KNOWN.'\n\n      END                                /* END SELECT     */\n\n    END                                  /* END OF J LOOP  */\n\n    /* ------------------------------------------------------------ */\n    /* ADJUST DISPLAY DDNAMES WHEN ALL SELECTED.                    */\n    /* ------------------------------------------------------------ */\n    \"TBTOP\" TEMP_TABLE\n    IF TSOATYPE = 'ALL' THEN\n      DO\n        \"TBQUERY \" TEMP_TABLE \"ROWNUM(ROWS)\"\n        LASTDD = ''\n        DO ROWS\n          \"TBSKIP \" TEMP_TABLE\n          IF DDNAME \u00ac= LASTDD THEN\n            DO\n              DDDISP = DDNAME\n              LASTDD = DDNAME\n              \"TBPUT \" TEMP_TABLE \" ORDER \"\n            END\n          ELSE\n            DO\n              DDDISP= ''\n              \"TBPUT \" TEMP_TABLE \" ORDER \"\n            END\n        END\n      END\n    \"TBTOP\" TEMP_TABLE\nRETURN\n\n/* ----------------------------------------------------------------- */\n/*   THIS ROUTINE WILL CONTROL THE TEMPORARY ISPF TABLE AND IT'S     */\n/*  AVAILABLE COMMANDS                                               */\n/* ----------------------------------------------------------------- */\n\nTABLE_PROCESS:\n\n    /* ------------------------------------------------------------ */\n    /* DISPLAY AND PROCESS THE TABLE IN FOREVER LOOP.               */\n    /* 1. DEFINE THE WINDOW, AND SET UP TOP DISPLAY ROW.            */\n    /* 2. LEAVE IF PF3 PRESSED.                                     */\n    /* 3. IF THE USER DOES NOT HAVE RACF ACCESS, SHOW MESSAGE.      */\n    /* 4. PROCESS PRIMARY COMMANDS.                                 */\n    /* 5. PROCESS LINE COMMANDS.                                    */\n    /* ------------------------------------------------------------ */\n    TROW = 1\n    DO FOREVER\n      \"ADDPOP ROW(2) COLUMN(1) \"\n      \"TBTOP  \" TEMP_TABLE                  /* KEEPING TOP ROW STATIC*/\n      \"TBSKIP \" TEMP_TABLE \" NUMBER(\"TROW\")\"\n      \"TBDISPL\" TEMP_TABLE \"PANEL(TSOA001) CURSOR(ZCMD)\",\n                          \" CSRROW(\"TROW\") AUTOSEL(NO)\"\n      IF RC = 8 THEN LEAVE\n      TROW = ZTDTOP\n      IF CHECK_RACF_RC= 4 THEN       /* DISABLE CHANGES IF NO ACCESS. */\n        DO\n          IF TSOATYPE = 'ALL' THEN\n            PANEL = 'TSOA002'\n           ELSE\n            PANEL = 'TSOA002'\n          \"ADDPOP ROW(1) COLUMN(1) \"\n          \"DISPLAY PANEL(TSOA005) \"\n          \"REMPOP\"\n          IF ZCMD \u00ac= 'EXTRA' THEN ITERATE\n        END\n     IF PROCESS_PRIMARY_COMMANDS() = 0 THEN\n       DO WHILE ZTDSELS > 0\n          SELECT\n            WHEN OPT = \"S\" THEN\n              DO\n                TYPE = \"OUTPUT\"\n                IF SETUP_ADDPOP(TSOA003 1 1) = 0 THEN\n                  DO\n                    \"TBPUT\" TEMP_TABLE \"ORDER \"\n                    \"SETMSG MSG(TSOA017)\"\n                  END\n                ELSE\n                   \"SETMSG MSG(TSOA018)\"\n                \"REMPOP\"\n              END\n            WHEN OPT = \"I\" THEN\n              DO\n                TYPE = \"OUTPUT\"\n                IF SETUP_ADDPOP(TSOA003 1 1) = 0 THEN\n                  DO\n                    S_KEYWORD = KEYWORD\n                    S_DDNAME  = DDNAME\n                    S_DSN     = DSN\n                    S_SRC     = SRC\n                    MULT = LEFT(DDCOUNT,1)\n                    DDCOUNT = DDCOUNT + 1\n                    IF LEFT(DDCOUNT,1) = MULT THEN\n                      DO\n                        \"TBSCAN\" TEMP_TABLE ,\n                              \"ARGLIST(KEYWORD,DDNAME,DDCOUNT) NOREAD \",\n                              \"POSITION(POS)\"\n                        IF RC = 8 THEN\n                          DO\n                           DDCOUNT   = DDCOUNT - 1\n                           \"TBGET \" TEMP_TABLE\n                           KEYWORD   = S_KEYWORD\n                           DDNAME    = S_DDNAME\n                           DSN       = S_DSN\n                           SRC       = S_SRC\n                           DDCOUNT   = DDCOUNT + 1\n                           DDDISP    = ''\n                           \"TBADD \" TEMP_TABLE \" ORDER \"\n                          END\n                         ELSE\n                          CALL RENUMBER_AND_ADD\n                     END\n                 END\n                ELSE\n                  DO\n                   \"SETMSG MSG(TSOA018)\"\n                   \"REMPOP\"\n                 END\n                \"REMPOP\"    /* FOR SCREEN TSOA003 */\n             END\n           WHEN OPT = \"D\" THEN\n             DO\n               \"TBDELETE\" TEMP_TABLE\n               \"SETMSG MSG(TSOA017)\"\n             END\n           OTHERWISE NOP\n        END                                 /* OF SELECT   */\n\n        IF ZTDSELS = 1 THEN LEAVE\n        \"TBDISPL\" TEMP_TABLE\n     END                                    /* OF DO WHILE ZTDSELS */\n    ELSE\n     RETURN 4\n\n    END                                       /* OF DO FOREVER       */\n    \"REMPOP\"\n    \"REMPOP\"\n\n  RETURN 0\n\n/* ----------------------------------------------------------------- */\n/*   THIS ROUTINE WILL REFORMAT THE TEMP TABLE ONTO THE STACK, THEN  */\n/*   WRITE IT OUT AS THE REQUIRED PDS MEMBER.                        */\n/* ----------------------------------------------------------------- */\n\nSAVE_FILE:\n\n   ADDRESS TSO \"NEWSTACK\"\n   IF KWLOG  = \"YES\"  THEN QUEUE \"LOGOFF\"\n   IF KWPAN \u00ac= \"\"     THEN QUEUE \"PANEL    \"KWPAN\n   IF KWTST  = \"TEST\" THEN QUEUE \"ISPFTEST \"\n   IF KWSTO  = \"YES\"  THEN QUEUE \"STOP\"\n   IF KWPRE \u00ac= \"\"     THEN QUEUE \"PREREQ   \"KWPRE\n   IF KWPOS \u00ac= \"\"     THEN QUEUE \"POSTREQ  \"KWPOS\n   IF KWCMD \u00ac= \"\"     THEN QUEUE \"COMMAND  \"KWCMD\n\n   \"TBTOP  \" TEMP_TABLE\n   DO FOREVER\n     \"TBSKIP \" TEMP_TABLE\n     IF RC \u00ac= 0 THEN LEAVE\n     SELECT\n       WHEN KEYWORD = \"TERMINAL\" | KEYWORD = \"DUMMY\" THEN\n            QUEUE OVERLAY(KEYWORD,X,1,9,' ')||OVERLAY(DDNAME,Y,1,9,' ')\n       WHEN KEYWORD = \"TERMINAL\" THEN\n            QUEUE OVERLAY(KEYWORD,X,1,9,' ')||OVERLAY(DDNAME,Y,1,9,' ')\n       OTHERWISE\n         QUEUE OVERLAY(KEYWORD,X,1,9,' ') ||OVERLAY(DDNAME,Y,1,9,' '),\n               ||OVERLAY(DSN,X,1,62,' ')\n     END                              /* END SELECT                  */\n   END                                /* END DO FOREVER              */\n                                      /* AVOID WRITE IF UNCHANGED.   */\n   IF QUEUED() = INFILE.0 THEN\n     DO\n                                     /*  COPY STACK INTO STEM */\n        COMP.0 = QUEUED()\n        DO X = 1 TO COMP.0\n           PULL COMP.X\n        END\n                                     /*  COMPARE LINE BY LINE  */\n                                     /*  ON MISMATCH, SKIP OUT */\n        SAVE_FLAG = 0\n        DO X= 1 TO COMP.0\n          IF INFILE.X = COMP.X THEN ITERATE\n          SAVE_FLAG = 1\n        END\n        IF SAVE_FLAG = 0 THEN\n          DO\n            \"SETMSG MSG(TSOA023)\"\n            RETURN\n          END\n                                     /*  ADD THE LINES BACK.   */\n        DO X= 1 TO COMP.0\n          QUEUE COMP.X\n        END\n     END\n   QUEUE \"\"\n                                      /* WRITE TO DISK, UNLESS EMPTY */\n   IF QUEUED() > 1 THEN\n     DO\n       ADDRESS TSO \"ALLOC F(TSOA) DA('\"ALLOC_DSN\"') SHR REU\"\n       ADDRESS TSO \"EXECIO * DISKW TSOA (FINIS \"\n                                      /* SET MESSAGE, AND WRITE STATS*/\n       IF RC = 0 THEN                 /* INTO PDS DIRECTORY.         */\n         DO\n           \"SETMSG MSG(TSOA020)\"\n            ADDRESS TSO \"FREE F(TSOA) \"\n            PARSE VALUE ALLOC_DSN WITH INIT_DSN '(' TRASH\n            \"LMINIT   DATAID(DATAID) DATASET('\" || INIT_DSN || \"')\"\n            \"LMMSTATS DATAID(\"DATAID\") MEMBER(\"TSOAPROC\")\"\n            \"LMFREE  DATAID(\" || DATAID || \")\"\n         END\n        ELSE\n         \"SETMSG MSG(TSOA021)\"\n     END\n    ELSE\n     DO\n       ADDRESS TSO \"DELETE '\"|| ALLOC_DSN || \"'\"\n       SAY 'NO DATA TO WRITE - PARAMETER SET BEING DELETED. '\n     END\n\nRETURN\n\n/*-------------------------------------------------------------------*/\n/*    THIS SUBROUTINE CONTROLS SOME OF THE POPUP PANELS.             */\n/*-------------------------------------------------------------------*/\n\nSETUP_ADDPOP:\n\n    PARSE ARG PANEL ROW COLUMN\n    \"ADDPOP ROW(\"ROW\") COLUMN(\"COLUMN\")\"\n    \"DISPLAY PANEL(\"PANEL\")\"\n    POP_RC = RC\n\nRETURN POP_RC\n\n/*-------------------------------------------------------------------*/\n/*    PROCESS THE COMMANDS TYPED ON COMAND LINE OF TBDISPL.          */\n/*-------------------------------------------------------------------*/\n\nPROCESS_PRIMARY_COMMANDS:\n\n    SELECT\n      WHEN ZCMD = \"EXTRA\"  THEN\n        DO\n          \"ADDPOP ROW(1) COLUMN(1)\"\n          \"DISPLAY PANEL(TSOA002)\"\n          \"REMPOP\"\n        END\n      WHEN ZCMD = \"CANCEL\" THEN\n        DO\n           \"SETMSG MSG(TSOA019)\"\n           RETURN 4\n        END\n      WHEN ZCMD = \"SHOW\" THEN\n        DO\n           S_KEYWORD = KEYWORD\n           S_DDNAME  = DDNAME\n           S_DDCOUNT = DDNAME\n           \"TBTOP \" TEMP_TABLE\n           \"TBQUERY \" TEMP_TABLE \"ROWNUM(ROWS) \"\n           SAY \"KEYWORD DDNAME DDCOUNT DDDISP DSN  \"\n           DO ROWS\n             \"TBSKIP \" TEMP_TABLE\n             SAY KEYWORD DDNAME DDCOUNT DDDISP DSN\n           END\n           KEYWORD = S_KEYWORD\n           DDNAME  = S_DDNAME\n           DDCOUNT = RIGHT(S_DDCOUNT,2)\n        END\n      WHEN ZCMD = \"I\" THEN\n        DO\n          \"TBBOTTOM\" TEMP_TABLE\n          \"TBVCLEAR\" TEMP_TABLE\n          TYPE = 'INPUT'\n          OPT  = ZCMD\n          IF SETUP_ADDPOP(TSOA003 1 1) = 0 THEN\n            DO\n              DDDISP = DDNAME\n              DDCOUNT = RIGHT('10',2)\n              \"TBADD\" TEMP_TABLE \" ORDER \"\n              IF RC = 0 THEN\n                 \"SETMSG MSG(TSOA017)\"\n               ELSE\n                 DO\n                   \"SETMSG MSG(TSOA018)\"\n                 END\n            END\n        END\n      OTHERWISE NOP\n    END                                     /* OF SELECT */\n\nRETURN 0\n\n/* ----------------------------------------------------------------- */\n/*    RE-NUMBER A SUBSET OF THE TABLE.                               */\n/* THIS WORKS BY SHIFTING ALL THE ROWS TO BE RENUMBERED TO ANOTHER   */\n/* TABLE, THEN ADDING THEM BACK WITH THEIR NEW NUMBERS.              */\n/* IT IS ONLY CALLED WHEN A PRIOR ADD FAILS, SO IT WILL HARDLY EVER  */\n/* BE USED.                                                          */\n/* ----------------------------------------------------------------- */\n\nRENUMBER_AND_ADD:\n   \"TBEND TEMP \"\n   \"TBCREATE TEMP NAMES(KEYWORD DDNAME DDCOUNT SRC DDDISP DSN) NOWRITE\"\n\n                             /* RESET COUNTER ON ENTRY. */\n    H_DDCOUNT = DDCOUNT\n    S_DDCOUNT = DDCOUNT - 1\n                             /* GO THROUGH THE TABLE, ADD ROWS TO BE */\n                             /* PROCESSED TO A TEMP TABLE, AND DELETE*/\n                             /* FROM MAIN TABLE. EXIT IF END HIT.    */\n    \"TBTOP   \" TEMP_TABLE\n    \"TBQUERY \" TEMP_TABLE \"ROWNUM(ROWS)\"\n    DO ROWS\n      \"TBSKIP \" TEMP_TABLE\n      \"TBADD TEMP MULT(\"ROWS\")\"\n      \"TBDELETE \"TEMP_TABLE\n    END\n    /* ----------------------------------------------- */\n    /* FIND OUT WHERE THE NEW ROW GOES, AND ADD IT.    */\n    /* ----------------------------------------------- */\n    DDCOUNT = H_DDCOUNT\n    \"TBTOP  TEMP\"\n    KEYWORD = S_KEYWORD\n    DDNAME  = S_DDNAME\n    DSN     = S_DSN\n    SRC     = S_SRC\n    \"TBSCAN TEMP ARGLIST(KEYWORD DDNAME DDCOUNT) NOREAD \"\n    \"TBSKIP TEMP NUMBER(-1) NOREAD \"\n    \"TBADD  TEMP \"\n    /* ---------------------------------------------------------- */\n    /* FINALLY, ADD THE ADJUSTED ROWS BACK INTO THE DISPLAY TABLE */\n    /* AND LOOSE TEMP                                             */\n    /* ---------------------------------------------------------- */\n    \"TBTOP TEMP\"\n    \"TBQUERY TEMP ROWNUM(ROWS)\"\n    COUNT = 0\n    SAVE_DDNAME = ''\n    DO ROWS\n      COUNT = COUNT + 10\n      \"TBSKIP TEMP\"\n      IF DDNAME \u00ac= SAVE_DDNAME THEN COUNT = 10\n      DDCOUNT = COUNT\n      IF COUNT = 10 THEN\n        DO\n          SAVE_DDNAME = DDNAME\n          DDDISP = DDNAME\n        END\n       ELSE\n        DDDISP = ''\n      \"TBADD \" TEMP_TABLE \" ORDER \"\n    END\n   \"TBEND TEMP\"\nRETURN\n\n/* ----------------------------------------------------------------- */\n/* INITIALISE_ALL_VARS:                                              */\n/* THIS IS CALLED AT THE START OF PROCESSING ONLY. IT PREVENTS ANY   */\n/* INITIALISATION PROBLEMS, AND ACTS AS A DECLARATION AND VARIABLE   */\n/* SECTION.                                                          */\n/* ----------------------------------------------------------------- */\nINITIALISE_ALL_VARS:\n\nADDRESS TSO \"FINDSYS\"\nSYSTEM = SUBSTR(SYSID,4,1)\n\"VGET (TSOATYPE TSOAPROC) PROFILE\"\nIF TSOAPROC = \"\" THEN\n  TSOAPROC = \"TSO\" || SYSTEM\n\"VGET ZSYSNAME \"\nADDRESS TSO \"FINDGRP\"\nPROJECT_PREFIX = GRPID\nALLOC_DSN     = \"\"   /* DATASET TO READ VARIABLES IN FROM.            */\nALLOC_DSN1    = \"\"   /* AS ALLOC DSN, BUT USED TO DERIVE IT IN LOOP.  */\nALLOC_DSN2    = \"\"   /*                     \"                         */\nALLOC_DSN3    = \"\"   /*                     \"                         */\nALLOC_DSN4    = \"\"   /*                     \"                         */\nCHECK_RACF_RC = 999  /* 4 MEANS READ ONLY ACCESS TO ALLOC_DSN         */\nCOMP.0        = 0    /* STEM USED TO DETECT WHETHER SAVE NEEDED.      */\nCOUNT         = 0    /* USED IN RENUMBER_AND_ADD.                     */\nCREATE_RC     = 0    /* RETURN CODE FROM MAIN TBCREATE                */\nDDCOUNT       = 0    /*                                               */\nDDDISP        = \"\"   /* DDNAME FOR DISPLAY ON PANEL.                  */\nDDNAME        = \"\"   /* DDNAME IN TABLE RECORD. NON-DISPLAY           */\nDSN           = \"\"   /* DSN TO ALLOCATE. STORED IN TABLE.             */\nH_DDCOUNT     = \"\"   /* TEMP FIELD TO HOLD DDCOUNT IN RENUMBER_AND_ADD*/\nINFILE.0      = 0    /* NUMBER OF RECORDS READ FROM FILE.             */\nKEYWORD       = \"\"   /* CHARS 1 TO 8 OF RECORDS READ IN.              */\nKWCMD         = \" \"  /* SET IF KEYWORD = COMMAND                      */\nKWLOG         = \" \"  /* SET IF KEYWORD =                              */\nKWPAN         = \" \"  /* SET IF KEYWORD = PANEL                        */\nKWPOS         = \" \"  /* SET IF KEYWORD = POSTREQ                      */\nKWPRE         = \" \"  /* SET IF KEYWORD = PREREQ                       */\nKWSTO         = \" \"  /* SET IF KEYWORD = STOP                         */\nKWTST         = \" \"  /* SET IF KEYWORD = ISPFTEST                     */\nLAST_DDNAME   = \"\"   /* WORK FIELD USED IN BUILDING DISPLAY TABLE.    */\nLASTCC        = 0    /* RETURN VALUE FROM GET_PARMS.                  */\nLASTDD        = ''   /* SEE LAST_DDNAME                               */\nLIMIT         = 0    /* NUMBER OF TIMES TO DO I LOOP. 1 OR 4.         */\nMSG           = \"\"   /* VARIABLE INSERTED INTO AN ISPF MESSAGE.       */\nMULT          = 0    /* MULTIPLIER USED WITH ALL OPTION.              */\nOFFSET        = 0    /*                                               */\nOPT           = \"\"   /*                                               */\nPANEL         = \"\"   /*                                               */\nPOP_RC        = 0    /* RESULT OF REMOVING A POPUP WINDOW.            */\nS_DDCOUNT     = 0    /* SAVE VERSION OF ISPF TABLE FIELDS. SEE ABOVE. */\nS_DDNAME      = \"\"   /*  \"      \"        \"     \"     \"      \"    \"    */\nS_DSN         = \"\"   /*  \"      \"        \"     \"     \"      \"    \"    */\nS_KEYWORD     = \"\"   /*  \"      \"        \"     \"     \"      \"    \"    */\nS_SRC         = \"\"   /*  \"      \"        \"     \"     \"      \"    \"    */\nSAVE_DDNAME   = ''   /* WORK FIELD USED IN RENUMBER_AND_ADD           */\nSAVE_FLAG     = 0    /* DO WE SAVE CHANGES ? SEE SAVE_FILE.           */\nSRC           = \"\"   /* SOURCE FILE TYPE. EU, USER, PROJECT OR SYSTEM */\nT             = \"\"   /* OK/NOT OK, RESULT OF SYSDSN ON ALLOC_DSN      */\nTEMP_TABLE    = \"\"   /* NAME OF ISPF TABLE DISPLAYED TO USER.         */\nTROW          = 0    /* TOP ROW OF TABLE FOR DISPLAY                  */\nTYPE          = \"\"   /* USED TO SAY A SCREEN VAR IS INPUT OR OUTPUT   */\nTYPE_CHAR     = \"\"   /* CHAR 5 OF USER ID - T,P,L,S,H,I               */\n                     /* I/J/X, ASSORTED LOOP CONTROL VARS.            */\n\nRETURN\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOA001": {"ttr": 3334, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x00\\x00\\x92\\x00\\x8f\\x00\\x92\\x05\\x8f\\x19B\\x00\"\\x00%\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "1992-01-08T00:00:00", "modifydate": "1992-02-27T19:42:00", "lines": 34, "newlines": 37, "modlines": 0, "user": "NUSPS24"}, "text": ")ATTR\n* TYPE(OUTPUT) JUST(LEFT)   CAPS(OFF) intens(low) color(green)\n! TYPE(OUTPUT) JUST(RIGHT)  CAPS(OFF)\n_ TYPE(INPUT)  CAPS(ON)     PADC(_)\n? TYPE(INPUT)  INTENS(HIGH) CAPS(ON)\n% TYPE(TEXT)   INTENS(HIGH) SKIP(ON)\n+ TYPE(TEXT)   INTENS(LOW)  SKIP(ON)\n\u00a2 TYPE(TEXT)   INTENS(LOW)\n)BODY EXPAND(\\\\) WINDOW(70,20)\n+\n%COMMAND ===>?ZCMD                    \\ \\+Scroll%==>_AMT +\n+\n+Line commands:      Primary Commands:                Information:\n%I+Insert row       %EXTRA +Options                  +Type -%&TSOATYPE\n%S+Update row       %CANCEL+End without saving.      +OSE  -%&TSOAPROC\n%D+Delete row       %I     +Insert new DDNAME.\n+\n%  Keyword   DDNAME    From  Dataset name \\-\\-\n)MODEL\n_Z*KEYWORD +*DDDISP  +*SRC +*DSN                                     +\n)INIT\n  .ZVARS = '(OPT)'\n  .HELP  = TTSOA001\n  IF (&AMT = &Z)\n     &AMT = CSR\n  &OPT = ' '\n  &ZTDMARK =\n'-------------------*** End of Allocation list ***------------------'\n)REINIT\n  &OPT = ' '\n)PROC\n IF (&ZTDSELS \u00ac= 0000)           /* IF USER SELECTED SOME ROWS ...\n   VER (&OPT,LIST,S,D,I,MSG=TSOA010)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA002": {"ttr": 3336, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x914?\\x00\\x92\\x05\\x8f\\x19C\\x00\\x1c\\x00\\x19\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1991-12-09T00:00:00", "modifydate": "1992-02-27T19:43:00", "lines": 28, "newlines": 25, "modlines": 0, "user": "NUSPS24"}, "text": ")attr\n @ type(input) intens(high) just(left) padc(_)\n)BODY WINDOW(72,15)\n% COMMAND ===>_ZCMD\n+\n+\n+Keywords found. May be modified, press%PF1+for a full description:\n\n%Logoff..:_Z  +     (Yes,No - for automatic logoff after end of session)\n%Panel...:_KWPAN   +(Aternative logon panel name or blank)\n\n%Stop ...:_Z  +     (Yes,No - use with care, press%PF1+for more details)\n%Prereq..:_KWPRE\n%Command.:_KWCMD\n%Postreq.:_KWPOS\n%ISPFTEST:_Z   +    ('Test' or blank. Used for dialog development. )\n\n%ENTER=Save and exit PF3=Exit, no save PF1=Help\n)INIT\n .zvars = '(kwlog,kwsto,kwtst)'\n .HELP  = TTSOA002\n &ZCMD  = &Z\n)PROC\nVER (&KWLOG,LIST,YES,NO)\nVER (&KWSTO,LIST,YES,NO)\nVER (&KWPAN,NAME)\nVER (&KWTST,LIST,TEST)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA003": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x914?\\x00\\x92\\x05\\x9f\\x11\\x18\\x00\\x18\\x00\\x13\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf0\\xf0@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1991-12-09T00:00:00", "modifydate": "1992-02-28T11:18:00", "lines": 24, "newlines": 19, "modlines": 0, "user": "NUSPS00"}, "text": ")attr\n @ TYPE(TEXT)  INTENS(HIGH) COLOR(YELLOW)\n ! TYPE(&TYPE) INTENS(HIGH) CAPS(ON)\n)BODY WINDOW(76,8)\n% COMMAND ===>_ZCMD\n+\n+\n+Keyword :_KEYWORD + (ALLOC,TEMPDSN,SYSOUT,DUMMY,TERMINAL)\n+DDNAME  :!DDNAME  +\n+Details :_DSN\n+\n%ENTER=Save changes PF3=Exit no save PF1=Help\n)INIT\n&ZCMD    = &Z\n.HELP    = TTSOA003\n)PROC\nVER (&KEYWORD,NB,LIST,ALLOC,TEMPDSN,SYSOUT,DUMMY,TERMINAL)\nIF (&KEYWORD = 'DUMMY','TERMINAL')\n   IF (&DSN \u00ac= &Z)\n      .MSG = TSOA016\nIF (&KEYWORD = 'ALLOC')\n   VER (&DSN,NB,DSNAME)\nVER (&DDNAME,NB,NAME)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA004": {"ttr": 3340, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x92\\x00\\x7f\\x00\\x92\\x04/\\x13X\\x00\\t\\x00\\x18\\x00\\x00\\xd5\\xe4\\xe2\\xd4\\xe2\\xf3\\xf1@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1992-01-07T00:00:00", "modifydate": "1992-02-11T13:58:00", "lines": 9, "newlines": 24, "modlines": 0, "user": "NUSMS31"}, "text": ")BODY WINDOW(43,8)\n+\n+ Access failure for &TSOATYPE dataset.\n+ You are allowed to look at the dataset\n+ but you may not change it.\n+\n %ENTER=Continue PF3=End PF1=Help.\n)INIT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA005": {"ttr": 3342, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92\\x00\\x7f\\x00\\x92\\x04/\\x13Y\\x00\\x07\\x00\\x07\\x00\\x00\\xd5\\xe4\\xe2\\xd4\\xe2\\xf3\\xf1@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-01-07T00:00:00", "modifydate": "1992-02-11T13:59:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "NUSMS31"}, "text": ")BODY WINDOW(30,5)\n+\n+ Save attempt ignored.\n+\n+%ENTER=Continue PF3=End PF1=Help.\n)INIT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA006": {"ttr": 3344, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x92\\x00\\x8f\\x00\\x92\\x04/\\x14\\x19\\x00\\t\\x00\\t\\x00\\x00\\xd5\\xe4\\xe2\\xd4\\xe2\\xf3\\xf1@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1992-01-08T00:00:00", "modifydate": "1992-02-11T14:19:00", "lines": 9, "newlines": 9, "modlines": 0, "user": "NUSMS31"}, "text": ")BODY WINDOW(43,6)\n+\n+ When the ALL option is selected\n+ you are allowed to look at the merged\n+ allocs but you may not change them.\n+\n+%ENTER=Continue PF3=End PF1=Help.\n)INIT\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA01": {"ttr": 3346, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x914?\\x00\\x92\\x05\\x8f!\"\\x00\\x14\\x00\\x14\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-12-09T00:00:00", "modifydate": "1992-02-27T21:22:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "NUSPS24"}, "text": "TSOA010 'Invalid line command'          .TYPE=WARNING  .WINDOW=NORESP\n'Enter one of the listed line commands'\nTSOA011 'TBCREATE error'                .TYPE=CRITICAL .WINDOW=NORESP\n'An error was detected during creation of a table. Contact help-desk'\nTSOA012 'Access insufficient'           .TYPE=CRITICAL .WINDOW=NORESP\n'You do not have READ access to &DSN '\nTSOA013 'Dataset Error'                 .TYPE=CRITICAL .WINDOW=NORESP\n'DSN=&DSN  ===> &MSG.'\nTSOA014 'Control Dataset Empty'         .TYPE=WARNING  .WINDOW=NORESP\n'The required allocation control member does not contain data'\nTSOA015 'READ access only !'            .TYPE=WARNING  .WINDOW=NORESP\n'You only have read access to control dataset, UPDATE not allowed'\nTSOA016 'Leave Details Blank'\n'When specifying DUMMY or TERMINAL, leave Details field blank'\nTSOA017 '&OPT-Command OK'\n'Line-command &OPT was processed succesfully'\nTSOA018 '&OPT-Command cancelled'\n'Line-command &OPT was cancelled due to END processing'\nTSOA019 'CANCEL Command OK'             .TYPE=WARNING  .WINDOW=NORESP\n'No changes where saved, due to CANCEL command '\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSOA02": {"ttr": 3348, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92\\x03O\\x00\\x92\\x03_\\x11Y\\x00\\x08\\x00\\x08\\x00\\x00\\xd5\\xe4\\xe2\\xd4\\xe2\\xf3\\xf1@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-02-03T00:00:00", "modifydate": "1992-02-04T11:59:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "NUSMS31"}, "text": "TSOA020 'Allocations saved'             .TYPE=WARNING  .WINDOW=NORESP\n'Changes were saved on disk - will take effect at next logon'\nTSOA021 'Save failed '                  .TYPE=CRITICAL .WINDOW=NORESP\n'Rc= &rc from EXECIO, changes where not saved'\nTSOA022 'Save not allowed'              .TYPE=CRITICAL .WINDOW=NORESP\n'You are not authorised to save the control dataset '\nTSOA023 'No changes made'               .TYPE=WARNING  .WINDOW=NORESP\n'No save needed because no data had changed. '\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TSODFLT": {"ttr": 3350, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x00\\x91'o\\x00\\x92\\x05\\x9f\\x14(\\x00.\\x00.\\x00.\\xd5\\xe4\\xe2\\xd7\\xe2\\xf3\\xf9@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "1991-10-03T00:00:00", "modifydate": "1992-02-28T14:28:00", "lines": 46, "newlines": 46, "modlines": 46, "user": "NUSPS39"}, "text": "//* LIB: SYS1.PROCLIB(TSODFLT)\n//*\n//* NOTE: THIS PROCEDURE ENABLES USERS TO LOG ON TO TSO/E WITH\n//*       BASIC SYS1 ISPF/SDSF CONCATINATIONS.  IT ALLOCATES THE\n//*       ISPPROF DATASET AS A TEMPORARY DATASET TO ENSURE PROBLEMS\n//*       DO NOT ARISE DUE TO ITS UNAVAILABILITY.\n//*\n//SYS1TSO EXEC PGM=IKJEFT01,\n//             DYNAMNBR=300\n//ISPPROF  DD  DSN=&&ISPPROF,DSORG=PO,\n//             DISP=(NEW,DELETE,DELETE),\n//             UNIT=SYSALLDA,\n//             SPACE=(TRK,(5,1,12)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSPROC  DD  DSN=SYS1.ISRCLIB,\n//             DISP=SHR\n//ISPPLIB  DD  DSN=SYS1.ISFPLIB,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISRPENU,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISPPENU,\n//             DISP=SHR\n//ISPMLIB  DD  DSN=SYS1.ISFMLIB,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISPMENU,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISRMENU,\n//             DISP=SHR\n//ISPTLIB  DD  DSN=SYS1.ISFTLIB,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISPTENU,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISRTLIB,\n//             DISP=SHR\n//ISPSLIB  DD  DSN=SYS1.ISRSENU,\n//             DISP=SHR\n//         DD  DSN=SYS1.ISPSLIB,\n//             DISP=SHR\n//SYSHELP  DD  DSN=SYS1.HELP,\n//             DISP=SHR\n//SYSPRINT DD  SYSOUT=*,\n//             TERM=TS\n//SYSTERM  DD  SYSOUT=*,\n//             TERM=TS\n//SYSIN    DD  TERM=TS\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLOAD1": {"ttr": 3352, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01:\\x00\\x00\\x00\\x91(O\\x00\\x93\\x05\\x7f\\x07U\\x01\\xaf\\x01\\xc8\\x00\\x00\\xe8\\xd6\\xe4\\xd5\\xc7\\xd4\\xd1@@@'", "ispf": {"version": "01.58", "flags": 0, "createdate": "1991-10-11T00:00:00", "modifydate": "1993-02-26T07:55:00", "lines": 431, "newlines": 456, "modlines": 0, "user": "YOUNGMJ"}, "text": "//WOOLSTSA JOB F-ZZZZZ-NUSP-ZZZ,\n//             TSOLOAD1,\n//             CLASS=L,\n//             MSGCLASS=X,\n//             NOTIFY=WOOLSTS\n/*XEQ N1\n/*JOBPARM S=IBM1\n//*\n//***************************************************************\n//*                                                             *\n//** CHECK COMMENTS AND NUSPS.MVSESA.INFO(TSOROLL) BEFORE USE ***\n//*                                                             *\n//*            JOB TO LOAD TSO LIBRARIES FOR IBM1 AND IBM2      *\n//*                                                             *\n//* NOTE - SYS2.DB2IBMP LIBS NORMALLY COPIED AFTER DB2THRD      *\n//*                                                             *\n//***************************************************************\n//*                                                             *\n//*      ----- PLACE A COMMENT HERE FOR NEXT USER -----         *\n//*                                                             *\n//*      1) LAST RUN BETWEEN ROLLS => COPYING FROM SYS1         *\n//*      2) JOBSCAN PANELS/MESSAGES REMOVED                     *\n//*                                                             *\n//***************************************************************\n//*                                                             *\n//* ATTENTION: SYS1 LIBRARIES NOW ROLLED FROM SYSM.             *\n//*      ALSO: FOR AD HOC CHANGES, IF SYS1 IS NOT SETTLED, USE  *\n//*            SYS1 LIBRARIES TO BE SECURE.                     *\n//*      ALSO: WE HAVE A SPACE AGREEMENT TO USE SYSP17 FOR TSO. *\n//*            UNLESS IMPOSSIBLE, YOU SHOULD LEAVE PERMANENT    *\n//*            DATASETS ONLY ON SYSP17.                         *\n//*      ALSO: THE ORDER OF COPYING MAY BE SIGNIFICANT -- IF    *\n//*            A DATASET CONTAINS MEMBERS SUPERCEDING MEMBERS   *\n//*            OF ANOTHER IN THE SAME CLASS, COPY IT FIRST.     *\n//*                                                             *\n//***************************************************************\n//*\n//*  PREPARE FOR DISASTER ...\n//*\n//*    PREPARE 1: COPY THE PRE-CHANGED MEMBER TO SOMEWHERE SAFE\n//*\n//*  CARRY OUT SOME CHECKS ...\n//*\n//*    CHECK 1: YOU ARE BUILDING THE ALTERNATE (NOT LIVE) TSO SET\n//*    CHECK 2: THE LIST OF SOURCE LIBRARIES IS UP TO DATE\n//*    CHECK 3: THE SPACE AND DIRECTORY SPACE ALLOCATIONS ARE CORRECT\n//*    CHECK 4: THERE WILL BE ENOUGH SPACE ON THE DESIGNATED PACKS\n//*\n//*  AND THEN STICK TO THIS PROCEDURE ...\n//*\n//*    ACT 1: TRANSMIT JOB TO OBJECT OSE\n//*    ACT 2: VET THE JOB TO MAKE SURE SOURCE LIBRARIES ARE OK\n//*    ACT 3: SUBMIT THE JOB -- COULD TAKE UP TO 90 MINUTES\n//*    ACT 4: CHECK THE RESULTS -- JOB LOG AND GENERATED DATASETS\n//*    ACT 5: TEST BY LOGGIN ON WITH TSOTESTA OR TSOTESTB\n//*\n//***************************************************************\n//*                                                             *\n//*            DELETE ALL EXISTING LIBRARIES                    *\n//*                                                             *\n//***************************************************************\n//*\n//DELETE   EXEC PGM=IDCAMS\n//SYSIN    DD  *\n  DELETE SYSA.OP0TSOB.ISPHLIB\n  DELETE SYSA.OP0TSOB.ISPCLIB\n  DELETE SYSA.OP0TSOB.ISPLLIB\n  DELETE SYSA.OP0TSOB.ISPMLIB\n  DELETE SYSA.OP0TSOB.ISPPLIB\n  DELETE SYSA.OP0TSOB.ISPSLIB\n  DELETE SYSA.OP0TSOB.ISPTLIB\n//SYSPRINT DD SYSOUT=*\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP HELP                                     *\n//*                                                             *\n//***************************************************************\n//*\n//SYSHELP EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.HELP                  MVS    313\n//IBM2     DD  DISP=SHR,DSN=DB2P.DSNHELP               DB2    220\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSHELP  DD  DSN=SYSA.OP0TSOB.ISPHLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(TRK,(150,20,50)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN   DD  *\n  COPY     OUTDD=SYSHELP,INDD=IBM1\n  COPY     OUTDD=SYSHELP,INDD=IBM2\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP CLISTS                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPCLIB EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUP.CLIST          DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISRCLIB               PDF    310\n//IBM2     DD  DISP=SHR,DSN=SYS2.DB2IBMP.CLIST         DB2    220\n//IBM3     DD  DISP=SHR,DSN=SYS1.HRFCLST               RACF   181\n//IBM4     DD  DISP=SHR,DSN=SYS2.NDM13.NDMCLST         NDM    130\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.OP0JSCAN.ISPCLIB      JOBSCAN\n//OEM2     DD  DISP=SHR,DSN=NU.DDICT.ISPCLIB           DDICT\n//OEM3     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPCLIB       COOP   R2\n//OEM4     DD  DISP=SHR,DSN=SYS2.DB2THRDP.CLIST        DB2    220\n//OEM5     DD  DISP=SHR,DSN=SYSA.OP0OPCP.ISPCLIB       OPCESA\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPCLIB  DD  DSN=SYSA.OP0TSOB.ISPCLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(TRK,(450,30,135)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPCLIB,INDD=NU1\n  COPY     OUTDD=ISPCLIB,INDD=IBM1\n  COPY     OUTDD=ISPCLIB,INDD=IBM3\n  COPY     OUTDD=ISPCLIB,INDD=IBM4\n  COPY     OUTDD=ISPCLIB,INDD=OEM1\n  COPY     OUTDD=ISPCLIB,INDD=OEM2\n  COPY     OUTDD=ISPCLIB,INDD=OEM3\n  COPY     OUTDD=ISPCLIB,INDD=OEM4\n  COPY     OUTDD=ISPCLIB,INDD=OEM5\n  COPY     OUTDD=ISPCLIB,INDD=IBM2\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP LOAD MODULES                             *\n//*                                                             *\n//***************************************************************\n//*\n//ISPLLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=DB2P.RUNLIB.LOAD,          DB2    220\n//             DCB=RECFM=U\n//IBM2     DD  DISP=SHR,DSN=SYS2.NDM13.NDMLOAD         NDM    130\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.AP0VAM.LOADLIB        VAM  V4.0.1\n//OEM2     DD  DISP=SHR,DSN=SYSA.AP0ASM2.LOAD          ASM2\n//OEM3     DD  DISP=SHR,DSN=NU.DDICT.LOADLIB           DDICT\n//OEM4     DD  DISP=SHR,DSN=SYSA.OP0XPED.LOADLIB       XPEDITER\n//OEM5     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPLLIB       COOP   R2\n//OEM6     DD  DISP=SHR,DSN=SYSA.OP0MEMO.ISPF.LOAD     MEMO/ISPF\n//OEM7     DD  DISP=SHR,DSN=SYSA.OP0API.LOAD           MEMO/API\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPLLIB  DD  DSN=SYSA.OP0TSOB.ISPLLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(TRK,(900,200,450)),\n//             DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)\n//SYSIN    DD  *\n  COPYMOD  OUTDD=ISPLLIB,INDD=IBM1,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=IBM2,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM1,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM2,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM3,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM4,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM5,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM6,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM7,MAXBLK=23200\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP MESSAGES                                 *\n//*                                                             *\n//***************************************************************\n//*\n//ISPMLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUP.ISPMLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISFMLIB               SDSF   131\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISPMENU               ISPF   310\n//IBM3     DD  DISP=SHR,DSN=SYS1.ISRMENU               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS2.DB2IBMP.ISPMLIB       DB2    220\n//IBM5     DD  DISP=SHR,DSN=SYS1.HRFMSG                RACF   181\n//IBM6     DD  DISP=SHR,DSN=SYSA.OP0NDM13.NDMMSGS      NDM    130\n//IBM7     DD  DISP=SHR,DSN=SYS1.SEQQMSG0              OPCESA\n//IBM8     DD  DISP=SHR,DSN=SYS1.SEQAMLIB              OPCESA\n//*\n//OEM1     DD  DUMMY                                   WAS JOBSCAN\n//OEM2     DD  DISP=SHR,DSN=SYSA.OP0VAM.ISPMLIB        VAM  V4.0.1\n//OEM3     DD  DISP=SHR,DSN=NU.DDICT.ISPMLIB           DDICT\n//OEM5     DD  DISP=SHR,DSN=SYS2.DB2THRDP.ISPMLIB      DB2    220\n//OEM6     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPMLIB       COOP   R2\n//OEM7     DD  DISP=SHR,DSN=SYSA.OP0OPCP.ISPMLIB       OPCESA\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPMLIB  DD  DSN=SYSA.OP0TSOB.ISPMLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(TRK,(150,20,180)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPMLIB,INDD=NU1\n  COPY     OUTDD=ISPMLIB,INDD=IBM1\n  COPY     OUTDD=ISPMLIB,INDD=IBM2\n  COPY     OUTDD=ISPMLIB,INDD=IBM3\n  COPY     OUTDD=ISPMLIB,INDD=IBM4\n  COPY     OUTDD=ISPMLIB,INDD=IBM5\n  COPY     OUTDD=ISPMLIB,INDD=IBM6\n  COPY     OUTDD=ISPMLIB,INDD=OEM2\n  COPY     OUTDD=ISPMLIB,INDD=OEM3\n  COPY     OUTDD=ISPMLIB,INDD=OEM5\n  COPY     OUTDD=ISPMLIB,INDD=OEM6\n  COPY     OUTDD=ISPMLIB,INDD=OEM7\n  COPY     OUTDD=ISPMLIB,INDD=IBM7\n  COPY     OUTDD=ISPMLIB,INDD=IBM8\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP PANELS                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPPLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUP.ISPPLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISFPLIB               SDSF   131\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISPPENU               ISPF   310\n//IBM3     DD  DISP=SHR,DSN=SYS1.ISRPENU               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS1.DUTPLIB               DITTO  120\n//IBM5     DD  DISP=SHR,DSN=SYS2.DB2IBMP.ISPPLIB       DB2    220\n//IBM6     DD  DISP=SHR,DSN=SYS1.HRFPANL               RACF   181\n//IBM7     DD  DISP=SHR,DSN=SYS2.NDM13.NDMPNLS         NDM    130\n//IBM8     DD  DISP=SHR,DSN=SYS1.SEQQPENU              OPCESA\n//IBM9     DD  DISP=SHR,DSN=SYS1.SEQAPNLS              OPCESA\n//*\n//OEM1     DD  DUMMY                                   WAS JOBSCAN\n//OEM2     DD  DISP=SHR,DSN=SYSA.OP0VAM.ISPPLIB        VAM  V4.0.1\n//OEM3     DD  DISP=SHR,DSN=NU.DDICT.ISPPLIB           DDICT\n//OEM6     DD  DISP=SHR,DSN=SYS2.DB2THRDP.ISPPLIB      DB2    220\n//OEM7     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPPLIB       COOP   R2\n//OEM8     DD  DISP=SHR,DSN=SYSA.OP0OPCP.ISPPLIB       OPCESA\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPPLIB  DD  DSN=NUSPS.MVSESA.TSOB.ISPPLIB.TEMP,\n//             DISP=(NEW,CATLG),\n//             UNIT=DEVPOOL,\n//             SPACE=(CYL,(110,20,3000)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPPLIB,INDD=NU1\n  COPY     OUTDD=ISPPLIB,INDD=IBM1\n  COPY     OUTDD=ISPPLIB,INDD=IBM2\n  COPY     OUTDD=ISPPLIB,INDD=IBM3\n  COPY     OUTDD=ISPPLIB,INDD=IBM4\n  COPY     OUTDD=ISPPLIB,INDD=IBM6\n  COPY     OUTDD=ISPPLIB,INDD=IBM7\n  COPY     OUTDD=ISPPLIB,INDD=OEM2\n  COPY     OUTDD=ISPPLIB,INDD=OEM3\n  COPY     OUTDD=ISPPLIB,INDD=OEM6\n  COPY     OUTDD=ISPPLIB,INDD=OEM7\n  COPY     OUTDD=ISPPLIB,INDD=OEM8\n  COPY     OUTDD=ISPPLIB,INDD=IBM5\n  COPY     OUTDD=ISPPLIB,INDD=IBM8\n  COPY     OUTDD=ISPPLIB,INDD=IBM9\n//*\n//***************************************************************\n//*                                                             *\n//*             DEFINE NEW ISPPLIB LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//DEFPLIB EXEC PGM=IEFBR14\n//ISPPLIB  DD  DSN=SYSA.OP0TSOB.ISPPLIB,\n//             DISP=(,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(CYL,(65,10,3000)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//*\n//***************************************************************\n//*                                                             *\n//*            CONVERT NEW ISPPREP LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//ISPPREP EXEC PGM=IKJEFT01\n//ISPPROF  DD  DSN=&ISPPROF,\n//             DISP=(,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(20,,60)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//ISPMLIB  DD  DISP=SHR,DSN=SYS1.ISPMENU\n//         DD  DISP=SHR,DSN=SYS1.ISRMENU\n//ISPPLIB  DD  DISP=SHR,DSN=SYS1.ISPPENU\n//         DD  DISP=SHR,DSN=SYS1.ISRPENU\n//ISPSLIB  DD  DISP=SHR,DSN=SYS1.ISPSLIB\n//         DD  DISP=SHR,DSN=SYS1.ISRSENU\n//ISPTLIB  DD  DISP=SHR,DSN=SYS1.ISPTENU\n//         DD  DISP=SHR,DSN=SYS1.ISRTLIB\n//ISPLOG   DD  SYSOUT=*,\n//             DCB=(RECFM=FB,LRECL=133,BLKSIZE=1330)\n//SYSTSPRT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSTSIN  DD *\n  ISPSTART PGM(ISPPREP) PARM(INPAN('NUSPS.MVSESA.TSOB.ISPPLIB.TEMP') -\n                            OUTPAN('SYSA.OP0TSOB.ISPPLIB'))\n//*\n//***************************************************************\n//*                                                             *\n//*             COPY NON-ISPPREPED MEMBERS INTO ISPPLIB         *\n//*                                                             *\n//***************************************************************\n//*\n//COPYPREP EXEC PGM=IEBCOPY\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPPREP  DD  DISP=SHR,DSN=NUSPS.MVSESA.TSOB.ISPPLIB.TEMP\n//ISPPLIB  DD  DISP=SHR,DSN=SYSA.OP0TSOB.ISPPLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  COPY     OUTDD=ISPPLIB,INDD=ISPPREP\n//*\n//***************************************************************\n//*                                                             *\n//*             DELETE OLD ISPPREP LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//DELPREP EXEC PGM=IDCAMS\n//SYSIN    DD  *\n  DELETE  NUSPS.MVSESA.TSOB.ISPPLIB.TEMP\n//SYSPRINT DD  SYSOUT=*\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP SKELS                                    *\n//*                                                             *\n//***************************************************************\n//*\n//ISPSLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUP.ISPSLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISPSLIB               ISPF   310\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISRSENU               PDF    310\n//IBM3     DD  DISP=SHR,DSN=SYS2.DB2IBMP.ISPSLIB       DB2    220\n//IBM4     DD  DISP=SHR,DSN=SYS1.HRFSKEL               RACF   181\n//IBM5     DD  DISP=SHR,DSN=SYS2.NDM13.NDMSKLS         NDM    130\n//*\n//OEM1     DD  DISP=SHR,DSN=NU.DDICT.ISPSLIB           DDICT\n//OEM2     DD  DISP=SHR,DSN=SYS2.DB2THRDP.ISPSLIB      DB2    220\n//OEM3     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPSLIB       COOP   R2\n//OEM4     DD  DISP=SHR,DSN=SYSA.OP0OPCP.ISPSLIB       OPCESA\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPSLIB  DD  DSN=SYSA.OP0TSOB.ISPSLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(TRK,(180,20,180)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPSLIB,INDD=NU1\n  COPY     OUTDD=ISPSLIB,INDD=IBM1\n  COPY     OUTDD=ISPSLIB,INDD=IBM2\n  COPY     OUTDD=ISPSLIB,INDD=IBM4\n  COPY     OUTDD=ISPSLIB,INDD=IBM5\n  COPY     OUTDD=ISPSLIB,INDD=OEM1\n  COPY     OUTDD=ISPSLIB,INDD=OEM2\n  COPY     OUTDD=ISPSLIB,INDD=OEM3\n  COPY     OUTDD=ISPSLIB,INDD=OEM4\n  COPY     OUTDD=ISPSLIB,INDD=IBM3\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP TABLES                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPTLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUP.ISPTLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISFTLIB               ISPF   310\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISPTENU               ISPF   310\n//IBM3     DD  DISP=SHR,DSN=SYS1.ISRTLIB               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS2.DB2IBMP.ISPTLIB       DB2    220\n//IBM5     DD  DISP=SHR,DSN=SYS1.SEQQTBL0              OPCESA\n//IBM6     DD  DISP=SHR,DSN=SYSA.OP0NDM13.NDMTBL       NDM    130\n//*\n//OEM1     DD  DISP=SHR,DSN=SYS2.DB2THRDP.ISPTLIB      DB2    220\n//OEM2     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPTLIB       COOP   R2\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPTLIB  DD  DSN=SYSA.OP0TSOB.ISPTLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP17,\n//             SPACE=(TRK,(20,10,45)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPTLIB,INDD=NU1\n  COPY     OUTDD=ISPTLIB,INDD=IBM1\n  COPY     OUTDD=ISPTLIB,INDD=IBM2\n  COPY     OUTDD=ISPTLIB,INDD=IBM3\n  COPY     OUTDD=ISPTLIB,INDD=IBM5\n  COPY     OUTDD=ISPTLIB,INDD=OEM1\n  COPY     OUTDD=ISPTLIB,INDD=OEM2\n  COPY     OUTDD=ISPTLIB,INDD=IBM4\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLOAD3": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x015\\x00\\x00\\x00\\x92\\x01O\\x00\\x93\\x05\\x7f\\x07V\\x01\\xd6\\x01\\x8e\\x00\\x00\\xe8\\xd6\\xe4\\xd5\\xc7\\xd4\\xd1@@@'", "ispf": {"version": "01.53", "flags": 0, "createdate": "1992-01-14T00:00:00", "modifydate": "1993-02-26T07:56:00", "lines": 470, "newlines": 398, "modlines": 0, "user": "YOUNGMJ"}, "text": "//WOOLSTSC JOB F-ZZZZZ-NUSP-ZZZ,\n//             TSOLOAD3,\n//             CLASS=H,USER=WOOLSTS,TYPRUN=HOLD,\n//             MSGCLASS=X,\n//             NOTIFY=WOOLSTS\n/*XEQ N3\n/*JOBPARM S=IBM3,ROOM=SPQ5\n//*\n//***************************************************************\n//*                                                             *\n//** CHECK COMMENTS AND NUSPS.MVSESA.INFO(TSOROLL) BEFORE USE ***\n//*                                                             *\n//*            JOB TO LOAD TSO LIBRARIES FOR IBM3               *\n//*                                                             *\n//* NOTE - SYS2.DB2IBM LIBS NORMALLY COPIED AFTER DB2THRD       *\n//*                                                             *\n//***************************************************************\n//*                                                             *\n//*      ----- PLACE A COMMENT HERE FOR NEXT USER -----         *\n//*                                                             *\n//*   1) JOB OK -- BUT CURRENTLY SET UP TO COPY FROM SYSF       *\n//*      AS IT WAS LAST RUN WITH MAINT ROLLS.                   *\n//*      IF YOU EVER USE SYS1 BE CAREFUL WHERE YOU RUN.         *\n//*   2) CURRENTLY SPLITS ACROSS SYSP14 AND SYSP16. USE OF      *\n//*      SYSP14 IS A TEMPORARY BUT APPROVED ARRANGEMENT         *\n//*      PENDING RETURN OF SPACE ON SYSP16                      *\n//*   3) JOBSCAN PANELS/MESSAGES REMOVED                        *\n//*                                                             *\n//***************************************************************\n//*                                                             *\n//* ATTENTION: SYS1 LIBRARIES NOW ROLLED FROM SYSF.             *\n//*      ALSO: FOR AD HOC CHANGES, IF SYSF IS NOT SETTLED, USE  *\n//*            SYS1 LIBRARIES TO BE SECURE.                     *\n//*      ALSO: WE HAVE A SPACE AGREEMENT TO USE SYSP16 FOR TSO. *\n//*            UNLESS IMPOSSIBLE, YOU SHOULD LEAVE PERMANENT    *\n//*            DATASETS ONLY ON SYSP16.                         *\n//*      ALSO: THE ORDER OF COPYING MAY BE SIGNIFICANT -- IF    *\n//*            A DATASET CONTAINS MEMBERS SUPERCEDING MEMBERS   *\n//*            OF ANOTHER IN THE SAME CLASS, COPY IT FIRST.     *\n//*                                                             *\n//***************************************************************\n//*\n//*  PREPARE FOR DISASTER ...\n//*\n//*    PREPARE 1: COPY THE PRE-CHANGED MEMBER TO SOMEWHERE SAFE\n//*\n//*  CARRY OUT SOME CHECKS ...\n//*\n//*    CHECK 1: YOU ARE BUILDING THE ALTERNATE (NOT LIVE) TSO SET\n//*    CHECK 2: THE LIST OF SOURCE LIBRARIES IS UP TO DATE\n//*    CHECK 3: THE SPACE AND DIRECTORY SPACE ALLOCATIONS ARE CORRECT\n//*    CHECK 4: THERE WILL BE ENOUGH SPACE ON THE DESIGNATED PACKS\n//*\n//*  AND THEN STICK TO THIS PROCEDURE ...\n//*\n//*    ACT 1: TRANSMIT JOB TO OBJECT OSE\n//*    ACT 2: VET THE JOB TO MAKE SURE SOURCE LIBRARIES ARE OK\n//*    ACT 3: SUBMIT THE JOB -- RUN OVERNIGHT; IT MAY TAKE 12 HOURS\n//*    ACT 4: CHECK THE RESULTS -- JOB LOG AND GENERATED DATASETS\n//*    ACT 5: TEST BY LOGGIN ON WITH TSOTESTA OR TSOTESTB\n//*\n//***************************************************************\n//*                                                             *\n//*            DELETE ALL EXISTING LIBRARIES                    *\n//*                                                             *\n//***************************************************************\n//*\n//DELETE   EXEC PGM=IDCAMS\n//SYSIN    DD  *\n  DELETE SYSA.OP3TSOA.ISPHLIB\n  DELETE SYSA.OP3TSOA.ISPCLIB\n  DELETE SYSA.OP3TSOA.ISPLLIB\n  DELETE SYSA.OP3TSOA.ISPMLIB\n  DELETE SYSA.OP3TSOA.ISPPLIB\n  DELETE SYSA.OP3TSOA.ISPRLIB\n  DELETE SYSA.OP3TSOA.ISPSLIB\n  DELETE SYSA.OP3TSOA.ISPTLIB\n//SYSPRINT DD SYSOUT=*\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP HELP                                     *\n//*                                                             *\n//***************************************************************\n//*\n//SYSHELP EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYSF.HELP                  MVS    313\n//IBM2     DD  DISP=SHR,DSN=DB2T.DSNHELP               DB2    220\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSHELP  DD  DSN=SYSA.OP3TSOA.ISPHLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP16,\n//             SPACE=(TRK,(150,20,45)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN   DD  *\n  COPY     OUTDD=SYSHELP,INDD=IBM1\n  COPY     OUTDD=SYSHELP,INDD=IBM2\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP CLISTS                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPCLIB EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUT.CLIST          DB2    220\n//NU2      DD  DISP=SHR,DSN=SYSA.OP3DB2.CLIST          DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYSF.ISRCLIB               PDF    310\n//IBM2     DD  DISP=SHR,DSN=SYS2.DB2IBM.CLIST          DB2    220\n//IBM3     DD  DISP=SHR,DSN=SYSF.HRFCLST               RACF   181\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.OP0JSCAN.ISPCLIB      JOBSCAN\n//OEM2     DD  DISP=SHR,DSN=NU.DDICT.ISPCLIB           DDICT\n//OEM3     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPCLIB       COOP   R2\n//OEM4     DD  DISP=SHR,DSN=SYS2.DB2THRDT.CLIST        DB2    220\n//OEM5     DD  DISP=SHR,DSN=SYSA.OT0OPCT.ISPCLIB       OPCESA\n//OEM6     DD  DISP=SHR,DSN=SYSA.OT0QWREF.V320.CNTL    QUICKREF V320\n//OEM7     DD  DISP=SHR,DSN=SYS2.NDM13.CLST            NDM 1.3\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPCLIB  DD  DSN=SYSA.OP3TSOA.ISPCLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP16,\n//             SPACE=(TRK,(500,50,100)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN   DD  *\n  COPY     OUTDD=ISPCLIB,INDD=NU1\n  COPY     OUTDD=ISPCLIB,INDD=NU2\n  COPY     OUTDD=ISPCLIB,INDD=IBM1\n  COPY     OUTDD=ISPCLIB,INDD=IBM3\n  COPY     OUTDD=ISPCLIB,INDD=OEM1\n  COPY     OUTDD=ISPCLIB,INDD=OEM2\n  COPY     OUTDD=ISPCLIB,INDD=OEM3\n  COPY     OUTDD=ISPCLIB,INDD=OEM4\n  COPY     OUTDD=ISPCLIB,INDD=OEM5\n  COPY     OUTDD=ISPCLIB,INDD=IBM2\n  COPY     OUTDD=ISPCLIB,INDD=OEM6\n  S        MEMBER=((QW,,R),(QWSDSF,,R))\n  COPY     OUTDD=ISPCLIB,INDD=OEM7\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP REXX                                     *\n//*                                                             *\n//***************************************************************\n//*\n//ISPRLIB EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYSA.OP3DB2.SPFRLIB        DB2    220\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPRLIB  DD  DSN=SYSA.OP3TSOA.ISPRLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP16,\n//             SPACE=(TRK,(10,3,45)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN   DD  *\n  COPY     OUTDD=ISPRLIB,INDD=NU1\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP LOAD MODULES                             *\n//*                                                             *\n//***************************************************************\n//*\n//ISPLLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=DB2T.RUNLIB.LOAD,          DB2    220\n//             DCB=RECFM=U\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.AP0ASM2.LOAD          ASM2\n//OEM2     DD  DISP=SHR,DSN=NU.DDICT.LOADLIB           DDICT\n//OEM3     DD  DISP=SHR,DSN=SYSA.OP0XPED.LOADLIB       XPEDITER\n//OEM4     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPLLIB       COOP   R2\n//OEM5     DD  DISP=SHR,DSN=SYSA.OP0MEMO.ISPF.LOAD     MEMO/ISPF\n//OEM6     DD  DISP=SHR,DSN=SYSA.OP0API.LOAD           MEMO/API\n//OEM7     DD  DISP=SHR,DSN=SYSA.AP0VAM.LOADLIB        VAM\n//OEM8     DD  DISP=SHR,DSN=SYS2.NDM13.LOAD            NDM 1.3\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPLLIB  DD  DSN=SYSA.OP3TSOA.ISPLLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP14,\n//             SPACE=(TRK,(900,80,450)),\n//             DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)\n//SYSIN    DD  *\n  COPYMOD  OUTDD=ISPLLIB,INDD=IBM1,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM1,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM2,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM3,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM4,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM5,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM6,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM7,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM8,MAXBLK=23200\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP MESSAGES                                 *\n//*                                                             *\n//***************************************************************\n//*\n//ISPMLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUT.ISPMLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYSF.ISFMLIB               SDSF   131\n//IBM2     DD  DISP=SHR,DSN=SYSF.ISPMENU               ISPF   310\n//IBM3     DD  DISP=SHR,DSN=SYSF.ISRMENU               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS2.DB2IBMT.ISPMLIB       DB2    220\n//IBM5     DD  DISP=SHR,DSN=SYSF.HRFMSG                RACF   181\n//IBM6     DD  DISP=SHR,DSN=SYSF.SEQQMSG0              OPCESA\n//IBM7     DD  DISP=SHR,DSN=SYSF.SEQAMLIB              OPCESA\n//*\n//OEM1     DD  DUMMY                                   WAS JOBSCAN\n//OEM2     DD  DISP=SHR,DSN=NU.DDICT.ISPMLIB           DDICT\n//OEM3     DD  DISP=SHR,DSN=SYS2.DB2THRDT.ISPMLIB      DB2    220\n//OEM4     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPMLIB       COOP   R2\n//OEM6     DD  DISP=SHR,DSN=SYSA.OT0OPCT.ISPMLIB       OPCESA\n//OEM7     DD  DISP=SHR,DSN=SYSA.OP0VAM.ISPMLIB        VAM\n//OEM8     DD  DISP=SHR,DSN=SYSA.OP3NDM13.MSGS         NDM 1.3\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPMLIB  DD  DSN=SYSA.OP3TSOA.ISPMLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP16,\n//             SPACE=(TRK,(130,20,150)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPMLIB,INDD=NU1\n  COPY     OUTDD=ISPMLIB,INDD=IBM1\n  COPY     OUTDD=ISPMLIB,INDD=IBM2\n  COPY     OUTDD=ISPMLIB,INDD=IBM3\n  COPY     OUTDD=ISPMLIB,INDD=IBM4\n  COPY     OUTDD=ISPMLIB,INDD=IBM5\n  COPY     OUTDD=ISPMLIB,INDD=OEM2\n  COPY     OUTDD=ISPMLIB,INDD=OEM3\n  COPY     OUTDD=ISPMLIB,INDD=OEM4\n  COPY     OUTDD=ISPMLIB,INDD=OEM6\n  COPY     OUTDD=ISPMLIB,INDD=IBM6\n  COPY     OUTDD=ISPMLIB,INDD=OEM8\n  COPY     OUTDD=ISPMLIB,INDD=IBM7\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP PANELS                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPPLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUT.ISPPLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYSF.ISFPLIB               SDSF   131\n//IBM2     DD  DISP=SHR,DSN=SYSF.ISPPENU               ISPF   310\n//IBM3     DD  DISP=SHR,DSN=SYSF.ISRPENU               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYSF.DUTPLIB               DITTO  120\n//IBM5     DD  DISP=SHR,DSN=SYS2.DB2IBMT.ISPPLIB       DB2    220\n//IBM6     DD  DISP=SHR,DSN=SYSF.HRFPANL               RACF   181\n//IBM7     DD  DISP=SHR,DSN=SYSF.SEQQPENU              OPCESA\n//IBM8     DD  DISP=SHR,DSN=SYSF.SEQAPNLS              OPCESA\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPPLIB       COOP   R2\n//OEM2     DD  DUMMY                                   WAS JOBSCAN\n//OEM3     DD  DISP=SHR,DSN=NU.DDICT.ISPPLIB           DDICT\n//OEM4     DD  DISP=SHR,DSN=SYS2.DB2THRDT.ISPPLIB      DB2    220\n//OEM7     DD  DISP=SHR,DSN=SYSA.OT0OPCT.ISPPLIB       OPCESA\n//OEM8     DD  DISP=SHR,DSN=SYSA.OP0VAM.ISPPLIB        VAM\n//OEM9     DD  DISP=SHR,DSN=SYSA.OT0QWREF.V320.PANELS  QUICKREF V320\n//OEM10    DD  DISP=SHR,DSN=SYS2.NDM13.PNLS            NDM 1.3\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(2,2)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(2,2)),UNIT=SYSDA\n//ISPPLIB  DD  DSN=NUSPS.WOOLSTS.ISPPLIB.TEMP,\n//             DISP=(NEW,CATLG),\n//             UNIT=DEVPOOL,\n//             SPACE=(CYL,(110,10,3000)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPPLIB,INDD=NU1\n  COPY     OUTDD=ISPPLIB,INDD=IBM1\n  COPY     OUTDD=ISPPLIB,INDD=IBM2\n  COPY     OUTDD=ISPPLIB,INDD=IBM3\n  COPY     OUTDD=ISPPLIB,INDD=IBM4\n  COPY     OUTDD=ISPPLIB,INDD=IBM6\n  COPY     OUTDD=ISPPLIB,INDD=OEM1\n  COPY     OUTDD=ISPPLIB,INDD=OEM3\n  COPY     OUTDD=ISPPLIB,INDD=OEM4\n  COPY     OUTDD=ISPPLIB,INDD=OEM7\n  COPY     OUTDD=ISPPLIB,INDD=IBM5\n  COPY     OUTDD=ISPPLIB,INDD=IBM7\n  COPY     OUTDD=ISPPLIB,INDD=OEM8\n  COPY     OUTDD=ISPPLIB,INDD=OEM9\n  S        MEMBER=((ISREDDE,,R),(ISRBROBF,,R))\n  COPY     OUTDD=ISPPLIB,INDD=OEM10\n  COPY     OUTDD=ISPPLIB,INDD=IBM8\n//*\n//***************************************************************\n//*                                                             *\n//*             DEFINE NEW ISPPLIB LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//DEFPLIB EXEC PGM=IEFBR14\n//ISPPLIB  DD  DSN=SYSA.OP3TSOA.ISPPLIB,\n//             DISP=(,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP14,\n//             SPACE=(CYL,(60,10,3000)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//*\n//***************************************************************\n//*                                                             *\n//*            CONVERT NEW ISPPREP LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//ISPPREP EXEC PGM=IKJEFT01\n//ISPPROF  DD  DSN=&ISPPROF,\n//             DISP=(,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(20,,60)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//ISPMLIB  DD  DISP=SHR,DSN=SYSF.ISPMENU\n//         DD  DISP=SHR,DSN=SYSF.ISRMENU\n//ISPPLIB  DD  DISP=SHR,DSN=SYSF.ISPPENU\n//         DD  DISP=SHR,DSN=SYSF.ISRPENU\n//ISPSLIB  DD  DISP=SHR,DSN=SYSF.ISPSLIB\n//         DD  DISP=SHR,DSN=SYSF.ISRSENU\n//ISPTLIB  DD  DISP=SHR,DSN=SYSF.ISPTENU\n//         DD  DISP=SHR,DSN=SYSF.ISRTLIB\n//ISPLOG   DD  SYSOUT=*,\n//             DCB=(RECFM=FB,LRECL=133,BLKSIZE=1330)\n//SYSTSPRT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSTSIN  DD *\n  ISPSTART PGM(ISPPREP) PARM(INPAN('NUSPS.WOOLSTS.ISPPLIB.TEMP')  -\n                            OUTPAN('SYSA.OP3TSOA.ISPPLIB'))\n//*\n//***************************************************************\n//*                                                             *\n//*             COPY NON-ISPPREPED MEMBERS INTO ISPPLIB         *\n//*                                                             *\n//***************************************************************\n//*\n//COPYPREP EXEC PGM=IEBCOPY\n//SYSUT3   DD  SPACE=(CYL,(2,2)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(2,2)),UNIT=SYSDA\n//ISPPREP  DD  DISP=SHR,DSN=NUSPS.WOOLSTS.ISPPLIB.TEMP\n//ISPPLIB  DD  DISP=SHR,DSN=SYSA.OP3TSOA.ISPPLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  COPY     OUTDD=ISPPLIB,INDD=ISPPREP\n//*\n//***************************************************************\n//*                                                             *\n//*             DELETE OLD ISPPREP LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//DELPREP EXEC PGM=IDCAMS\n//SYSIN    DD  *\n  DELETE  NUSPS.WOOLSTS.ISPPLIB.TEMP\n//SYSPRINT DD  SYSOUT=*\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP SKELS                                    *\n//*                                                             *\n//***************************************************************\n//*\n//ISPSLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUT.ISPSLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYSF.ISPSLIB               ISPF   310\n//IBM2     DD  DISP=SHR,DSN=SYSF.ISRSENU               PDF    310\n//IBM3     DD  DISP=SHR,DSN=SYS2.DB2IBMT.ISPSLIB       DB2    220\n//IBM4     DD  DISP=SHR,DSN=SYSF.HRFSKEL               RACF   181\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPSLIB       COOP   R2\n//OEM2     DD  DISP=SHR,DSN=NU.DDICT.ISPSLIB           DDICT\n//OEM3     DD  DISP=SHR,DSN=SYS2.DB2THRDT.ISPSLIB      DB2    220\n//OEM4     DD  DISP=SHR,DSN=SYSA.OT0OPCT.ISPSLIB       OPCESA\n//OEM5     DD  DISP=SHR,DSN=SYS2.NDM13.SKLS            NDM 1.3\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPSLIB  DD  DSN=SYSA.OP3TSOA.ISPSLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP16,\n//             SPACE=(TRK,(200,20,200)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPSLIB,INDD=NU1\n  COPY     OUTDD=ISPSLIB,INDD=IBM1\n  COPY     OUTDD=ISPSLIB,INDD=IBM2\n  COPY     OUTDD=ISPSLIB,INDD=IBM4\n  COPY     OUTDD=ISPSLIB,INDD=OEM1\n  COPY     OUTDD=ISPSLIB,INDD=OEM2\n  COPY     OUTDD=ISPSLIB,INDD=OEM3\n  COPY     OUTDD=ISPSLIB,INDD=OEM4\n  COPY     OUTDD=ISPSLIB,INDD=IBM3\n  COPY     OUTDD=ISPSLIB,INDD=OEM5\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP TABLES                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPTLIB  EXEC PGM=IEBCOPY\n//*\n//NU1      DD  DISP=SHR,DSN=SYS2.DB2NUT.ISPTLIB        DB2    220\n//*\n//IBM1     DD  DISP=SHR,DSN=SYSF.ISFTLIB               ISPF   310\n//IBM2     DD  DISP=SHR,DSN=SYSF.ISPTENU               ISPF   310\n//IBM3     DD  DISP=SHR,DSN=SYSF.ISRTLIB               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS2.DB2IBMT.ISPTLIB       DB2    220\n//IBM5     DD  DISP=SHR,DSN=SYSF.SEQQTBL0              OPCESA\n//*\n//OEM1     DD  DISP=SHR,DSN=SYS2.DB2THRDT.ISPTLIB      DB2    220\n//OEM2     DD  DISP=SHR,DSN=SYSA.OE0COOP.ISPTLIB       COOP   R2\n//OEM3     DD  DISP=SHR,DSN=SYSA.OT0QWREF.V320.TABLES  QUICKREF V320\n//OEM4     DD  DISP=SHR,DSN=SYSA.OP3NDM13.TBL          NDM 1.3\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPTLIB  DD  DSN=SYSA.OP3TSOA.ISPTLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SYSP16,\n//             SPACE=(TRK,(15,1,45)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPTLIB,INDD=NU1\n  COPY     OUTDD=ISPTLIB,INDD=IBM1\n  COPY     OUTDD=ISPTLIB,INDD=IBM2\n  COPY     OUTDD=ISPTLIB,INDD=IBM3\n  COPY     OUTDD=ISPTLIB,INDD=OEM1\n  COPY     OUTDD=ISPTLIB,INDD=OEM2\n  COPY     OUTDD=ISPTLIB,INDD=IBM4\n  COPY     OUTDD=ISPTLIB,INDD=IBM5\n  COPY     OUTDD=ISPTLIB,INDD=OEM3\n  S        MEMBER=((ISPCMDS,,R))\n  COPY     OUTDD=ISPTLIB,INDD=OEM4\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOLOAD6": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01,\\x00\\x00\\x00\\x91!/\\x00\\x93\\x05\\x7f\\tQ\\x01\\x91\\x01W\\x00\\x00\\xe8\\xd6\\xe4\\xd5\\xc7\\xd4\\xd1@@@'", "ispf": {"version": "01.44", "flags": 0, "createdate": "1991-07-31T00:00:00", "modifydate": "1993-02-26T09:51:00", "lines": 401, "newlines": 343, "modlines": 0, "user": "YOUNGMJ"}, "text": "//NUSPS85T JOB F-ZZZZZ-NUSP-ZZZ,\n//             TSOLOAD6,\n//             CLASS=L,USER=NUSPS85,RESTART=*,\n//             MSGCLASS=X,\n//             NOTIFY=NUSPS85\n/*XEQ N6\n//*\n//***************************************************************\n//*                                                             *\n//** CHECK COMMENTS AND NUSPS.MVSESA.INFO(TSOROLL) BEFORE USE ***\n//*                                                             *\n//*            JOB TO LOAD TSO LIBRARIES FOR IBM6               *\n//*                                                             *\n//***************************************************************\n//*                                                             *\n//*      ----- PLACE A COMMENT HERE FOR NEXT USER -----         *\n//*                                                             *\n//*   1) SET TO COPY FROM SYS1                                  *\n//*   2) JOBSCAN PANELS/MESSAGES/LOADLIB REMOVED                *\n//*                                                             *\n//***************************************************************\n//*                                                             *\n//* ATTENTION: THE ORDER OF COPYING MAY BE SIGNIFICANT -- IF    *\n//*            A DATASET CONTAINS MEMBERS SUPERCEDING MEMBERS   *\n//*            OF ANOTHER IN THE SAME CLASS, COPY IT FIRST.     *\n//*                                                             *\n//***************************************************************\n//*\n//*  PREPARE FOR DISASTER ...\n//*\n//*    PREPARE 1: COPY THE PRE-CHANGED MEMBER TO SOMEWHERE SAFE\n//*\n//*  CARRY OUT SOME CHECKS ...\n//*\n//*    CHECK 1: YOU ARE BUILDING THE ALTERNATE (NOT LIVE) TSO SET\n//*    CHECK 2: THE LIST OF SOURCE LIBRARIES IS UP TO DATE\n//*    CHECK 3: THE SPACE AND DIRECTORY SPACE ALLOCATIONS ARE CORRECT\n//*    CHECK 4: THERE WILL BE ENOUGH SPACE ON THE DESIGNATED PACKS\n//*\n//*  AND THEN STICK TO THIS PROCEDURE ...\n//*\n//*    ACT 1: TRANSMIT JOB TO OBJECT OSE\n//*    ACT 2: VET THE JOB TO MAKE SURE SOURCE LIBRARIES ARE OK\n//*    ACT 3: SUBMIT THE JOB -- COULD TAKE UP TO 90 MINUTES\n//*    ACT 4: CHECK THE RESULTS -- JOB LOG AND GENERATED DATASETS\n//*    ACT 5: TEST BY LOGGIN ON WITH TSOTESTA OR TSOTESTB\n//*\n//***************************************************************\n//*                                                             *\n//*            DELETE ALL EXISTING LIBRARIES                    *\n//*                                                             *\n//***************************************************************\n//*\n//DELETE   EXEC PGM=IDCAMS\n//SYSIN    DD  *\n  DELETE SYSA.OP6TSOA.ISPHLIB\n  DELETE SYSA.OP6TSOA.ISPCLIB\n  DELETE SYSA.OP6TSOA.ISPLLIB\n  DELETE SYSA.OP6TSOA.ISPMLIB\n  DELETE SYSA.OP6TSOA.ISPPLIB\n  DELETE SYSA.OP6TSOA.ISPSLIB\n  DELETE SYSA.OP6TSOA.ISPTLIB\n//SYSPRINT DD SYSOUT=*\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP HELP                                     *\n//*                                                             *\n//***************************************************************\n//*\n//SYSHELP EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.HELP                  MVS    313\n//IBM2     DD  DISP=SHR,DSN=DB2F.DSNHELP               DB2    220\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSHELP  DD  DSN=SYSA.OP6TSOA.ISPHLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(TRK,(120,10,45)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN   DD  *\n  COPY     OUTDD=SYSHELP,INDD=IBM1\n  COPY     OUTDD=SYSHELP,INDD=IBM2\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP CLISTS                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPCLIB EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=IPO1.CMDPROC.FB            MVS    313\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISRCLIB               PDF    310\n//IBM3     DD  DISP=SHR,DSN=SYS1.SBLSCLI0              IPCS   313\n//IBM4     DD  DISP=SHR,DSN=SYS1.HRFCLST               RACF   181\n//IBM5     DD  DISP=SHR,DSN=DB21.DSNTINST.DSNCLIST     DB2    220\n//IBM6     DD  DISP=SHR,DSN=SYS1.DGTCLIB               ISMF   320\n//IBM7     DD  DISP=SHR,DSN=SYS1.NDMCLST               NDM\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.OP6JSCAN.ISPCLIB      JOBSCAN\n//OEM2     DD  DISP=SHR,DSN=SYSA.OP6CA1.CAICLIB        CA/1 5.0\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPCLIB  DD  DSN=SYSA.OP6TSOA.ISPCLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(TRK,(80,10,45)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN   DD  *\n  COPY     OUTDD=ISPCLIB,INDD=IBM1\n  COPY     OUTDD=ISPCLIB,INDD=IBM2\n  COPY     OUTDD=ISPCLIB,INDD=IBM3\n  COPY     OUTDD=ISPCLIB,INDD=IBM4\n  COPY     OUTDD=ISPCLIB,INDD=IBM5\n  COPY     OUTDD=ISPCLIB,INDD=IBM6\n  COPY     OUTDD=ISPCLIB,INDD=IBM7\n  COPY     OUTDD=ISPCLIB,INDD=OEM1\n  COPY     OUTDD=ISPCLIB,INDD=OEM2\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP LOAD MODULES                             *\n//*                                                             *\n//*            NB NDMLOAD HAS BLOCKSIZE > 15440                 *\n//*                                                             *\n//***************************************************************\n//*\n//ISPLLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=DB2F.RUNLIB.LOAD,          DB2    220\n//             DCB=RECFM=U\n//IBM2     DD  DISP=SHR,DSN=SYS1.DGTLLIB               ISMF   320\n//IBM3     DD  DISP=SHR,DSN=SYS1.NDMLOAD               NDM\n//*\n//OEM1     DD  DISP=SHR,DSN=SYSA.AP6VAM.LOADLIB        VAM  V4.01\n//OEM2     DD  DISP=SHR,DSN=SYSA.AP6ASM2.LOAD          ASM2\n//OEM3     DD  DUMMY                                   WAS JOBSCAN\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPLLIB  DD  DSN=SYSA.OP6TSOA.ISPLLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(TRK,(800,200,400)),\n//             DCB=(RECFM=U,LRECL=0,BLKSIZE=23200)\n//SYSIN    DD  *\n  COPYMOD  OUTDD=ISPLLIB,INDD=IBM1,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=IBM2,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=IBM3,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM1,MAXBLK=23200\n  COPYMOD  OUTDD=ISPLLIB,INDD=OEM2,MAXBLK=23200\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP MESSAGES                                 *\n//*                                                             *\n//***************************************************************\n//*\n//ISPMLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISFMLIB               SDSF   131\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISPMENU               ISPF   330\n//IBM3     DD  DISP=SHR,DSN=SYS1.ISRMENU               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS1.HRFMSG                RACF   181\n//IBM5     DD  DISP=SHR,DSN=SYS1.SGIMMENU              SMP    150\n//IBM6     DD  DISP=SHR,DSN=SYS1.SBLSMSG0              IPCS   313\n//IBM7     DD  DISP=SHR,DSN=DB2F.DSNSPFM               DB2    220\n//IBM8     DD  DISP=SHR,DSN=SYS1.DGTMLIB               ISMF   320\n//IBM9     DD  DISP=SHR,DSN=SYS1.NDMMSGS               NDM\n//*\n//OEM1     DD  DISP=SHR,DSN=SYS1.TSMMAC                TSOMON  521\n//OEM2     DD  DUMMY                                   WAS JOBSCAN\n//OEM3     DD  DISP=SHR,DSN=SYSA.OP6CA1.CAIISPM        CA/1 V5.0\n//OEM4     DD  DISP=SHR,DSN=SYSA.OP6TSOP.ISPMLIB       TSOPLUS 4.1\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPMLIB  DD  DSN=SYSA.OP6TSOA.ISPMLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(TRK,(150,15,250)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPMLIB,INDD=IBM1\n  COPY     OUTDD=ISPMLIB,INDD=IBM2\n  COPY     OUTDD=ISPMLIB,INDD=IBM3\n  COPY     OUTDD=ISPMLIB,INDD=IBM4\n  COPY     OUTDD=ISPMLIB,INDD=IBM5\n  COPY     OUTDD=ISPMLIB,INDD=IBM6\n  COPY     OUTDD=ISPMLIB,INDD=IBM7\n  COPY     OUTDD=ISPMLIB,INDD=IBM8\n  COPY     OUTDD=ISPMLIB,INDD=IBM9\n  COPY     OUTDD=ISPMLIB,INDD=OEM1\n  COPY     OUTDD=ISPMLIB,INDD=OEM3\n  COPY     OUTDD=ISPMLIB,INDD=OEM4\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP PANELS (INITIALLY INTO ISPPREP)          *\n//*                                                             *\n//***************************************************************\n//*\n//ISPPLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISFPLIB               SDSF   131\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISPPENU               ISPF   330\n//IBM3     DD  DISP=SHR,DSN=SYS1.ISRPENU               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS1.HRFPANL               RACF   181\n//IBM5     DD  DISP=SHR,DSN=SYS1.SGIMPENU              SMP    150\n//IBM6     DD  DISP=SHR,DSN=SYS1.SBLSPNL0              IPCS   313\n//IBM7     DD  DISP=SHR,DSN=SYS1.DUTPLIB               DITTO  120\n//IBM8     DD  DISP=SHR,DSN=DB2F.DSNSPFP               DB2    220\n//IBM9     DD  DISP=SHR,DSN=SYS1.DGTPLIB               ISMF   320\n//IBM10    DD  DISP=SHR,DSN=SYS1.NDMPNLS               NDM\n//*\n//OEM1     DD  DISP=SHR,DSN=SYS1.TSMMAC                TSOMON  521\n//OEM2     DD  DUMMY                                   WAS JOBSCAN\n//OEM3     DD  DISP=SHR,DSN=SYSA.OP6CA1.CAIISPP        CA/1 V5.0\n//OEM4     DD  DISP=SHR,DSN=SYSA.OP6TSOP.ISPPLIB       TSOPLUS 4.1\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPPLIB  DD  DSN=SYSA.OP6TSOA.ISPPLIB.TEMP,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(CYL,(80,10,1000)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPPLIB,INDD=IBM1\n  COPY     OUTDD=ISPPLIB,INDD=IBM2\n  COPY     OUTDD=ISPPLIB,INDD=IBM3\n  COPY     OUTDD=ISPPLIB,INDD=IBM4\n  COPY     OUTDD=ISPPLIB,INDD=IBM5\n  COPY     OUTDD=ISPPLIB,INDD=IBM6\n  COPY     OUTDD=ISPPLIB,INDD=IBM7\n  COPY     OUTDD=ISPPLIB,INDD=IBM8\n  COPY     OUTDD=ISPPLIB,INDD=IBM9\n  COPY     OUTDD=ISPPLIB,INDD=IBM10\n  COPY     OUTDD=ISPPLIB,INDD=OEM1\n  COPY     OUTDD=ISPPLIB,INDD=OEM3\n  COPY     OUTDD=ISPPLIB,INDD=OEM4\n//*\n//***************************************************************\n//*                                                             *\n//*            DEFINE NEW ISPPLIB LIBRARY                       *\n//*                                                             *\n//***************************************************************\n//*\n//DEFPLIB EXEC PGM=IEFBR14\n//*\n//ISPPLIB  DD  DSN=SYSA.OP6TSOA.ISPPLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(CYL,(50,10,2500)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//*\n//***************************************************************\n//*                                                             *\n//*            CONVERT NEW ISPPREP LIBRARY                      *\n//*                                                             *\n//***************************************************************\n//*\n//ISPPREP EXEC PGM=IKJEFT01\n//ISPPROF  DD  DSN=&ISPPROF,\n//             DISP=(,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(20,,60)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//ISPMLIB  DD  DISP=SHR,DSN=SYS1.ISPMENU\n//         DD  DISP=SHR,DSN=SYS1.ISRMENU\n//ISPPLIB  DD  DISP=SHR,DSN=SYS1.ISPPENU\n//         DD  DISP=SHR,DSN=SYS1.ISRPENU\n//ISPSLIB  DD  DISP=SHR,DSN=SYS1.ISPSLIB\n//         DD  DISP=SHR,DSN=SYS1.ISRSENU\n//ISPTLIB  DD  DISP=SHR,DSN=SYS1.ISPTENU\n//         DD  DISP=SHR,DSN=SYS1.ISRTLIB\n//ISPLOG   DD  SYSOUT=*,\n//             DCB=(RECFM=FB,LRECL=133,BLKSIZE=1330)\n//SYSTSPRT DD  SYSOUT=*\n//SYSUDUMP DD  SYSOUT=*\n//SYSTSIN  DD *\n  ISPSTART PGM(ISPPREP) PARM(INPAN('SYSA.OP6TSOA.ISPPLIB.TEMP')   -\n                            OUTPAN('SYSA.OP6TSOA.ISPPLIB'))\n//*\n//***************************************************************\n//*                                                             *\n//*             COPY NON-ISPPREPED MEMBERS INTO ISPPLIB         *\n//*                                                             *\n//***************************************************************\n//*\n//COPYPREP EXEC PGM=IEBCOPY\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPPREP  DD  DISP=SHR,DSN=SYSA.OP6TSOA.ISPPLIB.TEMP\n//ISPPLIB  DD  DISP=SHR,DSN=SYSA.OP6TSOA.ISPPLIB\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  *\n  COPY     OUTDD=ISPPLIB,INDD=ISPPREP\n//*\n//***************************************************************\n//*                                                             *\n//*            DELETE ISPPREP LIBRARY AFTER USE                 *\n//*                                                             *\n//***************************************************************\n//*\n//DELPREP  EXEC PGM=IDCAMS\n//SYSIN    DD  *\n  DELETE SYSA.OP6TSOA.ISPPLIB.TEMP\n//SYSPRINT DD SYSOUT=*\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP SKELS                                    *\n//*                                                             *\n//***************************************************************\n//*\n//ISPSLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISPSLIB               ISPF   330\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISRSENU               PDF    310\n//IBM3     DD  DISP=SHR,DSN=SYS1.HRFSKEL               RACF   181\n//IBM4     DD  DISP=SHR,DSN=SYS1.SGIMSENU              SMP    150\n//IBM5     DD  DISP=SHR,DSN=SYS1.SBLSKEL0              IPCS   313\n//IBM6     DD  DISP=SHR,DSN=SYS1.DGTSLIB               ISMF   320\n//IBM7     DD  DISP=SHR,DSN=SYS1.NDMSKLS               NDM\n//*\n//OEM1     DD  DISP=SHR,DSN=SYS1.TSMMAC                TSOMON  521\n//OEM2     DD  DISP=SHR,DSN=SYSA.OP6CA1.CAIISPS        CA/1 V5.0\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPSLIB  DD  DSN=SYSA.OP6TSOA.ISPSLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(TRK,(200,20,250)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=15440)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPSLIB,INDD=IBM1\n  COPY     OUTDD=ISPSLIB,INDD=IBM2\n  COPY     OUTDD=ISPSLIB,INDD=IBM3\n  COPY     OUTDD=ISPSLIB,INDD=IBM4\n  COPY     OUTDD=ISPSLIB,INDD=IBM5\n  COPY     OUTDD=ISPSLIB,INDD=IBM6\n  COPY     OUTDD=ISPSLIB,INDD=IBM7\n  COPY     OUTDD=ISPSLIB,INDD=OEM1\n  COPY     OUTDD=ISPSLIB,INDD=OEM2\n//*\n//***************************************************************\n//*                                                             *\n//*            COPY UP TABLES                                   *\n//*                                                             *\n//***************************************************************\n//*\n//ISPTLIB  EXEC PGM=IEBCOPY\n//*\n//IBM1     DD  DISP=SHR,DSN=SYS1.ISFTLIB               ISPF   310\n//IBM2     DD  DISP=SHR,DSN=SYS1.ISPTENU               ISPF   330\n//IBM3     DD  DISP=SHR,DSN=SYS1.ISRTLIB               PDF    310\n//IBM4     DD  DISP=SHR,DSN=SYS1.SGIMTENU              SMP    150\n//IBM5     DD  DISP=SHR,DSN=SYS1.SBLSTBL0              IPCS   313\n//IBM6     DD  DISP=SHR,DSN=SYS1.DGTTLIB               ISMF   320\n//*\n//OEM1     DD  DISP=SHR,DSN=SYS1.TSMMAC                TSOMON  521\n//OEM2     DD  DISP=SHR,DSN=SYSA.OP6CA1.CAIISPT        CA/1 V5.0\n//*\n//SYSPRINT DD  SYSOUT=*\n//SYSUT3   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//SYSUT4   DD  SPACE=(CYL,(1,1)),UNIT=SYSDA\n//ISPTLIB  DD  DSN=SYSA.OP6TSOA.ISPTLIB,\n//             DISP=(NEW,CATLG),\n//             UNIT=3380,\n//             VOL=SER=SLB061,\n//             SPACE=(TRK,(80,10,200)),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=3120)\n//SYSIN    DD  *\n  COPY     OUTDD=ISPTLIB,INDD=IBM1\n  COPY     OUTDD=ISPTLIB,INDD=IBM2\n  COPY     OUTDD=ISPTLIB,INDD=IBM3\n  COPY     OUTDD=ISPTLIB,INDD=IBM4\n  COPY     OUTDD=ISPTLIB,INDD=IBM5\n  COPY     OUTDD=ISPTLIB,INDD=IBM6\n  COPY     OUTDD=ISPTLIB,INDD=OEM1\n  COPY     OUTDD=ISPTLIB,INDD=OEM2\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOPARM": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x93\\x07o\\x00\\x93\\x08\\x1f\\x18\\x13\\x00\\x06\\x00\\x06\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1993-03-17T00:00:00", "modifydate": "1993-03-22T18:13:00", "lines": 6, "newlines": 6, "modlines": 0, "user": "HAYDOCR"}, "text": "//*\n//*    SELECTS 'A' OR 'B' LIBRARIES. USED BY NEW LOGON PROCEDURES\n//*\n//*    17/03/93 RNH (SEC DEV)\n//*\n// SET TSOPARM=A\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOPROC": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x07\\x0f\\x00\\x92\\x07\\x0f\\x17Y\\x00\\x0e\\x00\\x0e\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-03-10T00:00:00", "modifydate": "1992-03-10T17:59:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "NUSPS24"}, "text": "//TSOPROC PROC\n//TSOPROC EXEC PGM=IKJEFT01,\n//             DYNAMNBR=200,\n//             PARM='%STARTUP'\n//*\n//*            SYSPROC\n//*\n//SYSPROC  DD  DISP=SHR,DSN=SYS1.ISRCLIB\n//*\n//*            OTHER BITS\n//*\n//SYSIN    DD  TERM=TS\n//SYSPRINT DD  TERM=TS,SYSOUT=*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOTESTA": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x92\\x10o\\x00\\x93\\x05?\\x18T\\x00\\x0f\\x00\\x0e\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1992-04-15T00:00:00", "modifydate": "1993-02-22T18:54:00", "lines": 15, "newlines": 14, "modlines": 0, "user": "HAYDOCR"}, "text": "//TSOTESTA PROC\n//TSOTESTA EXEC PGM=IKJEFT01,\n//             DYNAMNBR=200,\n//             PARM='%STARTUP'\n//*\n//*            SYSPROC\n//*\n//STEPLIB  DD  DISP=SHR,DSN=SYS2.AUTHLIB\n//SYSPROC  DD  DISP=SHR,DSN=SYS1.ISRCLIB\n//*\n//*            OTHER BITS\n//*\n//SYSIN    DD  TERM=TS\n//SYSPRINT DD  TERM=TS,SYSOUT=*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSOTS": {"ttr": 4105, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x93\\x06\\x7f\\x00\\x93\\x07o\\x13\\x11\\x00>\\x006\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1993-03-08T00:00:00", "modifydate": "1993-03-17T13:11:00", "lines": 62, "newlines": 54, "modlines": 0, "user": "HAYDOCR"}, "text": "//TSOTS    PROC\n//TSOTS    EXEC PGM=IKJEFT01,\n//         DYNAMNBR=200,\n//         PARM='%NUSSSTS'\n// INCLUDE MEMBER=TSOPARM\n//* ----------------------------------------------------------------- */\n//*                                                                   */\n//*   T E R M I N A L   S U P E R V I S O R   L O G O N   P R O C     */\n//*                                                                   */\n//* WRITTEN BY : CSERSM/R BURROWS  ON 8.3.93                          */\n//* PURPOSE    : LOGON PROC FOR RACF GROUP NUSSSTS.                   */\n//*            : THE PROC IS OPTIMISED, THOUGHT THE CODE IT RUNS IS   */\n//*            : NOT.                                                 */\n//* CHANGES    : -                                                    */\n//*                                                                   */\n//* ----------------------------------------------------------------- */\n//*\n//SYSEXEC  DD  DSN=NUUSS.BURROWR.ISPRLIB,\n//             DISP=SHR\n//         DD  DSN=NUSSS.TS.ISPRLIB,\n//             DISP=SHR\n//         DD  DSN=SYS3.ISPRLIB,\n//             DISP=SHR\n//SYSPROC  DD  DSN=NUSSS.TS.CLIST,\n//             DISP=SHR\n//         DD  DSN=SYS3.CLIST,\n//             DISP=SHR\n//         DD  DSN=SYSA.OP0TSO&TSOPARM..ISPCLIB,\n//             DISP=SHR\n//*\n//ISPMLIB  DD  DSN=NUSSS.TS.ISPMLIB,\n//             DISP=SHR\n//         DD  DSN=SYS3.ISPMLIB,\n//             DISP=SHR\n//         DD  DSN=SYSA.OP0TSO&TSOPARM..ISPMLIB,\n//             DISP=SHR\n//*\n//ISPPLIB  DD  DSN=NUUSS.BURROWR.ISPPLIB,\n//             DISP=SHR\n//         DD  DSN=NUSSS.TS.ISPPLIB,\n//             DISP=SHR\n//         DD  DSN=SYS3.ISPPLIB,\n//             DISP=SHR\n//         DD  DSN=SYSA.OP0TSO&TSOPARM..ISPPLIB,\n//             DISP=SHR\n//*\n//ISPSLIB  DD  DSN=NUSSS.TS.ISPSLIB,\n//             DISP=SHR\n//         DD  DSN=SYS3.ISPSLIB,\n//             DISP=SHR\n//         DD  DSN=SYSA.OP0TSO&TSOPARM..ISPSLIB,\n//             DISP=SHR\n//*\n//ISPTLIB  DD  DSN=SYS3.ISPTLIB,\n//             DISP=SHR\n//         DD  DSN=SYSA.OP0TSO&TSOPARM..ISPTLIB,\n//             DISP=SHR\n//*\n//SYSIN    DD  TERM=TS\n//SYSPRINT DD  TERM=TS,\n//             SYSOUT=*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TSPU": {"ttr": 4107, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92(o\\x00\\x92(o\\x16%\\x00%\\x00%\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-12T00:00:00", "modifydate": "1992-10-12T16:25:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "HAYDOCR"}, "text": ")BODY\n%PERSONAL USERIDS UTILITIES - Main Menu (HELP) ---------------------------------\n%COMMAND ===>_ZCMD                                                            +\n%\n+     ISPF option%S.PU+has been set up to help with migration to%personal IDs+\n+     on TSO. It will be extended as new facilities are written. There are help\n+     screens with the individual options. Options available are:\n%\n%     1+ Display all%RACF+groups you belong to. You can change your default if\n+        you belong to more than one TSO project.\n%\n%     2+ Dataset renaming utility. Rename datasets with a prefix of\n%        <old-project>.<old-user>+to a prefix of%<new-project>.<new-user>+\n%\n%     3+ Change your ISPF account code variable in-flight.%NB+this change will\n+        only last for the duration of your TSO session.\n%\n%     4+ Set up an ISPF profile for a new user based on an existing profile\n%\n%\n)INIT\n  &ZCMD = &Z\n  /*******************************************************************/\n  /*                                                                 */\n  /* PANEL       : TSPU                                              */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 09/09/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Help panel for SPU                                */\n  /*                                                                 */\n  /* COMMENTS    : Part of ISPF S.PU                                 */\n  /*                                                                 */\n  /*******************************************************************/\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TTSOA000": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x92\\x05\\x8f\\x00\\x92\\x05\\x8f \\t\\x00\\x1a\\x00\\x1c\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1992-02-27T00:00:00", "modifydate": "1992-02-27T20:09:00", "lines": 26, "newlines": 28, "modlines": 0, "user": "NUSPS24"}, "text": "+-----------------%TSO+logon allocations -%HELP+--------------------------------\n+Command%===>_ZCMD                                                             +\n\n    If RACF allows you to, you can save any changes you make to the\n    TSO logon allocations displayed at%USER+or%PROJECT+level\n    If not, you will see a message saying you cannot update the\n    information displayed. Any attempt to update will fail.\n\n    You can only display%SYSTEM+or%ENDUSER+parameters for the system you are on\n\n   %User   +parameters are kept in <PROJECT>.<USERID>.ISPPROF\n\n   %Project+parameters are kept in <PROJECT>.MASTER.ISPTLIB\n\n   %Enduser+parameters only apply to%NUxxP+and%NUxxT+projects and\n           %NUADS+users\n\n    The%ALL+option merges all the parameters from all the different\n    levels to show you what will be allocated to each file, which\n    set of parameters each allocation comes from (%USER, PROJ+or%SYS+)\n    and what the concatenation order will be when you log on\n\n)INIT\n &ZCMD = &Z\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TTSOA001": {"ttr": 4111, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x05\\x8f\\x00\\x92\\x05\\x8f &\\x00\\x1a\\x00\\x1a\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-02-27T00:00:00", "modifydate": "1992-02-27T20:26:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "NUSPS24"}, "text": "+-----------------%TSO+logon allocations -%HELP+--------------------------------\n+Command%===>_ZCMD                                                             +\n\n   %Line   +commands must be typed in front of the%ALLOC+keywords and should\n    only be used when you have%update+access to the parameters being displayed\n\n    If you need to put a%new+dataset at the head of an%existing+concatenation,\n    Use%I+to insert a duplicate of the first line of that concatenation then\n    Use%S+to amend the dataset name for the line you just duplicated\n\n   %-  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -\n\n   %Primary+commands must be entered on the%Command+line:\n\n   %EXTRA  +displays a new panel which allows you to set up or change\n            other types of parameters (the panel has its own help screen)\n\n   %CANCEL +prevents any changes you may have been setting up\n\n   %I      +sets up a new%DDNAME+(not possible with the%I+line command)\n\n\n)INIT\n &ZCMD = &Z\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TTSOA002": {"ttr": 4113, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92\\x05\\x8f\\x00\\x92\\x05\\x8f F\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-02-27T00:00:00", "modifydate": "1992-02-27T20:46:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "NUSPS24"}, "text": "+-----------------%TSO+logon allocations -%HELP+--------------------------------\n+Command%===>_ZCMD                                                             +\n   %LOGOFF  +will cause automatic logoff from%TSO+on exit from%ISPF+and will\n    affect%all+members of a project if used in%PROJECT+parameters\n\n   %PANEL   +will override the default panel name%ISR@PRIM+on entry to%ISPF+\n   %USE WITH CAUTION+- the%NU+standard primary menu is centrally maintained. If\n    you override it, it is your job to mend%your+panel it if it stops working !\n\n   %STOP    +will prevent any parameters being processed after the ones you are\n    updating, so should only be used in%exceptional+circumstances:\n    In%USER   +parameters it means only%USER+parameters will be processed\n    In%PROJECT+parameters it means only%USER+and%PROJECT+parameters are used\n\n   %PREREQ  +Specify a command to be run immediately before entry to%ISPF+\n    (This could be a%CLIST, REXX+or free-format%TSO+command\n\n   %COMMAND +Overrides standard entry to%ISPF+and works like%PREREQ+\n\n   %POSTREQ +Is like%PREREQ+but will be executed after exiting%ISPF+\n\n   %ISPFTEST+If you type%TEST+then ISPF will always be entered in%TEST+ mode\n\n)INIT\n &ZCMD = &Z\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "TTSOA003": {"ttr": 4115, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x92\\x05\\x8f\\x00\\x92\\x05\\x8f!'\\x00\\x1b\\x00\\x1b\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-02-27T00:00:00", "modifydate": "1992-02-27T21:27:00", "lines": 27, "newlines": 27, "modlines": 0, "user": "NUSPS24"}, "text": "+-----------------%TSO+logon allocations -%HELP+--------------------------------\n+Command%===>_ZCMD                                                             +\n    If you set up%DUMMY+or%TERMINAL+allocations,leave%Details+blank as none\n    are used for this type of allocation\n\n    For the%ALLOC+keyword: If you specify a dataset which cannot be found,\n    you should still get into%ISPF+but there will be error messages\n    You must supply a valid%DSN+in%Details+if you set up an%ALLOC+statement\n\n    For the%SYSOUT+keyword, you can leave%Details+blank if you wish\n    If you use this field, provide valid%DCB+information in%TSO+command format:\n\n    +Keyword :%SYSOUT  + (ALLOC,TEMPDSN,SYSOUT,DUMMY,TERMINAL)\n    +DDNAME  :%DSQPRINT+\n    +Details :%RECFM(F B A) LRECL(133) BLKSIZE(1330)+\n\n    For the%TEMPDSN+keyword, you must provide%DCB+and%SPACE+parameters\n    (the dataset will be allocated in%TRACKS+with a DISP of%(NEW,DELETE)+e.g.\n\n    +Keyword :%TEMPDSN + (ALLOC,TEMPDSN,SYSOUT,DUMMY,TERMINAL)\n    +DDNAME  :%TEMPDD  +\n    +Details :%RECFM(F) LRECL(4096) BLKSIZE(4096) SPACE(15,15) DIR(45)+\n\n)INIT\n &ZCMD = &Z\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XNUCA1A": {"ttr": 4117, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x12\\x00\\x11\\x00\\x11\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:12:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC:      XNUCA1A                                              */\n  /*                                                                 */\n  /* AUTHOR:    CTS/MVS/RNH                                          */\n  /*                                                                 */\n  /* WRITTEN:   Feb 1992                                             */\n  /*                                                                 */\n  /* CALLED BY: ISPF users                                           */\n  /*                                                                 */\n  /* PURPOSE:   Call XNUCA1B with NEWAPPL U01                        */\n  /*                                                                 */\n  /*******************************************************************/\n  ADDRESS ISPEXEC\n  \"SELECT CMD(%XNUCA1B) NEWAPPL(TMS)\"\n/*                                                                  */\n  EXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUCA1B": {"ttr": 4119, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x13\\x00*\\x00*\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:13:00", "lines": 42, "newlines": 42, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC:      XNUCA1B                                              */\n  /*                                                                 */\n  /* AUTHOR:    CTS/MVS/RNH                                          */\n  /*                                                                 */\n  /* WRITTEN:   Feb 1992                                             */\n  /*                                                                 */\n  /* CALLED BY: XNUCA1A                                              */\n  /*                                                                 */\n  /* PURPOSE:   Set up LIBDEFs and invoke CA/1 4.8 dialog            */\n  /*                                                                 */\n  /*******************************************************************/\n  RC_TOTAL = 0\n/*                                                                  */\n  ADDRESS ISPEXEC\n/*\"LIBDEF ISPMLIB DATASET ID('SYSA.OP0CA1.AMESSAGE')  COND\"         */\n  \"LIBDEF ISPMLIB DATASET ID('SYSA.OP0CA1.CAIISPM')  COND\"\n  RC_TOTAL = RC_TOTAL + RC\n/*\"LIBDEF ISPPLIB DATASET ID('SYSA.OP0CA1.APANELS')   COND\"         */\n  \"LIBDEF ISPPLIB DATASET ID('SYSA.OP0CA1.CAIISPP')   COND\"\n  RC_TOTAL = RC_TOTAL + RC\n/*\"LIBDEF ISPSLIB DATASET ID('SYSA.OP0CA1.ASKELETN')  COND\"         */\n  \"LIBDEF ISPSLIB DATASET ID('SYSA.OP0CA1.CAIISPS')  COND\"\n  RC_TOTAL = RC_TOTAL + RC\n/*\"LIBDEF ISPTLIB DATASET ID('SYSA.OP0CA1.ATABLES')   COND\"         */\n  \"LIBDEF ISPTLIB DATASET ID('SYSA.OP0CA1.CAIISPT')   COND\"\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  IF RC_TOTAL > 0 THEN\n    DO\n      SAY \"CA1 SETUP FAILED - WILL TERMINATE\"\n      EXIT 12\n    END\n/*\"SELECT PGM(U01IOPRI) NOCHECK\"                                    */\n  \"SELECT PGM(TMSIOPRI) NOCHECK\"\n/*                                                                  */\n  \"LIBDEF ISPMLIB\"\n  \"LIBDEF ISPPLIB\"\n  \"LIBDEF ISPSLIB\"\n  \"LIBDEF ISPTLIB\"\n  EXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUCHACC": {"ttr": 4121, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92%?\\x00\\x92%?\\x166\\x00\\x1d\\x00\\x1d\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-09T16:36:00", "lines": 29, "newlines": 29, "modlines": 0, "user": "HAYDOCR"}, "text": "/* REXX ***************************************************************/\n/*                                                                    */\n/* Exec                 : XNUCHACC                                    */\n/* Author               : CSerSM/RB                                   */\n/* Date written         : 23.7.92                                     */\n/* Called by            : Direct command invocation.                  */\n/* Purpose              : Switch ROVTABL account code (Z#ACCT)        */\n/*                                                                    */\n/* REXX ***************************************************************/\ntrace OFF\nADDRESS ISPEXEC                      /* All commands to ISPF          */\n\"CONTROL ERRORS RETURN\"              /* Deal with errors in REXX.     */\n\"VGET Z#ACCT\"                        /* Get current value.            */\ntempacct = z#acct                    /* Copy to work area.            */\n\"ADDPOP ROW(2) COLUMN(2)\"            /* Set window position.          */\nZWINTTL = 'Change Account Code.'     /* Set window title.             */\n\"DISPLAY PANEL(NUCHACC)\"             /* Display window.               */\nif rc \u00ac= 0 then                      /* If PF3 pressed,               */\n  do                                 /*   loose the window,           */\n    \"REMPOP\"                         /*   and exit                    */\n    exit                             /*                               */\n  end                                /*                               */\n\"REMPOP\"                             /* Remove the window.            */\n\"TBTOP  ROVTABL\"                     /* Ensure at top of ROVTABL.     */\n\"TBSKIP ROVTABL\"                     /* Skip to only row of ROVTABL.  */\n\"TBGET  ROVTABL SAVENAME(VARNAM)\"    /* Get contents of extension vars*/\nz#acct = tempacct                    /* Replace value of acct code.   */\n\"TBPUT ROVTABL SAVE\" VARNAM          /* Put fields back in ROVTABL.   */\nexit                                 /* All done, bye bye.            */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUCHGRP": {"ttr": 4123, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x03/\\x00\\x93\\x03/\\x13\\x08\\x01\\x1d\\x01\\x1d\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-02-01T00:00:00", "modifydate": "1993-02-01T13:08:00", "lines": 285, "newlines": 285, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC:      XNUCHGRP                                             */\n  /*                                                                 */\n  /* AUTHOR:    Richard Haydock                                      */\n  /*                                                                 */\n  /* WRITTEN:   Aug 1992                                             */\n  /*                                                                 */\n  /* CALLED BY: TSO users                                            */\n  /*                                                                 */\n  /* PURPOSE:   Display a list of all groups a user belongs to       */\n  /*                                                                 */\n  /*            Identify RACF default group and current connect      */\n  /*            group                                                */\n  /*                                                                 */\n  /*            Allow the user to select one of the groups as a new  */\n  /*            RACF default group as long as it:                    */\n  /*                                                                 */\n  /*            1) Begins with NU                                    */\n  /*            2) Is 5 characters long                              */\n  /*                                                                 */\n  /* FUNCTION:  List the user to determine the RACF default group    */\n  /*                                                                 */\n  /*            Find the user's current connect group from the ACEE  */\n  /*                                                                 */\n  /*            Find all the groups the user is connected to by      */\n  /*            checking through the connect group table             */\n  /*                                                                 */\n  /*            Build an ISPF table (temporary) with one row per     */\n  /*            group. The groups are checked one by one and when    */\n  /*            the default and current connect groups are found,    */\n  /*            the corresponding rows are updated to show this.     */\n  /*                                                                 */\n  /*            The final ISPF table is displayed using panel        */\n  /*            NUCHGRP. The user can select ONE of the groups as    */\n  /*            the new RACF default group if necessary.             */\n  /*                                                                 */\n  /*******************************************************************/\n\n/*                                                                   */\n/*                  Find RACF default group                          */\n/*                                                                   */\n\n  trapvar = outtrap(\"temp.\",'*',\"noconcat\")\n  \"LU\" userid()\n  trapvar = outtrap('off')\n\n  do i = 1 to temp.0\n    if substr(temp.i,2,13) = \"DEFAULT-GROUP\" then\n      do\n        default = word(substr(temp.i,16,8),1)\n        leave\n      end\n    else\n        iterate\n  end\n\n/*                                                                   */\n/*                  Find the ACEE via the ASCB and ASXB              */\n/*                                                                   */\n\n  ascb              = storage(220,4)     /* ASCB address             */\n  decimal_ascb      = c2d(ascb)          /* decimal ascb             */\n\n  asxb_addr_dec     = decimal_ascb + 108 /* decimal asxb address     */\n  asxb_address      = d2x(asxb_addr_dec) /* asxb address             */\n  asxb              = storage(asxb_address,4)   /* asxb              */\n  decimal_asxb      = c2d(asxb)          /* decimal asxb             */\n\n  acronym_address   = d2x(decimal_asxb)\n  acronym           = storage(acronym_address,4)\n\n  if acronym = \"ASXB\"\n    then\n      nop\n    else\n      do\n        say \"ASXB not found - terminating\"\n        exit 4\n      end\n\n  acee_addr_dec     = decimal_asxb + 201 /* decimal ACEE address     */\n  acee_address      = d2x(acee_addr_dec) /* ACEE address             */\n  acee              = storage(acee_address,3)   /* acee              */\n  decimal_acee      = c2d(acee)          /* decimal acee             */\n\n  acronym_address   = d2x(decimal_acee)\n  acronym           = storage(acronym_address,4)\n\n  if acronym = \"ACEE\"\n    then\n      nop\n    else\n      do\n        say \"ACEE not found - terminating\"\n        exit 4\n      end\n\n/*                                                                   */\n/*                  Find current connect group                       */\n/*                                                                   */\n\ngrouplen_addr_d     = decimal_acee + 29  /* decimal group address    */\ngroup_addr_d        = decimal_acee + 30  /* decimal group address    */\n/*                                                                   */\ngrouplen_addr       = d2x(grouplen_addr_d) /*       group address    */\ngroup_addr          = d2x(group_addr_d)    /*       group address    */\n/*                                                                   */\ngroup_length        = storage(grouplen_addr,1)\ngroup_length_d      = c2d(group_length)\n/*                                                                   */\ncurrent             = storage(group_addr,8)\ncurrent             = substr(current,1,group_length_d)\n\n/*                                                                   */\n/*                  Find start of connect group table                */\n/*                                                                   */\n\n  grouptab_pointer_d  = decimal_acee + 108\n  grouptab_pointer    = d2x(grouptab_pointer_d)\n\n  grouptab_address_c  = storage(grouptab_pointer,4)\n  grouptab_address    = c2x(grouptab_address_c)\n  grouptab_address_d  = c2d(grouptab_address_c)\n\n  grouptab_fixed      = storage(grouptab_address,32)\n  grouptab_total_x    = substr(grouptab_fixed,9,2)\n  grouptab_total_d    = c2d(grouptab_total_x)\n\n/*                                                                   */\n/*                  Set up and process an ISPF table                 */\n/*                                                                   */\n\n  address ISPEXEC\n  \"CONTROL ERRORS RETURN\"\n  \"TBEND    TEMP\"\n  \"TBCREATE TEMP KEYS(CONGROUP) \",\n               \"NAMES(DFTGROUP CURGROUP COMMENTS)\",\n               \"NOWRITE REPLACE\"\n  \"TBSORT   TEMP FIELDS(CONGROUP,C,A)\"\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Position 24 bytes before first entry in the table          */\n  /*                                                                 */\n  /*******************************************************************/\n\n  grouptab_entry_d    = grouptab_address_d + 8\n\n  do count = 1 to grouptab_total_d\n\n    grouptab_entry_d    = grouptab_entry_d + 24\n    congroup_addr       = d2x(grouptab_entry_d)\n    congroup            = storage(congroup_addr,8)\n    congroup            = word(congroup,1)\n\n    if substr(congroup,1,1) = \"D\" & congroup \u00ac= default then iterate\n\n    if congroup = default\n      then\n        dftgroup = \"YES\"\n      else\n        dftgroup = \"\"\n\n    if congroup = current\n      then\n        curgroup = \"YES\"\n      else\n        curgroup = \"\"\n\n    comments = \"\"\n    \"TBADD    TEMP ORDER\"\n\n  end                                       /* of do count...        */\n\n  trow = 1                                  /* Display selected rows */\n\n/*********************************************************************/\n/*                                                                   */\n/*            Keep processing display until user presses PF3         */\n/*                                                                   */\n/*********************************************************************/\n\n  do forever\n    \"TBTOP    TEMP\"\n    \"TBSKIP   TEMP NUMBER(\"trow\")\"\n    \"TBDISPL  TEMP PANEL(NUCHGRP) CURSOR(ZCMD)\",\n                 \" CSRROW(\"trow\") AUTOSEL(NO)\"\n    if rc = 8 then leave                    /* if PF3 pressed        */\n\n    trow    = ZTDTOP\n\n    do while ztdsels > 0\n      if ztdsels > 1 then\n        do\n          comments = \"** ERROR ** - only one selection allowed\"\n          \"TBPUT TEMP\"\n          \"SETMSG MSG(SPUM013)\"\n          leave\n        end\n\n      if opt = \"S\" then                     /* Process selected group*/\n        do\n\n          grplen = length(congroup)\n\n          select\n            when congroup = dfltgrp then\n              do\n                comments = \"Selected group is already the default\"\n                \"TBPUT TEMP\"\n                leave\n              end\n\n            when congroup = \"NUSSSTS\" then\n              do\n                comments = \"Terminal supervisor group\"\n                \"TBPUT TEMP\"\n                \"SETMSG MSG(SPUM014)\"\n                leave\n              end\n\n            when substr(congroup,grplen-2,3) = \"LUS\" then\n              do\n                comments = \"LUS control group selected\"\n                \"TBPUT TEMP\"\n                \"SETMSG MSG(SPUM015)\"\n                leave\n              end\n\n            when substr(congroup,1,2) \u00ac= \"NU\" | ,\n                 length(congroup) \u00ac= 5 then\n              do\n                comments = \"This is not a TSO group\"\n                \"TBPUT TEMP\"\n                \"SETMSG MSG(SPUM012)\"\n                leave\n              end\n\n            otherwise                       /* OK - carry on         */\n              do\n                address TSO \"ALU\" userid() \"DFLTGRP(\"congroup\")\"\n                if rc = 0 then\n                  do\n                    dftgroup = \"YES\"\n                    comments = \"This is your new default group\"\n                    \"TBPUT TEMP\"\n\n                    \"CONTROL  DISPLAY  SAVE\"\n                    old_congroup = congroup\n                    old_curgroup = curgroup\n                    congroup     = default\n                    \"TBTOP    TEMP\"\n                    \"TBSCAN   TEMP ARGLIST(congroup) POSITION(POS)\"\n                    dftgroup = \"\"\n                    comments = \"Previous default group\"\n                    \"TBPUT    TEMP\"\n                    curgroup = old_curgroup\n                    congroup = old_congroup\n                    default  = congroup     /* Set new default group */\n                    \"CONTROL  DISPLAY  RESTORE\"\n\n                  end\n                else\n                  do\n                    comments = \"** ERROR ** Change failed RC\" rc\n                    \"TBPUT TEMP\"\n                  end\n              end                           /* of 'otherwise'        */\n\n          end                               /* of select             */\n\n        end                                 /* of option 'S'         */\n\n    if ztdsels = 1 then leave\n    \"TBDISPL  TEMP\"\n\n    end                                     /* of do while ztdsels   */\n\n  end                                       /* of do forever         */\n\n  \"TBEND    TEMP\"\n\n  exit 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUCVPRF": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x923o\\x00\\x923o\\x155\\x00.\\x00.\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T15:35:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC        : XNUCVPRF                                          */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 12/10/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Display panel NUCVPRF to collect details of       */\n  /*               old and new ISPF profile dataset names            */\n  /*                                                                 */\n  /*               Submit skeleton NUCVPRF which will run REXX       */\n  /*               XNUCVPR1 with the appropriate parameters passed   */\n  /*                                                                 */\n  /* COMMENTS    : Part of S.PU (Personal Userids migration aids)    */\n  /*                                                                 */\n  /* REXX ************************************************************/\n\n  address ISPEXEC\n\n  do forever\n    \"DISPLAY  PANEL(NUCVPRF)\"\n    if rc \u00ac= 0 then exit\n\n    trapvar = outtrap(\"temp.\",'*',\"noconcat\")\n    address TSO \"LISTC ENT('\"puolddsn\"')\"\n    save_rc = rc\n    trapvar = outtrap('off')\n    if save_rc \u00ac= 0 then\n      do\n        \"SETMSG MSG(SPUM016)\"\n        iterate\n      end\n    else\n      leave\n\n  end                                       /* of do forever         */\n\n  \"FTOPEN   TEMP\"\n  \"FTINCL   NUCVPRF\"\n  \"FTCLOSE\"\n  \"VGET     ZTEMPF\"\n  address TSO \"SUBMIT '\"ZTEMPF\"'\"\n\n  exit 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUCVPR1": {"ttr": 4360, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x923o\\x00\\x923o\\x15#\\x01\\xff\\x01\\xff\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-12-01T00:00:00", "modifydate": "1992-12-01T15:23:00", "lines": 511, "newlines": 511, "modlines": 0, "user": "HAYDOCR"}, "text": "/* REXX **************************************************************/\n/*                                                                   */\n/* EXEC:      XNUCVPR1                                               */\n/*                                                                   */\n/* WRITTEN:   Oct 1992 by Richard Haydock (Sec Dev)                  */\n/*                                                                   */\n/* CHANGED:   mmm yyyy by ?                                          */\n/*                                                                   */\n/* CALLED BY: ISPF skeleton NUCVPRF in batch mode                    */\n/*                                                                   */\n/* PURPOSE:   Create a new ISPF profile based on an old one          */\n/*            Processing is as follows:                              */\n/*                                                                   */\n/*            a) Use LISTDSI on the old profile to find how much     */\n/*               space and directory space is in use. Allocate a     */\n/*               new profile dataset at least this big.              */\n/*                                                                   */\n/*            b) Copy members from 'olddsn' to 'newdsn' but exclude  */\n/*               members known to redundant                          */\n/*                                                                   */\n/*            c) Process members in 'newdsn' whose names end in PROF */\n/*               as ISPF tables as follows:                          */\n/*                                                                   */\n/*               - Do not process AAAAPROF or BLG0PROF               */\n/*               - Remove variables which should only be in ROVTABL  */\n/*               - Make sure there is a variable ZPROFAPP which is   */\n/*                 set to ROVTABL                                    */\n/*               - Change occurrences of 'olduser'  to 'newuser'     */\n/*               - Change occurrences of 'oldgroup' to 'newgroup'    */\n/*                                                                   */\n/*            d) Process members TSO1, TSO2 and TSO3 as follows:     */\n/*                                                                   */\n/*               - Create a backup member first (backup TSO1 as      */\n/*                 TSO1BU etc)                                       */\n/*               - Change occurrences of 'olduser'  to 'newuser'     */\n/*               - Change occurrences of 'oldgroup' to 'newgroup'    */\n/*                                                                   */\n/*            e) Leave other members unaltered                       */\n/*                                                                   */\n/* REXX **************************************************************/\n\narg olddsn newgroup newuser system\n\nparse var olddsn oldgroup \".\" olduser \".\" rubbish\nnewdsn = newgroup\".\"newuser\".\"system\".ISPPROF.NEW\"\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      This is a list of variables which should be ABSENT from    */\n  /*      profile members (except for AAAAPROF)                      */\n  /*                                                                 */\n  /*******************************************************************/\n\nexclude_list = \"PROFAPP Z#S Z#ACCT ZPP#ACCT ZCC#ACCT ZSY#ACCT\" ,\n               \"ZPJ#ACCT Z#GROUP ZSYSNAME SYSID\"\n\nX = LISTDSI(olddsn \"DIRECTORY\")\n\nsay \"\"\nsay \"**************************************************************\"\nsay \"*** Beginning execution of ISPF profile conversion utility ***\"\nsay \"**************************************************************\"\nsay \"\"\nsay \"Dataset\" olddsn \"will be processed\"\nsay \"\"\nsay \"The new profile information will be in\" newdsn\n\nselect\n  when sysunits = \"BLOCK\" then\n    do\n      factor = 47000   % sysblksize + 1\n      newpri = sysused % factor     + 1\n    end\n\n  when sysunits = \"TRACK\"    then newpri = sysused\n\n  when sysunits = \"CYLINDER\" then newpri = sysused * 15\n\n  otherwise nop\n\nend\n\nif newpri < 5 then newpri = 5\nnewsec = newpri % 5\n\nif sysudirblk // 45 = 0\n  then\n    newdir  = sysudirblk\n  else\n    newdir  = ( sysudirblk % 45 + 1 ) * 45\n\nsay \"\"\nsay \"Deleting old copy of\" newdsn \"(if it exists)\"\nsay \"\"\n\n\"DELETE\" newdsn\n\n\"ALLOC F(TEMPPROF) DA(\"newdsn\") NEW UNIT(SYSALLDA),\nTRACKS SPACE(\"newpri\",\"newsec\") LRECL(80) CATALOG,\nRECFM(F B) BLKSIZE(15760) DSORG(PO) DIR(\"newdir\") REUS\"\n\nif rc \u00ac= 0 then\n  do\n    say \"Error creating new profile dataset - RC\" rc\n    exit\n  end\n\n\"FREE F(TEMPPROF)\"\n\nsay \"\"\n\nAddress ISPEXEC\n\"CONTROL ERRORS RETURN\"\n\n/*********************************************************************/\n/*                                                                   */\n/*        Copy selected members to new ISPPROF dataset initially     */\n/*                                                                   */\n/*********************************************************************/\n\n\"LMINIT   DATAID(dataid1) DATASET(\"olddsn\")\"\n\"LMOPEN   DATAID(\"dataid1\")\"\n\n\"LMINIT   DATAID(dataid2) DATASET(\"newdsn\")\"\n\"LMCLOSE  DATAID(\"dataid2\")\"\n\nmem = \"        \"                            /* Set to start          */\ndo forever                                  /* Process all members   */\n  \"LMMLIST  DATAID(\"dataid1\") MEMBER(mem) STATS(YES)\"\n  if rc \u00ac= 0 then leave                     /* No members left       */\n\n  memlen = length(mem)\n\n  select\n    when substr(mem,memlen-3,4) = \"EDRT\" then iterate\n    when substr(mem,1,3) = \"CSY\"  then iterate\n    when substr(mem,1,4) = \"CTLI\" then iterate\n    when substr(mem,1,4) = \"FAXE\" then iterate\n    when substr(mem,1,3) = \"ICQ\"  then iterate\n    when substr(mem,1,4) = \"PDSM\" then iterate\n    when substr(mem,1,3) = \"U01\"  then iterate\n    otherwise nop\n  end                                       /* of select             */\n\n  \"LMCOPY FROMID(\"dataid1\") FROMMEM(\"mem\") TODATAID(\"dataid2\")\",\n                             \"TOMEM(\"mem\") REPLACE\"\n\n  if mem = \"TSO1\" | mem = \"TSO2\" | mem = \"TSO3\" then\n    do\n      membu = word(mem,1) || \"BU\"\n      membu = left(membu,8)\n      \"LMCOPY FROMID(\"dataid1\") FROMMEM(\"mem\") TODATAID(\"dataid2\")\",\n                                 \"TOMEM(\"membu\") REPLACE\"\n      if rc = 0\n        then\n          say \"backup copy of\" mem \"created in member\" membu\n        else\n          say \"ERROR - failed to create backup of member\" mem\n    end\n\nend                                         /* of do forever         */\n\n/*********************************************************************/\n/*                                                                   */\n/*            Free files                                             */\n/*                                                                   */\n/*********************************************************************/\n\n\"LMMLIST  DATAID(\"dataid1\") OPTION(FREE)\"   /* Tidy up & free I/P    */\n\"LMCLOSE  DATAID(\"dataid1\")\"\n\"LMFREE   DATAID(\"dataid1\")\"\n\n\"LMFREE   DATAID(\"dataid2\")\"\n\n/*********************************************************************/\n/*                                                                   */\n/*            Set up LIBDEF ready for table processing               */\n/*                                                                   */\n/*********************************************************************/\n\n\"LIBDEF   NEWPROF DATASET ID(\"newdsn\") COND\"\n\n/*********************************************************************/\n/*                                                                   */\n/*            Scan through dataset, member by member                 */\n/*                                                                   */\n/*********************************************************************/\n\n\"LMINIT   DATAID(DATAID) DATASET(\"newdsn\")\"\n\"LMOPEN   DATAID(\"dataid\")\"\nmem = \"        \"\n\ndo forever                                  /* Process all members   */\n  \"LMMLIST  DATAID(\"dataid\") MEMBER(mem) STATS(YES)\"\n  if rc \u00ac= 0 then leave                     /* No members left       */\n\n  table  = word(mem,1)                      /* Remove trailing spaces*/\n  tablen = length(table)\n\n  select\n\n    when table = \"AAAAPROF\" then nop\n\n    when table = \"BLG0PROF\" then nop\n\n    when substr(table,tablen-3,4) = \"PROF\"\n      then\n        process_rc = process_profile(table) /* Check table           */\n\n    when table = \"TSO1\" | table = \"TSO2\" | table = \"TSO3\" then\n      do\n        address TSO\n        process_rc = process_tsoparm(table) /* Check TSO parms       */\n        address ISPEXEC\n      end\n\n    otherwise nop\n\n  end\n\nend\n\n\"LMMLIST  DATAID(\"dataid\") OPTION(FREE)\"    /* Tidy up & free library*/\n\"LMCLOSE  DATAID(\"dataid\")\"\n\"LMFREE   DATAID(\"dataid\")\"\n\n\"LIBDEF   NEWPROF\"\n\nsay \"\"\nsay \"**************************************************************\"\nsay \"*** End of execution of ISPF profile conversion utility    ***\"\nsay \"**************************************************************\"\nsay \"\"\n\nexit 0\n\n/*********************************************************************/\n/*                                                                   */\n/* Routine:   process_profile                                        */\n/*                                                                   */\n/* Called by: main line                                              */\n/*                                                                   */\n/* Purpose:   Process an ISPF table                                  */\n/*                                                                   */\n/*********************************************************************/\n\nprocess_profile:\n\n  arg table\n\n  say \"\"\n  say \"*** Processing table\" table \"***\"\n\n  changed = \"N\"                             /* not changed as yet    */\n\n  \"TBEND   \" table\n  \"TBOPEN  \" table \"LIBRARY(NEWPROF)\"\n\n  if rc \u00ac= 0 then\n    do\n      say \"Bad return from TBOPEN of\" table \"- RC was\" rc\n      return 8\n    end\n\n  \"TBQUERY \" table \"ROWNUM(trows)\"\n  if trows \u00ac= 1 then\n    do\n      say \"Unusual PROF member found. Should have 1 row but has\" trows\n      return 12\n    end\n\n  \"TBSKIP  \" table\n  \"TBGET   \" table \"SAVENAME(varlist)\"      /* Read in variables     */\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Check each variable in VARLIST as follows:                 */\n  /*                                                                 */\n  /*    - Add/replace correct value of ZPROFAPP if necessary         */\n  /*                                                                 */\n  /*    - Discard if it should only be in ROVTABL                    */\n  /*                                                                 */\n  /*    - If not discarded, if <olduser> found, replace by <newuser> */\n  /*                                                                 */\n  /*******************************************************************/\n\n  zprofapp = \"ROVTABL\"\n  parse var varlist \"(\" varlist \")\"\n  x = pos(\"ZPROFAPP\",varlist)\n  if x = 0 then\n    do\n      varlist = varlist || \" ZPROFAPP\"\n      say \"ZPROFAPP variable added to table\" table\n      changed = \"Y\"\n    end\n\n  new_varlist = \"(\"\n  do forever\n    parse var varlist temp_var \" \" varlist\n\n    if temp_var = \"\" then\n      do\n        new_len = length(new_varlist)\n        if substr(new_varlist,new_len,1) = \" \"\n          then\n            new_varlist = delstr(new_varlist,new_len,1)\n        leave\n      end\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      check remaining characters do not begin with \" \"           */\n  /*                                                                 */\n  /*******************************************************************/\n\n    do while substr(varlist,1,1) = \" \"\n      if length(varlist) = 0 then leave\n      varlist = delstr(varlist,1,1)\n    end\n\n    if wordpos(temp_var,exclude_list) = 0   /* Not in exclusion list */\n      then\n        nop\n      else\n        do\n          say \"Variable\" temp_var \"excluded from table\" table\n          changed = \"Y\"\n          iterate\n        end\n\n    varval = value(temp_var)\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      changed all olduser-newuser within a variable              */\n  /*                                                                 */\n  /*******************************************************************/\n\n  if olduser = newuser\n    then\n      nop\n    else\n      do forever\n        x = pos(olduser,varval)\n        if x = 0 then leave\n\n        changed = \"Y\"\n\n        say \"Changing\" olduser \"to\" newuser \"for variable\" temp_var\n\n        tempval = substr(varval,1,x-1)      /* olduser  -> newuser   */\n        tempval = tempval || newuser\n        copypos = x + length(olduser)\n        copylen = length(varval) + 1 - x - length(olduser)\n        varval  = tempval || substr(varval,copypos,copylen)\n\n        interpret temp_var \" = varval\"\n\n      end                                   /* of do forever         */\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      changed all oldgroup-newgroup within a variable            */\n  /*                                                                 */\n  /*******************************************************************/\n\n  if oldgroup = newgroup\n    then\n      nop\n    else\n      do forever\n\n        x = pos(oldgroup,varval)\n        if x = 0 then leave\n\n        changed = \"Y\"\n\n        say \"Changing\" oldgroup \"to\" newgroup \"for variable\" temp_var\n\n        tempval = substr(varval,1,x-1)      /* oldgroup -> newgroup  */\n        tempval = tempval || newgroup\n        copypos = x + length(oldgroup)\n        copylen = length(varval) + 1 - x - length(oldgroup)\n        varval  = tempval || substr(varval,copypos,copylen)\n\n        interpret temp_var \" = varval\"\n\n      end                                   /* of do forever         */\n\n    if varlist \u00ac= \"\"\n      then\n        new_varlist = new_varlist || temp_var || \" \"\n      else\n        do\n          new_varlist = new_varlist || temp_var\n          leave\n        end\n\n  end                                       /* of do forever         */\n  varlist = new_varlist || \")\"\n\n  if changed = \"N\" then\n    do\n      say \"no changes made to member\" table\n      \"TBEND   \" table                      /* Nothing to update     */\n    end\n  else\n    do\n      say \"writing back changed parameters to member\" table\n      \"TBPUT   \" table \"SAVE\" || varlist    /* Write back variables  */\n      if rc \u00ac= 0\n        then\n          say \"ERROR - Could not save changes for member\" table\n      \"TBCLOSE \" table \"LIBRARY(NEWPROF)\"   /* Close the table       */\n    end\n\nreturn 0\n\n/*********************************************************************/\n/*                                                                   */\n/* Routine:   process_tsoparm                                        */\n/*                                                                   */\n/* Called by: main line                                              */\n/*                                                                   */\n/* Purpose:   Process a set of TSO parameters                        */\n/*                                                                   */\n/*********************************************************************/\n\nprocess_tsoparm:\n\n  arg table\n\n  changed = \"N\"\n  say \"\"\n  say \"*** Processing TSO parameters in\" table \"***\"\n\n  iofile = newdsn || \"(\" || table || \")\"\n  \"ALLOC F(IOFILE) DA(\" || iofile || \") SHR REUS\"\n\n  \"EXECIO * DISKR IOFILE (FINIS STEM IOFILE. \"\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Change all olduser -> newuser                              */\n  /*                                                                 */\n  /*******************************************************************/\n\n  if olduser = newuser\n    then\n      nop\n    else\n      do count = 1 to iofile.0\n\n        if substr(iofile.count,1,5) \u00ac= \"ALLOC\" then iterate\n\n        x = pos(olduser,iofile.count)\n        if x = 0 then iterate\n\n        changed = \"Y\"\n\n        say \"Changing\" olduser \"to\" newuser \"for\" iofile.count\n\n        temprec = substr(iofile.count,1,x-1) /* olduser -> newuser   */\n        temprec = temprec || newuser\n        copypos = x + length(olduser)\n        copylen = 81 - x - length(olduser)\n        temprec = temprec || substr(iofile.count,copypos,copylen)\n        iofile.count = left(temprec,80)\n\n      end\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Change all oldgroup -> newgroup                            */\n  /*                                                                 */\n  /*******************************************************************/\n\n  if oldgroup = newgroup\n    then\n      nop\n    else\n      do count = 1 to iofile.0\n\n        if substr(iofile.count,1,5) \u00ac= \"ALLOC\" then iterate\n\n        x = pos(oldgroup,iofile.count)\n        if x = 0 then iterate\n\n        say \"Changing\" oldgroup \"to\" newgroup \"for\" iofile.count\n\n        temprec = substr(iofile.count,1,x-1) /* oldgroup -> newgroup */\n        temprec = temprec || newgroup\n        copypos = x + length(oldgroup)\n        copylen = 81 - x - length(oldgroup)\n        temprec = temprec || substr(iofile.count,copypos,copylen)\n        iofile.count = left(temprec,80)\n\n      end\n\n  if changed = \"Y\" then\n    do\n      say \"writing back changed parameters to member\" table\n      \"EXECIO * DISKW IOFILE (FINIS STEM IOFILE. \"\n    end\n  else\n    say \"no changes made to member\" table\n\n  \"FREE F(IOFILE)\"\n\nreturn 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUDSREN": {"ttr": 4613, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x92%?\\x00\\x92%?\\x16V\\x00\"\\x00\"\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1992-09-09T00:00:00", "modifydate": "1992-09-09T16:56:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC        : XNUDSREN                                          */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 26/08/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Display panel NUDSREN to collect details of       */\n  /*               old and new dsn qualifiers                        */\n  /*                                                                 */\n  /*               Submit skeleton NUDSREN which will run REXX       */\n  /*               XNUDSRN1 with the appropriate parameters passed   */\n  /*                                                                 */\n  /* COMMENTS    : Part of S.PU (Personal Userids migration aids)    */\n  /*                                                                 */\n  /* REXX ************************************************************/\n\n  address ISPEXEC\n\n  \"DISPLAY  PANEL(NUDSREN)\"\n  if rc \u00ac= 0 then exit\n\n  puoldq = puoldp || \".\" || puoldu\n  punewq = punewp || \".\" || punewu\n\n  \"FTOPEN   TEMP\"\n  \"FTINCL   NUDSREN\"\n  \"FTCLOSE\"\n  \"VGET     ZTEMPF\"\n  address TSO \"SUBMIT '\"ZTEMPF\"'\"\n\n  exit 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUDSRN1": {"ttr": 4615, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x92(\\x0f\\x00\\x92(\\x0f\\x11\\x01\\x02\\xd1\\x02\\xd1\\x00\\x00\\xd5\\xe4\\xe2\\xd7\\xe2\\xf2\\xf4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1992-10-06T00:00:00", "modifydate": "1992-10-06T11:01:00", "lines": 721, "newlines": 721, "modlines": 0, "user": "NUSPS24"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC        : XNUDSRN1                                          */\n  /*                                                                 */\n  /* AUTHOR      : RNH                                               */\n  /*                                                                 */\n  /* LAST UPDATE : 23/08/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Rename all <oldproj>.<olduser>.* datasets to      */\n  /*               <newproj>.<newuser>.* where possible              */\n  /*                                                                 */\n  /*               Program DBARACHK is used to check the user has    */\n  /*               ALTER authority to both oldname and newname for   */\n  /*               every object they propose to rename               */\n  /*                                                                 */\n  /*               LISTC is used to check that the prospective NEW   */\n  /*               name of each dataset does not already exist       */\n  /*                                                                 */\n  /*               If a rename attempt does fail (most likely if the */\n  /*               dataset is in use elsewhere) then the failure is  */\n  /*               reported                                          */\n  /*                                                                 */\n  /*               Migrated datasets are not renamed or recalled.    */\n  /*               They are reported on, and it is up to the user to */\n  /*               either HDELETE or HRECALL each one.               */\n  /*                                                                 */\n  /*               ISPF profiles are not renamed. There is another   */\n  /*               utility to convert them 'intelligently'           */\n  /*                                                                 */\n  /*               GDG bases are reported on but not changed. GDG    */\n  /*               members are ignored (GnnnnVnn in last 8 chars)    */\n  /*                                                                 */\n  /*               CLUSTER entries are LISTCed to find all their     */\n  /*               associations. If their AIXs, the AIXs are also    */\n  /*               LISTCed to find their associations. IDCAMS ALTER  */\n  /*               is used to change the names of all associated     */\n  /*               entries.                                          */\n  /*                                                                 */\n  /*               2 run modes are possible:                         */\n  /*               CHECK  - find all datasets and say which can and  */\n  /*                        which cannot be renamed, and why.        */\n  /*                                                                 */\n  /*               RENAME - rename where possible. Produce a report  */\n  /*                        to say what was done with each dataset.  */\n  /*                                                                 */\n  /* COMMENTS    : Written to help with migration to personal TSO    */\n  /*               userids                                           */\n  /*                                                                 */\n  /* REXX ************************************************************/\n\n  arg old_quals new_quals mode .\n\n  max_rc            = 0\n  line_count        = 50\n\n  tot_found         = 0\n  tot_gdg           = 0\n  tot_migrat        = 0\n  tot_cart          = 0\n  tot_nonvsam_good  = 0\n  tot_nonvsam_bad   = 0\n  tot_cluster_good  = 0\n  tot_cluster_bad   = 0\n\n  delstack\n\n  trapvar  = outtrap(\"lvl.\",'*',\"noconcat\")\n  \"listc lvl('\" || old_quals || \"')\"\n  trapvar  = outtrap('off')\n\n  do i = 1 to lvl.0\n\n    testword = substr(lvl.i,1,8)\n    if testword = \"CLUSTER \" | testword = \"NONVSAM \" | ,\n       testword = \"GDG BASE\" then\n      do\n        dsn = word(substr(lvl.i,17,44),1)\n        start_pos = length(dsn) - 7         /* test for GDG member   */\n        suffix    = substr(dsn,start_pos,8)\n        if substr(suffix,1,1)           = \"G\"   & ,\n           datatype(substr(suffix,2,4)) = \"NUM\" & ,\n           substr(suffix,6,1)           = \"V\"   & ,\n           datatype(substr(suffix,7,2)) = \"NUM\" then\n          do\n              say \"Dataset\" dsn \"is part of a GDG\"\n              iterate\n          end\n\n      end\n\n    select\n      when testword = \"CLUSTER \" then\n        do\n          tot_found    = tot_found + 1\n          cluster_rc   = process_cluster(dsn)\n          if cluster_rc = 0\n            then\n              tot_cluster_good = tot_cluster_good + 1\n            else\n              tot_cluster_bad  = tot_cluster_bad  + 1\n          if cluster_rc > max_rc then max_rc = cluster_rc\n          queue \" \"\n          line_count = line_count + 1\n        end\n\n      when testword = \"GDG BASE\" then\n        do\n          tot_found  = tot_found + 1\n          tot_gdg    = tot_gdg  + 1\n          comments   = \"Not renamed. GDGs cannot be renamed\"\n          write_rc   = write_line(dsn \"GDG\" \"NO\")\n          queue \" \"\n          line_count = line_count + 1\n        end\n\n      when testword = \"NONVSAM \" then\n        do\n          tot_found    = tot_found + 1\n          if substr(suffix,2,7) = \"ISPPROF\" then\n            do\n              comments = \"Not renamed. There is a special utility to\",\n                         \"convert ISPF profiles\"\n              write_rc   = write_line(dsn \"ISPPROF\" \"NO\")\n              queue \" \"\n              line_count = line_count + 1\n              tot_nonvsam_bad = tot_nonvsam_bad + 1\n              iterate\n            end\n\n          nonvsam_rc   = process_nonvsam(dsn)\n          select\n            when nonvsam_rc = 0 then        /* Processed OK          */\n              do\n                tot_nonvsam_good = tot_nonvsam_good + 1\n                write_rc = write_line(dsn \"NONVSAM\" \"Yes\")\n              end\n\n            when nonvsam_rc = 4 then        /* HSM migrated          */\n              do\n                tot_migrat       = tot_migrat       + 1\n                write_rc = write_line(dsn \"MIGRATED\" \"NO\")\n              end\n\n            when nonvsam_rc = 8 then        /* Tape/cartridge        */\n              do\n                tot_cart         = tot_cart         + 1\n                write_rc = write_line(dsn \"CART\" \"NO\")\n              end\n\n            otherwise                       /* Some error            */\n              do\n                tot_nonvsam_bad  = tot_nonvsam_bad  + 1\n                write_rc = write_line(dsn \"NONVSAM\" \"NO\")\n              end\n          end\n\n          queue \" \"\n          line_count = line_count + 1\n          if nonvsam_rc > max_rc then max_rc = nonvsam_rc\n        end\n\n      when testword = \"     IN-\" | ,\n           testword = \"AIX ----\" | ,\n           testword = \"DATA ---\" | ,\n           testword = \"INDEX --\" | ,\n           testword = \"PATH ---\" then nop\n\n      otherwise say \"Unknown entry -\" word(substr(lvl.i,17,44),1)\n\n    end                                     /* of select             */\n\n  end                                       /* of do i = 1...        */\n\n  call terminal_report\n\n  if SYSDSN(PURENAME) = \"OK\" then\n      \"alloc f(REPORT) da(PURENAME) OLD reuse\"\n    ELSE\n      \"alloc f(REPORT) da(PURENAME) new\",\n      \"      lrecl(133) recfm(f b a) blksize(13300) reuse\"\n\n  queue \"\"\n  \"execio * diskw REPORT (finis\"            /* write out the report  */\n\n  exit max_rc\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE:   process_cluster                                      */\n  /*                                                                 */\n  /* CALLED BY: main loop                                            */\n  /*                                                                 */\n  /* PURPOSE:   rename a VSAM cluster                                */\n  /*                                                                 */\n  /*            If MIGRAT, issue HRECALL and leave                   */\n  /*                                                                 */\n  /*            If not, find all the associated bits and use IDCAMS  */\n  /*            ALTER to rename them                                 */\n  /*                                                                 */\n  /*******************************************************************/\n\nprocess_cluster:\n  arg oldname\n\n  trapvar  = outtrap(\"ent.\",'*',\"noconcat\")\n  \"listc ent('\" || oldname || \"') ALL\"\n  trapvar  = outtrap('off')\n\n  assoc.0    = 0                            /* Init associations     */\n  vtype.0    = 0\n  assoc_flag = \"N\"\n\n  do e = 1 to ent.0\n    if substr(ent.e,6,12) = \"ASSOCIATIONS\" then\n      do\n        say \"Checking associations for cluster\" oldname\n        assoc_flag = \"Y\"\n        iterate\n      end\n\n    if assoc_flag = \"N\" then iterate\n\n    if substr(ent.e,4,1) \u00ac= \" \" then leave  /* All associations found*/\n\n    select\n      when substr(ent.e,8,3) = \"AIX\"      then\n        do\n          assoc.0     = assoc.0 + 1\n          vtype.0     = assoc.0\n          count       = assoc.0\n          assoc.count = word(substr(ent.e,17,44),1)\n          vtype.count = \"AIX\"\n          say \"Found AIX      component\" assoc.count\n          aix_rc = process_aix(assoc.count)\n          if aix_rc \u00ac= 0 then\n            do\n              comments = \"AIX checking error for cluster\" oldname\n              write_rc = write_line(oldname \"CLUSTER\" \"NO\")\n              return 8\n            end\n        end\n\n      when substr(ent.e,8,4) = \"DATA\"     then\n        do\n          assoc.0     = assoc.0 + 1\n          vtype.0     = assoc.0\n          count       = assoc.0\n          assoc.count = word(substr(ent.e,17,44),1)\n          vtype.count = \"DATA\"\n          say \"Found DATA     component\" assoc.count\n        end\n\n      when substr(ent.e,8,5) = \"INDEX\"    then\n        do\n          assoc.0     = assoc.0 + 1\n          vtype.0     = assoc.0\n          count       = assoc.0\n          assoc.count = word(substr(ent.e,17,44),1)\n          vtype.count = \"INDEX\"\n          say \"Found INDEX    component\" assoc.count\n        end\n\n      when substr(ent.e,8,4) = \"PATH\"     then\n        do\n          assoc.0     = assoc.0 + 1\n          vtype.0     = assoc.0\n          count       = assoc.0\n          assoc.count = word(substr(ent.e,17,44),1)\n          vtype.count = \"PATH\"\n          say \"Found PATH     component\" assoc.count\n        end\n\n      otherwise\n        do\n          unknown = word(substr(ent.e,17,44),1)\n          say \"Found UNKNOWN  component\" unknown\n          return 8\n        end\n\n    end                                     /* of select             */\n\n  end                                       /* of do e = 1...        */\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Find newname for base cluster and check it out             */\n  /*                                                                 */\n  /*******************************************************************/\n\n  suffix  = delstr(oldname,1,length(old_quals))\n  newname = new_quals || suffix\n\n  trapvar  = outtrap(\"temp.\",'*',\"noconcat\")\n  \"listc ent('\" || newname || \"')\"\n  trapvar  = outtrap('off')\n\n  if rc = 0 then                            /* New name already there*/\n    do\n      comments = \"New name already exists. Cannot rename to\",\n                 newname\n      write_rc = write_line(oldname \"CLUSTER\" \"NO\")\n      return 8\n    end\n\n  \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"oldname\",ALTER'\"\n  old_rc = rc\n  \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"newname\",ALTER'\"\n  new_rc = rc\n  if old_rc = 0 & new_rc = 0\n    then\n      nop\n    else\n      do\n        comments = \"Not enough authority to rename dataset\"\n        write_rc = write_line(oldname \"CLUSTER\" \"NO\")\n        return 8\n      end\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Find newnames for associations and check them out          */\n  /*                                                                 */\n  /*******************************************************************/\n\n  newass.0 = assoc.0\n\n  do e = 1 to assoc.0\n\n    suffix   = delstr(assoc.e,1,length(old_quals))\n    newass.e = new_quals || suffix\n\n    trapvar  = outtrap(\"temp.\",'*',\"noconcat\")\n    \"listc ent('\" || newass.e || \"')\"\n    trapvar  = outtrap('off')\n\n    if rc = 0 then                          /* New name already there*/\n      do\n        comments = \"New name already exists. Cannot rename to\",\n                   newass.e\n        write_rc = write_line(oldname \"CLUSTER\" \"NO\")\n        return 8\n      end\n\n    \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"assoc.e\",ALTER'\"\n    old_rc = rc\n    \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"newass.e\",ALTER'\"\n    new_rc = rc\n    if old_rc = 0 & new_rc = 0\n      then\n        nop\n      else\n        do\n          comments = \"Not enough authority to rename dataset\"\n          write_rc = write_line(oldname \"CLUSTER\" \"NO\")\n          return 8\n        end\n\n  end                                       /* of do e = 1 to assoc.0*/\n\n  /*******************************************************************/\n  /*                                                                 */\n  /*      Start renaming cluster and all its associations if mode    */\n  /*      is RENAME                                                  */\n  /*                                                                 */\n  /*******************************************************************/\n\n  if mode = \"CHECK\" then                    /* report and return     */\n    do\n      comments = \"All checks were OK - check mode only\"\n      write_rc = write_line(oldname \"CLUSTER\" \"Yes\")\n      do j = 1 to assoc.0\n        write_rc = write_line(assoc.j vtype.j \"Yes\")\n      end\n      return 0\n    end                                     /* of mode CHECK         */\n\n  say \"Renaming\" oldname \"to\" newname\n  \"ALTER '\" || oldname || \"' NEWNAME('\" || newname || \"')\"\n\n  if rc = 0 then\n    do\n      comments = \"Rename of dataset worked OK\"\n      write_rc = write_line(oldname \"CLUSTER\" \"Yes\")\n    end\n  else\n    do\n      comments = \"Rename of dataset failed RC\" rc\n      write_rc = write_line(oldname \"CLUSTER\" \"NO\")\n      return 12\n    end\n\n  do e = 1 to assoc.0\n    say \"Renaming\" assoc.e \"to\" newass.e\n    \"ALTER '\" || assoc.e || \"' NEWNAME('\" || newass.e || \"')\"\n\n    if rc = 0 then\n      do\n        comments = \"Rename of dataset worked OK\"\n        write_rc = write_line(assoc.e vtype.e \"Yes\")\n      end\n    else\n      do\n        comments = \"Rename of dataset failed RC\" rc\n        write_rc = write_line(assoc.e vtype.e \"NO\")\n        return 12\n      end\n\n  end                                       /* of do e = 1 to assoc.0*/\n\nreturn 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE:   process_aix                                          */\n  /*                                                                 */\n  /* CALLED BY: process_cluster                                      */\n  /*                                                                 */\n  /* PURPOSE:   Pick up associations of an alternate index (AIX)     */\n  /*            and add them to the list of associations of the      */\n  /*            original cluster being checked                       */\n  /*                                                                 */\n  /*******************************************************************/\n\nprocess_aix:\n  arg aixname\n\n  trapvar  = outtrap(\"aix.\",'*',\"noconcat\")\n  \"listc ent('\" || aixname || \"') ALL\"\n  trapvar  = outtrap('off')\n\n  aix_assoc_flag = \"N\"\n\n  do a = 1 to aix.0\n    if substr(aix.a,6,12) = \"ASSOCIATIONS\" then\n      do\n        say \"Checking associations for AIX\" aixname\n        aix_assoc_flag = \"Y\"\n        iterate\n      end\n\n    if aix_assoc_flag = \"N\" then iterate\n\n    if substr(aix.a,6,1) \u00ac= \" \" then leave  /* All associations found*/\n\n    select\n      when substr(aix.a,8,7) = \"CLUSTER\"  then nop\n\n      when substr(aix.a,8,4) = \"DATA\"     then\n        do\n          assoc.0 = assoc.0 + 1\n          count   = assoc.0\n          assoc.count = word(substr(aix.a,17,44),1)\n          vtype.count = \"AIXDATA\"\n          say \"Found DATA     component\" assoc.count\n        end\n\n      when substr(aix.a,8,5) = \"INDEX\"    then\n        do\n          assoc.0 = assoc.0 + 1\n          count   = assoc.0\n          assoc.count = word(substr(aix.a,17,44),1)\n          vtype.count = \"AIXINDEX\"\n          say \"Found INDEX    component\" assoc.count\n        end\n\n      when substr(aix.a,8,4) = \"PATH\"     then\n        do\n          assoc.0 = assoc.0 + 1\n          count   = assoc.0\n          assoc.count = word(substr(aix.a,17,44),1)\n          vtype.count = \"PATH\"\n          say \"Found PATH     component\" assoc.count\n        end\n\n      otherwise\n        do\n          unknown = word(substr(aix.a,17,44),1)\n          say \"Found UNKNOWN  component\" unknown\n          return 8\n        end\n\n    end                                     /* of select             */\n\n  end                                       /* of do a = 1...        */\n\nreturn 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE:   process_nonvsam                                      */\n  /*                                                                 */\n  /* CALLED BY: main loop                                            */\n  /*                                                                 */\n  /* PURPOSE:   rename a NONVSAM dataset                             */\n  /*                                                                 */\n  /*            If part of a GDG, return (need to process whole GDG) */\n  /*                                                                 */\n  /*            If MIGRAT, issue HRECALL and return                  */\n  /*                                                                 */\n  /*            If on tape or cartridge, return (done manually)      */\n  /*                                                                 */\n  /*            If proposed new name exists, return with a message   */\n  /*                                                                 */\n  /*            If user does not have ALTER access to profiles       */\n  /*            protecting oldname & newname, return with a message  */\n  /*                                                                 */\n  /*            Rename to change old_quals to new_quals otherwise    */\n  /*                                                                 */\n  /*******************************************************************/\n\nprocess_nonvsam:\n  arg oldname\n\n  trapvar  = outtrap(\"ent.\",'*',\"noconcat\")\n  \"listc ent('\" || oldname || \"') VOL\"\n  trapvar  = outtrap('off')\n\n  do e = 1 to ent.0\n    if substr(ent.e,8,6) \u00ac= \"VOLSER\"\n      then\n        iterate\n      else\n        leave\n  end\n\n  volser    = substr(ent.e,26,6)\n\n  if volser = \"MIGRAT\" then                 /* See if migrated       */\n    do\n      comments = \"Must be HRECALLed or HDELETEd\"\n      return 4\n    end\n\n  if substr(ent.e,37,7) \u00ac= \"DEVTYPE\" then\n    do\n      comments = \"Error processing LISTC output for dataset\"\n      return 12\n    end\n\n  devtype   = substr(ent.e,52,8)            /* see if on cartridge   */\n\n  if devtype = \"78008080\" | devtype = \"78048080\" | ,\n     devtype = \"32008003\" then\n    do\n      comments = \"Cartridge/tape dataset. It will not be\",\n                 \"renamed\"\n      return 8\n    end\n\n  suffix  = delstr(oldname,1,length(old_quals))\n  newname = new_quals || suffix\n\n  trapvar  = outtrap(\"temp.\",'*',\"noconcat\")\n  \"listc ent('\" || newname || \"')\"\n  trapvar  = outtrap('off')\n\n  if rc = 0 then                            /* New name already there*/\n    do\n      comments = \"New name already exists. Cannot rename to\",\n                 newname\n      return 12\n    end\n\n  \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"oldname\",ALTER'\"\n  old_rc = rc\n  \"CALL 'SYS3.LINKLIB(DBARACHK)' '\"newname\",ALTER'\"\n  new_rc = rc\n  if old_rc = 0 & new_rc = 0\n    then\n      nop\n    else\n      do\n        comments = \"Not enough authority to rename dataset\"\n        return 12\n      end\n\n  if mode = \"CHECK\" then\n    do\n      comments = \"All checks were OK - check mode only\"\n      return 0\n    end\n\n  \"RENAME '\" || oldname || \"' '\" || newname || \"'\"\n\n  if rc \u00ac= 0 then\n    do\n      comments = \"Rename of dataset failed RC\" rc\n      return 12\n    end\n\n  comments = \"Rename of dataset worked OK\"\n\nreturn 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE:   write_line                                           */\n  /*                                                                 */\n  /* CALLED BY: process_cluster                                      */\n  /*            process_nonvsam                                      */\n  /*                                                                 */\n  /* PURPOSE:   write a line to report on one dataset                */\n  /*                                                                 */\n  /*******************************************************************/\n\nwrite_line:\n  arg dsn type status\n\n  if line_count > 40 then call page_heading\n\n  select\n    when type = \"AIX\"     | type = \"DATA\"     | type = \"INDEX\"\n      then\n        dsn = \"  \"   || dsn\n\n    when type = \"AIXDATA\" | type = \"AIXINDEX\" | type = \"PATH\"\n      then\n        dsn = \"    \" || dsn\n\n    otherwise nop\n  end\n\n  dsn    = left(dsn,49)\n  type   = left(type,9)\n  status = left(status,4)\n  queue \" \" || dsn || type || status || comments\n  line_count = line_count + 1\n\nreturn 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE:   page_heading                                         */\n  /*                                                                 */\n  /* CALLED BY: write_line                                           */\n  /*                                                                 */\n  /* PURPOSE:   write a page heading for the detail report           */\n  /*                                                                 */\n  /*******************************************************************/\n\npage_heading:\n  queue \"1        PURENAME - renaming of datasets from prefix \" ,\n     || old_quals \"to prefix\" new_quals\n  underline = \"+        ____________________________________________\",\n           || \"___________\"\n  extra     = \"\"\n  extra     = left(extra,(length(old_quals) + length(new_quals)),\"_\")\n  underline = underline || extra\n  queue underline\n  queue \"0\"\n\n  queue \" Dataset Name                                    \",\n        \"Type     OK? Comments\"\n  queue \"+________________________________________________\",\n        \"________ ___ _____________________________________________\",\n     || \"______________\"\n  Queue \" \"\n\n  line_count = 0\n\nreturn 0\n\n  /*******************************************************************/\n  /*                                                                 */\n  /* ROUTINE:   terminal_report                                      */\n  /*                                                                 */\n  /* CALLED BY: main loop                                            */\n  /*                                                                 */\n  /* PURPOSE:   produce final page of dataset renaming report        */\n  /*                                                                 */\n  /*******************************************************************/\n\nterminal_report:\n\n  queue \"1        Terminal report for rename of\" old_quals \"datasets\",\n        \"to a prefix of\" new_quals\n  underline = \"+        ____________________________________________\",\n           || \"___________\"\n  extra     = \"\"\n  extra     = left(extra,(length(old_quals) + length(new_quals)),\"_\")\n  underline = underline || extra\n  queue underline\n\n  if mode = \"CHECK\" then\n    do\n      queue \"-        Option selected was CHECK. No datasets have \" ,\n         || \"been renamed but all other checks have been made\"\n      queue \"+        ____________________________________________\" ,\n         || \"________________________________________________\"\n    end\n  else\n    do\n      queue \"-        Option selected was RENAME. See detailed re\" ,\n         || \"port for explanations if datasets were not renamed\"\n      queue \"+        ___________________________________________\" ,\n         || \"__________________________________________________\"\n    end\n\n  queue \"0\"\n  queue \"0\"\n  margin = \"0                           \"\n\n  queue margin \"Number of migrated datasets               \",\n        right(tot_migrat,4)\n  queue margin \"Number of datasets on cartridge or tape   \",\n        right(tot_cart,4)\n  queue margin \"Number of non-VSAM datasets: processed OK \",\n        right(tot_nonvsam_good,4)\n  queue margin \"                           : not processed\",\n        right(tot_nonvsam_bad,4)\n  queue margin \"Number of VSAM clusters    : processed OK \",\n        right(tot_cluster_good,4)\n  queue margin \"                           : not processed\",\n        right(tot_cluster_bad,4)\n  queue margin \"Number of GDGs found (not processed)      \",\n        right(tot_gdg,4)\n  queue margin \"Total                                     \",\n        right(tot_found,4)\n\nreturn 0\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNURNPRF": {"ttr": 4871, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x9f\\x00\\x93\\x11\\x9f\\x170\\x00C\\x00C\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-29T00:00:00", "modifydate": "1993-04-29T17:30:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC        : XNURNPRF                                          */\n  /*                                                                 */\n  /* AUTHOR      : Richard Haydock                                   */\n  /*                                                                 */\n  /* LAST UPDATE : 12/10/92                                          */\n  /*                                                                 */\n  /* PURPOSE     : Back up current ISPF profile                      */\n  /*               Rename new ISPF profile to live name              */\n  /*                                                                 */\n  /* COMMENTS    : Must be run outside ISPF                          */\n  /*                                                                 */\n  /* REXX ************************************************************/\n  if sysvar(\"SYSISPF\") = \"ACTIVE\" then\n    do\n      say \"This command must be run outside ISPF\"\n      exit\n    end\n  \"FINDGRP\"\n  \"FINDSYS\"\n\n  /*                                                                 */\n  /* 1) Check what ISPPROF is currently in use                       */\n  /*                                                                 */\n\n  x      = listdsi(\"ISPPROF\" \"FILE\")\n  curdsn = \"'\"sysdsname\"'\"\n  bakdsn = \"'\"sysdsname\".OLD'\"\n  newdsn = \"'NUTSO.\"userid()\".\"sysid\".ISPPROF.NEW'\"\n  nxtdsn = \"'NUTSO.\"userid()\".\"sysid\".ISPPROF'\"\n  if sysdsn(newdsn) \u00ac= \"OK\" then\n    do\n      newdsn = \"'\"grpid\".\"userid()\".\"sysid\".ISPPROF.NEW'\"\n      nxtdsn = \"'\"grpid\".\"userid()\".\"sysid\".ISPPROF'\"\n    end\n\n  say \"Deleting old copy of\" bakdsn \"(if it exists)\"\n  \"DELETE\" bakdsn\n\n  say \"Renaming\" curdsn \"to\" bakdsn \"...\"\n  \"RENAME\" curdsn bakdsn\n  if rc \u00ac= 0 then\n    do\n      say \"Rename failed - terminating\"\n      say \"Contact x87709 for advice if necessary\"\n      exit\n    end\n\n  say \"Renaming\" newdsn \"to\" nxtdsn \"...\"\n  \"RENAME\" newdsn nxtdsn\n  if rc \u00ac= 0 then\n    do\n      say \"Rename failed - terminating\"\n      say \"Contact x87709 for advice if necessary\"\n      exit\n    end\n  else\n    do\n      say \"Renaming worked OK. Now do one of the following:\"\n      say \"\"\n      say \"a) Type the command %STARTUP to resume ISPF\"\n      say \"b) Log off and then log on again\"\n      say \"\"\n      say \"DO NOT type ISPF and expect it to work properly ...\"\n      say \"\"\n    end\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "XNUTSM53": {"ttr": 4873, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x93\\x11\\x7f\\x00\\x93\\x11\\x7f\\x16\\x13\\x00A\\x00A\\x00\\x00\\xc8\\xc1\\xe8\\xc4\\xd6\\xc3\\xd9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1993-04-27T00:00:00", "modifydate": "1993-04-27T16:13:00", "lines": 65, "newlines": 65, "modlines": 0, "user": "HAYDOCR"}, "text": "  /* REXX ************************************************************/\n  /*                                                                 */\n  /* EXEC:      XNUTSM53                                             */\n  /*                                                                 */\n  /* AUTHOR:    Richard Haydock (Sec Dev)                            */\n  /*                                                                 */\n  /* WRITTEN:   Nov 1992                                             */\n  /*                                                                 */\n  /* CALLED BY: ISPF Dialogs or as a direct command                  */\n  /*                                                                 */\n  /* PURPOSE:   Invoke TSO/MON 5.3.1 dialogs                         */\n  /*                                                                 */\n  /*            Note - once TSO/MON 5.2.1 has been removed this will */\n  /*                   amending for dataset name changes RNH 23/11/92*/\n  /*                                                                 */\n  /*******************************************************************/\n  ARG COND\n  ADDRESS TSO\n\n  if sysvar(\"SYSISPF\") \u00ac= \"ACTIVE\" then\n    do\n      say \"This command must be run from within ISPF\"\n      say \"\"\n      say \"Press ENTER to exit\"\n      say \"\"\n      pull fred\n      exit\n    end\n\n  RC_TOTAL = 0\n/*                                                                  */\n  \"ALLOC F(TSMLIB)   DA('SYS2.LP0TSOMN.TSMLINK') SHR REUS\"\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  \"ALLOC F(TSMTABLE) DA('SYSA.OP0TSOMN.TSMTABLE') SHR REUS\"\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  ADDRESS ISPEXEC\n/*                                                                  */\n  \"LIBDEF ISPMLIB DATASET ID('SYSA.OP0TSOMN.TSMMAC')\" COND\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  \"LIBDEF ISPPLIB DATASET ID('SYSA.OP0TSOMN.TSMMAC')\" COND\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  \"LIBDEF ISPSLIB DATASET ID('SYSA.OP0TSOMN.TSMMAC')\" COND\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  \"LIBDEF ISPTLIB DATASET ID('SYSA.OP0TSOMN.TSMMAC')\" COND\n  RC_TOTAL = RC_TOTAL + RC\n/*                                                                  */\n  IF RC_TOTAL > 0 THEN\n    DO\n      SAY \"TSOMON SETUP FAILED - WILL TERMINATE\"\n      EXIT 12\n    END\n/*                                                                  */\n  \"SELECT PGM(TSMP000) PARM('SYSA.OP0TSOMN.TSMPARMS(TSMGCF00)')\"\n/*                                                                  */\n  \"LIBDEF ISPMLIB\"\n  \"LIBDEF ISPPLIB\"\n  \"LIBDEF ISPSLIB\"\n  \"LIBDEF ISPTLIB\"\n  ADDRESS TSO \"FREE F(TSMLIB TSMTABLE)\"\n  EXIT 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT245/FILE245.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT245", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}