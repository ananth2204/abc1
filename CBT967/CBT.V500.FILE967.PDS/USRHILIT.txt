/* rexx */
/*********************************************************************/
/* This exec will handle highlighting unsupported languages in ISPF  */
/* EDIT, as a panel exit invoked from the EDIT data panel ISREDDE2.  */
/* This code is largely based on the groundbreaking work of Pedro    */
/* Vera at IBM, as detailed in his SHARE presentation "Customizing   */
/* the ISPF HILITE command", available at http://www.share.org.      */
/*                                                                   */
/* Change Log                                                        */
/*                                                                   */
/*    Date    Name           Description                             */
/* ---------- -------------- --------------------------------------- */
/* 2020/07/03 Conley         Add FLOWASM to supported languages.     */
/* 2020/05/12 Conley         Add Google Go to supported languages.   */
/* 2019/12/28 Conley         Initial coding.                         */
/*********************************************************************/
call isprexpx('I')
/*********************************************************************/
/* There are three arrays which control the highlighting process,    */
/* kw (keyword), atr (attribute), and clr (color).  The kw array     */
/* holds blank-delimited keywords, the atr array holds the ISPF      */
/* default attributes for the associated keyword (typically 'D'),    */
/* and the clr array holds the highlighting color for the associated */
/* keyword (typically 'R' for RED).                                  */
/*                                                                   */
/* The languages currently supported are:                            */
/*                                                                   */
/* CARLa                                                             */
/* FLOWASM                                                           */
/* FORTRAN                                                           */
/* Go                                                                */
/* JAVA                                                              */
/* JSON                                                              */
/* PYTHON                                                            */
/* RUBY                                                              */
/* SHELL                                                             */
/* SQL                                                               */
/*********************************************************************/
select
   when (usrhilng = 'OFF') then
      nop
   when (usrhilng = 'CARLA') then
      do
         kw.0    = 46
         kw.1    = ' ALLOCATE '
         kw.2    = ' BDAMQSAM '
         kw.3    = ' BUNDLE '
         kw.4    = ' CAPS '
         kw.5    = ' COMPAREOPT '
         kw.6    = ' CONVERSION '
         kw.7    = ' COPY '
         kw.8    = ' DEBUG '
         kw.9    = ' DEFAULT '
         kw.10   = ' DEFINE '
         kw.11   = ' DEFSENS '
         kw.12   = ' DEFTYPE '
         kw.13   = ' DISPLAY '
         kw.14   = ' DSUMMARY '
         kw.15   = ' ENDBUNDLE '
         kw.16   = ' ENDMERGE '
         kw.17   = ' EXCLUDE '
         kw.18   = ' FILEOPTION '
         kw.19   = ' IMBED '
         kw.20   = ' INCLUDE '
         kw.21   = ' LANGUAGE '
         kw.22   = ' LIMIT '
         kw.23   = ' LIST '
         kw.24   = ' MARGINS '
         kw.25   = ' MENU '
         kw.26   = ' MERGE '
         kw.27   = ' MERGELIST '
         kw.28   = ' MERGERULE '
         kw.29   = ' MOVE '
         kw.30   = ' NEWLIST '
         kw.31   = ' OPTION '
         kw.32   = ' PRINT '
         kw.33   = ' REMOVE '
         kw.34   = ' REPORT '
         kw.35   = ' SELECT '
         kw.36   = ' SHOW '
         kw.37   = ' SIMULATE '
         kw.38   = ' SITE_SEVERITY '
         kw.39   = ' SMFCACHE '
         kw.40   = ' SORTLIST '
         kw.41   = ' STANDARD '
         kw.42   = ' SUMMARY '
         kw.43   = ' SUPPRESS '
         kw.44   = ' SYMBOLIC '
         kw.45   = ' UNLOAD '
         kw.46   = ' VERIFY '
         atr.1   = 'DDDDDDDD'
         atr.2   = 'DDDDDDDD'
         atr.3   = 'DDDDDD'
         atr.4   = 'DDDD'
         atr.5   = 'DDDDDDDDDD'
         atr.6   = 'DDDDDDDDDD'
         atr.7   = 'DDDD'
         atr.8   = 'DDDDD'
         atr.9   = 'DDDDDDD'
         atr.10  = 'DDDDDD'
         atr.11  = 'DDDDDDD'
         atr.12  = 'DDDDDDD'
         atr.13  = 'DDDDDDD'
         atr.14  = 'DDDDDDDD'
         atr.15  = 'DDDDDDDDD'
         atr.16  = 'DDDDDDDD'
         atr.17  = 'DDDDDDD'
         atr.18  = 'DDDDDDDDDD'
         atr.19  = 'DDDDD'
         atr.20  = 'DDDDDDD'
         atr.21  = 'DDDDDDDD'
         atr.22  = 'DDDDD'
         atr.23  = 'DDDD'
         atr.24  = 'DDDDDDD'
         atr.25  = 'DDDD'
         atr.26  = 'DDDDD'
         atr.27  = 'DDDDDDDDD'
         atr.28  = 'DDDDDDDDD'
         atr.29  = 'DDDD'
         atr.30  = 'DDDDDDD'
         atr.31  = 'DDDDDD'
         atr.32  = 'DDDDD'
         atr.33  = 'DDDDDD'
         atr.34  = 'DDDDDD'
         atr.35  = 'DDDDDD'
         atr.36  = 'DDDD'
         atr.37  = 'DDDDDDDD'
         atr.38  = 'DDDDDDDDDDDDD'
         atr.39  = 'DDDDDDDD'
         atr.40  = 'DDDDDDDD'
         atr.41  = 'DDDDDDDD'
         atr.42  = 'DDDDDDD'
         atr.43  = 'DDDDDDDD'
         atr.44  = 'DDDDDDDD'
         atr.45  = 'DDDDDD'
         atr.46  = 'DDDDDD'
         clr.1   = 'RRRRRRRR'
         clr.2   = 'RRRRRRRR'
         clr.3   = 'RRRRRR'
         clr.4   = 'RRRR'
         clr.5   = 'RRRRRRRRRR'
         clr.6   = 'RRRRRRRRRR'
         clr.7   = 'RRRR'
         clr.8   = 'RRRRR'
         clr.9   = 'RRRRRRR'
         clr.10  = 'RRRRRR'
         clr.11  = 'RRRRRRR'
         clr.12  = 'RRRRRRR'
         clr.13  = 'RRRRRRR'
         clr.14  = 'RRRRRRRR'
         clr.15  = 'RRRRRRRRR'
         clr.16  = 'RRRRRRRR'
         clr.17  = 'RRRRRRR'
         clr.18  = 'RRRRRRRRRR'
         clr.19  = 'RRRRR'
         clr.20  = 'RRRRRRR'
         clr.21  = 'RRRRRRRR'
         clr.22  = 'RRRRR'
         clr.23  = 'RRRR'
         clr.24  = 'RRRRRRR'
         clr.25  = 'RRRR'
         clr.26  = 'RRRRR'
         clr.27  = 'RRRRRRRRR'
         clr.28  = 'RRRRRRRRR'
         clr.29  = 'RRRR'
         clr.30  = 'RRRRRRR'
         clr.31  = 'RRRRRR'
         clr.32  = 'RRRRR'
         clr.33  = 'RRRRRR'
         clr.34  = 'RRRRRR'
         clr.35  = 'RRRRRR'
         clr.36  = 'RRRR'
         clr.37  = 'RRRRRRRR'
         clr.38  = 'RRRRRRRRRRRRR'
         clr.39  = 'RRRRRRRR'
         clr.40  = 'RRRRRRRR'
         clr.41  = 'RRRRRRRR'
         clr.42  = 'RRRRRRR'
         clr.43  = 'RRRRRRRR'
         clr.44  = 'RRRRRRRR'
         clr.45  = 'RRRRRR'
         clr.46  = 'RRRRRR'
      end
   when (usrhilng = 'FLOWASM') then
      do
         kw.0    = 0
      end
   when (usrhilng = 'FORTRAN') then
      do
         kw.0    = 145
         kw.1    = ' ABSTRACT '
         kw.2    = ' ACCESS '
         kw.3    = ' ACTION '
         kw.4    = ' ADVANCE '
         kw.5    = ' ALLOCATABLE '
         kw.6    = ' ALLOCATE '
         kw.7    = ' ASSIGN '
         kw.8    = ' ASSIGNMENT '
         kw.9    = ' ASSOCIATE '
         kw.10   = ' ASYNCHRONOUS '
         kw.11   = ' BACKSPACE '
         kw.12   = ' BIND '
         kw.13   = ' BLANK '
         kw.14   = ' BLOCK '
         kw.15   = ' CALL '
         kw.16   = ' CASE '
         kw.17   = ' CHARACTER '
         kw.18   = ' CLASS '
         kw.19   = ' CLOSE '
         kw.20   = ' CODIMENSION '
         kw.21   = ' COMMON '
         kw.22   = ' COMPLEX '
         kw.23   = ' CONTAINS '
         kw.24   = ' CONTIGUOUS '
         kw.25   = ' CONTINUE '
         kw.26   = ' CRITICAL '
         kw.27   = ' CYCLE '
         kw.28   = ' DATA '
         kw.29   = ' DEALLOCATE '
         kw.30   = ' DEFAULT '
         kw.31   = ' DEFERRED '
         kw.32   = ' DELIM '
         kw.33   = ' DIMENSION '
         kw.34   = ' DIRECT '
         kw.35   = ' DO '
         kw.36   = ' DO CONCURRENT '
         kw.37   = ' DOUBLE '
         kw.38   = ' ELSE '
         kw.39   = ' ELSEWHERE '
         kw.40   = ' END '
         kw.41   = ' ENDFILE '
         kw.42   = ' ENTRY '
         kw.43   = ' ENUM '
         kw.44   = ' ENUMERATOR '
         kw.45   = ' EOR '
         kw.46   = ' EQUIVALENCE '
         kw.47   = ' ERR '
         kw.48   = ' ERROR STOP '
         kw.49   = ' EXIST '
         kw.50   = ' EXIT '
         kw.51   = ' EXTENDS '
         kw.52   = ' EXTERNAL '
         kw.53   = ' FILE '
         kw.54   = ' FINAL '
         kw.55   = ' FLUSH '
         kw.56   = ' FMT '
         kw.57   = ' FORM '
         kw.58   = ' FORMAT '
         kw.59   = ' FORMATTED '
         kw.60   = ' FUNCTION '
         kw.61   = ' GENERIC '
         kw.62   = ' GO '
         kw.63   = ' IF '
         kw.64   = ' IMPLICIT '
         kw.65   = ' IMPORT '
         kw.66   = ' IN '
         kw.67   = ' INOUT '
         kw.68   = ' INQUIRE '
         kw.69   = ' INTEGER '
         kw.70   = ' INTENT '
         kw.71   = ' INTERFACE '
         kw.72   = ' INTRINSIC '
         kw.73   = ' IOLENGTH '
         kw.74   = ' IOSTAT '
         kw.75   = ' KIND '
         kw.76   = ' LEN '
         kw.77   = ' LOCK '
         kw.78   = ' LOGICAL '
         kw.79   = ' MODULE '
         kw.80   = ' NAME '
         kw.81   = ' NAMED '
         kw.82   = ' NAMELIST '
         kw.83   = ' NEXTREC '
         kw.84   = ' NML '
         kw.85   = ' NON_OVERRIDABLE '
         kw.86   = ' NONE '
         kw.87   = ' NOPASS '
         kw.88   = ' NULLIFY '
         kw.89   = ' NUMBER '
         kw.90   = ' ONLY '
         kw.91   = ' OPEN '
         kw.92   = ' OPENED '
         kw.93   = ' OPERATOR '
         kw.94   = ' OPTIONAL '
         kw.95   = ' OUT '
         kw.96   = ' PAD '
         kw.97   = ' PARAMETER '
         kw.98   = ' PASS '
         kw.99   = ' PAUSE '
         kw.100  = ' POINTER '
         kw.101  = ' POSITION '
         kw.102  = ' PRECISION '
         kw.103  = ' PRINT '
         kw.104  = ' PRIVATE '
         kw.105  = ' PROCEDURE '
         kw.106  = ' PROGRAM '
         kw.107  = ' PROTECTED '
         kw.108  = ' PUBLIC '
         kw.109  = ' READ '
         kw.110  = ' READWRITE '
         kw.111  = ' REAL '
         kw.112  = ' REC '
         kw.113  = ' RECL '
         kw.114  = ' RECURSIVE '
         kw.115  = ' RESULT '
         kw.116  = ' RETURN '
         kw.117  = ' REWIND '
         kw.118  = ' SAVE '
         kw.119  = ' SELECT '
         kw.120  = ' SEQUENCE  '
         kw.121  = ' SEQUENTIAL '
         kw.122  = ' SIZE '
         kw.123  = ' STAT '
         kw.124  = ' STATUS '
         kw.125  = ' STOP '
         kw.126  = ' SUBMODULE '
         kw.127  = ' SUBROUTINE '
         kw.128  = ' SYNC ALL '
         kw.129  = ' SYNC IMAGES '
         kw.130  = ' SYNC MEMORY '
         kw.131  = ' TARGET '
         kw.132  = ' THEN '
         kw.133  = ' TO '
         kw.134  = ' TYPE '
         kw.135  = ' UNFORMATTED '
         kw.136  = ' UNIT '
         kw.137  = ' UNLOCK '
         kw.138  = ' USE '
         kw.139  = ' VALUE '
         kw.140  = ' VOLATILE '
         kw.141  = ' WAIT '
         kw.142  = ' WHERE '
         kw.143  = ' WHILE '
         kw.144  = ' WRITE '
         kw.145  = ' END PROGRAM '
         atr.1   = 'DDDDDDDD'
         atr.2   = 'DDDDDD'
         atr.3   = 'DDDDDD'
         atr.4   = 'DDDDDDD'
         atr.5   = 'DDDDDDDDDDD'
         atr.6   = 'DDDDDDDD'
         atr.7   = 'DDDDDD'
         atr.8   = 'DDDDDDDDDD'
         atr.9   = 'DDDDDDDDD'
         atr.10  = 'DDDDDDDDDDDD'
         atr.11  = 'DDDDDDDDD'
         atr.12  = 'DDDD'
         atr.13  = 'DDDDD'
         atr.14  = 'DDDDD'
         atr.15  = 'DDDD'
         atr.16  = 'DDDD'
         atr.17  = 'DDDDDDDDD'
         atr.18  = 'DDDDD'
         atr.19  = 'DDDDD'
         atr.20  = 'DDDDDDDDDDD'
         atr.21  = 'DDDDDD'
         atr.22  = 'DDDDDDD'
         atr.23  = 'DDDDDDDD'
         atr.24  = 'DDDDDDDDDD'
         atr.25  = 'DDDDDDDD'
         atr.26  = 'DDDDDDDD'
         atr.27  = 'DDDDD'
         atr.28  = 'DDDD'
         atr.29  = 'DDDDDDDDDD'
         atr.30  = 'DDDDDDD'
         atr.31  = 'DDDDDDDD'
         atr.32  = 'DDDDD'
         atr.33  = 'DDDDDDDDD'
         atr.34  = 'DDDDDD'
         atr.35  = 'DD'
         atr.36  = 'DDDDDDDDDDDD'
         atr.37  = 'DDDDDD'
         atr.38  = 'DDDD'
         atr.39  = 'DDDDDDDDD'
         atr.40  = 'DDD'
         atr.41  = 'DDDDDDD'
         atr.42  = 'DDDDD'
         atr.43  = 'DDDD'
         atr.44  = 'DDDDDDDDDD'
         atr.45  = 'DDD'
         atr.46  = 'DDDDDDDDDDD'
         atr.47  = 'DDD'
         atr.48  = 'DDDDDDDDD'
         atr.49  = 'DDDDD'
         atr.50  = 'DDDD'
         atr.51  = 'DDDDDDD'
         atr.52  = 'DDDDDDDD'
         atr.53  = 'DDDD'
         atr.54  = 'DDDDD'
         atr.55  = 'DDDDD'
         atr.56  = 'DDD'
         atr.57  = 'DDDD'
         atr.58  = 'DDDDDD'
         atr.59  = 'DDDDDDDDD'
         atr.60  = 'DDDDDDDD'
         atr.61  = 'DDDDDDD'
         atr.62  = 'DD'
         atr.63  = 'DD'
         atr.64  = 'DDDDDDDD'
         atr.65  = 'DDDDDD'
         atr.66  = 'DD'
         atr.67  = 'DDDDD'
         atr.68  = 'DDDDDDD'
         atr.69  = 'DDDDDDD'
         atr.70  = 'DDDDDD'
         atr.71  = 'DDDDDDDDD'
         atr.72  = 'DDDDDDDDD'
         atr.73  = 'DDDDDDDD'
         atr.74  = 'DDDDDD'
         atr.75  = 'DDDD'
         atr.76  = 'DDD'
         atr.77  = 'DDDD'
         atr.78  = 'DDDDDDD'
         atr.79  = 'DDDDDD'
         atr.80  = 'DDDD'
         atr.81  = 'DDDDD'
         atr.82  = 'DDDDDDDD'
         atr.83  = 'DDDDDDD'
         atr.84  = 'DDD'
         atr.85  = 'DDDDDDDDDDDDDDD'
         atr.86  = 'DDDD'
         atr.87  = 'DDDDDD'
         atr.88  = 'DDDDDDD'
         atr.89  = 'DDDDDD'
         atr.90  = 'DDDD'
         atr.91  = 'DDDD'
         atr.92  = 'DDDDDD'
         atr.93  = 'DDDDDDDD'
         atr.94  = 'DDDDDDDD'
         atr.95  = 'DDD'
         atr.96  = 'DDD'
         atr.97  = 'DDDDDDDDD'
         atr.98  = 'DDDD'
         atr.99  = 'DDDDD'
         atr.100 = 'DDDDDDD'
         atr.101 = 'DDDDDDDD'
         atr.102 = 'DDDDDDDDD'
         atr.103 = 'DDDDD'
         atr.104 = 'DDDDDDD'
         atr.105 = 'DDDDDDDDD'
         atr.106 = 'DDDDDDD'
         atr.107 = 'DDDDDDDDD'
         atr.108 = 'DDDDDD'
         atr.109 = 'DDDD'
         atr.110 = 'DDDDDDDDD'
         atr.111 = 'DDDD'
         atr.112 = 'DDD'
         atr.113 = 'DDDD'
         atr.114 = 'DDDDDDDDD'
         atr.115 = 'DDDDDD'
         atr.116 = 'DDDDDD'
         atr.117 = 'DDDDDD'
         atr.118 = 'DDDD'
         atr.119 = 'DDDDDD'
         atr.120 = 'DDDDDDDD'
         atr.121 = 'DDDDDDDDDD'
         atr.122 = 'DDDD'
         atr.123 = 'DDDD'
         atr.124 = 'DDDDDD'
         atr.125 = 'DDDD'
         atr.126 = 'DDDDDDDDD'
         atr.127 = 'DDDDDDDDDD'
         atr.128 = 'DDDDDDD'
         atr.129 = 'DDDDDDDDDD'
         atr.130 = 'DDDDDDDDDD'
         atr.131 = 'DDDDDD'
         atr.132 = 'DDDD'
         atr.133 = 'DD'
         atr.134 = 'DDDD'
         atr.135 = 'DDDDDDDDDDD'
         atr.136 = 'DDDD'
         atr.137 = 'DDDDDD'
         atr.138 = 'DDD'
         atr.139 = 'DDDDD'
         atr.140 = 'DDDDDDDD'
         atr.141 = 'DDDD'
         atr.142 = 'DDDDD'
         atr.143 = 'DDDDD'
         atr.144 = 'DDDDD'
         atr.145 = 'DDD DDDDDDD'
         clr.1   = 'RRRRRRRR'
         clr.2   = 'RRRRRR'
         clr.3   = 'RRRRRR'
         clr.4   = 'RRRRRRR'
         clr.5   = 'RRRRRRRRRRR'
         clr.6   = 'RRRRRRRR'
         clr.7   = 'RRRRRR'
         clr.8   = 'RRRRRRRRRR'
         clr.9   = 'RRRRRRRRR'
         clr.10  = 'RRRRRRRRRRRR'
         clr.11  = 'RRRRRRRRR'
         clr.12  = 'RRRR'
         clr.13  = 'RRRRR'
         clr.14  = 'RRRRR'
         clr.15  = 'RRRR'
         clr.16  = 'RRRR'
         clr.17  = 'RRRRRRRRR'
         clr.18  = 'RRRRR'
         clr.19  = 'RRRRR'
         clr.20  = 'RRRRRRRRRRR'
         clr.21  = 'RRRRRR'
         clr.22  = 'RRRRRRR'
         clr.23  = 'RRRRRRRR'
         clr.24  = 'RRRRRRRRRR'
         clr.25  = 'RRRRRRRR'
         clr.26  = 'RRRRRRRR'
         clr.27  = 'RRRRR'
         clr.28  = 'RRRR'
         clr.29  = 'RRRRRRRRRR'
         clr.30  = 'RRRRRRR'
         clr.31  = 'RRRRRRRR'
         clr.32  = 'RRRRR'
         clr.33  = 'RRRRRRRRR'
         clr.34  = 'RRRRRR'
         clr.35  = 'RR'
         clr.36  = 'RRRRRRRRRRRR'
         clr.37  = 'RRRRRR'
         clr.38  = 'RRRR'
         clr.39  = 'RRRRRRRRR'
         clr.40  = 'RRR'
         clr.41  = 'RRRRRRR'
         clr.42  = 'RRRRR'
         clr.43  = 'RRRR'
         clr.44  = 'RRRRRRRRRR'
         clr.45  = 'RRR'
         clr.46  = 'RRRRRRRRRRR'
         clr.47  = 'RRR'
         clr.48  = 'RRRRRRRRR'
         clr.49  = 'RRRRR'
         clr.50  = 'RRRR'
         clr.51  = 'RRRRRRR'
         clr.52  = 'RRRRRRRR'
         clr.53  = 'RRRR'
         clr.54  = 'RRRRR'
         clr.55  = 'RRRRR'
         clr.56  = 'RRR'
         clr.57  = 'RRRR'
         clr.58  = 'RRRRRR'
         clr.59  = 'RRRRRRRRR'
         clr.60  = 'RRRRRRRR'
         clr.61  = 'RRRRRRR'
         clr.62  = 'RR'
         clr.63  = 'RR'
         clr.64  = 'RRRRRRRR'
         clr.65  = 'RRRRRR'
         clr.66  = 'RR'
         clr.67  = 'RRRRR'
         clr.68  = 'RRRRRRR'
         clr.69  = 'RRRRRRR'
         clr.70  = 'RRRRRR'
         clr.71  = 'RRRRRRRRR'
         clr.72  = 'RRRRRRRRR'
         clr.73  = 'RRRRRRRR'
         clr.74  = 'RRRRRR'
         clr.75  = 'RRRR'
         clr.76  = 'RRR'
         clr.77  = 'RRRR'
         clr.78  = 'RRRRRRR'
         clr.79  = 'RRRRRR'
         clr.80  = 'RRRR'
         clr.81  = 'RRRRR'
         clr.82  = 'RRRRRRRR'
         clr.83  = 'RRRRRRR'
         clr.84  = 'RRR'
         clr.85  = 'RRRRRRRRRRRRRRR'
         clr.86  = 'RRRR'
         clr.87  = 'RRRRRR'
         clr.88  = 'RRRRRRR'
         clr.89  = 'RRRRRR'
         clr.90  = 'RRRR'
         clr.91  = 'RRRR'
         clr.92  = 'RRRRRR'
         clr.93  = 'RRRRRRRR'
         clr.94  = 'RRRRRRRR'
         clr.95  = 'RRR'
         clr.96  = 'RRR'
         clr.97  = 'RRRRRRRRR'
         clr.98  = 'RRRR'
         clr.99  = 'RRRRR'
         clr.100 = 'RRRRRRR'
         clr.101 = 'RRRRRRRR'
         clr.102 = 'RRRRRRRRR'
         clr.103 = 'RRRRR'
         clr.104 = 'RRRRRRR'
         clr.105 = 'RRRRRRRRR'
         clr.106 = 'RRRRRRR'
         clr.107 = 'RRRRRRRRR'
         clr.108 = 'RRRRRR'
         clr.109 = 'RRRR'
         clr.110 = 'RRRRRRRRR'
         clr.111 = 'RRRR'
         clr.112 = 'RRR'
         clr.113 = 'RRRR'
         clr.114 = 'RRRRRRRRR'
         clr.115 = 'RRRRRR'
         clr.116 = 'RRRRRR'
         clr.117 = 'RRRRRR'
         clr.118 = 'RRRR'
         clr.119 = 'RRRRRR'
         clr.120 = 'RRRRRRRR'
         clr.121 = 'RRRRRRRRRR'
         clr.122 = 'RRRR'
         clr.123 = 'RRRR'
         clr.124 = 'RRRRRR'
         clr.125 = 'RRRR'
         clr.126 = 'RRRRRRRRR'
         clr.127 = 'RRRRRRRRRR'
         clr.128 = 'RRRRRRR'
         clr.129 = 'RRRRRRRRRR'
         clr.130 = 'RRRRRRRRRR'
         clr.131 = 'RRRRRR'
         clr.132 = 'RRRR'
         clr.133 = 'RR'
         clr.134 = 'RRRR'
         clr.135 = 'RRRRRRRRRRR'
         clr.136 = 'RRRR'
         clr.137 = 'RRRRRR'
         clr.138 = 'RRR'
         clr.139 = 'RRRRR'
         clr.140 = 'RRRRRRRR'
         clr.141 = 'RRRR'
         clr.142 = 'RRRRR'
         clr.143 = 'RRRRR'
         clr.144 = 'RRRRR'
         clr.145 = 'RRR RRRRRRR'
      end
   when (usrhilng = 'GO') then
      do
         kw.0    = 25
         kw.1    = ' BREAK '
         kw.2    = ' CASE '
         kw.3    = ' CHAN '
         kw.4    = ' CONST '
         kw.5    = ' CONTINUE '
         kw.6    = ' DEFAULT '
         kw.7    = ' DEFER '
         kw.8    = ' ELSE '
         kw.9    = ' FALLTHROUGH '
         kw.10   = ' FOR '
         kw.11   = ' FUNC '
         kw.12   = ' GO '
         kw.13   = ' GOTO '
         kw.14   = ' IF '
         kw.15   = ' IMPORT '
         kw.16   = ' INTERFACE '
         kw.17   = ' MAP '
         kw.18   = ' PACKAGE '
         kw.19   = ' RANGE '
         kw.20   = ' RETURN '
         kw.21   = ' SELECT '
         kw.22   = ' STRUCT '
         kw.23   = ' SWITCH '
         kw.24   = ' TYPE '
         kw.25   = ' VAR '
         atr.1   = 'DDDDD'
         atr.2   = 'DDDD'
         atr.3   = 'DDDD'
         atr.4   = 'DDDDD'
         atr.5   = 'DDDDDDDD'
         atr.6   = 'DDDDDDD'
         atr.7   = 'DDDDD'
         atr.8   = 'DDDD'
         atr.9   = 'DDDDDDDDDDD'
         atr.10  = 'DDD'
         atr.11  = 'DDDD'
         atr.12  = 'DD'
         atr.13  = 'DDDD'
         atr.14  = 'DD'
         atr.15  = 'DDDDDD'
         atr.16  = 'DDDDDDDDD'
         atr.17  = 'DDD'
         atr.18  = 'DDDDDDD'
         atr.19  = 'DDDDD'
         atr.20  = 'DDDDDD'
         atr.21  = 'DDDDDD'
         atr.22  = 'DDDDDD'
         atr.23  = 'DDDDDD'
         atr.24  = 'DDDD'
         atr.25  = 'DDD'
         clr.1   = 'RRRRR'
         clr.2   = 'RRRR'
         clr.3   = 'RRRR'
         clr.4   = 'RRRRR'
         clr.5   = 'RRRRRRRR'
         clr.6   = 'RRRRRRR'
         clr.7   = 'RRRRR'
         clr.8   = 'RRRR'
         clr.9   = 'RRRRRRRRRRR'
         clr.10  = 'RRR'
         clr.11  = 'RRRR'
         clr.12  = 'RR'
         clr.13  = 'RRRR'
         clr.14  = 'RR'
         clr.15  = 'RRRRRR'
         clr.16  = 'RRRRRRRRR'
         clr.17  = 'RRR'
         clr.18  = 'RRRRRRR'
         clr.19  = 'RRRRR'
         clr.20  = 'RRRRRR'
         clr.21  = 'RRRRRR'
         clr.22  = 'RRRRRR'
         clr.23  = 'RRRRRR'
         clr.24  = 'RRRR'
         clr.25  = 'RRR'
      end
   when (usrhilng = 'JAVA') then
      do
         kw.0   = 53
         kw.1   = ' ABSTRACT '
         kw.2   = ' ASSERT '
         kw.3   = ' BOOLEAN '
         kw.4   = ' BREAK '
         kw.5   = ' BYTE '
         kw.6   = ' CASE '
         kw.7   = ' CATCH '
         kw.8   = ' CHAR '
         kw.9   = ' CLASS '
         kw.10  = ' CONST '
         kw.11  = ' CONTINUE '
         kw.12  = ' DEFAULT '
         kw.13  = ' DO '
         kw.14  = ' DOUBLE '
         kw.15  = ' ELSE '
         kw.16  = ' ENUM '
         kw.17  = ' EXTENDS '
         kw.18  = ' FALSE '
         kw.19  = ' FINAL '
         kw.20  = ' FINALLY '
         kw.21  = ' FLOAT '
         kw.22  = ' FOR '
         kw.23  = ' GOTO '
         kw.24  = ' IF '
         kw.25  = ' IMPLEMENTS '
         kw.26  = ' IMPORT '
         kw.27  = ' INSTANCEOF '
         kw.28  = ' INT '
         kw.29  = ' INTERFACE '
         kw.30  = ' LONG '
         kw.31  = ' NATIVE '
         kw.32  = ' NEW '
         kw.33  = ' NULL '
         kw.34  = ' PACKAGE '
         kw.35  = ' PRIVATE '
         kw.36  = ' PROTECTED '
         kw.37  = ' PUBLIC '
         kw.38  = ' RETURN '
         kw.39  = ' SHORT '
         kw.40  = ' STATIC '
         kw.41  = ' STRICTFP '
         kw.42  = ' SUPER '
         kw.43  = ' SWITCH '
         kw.44  = ' SYNCHRONIZED '
         kw.45  = ' THIS '
         kw.46  = ' THROW '
         kw.47  = ' THROWS '
         kw.48  = ' TRANSIENT '
         kw.49  = ' TRUE '
         kw.50  = ' TRY '
         kw.51  = ' VOID '
         kw.52  = ' VOLATILE '
         kw.53  = ' WHILE '
         atr.1  = 'DDDDDDDD'
         atr.2  = 'DDDDDD'
         atr.3  = 'DDDDDDD'
         atr.4  = 'DDDDD'
         atr.5  = 'DDDD'
         atr.6  = 'DDDD'
         atr.7  = 'DDDDD'
         atr.8  = 'DDDD'
         atr.9  = 'DDDDD'
         atr.10 = 'DDDDD'
         atr.11 = 'DDDDDDDD'
         atr.12 = 'DDDDDDD'
         atr.13 = 'DD'
         atr.14 = 'DDDDDD'
         atr.15 = 'DDDD'
         atr.16 = 'DDDD'
         atr.17 = 'DDDDDDD'
         atr.18 = 'DDDDD'
         atr.19 = 'DDDDD'
         atr.20 = 'DDDDDDD'
         atr.21 = 'DDDDD'
         atr.22 = 'DDD'
         atr.23 = 'DDDD'
         atr.24 = 'DD'
         atr.25 = 'DDDDDDDDDD'
         atr.26 = 'DDDDDD'
         atr.27 = 'DDDDDDDDDD'
         atr.28 = 'DDD'
         atr.29 = 'DDDDDDDDD'
         atr.30 = 'DDDD'
         atr.31 = 'DDDDDD'
         atr.32 = 'DDD'
         atr.33 = 'DDDD'
         atr.34 = 'DDDDDDD'
         atr.35 = 'DDDDDDD'
         atr.36 = 'DDDDDDDDD'
         atr.37 = 'DDDDDD'
         atr.38 = 'DDDDDD'
         atr.39 = 'DDDDD'
         atr.40 = 'DDDDDD'
         atr.41 = 'DDDDDDDD'
         atr.42 = 'DDDDD'
         atr.43 = 'DDDDDD'
         atr.44 = 'DDDDDDDDDDDD'
         atr.45 = 'DDDD'
         atr.46 = 'DDDDD'
         atr.47 = 'DDDDDD'
         atr.48 = 'DDDDDDDDD'
         atr.49 = 'DDDD'
         atr.50 = 'DDD'
         atr.51 = 'DDDD'
         atr.52 = 'DDDDDDDD'
         atr.53 = 'DDDDD'
         clr.1  = 'RRRRRRRR'
         clr.2  = 'RRRRRR'
         clr.3  = 'RRRRRRR'
         clr.4  = 'RRRRR'
         clr.5  = 'RRRR'
         clr.6  = 'RRRR'
         clr.7  = 'RRRRR'
         clr.8  = 'RRRR'
         clr.9  = 'RRRRR'
         clr.10 = 'RRRRR'
         clr.11 = 'RRRRRRRR'
         clr.12 = 'RRRRRRR'
         clr.13 = 'RR'
         clr.14 = 'RRRRRR'
         clr.15 = 'RRRR'
         clr.16 = 'RRRR'
         clr.17 = 'RRRRRRR'
         clr.18 = 'RRRRR'
         clr.19 = 'RRRRR'
         clr.20 = 'RRRRRRR'
         clr.21 = 'RRRRR'
         clr.22 = 'RRR'
         clr.23 = 'RRRR'
         clr.24 = 'RR'
         clr.25 = 'RRRRRRRRRR'
         clr.26 = 'RRRRRR'
         clr.27 = 'RRRRRRRRRR'
         clr.28 = 'RRR'
         clr.29 = 'RRRRRRRRR'
         clr.30 = 'RRRR'
         clr.31 = 'RRRRRR'
         clr.32 = 'RRR'
         clr.33 = 'RRRR'
         clr.34 = 'RRRRRRR'
         clr.35 = 'RRRRRRR'
         clr.36 = 'RRRRRRRRR'
         clr.37 = 'RRRRRR'
         clr.38 = 'RRRRRR'
         clr.39 = 'RRRRR'
         clr.40 = 'RRRRRR'
         clr.41 = 'RRRRRRRR'
         clr.42 = 'RRRRR'
         clr.43 = 'RRRRRR'
         clr.44 = 'RRRRRRRRRRRR'
         clr.45 = 'RRRR'
         clr.46 = 'RRRRR'
         clr.47 = 'RRRRRR'
         clr.48 = 'RRRRRRRRR'
         clr.49 = 'RRRR'
         clr.50 = 'RRR'
         clr.51 = 'RRRR'
         clr.52 = 'RRRRRRRR'
         clr.53 = 'RRRRR'
      end
   when (usrhilng = 'JSON') then
      kw.0 = 0
   when (usrhilng = 'PYTHON') then
      do
         kw.0   = 33
         kw.1   = ' AND '
         kw.2   = ' AS '
         kw.3   = ' ASSERT '
         kw.4   = ' BREAK '
         kw.5   = ' CLASS '
         kw.6   = ' CONTINUE '
         kw.7   = ' DEF '
         kw.8   = ' DEL '
         kw.9   = ' ELIF '
         kw.10  = ' ELSE '
         kw.11  = ' EXCEPT '
         kw.12  = ' FALSE '
         kw.13  = ' FINALLY '
         kw.14  = ' FOR '
         kw.15  = ' FROM '
         kw.16  = ' GLOBAL '
         kw.17  = ' IF '
         kw.18  = ' IMPORT '
         kw.19  = ' IN '
         kw.20  = ' IS '
         kw.21  = ' LAMBDA '
         kw.22  = ' NONE '
         kw.23  = ' NONLOCAL '
         kw.24  = ' NOT '
         kw.25  = ' OR '
         kw.26  = ' PASS '
         kw.27  = ' RAISE '
         kw.28  = ' RETURN '
         kw.29  = ' TRUE '
         kw.30  = ' TRY '
         kw.31  = ' WHILE '
         kw.32  = ' WITH '
         kw.33  = ' YIELD '
         atr.1  = 'DDD'
         atr.2  = 'DD'
         atr.3  = 'DDDDDD'
         atr.4  = 'DDDDD'
         atr.5  = 'DDDDD'
         atr.6  = 'DDDDDDDD'
         atr.7  = 'DDD'
         atr.8  = 'DDD'
         atr.9  = 'DDDD'
         atr.10 = 'DDDD'
         atr.11 = 'DDDDDD'
         atr.12 = 'DDDDD'
         atr.13 = 'DDDDDDD'
         atr.14 = 'DDD'
         atr.15 = 'DDDD'
         atr.16 = 'DDDDDD'
         atr.17 = 'DD'
         atr.18 = 'DDDDDD'
         atr.19 = 'DD'
         atr.20 = 'DD'
         atr.21 = 'DDDDDD'
         atr.22 = 'DDDD'
         atr.23 = 'DDDDDDDD'
         atr.24 = 'DDD'
         atr.25 = 'DD'
         atr.26 = 'DDDD'
         atr.27 = 'DDDDD'
         atr.28 = 'DDDDDD'
         atr.29 = 'DDDD'
         atr.30 = 'DDD'
         atr.31 = 'DDDDD'
         atr.32 = 'DDDD'
         atr.33 = 'DDDDD'
         clr.1  = 'RRR'
         clr.2  = 'RR'
         clr.3  = 'RRRRRR'
         clr.4  = 'RRRRR'
         clr.5  = 'RRRRR'
         clr.6  = 'RRRRRRRR'
         clr.7  = 'RRR'
         clr.8  = 'RRR'
         clr.9  = 'RRRR'
         clr.10 = 'RRRR'
         clr.11 = 'RRRRRR'
         clr.12 = 'RRRRR'
         clr.13 = 'RRRRRRR'
         clr.14 = 'RRR'
         clr.15 = 'RRRR'
         clr.16 = 'RRRRRR'
         clr.17 = 'RR'
         clr.18 = 'RRRRRR'
         clr.19 = 'RR'
         clr.20 = 'RR'
         clr.21 = 'RRRRRR'
         clr.22 = 'RRRR'
         clr.23 = 'RRRRRRRR'
         clr.24 = 'RRR'
         clr.25 = 'RR'
         clr.26 = 'RRRR'
         clr.27 = 'RRRRR'
         clr.28 = 'RRRRRR'
         clr.29 = 'RRRR'
         clr.30 = 'RRR'
         clr.31 = 'RRRRR'
         clr.32 = 'RRRR'
         clr.33 = 'RRRRR'
      end
   when (usrhilng = 'RUBY') then
      do
         kw.0   = 43
         kw.1   = ' __ENCODING__ '
         kw.2   = ' __LINE__ '
         kw.3   = ' __FILE__ '
         kw.4   = ' BEGIN '
         kw.5   = ' END '
         kw.6   = ' ALIAS '
         kw.7   = ' AND '
         kw.8   = ' BREAK '
         kw.9   = ' CASE '
         kw.10  = ' CLASS '
         kw.11  = ' DEF '
         kw.12  = ' DEFINED? '
         kw.13  = ' DO '
         kw.14  = ' ELSE '
         kw.15  = ' ELSIF '
         kw.16  = ' END '
         kw.17  = ' ENSURE '
         kw.18  = ' FALSE '
         kw.19  = ' FOR '
         kw.20  = ' IF '
         kw.21  = ' IN '
         kw.22  = ' MODULE '
         kw.23  = ' NEXT '
         kw.24  = ' NIL '
         kw.25  = ' NOT '
         kw.26  = ' OR '
         kw.27  = ' REDO '
         kw.28  = ' RESCUE '
         kw.29  = ' RETRY '
         kw.30  = ' RETURN '
         kw.31  = ' SELF '
         kw.32  = ' SUPER '
         kw.33  = ' THEN '
         kw.34  = ' TRUE '
         kw.35  = ' UNDEF '
         kw.36  = ' UNLESS '
         kw.37  = ' UNTIL '
         kw.38  = ' WHEN '
         kw.39  = ' WHILE '
         kw.40  = ' YIELD '
         kw.41  = ' PUTS '
         kw.42  = ' PRINT '
         kw.43  = ' __END__ '
         atr.1  = 'DDDDDDDDDDDD'
         atr.2  = 'DDDDDDDD'
         atr.3  = 'DDDDDDDD'
         atr.4  = 'DDDDD'
         atr.5  = 'DDD'
         atr.6  = 'DDDDD'
         atr.7  = 'DDD'
         atr.8  = 'DDDDD'
         atr.9  = 'DDDD'
         atr.10 = 'DDDDD'
         atr.11 = 'DDD'
         atr.12 = 'DDDDDDDD'
         atr.13 = 'DD'
         atr.14 = 'DDDD'
         atr.15 = 'DDDDD'
         atr.16 = 'DDD'
         atr.17 = 'DDDDDD'
         atr.18 = 'DDDDD'
         atr.19 = 'DDD'
         atr.20 = 'DD'
         atr.21 = 'DD'
         atr.22 = 'DDDDDD'
         atr.23 = 'DDDD'
         atr.24 = 'DDD'
         atr.25 = 'DDD'
         atr.26 = 'DD'
         atr.27 = 'DDDD'
         atr.28 = 'DDDDDD'
         atr.29 = 'DDDDD'
         atr.30 = 'DDDDDD'
         atr.31 = 'DDDD'
         atr.32 = 'DDDDD'
         atr.33 = 'DDDD'
         atr.34 = 'DDDD'
         atr.35 = 'DDDDD'
         atr.36 = 'DDDDDD'
         atr.37 = 'DDDDD'
         atr.39 = 'DDDD'
         atr.38 = 'DDDDD'
         atr.40 = 'DDDDD'
         atr.41 = 'DDDD'
         atr.42 = 'DDDDD'
         atr.43 = 'DDDDDDD'
         clr.1  = 'RRRRRRRRRRRR'
         clr.2  = 'RRRRRRRR'
         clr.3  = 'RRRRRRRR'
         clr.4  = 'RRRRR'
         clr.5  = 'RRR'
         clr.6  = 'RRRRR'
         clr.7  = 'RRR'
         clr.8  = 'RRRRR'
         clr.9  = 'RRRR'
         clr.10 = 'RRRRR'
         clr.11 = 'RRR'
         clr.12 = 'RRRRRRRR'
         clr.13 = 'RR'
         clr.14 = 'RRRR'
         clr.15 = 'RRRRR'
         clr.17 = 'RRR'
         clr.17 = 'RRRRRR'
         clr.18 = 'RRRRR'
         clr.19 = 'RRR'
         clr.20 = 'RR'
         clr.21 = 'RR'
         clr.22 = 'RRRRRR'
         clr.23 = 'RRRR'
         clr.24 = 'RRR'
         clr.25 = 'RRR'
         clr.26 = 'RR'
         clr.27 = 'RRRR'
         clr.28 = 'RRRRRR'
         clr.29 = 'RRRRR'
         clr.30 = 'RRRRRR'
         clr.31 = 'RRRR'
         clr.32 = 'RRRRR'
         clr.33 = 'RRRR'
         clr.34 = 'RRRR'
         clr.35 = 'RRRRR'
         clr.36 = 'RRRRRR'
         clr.37 = 'RRRRR'
         clr.38 = 'RRRR'
         clr.39 = 'RRRRR'
         clr.40 = 'RRRRR'
         clr.41 = 'RRRR'
         clr.42 = 'RRRRR'
         clr.43 = 'RRRRRRR'
      end
   when (usrhilng = 'SHELL') then
      do
         kw.0   = 33
         kw.1   = ' BREAK '
         kw.2   = ' CASE '
         kw.3   = ' CONTINUE '
         kw.4   = ' DO '
         kw.5   = ' DONE '
         kw.6   = ' ECHO '
         kw.7   = ' ELIF '
         kw.8   = ' ELSE '
         kw.9   = ' ESAC '
         kw.10  = ' EVAL '
         kw.11  = ' EXEC '
         kw.12  = ' EXIT '
         kw.13  = ' EXPORT '
         kw.14  = ' FI '
         kw.15  = ' FOR '
         kw.16  = ' FUNCTION '
         kw.17  = ' IF '
         kw.18  = ' IN '
         kw.19  = ' READ '
         kw.20  = ' READONLY '
         kw.21  = ' RETURN '
         kw.22  = ' SELECT '
         kw.23  = ' SET '
         kw.24  = ' SHIFT '
         kw.25  = ' THEN '
         kw.26  = ' TIME '
         kw.27  = ' TRAP '
         kw.28  = ' UILIMIT '
         kw.29  = ' UMASK '
         kw.30  = ' UNTIL '
         kw.31  = ' UNSET '
         kw.32  = ' WAIT '
         kw.33  = ' WHILE '
         atr.1  = 'DDDDD'
         atr.2  = 'DDDD'
         atr.3  = 'DDDDDDDD'
         atr.4  = 'DD'
         atr.5  = 'DDDD'
         atr.6  = 'DDDD'
         atr.7  = 'DDDD'
         atr.8  = 'DDDD'
         atr.9  = 'DDDD'
         atr.10 = 'DDDD'
         atr.11 = 'DDDD'
         atr.12 = 'DDDD'
         atr.13 = 'DDDDDD'
         atr.14 = 'DD'
         atr.15 = 'DDD'
         atr.16 = 'DDDDDDDD'
         atr.17 = 'DD'
         atr.18 = 'DD'
         atr.19 = 'DDDD'
         atr.20 = 'DDDDDDDD'
         atr.21 = 'DDDDDD'
         atr.22 = 'DDDDDD'
         atr.23 = 'DDD'
         atr.24 = 'DDDDD'
         atr.25 = 'DDDD'
         atr.26 = 'DDDD'
         atr.27 = 'DDDD'
         atr.28 = 'DDDDDDD'
         atr.29 = 'DDDDD'
         atr.30 = 'DDDDD'
         atr.31 = 'DDDDD'
         atr.32 = 'DDDD'
         atr.33 = 'DDDDD'
         clr.1  = 'RRRRR'
         clr.2  = 'RRRR'
         clr.3  = 'RRRRRRRR'
         clr.4  = 'RR'
         clr.5  = 'RRRR'
         clr.6  = 'RRRR'
         clr.7  = 'RRRR'
         clr.8  = 'RRRR'
         clr.9  = 'RRRR'
         clr.10 = 'RRRR'
         clr.11 = 'RRRR'
         clr.12 = 'RRRR'
         clr.13 = 'RRRRRR'
         clr.14 = 'RR'
         clr.15 = 'RRR'
         clr.16 = 'RRRRRRRR'
         clr.17 = 'RR'
         clr.18 = 'RR'
         clr.19 = 'RRRR'
         clr.20 = 'RRRRRRRR'
         clr.21 = 'RRRRRR'
         clr.22 = 'RRRRRR'
         clr.23 = 'RRR'
         clr.24 = 'RRRRR'
         clr.25 = 'RRRR'
         clr.26 = 'RRRR'
         clr.27 = 'RRRR'
         clr.28 = 'RRRRRRR'
         clr.29 = 'RRRRR'
         clr.30 = 'RRRRR'
         clr.31 = 'RRRRR'
         clr.32 = 'RRRR'
         clr.33 = 'RRRRR'
      end
   when (usrhilng = 'SQL') then
      do
         kw.0    = 295
         kw.1    = ' ADD '
         kw.2    = ' AFTER '
         kw.3    = ' ALL '
         kw.4    = ' ALLOCATE '
         kw.5    = ' ALLOW '
         kw.6    = ' ALTERAND '
         kw.7    = ' ANY '
         kw.8    = ' AS '
         kw.9    = ' ARRAY1 '
         kw.10   = ' ARRAY_EXISTS1 '
         kw.11   = ' ASENSITIVE '
         kw.12   = ' ASSOCIATE '
         kw.13   = ' ASUTIME '
         kw.14   = ' AT '
         kw.15   = ' AUDIT '
         kw.16   = ' AUX '
         kw.17   = ' AUXILIARY '
         kw.18   = ' BEFORE '
         kw.19   = ' BEGIN '
         kw.20   = ' BETWEEN '
         kw.21   = ' BUFFERPOOL '
         kw.22   = ' BY '
         kw.23   = ' CALL '
         kw.24   = ' CAPTURE '
         kw.25   = ' CASCADED '
         kw.26   = ' CASER '
         kw.27   = ' CAST '
         kw.28   = ' CCSIDATE '
         kw.29   = ' CHARW '
         kw.30   = ' CHARACTER '
         kw.31   = ' CHECK '
         kw.32   = ' CLONE '
         kw.33   = ' CLOSEY1 '
         kw.34   = ' CLUSTEREXISTS1 '
         kw.35   = ' COLLECTION '
         kw.36   = ' COLLIDATE '
         kw.37   = ' COLUMNE '
         kw.38   = ' COMMENT '
         kw.39   = ' COMMIT '
         kw.40   = ' CONCAT '
         kw.41   = ' CONDITION '
         kw.42   = ' CONNECT '
         kw.43   = ' CONNECTION '
         kw.44   = ' CONSTRAINT '
         kw.45   = ' CONTAINS '
         kw.46   = ' CONTENTOOL '
         kw.47   = ' CONTINUE '
         kw.48   = ' CREATE '
         kw.49   = ' CUBE '
         kw.50   = ' CURRENT '
         kw.51   = ' CURRENT_DATE '
         kw.52   = ' CURRENT_LC_CTYPE '
         kw.53   = ' CURRENT_PATH '
         kw.54   = ' CURRENT_SCHEMA '
         kw.55   = ' CURRENT_TIME '
         kw.56   = ' CURRENT_TIMESTAMP '
         kw.57   = ' CURRVAL '
         kw.58   = ' CURSOR '
         kw.59   = ' DATA '
         kw.60   = ' DATABASE '
         kw.61   = ' DAY '
         kw.62   = ' DAYS '
         kw.63   = ' DBINFO '
         kw.64   = ' DECLARE '
         kw.65   = ' DEFAULT '
         kw.66   = ' DELETE '
         kw.67   = ' DESCRIPTOR '
         kw.68   = ' DETERMINISTIC '
         kw.69   = ' DISABLE '
         kw.70   = ' DISALLOW '
         kw.71   = ' DISTINCT '
         kw.72   = ' DO '
         kw.73   = ' DOCUMENT '
         kw.74   = ' DOUBLE '
         kw.75   = ' DROP '
         kw.76   = ' DSSIZE '
         kw.77   = ' DYNAMIC '
         kw.78   = ' EDITPROC '
         kw.79   = ' ELSE '
         kw.80   = ' ELSEIF '
         kw.81   = ' ENCODING '
         kw.82   = ' ENCRYPTION '
         kw.83   = ' END '
         kw.84   = ' ENDING '
         kw.85   = ' END-EXEC2 '
         kw.86   = ' ERASE '
         kw.87   = ' ESCAPE '
         kw.88   = ' EXCEPT '
         kw.89   = ' EXCEPTION '
         kw.90   = ' EXECUTE '
         kw.91   = ' EXISTS '
         kw.92   = ' EXIT '
         kw.93   = ' EXPLAIN '
         kw.94   = ' EXTERNAL '
         kw.95   = ' FENCED '
         kw.96   = ' FETCH '
         kw.97   = ' FIELDPROC '
         kw.98   = ' FINAL '
         kw.99   = ' FIRST '
         kw.100  = ' FOR '
         kw.101  = ' FREE '
         kw.102  = ' FROM '
         kw.103  = ' FULL '
         kw.104  = ' FUNCTION '
         kw.105  = ' GENERATED '
         kw.106  = ' GET '
         kw.107  = ' GLOBAL '
         kw.108  = ' GO '
         kw.109  = ' GOTO '
         kw.110  = ' GRANT '
         kw.111  = ' GROUP '
         kw.112  = ' HANDLER '
         kw.113  = ' HAVING '
         kw.114  = ' HOLD '
         kw.115  = ' HOUR '
         kw.116  = ' HOURS '
         kw.117  = ' IF '
         kw.118  = ' IMMEDIATE '
         kw.119  = ' IN '
         kw.120  = ' INCLUSIVE '
         kw.121  = ' INDEX '
         kw.122  = ' INHERIT '
         kw.123  = ' INNER '
         kw.124  = ' INOUT '
         kw.125  = ' INSENSITIVE '
         kw.126  = ' INSERT '
         kw.127  = ' INTERSECT '
         kw.128  = ' INTO '
         kw.129  = ' IS '
         kw.130  = ' ISOBID '
         kw.131  = ' ITERATE '
         kw.132  = ' JAR '
         kw.133  = ' JOIN '
         kw.134  = ' KEEP '
         kw.135  = ' KEY '
         kw.136  = ' LABEL '
         kw.137  = ' LANGUAGE '
         kw.138  = ' LAST '
         kw.139  = ' LC_CTYPE '
         kw.140  = ' LEAVE '
         kw.141  = ' LEFT '
         kw.142  = ' LIKE '
         kw.143  = ' LOCAL '
         kw.144  = ' LOCALE '
         kw.145  = ' LOCATOR '
         kw.146  = ' LOCATORS '
         kw.147  = ' LOCK '
         kw.148  = ' LOCKMAX '
         kw.149  = ' LOCKSIZE '
         kw.150  = ' LONG '
         kw.151  = ' LOOP '
         kw.152  = ' MAINTAINED '
         kw.153  = ' MATERIALIZED '
         kw.154  = ' MICROSECOND '
         kw.155  = ' MICROSECONDS '
         kw.156  = ' MINUTEMINUTES '
         kw.157  = ' MODIFIES '
         kw.158  = ' MONTH '
         kw.159  = ' MONTHS '
         kw.160  = ' NEXT '
         kw.161  = ' NEXTVAL '
         kw.162  = ' NO '
         kw.163  = ' NONE '
         kw.164  = ' NOT '
         kw.165  = ' NULL '
         kw.166  = ' NULLS '
         kw.167  = ' NUMPARTS '
         kw.168  = ' OBID '
         kw.169  = ' OF '
         kw.170  = ' OLD '
         kw.171  = ' ON '
         kw.172  = ' OPEN '
         kw.173  = ' OPTIMIZATION '
         kw.174  = ' OPTIMIZE '
         kw.175  = ' OR '
         kw.176  = ' ORDER '
         kw.177  = ' ORGANIZATION '
         kw.178  = ' OUT '
         kw.179  = ' OUTER '
         kw.180  = ' PACKAGE '
         kw.181  = ' PARAMETER '
         kw.182  = ' PART '
         kw.183  = ' PADDED '
         kw.184  = ' PARTITION '
         kw.185  = ' PARTITIONED '
         kw.186  = ' PARTITIONING '
         kw.187  = ' PATH '
         kw.188  = ' PIECESIZE '
         kw.189  = ' PERIOD '
         kw.190  = ' PLAN '
         kw.191  = ' PRECISION '
         kw.192  = ' PREPARE '
         kw.193  = ' PREVVAL '
         kw.194  = ' PRIOR '
         kw.195  = ' PRIQTY '
         kw.196  = ' PRIVILEGES '
         kw.197  = ' PROCEDURE '
         kw.198  = ' PROGRAM '
         kw.199  = ' PSID '
         kw.200  = ' PUBLIC '
         kw.201  = ' QUERY '
         kw.202  = ' QUERYNO '
         kw.203  = ' READS '
         kw.204  = ' REFERENCES '
         kw.205  = ' REFRESH '
         kw.206  = ' RESIGNAL '
         kw.207  = ' RELEASE '
         kw.208  = ' RENAME '
         kw.209  = ' REPEAT '
         kw.210  = ' RESTRICT '
         kw.211  = ' RESULT '
         kw.212  = ' RESULT_SET_LOCATOR '
         kw.213  = ' RETURN '
         kw.214  = ' RETURNS '
         kw.215  = ' REVOKE '
         kw.216  = ' RIGHT '
         kw.217  = ' ROLE '
         kw.218  = ' ROLLBACK '
         kw.219  = ' ROLLUP1 '
         kw.220  = ' ROUND_CEILING '
         kw.221  = ' ROUND_DOWN '
         kw.222  = ' ROUND_FLOOR '
         kw.223  = ' ROUND_HALF_DOWN '
         kw.224  = ' ROUND_HALF_EVEN '
         kw.225  = ' ROUND_HALF_UP '
         kw.226  = ' ROUND_UP '
         kw.227  = ' ROW '
         kw.228  = ' ROWSET '
         kw.229  = ' RUN '
         kw.230  = ' SAVEPOINT '
         kw.231  = ' SCHEMA '
         kw.232  = ' SCRATCHPAD '
         kw.233  = ' SECOND '
         kw.234  = ' SECONDS '
         kw.235  = ' SECQTY '
         kw.236  = ' SECURITY '
         kw.237  = ' SEQUENCE '
         kw.238  = ' SELECT '
         kw.239  = ' SENSITIVE '
         kw.240  = ' SESSION_USER '
         kw.241  = ' SET '
         kw.242  = ' SIGNAL '
         kw.243  = ' SIMPLE '
         kw.244  = ' SOME '
         kw.245  = ' SOURCE '
         kw.246  = ' SPECIFIC '
         kw.247  = ' STANDARD '
         kw.248  = ' STATIC '
         kw.249  = ' STATEMENT '
         kw.250  = ' STAY '
         kw.251  = ' STOGROUP '
         kw.252  = ' STORES '
         kw.253  = ' STYLE '
         kw.254  = ' SUMMARY '
         kw.255  = ' SYNONYM '
         kw.256  = ' SYSDATE '
         kw.257  = ' SYSTEM '
         kw.258  = ' SYSTIMESTAMP '
         kw.259  = ' TABLE '
         kw.260  = ' TABLESPACE '
         kw.261  = ' THEN '
         kw.262  = ' TO '
         kw.263  = ' TRANSFER OWNERSHIP '
         kw.264  = ' TRIGGER '
         kw.265  = ' TRUNCATE '
         kw.266  = ' TYPE '
         kw.267  = ' UNDO '
         kw.268  = ' UNION '
         kw.269  = ' UNIQUE '
         kw.270  = ' UNTIL '
         kw.271  = ' UPDATE '
         kw.272  = ' USER '
         kw.273  = ' USING '
         kw.274  = ' VALIDPROC '
         kw.275  = ' VALUE '
         kw.276  = ' VALUES '
         kw.277  = ' VARIABLE '
         kw.278  = ' VARIANT '
         kw.279  = ' VCAT '
         kw.280  = ' VERSIONING1 '
         kw.281  = ' VIEW '
         kw.282  = ' VOLATILE '
         kw.283  = ' VOLUMES '
         kw.284  = ' WHEN '
         kw.285  = ' WHENEVER '
         kw.286  = ' WHERE '
         kw.287  = ' WHILE '
         kw.288  = ' WITH '
         kw.289  = ' WLM '
         kw.290  = ' XMLEXISTS '
         kw.291  = ' XMLNAMESPACES '
         kw.292  = ' XMLCAST '
         kw.293  = ' YEAR '
         kw.294  = ' YEARS '
         kw.295  = ' ZONE '
         atr.1   = 'DDD'
         atr.2   = 'DDDDD'
         atr.3   = 'DDD'
         atr.4   = 'DDDDDDDD'
         atr.5   = 'DDDDD'
         atr.6   = 'DDDDDDDD'
         atr.7   = 'DDD'
         atr.8   = 'DD'
         atr.9   = 'DDDDDD'
         atr.10  = 'DDDDDDDDDDDDD'
         atr.11  = 'DDDDDDDDDD'
         atr.12  = 'DDDDDDDDD'
         atr.13  = 'DDDDDDD'
         atr.14  = 'DD'
         atr.15  = 'DDDDD'
         atr.16  = 'DDD'
         atr.17  = 'DDDDDDDDD'
         atr.18  = 'DDDDDD'
         atr.19  = 'DDDDD'
         atr.20  = 'DDDDDDD'
         atr.21  = 'DDDDDDDDDD'
         atr.22  = 'DD'
         atr.23  = 'DDDD'
         atr.24  = 'DDDDDDD'
         atr.25  = 'DDDDDDDD'
         atr.26  = 'DDDDD'
         atr.27  = 'DDDD'
         atr.28  = 'DDDDDDDD'
         atr.29  = 'DDDDD'
         atr.30  = 'DDDDDDDDD'
         atr.31  = 'DDDDD'
         atr.32  = 'DDDDD'
         atr.33  = 'DDDDDDD'
         atr.34  = 'DDDDDDDDDDDDDD'
         atr.35  = 'DDDDDDDDDD'
         atr.36  = 'DDDDDDDDD'
         atr.37  = 'DDDDDDD'
         atr.38  = 'DDDDDDD'
         atr.39  = 'DDDDDD'
         atr.40  = 'DDDDDD'
         atr.41  = 'DDDDDDDDD'
         atr.42  = 'DDDDDDD'
         atr.43  = 'DDDDDDDDDD'
         atr.44  = 'DDDDDDDDDD'
         atr.45  = 'DDDDDDDD'
         atr.46  = 'DDDDDDDDDD'
         atr.47  = 'DDDDDDDD'
         atr.48  = 'DDDDDD'
         atr.49  = 'DDDD'
         atr.50  = 'DDDDDDD'
         atr.51  = 'DDDDDDDDDDDD'
         atr.52  = 'DDDDDDDDDDDDDDDD'
         atr.53  = 'DDDDDDDDDDDD'
         atr.54  = 'DDDDDDDDDDDDDD'
         atr.55  = 'DDDDDDDDDDDD'
         atr.56  = 'DDDDDDDDDDDDDDDDD'
         atr.57  = 'DDDDDDD'
         atr.58  = 'DDDDDD'
         atr.59  = 'DDDD'
         atr.60  = 'DDDDDDDD'
         atr.61  = 'DDD'
         atr.62  = 'DDDD'
         atr.63  = 'DDDDDD'
         atr.64  = 'DDDDDDD'
         atr.65  = 'DDDDDDD'
         atr.66  = 'DDDDDD'
         atr.67  = 'DDDDDDDDDD'
         atr.68  = 'DDDDDDDDDDDDD'
         atr.69  = 'DDDDDDD'
         atr.70  = 'DDDDDDDD'
         atr.71  = 'DDDDDDDD'
         atr.72  = 'DD'
         atr.73  = 'DDDDDDDD'
         atr.74  = 'DDDDDD'
         atr.75  = 'DDDD'
         atr.76  = 'DDDDDD'
         atr.77  = 'DDDDDDD'
         atr.78  = 'DDDDDDDD'
         atr.79  = 'DDDD'
         atr.80  = 'DDDDDD'
         atr.81  = 'DDDDDDDD'
         atr.82  = 'DDDDDDDDDD'
         atr.83  = 'DDD'
         atr.84  = 'DDDDDD'
         atr.85  = 'DDDDDDDDD'
         atr.86  = 'DDDDD'
         atr.87  = 'DDDDDD'
         atr.88  = 'DDDDDD'
         atr.89  = 'DDDDDDDDD'
         atr.90  = 'DDDDDDD'
         atr.91  = 'DDDDDD'
         atr.92  = 'DDDD'
         atr.93  = 'DDDDDDD'
         atr.94  = 'DDDDDDDD'
         atr.95  = 'DDDDDD'
         atr.96  = 'DDDDD'
         atr.97  = 'DDDDDDDDD'
         atr.98  = 'DDDDD'
         atr.99  = 'DDDDD'
         atr.100 = 'DDD'
         atr.101 = 'DDDD'
         atr.102 = 'DDDD'
         atr.103 = 'DDDD'
         atr.104 = 'DDDDDDDD'
         atr.105 = 'DDDDDDDDD'
         atr.106 = 'DDD'
         atr.107 = 'DDDDDD'
         atr.108 = 'DD'
         atr.109 = 'DDDD'
         atr.110 = 'DDDDD'
         atr.111 = 'DDDDD'
         atr.112 = 'DDDDDDD'
         atr.113 = 'DDDDDD'
         atr.114 = 'DDDD'
         atr.115 = 'DDDD'
         atr.116 = 'DDDDD'
         atr.117 = 'DD'
         atr.118 = 'DDDDDDDDD'
         atr.119 = 'DD'
         atr.120 = 'DDDDDDDDD'
         atr.121 = 'DDDDD'
         atr.122 = 'DDDDDDD'
         atr.123 = 'DDDDD'
         atr.124 = 'DDDDD'
         atr.125 = 'DDDDDDDDDDD'
         atr.126 = 'DDDDDD'
         atr.127 = 'DDDDDDDDD'
         atr.128 = 'DDDD'
         atr.129 = 'DD'
         atr.130 = 'DDDDDD'
         atr.131 = 'DDDDDDD'
         atr.132 = 'DDD'
         atr.133 = 'DDDD'
         atr.134 = 'DDDD'
         atr.135 = 'DDD'
         atr.136 = 'DDDDD'
         atr.137 = 'DDDDDDDD'
         atr.138 = 'DDDD'
         atr.139 = 'DDDDDDDD'
         atr.140 = 'DDDDD'
         atr.141 = 'DDDD'
         atr.142 = 'DDDD'
         atr.143 = 'DDDDD'
         atr.144 = 'DDDDDD'
         atr.145 = 'DDDDDDD'
         atr.146 = 'DDDDDDDD'
         atr.147 = 'DDDD'
         atr.148 = 'DDDDDDD'
         atr.149 = 'DDDDDDDD'
         atr.150 = 'DDDD'
         atr.151 = 'DDDD'
         atr.152 = 'DDDDDDDDDD'
         atr.153 = 'DDDDDDDDDDDD'
         atr.154 = 'DDDDDDDDDDD'
         atr.155 = 'DDDDDDDDDDDD'
         atr.156 = 'DDDDDDDDDDDDD'
         atr.157 = 'DDDDDDDD'
         atr.158 = 'DDDDD'
         atr.159 = 'DDDDDD'
         atr.160 = 'DDDD'
         atr.161 = 'DDDDDDD'
         atr.162 = 'DD'
         atr.163 = 'DDDD'
         atr.164 = 'DDD'
         atr.165 = 'DDDD'
         atr.166 = 'DDDDD'
         atr.167 = 'DDDDDDDD'
         atr.168 = 'DDDD'
         atr.169 = 'DD'
         atr.170 = 'DDD'
         atr.171 = 'DD'
         atr.172 = 'DDDD'
         atr.173 = 'DDDDDDDDDDDD'
         atr.174 = 'DDDDDDDD'
         atr.175 = 'DD'
         atr.176 = 'DDDDD'
         atr.177 = 'DDDDDDDDDDDD'
         atr.178 = 'DDD'
         atr.179 = 'DDDDD'
         atr.180 = 'DDDDDDD'
         atr.181 = 'DDDDDDDDD'
         atr.182 = 'DDDD'
         atr.183 = 'DDDDDD'
         atr.184 = 'DDDDDDDDD'
         atr.185 = 'DDDDDDDDDDD'
         atr.186 = 'DDDDDDDDDDDD'
         atr.187 = 'DDDD'
         atr.188 = 'DDDDDDDDD'
         atr.189 = 'DDDDDD'
         atr.190 = 'DDDD'
         atr.191 = 'DDDDDDDDD'
         atr.192 = 'DDDDDDD'
         atr.193 = 'DDDDDDD'
         atr.194 = 'DDDDD'
         atr.195 = 'DDDDDD'
         atr.196 = 'DDDDDDDDDD'
         atr.197 = 'DDDDDDDDD'
         atr.198 = 'DDDDDDD'
         atr.199 = 'DDDD'
         atr.200 = 'DDDDDD'
         atr.201 = 'DDDDD'
         atr.202 = 'DDDDDDD'
         atr.203 = 'DDDDD'
         atr.204 = 'DDDDDDDDDD'
         atr.205 = 'DDDDDDD'
         atr.206 = 'DDDDDDDD'
         atr.207 = 'DDDDDDD'
         atr.208 = 'DDDDDD'
         atr.209 = 'DDDDDD'
         atr.210 = 'DDDDDDDD'
         atr.211 = 'DDDDDD'
         atr.212 = 'DDDDDDDDDDDDDDDDDD'
         atr.213 = 'DDDDDD'
         atr.214 = 'DDDDDDD'
         atr.215 = 'DDDDDD'
         atr.216 = 'DDDDD'
         atr.217 = 'DDDD'
         atr.218 = 'DDDDDDDD'
         atr.219 = 'DDDDDDD'
         atr.220 = 'DDDDDDDDDDDDD'
         atr.221 = 'DDDDDDDDDD'
         atr.222 = 'DDDDDDDDDDD'
         atr.223 = 'DDDDDDDDDDDDDDD'
         atr.224 = 'DDDDDDDDDDDDDDD'
         atr.225 = 'DDDDDDDDDDDDD'
         atr.226 = 'DDDDDDDD'
         atr.227 = 'DDD'
         atr.228 = 'DDDDDD'
         atr.229 = 'DDD'
         atr.230 = 'DDDDDDDDD'
         atr.231 = 'DDDDDD'
         atr.232 = 'DDDDDDDDDD'
         atr.233 = 'DDDDDD'
         atr.234 = 'DDDDDDD'
         atr.235 = 'DDDDDD'
         atr.236 = 'DDDDDDDD'
         atr.237 = 'DDDDDDDD'
         atr.238 = 'DDDDDD'
         atr.239 = 'DDDDDDDDD'
         atr.240 = 'DDDDDDDDDDDD'
         atr.241 = 'DDD'
         atr.242 = 'DDDDDD'
         atr.243 = 'DDDDDD'
         atr.244 = 'DDDD'
         atr.245 = 'DDDDDD'
         atr.246 = 'DDDDDDDD'
         atr.247 = 'DDDDDDDD'
         atr.248 = 'DDDDDD'
         atr.249 = 'DDDDDDDDD'
         atr.250 = 'DDDD'
         atr.251 = 'DDDDDDDD'
         atr.252 = 'DDDDDD'
         atr.253 = 'DDDDD'
         atr.254 = 'DDDDDDD'
         atr.255 = 'DDDDDDD'
         atr.256 = 'DDDDDDD'
         atr.257 = 'DDDDDD'
         atr.258 = 'DDDDDDDDDDDD'
         atr.259 = 'DDDDD'
         atr.260 = 'DDDDDDDDDD'
         atr.261 = 'DDDD'
         atr.262 = 'DD'
         atr.263 = 'DDDDDDDD DDDDDDDDD'
         atr.264 = 'DDDDDDD'
         atr.265 = 'DDDDDDDD'
         atr.266 = 'DDDD'
         atr.267 = 'DDDD'
         atr.268 = 'DDDDD'
         atr.269 = 'DDDDDD'
         atr.270 = 'DDDDD'
         atr.271 = 'DDDDDD'
         atr.272 = 'DDDD'
         atr.273 = 'DDDDD'
         atr.274 = 'DDDDDDDDD'
         atr.275 = 'DDDDD'
         atr.276 = 'DDDDDD'
         atr.277 = 'DDDDDDDD'
         atr.278 = 'DDDDDDD'
         atr.279 = 'DDDD'
         atr.280 = 'DDDDDDDDDDD'
         atr.281 = 'DDDD'
         atr.282 = 'DDDDDDDD'
         atr.283 = 'DDDDDDD'
         atr.284 = 'DDDD'
         atr.285 = 'DDDDDDDD'
         atr.286 = 'DDDDD'
         atr.287 = 'DDDDD'
         atr.288 = 'DDDD'
         atr.289 = 'DDD'
         atr.290 = 'DDDDDDDDD'
         atr.291 = 'DDDDDDDDDDDDD'
         atr.292 = 'DDDDDDD'
         atr.293 = 'DDDD'
         atr.294 = 'DDDDD'
         atr.295 = 'DDDD'
         clr.1   = 'RRR'
         clr.2   = 'RRRRR'
         clr.3   = 'RRR'
         clr.4   = 'RRRRRRRR'
         clr.5   = 'RRRRR'
         clr.6   = 'RRRRRRRR'
         clr.7   = 'RRR'
         clr.8   = 'RR'
         clr.9   = 'RRRRRR'
         clr.10  = 'RRRRRRRRRRRRR'
         clr.11  = 'RRRRRRRRRR'
         clr.12  = 'RRRRRRRRR'
         clr.13  = 'RRRRRRR'
         clr.14  = 'RR'
         clr.15  = 'RRRRR'
         clr.16  = 'RRR'
         clr.17  = 'RRRRRRRRR'
         clr.18  = 'RRRRRR'
         clr.19  = 'RRRRR'
         clr.20  = 'RRRRRRR'
         clr.21  = 'RRRRRRRRRR'
         clr.22  = 'RR'
         clr.23  = 'RRRR'
         clr.24  = 'RRRRRRR'
         clr.25  = 'RRRRRRRR'
         clr.26  = 'RRRRR'
         clr.27  = 'RRRR'
         clr.28  = 'RRRRRRRR'
         clr.29  = 'RRRRR'
         clr.30  = 'RRRRRRRRR'
         clr.31  = 'RRRRR'
         clr.32  = 'RRRRR'
         clr.33  = 'RRRRRRR'
         clr.34  = 'RRRRRRRRRRRRRR'
         clr.35  = 'RRRRRRRRRR'
         clr.36  = 'RRRRRRRRR'
         clr.37  = 'RRRRRRR'
         clr.38  = 'RRRRRRR'
         clr.39  = 'RRRRRR'
         clr.40  = 'RRRRRR'
         clr.41  = 'RRRRRRRRR'
         clr.42  = 'RRRRRRR'
         clr.43  = 'RRRRRRRRRR'
         clr.44  = 'RRRRRRRRRR'
         clr.45  = 'RRRRRRRR'
         clr.46  = 'RRRRRRRRRR'
         clr.47  = 'RRRRRRRR'
         clr.48  = 'RRRRRR'
         clr.49  = 'RRRR'
         clr.50  = 'RRRRRRR'
         clr.51  = 'RRRRRRRRRRRR'
         clr.52  = 'RRRRRRRRRRRRRRRR'
         clr.53  = 'RRRRRRRRRRRR'
         clr.54  = 'RRRRRRRRRRRRRR'
         clr.55  = 'RRRRRRRRRRRR'
         clr.56  = 'RRRRRRRRRRRRRRRRR'
         clr.57  = 'RRRRRRR'
         clr.58  = 'RRRRRR'
         clr.59  = 'RRRR'
         clr.60  = 'RRRRRRRR'
         clr.61  = 'RRR'
         clr.62  = 'RRRR'
         clr.63  = 'RRRRRR'
         clr.64  = 'RRRRRRR'
         clr.65  = 'RRRRRRR'
         clr.66  = 'RRRRRR'
         clr.67  = 'RRRRRRRRRR'
         clr.68  = 'RRRRRRRRRRRRR'
         clr.69  = 'RRRRRRR'
         clr.70  = 'RRRRRRRR'
         clr.71  = 'RRRRRRRR'
         clr.72  = 'RR'
         clr.73  = 'RRRRRRRR'
         clr.74  = 'RRRRRR'
         clr.75  = 'RRRR'
         clr.76  = 'RRRRRR'
         clr.77  = 'RRRRRRR'
         clr.78  = 'RRRRRRRR'
         clr.79  = 'RRRR'
         clr.80  = 'RRRRRR'
         clr.81  = 'RRRRRRRR'
         clr.82  = 'RRRRRRRRRR'
         clr.83  = 'RRR'
         clr.84  = 'RRRRRR'
         clr.85  = 'RRRRRRRRR'
         clr.86  = 'RRRRR'
         clr.87  = 'RRRRRR'
         clr.88  = 'RRRRRR'
         clr.89  = 'RRRRRRRRR'
         clr.90  = 'RRRRRRR'
         clr.91  = 'RRRRRR'
         clr.92  = 'RRRR'
         clr.93  = 'RRRRRRR'
         clr.94  = 'RRRRRRRR'
         clr.95  = 'RRRRRR'
         clr.96  = 'RRRRR'
         clr.97  = 'RRRRRRRRR'
         clr.98  = 'RRRRR'
         clr.99  = 'RRRRR'
         clr.100 = 'RRR'
         clr.101 = 'RRRR'
         clr.102 = 'RRRR'
         clr.103 = 'RRRR'
         clr.104 = 'RRRRRRRR'
         clr.105 = 'RRRRRRRRR'
         clr.106 = 'RRR'
         clr.107 = 'RRRRRR'
         clr.108 = 'RR'
         clr.109 = 'RRRR'
         clr.110 = 'RRRRR'
         clr.111 = 'RRRRR'
         clr.112 = 'RRRRRRR'
         clr.113 = 'RRRRRR'
         clr.114 = 'RRRR'
         clr.115 = 'RRRR'
         clr.116 = 'RRRRR'
         clr.117 = 'RR'
         clr.118 = 'RRRRRRRRR'
         clr.119 = 'RR'
         clr.120 = 'RRRRRRRRR'
         clr.121 = 'RRRRR'
         clr.122 = 'RRRRRRR'
         clr.123 = 'RRRRR'
         clr.124 = 'RRRRR'
         clr.125 = 'RRRRRRRRRRR'
         clr.126 = 'RRRRRR'
         clr.127 = 'RRRRRRRRR'
         clr.128 = 'RRRR'
         clr.129 = 'RR'
         clr.130 = 'RRRRRR'
         clr.131 = 'RRRRRRR'
         clr.132 = 'RRR'
         clr.133 = 'RRRR'
         clr.134 = 'RRRR'
         clr.135 = 'RRR'
         clr.136 = 'RRRRR'
         clr.137 = 'RRRRRRRR'
         clr.138 = 'RRRR'
         clr.139 = 'RRRRRRRR'
         clr.140 = 'RRRRR'
         clr.141 = 'RRRR'
         clr.142 = 'RRRR'
         clr.143 = 'RRRRR'
         clr.144 = 'RRRRRR'
         clr.145 = 'RRRRRRR'
         clr.146 = 'RRRRRRRR'
         clr.147 = 'RRRR'
         clr.148 = 'RRRRRRR'
         clr.149 = 'RRRRRRRR'
         clr.150 = 'RRRR'
         clr.151 = 'RRRR'
         clr.152 = 'RRRRRRRRRR'
         clr.153 = 'RRRRRRRRRRRR'
         clr.154 = 'RRRRRRRRRRR'
         clr.155 = 'RRRRRRRRRRRR'
         clr.156 = 'RRRRRRRRRRRRR'
         clr.157 = 'RRRRRRRR'
         clr.158 = 'RRRRR'
         clr.159 = 'RRRRRR'
         clr.160 = 'RRRR'
         clr.161 = 'RRRRRRR'
         clr.162 = 'RR'
         clr.163 = 'RRRR'
         clr.164 = 'RRR'
         clr.165 = 'RRRR'
         clr.166 = 'RRRRR'
         clr.167 = 'RRRRRRRR'
         clr.168 = 'RRRR'
         clr.169 = 'RR'
         clr.170 = 'RRR'
         clr.171 = 'RR'
         clr.172 = 'RRRR'
         clr.173 = 'RRRRRRRRRRRR'
         clr.174 = 'RRRRRRRR'
         clr.175 = 'RR'
         clr.176 = 'RRRRR'
         clr.177 = 'RRRRRRRRRRRR'
         clr.178 = 'RRR'
         clr.179 = 'RRRRR'
         clr.180 = 'RRRRRRR'
         clr.181 = 'RRRRRRRRR'
         clr.182 = 'RRRR'
         clr.183 = 'RRRRRR'
         clr.184 = 'RRRRRRRRR'
         clr.185 = 'RRRRRRRRRRR'
         clr.186 = 'RRRRRRRRRRRR'
         clr.187 = 'RRRR'
         clr.188 = 'RRRRRRRRR'
         clr.189 = 'RRRRRR'
         clr.190 = 'RRRR'
         clr.191 = 'RRRRRRRRR'
         clr.192 = 'RRRRRRR'
         clr.193 = 'RRRRRRR'
         clr.194 = 'RRRRR'
         clr.195 = 'RRRRRR'
         clr.196 = 'RRRRRRRRRR'
         clr.197 = 'RRRRRRRRR'
         clr.198 = 'RRRRRRR'
         clr.199 = 'RRRR'
         clr.200 = 'RRRRRR'
         clr.201 = 'RRRRR'
         clr.202 = 'RRRRRRR'
         clr.203 = 'RRRRR'
         clr.204 = 'RRRRRRRRRR'
         clr.205 = 'RRRRRRR'
         clr.206 = 'RRRRRRRR'
         clr.207 = 'RRRRRRR'
         clr.208 = 'RRRRRR'
         clr.209 = 'RRRRRR'
         clr.210 = 'RRRRRRRR'
         clr.211 = 'RRRRRR'
         clr.212 = 'RRRRRRRRRRRRRRRRRR'
         clr.213 = 'RRRRRR'
         clr.214 = 'RRRRRRR'
         clr.215 = 'RRRRRR'
         clr.216 = 'RRRRR'
         clr.217 = 'RRRR'
         clr.218 = 'RRRRRRRR'
         clr.219 = 'RRRRRRR'
         clr.220 = 'RRRRRRRRRRRRR'
         clr.221 = 'RRRRRRRRRR'
         clr.222 = 'RRRRRRRRRRR'
         clr.223 = 'RRRRRRRRRRRRRRR'
         clr.224 = 'RRRRRRRRRRRRRRR'
         clr.225 = 'RRRRRRRRRRRRR'
         clr.226 = 'RRRRRRRR'
         clr.227 = 'RRR'
         clr.228 = 'RRRRRR'
         clr.229 = 'RRR'
         clr.230 = 'RRRRRRRRR'
         clr.231 = 'RRRRRR'
         clr.232 = 'RRRRRRRRRR'
         clr.233 = 'RRRRRR'
         clr.234 = 'RRRRRRR'
         clr.235 = 'RRRRRR'
         clr.236 = 'RRRRRRRR'
         clr.237 = 'RRRRRRRR'
         clr.238 = 'RRRRRR'
         clr.239 = 'RRRRRRRRR'
         clr.240 = 'RRRRRRRRRRRR'
         clr.241 = 'RRR'
         clr.242 = 'RRRRRR'
         clr.243 = 'RRRRRR'
         clr.244 = 'RRRR'
         clr.245 = 'RRRRRR'
         clr.246 = 'RRRRRRRR'
         clr.247 = 'RRRRRRRR'
         clr.248 = 'RRRRRR'
         clr.249 = 'RRRRRRRRR'
         clr.250 = 'RRRR'
         clr.251 = 'RRRRRRRR'
         clr.252 = 'RRRRRR'
         clr.253 = 'RRRRR'
         clr.254 = 'RRRRRRR'
         clr.255 = 'RRRRRRR'
         clr.256 = 'RRRRRRR'
         clr.257 = 'RRRRRR'
         clr.258 = 'RRRRRRRRRRRR'
         clr.259 = 'RRRRR'
         clr.260 = 'RRRRRRRRRR'
         clr.261 = 'RRRR'
         clr.262 = 'RR'
         atr.263 = 'RRRRRRRR RRRRRRRRR'
         clr.264 = 'RRRRRRR'
         clr.265 = 'RRRRRRRR'
         clr.266 = 'RRRR'
         clr.267 = 'RRRR'
         clr.268 = 'RRRRR'
         clr.269 = 'RRRRRR'
         clr.270 = 'RRRRR'
         clr.271 = 'RRRRRR'
         clr.272 = 'RRRR'
         clr.273 = 'RRRRR'
         clr.274 = 'RRRRRRRRR'
         clr.275 = 'RRRRR'
         clr.276 = 'RRRRRR'
         clr.277 = 'RRRRRRRR'
         clr.278 = 'RRRRRRR'
         clr.279 = 'RRRR'
         clr.280 = 'RRRRRRRRRRR'
         clr.281 = 'RRRR'
         clr.282 = 'RRRRRRRR'
         clr.283 = 'RRRRRRR'
         clr.284 = 'RRRR'
         clr.285 = 'RRRRRRRR'
         clr.286 = 'RRRRR'
         clr.287 = 'RRRRR'
         clr.288 = 'RRRR'
         clr.289 = 'RRR'
         clr.290 = 'RRRRRRRRR'
         clr.291 = 'RRRRRRRRRRRRR'
         clr.292 = 'RRRRRRR'
         clr.293 = 'RRRR'
         clr.294 = 'RRRRR'
         clr.295 = 'RRRR'
      end
/*********************************************************************/
/* The user entered an invalid language name for highlighting, so    */
/* set usrhilng to OFF to bypass highlighting.                       */
/*********************************************************************/
   otherwise
      nop
end
if usrhilng <> '' & usrhilng <> 'OFF' then
   do
/*********************************************************************/
/* The first thing we have to do is highlight comments so that none  */
/* of the text bounded by the comments will be chosen for further    */
/* highlighting.  Each language is handled individually.  ZDATA will */
/* be broken down into individual lines that will be reviewed for    */
/* comments.                                                         */
/*********************************************************************/
      select
/*********************************************************************/
/* For Fortran, HILITE OTHER will leave a lot of highlighting errors */
/* due to lack of comment highlighting.  Any lines with 'c', 'C',    */
/* 'd', 'D', '*', or ! in column 1, or ! in any column not part of   */
/* quoted string, will be highlighted as a comment until the end of  */
/* the line.                                                         */
/*********************************************************************/
         when (usrhilng = 'FORTRAN') then
            do
               #lines = length(zdata) / zwidth
               do i = 0 to #lines - 1
                  strtpos = (i * zwidth) + 1
                  endpos  = ((i + 1) * zwidth) + 1
                  totchar = i * zwidth
                  parse var zdata =(strtpos) linedata =(endpos)
                  parse var zshadow =(strtpos) shaddata =(endpos)
                  parse var linedata 2 comchar 3 .
                  if (comchar = 'c' |,
                      comchar = 'C' |,
                      comchar = 'd' |,
                      comchar = 'D' |,
                      comchar = '*' |,
                      comchar = '!') then
                     compos = 2
                  else
                     compos = pos('!',linedata)
                  if compos > 0 then
                     do
                        compend = compos + 1
                        parse var shaddata =(compos) comshad =(compend)
                        if comshad <> 'Q' & comshad <> 'C' then
                           zshadow = overlay(,
                                     copies('C',zwidth - compos),,
                                     zshadow,,
                                     totchar+compos,zwidth - compos)
                     end
               end
            end
/*********************************************************************/
/* For Java or Go, HILITE OTHER handles all slash asterisk style     */
/* comments, so we have to add code to handle the // type comment.   */
/* We will do that by breaking down zdata into individual lines and  */
/* looking for any // characters that are either not already in a    */
/* comment or a quoted string.  Anything else will highlight as a    */
/* comment to the end of the line.                                   */
/*********************************************************************/
         when (usrhilng = 'JAVA' | usrhilng = 'GO') then
            do
               #lines = length(zdata) / zwidth
               do i = 0 to #lines - 1
                  strtpos = (i * zwidth) + 1
                  endpos  = ((i + 1) * zwidth) + 1
                  totchar = i * zwidth
                  parse var zdata =(strtpos) linedata =(endpos)
                  parse var zshadow =(strtpos) shaddata =(endpos)
                  compos = pos('//',linedata)
                  if compos > 0 then
                     do
                        compend = compos + 2
                        parse var shaddata =(compos) comshad =(compend)
                        if comshad <> 'QQ' & comshad <> 'CC' then
                           zshadow = overlay(,
                                     copies('C',zwidth - compos),,
                                     zshadow,,
                                     totchar+compos,zwidth - compos)
                     end
               end
            end
/*********************************************************************/
/* For Python, Ruby, and SHELL, HILITE OTHER will leave a lot of     */
/* highlighting errors due to lack of comment highlighting.  Any     */
/* lines with '#' in any column not part of a quoted string, will be */
/* highlighted as a comment until the end of the line.               */
/*********************************************************************/
         when (usrhilng = 'PYTHON' |,
               usrhilng = 'RUBY'   |,
               usrhilng = 'SHELL') then
            do
               #lines = length(zdata) / zwidth
               do i = 0 to #lines - 1
                  strtpos = (i * zwidth) + 1
                  endpos  = ((i + 1) * zwidth) + 1
                  totchar = i * zwidth
                  parse var zdata =(strtpos) linedata =(endpos)
                  parse var zshadow =(strtpos) shaddata =(endpos)
                  compos = pos('#',linedata)
                  if compos > 0 then
                     do
                        compend = compos + 1
                        parse var shaddata =(compos) comshad =(compend)
                        if comshad <> 'Q' & comshad <> 'C' then
                           zshadow = overlay(,
                                     copies('C',zwidth - compos),,
                                     zshadow,,
                                     totchar+compos,zwidth - compos)
                     end
               end
            end
/*********************************************************************/
/* For SQL, HILITE OTHER will handle all the slash asterisk style    */
/* comments, so we have to add code to handle the -- type comment.   */
/* We will do that by breaking down zdata into individual lines and  */
/* looking for any -- characters that are either not already in a    */
/* comment or a quoted string.  Anything else will highlight as a    */
/* comment to the end of the line.                                   */
/*********************************************************************/
         when (usrhilng = 'SQL') then
            do
               #lines = length(zdata) / zwidth
               do i = 0 to #lines - 1
                  strtpos = (i * zwidth) + 1
                  endpos  = ((i + 1) * zwidth) + 1
                  totchar = i * zwidth
                  parse var zdata =(strtpos) linedata =(endpos)
                  parse var zshadow =(strtpos) shaddata =(endpos)
                  compos = pos('--',linedata)
                  if compos > 0 then
                     do
                        compend = compos + 2
                        parse var shaddata =(compos) comshad =(compend)
                        if comshad <> 'QQ' & comshad <> 'CC' then
                           zshadow = overlay(,
                                     copies('C',zwidth - compos),,
                                     zshadow,,
                                     totchar+compos,zwidth - compos)
                     end
               end
            end
/*********************************************************************/
/* For FLOWASM, HILITE ASM will handle normal assembler comments, so */
/* so we have to add code to handle '*' or '/*' in any column,       */
/* provided they are the first character(s) on the line (no closing  */
/* '*/' is required).                                                */
/*********************************************************************/
         when (usrhilng = 'FLOWASM') then
            do
               #lines = length(zdata) / zwidth
               do i = 0 to #lines - 1
                  strtpos = (i * zwidth) + 1
                  endpos  = ((i + 1) * zwidth) + 1
                  totchar = i * zwidth
                  parse var zdata =(strtpos) linedata =(endpos)
                  parse var zshadow =(strtpos) shaddata =(endpos)
/*********************************************************************/
/* Eat the attribute, line number, and attrbute at the beginning of  */
/* the line, then comment will hold a comment if it exists.  Verify  */
/* the comment, then set the strings appropriately for the position  */
/* checks in the code resetting the shadow variable for comments.    */
/*********************************************************************/
                  parse var linedata 2 linenum 8 . 9 comment .
/*********************************************************************/
/* Since the top and bottom lines start with '*', detect if the line */
/* number is '******' and bypass it.                                 */
/*********************************************************************/
                  if linenum = '******' then
                     iterate i
                  parse var comment 1 asterisk 2 . 1 slashast 3 .
                  if asterisk = '*' then
                     do
                        comstring = '*'
                        shadquote = 'Q'
                        shadcomnt = 'C'
                     end
                  if slashast = '/*' then
                     do
                        comstring = '/*'
                        shadquote = 'QQ'
                        shadcomnt = 'CC'
                     end
                  if asterisk = '*' | slashast = '/*' then
                     do
                        compos = pos(comstring,linedata)
                        compend = compos + length(comstring)
                        parse var shaddata =(compos) comshad =(compend)
                        if comshad <> shadquote &,
                           comshad <> shadcomnt then
                           zshadow = overlay(,
                                     copies('C',zwidth - compos),,
                                     zshadow,,
                                     totchar+compos,zwidth - compos)
                     end
               end
            end
         otherwise
            nop
      end
/*********************************************************************/
/* For Ruby, we also have to process block comments started by       */
/* =BEGIN in column 1 and ended with =END in column 1.               */
/*********************************************************************/
      if usrhilng = 'RUBY' then
         call rubycomment
      if usrhilng = 'FLOWASM' then
         call flowasmhighlight
/*********************************************************************/
/* Copy zdata to tempdata, then manipulate tempdata to facilitate    */
/* language highlighting.  Translate all attribute bytes specified   */
/* in ISREDDE2 to blanks, and translate all braces, brackets, and    */
/* parens, and special characters to blanks.  Finally, uppercase     */
/* tempdata to test against blank-delimited, uppercased keywords.    */
/* This makes it simpler to match the keywords, since some           */
/* programmers prefer to capitalize only the first letter of every   */
/* keyword.                                                          */
/*********************************************************************/
      tempdata = zdata
/*********************************************************************/
/* The double commas are necessary to make the translate command     */
/* work properly.  The first comma is the comma for the function,    */
/* the second comma will continue the line.                          */
/*********************************************************************/
      tempdata = translate(tempdata,,
               '                          ',,
               '152A2B2F141B1C260102030405060708090A0B0C0D1316171D20'x)
      tempdata = translate(tempdata,'                     ',,
                                    '{}Ý¨()#+-*/=<>&¬|:%, ')
      parse upper var tempdata tempdata
/*********************************************************************/
/* Loop through each keyword for the language selected.  Start in    */
/* column 2, and search until offset is 0, meaning the keyword was   */
/* not found.                                                        */
/*********************************************************************/
      do i = 1 to kw.0
         strt = 2
         offset = 1
         /* Do until no more instances of this keyword are found */
         do while (offset > 0)
            offset = pos(kw.i,tempdata,strt)
            if offset > 0 then
               do
/*********************************************************************/
/* Change the highlighting only if ISPF has set the default          */
/* highlighting (attribute character 'D').  The clr. array holds the */
/* attribute byte for highlighting (default is 'R' for red, but      */
/* keywords can be highlighted in other colors by changing the color */
/* character in the clr array).                                      */
/*********************************************************************/
                if substr(zshadow,offset+1,length(atr.i)) = atr.i then
                zshadow = overlay(clr.i,zshadow,offset+1,length(clr.i))
/*********************************************************************/
/* Increment strt to begin the next search after the current found   */
/* keyword.                                                          */
/*********************************************************************/
                  strt = offset + length(kw.i)
               end
         end
      end
   end
/*********************************************************************/
/* This code will highlight braces and brackets.  The algorithms on  */
/* the Web recommended a stack data structure to push and pop        */
/* open/close pairs for parens, braces, and brackets.  Intialize the */
/* "stacks" obracpos for braces, and obrakpos for brackets, and the  */
/* variables representing the stack levels obrac#, and obrak#.       */
/*********************************************************************/
obracpos. = 0
obrakpos. = 0
obrac#    = 0
obrak#    = 0
/*********************************************************************/
/* Set hbcolor to the colors for each level of highlighting, white,  */
/* red, turquoise, pink, and yellow.                                 */
/*********************************************************************/
hbcolor   = 'WRTPY'
/*********************************************************************/
/* If the user selected brace or bracket highlighting, or both, read */
/* zdata and zshadow a character at a time to find braces and/or     */
/* brackets in zdata, and their current attribute byte highlighting  */
/* in zshadow.                                                       */
/*********************************************************************/
if usrhibrc = 'YES' | usrhibrk = 'YES' then
   do i = 1 to length(zdata)
      parse var zdata =(i) char +1 .
      parse var zshadow =(i) shad +1 .
/*********************************************************************/
/* If the user selected brace highlighting, process any braces not   */
/* in quotes (indicated by attribute byte of 'Q' in zshadow).        */
/*********************************************************************/
      if usrhibrc = 'YES' then
         select
            when (char = '{' & shad <> 'Q' & shad <> 'C') then
               do
/*********************************************************************/
/* For the open brace, increment obrac# and save the position of the */
/* open brace for highlighting later ("PUSH" the open brace onto the */
/* stack).                                                           */
/*********************************************************************/
                  obrac#          = obrac# + 1
                  obracpos.obrac# = i
               end
/*********************************************************************/
/* For the close brace, check to see if the open brace stack has any */
/* elements.  If obrac# is 0, then change the attribute byte to 'Z'  */
/* in zshadow (reverse pink, indicating a mismatched close brace).   */
/*********************************************************************/
            when (char = '}' & shad <> 'Q' & shad <> 'C') then
               if obrac# = 0 then
                  zshadow = overlay('Z',zshadow,i,1)
               else
                  do
/*********************************************************************/
/* If there is an element on the open brace stack, then determine    */
/* color by dividing obrac# by 5 and using the remainder as an index */
/* into the hbcolor string.  Overlay the zshadow attribute byte for  */
/* the close brace with that color, and then overlay the zshadow     */
/* attribute byte for the open brace using the saved postion.        */
/*********************************************************************/
                     bclrpos = obrac# // 5
                     if bclrpos = 0 then
                        bclrpos = 5
                     battr   = substr(hbcolor,bclrpos,1)
                     zshadow = overlay(battr,zshadow,i,1)
                     zshadow = overlay(battr,zshadow,obracpos.obrac#,1)
/*********************************************************************/
/* Decrementing obrac# is the equivalent of a "POP" operation on the */
/* open brace stack.                                                 */
/*********************************************************************/
                     obrac#  = obrac# - 1
                  end
            otherwise
               nop
         end
/*********************************************************************/
/* If the user selected bracket highlighting, process any brackets   */
/* not in quotes (indicated by attribute byte of 'Q' in zshadow), or */
/* comments (indicated by attribute byte of 'C' in zshadow).         */
/*********************************************************************/
      if usrhibrk = 'YES' then
         select
/*********************************************************************/
/* For the open bracket, increment obrak# and save the position of   */
/* the open bracket for highlighting later ("PUSH" the open bracket  */
/* onto the stack).                                                  */
/*********************************************************************/
            when (char = 'Ý' & shad <> 'Q' & shad <> 'C') then
               do
                  obrak#          = obrak# + 1
                  obrakpos.obrak# = i
               end
/*********************************************************************/
/* For the close bracket, check to see if the open bracket stack has */
/* any elements.  If obrak# is 0, then change the attribute byte to  */
/* 'Z' in zshadow (reverse pink, indicating a mismatched close       */
/* bracket).                                                         */
/*********************************************************************/
            when (char = '¨' & shad <> 'Q' & shad <> 'C') then
               if obrak# = 0 then
                  zshadow = overlay('Z',zshadow,i,1)
               else
                  do
/*********************************************************************/
/* If there is an element on the open bracket stack, then determine  */
/* color by dividing obrak# by 5 and using the remainder as an index */
/* into the hbcolor string.  Overlay the zshadow attribute byte for  */
/* the close bracket with that color, and then overlay the zshadow   */
/* attribute byte for the open bracket using the saved postion.      */
/*********************************************************************/
                     bclrpos = obrak# // 5
                     if bclrpos = 0 then
                        bclrpos = 5
                     battr   = substr(hbcolor,bclrpos,1)
                     zshadow = overlay(battr,zshadow,i,1)
                     zshadow = overlay(battr,zshadow,obrakpos.obrak#,1)
/*********************************************************************/
/* Decrementing obrak# is the equivalent of a "POP" operation on the */
/* open bracket stack.                                               */
/*********************************************************************/
                     obrak#  = obrak# - 1
                  end
            otherwise
               nop
         end
   end
/*********************************************************************/
/* If there are any remaining entries on open brace stack, highlight */
/* those characters with attribute byte 'Z' (reverse pink).          */
/*********************************************************************/
if usrhibrc = 'YES' then
   do i = 1 to obrac#
      zshadow = overlay('Z',zshadow,obracpos.i,1)
   end
/*********************************************************************/
/* If there are any remaining entries on open bracket stack,         */
/* highlight those characters with attribute byte 'Z' (reverse       */
/* pink).                                                            */
/*********************************************************************/
if usrhibrk = 'YES' then
   do i = 1 to obrak#
      zshadow = overlay('Z',zshadow,obrakpos.i,1)
   end
call isprexpx('T')
exit
rubycomment:
#lines = length(zdata) / zwidth
bcomment = 0
do i = 0 to #lines - 1
   strtpos = (i * zwidth) + 1
   endpos  = ((i + 1) * zwidth) + 1
   totchar = i * zwidth
   parse var zdata =(strtpos) linedata =(endpos)
   parse var zshadow =(strtpos) shaddata =(endpos)
   parse upper var linedata 9 rubybeg 15 . 9 rubyend 13 .
   if rubybeg = '=BEGIN' then
      bcomment = 1
   if rubyend = '=END' then
      bcomment = 0
   if bcomment | rubyend = '=END' then
      zshadow = overlay(copies('C',zwidth-9),zshadow,totchar+9,zwidth-9)
end
return
/*********************************************************************/
/* For FLOWASM, we need to detect continuation characters for        */
/* statements ending in commas.  FLOWASM does not require a          */
/* continuation character in column 72, and does not require the     */
/* continued line to start in column 16.                             */
/*                                                                   */
/* HILITE ASM parses code lines into Keyword <blank> Operand <blank> */
/* Comment.  Keyword is highlighted with K, Operand with D, and      */
/* Comment with C.  We need to detect a trailing comma on Operand,   */
/* then change the K highlighting for the Keyword on the next line   */
/* to D, and the D highlighting on the next line to C.               */
/*********************************************************************/
flowasmhighlight:
#lines = length(zdata) / zwidth
contcurrline = 0
zshadlen = length(zshadow)
do i = 0 to #lines - 1
   if \contcurrline then
      contprevline = 0
   else
      contprevline = 1
   strtpos = (i * zwidth) + 1
   endpos  = ((i + 1) * zwidth) + 1
   parse var zdata =(strtpos) linedata =(endpos)
   parse var zshadow =(strtpos) shaddata =(endpos)
   kw = ''
   cc = ''
   if \contprevline then
      parse upper var linedata 9 kw opr comment 80 cc 81 .
   else
      parse upper var linedata 9 opr comment
   oprlen = length(opr)
   parse var opr =(oprlen) comma .
   if comma = ',' & (cc = ' ' | cc = '00'x) then
      contcurrline = 1
   else
      contcurrline = 0
   if contprevline then
      do
         shaddata = translate(shaddata,'DC','KD')
         endlen  = length(zshadow) - endpos
         if endpos \= zshadlen then
            zshadow = substr(zshadow,1,strtpos-1) || shaddata ||,
                      substr(zshadow,endpos,endlen+1)
         else
            zshadow = substr(zshadow,1,strtpos-1) || shaddata
/*********************************************************************/
/* Now that the line is put together and the continuation handled,   */
/* we have to go back over the line and highlight the arithmetic     */
/* characters, parens, etc.                                          */
/*********************************************************************/
         searchchar = '=,+-*/<>&¬|:%'
         sline = linedata
         spos  = 1
         slen  = length(linedata)
         changeline = 0
         do j = 1 to length(searchchar)
            schar = substr(searchchar,j,1)
            sline = substr(sline,spos,slen-spos+1)
            charfound = 0
            do until (\charfound)
               scharpos = pos(schar,sline)
               if scharpos <> 0 then
                  do
                     shaddata = substr(shaddata,1,scharpos-1) || ' ' ||,
                       substr(shaddata,scharpos+1,slen-scharpos)
                     changeline = 1
                  end
               else
                  charfound = 0
            end
            if changeline then
               zshadow = substr(zshadow,1,strtpos-1) || shaddata ||,
                         substr(zshadow,endpos,endlen+1)
         end
/*********************************************************************/
/* After handling special characters, we now have to handle parens.  */
/* If PAREN highlighting is enabled, we have to highlight the parens */
/* where previously they were highlighted in red as a keyword.       */
/*********************************************************************/
         oparenpos. = 0
         oparen#   = 0
/*********************************************************************/
/* Set hbcolor to the colors for each level of highlighting, white,  */
/* red, turquoise, pink, and yellow.                                 */
/*********************************************************************/
         hbcolor   = 'WRTPY'
/*********************************************************************/
/* If the user selected paren highlighting, proceed.                 */
/*********************************************************************/
         do k = 1 to slen
            parse var linedata =(k) char +1 .
            parse var shaddata =(k) shad +1 .
/*********************************************************************/
/* If the user selected brace highlighting, process any braces not   */
/* in quotes (indicated by attribute byte of 'Q' in zshadow).        */
/*********************************************************************/
            select
               when (char = '(' & pos(shad,'QCWRTPY') = 0) then
                  do
/*********************************************************************/
/* For the open brace, increment obrac# and save the position of the */
/* open brace for highlighting later ("PUSH" the open brace onto the */
/* stack).                                                           */
/*********************************************************************/
                     oparen#         = oparen# + 1
                     oparenpos.oparen# = k
                  end
/*********************************************************************/
/* For the close paren, check to see if the open paren stack has any */
/* elements.  If obrac# is 0, then change the attribute byte to 'Z'  */
/* in zshadow (reverse pink, indicating a mismatched close paren).   */
/*********************************************************************/
               when (char = ')' & pos(shad,'QCWRTPY') = 0) then
                  if oparen# = 0 then
                     shaddata = overlay('Z',shaddata,k,1)
                  else
                     do
/*********************************************************************/
/* If there is an element on the open paren stack, then determine    */
/* color by dividing obrac# by 5 and using the remainder as an index */
/* into the hbcolor string.  Overlay the zshadow attribute byte for  */
/* the close paren with that color, and then overlay the zshadow     */
/* attribute byte for the open paren using the saved postion.        */
/*********************************************************************/
                        bclrpos = oparen# // 5
                        if bclrpos = 0 then
                           bclrpos = 5
                        battr   = substr(hbcolor,bclrpos,1)
                        shaddata = overlay(battr,shaddata,k,1)
                        shaddata =,
                         overlay(battr,shaddata,oparenpos.oparen#,1)
/*********************************************************************/
/* Decrementing oparen# is the equivalent of a "POP" operation on    */
/* the open paren stack.                                             */
/*********************************************************************/
                           oparen# = oparen# - 1
                        end
                  otherwise
                     nop
               end
            end
/*********************************************************************/
/* If there are any remaining entries on open paren stack, highlight */
/* those characters with attribute byte 'Z' (reverse pink).          */
/*********************************************************************/
         do l = 1 to oparen#
            shaddata = overlay('Z',shaddata,oparenpos.l,1)
         end
         zshadow = substr(zshadow,1,strtpos-1) || shaddata ||,
                   substr(zshadow,endpos,endlen+1)
      end
end
return
