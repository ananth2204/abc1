Block delete (//D) commands in 3.4 are difficult to execute when VSAM is
embedded along with physical sequential or PDS(E) datasets.  VSAM causes the
delete to stop dead in its tracks because panel ISRUVPC9 will be displayed for
each VSAM dataset to be deleted.  If you try to use //DELETE, TSO will invoke
IDCAMS to delete the VSAM datasets.  It works, but there are two problems with
that approach.  The first is that TSO sends IDCAMS SYSPRINT messages to the
terminal, so the user has to sit at the terminal to clear the *** at the bottom
of the screen.  The second problem is that the DELETE command will fail on the
DATA and INDEX portions of the VSAM cluster, and again the block delete stops
dead in its tracks.

The solution required changes to the dataset list panel ISRUDSL0, and a Rexx
exec USRDEL34.  ISRUDSL0 will look for a //D command, and change it to
//USRDEL34.  USRDEL34 will invoke IDCAMS to delete the file.  The IDCAMS
messages will not appear on the terminal because the IDCAMS SYSPRINT file is
allocated to DD DUMMY.  ISRUDSL0 will trap the error messages from IDCAMS when
deleting the DATA and INDEX portions of the VSAM cluster, clear the command
field, and then simulate ENTER from the user to delete the next dataset.

What's the catch?  The catch is that ALL errors are bypassed.  So the user may
have to perform multiple passes and REFRESH the ISRUDSL0 display in the event
of any I/O errors, RACF violations, etc., in order to process all the datasets
to be deleted.  For example, for any GDG's you will have to run the delete
process twice.  The first run will delete all the GDG's, the second run will
delete the GDG base (the GDG base delete will fail on the first run because it
is not empty).
