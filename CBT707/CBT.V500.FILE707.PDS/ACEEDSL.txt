/*>Rexx --------------------------------------------------------------*/
/*                                                                    */
/* -------------------------------------------------------------      */
/*  You need ISPF V.4.2 (z/os v1.r1/V1.R6, OS/390 V1.R2/V1.R10)       */
/* -------------------------------------------------------------      */
/*                                                                    */
/* ACEEDSL: I invoke DSLIST command in 2 ways:                        */
/*                                                                    */
/* >>>>>>>>>                                                          */
/*         1-DSLIST dsname: if you invoke it this way you will avoid  */
/*           =============  splitting the screen and type 3.4,        */
/*           you can invoke it anywhere and by typing EXIT command    */
/*           you'll come back the right place you were...             */
/*                                                                    */
/*         2-REFOPEND:  by using this command you can create,open,    */
/*           ========   update Personal Data Set Lists and link       */
/*           different data set names or libraries you want to get    */
/*           in 3.4 format when you type DSLIST name.                 */
/* >>>>>>>>>                                                          */
/*           You have to set this second option manually...           */
/*           in this point is when I decided to create this utility   */
/*           in order to make Shop Standard DSLISTs easy to maintain  */
/*                                                                    */
/*          (you can read Shop Starndard DSLISTs as YOUR FAVOURITES)  */
/*                                                                    */
/*                                                                    */
/*           The file attached to shopdsl must keep the next layout   */
/*           layout (DSLISTNAME LENGTH 8, DESCRIPTION LENGTH 30),     */
/*           First 3 lines are considered HEADER.                     */
/*                                                                    */
/*           ---8---- ----------30------------------/                 */
/*           DSLISTNM/DSLISTDESCRIPTION             /                 */
/*           ======== ==============================/                 */
/*           LIBRARY-1                                                */
/*           dataset-2                                                */
/*           LIBRARY-3                                                */
/*                                                                    */
/*                                                                    */
/*           FOR EXAMPLE:                                             */
/*           -----------                                              */
/*                                                                    */
/*           PANELS  /SYSTEM PANELS                 /                 */
/*           ISP.SISPPENU                                             */
/*                                                                    */
/*           COPYBKS/COBOL COPYBOOKS                /                 */
/*           YOUR.TEST.COPYBOOKS.LIBRARY                              */
/*           YOUR.QUAL.COPYBOOKS.LIBRARY                              */
/*           YOUR.PROD.COPYBOOKS.LIBRARY                              */
/* >>>>>>>>>                                                          */
/*           When the panel is shown you can select any row, only the */
/*           next letters are permited:                               */
/*             U  UnInstall- will Delete the DSLIST definition.       */
/*             I  Install  - will create the DSLIST with all the      */
/*                           datasets/libraries which were included   */
/*                           in the <shopdsl> file.                   */
/*             L  List     - list of datasets included                */
/*             E  Execute  - Invoke DSLIST                            */
/*                                                                    */
/*--------------------------------------------------------------------*/
/* Parameters: SHOPDSL is the dataset where the definitions are set.  */
/*                     Different definitions could be made for        */
/*                     programmers, sysprogs, security .....          */
/*--------------------------------------------------------------------*/
/* Other objects: ACEEMON Monitor utility                             */
/*                ACEPDSL Panel to show DSLIST information            */
/*--------------------------------------------------------------------*/
/* Changes:2003/01/09  Acevedo First Development                      */
/*         2004/11/08  Acevedo Shop dslist in flat-file               */
/*         2005/03/22  Acevedo include SHOPDSL example                */
/*--------------------------------------------------------------------*/
/* To do... intelligent update by comparing an installed DSLIST and   */
/*          the shop DSLIST looking for changes in libraries/datasets.*/
/*--------------------------------------------------------------------*/
arg shopdsl

shopdsl=USERID()'.CBT.D0(SHOPDSL)'       /* only 4 testing purposes */

if shopdsl='' then shopdsl='your.default.dslist.groups'
_sysdsn=sysdsn("'"shopdsl"'")
if sysdsn("'"shopdsl"'")¬="OK" then do
   zerrsm='';zerralrm='YES';zerrhm='*'
   zerrlm=shopdsl _sysdsn
   address ispexec "setmsg msg(isrz002)"
   exit
   end


call get_user_dslists
call read_standards

tbdsl =userid()
call populate_acepdsl

address ispexec "tbdispl" tbdsl "panel(acepdsl) rowid(rid)"
prc=rc
do while(prc ¬= 8)
   call verify_option

   address ispexec "tbtop"   tbdsl
   address ispexec "tbdispl" tbdsl "panel(acepdsl) rowid(rid)"
   prc=rc
   end

signal exit

/*--------------------------------------------------------------------*/
/* Desc.: EXIT    final de la utilidad________________________________*/
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
exit:
address ispexec "tbclose" tbdsl
address ispexec "tberase" tbdsl

address ispexec "tbclose isrplist"
exit

/*--------------------------------------------------------------------*/
/* Desc.: read_standards                                              */
/* Parms:                           __________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
read_standards:procedure EXPOSE DSL. shopdsl
_mon=ACEEMON('DSLIST','Reading Shop Standards')

address tso "alloc fi(ddshop) dsn('"shopdsl"') shr"
address tso "execio * diskr ddshop(stem dsl."
address tso "execio 0 diskr ddshop(finis"
address tso "free fi(ddshop)"
return

/*--------------------------------------------------------------------*/
/* Desc.: get_user_dslists                                            */
/* Parms:                           __________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
get_user_dslists:
address ispexec "tbopen  isrplist share"
address ispexec "tbquery isrplist rownum(nrows)"
nrows=format(nrows)

_mon=ACEEMON('DSLIST','User DSLISTs',)
user_dsl=''
do i= 1 to nrows
   address ispexec "tbskip isrplist"
   address ispexec "tbget  isrplist"
   user_dsl=user_dsl strip(translate(zcurtb))

/*   salida = copies('.',nrows)                                     */
/*   salida = overlay('>',salida,i)                                 */

   _mon=ACEEMON('User DSLISTs',right(i,3) 'of' nrows,)
   desc_u.i=dsadescp
   end i
return

/*--------------------------------------------------------------------*/
populate_acepdsl:
_mon=ACEEMON('DSLIST','Comparing Shop-User')
lista_n=''

address ispexec "TBCREATE" tbdsl,
                "NAMES(dslname dsldesc dslst)",
                "REPLACE"
do i=4 to dsl.0  /* 1,2,3 header */
   if pos('/',dsl.i)=0 then iterate
   parse var dsl.i name '/' desc '/' warn

   lista_n=lista_n name
   dslname=name
   dsldesc=desc
   if wordpos(name,user_dsl)>0 then
      dslst='YES'
   else
      dslst='NO'

   address ispexec "tbadd" tbdsl
   end i

address ispexec "tbsort" tbdsl "fields(dslname,c,a)"
address ispexec "tbtop"  tbdsl
return

/*--------------------------------------------------------------------*/
/* Desc.: verify_option                                               */
/* Parms: _______ ____________________________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
verify_option:
option=strip(translate(option))
if option='' then return
if rid = 0   then return

do while(ztdsels > 0)
   address ispexec "tbskip" tbdsl "row("rid") noread"

   dslname=strip(translate(dslname))
   dslst  =strip(translate(dslst  ))
   sw_exist = dslst='YES'

   select
      when option='U' then do /* Uninstall */
         if ¬sw_exist then do
            zedlmsg='DSLIST' DSLNAME 'Not Installed'
            address ispexec "setmsg msg(isrz001)"
            rid=0
            return
            end

         call check_dslist dslname
         address ispexec "tbdelete isrplist"

         dslst='NO'
         address ispexec "tbPUT"  TBDSL
         end

      when option='I' then do /* Install */
         if sw_exist then do
            zedlmsg='DSLIST' DSLNAME 'Already Installed'
            address ispexec "setmsg msg(isrz001)"
            rid=0
            return
            end

         call load_dslist dslname
         if l=0 then do
            rid=0
            return
            end

         do i=1 to 30
            vari=dsapet||right(i,2,'0')
            if i>l then
               cmd=vari"=''"
            else
               cmd=vari"='''"lib.i"'''"
            interpret cmd
            end i

         dsadescp=dsldesc
         call check_dslist dslname
         address ispexec "tbadd isrplist"

         dslst='YES'
         address ispexec "tbput"  tbdsl
         end

      when option='L' then do  /* List */
         call load_dslist dslname
         _msg=''
         do i=1 to l
            _msg = _msg left(lib.i,79)
            end i
         if i>8 then
            say  _msg
         else do
            zerrsm='';zerrhm='*';zerralrm='NO'
            zerrlm=_msg
            address ispexec "setmsg msg(isrz002)"
            end
         end

      when option='E' then do /* Execute DSLIST dslistname */
         if ¬sw_exist then do
            zedlmsg='DSLIST' dslname 'is not installed'
            address ispexec "setmsg msg(isrz001)"
            return
            end

         ADDRESS ISPEXEC "SELECT PGM(ISRDSLST) PARM(DSL &dslname)",
                         "SUSPEND SCRNAME(DSLIST)"
         end

      otherwise do
         zerrsm='';zerrhm='*';zerralrm='NO'
         _msg=left('U-UnInstall',79),
              left('I-Install  ',79),
              left('L-List     ',79),
              left('E-Execute  ',79)
         zerrlm=_msg
         address ispexec "setmsg msg(isrz002)"
         _msg=''
         option=''
         end
      end

   option=''
   if ztdsels > 1 then
      address ispexec "tbdispl" tbdsl "rowid(rid)"
   else
      ztdsels = 0
   end /* ztdsels >0 */
return

/*--------------------------------------------------------------------*/
load_dslist:
arg dslist
L=0

dslist=strip( translate(dslist) )
dslist=LEFT(dslist,8)
_l    =length(dslist)

do i=4 to dsl.0 while ( left(dsl.i,_l+1)¬=dslist'/' )
   end i
if left(dsl.i,_l+1)¬=dslist'/' then do
   zedsmsg=''
   zedlmsg='DSLIST <'dslist'/> not Found...'
   address ispexec "setmsg msg(isrz001)"
   return
   end

drop lib.
do i=i+1 to dsl.0 while ( left(dsl.i,_l+1)¬=dslist'/' )
   if dsl.i='' then iterate
   if pos('/',dsl.i)>0 then leave i
   l=l+1
   lib.l=strip(dsl.i)
   end i
if l=0 then do
   zedsmsg=''
   zedlmsg='Could not find' DSLIST 'something is wrong...'
   address ispexec "setmsg msg(isrz001)"
   exit
   end
return

/*--------------------------------------------------------------------*/
/* Desc.: check_dslist valida la existencia o no                      */
/* Parms: dslist                    __________________________________*/
/* Retrn: _______ ____________________________________________________*/
/*--------------------------------------------------------------------*/
check_dslist:
arg zcurtb

sw_exist=0
address ispexec "tbopen isrplist SHARE"

zcurtb=strip(translate(zcurtb))
address ispexec "tbtop  isrplist"
address ispexec "tbscan isrplist arglist(zcurtb)"
sw_exist= rc=0
address ispexec "tbend  isrplist"
return
