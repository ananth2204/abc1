//PIPICALL JOB ...
//**************************************************************
//S1  EXEC  ASMACL,MYMEM=PIPICALL
//C.SYSLIB DD
//         DD DSN=CEE.SCEEMAC,DISP=SHR
//C.SYSIN DD  *
***********************************************************************
*  This routine or front end is the documented                        *
*   way to run most any COBOL program in batch under                  *
*   z/OS.e. There is no documented restriction as to version of       *
*   complier, but the COBOL program                                   *
*   program must be linked with LE  runtimes.                         *
*                                                                     *
***********************************************************************
* Orginal program from topic 6.3.5 of SC26-4818-05                    *
* IBM Language Environment for MVS & VM                               *
* Programming Guide                                                   *
* Release 5                                                           *
*  There are two main modifications. One, the                         *
*  return code from the called program is                             *
*  percolated instead of dropped. Look for L                          *
*  R15,SUBRETC  near the label DONE.                                  *
*                                                                     *
*  The second is to call a program named in the                       *
*  parm rather than from a hard coded entry. This                     *
*  code starts near label PARM2.                                      *
*                                                                     *
*  What happens is the program name is extracted                      *
*  from the parm, then the parm pointers are                          *
*  adjusted so that the called program is unaware                     *
*  anything is unusual. The program name is                           *
*  expected to be the first one to eight bytes                        *
*  delimited by a comma or blank. The parm                            *
*  pointers are adjusted to the first position past the               *
*  delimiter.                                                         *
*                                                                     *
*  Of course, the maximum parm length usable by                       *
*  the called program is reduced by the length of                     *
*  the module name plus one. Other than that, the                     *
*  called program should not need any                                 *
*  modifications.                                                     *
*                                                                     *
*  We call this routine PIPICALL, and stow it in a                    *
*  linklist library. The JCL modifications are:                       *
*                                                                     *
*  Before => //MYSTEP   EXEC PGM=MYPROG,PARM=MYPARM                   *
*                                                                     *
*  After  => //MYSTEP  EXEC PGM=PIPICALL,PARM='MYPROG,MYPARM'         *
*                                                                     *
*                                                                     *
***********************************************************************
*                                                                     *
*   Function :  CEEPIPI - Initialize the PIPI environment,            *
*                         call a PIPI HLL program, and terminate      *
*                         the environment.                            *
*                                                                     *
* 1.Call CEEPIPI to initialize a subroutine environment under LE.     *
* 2.Call CEEPIPI to load and call a reentrant HLL subroutine.         *
* 3.Call CEEPIPI to terminate the LE PIPI environment.                *
*                                                                     *
* Note:  PIPICALL is not reentrant.                                   *
*                                                                     *
***********************************************************************
*
* =====================================================================
* Standard program entry conventions.
* =====================================================================
PIPICALL CSECT
         STM   R14,R12,12(R13)    Save caller's registers
         LR    R12,R15            Get base address
         USING PIPICALL,R12       Identify base register
         ST    R13,SAVE+4         Back-chain the save area
         LA    R15,SAVE           Get addr of this routine's save area
         ST    R15,8(R13)         Forward-chain in caller's save area
         LR    R13,R15            R13 -> save area of this routine
*
*
         L     R2,0(R1)           PICK UP PARM ADDR
         LTR   R2,R2              IS IT ZERO?
         BNZ   PARM2              HAVE GOOD ADDRESS
*                                   No.. issue message & quit
BADPARM  WTO   'PIPICALL : PARM INVALID OR MISSING.',ROUTCDE=11
         L     R5,=F'16'
         ABEND (R5),DUMP          ABEND WITH BAD RC AND DUMP MEMORY
*                                   No.. issue message & quit
PARM2    LA    R2,0(R2)           PICK UP PARM ADDR
         BZ    BADPARM            ADDR IS ZERO
         LH    R3,0(R2)           PARM LENGTH
         LTR   R3,R3
         BZ    BADPARM            LENGTH IS ZERO
*                                   NO.. CONTINUE
         LA    R4,PTY             POINT TO TARGET
         MVC   0(8,R4),=C'        '  BLANK OUT TARGET
         LA    R5,9(R4)           stopper address
PARM3    MVC   0(1,R4),2(R2)          PROGRAM NAME
         SH    R3,=H'1'           REDUCE BY 1
         BZ    PARMDONE           NONE LEFT, EXIT
         LA    R2,1(R2)           NEXT BYTE
         LA    R4,1(R4)           NEXT BYTE
         CR    R4,R5              end of target?
         BNL   BADPARM            YES AND NO DELIMETER FOUND.
         CLI   2(R2),C','         COMMA?
         BE    PARM4              YES
         CLI   2(R2),C' '         SPACE?
         BNE   PARM3              NO
PARM4    SH    R3,=H'1'           UNCOUNT DELIMITER
         LA    R2,1(R2)           AND POINT PAST IT
*
*
PARMDONE STH   R3,0(R2)           MOVE NEW LENGTH OVER
         ST    R2,0(R1)           FIX ADDR POINTER
         OI    0(R1),X'80'        SET HIGH BIT
         ST    R1,PARMPTR         AND PASS TO CALLEE
*
* Load LE CEEPIPI service routine into main storage.
*
         LOAD  EP=CEEPIPI         Load CEEPIPI routine dynamically
         ST    R0,PPRTNPTR        Save the addr of CEEPIPI routine
*
* Initialize an LE PIPI subroutine environment.
*
INIT_ENV EQU   *
         LA    R5,PPTBL           Get address of PIPI Table
         ST    R5,@CEXPTBL        Ceexptbl-addr -> PIPI Table
         L     R15,PPRTNPTR       Get address of CEEPIPI routine
*                                 Invoke CEEPIPI routine
         CALL  (15),(INITSUB,@CEXPTBL,@SRVRTNS,RUNTMOPT,TOKEN)
*                                 Check return code:
         LTR   R2,R15               Is R15 = zero?
         BZ    CSUB                 Yes (success).. go to next section
*                                   No (failure).. issue message
         WTO   'PIPICALL : call to CEEPIPI(INIT_SUB) failed',ROUTCDE=11
         WTO   'PIPICALL : Program load failed',ROUTCDE=11
         ABEND (R2),DUMP          Abend with bad RC and dump memory
*  orphaned code -                  No.. issue message & quit
         C     R2,=F'8'           Check for partial initialization
         BE    TSUB                 Yes.. go do PIPI termination
*                                   No.. issue message & quit
         WTO   'PIPICALL : INIT_SUB failure RC is not 8.',ROUTCDE=11
         ABEND (R2),DUMP          Abend with bad RC and dump memory
*
* Call the subroutine, which is loaded by LE
*
CSUB     EQU   *
         L     R15,PPRTNPTR       Get address of CEEPIPI routine
         CALL  (15),(CALLSUB,PTBINDEX,TOKEN,PARMPTR,                   X
               SUBRETC,SUBRSNC,SUBFBC)   Invoke CEEPIPI routine
*                                 Check return code:
         LTR   R2,R15               Is R15 = zero?
         BZ    TSUB                 Yes (success).. go to next section
         C     R2,=F'28'          Check for program stop
         BE    TSUB                 YES  GO TO NEXT SECTION
*                                   No (failure).. issue message & quit
         WTO   'PIPICALL : call to CEEPIPI(CALL_SUB) failed',ROUTCDE=11
         ABEND (R2),DUMP          Abend with bad RC and dump memory
*
* Terminate the environment
*
TSUB     EQU   *
         L     R15,PPRTNPTR       Get address of CEEPIPI routine
         CALL  (15),(TERM,TOKEN,ENV_RC)  Invoke CEEPIPI routine
*                                 Check return code:
         LTR   R2,R15               Is R15 = zero ?
         BZ    DONE                 Yes (success).. go to next section
*                                   No (failure).. issue message & quit
         WTO   'PIPICALL : call to CEEPIPI(TERM) failed',ROUTCDE=11
         ABEND (R2),DUMP          Abend with bad RC and dump memory
*
* Standard exit code.
*
DONE     EQU   *
         LA    R15,0                Passed return code for system
         L     R15,SUBRETC          Passed return code from program
         L     R13,SAVE+4           Get address of caller's save area
         L     R14,12(R13)          Reload caller's register 14
         LM    R0,R12,20(R13)       Reload caller's registers 0-12
         BR    R14                  Branch back to caller
*
* =====================================================================
* CONSTANTS and SAVE AREA.
* =====================================================================
SAVE     DC    18F'0'
PPRTNPTR DS    A                  Save the address of CEEPIPI routine
*
* Parameters passed to a CEEPIPI(INIT_SUB) call.
*
INITSUB  DC    F'3'               Function code to initialize for subr
@CEXPTBL DC    A(PPTBL)           Address of PIPI Table
@SRVRTNS DC    A(0)               Addr of service-rtns vector, 0 = none
RUNTMOPT DC    CL255' '           Fixed length string of runtime optns
TOKEN    DS    F                  Unique value returned (output)
*
* Parameters passed to a CEEPIPI(CALL_SUB) call.
*
CALLSUB  DC    F'4'               Function code to call subroutine
PTBINDEX DC    F'0'               The row number of PIPI Table entry
PARMPTR  DC    A(0)               Pointer to @PARMLIST or zero if none
SUBRETC  DS    F                  Subroutine return code (output)
SUBRSNC  DS    F                  Subroutine reason code (output)
SUBFBC   DS    3F                 Subroutine feedback token (output)
*
* Parameters passed to a CEEPIPI(TERM) call.
*
TERM     DC    F'5'               Function code to terminate
ENV_RC   DS    F                  Environment return code (output)
*
* =====================================================================
* PIPI Table.
* =====================================================================
PPTBL    CEEXPIT  ,               PIPI Table with index
PTY      CEEXPITY ASA2A40X,0      0 = DYNAMICALLY LOADED ROUTINE
*
         CEEXPITS ,               End of PIPI table
*
*
         LTORG
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END   PIPICALL
//L.SYSLIB  DD  DSN=my.linklist,DISP=SHR
//L.SYSLMOD  DD  DSN=my.linklist(&MYMEM),DISP=SHR
//**************************************************************
