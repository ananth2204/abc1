{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012509000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE630.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE630.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x01'", "DS1TRBAL": "b'\\xe2\\xfa'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x90\\x00\\x06\\x04\\x90\\x00\\t\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00X\\x01\\x142O\\x01\\x142O\\x159\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2014-11-20T00:00:00", "modifydate": "2014-11-20T15:39:58", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  630\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE630\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 7 MEMBERS COUNTED; CUMULATIVE SIZE IS 531 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/20/14    15:39:58    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOCINST": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x05\\x00\\x00\\x01\\x03\\x13o\\x01\\x04'\\x1f\\x12%\\x00\\x1c\\x00\\x15\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@\"", "ispf": {"version": "01.05", "flags": 0, "createdate": "2003-05-16T00:00:00", "modifydate": "2004-09-27T12:25:00", "lines": 28, "newlines": 21, "modlines": 0, "user": "TS0710"}, "text": "                          MC  (MOVE COPY a Dataset)\n\nInstallation\n============\n> Copy REXX MC to an EXEC dataset\n> Copy Panel MCPAN1 to a panel library\n> ASMLK TSOSMS (see sample JCL)\nMake sure a TSO call to the ADRDSSU program is APF authorized.\n  (This can be done by putting the name ADRDSSU into the\n  AUTHPGM list in the IKJTSOxx member of PARMLIB.)\nLogoff/Logon TSO\n\nExecution\n=========\n* =3.4 any dataset HLQ\n* MC line command any dataset you wish to move or copy\n  -OR-\n* \"TSO MC yourdsnhere\" (don't need =3.4 for this way)\n* Fill in panel options as required. NOTE, you CANNOT RECATALOG\n  an existing dataset when you COPY it (DFDSS restriction). You\n  must MOVE it in order to recatalog.\n\nNotes\n=====\nThis REXX uses DFSMSdss to perform its operations. Upon\nencountering any errors you will get a display of the error and\nthe input parms. Having a utility like QUIKREF is very handy in\nquickly looking up the error msg.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE630": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00V\\x01\\x142O\\x01\\x142O\\x157\\x00 \\x00 \\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2014-11-20T00:00:00", "modifydate": "2014-11-20T15:37:56", "lines": 32, "newlines": 32, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 630 is from Bob Glover, and contains a REXX exec which    *   FILE 630\n//*           uses DFDSS in the foreground to COPY or MOVE          *   FILE 630\n//*           datasets from one disk pack to another.  All that     *   FILE 630\n//*           is required is the REXX (called MC - \"move copy\")     *   FILE 630\n//*           and one panel, which formats the input and controls   *   FILE 630\n//*           the operation of the EXEC.                            *   FILE 630\n//*                                                                 *   FILE 630\n//*           There is one caveat, to get this thing to work.       *   FILE 630\n//*           You have to APF authorize a TSO CALL to the           *   FILE 630\n//*           ADRDSSU program.  That is accomplished either by      *   FILE 630\n//*           adding the name ADRDSSU to the AUTHPGM list in the    *   FILE 630\n//*           IKJTSOxx member of PARMLIB, or you can do it          *   FILE 630\n//*           \"personally\" for yourself, if you have permission     *   FILE 630\n//*           to make your own LOGON PROC with an authorized        *   FILE 630\n//*           STEPLIB library.  See Files 185 and 186 of the CBT    *   FILE 630\n//*           Tape collection about how to implement that.  You     *   FILE 630\n//*           have to add the name ADRDSSU to the IKJEFTE8          *   FILE 630\n//*           module of the IKJTABLS load module, and copy          *   FILE 630\n//*           module IKJTABLS into your authorized STEPLIB          *   FILE 630\n//*           library.  Then, the IKJTABLS entries will             *   FILE 630\n//*           completely override the IKJTSOxx PARMLIB entries      *   FILE 630\n//*           for your TSO session.  BUT the conditions for that    *   FILE 630\n//*           are, that the library containing IKJTABLS must be     *   FILE 630\n//*           running under your TSO session as an authorized       *   FILE 630\n//*           library and a STEPLIB.  And the override of the       *   FILE 630\n//*           IKJTSOxx PARMLIB member is complete.  That is, you    *   FILE 630\n//*           lose authorization of all the IKJTSOxx names, not     *   FILE 630\n//*           copied into your IKJTABLS module.  So be careful      *   FILE 630\n//*           implementing this for yourself or your group.         *   FILE 630\n//*                                                                 *   FILE 630\n//*           email:  Bob.Glover@fnf.com                            *   FILE 630\n//*                                                                 *   FILE 630\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMSMS": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x02\\x00\\x00\\x00\\x95\\x05_\\x01\\x04'\\x1f\\x12'\\x000\\x006\\x00\\n\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@\"", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-02-24T00:00:00", "modifydate": "2004-09-27T12:27:00", "lines": 48, "newlines": 54, "modlines": 10, "user": "TS0710"}, "text": "//-------- JOB CARD HERE --------------\n//*\n//* ASMLK PGM W/OUT SMPE (NAME=TSOSMS)\n//*\n//* ASSEMBLE AND LINK USING PDS INPUT\n//ASMLK  PROC  AREGION=2M,\n//             LREGION=2M,\n//             UNIT='SYSDA',\n//             CLASS='*',\n//             SYSLIB1='SYS1.MODGEN',\n//             SYSLIB2='SYS1.MACLIB',\n//             SRCLIB=TEMPNAME,\n//             LODLIB=TEMPNAME,\n//             RENT='NO',  /* ENTER RENT=NO FOR NON REENTRANT */\n//             SRCMOD='TEMPNAME',\n//             LODMOD='TEMPNAME'\n//*\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT,&RENT.RENT',\n//             REGION=&AREGION\n//SYSLIB   DD  DSN=&SYSLIB1.,DISP=SHR\n//         DD  DSN=&SYSLIB2.,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB.(&SRCMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=(&UNIT.,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//*\n//LNK  EXEC  PGM=IEWL,\n//  PARM='MAP,LET,LIST,NCAL,&RENT.RENT,AMODE=24,RMODE=24',\n//             REGION=&LREGION.,COND=(0,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LODLIB.(&LODMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=&UNIT.,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(RECFM=FB,BLKSIZE=3509)\n// PEND\n//*\n//STEP1 EXEC ASMLK,CLASS='*',\n//           RENT='NO',   /* ''=RENT, 'NO'=NON-RENT */\n//           SRCLIB='-- YOUR SRCLIB--',   ** SOURCE **\n//           LODLIB='-- YOUR LODLIB--',   ** TARGET LL **\n//           SRCMOD=TSOSMS,\n//           LODMOD=TSOSMS\n//*-------------------------------------\n//LNK.SYSIN  DD *\n  NAME TSOSMS(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MC": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x142?\\x01\\x142?\\x15\\x05\\x00\\xda\\x00\\xda\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-11-19T00:00:00", "modifydate": "2014-11-19T15:05:10", "lines": 218, "newlines": 218, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/*---------------------------*/\n/* (M)ove(C)opy a DS - (v3)  */\n/* supports \"=\" for TO-VOL   */\n/* supports \"*\" for TO-NAME  */\n/*---------------------------*/\n  parse arg dsn\n  dsn=strip(dsn,b,\"'\")\n  myid=SYSVAR(SYSUID)\n  dsname=dsn\n  status MSG('OFF')\n  address tso\n  /*\"FREE ALL\"*/\n  \"FREE FI(SYSIN,SYSPRINT)\"\n  \"DELETE ('\"myid\".MC.SYSIN')\"\n  \"DELETE ('\"myid\".MC.SYSPRINT')\"\n  \"ALLOC F(SYSPRINT) DA('\"myid\".MC.SYSPRINT') SPACE(1,1) CYL NEW CATALOG\n         REUSE\"\n  if RC /= 0 then\n    do\n      say 'SYSPRINT dataset allocation error !'\n      say 'delete dataset : 'myid'.MC.SYSPRINT and start over'\n      exit\n    end\n  \"ALLOC F(SYSIN) DA('\"myid\".MC.SYSIN') SPACE(1,1) TRACKS NEW KEEP\n         RECFM(F) BLKSIZE(80) REUSE\"\n  if RC /= 0 then\n    do\n      say 'SYSIN dataset allocation error !'\n      say 'delete dataset : 'myid'.MC.SYSIN and start over'\n      exit\n    end\n  rcrs='0000'\n  sc='                              '\n  mc='                              '\n  dc='                              '\n  ln=length(dsn)\n  ln=right(ln,2,'0')\n  address LINKPGM \"TSOSMS dsn ln rcrs sc mc dc\"\n  if sc ='                               ' then\n    sms='N'\n  else\n    sms='Y'\n  x=listdsi(dsname)\n  if rc = 0 then\n    SVOL = SYSVOLUME\n  else\n    SVOL = ''\n  wild='N'\n\n  do forever\n    address ispexec\n    \"VPUT (DSN)   PROFILE\"\n    \"VPUT (SVOL)  PROFILE\"\n    \"VPUT (SMS)   PROFILE\"\n    \"VPUT (WILD)  PROFILE\"\n    \"DISPLAY PANEL(MCPAN1)\"\n    if rc=8 then                /* PF3 */\n      do\n        say ' '\n        SAY '(M)ove(C)opy cancelled by user'\n        say ' '\n        exit\n      end\n    \"VGET (ACT)   PROFILE\"\n    \"VGET (SVOL)  PROFILE\"\n    \"VGET (TVOL)  PROFILE\"\n    \"VGET (TNAME) PROFILE\"\n    \"VGET (CATL)  PROFILE\"\n    \"VGET (REPL)  PROFILE\"\n    \"VGET (BYSMS) PROFILE\"\n    \"VGET (WILD)  PROFILE\"\n    address TSO\n    targname = dsn\n    if tname = '*' then\n      do\n        TNAME=DSN||'.'\n        wild='Y'\n        address ISPEXEC\n        \"VPUT (ACT)   PROFILE\"\n        \"VPUT (SVOL)  PROFILE\"\n        \"VPUT (TVOL)  PROFILE\"\n        \"VPUT (TNAME) PROFILE\"\n        \"VPUT (CATL)  PROFILE\"\n        \"VPUT (REPL)  PROFILE\"\n        \"VPUT (BYSMS) PROFILE\"\n        \"VPUT (WILD)  PROFILE\"\n        iterate   /* PANEL AGAIN */\n      end\n    else\n      wild='N'\n    if tname /= '' then\n      targname = tname\n    if tvol='=' then\n      tvol=svol\n    vol='volume('tvol')'\n    if repl = 'N' then\n      if listdsi(targname vol) = 0 then\n        do\n          say 'MUST SPECIFY REPLACE=Y ... TARGET DS ALREADY EXISTS'\n          exit\n        end\n    if catl = 'Y' then\n      if act = 'C' then\n        if listdsi(targname) = 0 then\n          do\n            say 'CANNOT SPECIFY CATALOG=Y ... TARGET DS ALREADY CATALOGUED'\n            exit\n          end\n    if DSN=TNAME then\n      if SVOL=TVOL then\n        do\n          say 'CANNOT Copy/Move a dataset into itself on SAME VOLUME !!!'\n          exit\n        end\n    newstack\n    queue '     COPY DS(INCLUDE('DSN')) -'\n    queue '          LOGINDYNAM('SVOL') -'\n    queue '          OUTDYNAM('TVOL') -'\n    queue '          TOL(ENQF) -'\n    queue '          ALLDATA(*) -'\n    queue '          TGTALLOC(SRC) -'\n    if tname /= ''  then\n      do\n        queue '          RENUNC('DSN', -'\n        queue '          'TNAME') -'\n      end\n    if repl = 'Y' then\n        queue '          REPLACE -'\n    if catl = 'Y' then\n        queue '          CATALOG -'\n    if act = 'M'  then\n        queue '          DELETE -'\n      else\n        queue '          SHARE -'\n    if bysms = 'Y' then\n      do\n        queue '          BYPASSACS(*) -'\n        queue '          NULLMGMTCLAS -'\n        queue '          NULLSTORCLAS -'\n      end\n    #jcl = queued()\n    do k=1 by 1 until k = #jcl\n      pull x1\n      jcl.k = x1\n    end\n    delstack\n    x2=strip(x1,'T','-')\n    jcl.#jcl = x2\n    'EXECIO  *  DISKW SYSIN (STEM jcl. FINIS)'\n    if act = 'C' then\n      myact = ' COPYING'\n    else\n      myact = '  MOVING'\n    if tname = '' then\n      tname=DSN\n    /**********************/\n    say '***********'\n    say '*'myact' *'\n    say '***********'\n    say ' '\n    say DSN 'ON ('SVOL')'\n    say ' '\n    say ' >--- TO --->'\n    say ' '\n    say tname 'ON ('TVOL')'\n    say ' '\n    /**********************/\n    do forever\n      say 'OK to proceed (Y/N) ?'\n      parse upper pull YN\n      if YN = 'N' then\n        do\n          say ' '\n          say '(M)ove(C)opy cancelled by user'\n          say ' '\n          exit\n        end\n      if YN = 'Y' then leave\n    end\n    say 'OPERATION PROCEEDING ... PLEASE WAIT'\n    ADDRESS TSO \"CALL 'SYS1.LINKLIB(ADRDSSU)'\"\n    /*===================================*/\n    ADDRESS TSO\n    \"FREE FI(SYSPRINT)\"\n    \"ALLOC FI(SYSPRINT) DA('\"myid\".MC.SYSPRINT') SHR\"\n    if rc \u00ac= 0 then\n      do\n        say ''myid'.MC.SYSPRINT NOT ALLOCATED .... Check error'\n        exit\n      end\n    \"EXECIO * DISKR SYSPRINT(STEM prt. FINIS)\"\n    do x=1 to prt.0\n      if pos('ADR012I',prt.x) <> 0 then\n        if pos('CODE IS 0000',prt.x) <> 0 then\n          do\n            SAY '    OO       K    K '\n            SAY '  O    O     K  K   '\n            SAY '  O    O     K K    '\n            SAY '  O    O     K  K   '\n            SAY '    OO       K    K '\n            SAY '  ================= '\n            call cleanup\n            exit\n          end\n    end\n    say 'NON-ZERO return code ... please check the following log'\n    \"ISPEXEC BROWSE DATASET('\"myid\".MC.SYSPRINT')\"\n    call cleanup\n  end  /* DO FOREVER */\nexit\n\n/*   SUBROUTINES  */\n\nCLEANUP:\n  \"FREE DA('\"myid\".MC.SYSIN') DELETE\"\n  \"FREE DA('\"myid\".MC.SYSPRINT') DELETE\"\nreturn\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MCPAN1": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00S\\x01\\x142?\\x01\\x142?\\x15\\x05\\x007\\x007\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-11-19T00:00:00", "modifydate": "2014-11-19T15:05:53", "lines": 55, "newlines": 55, "modlines": 0, "user": "TS0710"}, "text": ")ATTR\n$ TYPE(TEXT) INTENS(LOW) COLOR(RED)\n\u00ac TYPE(TEXT) INTENS(HIGH) COLOR(YELLOW)\n~ TYPE(TEXT) INTENS(HIGH) COLOR(GREEN)\n)BODY\n%                   /* --- (M)OVE(C)OPY DATASET --- */              (V3)\n%\n%\n% DSNAME          $==>_DSN                                        +\n%\n% ACTION           ==>_ACT+    C=COPY, M=MOVE\n% SOURCE VOLUME    ==>_SVOL  +~REQUIRED IF DS NOT CATALOGUED\n% TARGET VOLUME    ==>_TVOL  +~REQUIRED (\"=\" EQUAL VOLIDS)+\n% NEW TARGET NAME  ==>_TNAME                                      +\n%                                       (\"*\" SOURCE DSN.*\")\n% CATALOG          ==>_CATL+  (Y/N)\n% REPL EXISTING DS ==>_REPL+  (Y/N)\n% BYPASS SMS       ==>_BYSMS+ (Y/N)+~MUST BE AUTHORIZED+\n%\n% \"PF3\" TO EXIT\n)INIT\n  IF (&SMS EQ 'Y')\n     &TVOL=&SVOL\n     &CATL='Y'\n  IF (&WILD EQ 'Y')\n    .CURSOR = TNAME\n  VGET (CATL)  PROFILE\n  VGET (REPL)  PROFILE\n  VGET (BYSMS) PROFILE\n  VGET (WILD)  PROFILE\n  VPUT (ACT)   PROFILE\n  VPUT (TVOL)  PROFILE\n  VPUT (TNAME) PROFILE\n  VPUT (CATL)  PROFILE\n  VPUT (REPL)  PROFILE\n  VPUT (BYSMS) PROFILE\n)PROC\n  VER(&ACT,NONBLANK,LIST,C,M)\n  VPUT (ACT) PROFILE\n  VER(&SVOL,NONBLANK,INCLUDE,ALPHA,NUM)\n  VPUT (SVOL) PROFILE\n  IF (&TVOL NE '=')\n      VER(&TVOL,NONBLANK,INCLUDE,ALPHA,NUM)\n  VPUT (TVOL) PROFILE\n  IF (&TNAME NE '')\n    IF (&TNAME NE '*')\n       VER(&TNAME,DSNAME)\n  VPUT (TNAME) PROFILE\n  VER(&CATL,NONBLANK,LIST,Y,N)\n  VPUT (CATL) PROFILE\n  VER(&REPL,NONBLANK,LIST,Y,N)\n  VPUT (REPL) PROFILE\n  VER(&BYSMS,NONBLANK,LIST,Y,N)\n  VPUT (BYSMS) PROFILE\n)END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOSMS": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x01\\x142?\\x01\\x142?\\x15\\x05\\x00\\x8a\\x00\\x8a\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2014-11-19T00:00:00", "modifydate": "2014-11-19T15:05:32", "lines": 138, "newlines": 138, "modlines": 0, "user": "TS0710"}, "text": "         TITLE 'TSOSMS - LIST DATASET SMS STATUS'\n*=====================================================================*\n* INPUT PARMS :                                                       *\n* (R2) 1. DSNAME - TARGET OF THE SMS STATUS                           *\n* (R3) 2. DSN L' - DSNAME LENGTH                                      *\n* (R4) 3. RCRS   - RETURN CODE/REASON CODE                            *\n* (R5) 4. SC     - STORAGE CLASS                                      *\n* (R6) 5. MC     - MANAGEMENT CLASS                                   *\n* (R7) 6. DC     - DATA CLASS                                         *\n*=====================================================================*\n         SPACE\nTSOSMS   CSECT\n         USING *,R15\n         B     AROUND\n         DC    AL1(23)\n         DC    CL9'&SYSDATE'\n         DC    CL5'&SYSTIME'\nAROUND   DS    0H\n         STM   R14,R12,12(R13)\n         ST    R13,SAVEAREA+4\n         LA    R7,SAVEAREA\n         ST    R7,8(R13)\n         LA    R13,SAVEAREA\n         DROP  R15\n         USING SAVEAREA,R13\n         B     BEGIN\nSAVEAREA DC    18F'0'\nBEGIN    DS    0H\n         LM    R2,R7,0(R1)             LOAD PARM ADDRS\n         MVC   DSN(46),0(R2)           SETUP DSNAME\n         CLC   DSN(1),TIC              TICKIE MARKS PRESENT ?\n         BNE   NOTICKIE                NO..PROCEED\n         MVC   DSN2(46),DSN            Y...PREP IT\n         TR    DSN2(46),TABLE2         CONVERT TICS TO BLANKS\n         MVC   DSN(44),DSN2+1          DROP 1ST & LAST CHARS\n         PACK  DOUB(8),0(2,R3)         ZONED DECIMAL FROM REXX\n         SP    DOUB,=P'2'              DEDUCT FOR TICS\n         B     COMMON\nNOTICKIE EQU   *\n         PACK  DOUB(8),0(2,R3)         ZONED DECIMAL FROM REXX\nCOMMON   EQU   *\n         CVB   R15,DOUB                WE NEED\n         ST    R15,DSNL                HEXADECIMAL\n         LINK  EP=IGWASMS,MF=(E,PARMS) CALL SMS\n         ST    R15,SAVE15              NO..ELABORATE\n* RETURN CODE\n         L     R15,RC\n         CVD   R15,DOUB\n         UNPK  WORK3(3),DOUB+6(2)\n         MVZ   WORK3+2(1),=X'00'\n         TR    WORK3+2(1),TABLE\n         MVC   0(2,R4),WORK3+1         RC TO CALLER\n* REASON CODE\n         L     R15,RS\n         CVD   R15,DOUB\n         UNPK  WORK3(3),DOUB+6(2)\n         MVZ   WORK3+2(1),=X'00'\n         TR    WORK3+2(1),TABLE\n         MVC   2(2,R4),WORK3+1         RS TO CALLER\n* ===== END NON-ZERO CODE ===========\n*\nITSMS    EQU   *\n         MVC   2(30,R5),SC             STORAGE CLASS\n         MVC   2(30,R6),MC             MANAGEMENT CLASS\n         MVC   2(30,R7),DC             DATA CLASS\n*\nEXIT     EQU   *\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n         SPACE 3\n         LTORG\n         EJECT\n*=====================================================================*\n*                         D A T A   A R E A S                         *\n*=====================================================================*\n         SPACE\nDOUB     DS   D\nSAVE15   DS   F\nWORK3    DS   CL3\nTABLE    DC   C'0123456789ABCDEF'\n*\nPARMS    DS   0F\nARC      DC   A(RC)        A(RETURN CODE - R15)\nARS      DC   A(RS)        A(REASON CODE - R0)\nAPROBDET DC   A(PROBDET)   A(RC,RS)\nADSNL    DC   A(DSNL)      DATASET NAME L'\nADSN     DC   A(DSN)       A(DATASET NAME)\nASMSDATA DC   A(SMSDATA)   A(SMS DATA)\nADSTYPE  DC   A(DSTYPE)    A(DATASET TYPE)\n         SPACE 3\nRC       DC   F'0'\nRS       DC   F'0'\nPROBDET  DC   2F'0'\nDSNL     DC   F'0'\nDSN      DC   CL46' '\nSMSDATA  DS   0CL90\nSC       DC   CL30' '\nMC       DC   CL30' '\nDC       DC   CL30' '\nDSTYPE   DC   F'0'\n*\nTIC      DC   C''''\nDSN2     DC   CL46' '\nTABLE2   DS   0CL256\n         DC   X'000102030405060708090A0B0C0D0E0F'\n         DC   X'101112131415161718191A1B1C1D1E1F'\n         DC   X'202122232425262728292A2B2C2D2E2F'\n         DC   X'303132333435363738393A3B3C3D3E3F'\n         DC   X'404142434445464748494A4B4C4D4E4F'\n         DC   X'505152535455565758595A5B5C5D5E5F'\n         DC   X'606162636465666768696A6B6C6D6E6F'\n         DC   X'707172737475767778797A7B7C',X'40',X'7E7F'\n         DC   X'808182838485868788898A8B8C8D8E8F'\n         DC   X'909192939495969798999A9B9C9D9E9F'\n         DC   X'A0A1A2A3A4A5A6A7A8A9AAABACADAEAF'\n         DC   X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC   X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC   X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC   X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC   X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         SPACE 3\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT630/FILE630.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT630", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}