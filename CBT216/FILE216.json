{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011518000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE216.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE216.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x06'", "DS1TRBAL": "b'x\\xfe'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x92\\x00\\x01\\x01\\x92\\x00\\x04\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"CNVDAT#": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x19\\x9f\\x00\\x94\\x19\\x9f\\x15 \\x00m\\x00m\\x00\\x00\\xd1`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-18T00:00:00", "modifydate": "1994-07-18T15:20:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "J-SMITH"}, "text": "CNVDATE  GENERAL PURPOSE DATE MANIPULATION ROUTINE\n*---------------------------------------------------------------------*\n*                                                                     *\n*  PROGRAM: CNVDATE                                                   *\n*  PURPOSE: DATE CONVERSION AND MANIPULATION                          *\n*                                                                     *\n*  ORIGINAL AUTHOR: WES CLEVELAND                                     *\n*           NATIONAL SERVICE INDUSTRIES                               *\n*           INFORMATION SYSTEMS                                       *\n*                                                                     *\n*  CONTRIBUTOR:                                                       *\n*                                                                     *\n*           JIM SMITH                                                 *\n*           NATIONAL SERVICE INDUSTRIES                               *\n*           INFORMATION SYSTEMS                                       *\n*           MAIL STOP 003                                             *\n*           1420 PEACHTREE ST N.E.                                    *\n*           ATLANTA, GEORGIA  30309                                   *\n*           (404) 853-6434    WORK                                    *\n*                                                                     *\n*---------------------------------------------------------------------*\n\n*---------------------------------------------------------------------*\n*                                                                     *\n*    THIS PROGRAM IS A GENERAL PURPOSE DATE MANIPULATION ROUTINE THAT *\n* MAY BE CALLED TO PERFORM THE FOLLOWING DATE MANIPULATION FUNCTIONS: *\n*                                                                     *\n*    1) VERIFY    JULIAN & GREGORIAN DATES                            *\n*    2) CONVERT   JULIAN & GREGORIAN DATES                            *\n*    3) INCREMENT JULIAN & GREGORIAN DATES                            *\n*    4) DECREMENT JULIAN & GREGORIAN DATES                            *\n*    5) CALCULATE DIFFERENCE BETWEEN JULIAN OR GREGORIAN DATES        *\n*    6) CALCULATE DAY OF WEEK                                         *\n*    7) CALCULATE DAY OF CENTURY                                      *\n*                                                                     *\n* LINKAGE:  R1 = CNVDATE WORK AREA ADDRESS                            *\n*          R13 = SAVE AREA ADDRESS                                    *\n*          R14 = RETURN ADDRESS                                       *\n*          R15 = ENTRY ADDRESS                                        *\n*                                                                     *\n*  RETURN: R15 = RETURN CODE                                          *\n*                00 = FUNCTION COMPLETE WITHOUT ERROR                 *\n*                04 = INVALID DATE DATA                               *\n*                08 = INVALID PARAMATER SPECIFICATION                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n\n*---------------------------------------------------------------------*\n*                                                                     *\n* FORMATS: GREGORIAN - MMDDYY                                         *\n*                      MMDDYYYY                                       *\n*             JULIAN - YYDDD                                          *\n*                      YYYYDDD                                        *\n*              VALUE - DDDD                                           *\n*                      DDDDDDDD                                       *\n*                DAY - DXXXXXXXXX (D=DAY NUMBER, X=DAY SPELLED OUT)   *\n*                                                                     *\n*  NOTE: INITIALIZE FIELDS-1 AND FIELD-2 WITH BLANKS BEFORE MOVING    *\n*        IN REQUESTED DATES (FIELD-1) OR INCREMENT/DECREMENT NBR      *\n*        (FIELDS-2).  THE INCREMENT/DECREMENT NBR (FIELD-2) MUST BE   *\n*        LEFT JUSTIFIED.                                              *\n*                                                                     *\n*          WORK AREA - FUNCTION  (1 BYTE)                             *\n*                      FIELD-1   (8 BYTES)                            *\n*                      FIELD-2   (8 BYTES)                            *\n*                      RETURN   (10 BYTES)                            *\n*                                                                     *\n*                      FUNC    FIELD-1    FIELD-2    RETURN           *\n*                      ----    -------    -------    -------          *\n*                        1     DATE       N/A        N/A              *\n*                        2     DATE       N/A        DATE             *\n*                        3     DATE       DDDDDDDD   DATE             *\n*                        4     DATE       DDDDDDDD   DATE             *\n*                        5     DATE       DATE       DDDDDDDD         *\n*                        6     DATE       N/A        DXXXXXXXXX       *\n*                        7     DATE       N/A        DDDDDDDD         *\n*                                                                     *\n* EXAMPLE COBOL: CURRENT-DATE 071392 DECREMENT 30 DAYS                *\n*                                                                     *\n*      01  WS-CNVDATE-WORK-AREA    PIC X(27).                         *\n*                                                                     *\n*      01  FILLER REDEFINES WS-CNVDATE-WORK-AREA.                     *\n*                                                                     *\n*          05  FUNCTION            PIC X.                             *\n*          05  SUBR-DATE.                                             *\n*              10  SR-MM           PIC XX.                            *\n*              10  SR-DD           PIC XX.                            *\n*              10  SR-YY           PIC XX.                            *\n*              10  FILLER          PIC XX.                            *\n*          05  AGE-CRITERA         PIC X(8).                          *\n*          05  AGED-DATE.                                             *\n*              10  AD-MM           PIC XX.                            *\n*              10  AD-DD           PIC XX.                            *\n*              10  AD-YY           PIC XX.                            *\n*              10  FILLER          PIC XXXX.                          *\n*                                                                     *\n*                                                                     *\n*          MOVE CURRENT-DATE TO WORK-DATE.                            *\n*          MOVE SPACES TO WS-CNVDATE-WORK-AREA.                       *\n*          MOVE WD-MM TO SR-MM.                                       *\n*          MOVE WD-DD TO SR-DD.                                       *\n*          MOVE WD-YY TO SR-YY.                                       *\n*          MOVE '4' TO FUNCTION.                                      *\n*          MOVE '30      ' TO AGE-CRITERA.                            *\n*          CALL 'CNVDATE' USING WS-CNVDATE-WORK-AREA.                 *\n*                                                                     *\n* EXAMPLE RETURNED AGED-DATE: 061392                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CNVDATE": {"ttr": 519, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x94\\x19\\x9f\\x00\\x94\\x19\\x9f\\x15 \\x02\\xc5\\x02\\xc5\\x00\\x00\\xd1`\\xe2\\xd4\\xc9\\xe3\\xc8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1994-07-18T00:00:00", "modifydate": "1994-07-18T15:20:00", "lines": 709, "newlines": 709, "modlines": 0, "user": "J-SMITH"}, "text": "CNVDATE  TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE'\n*---------------------------------------------------------------------*\n*                                                                     *\n*  PROGRAM: CNVDATE                                                   *\n*  PURPOSE: DATE CONVERSION AND MANIPULATION                          *\n*                                                                     *\n*  ORIGINAL AUTHOR: WES CLEVELAND                                     *\n*                                                                     *\n*  CONTRIBUTOR:                                                       *\n*           JIM SMITH                                                 *\n*           NATIONAL SERVICE INDUSTRIES                               *\n*           INFORMATION SYSTEMS                                       *\n*           MAIL STOP 003                                             *\n*           1420 PEACHTREE ST N.E.                                    *\n*           ATLANTA, GEORGIA  30309                                   *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n*    THIS PROGRAM IS A GENERAL PURPOSE DATE MANIPULATION ROUTINE THAT *\n* MAY BE CALLED TO PERFORM THE FOLLOWING DATE MANIPULATION FUNCTIONS: *\n*                                                                     *\n*    1) VERIFY    JULIAN & GREGORIAN DATES                            *\n*    2) CONVERT   JULIAN & GREGORIAN DATES                            *\n*    3) INCREMENT JULIAN & GREGORIAN DATES                            *\n*    4) DECREMENT JULIAN & GREGORIAN DATES                            *\n*    5) CALCULATE DIFFERENCE BETWEEN JULIAN OR GREGORIAN DATES        *\n*    6) CALCULATE DAY OF WEEK                                         *\n*    7) CALCULATE DAY OF CENTURY                                      *\n*                                                                     *\n* LINKAGE:  R1 = CNVDATE WORK AREA ADDRESS                            *\n*          R13 = SAVE AREA ADDRESS                                    *\n*          R14 = RETURN ADDRESS                                       *\n*          R15 = ENTRY ADDRESS                                        *\n*                                                                     *\n*  RETURN: R15 = RETURN CODE                                          *\n*                00 = FUNCTION COMPLETE WITHOUT ERROR                 *\n*                04 = INVALID DATE DATA                               *\n*                08 = INVALID PARAMATER SPECIFICATION                 *\n*                                                                     *\n*---------------------------------------------------------------------*\n         EJECT\n*---------------------------------------------------------------------*\n*                                                                     *\n* FORMATS: GREGORIAN - MMDDYY                                         *\n*                      MMDDYYYY                                       *\n*             JULIAN - YYDDD                                          *\n*                      YYYYDDD                                        *\n*              VALUE - DDDD                                           *\n*                      DDDDDDDD                                       *\n*                DAY - DXXXXXXXXX (D=DAY NUMBER, X=DAY SPELLED OUT)   *\n*                                                                     *\n*  NOTE: INITIALIZE FIELDS-1 AND FIELD-2 WITH BLANKS BEFORE MOVING    *\n*        IN REQUESTED DATES (FIELD-1) OR INCREMENT/DECREMENT NBR      *\n*        (FIELDS-2).  THE INCREMENT/DECREMENT NBR (FIELD-2) MUST BE   *\n*        LEFT JUSTIFIED.                                              *\n*                                                                     *\n*          WORK AREA - FUNCTION  (1 BYTE)                             *\n*                      FIELD-1   (8 BYTES)                            *\n*                      FIELD-2   (8 BYTES)                            *\n*                      RETURN   (10 BYTES)                            *\n*                                                                     *\n*                      FUNC    FIELD-1    FIELD-2    RETURN           *\n*                      ----    -------    -------    -------          *\n*                        1     DATE       N/A        N/A              *\n*                        2     DATE       N/A        DATE             *\n*                        3     DATE       DDDDDDDD   DATE             *\n*                        4     DATE       DDDDDDDD   DATE             *\n*                        5     DATE       DATE       DDDDDDDD         *\n*                        6     DATE       N/A        DXXXXXXXXX       *\n*                        7     DATE       N/A        DDDDDDDD         *\n*                                                                     *\n* EXAMPLE COBOL: CURRENT-DATE 071392 DECREMENT 30 DAYS                *\n*                                                                     *\n*      01  WS-CNVDATE-WORK-AREA    PIC X(27).                         *\n*                                                                     *\n*      01  FILLER REDEFINES WS-CNVDATE-WORK-AREA.                     *\n*                                                                     *\n*          05  FUNCTION            PIC X.                             *\n*          05  SUBR-DATE.                                             *\n*              10  SR-MM           PIC XX.                            *\n*              10  SR-DD           PIC XX.                            *\n*              10  SR-YY           PIC XX.                            *\n*              10  FILLER          PIC XX.                            *\n*          05  AGE-CRITERA         PIC X(8).                          *\n*          05  AGED-DATE.                                             *\n*              10  AD-MM           PIC XX.                            *\n*              10  AD-DD           PIC XX.                            *\n*              10  AD-YY           PIC XX.                            *\n*              10  FILLER          PIC XXXX.                          *\n*                                                                     *\n*                                                                     *\n*          MOVE CURRENT-DATE TO WORK-DATE.                            *\n*          MOVE SPACES TO WS-CNVDATE-WORK-AREA.                       *\n*          MOVE WD-MM TO SR-MM.                                       *\n*          MOVE WD-DD TO SR-DD.                                       *\n*          MOVE WD-YY TO SR-YY.                                       *\n*          MOVE '4' TO FUNCTION.                                      *\n*          MOVE '30      ' TO AGE-CRITERA.                            *\n*          CALL 'CNVDATE' USING WS-CNVDATE-WORK-AREA.                 *\n*                                                                     *\n* EXAMPLE RETURNED AGED-DATE: 061392                                  *\n*                                                                     *\n*---------------------------------------------------------------------*\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - REGISTER EQ+\n               UATES'\n*---------------------------------------------------------------------*\n*        REGISTER EQUATES                                             *\n*---------------------------------------------------------------------*\nR0       EQU   0                   REGISTER ZERO\nR1       EQU   1                   REGISTER ONE\nR2       EQU   2                   REGISTER TWO\nR3       EQU   3                   REGISTER THREE\nR4       EQU   4                   REGISTER FOUR\nR5       EQU   5                   REGISTER FIVE\nR6       EQU   6                   REGISTER SIX\nR7       EQU   7                   REGISTER SEVEN\nR8       EQU   8                   REGISTER EIGHT\nR9       EQU   9                   REGISTER NINE\nR10      EQU   10                  REGISTER TEN\nR11      EQU   11                  REGISTER ELEVEN\nR12      EQU   12                  REGISTER TWELVE\nR13      EQU   13                  REGISTER THIRTEEN\nR14      EQU   14                  REGISTER FORTEEN\nR15      EQU   15                  REGISTER FIFTEEN\n*\nSUBRLINK EQU   R14                 SUB-ROUTINE LINK REGISTER\nDSABASE  EQU   R13                 DYNAMIC STORAGE AREA BASE\nCNVBASE  EQU   R12                 CNVDATE BASE REGISTER\nPARMBASE EQU   R11                 PARM BASE REGISTER\nFUNCBASE EQU   R10                 FUNCTION BASE REGISTER\nFUNCENT  EQU   R9                  FUNCTION ENTRY ADDRESS\nFUNCLINK EQU   R8                  FUNCTION LINK REGISTER\nINPREG   EQU   R7                  INPUT DATA ADDRESS\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - DYNAMIC STO+\n               RAGE AREA'\n*---------------------------------------------------------------------*\n*        DYNAMIC STORAGE AREA                                         *\n*---------------------------------------------------------------------*\nDSA      DSECT                     DYNAMIC STORAGE AREA\nDSASAVE  DS    18F                   REGISTER SAVE AREA\nDSADWORD DS    D                     DOUBLE WORD WORK AREA\n*                                    FIELD FORMAT TYPES\nDSA$NULL EQU   B'00000000'             NULL DATA (N/A)\nDSA$GDAT EQU   B'10000000'             GREGORIAN DATE\nDSA$JDAT EQU   B'01000000'             JULIAN DATE\nDSA$VALU EQU   B'00100000'             VALUE\nDSA$CHAR EQU   B'00010000'             CHARACTER\nDSA$YEXT EQU   B'00000001'             EXTENDED YEAR\nDSA$FLD1 DS    B                     FIELD 1 TYPE\nDSA@FLD1 DS    AL3                   FIELD 1 BINARY DATA\nDSA$FLD2 DS    B                     FIELD 2 TYPE\nDSA@FLD2 DS    AL3                   FIELD 2 BINARY DATA\nDSA$RET  DS    B                     RETURN FIELD TYPE\nDSA@RET  DS    AL3                   RETURN FIELD BINARY DATA\nDSA@RETC DS    CL10                  RETURN FIELD CHARACTER DATA\nDSADATE  DS    0CL11                 DATE WORK AREA\nDSAYYYY  DS    0CL4,CL2                EXTENDED YEAR\nDSAYY    DS    CL2                     YEAR\nDSAMM    DS    CL2                     MONTH\nDSADD    DS    CL2                     GREGORIAN DAY OF MONTH\nDSADDD   DS    CL3                     JULIAN DAY OF YEAR\nDSAEND   EQU   *                     DSA END\nDSALEN   EQU   DSAEND-DSA            DSA LENGTH\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - PARM WORK A+\n               REA'\n*---------------------------------------------------------------------*\n*        PARM WORK AREA                                               *\n*---------------------------------------------------------------------*\nPARM     DSECT                     PARM WORK AREA\nPARMREQ  DS    C                     REQUEST CODE ('1'..'7')\nPARMFLD1 DS    CL8                   FIELD 1\nPARMFLD2 DS    CL8                   FIELD 2\nPARMRET  DS    0CL8                  RETURN FIELD\nPARMRETC DS    CL10                  RETURN FIELD CHARACTER\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - HOUSKEEPING+\n                ROUTINE'\n*---------------------------------------------------------------------*\n*        HOUSKEEPING ROUTINE                                          *\n*---------------------------------------------------------------------*\nCNVDATE  CSECT\n         B     4+8+8+8(R15)        BYPASS PROGRAM HEADER INFORMATION\n         DC    CL8'CNVDATE '         PROGRAM NAME\n         DC    CL8'&SYSDATE'         DATE ASSEMBLED\n         DC    CL8'&SYSTIME'         TIME ASSEMBLED\n         STM   R14,R12,12(R13)     SAVE CALLERS REGISTERS\n         LR    CNVBASE,R15         MAKE PROGRAM ADDRESSABLE\n         USING CNVDATE,CNVBASE\n         L     PARMBASE,0(R1)      MAKE PARM ADDRESSABLE\n         USING PARM,PARMBASE\n         LA    R0,DSALEN           GET DSA LENGTH\n         GETMAIN R,LV=(0)          ACQUIRE DSA\n         USING DSA,R1\n         ST    R13,DSASAVE+4       CHAIN BACKWARD\n         LA    R2,DSASAVE\n         DROP  R1\n         ST    R2,8(R13)           CHAIN FORWARD\n         LR    DSABASE,R1          MAKE DSA ADDRESSABLE\n         USING DSA,DSABASE\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - FUNCTION LO+\n               OK-UP && PROCESSING ROUTINE'\n*---------------------------------------------------------------------*\n*        FUNCTION LOOK-UP & PROCESSING ROUTINE                        *\n*---------------------------------------------------------------------*\n         MVC   PARMRETC,BLANKS     CLEAR RETURN DATA\n         CLI   PARMREQ,C'1'        FUNCTION VALID\n         BL    RETURN08              NO-RETURN CODE=16\n         CLI   PARMREQ,C'7'\n         BH    RETURN08\n         IC    FUNCENT,PARMREQ     GET REQUEST CODE\n         SLL   FUNCENT,28          MASK OFF HIGH-ORDER BITS\n         SRL   FUNCENT,28\n         BCTR  FUNCENT,R0          DECREMENT BY 1\n         SLL   FUNCENT,4           TIMES 16 FOR ENTRY OFFSET\n         LA    FUNCENT,FUNCTBL(FUNCENT)  POINT TO FUNCTION ENTRY\n         LA    INPREG,PARMFLD1     POINT TO FIELD 1\n         L     FUNCBASE,0(FUNCENT) GET INPUT ROUTINE ADDRESS\n         BALR  FUNCLINK,FUNCBASE   GO TO PROCESSING ROUTINE\n         STCM  INPREG,15,DSA$FLD1  SAVE BINARY FIELD DATA\n         MVC   DSA$RET,DSA$FLD1    RESULT SAME AS INPUT DATE\n         LA    INPREG,PARMFLD2     POINT TO FIELD 2\n         L     FUNCBASE,4(FUNCENT) GET INPUT ROUTINE ADDRESS\n         BALR  FUNCLINK,FUNCBASE   GO TO PROCESSING ROUTINE\n         STCM  INPREG,15,DSA$FLD2  SAVE BINARY FIELD DATA\n         L     FUNCBASE,8(FUNCENT) GET FUNCTION ROUTINE ADDRESS\n         BALR  FUNCLINK,FUNCBASE   GO TO PROCESSING ROUTINE\n         L     FUNCBASE,12(FUNCENT) GET RETURN ROUTINE ADDRESS\n         BALR  FUNCLINK,FUNCBASE   GO TO PROCESSING ROUTINE\n         B     RETURN00            GO RETURN TO CALLER\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - PROGRAM TER+\n               MINATION PROCESSING ROUTINE'\n*---------------------------------------------------------------------*\n*        PROGRAM TERMINATION PROCESSING ROUTINE                       *\n*---------------------------------------------------------------------*\nRETURN00 DS    0H\n         SR    R15,R15             SET RETURN CODE = 00\n         B     RETURN              GO RETURN TO CALLER\nRETURN04 DS    0H\n         LA    R15,04              SET RETURN CODE = 04\n         B     RETURN              GO RETURN TO CALLER\nRETURN08 DS    0H\n         LA    R15,08              SET RETURN CODE = 08\nRETURN   DS    0H\n         LR    R1,DSABASE          POINT TO DSA FOR FREEMAIN\n         L     R13,4(R13)          POINT TO CALLERS SAVE AREA\n         LA    R0,DSALEN           GET DSA LENGTH\n         LR    R3,R15              SAVE RETURN CODE\n         FREEMAIN R,LV=(0),A=(1)   FREEMAIN DSA\n         LR    R15,R3              RESTORE RETURN CODE\n         RETURN (14,12),RC=(15)    RETURN TO CALLER\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - PROCESSING +\n               SUB-ROUTINES'\n*---------------------------------------------------------------------*\n*        CHECK LEAP YEAR SUB-ROUTINE                                  *\n*                                                                     *\n*        INPUT:  R1 = BINARY YEAR (YYYY)                              *\n*                                                                     *\n*        OUTPUT: R15 = 0 - YEAR IS NOT A LEAP YEAR                    *\n*                R15 = 4 - YEAR IS A LEAP YEAR                        *\n*                                                                     *\n*        A YEAR IS A LEAP YEAR WHEN:                                  *\n*                                                                     *\n*            YEAR MOD 400 = 0 OR                                      *\n*           (YEAR MOD 4 = 0 AND YEAR MOD 100 \u00ac= 0)                    *\n*---------------------------------------------------------------------*\nCKLEAP   DS    0H\n         SR    R15,R15             INDICATE NOT LEAP YEAR\n         LR    R2,R1               GET ORIGINAL YEAR\n         SRDL  R2,32               SET UP FOR DIVIDE\n         D     R2,=F'4'            DIVIDE BY 4\n         LTR   R2,R2               IS YEAR EVENLY DIVISIBLE BY 4?\n         BNZR  SUBRLINK              NO-RETURN FROM SUB-ROUTINE\n         LR    R2,R1               GET ORIGINAL YEAR\n         SRDL  R2,32               SET UP FOR DIVIDE\n         D     R2,=F'100'          DIVIDE BY 100\n         LTR   R2,R2               IS YEAR EVENLY DIVISIBLE BYE 100?\n         BNZ   CKLEAP10              NO-GO INDICATE IT'S A LEAP YEAR\n         LR    R2,R1               GET ORIGINAL YEAR\n         SRDL  R2,32               SET UP FOR DIVIDE\n         D     R2,=F'400'          DIVIDE BY 400\n         LTR   R2,R2               IS YEAR EVENLY DIVISIBLE BYE 400?\n         BNZR  SUBRLINK              NO-RETURN FROM SUB-ROUTINE\nCKLEAP10 DS    0H\n         LA    R15,4               INDICATE LEAP YEAR\n         BR    SUBRLINK            RETURN FROM SUB-ROUTINE\n         EJECT\n*---------------------------------------------------------------------*\n*        CALCULATE DAYS BETWEEN 01/01/00 AND 01/01/YYYY               *\n*                                                                     *\n*        INPUT:  R1 = BINARY YEAR (YYYY)                              *\n*                                                                     *\n*        OUTPUT: R0 = DAYS BEFORE YYYY                                *\n*                                                                     *\n*        RELDAYS = YEAR * 365         (DAYS IN YEAR)                  *\n*                + (YEAR - 1) / 4     (TOTAL POSSIBLE LEAP YEARS)     *\n*                - (YEAR - 1) / 100   (CENTURY YEARS)                 *\n*                + (YEAR - 1) / 400   (CENTURY YEARS EVENLY DIV 400)  *\n*---------------------------------------------------------------------*\nRELDAYS  DS    0H\n         LR    R15,R1              SAVE YEAR\n         LR    R2,R15              GET TOTAL NUMBER OF YEARS\n         MH    R2,=H'365'          YEAR * 365 DAYS PER YEAR\n         BCTR  R15,0               R15 = YEAR - 1\n         LR    R0,R15              R0  = YEAR - 1\n         SRDL  R0,32               SHIFT INTO REGISTER 1\n         D     R0,=F'4'            DIVIDE BY 4\n         AR    R2,R1               ADD NUMBER OF LEAP YEARS\n         LR    R0,R15              R0  = YEAR - 1\n         SRDL  R0,32               SHIFT INTO REGISTER 1\n         D     R0,=F'100'          DIVIDE BY 100\n         SR    R2,R1               SUB NUMBER OF CENTURY LEAP YEARS\n         LR    R0,R15              R0  = YEAR - 1\n         SRDL  R0,32               SHIFT INTO REGISTER 1\n         D     R0,=F'400'          DIVIDE BY 400\n         AR    R2,R1               ADD NUMBER OF 4-CENTURY LEAP YEARS\n         LA    R1,1(R15)           RESTORE ORIGINAL YEAR\n         LR    R0,R2               PLACE RESULTS IN REGISTER\n         BR    SUBRLINK            RETURN FROM SUB-ROUTINE\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - DATA CONSTA+\n               NTS, TABLES, LITERALS, ETC...'\n*---------------------------------------------------------------------*\n*        FUNCTION PROCESSING TABLE                                    *\n*---------------------------------------------------------------------*\n*                  +------------------------------- FIELD 1 FORMAT\n*                  |       +----------------------- FIELD 2 FORMAT\n*                  |       |       +--------------- FUNCTION ROUTINE\n*                  |       |       |       +------- RETURN  FORMAT\n*                  |       |       |       |        FUNCTION NAME\n*                  |       |       |       |        |\nFUNCTBL  DS    0F  V       V       V       V        V\n         DC    AL4(INPDATE,INPNULL,FUNNULL,OUTNULL) VERIFY\n         DC    AL4(INPDATE,INPNULL,FUNCNVT,OUTDATE) CONVERT\n         DC    AL4(INPDATE,INPVALU,FUNINCR,OUTDATE) INCREMENT\n         DC    AL4(INPDATE,INPVALU,FUNDECR,OUTDATE) DECREMENT\n         DC    AL4(INPDATE,INPDATE,FUNDIFF,OUTVALU) DIFFERENCE\n         DC    AL4(INPDATE,INPNULL,FUNDAYW,OUTCHAR) DAY OF WEEK\n         DC    AL4(INPDATE,INPNULL,FUNDAYC,OUTVALU) DAY OF CENTURY\n*---------------------------------------------------------------------*\n*        DAY OF WEEK TABLE                                            *\n*---------------------------------------------------------------------*\nDAYTBL   DS    0F                  DAY OF WEEK TABLE\n         DC    CL10'1SUNDAY   '\n         DC    CL10'2MONDAY   '\n         DC    CL10'3TUESDAY  '\n         DC    CL10'4WEDNESDAY'\n         DC    CL10'5THURSDAY '\n         DC    CL10'6FRIDAY   '\n         DC    CL10'7SATURDAY '\n*---------------------------------------------------------------------*\n*        JULIAN DAYS TABLE                                            *\n*---------------------------------------------------------------------*\nJULDAYS  DS    0F           NORMAL/LEAP YEAR\n         DC    H'000',H'000'       JANUARY\n         DC    H'031',H'031'       FEBRUARY\n         DC    H'059',H'060'       MARCH\n         DC    H'090',H'091'       APRIL\n         DC    H'120',H'121'       MAY\n         DC    H'151',H'152'       JUNE\n         DC    H'181',H'182'       JULY\n         DC    H'212',H'213'       AUGUST\n         DC    H'243',H'244'       SEPTEMBER\n         DC    H'273',H'274'       OCTOBER\n         DC    H'304',H'305'       NOVEMBER\n         DC    H'334',H'335'       DECEMBER\n         DC    2H'32767'\nJULYEAR  DC    C'365 366 '         YEAR\n*---------------------------------------------------------------------*\n*        GREGORIAN DAYS TABLE                                         *\n*---------------------------------------------------------------------*\nGREGDAYS DS    0F  NORMAL/LEAP YEAR\n         DC    C'31',C'31'         JANUARY\n         DC    C'28',C'29'         FEBRUARY\n         DC    C'31',C'31'         MARCH\n         DC    C'30',C'30'         APRIL\n         DC    C'31',C'31'         MAY\n         DC    C'30',C'30'         JUNE\n         DC    C'31',C'31'         JULY\n         DC    C'31',C'31'         AUGUST\n         DC    C'30',C'30'         SEPTEMBER\n         DC    C'31',C'31'         OCTOBER\n         DC    C'30',C'30'         NOVEMBER\n         DC    C'31',C'31'         DECEMBER\n*---------------------------------------------------------------------*\n*        CONSTANTS, LITERALS, ETC ...                                 *\n*---------------------------------------------------------------------*\nBLANKS   DS    8C' '\n         LTORG\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - INPUT PROCE+\n               SSING ROUTINES'\n*---------------------------------------------------------------------*\n*        NULL FUNCTION PROCESSING ROUTINE                             *\n*---------------------------------------------------------------------*\nINPNULL  DS    0H\nFUNNULL  DS    0H\nOUTNULL  DS    0H\n         USING INPDATE,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    INPREG,INPREG       CLEAR INPUT DATA\n         BR    FUNCLINK            RETURN FROM ROUTINE\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        DATE INPUT PROCESSING ROUTINE                                *\n*                                                                     *\n*        INPUT:  INPREG = ADDRESS OF DATE FIELD                       *\n*                                                                     *\n*        OUTPUT: INPREG = BINARY DATE                                 *\n*---------------------------------------------------------------------*\nINPDATE  DS    0H\n         USING INPDATE,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         LR    R1,INPREG           GET DATE ADDRESS\n         LA    R0,8                MAX DATE SIZE\nINPDAT10 DS    0H\n         CLI   0(R1),C' '          END OF DATE?\n         BE    INPDAT20              YS-CONTINUE PROCESSING\n         CLI   0(R1),C'0'          IS IT A VALID NUMBER?\n         BL    RETURN04              NO-INVALID DATE DATA\n         CLI   0(R1),C'9'          IS IT A VALID NUMBER?\n         BH    RETURN04              NO-INVALID DATE DATA\n         LA    R1,1(R1)            POINT TO NEXT BYTE\n         BCT   R0,INPDAT10         ANY MORE TO CHECK?\nINPDAT20 DS    0H\n         SR    R1,INPREG           CALCULATE DATE SIZE\n         SH    R1,=H'5'            IS IT >= 5 BYTES LONG?\n         BM    RETURN08              NO-INVALID DATE FORMAT\n         SLL   R1,2                MULTIPLY BY 4 FOR BRANCH TABLE\n         B     *+4(R1)             BRANCH TO PROPER ROUTINE\n         B     INPDAT30            YYDDD\n         B     INPDAT60            MMDDYY\n         B     INPDAT40            YYYYDDD\n         B     INPDAT70            MMDDYYYY\nINPDAT30 DS    0H\n         MVC   DSAYYYY,=C'1900'    DEFAULT CENTURY\n         MVC   DSAYY,0(INPREG)     BUILD YEAR\n         MVC   DSADDD,2(INPREG)    BUILD DDD\n         LA    INPREG,DSA$JDAT     INDICATE FORMAT IS JULIAN\n         B     INPDAT50            GO TO JULIAN COMMON ROUTINE\nINPDAT40 DS    0H\n         MVC   DSAYYYY,0(INPREG)   BUILD YEAR\n         MVC   DSADDD,4(INPREG)    BUILD DDD\n         LA    INPREG,DSA$JDAT+DSA$YEXT  INDICATE FORMAT IS JUL EXT\n         B     INPDAT50            GO TO JULIAN COMMON ROUTINE\nINPDAT50 DS    0H\n         CLC   DSADDD,=C'000'      IS DAYS VALID?\n         BNH   RETURN04              NO-INDICATE INVALID DATE DATA\n         PACK  DSADWORD,DSAYYYY    GET YEAR\n         CVB   R1,DSADWORD         MAKE YEAR BINARY FOR LATER USE\n         BAL   SUBRLINK,CKLEAP     CHECK FOR LEAP LEAR\n         LA    R15,JULYEAR(R15)    POINT TO DAYS IN YEAR\n         CLC   DSADDD,0(R15)       IS DAYS VALID?\n         BH    RETURN04              NO-INDICATE INVALID DATE DATA\n         BAL   SUBRLINK,RELDAYS    CALCULATE DAYS IN PREVIOUS YEARS\n         PACK  DSADWORD,DSADDD     GET DAYS IN THIS YEAR\n         CVB   R1,DSADWORD         MAKE IT BINARY\n         AR    R0,R1               ADD DAYS TO PREVIOUS YEAR DAYS\n         SRDL  R0,24               SHIFT INTO R1\n         LR    R0,INPREG           GET DATE TYPE\n         SRDL  R0,8                SHIFT ALL OF IT INTO R1\n         LR    INPREG,R1           PLACE DATA INTO INPUT REGISTER\n         BR    FUNCLINK            RETURN FROM INPUT ROUTINE\nINPDAT60 DS    0H\n         MVC   DSAYYYY,=C'1900'    USE DEFAULT YEAR\n         MVC   DSAYY,4(INPREG)     BUILD YEAR\n         MVC   DSAMM,0(INPREG)     BUILD MONTH\n         MVC   DSADD,2(INPREG)     BUILD DAY\n         LA    INPREG,DSA$GDAT     INDICATE GREGORIAN DATE\n         B     INPDAT80            GO TO COMMON GREGORIAN DATE\nINPDAT70 DS    0H\n         MVC   DSAYYYY,4(INPREG)   BUILD YEAR\n         MVC   DSAMM,0(INPREG)     BUILD MONTH\n         MVC   DSADD,2(INPREG)     BUILD DAY\n         LA    INPREG,DSA$GDAT+DSA$YEXT  INDICATE GREG EXT DATE\n         B     INPDAT80            GO TO COMMON GREGORIAN DATE\nINPDAT80 DS    0H\n         CLC   DSAMM,=C'01'        IS MONTH VALID?\n         BL    RETURN04              NO-INVALID DATE DATA\n         CLC   DSAMM,=C'12'        IS MONTH VALID?\n         BH    RETURN04              NO-INVALID DATE DATA\n         CLC   DSADD,=C'01'        IS DAY VALID?\n         BL    RETURN04              NO-INVALID DATE DATA\n         PACK  DSADWORD,DSAYYYY    GET YEAR\n         CVB   R1,DSADWORD         MAKE YEAR BINARY\n         BAL   SUBRLINK,CKLEAP     CHECK FOR LEAP YEAR\n         SRL   R15,1               DIVIDE BY 2\n         LR    R5,R15              SAVE RESULTS\n         PACK  DSADWORD,DSAMM      GET MONTH\n         CVB   R14,DSADWORD        MAKE MONTH BINARY\n         BCTR  R14,0               MAKE BINARY MONTH RELATIVE TO ZERO\n         SLL   R14,2               MULTIPLY BY 4\n         AR    R5,R14              ADD TO LEAP YEAR FLAG\n         LA    R15,GREGDAYS(R5)    POINT TO DAYS IN MONTH\n         CLC   DSADD,0(R15)        IS DAYS VALID?\n         BH    RETURN04              NO-INVALID DATE DATA\n         BAL   SUBRLINK,RELDAYS    CALCULATE DAYS IN PREVIOUS YEARS\n         AH    R0,JULDAYS(R5)      ADD PREVIOUS MONTHS DAYS\n         PACK  DSADWORD,DSADD      GET DAY OF MONTH\n         CVB   R1,DSADWORD         MAKE DAY BINARY\n         AR    R0,R1               ADD TO PREVIOUS DAYS\n         SRDL  R0,24               SHIFT INTO R1\n         LR    R0,INPREG           GET FIELD TYPE\n         SRDL  R0,8                SHIFT INTO R1\n         LR    INPREG,R1           PLACE DATA INTO INPUT REGISTER\n         BR    FUNCLINK            RETURN FROM INPUT ROUTINE\n         LTORG\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        VALUE INPUT PROCESSING ROUTINE                               *\n*---------------------------------------------------------------------*\nINPVALU  DS    0H\n         USING INPVALU,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         LA    R1,8                MAXIMUM DATA LENGTH\n         LR    R2,INPREG           INPUT DATA REGISTER\nINPVAL00 DS    0H\n         CLI   0(R2),C' '          END OF DATA?\n         BE    INPVAL10              YS-GO CONVERT TO BINARY\n         CLI   0(R2),C'0'          IS IT NUMERIC?\n         BL    RETURN08              NO-INVALID PARM SPECIFICATION\n         CLI   0(R2),C'9'\n         BH    RETURN08\n         LA    R2,1(R2)            POINT TO NEXT DATA BYTE\n         BCT   R1,INPVAL00         GO CHECK IT OUT\nINPVAL10 DS    0H\n         SR    R2,INPREG           CALCULATE DATA LENGTH\n         BNP   RETURN08              INVALID PARM SPECIFICATION\n         BCTR  R2,R0               REDUCE DATA LENGTH FOR PACK\n         EX    R2,INPVPACK         PACK NUMERIC DATA FOR CVB\n         CVB   R1,DSADWORD         CONVERT TO BINARY\n         SLDL  R0,4                SHIFT FOR DATA TYPE\n         LA    R0,DSA$VALU         INDICATE FIELD IS A VALUE\n         SRDL  R0,4                SHIFT BACK\n         LR    INPREG,R1           SET FIELD DATA\n         BR    FUNCLINK            RETURN FROM INPUT ROUTINE\nINPVPACK PACK  DSADWORD,0(0,INPREG)  PACK INPUT DATA FOR CVB\n         DROP  FUNCBASE\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - FUNCTION PR+\n               OCESSING ROUTINES'\n*---------------------------------------------------------------------*\n*        CONVERT FUNCTION PROCESSING ROUTINE                          *\n*---------------------------------------------------------------------*\nFUNCNVT  DS    0H\n         USING FUNCNVT,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         MVC   DSA$RET,DSA$FLD1    GET INPUT DATE FORMAT\n         XI    DSA$RET,DSA$JDAT+DSA$GDAT SWAP RETURN DATE FORMAT\n         MVC   DSA@RET,DSA@FLD1    SET RETURN DATE\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        INCREMENT FUNCTION PROCESSING ROUTINE                        *\n*---------------------------------------------------------------------*\nFUNINCR  DS    0H\n         USING FUNINCR,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    R1,R1               CLEAR WORK REGISTER\n         SR    R2,R2               CLEAR WORK REGISTER\n         ICM   R1,7,DSA@FLD1       GET DATE\n         ICM   R2,7,DSA@FLD2       GET INCREMENT VALUE\n         AR    R1,R2               INCREMENT DATE\n         STCM  R1,7,DSA@RET        SAVE NEW DATE\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        DECREMENT FUNCTION PROCESSING ROUTINE                        *\n*---------------------------------------------------------------------*\nFUNDECR  DS    0H\n         USING FUNDECR,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    R1,R1               CLEAR WORK REGISTER\n         SR    R2,R2               CLEAR WORK REGISTER\n         ICM   R1,7,DSA@FLD1       GET DATE\n         ICM   R2,7,DSA@FLD2       GET DECREMENT VALUE\n         SR    R1,R2               DECREMENT DATE\n         BNP   RETURN04            DECREMENT TO LARGE FOR US TO HANDLE\n         STCM  R1,7,DSA@RET        SAVE NEW DATE\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        DIFFERENCE FUNCTION PROCESSING ROUTINE                       *\n*---------------------------------------------------------------------*\nFUNDIFF  DS    0H\n         USING FUNDIFF,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    R1,R1               CLEAR WORK REGISTER\n         SR    R2,R2               CLEAR WORK REGISTER\n         ICM   R1,7,DSA@FLD1       GET DATE 1\n         ICM   R2,7,DSA@FLD2       GET DATE 2\n         CR    R1,R2               IS FIRST SMALLER THAN SECOND?\n         BNL   FUNDIF10              NO-CONTINUE\n         LR    R0,R1                 YS-SAVE FIRST\n         LR    R1,R2                    MAKE SECOND FIRST\n         LR    R2,R0                    MAKE FIRST SECOND\nFUNDIF10 DS    0H\n         SR    R1,R2               CALCULATE DIFFERENCE\n         STCM  R1,7,DSA@RET        SAVE DIFFERENCE\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        DAY OF WEEK FUNCTION PROCESSING ROUTINE                      *\n*---------------------------------------------------------------------*\nFUNDAYW  DS    0H\n         USING FUNDAYW,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    R0,R0               CLEAR WORK REGISTER\n         ICM   R0,7,DSA@FLD1       GET DATE\n         BCTR  R0,0                ADJUST FOR RELATIVE DAY\n         SRDL  R0,32               SHIFT FOR DIVIDE\n         D     R0,=F'7'            GET RELATIVE DAY OF WEEK (0-6)\n         LR    R1,R0               PLACE REMAINDER IN R1\n         MH    R1,=H'10'           MULTIPLY BY 10\n         LA    R1,DAYTBL(R1)       POINT TO DAY OF WEEK\n         MVC   DSA@RETC,0(R1)\n         MVI   DSA$RET,DSA$CHAR    INDICATE FIELD IS CHARACTER\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         LTORG\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        DAY OF CENTURY FUNCTION PROCESSING ROUTINE                   *\n*---------------------------------------------------------------------*\nFUNDAYC  DS    0H\n         USING FUNDAYC,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         MVI   DSA$RET,DSA$VALU    INDICATE FIELD IS A VALUE\n         MVC   DSA@RET,DSA@FLD1    COPY BINARY DATE\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         TITLE 'GENERAL PURPOSE DATE MANIPULATION ROUTINE - OUTPUT PROC+\n               ESSING ROUTINES'\n*---------------------------------------------------------------------*\n*        CHARACTER OUTPUT PROCESSING ROUTINE                          *\n*---------------------------------------------------------------------*\nOUTCHAR  DS    0H\n         USING OUTCHAR,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         MVC   PARMRETC,DSA@RETC   BUILD RETURN DATA\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        DATE OUTPUT PROCESSING ROUTINE                               *\n*---------------------------------------------------------------------*\nOUTDATE  DS    0H\n         USING OUTDATE,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    R5,R5               CLEAR WORK REGISTER\n         ICM   R5,7,DSA@RET        GET BINARY DATE\n         LA    R1,1(R5)            ...\n         M     R0,=F'400'          : MAKE BEST GUESS AT YEAR\n         D     R0,=F'146097'       ...\nOUTDAT10 DS    0H\n         BAL   SUBRLINK,RELDAYS    GET DAYS PRIOR TO DSAYYYY\n         SR    R5,R0               GET REMAINING DAYS IN THIS YEAR\n         BP    OUTDAT20            GOT THE RIGHT YEAR\n         AR    R5,R0               RESET BINARY DATE\n         BCT   R1,OUTDAT10         GO TRY PREVIOUS YEAR\nOUTDAT20 DS    0H\n         CVD   R1,DSADWORD         CONVERT YEAR TO DECIMAL\n         OI    DSADWORD+7,X'0F'    MAK UNSIGNED\n         UNPK  DSAYYYY,DSADWORD    CONVERT YEAR TO DISPLAY FORMAT\n         CVD   R5,DSADWORD         CONVERT DAYS TO DECIMAL\n         OI    DSADWORD+7,X'0F'    MAKE UNSIGNED\n         UNPK  DSADDD,DSADWORD     CONVERT DAYS TO DISPLAY FORMAT\n         BAL   SUBRLINK,CKLEAP     CHECK FOR LEAP YEAR\n         SRL   R15,1               DIVIDE RETURN BY 2\n         LA    R2,JULDAYS-4(R15)   POINT TO JULIAN DAYS TABLE\n         SR    R1,R1               CLEAR MONTH VALUE\nOUTDAT30 DS    0H\n         LA    R1,1(R1)            BUMP MONTH\n         LA    R2,4(R2)            POINT TO JUL DAYS FOR MONTH\n         CH    R5,4(R2)            PAST THIS MONTH?\n         BH    OUTDAT30              YS-GO CHECK NEXT MONTH\n         SH    R5,0(R2)            REMAINING DAYS TO DAY OF MONTH\n         CVD   R1,DSADWORD         CONVERT MONTH TO DECIMAL\n         OI    DSADWORD+7,X'0F'    MAKE UNSIGNED\n         UNPK  DSAMM,DSADWORD      CONVERT MONTH TO DISPLAY FORMAT\n         CVD   R5,DSADWORD         CONVERT DAY TO DECIMAL\n         OI    DSADWORD+7,X'0F'    MAKE UNSIGNED\n         UNPK  DSADD,DSADWORD      CONVERT DAY TO DISPLAY FORMAT\n         TM    DSA$RET,DSA$GDAT    IS DATE TO BE GREGORIAN?\n         BO    OUTDAT40              YS-GO TO GREGORIAN OUTPUT\n         MVC   PARMRET(4),DSAYYYY  BUILD EXTENDED YEAR\n         MVC   PARMRET+4(3),DSADDD BUILD JULIAN DAY\n         TM    DSA$RET,DSA$YEXT    EXTENDED YEAR?\n         BOR   FUNCLINK              YS-RETURN FROM ROUTINE\n         MVC   PARMRET(5),PARMRET+2  NO-BUILD NEW DATE\n         MVC   PARMRET+5(3),BLANKS      CLEAR REST OF FIELD\n         BR    FUNCLINK                 RETURN FROM ROUTINE\nOUTDAT40 DS    0H\n         MVC   PARMRET(2),DSAMM    BUILD MONTH\n         MVC   PARMRET+2(2),DSADD  BUILD DAY\n         MVC   PARMRET+4(4),DSAYYYY    BUILD EXTENDED YEAR\n         TM    DSA$RET,DSA$YEXT    EXTENDED YEAR?\n         BOR   FUNCLINK              YS-RETURN FROM ROUTINE\n         MVC   PARMRET+4(2),DSAYY    NO-BUILD NEW DATE\n         MVC   PARMRET+6(2),BLANKS      CLEAR REST OF FIELD\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         LTORG\n         DROP  FUNCBASE\n         EJECT\n*---------------------------------------------------------------------*\n*        VALUE OUTPUT PROCESSING ROUTINE                              *\n*---------------------------------------------------------------------*\nOUTVALU  DS    0H\n         USING OUTVALU,FUNCBASE    MAKE FUNCTION ADDRESSABLE\n         SR    R1,R1               CLEAR WORK REGISTER\n         ICM   R1,7,DSA@RET        GET VALUE\n         CVD   R1,DSADWORD         CONVERT TO PACKED DECIMAL\n         OI    DSADWORD+7,X'0F'    CHANGH SIGN TO POSITIVE\n         UNPK  PARMRET,DSADWORD    CONVERT TO ZONE NUMERIC\n         BR    FUNCLINK            RETURN FROM FUNCTION\n         DROP  FUNCBASE\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT216/FILE216.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT216", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}