{"INMR01": {"INMLRECL": 80, "INMFNODE": "BATAVIA", "INMFUID": "VHUTCH", "INMTNODE": "N17", "INMTUID": "VHUTCH", "INMFTIME": "20020624185214000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 27920, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "SFT1.DISASTER.BACKUP.JCL", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SFT1.DISASTER.BACKUP.JCL": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 27920, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 32, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "020175", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x1e'", "DS1LSTAR": "b'\\x00\\x12\\x07'", "DS1TRBAL": "b'\"\\x00'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x030\\x00\\x04\\x8b \\xb8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x030\\x00\\x04\\x8b \\xb8'", "b'X\\xf4b\\xd8\\x00\\x00\\x04\\x8f\\x00\\x06\\x04\\x90\\x00\\t\\x00\\x13'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"VBKDSTRL": {"ttr": 26, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//VBKDSTRL   JOB (6948),'D/R FLOOR TAPE',TYPRUN=HOLD,\n//       REGION=2048K,TIME=1439,\n//       CLASS=X,MSGCLASS=W,USER=VMAINT\n//SATOTAPE EXEC PGM=FDRSARLR,REGION=256K\n//SYSPRINT  DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//OBJIN     DD  DISP=SHR,DSN=OEM1.FDR.V53L58.ICLFDR53(SAROBJ)\n//OUTPUT    DD  DSN=DISASTER.RECOVER.LIBRARY.SAR(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(1,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             VOL=(,RETAIN)\n//SYSIN    DD   *\nCONSOLE DEVICE=3270\nCONSOLE UNIT=8C0\nHRDCOPY DEVICE=4245\nHRDCOPY UNIT=806\nOPERATION REQUEST=RESTORE\nTYPE=FULL\nINPUT TAPE DEVICE=3490\nINPUT TAPE UNIT=6F1\nOUTPUT DISK DEVICE=3390-3\n/*\n//*\n//* CREATE FILE OF UNLOAD JCL\n//*\n//JCLUNLOD EXEC PGM=IEBGENER\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  DUMMY\n//SYSUT2    DD  DSN=DISASTER.RECOVER.LIBRARY.JCL(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(2,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,RECFM=F,LRECL=80,\n//             BLKSIZE=80,TRTCH=NOCOMP),\n//             VOL=(,RETAIN,REF=*.SATOTAPE.OUTPUT)\n//SYSUT1    DD  DATA,DLM=$$\n//RECOVERY JOB (6948),'COPY LIBS TO DSN',TIME=60,CLASS=A,MSGCLASS=Q\n//STEP1    EXEC PGM=IDCAMS\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  *\n  DELETE (DISASTER.RECOVER.EXEC)     NONVSAM NOSCRATCH\n  DELETE (DISASTER.RECOVER.ISPANEL)  NONVSAM NOSCRATCH\n  DELETE (DISASTER.RECOVER.ISPSKEL)  NONVSAM NOSCRATCH\n  DELETE (DISASTER.RECOVER.ISPTABL)  NONVSAM NOSCRATCH\n  DELETE (DISASTER.RECOVER.JCLLIB)   NONVSAM NOSCRATCH\n/*\n//STEP2    EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=OLD,DSN=DISASTER.RECOVER.LIBRARY.FDR(0),\n//             UNIT=3490,\n//             LABEL=3,\n//             VOL=(,RETAIN)\n//OTFILE1   DD  DISP=(NEW,CATLG),\n//             DSN=DISASTER.FDR.LINKLIB,\n//             UNIT=SYSALLDA,\n//             VOL=SER=RESCUE,\n//             SPACE=(TRK,(90,10,40)),\n//             DCB=(DSORG=PO,RECFM=U,BLKSIZE=6144)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* RESTORE D/R ISPF APPLICATION REXX LIBRARY\n//*\n//STEP3    EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=OLD,DSN=DISASTER.RECOVER.LIBRARY.REXX(0),\n//             UNIT=3490,\n//             LABEL=4,\n//             VOL=(,RETAIN,REF=*.STEP2.INFILE1)\n//OTFILE1   DD  DISP=(NEW,CATLG,DELETE),\n//             DSN=DISASTER.RECOVER.EXEC,\n//             UNIT=SYSALLDA,\n//             VOL=SER=RESCUE,\n//             SPACE=(TRK,(30,10,10)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=4080)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* RESTORE D/R ISPF APPLICATION PANEL LIBRARY\n//*\n//STEP4    EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=OLD,DSN=DISASTER.RECOVER.LIBRARY.PANEL(0),\n//             UNIT=3490,\n//             LABEL=5,\n//             VOL=(,RETAIN,REF=*.STEP2.INFILE1)\n//OTFILE1   DD  DISP=(NEW,CATLG,DELETE),\n//             DSN=DISASTER.RECOVER.ISPANEL,\n//             UNIT=SYSALLDA,\n//             VOL=SER=RESCUE,\n//             SPACE=(TRK,(30,10,10)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=4080)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* RESTORE D/R ISPF APPLICATION SKELETON LIBRARY\n//*\n//STEP5    EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=OLD,DSN=DISASTER.RECOVER.LIBRARY.SKELS(0),\n//             UNIT=3490,\n//             LABEL=6,\n//             VOL=(,RETAIN,REF=*.STEP2.INFILE1)\n//OTFILE1   DD  DISP=(NEW,CATLG,DELETE),\n//             DSN=DISASTER.RECOVER.ISPSKEL,\n//             UNIT=SYSALLDA,\n//             VOL=SER=RESCUE,\n//             SPACE=(TRK,(30,10,25)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=4080)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* CREATE D/R ISPF APPLICATION TABLE LIBRARY\n//*\n//STEP6    EXEC PGM=IEFBR14\n//OTFILE1   DD  DISP=(NEW,CATLG,DELETE),\n//             DSN=DISASTER.RECOVER.ISPTABL,\n//             UNIT=SYSALLDA,\n//             VOL=SER=RESCUE,\n//             SPACE=(TRK,(30,10,25)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=4080)\n//*\n//* RESTORE D/R JCLLIB\n//*\n//STEP5    EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=OLD,DSN=DISASTER.RECOVER.LIBRARY.JCLLB(0),\n//             UNIT=3490,\n//             LABEL=7,\n//             VOL=(,RETAIN,REF=*.STEP2.INFILE1)\n//OTFILE1   DD  DISP=(NEW,CATLG,DELETE),\n//             DSN=DISASTER.RECOVER.JCLLIB,\n//             UNIT=SYSALLDA,\n//             VOL=SER=RESCUE,\n//             SPACE=(TRK,(30,10,10)),\n//             DCB=(DSORG=PO,RECFM=FB,LRECL=80,BLKSIZE=4080)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n$$\n/*\n//*\n//* CREATE IEBCOPY FILE OF CURRENT FDR 5.3 L25\n//*\n//FDRCOPY  EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=SHR,DSN=SYS2.FDR.V53L58.MODFDR53\n//OTFILE1   DD  DSN=DISASTER.RECOVER.LIBRARY.FDR(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(3,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             VOL=(,RETAIN,REF=*.SATOTAPE.OUTPUT)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* CREATE IEBCOPY FILE OF D/R ISPF REXX\n//*\n//REXX     EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=SHR,DSN=DISASTER.RECOVER.EXEC\n//OTFILE1   DD  DSN=DISASTER.RECOVER.LIBRARY.REXX(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(4,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             VOL=(,RETAIN,REF=*.SATOTAPE.OUTPUT)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* CREATE IEBCOPY FILE OF D/R ISPF PANELS\n//*\n//PANEL    EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=SHR,DSN=DISASTER.RECOVER.ISPANEL\n//OTFILE1   DD  DSN=DISASTER.RECOVER.LIBRARY.PANEL(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(5,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             VOL=(,RETAIN,REF=*.SATOTAPE.OUTPUT)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* CREATE IEBCOPY FILE OF D/R ISPF SKELETON JCL\n//*\n//SKELETON EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=SHR,DSN=DISASTER.RECOVER.ISPSKEL\n//OTFILE1   DD  DSN=DISASTER.RECOVER.LIBRARY.SKELS(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(6,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             VOL=(,RETAIN,REF=*.SATOTAPE.OUTPUT)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//*\n//* CREATE IEBCOPY FILE OF D/R JCLLIB\n//*\n//JCLLIB   EXEC PGM=IEBCOPY\n//SYSPRINT  DD  SYSOUT=*\n//INFILE1   DD  DISP=SHR,DSN=DISASTER.RECOVER.JCLLIB\n//OTFILE1   DD  DSN=DISASTER.RECOVER.LIBRARY.JCLLB(+1),\n//             DISP=(NEW,CATLG,DELETE),\n//             UNIT=TAPE,LABEL=(7,SL,EXPDT=99000),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             VOL=(,RETAIN,REF=*.SATOTAPE.OUTPUT)\n//SYSUT3    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSUT4    DD  UNIT=SYSDA,SPACE=(TRK,(4,2))\n//SYSIN     DD  *\n  COPY INDD=INFILE1,OUTDD=OTFILE1\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VBKDSTRP": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//VBKDSTRP   JOB (6948),'TMS PRINT D/R TAPES',\n//       TYPRUN=HOLD,\n//       TIME=120,CLASS=X,MSGCLASS=W,USER=VMAINT\n/*JOBPARM LINES=9999\n//*\n//*  Build REXX exec on-the-fly PDS to hold REXX Execs\n//*\n//REXXPDS  EXEC PGM=IEBGENER\n//SYSPRINT  DD  SYSOUT=*\n//SYSIN     DD  DUMMY\n//SYSUT2    DD  DSN=&&REXX(DUMMY),\n//             DISP=(NEW,PASS),UNIT=SYSDA,\n//             DCB=(LRECL=80,RECFM=FB,BLKSIZE=8000),\n//             SPACE=(TRK,(15,5,10))\n//SYSUT1    DD  *\nDummy Record as place holder in PDS Build Process\n/*\n//*\n//*  Build REXX exec to strip TMC data gathered from CA-1 database\n//*\n//REXX1    EXEC PGM=IEBGENER\n//SYSIN     DD  DUMMY\n//SYSUT2    DD  DSN=&&REXX(TMCSTRIP),\n//             DISP=(OLD,PASS)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DATA,DLM=##\n/*  REXX exec to strip TMC information ------------------------------*/\n/*  written:  March 26 2002                                          */\n/*  author :  Thomas Hutchins                                        */\n/*  Panels :                                                         */\n/*  Help   :                                                         */\n/*  Message:                                                         */\n/*  Changes:  V1.0 -- Initial functions                              */\n/*-------------------------------------------------------------------*/\narg parm\n\n  /*---------------------------------------------------------------*/\n  /* turn off tso messages                                         */\n  /*---------------------------------------------------------------*/\nmsgstat = msg('OFF')\n\n  /*----------------------------------------------------------------*/\n  /*    Read lines of Input Dataset                                 */\n  /*----------------------------------------------------------------*/\n\n  'EXECIO * DISKR TMCIN 1 ( FINIS STEM mline.'\n\n  /*---------------------------------------------------------------*/\n  /*  Process lines of data                                        */\n  /*---------------------------------------------------------------*/\n\n  do i = 1 to mline.0             /* process every line            */\n\n    /* Check for active flag                                       */\n    /* If not active discard and go get another record             */\n    expand8 = X2B(C2X(substr(mline.i,85,1)))\n    if left(expand8,1) == '1' then iterate\n\n    /* Check that the dataset hi-level node is DISASTER            */\n    /* If it is not discard and go get another record              */\n    if substr(mline.i,7,9) /= 'DISASTER.' then iterate\n\n    /* Strip TMC information that will be passed from record       */\n    OUTLVOL = substr(mline.i,1,6)      /* VOLSER                   */\n    OUTLDSN = substr(mline.i,7,44)     /* DATASET NAME             */\n    OUTLSEQ = substr(mline.i,55,2)     /* VOLUME SEQUENCE          */\n    OUTLCDE = substr(mline.i,109,4)    /* LOCATION                 */\n    OUTLFIL = substr(' ',1,3)          /* Filler                   */\n    OUTLSLT = substr(mline.i,113,4)    /* SLOT NUMBER              */\n    OUTLDTE = substr(mline.i,117,4)    /* CREATE DATE              */\n\n    /* create normalized create date for printing                  */\n    erg = c2x(OUTLDTE)                                /* chg to hex */\n    CMP_strg = left(erg,length(erg)-1)                /* less sign  */\n    CMP_juln = right(CMP_strg,length(CMP_strg)-2)     /* julian date*/\n    OUTPDTE  = date(\"N\", CMP_juln ,\"J\")               /* prnt date  */\n\n    /* Build output record from passed information                 */\n    fline = OUTLVOL||OUTLDSN||OUTLSEQ||OUTLCDE||OUTLFIL\n    fline = fline||OUTLSLT||OUTLDTE||OUTPDTE\n\n    /* FIFO queue the built line for writing                       */\n    queue fline\n\n  end\n\n  queue ''                           /* null line EOF: FIFO stack   */\n\n /*----------------------------------------------------------------*/\n /*    Write lines out from the stack to the output data set       */\n /*----------------------------------------------------------------*/\n\n 'EXECIO * DISKW TMCOUT  (FINIS'\n\n  return\n##\n//*\n//*  Build REXX exec to strip DSNB data gathered from CA-1 database\n//*\n//REXX2    EXEC PGM=IEBGENER\n//SYSIN     DD  DUMMY\n//SYSUT2    DD  DSN=&&REXX(DSNBSTRP),\n//             DISP=(OLD,PASS)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DATA,DLM=##\n/*  REXX exec to strip DSNB information -----------------------------*/\n/*  written:  March 27 2002                                          */\n/*  author :  Thomas Hutchins                                        */\n/*  Panels :                                                         */\n/*  Help   :                                                         */\n/*  Message:                                                         */\n/*  Changes:  V1.0 -- Initial functions                              */\n/*-------------------------------------------------------------------*/\narg parm\n\n  /*---------------------------------------------------------------*/\n  /* turn off tso messages                                         */\n  /*---------------------------------------------------------------*/\nmsgstat = msg('OFF')\n\n  /*----------------------------------------------------------------*/\n  /*    Read lines of Input Dataset                                 */\n  /*----------------------------------------------------------------*/\n\n  'EXECIO * DISKR TMCIN 1 ( FINIS STEM mline.'\n\n  /*---------------------------------------------------------------*/\n  /*  Process lines of data                                        */\n  /*---------------------------------------------------------------*/\n\n  do i = 1 to mline.0             /* process every line            */\n\n    /* Check for active flag                                       */\n    /* If not active discard and go get another record             */\n    expand8 = X2B(C2X(substr(mline.i,2,1)))\n    if left(expand8,1) /= '1' then iterate\n\n    /* Check that the dataset hi-level node is DISASTER            */\n    /* If it is not discard and go get another record              */\n    if substr(mline.i,31,9) /= 'DISASTER.' then iterate\n\n    /* strip DSNB information that will be passed from record      */\n    OUTLVOL = substr(mline.i,17,6)     /* VOLSER                   */\n    OUTLDSN = substr(mline.i,31,44)    /* DATASET NAME             */\n    OUTLSEQ = substr(mline.i,29,2)     /* VOLUME SEQUENCE          */\n    OUTLCDE = substr(' ',1,4)          /* LOCATION        - blank  */\n    OUTLFIL = substr(' ',1,3)          /* Filler          - blank  */\n    OUTLSLT = x2c('00000000')          /* SLOT NUMBER     - zero   */\n    OUTLDTE = substr(mline.i,79,4)     /* CREATE DATE              */\n\n    /* create normalized create date for printing                  */\n    erg = c2x(OUTLDTE)                                /* chg to hex */\n    CMP_strg = left(erg,length(erg)-1)                /* less sign  */\n    CMP_juln = right(CMP_strg,length(CMP_strg)-2)     /* julian date*/\n    OUTPDTE  = date(\"N\", CMP_juln ,\"J\")               /* prnt date  */\n\n    /* Build output record from passed information                 */\n    fline = OUTLVOL||OUTLDSN||OUTLSEQ||OUTLCDE||OUTLFIL\n    fline = fline||OUTLSLT||OUTLDTE||OUTPDTE\n\n    /* FIFO queue the built line for writing                       */\n    queue fline\n\n  end\n\n  queue ''                           /* null line EOF: FIFO stack   */\n\n /*----------------------------------------------------------------*/\n /*    Write lines out from the stack to the output data set       */\n /*----------------------------------------------------------------*/\n\n 'EXECIO * DISKW TMCOUT  (FINIS'\n\n  return\n##\n//*\n//*  Build REXX exec to extract immediate pull information\n//*\n//REXX3    EXEC PGM=IEBGENER\n//SYSIN     DD  DUMMY\n//SYSUT2    DD  DSN=&&REXX(PULLEXTR),\n//             DISP=(OLD,PASS)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DATA,DLM=##\n/*  REXX exec to pull immediate need tapes---------------------------*/\n/*  written:  March 27 2002                                          */\n/*  author :  Thomas Hutchins                                        */\n/*  Panels :                                                         */\n/*  Help   :                                                         */\n/*  Message:                                                         */\n/*  Changes:  V1.0 -- Initial functions                              */\n/*-------------------------------------------------------------------*/\narg parm\n\n  /*---------------------------------------------------------------*/\n  /* turn off tso messages                                         */\n  /*---------------------------------------------------------------*/\nmsgstat = msg('OFF')\n\n  /*----------------------------------------------------------------*/\n  /*    Get comparative date                                        */\n  /*----------------------------------------------------------------*/\n\n  base_date = DATE('B')            /* Base date of today            */\n  daynum = base_date//7            /* Mon=0 ... Sun=6               */\n\n  if daynum = 6 then               /* Compute day of week index     */\n    daynum = 0                     /* Sunday is what we are looking */\n  else                             /* for.  All indexes are from    */\n    daynum = daynum + 1            /* Sunday's date                 */\n\n  base_date = base_date - daynum   /* Compute Sunday's date         */\n                                   /* relative to todays date       */\n\n  /* Convert to Julian date for comparison                          */\n  Scc = left(date(\"S\", base_date, \"B\"), 4)            /* yyyy       */\n  Syy = left(date(\"O\", base_date, \"B\"), 2)            /* yy         */\n  Sddd =  right(date(\"D\", base_date, \"B\"), 3, \"0\")    /* ddd        */\n  Sund_date = Scc || Syy || Sddd\n\n  /*----------------------------------------------------------------*/\n  /*    Read lines of Input Dataset                                 */\n  /*----------------------------------------------------------------*/\n\n  'EXECIO * DISKR PULIN 1 ( FINIS STEM mline.'\n\n  /*---------------------------------------------------------------*/\n  /*  Process lines of data                                        */\n  /*---------------------------------------------------------------*/\n\n  do i = 1 to mline.0             /* process every line            */\n\n    /* Strip TMC information that will be passed from record       */\n    OUTLVOL = substr(mline.i,1,6)      /* VOLSER                   */\n    OUTLDSN = substr(mline.i,7,44)     /* DATASET NAME             */\n    OUTLSEQ = substr(mline.i,51,2)     /* VOLUME SEQUENCE          */\n    OUTLCDE = substr(mline.i,53,4)     /* LOCATION                 */\n    OUTLFIL = substr(mline.i,57,3)     /* Filler                   */\n    OUTLSLT = substr(mline.i,60,4)     /* SLOT NUMBER              */\n    OUTLDTE = substr(mline.i,64,4)     /* CREATE DATE              */\n    OUTPDTE = substr(mline.i,68,11)    /* CREATE DATE - print fmt  */\n\n    /* Check for IPL Sar tape regardless of date                   */\n    if substr(OUTLDSN,1,17) == 'DISASTER.FDR.TAPE' then\n      do\n        /* FIFO queue the line for writing                         */\n        queue mline.i\n        iterate\n      end\n\n    /* compute unpacked create date for comparison                 */\n    erg = c2x(OUTLDTE)                                /* chg to hex */\n    sign = right(erg,1)                               /* get sign   */\n    CMP_strg = left(erg,length(erg)-1)                /* less sign  */\n    CMP_cent = 1900 + (100 * left(CMP_strg,2))        /* century    */\n    CMP_juln = right(CMP_strg,length(CMP_strg)-2)     /* julian date*/\n    CMP_july = left(CMP_juln,2)                       /* juln year  */\n    CMP_cent = CMP_cent + CMP_july                    /* make yyyy  */\n    CMP_DATE = CMP_cent || CMP_juln                   /* comp date  */\n    if sign = 'D' then                                /* minus sign */\n       CMP_DATE = '-'||CMP_DATE\n\n    /* Compare for tapes greater than or equal to Sunday's date     */\n    if CMP_DATE < Sund_date then\n      iterate\n\n    /* FIFO queue the built line for writing                       */\n    queue mline.i\n\n  end\n\n  queue ''                           /* null line EOF: FIFO stack   */\n\n /*----------------------------------------------------------------*/\n /*    Write lines out from the stack to the output data set       */\n /*----------------------------------------------------------------*/\n\n 'EXECIO * DISKW PULOUT  (FINIS'\n\n  return\n##\n//*\n//*  SETUP TO GENERATE DATASETS FROM WHICH TO GENERATE USER RPTS\n//*\n//STRPTMS  EXEC PGM=TMSDATA\n//SYSUT1    DD  DSN=OEM1.CA1.TMC,DISP=SHR\n//SYSUT3    DD  DSN=&&STMC,DISP=(NEW,PASS),\n//             SPACE=(TRK,(300,5),RLSE),UNIT=SYSDA,\n//             DCB=(BLKSIZE=8840,BUFNO=4)\n//SYSUT4    DD  DSN=&&SDSN,DISP=(NEW,PASS),\n//             SPACE=(TRK,(300,5),RLSE),UNIT=SYSDA,\n//             DCB=(BLKSIZE=9010,BUFNO=4)\n//TMSRPT    DD  SYSOUT=*\n//SYSUT4    DD  DUMMY,DCB=BLKSIZE=9010\n//SYSPRINT  DD  SYSOUT=*\n//SYSOUT    DD  SYSOUT=*\n//SORTLIB   DD  DSN=SYS1.SORTLIB,DISP=SHR\n//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,15)\n//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,15)\n//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,15)\n//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,15)\n//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,15)\n//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,15)\n//SYSUDUMP  DD  SYSOUT=A\n//SYSIN     DD  *\nSORTTMC CDATE(D),DSN(A),VOLSEQ(A)\nSORTDSNB CDATE(D),DSN(A)\n/*\n//*\n//* Execute REXX exec to strip TMC information and report\n//*\n//TMCSTRIP EXEC PGM=IKJEFT01,PARM=TMCSTRIP\n//SYSPROC   DD  DSNAME=*.REXX1.SYSUT2,DISP=(OLD,PASS)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  DUMMY\n//TMCIN   DD DISP=(OLD,PASS),UNIT=VIO,\n//             DSN=&&STMC\n//TMCOUT  DD DISP=(NEW,PASS),UNIT=VIO,\n//             DSN=&&MREC,\n//             SPACE=(TRK,(15,15),RLSE),\n//             RECFM=FB,LRECL=80,BLKSIZE=0\n//*\n//* Execute REXX exec to strip DSNB information and report\n//*\n//DSNBSTRP EXEC PGM=IKJEFT01,PARM=DSNBSTRP\n//SYSPROC   DD  DSNAME=*.REXX2.SYSUT2,DISP=(OLD,PASS)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  DUMMY\n//TMCIN   DD DISP=(OLD,PASS),UNIT=VIO,\n//             DSN=&&SDSN\n//TMCOUT  DD DISP=(NEW,PASS),UNIT=VIO,\n//             DSN=&&DSNB,\n//             SPACE=(TRK,(15,15),RLSE),\n//             RECFM=FB,LRECL=80,BLKSIZE=0\n//*\n//*  SORT DATASET RECORDS BY CREATE DATE DESCENDING\n//*                            FILE NAME ASCENDING\n//SORT1    EXEC PGM=SORT,TIME=120\n//SYSOUT    DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//SORTIN    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&MREC\n//          DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&DSNB\n//SORTOUT   DD  DISP=(NEW,PASS),DSN=&&TEMP,\n//             SPACE=(TRK,(300,30)),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=4080)\n//SYSIN     DD  *\n SORT FIELDS=(64,4,BI,D,7,44,CH,A)\n/*\n//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//*\n//* Execute REXX exec to extract immediate pull tapes for recovery\n//*\n//PULLEXTR EXEC PGM=IKJEFT01,PARM=PULLEXTR\n//SYSPROC   DD  DSNAME=*.REXX3.SYSUT2,DISP=(OLD,PASS)\n//SYSPRINT  DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//SYSTSPRT  DD  SYSOUT=*\n//SYSTSIN   DD  DUMMY\n//PULIN   DD DISP=(OLD,PASS),UNIT=VIO,\n//             DSN=&&TEMP\n//PULOUT  DD DISP=(NEW,PASS),UNIT=VIO,\n//             DSN=&&PXTR,\n//             SPACE=(TRK,(15,15),RLSE),\n//             RECFM=FB,LRECL=80,BLKSIZE=0\n//*\n//*  CREATE REPORT OF DISASTER RECOVER TAPE DATASETS THAT\n//*  CAN BE PULLED IMMEDIATELY\n//*\n//PULLREPT EXEC PGM=QUIKJOB,TIME=30\n//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PXTR\n//SYSPRINT  DD  DSN=&&PRNT,DISP=(NEW,PASS),\n//             SPACE=(TRK,(300,30)),UNIT=SYSDA,\n//             DCB=(RECFM=FBA,LRECL=133,BLKSIZE=4522)\n//SYSIN     DD  *\nOPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO\n*\nEQU  OUTLVOL   INF1-6             /* VOLSER              1  6\nEQU  OUTLDSN   INF7-50            /* DATASET NAME        7 44\nEQU  OUTLSEQ   INF51-52-B         /* VOLUME SEQUENCE    51  2\nEQU  OUTLCDE   INF53-56           /* LOCATION           53  4\nEQU  OUTLSLT   INF60-63-B         /* SLOT NUMBER        60  4\nEQU  OUTLDTE   INF64-67-P         /* CREATE DATE        64  4\nEQU  OUTPDTE   INF68-78           /* CREATE DATE - prnt 68 11\n*\n* REPORT TITLES\n*\nTITLE1 'AGCO CORPORATION'\nTITLE2 'IMMEDIATE DISASTER/RECOVERY TAPES'\n*\n* SET UP REPORTS\n*\nREPORT OUTLVOL (CART-VOLUME)\n       OUTLDSN (DATASET-NAME)\n       OUTLSEQ (SEQ-NUMBER)\n       OUTLCDE (LOCATION)\n       OUTLSLT (LOCATION-SLOT)\n       OUTPDTE (CREATE-DATE)\nBREAK 1 OUTLDTE SB 1 SA 1\n*\n* PROCESSING SECTION\n*\n010 GET INF ATEND EOJ\n*\n    CHECKBREAKS\n    PRINT REPORT\n    GOTO 10.\n*\n*   END OF DATA PROCESSING\n*\n999 END\n/*\n//*\n//*  SORT DATASET RECORDS BY VOLSER ASCENDING, SEQUENCE ASCENDING\n//*\n//SORT2    EXEC PGM=SORT,TIME=120\n//SYSOUT    DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=*\n//SORTIN    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PXTR\n//SORTOUT   DD  DISP=(NEW,PASS),DSN=&&PXTS,\n//             SPACE=(TRK,(300,30)),UNIT=SYSDA,\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=4080)\n//SYSIN     DD  *\n SORT FIELDS=(1,6,CH,A,51,2,CH,A)\n/*\n//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,10)\n//*\n//*  CREATE REPORT OF DISASTER RECOVER TAPE DATASETS THAT\n//*  CAN BE PULLED IMMEDIATELY BY VOLSER AS CHECKLIST\n//*  DO NOT SHOW DUPLICATE VOLSERS\n//*\n//PULLREP2 EXEC PGM=QUIKJOB,TIME=30\n//SYSUT1    DD  DISP=(OLD,DELETE),UNIT=SYSDA,DSN=&&PXTS\n//SYSPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSIN     DD  *\nOPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO\n*\nEQU  VOLXER    WST1-6             /* VOLSER              1  6\n*\nEQU  OUTLVOL   INF1-6             /* VOLSER              1  6\nEQU  OUTLDSN   INF7-50            /* DATASET NAME        7 44\nEQU  OUTLSEQ   INF51-52-B         /* VOLUME SEQUENCE    51  2\nEQU  OUTLCDE   INF53-56           /* LOCATION           53  4\nEQU  OUTLSLT   INF60-63-B         /* SLOT NUMBER        60  4\nEQU  OUTLDTE   INF64-67-P         /* CREATE DATE        64  4\nEQU  OUTPDTE   INF68-78           /* CREATE DATE - prnt 68 11\n*\n* REPORT TITLES\n*\nTITLE1 'AGCO CORPORATION'\nTITLE2 'IMMEDIATE DISASTER/RECOVERY TAPE CHECKLIST'\n*\n* SET UP REPORTS\n*\nREPORT OUTLVOL (CART-VOLUME)\n       OUTLDSN (DATASET-NAME)\n       OUTLSEQ (SEQ-NUMBER)\n       OUTLCDE (LOCATION)\n       OUTLSLT (LOCATION-SLOT)\n       OUTPDTE (CREATE-DATE)\n*\n* PROCESSING SECTION\n*\n    GET INF\n    MOVE OUTLVOL TO VOLXER\n    PRINT REPORT\n*\n010 GET INF ATEND EOJ\n*\n    IF OUTLVOL EQ VOLXER\n      GOTO 10.\n*\n    MOVE OUTLVOL TO VOLXER\n    PRINT REPORT\n    GOTO 10.\n*\n*   END OF DATA PROCESSING\n*\n999 END\n/*\n//*\n//*  CREATE REPORT OF DISASTER RECOVER TAPE DATASETS\n//*\n//TAPEREPT EXEC PGM=QUIKJOB,TIME=30\n//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&TEMP\n//SYSPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSIN     DD  *\nOPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO\n*\nEQU  OUTLVOL   INF1-6             /* VOLSER              1  6\nEQU  OUTLDSN   INF7-50            /* DATASET NAME        7 44\nEQU  OUTLSEQ   INF51-52-B         /* VOLUME SEQUENCE    51  2\nEQU  OUTLCDE   INF53-56           /* LOCATION           53  4\nEQU  OUTLSLT   INF60-63-B         /* SLOT NUMBER        60  4\nEQU  OUTLDTE   INF64-67-P         /* CREATE DATE        64  4\nEQU  OUTPDTE   INF68-78           /* CREATE DATE - prnt 68 11\n*\n* REPORT TITLES\n*\nTITLE1 'AGCO CORPORATION'\nTITLE2 'DISASTER/RECOVERY TAPES'\n*\n* SET UP REPORTS\n*\nREPORT OUTLVOL (CART-VOLUME)\n       OUTLDSN (DATASET-NAME)\n       OUTLSEQ (SEQ-NUMBER)\n       OUTLCDE (LOCATION)\n       OUTLSLT (LOCATION-SLOT)\n       OUTPDTE (CREATE-DATE)\nBREAK 1 OUTLDTE SB 1 SA 1\n*\n* PROCESSING SECTION\n*\n010 GET INF ATEND EOJ\n*\n    CHECKBREAKS\n    PRINT REPORT\n    GOTO 10.\n*\n*   END OF DATA PROCESSING\n*\n999 END\n/*\n//*\n//*  PRODUCE LISTCAT OF DISASTER/RECOVERY CATALOG\n//*\n//LISTCAT  EXEC PGM=IDCAMS\n//SYSPRINT  DD  DSN=&&LSTC,DISP=(NEW,PASS),\n//             SPACE=(TRK,(300,5),RLSE),UNIT=SYSDA,\n//             DCB=(RECFM=VBA,LRECL=125,BLKSIZE=4504)\n//SYSIN     DD  *\n  LISTCAT LVL(DISASTER) VOLUME CAT(UCAT.DISASTER)\n/*\n//*\n//*  CONCATENATE LISTCAT REPORT TO D/R TAPE REPORT\n//*\n//MERGERPT EXEC PGM=QUIKJOB,TIME=30\n//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&LSTC\n//SYSPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSIN     DD  *\nOPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO\n*\n* PROCESSING SECTION\n*\n010 GET INF ATEND EOJ\n*\n    MOVE SPACES TO PRT1-132.\n*\n    MOVE INF1-2-B TO WST1-2-B.\n    SUB C'5' FR WST1-2-B.\n    MOVE INF6 TO PRT1 WST1-2-B.\n    SET PCC INF5.\n    PRINT.\n    GOTO 10.\n*\n*   END OF DATA PROCESSING\n*\n999 END\n/*\n//*\n//*  PRINT SUPERVTOC LISTING OF ALL DASD VOLUMES\n//*\n//FDRVTOC  EXEC PGM=FDREPORT\n//SYSPRINT  DD  SYSOUT=*\n//ABRMAP    DD  DISP=(NEW,PASS),\n//             DSN=&&VTOC,\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(5,5),RLSE),\n//             DCB=(RECFM=FBA,LRECL=133,BLKSIZE=23142)\n//SORTWK01  DD  SPACE=(TRK,60,,CONTIG),UNIT=SYSDA\n//SORTWK02  DD  SPACE=(TRK,60,,CONTIG),UNIT=SYSDA\n//SORTWK03  DD  SPACE=(TRK,60,,CONTIG),UNIT=SYSDA\n//SYSIN     DD  *\n  DEFAULT PAGEWIDTH=132\n  TITLE   LINE='CONTENTS OF VTOC'\n  SELECT  VOLG=(C,H,O2A,PA,S,T,V,R)\n  EXCLUDE DSN=****VTOC\n  REPORT  FIELD=(NAME,DSORG,RECFM,BLKSIZE,LRECL,NOEXTENT,SECALLOC,\n           %USED,SIZE,CRDATE,LRDATE,VOL)\n  PRINT   SORT=NO\n/*\n//*\n//QIKPRNT1 EXEC PGM=QUIKJOB,TIME=30\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DISP=(OLD,PASS),DSN=&&VTOC\n//SYSUT2    DD  DSN=&&VTOC1,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(CYL,(2,2)),\n//            DCB=(RECFM=FB,LRECL=100,BLKSIZE=4500)\n//SYSIN     DD  *\nOPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO\nEQU  IN-DSN    INF2-45            /* DATASET NAME\nEQU  IN-DSORG  INF47-49           /* DATASET ORGANIZATION\nEQU  IN-RECFM  INF51-53           /* RECORD FORMAT\nEQU  IN-BLKSIZ INF57-61           /*        BLOCK SIZE\nEQU  IN-LRECL  INF63-67           /*        LRECL\nEQU  IN-XTNT   INF69-71           /* EXTENTS\nEQU  IN-TRACKS INF86-90           /* TOTAL ALLOCATED TRACKS\nEQU  IN-CDATE  INF92-99           /* CREATE DATE\nEQU  IN-ADATE  INF101-108         /* ACCESS DATE\n*\nEQU  WORKAREA  WST                /*\nEQU  SCANVAL   (4)-B              /* FILE NAME PERIOD SCAN\nEQU  LEVEL     (8)                /* DATASET HI-LEVEL QUALIFIER\nEQU  VOLSER    (6)                /* VOLSER\nEQU  VOLSERX   (LEVEL)          /* REDEFINES PRIOR FIELD ALIGNMENT\nEQU  VOLSERF3  (3)                /* VOLSER FIRST 3\nEQU  VOLSERL3  (3)                /* VOLSER LAST  3\nEQU  OUTLINE   (85)               /* OUTPUT LINE\nEQU  OUTLFILL  (VOLSER)         /* REDEFINES PRIOR FIELD ALIGNMENT\nEQU  OUTLDSN   (44)               /* DATASET NAME        1 44\nEQU  OUTLVOL   (6)                /* VOLSER             45  6\nEQU  OUTLDSO   (3)                /* DSORG              51  3\nEQU  OUTLRCF   (3)                /* RECFM              54  3\nEQU  OUTLBLK   (5)                /* BLOCKSIZE          57  5\nEQU  OUTLRCL   (6)                /* LOGICAL REC LENGTH 62  6\nEQU  OUTLTRK   (6)                /* ALLOCATED TRACKS   68  6\nEQU  OUTLACC   (8)                /* LAST ACCESSED      74  8\nEQU  OUTLEVL   (8)                /* HILEVEL QUALIFIER  82  8\n*\n* PROCESSING SECTION\n*\n010 GET INF ATEND 900\n*\n    IF INF1  IS EQ TO C'1'       /* DELETE\n      GO TO 10.\n    IF INF1-2 IS EQ TO C'0 '     /* DELETE\n      GO TO 10.\n    IF INF1-2 IS EQ TO C'  '     /* DELETE\n      GO TO 10.\n    IF INF1-11 IS EQ TO C' ENTRY NAME'  /* DELETE\n      GO TO 10.\n    IF INF1-11 IS EQ TO C' ----------'  /* DELETE\n      GO TO 10.\n    IF INF2-7  IS EQ TO C'***ABR'       /* DELETE\n      GO TO 10.\n*\n*\n    MOVE INF110-115 TO VOLSER.\n*\n*\n    MOVE SPACES     TO LEVEL.\n    WHEN IN-DSN INCLUDES C'.'\n      MOVE IN-DSN TO LEVEL VAL225-228-B.\n    IF LEVEL IS EQUAL TO SPACES\n      MOVE INF2-9 TO LEVEL.\n*\n    MOVE SPACES     TO OFA1-90.\n    MOVE SPACES     TO OUTLINE.\n    MOVE IN-DSN     TO OUTLDSN.\n    MOVE VOLSER     TO OUTLVOL.\n    MOVE IN-DSORG   TO OUTLDSO.\n    MOVE IN-RECFM   TO OUTLRCF.\n    MOVE IN-BLKSIZ  TO OUTLBLK.\n    MOVE IN-LRECL   TO OUTLRCL.\n    MOVE IN-TRACKS  TO OUTLTRK.\n    MOVE IN-ADATE   TO OUTLACC.\n    MOVE LEVEL      TO OUTLEVL.\n    MOVE OUTLINE    TO OFA1-90.\n    WRITE OFA.\n    GO TO 10.\n*\n*   END OF DATA PROCESSING\n*\n900 GO TO EOJ.\n999 END\n/*\n//*\n//SORTDSN  EXEC PGM=SORT\n//SYSOUT    DD  SYSOUT=*\n//SYSUDUMP  DD  SYSOUT=A\n//SORTIN    DD  DISP=(OLD,PASS),DSN=&&VTOC1,UNIT=SYSDA\n//SORTOUT   DD  DSN=&&VTOC2,DISP=(NEW,PASS),\n//            UNIT=SYSDA,\n//            SPACE=(CYL,(2,2)),\n//            DCB=(RECFM=FB,LRECL=100,BLKSIZE=4500)\n//SYSIN     DD  *\n SORT FIELDS=(1,44,CH,A)\n//SORTWK01  DD  UNIT=SYSDA,SPACE=(CYL,30)\n//SORTWK02  DD  UNIT=SYSDA,SPACE=(CYL,30)\n//SORTWK03  DD  UNIT=SYSDA,SPACE=(CYL,30)\n//SORTWK04  DD  UNIT=SYSDA,SPACE=(CYL,30)\n//SORTWK05  DD  UNIT=SYSDA,SPACE=(CYL,30)\n//SORTWK06  DD  UNIT=SYSDA,SPACE=(CYL,30)\n//*\n//QIKPRNT2 EXEC PGM=QUIKJOB,TIME=30\n//RPTPRINT  DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DISP=(OLD,PASS),DSN=&&VTOC2\n//SYSUT2    DD  SYSOUT=*\n//SYSIN     DD  *\nOPTION SEQCHK=NO,RPTDD=RPTPRINT,LISTOPT=NO,LIST=NO,PFLEOPT=NO\nEQU  IN-DSN    INF1-44            /* DATASET NAME\nEQU  IN-VOLSER INF45-50           /* VOL SER\nEQU  IN-DSORG  INF51-53           /* DATASET ORGANIZATION\nEQU  IN-RECFM  INF54-56           /* RECORD FORMAT\nEQU  IN-BLKSIZ INF57-61           /*        BLOCK SIZE\nEQU  IN-LRECL  INF62-67           /*        LRECL\nEQU  IN-TRACKS INF68-73           /* TOTAL ALLOCATED TRACKS\nEQU  IN-ADATE  INF74-81           /* ACCESS DATE\nEQU  IN-LEVEL  INF82-89           /* HI LEVEL QUAL\n*\nEQU  WORKAREA  WST                /*\nEQU  LEVEL     (7)                /* LEVEL BREAK\n*\n* REPORT SECTION\n*\nTITLE 'AGCO DISASTER/RECOVERY DATASET PLACEMENT'\nREPORT IN-DSN (DATASET NAME) IN-VOLSER (VOLSER) IN-DSORG (DSORG)\n       IN-RECFM (RECFM) IN-BLKSIZ (BLKSIZE) IN-LRECL(LRECL)\n       IN-TRACKS (ALLOCATED-TRACKS) IN-ADATE (LAST REFERENCED-DATE)\n*\n* PROCESSING SECTION\n*\n001 GET INF\n    MOVE IN-LEVEL TO LEVEL.\n    GO TO 20.\n*\n010 GET INF ATEND 900\n*\n020 SET PCC SINGLESPACE.\n*\n    IF IN-LEVEL IS NOT EQ TO LEVEL\n      MOVE IN-LEVEL TO LEVEL\n      SET PCC TRIPLESPACE.\n*\n    PRINT REPORT.\n    GO TO 10.\n*\n*   END OF DATA PROCESSING\n*\n900 GO TO EOJ.\n999 END\n/*\n//*\n//*  REPORT ON SYSRES MEMBER IN DISASTER.RECOVER.JCLLIB\n//*\n//QIKPRNT3 EXEC PGM=QUIKJOB,TIME=30\n//SYSPRINT  DD  SYSOUT=*\n//SYSUT1    DD  DISP=SHR,DSN=DISASTER.RECOVER.JCLLIB(SYSRES)\n//SYSUT2    DD  DISP=(MOD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSIN     DD  *\nOPTION SEQCHK=NO,LISTOPT=NO,LIST=NO,PFLEOPT=NO\nEQU  IN-MEM    INF1-80            /* SYSRES LINE INFORMATION\n*\nEQU  OUT-CC    OFA1               /* OUTPUT CARRIAGE CONTROL CHAR\nEQU  OUT-MEM   OFA2-81            /* OUTPUT LINE\nEQU  OUT-FILL  OFA82-133          /* OUTPUT LINE\n*\n* PROCESSING SECTION\n*\n    MOVE C'1' TO OFA1.\n    MOVE BLANKS TO OFA2-133.\n    MOVE C'AGCO DISASTER/RECOVERY ' TO OFA2-25.\n    MOVE C'SYSIPL INFORMATION' TO OFA26-42.\n    WRITE OFA.\n*\n    MOVE C'0' TO OFA1.\n    MOVE BLANKS TO OFA2-133.\n    WRITE OFA.\n    MOVE C'0' TO OFA1.\n    MOVE BLANKS TO OFA2-133.\n    WRITE OFA.\n*\n100 GET INF\n    MOVE C' ' TO OUT-CC.\n    MOVE IN-MEM TO OUT-MEM.\n    WRITE OFA.\n    GO TO 100.\n*\n999 END\n/*\n//*\n//*  PRINT DISASTER/RECOVERY LISTINGS FOR VAULT\n//*\n//VAULT    EXEC PGM=IEBGENER\n//SYSPRINT  DD  SYSOUT=Z\n//SYSIN     DD  DUMMY\n//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSUT2    DD  SYSOUT=A,SPIN=UNALLOC\n//*\n//*  PRINT DISASTER/RECOVERY LISTINGS FOR DATACENTER\n//*\n//DATACNTR EXEC PGM=IEBGENER\n//SYSPRINT  DD  SYSOUT=Z\n//SYSIN     DD  DUMMY\n//SYSUT1    DD  DISP=(OLD,PASS),UNIT=SYSDA,DSN=&&PRNT\n//SYSUT2    DD  SYSOUT=A,SPIN=UNALLOC\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VBKDSTRT": {"ttr": 22, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//VBKDSTRT JOB (6948),'D/R BKUP TMC',CLASS=X,MSGCLASS=W,TYPRUN=HOLD,\n//       USER=VMAINT,REGION=4M\n//*\n//* AGCO D/R TMS BACKUP CA1 TMC\n//*\n//TMSCOPY  EXEC PGM=TMSCOPY,PARM='BACKUP'\n//TMSRPT    DD  SYSOUT=*\n//AUDITDD   DD  DSN=OEM1.CA1.AUDIT,DISP=SHR,DCB=BUFNO=3\n//DUMPDD    DD  DSN=DISASTER.CA1BKUP.TMC1(+1),\n//             DISP=(,CATLG,DELETE),UNIT=TAPE,LABEL=EXPDT=99000,\n//             DCB=(MODL.DSCB,DSORG=PS,RECFM=FB,LRECL=340,\n//             BLKSIZE=32640,TRTCH=NOCOMP)\n//DUMPDD2   DD  DSN=DISASTER.CA1BKUP.TMC2(+1),\n//             DISP=(,CATLG,DELETE),UNIT=TAPE,LABEL=EXPDT=99000,\n//             DCB=(MODL.DSCB,DSORG=PS,RECFM=FB,LRECL=340,\n//             BLKSIZE=32640,TRTCH=NOCOMP)\n//AUDUMP    DD  DSN=DISASTER.CA1BKUP.AUDIT(+1),\n//             DISP=(,CATLG,DELETE),UNIT=TAPE,LABEL=EXPDT=99000,\n//             DCB=(MODL.DSCB,DSORG=PS,RECFM=FB,LRECL=370,BLKSIZE=8880,\n//             TRTCH=NOCOMP)\n//SYSUDUMP  DD  SYSOUT=*\n//*\n//* AGCO D/R FDRDSF TMS BACKUP CA1 TMC & AUDIT\n//*\n//DSFBKP   EXEC PGM=FDRDSF\n//SYSPRINT  DD  SYSOUT=*\n//DISK1     DD  UNIT=SYSDA,VOL=SER=V90023,DISP=OLD\n//TAPE1     DD  DSN=DISASTER.TMSBKUP.TMC(+1),\n//             DISP=(,CATLG,DELETE),\n//             UNIT=TAPE,\n//             EXPDT=99000,\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP)\n//DISK2     DD  UNIT=SYSDA,VOL=SER=V90005,DISP=OLD\n//TAPE2     DD  DSN=DISASTER.TMSBKUP.AUDIT(+1),\n//             DISP=(,CATLG,DELETE),\n//             UNIT=TAPE,\n//             EXPDT=99000,\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP)\n//SYSIN  DD  *\n DUMP TYPE=DSF\n DUMP DSN=OEM1.CA1.TMC\n DUMP DSN=OEM1.CA1.AUDIT\n//*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VBKDSTRU": {"ttr": 24, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "//VBKDSTRU   JOB (6948),'FDRDSF BKUP CATALOG',TYPRUN=HOLD,\n//       CLASS=X,MSGCLASS=W,REGION=4M,USER=VMAINT\n//*\n//* AGCO D/R FDR/DSF BACKUP DISASTER/RECOVERY USERCATALOG\n//*\n//BACKUP1  EXEC PGM=FDRDSF\n//SYSPRINT  DD  SYSOUT=*\n//DISK1     DD  DISP=OLD,UNIT=3390,VOL=SER=CATL01\n//TAPE1     DD  DSN=DISASTER.UCATBKUP.DISASTER(+1),\n//             DISP=(,CATLG),\n//             DCB=(MODL.DSCB,TRTCH=NOCOMP),\n//             UNIT=TAPE,\n//             LABEL=(1,SL,EXPDT=99000)\n//SYSIN  DD  *\n DUMP TYPE=DSF\n DUMP DSN=UCAT.DISASTER\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT581/CBT.V500.FILE581.PDS/JCLJOBS.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT581/CBT.V500.FILE581.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}