{"INMR01": {"INMLRECL": 80, "INMFNODE": "BATAVIA", "INMFUID": "VHUTCH", "INMTNODE": "N17", "INMTUID": "VHUTCH", "INMFTIME": "20020624164039000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 4080, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "DISASTER.RECOVER.EXEC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"DISASTER.RECOVER.EXEC": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 4080, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3339, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "020175", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\x03'", "DS1LSTAR": "b'\\x00\\x05\\t'", "DS1TRBAL": "b'L\\xa2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x030\\x00\\x04\\x8b\\x10\\xb8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x030\\x00\\x04\\x8b\\x10\\xb8'", "b'X\\xf4^\\x98\\x00\\x00\\x03\\x8c\\x00\\x0b\\x03\\x8d\\x00\\x01\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"RCVRCNFG": {"ttr": 772, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x971_\\x01\\x01\\x19\\x7f\\x11#\\x05\\xf5\\x03\\xed\\x00\\x00\\xe5\\xc8\\xe4\\xe3\\xc3\\xc8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-11-11T00:00:00", "modifydate": "2001-07-16T11:23:00", "lines": 1525, "newlines": 1005, "modlines": 0, "user": "VHUTCH"}, "text": "/*--------------------- REXX ----------------------------------------*\n \u00a6                                                                   \u00a6\n \u00a6 VOLUME \"CONFIGURATOR\" FOR DISASTER RECOVERY JCL BUILDER           \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 THIS REXX EXEC WILL BUILD AND DISPLAY A TABLE OF \"VOLUMES\"        \u00a6\n \u00a6 WITH SIMPLE RULES AND WILL THEN BUILD JCL AS REQUESTED.           \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 DEFAULTS_TABLE maybe modified for your individual shop.           \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 BEFORE CALLING THIS EXEC, THE FOLLOWING DATASETS MUST BE          \u00a6\n \u00a6 ALLOCATED BEFORE ENTRY:                                           \u00a6\n \u00a6                                                                   \u00a6\n \u00a6   ISPSLIB - Skeleton Library                                      \u00a6\n \u00a6   ISPTLIB - Table Input Library                                   \u00a6\n \u00a6   ISPTABL - Table Output Library                                  \u00a6\n \u00a6   ISPFILE - File Tailoring Output Library - MUST BE A PDS         \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 The Dataset Name of ISPSLIB and ISPFILE must be the same as       \u00a6\n \u00a6 calling parms 2 and 3 respectively.                               \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 Calling Parameters: c_table_name - name of table                  \u00a6\n \u00a6                     c_job_dsn    - name job dataset               \u00a6\n \u00a6                     c_skel_dsn   - name skeleton dataset          \u00a6\n \u00a6                     c_skel_mem   - name skeleton member           \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 ENVIRONMENT: TSO ISPF                                             \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 EXECUTION:   %RCVRCNFG                                            \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 LOGIC:       THIS EXEC WILL ATTEMPT TO OPEN THE VOLUME TABLE      \u00a6\n \u00a6              REQUESTED.                                           \u00a6\n \u00a6                                                                   \u00a6\n \u00a6              WHEN OPEN RC = 0 CALLER WILL HAVE OPTION TO ERASE    \u00a6\n \u00a6                               AND START OVER OR DISPLAY.          \u00a6\n \u00a6                                                                   \u00a6\n \u00a6              WHEN OPEN RC = 8 TABLE WILL BE BUILT.                \u00a6\n \u00a6                                                                   \u00a6\n \u00a6              WHEN OPEN RC = 12 CALLER WILL BE NOTIFIED AND EXEC   \u00a6\n \u00a6                             WILL TERMINATE.                       \u00a6\n \u00a6                                                                   \u00a6\n \u00a6              ON CREATION A 'DUMMY' ENTRY IS PLACED IN THE TABLE   \u00a6\n \u00a6                                                                   \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 PANELS:      CNFGDISP  Displays Table of Volumes                  \u00a6\n \u00a6              CNFGADDV  Displays a Data Entry Panel                \u00a6\n \u00a6              CNFGJOBS  Displays Table of Job Status               \u00a6\n \u00a6              CNFGSTRT  Displays a Table Name and JCL Panel        \u00a6\n \u00a6              CNFGVSER  Displays a Mass Change Volume Panel        \u00a6\n \u00a6                                                                   \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 PF KEYS: PF3 ON CNFGDISP exits process                            \u00a6\n \u00a6          PF3 ON CNFGADDV processes data (if any)                  \u00a6\n \u00a6          PF3 ON CNFGVSER exits process                            \u00a6\n \u00a6          PF3 ON CNFGSTAT exits process                            \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 COMMANDS:    ON CNFGDISP \"BLDJCL\" Builds JCL for all entries      \u00a6\n \u00a6                          \"SUBJOB\" Submits all generated jobs      \u00a6\n \u00a6                          \"ADDVOL\" Adds volumes                    \u00a6\n \u00a6                          \"DOOVER\" Delete table values start over  \u00a6\n \u00a6                          \"SECURE\" Generates ICK/DSF secure volume \u00a6\n \u00a6                          \"EDTVOL\" Allows multiple Volume Edits    \u00a6\n \u00a6                          \"DUPVOL\" Checks for duplicate volume     \u00a6\n \u00a6                                   assignments                     \u00a6\n \u00a6                          \"JOBSTA\" Displays status of submitted    \u00a6\n \u00a6                                   jobs and allows views of        \u00a6\n \u00a6                                   completed jobs                  \u00a6\n \u00a6                CNFGJOBS \"REFRESH\" Re-builds jobstatus entries     \u00a6\n \u00a6                         \"XCHECK\"  Shows only those jobstatus      \u00a6\n \u00a6                                   entries that are OUTPUT and     \u00a6\n \u00a6                                   not yet checked                 \u00a6\n \u00a6                                                                   \u00a6\n \u00a6 SELECTION CODES: CNFGDISP \"S\" Submits job for this volume         \u00a6\n \u00a6                           \"D\" Deletes this volume from table      \u00a6\n \u00a6                           \"E\" Edit/display JCL                    \u00a6\n \u00a6                           \"K\" Edit/display Skeleton member        \u00a6\n \u00a6                           \"J\" Regenerate JCL for job              \u00a6\n \u00a6                           \"P\" Set job status to complete          \u00a6\n \u00a6                           \"M\" over typed data is modified         \u00a6\n \u00a6                           NULL over typed data is modified        \u00a6\n \u00a6                                                                   \u00a6\n \u00a6                  CNFGSTAT \"S\" Views output of executed jobs       \u00a6\n \u00a6                                                                   \u00a6\n *-------------------------------------------------------------------*/\n\n  trace\n\n  parse arg c_table_name c_job_dsn c_skel_dsn c_skel_mem .\n\n  /* Verify existence of job and skeleton dataset */\n\n  x = sysdsn(\"'\"||c_job_dsn||\"'\")\n  y = sysdsn(\"'\"||c_skel_dsn||\"'\")\n\n  if x \u00ac= \"OK\" | y \u00ac= \"OK\" then\n     do\n       say \"RCVRCNFG - JOB DATASET STATUS IS:\" x\n       say \"RCVRCNFG - SKELS DATASET STATUS IS:\" y\n       say \"RCVRCNFG - Cannot Continue.\"\n       exit 12\n     end\n\n /*------------------------------------------------------------------*\n  \u00a6 Routine Main Line                                                \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    (1) Set environment to ISPEXEC.                               \u00a6\n  \u00a6    (2) Tell ISPF to send all errors back to me.                  \u00a6\n  \u00a6    (2.1) If returns a '-3' then ispf is not active.              \u00a6\n  \u00a6    (3) Open Table                                                \u00a6\n  \u00a6    (4) Call Routine(s) based on return code                      \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n  address ispexec\n\n  \"CONTROL ERRORS RETURN\"\n\n  if rc = -3 then\n     do\n       say \"RCVRCNFG - ISPF Environment Not Valid.\"\n       exit 12\n     end\n\n  \"TBOPEN\" c_table_name \"WRITE\"\n\n  select\n\n        when rc = 0 then                 /* Table OK         */\n             do\n               call proc_display_panel\n               \"TBEND\" c_table_name\n               exit result\n             end\n\n        when rc = 8 then                 /* Table Not Found  */\n             do\n               call proc_create_table\n               if result \u00ac= 0 then\n                  do\n                    exit 12\n                  end\n               call proc_display_panel\n               \"TBEND\" c_table_name\n               exit result\n             end\n\n        when rc = 12 then                /* Table In Use     */\n             do\n               say \"RCVRCNFG - Table:\" c_table_name\n               say \"                  Is In Use. Please Try Later.\"\n               exit 4\n             end\n\n  otherwise                              /* Serious Error    */\n           do\n             say \"RCVRCNFG - TABLE OPEN FOR\" c_table_name\n             say \"RCVRCNFG - RETURNED RC\" rc\n             exit 12\n           end\n  end\n\n /*------------------------------------------------------------------*\n  \u00a6 END OF MAIN LINE                                                 \u00a6\n  *------------------------------------------------------------------*/\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Create Table PROC_CREATE_TABLE                     \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    This subroutine creates the volume/job table.                 \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    The table consists of one table row for each volume           \u00a6\n  \u00a6    available at the away site.                                   \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    The Default Sort Sequence is VOLDDD,CH,A                      \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    Table Fields:                                                 \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    VOLUUU - Unit Address - 4 digit                               \u00a6\n  \u00a6    VOLDDD - Unit Address Decimal (KEY)                           \u00a6\n  \u00a6    VOLNAM - Unit Name (at away site)                             \u00a6\n  \u00a6             04/16/2001 Comdisco switched to 4 digit Unit Address \u00a6\n  \u00a6             Std name is Unit Address folowed by XX               \u00a6\n  \u00a6    VOLTYP - Type of Device                                       \u00a6\n  \u00a6    VOLTGT - The VOLUME name of the VOLUME AT THE HOME SITE       \u00a6\n  \u00a6             that will be put at this location.                   \u00a6\n  \u00a6    VOLRST - The type of restore.                                 \u00a6\n  \u00a6              \"A\" for incremental restore (FDR/ABR restore)       \u00a6\n  \u00a6              \"R\" for restore (FDR restore)                       \u00a6\n  \u00a6              \"S\" for restore (FDR restore) SMS volumes           \u00a6\n  \u00a6              \"K\" for restore with compaction from backup tape    \u00a6\n  \u00a6              \"I\" for initialize (ICK/DSF)                        \u00a6\n  \u00a6              \"J\" for initialize (ICK/DSF) SMS volume             \u00a6\n  \u00a6              \"C\" for clear volser (ICK/DSF)                      \u00a6\n  \u00a6    VOLSKL - Name of the JCL Skeleton To Use When Building the Job\u00a6\n  \u00a6    VOLSTA - Status of the job - BUILT, SUBMIT, CHECKED, ENDED    \u00a6\n  \u00a6    VOLVTS - Vtoc Size                                            \u00a6\n  \u00a6    VOLIDX - \"Y\" = Indexed \"N\" = Not Indexed                      \u00a6\n  \u00a6    VOLVVD - \"Y\" = Build VVDS  \"N\" = Do Not Allocate VVDS         \u00a6\n  \u00a6    VOLTAP - WEEKLY, QUARTLY, or DISASTER tape for restore        \u00a6\n  \u00a6    VOLGDG - The relative gdg for the restore tape                \u00a6\n  \u00a6    VOLJBN - Generated Job Name                                   \u00a6\n  \u00a6    VOLJBS - Submitted Job Id with Job Status Description         \u00a6\n  \u00a6    VOLJDS - JobStatus Description for scan                       \u00a6\n  \u00a6              \"    \"         Not yet submitted                    \u00a6\n  \u00a6              \"HOLD WAIT\"    Waiting for execution, OPER Hold     \u00a6\n  \u00a6              \"WAIT\"         Waiting for execution                \u00a6\n  \u00a6              \"EXECUTE\"      Executing in batch                   \u00a6\n  \u00a6              \"OUTPUT\"       Job finished with output             \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_create_table:\n\n     \"TBEND\" c_table_name           /* End it if its open   */\n     \"TBERASE\" c_table_name         /* Nuke it if its there */\n\n     \"TBCREATE\" c_table_name \"WRITE KEYS(VOLDDD)\" ,\n               \"NAMES(VOLUUU VOLNAM VOLTYP VOLTGT VOLRST VOLSKL\" ,\n                     \"VOLSTA VOLVTS VOLIDX VOLVVD VOLTAP VOLGDG\" ,\n                     \"VOLJBN VOLJBS VOLJDS)\"\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Table Create Error\" RC\n          return 8\n        end\n\n     \"TBSORT\" c_table_name \"FIELDS(VOLDDD,CH,A)\"\n\n     \"TBSAVE\" c_table_name \"REPLCOPY\"\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Table Save Error.\"\n          \"TBEND\" c_table_name\n          return 8\n        end\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Display Table of Volumes PROC_DISPLAY_PANEL        \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    This subroutine displays the table of volumes until the       \u00a6\n  \u00a6    user presses the PF3 key.                                     \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    If a command is entered or a table row is selected then       \u00a6\n  \u00a6    the command or selected rows are processed.                   \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_display_panel:\n\n     c_top = 1                      /* Row number of top of display */\n\n     do forever                     /* Display Loop                 */\n\n        \"TBTOP\" c_table_name        /* Skip to current display line */\n\n        \"TBSKIP\" c_table_name \"NUMBER(\"||c_top||\")\"\n\n        ZCMD = \"\"                   /* Set Select Codes to NULL     */\n        S = \"\"\n\n        \"TBDISPL\" c_table_name \"PANEL(CNFGDISP)\"  /* Display Table */\n\n        c_top = ZTDTOP              /* Set Current Top             */\n\n        /*---------------------------------------------------------*\n         \u00a6 Process Response                                        \u00a6\n         \u00a6     RC = 0 or 4 Means a COMMAND was entered             \u00a6\n         \u00a6                 and/or rows were selected               \u00a6\n         \u00a6     RC = 8      Means the EXIT command was entered or   \u00a6\n         \u00a6                 PF3 was pressed                         \u00a6\n         \u00a6     RC =        All other return codes are errors       \u00a6\n         *---------------------------------------------------------*/\n\n        select\n\n              when (rc = 0 | rc = 4) & ZCMD \u00ac= \"\" then\n                   do\n                     x = vreply(\"CNFGDISP\",ZCMD)\n                     if x \u00ac= 0 then\n                        do\n                          say \"RCVRCNFG - Invalid Command\"\n                          iterate\n                        end\n                     c_call = \"call proc_process_\"||ZCMD\n                     interpret c_call\n                   end\n\n              when (rc = 0 | rc = 4) & ZCMD = \"\" then\n                   do\n                     call proc_process_select_codes\n                   end\n\n              when rc = 8 then\n                   do\n                     say \"RCVRCNFG - Processing Complete.\"\n                     leave\n                   end\n\n        otherwise\n                 do\n                   say \"RCVRCNFG - Error\" rc \"on Display.\"\n                   return 12\n                 end\n        end\n     end\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 The ZCMD Sub Routines Follow                                     \u00a6\n  *------------------------------------------------------------------*/\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Add Volumes To Table - PROC_PROCESS_ADDVOL         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine adds one or more volumes to the volume          \u00a6\n  \u00a6 table. The tables rows are created with the unit name,           \u00a6\n  \u00a6 the unit address, device type and model and defaults for         \u00a6\n  \u00a6 the remaining fields. The defaults can be changed by altering    \u00a6\n  \u00a6 the defaults table below.                                        \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_addvol:\n\n  /* DEFAULTS_TABLE - These values are interpretive. That is,\n     they are set by the INTERPRET command so that values can be\n     built from variables for the value is not known */\n\n  c_default_VOLNAM = \"c_add_VOLUUU.x||c_add_VOLUUU.x\"   /* 3 dgt UCB */\n  c_default_VOLNAM = \"c_add_VOLUUU.x||'XX'\"             /* 4 dgt UCB */\n  c_default_VOLTGT = \"'VOL'||c_add_VOLUUU.x\"\n  c_default_VOLTGT = \"'VL'||RIGHT(c_add_VOLUUU.x,4,'0')\"\n  c_default_VOLRST = \"'R'\"\n  /* c_default_VOLSKL = \"'AGCOSKEL'\" */\n  c_default_VOLSKL = \"c_skel_mem\"\n  c_default_VOLSTA = \"''\"\n  c_default_VOLVTS = \"'75'\"\n  c_default_VOLIDX = \"'Y'\"\n  c_default_VOLVVD = \"'Y'\"\n  c_default_VOLTAP = \"'DISASTER'\"\n  c_default_VOLGDG = \"'0'\"\n  c_default_VOLJBN = \"''\"\n  c_default_VOLJBS = \"' '\"\n  c_default_VOLJDS = \"' '\"\n\n  c_def_array.0  = 13\n  c_def_array.1  = \"VOLNAM\"\n  c_def_array.2  = \"VOLTGT\"\n  c_def_array.3  = \"VOLRST\"\n  c_def_array.4  = \"VOLSKL\"\n  c_def_array.5  = \"VOLSTA\"\n  c_def_array.6  = \"VOLVTS\"\n  c_def_array.7  = \"VOLIDX\"\n  c_def_array.8  = \"VOLVVD\"\n  c_def_array.9  = \"VOLTAP\"\n  c_def_array.10 = \"VOLGDG\"\n  c_def_array.11 = \"VOLJBN\"\n  c_def_array.12 = \"VOLJBS\"\n  c_def_array.13 = \"VOLJDS\"\n\n  /* ADDRESS TRANSLATION TABLE - USED TO BUILD AN ADDRESS RANGE */\n\n  c_address_tran.0  = 16\n  c_address_tran.1  = \"0\"\n  c_address_tran.2  = \"1\"\n  c_address_tran.3  = \"2\"\n  c_address_tran.4  = \"3\"\n  c_address_tran.5  = \"4\"\n  c_address_tran.6  = \"5\"\n  c_address_tran.7  = \"6\"\n  c_address_tran.8  = \"7\"\n  c_address_tran.9  = \"8\"\n  c_address_tran.10 = \"9\"\n  c_address_tran.11 = \"A\"\n  c_address_tran.12 = \"B\"\n  c_address_tran.13 = \"C\"\n  c_address_tran.14 = \"D\"\n  c_address_tran.15 = \"E\"\n  c_address_tran.16 = \"F\"\n\n  /* VALID DEVICE TYPE TABLE\n     The letters relate to density as in S(ingle) D(ual) T(riple) */\n\n  c_valid_device.0 = 6\n  c_valid_device.1 = \"3380S\"   /* S - Single */\n  c_valid_device.2 = \"3380D\"   /* D - Double */\n  c_valid_device.3 = \"3380T\"   /* T - Triple */\n  c_valid_device.4 = \"3390S\"\n  c_valid_device.5 = \"3390D\"\n  c_valid_device.6 = \"3390T\"\n\n  /* ARRAY OF VOLUMES TO ADD */\n\n  c_add_count = 0\n\n  c_add_VOLDDD. = \"\"\n  c_add_VOLUUU. = \"\"\n  c_add_VOLTYP. = \"\"\n\n  \"CONTROL DISPLAY SAVE\"       /* Save the Table Display */\n\n  ADDUUU = \"\"                  /* Initilize Panel Fields */\n  ADDTYP = \"\"\n  ADDCNT = \"\"\n\n  do forever                   /* Panel Display Loop     */\n\n     ZCMD = \"\"\n\n     \"DISPLAY PANEL(CNFGADDV)\"\n\n     select\n\n           when rc = 8 then         /* EXIT Requested     */\n                do\n                  c_add_count = 0\n                  leave\n                end\n\n           when rc = 0 then         /* EXIT Requested     */\n                do\n                  call proc_verify_add_data\n\n                  select\n\n                         when result = 4 then    /* Null Panel */\n                              do\n                                leave\n                              end\n\n                         when result = 0 then    /* Data Is Good */\n                              do\n                                call proc_add_data_to_array\n                             /* ADDUUU = \"\"      Keep prior UUU + 1 */\n                                ADDCNT = \"\"\n                             /* ADDTYP = \"\"      Keep prior type    */\n                              end\n\n                  otherwise                      /* Data Is Bad */\n                           do\n                             iterate\n                           end\n                  end\n\n                end\n\n     otherwise\n              do\n                say \"RCVRCNFG - Unexpected Error on Display.\"\n                c_add_count = 0\n                leave\n              end\n     end\n  end\n\n  if c_add_count > 0 then\n     do                                   /* Add Data To Table */\n       do x = 1 to c_add_count by 1\n                                          /* Set Defaults      */\n          do y = 1 to c_def_array.0 by 1\n             c_get_value = \"c_def_value = c_default_\"||c_def_array.y\n             interpret c_get_value\n             c_set_default = c_def_array.y \"=\" c_def_value\n             interpret c_set_default\n          end y\n\n          VOLUUU = c_add_VOLUUU.x\n          VOLDDD = X2D(c_add_VOLUUU.x)\n          VOLTYP = c_add_VOLTYP.x\n\n          VOLJBN = 'V'||VOLRST||c_add_VOLUUU.x\n\n          \"TBADD\" c_table_name \"ORDER\"  /* Add the entry */\n\n          if rc = 8 then\n             do\n               say \"RCVRCNFG - DASD Unit at Address:\" VOLUUU ,\n                   \"Already Exists.\"\n             end\n\n       end x\n\n     \"TBSAVE\" c_table_name \"REPLCOPY\"   /* Save the additions */\n\n     end\n\n  \"CONTROL DISPLAY RESTORE\"    /* Restore the Table Display */\n\n  return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Verify Data Entry Panel PROC_VERIFY_ADD_DATA       \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine verifys the data entered on the data entry      \u00a6\n  \u00a6 panel.                                                           \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 (1) The minimum count is 1 and the maximum is 128                \u00a6\n  \u00a6 (2) The device type must be in the verification table            \u00a6\n  \u00a6 (3) If the count of devices is null then return with a \"4\"       \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_verify_add_data:\n\n      if ADDCNT = \"\" then\n         do\n           return 4\n         end\n\n      if length(ADDUUU) < 3 then\n         do\n           say \"RCVRCNFG - Unit Address Is Incorrect Length.\"\n           return 8\n         end\n\n      c_ver_hex = datatype(strip(ADDUUU), 'x')\n      if c_ver_hex \u00ac= 1 then\n        do\n           say \"RCVRCNFG - Unit Address Is Invalid - Not Hexidecimal\"\n           return 8\n        end\n\n      if datatype(strip(ADDCNT), 'W') \u00ac=1  then\n         do\n           say \"RCVRCNFG - Address Range Is Not Integer.\"\n           return 8\n         end\n\n      if ADDCNT < 1 | ADDCNT > 128 then\n         do\n           say \"RCVRCNFG - Address Range Is Not Valid (1 - 128).\"\n           return 8\n         end\n\n      /* Verify Device Types   */\n\n      do x = 1 to c_valid_device.0 by 1\n\n         if c_valid_device.x = ADDTYP then\n            do\n              leave\n            end\n\n      end x\n\n      if x > c_valid_device.0 then\n         do\n           say \"RCVRCNFG - Device Type Is Invalid.\"\n           say \"           3380S  3380 Single     \"\n           say \"           3380D  3380 Double     \"\n           say \"           3380T  3380 Triple     \"\n           say \"           3390S  3390 Single     \"\n           say \"           3390D  3390 Double     \"\n           say \"           3390T  3390 Triple     \"\n           return 8\n         end\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Add Data to Volume Array PROC_ADD_DATA_TO_ARRAY    \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine adds data to add data array.                    \u00a6\n  *------------------------------------------------------------------*/\n\n proc_add_data_to_array:\n\n      c_vol_num = X2D(strip(ADDUUU))\n\n      /* Add Entries To Table */\n\n      x = 0\n\n      do y = 1 to ADDCNT by 1\n\n         c_add_count = c_add_count + 1\n         z = c_add_count\n\n         c_add_VOLUUU.z = RIGHT(D2X(c_vol_num + x),3,'0')  /* 3 dgt */\n         c_add_VOLUUU.z = RIGHT(D2X(c_vol_num + x),4,'0')  /* 4 dgt */\n         c_add_VOLDDD.z = c_vol_num + x\n         c_add_VOLTYP.z = ADDTYP\n\n         x = x + 1\n\n      end y\n\n      ADDUUU = RIGHT(D2X(c_vol_num + x),3,'0')             /* 3 dgt */\n      ADDUUU = RIGHT(D2X(c_vol_num + x),4,'0')             /* 4 dgt */\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Build Jcl              PROC_PROCESS_BLDJCL         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine builds JCL into the JOBLIB Dataset using the    \u00a6\n  \u00a6 indicated skeleton in the table row(s).                          \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_bldjcl:\n\n      \"CONTROL DISPLAY SAVE\"          /* Save The Table Display */\n\n      \"TBTOP\" c_table_name\n\n      \"TBSKIP\" c_table_name\n\n      if rc = 8 then\n         do\n           say \"RCVRCNFG - JCL Cannot Be Built For Empty Table.\"\n           return 0\n         end\n\n      do until rc \u00ac= 0\n\n         call proc_process_select_code_j\n\n         \"TBSKIP\" c_table_name\n\n      end\n\n      \"TBSAVE\" c_table_name \"REPLCOPY\" /* Save Table            */\n\n      \"CONTROL DISPLAY RESTORE\"        /* Restore Table Display */\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Submit Jobs            PROC_PROCESS_SUBJOB         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine submits all jobs.                               \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_subjob:\n\n      \"CONTROL DISPLAY SAVE\"          /* Save The Table Display */\n\n      \"TBTOP\" c_table_name\n\n      \"TBSKIP\" c_table_name\n\n      if rc = 8 then\n         do\n           say \"RCVRCNFG - Jobs Cannot Be Submitted For\" ,\n               \"Empty Table.\"\n           return 0\n         end\n\n      do until rc \u00ac= 0\n\n         call proc_process_select_code_s\n\n         \"TBSKIP\" c_table_name\n\n      end\n\n      \"TBSAVE\" c_table_name \"REPLCOPY\" /* Save Table            */\n\n      \"CONTROL DISPLAY RESTORE\"        /* Restore Table Display */\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - DO Over -              PROC_PROCESS_DOOVER         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine deletes and initilizes the table                \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_doover:\n\n     \"FTOPEN\"\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Unable To Open File Tailoring File.\"\n          return 8\n        end\n\n  /* \"CONTROL DISPLAY SAVE\"           * Save The Table Display */\n\n     \"TBTOP\" c_table_name\n\n     \"TBSKIP\" c_table_name\n\n     if rc = 8 then\n        do\n          say \"RCVRCNFG - JCL Cannot Be Removed For\" ,\n              \"Empty Table.\"\n           return 0\n         end\n\n     do until rc \u00ac= 0\n\n        \"FTERASE ZB\"||VOLNAM\n\n        if rc > 8 then\n           do\n             say \"RCVRCNFG - Error erasing submit member: ZB\" VOLNAM\n             say \"RCVRCNFG - For Unit:\" VOLUUU VOLNAM VOLTGT ,\n                                               VOLTYP\n             \"FTCLOSE\"\n             return 8\n           end\n\n         \"TBSKIP\" c_table_name\n\n     end\n\n  /* \"TBSAVE\" c_table_name \"REPLCOPY\"  * Save Table            */\n\n     \"FTCLOSE\"\n\n  /* \"CONTROL DISPLAY RESTORE\"         * Restore Table Display */\n\n      call proc_create_table\n\n      if result \u00ac= 0 then\n         do\n           exit 12\n         end\n\n      c_top = 1\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Secure Volume -        PROC_PROCESS_SECURE         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine deletes and initilizes the table to initialize  \u00a6\n  \u00a6 old volser with new VTOC ::: security :::                        \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_secure:\n\n      \"CONTROL DISPLAY SAVE\"          /* Save The Table Display */\n\n      \"TBTOP\" c_table_name\n\n      \"TBSKIP\" c_table_name\n\n      if rc = 8 then\n         do\n           say \"RCVRCNFG - Jobs Cannot Be Create For Empty Table.\"\n           return 0\n         end\n\n      do until rc \u00ac= 0\n\n         VOLRST = \"C\"\n\n         \"TBPUT\" c_table_name \"ORDER\"\n\n         \"TBSKIP\" c_table_name\n\n      end\n\n      \"TBSAVE\" c_table_name \"REPLCOPY\" /* Save Table            */\n\n      \"CONTROL DISPLAY RESTORE\"        /* Restore Table Display */\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Check Dup Volumes -    PROC_PROCESS_DUPVOL         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    This subroutine checks for duplicate assigned volumes.  The   \u00a6\n  \u00a6    first duplicate ends this routine with an error message. A    \u00a6\n  \u00a6    message is presented if no errors are found.                  \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_dupvol:\n\n     c_top = 1                      /* Row number of top of display */\n\n                         /* Sort the table in assigned volume order */\n     \"TBSORT\" c_table_name \"FIELDS(VOLTGT)\"\n\n     v_voltgt = ' '                 /* Place holder for volume name */\n     v_volrc  = 0                   /* Switch for duplicates        */\n\n     \"TBTOP\" c_table_name           /* Set to top of table          */\n\n     do forever                     /* Duplicate check loop         */\n\n        \"TBSKIP\" c_table_name \"NUMBER(\"||c_top||\")\"\n\n         if rc \u00ac= 0 then\n             do\n              if v_volrc = 0 then\n                SAY \"No Duplicates assigned volumes found\"\n              leave\n             end\n\n         if VOLTGT = v_voltgt then\n             do\n              SAY \"Duplicate assigned volume found:\" VOLTGT\n              v_volrc = 1\n             end\n\n         v_voltgt = VOLTGT\n\n     end\n\n     \"TBSORT\" c_table_name \"FIELDS(VOLDDD,CH,A)\"\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Edit Volumes  -        PROC_PROCESS_EDTVOL         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    This subroutine displays the table of volumes until the       \u00a6\n  \u00a6    user presses the PF3 key.                                     \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    If a table row is selected then selected rows are processed.  \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_edtvol:\n\n     c_top = 1                      /* Row number of top of display */\n\n     do forever                     /* Display Loop                 */\n\n        \"TBTOP\" c_table_name        /* Skip to current display line */\n\n        \"TBSKIP\" c_table_name \"NUMBER(\"||c_top||\")\"\n\n        ZCMD = \"\"                   /* Set Select Codes to NULL     */\n        S = \"\"\n\n        \"TBDISPL\" c_table_name \"PANEL(CNFGVSER)\"  /* Display Table */\n\n        c_top = ZTDTOP              /* Set Current Top             */\n\n        /*---------------------------------------------------------*\n         \u00a6 Process Response                                        \u00a6\n         \u00a6     RC = 0 or 4 Means a COMMAND was entered             \u00a6\n         \u00a6                 and/or rows were selected               \u00a6\n         \u00a6     RC = 8      Means the EXIT command was entered or   \u00a6\n         \u00a6                 PF3 was pressed                         \u00a6\n         \u00a6     RC =        All other return codes are errors       \u00a6\n         *---------------------------------------------------------*/\n\n        select\n\n              when (rc = 0 | rc = 4) & ZCMD \u00ac= \"\" then\n                   do\n                     say \"RCVRCNFG - Invalid Command\"\n                     iterate\n                   end\n\n              when (rc = 0 | rc = 4) & ZCMD = \"\" then\n                   do\n                     call proc_process_select_code_edtvol\n                   end\n\n              when rc = 8 then\n                   do\n                     leave\n                   end\n\n        otherwise\n                 do\n                   say \"RCVRCNFG - Error\" rc \"on Display.\"\n                   return 12\n                 end\n        end\n     end\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Display Job Status -   PROC_PROCESS_JOBSTA         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    This subroutine displays job status of submitted JCL until    \u00a6\n  \u00a6    the user presses the PF3 key.                                 \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    If a table row is selected with a S then the selected job     \u00a6\n  \u00a6    if in output status is viewed and job status is refreshed.    \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    If command \"REFRESH\" is entered the job status will be        \u00a6\n  \u00a6    refreshed.                                                    \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_jobsta:\n\n     call proc_process_jobsta_upd   /* Update job status            */\n\n     c_top = 1                      /* Row number of top of display */\n\n     c_jobsta = \"F\"                 /* Set Job Status display type  */\n\n     \"TBVCLEAR\" c_table_name        /* Reset Table variables    */\n     VOLSTA = \" \"\n     VOLJDS = \"9\"\n     \"TBSARG\" c_table_name \"NEXT NAMECOND(VOLSTA,NE,VOLJDS,NE)\"\n\n     do forever                     /* Display Loop                 */\n         if c_jobsta = \"F\" then\n           do\n            \"TBVCLEAR\" c_table_name  /* Reset Table variables    */\n            VOLSTA = \" \"\n            VOLJDS = \"9\"\n            \"TBSARG\" c_table_name \"NEXT NAMECOND(VOLSTA,NE,VOLJDS,NE)\"\n            \"TBTOP\" c_table_name    /* Skip to current display line */\n\n            \"TBSKIP\" c_table_name \"NUMBER(\"||c_top||\")\"\n           end\n         else\n           if c_jobsta = \"C\" Then\n             do\n               \"TBVCLEAR\" c_table_name  /* Reset Table variables    */\n               VOLSTA = \"SUBMIT\"\n               VOLJDS = \"OUTPUT\"\n               \"TBSARG\" c_table_name \"NEXT \",\n                  \"NAMECOND(VOLSTA,EQ,VOLJDS,EQ)\"\n             end\n           else\n             do\n               say \"RCVRCNFG - Error setting JOBSTA type of Display\"\n               return 12\n             end\n\n        ZCMD = \"\"                   /* Set Select Codes to NULL     */\n        S = \"\"\n\n        \"TBDISPL\" c_table_name \"PANEL(CNFGJOBS)\"  /* Display Table */\n\n        c_top = ZTDTOP              /* Set Current Top             */\n\n        /*---------------------------------------------------------*\n         \u00a6 Process Response                                        \u00a6\n         \u00a6     RC = 0 or 4 Means a COMMAND was entered             \u00a6\n         \u00a6                 and/or rows were selected               \u00a6\n         \u00a6     RC = 8      Means the EXIT command was entered or   \u00a6\n         \u00a6                 PF3 was pressed                         \u00a6\n         \u00a6     RC =        All other return codes are errors       \u00a6\n         *---------------------------------------------------------*/\n\n        select\n\n              when (rc = 0 | rc = 4) & ZCMD = \"REFRESH\" then\n                   do\n                     c_jobsta = \"F\"\n                     call proc_process_jobsta_upd  /* Updt job stat */\n                     iterate\n                   end\n\n              when (rc = 0 | rc = 4) & ZCMD = \"XCHECK\" then\n                   do\n                          /* Get those fields with output only      */\n                     c_jobsta = \"C\"\n                     iterate\n                   end\n\n              when (rc = 0 | rc = 4) & ZCMD \u00ac= \"\" then\n                   do\n                     say \"RCVRCNFG - Invalid Command\" ZCMD\n                     iterate\n                   end\n\n              when (rc = 0 | rc = 4) & ZCMD = \"\" then\n                   do\n                     call proc_process_jobsta_select_code\n                   end\n\n              when rc = 8 then\n                   do\n                     leave\n                   end\n\n        otherwise\n                 do\n                   say \"RCVRCNFG - Error\" rc \"on Display.\"\n                   return 12\n                 end\n        end\n     end\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Update Job Status -   PROC_PROCESS_JOBSTA_UPD      \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6    This subroutine updates job status of submitted restore jobs  \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_jobsta_upd:\n\n     c_top = 1                      /* Row number of top of display */\n\n     \"TBTOP\" c_table_name           /* Position to table top        */\n\n     do forever                     /* JobStatus Loop               */\n\n        \"TBSKIP\" c_table_name \"NUMBER(\"||c_top||\")\"\n\n         if rc \u00ac= 0 then\n             do\n              leave\n             end\n\n        x = OUTTRAP('STA.')\n\n        address TSO\n\n        \"STATUS (\"||VOLJBN||\")\"\n\n        x = OUTTRAP('OFF')\n\n        y = STA.0\n\n        if y = 1 then\n            do\n              PARSE UPPER VAR STA.1 v_ikjfld v_jobfld v_jobid v_desc\n            end\n        else\n        if y > 1 then\n            do\n              v_jobnmh = ''\n              v_jobnmk = 1\n              do x = 1 to STA.0 by 1\n                PARSE UPPER VAR STA.x v_ikjfld v_jobfld v_jobid v_desc\n                PARSE UPPER VAR v_jobid junk 7 v_jobnum +8 junk\n                if v_jobnum > v_jobnmh then\n                  do\n                    v_jobnmh = v_jobnum\n                    v_jobnmk = x\n                  end\n              end x\n           PARSE UPPER VAR STA.v_jobnmk v_ikjfld v_jobfld v_jobid v_desc\n            end\n\n        vdesc  = ' '\n\n        if v_desc = 'NOT FOUND' then do\n          v_jobid = ''\n        end\n\n        if v_desc = 'WAITING FOR EXECUTION' then\n          vdesc  = 'WAITING'\n\n        if v_desc = 'WAITING FOR EXECUTION, IN HOLD STATUS' then\n          vdesc  = 'HOLD WAITING'\n\n        if v_desc = 'ON OUTPUT QUEUE' then\n          vdesc  = 'OUTPUT'\n\n        if v_desc = 'EXECUTING' then\n          vdesc  = v_desc\n\n        VOLJBS = v_jobid vdesc\n\n        VOLJDS = vdesc\n\n        address ISPEXEC\n\n        \"TBPUT\" c_table_name \"ORDER\"\n\n     end                            /* End JobStatus Update Loop    */\n\n     \"TBSAVE\" c_table_name \"REPLCOPY\" /* Save Table            */\n\n  return 0                          /* Return to caller             */\n\n /*------------------------------------------------------------------*\n  \u00a6 The SELECT Codes Subroutines Follow                              \u00a6\n  *------------------------------------------------------------------*/\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Process Select Codes - PROC_PROCESS_SELECT_CODES   \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine processes all rows selected by a user.          \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_codes:\n\n\n      c_last_rc = 4                     /* Initialize Last Displ RC */\n\n      do until c_last_rc = 0\n\n         c_last_rc = rc                 /* Set Last RC to Current RC */\n\n         x = vreply(\"CNFGDISP\",S)       /* Check Select Code         */\n\n         if x \u00ac= 0 then\n            do\n              say \"RCVRCNFG - Select Code:\" S \"Not Valid.\"\n            end\n          else\n            do\n              if S = \"\" then             /* Translate Null           */\n                 do\n                   S = \"M\"\n                 end\n\n              c_call = \"call proc_process_select_code_\"||S\n              interpret c_call\n            end\n\n         if c_last_rc = 0 then           /* Last rc = 0 means done */\n            do\n              nop\n            end\n          else\n            do\n              \"TBDISPL\" c_table_name     /* Get Next              */\n            end\n      end\n\n      \"TBSAVE\" c_table_name \"REPLCOPY\"\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Process Select Codes - PROC_PROCESS_SELECT_CODE_EDT\u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine processes all rows selected by a user.          \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_edtvol:\n\n\n      c_last_rc = 4                     /* Initialize Last Displ RC */\n\n      do until c_last_rc = 0\n\n         c_last_rc = rc                 /* Set Last RC to Current RC */\n\n         c_call = \"call proc_process_select_code_m\"\n         interpret c_call\n\n         if c_last_rc = 0 then           /* Last rc = 0 means done */\n            do\n              nop\n            end\n          else\n            do\n              \"TBDISPL\" c_table_name     /* Get Next              */\n            end\n      end\n\n      \"TBSAVE\" c_table_name \"REPLCOPY\"\n\n      return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Process Code  - PROC_PROCESS_JOBSTA_SELECT_CODE    \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine processes all rows selected by a user which     \u00a6\n  \u00a6 are in the OUTPUT queue only.  If multiple instances of the      \u00a6\n  \u00a6 job occur, only show the highest job number.                     \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 If the job is selected, output it to a dataset and delete it     \u00a6\n  \u00a6 when finished.                                                   \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 When the job is viewed, its status is set to checked and can     \u00a6\n  \u00a6 not be viewed by this utility until it is built, submitted or    \u00a6\n  \u00a6 ended.                                                           \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_jobsta_select_code:\n\n     PARSE UPPER VAR VOLJBS v_job v_stat\n\n     if v_stat \u00ac= 'OUTPUT' then    /* Is the line Qued for OUTPUT */\n       return 0\n\n     if S \u00ac= 'S' then              /* Was line selected?   */\n       return 0\n\n     if VOLSTA = 'CHECKED' then    /* Have we checked this job */\n       return 0\n\n /*                                                         */\n /* Need to get output of job in output status only         */\n /* If multiple jobs of same name, only display the         */\n /* highest numbered one                                    */\n /*                                                         */\n     address TSO                     /* Get Into TSO Mode   */\n\n     vdsn = USERID()||\".RECOVER.\"||VOLJBN\n\n     \"OUTPUT \"||v_job||\" HOLD KEEP PRINT('\"||vdsn||\"')\"\n\n     address ISPEXEC\n\n     \"BROWSE DATASET('\"||vdsn||\"')\"\n\n     address TSO                     /* Get Into TSO Mode   */\n\n     x = OUTTRAP('VAR.')\n\n     \"DELETE \"||vdsn||\" SCRATCH NONVSAM\"\n\n     x = OUTTRAP('OFF')\n\n     address ISPEXEC\n\n     VOLSTA = 'CHECKED'\n\n     \"TBPUT\" c_table_name \"ORDER\"\n\n     call proc_process_jobsta_upd              /* Update job status */\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Submit JOB             PROC_PROCESS_SELECT_CODE_S  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine Submits a JOB                                   \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_s:\n\n     address tso                     /* Get Into TSO Mode   */\n\n    \"SUBMIT '\"||c_job_dsn||\"(ZB\"||VOLNAM||\")'\"\n\n     address ispexec\n\n     VOLSTA = \"SUBMIT\"\n\n     \"TBPUT\" c_table_name \"ORDER\"\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Delete Entry           PROC_PROCESS_SELECT_CODE_D  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine deletes a volume from the table.                \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_d:\n\n     \"FTOPEN\"\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Unable To Open File Tailoring File.\"\n          return 8\n        end\n\n\n     \"FTERASE ZB\"||VOLNAM\n\n     if rc > 8 then\n        do\n          say \"RCVRCNFG - Error erasing submit member: ZB\" VOLNAM\n          say \"RCVRCNFG - For Unit:\" VOLUUU VOLNAM VOLTGT ,\n                                            VOLTYP\n          \"FTCLOSE\"\n          return 8\n        end\n\n     \"FTCLOSE\"\n\n     \"TBDELETE\" c_table_name\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Edit Job               PROC_PROCESS_SELECT_CODE_E  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine edits a job deck.                               \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_e:\n\n     \"CONTROL DISPLAY SAVE\"            /* Save the table display */\n\n     \"EDIT DATASET('\"||c_job_dsn||\"(ZB\"||VOLNAM||\")')\"\n\n     \"CONTROL DISPLAY RESTORE\"         /* Restore Table Display  */\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Edit Skeleton          PROC_PROCESS_SELECT_CODE_K  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine edits a skeleton.                               \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_k:\n\n     \"CONTROL DISPLAY SAVE\"            /* Save the table display */\n\n     \"EDIT DATASET('\"||c_skel_dsn||\"(\"||VOLSKL||\")')\"\n\n     \"CONTROL DISPLAY RESTORE\"         /* Restore Table Display  */\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Generate Job           PROC_PROCESS_SELECT_CODE_J  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine generates JCL                                   \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_j:\n\n     \"FTOPEN\"\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Unable To Open File Tailoring File.\"\n          return 8\n        end\n\n     /* Set UNIT TYPE (minus density letter) */\n\n     TUNIT = substr(VOLTYP,1,4,)\n\n     \"FTINCL\" VOLSKL\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Error processing skeleton:\" VOLSKL\n          say \"RCVRCNFG - For Unit:\" VOLUUU VOLNAM VOLTGT ,\n                                            VOLTYP\n          \"FTCLOSE\"\n          return 8\n        end\n\n     \"FTCLOSE NAME(ZB\"||VOLNAM||\")\"\n\n     if rc \u00ac= 0 then\n        do\n          say \"RCVRCNFG - Error Saving JOB for volume:\" ,\n                                  VOLUUU VOLTGT VOLTYP VOLNAM\n          \"FTCLOSE\"\n          return 8\n        end\n\n     VOLSTA = \"BUILT\"\n\n     \"TBPUT\" c_table_name \"ORDER\"\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Modify Entry           PROC_PROCESS_SELECT_CODE_M  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine updates the table row with data entered.        \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_m:\n\n      VOLJBN = 'V'||VOLRST||VOLUUU  /* Build changed Job Name        */\n\n     \"TBPUT\" c_table_name \"ORDER\"\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Post Complete          PROC_PROCESS_SELECT_CODE_P  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine updates the table row with a status of ENDED.   \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_process_select_code_p:\n\n     VOLSTA = \"ENDED\"\n\n     \"TBPUT\" c_table_name \"ORDER\"\n\n     return 0\n\n /*------------------------------------------------------------------*\n  \u00a6 Internal Function Routine                                        \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 VREPLY - Verifys the validity of a select code or command.       \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6          call sequence VREPLY('panel_name','code')               \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6          result will be set to:                                  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6                '0' - Valid Command or Select Code                \u00a6\n  \u00a6                '8' - Invalid Command or Select Code              \u00a6\n  \u00a6               '12' - Panel Unknown                               \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6          panel_name = The name of panel being processed          \u00a6\n  \u00a6          code       = The Select Code or COMMAND to be           \u00a6\n  \u00a6                       verified.                                  \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6                       Note: When length of code is 1 then        \u00a6\n  \u00a6                             its a sel code, when > 1 its a       \u00a6\n  \u00a6                             command.                             \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\nVREPLY: PROCEDURE\n\n /*------------------------------------------------------------------*\n  \u00a6 Set command and selection code constants. This consists of       \u00a6\n  \u00a6 two tables for each display.                                     \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6       (1) A table of valid commands.                             \u00a6\n  \u00a6       (2) A table of valid select codes.                         \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This technique allows subroutines and commands to be added withou\u00a6\n  \u00a6 changing or replacing code, just add the command or select code  \u00a6\n  \u00a6 to the table and add subroutines as required. You can make this  \u00a6\n  \u00a6 table and the verification functions external.                   \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n  c_cmd_cnfgdisp.0 = 8\n  c_cmd_cnfgdisp.1 = \"BLDJCL\"\n  c_cmd_cnfgdisp.2 = \"SUBJOB\"\n  c_cmd_cnfgdisp.3 = \"ADDVOL\"\n  c_cmd_cnfgdisp.4 = \"DOOVER\"\n  c_cmd_cnfgdisp.5 = \"SECURE\"\n  c_cmd_cnfgdisp.6 = \"EDTVOL\"\n  c_cmd_cnfgdisp.7 = \"DUPVOL\"\n  c_cmd_cnfgdisp.8 = \"JOBSTA\"\n\n  c_sel_cnfgdisp.0 = 8\n  c_sel_cnfgdisp.1 = \"S\"\n  c_sel_cnfgdisp.2 = \"D\"\n  c_sel_cnfgdisp.3 = \"E\"\n  c_sel_cnfgdisp.4 = \"K\"\n  c_sel_cnfgdisp.5 = \"J\"\n  c_sel_cnfgdisp.6 = \"P\"\n  c_sel_cnfgdisp.7 = \"M\"\n  c_sel_cnfgdisp.8 = \"\"\n\n  c_cmd_cnfgaddv.0 = 0\n\n  c_sel_cnfgaddv.0 = 0\n\n  parse arg c_panel, c_code, .  /* Get the panel name and the args */\n\n\n                                /* A code with a length of one is a\n                                   selection (or zero) */\n\n  if length(c_code) = 0 | length(c_code) = 1 then\n     do\n       c_type = \"sel\"\n     end\n   else\n     do\n       c_type = \"cmd\"\n     end\n\n                                /* Panel must not be null and must\n                                   be known to routine */\n\n  if length(c_panel) = 0 then\n     do\n       return 12\n     end\n                                /* Build name of array */\n\n  c_array_name = \"c_\"||c_type||\"_\"||c_panel\n\n                                /* Set up to get the datatype */\n\n  c_verify = \"c_datatype = datatype(\"||c_array_name||\".0,'N')\"\n\n  interpret c_verify\n\n                                /* If its not numeric its an error */\n\n  if c_datatype \u00ac= 1 then\n     do\n       return 12\n     end\n\n                                /* Initialize Loop Variables\n\n                                    (1) Set up to get the number of\n                                        entries in the array.\n                                    (2) Set the loop counter.\n\n                                */\n\n  c_get_loop_counter = \"c_array_entries =\" c_array_name||\".0\"\n  interpret c_get_loop_counter\n\n                                /*  Verify loop - check each entry\n                                    if the loop 'falls through' its\n                                    not found and invalid */\n\n  do x = 1 to c_array_entries by 1\n\n     c_get_comparand = \"c_compare =\" c_array_name||\".\"||x\n\n     interpret c_get_comparand\n\n     if c_compare = c_code then\n        do\n          return 0\n        end\n\n  end x\n\n  return 8  /* Command or select code not found */\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RCVRRUN": {"ttr": 5, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00 \\x00\\x981\\x0f\\x00\\x981\\x0f\\x11S\\x00\\xa9\\x00\\xa2\\x00\\x00\\xe5\\xc8\\xe4\\xe3\\xc3\\xc8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-11-06T00:00:00", "modifydate": "1998-11-06T11:53:20", "lines": 169, "newlines": 162, "modlines": 0, "user": "VHUTCH"}, "text": "/*------------------------ REXX ------------------------------*\n \u00a6   DRIVE RCVRCNFG                                           \u00a6\n \u00a6                                                            \u00a6\n \u00a6   THIS EXEC IS CALLED BY THE ISPF SELECT IN RCVRSTRT       \u00a6\n \u00a6   THIS EXEC PROMPTS FOR THE TABLE NAME, JOB DATASET AND    \u00a6\n \u00a6   JCL SKELETON DATASET.  IF THEY ARE NOT SPECIFIED IN THE  \u00a6\n \u00a6   RCVRSTRT EXEC AS DATA AFTER $2 LINE.  JOB AND SKELETON   \u00a6\n \u00a6   DATASET MAYBE THE SAME, BUT THEY MUST EXIST.  TABLE NAME \u00a6\n \u00a6   ALLOWS YOU TO HAVE MULTIPLE DEFINITIONS OF THE DISASTER  \u00a6\n \u00a6   SITE DASD.                                               \u00a6\n *------------------------------------------------------------*/\n\nARG pdsn pexec phlq .\n\n trace\n\n C_TABLE_NAME = \"\"\n C_JOB_DSN    = \"\"\n C_SKEL_DSN   = \"\"\n\n dsnx =  STRIP(pdsn,'B',\"'\")\n #DSN =  \"'\" || dsnx || \"(\" || pexec || \")'\"\n\n IF SYSDSN(#DSN) \u00ac= \"OK\" THEN\n   DO\n     SAY \"RCVRRUN - \" || #DSN || \" NOT FOUND CANNOT CONTINUE\"\n     RETURN\n   END\n\n \"NEWSTACK\"                         /* CREATE NEW STACK         */\n #DSN = \"DSN(\" || #DSN || \")\"       /* ALLOCATE TABLE           */\n \"ALLOC FI($$INPUT) SHR\" #DSN\n\n \"EXECIO * DISKR $$INPUT (FINIS\"    /* READ DATA INTO STACK     */\n \"FREE FI($$INPUT)\"                 /* AND CLOSE INPUT          */\n #COUNT = QUEUED()                  /* HOW MANY RECORDS         */\n\n IF #COUNT > 0 THEN                 /* IS THERE DATA?           */\n  DO\n   #I = 0                             /* INITIALIZE ARRAY INDEX   */\n   DO #COUNT                          /* LOOP TO END OF STACK     */\n     PARSE UPPER PULL #T #T1 #T2 #T3. /* PARSE DATA FROM STACK    */\n     IF #T == \"$2\" THEN               /* HAVE INPUT DATA          */\n       DO\n         #VAR.#I = #T1                /* SET VARIABLE NAME        */\n         #VAR1.#I = phlq || #T2       /* SET DATASET NAME         */\n         IF #T1 == \"C_SKEL_MEM\" THEN  /* HAVE Skeleton Member name*/\n           #VAR1.#I = #T2             /* SET it in place          */\n         #I = #I + 1                  /* INCREMENT INDEX          */\n       END\n   END\n   \"DELSTACK\"                         /* DELETE STACK             */\n\n   #COUNT = #I                        /* COUNT OF ITEM READ       */\n   #I = 0                             /* INITIALIZE INDEX         */\n\n   DO #COUNT\n     LIB_SET = #VAR.#I || \" = \"\"\" || #VAR1.#I || \"\"\"\"\n     INTERPRET LIB_SET                /* ACTUALLY SET VARIABLES   */\n     #I = #I + 1                      /* INCREMENT INDEX          */\n   END\n  END\n\n  RCVTBL = C_TABLE_NAME        /* Initialize Panel Fields */\n  RCVSUB = C_JOB_DSN\n  RCVSKL = C_SKEL_DSN\n  RCVMEM = C_SKEL_MEM\n\n  address ISPEXEC\n\n  do forever                   /* Panel Display Loop     */\n\n     ZCMD = \"\"\n\n     \"DISPLAY PANEL(CNFGSTRT)\"\n\n     select\n\n           when rc = 8 then         /* EXIT Requested     */\n                do\n                  leave\n                end\n\n           when rc = 0 then         /* EXIT Requested     */\n                do\n                  call proc_verify_data\n\n                  select\n\n                         when result = 4 then    /* Null Panel */\n                              do\n                                leave\n                              end\n\n                         when result = 0 then    /* Data Is Good */\n                              do\n                                call RCVRCNFG RCVTBL RCVSUB RCVSKL RCVMEM\n                                exit 0\n                              end\n\n                  otherwise                      /* Data Is Bad */\n                           do\n                             iterate\n                           end\n                  end\n\n                end\n\n     otherwise\n              do\n                say \"RCVRRUN - Unexpected Error on Display.\"\n                leave\n              end\n     end\n  end\n\n /*------------------------------------------------------------------*\n  \u00a6 SUB-ROUTINE - Verify Data Entry Panel PROC_VERIFY_DATA           \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 This sub-routine verifys the data entered on the panel           \u00a6\n  \u00a6                                                                  \u00a6\n  \u00a6 (1) Table name is entered                                        \u00a6\n  \u00a6 (2) The Submit dsn exists                                        \u00a6\n  \u00a6 (3) The Skeleton dsn exists                                      \u00a6\n  \u00a6 (3) The Skeleton mem exists                                      \u00a6\n  \u00a6                                                                  \u00a6\n  *------------------------------------------------------------------*/\n\n proc_verify_data:\n\n      if RCVTBL= \"\" then\n         do\n           say \"RCVRRUN - Table name must be entered\"\n           return 4\n         end\n\n      if RCVSUB= \"\" then\n         do\n           say \"RCVRRUN - Submit dataset name must be entered\"\n           return 4\n         end\n\n      if RCVSKL= \"\" then\n         do\n           say \"RCVRRUN - Skeleton dataset name must be entered\"\n           return 4\n         end\n\n      #dsn = \"'\" || RCVSUB || \"'\"\n      if sysdsn(#dsn) \u00ac= \"OK\" then\n        do\n           say \"RCVRRUN - Submit dataset name not found\"\n           return 4\n        end\n\n      #dsn = \"'\" || RCVSKL || \"'\"\n      if sysdsn(#dsn) \u00ac= \"OK\" then\n        do\n           say \"RCVRRUN - Skeleton dataset name not found\"\n           return 4\n        end\n\n      if RCVMEM= \"\" then\n         do\n           say \"RCVRRUN - Skeleton member name must be entered\"\n           return 4\n         end\n\n      return 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RCVRSTRT": {"ttr": 10, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00H\\x00\\x981\\x0f\\x01\\x00(O\\x13@\\x00z\\x00v\\x00\\x00\\xe5\\xc8\\xe4\\xe3\\xc3\\xc8@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-11-06T00:00:00", "modifydate": "2000-10-10T13:40:48", "lines": 122, "newlines": 118, "modlines": 0, "user": "VHUTCH"}, "text": "/*------------------------ REXX ------------------------------*\n \u00a6   START CONFIGURATION PROCESSOR                            \u00a6\n \u00a6                                                            \u00a6\n \u00a6   THIS EXEC WILL DRIVE THE RECOVERY PROCESS.               \u00a6\n \u00a6   BEFORE EXECUTION YOU MUST SUPPLY THE DATASET NAMES       \u00a6\n \u00a6   BY REPLACING THE DATASET LITERALS WITH THE ONES THAT     \u00a6\n \u00a6   YOU ARE GOING TO USE.                                    \u00a6\n \u00a6                                                            \u00a6\n \u00a6   THE VALUES ARE SPECIFIED LATER IN THE EXEC ON THE LINES  \u00a6\n \u00a6   WITH $1.  The HLQ for the file is determined by the      \u00a6\n \u00a6   HLQ of the \"explicit\" executing PDS dataset.             \u00a6\n \u00a6                                                            \u00a6\n *------------------------------------------------------------*/\n\n PARSE SOURCE x1 x2 xexec x4 xdsn .\n\n hlql = INDEX(xdsn,'.',1)\n hlq  = SUBSTR(xdsn,1,hlql)\n\n #DSN = \"'\" || xdsn || \"(\" || xexec || \")'\"\n\n \"NEWSTACK\"                         /* CREATE NEW STACK         */\n #DSN = \"DSN(\" || #DSN || \")\"       /* ALLOCATE TABLE           */\n \"ALLOC FI($$INPUT) SHR\" #DSN\n\n \"EXECIO * DISKR $$INPUT (FINIS\"    /* READ DATA INTO STACK     */\n \"FREE FI($$INPUT)\"                 /* AND CLOSE INPUT          */\n #COUNT = QUEUED()                  /* HOW MANY RECORDS         */\n\n IF #COUNT < 1 THEN                 /* IS THERE DATA?           */\n   DO\n     SAY \"NO RECORDS READ - CANNOT CONTINUE\"\n     RETURN\n   END\n\n #I = 0                             /* INITIALIZE ARRAY INDEX   */\n DO #COUNT                          /* LOOP TO END OF STACK     */\n   PARSE UPPER PULL #T #T1 #T2 #T3. /* PARSE DATA FROM STACK    */\n   IF #T == \"$1\" THEN               /* HAVE INPUT DATA          */\n     DO\n       #VAR.#I = #T1                /* SET VARIABLE NAME        */\n       #VAR1.#I = hlq || #T2        /* SET DATASET NAME         */\n       #I = #I + 1                  /* INCREMENT INDEX          */\n     END\n END\n \"DELSTACK\"                         /* DELETE STACK             */\n\n #COUNT = #I                        /* COUNT OF ITEM READ       */\n #I = 0                             /* INITIALIZE INDEX         */\n\n DO #COUNT\n   LIB_SET = #VAR.#I || \" = \"\"'\" || #VAR1.#I || \"'\"\"\"\n   INTERPRET LIB_SET                /* ACTUALLY SET VARIABLES   */\n   #I = #I + 1                      /* INCREMENT INDEX          */\n END\n\n ADDRESS TSO\n\n /* SET MESSAGE ID ON */\n\n \"PROFILE MSGID\"\n\n /* SET TEMPORARY EXEC LIB */\n\n \"ALTLIB ACTIVATE APPLICATION(EXEC) DS(\"|| xdsn ||\")\"\n\n ADDRESS ISPEXEC\n\n /* SET PANEL, SKELETON, TABLE AND TAILORING OUTPUT LIBS */\n\n \"LIBDEF ISPPLIB DATASET ID(\"||LIB_PLIB||\")\"\n \"LIBDEF ISPSLIB DATASET ID(\"||LIB_SLIB||\")\"\n \"LIBDEF ISPFILE DATASET ID(\"||LIB_FILE||\")\"\n \"LIBDEF ISPTLIB DATASET ID(\"||LIB_TABL||\")\"\n \"LIBDEF ISPTABL DATASET ID(\"||LIB_TABL||\")\"\n\n /* SELECT DRIVER */\n\n \"SELECT CMD(RCVRRUN \"|| xdsn xexec hlq ||\") NEWAPPL(RCVR) PASSLIB\"\n\n /* RE-SET PANEL, SKELETON, TABLE AND TAILORING OUTPUT LIBS */\n\n \"LIBDEF ISPPLIB\"\n \"LIBDEF ISPSLIB\"\n \"LIBDEF ISPFILE\"\n \"LIBDEF ISPTLIB\"\n \"LIBDEF ISPTABL\"\n\n ADDRESS TSO\n\n /* RE-SET TEMPORARY EXEC LIB */\n\n \"ALTLIB DEACTIVATE APPLICATION(EXEC)\"\n\n EXIT 0\n\n\n/*------------------------------------------------------------*\n \u00a6                                                            \u00a6\n \u00a6   DATA FILE FOR CONFIGURATOR                               \u00a6\n \u00a6                                                            \u00a6\n \u00a6   COL 1: IDENTIFIER                                        \u00a6\n \u00a6          $1 IS FOR STARTUP DATASET NAMES                   \u00a6\n \u00a6          $2 IS FOR PANEL CONFIGURATOR                      \u00a6\n \u00a6       2: VARIABLE                                          \u00a6\n \u00a6       3: DATASET NAME                                      \u00a6\n \u00a6       4: X  MUST BE THERE - for parse to work              \u00a6\n \u00a6                                                            \u00a6\n \u00a6   Dataset Hilvl Qualifier is set by executing dataset      \u00a6\n \u00a6   name.                                                    \u00a6\n \u00a6                                                            \u00a6\n *------------------------------------------------------------*/\n\n $1 LIB_PLIB  RECOVER.ISPANEL X\n $1 LIB_SLIB  RECOVER.ISPSKEL X\n $1 LIB_FILE  RECOVER.ISPSKEL X\n $1 LIB_TABL  RECOVER.ISPTABL X\n\n $2 C_JOB_DSN  RECOVER.ISPSKEL X\n $2 C_SKEL_DSN RECOVER.ISPSKEL X\n $2 C_SKEL_MEM AGCOSKEL        X\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT581/CBT.V500.FILE581.PDS/EXEC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT581/CBT.V500.FILE581.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}