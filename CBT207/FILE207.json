{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011509000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 587860, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE207.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 587860, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE207.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\n\\x0f'", "DS1TRBAL": "b'\\x104'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01\\x8e\\x00\\x0b\\x01\\x8f\\x00\\x06\\x00\\x0b'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"FSE": {"ttr": 516, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*  THIS IS A TSO FULL-SCREEN EDITOR TO BE USED SOLELY FOR REMOTE AND\n*    LOCAL 3270 UNITS. IT ALLOWES THE SIMULTANEOUS UPDATE AND BROWSE\n*    OF UP TO 21 LINES OF A DATA SET, AND THE EXECUTION OF AN FSE/TSO\n*    COMMAND AT THE SAME TIME.\n*\n*  THE FSE SYSTEM IS MADE UP OF 8 SEPARATE MODULES PLACED IN A\n*    LINKLIST DATA SET AND A SUBROUTINE LINKED WITH MAIN MODULE\n*    \"FSE\". THE FOLLOWING IS A SUMMARY OF THESE ROUTINES\n*    AND THEIR FUNCTIONS:\n*\n*  1) FSE      THIS IS THE MAIN DRIVER ROUTINE TO WHICH CONTROL IS\n*              PASSED FROM THE TSO TMP. IT SCANS THE PARAMETERS\n*              BUFFER, SETS ALL PROCESSING OPTION FLAGS, BUILDS A\n*              CORE (GETMAINED) SYSEDIT FILE ACCORDING TO SIZE OF\n*              DATA SET BEING EDITED, ALLOCATES THE FILE, AND\n*              PERFORMS THE MAIN BULK OF FSE SUBCOMMANDS FOR\n*              PERFORMANCE CONSIDERATIONS. ONCE THE FILE IS STORED\n*              IN CORE, A MAIN LOOP IS EXECUTED FOR EACH TIME\n*              THE ENTER KEY IS PRESSED: A STAE AND STAX ROUTINE\n*              IS SET UP TO HANDLE ABENDS AND PA1 KEY INTERRUPTS,\n*              THE FIRST 21 LINES OF THE DATA SET (STARTING AT THE\n*              CURRENT RECORD) ARE WRITTEN TO THE SCREEN, A FULL\n*              SCREEN TGET IS ISSUED TO READ THE CRT\"S BUFFERS AND\n*              ALL MODIFIED LINES ARE WRITTEN TO THE CORRESPONDING\n*              RECORDS IN THE SYSEDIT BY LINE NUMBER. WHEN UP TO\n*              A MAXIMUM OF 21 LINES ARE WRITTEN BACK TO STORAGE,\n*              FSE WILL READ THE BUFFER WHERE COMMANDS ARE ENTERED.\n*              IF IT IS A FSE SUBCOMMAND, A ROUTINE HANDLING THE\n*              SUBCOMMAND IS EITHER LINKED OR BRANCHED. IF IT NOT\n*              AN FSE DEFINED SUBCOMMAND, MODULE \"FSETSO\" IS LINKED\n*              TO PROCESS THE COMMAND, WITH THE ASSUMPTION THAT IT\n*              WAS A NATIVE TSO COMMAND. UPON COMPLETION OF THE\n*              COMMAND PROCESSING, THE LOOP IS RE-EXECUTED  ETC...\n*          *   PFKEYS ARE ALSO PRE DEFINED TO PERFORM SUBCOMMANDS\n*              AND ARE ALSO PROGRAMMABLE TO THE USERS\" NEEDS.\n*\n* 2) FSESAVE   THIS MODULE IS LINKED FROM FSE TO SAVE THE SYSEDIT\n*              FILE TO SYSDA STORAGE. ALL CHECKS REGARDING LRECL,\n*              DSORG, RECFM ETC ARE PERFORMED TO AVOID ABENDS.\n*              THIS MODULE IS ALSO USED TO CREATE A TEMPORARY\n*              DATA SET (USERID.FSEABCDE) TO STORE JCL TEXT\n*              AND PASS IT TO JES2 FOR BACKGROUND PROCESSING\n*              BY USING A FAKE SUBMIT COMMAND INTERNALLY.\n*\n* 3) FSECHANG  THIS MODULE IS LINKED FROM FSE TO HANDLE \"CHANGE\"\n*              SUBCOMMANDS. DUE TO SIZE AND RARETY IN USE IT IS\n*              A SEPARATE MODULE IN THE LINKLIST.\n*\n* 4) FSEPRTY   THIS MODULE IS LINKED FROM FSE TO ALTER DISPATCHING\n*              PRIORITY OF FSE-EXECUTING ADDRESS SPACE FOR BETTER\n*              RESPONSE TIME AND TO DECREASE SIGNIFICANCE FOR THE\n*              THREE INTERVALS IN TSO IPS\"S. IT IS CALLED TWICE\n*              ONCE ENTERING FSE AT PRTY=240 AND A SECOND TIME\n*              LEAVING IT AT PRTY=126.\n*\n* 5) FSETSO    THIS MODULE IS LINKED FROM FSE TO PROCESS A COMMAND\n*              NOT FOUND TO BE AN FSE SUBCOMMAND. IF AN S806 OCCURS\n*              FROM THE LINK ISSUED IN FSETSO, MODULE FSESYSCD WILL\n*              PLACE \"COMMND NOT FOUND\" MSG TO THE RESPONSE FIELD.\n*\n* 6) FSESYSCD  THIS MODULE IS LINKED FROM FSE WHENEVER AN ABEND\n*              OCCURS. IT TRANSLATES THE HEX ABEND CODE IN THE\n*              PASSED S.D.W.A. FIELD TO PRINTABLE EBCDIC AND MOVES\n*              THE ABEND MSG TO THE RESPONSE FIELD.\n*\n* 7) FSEFREE   THIS MODULE IS LINKED FROM FSE AND FSESAVE TO FREE\n*              ANY ALLOCATED FSE DDNAME.\n*\n* 8) FSEATTR   THIS MODULE IS LINKED FROM FSE UPON ENTRY AND RETURN\n*              TO FREE A DCB ATTRIBUTE LIST ALLOCATED FOR NEW\n*              DATA SET SAVE FUNCTIONS.\n*\n* 9) FSEPFKEY  THIS MODULE IS BRANCH-CALLED FROM MAIN MODULE \"FSE\"\n*              TO EITHER EXECUTE A SPECIFIC SUBCOMMAND OR TSO\n*              COMMAND ASSOCIATED WITH THE PRESSING OF A PROGRAM\n*              FUNCTION KEY, TO DISPLAY THE CURRENT ASSIGNMENT\n*              OF PF KEYS 1 - 12, OR TO PROGRAM A USER\"S FUNCTION\n*              WITH A PFKEY.\n*\n* 10) IGC0024H THIS TYPE 3/4 USER SVC (248) IS ALSO USED IN A\n*              MVT/SVS/TCAM ENVIRONMENT TO REPOSITION THE INTERNAL\n*              TCAM MAJOR TERMINAL QCB TO TOP OF THE SCREEN IN\n*              ORDER TO AVOID THE JUMPING TO THE NEXT LINE UPON\n*              ISSUING A TGET. THIS IS ESPECIALLY IMPORTANT\n*              SO AS NOT TO LOSE ANY OUTSIDE ISSUED MESSAGES\n*              SUCH AS JOB-END NOTIFY, OPERATOR OR TSO USER\n*              MESSAGES, WHICH WILL BE DISPLAYED ON THE UNUSED\n*              VERY FIRST LINE OF THE TERMINAL.\n*              THE CODE IN \"FSE\" WILL ONLY ISSUE THE SVC IF\n*              TSO IS RUNNING UNDER TCAM AND NOT UNDER MVS.\n*              IT IS NOT USED UNDER MVS BECAUSE THERE IS AN\n*              AWFUL AMOUNT OF OVERHEAD IN SCHEDULING AN SRB\n*              TO THE TCAM ADDRESS SPACE (GETMAIN, FREEMAIN AND\n*              OTHER SVC\"S, WHICH WOULD EXECUTE EVERY TIME\n*              THE ENTER KEY OR A PF KEY IS PRESSED. ALSO\n*              IT WOULD BE JOB NAME DEPENDENT ON THE TCAM\n*              PROC NAME IN SEARCHING FOR ITS ASCB IN CORE.\n*\n*\n* FSE SUBCOMMANDS ARE :\n*                     TOP,BOTTOM,PF,PB,HF,HB,UP,DOWN,RENUM,CHANGE,\n*                     COPY,MOVE,DSN,SAVE,END,DONE,FIND,SAVEEND,\n*                     DELETE,INSERT,COLUMN,SUBMIT,AUTOSAVE,PFK\n*\n*\n*\n*\n*     NATIONAL BANK OF NORTH AMERICA\n*     7/77  BRUNO LA LICATA.   1/80 (CITIBANK)\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nFSE      CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*\n         STM   R14,R12,12(R13)\n         LR    R12,R15               SAVE REGS. AND SET\n         USING FSE,R12,R11,R9,R10  16K   ADDRESSABILITY\n         L     R11,=A(FSE+4096)\n         L     R9,=A(FSE+8192)\n         L     R10,=A(FSE+12288)\nSAVECP   LR    R2,R1                 SAVE CPPL ADDRESSES\n*\nGETSAVE  GETMAIN R,LV=72             GET SAVE AREA\n         ST    R13,4(R1)             STORE OS/VS REGS.\n         ST    R1,8(R13)             STORE FSE REGS.\n         B   SKIPLTOR\n         LTORG\n         DS  0H\nSKIPLTOR LR   R13,R1\n         LM    R3,R6,0(R2)           LOAD CPPL AREA\n         STM   R3,R6,CPPL          STORE THEM FOR LATER USE\n*\n* THIS SECTION WILL SCAN A COPY OF THE TMP COMMAND BUFFER\n*  FOR THE SPECIFIED DSNAME AND KEYWORDS. IF THE DSNAME\n*  IS NOT FULLY QUALIFIED (I.E. NO QUOTES) THE USER LOGON\n*  ID IS PREFIXED TO IT. IF IT IS FULLY QUALIFIED, THEN THE\n*  QUOTES ARE REMOVED.\n* IF THE DSNAME IS TOO LONG, MISSING OR DOES NOT HAVE\n*  MATCHING QUOTES, THE USER WILL BE PROMPTED FOR A NEW\n*  DSNAME.  ONCE THE DSNAME IS VERIFIED, THE END RESULT\n*  IS AS FOLLOWS :  FIELD \"SAVEDSN\" WILL CONTAIN EITHER\n*  THE FULLY QUALIFIED NAME STRIPPED OF QUOTES, OR\n*  THE SPECIFIED DSNAME WITH THE TSO LOGON ID PREFIXED.\n*  FIELD \"DSNAME\" WILL CONTAIN ONE OF TWO THINGS :\n*  1) FOR A PDS(MEMBER), ONLY THE PDS NAME  2) FOR A\n*  SEQUENTIAL FILE THE FULL NAME. (\"DSNAME\" IS USED TO\n*\n* THE SECOND PART OF THE ROUTINE WILL SCAN THE FIELD\n*  \"DSNAME\" TO CHECK FOR A RIGTH APOSTROPHE (I.E. A\n*  PARTITIONED DATA SET WITH MEMBER SPECIFIED).\n* IF THE CHARACTER \"(\" IS FOUND, ONLY THE TRUE\n*  DSNAME IS KEPT IN FIELD \"DSNAME\".\n* A CHECK OF THE COMMAND BUFFER IS ALSO MADE TO\n*  RETRIEVE KEYWORDS. (VALID ONES ARE NEW,OLD,CLIST\n*  CNTL,COBOL,ASM,PLI,DATA). FLAG BITS FOR THE TYPES\n*\n*\n*  ARE SET IN FIELD \"DATATYPE\". ONLY ONE BIT ON WILL\n*  BE ALLOWED FOR THE DATA TYPE. BIT #1 IS EITHER ON\n*  (NEW) OR OFF (OLD).\n*\n*\n*\n         L    R2,16                 CVT ADDRESS\n         CLC  228(4,R2),=F'0'       TSCVT PRESENT?\n         BNE  NOMVS1                YES, DEFINETLY NOT MVS\n         L    R2,=X'000000F0'       LET SWAP PRTY=240\n*        LINK  EP=FSEPRTY           LINK MODULE            AXC\nNOMVS1   L     R2,CB                ADDRESS OF COMMAND BUFF\n         LH   R3,0(R2)                 LENGTH OF COMMAND\n         SH   R3,=H'5'                 TO SYNCH WITH DATA\n         EX    R3,MOVEBUFF\n         LA    R3,1(R3)\n         B     *+10\nMOVEBUFF MVC   SAVEBUFF(0),4(R2)\n         TR    SAVEBUFF(60),HEXTABLE   MAKE EBCDIC\n         LA    R2,SAVEBUFF\nDSNLOOP  CLC   0(3,R2),=C'FSE'      CHECK FOR TRUE NAME\n         BE    FOUND1\n         CLC   0(3,R2),=C'FSS'      CHECK FOR TRUE ALIAS NAME   AXC\n         BE    FOUND1                                           AXC\n         CLC   0(3,R2),=C'INC'      CHECK FOR TRUE ALIAS NAME   AXC\n         BE    FOUND1                                           AXC\n         LA    R2,1(R2)             NEXT BYTE\n         BCT   R3,DSNLOOP           GO SCAN AGAIN\n*\n*        TPUT MSG1,3               ISSUE ERROR MSG IF ALIAS\n         BC   15,RETURN               FOR FSE WAS GIVEN.\nMSG1     DC C'\u00a2\u00a2\u00a2'\n         DS   0H\n*\nFOUND1   LA   R2,3(R2)             BUMP TO SKIP COMMAND NAME\nLOOP1    CLI  0(R2),X'40'\n         BNE FOUNDDSN\n         LA   R2,1(R2)             SKIP IF BLANK\n         BCT  R3,LOOP1\n*\nBADNAME  TPUT MSG2,13              NO DSNAME SPECIFIED\nREADNAME TCLEARQ INPUT             CLEAR TSO INPUT QUEUE\n         MVC  DSNAME(56),BLANKS    CLEAN INPUT AREA\n         TGET SAVEBUFF,60\n         TR   SAVEBUFF(60),HEXTABLE\n         LA   R2,SAVEBUFF\n*\n*\nFOUNDDSN LA   R4,0         R4 USED FOR DSNAME LENGTH\n         LR   R5,R2        SAVE DSNAME ADDRESS IN BUFFER\n         LA   R3,56  MAX LENGTH (44 + 2 QUOTES + 8 FOR MEMBER)\nLOOP2    CLI  0(R2),X'40'  CHECK FOR BLANK (END)\n         BE   ENDDSN\n         LA   R2,1(R2)     BUMP UP BUFFER ADD.\n         LA   R4,1(R4)     BUMP UP LENGTH COUNT\n         BCT  R3,LOOP2   GO SCAN AGAIN\n         TPUT MSG3,24      BAD DSNAME MSG.\n         B    READNAME     GO READ ANOTHER\nENDDSN   LR   R7,R4        DSNAME LENGTH\n         BCTR R4,0         READY FOR EX\n         EX   R4,MOVEDSN   MOVE FROM BUFFER TO \"DSNAME\"\n*\nFIXDSN   CLI  DSNAME,C''''  CHECK FOR FULL QUALIFICATION\n         BNE  PREFIXID      NO, MUST BE USER DATA SET\n         MVC  SAVEDSN(55),BLANKS   CLEAN \"DSNAME\"\n         MVC  SAVEDSN(55),DSNAME+1 MOVE TO STRIP QUOTE\n         LA   R2,SAVEDSN    BEGINNING ADD. FOR SEARH\n         LA   R3,55              OF ENDING QUOTE--MAX LENGTH\n*\nLOOP3    CLI  0(R2),C''''\n         BE   FOUNDQUO        FOUND IT...\n         LA   R2,1(R2)        BUMP UP ADDRESS\n         BCT  R3,LOOP3        GO SCAN AGAIN\n*\n         TPUT MSG3,24         NO ENDING QUOTE...NO GOOD\n         BC   15,READNAME    GO READ NEW DSNAME\n*\nFOUNDQUO MVI 0(R2),X'40'      MAKE IT BLANK\n         B   SKIPID           GO TO SCAN KEYWORDS\n*\n* THIS SECTION WILL PREFIX THE DSNAME WITH THE USER\"S\n*  LOGON ID FOUND AT P.S.C.B. +0. LENGTH IS AT +7.\n*\nPREFIXID LA   R2,DSNAME\n         LA   R3,SAVEDSN\n         MVC  SAVEDSN(55),BLANKS       CLEAR IT FOR MOVE\n         L    R4,PSCB           LOAD ADDRESS OF P.S.C.B.\n         SR   R5,R5             CLEAR TO LOAD ID LENGTH\n         IC   R5,7(R4)          INSERT LENGTH OF TSO ID.\n         BCTR R5,0              READY FOR EX\n         EX   R5,MOVEID         MOVE ID TO SAVEDSN\n         B    *+10              SKIP EXECUTED MOVE\nMOVEID   MVC  0(0,R3),0(4)   ---EXECUTED MOVE--\n         DS   0H\n         LA   R5,1(R5)          ADD BACK TO LENGTH\n         AR   R3,R5             POINT TO \".\" SPOT\n         MVI  0(R3),C'.'        MOVE IT IN\n         LA   R3,1(R3)          POINT TO NEXT LEVEL\n*\n*  THIS SECTION WILL MOVE THE READ-IN DSNAME APPENDED TO ID\n*\n         BCTR R7,0             READY TO EX\n         EX   R7,MOVEIN        MOVE REST OF DSNAME\n         LA   R7,1(R7)         ADD BACK TO LENGTH\n*\n*  HERE, THE SPECIFIED KEYWORDS WILL BE SCANNED AND FLAGS\n*   IN \"DATATYPE\" WILL BE SET ACCORDINGLY.\n*\nSKIPID   EQU  *\n         MVC  DSNAME(56),BLANKS\n         LA   R2,SAVEBUFF      ADDRESS OF COPY OF C.B.\n         LA   R3,80            MAX. SCAN LENGTH\nLOOP4    CLC 0(5,R2),=C' NEW ' CHECK FOR NEW DATA SET\n         BNE  SKIP1\n         OI   DATATYPE,X'80'   SET FLAG\nSKIP1    CLC  0(7,R2),=C' CLIST '\n         BNE  SKIP2\n         OI   DATATYPE,B'00000100'\nSKIP2    CLC  0(6,R2),=C' DATA '\n         BNE  SKIP3\n         OI   DATATYPE,B'00001000'\nSKIP3    CLC  0(6,R2),=C' CNTL '\n         BNE  SKIP4\n         OI   DATATYPE,B'00000010'\nSKIP4    CLC  0(5,R2),=C' OLD '\n         BNE  SKIP5\n         NI   DATATYPE,B'01111111'\nSKIP5    CLC  0(5,R2),=C' ASM '\n         BNE  SKIP6\n         OI   DATATYPE,B'00100000'\nSKIP6    CLC  0(5,R2),=C' PLI '\n         BNE  SKIP7\n         OI   DATATYPE,B'00010000'\nSKIP7    CLC  0(7,R2),=C' COBOL '\n         BNE  SKIP8\n         OI   DATATYPE,B'01000000'\nSKIP8    CLC  0(6,R2),=C' LIST '\n         BNE  SKIP9\n         MVI  LISTFLAG,X'01'\n         MVI  DATATYPE,X'04'        GIVE DEFAULT TYPE\n         BC   15,SKIP9\nLISTFLAG DC   X'00'\n         DS   0H\nSKIP9    LA   R2,1(R2)              BUMP 1\n         BCT  R3,LOOP4\n*\n*  WHEN LOOP IS EXAUSTED, IF NO \"NEW\" KEYWORD WAS SPECIFIED\n*   THE DEFAULT IS OLD.  A CHECK IS MADE TO SEE IF A TYPE\n*   WAS SPECIFIED...IF SO...ONLY ONE SHOULD BE PRESENT...\n*   IF NOT...A PROMPT IS MADE FOR TYPE.\n*\n         B    SKIPCONS             SKIP BYTE\nSAVETYPE DC   X'00'\n         DS   0H\nSKIPCONS MVC  SAVETYPE(1),DATATYPE\n         NI   SAVETYPE,B'01111110'\n         SR   R5,R5                CLEAR FOR INSERT\n         IC   R5,SAVETYPE\n         C    R5,=F'2'\n         BE   MAINLOG\n         C    R5,=F'4'\n         BE   MAINLOG\n         C    R5,=F'8'\n         BE   MAINLOG\n         C    R5,=F'16'\n         BE   MAINLOG\n         C    R5,=F'32'\n         BE   MAINLOG\n         C    R5,=F'64'\n         BE   MAINLOG\n*\n*  IF HERE, IT MEANS EITHER NO TYPE WAS SPECIFIED, OR\n*   MULTIPLE TYPES WERE SPECIFIED...\n*\n         CH   R5,=H'0'               NO TYPE SPECIFIED?\n         BNE  TYPENOOK               MULTIPLE TYPES\n         BAL   R7,MAINLOG\n         B    SCANTYPE\n*\nTYPENOOK TPUT BADTYPE,22\n         BC   15,RETURN\nBADTYPE  DC   C'INVALID TYPE SPECIFIED'\n          DS   0H\nSCANTYPE LA   R3,44              MAX SCAN LENGTH\n         LA   R2,DSNAME          ADDRESS OF SCAN\n         LR   R5,R2              SAVE IT\nLOOP7    CLI  0(R2),X'40'        END OF DSNAME??\n         BE   GETTYPE\n         CLI  0(R2),C'.'   A QUALIFIER??\n         BNE  ADD1\n         LR   R5,R2        SAVE BEGIN ADDRESS\nADD1     LA   R2,1(R2)     ADD 1\n         BCT  R3,LOOP7\nGETTYPE  EQU  *\n         SR   R2,R5        LENGTH OF LAST QUALIFIER (+ \".\")\n         CLI  0(R5),C'.'   WAS IT A TWO LEVEL DSNAME?\n         BNE  SKIPSUBT\n         BCTR R2,0         YES, SUBTRACT 1\n         LA   R5,1(R5)     YES, POINT TO ACTUAL QUALIFIER\n*\nSKIPSUBT CLC  0(6,R5),=C'COBOL '\n         BNE  DEFAULT1\n         OI   DATATYPE,B'01000000'\n         B    OKTYPE\nDEFAULT1 CLC  0(4,R5),=C'ASM '\n         BNE  DEFAULT2\n         OI   DATATYPE,B'00100000'\n         B    OKTYPE\nDEFAULT2 CLC  0(4,R5),=C'PLI '\n         BNE  DEFAULT3\n         OI   DATATYPE,B'00010000'\n         B    OKTYPE\nDEFAULT3 CLC  0(5,R5),=C'DATA '\n         BNE  DEFAULT4\n         OI   DATATYPE,B'00001000'\n         B    OKTYPE\nDEFAULT4 CLC  0(6,R5),=C'CLIST '\n         BNE  DEFAULT5\n         OI   DATATYPE,B'00000100'\n         B    OKTYPE\nDEFAULT5 CLC  0(5,R5),=C'CNTL '\n         BNE  NOTYPE\n         OI   DATATYPE,B'00000010'\n         B    OKTYPE\nNOTYPE   EQU  *\n*\n*  HERE,  NO TYPE WAS SPECIFIED, SO PROMPT USER..\n*\n         TPUT MSG7,32\n         B    SKIPPROM\nMSG7     DC   C'INVALID TYPE SPECIFIED, REENTER-'\nAGAINTYP DC  20C' '\n*\n         DS   0H\nSKIPPROM TCLEARQ INPUT\n         MVC  AGAINTYP(20),BLANKS\n         TGET AGAINTYP,20\n         TR   AGAINTYP(20),HEXTABLE        MAKE EBCDIC\n         LA   R5,AGAINTYP\n         LA   R6,20            SCAN LENGTH\nPROMPTTT CLI  0(R5),C' '       BLANK?\n         BNE  SKIPSUBT         NO..GO CHECK TYPE\n         LA   R5,1(R5)         BUMP ADDRESS BY 1\n         BCT  R6,PROMPTTT\n*\n*\nMAINLOG  EQU  *\n        DS  0H\n         LA   R2,SAVEDSN           SCAN ADDRESS\n         LA   R4,55\n         LA   R6,0                 LENGTH COUNT\nLOOP5    CLI  0(R2),C'('           CHECK FOR PDS\n         BE   FOUNDPDS\n         LA   R2,1(R2)             BUMP 1\n         LA   R6,1(R6)             ADD 1 TO COUNT\n         BCT  R4,LOOP5\n* THIS MUST BE A SEQUENTIAL DATA SET\n         MVC  DSNAME(55),SAVEDSN\n         B    SKIPPDS\nFOUNDPDS OI   DATATYPE,X'01'       FLAG FOR PDS\n         LA   R3,SAVEDSN           START ADDRESS\n         SR   R2,R3                LENGTH OF TRUE NAME\n         MVC  DSNAME(56),BLANKS\n         BCTR R2,0\n         EX   R2,MOVETRUE\n         B    *+10\nMOVETRUE MVC  DSNAME(0),SAVEDSN          MOVE TRUE DSNAME-MEMBER\nSKIPPDS  EQU  *\n*\n* CHECK IF HERE FOR NO TYPE\n*\n         MVC  SAVETYPE(1),DATATYPE\n         NI   SAVETYPE,B'01111110'\n         SR   R5,R5\n         IC   R5,SAVETYPE\n         CH   R5,=H'0'\n         BNE  OKTYPE\n         BR   R7\n*\nOKTYPE   EQU  *\n         LA   R1,CPPL      LOAD TMP PARMS\n         LINK  EP=FSEFREE   ,FREE ANY FSE ASSOCIATED DDNAMES\n*\n         MVC  DAPLUPT,UPT\n         MVC  DAPLECT,ECT\n         XC   DAPLECB(4),DAPLECB\n         MVC  DAPLPSCB,PSCB\n         TM   DATATYPE,X'80'  NEW DSN?\n         BNO  OLDDSN\nNEWDSN   TM   DATATYPE,X'01'  IS IT PDS REQUIRED?\n         BNO  NOTPDS\n         BAL  R6,PDSRTN             DO ALLOCATION FOR PDS\n         BC   15,MAINFSE2\n*\n*\n*  THIS ROUTINE DOES THE ALLOCATION FOR A NEW AND OLD MEMBER\n*   OF AN EXISTING P.D.S.\n*\n*\nPDSRTN   LOCATE CAT           MAKE SURE DSN IS CATALOGED\n         LTR  R15,R15\n         BZ   PDSOK\n         TPUT MSG8,22\n         BC   15,RETURN\nMSG8     DC C'DATA SET NOT CATALOGED'\n         DS   0H\nPDSOK    EQU  *\n*\n*  THIS NEXT SECTION RETRIEVES THE MEMBER NAME FROM\n*   FIELD SAVEDSN, TO BE USED IN THE DAIR BLOCK.\n         LA   R5,SAVEDSN\n         LA   R2,SAVEDSN\n         LA   R3,55            SEARCH COUNT MAX.\nLOOP9    CLI  0(R2),C'('       CHECK FOR PARENTHESIS\n         BNE  SKIPLOAD\n         LR   R5,R2\nSKIPLOAD CLI  0(R2),C')'       CHECK FOR END\n         BE   GETMEMBE\n         LA   R2,1(R2)         BUMP ADDRESS UP 1\n         BCT  R3,LOOP9\n*\nGETMEMBE SR   R2,R5            GET MEMBER LENGTH+1\n         BCTR R2,0             TRUE LENGTH\n         CH   R2,=H'8'         VALID LENGTH??\n         BNH  LENGTHOK\n         TPUT MSG9,19\n         B    RETURN\nMSG9     DC C'INVALID MEMBER NAME'\n         DS   0H\n*\nLENGTHOK LA   R5,1(R5)         POINT TO MEMBER NAME\n         BCTR R2,0\n         EX   R2,MOVEMEMB\n         B    *+10\nMOVEMEMB MVC  MEMBER(0),0(R5)  ---EXECUTED MVC--\n         LA    R7,NEWMEMBE\n         ST    R7,DAPLDAPB\nDYNPDS   LA   R1,DAPL          LOAD PRIMARY DAIR BLOCK\n         LINK EP=IKJDAIR      LINK TO ALLOCATION RTN.\nDAIRCHEK LTR  R15,R15         OK RETURN?\n         BZR  R6              YES,BRANCH TO CALLING RTN\nR10CODE  LR    R7,R15          SAVE ERROR CODEDOWN\nDAIRERR  TPUT MSG10,15,ASIS   SEND ERROR MSG.\n         CVD   R7,DOUBLE\n         UNPK MSG11(4),DOUBLE(8)\n         OI   MSG11+3,X'F0'\n         TPUT MSG11,4\n         B    RETURN           BYE BYE\n*\nMSG10 DC C'DAIR ERROR CODE'\nMSG11 DS 4C\n      DS 0H\n*\nNOTPDS   EQU  *\n         LOCATE CAT       MAKE SURE DATA SET DOES\"NT EXIST\n         LTR  R15,R15\n         BNZ  OKNEW\n*\n*  IF R15 = 0 DATA SET ALREADY CATALOGED..NO GOOD\n*\n         TPUT MSG12,23\n         B    RETURN\nMSG12    DC C'DATA SET ALREADY EXISTS'\n         DS 0H\nOKNEW    EQU  *\n         B    MAINFSE2\n*  FOR NEW PHY. SEQ. DATA SET, AN ATTRIBUTE LIST CONTAINING\n*   THE LRECL, BLKSIZE, RECFM HAS TO BE CREATED. THESE VALUES\n*   WILL BE DEPENDENT ON THE DATA SET TYPE...(CLIST TYPES\n*   ARE  VBS 255 X 1680  VARIABLE BLOCKED.... THE REST ARE\n*   80  X 4080 FIXED BLOCKED)\n*  THE ATTRIBUTE LIST IS LATER USED TO ALLOCATE THE DATA SET\n*  DEFAULTING TO SYSGENED SPACE VALUES AND DISP=(NEW,CATLG,CATLG)\n*\n*\n*  THIS SECTION IS USED TO ALLOCATE AN OLD DATA SET\n*\nOLDDSN   EQU  *\n         TM   DATATYPE,X'01'         A PDS??\n         BNO  OLDPS                  MUST BE AN OLD PS\n         BAL  R6,PDSRTN              A PDS: GO ALLOCATE\n         B    GETMAIN\nOLDPS    EQU  *\n         LOCATE CAT             MAKE SURE OLD PS IS THERE\n         LTR  R15,R15\n         BZ   OKOLDPS           YES, CATALOGED...GO ALLOCATE\n         TPUT MSG8,22           DATA SET NOT CATALOGED..BYE\n         B    RETURN\nOKOLDPS  MVI  DA08CTL,X'00'\n         LA    R7,NEWMEMBE\n         ST    R7,DAPLDAPB\n         LA   R1,DAPL            LOAD DAIR BLOCK\n         LINK EP=IKJDAIR         ALLOCATE\n         LTR  R15,R15\n         BZ   GETMAIN\n         B    R10CODE\n*\nGETMAIN  EQU  *\n         MVC  VOLSER(6),CATINFO+6   MOVE SER. # FOR OBTAIN\n         OBTAIN VTOC                READ DSCB TYPE 1\n         LTR  R15,R15               DATA SET THERE??\n         BZ   TEST1\n         TPUT MSG13,22\n         B    RETURN\nMSG13    DC   C'DATA SET NOT ON VOLUME'\n         DS   0H\n*\n*  THIS SECTION WILL VALIDATE THE CHARACTERISTICS OF THE\n*  DATA SET AND DOUBLE CHECK WITH THE SPECIFIED DATA.\n*\nTEST1    LA   R6,VTOCINFO           INDEX TO DSCB INFO\nWHATYPE  TM   DATATYPE,X'01'        PDS?\n         BNO  TEST2\n         CLC  38(2,R6),=X'0200'      TEST FOR TRUE PDS\n         BE   MAINFSE\n         TPUT MSG14,18\n         B    RETURN\nMSG14 DC C'INCONSISTENT DSORG'\n         DS   0H\n         LTORG\n         DS   0H\nTEST2    CLC  38(2,R6),=X'2000'       DSORG=DA??\n         BNE  TEST3\n         TPUT MSG15,13\n         B    RETURN\nMSG15    DC   C'INVALID DSORG'\n         DS   0H\nTEST3    CLC  38(2,R6),=X'8000'       DSORG=IS??\n         BNE  TEST4\n         TPUT MSG15,13\n         B    RETURN\nTEST4    TM   DATATYPE,X'01'           HERE MAKE SURE SPECIFIED\n         BO   MAINFSE                  AS PS AND TRUE DSORG IS PS\n         CLC  38(2,R6),=X'4000'        PS?\n         BE   MAINFSE\n         TPUT MSG14,18\n         B    RETURN\n*\nMAINFSE  EQU  *\n         CLI  VTOCINFO+40,X'C0'          U RECFM??\n         BNE  OKRECFM\n         TPUT MSG18,21\n         B    RETURN\nMSG18    DC   C'INVALID RECORD FORMAT'\nFIXORVAR DS   X\n         DS   0H\n*\nOKRECFM  CLI VTOCINFO+40,X'80'          F?\n         BNE FORMAT1\n         MVI FIXORVAR,X'00'\n         B   MAINFSE2\nFORMAT1  CLI VTOCINFO+40,X'90'          FB?\n         BNE FORMAT2\n         MVI FIXORVAR,X'00'\n         B   MAINFSE2\nFORMAT2  CLI VTOCINFO+40,X'40'             V?\n         BNE FORMAT3\n         MVI FIXORVAR,X'01'\n         B   MAINFSE2\nFORMAT3  CLI VTOCINFO+40,X'50'             VB?\n         BNE FORMAT4\n         MVI FIXORVAR,X'01'\n         B   MAINFSE2\nFORMAT4  CLI VTOCINFO+40,X'54'             VBA?\n         BNE FORMAT5\n         MVI FIXORVAR,X'01'\n         B   MAINFSE2\nFORMAT5  CLI VTOCINFO+40,X'84'             FA?\n         BNE FORMAT6\n         MVI FIXORVAR,X'00'\n         B   MAINFSE2\nFORMAT6  CLI VTOCINFO+40,X'94'             FBA?\n         BNE FORMAT7\n         MVI FIXORVAR,X'00'\n         B   MAINFSE2\nFORMAT7  CLI VTOCINFO+40,X'82'             FM?\n         BNE  FORMAT8\n         MVI  FIXORVAR,X'00'\n         B    MAINFSE2\nFORMAT8  CLI  VTOCINFO+40,X'92'            FBM?\n         BNE  FORMAT9\n         MVI  FIXORVAR,X'00'\n         B    MAINFSE2\nFORMAT9  CLI  VTOCINFO+40,X'98'            FBS?\n         BNE  FORMAT0\n         MVI  FIXORVAR,X'00'\n         B    MAINFSE2\nFORMAT0  TPUT MSG18,21\n         B   RETURN\nMAINFSE2 TM   DATATYPE,X'80'           NEW DATA SET??\n         BO   SETLINES\n*\n*  IF HERE, DATA SET IS OLD, VERIFIED, CATALOGED AND\n*  RESIDENT ON VOLUME\n*\nGOODOLD  EQU  *\n         LA   R5,0           SET REC. COUNT TO 0\n         TM   DATATYPE,X'01'        PDS?\n         BO   *+8\n         B    READWRIT\n         MVC MEMBLDL(8),MEMBER\n*\n*  MUST ALLOCATE FSEDCBPO WITH DIFFERENT DD SO THAT\n*  MEMBER NAME IS NOT AFFECTED BY \"BLDL\"\n*\n         LA    R7,POPDS\n         ST    R7,DAPLDAPB\n         MVC  DAPLECB(4),=XL4'00'\n         BAL  R6,DYNPDS\n         OPEN  FSEDCBPO\nMEMCHEK  BLDL FSEDCBPO,LST\n         LTR  R15,R15\n         BZ   SKIPCLOS\n         CLOSE FSEDCBPO\n         TPUT MSG22,16\n         B    RETURN\nMSG22    DC   C'MEMBER NOT FOUND'\n         DS   0H\nSKIPCLOS CLOSE FSEDCBPO\nREADWRIT OPEN (FSEDCB,(INPUT))\nRECCOUNT GET  FSEDCB,AREA\n         LA   R5,1(R5)                 ADD 1 TO RECORDS #\n         B    RECCOUNT\nEODAD1   STH  R5,RECORDS               SAVE COUNT\n         LTR  R5,R5\n         BNZ  OVERZERO\n         TPUT DSNEMPTY,14\n         BC   15,RETURN\nDSNEMPTY DC   C'DATA SET EMPTY'\n         DS   0H\nOVERZERO EQU  *\n*\n*  R5 NOW CONTAINS THE SIZE OF THE AREA FOR THE EXISTING\n*   DATA SET. AN ALGORITHM NOW WILL CALCULATE THE EMPTY\n*   SPACE TAGGED AT THE END FOR INSERTIONS.\n* THE AMOUNT OF SPACE GIVEN DEPENDS ON THE NUMBER OF\n*   RECORDS IN THE DATA SET....IT VARIES FROM 50 TO 200\n*\nGOCLOSE  CLOSE FSEDCB\n         MVC  SAVELREC(2),VTOCINFO+44    SAVE THE LRECL\nSPACE1   CH   R5,=H'100'\n         BH   SPACE2\n         LH   R6,SAVELREC\n         MH   R6,=H'300'\n         MH   R5,SAVELREC\n         AR   R5,R6\n         B    GETSPACE\nSPACE2   CH   R5,=H'500'\n         BH   SPACE3\n         LH   R6,SAVELREC\n         MH   R6,=H'200'\n         MH   R5,SAVELREC\n         AR   R5,R6\n         B    GETSPACE\nSPACE3   CH  R5,=H'1000'\n         BH  SPACE4\n         LH  R6,SAVELREC\n         MH  R6,=H'250'\n         MH  R5,SAVELREC\n         AR  R5,R6\n         B   GETSPACE\nSPACE4   LH  R6,SAVELREC\n         MH  R6,=H'100'\n         MH  R5,SAVELREC\n         AR  R5,R6\n*\nGETSPACE ST  R5,AREASIZE\nGETCORE  LR   R0,R5\n         GETMAIN EC,LV=(0),A=AREAADD\n         LTR  R15,R15\n         BZ   OKMAIN\n         TPUT MAINMSG,20\n         B    RETURN\nMAINMSG  DC C'MEMORY NOT AVAILABLE'\n         DS   0H\nOKMAIN   L    R1,AREAADD\n         ST  R1,TOPADD                SAVE BEGIN ADDRESS\n         AR  R1,R5                    ADD TO GET END ADD\n         SH  R1,SAVELREC              END ADDRESS\n         ST  R1,BOTTADD\n*\n*  CLEAR AREA WITH BLANKS\n*\n         L    R4,TOPADD\n         XR   R6,R6\n         L    R7,=XL4'40000000'\n         MVCL R4,R6\nSKIPERR1 EQU  *\n*\n*  THIS SECTION WILL READ THE INPUT FILE AND STORE IT\n*   SEQUENTIALLY INTO THE GETMAINED AREA.\n*\n         LA   R5,FSEDCB2\n         L    R6,TOPADD\n         OPEN FSEDCB2\nSETUP1   GET  (R5),(R6)\n         AH   R6,SAVELREC\n         B    SETUP1\nEODAD2   CLOSE FSEDCB2\n         MVI   USEFLAG,X'01'\n*\n         LA   R1,CPPL\n         LINK EP=FSEFREE\n*        DS   0H\n*\nSKIPERR2 MVC  CURRADD(4),TOPADD\n         LH   R5,RECORDS\n         BCTR R5,0\n         MH   R5,SAVELREC\n         A    R5,TOPADD\n         ST   R5,LASTADD\n         LH   R5,RECORDS            LOAD # OF RECORDS\n         L    R6,TOPADD             TOP OF GETMAINED SYSEDIT\n         CLI  LISTFLAG,X'01'\n         BE   MAINREAD\nLINELOOP CLI  FIXORVAR,X'01'        VARIABLE LENGTH?\n         BE   VARTYPE\n         TM   DATATYPE,B'01000000'       COBOL?\n         BNO  NOCOBOL1\n         LR   R8,R6\n         B    DOTRT\nNOCOBOL1 LR   R8,R6\n         AH   R8,SAVELREC\n         S    R8,=F'8'               POINT TO LINE NUMBER\nDOTRT    SR   R1,R1              FOR TRT\n         TM   DATATYPE,B'01000000'\n         BNO  *+14\n         TRT  0(6,R8),TRTTABLE\n         B    *+10\n         TRT  0(8,R8),TRTTABLE   SCAN FOR ANYTHING BUT F0 - F9\n         LTR  R1,R1              IF 0,VALID LINE #\n*\n         BNZ  BADLINE#\n         TM   DATATYPE,B'01000000'\n         BNO  PACK8\n         PACK NEWLINE(8),0(6,R8)\n         B    *+10\nPACK8    PACK NEWLINE(8),0(8,R8)\n         CVB  R4,NEWLINE         GET TO BINARY\n         C    R4,SAVELINE        IN ASCENDING ORDER?\n         BNH  BADLINE#\n         ST   R4,SAVELINE        SAVE IT FOR NEXT LINE #\n         C    R4,=F'999999'\n         BNL  BADLINE#\n         B    NEXTLINE           GO SCAN NEXT RECORD\nVARTYPE  LR   R8,R6\n         LA   R8,4(R8)           POINT TO LINE NUMBER\n         B    DOTRT\nBADLINE# TPUT MSG20,126\n         TCLEARQ INPUT\n         TGET SAVEBUFF,1\n         B    RENUM\n*\nMSG20    DC   C'FSE REQUIRES DATA SETS WITH VALID AND IN ASCENDING '\n         DC   C'ORDER LINE NUMBERS. PRESS ENTER KEY TO RENUMBER '\n         DC   C'AND CONTINUE, OR PA1 TO END'\nFAKERENU DC CL25' R'\n         DS   0H\n*\nRENUM    LA   R7,FAKERENU\n         BAL  R14,REALONE\n         B    MAINREAD\n*\nNEXTLINE AH   R6,SAVELREC\n         BCT  R5,LINELOOP\n*\n*  ALL PRE-REQS DONE...DO READS AND WRITES\n*\n          B   MAINREAD\n*\nSETLINES MVI  USEFLAG,X'00'\n         TM   DATATYPE,X'01'               PDS?\n         BNO  SET2\n         LA    R7,POPDS\n         ST    R7,DAPLDAPB\n         MVC  DAPLECB(4),=XL4'00'\n         BAL  R6,DYNPDS\n*\n         OPEN  FSEDCBPO\n         MVC MEMBLDL(8),MEMBER\n         BLDL FSEDCBPO,LST\n         LTR  R15,R15\n         BZ   BADME\n         CLOSE FSEDCBPO\n         B    SET2\nBADME    TPUT MSG23,21\n         B    RETURN\nMSG23    DC   C'MEMBER ALREADY EXISTS'\n         DS   0H\nSET2     TM   DATATYPE,B'00000100'        CLIST TYPE??\n         BO   LARGER\n         LA   R5,80\n         MVI  FIXORVAR,X'00'\n         STH  R5,SAVELREC\n         B    SETUPNEW\nLARGER   LA   R5,255                 LRECL FOR NEW CLIST\n         STH  R5,SAVELREC\nSETUPNEW EQU  *\n         TM   DATATYPE,X'04'\n         BNO  *+8\n         MVI  FIXORVAR,X'01'\n*\n         LA   R5,300\n         STH  R5,RECORDS\n*\n         MH   R5,SAVELREC\n*\n*  GETMAIN FOR 300 RECORDS X LRECL\n*\n         GETMAIN R,LV=(R5)\n         ST   R1,TOPADD\n         ST   R1,CURRADD\n         SH   R1,SAVELREC\n         ST   R1,LASTADD\n         AH   R1,SAVELREC\n         AR   R1,R5               ADD TO GET ABSOLUTE BOUND\n         SH   R1,SAVELREC         GET ADDRESS OF BOTTOM LINE\n         ST   R1,BOTTADD\n*\n*  CLEAR AREA WITH BLANKS\n*\n         L    R4,TOPADD\n         XR   R6,R6\n         L    R7,=XL4'40000000'\n         MVCL R4,R6\n*\n*\n*  HERE LINE NUMBERS WILL BE PLACED IN THE IN-CORE\n*   RECORDS DEPENDING ON THE DATA TYPE\n*\n         MVC  SAVELINE(4),=F'10'\n         LH   R5,RECORDS\n         L    R6,TOPADD\nSETNUMB  CLI  FIXORVAR,X'01'          VARIABLE LENGTH?\n         BO   LARGER2\n         L    R7,SAVELINE\n         CVD  R7,DOUBLE\n*        UNPK 72(8,R6),DOUBLE(8)\n*        OI   79(R6),X'F0'\n         B    NEXTSET\nLARGER2  L    R7,SAVELINE\n         CVD  R7,DOUBLE\n*        UNPK 4(8,R6),DOUBLE(8)\n*        OI   11(R6),X'F0'\n         MVC  0(2,R6),SAVELREC         MOVE THE RECORD LENGTH\n         MVC  2(2,R6),=H'0'            RESERVED ZEROES\nNEXTSET  L    R7,SAVELINE\n         A    R7,=F'10'\n         C    R7,=F'999999'\n         BNH  OKGREAT\nBADNUMB  EQU  *\n         B    RETURN\n*SG26    DC   C'LINE NUMBER TOO LARGE FOUND'\n         DS   0H\nOKGREAT  ST   R7,SAVELINE\n         AH   R6,SAVELREC\n         BCT  R5,SETNUMB\n*\nMAINREAD EQU  *\n         MVC  RESPONSE(50),BLANKS\n         GETMAIN R,LV=2048         GET AREA FOR INPUT\n         ST   R1,AREAADD\n         LR   R2,R1\n         LA   R3,2048\n         XR   R4,R4\n         L    R5,=XL4'40000000'\n         MVCL R2,R4                CLEAR INPUT AREA\n         B    GOTOMVC\n         LTORG\n         DS   0H\nGOTOMVC  MVC  COMMAND(2),=C'PF'    TO START WITH\n         MVC  RESPONSE(15),TOPMSG  \"TOP OF DATA SET\" MSG\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  TESTCOB\n         MVC  RESPONSE(17),LOWFIND\n         MVC  COMMAND(19),BLANKS\nTESTCOB  TM   DATATYPE,X'40'   COBOL?\n         BNO  TPUTLOOP         NO, USE COLUMN 1\n         MVC  COLUMN(2),=H'6'      AT COL. 7\n         MVC  OUTCOL(3),=C'7  '\nTPUTLOOP EQU  *\n*\n*\n         STAE 0\n         L    R3,ABENDPRM\n         STM  R6,R3,SAVEREG\n         STAE ABEND01,PARAM=ABENDPRM,PURGE=HALT\n         B   KEEPON\n         DS   0H\n         LTORG\n         DS   0H\n*\nKEEPON   EQU  *\n         TM   AUTOFLAG,1\n         BNO  MORESAVE\n         L    R7,SAVES#\n         CH   R7,=H'10'         10 LINES CHANGED?\n         BL   MORESAVE\n         XR   R7,R7\n         ST   R7,SAVES#\n         MVI  PARMSAVE,X'00'\n         LA   R3,PARMS\n         LA   R4,PARMSAVE\n         LA   R7,EMERG\n         LINK EP=FSESAVE\n         B    TPUTLOOP\nMORESAVE LA   R7,LINE#1             LOOP TO CLEAR SCREEN AREA\n         STAX                  ,  KILL PREVIOUS CIRB BLOCK\n         STAX PA1RTN,DEFER=NO  ,SET PA1 KEY EXIT\n         LA   R8,21                BCT COUNT FOR NUMBER OF LINES\nCLEARLOP MVC  0(7,R7),=7C' '       CLEAR LINE NUMBER\n         MVC  7(72,R7),=72C' '     CLEAR LINE DATA\n         LA   R7,84(R7)            BUMP UP ADDRESS TO NEXT SET\n         BCT  R8,CLEARLOP          GO DO IT AGAIN\n*\n*\n         L    R5,CURRADD\n         LA   R7,LINE#1\n         L    R6,LASTADD\n         LA   R8,21\nMOVEDATA CR   R5,R6\n         BH   SENDSCRN\n*\n         CLI  FIXORVAR,X'00'        FIXED TYPE??\n         BNE  VARIABLE\n         TM   DATATYPE,B'01000000'       COBOL?\n         BNO  FIXED\n         TM   LISTFLAG,X'01'\n         BO   BRUNO1\n         MVC  0(6,R7),0(R5)\nBRUNO1   B    NOCOBOL2\nFIXED    LR   R2,R5\n         AH   R2,SAVELREC\n         SH   R2,=H'6'\n         TM   LISTFLAG,X'01'\n         BO   NOCOBOL2\n         MVC  0(6,R7),0(R2)\nNOCOBOL2 LH   R4,SAVELREC\nCOLOK1   SH   R4,COLUMN\n         CH   R4,=H'72'\n         BNH  *+8\n         LA   R4,72\n         LTR  R4,R4\n         BZ   SKIPAA\n         BCTR R4,0\nSKIPAA   AH   R5,COLUMN\n         EX   R4,MOVEFIX\n         SH   R5,COLUMN\n         B    *+10\nMOVEFIX  MVC  7(0,R7),0(R5)        MOVE DATA\n         B    SKIPVARI\nVARIABLE TM   LISTFLAG,X'01'\n         BO   BRUNO2\n         MVC  0(6,R7),6(R5)\nBRUNO2   LH   R4,SAVELREC\n         SH   R4,=H'12'\n         SH   R4,COLUMN\n         CH   R4,=H'72'\n        BNH  *+8\n        LA   R4,72\n         LTR  R4,R4\n         BZ   SKIPBB\n         BCTR R4,0\nSKIPBB   AH   R5,COLUMN\n         CLI  LISTFLAG,X'01'\n         BNE  YESLINES\n         EX   R4,NOLINES\n         B    SKIPEXX\nNOLINES  MVC  7(0,R7),0(R5)\nYESLINES EX   R4,MOVEVAR\nSKIPEXX  SH   R5,COLUMN\n         B    *+10\nMOVEVAR  MVC  7(0,R7),12(R5)       MOVE DATA\nSKIPVARI AH   R5,SAVELREC\n*\n         LA   R7,84(R7)\n         BCT  R8,MOVEDATA\n*\n*\nSENDSCRN EQU  *\n         LA   R2,SIZESCR\n         TPUT SCREEN,(2),FULLSCR   ,     SEND 3270 SCREEN\n         LTR  R15,R15\n         BZ   SKIPRET\n         B    RETURN\nSKIPRET  EQU  *\n         L    R2,AREAADD\nBL       LA   R3,2048             2048\n         XR   R4,R4\n         L    R5,=XL4'40000000'\n         MVCL R2,R4\n         LA   R3,2048            LOAD BACK LENGTH OF TGET\n         L    R7,AREAADD\n*\n*  THE TGET MACRO WILL READ ALL MODIFIED FIELDS FROM THE\n*    OUTPUTTED SCREEN. THE SEQUENCE OF INPUT FIELDS ARE :\n*    KEY PRESSED,CURSER ADDRESS,BUFFER ADDRESS,DATA,\n*    BUFFER ADDRESS,DATA.......\nREADSCR  EQU   *\n         TGET (R7),(R3),ASIS\n         LR    R5,R15\n         LTR  R5,R5\n         BZ   SKIPZZZZ\n         B    RETURN\nSKIPZZZZ LR   R3,R7\n         MVC  KEY(1),0(R3)      SAVE PFKEY\n         L    R3,16             CVT ADDRESS\n         TM   240(R3),X'80'     TCAM UP?\n         BNO  SAVEGET           NO, MUST BE VTAM\n         CLC  228(4,R3),=F'0'   SVC 248 (IGC0024H) TYPE 4 IS ONLY\n         BE   SAVEGET           ISSUED RUNNING UNDER SVS/MVT/TCAM\n*                               ONLY. VTAM DOES NOT JUMP CURSOR.\n         L    R1,=X'FFFFFFFF'   FLAG TO INDICATE TCAM FUNCTION\n         SVC  248               ISSUE SVC\n*\n*\n*\nSAVEGET  LR   R3,R7             SAVE ADDRESS OF GETMAINED DATA\n         LA   R4,8           BCT COUNT FOR TRANSLATE\nTRLOOP   TR   0(256,R3),HEXTABLE\n         LA   R3,256(R3)        TR THE NEXT 256 BYTES\n         BCT  R4,TRLOOP         DO IT FOR 2048 BYTES\n         B    LINECHAN          #### SCAN LINE CHANGES ####\nKEYS     L    R7,AREAADD        #### BEFORE COMMAND    ####\n         CLI  KEY,X'7D'        ENTER KEY PRESSED?\n         BE   TEST3270          YES, GO SCAN BUFFER\n         LR   R1,R7             NO, MUST BE PFKEY...\n         LA   R0,0              R0=0 IS PFKEY...R0=1 IS KEY COMMAND\n         CALL FSEPFKEY          GO SEE WHAT IT IS\n*\nTEST3270 EQU *\n         MVC  CURRADD(4),SAVECURR   COME HERE AFTER CHANGING LINES\n*   R7 HAS ADDRESS OF INPUT AREA\n*   R3 HAS LENGTH OF SCAN\n*\n         L    R7,AREAADD\n         LA   R3,2048\nINLOOP   CLC  0(3,R7),=XL3'11C1D5'        SCAN FOR COMMAND BUFFER\n         BNE  SKIPCO\n         B    HERECOMM\nSKIPCO   LA   R7,1(R7)\n         BCT  R3,INLOOP\n         CLI  LINEFLAG,X'00'\n         BE   DIRECRTN\n         MVI  LINEFLAG,X'00'\n         B    TPUTLOOP\n*  IF NO COMMAND ENTERED, SCAN FOR CHANGED LINES\n*\nLINECHAN EQU  *\n         MVC  FAKEIN(4),=C'0000'\n         MVC  SAVECURR(4),CURRADD\n         MVC  FAKELIN2(14),BLANKS\nCHANGE01 L    R7,AREAADD\n         MVI  LINEFLAG,X'00'\n         LA   R3,2048\nCHANGELO CLC  0(3,R7),=X'11C261'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11C3F1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11C5C1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11C6D1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11C761'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11C8F1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'114AC1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'114BD1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'114C61'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'114DF1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'114FC1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'1150D1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D161'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D2F1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D4C1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D5D1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D661'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D7F1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'11D9C1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'115AD1'\n         BE   CHANGE02\n         CLC  0(3,R7),=X'115B61'\n         BE   CHANGE02\nCHANGE10 LA   R7,1(R7)\n         BCT  R3,CHANGELO\n         MVC  RESPONSE(50),BLANKS\n         CLI  FAKELIN2,C' '\n         BE   KEYS\n         CLI  FAKELIN2+7,C' '\n         BE   KEYS\nGOODRANG ST   R7,SAVE7\n         ST   R3,SAVE3\n         LA   R7,FAKEBLK\n         BAL  R14,SKIPLA14\n         L    R7,SAVE7\n         L    R3,SAVE3\n*\n         B    KEYS\nCHANGE02 MVI  MODFLAG,X'01'\n         L    R6,SAVES#\n         LA   R6,1(R6)\n         ST   R6,SAVES#\n*        MVC  0(3,R7),=C'XXX'\n         LA   R7,3(R7)\n         B    SKIPBUFF\nFAKEINSR DC   C' IN '\nFAKEIN#  DC   7C' '\nFAKEIN   DC   C'0000'\n         DC   C' '\nFAKEBUFF DC   C' DEL '\nFAKELINE DC   20C' '\nFAKEBLK  DC   C' DEL '\nFAKELIN2 DC   14C' '\n         DS   0H\nSKIPBUFF MVI  ENDFLAG,X'00'\n         MVC  FAKELINE(20),BLANKS\n         CLI  6(R7),C'F'\n         BNE  CHECK#L\n         MVC  FAKELIN2(6),0(R7)\nCHECK#L  CLI  6(R7),C'L'\n         BNE  CHECKDEL\n         MVC  FAKELIN2+7(6),0(R7)\nCHECKDEL ST   R3,SAVE3\n         XR   R3,R3\n         IC   R3,6(R7)\n         C    R3,=F'240'\n         BNL  NUMTYPE\n         L    R3,SAVE3\n         B    CHECKD\nNUMTYPE  EQU *\n         MVC  FAKEIN+3(1),6(R7)\n         MVC  FAKEIN#(6),0(R7)\n         ST   R7,SAVE7\n         LA   R7,FAKEINSR\n         BAL  R14,FAKEINRT\n         L    R3,SAVE3\n         L    R7,SAVE7\nCHECKD   CLI  6(R7),C'D'\n         BNE  NODELCHA\n         MVC  FAKELINE(6),0(R7)\n         ST   R7,SAVE7\n         ST   R3,SAVE3\n         LA   R7,FAKEBUFF\n         BAL  R14,SKIPLA14\n         L    R7,SAVE7\n         L    R3,SAVE3\n         B    CHANGELO\nNODELCHA LA   R5,72        MAX SCREEN LINE LENGTH\n         LR   R2,R7\n         LA   R2,7(R2)     POINT TO DATA\n         XR   R4,R4\nCHANGE90 CLI  0(R2),X'11'  3270 START BUFFER ADDRESS?\n         BE   CHANGE91\n         LA   R4,1(R4)     ADD 1 TO DATA COUNT\n         LA   R2,1(R2)\n         BCT  R5,CHANGE90\nCHANGE91 MVI  LINEFLAG,X'01'\n         L    R5,TOPADD\n         L    R6,LASTADD\n         MVI  ENDFLAG,X'00'\nCHANGE12 CLI  FIXORVAR,X'00'\n         BNE  CHANGE03\n         TM   DATATYPE,B'01000000'\n         BNO  NOCOBOL3\n         CLC  0(6,R7),0(R5)\n         BE   CHANGE05\n         B    CHANGE06\nNOCOBOL3 LR   R8,R5\n         AH   R8,SAVELREC\n         SH   R8,=H'6'\n         CLC  0(6,R7),0(R8)\n         BE   CHANGE05\n         B    CHANGE06\nCHANGE03 CLC  0(6,R7),6(R5)\n         BE   CHANGE05\nCHANGE06 AH   R5,SAVELREC\n         CR   R5,R6\n         BH   CHANGE11\n         B    CHANGE12\nCHANGE11 C    R5,LASTADD\n         BNH  CHANGE13\n         SH   R5,SAVELREC\nCHANGE13 ST   R5,CURRADD\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(50),CHANGMSG\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\nCHANGMSG DC C'LINE TO BE MODIFIED NOT FOUND. USE \" IN  \" COMMAND'\n         DS   0H\n*\nCHANGE05 EQU  *\n         MVI  DIRECT,X'01'\n         LH   R8,SAVELREC\n         SH   R8,=H'8'\n         SH   R8,COLUMN\n         CLI  FIXORVAR,X'00'\n         BNE  CHANGE14\n         TM   DATATYPE,B'01000000'\n         BNO  NOCOBOL4\n         AH   R8,=H'2'\nNOCOBOL4 AH   R5,COLUMN\n         LTR  R4,R4\n         BNZ  WHICH1\n         BCTR R8,0\n         EX   R8,MOVEX401\n         B    *+10\nMOVEX401 MVC  0(0,R5),BLANKS\n         SH   R5,COLUMN\n         B    CHANGELO\nWHICH1   CR   R8,R4\n         BNH  USE8A\n         LR   R8,R4\nUSE8A    LTR  R8,R8\n         BZ   *+6\n         BCTR R8,0\n         LH   R2,SAVELREC\n         SH   R2,=H'8'\n         TM   DATATYPE,X'40'   COBOL?\n         BNO  *+8\n         LA   R2,2(R2)\n         SH   R2,COLUMN\n         BCTR R2,0\n         EX   R2,MOVEX401\n         EX   R8,CHANGE15\n         B    *+10\nCHANGE15 MVC  0(0,R5),7(R7)\n         SH   R5,COLUMN\n         B    CHANGELO\nCHANGE14 SH   R8,=H'4'\n         MVC  0(2,R5),SAVELREC\n         AH   R5,COLUMN\n         LTR  R4,R4\n         BNZ  WHICH2\n         BCTR R8,0\n         EX   R8,MOVEX402\n         B    *+10\nMOVEX402 MVC  12(0,R5),BLANKS\n         SH   R5,COLUMN\n         B    CHANGELO\nWHICH2   CR   R8,R4\n         BNH  USE8B\n         LR   R8,R4\nUSE8B    LTR  R8,R8\n         BZ   *+6\n         BCTR R8,0\n*\n         LH   R2,SAVELREC\n         SH   R2,=H'12'\n         SH   R2,COLUMN\n         BCTR R2,0\n         EX   R2,MOVEX402\n         EX   R8,CHANGE16\n         B    *+10\nCHANGE16 MVC  12(0,R5),7(R7)\n         SH   R5,COLUMN\n         B    CHANGELO\n*\n*\n*  NO COMMAND WAS ENTERED AND NO LINES WERE CHANGED...\n*    LOOK AT FIELD \"DIRECT\".. IF = 1 DIRECTION IS FORWARD\n*    IF = 0 DIRECTION IS BACKWARD\n*\nDIRECRTN LA  R7,FAKEPFPB\n         CLI  DIRECT,X'00'\n         BE   PBRTN\n         B    PFRTN           IF = 1  GO AHEAD\nFAKEPFPB DC C' PF 1 '\n         DS 0H\n*\n*\n*  THIS SECTION WILL SCAN THE INPUT AREA BUFFER FOLLOWING THE\n*  SBA AND 3270 ADDRESS FOR INPUT COMMAND. THE FUNCTION IS TO\n* DETERMINE WHAT ROUTINE WILL BE BRANCHED TO FOR A SPECIFIED\n*  COMMAND.\n*\n*\nHERECOMM LA   R3,22    19+3 OF 3270 INFO\n         MVC  0(3,R7),=3C' '\nFIRSTBLK CLI  0(R7),C' '\n         BNE  TRYIT\n         LA   R7,1(R7)\n         BCT  R3,FIRSTBLK\n         B    DIRECRTN\nTRYIT    BCTR R7,0\nCOMMLOOP CLC  0(5,R7),=C' TOP '\n         BE   TOPRTN\n         CLC  0(3,R7),=C' T '\n         BE   TOPRTN\n         CLC  0(5,R7),=C' PFK '\n         BNE  TRYBOTT\n         LR   R1,R7\n         LA   R0,1\n         CALL FSEPFKEY\n         B    TPUTLOOP\nTRYBOTT  CLC  0(4,R7),=C' BOT'\n         BE   BOTTRTN\n         CLC  0(3,R7),=C' B '\n         BE   BOTTRTN\n         CLC  0(4,R7),=C' PF '\n         BE   PFRTN\n         CLC  0(4,R7),=C' PB '\n         BE   PBRTN\n         CLC  0(4,R7),=C' HF '\n         BE   HFRTN\n         CLC  0(4,R7),=C' HB '\n         BE   HBRTN\n         CLC  0(6,R7),=C' FIND '\n         BE   FINDRTN\n         CLC  0(3,R7),=C' F '\n         BE   FINDRTN\n         CLC  0(5,R7),=C' DSN '\n         BE   DSNRTN\n         CLC  0(10,R7),=C' AUTOSAVE '\n         BNE  NOAUTO\n         MVC  SAVES#(4),=F'0'\n         MVI  AUTOFLAG,X'01'\n         B    TPUTLOOP\nNOAUTO   CLC  0(4,R7),=C' DEL'\n         BE   DELRTN\n          CLC  0(4,R7),=C' UP '\n          BE   UPRTN\n          CLC  0(6,R7),=C' DOWN '\n          BE   DOWNRTN\n          CLC  0(4,R7),=C' IN '\n          BE   INRTN\n         CLC   0(8,R7),=C' INSERT '\n         BE   INRTN\n         CLC  0(8,R7),=C' COLUMN '\n         BE   COLRTN\n         CLC  0(5,R7),=C' COL '\n         BE   COLRTN\n         CLC  0(3,R7),=C' C '\n         BE   CHANGRTN\n         CLC  0(8,R7),=C' CHANGE '\n         BE   CHANGRTN\n         CLC  0(6,R7),=C' COPY '\n         BNE  CHECKMOV\n         MVI  MOVCOPFL,X'01'\n         B    MOVECOPY\nCHECKMOV CLC  0(6,R7),=C' MOVE '\n         BNE  CHKM2\n         MVI  MOVCOPFL,X'00'\n         B    MOVECOPY\nCHKM2    CLC  0(3,R7),=C' M '\n         BNE  NOMOVE\n         MVI  MOVCOPFL,X'00'\n         B    MOVECOPY\nNOMOVE   EQU  *\n         CLC  0(6,R7),=C' SAVE '\n         BNE  SET11\n         MVI  SEFLAG,X'00'\n         BC   15,SAVERTN\nSET11    CLC  0(3,R7),=C' S '\n         BNE  SETEST\n         MVI  SEFLAG,X'00'\n         BC   15,SAVERTN\nSETEST   CLC  0(9,R7),=C' SAVEEND '\n         BNE  NOSE\n         MVI  SEFLAG,X'01'\n         BC   15,SAVERTN\nNOSE     EQU  *\n         CLC  0(5,R7),=C' END '\n         BE   ENDRTN\n*        CLC  0(3,R7),=C' H '\n*        BE   HELPRTN\n*        CLC  0(6,R7),=C' HELP '\n*        BE   HELPRTN\n         CLC  0(4,R7),=C' REN'\n         BE   RENUMRTN\n         CLC  0(3,R7),=C' R '\n         BE   RENUMRTN\n         CLC  0(6,R7),=C' DONE '\n         BE   END01\n         CLC  0(4,R7),=C' SUB'\n         BE   SUBRTN\n         LA   R7,1(R7)\n         LA   R8,CPPL\n         LR   R3,R7\n         LA   R4,70\nX11LOOP  CLI  0(R3),X'11'\n         BNE  KEEPGOIN\n         MVC  0(5,R3),BLANKS\n         B    TSOCMD\nKEEPGOIN LA   R3,1(R3)\n         BCT  R4,X11LOOP\nTSOCMD   LINK EP=FSETSO\n         B    TPUTLOOP\n*\n*\n*  THIS NEXT SECTION CONTAINS ROUTINES WHICH ARE BRANCHED TO\n*    WHEN THE CORRISPONDING COMMAND WAS ENTERED IN THE BUFFER\n*  REG. R7 HAS THE ADDRESS OF THE COMMAND  EX.  PF 2\nENDRTN   CLI  ENDFLAG,X'01'      WAS AN END ISSUED?\n         BE   END01\n         CLI  MODFLAG,X'00'      DATA MODIFIED?\n         BNE   END03\nEND01    TPUT  CLEER,8,FULLSCR,HOLD    CLEAR SCREEN\n         L     R2,16                   CVT ADDRESS\n         CLC   228(4,R2),=F'0'         MVT,SVS TSO?\n         BNE   RETURN\n         LA    2,126    MAKE SWAPPABLE & RESET PRIORITY BACK\n*        LINK  EP=FSEPRTY                                  AXC\nDUMMSTAE EQU  *\n         B     RETURN\nEND03    MVC   RESPONSE(50),BLANKS\n         MVC   RESPONSE(38),ENDMSG\n         MVC   COMMAND(19),BLANKS\n         MVI   ENDFLAG,X'01' SET FLAG TO SAY USER ENDS WITH\n*                            NO SAVE. FLAG MUST BE RESET ON\n*                            COMMANDS THAT MODIFY DATA.\n         B     TPUTLOOP\nENDMSG DC C'DATA SET NOT SAVED - ENTER SAVE OR END'\n         DS    0H\n*\nMOVECOPY EQU  *\n         LA   R7,1(R7)\n         MVI  ENDFLAG,X'00'\n         LA   R3,30\nMOVCOP1  CLI  0(R7),C' '\n         BE   MOVCOP2\n         LA   R7,1(R7)\n         BCT  R3,MOVCOP1\n         B    BADFIND1\nMOVCOP2  CLI  0(R7),C' '\n         BNE  MOVCOP3\n         LA   R7,1(R7)\n         BCT  R3,MOVCOP2\n         B    BADFIND1\nMOVCOP3  XR   R4,R4\n         LR   R5,R7\nMOVCOP4  CLI  0(R7),C' '\n         BE   MOVCOP5\n         BAL  R14,DIGITIC\n         BCT  R3,MOVCOP4\n         B    BADFIND1\nMOVCOP5  BAL  R14,LTRRTN\n         EX   R4,MOVCOP6\n         B    *+10\nMOVCOP6  PACK DOUBLE(8),0(0,R5)   EXECUTED\n         CVB  R6,DOUBLE\n         ST   R6,FIELD1\nMOVCOP7  CLI  0(R7),C' '\n         BNE  MOVCOP8\n         LA   R7,1(R7)\n         BCT  R3,MOVCOP7\n         B    BADFIND1\nMOVCOP8  XR   R4,R4\n         LR   R5,R7\nMOVCOP9  CLI  0(R7),C' '\n         BE   MOVCOP10\n         BAL  R14,DIGITIC\n         BCT  R3,MOVCOP9\n         B    BADFIND1\nMOVCOP10 BAL  R14,LTRRTN\n         EX    R4,MOVCOP11\n         B     *+10\nMOVCOP11 PACK  DOUBLE(8),0(0,R5)\n         CVB   R6,DOUBLE\n         ST    R6,FIELD2\nMOVCOP12 CLI   0(R7),C'='\n         BE    ONLY2\n         CLI   0(R7),C' '\n         BNE   MOVCOP13\n         LA    R7,1(R7)\n         BCT   R3,MOVCOP12\nONLY2    MVC   FIELD3(4),FIELD2\n         MVC   FIELD2(4),FIELD1\n         B     DOINSRT\nMOVCOP13 XR   R4,R4\n         LR   R5,R7\nMOVCOP14 CLI  0(R7),C' '\n         BE   MOVCOP15\n         BAL  R14,DIGITIC\n         BCT  R3,MOVCOP14\n         B    BADFIND1\nMOVCOP15 BAL  R14,LTRRTN\n         EX   R4,MOVCOP16\n         B    *+10\nMOVCOP16 PACK DOUBLE(8),0(0,R5)\n         CVB  R6,DOUBLE\n         ST   R6,FIELD3\n*\nDOINSRT  EQU  *\n         L    R2,TOPADD\n         L    R3,LASTADD\n         AH   R3,SAVELREC\nMOVCOPYY BAL   R14,THRURANG\n         C    R5,FIELD1\n         BE   CHECK#2\n         AH   R2,SAVELREC\n         B    THRURANG\nCHECK#2  ST   R2,STARTING\n         CLC  FIELD1(4),FIELD2\n         BNE  MOVCOP19\n         ST   R2,ENDING\n         B    MOVCOPOK\nMOVCOP19 BAL  R14,THRURANG\n         C    R5,FIELD2\n         BE   CHECK#3\n         AH   R2,SAVELREC\n         B    THRURANG\nCHECK#3  ST   R2,ENDING\n*\nMOVCOPOK EQU  *\n         L   R0,ENDING\n         AH  R0,SAVELREC\n         S   R0,STARTING\n         ST  R0,COPYLEN\n         GETMAIN EC,LV=(0),A=COPYADD\n         LTR R15,R15\n         BNZ  NOCORE\n         L   R2,COPYADD\n         A   R2,COPYLEN\n         ST  R2,COPYEND\n         L   R3,COPYLEN\n         LR  R5,R3\n         L   R2,COPYADD\n         L   R4,STARTING\n         MVCL R2,R4\n*\n         XR   R6,R6\n         L    R7,ENDING\n         AH   R7,SAVELREC\n         S    R7,STARTING\n         LH   R8,SAVELREC\n         DR   R6,R8\n         CVD  R7,DOUBLE\n         UNPK FAKEIN(4),DOUBLE(8)\n         OI   FAKEIN+3,X'F0'\n         L    R7,FIELD3\n         CVD  R7,DOUBLE\n         UNPK FAKEIN#(6),DOUBLE(8)\n         OI   FAKEIN#+5,X'F0'\n         LA   R7,FAKEINSR\n         BAL  R14,FAKEINRT\n         TM   INFLAG1,X'01'\n         BO   GOODIN\n         B    TPUTLOOP\nGOODIN   EQU  *\n*\nGO       MVI  MODFLAG,X'01'\n         L    R2,CURRADD\n         L    R4,COPYADD\n         L    R5,COPYEND\nMOVCOP20 CR  R4,R5\n         BE  MOVORCOP\n         LH  R6,SAVELREC\n         SH  R6,=H'7'\n         CLI  FIXORVAR,X'00'\n         BNE  MOVCOP22\n         TM   DATATYPE,X'40'\n         BNO  MOVCOP21\n         EX   R6,MOVCOP23\n         B    NEXTCOPY\nMOVCOP21 SH   R6,=H'2'\n         EX   R6,MOVCOP24\n         B    NEXTCOPY\nMOVCOP22 SH   R6,=H'6'\n         EX   R6,MOVCOP25\n         B    NEXTCOPY\nMOVCOP23 MVC  6(0,R2),6(R4)\nMOVCOP24 MVC  0(0,R2),0(R4)\nMOVCOP25 MVC  12(0,R2),12(R4)\n*\nNEXTCOPY AH   R2,SAVELREC\n         AH   R4,SAVELREC\n         B    MOVCOP20\nMOVORCOP L    R2,SAVES#\n         LA   R2,1(R2)\n         ST   R6,SAVES#\n         TM   MOVCOPFL,X'01'    COPY SPECIFIED?\n         BNO  MOVEFUNC\n         L    R0,COPYLEN\n         FREEMAIN R,LV=(0),A=COPYADD\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(14),=C'LINE(S) COPIED'\n         B    TPUTLOOP\n*\nMOVEFUNC L    R2,FIELD1\n         CVD  R2,DOUBLE\n         UNPK FAKELIN2(6),DOUBLE(8)\n         OI   FAKELIN2+5,X'F0'\n         ICM  R2,X'0F',FIELD2\n         CVD  R2,DOUBLE\n         UNPK FAKELIN2+7(6),DOUBLE(8)\n         OI   FAKELIN2+12,X'F0'\n         LA   R7,FAKEBLK\n         BAL  R14,SKIPLA14\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(13),=C'LINE(S) MOVED'\n         B    TPUTLOOP\n*\n*\nDIGITIC  XR    R6,R6\n         IC    R6,0(R7)\n         C     R6,=F'240'\n         BL    BADFIND1\n         LA   R4,1(R4)\n         LA   R7,1(R7)\n         BR   R14\n*\n*\nLTRRTN   LTR  R4,R4\n         BZ   BADFIND1\n         C    R4,=F'6'\n         BH   BADFIND1\n         BCTR R4,0\n         BR   R14\n*\n*\nTHRURANG CR   R2,R3\n         BE   DEL26\n         CLI  FIXORVAR,X'00'\n         BNE  MOVCOP18\n         TM   DATATYPE,X'40'\n         BNO  MOVCOP17\n         PACK DOUBLE(8),0(6,R2)\n         B    CHECK#1\nMOVCOP17 LR   R6,R2\n         AH   R6,SAVELREC\n         SH   R6,=H'6'\n         PACK DOUBLE(8),0(6,R6)\n         B    CHECK#1\nMOVCOP18 PACK DOUBLE(8),6(6,R2)\nCHECK#1  CVB  R5,DOUBLE\n         BR   R14\n*\n*\nSAVERTN  EQU  *\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  SKIPDC\n         B    BADLOW\nPARMSAVE DS   X\n         DS   0F\nDDCOUNT  DC   F'1'\nPARMS    DC   A(TOPADD,LASTADD,ALLOCDSN,SAVEDSN,MEMBER)\n         DC   A(PSCB,SAVEFLAG,ENDFLAG,SAVELREC,DATATYPE)\n         DC   A(PARMSAVE,FIXORVAR,CPPL,RESPONSE,DDCOUNT)\n         DS   0H\nSKIPDC   EQU  *\n         MVI   SAVEFLAG,X'00'\n         MVI   PARMSAVE,X'00'\n         LA    R4,PARMSAVE    RETURN FLAGS ARE SET HERE\n         LA    R3,PARMS\n         MVC   COMMAND(19),BLANKS\n         MVC   RESPONSE(50),BLANKS\n*\n         LINK EP=FSESAVE\nOKSAVE   TM   PARMSAVE,X'01'    SAVE OK?\n         BO   SKIPZERO\n         B    TPUTLOOP\nSKIPZERO EQU  *\n         MVI  MODFLAG,X'00'\n         MVI  ENDFLAG,X'01'\n         MVI  SAVEFLAG,X'01'   FLAG TO INDICATE SAVED\n         XR   R6,R6\n         ST   R6,SAVES#\n         TM   SEFLAG,1         SAVE-END ISSUED?\n         BO   ENDRTN\n         MVI  SEFLAG,X'00'\n         B    TPUTLOOP\n*\nSUBRTN   EQU  *\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  *+8\n         B     BADLOW\n         MVI   PARMSAVE,X'00'\n         LA    R3,PARMS\n         LA    R4,PARMSAVE\n         MVC   COMMAND(19),BLANKS\n         LA    R7,FAKESAVE\n         LINK  EP=FSESAVE\n         TM    PARMSAVE,X'01'\n         BNO   TPUTLOOP\n         MVC   RESPONSE(50),BLANKS\n*        DS    0H\nOKSAVE1  LA    R8,CPPL\n         LA    R7,FAKESUB\n         LINK  EP=FSETSO\n         MVC   RESPONSE(50),BLANKS\n         ICM   R3,15,PSCB\n         XR    R4,R4\n         IC    R4,7(R3)\n         BCTR  R4,0\n         EX    R4,MOVEID#\n         BC    15,*+10\nMOVEID#  MVC   NAMEOFIT(0),0(R3)\n         LA    R4,1(R4)\n         LA    R3,NAMEOFIT\n         AR    R3,R4\n         MVC   0(9,R3),=C'.FSEABCDE'\n         SR    R0,R0\n         SCRATCH SUBDSN\n         LTR   R15,R15\n         BZ    SCRCODE\n         MVC   RESPONSE(46),SCRMSG\n         BC   15,TPUTLOOP\nSCRMSG   DC C'UNABLE TO DELETE FSEABCDE. USE DELETE COMMAND '\n         DS   0H\nSCRCODE  CATALOG UNCATSUB\nCATCODE  B     TPUTLOOP\nFAKESAVE DC    C' S FSEABCDE '\nFAKESUB  DC    C'SUBMIT FSEABCDE     '\nUNCATSUB CAMLST UNCAT,NAMEOFIT\nSUBDSN   CAMLST SCRATCH,NAMEOFIT,,TSOPAK\nNAMEOFIT DC    CL44' '\nTSOPAK   DC    H'1'\n         DC   X'3050200B'           3350           | CHANGE THESE\n         DC   C'DAA001'      AXC    VOL SER IMG038 | FOR INSTALLATION\n         DC   H'0'\n         DS   0H\nINRTN    LA   R14,TPUTLOOP\nFAKEINRT LA   R7,1(R7)\n         MVI  ENDFLAG,X'00'\n         MVI  INFLAG1,X'00'\n         LA   R3,19\nIN01     CLI  0(R7),C' '\n         BE   IN02\n         LA   R7,1(R7)\n         BCT  R3,IN01\n         BR   R14\nIN02     CLI  0(R7),C' '\n         BNE  IN03\n         LA   R7,1(R7)\n         BCT  R3,IN02\nINBAD    MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(29),INMSG1\nINGETOUT MVC  COMMAND(19),BLANKS\n         BR   R14\nINMSG1   DC   C'INVALID OR MISSING PARAMETERS'\n         DS   0H\nIN03     LA   R4,0\n         LR   R5,R7\nIN04     CLI  0(R7),C' '\n         BE   IN05\n         XR   R6,R6\n         IC   R6,0(R7)\n         C    R6,=F'240'\n         BL   INBAD\n         LA   R4,1(R4)\n         LA   R7,1(R7)\n         BCT  R3,IN04\n         B    INBAD\nIN05     CH   R4,=H'6'\n         BH   INBAD\n         BCTR R4,0\n         EX   R4,IN06\n         B    *+10\nIN06     PACK DOUBLE(8),0(0,R5)\n         CVB  R4,DOUBLE\n         ST   R4,LOWER\nIN07     CLI  0(R7),C' '\n         BNE  IN08\n         LA   R7,1(R7)\n         BCT  R3,IN07\n         B    INBAD\nIN08     LA   R4,0\n         LR   R5,R7\nIN09     CLI  0(R7),C' '\n         BE   IN10\n         XR   R6,R6\n         IC   R6,0(R7)\n         C    R6,=F'240'\n         BL   INBAD\n         LA   R4,1(R4)\n         LA   R7,1(R7)\n         BCT  R3,IN09\nIN10     BCTR R4,0\n         EX   R4,IN11\n         B    *+10\nIN11     PACK DOUBLE(8),0(0,R5)\n         CVB  R4,DOUBLE\n         LTR  R4,R4\n         BZ   INBAD\n         C    R4,=F'1000'\n         BNL  INBAD\n         STH  R4,INCOUNT\n         A    R4,LOWER\n         ST   R4,UPPER\n         B    INMAIN\n         LTORG\n         DS   0H\nINMAIN   EQU  *\n         L    R5,TOPADD\n         MVI INFLAG,X'01'    FIRST TIME INSERT\n         L    R6,LASTADD\n         AH   R6,SAVELREC\nIN12     CR   R5,R6\n         BE   SKIPFIT\nIN72     CR   R5,R6\n         BE   DELNONE\n*\n         CLI  FIXORVAR,X'00'\n         BNE  IN13\n         TM   DATATYPE,B'01000000'\n         BNO  IN14\n         XR   R1,R1\n         TRT  0(6,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(6,R5)\n         CVB  R7,DOUBLE\n         B    IN16\nIN14     XR   R1,R1\n         LR   R8,R5\n         AH   R8,SAVELREC\n         SH   R8,=H'8'\n         TRT  0(8,R8),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(8,R8)\n         CVB  R7,DOUBLE\n         B    IN16\nIN13     XR   R1,R1\n         TRT  4(8,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),4(8,R5)\n         CVB  R7,DOUBLE\nIN16     C    R7,LOWER\n         BNH  IN90\n         CLI  INFLAG,X'00'\n         BE   NOIN\n         MVC  CURRADD(4),TOPADD\n         L    R5,CURRADD\n         B    IN18\nNOIN     L    R7,LOWER\n         B    DELNONE\nIN90     BNE  IN17\n         AH   R5,SAVELREC\n         ST   R5,CURRADD\n         B    IN18\nIN17     AH   R5,SAVELREC\n         MVI  INFLAG,X'00'\n         B    IN72\nIN18     MVI  INFLAG,X'00'\n         CR   R5,R6\n         BNL  SKIPFIT\n         L    R3,UPPER\n         CLI  FIXORVAR,X'00'\n         BNE  IN19\n         TM   DATATYPE,B'01000000'\n         BNO  IN20\n         XR   R1,R1\n         TRT  0(6,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(6,R5)\n         CVB  R7,DOUBLE\n         B    IN21\nIN20     XR   R1,R1\n         LR   R8,R5\n         AH   R8,SAVELREC\n         SH   R8,=H'8'\n         TRT  0(8,R8),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(8,R8)\n         CVB  R7,DOUBLE\n         B    IN21\nIN19     XR   R1,R1\n         TRT  4(8,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),4(8,R5)\n         CVB  R7,DOUBLE\nIN21     CR   R3,R7\n         BL   IN23\nIN22     MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(35),INMSG2\n         MVC  COMMAND(19),BLANKS\n         BR   R14\nINMSG2   DC   C'RANGE EXTENDS INTO EXISTING LINE(S)'\n         DS   0H\nIN23     EQU  *\n*  IT FITS\n         L    R5,LASTADD\n         S    R5,CURRADD\n         AH   R5,SAVELREC\n         ST   R5,XLEN\n         MVC  SAVELAST(4),LASTADD\n         LH   R5,INCOUNT\n         MH   R5,SAVELREC\n         L    R6,LASTADD\n         AR   R6,R5\n         C    R6,BOTTADD\n         BNH  IN24\nNOCORE   MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         MVC  RESPONSE(48),INMSG3\n         BR   R14\nINMSG3 DC C'STORAGE NOT AVAILABLE FOR INSERT. SAVE AND END.   '\n         DS   0H\nIN24    ST    R6,LASTADD\n        L     R6,CURRADD\n        L     R7,XLEN\n        LR    R5,R7\n        LH    R4,SAVELREC\n        MH    R4,INCOUNT\n        A     R4,CURRADD\n         ST    R6,SAVEFROM\n        ST    R4,AREASIZE\n        LR    R3,R5\n        ST    R3,FREELEN\n        LR    R0,R5\n*       ICM   R0,8,=X'7F000000'        FROM SUBPOOL 127\n        GETMAIN EC,LV=(0),A=FREEMAI\n        LTR   R15,R15\n        BNZ   NOCORE\n        L     R2,FREEMAI\n        MVCL  R2,R6\n        L     R2,FREEMAI\n        LR    R3,R5\n        L     R4,AREASIZE\n        MVCL  R4,R2\n         MVI  MODFLAG,X'01'\n        L    R0,FREELEN\n        FREEMAIN R,LV=(0),A=FREEMAI\n*\n*\n*  INCOUNT HAS # OF RECORDS TO BE INSERTED\n*  CURRADD HAS ADDRESS OF IN-CORE FIRST RECORD TO BE INITIATED\n*\n         L    R4,CURRADD\n         LH   R5,SAVELREC\n         MH   R5,INCOUNT\n         XR   R6,R6\n         L    R7,=X'40000000'\n*\n         MVCL R4,R6\n         L    R5,CURRADD\n         LH   R3,INCOUNT\nIN25     L    R6,LOWER\n         LA   R6,1(R6)\n         ST   R6,LOWER\n         CLI  FIXORVAR,X'00'\n         BNE  IN26\n         TM   DATATYPE,B'01000000'\n         BO   IN27\n         CVD  R6,DOUBLE\n         LR   R8,R5\n         AH   R8,SAVELREC\n         SH   R8,=H'8'\n         UNPK 0(8,R8),DOUBLE(8)\n         OI   7(R8),X'F0'\n         B    CLEANUP\nIN27     CVD  R6,DOUBLE\n         UNPK 0(6,R5),DOUBLE(8)\n         OI   5(R5),X'F0'\n         B    CLEANUP\nIN26     CVD  R6,DOUBLE\n         UNPK 4(8,R5),DOUBLE(8)\n         OI   11(R5),X'F0'\n         MVC  0(2,R5),SAVELREC\n         MVC  2(2,R5),=X'0000'\nCLEANUP  AH   R5,SAVELREC\n         BCT  R3,IN25\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         MVI  INFLAG1,X'01'\n         ICM  R6,X'0F',SAVES#\n         LA   R6,1(R6)\n         ST   R6,SAVES#\n         BR   R14\nSKIPFIT  LH   R6,INCOUNT\n         MH   R6,SAVELREC\n         L    R5,CURRADD\n         AR   R5,R6\n         SH   R5,SAVELREC\n         C    R5,BOTTADD\n         BH   NOCORE\n         ST   R5,LASTADD\n         L    R4,CURRADD\n         LR   R5,R6\n*\n         XR   R6,R6\n         ICM  R7,15,=X'40000000'\n         MVCL R4,R6\n         LH   R3,INCOUNT\n         L    R5,CURRADD\n         MVI  MODFLAG,X'01'\n         B    IN25\n*\n*\n         LTORG\n         DS   0H\n*\n*\nRENUMRTN MVI  LISTFLAG,X'00'\n         LA  R14,TPUTLOOP\nREALONE  MVI  ENDFLAG,X'00'\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  RENUMLOW\n         B    BADLOW\nRENUMLOW LA    R7,1(R7)\n         LA    R3,19\nRENUM01  CLI   0(R7),C' '\n         BE    RENUM02\n         LA    R7,1(R7)\n         BCT  R3,RENUM01\n         B    RENUM07\nRENUM02  CLI  0(R7),C' '\n         BNE  RENUM03\n         LA   R7,1(R7)\n         BCT  R3,RENUM02\n         MVC  SAVELINE(4),=F'10'\n         MVC  NUMVALUE(2),=H'10'\n         B    RENUM07\nRENUM03  LA   R4,0            DIGIT COUNT\n         LR   R5,R7           SAVE BEGIN ADDR.\nRENUM04  CLI  0(R7),C' '\n         BE   RENUM05\n         XR   R6,R6\n         IC   R6,0(R7)         CHECK IF NUMERIC\n         C    R6,=F'240'\n         BL   BADFIND1\n         LA   R4,1(R4)         ADD TO DIGIT COUNT\n         LA   R7,1(R7)\n         BCT  R3,RENUM04\nRENUM05  LTR  R4,R4\n         BZ   BADFIND1\n         C    R4,=F'6'         MORE THAN 6 DIGITS?\n         BH   BADFIND1\n         BCTR R4,0\n         EX   R4,RENUM06\n         B    *+10\nRENUM06  PACK DOUBLE(8),0(0,5)\n         CVB  R6,DOUBLE\n         C    R6,=F'999999'\n         BH   BADFIND1\n         ST   R6,SAVELINE\nRENUM14  CLI   0(R7),C' '\n         BNE   RENUM15\n         LA    R7,1(R7)\n         BCT   R3,RENUM14\n         MVC   NUMVALUE(2),=H'10'\n         B     RENUM07\nRENUM15  XR    R4,R4\n         LR    R5,R7\nRENUM16  CLI   0(R7),C' '\n         BE    RENUM17\n         XR    R6,R6\n         IC    R6,0(R7)\n         C     R6,=F'240'\n         BL    BADFIND1\n         LA    R7,1(R7)\n         LA    R4,1(R4)\n         BCT   R3,RENUM16\nRENUM17  LTR   R4,R4\n         BZ    BADFIND1\n         C     R4,=F'4'\n         BH    BADFIND1\n         BCTR  R4,0\n         EX    R4,RENUM18\n         B     *+10\nRENUM18  PACK  DOUBLE(8),0(0,R5)\n         CVB   R6,DOUBLE\n         LTR   R6,R6\n         BZ    BADFIND1\n         C     R6,=F'1000'\n         BH    BADFIND1\n         STH   R6,NUMVALUE\nRENUM07  EQU  *\n         L    R2,TOPADD\n         L    R3,LASTADD\n         AH   R3,SAVELREC\nRENUMXXX L    R7,LASTADD\n         AH   R7,SAVELREC\n         S    R7,TOPADD\n         LH   R8,SAVELREC\n         XR   R6,R6\n         DR   R6,R8         FIND OUT # OF RECS\n*  R7 HAS # OF USED RECORDS\n         MH   R7,NUMVALUE\n         A    R7,SAVELINE\n         C    R7,=F'999999'   CHECK FOR LINE # TOO BIG\n         BH   RENUM11         TOO LARGE\n         L   R4,SAVELINE\n         SH  R4,NUMVALUE\n         ST  R4,SAVELINE\nRENUM08  CR   R2,R3\n         BE   RENUM09\n         L    R4,SAVELINE\n         AH   R4,NUMVALUE\n         ST   R4,SAVELINE\n         CLI  FIXORVAR,X'00'  FIXED TYPE REC LENGTH?\n         BNE  RENUM12\n         CVD  R4,DOUBLE\n         TM   DATATYPE,B'01000000'\n         BNO  NOCOBOL5\n         UNPK 0(6,R2),DOUBLE(8)\n         OI   5(R2),X'F0'\n         B    RENUM13\nNOCOBOL5 LR   R5,R2\n         AH   R5,SAVELREC\n         SH   R5,=H'8'\n         UNPK 0(8,R5),DOUBLE(8)\n         OI   7(R5),X'F0'\n         B    RENUM13\nRENUM12  CVD  R4,DOUBLE\n         UNPK 4(8,R2),DOUBLE(8)\n         OI   11(R2),X'F0'\nRENUM13  AH   R2,SAVELREC\n         B    RENUM08\nRENUM09  MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(19),RENUMSG1\n         MVC  COMMAND(19),BLANKS\n         MVI  MODFLAG,X'01'\n         MVC  NUMVALUE(2),=H'10'\n         MVC  SAVELINE(4),=F'10'\n         BR   R14\nRENUMSG1 DC   C'DATA SET RENUMBERED'\n         DS   0H\nRENUM11  MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(47),RENUMSG2\n         MVC  COMMAND(19),BLANKS\n         BR   R14\nRENUMSG2 DC C'LINE NUMBERS EXCEED 6 DIGITS. USE SMALLER VALUE'\n         DS   0H\nPFRTN    BAL  R14,DIGITRTN\n         LA   R5,20\nDOWNDIG  MH   R5,SAVELREC\n         MH   R5,DIGIT#\n         A    R5,CURRADD\n         C    R5,LASTADD\n         BH   BOTTRTN\n         ST   R5,CURRADD\n         MVI  ENDFLAG,X'00'\n         MVI  DIRECT,X'01'\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\n*\n*\nPBRTN    BAL  R14,DIGITRTN\n         LA   R5,20\nUPDIG    MH   R5,SAVELREC\n         MH   R5,DIGIT#\n         L    R6,CURRADD\n         SR   R6,R5\n         C   R6,TOPADD\n         BL   TOPRTN\n         MVI  ENDFLAG,X'00'\n         ST   R6,CURRADD\n         MVI  DIRECT,X'00'\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\n*\n*\nDIGITRTN LA   R7,3(R7)         POINT TO X'40'\n         LA   R3,8             MAX COUNT\nPFLOOP1  CLI  0(R7),C' '\n         BNE  PF02\n         LA   R7,1(R7)\n         BCT  R3,PFLOOP1\n*\n*  NO DIGIT SPECIFIED (DIGIT# = 1)\n*\n         LA   R5,1\n         STH  R5,DIGIT#\n         BR   R14\n*\n*  DIGIT SPECIFIED\n*\nPF02     XR   R4,R4\n         LR   R5,R7\nPFLOOP2  CLI  0(R7),C' '\n         BE   PF03\n         XR   R6,R6\n         IC   R6,0(R7)\n         C    R6,=F'240'\n         BL   INBAD\n         LA   R4,1(R4)\n         LA   R7,1(R7)\n         BCT  R3,PFLOOP2\n*\nPF03     CH   R4,=H'100'\n         BH   INBAD\n         LTR  R4,R4\n         BZ   *+6\n         BCTR R4,0\n         EX   R4,PF04\n         B    *+10\nPF04     PACK DOUBLE(8),0(0,R5)\n         CVB  R4,DOUBLE\n         STH  R4,DIGIT#\n         BR   R14\nDIGIT#   DS   H\n*\n*\nDELRTN   EQU  *\n         LA   R14,TPUTLOOP\nSKIPLA14 MVI  ENDFLAG,X'00'\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  NOTEMPTY\n         B    BADLOW\nNOTEMPTY LA   R7,1(R7)\n         LA   R3,19\nDEL01    CLI  0(R7),C' '\n         BE   DEL02\n         LA   R7,1(R7)\n         BCT  R3,DEL01\n         B    DEL26\nDEL02    CLI  0(R7),C' '\n         BNE  DEL03\n         LA   R7,1(R7)\n         BCT  R3,DEL02\n         B    DEL26\nDEL03    LA   R4,0\n         LR   R5,R7\nDEL04    CLI  0(R7),C' '\n         BE   DEL05\n         XR   R6,R6\n         IC   R6,0(R7)\n         C    R6,=F'240'\n         BL   DEL26\n         LA   R4,1(R4)\n         LA   R7,1(R7)\n         BCT  R3,DEL04\n         CH   R4,=H'6'\n         BH   DEL26\n* NO UPPER BOUND SPECIFIED\n         B    DELUPPER\nDEL05    CH   R4,=H'6'\n         BH   DEL26\n         BCTR R4,0\n         EX   R4,DEL06\n         B    *+10\nDEL06    PACK DOUBLE(8),0(0,R5)\n         CVB  R4,DOUBLE\n         ST   R4,LOWER\nDEL07    CLI  0(R7),C' '\n         BNE  DEL08\n         LA   R7,1(R7)\n         BCT  R3,DEL07\nDELUPPER MVC  UPPER(4),=4X'00'\n         BC   15,DELMAIN\n*\nDEL08    XR   R4,R4\n         LR   R5,R7\nDEL09    CLI  0(R7),C' '\n         BE   DEL10\n         SR   R6,R6\n         IC   R6,0(R7)\n         C    R6,=F'240'\n         BL   DEL26\n         LA   R4,1(R4)\n         LA   R7,1(R7)\n         BCT  R3,DEL09\nDEL10    CH   R4,=H'6'\n         BH   DEL26\n         BCTR R4,0\n         EX   R4,DEL11\n         B    *+10\nDEL11    PACK DOUBLE(8),0(0,R5)\n         CVB  R4,DOUBLE\n         ST   R4,UPPER\n*\nDELMAIN  EQU  *\n         ICM  R5,15,TOPADD\n         ICM  R6,15,LASTADD\n         AH   R6,SAVELREC\nDEL12    CR   R5,R6\n         BE   DELNONE\n         CLI  FIXORVAR,X'00'\n         BNE  DEL13\n         TM   DATATYPE,B'01000000'\n         BNO  DEL14\n         SR   R1,R1\n         TRT  0(6,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(6,R5)\n         CVB  R7,DOUBLE\n         BC   15,DEL16\nDEL14    XR   R1,R1\n         LR   R8,R5\n         AH   R8,SAVELREC\n         SH   R8,=H'8'\n         TRT  0(8,R8),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(8,R8)\n         CVB  R7,DOUBLE\n         BC   15,DEL16\nDEL13    XR   R1,R1\n         TRT  4(8,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),4(8,R5)\n         CVB  R7,DOUBLE\nDEL16    C    R7,LOWER\n         BNH  DEL89\n         L    R7,LOWER\n         B    DELBAD\nDEL89    BNE  DEL17\n         ST   R5,CURRADD\n         BC   15,DEL18\nDEL17    AH   R5,SAVELREC\n         B    DEL12\nDELNONE  L    R7,LOWER\nDELBAD   CVD  R7,DOUBLE\n         UNPK DELMSG2(8),DOUBLE(8)\n         OI   DELMSG2+7,X'F0'\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(30),DELMSG1\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\n*\nDELMSG1  DC C'LINE NUMBER '\nDELMSG2  DS 8C\nDELMSG3  DC C' NOT FOUND'\n         DS 0H\n*\nDEL18    LA   R3,1\n         L    R5,UPPER\n         LTR  R5,R5\n         BNZ  DEL19\n         MVC  UPPER(4),LOWER\n         L    R5,UPPER\nDEL19    C    R5,LOWER\n         BL   DEL26\n         L    R5,CURRADD\n         L    R6,LASTADD\n         AH   R6,SAVELREC\nDEL20    CR   R5,R6\n         BE   DEL21\n         CLI  FIXORVAR,X'00'\n         BNE  DEL22\n         TM   DATATYPE,B'01000000'\n         BNO  DEL23\n         XR   R1,R1\n         TRT  0(6,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(6,R5)\n         CVB  R7,DOUBLE\n         B    DEL24\nDEL23    XR   R1,R1\n         LR   R8,R5\n         AH   R8,SAVELREC\n         SH   R8,=H'8'\n         TRT  0(8,R8),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),0(8,R8)\n         CVB  R7,DOUBLE\n         B    DEL24\nDEL22    XR   R1,R1\n         TRT  4(8,R5),TRTTABLE\n         LTR  R1,R1\n         BNZ  DEL15\n         PACK DOUBLE(8),4(8,R5)\n         CVB  R7,DOUBLE\nDEL24    C    R7,UPPER\n         BNH  DEL90\n         L    R7,UPPER\n         B    DELBAD\nDEL90    BE   DEL25\n         AH   R5,SAVELREC\n         LA   R3,1(R3)\n         B    DEL20\nDEL21    L    R7,UPPER\n         B    DELBAD\nDEL15    MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(32),DELMSG4\n         MVC  COMMAND(19),BLANKS\n         ST   R5,CURRADD\n         BC   15,TPUTLOOP\nDELMSG4  DC C'INVALID LINE NUMBER - CORRECT IT'\n         LTORG\n         DS   0H\nDEL25    EQU  *\n         MH   R3,SAVELREC\n         L    R8,LASTADD\n         AH   R8,SAVELREC\n         S    R8,TOPADD\n         SR   R8,R3\n         LTR  R8,R8\n         BNZ  DEL92\n         L    R8,TOPADD\n         ST   R8,CURRADD\n         SH   R8,SAVELREC\n         ST   R8,LASTADD\n         B    DEL93\nDEL92    L    R4,CURRADD\n         LR   R6,R3\n         A    R6,CURRADD\n         L    R5,LASTADD\n         S    R5,CURRADD\n         SR   R5,R3\n         AH   R5,SAVELREC\n         LR   R7,R5\n         MVCL R4,R6\n         L    R5,LASTADD\n         SR   R5,R3\n         ST   R5,LASTADD\n*\n*\n*\n*\nDEL93    MVI  MODFLAG,X'01'\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(16),DELMSG7\n         ICM  6,X'0F',SAVES#\n         LA   6,1(6)\n         ST   6,SAVES#\n         MVC  COMMAND(19),BLANKS\n         BR   R14\nDELMSG7  DC   C'LINE(S) DELETED '\n         DS   0H\nDEL26    MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         MVC  RESPONSE(23),DELMSG8\n         BC   15,TPUTLOOP\nDELMSG8  DC C'INVALID RANGE SPECIFIED'\n         DS  0H\nDOWNRTN  LA   R7,2(R7)\n         BAL  R14,DIGITRTN\n         LA   R5,1\n         BC   15,DOWNDIG\n*\n*\nUPRTN    BAL  R14,DIGITRTN\n         LA   R5,1\n         B    UPDIG\n*\n*\nFINDRTN  MVI  ENDFLAG,X'00'\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  FINDSK\nBADLOW   MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(17),LOWFIND\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\nLOWFIND  DC   C'DATA SET IS EMPTY'\nSAVECHAR DS   C\n         DS   0H\nFINDSK   LA   R7,1(R7)\n         MVI  DIRECT,X'01'\n         LA   R3,19\nFIND01   CLI  0(R7),C' '\n         BE   FIND02\n         LA   R7,1(R7)\n         BCT  R3,FIND01\n         B    BADFIND1\nFIND02   CLI  0(R7),C' '\n         BNE  FIND03\n         LA   R7,1(R7)\n         BCT  R3,FIND02\n         B    TRYREPET\nFIND03   XR   R2,R2\n         IC   R2,0(R7)\n         STC  R2,SAVECHAR\n         LA   R7,1(R7)\n         LR   R5,R7\n         LA   R4,0\nFIND04   CLC  0(1,R7),SAVECHAR\n         BNE  FIND10\n         LTR  R4,R4\n         BZ   BADFIND1\n         BCTR R4,0\nFIND11   MVC  FINDSTR(17),BLANKS\n         EX   R4,FIND12\n         LA   R4,1(R4)\n         ST   R4,FINDLENG\n         B    FIND05\nFIND12   MVC  FINDSTR(0),0(R5)   -- EXECUTED -\nFIND10   LA   R4,1(R4)\n         LA   R7,1(R7)\n         BCT  R3,FIND04\n         B    BADFIND1\nFIND05   L    R6,CURRADD\n         LH   R7,SAVELREC\n         L    R8,LASTADD\n         AH   R8,SAVELREC\nFIND06   LTR  R4,R4\n         BZ   BADFIND1\n         BCTR R4,0\nFIND07   EX   R4,FIND08\n         B    *+10\nFIND08   CLC  0(0,R6),0(R5)\n         BNE  FIND99\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\nFIND99   LA   R6,1(R6)\n         BCT  R7,FIND07\n         CR   R6,R8\n         BE   BADFIND2\n         LH   R7,SAVELREC\n         ST   R6,CURRADD\n         B    FIND07\nBADFIND1 MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(22),FINDMSG1\n         B    TPUTLOOP\nBADFIND2 MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(16),FINDMSG2\n         B    TPUTLOOP\nFINDMSG1 DC   C'INVALID COMMAND FORMAT'\nFINDMSG2 DC   C'STRING NOT FOUND'\n         DS   0H\nTRYREPET L   R4,FINDLENG\n         LA  R5,FINDSTR\n         LH  R6,SAVELREC\n         A   R6,CURRADD\n         C   R6,LASTADD\n         BH  FIND05\n         ST  R6,CURRADD\n         B   FIND05\n         DS  0F\nFINDLENG DC  F'0'\nFINDSTR  DC  17C' '\n         DS  0H\n*\n*\nCHANGRTN EQU *\n         ICM  R6,X'0F',SAVES#\n         LA   R6,1(R6)\n         ST   R6,SAVES#\n         B    CALLCHG\nCPARMS   DC   A(TOPADD,LASTADD,SAVELREC,MODFLAG,RESPONSE,COMMAND)\n         DC   A(DATATYPE,FIXORVAR)\n         DS   0H\nCALLCHG  LA   R7,1(R7)\n         LA   R3,60\n         MVI  ENDFLAG,X'00'\n         LA   R4,CPARMS\n       LINK EP=FSECHANG\n         B    TPUTLOOP\n*\n*\n         DS   0H\nCOLRTN  EQU  *\n         MVI  ENDFLAG,X'00'\n         LA   R7,1(R7)\n         LA   R3,19\n         L    R5,TOPADD\n         L    R6,LASTADD\n         CR   R5,R6\n         BNH  COLLOOP\n         B    BADLOW\nCOLLOOP  CLI  0(R7),C' '\n         BE   COLNUM\n         LA   R7,1(R7)\n         BCT  R3,COLLOOP\nCOLMOVES MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(35),COLMSG\n         B    TPUTLOOP\nCOLMSG   DC   C'MISSING OR INVALID COLUMN SPECIFIED'\n         DS   0H\nCOLNUM   CLI  0(R7),C' '\n         BNE  COLNUM2\n         LA   R7,1(R7)\n         BCT  R3,COLNUM\n         B    COLMOVES\n*\nCOLNUM2  EQU  *\n         LR   R4,R7\n         LA   R3,3\n         LA   R6,0\nCOLLOOP2 CLI  0(R7),C' '\n         BE   COLNUM3\n         LA   R6,1(R6)\n         SR   R5,R5\n         IC   R5,0(R7)\n         C    R5,=F'240'\n         BL   COLMOVES\n         LA   R7,1(R7)\n         BCT  R3,COLLOOP2\nCOLNUM3  BCTR R6,0\n         EX   R6,COLNUM4\n         B    *+10\nCOLNUM4  PACK DOUBLE(8),0(0,R4)\n         CVB  R5,DOUBLE\n         LTR  R5,R5\n         BZ   COLMOVES\n         CLI  FIXORVAR,X'00'\n         BNE  NEXT4\n         CH   R5,SAVELREC\n         BH   COLMOVES\n         BCTR R5,0\n         B    SKIPMORE\nNEXT4    AH   R5,=H'12'\n         CH   R5,SAVELREC\n         BH   COLMOVES\n         SH   R5,=H'13'\nSKIPMORE STH  R5,COLUMN\n         MVC  OUTCOL(3),=3C' '\n         EX   R6,COLNUM5\n         B    *+10\nCOLNUM5  MVC  OUTCOL(0),0(R4)\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         B    TPUTLOOP\n*\n*\n*\nABENDTOP L    R4,0(R1)    A(PARMLIST IN SDWA)\n         L    R4,4(R4)    A(SAVEREG)\n*\n         LM   R6,R3,0(R4)\n         MVI  DIRECT,X'01'\n*        MVC  CURRADD(4),TOPADD\n         MVI  ENDFLAG,X'00'\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),RESPONSE\n         LA   R6,RESPONSE\n         LA   R5,SDWA\nGETSYSCD LINK EP=FSESYSCD\n         B    TPUTLOOP\nTOPRTN   EQU  *\n         MVC  CURRADD(4),TOPADD\n         MVI  ENDFLAG,X'00'\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(15),TOPMSG\n         MVC  COMMAND(19),BLANKS\n         MVI  DIRECT,X'01'\n         B    TPUTLOOP\nTOPMSG   DC   C'TOP OF DATA SET'\n         DS   0H\nPA1RTN   L    R1,0(R1)\n         LM   R0,R15,8(R15)\n         B    TPUTLOOP\n*\n*\nDSNRTN   MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(50),SAVEDSN\n         MVC  COMMAND(19),BLANKS\n         MVI  ENDFLAG,X'00'\n         B    TPUTLOOP\n*\n*\nBOTTRTN  LA   R5,20\n         MH   R5,SAVELREC\n         L    R6,LASTADD\n         SR   R6,R5\n         C    R6,TOPADD\n         BL   TOPRTN\n         ST   R6,CURRADD\n         MVC  COMMAND(19),BLANKS\n         MVC  RESPONSE(50),BLANKS\n         MVC  RESPONSE(18),BOTTMSG\n         MVI  ENDFLAG,X'00'\n         MVI  DIRECT,X'00'\n         B    TPUTLOOP\nBOTTMSG  DC   C'BOTTOM OF DATA SET'\n         DS   0H\n*\n*\nHFRTN    LA   R5,10\n         MH   R5,SAVELREC\n         A    R5,CURRADD\n         C    R5,LASTADD\n         BH   BOTTRTN\n         ST   R5,CURRADD\n         MVI  ENDFLAG,X'00'\n         MVC  RESPONSE(50),BLANKS\n         MVC  COMMAND(19),BLANKS\n         MVI  DIRECT,X'01'\n         B    TPUTLOOP\n*\n*\nHBRTN    LA   R5,10\n         MH   R5,SAVELREC\n         L    R6,CURRADD\n         SR   R6,R5\n         C    R6,TOPADD\n         BL   TOPRTN\n         ST   R6,CURRADD\n         MVI  ENDFLAG,X'00'\n         MVC  COMMAND(19),BLANKS\n         MVC  RESPONSE(50),BLANKS\n         MVI  DIRECT,X'00'\n         B    TPUTLOOP\n*\n*\nRETURN   EQU  *\n*\n*\nLOOK3    EQU  *\n          LA   R1,CPPL\n          LINK EP=FSEFREE\n*\n*\n*\n*\n*  FOUR FIELDS ARE USED THROUGHOUT THIS PROGRAM TO\n*    ADDRESS THE RECORDS FOR THE FULLSCREEN AND TO MAKE\n*    BOUNDARIES BETWEEN START OF SYSEDIT, LAST USED LINE\n*    AND THE LAST ABSOLUTE LINE (RECORD).\n*\n*  TOPADD  IS THE ABSOLUTE START OF SYSEDIT\n*  CURRADD IS THE ADDRESS OF THE START OF THE CURRENT RECORD\n*  LASTADD IS THE ADDRESS OF THE LAST USED RECORD\n*  BOTTADD IS THE ADDRESS OF THE LAST USABLE RECORD.\n*\nGOBACK   L    R13,4(R13)\n         LM 14,12,12(13)\n         BR 14\n         LTORG\n         DS  0F\nCPPL     EQU  *\nCB       DS   F     COMMAND BUFFER\nUPT      DS   F     USER PROFILE TABLE\nPSCB     DS   F     PROTECTED STEP CONTROL BLOCK\nECT      DS   F     ENVIRONMENT CONTROL TABLE\nALLOCDSN DC H'44'\nDSNAME   DC   56C' '\nMSG2     DC   C'ENTER DSNAME-'\nMSG3     DC   C'INVALID DSNAME, REENTER-'\n         DS   0H\nMOVEDSN  MVC  DSNAME(0),0(R5)\nSAVEDSN  DC   55C' '\nSAVEBUFF DC   60C' '\nSTAEFLAG DC   X'00'\nMSG4     DC   C'DATA SET NOT CATALOGED'\nVOLSER   DC   6X'00'\n         DS   0F\nMSG5     DC   C'DATA SET NOT IN VOLUME'\nFORMAT   DC   X'00'\nMOVEIN   DS 0H\n         MVC  0(0,R3),DSNAME\nDATATYPE DC   X'00'\nHEXTABLE DC   X'400102030405060708090A0B0C0D0E0F10111213141516171819'\n         DC    X'1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132'\n         DC    X'333435363738393A3B3C3D3E3F404142434445464748494A4B'\n         DC    X'4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364'\n         DC    X'65666768696A6B6C6D6E6F707172737475767778797A7B7C7D'\n         DC    X'7E7F80C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6'\n         DC    X'D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8'\n         DC X'C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1'\n         DC X'E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FA'\n         DC X'FBFCFDFEFF'\n        DS  0F\nNEWMEMBE DC X'0008',6X'00'\n         DC AL4(ALLOCDSN)\nDDNAME   DC C'FSEFILE '\nDA08BLK  DC 16C' '\n         DC  4X'00'\nDA08PQTY DC 4X'00'\nDA08SQTY DC 4X'00'\n         DC 4X'00'\nMEMBER   DC 8C' '\n         DC 8C' '\nDAIRFLAG DC 3X'08'\nDA08CTL  DC B'00000000'\n         DC 4X'00'\nLIST     DC 8C' '\n         DS 0F\n*\nDAPL     EQU *\nDAPLUPT  DS F\nDAPLECT  DS F\nDAPLECB  DC F'0'\nDAPLPSCB DS F\nDAPLDAPB DS F\n  DS 0D\nDOUBLE   DS  D\nSAVECURR  DS  F\nFIELD1    DS  F\nFIELD2    DS  F\nFIELD3    DS  F\nSTARTING  DS  F\nENDING    DS  F\nMOVCOPFL  DS  X\n         DS  0F\nCOPYADD  DS  F\nCOPYEND  DS  F\nCOPYLEN  DS  F\nBOTTADD  DS  F\nTOPADD   DS  F\nAREASIZE DS  F\nSAVELREC DC  H'0'\nRECORDS  DC  H'0'\nAREA     DS  255C\nFSEDCB DCB MACRF=GM,DDNAME=FSEFILE,DSORG=PS,EODAD=EODAD1\nFSEDCB2 DCB DDNAME=FSEFILE,MACRF=GM,DSORG=PS,EODAD=EODAD2\n*SEDCB3 DCB DDNAME=FSEFILE,MACRF=PM,DSORG=PS,EODAD=EODAD3\nFSEDCBPO DCB DDNAME=FSEFILE2,MACRF=(R),DSORG=PO\n     DS  0H\nLST  DC H'1',H'58'\nMEMBLDL DC 8C' '\n        DS 70C\n  DS 0F\nLASTADD   DS  F\nCURRADD   DS  F\nSAVELINE  DC  F'-10'\n          DS  0D\nNEWLINE   DS  D\nTRTTABLE  DC  240X'FF',10X'00',6X'FF'\n    DS  0F\nPOPDS    DC X'0008',6X'00',AL4(ALLOCDSN),C'FSEFILE2'\n         DC 16C' ',16X'00',16C' '\n         DC  3X'08',B'00000000',4X'00',8C' '\n    DS  0F\n*\n*  THIS IS THE DC SECTION USED TO OUTPUT THE FULL SCREEN\nCLEER     DC X'C11140403C404000'\nSCREEN    EQU *\n       DC X'C111C1503C404000'\n         DC X'11C1501DE8',C'==>',X'1DC813'\nCOMMAND   DC 21C' '\n          DC         C'==>'\nRESPONSE  DC 52C' '\n         DC X'11C2601DC8'\nLINE#1   DS 7C\nLINE1    DS 72C\n         DC X'11C3F01DC8'\nLINE#3   DS 7C\nLINE3    DS 72C\n         DC X'11C5401DC8'\nLINE#4   DS 7C\nLINE4    DS 72C\n         DC X'11C6501DC8'\nLINE#5   DS 7C\nLINE5    DS 72C\n         DC X'11C7601DC8'\nLINE#6   DS 7C\nLINE6    DS 72C\n         DC X'11C8F01DC8'\nLINE#7   DS 7C\nLINE7    DS 72C\n         DC X'114A401DC8'\nLINE#8   DS 7C\nLINE8    DS 72C\n         DC X'114B501DC8'\nLINE#9   DS 7C\nLINE9    DS 72C\n         DC X'114C601DC8'\nLINE#10  DS 7C\nLINE10   DS 72C\n         DC X'114DF01DC8'\nLINE#11  DS 7C\nLINE11   DS 72C\n         DC X'114F401DC8'\nLINE#12  DS 7C\nLINE12   DS 72C\n         DC X'1150501DC8'\nLINE#13  DS 7C\nLINE13   DS 72C\n         DC X'11D1601DC8'\nLINE#14  DS 7C\nLINE14   DS 72C\n         DC X'11D2F01DC8'\nLINE#15  DS 7C\nLINE15   DS 72C\n         DC X'11D4401DC8'\nLINE#16  DS 7C\nLINE16   DS 72C\n         DC X'11D5501DC8'\nLINE#17  DS 7C\nLINE17   DS 72C\n         DC X'11D6601DC8'\nLINE#18  DS 7C\nLINE18   DS 72C\n         DC X'11D7F01DC8'\nLINE#19  DS 7C\nLINE19   DS 72C\n         DC X'11D9401DC8'\nLINE#20  DS 7C\nLINE20   DS 72C\n         DC X'115A501DC8'\nLINE#21  DS 7C\nLINE21   DS 72C\n        DC X'115B601DC8'\nLINE#22 DS 7C\nLINE22  DS 72C\n         DC X'115CF01DE8'\n DC C'COL '\nOUTCOL  DC C'1  '\n        DC C'|'\n  DC C'---|',13CL5'----|',C'--C',X'11C1501DE8',C'==>',X'1DC813'\nSIZESCR  EQU  (*-SCREEN)\n   DS  0F\nAREAADD DS  F\nSAVELAST DS F\nXLEN     DS F\nINCOUNT  DS H\nUPPER    DS F\nLOWER    DS F\nCOLUMN  DC  H'0'\nDIRECT  DC  X'01'\nUSEFLAG  DC X'00'\nSAVEFLAG DC X'00'\nINFLAG   DS  X\nINFLAG1  DS  X\nMODFLAG  DC X'00'\nLINEFLAG DC X'00'\nENDFLAG  DC X'01'\nSEFLAG   DC X'00'\n         DS 0F\nNUMVALUE DC H'10'\n         DS  0F\nSAVEFROM DS  F\nFREELEN  DS F\n*EWCAT   CAMLST CAT,DSNAME,,CATVOL\n*ATVOL   DC  H'1'\n*        DC  X'3050200D'\n*        DC  C'VS2TSO'\nKEY      DS  C\n         DS  0F\nFREEMAI  DS  F\nSAVES#   DC  F'0'\nSAVE7    DS  F\nSAVE3    DS  F\nMYCB     DS  4X\nCBTEXT   DS  18C\nFAKECPPL DS  0F\nFAKECB   DS  F\nFAKEUPT  DS  F\nFAKEPSCB DS  F\nFAKEECT  DS  F\nSAVEREG  DS 15F\nABENDPRM DC  A(ABENDTOP,SAVEREG,SDWA)\nSDWA     DS 7C\nAUTOFLAG DC X'00'\nEMERG    DC C' S FSE.AUTOSAVE '\nVTOC     CAMLST SEARCH,DSNAME,VOLSER,VTOCINFO\nVTOCINFO DS 200C\nCAT      CAMLST NAME,DSNAME,,CATINFO\nCATINFO  DS  0D\n         DS  265C\nBLANKS   DC  255C' '\nABEND01  CSECT\n         STM  14,12,12(13)\n         BALR 12,0\n         USING *,12\n         ST  13,SAVE+4\n         LA  5,SAVE\n         ST  5,8(13)\n         LR  13,5\n*\n         L   13,4(13)\n         LM  14,12,12(13)\n         LA  15,4\n         L   3,0(1)\n         L   3,0(3)\n         LR  0,3\n         L   4,0(1)\n         L   4,8(4)   ADDRESS OF SDWA IN FSE\n         MVC 0(7,4),0(1)\nBR14     BR  14\nSAVE     DS  18F\n         END\n*\n\n\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSEATTR": {"ttr": 1793, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*    THIS ROUTINE WILL BE LINKED FROM \"FSE\" AND \"FSESAVE\" MODULES\n*    TO CONDITIONALLY TRY TO FREE AN ATTRIBUTE LIST ALLOCATED BY\n*    \"FSESAVE\" WHEN A SAVE FUNCTION FOR A NEW DATA SET IS PERFORMED.\n*\n*    THIS ATTRIBUTE LIST IS USED TO ALLOCATE DCB PARAMETERS FOR THE\n*    DAIR FUNCTION OF ALLOCATING A NEW DATA SET.\n*\n*    AT ENTRY, R1 POINTS TO THE C.P.P.L. LIST TO BE USED WITH DAIR.\n*\n*    BRUNO LA LICATA     LVL 1.00     11 / 11 / 77\n*    N.B.N.A.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nFSEATTR  CSECT\n*\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n*\n         SAVE (14,12)                  STORE MVS REGS\n         LR   R12,R15                  SET ADDRESSABILITY\n         USING FSEATTR,R12\n         ST    R13,SAVE+4                    AND SET SAVING\n         LA    R5,SAVE\n         ST    R5,8(R13)                           CONVENTION\n         LR    R13,R5\n         LR   R2,R1                    SAVE CPPL\n         MVC  UPT(4),4(R2)             INITIALIZE DAIR BLOCK\n         MVC  ECT(4),12(R2)\n         XC   ECB(4),ECB                     FOR DEALLOCATION\n         MVC  PSCB(4),8(R2)\n         LA   R1,DAPL\n         LINK EP=IKJDAIR               CALL DAIR\n         L   R13,4(13)                 RETURN TO FSE OR\n         RETURN (14,12)                       FSESAVE SUBLOGIC\n         BR   14\nDAPL     DS   0F\nUPT      DS   F\nECT      DS   F\nECB      DC   F'0'\nPSCB     DS   F\nADDRESS  DC   A(ATTRLIST)\nATTRLIST DC   X'0034'\n         DC   4X'00',X'20',X'00',C'FSEATTR ',4X'00'\n         DS   0F\nSAVE  DS 18F\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSECHANG": {"ttr": 1795, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   THIS ROUTINE IS LINKED FROM MAIN DRIVER \"FSE\" WHEN A CHANGE\n*    COMMAND IS ISSUED. IT WILL SCAN THE COMMAND BUFFER AND SET\n*    VARIABLES DESCRIBING BEGIN, END ADDRESSES, LENGTHS OF NEW\n*    AND OLD TEXT STRINGS ETC..\n*   AN INTERNAL ROUTINE IS INVOKED EVERY TIME A LINE FOUND IN THE\n*    SPECIFIED RANGE IS TO BE SCANNED FOR THE TEXT. THE DATA IN\n*    EACH MODIFIED LINE IS EITHER SHORTENED OR LENGTHENED (AND\n*    THEREFORE TRUNCATED) ACCORDING TO THE NEW AND OLD TEXT STRINGS.\n*\n*   AT ENTRY POINT, R7 POINTS TO THE COMMAND BUFFER,\n*                   R4  POINTS TO THE PASSED PARAMETER LIST\n*                   (DC A(TOPADD,LASTADD,SAVELREC,MODFLAG,RESPONSE,\n*                         COMMAND,DATATYPE,FIXORVAR))\n*\n*\n*    BRUNO LA LICATA           LVL 1.00       1 / 12 / 77\n*    N.B.N.A.\n*\n*\nFSECHANG CSECT\n         STM  14,12,12(13)\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n*\n         LR   R12,R15                  SET ADDRESSABILITY\n         USING FSECHANG,R12              AND SAVE REGISTERS.\n         ST   R13,SAVE+4\n         LA   R5,SAVE\n         ST   R5,8(R13)\n         LR   R13,R5\n         LR   R10,R4\n         XC   RECORDS(4),RECORDS       INITIALIZE BUFFER AREAS\n         MVI  ALLFLAG,X'00'              AND FLAG FOR \"ALL\" FUNCTION\n         MVC  RECORD(255),BLANKS\nC01      CLI  0(R7),C' '               SCAN FOR FIRST GAP\n         BE   C02\n         LA   R7,1(R7)\n         BCT  R3,C01\n         B    BADFIND1                 NO GAP FOR MAX LENGTH OF 60?\nC02      CLI  0(R7),C' '                  YES, NO GOOD...\n         BNE  C03                      SCAN FOR BEGGINNING OF LINE #\n         LA   R7,1(R7)\n         BCT  R3,C02\n         B    BADFIND1                 NONE? TOO BAD...\nC03      XR   R4,R4                    CLEAR FOR DIGIT COUNT\n         LR   R5,R7                    SAVE BEGIN ADDRESS\nC04      CLI  0(R7),C' '               SECOND GAP REACHED?\n         BE   C05                      YES, GO DO IT ON SECOND LINE #\n         XR   R6,R6                    CLEAR FOR DIGIT VALIDITY\n         IC   R6,0(R7)\n         C    R6,=F'240'               DIGIT NUMERIC?\n         BL   BADFIND1                 NO, GO ISSUE MESSAGE\n         LA   R4,1(R4)                 ADD 1 TO DIGIT COUNT\n         LA   R7,1(R7)                 ADD 1 TO ADDRESS\n         BCT  R3,C04                   GO DO IT UNTIL GAP ENDS\n         B    BADFIND1                 FORMAT IS INVALID IF HERE.\nC05      BCTR R4,0                     HERE, LINE NUMBER IS\n         EX   R4,C06                     MADE TO BINARY\n         B    *+10                       AND STORED INTO \"FIRSTLIN\".\nC06      PACK DOUBLE(8),0(0,R5)\n         CVB  R5,DOUBLE\n*        LTR  R5,R5\n*        BZ   BADFIND1\n         ST   R5,FIRSTLIN\nC07      CLI  0(R7),C' '               SCAN FOR NEXT LINE NUMBER, OR\n         BNE  C08                      A SLASH (THAT INDICATES ONLY\n         LA   R7,1(R7)                 1 LINE NUMBER WAS SPECIFIED)\n         BCT  R3,C07\n         B    BADFIND1\nC08      CLI  0(R7),C'/'               SLASH FOUND: ONLY 1 LINE NUMBER\n         BNE  C09                       SPECIFIED, SO MOVE MAKE LOW\n         MVC  SECONDLI(4),FIRSTLIN      BOUNDARY = HIGH BOUNDARY\n         B    C14                       AND SKIP SECOND LINE PROCESS.\nC09      EQU  *\n         XR   R4,R4                    CLEAR FOR DIGIT COUNT\n         LR   R5,R7                    SAVE BEGIN ADDRESS\nC10      CLI  0(R7),C' '               END OF LINE # DIGITS?\n         BE   C11                      YES, GO CHECK IT\n         XR   R6,R6                    CLEAR FOR IC ON DIGIT\n         IC   R6,0(R7)\n         C    R6,=F'240'               NUMERIC?\n         BL   BADFIND1                 NO, BAD NEWS\n         LA   R4,1(R4)                 ADD TO DIGIT COUNT\n         LA   R7,1(R7)                 ADD TO ADDRESS\n         BCT  R3,C10                   GO SCAN FOR END\n         B    BADFIND1                 FORMAT INVALID IF HERE\nC11      BCTR R4,0\n         EX   R4,C12                   PACK LINE NUMBER\n         B    *+10\nC12      PACK DOUBLE(8),0(0,R5)             AND MAKE IT BINARY\n         CVB  R5,DOUBLE\n*        LTR  R5,R5\n*        BZ   BADFIND1\n         ST   R5,SECONDLI               STORE IT IN \"SECONDLI\"\nC13      CLI  0(R7),C' '               CHECK FOR SLASH\n         BNE  C14                      GO THRU GAP UNTIL NON-BLANK\n         LA   R7,1(R7)\n         BCT  R3,C13\n         B    BADFIND1\nC14      CLI  0(R7),C'/'               SLASH?\n         BNE  BADFIND1                 NO, ERROR IN FORMAT\n         LA   R7,1(R7)\n         ST   R7,ADDR1                 STORE ADDRESS OF STRING\n         XR   R5,R5                    CLEAR FOR LENGTH COUNT\nC15      CLI  0(R7),C'/'               CHECK FOR END OF STRING1\n         BE   C16\n         LA   R7,1(R7)                 ADD TO ADDRESS\n         LA   R5,1(R5)                 ADD FOR LENGTH COUNT\n         BCT  R3,C15                   GO SCAN\n         B    BADFIND1                 FORMAT INVALID : (NOT COMPLETE)\nC16      LTR  R5,R5                    NO DATA ON STRING #1?\n         BZ   BADFIND1                  NO DATA : INVALID FORMAT\n         STH  R5,LEN1                  STORE LENGTH\n         LA   R7,1(R7)                 SKIP SLASH\n         ST   R7,ADDR2                 STORE STRING #2 ADDRESS\n         XR   R5,R5                    CLEAR FOR LENGTH\nC17      CLI  0(R7),C'/'               SCAN FOR LAST SLASH\n         BE   C18\n         LA   R7,1(R7)                 ADD TO ADDRESS\n         LA   R5,1(R5)                 ADD TO COUNT\n         BCT  R3,C17                   GO SCAN\n         B    BADFIND1                 FORMAT INVALID\nC18      STH  R5,LEN2                  END FOUND : STORE LENGTH\n         CLI  1(R7),C'A'               SCAN FOR ALL SPECIFICATION\n         BNE  SKIPMSG1                 NO, SKIP SET OF FLAG\n         MVI  ALLFLAG,X'01'            YES, SET ALL FLAG\n         BC   15,SKIPMSG1\nBADFIND1 L    R9,20(R10)               THIS SECTION INITIALIZES\n*        MVC  0(19,R9),=19C' '         FSE BUFFERS FOR SCREEN I/O\n         L    R9,16(R10)               AND MOVES \"INVALID FORMAT\"\n         MVC  0(22,R9),MSG1            MESSAGE.\n         B    RETURN\n*\nMSG1     DC   C'INVALID COMMAND FORMAT'\nMSG2     DC   C'LINE NOT FOUND'\nMSG3     DC   C'TEXT NOT FOUND'\nMSG4     EQU  *\nRECS     DS   3C\n         DC   C' CHANGE(S) MADE '\nRECORD   DC   255C' '\nBLANKS   DC   255C' '\nALLFLAG  DS   X\n         DS   0D\nTOPADD   DS   F\nLASTADD  DS   F\nRECORDS  DS   F\nDOUBLE   DS   D\nFIRSTLIN DS   F\nSECONDLI DS   F\nADDR1    DS   F\nADDR2    DS   F\nSAVE     DS   18F\nLEN1     DS   H\nX        DS   H\nY        DS   H\nLEN2     DS   H\nSAVELREC DS   H\nFIXORVAR DS   X\nDATATYPE DS   X\n*\nSKIPMSG1 EQU  *                     * * * * * * * * * * * * * * *\n         L    R3,28(R10)               THIS SECTION MOVES DATA\n         MVC  FIXORVAR(1),0(R3)\n         L    R3,0(R10)                   FIELDS FROM FSE BUFFERS\n         MVC  TOPADD(4),0(R3)\n         L    R3,24(R10)                  TO FSECHANG BUFFERS\n         MVC  DATATYPE(1),0(R3)\n         L    R3,4(R10)\n         MVC  LASTADD(4),0(R3)\n         L    R3,8(R10)\n         MVC  SAVELREC(2),0(R3)\n*                                   * * * * * * * * * * * * * * * *\nCMAIN    EQU  *                     HERE THE SYSEDIT DATA SET IN CORE\n         ICM  R6,15,LASTADD         IS SCANNED RECORD BY RECORD\n         ICM  R5,15,TOPADD          SEARCHING FOR THE LINE NUMBER\n         AH   R6,SAVELREC           CORRESPONDING TO THE SPECIFIED\nC19      CR   R5,R6                 ONE. WHEN IT IS FOUND, A LOOP\n         BE   BADFIND2              IS EXECUTED FOR THE RECORDS FOUND\n         TM   FIXORVAR,1            IN THE SPECIFIED RANGE (INCLUSIVE)\n         BO   CVAR1                 SCANNING FOR THE TEXT IN STRING #1.\n         TM   DATATYPE,X'40'        FOR EACH MATCH IN THE RECORDS\n         BO   CCOBOL1               WITHIN THE RANGE, ROUTINE MOVEDATA\nCOTHERS1 LR   R8,R5                 IS BAL\"ED TO DO THE CHANGES.\n         AH   R8,SAVELREC           IF NO \"ALL\" WAS SPECIFIED, UPON\n         SH   R8,=H'6'              COMPLETION OF 1 CHANGE, RETURN IS\n         PACK DOUBLE(8),0(6,R8)     MADE TO FSE. THE NUMBER OF CHANGES\n         CVB  R8,DOUBLE             MADE IS RECORDED AND PASSED TO\n         B    C21                   FSE FOR DISPLAY.\nCCOBOL1  PACK DOUBLE(8),0(6,R5)\n         CVB  R8,DOUBLE\n         B    C21\nCVAR1    PACK DOUBLE(8),6(6,R5)\n         CVB  R8,DOUBLE\nC21      C    R8,FIRSTLIN\n         BE   CFOUND1\n         AH   R5,SAVELREC\n         B    C19\n*\nBADFIND2 EQU  *                  BADFIND2 WILL CLEAR COMMAND BUFFER\n         L    R3,20(R10)\n*        MVC  0(19,R3),=19C' '      AND MOVE \"TEXT\" NOT FOUND IN\n         L    R3,16(R10)\n         MVC  0(14,R3),MSG2             RESPONSE FIELD OF FSE.\n         B    RETURN\nCFOUND1  LR   R8,R5\n         LH   R3,SAVELREC\n         TM   FIXORVAR,X'01'\n         BNO  NOV\n         SH   R3,=H'12'\n         LA   R8,12(R8)\n         B    GODOIT\nNOV      TM   DATATYPE,X'40'\n         BNO  NOC\n         SH   R3,=H'6'\n         LA   R8,6(R8)\n         B    GODOIT\nNOC      SH   R3,=H'8'\n*\n*\n*\nGODOIT   LH   R4,LEN1\n         BCTR R4,0\n         ICM  R2,X'0F',ADDR1\nCLOOP1   CR   R5,R6\n         BE   FINISH\n         TM   FIXORVAR,1\n         BO   CVAR2\n         TM   DATATYPE,X'40'\n         BO   CCOBOL2\nCOTHERS2 LR   R9,R5\n         AH   R9,SAVELREC\n         SH   R9,=H'8'\n         PACK DOUBLE(8),0(8,R9)\n         CVB  R9,DOUBLE\n         B    C22\nCCOBOL2  PACK DOUBLE(8),0(6,R5)\n         CVB  R9,DOUBLE\n         B    C22\nCVAR2    PACK DOUBLE(8),4(8,R5)\n         CVB  R9,DOUBLE\nC22      C    R9,SECONDLI\n         BH   FINISH\nCLOOP2   EQU  *\n         EX   R4,C23\n         B    *+10\nC23      CLC  0(0,R8),0(R2)        DATA MATCHES?\n         BNE  KEEPON                     NO, GO ADD TO ADDRESS\n         MVC  RECORD(255),BLANKS         INITIALIZE WORK BUFFER\n         TM   FIXORVAR,X'01'             VARIABLE RECORDS?\n         BNO  NOTVARIA                   NO\n         MVC  0(2,R5),SAVELREC           YES, MOVE LRECL TO RECORD\nNOTVARIA BAL  R14,MOVEDATA             GO CHANGE DATA\n         TM   ALLFLAG,1                ALL SPECIFIED?\n         BNO  FINISH                   NO, RETURN TO FSE\n         LH   R11,LEN1                 YES, ADD SHORTER OF LEN 1\n         CH   R11,LEN2                 OR LEN 2 TO ADDRESS AND\n         BNL  MOVELEN2                           ...\n         LH   R11,LEN2                           ...\nMOVELEN2 AR   R8,R11                   GO SCAN AGAIN\n         SR   R3,R11\n         BCTR R8,0\nKEEPON   LA   R8,1(R8)                 ADD 1 TO ADDRESS IN RECORD\n         BCT  R3,CLOOP2\nNEXTREC  AH   R5,SAVELREC              NEXT RECORD..ADD LRECL\n         LH   R3,SAVELREC\n         LR   R8,R5\n         B    CLOOP1                   GO SCAN AGAIN IN NEXT REC\nFINISH   CLC  FIRSTLIN(4),SECONDLI     RANGE > THAN 1 LINE?\n         BNE  MODIFIED                 YES, GO GET # OF CHANGES MADE\n         L    R3,12(R10)\n         TM   0(R3),1                  ANY DATA MODIFIED?\n         BO   MODIFIED                 YES, GO GET # OF RECS\n         L    R3,20(R10)\n         MVC  0(19,R3),=19C' '         CLEAR FSE BUFFRES\n         L    R3,16(R10)\n         MVC  0(14,R3),MSG3\n         B    RETURN                   RETURN TO FSE\n*\nMODIFIED L    R3,RECORDS              \"MODIFIED\" ROUTINE WILL\n         CVD  R3,DOUBLE                MOVE THE NUMBER OF CHANGES INTO\n         UNPK RECS(3),DOUBLE(8)        FSE RESPONSE FIELD.\n         OI   RECS+2,X'F0'\n         L    R3,20(R10)\n         MVC  0(19,R3),=19C' '\n         L    R3,16(R10)\n         MVC  0(19,R3),MSG4\nRETURN   L    R13,4(R13)               RETURN TO FSE\n         LM   R14,R12,12(R13)\n         BR   R14\n*\n*\nMOVEDATA EQU  *                      THREE ROUTINES CAN BE USED TO\n         CLC  LEN1(2),LEN2           CHANGE DATA:\n         BNE  NOTSAME\n         L    R7,ADDR2\n         EX   R4,MOVESAME\n         L    R7,12(R10)\n         MVI  0(R7),1\n         L    R7,RECORDS\n         LA   R7,1(R7)\n         ST   R7,RECORDS\n         BR   R14\nMOVESAME MVC  0(0,R8),0(R7)\n*\nNOTSAME  EQU  *\n         LH   R0,LEN1\n         CH   R0,LEN2\n         BH   MAKESMAL\nMAKEBIG  LR   R9,R5\n         ST   R9,SAVSTART\n         CLI  FIXORVAR,X'01'\n         BNE  ELSESAVE\n*        MVC  SAVELINE(8),4(R9)\n         B    GOAHEAD\nELSESAVE TM   DATATYPE,X'40'\n         BNO  OTHRTYP\n         LR   R11,R9\n         AH   R11,SAVELREC\n         MVC  SAVELINE(6),0(R11)\n         B    GOAHEAD\nOTHRTYP  EQU  *\n         LR   R11,R9\n         AH   R11,SAVELREC\n         SH   R11,=H'8'\n         MVC  SAVELINE(8),0(R11)\nGOAHEAD  AH   R9,SAVELREC\n         SR   R9,R8\n         BCTR R9,0\n         STH  R9,X\n         LR   R9,R8\n         AH   R9,LEN1\n         MVC  RECORD(255),0(R9)\n         LH   R7,LEN2\n         SH   R7,LEN1\n         STH  R7,Y\n         LH   R7,X\n         SH   R7,Y\n         STH  R7,X\n         LH   R7,LEN2\n         CH   R7,X\n         BNH  OK1\n         LH   R7,X\nOK1      BCTR R7,0\n         L    R9,ADDR2\n         EX   R7,MOVEBIG1\n         B    *+10\nMOVEBIG1 MVC  0(0,R8),0(R9)\n         LR   R9,R8\n         AH   R9,LEN2\n         LH   R7,X\n         SH   R7,Y\n         BCTR R7,0\n         TM   DATATYPE,X'40'\n         BO   EXLINBEF\n         TM   FIXORVAR,1\n         BO   EXLINBEF\n         SH   R7,=H'8'\nEXLINBEF LH   R11,LEN1\n         LA   R11,1(R11)\n         CH   R11,LEN2\n         BNE  SKIP1MOR\n         BCTR R7,0\nSKIP1MOR EQU  *\n*\n*\n         EX   R7,MOVEBIG2\n         B    SAVEBACK\nMOVEBIG2 MVC  0(0,R9),RECORD\nSAVEBACK L    R9,SAVSTART\n         LR   R11,R9\n         CLI  FIXORVAR,X'01'\n         BNE  BACKELSE\n         AH   R11,SAVELREC\n         MVC  0(2,R11),SAVELREC\n         BC   15,DONE\nBACKELSE TM   DATATYPE,X'40'\n         BNO  BACKNOCO\n         LR   R11,R5\n         AH   R11,SAVELREC\n         MVC  0(6,R11),SAVELINE\n         B    DONE\nBACKNOCO AH   R11,SAVELREC\n         SH   R11,=H'8'\n         MVC  0(8,R11),SAVELINE\nDONE     EQU  *\nADDTOREC L    R7,12(R10)\n         MVI  0(R7),1\n         L    R7,RECORDS\n         LA   R7,1(R7)\n         ST   R7,RECORDS\n         BR   R14\nMAKESMAL EQU  *\n         LH   R7,LEN1\n         SH   R7,LEN2\n         STH  R7,Y\n         LR   R9,R5\n         AH   R9,SAVELREC\n         SR   R9,R8\n         SH   R9,LEN1\n         STH  R9,X\n         BCTR R9,0\n         TM   FIXORVAR,1\n         BO   DOEXEC\n         TM   DATATYPE,X'40'\n         BO   DOEXEC\n         SH   R9,=H'9'\nDOEXEC   LR   R7,R8\n         AH   R7,LEN1\n         EX   R9,MOVESMA1\n         B    *+10\nMOVESMA1 MVC  RECORD(0),0(R7)\n         L    R7,ADDR2\n         LH   R0,LEN2\n         LTR  R0,R0\n         BZ   SKIPIF0\n         LH   R9,LEN2\n         BCTR R9,0\n         EX   R9,MOVESMA2\n         B    *+10\nMOVESMA2 MVC  0(0,R8),0(R7)\nSKIPIF0  LR   R7,R8\n         AH   R7,LEN2\n         LH   R9,X\n         AH   R9,Y\n         BCTR R9,0\n         TM   FIXORVAR,1\n         BO   LINEBFRE\n         TM   DATATYPE,X'40'\n         BO   LINEBFRE\n         SH   R9,=H'8'\nLINEBFRE EX   R9,MOVESMA3\n         B    ADDTOREC\nMOVESMA3 MVC  0(0,R7),RECORD\n*\n         DS  0F\nSAVSTART DS  F\nSAVELINE DS  8C\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSEFREE": {"ttr": 1803, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*    THIS MODULE IS LINKED FROM MAIN LOGIC ROUTINE \"FSE\" OR SAVE      *\n*     COMMAND MODULE \"FSESAVE\" TO FREE UP ANY UTILITY ASSOCIATED      *\n*     DDNAME (I.E. STARTING WITH FSE..)                               *\n*    DAIR IS USED, AS IN ALL FSE MODULES FOR VS1/SVS/MVS              *\n*     COMPATIBILITY.                                                  *\n*                                                                     *\n*    BRUNO LA LICATA       N.B.N.A.         11 / 77                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nFSEFREE  CSECT\n*\nR0       EQU 0\nR1       EQU 1\nR2       EQU 2\nR3       EQU 3\nR4       EQU 4\nR5       EQU 5\nR6       EQU 6\nR7       EQU 7\nR8       EQU 8\nR9       EQU 9\nR10      EQU 10\nR11      EQU 11\nR12      EQU 12\nR13      EQU 13\nR14      EQU 14\nR15      EQU 15\n*\n         SAVE (14,12)            SAVE\n         LR   R2,R1\n         LR   R12,R15                REGISTERS\n         USING FSEFREE,R12\n         ST    R13,SAVE+4                 AND SET\n         LA    R5,SAVE\n         ST    R5,8(R13)                      ADDRESSABILITY\n         LR    R13,R5\n         MVC  UPT(4),4(R2)              SAVE THE 4 ADDRESSES\n         MVC  ECT(4),12(R2)             OF THE C.P.P.L. PASSED\n         MVC  PSCB(4),8(R2)\n         L    R4,16                     A(CVT)\n         L    R4,0(R4)                  A(OLD NEW TCB)\n         L    R4,4(R4)                  A(TCB)\n         L    R4,12(R4)                 A(MY TIOT)\n         LA   R4,24(R4)                 BUMP UP TO DD ENTRIES START\nLOOP     CLI  0(R4),X'00'               END OF ENTRIES?\n         BE   RETURN                    YES, GO BACK\n         XR   R5,R5                     CLEAR FOR INSERT\n         IC   R5,0(R4)                  GET LENGTH OF DD ENTRY\n         MVC  DDNAME(8),4(R4)\n         CLC  DDNAME(6),=C'FSEFIL'\n         BE   DEALLOC\n         CLC  DDNAME(5),=C'SYS00'\n         BNE  NEXT\nDEALLOC  XC   ECB(4),ECB                CLEAR ECB\n         LA   R1,DAPL                   LOAD PARM LIST ADD.\n         LINK EP=IKJDAIR              , CALL ALLOCATION ROUTINE\nNEXT     AR   R4,R5                     BUMP TO NEXT ENTRY\n         BC   15,LOOP                  GO GET NEXT\nRETURN   L   13,4(13)\n         RETURN (14,12)\nDAPL     DS  0F\nUPT      DS  F\nECT      DS   F\nECB      DC   F'0'\nPSCB     DS   F\nADDRESS  DC   A(BLOCK)\nBLOCK    DC   X'0018'\nB        DC   10X'00'\nDDNAME   DC   8C' '\nC        DC   8C' '\nD        DC   2C' '\nE        DC   X'00'\nF        DC   X'10'\n         DC   8X'00'\n     DS  0F\nSAVE  DS 18F\nERRMSG   DC  C'ERROR DEALLOCATING '\nDD       DS  8C\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSEHELP": {"ttr": 2049, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": ")S SUBCOMMANDS -\n  TOP,BOTTOM,PF,PB,HF,HB,FIND,DSN,AUTOSAVE,DELETE,UP,DOWN,INSERT,\n  COLUMN,CHANGE,COPY,MOVE,SAVE,SAVEEND,END,RENUM,DONE,SUBMIT,PFK\n)F FUNCTION -\n  THE FSE COMMAND IS USED TO CREATE OR MODIFY SEQUENTIAL DATA SETS,\n  MEMBERS OF PARTITIONED DATA SETS OR THE BROWESING BACK AND FORTH\n  OF UN-NUMBERED DATA SETS (DUMPS ETC..). IT ALLOWES THE SIMULTANEOUS\n  UPDATE OF UP TO 21 LINES ON A CRT TERMINAL AND THE EXECUTION\n  OF AN FSE SUBCOMMAND OR TSO COMMAND AT THE SAME TIME.\n  THIS IS AN EXAMPLE OF A SCREEN IMAGE BACK AT THE TERMINAL :\n\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n                | ==> COMMAND ==>RESPONSE       |\n                |00010   DATA  LINE  1          |\n                |00020   DATA  LINE  2          |\n                |  .      .        .            |\n                |  .      .        .            |\n                |  .      .        .            |\n                |  .      .        .            |\n                |  .      .        .            |\n                |  .      .        .            |\n                |00200   DATA  LINE  20         |\n                |00210   DATA  LINE  21         |\n                | --|--|COLUMN INDICATOR|--|--- |\n                _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n  FSE HAS 4 MODES OF DATA MODIFICATION, WHICH MAY BE USED CUNCURRENTLY\n  OR SEPARATLY.\n    A) ENTERING AN FSE SUBCOMMAND OR A TSO COMMAND (ALL EXCEPT IDCAMS\n       RELATED I.E. DELETE, LISTC ETC.., TIME AND EXEC).\n    B) MOVING THE CRT CURSOR TO ANY OF THE DATA LINES (UP TO 21) AND\n       MODIFYING DATA BY TYPING OVER THE OLD ONE.\n    C) BY USING THE CHARACTER IMMEDIATLY FOLLOWING THE LINE NUMBER\n       AND IMMEDIATLY PRECEDING THE DATA FIELD IN THE SAME LINE.\n       A DIGIT 0 - 9 WILL INSERT THAT MANY BLANK LINES AFTER THAT\n       PARTICULAR LINE.\n       A CHARACTER \"F\" AND \"L\" IN TWO DIFFERENT LINES BUT ON THE\n       SAME SCREEN (FIRST & LAST) WILL DELETE THAT RANGE OF LINES.\n       A CHARACTER \"D\"  WILL DELETE THAT LINE.\n    D) BY ALTERING TE ACTUAL 6 DIGIT LINE NUMBER TO THE NUMBER OF\n       OF ANOTHER LINE NUMBER. THIS WILL COPY THE ALTERED LINE\n       TO THE OTHER.\n NOTE: IF YOU HAVE TERMINALS WITH KEYBOARDS EQUIPPED WITH PROGRAM\n       FUNCTION KEYS, EACH PFK CAN BE USED TO PRE-PROGRAM ANY\n       SUBCOMMAND OR NATIVE TSO COMMAND. (SEE THE DESCRIPTION\n       OF THE \"PFK\" COMMAND ON ITS USE.)\n\n  IN ESSENCE THE USER HAS THE ABILITY OF DOING ALL FOUR FUNCTIONS\n    AT THE SAME TIME, WHILE MIXING FUNCTION B, C AND D IN ANY\n    COMBINATION OR LINE(S).\n\n  NOTE - IF NO DATA IS ALTERED, NO COMMAND ENTERED, NO FIELDS\n         MODIFIED AND USER PRESSES ENTER KEY, FSE WILL EITHER\n         PAGE FORWARD OR BACKWARD 21 LINES DEPENDING ON THE\n         PREVIOUS DIRECTION.\n       - IF DATA IS TO BE MODIFIED BY TYPING OVER THE OLD ONE,\n         AND THE NEW DATA IS LONGER, THE USER MUST FIRST PRESS\n         THE ERASE-END-OF-FILE KEY AT THE END OF THE LINE TO BE\n         MODIFIED (BY THE TRAILING BLANKS), AND SUBSEQUENTLY RETURN\n         AND DO THE INSERT-KEY FUNCTION.\n)X SYNTAX -\n         FSE    'DSNAME'  NEW/OLD  LIST/NOLIST\n                CLIST/DATA/CNTL/ASM/PLI/COBOL\n  REQUIRED - 'DSNAME' & BLANKS SEPARATING KEYWORDS\n  DEFAULTS - OLD,NOLIST\n  ALIAS    - NONE\n  NOTE     - THE DATA SET MUST HAVE VALID LINE NUMBERS IN ASCENDING\n             ORDER NOT EXCEEDING 999999, ELSE USER WILL BE ASKED TO\n             EITHER RENUMBER IT OR END FSE SESSION.\n  NOTE     - IF THE FULLY QUALIFIED DATA SET NAME IS SPECIFIED, IT MUST\n             BE ENCLOSED IN SINGLE QUOTES. IF THE DATA SET NAME IS NOT\n             ENTERED WITHIN QUOTES, THE USERID IS ALWAYS APPENDED TO\n             THE LEFT OF THE NAME. THE RIGHTMOST QUALIFIER OF THE\n             NAME ENTERED MAY BE A DESCRIPTIVE QUALIFIER FOR A\n             PARTICULAR DATA SET TYPE.\n  NOTE     - DATA SET TYPE IS ONLY REQUIRED IF THE LAST QUALIFIER IN\n             THE DATA SET NAME IS NOT EITHER ASM,PLI,DATA,CLIST OR\n             CNTL. IF THE KEYWORD \"LIST\" WAS SPECIFED, A QUALIFIER\n             IS NOT REQUIRED.\n)O OPERANDS -\n  'DSNAME' - NAME OF THE DATA SET TO BE CREATED OR EDITED.\n))NEW      - DATA SET NAMED DID NOT EXIST BEFORE COMMAND WAS ISSUED.\n))OLD      - DATA SET ALREADY EXISTED WHEN THE EDIT COMMAND WAS ISSUED.\n))LIST     - ONLY BROWESING WILL BE ALLOWED. (USED TO SCAN BACK AND\n             FORTH ON DUMPS, JCL OUTPUT ETC..)\n           - THIS OPTION REQUIRES NO DATA SET TYPE KEYWORD.\n))NOLIST   - FULL EDITING WILL BE ALLOWED.\n))COBOL    - DATA CONSISTS OF COBOL SOURCE STATEMENTS.\n))ASM      - DATA CONSISTS OF ASSEMBLER SOURCE STATEMENTS.\n))DATA     - DATA IS TO BE INPUT TO A PROGRAM.\n))CLIST    - DATA IS INPUT TO AN EXEC COMMAND.\n))CNTL     - DATA IS CONTROL DATA FOR A SUBMIT COMMAND.\n))PLI      - INPUT DATA CONSISTS OF PLI SOURCE STATEMENTS.\n\n\n        ---- S U B C O M M A N D   D E S C R I P T I O N ----\n\n\n\n  TOP      - WILL POSITION DATA SET AT FIRST 21 LINES\n  T\n\n  BOTTOM   - WILL POSITION DATA SET AT LAST 21 LINES\n  B\n\n  PF  NNN  - WILL PAGE FORWARD NNN NUMBER OF PAGES IN DATA SET.\n           - DEFAULT NNN = 1 PAGE\n\n  PB  NNN  - WILL PAGE BACK NNN NUMBER OF PAGES IN DATA SET.\n           - DEFAULT NNN = 1 PAGE\n\n  HF       - WILL HALH PAGE FORWARD 10 LINES OF DATA SET\n\n  HB       - WILL HALH PAGE BACK 10 LINES OF DATA SET\n\n  UP  NNN  - WILL MOVE SCREEN UP NNN NUMBER OF LINES.\n           - DEFAULT NNN = 1 LINE\n\n  DOWN NNN - WILL MOVE SCREEN DOWN NNN NUMBER OF LINES.\n           - DEFAULT NNN = 1 LINE\n\n  FIND 'STRING'\n  F         - WILL SEARCH DATA SET STARTING FROM LINE AT TOP\n            - OF SCREEN TILL A MATCH IS MADE WITH CHARACTER\n            - STRING. CHARACTER STRING MUST BE WITHIN SET OF\n            - DELIMITERS MADE UP OF ANY CHARACTER.\n            - A \"FIND\" WITH NO STRING WILL ATTEMPT TO FIND THE\n            - NEXT OCCURRENCE OF THE STRING.\n\n  DELETE LINE1 LINE2\n  DEL       - WILL DELETE LINE1, OR RANGE LINE1-LINE2 IF LINE2\n            - IS SPECIFIED.\n\n  INSERT LINE1  NN\n  IN        - WILL INSERT NN NUMBER OF BLANK LINES FOLLOWING LINE1.\n\n  COLUMN NNN\n  COL       - WILL SHIFT DISPLAYED DATA ON SCREEN SO THAT THE\n            - FIRST CHRACTER OF EACH LINE IS ACTUALLY OFFSET BY\n            - THE SPECIFIED COLUMN. THIS IS USEFUL FOR DATA SETS\n            - WITH RECORD LENGTHS LARGER THAN 80, SO THAT DATA\n            - AT THE END OF THE RECORD MAY BE ALTERED OR DISPLAYED.\n\n  CHANGE  LINE1  LINE2  /STRING1/STRING2/ALL\n  C         - WILL CHANGE STRING1 OF LINE1 (OR LINE1 THROUGH LINE2\n            - IF SPECIFIED) TO STRING2.\n            - ONLY ONE CHANGE PER LINE IS MADE UNLESS KEYWORD \"ALL\"\n            - IS SPECIFIED IMMEDIATLY FOLLOWING ENDING SLASH.\n            - OPTIONAL A) LINE2\n            -          B) ALL\n      NOTE: - TRUNCATION OR TRAILING BLANKS WILL RESULT IF STRING1\n            - AND STRING2 ARE OF DIFFERENT LENGTHS.\n\n  COPY  LINE1  LINE2  LINE3\n            - WILL COPY LINE1 (OR LINE1 THROUGH LINE2 IF SPECIFIED)\n            - AFTER EXISTING LINE3.\n            - OPTIONAL A) LINE2\n            - REQUIRED A) LINE1\n                       B) LINE3\n                       C) LINE1, LINE2 AND LINE3 MUST BE EXISTING\n  MOVE  LINE1  LINE2  LINE3\n            - WILL MOVE LINE1 (OR LINE1 THROUGH LINE2 IF SPECIFIED)\n            - AFTER EXISTING LINE3.\n            - OPTIONAL A) LINE2\n            - REQUIRED A) LINE1\n                       B) LINE3\n                       C) LINE1, LINE2 AND LINE3 MUST BE EXISTING\n\n  RENUM  NNN  MMM\n  R         - WILL RENUMBER DATA SET STARTING WITH NNN BY MMM\n            - INCREMENTS.\n            - OPTIONAL A) NNN\n                       B) MMM\n            - DEFAULT IS NNN=10  MMM=10\n\n  PFK    DISPLAY\n         D\n         NN=(COMMAND)\n            - THE DISPLAY (ABBREVIATED \"D\") WILL DISPLAY THE\n            - CURRENT COMMANDS ASSOCIATED WITH EACH PF KEY.\n            - BY SPECIFYING A KEY NUMBER, A PFK CAN BE PROGRAMMED\n            - TO EXECUTE A SPECIFIC COMMAND.\n\n  SAVE   'DSNAME'\n  S         - WILL SAVE THE DATA SET BACK TO DISK.\n            - 'DSNAME' FOLLOWES SAME TSO STANDARDS AS IN FSE COMMAND\n            - SYNTAX, WHERE QUOTES DENOTE FULL QUALIFICATION, ELSE\n            - USER ID IS PREFIXED.\n            - OPTIONAL A) 'DSNAME' IS NOT REQUIRED: A \"SAVE\"\n                          SUBCOMMAND ALONE WILL SAVE INTO THE\n                          ORIGINAL DATA SET.\n      NOTE: - THE SAVE FUNCTION WILL RETURN ANY MESSAGES OR ABEND\n            - CODE MESSAGES IF IT FAILS, I.E. SPACE ABENDS ETC...\n            - AT THIS POINT ANOTHER \"SAVE\" SUBCOMMAND SHOULD BE\n            - TOWARD ANOTHER DATA SET.\n\n  SAVEEND 'DSNAME'\n            - WILL SAVE THE DATA SET BACK TO DISK AND END FSE SESSION.\n            - 'DSNAME' FOLLOWES SAME TSO STANDARDS AS IN FSE COMMAND\n            - SYNTAX, WHERE QUOTES DENOTE FULL QUALIFICATION, ELSE\n            - USER ID IS PREFIXED.\n            - OPTIONAL A) 'DSNAME' IS NOT REQUIRED: A \"SAVEEND\"\n                          SUBCOMMAND ALONE WILL SAVE INTO THE\n                          ORIGINAL DATA SET AND END FSE SESSION.\n      NOTE: - THE SAVEEND FUNCTION WILL RETURN ANY MESSAGES OR ABEND\n            - CODE MESSAGES IF IT FAILS, I.E. SPACE ABENDS ETC...\n            - AT THIS POINT ANOTHER \"SAVE\" OR \"SAVEEND\" COMMAND\n            - SHOULD BE ISSUED TOWARD ANOTHER DATA SET.\n\n  END       - WILL END FSE SESSION.\n            - IF CHANGES WERE MADE TO THE DATA SET, USER WILL BE\n            - ASKED TO EITHER ENTER A \"SAVE\" COMMAND TO STORE\n            - BACK THE CHANGES, OR ANOTHER \"END\" COMMAND TO BYPASS\n            - SAVING.\n\n  DONE      - WILL UNCONDITIONALLY END FSE SESSION WITHOUT ANY\n            - CHANGES BEING SAVED.\n\n  SUBMIT    - WILL SUBMIT THE DATA SET BEING EDITED TO THE INTERNAL\n  SUB       - READER FOR BACKGROUND PROCESSING.\n\n  AUTOSAVE  - WILL AUTOMATICALLY SAVE DATA SET EVERY 10 LINES WORTH\n            - OF CHANGES INTO \"USERID.FSE.AUTOSAVE\".\n            - THIS MEASURE ALLOWES USER TO KEEP EDITING WITHOUT\n            - PERIODICALLY SAVING AS A PRECAUTION OF POSSIBLE\n            - SYSTEM CRASH.\n     NOTE:  - IT IS THE USER\"S RESPONSIBILITY TO DELETE\n            - HIS \"USERID.FSE.AUTOSAVE\" AFTER A CLEAN \"SAVE\"\n            - PERFORMED INTO HIS DATA SET.\n\n  DSN       - WILL DISPLAY THE NAME OF THE DATA SET BEING EDITED.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSEPFKEY": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  THIS MODULE (FSEPFKEY) IS CALLED BY BRANCH BY MAIN MODULE FSE    *\n*   FOR THREE FUNCTIONS:                                            *\n*   A) TO EXECUTE A PRE-PROGRAMMED PFKEY (1 - 12) COMMAND R0=0      *\n*   B) TO PROGRAM A PFKEY COMMAND EQUATE                  R0=1      *\n*   C) TO DISPLAY THE CURRENT PFKEY PROGRAMMED FUNCTIONS. R0=1      *\n*                                                                   *\n*                                                                   *\n*  THIS MODULE IS LINKED INTO FSE FOR PERFORMANCE REASONS.          *\n*  INPUT PARMS ARE AS FOLLOWS:                                      *\n*  A)  R0=0  R1=ADDRESS OF TGET ASIS AREA...EXECUTE FUNCTION        *\n*  B)  R0=1  R1=ADDRESS OF \" PFK \" COMMAND..PROGRAM FUNCTION        *\n*  C)  R0=1  R1=ADDRESS OF \" PFK \" COMMAND..DISPLAY FUNCTION        *\n*                                                                   *\n*   BRUNO LA LICATA  CITIBANK I.M.G.       01 / 11 / 1980           *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\nFSEPFKEY CSECT                     SET ADDRESSABILITY\n*\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n*\n         SAVE (14,12)                       SET ADDRESSABILITY\n         LR   R12,R15\n         USING FSEPFKEY,R12                     AND\n         ST  R13,SAVE+4\n         LA  R5,SAVE                                 SAVE REGISTERS\n         ST  R5,8(R13)\n         LR  R13,R5\n*\n         ST  R1,SAVER1             SAVE PARM\n         CLI 0(R1),X'40'           DISPLAY OR PROGRAM?\n         BE  NOTEXEC               YES...SKIP EXECUTION LOGIC\n         B   EXEC\nSCANKEY  LA  R4,12                 MAX NUMBER OF PFKEYS\n         LA  R5,AREA               ADDRESS OF DSECT\nLOOP     CLC 0(1,R1),0(5)          COMPARE KEY VALUES\n         BER R14\n         LA  R5,26(R5)             BUMP TABLE UP 26\n         BCT R4,LOOP               GO TRY AGAIN\n         B   RETURN                NO KEY\nEXEC     BAL R14,SCANKEY\n         MVC 3(25,R1),1(R5)\n         MVC 0(3,R1),=X'11C1D5'\n         B   RETURN                EXECUTE PFKEY\nNOTEXEC  EQU *\n         LR  R7,R1\n         LA  R7,4(R7)\n         LA  R8,10\nWORDLOOP CLI 0(R7),C' '\n         BNE SOMETHNG\n         LA  R7,1(R7)\n         BCT R8,WORDLOOP\n         B   RETURN\nSOMETHNG CLI 0(R7),C'D'\n         BE  DISPLAY\n         LR  R5,R7\n         LA  R8,3\n         LA  R9,0\nDIGITL   CLC 0(2,R7),=C'=('\n         BE  FOUNDEQ\n         XR  R10,R10\n         IC  R10,0(R7)\n         CH  R10,=H'240'\n         BL  RETURN\n         LA  R7,1(R7)\n         LA  R9,1(R9)\n         BCT R8,DIGITL\n         B   RETURN\nFOUNDEQ  EQU  *\n         BCTR R9,0\n         EX   R9,PACKIT\n         B    *+10\nPACKIT   PACK DOUBLE(8),0(0,R5)\n         CVB  R5,DOUBLE\n         LTR  R5,R5\n         BZ   RETURN\n         CH   R5,=H'12'\n         BH   RETURN\n         CH   R5,=H'10'\n         BNE  TRY11\n         MVI  KEY,X'7A'\n         B    SKIPNUM\nTRY11    CH   R5,=H'11'\n         BNE  TRY12\n         MVI  KEY,X'7B'\n         B    SKIPNUM\nTRY12    CH   R5,=H'12'\n         BNE  NUMERIC\n         MVI  KEY,X'7C'\n         B    SKIPNUM\nNUMERIC  CVD  R5,DOUBLE\n         UNPK KEY(1),DOUBLE(8)\n         OI   KEY,X'F0'\nSKIPNUM  LA   R1,KEY\n         BAL  R14,SCANKEY\n* WHEN HERE...MACHING ENTRY FOUND\n* R5 POINTS TO KEY+COMMAND\n         LA   R7,2(R7)\n         LA   R8,25\n         LR   R2,R7\n         LA   R4,0\nPARLOOP  CLI  0(R7),C')'\n         BE   FOUNDPAR\n         LA   R7,1(R7)\n         LA   R4,1(R4)\n         BCT  R8,PARLOOP\n         B    RETURN\nFOUNDPAR LTR  R4,R4\n         BZ   RETURN\n         MVC  1(25,R5),=25C' '\n         BCTR R4,0\n         EX   R4,MOVECMD\n         B    *+10\nMOVECMD  MVC  1(0,R5),0(R2)\n         B    RETURN\nDISPLAY  TPUT CLEAR,8,FULLSCR,HOLD\n         LA   R2,12\n         LA   R3,1\n         LA   R4,AREA\nDISLOOP  CVD  R3,DOUBLE\n         UNPK DISMSG1+3(2),DOUBLE(8)\n         OI   DISMSG1+4,X'F0'\n         MVC  DISMSG2(25),=25C' '\n         MVC  DISMSG2(25),1(R4)\n         TPUT DISMSG1,31\n         LA   R4,26(R4)\n         LA   R3,1(R3)\n         BCT  R2,DISLOOP\n         TPUT DISMSG1+5,1\n         TPUT PROMPT,28\n         TGET KEY,1\nRETURN   EQU *\n         L   13,SAVE+4\n         LM  14,12,12(13)\n         BR  14\n         DS  0F\nSAVE     DS  18F\nSAVER1   DS  F\nKEY      DS X\nDISMSG1  DC  C'PFK01 '\nDISMSG2  DC  25C' '\nPROMPT   DC  C'PRESS ENTER TO RETURN TO FSE'\nCLEAR    DC  X'C11140403C404000'\nAREA     DC  X'F1',C'TOP                      '\n         DC  X'F2',C'DOWN 1                   '\n         DC  X'F3',C'R 100 100                '\n         DC  X'F4',C'PB                       '\n         DC  X'F5',C'HF                       '\n         DC  X'F6',C'F                        '\n         DC  X'F7',C'HB                       '\n         DC  X'F8',C'PF                       '\n         DC  X'F9',C'SUBMIT                   '\n         DC  X'7A',C'UP 1                     '\n         DC  X'7B',C'B                        '\n         DC  X'7C',C'END                      '\n         DS  0D\nDOUBLE   DS  D\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSEPRTY": {"ttr": 2058, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*  THIS MODULE (FSEPRTY) IS LINKED FROM MAIN DRIVER FSE TO ALTER    *\n*   THE DISPATCHING PRIORITY OF THE EXECUTING ASCB FOR INCREASED    *\n*   RESPONSE TIME AND TO DECREASE SIGNIFICANCE IN IPS FOR SECOND    *\n*   & THIRD PERIOD TSO. THIS FEATURE WILL BE ONLY EXECUTED UNDER    *\n*   MVS, BYPASSING IT FOR OTHER OPERATING SYSTEMS (ASCB IS          *\n*   VERIFIED BEFORE CHAP FUNCTION.                                  *\n*                                                                   *\n*  AT ENTRY REG. 2 HAS THE BINARY VALUE OF THE NEW DISPATCHING      *\n*  PRIORITY, (USUALLY 240 ENTERING FSE, AND 126 LEAVING IT)         *\n*  IF THE HIGH BIT IN R2 IS ON MAKES ADDR. SPACE NON-SWAPPABLE      *\n*                                                                   *\n*  NO FRR IS SET, BUT RATHER A SIMPLE STAE TO CONTROL ABENDS.       *\n*                                                                   *\n*   BRUNO LA LICATA  N.B.N.A.         8 / 14 /78                    *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\nFSEPRTY  CSECT                     SET ADDRESSABILITY\n*\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n*\n         SAVE (14,12)                       SET ADDRESSABILITY\n         LR   R12,R15\n         USING FSEPRTY,R12                      AND\n         ST  R13,SAVE+4\n         LA  R5,SAVE                                 SAVE REGISTERS\n         ST  R5,8(R13)\n         LR  R13,R5\n         LR  R10,R2\n         L    2,16        A(CVT)\n         L    2,0(2)      A(OLD/NEW TCB)\n         L    2,4(2)      A(MY TCB)\n         L    2,180(2)    A(JSCB)\n         XR   0,0         CLEAR FOR IC\n         IC   0,236(2)    JSCB FLAG BYTE\n         STC  0,BYTE      STORE AWAY\n         OI   BYTE,X'01'  TURN MODESET BIT ON\n         IC   0,BYTE      IC FOR ZAP SVC\n         LR   15,2        ADD OF JSCB\n         LA   15,236(15)  JSCB FLAGS ADDRESS\n         SVC  248         ZAP BIT ON\n         MODESET KEY=ZERO,MODE=SUP\n         B    SKIPBYTE    GO PROCESS\nBYTE     DS   C\nSKIPBYTE DS   0H\nSETSTAE  EQU   *                            SET UP STAE ENVIRONMENT\n          LR  R2,R10\n         ST    R2,SAVER2                    USE R2 AS PARM (DPRTY)\n         STH   R2,BINPRTY\n         L     R3,ABENDPRM\n         STM   R6,R3,SAVEREG\n*        STAE  ABEND01,PARAM=ABENDPRM,PURGE=HALT\n         BC   15,GETSTAT\nABENDTOP L     R4,0(R1)            THIS SECTION WILL RESET REGISTERS\n         L     R4,4(R4)            IN CASE OF ABEND\n         LM    R6,R3,0(R4)\nRETURN   EQU   *\n         MODESET KEY=NZERO,MODE=PROB   ,SET PROBLEM STATE BACK\n         L    R13,SAVE+4           LOAD BACK SAVE REG\n         RETURN (14,12)            RETURN TO FSE\n         DS    0F\nASCBADD  DS F\n         DS  0D\nDOUBLE   DS  D\n         DS  0H\nGETSTAT  L   R10,X'220'            ASCB\n         ST  R10,HISASCB           SAVE ASCB ADDRESS\n         L   R11,144(R10)          OUCB ADDRESS\n         NI  19(R11),X'BF'         TURN OFF APG BIT\n         TM   SAVER2,X'80'         NON-SWAP REQUEST?\n         BNO  PUT2A                NO, GO PUT IN RIGHT SRM CODE\n         MVI  SRMCODE,X'29'        MOVE CODE\n         B    PUT29                SKIP THER VALUE\nPUT2A    MVI  SRMCODE,X'2A'        MOVE CODE\nPUT29    EQU  *\n         XR   R0,R0                CLEAR R0\n         IC   R0,SRMCODE           INSERT CODE\nSVC      SVC  95                   ISSUE SYSEVENT\n         LTR  R1,R1                GOOD RETURN?\n         BZ   CHAPP                YES, GO FINISH\n         TPUT SRMMSG,16            NO, SEND ERROR MSG\nCHAPP    EQU  *\nDOCHAP   SR   R0,R0\n         LA   R1,PARM\n         LA   13,CHAPSAVE         GIVE CHAP WORK REG SPACE\n         L    R6,16               ADDRESS OF CVT\n         L    R15,676(R6)         ADDRESS OF CHAP ROUTINE\n         BALR R14,R15             BRANCH TO IT\n         LA   R13,CHAPSAVE\n         B    RETURN\n         DS  0F\nSAVER2   DS  F\nSAVE     DS    18F\nCHAPSAVE DS    18F\nPARM     DS   0F\n         DC   X'8000'\nBINPRTY  DC   H'0'\nHISASCB  DS   F\nSAVEREG  DS   15F\nABENDPRM DC   A(ABENDTOP,SAVEREG,SDWA)\nSDWA     DS  10C\nSRMMSG   DC  C'NONZERO SRM CODE'\nSRMCODE  DS  X\n         DS  0H\nABEND01  CSECT\n         STM  14,12,12(13)       THIS IS\n         BALR 12,0\n         USING *,12                 A DUMMY CSECT\n         ST   13,SAVE3+4\n         LA   5,SAVE3                   USED TO GET\n         ST   5,8(13)\n         LR   13,5                          BACK TO MAIN\n         L    13,4(13)\n         LM   14,12,12(13)                      LINE AFTER\n         LA   15,4\n         L    3,0(1)                                    ABEND\n         L    3,0(3)\n         LR   0,3\n         L    4,0(1)\n         L    4,8(4)\n         MVC  0(10,4),0(1)\n         BR   14\n       DS  0F\nSAVE3    DS   18F\n    END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FSESAVE": {"ttr": 2305, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*    THIS ROUTINE IS LINKED FROM MAIN DRIVER \"FSE\" WHEN A SAVE\n*    SUBCOMMAND IS ENTERED. EXPLANATION OF LOGIC FLOW FOLLOWES :\n*  - UPON ENTRY INTO FSESAVE, A SCAN OF THE SUBCOMMAND BUFFER\n*    IS DONE TO SEE WHETHER A DATA SET WAS ENTERED WITH THE \"S\"\n*    OR \"SAVE\". IF THE DATA SET WAS NOT ENTERED, IT ASSUMES THE\n*    SYSEDIT FILE IS TO BE WRITTEN BACK INTO THE ORIGINAL ONE\n*    THAT WAS EDITED. FSESAVE WILL USE MANY ADDRESSES PASSED FROM\n*    FSE TO RETRIEVE DATATYPE, FLAGS, DSNAMES ETC...\n*  - IF A DATA SET WAS ENTERED, FSESAVE WILL SCAN IT FOR VALIDITY\n*    ETC... AND ALSO MOVE MEMBER NAME FOR PDS\"S INTO SAVE AREAS.\n*  - WHEN ALL PERTINENT FIELDS ARE MOVED FROM \"FSE\" BUFFERS TO\n*    FSESAVE BUFFERS, A CHECK IS MADE FOR EITHER OLD OR NEW STATUS\n*  - FOR AN OLD DATA SET, A FORMAT 1 DSCB IS READ INTO STORAGE\n*    TO VALIDATE DATA SET CHARACTERISTICS ETC...\n*  - FOR A NEW DATA SET, (ACCORDING TO TYPE) A DATA SET WILL BE\n*    ALLOCATEDWITH STANDARD CHARACTERISTICS.\n*  - THE SYSEDIT FILE WILL BE WRITTEN TO THE ALLOCATED DATA SET\n*    USING 1 OF 6 POSSIBLE DCB\"S THAT ARE DEFINED.\n*  - EACH TIME FSESAVE IS ENTERED, A COUNT OF DDNAMED IS INCREMENTED\n*    TO ALLOW ONLY ONE USE OF A PARTICULAR DCB PER EDIT.\n*    THIS IS USED IN CASE OF ABEND WHILE WRITING OUT..(B37,D37,E37)\n*    HAVING THE STAE ROUTINE TAKING CONTROL AND LEAVING THE DCB OPEN\n*    (CONTRARY TO DOCUMENTATION, CLOSING THE DCB AND REUSING IT,\n*    RESULTED IN VARIOUS I/O ABENDS)\n*    AT ENTRY POINT R3 CONTAINS THE ADDRESS OF THE PARMLIST :\n*     DC A(TOPADD,LASTADD,ALLOCDSN,SAVEDSN,MEMBER,PSCB,SAVEFLAG,\n*          ENDFLAG,SAVELREC,DATATYPE,PARMSAVE,FIXORVAR,CPPL,RESPONSE,\n*          DDCOUNT)\n*    R7 CONTAINS THE ADDRESS OF THE SUBCOMMAND BUFFER\n*    R4 CONTAINS THE ADDRESS OF THE PARMSAVE FLAG (TO INDICATE\n*    SUCCESFULL SAVE TO \"FSE\")\n*\n*\n*    BRUNO LA LICATA        LVL 1.00      11 / 11 / 77\n*    N.B.N.A.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nFSESAVE  CSECT\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n*\n*\n         STM   R14,R12,12(R13)         SAVE REGISTERS\n         LR    R12,R15                    AND SET\n         USING FSESAVE,R12,R11              ADDRESSABILITY\n         L   R11,=A(FSESAVE+4096)              FOR 8K\n         BC  15,GETSAVE                SKIP LITERAL POOL\n         LTORG\n         DS  0H\nGETSAVE  ST    R13,SAVE+4            SET UP CONVENTIONAL\n         LA    R5,SAVE               SAVE AREA CHAINING\n         ST    R5,8(R13)\n         LR    R13,R5\n         LR   R10,R3                 SAVE R3 ==> R10  MAIN PARM REG.\n         ST   R10,SAVEPARM           SAVE IT\n         LA   R7,1(R7)\n         LR   R2,R7                  R2 ADD(SUBCOMMAND BUFFER)\n         LA   R3,10                  MAX LENGTH TO SEE IF DSNAME\n         LR   R9,R4                    WAS SPECIFIED.\n         L    R1,48(R10)               LOAD R1 WITH C.P.P.L.\n         LINK EP=FSEATTR               FREE ATTRLIST(FSEATTR) IF ALLOC.\n         L    R1,48(R10)               LOAD R1 WITH C.P.P.L.\n         LINK EP=FSEFREE               FREE DDNAMES ALLOCATED\n         L    R4,56(R10)\n         L    R4,0(R4)                 LOAD DDNAME COUNT\n         CVD  R4,DOUBLE\n         UNPK DDNAME+6(2),DOUBLE(8)    MOVE IT INTO DAIR FIELD\n         OI   DDNAME+7,X'F0'\n*\n*\n         MVC  CATINFO(256),=256C' '    HOUSEKEPING\n         MVC  DSNAME(56),CATINFO\n         MVC  SAVEDSN(55),CATINFO\n         MVI  DATATYPE,X'00'\nDSNLOOP  CLI  0(R2),C' '               THIS SECTION WILL TEST TO SEE\n         BE   ADDBACK                    IF A DATA SET NAME WAS GIVEN\n         LA   R2,1(R2)                   IN THE SAVE SUBCOMMAND.\n         BCT  R3,DSNLOOP\n         B    NODSNAME                 NO DSNAME FOUND\nADDBACK  LA   R3,5\nLOOP1    CLI  0(R2),X'40'\n         BNE FOUNDDSN                  DATA SET NAME SPECIFIED..\n         LA   R2,1(R2)                 SKIP IF BLANK\n         BCT  R3,LOOP1\n         B    NODSNAME                NO DSNAME WAS FOUND....\n*\n*\nFOUNDDSN MVC   DDNAME+8(16),=16C' '         CLEAR DAIR UNIT/VOL\n         CLC   0(8,R2),=C'FSEABCDE'         IS IT SUBMIT-SAVE?\n         BNE   SKIPSUB                      NO, SKIP INIT\n         MVC   DDNAME+8(16),=C'3350    IMG038  ' SET UP DAIR\n*\nSKIPSUB  LA   R4,0                    R4 USED FOR DSNAME LENGTH\n         LR   R5,R2                   SAVE DSNAME ADDRESS IN BUFFER\n         LA   R3,56  MAX LENGTH (44 + 2 QUOTES + 8 FOR MEMBER)\nLOOP2    CLI  0(R2),X'40'             CHECK FOR BLANK (END)\n         BE   ENDDSN\n         LA   R2,1(R2)                BUMP UP BUFFER ADD.\n         LA   R4,1(R4)                BUMP UP LENGTH COUNT\n         BCT  R3,LOOP2   GO SCAN AGAIN\n         MVI  0(R9),B'00010000'        INVALID DSNAME SPECIFIED\n         L    R10,52(R10)              MOVE MESSAGE\n         MVC  0(41,R10),SAVEMSG4\n         B    RETURN                   GOBACK TO FSE\nSAVEMSG4 DC   C'INVALID DSNAME SPECIFIED - USE NEW DSNAME'\n         DS   0H\nENDDSN   LR   R7,R4                    DSNAME LENGTH\n         MVC  DSNAME(56),=56C' '\n         BCTR R4,0                     READY FOR EX\n         EX   R4,MOVEDSN               MOVE FROM BUFFER TO \"DSNAME\"\n*\nFIXDSN   CLI  DSNAME,C''''             CHECK FOR FULL QUALIFICATION\n         BNE  PREFIXID                 NO, MUST BE USER DATA SET\n         MVC  SAVEDSN(55),=55C' '      CLEAN \"DSNAME\"\n         MVC  SAVEDSN(55),DSNAME+1     MOVE TO STRIP QUOTE\n         LA   R2,SAVEDSN               BEGINNING ADD. FOR SEARH\n         LA   R3,55                    OF ENDING QUOTE--MAX LENGTH\n*\nLOOP3    CLI  0(R2),C''''\n         BE   FOUNDQUO                 FOUND IT...\n         LA   R2,1(R2)                 BUMP UP ADDRESS\n         BCT  R3,LOOP3                 GO SCAN AGAIN\n         MVI 0(R9),B'00010000'\n         L    R10,52(R10)\n         MVC  0(41,R10),SAVEMSG4\n         BC   15,RETURN\nFOUNDQUO MVI 0(R2),X'40'               MAKE IT BLANK\n         B   SKIPID                    GO TO SCAN KEYWORDS\n*\n* THIS SECTION WILL PREFIX THE DSNAME WITH THE USER\"S\n*  LOGON ID FOUND AT P.S.C.B. +0. LENGTH IS AT +7.\n*\nPREFIXID LA   R2,DSNAME\n          LA   R3,SAVEDSN\n         MVC  SAVEDSN(55),=55C' '      CLEAR IT FOR MOVE\n         L    R4,20(R10)               POINT TO LOGON ID\n         L    R4,0(R4)\n         SR   R5,R5                    CLEAR TO LOAD ID LENGTH\n         IC   R5,7(R4)                 INSERT LENGTH OF TSO ID.\n         BCTR R5,0                     READY FOR EX\n         EX   R5,MOVEID                MOVE ID TO SAVEDSN\n         B    *+10                     SKIP EXECUTED MOVE\nMOVEID   MVC  0(0,R3),0(4)             ---EXECUTED MOVE--\n         DS   0H\n         LA   R5,1(R5)                 ADD BACK TO LENGTH\n         AR   R3,R5                    POINT TO \".\" SPOT\n         MVI  0(R3),C'.'               MOVE IT IN\n         LA   R3,1(R3)                 POINT TO NEXT LEVEL\n*\n*  THIS SECTION WILL MOVE THE READ-IN DSNAME APPENDED TO ID\n*\n         BCTR R7,0                     READY TO EX\n         EX   R7,MOVEIN                MOVE REST OF DSNAME\n         LA   R7,1(R7)                 ADD BACK TO LENGTH\n*\n*  HERE, THE SPECIFIED KEYWORDS WILL BE SCANNED AND FLAGS\n*   IN \"DATATYPE\" WILL BE SET ACCORDINGLY.\n*\nSKIPID   EQU  *\nMAINLOG  EQU  *\n        DS  0H\n         LA   R2,SAVEDSN               SCAN ADDRESS\n         LA   R4,55\n         LA   R6,0                     LENGTH COUNT\nLOOP5    CLI  0(R2),C'('               CHECK FOR PDS\n         BE   FOUNDPDS\n         LA   R2,1(R2)                 BUMP 1\n         LA   R6,1(R6)                 ADD 1 TO COUNT\n         BCT  R4,LOOP5\n* THIS MUST BE A SEQUENTIAL DATA SET\n         MVC  DSNAME(55),SAVEDSN\n         NI   DATATYPE,B'11111110'     MAKE SEQUNTIAL\n         B    OKTYPE\nFOUNDPDS OI   DATATYPE,X'01'           FLAG FOR PDS\n         LA   R3,SAVEDSN               START ADDRESS\n         SR   R2,R3                    LENGTH OF TRUE NAME\n         MVC  DSNAME(56),=56C' '\n         BCTR R2,0\n         EX   R2,MOVETRUE\n         B    *+10\nMOVETRUE MVC  DSNAME(0),SAVEDSN          MOVE TRUE DSNAME-MEMBER\n*\n*\nOKTYPE   EQU  *                          LOAD UP\n         L    R2,48(R10)  CPPL ADD.         C.P.P.L.\n         L    R3,4(R2)                           ADDRESSES\n         ST   R3,DAPLUPT                                FROM\n         L    R3,16(R2)\n         ST   R3,DAPLECT                                    FSE\n         L    R3,8(R2)\n         ST   R3,DAPLPSCB\n         XC   DAPLECB(4),DAPLECB\n*\n*\nNEWDSN   TM   DATATYPE,X'01'        IS IT PDS REQUIRED?\n         BNO  NOTPDS\n         BAL  R6,PDSRTN             DO ALLOCATION FOR PDS\n         BC   15,GETMAIN            GO TO MAIN LINE RTN\n*\n*\n*  THIS ROUTINE DOES THE ALLOCATION FOR A NEW AND OLD MEMBER\n*   OF AN EXISTING P.D.S.\n*\n*\nPDSRTN   LOCATE CAT                 MAKE SURE DSN IS CATALOGED\n         LTR  R15,R15\n         BZ   PDSOK                 OK, CATALOGED\nPDSNOTOK MVI  0(R9),X'08'\n         L    R10,52(R10)\n         MVC  0(44,R10),SAVEMSG5\n         BC   15,RETURN\nSAVEMSG5 DC   C'SPECIFIED PDS NOT CATALOGED - USE NEW DSNAME'\n         DS   0H\nPDSOK    EQU  *\n*\n*  THIS NEXT SECTION RETRIEVES THE MEMBER NAME FROM\n*   FIELD SAVEDSN, TO BE USED IN THE DAIR BLOCK.\n         LA   R5,SAVEDSN\n         LA   R2,SAVEDSN\n         LA   R3,55            SEARCH COUNT MAX.\nLOOP9    CLI  0(R2),C'('       CHECK FOR PARENTHESIS\n         BNE  SKIPLOAD\n         LR   R5,R2\nSKIPLOAD CLI  0(R2),C')'       CHECK FOR END\n         BE   GETMEMBE\n         LA   R2,1(R2)         BUMP ADDRESS UP 1\n         BCT  R3,LOOP9\n*\nGETMEMBE SR   R2,R5            GET MEMBER LENGTH+1\n         BCTR R2,0             TRUE LENGTH\n         CH   R2,=H'8'         VALID LENGTH??\n         BNH  LENGTHOK\n         MVI  0(R9),X'10'\n         L    R10,52(R10)\n         MVC  0(41,R10),SAVEMSG4\n         B    RETURN\n*\nLENGTHOK LA   R5,1(R5)         POINT TO MEMBER NAME\n         BCTR R2,0\n         EX   R2,MOVEMEMB\n         B    *+10\nMOVEMEMB MVC  MEMBER(0),0(R5)  ---EXECUTED MVC--\n         LA    R7,NEWMEMBE\n         ST    R7,DAPLDAPB\n         MVC   NEWMEMBE+2(6),=6X'00'         INITIALIZA\n         MVC   DA08BLK(4),=4X'00'                DYNAMIC\n         MVC   DA08PQTY(4),=4X'00'                  ALLOCATION\n         MVC   DA08SQTY(4),=4X'00'                     PARAMETERS\n         MVC   DA08DQTY(4),=4X'00'                   FOR\n         MVC   DAIRFLAG(3),=X'080808'                    AN OLD\n         MVI   DA08CTL,X'00'                                DATA SET\n         MVC   DA08CTL+1(3),=3X'00'\n         MVI   DA08CTL+4,X'40'\n         MVC   LIST(8),=8C' '\nDYNPDS   LA   R1,DAPL                      LOAD PRIMARY DAIR BLOCK\n         LINK EP=IKJDAIR                   LINK TO ALLOCATION RTN.\nDAIRCHEK LTR  R15,R15                      OK RETURN?\n         BZR  R6                           YES,BRANCH TO CALLING RTN\n         MVI  0(R9),X'80'                  NO ALLOCATION...\n         L    R10,52(R10)                  ADD(RESPONSE FIELD)\n         MVC  0(41,R10),SAVEMSG1           MOVE MESSAGE\n         BC   15,RETURN                    GO BACK TO FSE\n*\nSAVEMSG1 DC   C'DYNAMIC ALLOCATION ERROR - USE NEW DSNAME'\n         DS   0H\n*\nNOTPDS   EQU  *\n         MVI NEWFLAG,X'01'             NEW DEFAULT\n         LOCATE CAT                   MAKE SURE DATA SET DOES\"NT EXIST\n         LTR  R15,R15                 CHECK RETURN FROM LOCATE\n         BNZ  OKNEW                   NOT CATALOGED...\n        MVI  NEWFLAG,X'00'            CATALOGED, MOVE TO FLAG\n         B    OLDDSN                  GO PROCESS AN OLD DATA SET\nNEFLAG   DS   X\n         DS 0H\nOKNEW    EQU  *\n*\n*  FOR NEW PHY. SEQ. DATA SET, AN ATTRIBUTE LIST CONTAINING\n*   THE LRECL, BLKSIZE, RECFM HAS TO BE CREATED. THESE VALUES\n*   WILL BE DEPENDENT ON THE DATA SET TYPE...(CLIST TYPES\n*   ARE  VBS 255 X 1680  VARIABLE BLOCKED.... THE REST ARE\n*   80  X 4080 FIXED BLOCKED)\n*  THE ATTRIBUTE LIST IS LATER USED TO ALLOCATE THE DATA SET\n*  DEFAULTING TO SYSGENED SPACE VALUES AND DISP=(NEW,CATLG,CATLG)\n*\n         LA    R7,ATTRLIST            ADDRESS OF DAIR BLOCK\n         ST    R7,DAPLDAPB            STORE IT\n         LA   R1,DAPL                 LOAD PRIMARY DAIR BLOCK\n         L    R2,36(R10)\nCHECK2   TM   0(R2),B'00000100'    CHECK FOR CLIST TYPE\n         BNO  SKIPCLIS                NOT CLIST\nCLISTTYP LA   R5,255                  BUFFER SIZE AND LRECL\n         STH  R5,LRECL                MOVE IT\n*        STH  R5,BUFFLEN              MOVE IT\n         MVC  BLKSIZE(2),=H'1680'     MOVE DEFAULT BLKSIZE\n         MVI  FIXORVAR,X'01'\n         MVI  RECFM,B'01010000'       MOVE DEFAULT VB RECFM\n         B    DAIRATTR               SKIP OTHER DEFAULTS\nSKIPCLIS MVC  LRECL(2),=H'80'        LRECL DEFAULT\n*        MVC  BUFFLEN(2),=H'80'      BUFFER SIZE\n         MVC  BLKSIZE(2),=H'4080'    BLKSIZE DEFAULT\n         MVI  RECFM,B'10010000'      RECFM=FB DEFAULT\nDAIRATTR LINK EP=IKJDAIR             LINK TO ALLOCATE DCB\n         LTR  R15,R15                GOOD CODE?\n         BZ   DSNALLOC               YES, GO ALLOCATE DATA SET\n         MVI  0(R9),X'80'            NO, GO TPUT THE CODE\n         L    R10,52(R10)\n         MVC  0(41,R10),SAVEMSG1\n         B    RETURN\nDSNALLOC LA   R7,NEWMEMBE           SET UP APPROPRIATE DAIR BLK.\n         ST   R7,DAPLDAPB\n         MVI DAIRFLAG,B'00000100'       * *  * * * * * * * * * * * *\n         MVI DAIRFLAG+1,B'00000010'     *                          *\n         MVI DAIRFLAG+2,B'00000000'     *  INITIALIZE DAIR CONTROL *\n         MVI DA08CTL,B'10010010'        *  BLOCKS FOR ALLOCATION   *\n         MVC NEWMEMBE+2(6),=6X'00'      *  OF NEW DATA SET.        *\n         MVC DA08BLK(4),=4X'00'         *                          *\n         MVC DA08DQTY(4),=4X'00'        *                          *\n         MVC MEMBER(8),=8C' '           *                          *\n         MVC  LIST(8),=C'FSEATTR '      * * * * * * * * * * * * * *\n         L    R2,4(R10)\n         L    R2,0(R2)                  SAVE FIELD \"SAVELREC\" FROM\n         L    R3,32(R10)                FSE INTO FSESAVE.\n         LH   R3,0(R3)\n         STH  R3,SAVELREC               THIS ROUTINE  WILL CALCULATE\n         AR   R2,R3                       THE AMOUNT OF SPACE IN\n         MH   R3,=H'50'                   TRACKS NEEDED TO SAVE THE\n         AR   R2,R3                       SYSEDIT FILE.\n         L    R3,0(R10)                   MINIMUM IS 4 TRACKS, AND\n         L    R3,0(R3)                    FOR ANY GREATER SPACE NEEDS\n         SR   R2,R3                       EACH 6K OF STORAGE USES 1\nLOOKR2   EQU  *                           TRACK TO ALLOW OVERHEAD.\n         LR   R3,R2\n         XR   R2,R2\n         C    R3,=F'6000'               LESS THAN 6K?\n         BNH  TRACKS2                   YES, ALLOCATE 4 TRACKS.\n*\n         D    R2,=F'6000'               DIVIDE TOTAL STORAGE\n         LA   R3,3(R3)                     USED IN SYSEDIT BY 6000\n         ST   R3,DA08PQTY                  TO CALCULATE THE NUMBER\n         ST   R3,DA08SQTY                  OF TRACKS NEEDED FOR\n         B    SKIPDEF                      SAVE FUNCTION.\nTRACKS2  LA   R3,4\n         ST   R3,DA08PQTY               STORE QUANTITY INTO\n         ST   R3,DA08SQTY                  DAIR BLOCK\nSKIPDEF  EQU  *\n         LA  R1,DAPL                    LOAD ADD. OF PRIMARY BLOCK\n         LINK EP=IKJDAIR                CALL ALLOCATION RTN.\n         LTR  R15,R15                   CHECK RETURN CODE\n         BZ   WRITEFIL                  OK, WRITE SYSEDIT TO DISK.\n         MVI  0(R9),X'80'               NO GOOD...\n        L    R10,52(R10)                MOVE MESSAGE TO RESPONSE\n        MVC  0(41,R10),SAVEMSG1             FIELD AND\n        B    RETURN                               GO BACK TO FSE.\n*  THIS SECTION IS USED TO ALLOCATE AN OLD DATA SET\n*\nOLDDSN   EQU  *\nOLDPS    EQU  *\nOKOLDPS  MVI  DA08CTL,B'00000000'       * * * * * * * * * * * * * *\n         MVC  NEWMEMBE+2(6),=6X'00'     *\n         MVC  DA08BLK(4),=4X'00'        * THIS SECTION INITIALIZES\n         MVC  DA08PQTY(4),=4X'00'       *\n         MVC  DA08SQTY(4),=4X'00'       * D.A.I.R. BLOCKS FOR\n         MVC  DA08DQTY(4),=4X'00'       *\n         MVC  MEMBER(8),=8C' '          * ALLOCATION OF AN OLD\n         MVC  DAIRFLAG(3),=X'080808'    *\n         MVC  LIST(8),=8C' '            * PHY. SEQ. DATA SET\n         LA    R7,NEWMEMBE              *\n         ST    R7,DAPLDAPB              *\nBEFORE   LA   R1,DAPL                   * * * * * * * * * * * * * * *\n         LINK EP=IKJDAIR\nAFTER    LTR  R15,R15                   GOOD RETURN CODE?\n         BZ   GETMAIN                   YES, GO WRITE SYSEDIT\n         MVI  0(R9),X'80'               NO, MOVE MESSAGE\n         L   R10,52(R10)                   TO RESPONSE FIELD\n         MVC 0(41,R10),SAVEMSG1                 AND RETURN TO FSE\n         B   RETURN\nGETMAIN  EQU  *\n         MVC  VOLSER(6),CATINFO+6   MOVE SER. # FOR OBTAIN\n         OBTAIN VTOC                READ DSCB TYPE 1\nCODE15   LTR  R15,R15               DATA SET THERE??\n         BZ   TEST1\n         B    PDSNOTOK\n*\n*  THIS SECTION WILL VALIDATE THE CHARACTERISTICS OF THE\n*  DATA SET AND DOUBLE CHECK WITH THE SPECIFIED DATA.\n*\nTEST1    LA   R6,VTOCINFO           INDEX TO DSCB INFO\nWHATYPE  TM   DATATYPE,X'01'        PDS?\n         BNO  TEST2\n         CLC  38(2,R6),=X'0200'      TEST FOR TRUE PDS\n         BE   MAINFSE\n         MVI  0(R9),X'08'\n         L    R10,52(R10)\n         MVC  0(44,R10),SAVEMSG5\n         B    RETURN\nTEST2    CLC  38(2,R6),=X'2000'       DSORG=DA??\n         BNE  TEST3\nBADDS    MVI  0(R9),X'04'\n         L    R10,52(R10)\n         MVC  0(45,R10),SAVEMSG7\n         B    RETURN\nSAVEMSG7 DC   C'INVALID RECFM/DSORG OR LRECL - USE NEW DSNAME'\n         DS   0H\nTEST3    CLC  38(2,R6),=X'8000'       DSORG=IS??\n         BNE  TEST4\n         B    BADDS\nTEST4    TM   DATATYPE,X'01'           HERE MAKE SURE SPECIFIED\n         BO   MAINFSE                  AS PS AND TRUE DSORG IS PS\n         CLC  38(2,R6),=X'4000'        PS?\n         BE   MAINFSE\n         B    PDSNOTOK\n         DS   0H\n*\nMAINFSE  EQU  *\n         CLI  VTOCINFO+40,X'C0'          U RECFM??\n         BNE  OKRECFM\n         B    BADDS\nFIXORVAR DS   X\n         DS   0H\n*\nOKRECFM  CLI VTOCINFO+40,X'80'          F?\n         BNE FORMAT1\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\nFORMAT1  CLI VTOCINFO+40,X'90'          FB?\n         BNE FORMAT2\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\nFORMAT2  CLI VTOCINFO+40,X'40'             V?\n         BNE FORMAT3\n         MVI FIXORVAR,X'01'\n         B   WRITEFIL\nFORMAT3  CLI VTOCINFO+40,X'50'             VB?\n         BNE FORMAT4\n         MVI FIXORVAR,X'01'\n         B   WRITEFIL\nFORMAT4  CLI VTOCINFO+40,X'54'             VBA?\n         BNE FORMAT5\n         MVI FIXORVAR,X'01'\n         B   WRITEFIL\nFORMAT5  CLI VTOCINFO+40,X'84'             FA?\n         BNE FORMAT6\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\nFORMAT6  CLI VTOCINFO+40,X'94'             FBA?\n         BNE FORMAT7\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\nFORMAT7  CLI VTOCINFO+40,X'82'             FM?\n         BNE FORMAT8\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\nFORMAT8  CLI VTOCINFO+40,X'92'             FBM?\n         BNE FORMAT9\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\nFORMAT9  CLI VTOCINFO+40,X'98'             FBS?\n         BNE FORMAT0\n         MVI FIXORVAR,X'00'\n         B   WRITEFIL\n* FORMAT IS THEREFORE SOMETHING WEIRD...BYE BYE\nFORMAT0  B   BADDS\nWRITEFIL EQU *\n*\nGOODOLD  EQU  *\n         CLI  NEWFLAG,X'01'\n         BE   OPENDCB\n         L    R2,44(R10)\n         CLC  FIXORVAR(1),0(R2)     CHECK TYPES\n         BE   CHECKLRE\n         B    BADDS\nCHECKLRE L    R2,32(R10)\n         MVC  SAVELREC(2),0(R2)\n         CLC  VTOCINFO+44(2),0(R2)    LRECLS THE SAME?\n         BE   OPENDCB                 GO WRITE IT OUT\n         B    BADDS\nNODSNAME L    R2,36(R10)              * * * * * * * * * * * * * * * *\n         TM   0(R2),X'01'             *\n         BNO  NOPDS1                  *    THIS ROUTINE IS BRANCHED\n         MVI  DATATYPE,X'01'          *\n         B    SKIPPS                  *    WHENEVER A SAVE WAS DONE\nNOPDS1   MVI  DATATYPE,X'00'          *\nSKIPPS   L    R2,8(R10)               *    WITH NO DATA SET NAME\n         LA   R2,2(R2)                *\n         MVC  DSNAME(56),0(R2)        *    SPECIFIED.\n         L    R2,12(R10)              *\n         MVC  SAVEDSN(55),0(R2)       *    THE ORIGINAL DSNAME IS\n         L    R2,36(R10)              *\n         TM   0(R2),X'01'             *    MOVED FROM FSE BUFFERS\n         BO   OKTYPE                  *\n         TM   0(R2),X'80'             *    AND NEW/OLD PS/PDS FLAGS\n         BNO  OLDONE                  *\n         MVI  NEWFLAG,X'01'           *    FLAGS ARE INITIALIZED.\n         B    OKTYPE                  *\nOLDONE   MVI  NEWFLAG,X'00'           *\n         B    OKTYPE                  *\n*                                     * * * * * * * * * * * * * * * *\n*\nOPENDCB  EQU  *\n*        STAE 0\n*        STAE ABEND,PURGE=NONE\n         B    DOWORK\nABEND    EQU  *   ,WAS STAE 0\n         L    R2,TCBADD\n         L    R2,17(R2)\n         CLC  0(3,R2),=X'B37000'\n         BNE  NOTB37\n         MVI  0(R9),X'40'\n         B    RETURN\nNOTB37   CLC  0(3,R2),=X'D37000'\n         BNE  NOTD37\n         MVI  0(R9),X'40'\n         B    RETURN\nNOTD37   CLC  0(3,R2),=X'E37000'\n         BNE  NOSPACE\n         MVI  0(R9),X'40'\n         B    RETURN\nNOSPACE  MVI  0(R9),X'20'\n         B    RETURN\n         DS   0F\nSAVEPARM  DS   F\n          DS   0H\nRETURN   L   R10,SAVEPARM\n         L    R1,48(R10)\n         LINK EP=FSEFREE\n         L    R1,48(R10)\n         LINK EP=FSEATTR\n         L    R13,4(R13)\n         LM   14,12,12(R13)\n         XR   R15,R15\n         BR   R14\n*\n*\nDOWORK   L    R2,16                        SAVE TCB ADDRESS\n         L    R2,0(R2)                         OF THIS LOGON.\n         L    R2,4(R2)\n         ST   R2,TCBADD\n         B    SKIPTCB\nTCBADD   DS   F\n         DS   0H\nSKIPTCB  EQU  *\n*\n         L   R4,56(R10)                       LOAD ADDRESS(DD COUNT)\n         L   R3,0(R4)                         LOAD DDNAME COUNT\n         CLI  NEWFLAG,X'01'                     TO BE USED IN INDEXING\n         BNE  SETOLD                            TO PICK UP NEW DCB.\nWHICHDCB EQU  *\n         LA   R7,6\n         LA   R8,MOVE1\n         LA   R6,DCB1                         THIS LOOP WILL USE\nDCBLOOP  XR   R4,R4                              THE VALUE IN REG. R3\n         IC   R4,0(R6)                           TO GET ADDRESS OF\n         CR   R4,R3                              A DCB TO BE USED\n         BNE  TRYPLUS1                           IN OPENING FILE.\n         ICM  R4,15,0(R6)\n         BALR R14,R8\n         BC   15,DCBOPEN\nTRYPLUS1 LA   R6,4(R6)                        ADD FOR NEXT 4 BYTES\n         BCT  R7,DCBLOOP\n         ABEND 999                            BAD NEWS...NO DCB????\nSETOLD   LA   R7,6\n         LA   R6,DCB1\n         LA   R8,MOVE2\n         B    DCBLOOP\n*\n*\nDCBOPEN  L    R4,56(R10)                 LOAD ADD(DD COUNT)\n         L    R3,0(R4)                   LOAD DD COUNT\n         C    R3,=F'6'                   MAX REACHED?\n         BE   BACKTO1                    YES, GO SET IT BACK\n         LA   R3,1(R3)                   NO, BUMP UP BY 1\n         B    *+8\nBACKTO1  LA   R3,1                       SET IT BACK TO 1\n         ST   R3,0(R4)                      AND STORE IT FSE BUFF.\n         L    R3,0(R10)                  GET TOPADD\n         L    R3,0(R3)\n         L    R4,4(R10)                  GET LASTADD\n         L    R4,0(R4)\n         AH   R4,SAVELREC                ADD LRECL\n         SLL  R2,8                       CLEAN UP BYTE\n         SRL  R2,8\nLOOPSAVE CR   R3,R4                      WRITE OUT RECORDS\n         BE   FINISHOK                      UNTIL LASTADD+LRECL\n         PUT  (R2),(R3)                     IS REACHED.\n         AH   R3,SAVELREC\n         B    LOOPSAVE\nFINISHOK CLOSE ((R2))                    CLOSE FILE\n         MVI  0(R9),X'01'                    AND MOVE SAVED MESSAGE\n         L    R10,52(R10)\n         MVC  0(9,R10),SAVEMSG6\n         MVC  9(43,R10),DSNAME\n*\n         B    RETURN                     RETURN TO FSE\nSAVEMSG6 DC   C'SAVED IN '\n         DS   0F\nMOVE1    MVC  X'3E'(2,R4),BLKSIZE        THIS ROUTINE IS BAL\"ED\n         MVC  X'52'(2,R4),LRECL             FOR OPENING A DCB\n         MVC  X'24'(1,R4),RECFM             FOR A NEW DATA SET\n         LR   R2,R4\n         OPEN ((R2),(OUTPUT))\n         BR   R14\nMOVE2    MVC  X'52'(2,R4),VTOCINFO+44    THIS ROUTINE IS BAL\"ED\n         MVC  X'3E'(2,R4),VTOCINFO+42       FOR OPENING A DCB\n         MVC  X'24'(1,R4),VTOCINFO+40       FOR A NEW DATA SET\n         LR   R2,R4\n         OPEN ((R2),(OUTPUT))\n         BR   R14\n         DS 0F\nALLOCDSN DC H'44'\nDSNAME   DC   56C' '\n         DS   0H\nMOVEDSN  MVC  DSNAME(0),0(R5)\nSAVEDSN  DC   55C' '\nCAT      CAMLST NAME,DSNAME,,CATINFO\nCATINFO  DS   0D\n         DC   300C' '\nVOLSER   DC   6C' '\n         DS   0F\nVTOC     CAMLST SEARCH,DSNAME,VOLSER,VTOCINFO\nVTOCINFO DS   200C\nMOVEIN   DS 0H\n         MVC  0(0,R3),DSNAME\nDATATYPE DC   X'00'\nHEXTABLE DC   X'400102030405060708090A0B0C0D0E0F10111213141516171819'\n         DC    X'1A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132'\n         DC    X'333435363738393A3B3C3D3E3F404142434445464748494A4B'\n         DC    X'4C4D4E4F505152535455565758595A5B5C5D5E5F6061626364'\n         DC    X'65666768696A6B6C6D6E6F707172737475767778797A7B7C7D'\n         DC    X'7E7F80C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6'\n         DC    X'D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8'\n         DC X'C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1'\n         DC X'E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FA'\n         DC X'FBFCFDFEFF'\n        DS  0F\nNEWMEMBE DC X'0008',6X'00'\n         DC AL4(ALLOCDSN)\nDDNAME   DC C'FSEFIL03'\n         DC 16C' '\nDA08BLK  DC  4X'00'\nDA08PQTY DC 4X'00'\nDA08SQTY DC 4X'00'\nDA08DQTY DC 4X'00'\nMEMBER   DC 8C' '\n         DC 8C' '\nDAIRFLAG DC 3X'00'\nDA08CTL  DC B'00000000'\n         DC 3X'00',X'40'\nLIST     DC 8C' '\n         DS 0F\n*\nDAPL     EQU *\nDAPLUPT  DS F\nDAPLECT  DS F\nDAPLECB  DC F'0'\nDAPLPSCB DS F\nDAPLDAPB DS F\n  DS 0D\nDOUBLE   DS  D\nATTRLIST DC X'0034'       ALLOCATE ATTRLIST\n         DC 4X'00'\n         DC B'01000000'\n         DC X'00'\n         DC  C'FSEATTR '\n         DC AL4(DAIRACB)\n*\n         DS  0D\nDAIRACB  DC 8X'00'\n         DC 6X'00'\n         DC X'80'\n         DC X'00'\n         DC 3X'00'\n         DC 3X'00'\n         DC 2X'00'\n         DC X'10'\n         DC X'40'\nBUFFLEN  DC H'0'\n         DC B'00100000'\n         DC 7X'00'\nRECFM    DC X'00'\n         DC X'80'\nBLKSIZE  DC H'00'\nLRECL    DC H'0'\n         DC X'50'\n         DC 4X'00'\n         DS  0F\nSAVELREC DC  H'0'\nFSEDCB1 DCB DDNAME=FSEFIL01,MACRF=PM,DSORG=PS\nFSEDCB2 DCB DDNAME=FSEFIL02,MACRF=PM,DSORG=PS\nFSEDCB3 DCB DDNAME=FSEFIL03,MACRF=PM,DSORG=PS\nFSEDCB4 DCB DDNAME=FSEFIL04,MACRF=PM,DSORG=PS\nFSEDCB5 DCB DDNAME=FSEFIL05,MACRF=PM,DSORG=PS\nFSEDCB6 DCB DDNAME=FSEFIL06,MACRF=PM,DSORG=PS\n*\nNEWFLAG DS X\n        DS  0F\nDCB1 DC  X'01',AL3(FSEDCB1)\nDCB2 DC  X'02',AL3(FSEDCB2)\nDCB3 DC  X'03',AL3(FSEDCB3)\nDCB4 DC  X'04',AL3(FSEDCB4)\nDCB5 DC  X'05',AL3(FSEDCB5)\nDCB6 DC  X'06',AL3(FSEDCB6)\n     DS  0F\nSAVE DS  18F\n   END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSESYSCD": {"ttr": 2564, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*    THIS ROUTINE IS LINKED FROM MAIN DRIVER \"FSE\" WHEN AN ABEND\n*    CONDITION OCCURRED (FROM ROUTINE \"TOPABEND\" ).\n*    TWO ADDRESSES ARE PASSED: A) IN REG. R5 THE ADDRESS OF THE\n*    SDWA FIELD WHERE THE ABEND CODE IS SAVED (AT +5)\n*    B) IN REG. R6 THE ADDRESS OF THE RESPONSE FIELD OF \"FSE\"\n*    WHERE THE MESSAGE REPORTING THE ABEND IS MOVED.\n*\n*    THE ROUTINE CAN BE EXPANDED TO CHECK FOR USER ABENDS (AT SDWA +6)\n*    IF USER-WRITTEN PROGRAMS ARE INVOKED EXPLICITLY IN THE COMMAND\n*    FIELD OF \"FSE\".\n*    THIS VERSION ONLY CHECKS AND REPORTS SYSTEM ABENDS.\n*\n*\n*\n*    BRUNO LA LICATA      LVL 1.00   11 / 11 /77\n*    N.B.N.A.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nFSESYSCD CSECT\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n*\n         STM  14,12,12(13)  SAVE REGISTERS\n         LR   12,15\n         USING FSESYSCD,12      AND\n         ST   13,SAVE+4\n         LA   8,SAVE                 SET\n         ST   8,8(R13)\n         LR   R13,R8                     ADDRESSABILITY\n*\n*  R5 = ADDRESS(SDWA - ABEND RETRY RTN)\n*  R6 = ADDRESS(RESPONSE FIELD)\n*\n         LA   R8,SYSCODE1      R8 WILL HAVE THE ADDRESS OF\n         XR   R9,R9            THE CHARACTER WHERE THE EBCDIC\n         CLC  5(3,R5),=X'806000'  COMMAND NOT FOUND?\n         BNE  CHECKPA1            NO, CHECK FOR S0C4 FROM PA1\nS806     MVC  0(17,R6),=C'COMMAND NOT FOUND'\n         B    RETURN\nCHECKPA1 CLC  5(3,R5),=X'0C4000'  S0C4 FROM PA1 INTERRUPT?\n         BNE  ELSE                NO, GO FIND CODE\n         MVC  0(50,R6),=50C' '    YES, CLEAR RESPONSE FIELD\n         MVC  0(35,R6),PA1MSG\n         B    RETURN\nELSE     IC   R9,5(R5)         ABEND DIGIT WILL BE MOVED.\n         SRL  R9,4             R5 POINTS TO THE SDWA AREA FIELD\n         BAL  R10,CHANGE       WHERE THE ABEND CODE IS STORED.\n         LA   R8,SYSCODE2      R9 IS USED AS CARRIER OF THE VALUE\n         XR   R9,R9            OF EACH 4BITS OF ABEND CODE TO\n         IC   R9,5(R5)         COMMON ROUTINE \"CHANGE\".\n         SLL  R9,28\n         SRL  R9,28\n         BAL  R10,CHANGE\n         LA   R8,SYSCODE3\n         XR   R9,R9\n         IC   R9,6(R5)\n         SRL  R9,4\n         BAL  R10,CHANGE\n         MVC  0(17,R6),ABENDMSG\nRETURN   L    R13,4(R13)\n         LM   R14,R12,12(R13)\n         BR   R14\n*\nABENDMSG DC   C'SYSTEM ABEND S'\nSYSCODE1 DS   C\nSYSCODE2 DS   C\nSYSCODE3 DS   C\nPA1MSG   DC   C'PLEASE DO NOT USE PA1 INTERRUPT KEY'\n         DS   0F\nSAVE     DS   18F\nDOUBLE   DS   D\n*\n         DS   0H\nCHANGE   CH   R9,=H'9'          THIS ROUTINE WILL CONVERT\n         BH   HIGHER            EACH 4 BIT VALUE OF THE ABEND\n         CVD  R9,DOUBLE         CODE STORED IN R9 TO A DIGIT\n         UNPK 0(1,R8),DOUBLE(8) WHICH WILL BE MOVED IN THE\n         OI   0(R8),X'F0'       RESPONSE FIELD OF \"FSE\".\n         BR   R10\nHIGHER   CH   R9,=H'10'\n         BNE  B\n         MVI  0(R8),C'A'\n         BR   R10\nB        CH   R9,=H'11'\n         BNE  C\n         MVI  0(R8),C'B'\n         BR   R10\nC        CH   R9,=H'12'\n         BNE  D\n         MVI  0(R8),C'C'\n         BR   R10\nD        CH   R9,=H'13'\n         BNE  E\n         MVI  0(R8),C'D'\n         BR   R10\nE        CH   R9,=H'14'\n         BNE  F\n         MVI  0(R8),C'E'\n         BR   R10\nF        MVI  0(R8),C'F'\n         BR   R10\n*\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "FSETSO": {"ttr": 2567, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*   THIS ROUTINE IS LINKED FROM MAIN DRIVER \"FSE\" WHEN A COMMAND\n*   WAS ENTERED THAT WAS FOUND TO BE A NON-FSE SUBCOMMAND.\n*   THE FIELD WHERE THE COMMAND WAS ENTERED IS SCANNED FOR VALIDITY\n*   AND IF A VALID COMMAND NAME WAS ENTERED, A LINK IS ISSUED\n*   FOR IT.  S806 ABENDS WILL BE PROCESSED BY THE \"ABEND01\" CSECT\n*   IN \"FSE\" IF A NON-FOUND CONDITION IS TRUE.\n*\n*   AT ENTRY R7 POINTS TO THE FIELD WHERE THE COMMAND WAS ISSUED,\n*   AND R8 POINTS TO C.P.P.L. LIST WHICH IS PASSED TO THE COMMAND\n*   TO BE INVOKED VIA R1.\n*\n*   WHEN CONTROL IS RETURNED FROM THE LINKED -SUBCOMMAND- , THE\n*   SCREEN IS CLEARED  AND A TGET IS ISSUED TO ALLOW USER TO\n*   RETURN TO \"FSE\" BY PRESSING ENTER.\n*\n*   BRUNO LA LICATA         LVL 1.00     11 / 11 / 77\n*   N.B.N.A.\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nFSETSO   CSECT\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\n*\n         STM  R14,R12,12(R13)     SAVE\n         LR   R12,R15\n         USING FSETSO,12              REGISTERS\n         ST   R13,SAVE+4\n         LA   R5,SAVE                       AND SET\n         ST   R5,8(R13)\n         LR   R13,R5                               ADDRESSABILITY\n         MVC COMMAND(76),=76C' '      CLEAR COMMAND NAME\n         MVC LINKEP(8),COMMAND        CLEAR MODULE NAME\n*\n*  R7 =ADDRESS(INPUT LINE AT START OF COMMAND)\n*  R8 =ADDRESS(CPPL)\n*\n         TCLEARQ OUTPUT                   CLEAR OUT Q\n         TPUT    CLEAR,8,FULLSCR,HOLD     CLEAR SCREEN\n*\n         LR   R9,R7     SAVE BEGINNING ADDR.\n         LA   R10,76    MAX SCAN LENGTH\n         XR   R4,R4\nTSOLOOP1 CLI  0(R7),C' '                  SCAN FOR\n         BE   CHECKLEN                      END\n         LA   R7,1(R7)                         OF\n         LA   R4,1(R4)                           COMMAND\n         BCT  R10,TSOLOOP1                           NAME\nCHECKLEN C    R4,=F'8'                 LENGTH LARGER THAN MAX?\n         BNH  LENGTHOK                 NO, OK\n         TPUT LENGTHMS,20              YES, ISSUE MESSAGE\n         B    RETURN                        AND RETURN TO FSE\nLENGTHOK BCTR R4,0                     MOVE\n         EX   R4,MOVENAME                  COMMAND\n         B    *+10                             NAME\nMOVENAME MVC  LINKEP(0),0(R9)                     TO AREA\n         LA   R4,1(R4)                 LOAD BACK FOR THE EX BCTR\n         STH  R4,COMMLEN               SAVE LENGTH\n         XR   R4,R4\nTSOLOOP2 CLC  0(5,R7),=5C' '           SCAN FOR END OF PARM\n         BE   NOSECOND                 IF SO, SKIP PROCESSING\n         CLI  0(R7),C' '               BYPASS\n         BNE  READPARM                    BLANKS\n         LA   R7,1(R7)                       FOR A\n         LA   R4,1(R4)                         LENGTH\n         BCT  R10,TSOLOOP2                         OF < 5\nNOSECOND MVC  BLANKLEN(2),=H'0'        ONLY COMMAND NAME SPECIFIED\n         MVC  SUBPARML(2),BLANKLEN     SAVE LENGTHS OF ZEROES\n         B    COMPUTE                  GO MAKE UP FAKE C.B.\nREADPARM STH  R4,BLANKLEN              SAVE LENGTH OF MIDDLE BLANKS\n         XR   R4,R4\nTSOLOOP3 CLC  0(5,R7),=5C' '           END OF PARMS?\n         BE   ENDOFPRM                 YES\n         LA   R7,1(R7)                 NO, KEEP LOOKING\n         LA   R4,1(R4)                     AND ADDING\n         BCT  R10,TSOLOOP3\nENDOFPRM STH  R4,SUBPARML              THIS SECTION WILL USE\nCOMPUTE  LH   R4,COMMLEN               THE  LENGTHS OF 1)COMMAND\n         AH   R4,BLANKLEN              NAME 2)BLANKS FROM END OF\n         STH  R4,PARMOFFS              COMMAND NAME TO START OF\n         AH   R4,SUBPARML              SUBPARAMETERS IN ORDER TO\n         LA   R4,4(R4)                 MOVE THE LENGTHS IN A FAKE\n         STH  R4,TOTLEN                COMMAND BUFFER TO BE USED\n         SH   R4,=H'4'                 IN PASSING C.P.P.L. VALUES\n         BCTR R4,0                     TO PROGRAM.\n         EX   R4,MOVEALL\n         B    *+10\nMOVEALL  MVC  COMMAND(0),0(R9)         MOVE FIELDS IN FAKE C.B.\n         LM   R2,R5,0(R8)              STORE ALL C.P.P.L. VALUES\n         STM  R2,R5,CB                 EXCEPT C.B.\n         LA   R2,FAKECB                USE FAKE ONE\n         ST   R2,CB                       TO STORE IT AS\n         LA   R1,CPPL                         PARMS IN R1\n         LINK EPLOC=LINKEP             LINK MODULE\n         TPUT PROMPT,28\n         TCLEARQ INPUT                 WAIT FOR USER TO PRESS\n         TGET COMMAND,1                ENTER TO RETURN BACK\n*\n*\nRETURN   L    R13,4(R13)               TO \"FSE\".\n         LM   R14,R12,12(R13)\n         BR   R14\nPROMPT   DC   C'PRESS ENTER TO RETURN TO FSE'\n         DS   0F\nSAVE     DS   18F\nCLEAR    DC   X'C11140403C404000'\nFAKECB   DS   0F\nTOTLEN   DS   H\nPARMOFFS DS   H\nCOMMAND  DC   76C' '\n         DS   0H\nCOMMLEN  DS   H\nBLANKLEN DS   H\nSUBPARML DS   H\nLINKEP   DC   8C' '\nLENGTHMS DC   C'INVALID COMMAND NAME'\nCPPL     DS   0F\nCB       DS   F\nUPT      DS   F\nPSCB     DS   F\nECT      DS   F\n*\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IGC0024H": {"ttr": 2570, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*   THIS SVC (248 TYPE 4) IS USED IN F.S.E. EDITOR TO\n*    A) GIVE ISSUING CODE KEY ZERO SUPERVISOR MODE ABILITY\n*       IN ORDER FOR \"FSEPRTY\" MODULE TO EXECUTE\n*    B) WITH ENTRY REGISTER 1 =X'FFFFFFFF' TO EXECUTE\n*       TCAM REPOSITIONING CODE TO BYPASS CURSOR JUMPING.\n*       NOTE: IT IS ONLY ISSUED FOR THE LATTER FUNCTION\n*       IN A NON-MVS ENVIRONMENT.(SEE REASONS IN PROLOGUE\n*       IN MODULE \"FSE\")\n*\n*    THIS SVC (248) IS A TYPE 4 DISABLED.\n*\n*           LVL 1.00  01/21/80      BRUNO LALICATA CITIBANK\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\nR0       EQU  0\nR1       EQU  1\nR2       EQU  2\nR3       EQU  3\nR4       EQU  4\nR5       EQU  5\nR6       EQU  6\nR7       EQU  7\nR8       EQU  8\nR9       EQU  9\nR10      EQU  10\nR11      EQU  11\nR12      EQU  12\nR13      EQU  13\nR14      EQU  14\nR15      EQU  15\nIGC0024H CSECT\n         ENTRY IGC0024H\n*\n         USING IGC0024H,R6            R6 HAS ENTRY ADDRESS\n         C     R1,FF                  TCAM FLAG?\n         BE    TCAMCODE               YES, GO EXECUTE\n         STC   R0,0(R15)              NO, ZAP JSCB\n         BC    15,RETURN              RETURN TO ISSUER\nTCAMCODE L     5,16                   A(CVT)\n         L     5,0(5)                 A(OLD/NEW TCB)\n         L     5,4(5)                 A(MYTCB)\n         L     5,180(5)               A(MY JSCB)\n         MVC   TJID(2),268(5)         SAVE TJID\n         L     R2,16                  ADD(CVT)\n         L     R2,X'F0'(R2)           ADD(ADD(TCAM AVT))\n         L     R2,0(R2)               ADD(TCAM AVT)\n         ICM   R2,15,424(R2)          ADD(TERMNAME TABLE)\n         LH    R3,44(R2)              NUMBER OF TERMINALS GENNED IN MCP\n         LA    R4,82(R2)              POINT TO OFFSET FOR ENTRIES: EACH\n         XR    R5,R5                    ENTRY HAS NAME + ADDRESS OF QCB\n         IC    R5,40(R2)              LENGTH OF EACH TERMINAL NAME\nLOOP     LR    R7,R4                  SAVE BEGGINNING ADDRESS\n         AR    R7,R5                  ADD THE LENGTH OF NAME\n         BCTR  R7,0                   SUBTRACT FOR 4 BYTE LOAD\n         L     R7,0(R7)               ADD(TERMINAL TABLE ENTRY)\n         L     R7,0(R7)               ADD(DESTINATION QCB FOR CRT)\n         CLC   30(2,R7),TJID          CHECK TO SEE IF THIS IS RIGTH\n         BNE   GETNEXT                  TERMINAL BY MATCHING TJID\"S\n*                                     NO, GO GET NEXT DEST. QCB\n*        TPUT  CLEARSCR,8,FULLSCR,HOLD  YES, CLEAR SCREEN\n         MVI   21(R7),X'00'           MOVE 0 TO CARRIAGE COUNT BYTE\n         BC    15,RETURN              GOOD WORK..RETURN TO BASE...\n*\nGETNEXT  AR    R4,R5                  ADD TERMINAL NAME LENGTH\n         LA    R4,3(R4)               ADD 3 BYTES FOR QCB ADDRESS\n         BCT   R3,LOOP                GO SCAN AGAIN FOR NEXT QCB\n*\nRETURN   BR    R14                    RETURN TO SVC ISSUER\n*\nCLEARSCR DC   X'C11140403C404000'     THIS IS DC FOR SCRREN CLEAR\nTJID     DS   H\nID       DC   7C' '\n         DS   0F\nFF       DC   X'FFFFFFFF'\n*\n         END  IGC0024H\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INSTALL": {"ttr": 2573, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": " PLEASE READ THIS INSTALLATION DOCUMENTATION CAREFULLY BEFORE DOING\n  ANYTHING.\n THESE ARE THE STEPS TO BE FOLLOWED IN INSTALLING THIS 3270-II FULL\n  SCREEN EDITOR ON YOUR SYSTEM. (THIS SOFTWARE WILL WORK WITH OPERATING\n  SYSTEMS FROM MVT TO MVS...BUT KEEP IN MIND THE DEPENDENCIES DESCRIBED\n  BELOW).\n\n 1)  FSE HAS ONE MODULE THAT IS OPTIONAL AND ONLY USED IF RUNNING\n     MVS. NO CONCERN SHOULD BE MADE ABOUT THIS, SINCE THE CODE WILL\n     HANDLE IT, BUT TWO CONSIDERATIONS SHOULD BE NOTED:\n     \"FSE\" WILL FIND OUT IF THE OPERATING SYSTEM IS DRIVEN BY MVS..\n     IF SO, IT WILL OS/LINK MODULE \"FSEPRTY\" TO ALTER THE DISPATCHING\n     PRIORITY OF THE ADDRESS SPACE FROM DEFAULT TO 240 AND TAKE IT\n     OUT OF APG. THIS IS DONE TO GIVE SECOND AND THIRD IPS INTERVALS\n     SUPER RESPONSE BACK AT THE TUBE.\n     ONE CONSIDERATION IS THE VALUE OF THIS NEW DISPATCHING PRTY OF\n     240 WITH YOUR JOB MIX: KEEP IT THIS HIGH IN AN ENVIRONMENT\n     WITH A LOT OF CPU HOGS IN THE SYSTEM AND LITTLE OR MEDIUM\n     I/O UTILIZATION, DECREASE DOWN TO 200 FOR MEDIUM CPU AND HIGH\n     I/O UTILIZATIONS. (THIS WAS MONITORED BY \"RMF\" AND \"RESOLVE\"\n     FIND HAPPY MEDIUM WITHOUT LOSING TSO RESPONSE UNDER FSE).\n  *  THE OTHER CONSIDERATION IS ONLY THINKABLE IF YOU HAVE A LOTTA\n     MEGS ON YOUR CPU TO HANDLE THE EXTRA PAGING IT WILL RESULT IN.\n     IF YOU SO CHOOSE, YOU CAN AUTOMATICALLY MAKE YOUR ADDRESS\n     SPACE NON-SWAPPABLE AND THE BACK SWAPPABLE UPON ENTERING\n     AND LEAVING THE FSE SESSION. THIS WILL RESULT IN IMPROVED\n     RESPONSE TIME AND CERTAINLY QUICKER EDITS.\n  *  KEEP IN MIND IT DEPENDS ON YOUR STORAGE CONSTRAINS AND JOB MIX.\n     TO GIVE YOU AN INITIAL IDEA, YOU SHOULD USE IT WITH MACHINE\n     RUNNING 10 BATCH, 5 STARTED TASKS, 10-20 TSO USERS ON FOUR\n     MEGABYTES.\n  *  BOTH THE NEW PRIORITY AND THE SWAPPABILITY OPTIONS ARE HARDCODED\n     IN MODULE \"FSE\", LOADED ON REGISTER 2 JUST BEFORE ISSUING\n     AN OS/LINK TO \"FSEPRTY\"  ----  LINK  EP=FSEPRTY -----\n     THERE ARE ONLY TWO PLACES IN THE SOURCE OF \"FSE\"  WHERE THIS\n     MODULE IS LINKED, THEREFORE IT SHOULD BE NO PROBLEM FINDING IT.\n     THE FIRST TIME IT IS CALLED WITH REG 2 =X'800000F0' WHICH MEANS\n     A) HIGH BIT ON = NONSWAPPABLE\n     B) NEW PRIORITY OF 240\n     THE SECOND TIME IT IS CALLED WITH REG 2 =F'126' WHICH MEANS\n     A) HIGH BIT OFF = SWAPPABLE AS USUAL\n     B) NORMAL PRIORITY OF 126\n\n  *  MAKE THE NECESSARY CHANGES ACCORDING TO YOUR SYSTEM.\n\n2)  ASSEMBLE & LINK MODULES FSEATTR,FSECHANG,FSEFREE,FSEPRTY,\n                            FSESAVE,FSESYSCD,FSETSO\n    INTO ANY UNAUTHORIZED LINKLIST DATA SET (OR STEPLIBED TO IN\n    LOGON PROC)  NONREENTRANT, NONREUSABLE AS STANDALONE MODULES.\n\n2A) ASSEMBLE & LINK FSEPFKEY ANYWHERE.\n\n2B) ASSEMBLE AND LINK FSE INTO A LINKLIST DATA SET AND LINK IT WITH\n    PREVIOUSLY ASSEMBLED-LINKED MODULE FSEPFKEY, NORENT, NOREUS.\n\n****** ESSENTIALLY, THE FINAL PRODUCT IS A MAIN MODULE \"FSE\" WITH ****\n****** A SUBROUTINE LINKED IN IT, AND SEVEN (7) SEPARATE MODULES  ****\n****** IN THE LINKLIST DATA SET.                                  ****\n\n2C) COPY MEMBER \"FSEHELP\" INTO \"SYS1.HELP(FSE)\" TO HAVE THE HELP\n   COMMAND AVAILABLE.\n\n3) MODULES \"FSE\" AND \"FSESAVE\" ARE INSTALLATION DEPENDENT FOR THE\n   \"SUBMIT\" SUBCOMMAND. \"FSESAVE\" PERFORMS BOTH THE \"SAVE\" AND THE\n   \"SUBMIT\" FUNCTIONS. IF IT IS A SUBMIT, IT FORCES AN ALLOCATION\n   ON A PREDESCRIBED SCRATCH PACK THAT SHOULD BE INITIALIZED TO\n   YOUR INSTALLATION CONFIGURATION. UPON RETURN TO \"FSE\" THE\n   TEMPORARY DATA SET ALLOCATED BY FORCE ON A SCRATCH PACK IS\n   DELETED, AGAIN BY A VOLSER HARDCODED IN THE SOURCE. THIS IS\n   TO PREVENT TOO MUCH ACCESS BY FSE ON MULTI-TSOPACK CONFIGURATIONS.\n\n   JUST HARDCODE A VOLSER ON THE PARM LIST OF THE SCRATCH MACRO\n   (THE ONLY ONE) IN MODULE \"FSE\" AND IN THE HOUSECLEANING\n   BEGGINNING SECTION OF MODULE \"FSESAVE\". (THE VALUE IN THE VANILLA\n   CODE IS \"IMG038\")\n\n3A) THIS FULLSCREEN EDITOR IS ACCESS METHOD INDEPENDENT (TGET/TPUT),\n   BUT A FEATURE HAS BEEN INCORPORATED TO EASE THE OPERATION\n   UNDER TCAM TO BYPASS THE JUMPING OF THE CURSOR TO THE NEXT\n   LINE UPON ISSUING A TGET (AN OLD PAIN IN THE REAR).\n   MODULE  \"FSE\" WILL SEE IF YOU ARE RUNNING VTAM; IF SO IT KEEPS\n   GOING NORMALLY. IF YOU ARE RUNNING TCAM WITH OPERATING SYSTEMS\n   OTHER THAN MVS, THE CODE WILL ISSUE A TYPE 4 SVC, NAMELY\n   248 (IGC0024H) TO REPOSITION THE TCAM TERMINAL QCB CURSOR TO (0,0)\n   SO AS TO ALLOW FOREIGN MESSAGES AS OPERATOR OR JOB-END NOTIFYS\n   TO DISPLAY ON THE \"UNUSED\" TOP LINE OF THE SCREEN WITHOUT\n   LOSING IT.\n   THIS SVC IS ALSO USED BY MODULE \"FSEPRTY\" FOR KEY ZERO SERVICE,\n   THEREFORE BOTH VTAM AND TCAM USERS SHOULD ASSEMBLE AND LINK\n   IGC0024H (OR YOUR OWN NUMBER) INTO SYS1.LPALIB. REMEMBER TO ALSO\n   CHANGE THE SVC NUMBER TO YOUR OWN AROUND LABEL \"READSCR\" IN\n   MODULE \"FSE\" AND AT BEGGINNING SECTION IN MODULE \"FSEPRTY\"\n   (IF YOU NEED TO), AND TO IPL SYSTEM WITH CLPA.\n\n4) WITH TCAM, MAKE SURE THE CUTOFF MACRO IN THE INHDR PART OF THE\n    TSO MESSAGE HANDLER IS 2100 OR GREATER (ALSO IN NCP IF USED)\n   WITH VTAM USE ENOUGH BUFFERS AND BUFSIZE TO ACCOMMODATE 2100 BYTES\n   TO SKIP ANY CHAINING THAT CAN SLOW YOU DOWN.\n\n5) MODIFY \"SYS1.PARMLIB(IKJPRMXX)\" UNDER TCAM OR\n   \"SYS1.PARMLIB(TSOKEY00)\" TO ALLOW FULL SCREEN SUPPORT BY\n   INCREASING OWAITHI AND INLOCKHI TO 24 ELSE FSE WILL NOT BE\n   ABLE TO READ OR WRITE FULL SCREENS OF DATA.\n   ALSO (MVT,SVS) MAKE SURE YOUR TSO REGIONS SIZE IN IKJPRMXX\n   IS LARGE ENOUGH FOR REQUIRED GETMAINS...(REGSIZE=600K\n   IS TYPICAL FOR PROGRAM SIZES OF 5000 LINES LRECL 80).\n\n6) REMEBER, FSE WAS DESIGNED AND WRITTEN TO DRAW CIRCLES AROUND\n   OTHER MANUFACTURER\"S FULL SCREEN EDITORS IN PERFORMANCE.\n   BE SURE ALL THOSE DETAILS ABOVE ARE FOLLOWED TO GAIN 100%\n   OF ITS CAPABILITIES.\n\n   ANY QUESTIONS OR PROBLEMS FEEL FREE TO CALL ME (BRUNO LALICATA)\n   AT CITIBANK IN DOWNTOWN NEW YORK AT (212) 558-7262.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT207/FILE207.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT207", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}