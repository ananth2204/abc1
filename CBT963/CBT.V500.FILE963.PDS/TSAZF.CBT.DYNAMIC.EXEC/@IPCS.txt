/***************************** REXX ***********************************

 This REXX allocates the IPCS Libraries, sets up the IPCS Options, and
      then starts IPCS. It will automatically

                           --- EXAMPLE ---
TSO <%>IPCS DSName <HLQ(HCD_HLQ)> <TEST(TraceOption)>
TSO <%>IPCS -H -- To display help for this REXX

  Arguments: DSName      - Dump Dataset to open on start.
                           "." is treated as Blank
             InParms     - Non-Positional parameters
 ----------------------------- NP-PARMS -------------------------------
                     HLQ - HLQ to add to HCD DSNs.    default: blank
                    TEST - Used to control traces

      Files: Used with SYSDUMP.** and SYS1.SADMP Datasets
Other EXECS: Can be called from SYSDUMP Listing REXX

EXEC History

 REXX EXEC Name: IPCS
         Author: FERGUSON AL (TSAZFA) from version 1.35
                 FERGUSON AL (HUL2353)
         Writen: 15MAY07
        History: 06FEB17 - v1.39 - Pick up updated version or ERRINFO
                           Common Code routines.
                 01FEB17 - v1.38 - Mass update to pickup Error
                           Handling Fixes.
                 31JAN17 - v1.37 - Update all REXXes with latest
                           common routines via %CCMASS
                 07OCT15 - v1.35 - Remove JES3 DSNs & Msg, add
                           JES2 DSNs, & convert MVS Version to use REXX
                           Function MVSVAR('SYSMVS').
                 08MAR11 - v1.26 - Add JES3 Panels to IPCS
                           Concatination
                 29JUL10 - v1.22 - Change DynaSTEP to ISPLLIB
                           LIBDEF and TSO ALLOCs to BPXWDYN ALLOCs.
                 18AUG09 - v1.19 - Add support for IPCSPARM DD.
                 06AUG08 - v1.17 - Changes to support using @IPCS
                           from multiple Images at the same time.
                 12NOV07 - v1.12 - Better support for passed parms.
                 15MAY07 - v1.0

***************************** Rexx ***********************************/
MsgStat = MSG("OFF")
ARG DsName InParms                           /* Place arguments here */

IF WORDPOS(DsName,'-h -H') > 0 THEN CALL DISPLAY_HELP
IF ABBREV(DsName,'.')          THEN DsName = ""
IF ABBREV(DsName,'HLQ(')       THEN DO
    InParms = DsName InParms; DsName = ""
END
CALL INITIALIZE_THIS_REXX
/* COPY ERRINIT */
/********************************************************************** /*COPY*/
              Initialize ERROR handling                                 /*COPY*/
***********************************************************************//*COPY*/
CALL ON ERROR     NAME ERROR_PROC   /* On RCs > 0 CALL ERROR_PROC     *//*COPY*/
SIGNAL ON HALT    NAME CLEANUP      /* Cleanup before exiting on HALT *//*COPY*/
SIGNAL ON SYNTAX  NAME ERROR_PROC   /* On REXX Syntax Error GOTO ...  *//*COPY*/
SIGNAL ON NOVALUE NAME ERROR_PROC   /* On uninitialized variable GOTO *//*COPY*/
ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"  /* Is ISPEXEC available?       *//*COPY*/
IF RC = 0 THEN DO                   /* Yes, then allow REXX to handle *//*COPY*/
   ok='0';ADDRESS "ISPEXEC" "CONTROL ERRORS RETURN"   /* ISPF errors  *//*COPY*/
END                                                                     /*COPY*/
                                                                        /*COPY*/
TRACE (TEST)
ok='0'
  x = BPXWDYN("ALLOC DD(IPCSPRNT) SYSOUT(K) REUSE")
  IF IPCSPARM ¬= "" THEN x = BPXWDYN("ALLOC DD(HCDMLOG) DSN("IPCSPARM")",
                                     "SHR REUSE")
  ADDRESS "TSO" "ALTLIB ACTIVATE APPLICATION(EXEC) DSN("SBLSCLI0")"
  ADDRESS "ISPEXEC" "LIBDEF ISPSLIB DATASET ID("SBLSKEL0") STACK"
  IF SBLSLIB0 ¬= "" THEN ADDRESS "ISPEXEC",
                    "LIBDEF ISPLLIB DATASET ID("SBLSLIB0") STACK"
  ADDRESS "ISPEXEC" "LIBDEF ISPMLIB DATASET ID("SBLSMSG0") STACK"
  ADDRESS "ISPEXEC" "LIBDEF ISPPLIB DATASET ID("SBLSPNL0") STACK"
  ADDRESS "ISPEXEC" "LIBDEF ISPTLIB DATASET ID("SBLSTBL0") STACK"

  CALL ALLOCATE_DUMP_DIRECTORY
  CALL SET_IPCS_DEFAULTS
  ADDRESS "ISPEXEC" "SELECT PGM(BLSG) NEWAPPL(BLSG) PASSLIB",
                    "PARM(PGM(BLSGSCMD) PARM(EXEC" START_REXX"))"

  x = BPXWDYN("FREE DD(IPCSDDIR)")
  ADDRESS "ISPEXEC" "LIBDEF ISPSLIB"
  IF SBLSLIB0 ¬= "" THEN ADDRESS "ISPEXEC" "LIBDEF ISPLLIB"
  ADDRESS "ISPEXEC" "LIBDEF ISPMLIB"
  ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"
  ADDRESS "ISPEXEC" "LIBDEF ISPTLIB"
  ADDRESS "TSO" "ALTLIB DEACTIVATE APPLICATION(EXEC)"
  IF IPCSPARM ¬= "" THEN x = BPXWDYN("FREE DD(HCDMLOG)")
  x = BPXWDYN("FREE DD(IPCSPRNT)")

MsgStat = MSG(MsgStat)
EXIT ExitError
/***************************** REXX ***********************************
                            END of REXX
****************************** REXX ***********************************
                       Beginning of PROCEDURES
****************************** REXX ***********************************/
/**********************************************************************
     This Initializes any variables needed for this REXX
***********************************************************************/
INITIALIZE_THIS_REXX:
  TRUE = 1; FALSE = 0  /* REXX functional values for TRUE and FALSE   */
                       /* Initialize and process non-positional parms */
  ValidParms = "HLQ() TEST(O)"
  MatchLength = 4      /* NP-Parms match on first # chars             */
  AcceptAll = FALSE    /* Allow un-recognized NP-PARMS to be passed   */
  IF ValidParms ¬= '' THEN CALL DO_NP_PARMS

  NbrSubmited = 0
  SYSUID = USERID()
  UserPrefix = LEFT(SYSUID,4)
  ExitError = 0; SqlError = 0
  SYSMSGLVL1 = ""; SYSMSGLVL2 = ""
  Lower = "abcdefghijklmnopqrstuvwxyz"
  Upper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"

  IF HLQ = "" THEN DO
      SBLSCLI0 = "'SYS1.SBLSCLI0'"
      SBLSKEL0 = "'SYS1.SBLSKEL0'"
      SBLSLIB0 = ""
      SBLSMSG0 = "'SYS1.SBLSMSG0'"
      SBLSPNL0 = "'SYS1.SBLSPNL0' 'SYS1.SHASPNL0'"
      SBLSTBL0 = "'SYS1.SBLSTBL0'"
      IPCSPARM = "'SYS1.SHASPARM'"
    END
  ELSE DO
      SBLSCLI0 = "'"HLQ".SYS1.SBLSCLI0'"
      SBLSCLI0 = "'"HLQ".SYS1.SBLSCLI0'"
      SBLSKEL0 = "'"HLQ".SYS1.SBLSKEL0'"
      SBLSLIB0 = "'"HLQ".SYS1.MIGLIB' '"HLQ".SYS1.LINKLIB'"
      SBLSMSG0 = "'"HLQ".SYS1.SBLSMSG0'"
      SBLSPNL0 = "'"HLQ".SYS1.SBLSPNL0' '"HLQ".SYS1.SHASPNL0'"
      SBLSTBL0 = "'"HLQ".SYS1.SBLSTBL0'"
      IPCSPARM = "'"HLQ".SYS1.PARMLIB'"
  END
  START_REXX = STRIP(WORD(SBLSCLI0,1),"T","'")"(BLSCALTL)'"

RETURN
/* COPY DISHELP */
/********************************************************************** /*COPY*/
            This PROCEDURE displays the Help information in             /*COPY*/
                 this REXX's HEADER when invoked.                       /*COPY*/
***********************************************************************//*COPY*/
DISPLAY_HELP: PROCEDURE                                                 /*COPY*/
ARG ExitOrReturn .                                                      /*COPY*/
  DO i = 1 TO SOURCELINE() UNTIL SOURCELINE(i + 2) = 'EXEC History'     /*COPY*/
     source.i = SOURCELINE(i + 1)   /* Read in HELP from EXEC         *//*COPY*/
  END                                                                   /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  IF RC ¬= 0 THEN DO i = 1 TO i; SAY source.i; END /* No ISPF, so SAY *//*COPY*/
  ELSE DO              /* ISPF available, use TBDISPL to display help *//*COPY*/
     PARSE SOURCE . . rname .       /* Get REXX EXEC name             *//*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCREATE RHELP02 NAMES(source) NOWRITE"  /*COPY*/
     DO i = 1 TO i     /* Build HELP table to display                 *//*COPY*/
        source = source.i; ADDRESS "ISPEXEC" "TBADD RHELP02"            /*COPY*/
     END                                                                /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBTOP RHELP02"                           /*COPY*/
     ZTDMARK = CENTER("----> END of Help <----",80)                     /*COPY*/
     ok='0 4 8';ADDRESS "ISPEXEC" "TBDISPL RHELP02 PANEL(RHELP02)"      /*COPY*/
     ok='0';ADDRESS "ISPEXEC" "TBCLOSE RHELP02"                         /*COPY*/
  END                                                                   /*COPY*/
                      /* Stay inside current EXEC or EXIT             *//*COPY*/
IF ABBREV('RETURN',ExitOrReturn,3) THEN RETURN                          /*COPY*/
   ELSE EXIT 0                                                          /*COPY*/
/* COPY NPPARMS */
/********************************************************************** /*COPY*/
            Initialize and process Non-Positional Parms in a            /*COPY*/
                method similar to that of CLISTs                        /*COPY*/
    NOTE: If you use parentheses in the initizing of a NP-Parms, do     /*COPY*/
          not follow any internal ')' with spaces!!                     /*COPY*/
**********************************************************************/ /*COPY*/
DO_NP_PARMS:                                                            /*COPY*/
  VpList = ValidParms ' '; InList = InParms ' '                         /*COPY*/
  ParmList = ''; ParmErrorList = ''                                     /*COPY*/
                                                                        /*COPY*/
  DO linx = 1 TO WORDS(ValidParms) UNTIL VpList = ''                    /*COPY*/
     PARSE VALUE VpList WITH parm.linx '(' ParmVal.linx ') ' VpList     /*COPY*/
     ParmList = ParmList STRIP(LEFT(parm.linx,MatchLength))             /*COPY*/
  END                                                                   /*COPY*/
  DO WHILE INDEX(InList, '(') > 0                                       /*COPY*/
     PARSE VALUE InList WITH parm '(' value ') ' InList                 /*COPY*/
     UPPER parm            /* Don't want to translate value to UPPER */ /*COPY*/
     parm = STRIP(parm)                                                 /*COPY*/
     ParmNumber = WORDPOS(STRIP(LEFT(parm,MatchLength)), ParmList)      /*COPY*/
     IF ParmNumber > 0 THEN ParmVal.ParmNumber = value                  /*COPY*/
     ELSE IF INDEX(value,")") > 0 THEN                                  /*COPY*/
          ParmErrorList = ParmErrorList parm"("value                    /*COPY*/
     ELSE ParmErrorList = ParmErrorList parm"("value")"                 /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN ParmErrorList ¬= '' & AcceptAll = TRUE          THEN           /*COPY*/
       AnythingElse = STRIP(InList) ParmErrorList                       /*COPY*/
    WHEN ParmErrorList ¬= ''                             THEN DO        /*COPY*/
       PARSE SOURCE . . rname .        /* Get REXX EXEC name          *//*COPY*/
       CALL SET_MSG 'Invalid Parameter(s)',,                            /*COPY*/
            "'"ParmErrorList"' not valid Parm(s) for" rname"!", "YES"   /*COPY*/
       EXIT 8                                                           /*COPY*/
      END                                                               /*COPY*/
  OTHERWISE                                                             /*COPY*/
      AnythingElse = STRIP(InList)                                      /*COPY*/
  END                                                                   /*COPY*/
  DO ParmInx = 1 TO linx                                                /*COPY*/
     SELECT                                                             /*COPY*/
       WHEN ABBREV(ParmVal.ParmInx, "&")                 |,             /*COPY*/
            ABBREV(ParmVal.ParmInx, "*")                 THEN           /*COPY*/
           INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"               /*COPY*/
       WHEN DATATYPE(ParmVal.ParmInx, "NUM")             THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN WORDPOS(ParmVal.ParmInx, "FALSE TRUE") > 0   THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
       WHEN (LEFT(ParmVal.ParmInx,1) = "'"               & ,            /*COPY*/
             RIGHT(ParmVal.ParmInx,1) = "'")             | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,':') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'*') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'%') > 0               | ,            /*COPY*/
            INDEX(ParmVal.ParmInx,'=') > 0               THEN           /*COPY*/
           INTERPRET parm.ParmInx "= ParmVal."ParmInx                   /*COPY*/
       WHEN INDEX(STRIP(ParmVal.ParmInx), " ") > 0       THEN           /*COPY*/
           INTERPRET parm.ParmInx "=" ParmVal.ParmInx                   /*COPY*/
     OTHERWISE                                                          /*COPY*/
        ADDRESS "MVS" "SUBCOM TSO"                                      /*COPY*/
        IF RC = 0 THEN TSO_avail = TRUE; ELSE TSO_avail = FALSE         /*COPY*/
        PARSE VALUE ParmVal.ParmInx WITH PDS_name '(' rest              /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN ¬(TSO_avail) | PDS_name = ""              THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN SYSVAR("SYSNEST") = 'YES'                 THEN           /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
          WHEN (INDEX(rest, ")") > 0                     &,             /*COPY*/
               (ABBREV(rest, "+") | ABBREV(rest,"-")     |,             /*COPY*/
                ABBREV(rest, "0)")))                     THEN           /*COPY*/
              INTERPRET parm.ParmInx "= '"ParmVal.ParmInx"'"            /*COPY*/
          WHEN (LISTDSI(ParmVal.ParmInx)           <= 4  | ,            /*COPY*/
                LISTDSI("'"ParmVal.ParmInx"'")     <= 4  | ,            /*COPY*/
                LISTDSI("'"PDS_name"'")            <= 4  | ,            /*COPY*/
                LISTDSI(PDS_name)                  <= 4) THEN           /*COPY*/
              INTERPRET parm.ParmInx "= ParmVal."ParmInx                /*COPY*/
        OTHERWISE                                                       /*COPY*/
              INTERPRET parm.ParmInx "=" ParmVal.ParmInx                /*COPY*/
        END                                                             /*COPY*/
     END                                                                /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/* COPY SETMSG */                                                       /*COPY*/
/********************************************************************** /*COPY*/
              Error with DSN, Use ISPF to display Error Message         /*COPY*/
***********************************************************************//*COPY*/
SET_MSG: PROCEDURE                                                      /*COPY*/
PARSE ARG ZERRSM, ZERRLM, ZERRALRM, ZERRHM, ZERRTP, ZERRWN .            /*COPY*/
  ok='*';ADDRESS "MVS" "SUBCOM ISPEXEC"                                 /*COPY*/
  SELECT                                                                /*COPY*/
   WHEN RC ¬= 0                   THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
   WHEN SYSVAR("SYSNEST") = 'YES' &,                                    /*COPY*/
        SYSVAR('SYSENV') = 'BACK' THEN DO                               /*COPY*/
      SAY ''; SAY ZERRSM ; SAY ZERRLM; SAY ''                           /*COPY*/
    END                                                                 /*COPY*/
  OTHERWISE                                                             /*COPY*/
      IF ABBREV('YES', ZERRALRM, 1) THEN ZERRALRM = 'YES'               /*COPY*/
         ELSE ZERRALRM = 'NO'                                           /*COPY*/
      IF ZERRHM    = ''    THEN ZERRHM   = 'ISR2MACR'                   /*COPY*/
      ok='0';ADDRESS "ISPEXEC" "SETMSG MSG(ISRZ003)"                    /*COPY*/
  END                                                                   /*COPY*/
RETURN                                                                  /*COPY*/
/***********************************************************/
/***************** allocate dump directory *****************/
/***********************************************************/
ALLOCATE_DUMP_DIRECTORY:
  IF HLQ = "" THEN
       ZOSVER = TRANSLATE(MVSVAR("SYSMVS"),"#",".")
  ELSE ZOSVER = HLQ
  IPCS_DSN = SYSUID".IPCS."ZOSVER".DDIR."MVSVAR("SYSNAME")

  STATUS = LISTDSI("'"IPCS_DSN"' RECALL")

  IF (SYSREASON = 5) THEN DO /* NOT CATALOGED */
      ADDRESS "TSO" "DEF",
              "CLUSTER(NAME('"IPCS_DSN"') IX RUS SHR(1 3))",
              "DATA(NAME('"IPCS_DSN".DATA') KEYS(128 0) RECSZ(384 3072)",
                          "CISZ(4096) CYLINDERS(3 2))",
              "INDEX(NAME('"IPCS_DSN".INDEX') CYLINDERS(1 1))"
      ADDRESS "TSO" "IPCSDDIR '"IPCS_DSN"'"
  END
  ADDRESS "TSO" "ALLOCATE FI(IPCSDDIR) DA('"IPCS_DSN"') SHR REUSE"
RETURN
/*********************************************************************/
/************** INVOKE IPCS IN LINE MODE TO SET DEFAULTS *************/
/*********************************************************************/
SET_IPCS_DEFAULTS:
  ADDRESS "TSO" "NEWSTACK"
    QUEUE "SETDEF NOCONFIRM"
    QUEUE "SETDEF NOPRINT NOTERMINAL"
    QUEUE "SETDEF DISPLAY(NOMACHINE)"
    QUEUE "SETDEF DISPLAY(NOREMARK)"
    QUEUE "SETDEF DISPLAY(NOREQUEST)"
    QUEUE "SETDEF DISPLAY(NOSTORAGE)"
    QUEUE "SETDEF DISPLAY(NOSYMBOL)"
    IF DsName ¬= "" THEN DO
        QUEUE "SETDEF DsName("DsName") NOCONFIRM"
        QUEUE "OPEN DsName"
    END
    QUEUE "END"

    ADDRESS "TSO" "IPCS"
  ADDRESS "TSO" "DELSTACK"
RETURN
/**********************************************************************
            Cleanup and Exit Gracefully
***********************************************************************/
CLEANUP:
  ok='*'                               /* Ignore all non-0 RCs        */
    ADDRESS "ISPEXEC" "LIBDEF ISPSLIB"
    IF SBLSLIB0 ¬= "" THEN ADDRESS "ISPEXEC" "LIBDEF ISPLLIB"
    ADDRESS "ISPEXEC" "LIBDEF ISPMLIB"
    ADDRESS "ISPEXEC" "LIBDEF ISPPLIB"
    ADDRESS "ISPEXEC" "LIBDEF ISPTLIB"
    ADDRESS "TSO" "ALTLIB DEACTIVATE APPLICATION(CLIST)"
    ADDRESS "TSO" "FREE DD(IPCSDDIR)"
    IF IPCSPARM ¬= "" THEN CALL BPXWDYN("FREE DD(IPCSPARM)")
    CALL BPXWDYN("FREE DD(IPCSPRNT)")
    ADDRESS "ISPEXEC" "FTCLOSE"        /* Close File Tailoring DSN    */
    ZISPFRC = ExitError                /* Initialize ISPF RC Variable */
    ADDRESS "ISPEXEC" "VPUT (ZISPFRC)" /* Set ISPF RC to error RC     */
EXIT ExitError                         /* Set TSO/MVS RC to error RC  */
/* COPY ERRPROC */
/********************************************************************** /*COPY*/
      Error Handling procedure -- SHOULD BE LAST PROCEDURES IN REXX     /*COPY*/
***********************************************************************//*COPY*/
ERROR_PROC:                                                             /*COPY*/
  IF (CONDITION('C') = 'ERROR') & (SYMBOL('OK') = 'VAR') THEN ,         /*COPY*/
     IF (WORDPOS(RC, ok) > 0) | ok='*' THEN RETURN    /* Not an ERROR *//*COPY*/
                                                                        /*COPY*/
  TRACE("O")                        /* Turn off ERROR traps et.al.    *//*COPY*/
  elineno = sigl                    /* Source line error occured in   *//*COPY*/
  SIGNAL OFF SYNTAX                 /* ... all Error trapping OFF     *//*COPY*/
  SIGNAL OFF NOVALUE                                                    /*COPY*/
  CALL   OFF ERROR                                                      /*COPY*/
  CALL GET_ERROR_INFO               /* Get information about error    *//*COPY*/
                                                                        /*COPY*/
  "SUBCOM ISPEXEC"                  /* Is ISPF available?             *//*COPY*/
  IF RC = 0 THEN IF SYSVAR('SYSENV') ¬= 'BACK' THEN DO UNTIL RC ¬= 0    /*COPY*/
        eresults = ""                                                   /*COPY*/
        DO QUEUED()                                                     /*COPY*/
           PARSE PULL eresult                                           /*COPY*/
           eresults = STRIP(eresults "NL ===>" eresult)                 /*COPY*/
        END                                                             /*COPY*/
        ADDRESS "ISPEXEC" "DISPLAY PANEL(REXXEPNL)"                     /*COPY*/
      END                                                               /*COPY*/
    ELSE CALL MVS_ERROR_DISPLAY                                         /*COPY*/
  ELSE   CALL MVS_ERROR_DISPLAY                                         /*COPY*/
                                                                        /*COPY*/
  CALL ERROR_RESPONSE               /* EXEC dependent ERROR handling  *//*COPY*/
  CALL CLEANUP                      /* Cleanup and EXIT gracefully    *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY ERRINFO  */                                                     /*COPY*/
/********************************************************************** /*COPY*/
      Get the information about the ERROR and format it                 /*COPY*/
***********************************************************************//*COPY*/
GET_ERROR_INFO:                                                         /*COPY*/
  PARSE SOURCE . . erexx .          /* Get REXX EXEC name             *//*COPY*/
  etype   = CONDITION('C')          /* Condition causing error        *//*COPY*/
  sourcel = SOURCELINE(elineno)     /* Start getting error source line*//*COPY*/
  IF INDEX(sourcel,'/*COPY*/') = 73 THEN sourcel = LEFT(sourcel,72)     /*COPY*/
  sourcel = STRIP(sourcel)                                              /*COPY*/
  DO e_i = 1 WHILE LASTPOS(',',sourcel) = LENGTH(sourcel)               /*COPY*/
     nextl = SOURCELINE(elineno + e_i)                                  /*COPY*/
     IF INDEX(nextl,'/*COPY*/') = 73 THEN nextl = LEFT(nextl,72)        /*COPY*/
     sourcel = STRIP(sourcel,'T',',') STRIP(nextl)                      /*COPY*/
  END                           /* END loop to handle continued lines *//*COPY*/
  IF etype = 'SYNTAX' THEN DO                                           /*COPY*/
     ecause  = ERRORTEXT(RC)       /* Brief description of error     */ /*COPY*/
     expandl = "Can't INTERPRET source with SYNTAX errors!"             /*COPY*/
    END                                                                 /*COPY*/
  ELSE DO                                                               /*COPY*/
     Lst = "ADDRESS CALL INTERPRET SAY"                                 /*COPY*/
     ecause  = CONDITION('D')       /* Brief description of error     *//*COPY*/
     FullLine = sourcel             /* Begin getting EXECuted source  *//*COPY*/
     expandl = ""                                                       /*COPY*/
     DO UNTIL FullLine = ''         /* loop to handle ';' in source   *//*COPY*/
        PARSE VALUE FullLine WITH srcl ';' FullLine                     /*COPY*/
        SELECT                                                          /*COPY*/
          WHEN WORDPOS(WORD(srcl,1),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN WORDPOS(WORD(srcl,2),Lst) > 0        THEN evals=srcl     /*COPY*/
          WHEN INDEX(srcl,"=")           > 1        THEN evals=srcl     /*COPY*/
        OTHERWISE; evals = VALUE(srcl); END                             /*COPY*/
        IF DATATYPE(evals, "NUM")                   THEN evals=srcl     /*COPY*/
        expandl = expandl';' evals                                      /*COPY*/
     END                                                                /*COPY*/
     expandl = STRIP(STRIP(expandl,"L",";"))                            /*COPY*/
  END                                                                   /*COPY*/
  SELECT                                                                /*COPY*/
    WHEN etype = 'ERROR' & SYMBOL('ZERRLM') = 'VAR' THEN                /*COPY*/
          emsg = ZERRLM                                                 /*COPY*/
    WHEN SYMBOL('SYSMSGLVL1') ¬= 'VAR'              THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
    WHEN SYSMSGLVL1 = ""                            THEN                /*COPY*/
          emsg = 'No available ERROR description.'                      /*COPY*/
  OTHERWISE                                                             /*COPY*/
     IF SYMBOL('SYSMSGLVL2') = 'VAR'                THEN                /*COPY*/
          emsg = SYSMSGLVL1 "--" SYSMSGLVL2                             /*COPY*/
     ELSE emsg = SYSMSGLVL1                                             /*COPY*/
  END                                                                   /*COPY*/
  IF INDEX(emsg, "IN VARIABLE SYSREASON") > 0       THEN                /*COPY*/
          emsg = "SYSREASON: '"SYSREASON"'"                             /*COPY*/
  IF etype = 'NOVALUE' THEN ExitError = 4    /* Set EXIT error level  *//*COPY*/
     ELSE ExitError = RC                                                /*COPY*/
  erc = ExitError       /* Get all information about error            *//*COPY*/
RETURN                                                                  /*COPY*/
/* COPY MVSERROR */                                                     /*COPY*/
/********************************************************************** /*COPY*/
                 Output ERROR information to SYSPRINT                   /*COPY*/
***********************************************************************//*COPY*/
MVS_ERROR_DISPLAY:                                                      /*COPY*/
  eresult. = "";eresult.0 = QUEUED() /* Get info currently on STACK   *//*COPY*/
  DO eresult = 1 TO eresult.0; PARSE PULL eresult.eresult; END          /*COPY*/
  ls = LINESIZE()                   /* How wide is the display?       *//*COPY*/
  IF ls <= 80 THEN ls2 = ls; ELSE ls2 = ls - 30                         /*COPY*/
  SAY ''                            /* Start SAYing error information *//*COPY*/
  SAY  CENTER(CENTER(" An ERROR occurred in REXX '"erexx"' ",50,'*'),ls)/*COPY*/
  SAY    CENTER(LEFT('          Error Type:' etype,80),ls)              /*COPY*/
  SAY    CENTER(LEFT('         Error Cause:' ecause,80),ls)             /*COPY*/
  SAY    CENTER(LEFT('                  RC:' erc,80),ls)                /*COPY*/
  SAY    CENTER(LEFT('      Stack Contents:' eresult.1,80),ls)          /*COPY*/
  DO eresults = 2 TO eresult.0                                          /*COPY*/
     SAY CENTER(LEFT('                     ' eresult.eresults,80),ls)   /*COPY*/
  END                                                                   /*COPY*/
  SAY    CENTER(LEFT('         Source Line:' elineno,80),ls)            /*COPY*/
  SAY           LEFT('   Error Description:' emsg,ls)                   /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY           LEFT('Source line reads as:' sourcel,ls)                /*COPY*/
  SAY ''                                                                /*COPY*/
  SAY          LEFT('  Source EXECutes as:' expandl,ls)                 /*COPY*/
  SAY CENTER(CENTER("      End of ERROR Reporting     ",50,'*'),ls)     /*COPY*/
  SAY CENTER(CENTER("   Beginning of Error Handling   ",50,'*'),ls)     /*COPY*/
RETURN                                                                  /*COPY*/
/********************************************************************** /*COPY*/
        In case ERROR_RESPONSE and CLEANUP are not supplied             /*COPY*/
   REXX allows Multiple PROCEDUREs with same name, but always uses      /*COPY*/
   the first one found.  So, a REXX specific version of these can       /*COPY*/
   be use writen if it is placed before ERROR_PROC.                     /*COPY*/
***********************************************************************//*COPY*/
ERROR_RESPONSE:                     /* Dummy ERROR_RESPONSE PROC      *//*COPY*/
RETURN                                                                  /*COPY*/
CLEANUP:                            /* Simple CLEANUP PROC            *//*COPY*/
  ADDRESS "ISPEXEC" "FTCLOSE"       /* CLOSE File Tailoring FILE      *//*COPY*/
  ZISPFRC = ExitError               /* SET ISPF RC to ExitError       *//*COPY*/
  ADDRESS "ISPEXEC" "VPUT (ZISPFRC)"                                    /*COPY*/
EXIT ExitError                      /* EXIT with error return code    *//*COPY*/
