{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011126000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 352716, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 9, "INMDSNAM": "CBT.V500.FILE046.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 352716, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE046.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\n'", "DS1TRBAL": "b'TV'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00U\\x00\\x05\\x00U\\x00\\x0c\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00I\\x01\\x15\\x03/\\x01\\x15\\x03/!$\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-02-01T00:00:00", "modifydate": "2015-02-01T21:24:49", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-490"}, "text": "REGULAR CBT TAPE - VERSION 490    FILE:  046\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT490.FILE046\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 18 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,270 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/01/15    21:24:49    UTC-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x001\\x01\\x122/\\x01\\x15\\x03/ \\x03\\x00\\x1f\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2012-11-17T00:00:00", "modifydate": "2015-02-01T20:03:31", "lines": 31, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "Subject:  PACKRAT update\nDate:     11/16/2012 9:45 AM\nTo:       Sam Golob <sbgolob@cbttape.org>\n\nHi Sam,\n\nI made a small change to member BACKENDZ in FILE 46 (PACKRAT),\nwhich is in the FILE046.XMI file under my userid.\n\nI replaced these 4 lines:\n\nUCBNEXT  UCBSCAN COPY,WORKAREA=UCBWORK,DEVCLASS=DASD,RANGE=ALL,        X\n               UCBAREA=UCBAREA,DYNAMIC=YES\n         CLC   CAMVOL,28(3)          VOLSER\n         BNE   UCBNEXT\n\nwith these:\n\n         UCBSCAN COPY,WORKAREA=UCBWORK,DEVCLASS=DASD,RANGE=ALL,        X\n               UCBAREA=UCBAREA,DYNAMIC=YES,VOLSER=CAMVOL\n         LTR   R15,R15\n         BNZ   NOTMTD\n\nBy adding VOLSER=CAMVOL to the UCBSCAN parameters, UCBSCAN only\nneeds to be executed once per volume instead of once for each UCB\nuntil the volume is found.  All of the looping through UCBs is\ndone for you internally in a single execution of the macro.  I\ndidn't notice that feature when I first used the macro. It\ndoesn't change the results in any way, but it is a better way to\nget the UCB.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x07\\x01\\x15\\x03/\\x01\\x15\\x03/!\\x12\\x000\\x000\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2015-02-01T00:00:00", "modifydate": "2015-02-01T21:12:07", "lines": 48, "newlines": 48, "modlines": 0, "user": "SBGOLOB"}, "text": "         Updates to the ULUT access method for UCB Scans\n         ------- -- --- ---- ------ ------ --- --- -----\n\n0.  In the PACKRAT program, you give the program a volser, and the\n    program lists all the datasets in the VTOC of the volume for you.\n    In order to find the volume, the PACKRAT program (specifically\n    the BACKEND program) does a scan of all the defined UCB's in the\n    system, and looks to see if there is a match, to the volser that\n    you have specified.  This UCB lookup is usually done with via the\n    UCBSCAN macro, but there are other ways to do it.  For z/OS\n    systems (as opposed to XA and pre-XA MVS systems) we have two\n    ways:  the UCBSCAN macro, or a direct lookup to the z/OS UCB\n    Lookup Table (or ULUT).  The UCBSCAN macro is IBM's official way\n    to do it, but we have researched the other way as well.  The\n    BACKENDZ program uses the UCBSCAN method, and the BACKENDU\n    program uses the direct ULUT lookup method.\n\n1.  There are 3 types of UCB Lookup Tables (ULUT's).  They are called\n    Type 1, Type 2, and Type 3.  The Type 3 ULUT is in 64-bit storage\n    and needs 64-bit instructions to access it.  All of this stuff is\n    in the macros, as follows:\n\n2.  If you are using 64-bit access, you have to clear all hi-order\n    31-bit addresses to have the X'80000000' bit turned off.  I use\n    the LLGTR Rx,Rx instruction to do this.\n\n3.  All coding for the ULUT access has been incorporated into 3 macros:\n\n    ULUINIT, ULUSCAN, and ULUDSECT.  These macros are found in this\n    pds.\n\n    The 3 versions of the UCB Lookup Table (ULUT) are all coded-for\n    in these 3 macros, so you don't have to worry too much about the\n    internals.\n\n4.  The ULUINIT and ULUSCAN macros require (at this level) an 88-byte\n    work area.  This work area is mapped by the ULUDSECT macro.\n\n5.  The ULUINIT macro sets up the work area.  When you scan each UCB,\n    you do it, using repeated invocations of the ULUSCAN macro, in a\n    loop.  After each ULUSCAN macro, before you loop, move ULUDNEXT\n    (the next ULUT Table entry) into ULUDCURR (the current ULUT Table\n    entry), and then invoke ULUSCAN again.  Repeat until you get to\n    the end of the table.  See the BACKENDU code for a coding example.\n\n\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE046": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04Z\\x00@\\x01\\x15\\x03/\\x01\\x15\\x03/!$\\x00]\\x00]\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf0@@@'", "ispf": {"version": "04.90", "flags": 0, "createdate": "2015-02-01T00:00:00", "modifydate": "2015-02-01T21:24:40", "lines": 93, "newlines": 93, "modlines": 0, "user": "CBT-490"}, "text": "//***FILE 046 is the Mass Mutual disk pack maintenance program,     *   FILE 046\n//*           \"PACKRAT\".  Its only function is to examine the       *   FILE 046\n//*           VTOC of a particular volume and scratch the           *   FILE 046\n//*           datasets specified.  The uncatalog only occurs if     *   FILE 046\n//*           the data set is cataloged on the volume currently     *   FILE 046\n//*           being examined.  If it is a multi-volume data set     *   FILE 046\n//*           it is not scratched or uncataloged.                   *   FILE 046\n//*                                                                 *   FILE 046\n//*           As originally written, this program has been used     *   FILE 046\n//*           on 3330, 3350, 3380, and 3390 devices.  It has been   *   FILE 046\n//*           run under MVS/SP 1.3, MVS/XA, and MVS/ESA, and it     *   FILE 046\n//*           stopped working on z/OS, but it was still working     *   FILE 046\n//*           on OS/390 v2.10.  PACKRAT has now been fixed to       *   FILE 046\n//*           work on z/OS in two ways:                             *   FILE 046\n//*                                                                 *   FILE 046\n//*           z/OS with UCBSCAN - members PACKRATZ and BACKENDZ     *   FILE 046\n//*                                                                 *   FILE 046\n//*           z/OS with ULUT    - members PACKRATU and BACKENDU     *   FILE 046\n//*                                                                 *   FILE 046\n//*           Assembly with UCBSCAN - member PACKRAT$               *   FILE 046\n//*                                                                 *   FILE 046\n//*           Assembly with ULUT    - member PACKRAT#               *   FILE 046\n//*                                                                 *   FILE 046\n//*           To assemble PACKRAT, you need to assemble two         *   FILE 046\n//*           modules, PACKRAT and BACKEND, together in a batch     *   FILE 046\n//*           assembly.  For OS/390 and z/OS, use the combination   *   FILE 046\n//*           of PACKRATZ and BACKENDZ, or PACKRATU and BACKENDU.   *   FILE 046\n//*           The respective assembly jobs are PACKRAT$ and         *   FILE 046\n//*           PACKRAT#.                                             *   FILE 046\n//*                                                                 *   FILE 046\n//*           PACKRAT has now been fixed to work on z/OS in 2       *   FILE 046\n//*           different ways.  For all z/OS levels, you can use     *   FILE 046\n//*           members PACKRATZ and BACKENDZ.  Member PACKRAT$ is    *   FILE 046\n//*           one sample assembly job for the z/OS version of       *   FILE 046\n//*           PACKRAT.  (A big \"thank you\" goes to the person who   *   FILE 046\n//*           fixed this program to work under z/OS.  He got a      *   FILE 046\n//*           good tool back for us.)                               *   FILE 046\n//*                                                                 *   FILE 046\n//*           I'm quite sure that PACKRAT does not need to be       *   FILE 046\n//*           run APF-authorized.  But it is true that whoever      *   FILE 046\n//*           runs PACKRAT has to have TSO OPER authorization       *   FILE 046\n//*           (in the PSCB, not in RACF).                           *   FILE 046\n//*                                                                 *   FILE 046\n//*           - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 046\n//*                                                                 *   FILE 046\n//*           A different version of PACKRAT, called PACKRATU       *   FILE 046\n//*           here, uses a different method of UCB scanning in      *   FILE 046\n//*           its BACKEND module, which is called BACKENDU.         *   FILE 046\n//*           This method works from ESA 5.2.2 thru at least z/OS   *   FILE 046\n//*           2.2.  Below ESA 5.2.2, BACKENDU uses the older        *   FILE 046\n//*           methods of UCB scanning.  No APF authorization is     *   FILE 046\n//*           needed.  The difference in PACKRATU from the \"**Z\"    *   FILE 046\n//*           versions is that AMODE 31 is needed, and real (not    *   FILE 046\n//*           copied) UCB's are obtained by the method.  BACKENDZ   *   FILE 046\n//*           obtains copied UCB's, not the real UCB's, although    *   FILE 046\n//*           that doesn't seem to make any difference in the       *   FILE 046\n//*           processing.                                           *   FILE 046\n//*                                                                 *   FILE 046\n//*           - - - - - - - - - - - - - - - - - - - - - - - - - -   *   FILE 046\n//*                                                                 *   FILE 046\n//*           Directions for use:                                   *   FILE 046\n//*                                                                 *   FILE 046\n//*           PACKRAT is a full screen TSO application to delete    *   FILE 046\n//*           or scratch datasets on a disk pack in a convenient    *   FILE 046\n//*           manner.  After typing TSO PACKRAT, the prompt         *   FILE 046\n//*           screen allows you to enter the VOLSER you wish to     *   FILE 046\n//*           examine and the scan date.  A full screen of data     *   FILE 046\n//*           sets can be scratched at a time.  Hitting the enter   *   FILE 046\n//*           key, pages you forward through the VTOC.  Additional  *   FILE 046\n//*           information may be found in the comments of the       *   FILE 046\n//*           code itself, and you'll get the hang of it with       *   FILE 046\n//*           some practice.  (Recommendation:  Try scratching      *   FILE 046\n//*           a few test datasets first.)                           *   FILE 046\n//*                                                                 *   FILE 046\n//*           As coded currently, PACKRAT will delete SYS1. and     *   FILE 046\n//*           other system datasets.  To protect users from doing   *   FILE 046\n//*           this, look for SYS1. in the source code and           *   FILE 046\n//*           uncomment or change the appropriate lines (z/OS ver). *   FILE 046\n//*           This code is in source member BACKENDZ (or BACKENDU). *   FILE 046\n//*                                                                 *   FILE 046\n//*           This program does not need ISPF, and it can be run    *   FILE 046\n//*           in TSO READY mode.                                    *   FILE 046\n//*                                                                 *   FILE 046\n//*           Members SAMPSCR1 and SAMPSCR2 were included to give   *   FILE 046\n//*           you an idea about what the full screens look like.    *   FILE 046\n//*                                                                 *   FILE 046\n//*           SAMPSCR1 - the introductory screen                    *   FILE 046\n//*           SAMPSCR2 - what a screen full of datasets on a        *   FILE 046\n//*                      disk pack looks like                       *   FILE 046\n//*                                                                 *   FILE 046\n//*           email:  sbgolob@cbttape.org     or                    *   FILE 046\n//*                   sbgolob@attglobal.net                         *   FILE 046\n//*                                                                 *   FILE 046\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "BACKEND": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x121\\x1f\\x01\\x121\\x1f\\x15\\x19\\x01\"\\x01\"\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf0\\xf4\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-06T15:19:00", "lines": 290, "newlines": 290, "modlines": 0, "user": "OLDF046"}, "text": "*          A FEW CHANGES BY CBT. ALL ARE MARKED BY         AXC-CBT\n*           1. CHECK FOR THE FOLOIWNG 1ST LEVELS:          AXC-CBT\n*              SYS1. SYS2. CBT. PROD.                      AXC-CBT\n*                                                          AXC-CBT\n**         AND A FEW CHANGES TO USE THE UCB SCAN SERVICES       ABL-UCB\n**         BY BRUCE LELAND AT HITACHI; MARKED AS FOLLOWS --->   ABL-UCB\n         EJECT\n         CNOP  0,4\nBACKEND  CSECT\n         SAVE  (14,12)\n         ST    13,SAVE+4-BACKEND(15)\n         BAL   15,CONT-BACKEND(15)\nSAVE     DC    18F'0'\nCONT     ST    15,8(13)\n         LR    13,15\n         USING SAVE,13\n         L     2,0(1)               A(COMMAREA)\n         USING COMMAREA,2\n         DSECT\nCOMMAREA DS    0CL69\nDSN      DS    CL44\n         DS    CL5\nCRTDT    DS    CL5\n         DS    CL6\nTRKS     DS    CL5\n         DS    CL4\n         ORG   COMMAREA\nKEYWORD  DS    CL4\nKEYDATA  DS    CL65\n         ORG   COMMAREA\nRESPONSE DS    CL69\n         ORG\nBACKEND  CSECT\n         CLC   KEYWORD,=C'VOL '\n         BE    NEWVOL\n         OC    DSN,DSN\n         BZ    DSNREQST\n         B     SCRREQST\nRETURN   L     13,SAVE+4\n         RETURN (14,12),RC=(15)\n         EJECT\nNEWVOL   MVC   CAMVOL,KEYDATA\n         XC    COMMAREA,COMMAREA\n         OBTAIN FMT4DSCB\n         B     *+4(15)\n         B     GOTVTOC\n         B     NOTMTD\n         B     VTOCERR\n         DC    8H'0'\n         SPACE 3\nGOTVTOC  MVC   LASTFMT1,WORKA+1\n         MVC   DSCBTRK+1(1),WORKA+30\n         MVC   TRKSCYL,WORKA+20\n         MVC   CCHHR(4),WORKA+63\n         MVI   CCHHR+4,1\n         SPACE 3\n         L     4,16                  -> CVT\n         TM    CVTDCB-CVT(R4),CVTMVSE  REALLY XA?               ABL-UCB\n         BO    TRYXA                   YES, BRANCH              ABL-UCB\n         L     4,40(4)               -> UCB LOOKUP TABLE\nUCBLOOP  LH    3,0(4)                16 BIT (MVS STYLE) UCB ADDRESS\n         N     3,=X'0000FFFF'        CLEAR IN CASE SIGN BIT PROPAGATED\n         BZ    BUMPUCB               GET NEXT\n         CH    3,=H'-1'              END OF TABLE\n         BE    NOTMTD\n         CLC   CAMVOL,28(3)          VOLSER\n         BE    GOTUCB\nBUMPUCB  LA    4,2(4)\n         B     UCBLOOP\n***                                                             ABL-UCB\n         DS    0D                                               ABL-UCB\nUCBPARMS DS    3A                 PARMS FOR UCB SCAN SERVICES   ABL-UCB\nUCBANSR  DS    A                  RESULT UCB ADRESS             ABL-UCB\nUCBWORK  DS    CL100              UCB SCAN WORK AREA            ABL-UCB\nTRYXA    LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-UC2\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         SPACE 1                                                ABL-UCB\nINCR1    LA    R1,UCBPARMS           START OF PARAMETER LIST    ABL-UCB\n         L     R5,16                 A(CVT)                     ABL-UCB\n         L     R15,CVTUCBSC-CVT(R5)  START OF UCB SCAN SERVICE  ABL-UCB\n         BALR  R14,R15               GO SCAN UCB LIST           ABL-UCB\n         SPACE 1                                                ABL-UCB\n         LTR   R15,R15               END OF LIST?               ABL-UCB\n         BNZ   NOTMTD                YES, BRANCH                ABL-UCB\n         L     R3,UCBANSR            START OF THIS UCB          ABL-UCB\n         CLC   CAMVOL,28(R3)         THIS VOLUME?               ABL-UCB\n         BNE   INCR1                 NO, LOOP                   ABL-UCB\n         PRINT NOGEN                                            ABL-UCB\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         PRINT GEN                                              ABL-UCB\nBACKEND  CSECT ,                                                ABL-UCB\n***                                                             ABL-UCB\nGOTUCB   MVC   DEVTYPE,16(3)\n         B     DSNREQST\n         SPACE 3\nVTOCERR  XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG1),ERRMSG1\n         B     RETURN\nNOTMTD   XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG2),ERRMSG2\n         B     RETURN\n         EJECT\nDSNREQST OC    CAMVOL,CAMVOL\n         BNZ   VOLOK\n         DC    H'0'\nVOLOK    XC    COMMAREA,COMMAREA\nNEXTDSCB BAL   8,CCHHRINC\n         CLC   LASTFMT1,CCHHR\n         BL    ENDOFVOL\n         OBTAIN FMT1DSCB\n         LTR   15,15\n         BNZ   VTOCERR\n         CLI   WORKA+44,C'1'\n         BNE   NEXTDSCB\nGOTF1    MVC   DSN,WORKA\n         XR    3,3\n         IC    3,WORKA+53         CRTDT(YR)\n         CVD   3,DBL\n         UNPK  CRTDT(2),DBL+6(2)\n         OI    CRTDT+1,240\n         LH    3,WORKA+54         CRTDT(DAY)\n         CVD   3,DBL\n         UNPK  CRTDT+2(3),DBL+6(2)\n         OI    CRTDT+4,240\n*\n*\n*\n*       AREA FOR CALCULATION OF DS SIZE\n*\n*\n         SR    R7,R7             CYLINDER COUNTER\n         LR    R3,R7             TRACK COUNTER\n         LR    R4,R7             EXTENT COUNTER\n         MVC   CCSAVE,CCHHR      SAVE CCHHR\n         LA    R5,WORKA+105      ---> TO 1ST EXTENT\n         LA    R6,3              MAX OF 3 EXTENT IN FMT1 DSCB\nEX1      BAL   R8,EXTENT         GO ACCUMULATE.\n         B     DOEXT             NO MOVE\n         BCT   R6,EX1            LOOP\nEX2      OC    WORKA+135(5),WORKA+135 ANY MORE EXTENTS\n         BZ    DOEXT             NO\n         MVC   CCHHR,WORKA+135\n         OBTAIN FMT1DSCB         GET FORMAT 2 OR 3 DSCB\n         CH    R15,=H'4'         OK?\n         BNL   DOEXT             NO IGNORE IT\n         CLI   WORKA+44,C'3'     TYPE 3 ?\n         BNE   EX2               NO TRY AGAIN.\n         MVC   WORKA+44(90),WORKA+45 CONDENSE DSCB TO MAKE CONTIGUOUS\n         LA    R5,WORKA+4        FIST SET\n         LA    R6,13             MAX OF 13 EXTENTS LEFT\nEX3      BAL   R8,EXTENT         GO ACCUMULATE\n         B     DOEXT             NO MORE\n         BCT   R6,EX3            LOOP\nDOEXT    MH    R7,TRKSCYL        CONVERT CYLS TO TRACKS\n         AR    R7,R3             +TRACKS\n         CVD   R7,DBL             CONVERT\n         UNPK  TRKS(5),DBL+5(3)   MOVE TO OUTPUT\n         OI    TRKS+4,X'F0'       MAKE PRINTABLE\n         MVC   CCHHR,CCSAVE       RESTORE CCHHR\n         B     ENDOFVOL\nEXTENT   DS    0H\n*        R5 ---> CURRENT EXTENT POINTER\n*        R7      CUMULATIVE CYLINDERS\n*        R3      CUMULATIVE TRACKS\n*        R4      NO OF EXTENTS\n         CLI     0(R5),0         ANY MORE EXTENTS?\n         BCR     8,R8             NO EXIT AND INDICATE\n         CLI     0(R5),X'80'     SPLIT CYLINDERS?\n         BNE     EXT1            NO\n         MVI     TRKS+6,C'?'   FLAG SPACE AS INCORRECT\nEXT1     MVC     DBL,2(R5)       ALIGN\n         LA      R4,1(R4)        +1   EXTENT\n         AH      R7,DBL+4        +CYL END\n         AH      R3,DBL+6        +TRK END\n         SH      R7,DBL          -CYL START\n         SH      R3,DBL+2        -TRK START\n         AH      R3,=H'1'        CORRECT NUMBER OF TRACKS\n         LA      R5,10(R5)       NEXT FIELD\n         B       4(R8)\n         SPACE 3\nENDOFVOL XR    15,15\n         B     RETURN\n         EJECT\nSCRREQST OC    CAMVOL,CAMVOL\n         BNZ   SCROK\n         DC    H'0'\nSCROK    MVC   CAMDSN,DSN\n         XC    COMMAREA,COMMAREA\n*        CLC   CAMDSN(4),=C'SYS1'                          AXC-CBT\n         CLC   CAMDSN(5),=C'SYS1.'                         AXC-CBT\n         BE    NOSCR                                       AXC-CBT\n         CLC   CAMDSN(5),=C'SYS2.'                         AXC-CBT\n         BE    NOSCR                                       AXC-CBT\n         CLC   CAMDSN(5),=C'PROD.'                         AXC-CBT\n         BE    NOSCR                                       AXC-CBT\n         CLC   CAMDSN(4),=C'CBT.'                          AXC-CBT\n         BE    NOSCR                                       AXC-CBT\n         LOCATE LOCATE\n         LTR   15,15\n         BNZ   NOUNCAT\n         CLI   WORKA+1,1        MORE THAN 1 VOL?\n         BNE   NOSCR            YES\n         CLC   CAMVOL,WORKA+6   CATLGD ON DIFFERENT VOLUME?\n         BNE   NOUNCAT          YES ... DON'T UNCAT\n         CATALOG UNCATLG\n         LTR   15,15\n         BNZ   NOSCR            COULDN'T UNCATLG ... DON'T SCRATCH\nNOUNCAT  XC    VOLSEQ,VOLSEQ    CLEAR JUST IN CASE USED\n         SCRATCH SCRATCH\n         LTR   15,15\n         BZ    GOODSCR\nNOSCR    MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'ERRMSG3),ERRMSG3\n         B     RETURN\nGOODSCR  MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'SCRMSG1),SCRMSG1\n         B    RETURN\n         EJECT\nCCHHRINC XR    1,1\n         IC    1,CCHHR+4\n         LA    1,1(1)\n         STC   1,CCHHR+4\n         CH    1,DSCBTRK\n         BCR   13,8\n         MVI   CCHHR+4,1\n         LH    1,CCHHR+2\n         LA    1,1(1)\n         STH   1,CCHHR+2\n         CH    1,TRKSCYL\n         BCR   4,8\n         XC    CCHHR+2(2),CCHHR+2\n         LH    1,CCHHR\n         LA    1,1(1)\n         STH   1,CCHHR\n         BR    8\n         EJECT\nFMT1DSCB CAMLST SEEK,CCHHR,CAMVOL,WORKA\nFMT4DSCB CAMLST SEARCH,FMT4DSN,CAMVOL,WORKA\nSCRATCH  CAMLST SCRATCH,CAMDSN,,VOLLIST,,OVRD\nLOCATE   CAMLST NAME,CAMDSN,,WORKA\nUNCATLG  CAMLST UCATDX,CAMDSN\n         EJECT\nCAMDSN   DC    CL44' '\nVOLLIST  DC    H'1'\nDEVTYPE  DS    XL4\nCAMVOL   DC    CL6' '\nVOLSEQ   DC    H'0'\nCCHHR    DC    XL5'0'\nCCSAVE   DC    XL5'0'\n         CNOP  0,4\nWORKA    DS    265C\nFMT4DSN  DC    44X'04'\nLASTFMT1 DC    XL5'0'\nDSCBTRK  DC    H'0'\nTRKSCYL  DC    H'0'\nERRMSG1  DC    C'ERROR ACCESSING VTOC'\nERRMSG2  DC    C'ERROR ACCESSING VOLUME'\nERRMSG3  DC    CL20'NOT DELETED'\nSCRMSG1  DC    CL20'GONE'\nDBL      DC    D'0'\n         LTORG\n**                           EQUATES FOR SYMBOLIC REG USAGE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BACKENDU": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x12\\x01\\x121\\x1f\\x01\\x15\\x03/\\x19\\x08\\x01\\x86\\x01\"\\x00\\x00\\xe4\\xd3\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2015-02-01T19:08:12", "lines": 390, "newlines": 290, "modlines": 0, "user": "ULUT"}, "text": "BACKEND  TITLE 'BACKEND OF PACKRAT PROGRAM WHICH DOES THE GUT WORK'\n* ------------------------------------------------------------------- *\n*\n*       A FEW CHANGES BY CBT. ALL ARE MARKED BY         AXC-CBT\n*        1. CHECK FOR THE FOLOIWNG 1ST LEVELS:          AXC-CBT\n*           SYS1. SYS2. CBT. PROD.                      AXC-CBT\n*           (NULLIFIED BY SBG. - 2012/11/06)\n*\n* ------------------------------------------------------------------- *\n*\n**      AND A FEW CHANGES TO USE THE UCB SCAN SERVICES          ABL-UCB\n**      BY BRUCE LELAND AT HITACHI; MARKED AS FOLLOWS --->      ABL-UCB\n*\n* ------------------------------------------------------------------- *\n*                                                               ZOS-U\n**      AND A FEW CHANGES FOR Z/OS UCBSCAN, MARKED AS --->      ZOS-U\n**      SHOW RETURN CODE AND STATUS IF SCRATCH FAILS.           ZOS-U\n**      HANDLE OBTAIN RETURN CODES GREATER THAN 8.              ZOS-U\n*\n* ------------------------------------------------------------------- *\n*\n*       UCB SCAN DONE WITH ULUT - UPDATED FOR TYPE 3 - Z/OS 2.2.\n*\n*       Module is now AMODE 31 and RMODE 24.\n*       64-bit access mode IS REQUIRED within ULUINIT and ULUSCAN\n*       macros.  Otherwise, only AMODE 31.\n*\n*       For SAM64 access, the HI ORDER 31-BIT byte must be cleared.\n*       THE LLGTR Rx,Rx instruction is used for this purpose.\n*\n*       There is a lot of very old code in here.  I did not attempt\n*       to clean it all up.\n*\n*         (Sam Golob - 2015/02/01 - sbgolob@cbttape.org)\n*\n* ------------------------------------------------------------------- *\n         EJECT\n         CNOP  0,4\nBACKEND  CSECT\nBACKEND  AMODE 31                                                  ULUT\nBACKEND  RMODE 24                                                  ULUT\n         SAVE  (14,12)\n         ST    R13,SAVE+4-BACKEND(R15)\n         BAL   R15,CONT-BACKEND(R15)\nSAVE     DC    18F'0'\nCONT     ST    R15,8(,R13)\n         LR    R13,R15\n         USING SAVE,R13\n         L     R2,0(,R1)               A(COMMAREA)\n         USING COMMAREA,R2\n         DSECT\nCOMMAREA DS    0CL69\nDSN      DS    CL44\n         DS    CL5\nCRTDT    DS    CL5\n         DS    CL6\nTRKS     DS    CL5\n         DS    CL4\n         ORG   COMMAREA\nKEYWORD  DS    CL4\nKEYDATA  DS    CL65\n         ORG   COMMAREA\nRESPONSE DS    CL69\n         ORG\nBACKEND  CSECT\n         CLC   KEYWORD,=C'VOL '\n         BE    NEWVOL\n         OC    DSN,DSN\n         BZ    DSNREQST\n         B     SCRREQST\nRETURN   L     R13,SAVE+4\n         RETURN (14,12),RC=(15)\n         EJECT\nNEWVOL   MVC   CAMVOL,KEYDATA\n         XC    COMMAREA,COMMAREA\n         OBTAIN FMT4DSCB\n         C     R15,=A(8)                                        ZOS-U\n         BH    OBTFAIL                                          ZOS-U\n         B     *+4(R15)\n         B     GOTVTOC\n         B     NOTMTD\n         B     VTOCERR\nOBTFAIL  MVC   RESPONSE(L'ERRMSG4),ERRMSG4                      ZOS-U\n         CVD   R15,DBL                                          ZOS-U\n         OI    DBL+7,X'0F'                                      ZOS-U\n         UNPK  RESPONSE+15(3),DBL+6(2)                          ZOS-U\n         MVI   RESPONSE+15,C' '                                 ZOS-U\n         B     RETURN                                           ZOS-U\n         DC    8H'0'\n         SPACE 3\nGOTVTOC  MVC   LASTFMT1,WORKA+1\n         MVC   DSCBTRK+1(1),WORKA+30\n         MVC   TRKSCYL,WORKA+20\n         MVC   CCHHR(4),WORKA+63\n         MVI   CCHHR+4,1\n         SPACE 3\n         L     4,16                  -> CVT\n         TM    CVTDCB-CVT(R4),CVTMVSE  REALLY XA?               ABL-UCB\n         BO    TRYXA                   YES, BRANCH              ABL-UCB\n         L     4,40(4)               -> UCB LOOKUP TABLE\nUCBLOOP  LH    3,0(4)                16 BIT (MVS STYLE) UCB ADDRESS\n         N     3,=X'0000FFFF'        CLEAR IN CASE SIGN BIT PROPAGATED\n         BZ    BUMPUCB               GET NEXT\n         CH    3,=H'-1'              END OF TABLE\n         BE    NOTMTD\n         CLC   CAMVOL,28(3)          VOLSER\n         BE    GOTUCB\nBUMPUCB  LA    4,2(4)\n         B     UCBLOOP\n***                                                             ABL-UCB\n         DS    0D                                               ABL-UCB\nUCBPARMS DS    3A                 PARMS FOR UCB SCAN SERVICES   ABL-UCB\nUCBANSR  DS    A                  RESULT UCB ADRESS             ABL-UCB\nUCBAREA  DS    12F                RESULT COPY OF UCB            ZOS-U\n         DS    0D                 ALIGN WORK AREA               ZOS-U\nUCBWORK  DS    CL100              UCB SCAN WORK AREA            ABL-UCB\nTRYXA    LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-UC2\n         TM    CVTDCB-CVT(R4),CVTOSEXT    OSLEVEL EXTENSION?    ZOS-U\n         BNO   USEXA              NO                            ZOS-U\n         TM    CVTOSLV1-CVT(R4),CVTJ5522  AT LEAST ESA 5.2.2?      ULUT\n         BO    UCBULUT            Use ULUT UCB lookup method.      ULUT\n         TM    CVTOSLV0-CVT(R4),CVTUCBSV  GENERAL METHODS?      ZOS-U\n         BNO   USEXA              NO                            ZOS-U\n         B     UCBNEXT\n* ------------------------------------------------------------------- *\n* -- Use ULUT UCB scanning method with ULUINIT and ULUSCAN macros. -- *\n* ------------------------------------------------------------------- *\nUCBULUT  DS    0H                 USE MACROS TO SCAN UCB LOOKUP TABLE\n         LLGTR R10,R10            CLEAR HI ORDER\n         LLGTR R13,R13               33 BITS OF 64-BIT\n         LLGTR R14,R14                  REGISTERS FOR SAM64\n* ------------------------------------------------------------------- *\n     ULUINIT WRKAREA=WORKU,UREG=R9,EXIT=NOTMTD,WR1=R3,WR2=R12,BREG=R10\n* ------------------------------------------------------------------- *\n* --  SCAN EACH UCB, REPRESENTED BY A ULUDSECT CONTROL BLOCK       -- *\n* ------------------------------------------------------------------- *\nLOOPUCB  DS    0H\n         ULUSCAN WR1=R3,UCBR=R5,BREG=R10\n* ------------------------------------------------------------------ *\n         L     R5,ULUDUCBA        Get real UCB address for unit.   ULUT\n         CLC   CAMVOL,28(R5)      Is this the volser we want?      ULUT\n         BNE   LOOPJUMP           No. Look further.                ULUT\n         LR    R3,R5              Load R3 with UCB addr for GOTUCB ULUT\n         B     GOTUCB             Yes. Got the UCB for this disk.  ULUT\nLOOPJUMP DS    0H                                                  ULUT\n         MVC   ULUDCURR,ULUDNEXT  Get next UCB from ULUDSECT.\n         BCT   R6,LOOPUCB         And loop until we've scanned all\n         B     NOTMTD             Finished ULUT table w/o finding. ULUT\n* ------------------------------------------------------------------ *\nUCBNEXT  DS    0H                                                  ULUT\n         LA    R3,UCBAREA                                       ZOS-U\n         UCBSCAN COPY,WORKAREA=UCBWORK,DEVCLASS=DASD,RANGE=ALL,        X\n               UCBAREA=UCBAREA,DYNAMIC=YES,VOLSER=CAMVOL        ZOS-U\n         LTR   R15,R15            DID WE GET THE VOLUME?        ZOS-U\n         BNZ   NOTMTD             NO.                           ZOS-U\n         B     GOTUCB             YES.                          ZOS-U\nUSEXA    DC    0H'0'                                            ZOS-U\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         SPACE 1                                                ABL-UCB\nINCR1    LA    R1,UCBPARMS           START OF PARAMETER LIST    ABL-UCB\n         L     R5,16                 A(CVT)                     ABL-UCB\n         L     R15,CVTUCBSC-CVT(R5)  START OF UCB SCAN SERVICE  ABL-UCB\n         BALR  R14,R15               GO SCAN UCB LIST           ABL-UCB\n         SPACE 1                                                ABL-UCB\n         LTR   R15,R15               END OF LIST?               ABL-UCB\n         BNZ   NOTMTD                YES, BRANCH                ABL-UCB\n         L     R3,UCBANSR            START OF THIS UCB          ABL-UCB\n         CLC   CAMVOL,28(R3)         THIS VOLUME?               ABL-UCB\n         BNE   INCR1                 NO, LOOP                   ABL-UCB\n         PRINT NOGEN                                            ABL-UCB\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         PRINT GEN                                              ABL-UCB\nBACKEND  CSECT ,                                                ABL-UCB\n***                                                             ABL-UCB\nGOTUCB   MVC   DEVTYPE,16(R3)\n         B     DSNREQST\n         SPACE 3\nVTOCERR  XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG1),ERRMSG1\n         B     RETURN\nNOTMTD   XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG2),ERRMSG2\n         B     RETURN\n         EJECT\nDSNREQST OC    CAMVOL,CAMVOL\n         BNZ   VOLOK\n         DC    H'0'\nVOLOK    XC    COMMAREA,COMMAREA\nNEXTDSCB BAL   8,CCHHRINC\n         CLC   LASTFMT1,CCHHR\n         BL    ENDOFVOL\n         OBTAIN FMT1DSCB\n         LTR   15,15\n         BNZ   VTOCERR\n         CLI   WORKA+44,C'1'\n         BNE   NEXTDSCB\nGOTF1    MVC   DSN,WORKA\n         XR    3,3\n         IC    3,WORKA+53         CRTDT(YR)\n         CVD   3,DBL\n         UNPK  CRTDT(2),DBL+6(2)\n         OI    CRTDT+1,240\n         LH    3,WORKA+54         CRTDT(DAY)\n         CVD   3,DBL\n         UNPK  CRTDT+2(3),DBL+6(2)\n         OI    CRTDT+4,240\n*\n*\n*\n*       AREA FOR CALCULATION OF DS SIZE\n*\n*\n         SR    R7,R7             CYLINDER COUNTER\n         LR    R3,R7             TRACK COUNTER\n         LR    R4,R7             EXTENT COUNTER\n         MVC   CCSAVE,CCHHR      SAVE CCHHR\n         LA    R5,WORKA+105      ---> TO 1ST EXTENT\n         LA    R6,3              MAX OF 3 EXTENT IN FMT1 DSCB\nEX1      BAL   R8,EXTENT         GO ACCUMULATE.\n         B     DOEXT             NO MOVE\n         BCT   R6,EX1            LOOP\nEX2      OC    WORKA+135(5),WORKA+135 ANY MORE EXTENTS\n         BZ    DOEXT             NO\n         MVC   CCHHR,WORKA+135\n         OBTAIN FMT1DSCB         GET FORMAT 2 OR 3 DSCB\n         CH    R15,=H'4'         OK?\n         BNL   DOEXT             NO IGNORE IT\n         CLI   WORKA+44,C'3'     TYPE 3 ?\n         BNE   EX2               NO TRY AGAIN.\n         MVC   WORKA+44(90),WORKA+45 CONDENSE DSCB TO MAKE CONTIGUOUS\n         LA    R5,WORKA+4        FIST SET\n         LA    R6,13             MAX OF 13 EXTENTS LEFT\nEX3      BAL   R8,EXTENT         GO ACCUMULATE\n         B     DOEXT             NO MORE\n         BCT   R6,EX3            LOOP\nDOEXT    MH    R7,TRKSCYL        CONVERT CYLS TO TRACKS\n         AR    R7,R3             +TRACKS\n         CVD   R7,DBL             CONVERT\n         UNPK  TRKS(5),DBL+5(3)   MOVE TO OUTPUT\n         OI    TRKS+4,X'F0'       MAKE PRINTABLE\n         MVC   CCHHR,CCSAVE       RESTORE CCHHR\n         B     ENDOFVOL\nEXTENT   DS    0H\n*        R5 ---> CURRENT EXTENT POINTER\n*        R7      CUMULATIVE CYLINDERS\n*        R3      CUMULATIVE TRACKS\n*        R4      NO OF EXTENTS\n         CLI     0(R5),0         ANY MORE EXTENTS?\n         BCR     8,R8             NO EXIT AND INDICATE\n         CLI     0(R5),X'80'     SPLIT CYLINDERS?\n         BNE     EXT1            NO\n         MVI     TRKS+6,C'?'   FLAG SPACE AS INCORRECT\nEXT1     MVC     DBL,2(R5)       ALIGN\n         LA      R4,1(R4)        +1   EXTENT\n         AH      R7,DBL+4        +CYL END\n         AH      R3,DBL+6        +TRK END\n         SH      R7,DBL          -CYL START\n         SH      R3,DBL+2        -TRK START\n         AH      R3,=H'1'        CORRECT NUMBER OF TRACKS\n         LA      R5,10(R5)       NEXT FIELD\n         B       4(R8)\n         SPACE 3\nENDOFVOL XR    15,15\n         B     RETURN\n         EJECT\nSCRREQST OC    CAMVOL,CAMVOL\n         BNZ   SCROK\n         DC    H'0'\nSCROK    MVC   CAMDSN,DSN\n         XC    COMMAREA,COMMAREA\n*        CLC   CAMDSN(4),=C'SYS1'                          AXC-CBT\n*        CLC   CAMDSN(5),=C'SYS1.'                         AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n*        CLC   CAMDSN(5),=C'SYS2.'                         AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n*        CLC   CAMDSN(5),=C'PROD.'                         AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n*        CLC   CAMDSN(4),=C'CBT.'                          AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n         LOCATE LOCATE\n         LTR   15,15\n         BNZ   NOUNCAT\n         CLI   WORKA+1,1        MORE THAN 1 VOL?\n         BNE   NOSCR            YES\n         CLC   CAMVOL,WORKA+6   CATLGD ON DIFFERENT VOLUME?\n         BNE   NOUNCAT          YES ... DON'T UNCAT\n         CATALOG UNCATLG\n         LTR   15,15\n         BNZ   NOSCR            COULDN'T UNCATLG ... DON'T SCRATCH\nNOUNCAT  XC    VOLSEQ,VOLSEQ    CLEAR JUST IN CASE USED\n         LLGTR R0,R0\n         SR    R0,R0            INDICATE NO UCB                 ZOS-U\n*        L     R0,ULUDUCBA\n         SCRATCH SCRATCH\n         LTR   15,15\n         BZ    GOODSCR\nNOSCR    DS    0H\n*        DC    H'0'\n         MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'ERRMSG3),ERRMSG3\n         CVD   R15,DBL             RETURN CODE FROM SCRATCH     ZOS-U\n         OI    DBL+7,X'0F'                                      ZOS-U\n         UNPK  RESPONSE+49+11(3),DBL+6(2)                       ZOS-U\n         MVI   RESPONSE+49+11,C' '                              ZOS-U\n         LH    R14,VOLLIST+12       GET STATUS CODE             ZOS-U\n         N     R14,=A(255)                                      ZOS-U\n         CVD   R14,DBL                                          ZOS-U\n         OI    DBL+7,X'0F'                                      ZOS-U\n         UNPK  RESPONSE+49+14(3),DBL+6(2)                       ZOS-U\n         MVI   RESPONSE+49+14,C' '                              ZOS-U\n         B     RETURN\nGOODSCR  MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'SCRMSG1),SCRMSG1\n         B    RETURN\n         EJECT\nCCHHRINC XR    1,1\n         IC    1,CCHHR+4\n         LA    1,1(1)\n         STC   1,CCHHR+4\n         CH    1,DSCBTRK\n         BCR   13,8\n         MVI   CCHHR+4,1\n         LH    1,CCHHR+2\n         LA    1,1(1)\n         STH   1,CCHHR+2\n         CH    1,TRKSCYL\n         BCR   4,8\n         XC    CCHHR+2(2),CCHHR+2\n         LH    1,CCHHR\n         LA    1,1(1)\n         STH   1,CCHHR\n         BR    8\n         EJECT\nFMT1DSCB CAMLST SEEK,CCHHR,CAMVOL,WORKA\nFMT4DSCB CAMLST SEARCH,FMT4DSN,CAMVOL,WORKA\nSCRATCH  CAMLST SCRATCH,CAMDSN,,VOLLIST,,OVRD\nLOCATE   CAMLST NAME,CAMDSN,,WORKA\nUNCATLG  CAMLST UCATDX,CAMDSN\n         EJECT\nCAMDSN   DC    CL44' '\nVOLLIST  DC    H'1'\nDEVTYPE  DS    XL4\nCAMVOL   DC    CL6' '\nVOLSEQ   DC    H'0'\nCCHHR    DC    XL5'0'\nCCSAVE   DC    XL5'0'\n         CNOP  0,4\nWORKA    DS    265C\n         DS    0D\nWORKU    DS    88C\nFMT4DSN  DC    44X'04'\nLASTFMT1 DC    XL5'0'\nDSCBTRK  DC    H'0'\nTRKSCYL  DC    H'0'\nERRMSG1  DC    C'ERROR ACCESSING VTOC'\nERRMSG2  DC    C'ERROR ACCESSING VOLUME'\nERRMSG3  DC    CL20'NOT DELETED'\nERRMSG4  DC    CL20'OBTAIN ERROR RC XX'                         ZOS-U\nSCRMSG1  DC    CL20'GONE'\nDBL      DC    D'0'\n         LTORG\n**                           EQUATES FOR SYMBOLIC REG USAGE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BACKENDZ": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00%\\x01\\x121\\x1f\\x01\\x122/ X\\x01H\\x01\"\\x00.\\xe9\\xd6\\xe2`\\xe5\\xc5\\xd9@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-17T20:58:25", "lines": 328, "newlines": 290, "modlines": 46, "user": "ZOS-VER"}, "text": "*          A FEW CHANGES BY CBT. ALL ARE MARKED BY         AXC-CBT\n*           1. CHECK FOR THE FOLOIWNG 1ST LEVELS:          AXC-CBT\n*              SYS1. SYS2. CBT. PROD.                      AXC-CBT\n*              (NULLIFIED BY SBG. - 2012/11/06)\n*                                                          AXC-CBT\n**         AND A FEW CHANGES TO USE THE UCB SCAN SERVICES       ABL-UCB\n**         BY BRUCE LELAND AT HITACHI; MARKED AS FOLLOWS --->   ABL-UCB\n*                                                               ZOS-U\n**         AND A FEW CHANGES FOR Z/OS UCBSCAN, MARKED AS --->   ZOS-U\n**         SHOW RETURN CODE AND STATUS IF SCRATCH FAILS.        ZOS-U\n**         HANDLE OBTAIN RETURN CODES GREATER THAN 8.           ZOS-U\n         EJECT\n         CNOP  0,4\nBACKEND  CSECT\n         SAVE  (14,12)\n         ST    13,SAVE+4-BACKEND(15)\n         BAL   15,CONT-BACKEND(15)\nSAVE     DC    18F'0'\nCONT     ST    15,8(13)\n         LR    13,15\n         USING SAVE,13\n         L     2,0(1)               A(COMMAREA)\n         USING COMMAREA,2\n         DSECT\nCOMMAREA DS    0CL69\nDSN      DS    CL44\n         DS    CL5\nCRTDT    DS    CL5\n         DS    CL6\nTRKS     DS    CL5\n         DS    CL4\n         ORG   COMMAREA\nKEYWORD  DS    CL4\nKEYDATA  DS    CL65\n         ORG   COMMAREA\nRESPONSE DS    CL69\n         ORG\nBACKEND  CSECT\n         CLC   KEYWORD,=C'VOL '\n         BE    NEWVOL\n         OC    DSN,DSN\n         BZ    DSNREQST\n         B     SCRREQST\nRETURN   L     13,SAVE+4\n         RETURN (14,12),RC=(15)\n         EJECT\nNEWVOL   MVC   CAMVOL,KEYDATA\n         XC    COMMAREA,COMMAREA\n         OBTAIN FMT4DSCB\n         C     R15,=A(8)                                        ZOS-U\n         BH    OBTFAIL                                          ZOS-U\n         B     *+4(15)\n         B     GOTVTOC\n         B     NOTMTD\n         B     VTOCERR\nOBTFAIL  MVC   RESPONSE(L'ERRMSG4),ERRMSG4                      ZOS-U\n         CVD   R15,DBL                                          ZOS-U\n         OI    DBL+7,X'0F'                                      ZOS-U\n         UNPK  RESPONSE+15(3),DBL+6(2)                          ZOS-U\n         MVI   RESPONSE+15,C' '                                 ZOS-U\n         B     RETURN                                           ZOS-U\n         DC    8H'0'\n         SPACE 3\nGOTVTOC  MVC   LASTFMT1,WORKA+1\n         MVC   DSCBTRK+1(1),WORKA+30\n         MVC   TRKSCYL,WORKA+20\n         MVC   CCHHR(4),WORKA+63\n         MVI   CCHHR+4,1\n         SPACE 3\n         L     4,16                  -> CVT\n         TM    CVTDCB-CVT(R4),CVTMVSE  REALLY XA?               ABL-UCB\n         BO    TRYXA                   YES, BRANCH              ABL-UCB\n         L     4,40(4)               -> UCB LOOKUP TABLE\nUCBLOOP  LH    3,0(4)                16 BIT (MVS STYLE) UCB ADDRESS\n         N     3,=X'0000FFFF'        CLEAR IN CASE SIGN BIT PROPAGATED\n         BZ    BUMPUCB               GET NEXT\n         CH    3,=H'-1'              END OF TABLE\n         BE    NOTMTD\n         CLC   CAMVOL,28(3)          VOLSER\n         BE    GOTUCB\nBUMPUCB  LA    4,2(4)\n         B     UCBLOOP\n***                                                             ABL-UCB\n         DS    0D                                               ABL-UCB\nUCBPARMS DS    3A                 PARMS FOR UCB SCAN SERVICES   ABL-UCB\nUCBANSR  DS    A                  RESULT UCB ADRESS             ABL-UCB\nUCBAREA  DS    12F                RESULT COPY OF UCB            ZOS-U\n         DS    0D                 ALIGN WORK AREA               ZOS-U\nUCBWORK  DS    CL100              UCB SCAN WORK AREA            ABL-UCB\nTRYXA    LA    R5,UCBWORK         WORK AREA ADDRESS             ABL-UCB\n         XC    UCBWORK(100),UCBWORK  CLEAR THE WORK AREA-RESCAN ABL-UC2\n         TM    CVTDCB-CVT(R4),CVTOSEXT    OSLEVEL EXTENSION?    ZOS-U\n         BNO   USEXA              NO                            ZOS-U\n         TM    CVTOSLV0-CVT(R4),CVTUCBSV  GENERAL METHODS?      ZOS-U\n         BNO   USEXA              NO                            ZOS-U\n         LA    R3,UCBAREA                                       ZOS-U\n         UCBSCAN COPY,WORKAREA=UCBWORK,DEVCLASS=DASD,RANGE=ALL,        X\n               UCBAREA=UCBAREA,DYNAMIC=YES,VOLSER=CAMVOL        ZOS-U\n         LTR   R15,R15            DID WE GET THE VOLUME?        ZOS-U\n         BNZ   NOTMTD             NO.                           ZOS-U\n         B     GOTUCB             YES.                          ZOS-U\nUSEXA    DC    0H'0'                                            ZOS-U\n         LA    R6,=AL1(UCB3DACC)  DASD UCB'S DESIRED            ABL-UCB\n         LA    R7,UCBANSR         RESULTANT UCB ADDRESS         ABL-UCB\n         STM   R5,R7,UCBPARMS     SAVE PARAMETER LIST           ABL-UCB\n         OI    UCBPARMS+8,X'80'   MARK END OF LIST              ABL-UCB\n         SPACE 1                                                ABL-UCB\nINCR1    LA    R1,UCBPARMS           START OF PARAMETER LIST    ABL-UCB\n         L     R5,16                 A(CVT)                     ABL-UCB\n         L     R15,CVTUCBSC-CVT(R5)  START OF UCB SCAN SERVICE  ABL-UCB\n         BALR  R14,R15               GO SCAN UCB LIST           ABL-UCB\n         SPACE 1                                                ABL-UCB\n         LTR   R15,R15               END OF LIST?               ABL-UCB\n         BNZ   NOTMTD                YES, BRANCH                ABL-UCB\n         L     R3,UCBANSR            START OF THIS UCB          ABL-UCB\n         CLC   CAMVOL,28(R3)         THIS VOLUME?               ABL-UCB\n         BNE   INCR1                 NO, LOOP                   ABL-UCB\n         PRINT NOGEN                                            ABL-UCB\n         CVT   DSECT=YES                                        ABL-UCB\n         IEFUCBOB ,                                             ABL-UCB\n         PRINT GEN                                              ABL-UCB\nBACKEND  CSECT ,                                                ABL-UCB\n***                                                             ABL-UCB\nGOTUCB   MVC   DEVTYPE,16(3)\n         B     DSNREQST\n         SPACE 3\nVTOCERR  XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG1),ERRMSG1\n         B     RETURN\nNOTMTD   XC    CAMVOL,CAMVOL\n         MVC   RESPONSE(L'ERRMSG2),ERRMSG2\n         B     RETURN\n         EJECT\nDSNREQST OC    CAMVOL,CAMVOL\n         BNZ   VOLOK\n         DC    H'0'\nVOLOK    XC    COMMAREA,COMMAREA\nNEXTDSCB BAL   8,CCHHRINC\n         CLC   LASTFMT1,CCHHR\n         BL    ENDOFVOL\n         OBTAIN FMT1DSCB\n         LTR   15,15\n         BNZ   VTOCERR\n         CLI   WORKA+44,C'1'\n         BNE   NEXTDSCB\nGOTF1    MVC   DSN,WORKA\n         XR    3,3\n         IC    3,WORKA+53         CRTDT(YR)\n         CVD   3,DBL\n         UNPK  CRTDT(2),DBL+6(2)\n         OI    CRTDT+1,240\n         LH    3,WORKA+54         CRTDT(DAY)\n         CVD   3,DBL\n         UNPK  CRTDT+2(3),DBL+6(2)\n         OI    CRTDT+4,240\n*\n*\n*\n*       AREA FOR CALCULATION OF DS SIZE\n*\n*\n         SR    R7,R7             CYLINDER COUNTER\n         LR    R3,R7             TRACK COUNTER\n         LR    R4,R7             EXTENT COUNTER\n         MVC   CCSAVE,CCHHR      SAVE CCHHR\n         LA    R5,WORKA+105      ---> TO 1ST EXTENT\n         LA    R6,3              MAX OF 3 EXTENT IN FMT1 DSCB\nEX1      BAL   R8,EXTENT         GO ACCUMULATE.\n         B     DOEXT             NO MOVE\n         BCT   R6,EX1            LOOP\nEX2      OC    WORKA+135(5),WORKA+135 ANY MORE EXTENTS\n         BZ    DOEXT             NO\n         MVC   CCHHR,WORKA+135\n         OBTAIN FMT1DSCB         GET FORMAT 2 OR 3 DSCB\n         CH    R15,=H'4'         OK?\n         BNL   DOEXT             NO IGNORE IT\n         CLI   WORKA+44,C'3'     TYPE 3 ?\n         BNE   EX2               NO TRY AGAIN.\n         MVC   WORKA+44(90),WORKA+45 CONDENSE DSCB TO MAKE CONTIGUOUS\n         LA    R5,WORKA+4        FIST SET\n         LA    R6,13             MAX OF 13 EXTENTS LEFT\nEX3      BAL   R8,EXTENT         GO ACCUMULATE\n         B     DOEXT             NO MORE\n         BCT   R6,EX3            LOOP\nDOEXT    MH    R7,TRKSCYL        CONVERT CYLS TO TRACKS\n         AR    R7,R3             +TRACKS\n         CVD   R7,DBL             CONVERT\n         UNPK  TRKS(5),DBL+5(3)   MOVE TO OUTPUT\n         OI    TRKS+4,X'F0'       MAKE PRINTABLE\n         MVC   CCHHR,CCSAVE       RESTORE CCHHR\n         B     ENDOFVOL\nEXTENT   DS    0H\n*        R5 ---> CURRENT EXTENT POINTER\n*        R7      CUMULATIVE CYLINDERS\n*        R3      CUMULATIVE TRACKS\n*        R4      NO OF EXTENTS\n         CLI     0(R5),0         ANY MORE EXTENTS?\n         BCR     8,R8             NO EXIT AND INDICATE\n         CLI     0(R5),X'80'     SPLIT CYLINDERS?\n         BNE     EXT1            NO\n         MVI     TRKS+6,C'?'   FLAG SPACE AS INCORRECT\nEXT1     MVC     DBL,2(R5)       ALIGN\n         LA      R4,1(R4)        +1   EXTENT\n         AH      R7,DBL+4        +CYL END\n         AH      R3,DBL+6        +TRK END\n         SH      R7,DBL          -CYL START\n         SH      R3,DBL+2        -TRK START\n         AH      R3,=H'1'        CORRECT NUMBER OF TRACKS\n         LA      R5,10(R5)       NEXT FIELD\n         B       4(R8)\n         SPACE 3\nENDOFVOL XR    15,15\n         B     RETURN\n         EJECT\nSCRREQST OC    CAMVOL,CAMVOL\n         BNZ   SCROK\n         DC    H'0'\nSCROK    MVC   CAMDSN,DSN\n         XC    COMMAREA,COMMAREA\n*        CLC   CAMDSN(4),=C'SYS1'                          AXC-CBT\n*        CLC   CAMDSN(5),=C'SYS1.'                         AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n*        CLC   CAMDSN(5),=C'SYS2.'                         AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n*        CLC   CAMDSN(5),=C'PROD.'                         AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n*        CLC   CAMDSN(4),=C'CBT.'                          AXC-CBT\n*        BE    NOSCR                                       AXC-CBT\n         LOCATE LOCATE\n         LTR   15,15\n         BNZ   NOUNCAT\n         CLI   WORKA+1,1        MORE THAN 1 VOL?\n         BNE   NOSCR            YES\n         CLC   CAMVOL,WORKA+6   CATLGD ON DIFFERENT VOLUME?\n         BNE   NOUNCAT          YES ... DON'T UNCAT\n         CATALOG UNCATLG\n         LTR   15,15\n         BNZ   NOSCR            COULDN'T UNCATLG ... DON'T SCRATCH\nNOUNCAT  XC    VOLSEQ,VOLSEQ    CLEAR JUST IN CASE USED\n         SR    R0,R0            INDICATE NO UCB                 ZOS-U\n         SCRATCH SCRATCH\n         LTR   15,15\n         BZ    GOODSCR\nNOSCR    MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'ERRMSG3),ERRMSG3\n         CVD   R15,DBL             RETURN CODE FROM SCRATCH     ZOS-U\n         OI    DBL+7,X'0F'                                      ZOS-U\n         UNPK  RESPONSE+49+11(3),DBL+6(2)                       ZOS-U\n         MVI   RESPONSE+49+11,C' '                              ZOS-U\n         LH    R14,VOLLIST+12       GET STATUS CODE             ZOS-U\n         N     R14,=A(255)                                      ZOS-U\n         CVD   R14,DBL                                          ZOS-U\n         OI    DBL+7,X'0F'                                      ZOS-U\n         UNPK  RESPONSE+49+14(3),DBL+6(2)                       ZOS-U\n         MVI   RESPONSE+49+14,C' '                              ZOS-U\n         B     RETURN\nGOODSCR  MVC   DSN,CAMDSN\n         MVC   RESPONSE+49(L'SCRMSG1),SCRMSG1\n         B    RETURN\n         EJECT\nCCHHRINC XR    1,1\n         IC    1,CCHHR+4\n         LA    1,1(1)\n         STC   1,CCHHR+4\n         CH    1,DSCBTRK\n         BCR   13,8\n         MVI   CCHHR+4,1\n         LH    1,CCHHR+2\n         LA    1,1(1)\n         STH   1,CCHHR+2\n         CH    1,TRKSCYL\n         BCR   4,8\n         XC    CCHHR+2(2),CCHHR+2\n         LH    1,CCHHR\n         LA    1,1(1)\n         STH   1,CCHHR\n         BR    8\n         EJECT\nFMT1DSCB CAMLST SEEK,CCHHR,CAMVOL,WORKA\nFMT4DSCB CAMLST SEARCH,FMT4DSN,CAMVOL,WORKA\nSCRATCH  CAMLST SCRATCH,CAMDSN,,VOLLIST,,OVRD\nLOCATE   CAMLST NAME,CAMDSN,,WORKA\nUNCATLG  CAMLST UCATDX,CAMDSN\n         EJECT\nCAMDSN   DC    CL44' '\nVOLLIST  DC    H'1'\nDEVTYPE  DS    XL4\nCAMVOL   DC    CL6' '\nVOLSEQ   DC    H'0'\nCCHHR    DC    XL5'0'\nCCSAVE   DC    XL5'0'\n         CNOP  0,4\nWORKA    DS    265C\nFMT4DSN  DC    44X'04'\nLASTFMT1 DC    XL5'0'\nDSCBTRK  DC    H'0'\nTRKSCYL  DC    H'0'\nERRMSG1  DC    C'ERROR ACCESSING VTOC'\nERRMSG2  DC    C'ERROR ACCESSING VOLUME'\nERRMSG3  DC    CL20'NOT DELETED'\nERRMSG4  DC    CL20'OBTAIN ERROR RC XX'                         ZOS-U\nSCRMSG1  DC    CL20'GONE'\nDBL      DC    D'0'\n         LTORG\n**                           EQUATES FOR SYMBOLIC REG USAGE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CBTJCL": {"ttr": 1027, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x121\\x1f\\x01\\x121\\x1f\\x15\\x19\\x00\\x08\\x00\\x08\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf0\\xf4\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-06T15:19:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "OLDF046"}, "text": "//CBT100 JOB 527TSO000S0008,'CBT100',CLASS=J,MSGCLASS=6,\n// NOTIFY=TS15500\n//STEP01   EXEC BANNER,P='CBT100  HYDRO   SCRATCH PACKRAT ',COPY=4\n// EXEC ASMBLR,SO=6\n//SYSIN DD DSN=TS15500.CBT100.PDS(PACKRAT),DISP=SHR\n// EXEC ASMBLR,SO=6\n//SYSIN DD DSN=TS15500.CBT100.PDS(BACKEND),DISP=SHR\n// EXEC LINKX,SO=6,LIB='SYS2.MLINKLIB',NAME=CBT100\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PACKRAT": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x121\\x1f\\x01\\x121\\x1f\\x15\\x19\\x01\\xf4\\x01\\xf4\\x00\\x00\\xd6\\xd3\\xc4\\xc6\\xf0\\xf4\\xf6@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-06T15:19:00", "lines": 500, "newlines": 500, "modlines": 0, "user": "OLDF046"}, "text": "PACKRAT  CSECT\n*                                                          AXC-CBT\n*    ****** CBT CHANGED HOW MASS MUTUAL WAS CHECKING FOR   AXC-CBT\n*           AN AUTHORIZED TSO USERS. THEY CHECKED THE      AXC-CBT\n*           OPERATOR BIT FROM UADS. I LINK TO A PROGRAM    AXC-CBT\n*           CALLED AON (IN FILE 227 OF THIS TAPE) TO       AXC-CBT\n*           CHECK FOR AN AUTHORIZED (IE. TECH SUPPORT)     AXC-CBT\n*           TSO USERS. YOU WILL PROBABLY WHAT TO DO        AXC-CBT\n*           YOUR OWN CHECKING, REMOVE THE LINK TO AON      AXC-CBT\n*           ANYWAYS BECAUSE YOU PROBABLY DON'T CALL YOUR   AXC-CBT\n*           CHECKER BY THAT NAME. *******                  AXC-CBT\n*                                                          AXC-CBT\n*          A FEW CHANGES BY CBT. ALL ARE MARKED BY         AXC-CBT\n*           1. CHECK FOR THE FOLOIWNG 1ST LEVELS:          AXC-CBT\n*              SYS1. SYS2. CBT. PROD.                      AXC-CBT\n*           2. CHANGED TITLE FROM MASS MUTUAL TO CBT       AXC-CBT\n*                                                          AXC-CBT\n*        THIS  IS THE MASS MUTUAL DISK PACK MAINTENANCE ROUTINE\n*        IT'S  ONLY FUNCTION IS TO EXAMINE THE VTOC OF A\n*        PARTICULAR VOLUME AND SCRATCH THE DATASETS SPECIFIED.\n*        THIS MODULE IS THE TERMINAL INTERFACE MODULE\n*        IT INVOKES A BACKEND MODULE TO DO THE ACTUAL SCRATCH\n*        AND UNCATALOG.\n*        THE TERMINAL INTERFACE WAS WRITTEN BY GERRY ROBERTS.\n*        THE BACKEND WAS WRITTEN BY .......... ? IT WAS PART OF\n*        THE MVT VERSION OF HYDRO.\n*        THE UNCATALOG ONLY OCCURS IF THE DATA SET IS\n*        CATALOGUED ON THE VOLUME CURRENTLY BEING EXAMINED.\n*        IF IT IS A MULTI VOLUME DATA SET IT IS NOT SCRATCHED\n*        OR UNCATALOGUED.\n*        IF THE DSNAME BEGINS WITH SYS1 IT IS NOT SCRATCHED OR\n*        UNCATALOGUED.\n*        IN ADDITION TO THE DATA SET NAME, THE CREATION DATE\n*        AND NUMBER OF TRACKS ARE DISPLAYED.\n*        DATA SETS CREATED ON THE SCAN DATE ARE HIGHLIGHTED.\n*        THE SCAN DATE CAN BE SPECIFIED ON THE INITIAL PROMPT\n*        IF IT IS NOT SPECIFIED THEN THE CURRENT DATE IS USED.\n*        THIS PROGRAM HAS BEEN USED ON 3330 AND 3350 DEVICES.\n*        IT HAS BEEN RUN UNDER MVS 3.8 VANILLA.\n*        IT ALSO HAS BEEN RUN UNDER MVS3.8 MVS/SP1.1 8106  AXC-CBT\n*        IT LINK EDITED WITH AC=1\n*        THE USER MUST HAVE OPERATOR AUTHORIZATION.\n*        NO WARRANTIES ARE EXPRESSED OR IMPLIED IN  THIS CODE\n*        USE IT AT YOUR OWN RISK.\n*        THE PROMPT SCREEN ALLOWS YOU TO ENTER THE VOLSER YOU\n*        WISH TO EXAMINE AND THE SCAN DATE .  ENTERING ANYTHING\n*        IN THE ACTION FIELD WILL CASE THE PROGRAM TO END\n*        UNLESS A VOLSER OR SCAN DATE HAS BEEN SPECIFIED IN WHICH CASE\n*        THE ACTION FIELD IS IGNORED.\n*        WHEN THE ENTIRE VTOC HAS BEEN SCANNED THE PROMPT IS RETURNED\n*        GIVING YOU THE OPPORTUNITY TO SPECIFY ANOTHER VOLUME OR END.\n*        A FULL SCREEN AF DATA SETS CAN BE SCRATCHED AT A TIME.\n*        HITTING THE ENTER KEY PAGES YOU FORWARD THROUGH THE VTOC.\n*        PLACING AN 'XX' IN FRONT OF THE DATA SET NAME CAUSES IT\n*        TO BE SCRATCED AND UNCATALOGUED. ANYTHING OTHER THAN 'XX'\n*        IS IGNORED .  MODIFYING THE VOLUME OR SCAN DATE ON OTHER\n*        THAN THE INITIAL PROMPT WILL RESULT IN AN ERROR AND\n*        TRANMISSION OF ANY INITIAL PROMPT .\n         STM   RE,RC,12(RD)            SAVE REGS\n         LR    R4,RF                   SET R4\n         LA    R7,4095(R4)             SET R7 AS SECOND\n         LA    R7,1(R7)                BASE REGISTER\n         USING PACKRAT,R4,R7           ESATBLISH BASE R4 R7\n         LR    R3,RD                   AND DO\n         LA    RD,SAVEA                SAVE AREA\n         ST    RD,8(,R3)               CHAINNING.\n         ST    R3,4(,RD)\n         USING CPPL,R1                 ADDRESSABILITY FOR CPPL\n         L     R2,CPPLPSCB             POINT TO PSCB\n         USING PSCB,R2\n         LINK  EP=AON                                      AXC-CBT\n         B     PUT1                                        AXC-CBT\n         TM    PSCBATR1,PSCBCTRL       OPER AUTHORIZED.\n         BNO   ENDUP                   NO THEN GO AWAY.\nPUT1     DS    0H\n         MVI   RETCD,X'00'\n         NI    ACTFLAG,X'00'\n         NI    VOLFLAG,X'00'\n         XC    ERRMSG,ERRMSG           CLEAR OUT ERRMSG AREA\n         XC    VOLSAVE,VOLSAVE         VOLSER\n         XC    DATE,DATE               SCAN DATE\n         XC    PARMAREA,PARMAREA\nPUTERR   DS    0H\n         LA    R5,PROMPT               POINT TO PROMPT AREA\n         TPUT  (5),PRMPTLEN,FULLSCR    PUT IT OUT\nREAD1    DS    0H\n         LA    R1,INPUT\n         TGET  (1),1500,ASIS           READ THE SCREEN\n         LTR   RF,RF                   CHECK RETCD\n         BZ    READOK\n         STC   R15,RETCD\n         CLI   RETCD,X'08'             ATTENTION INTERRUPT\n         BE    ENDUP                   YES THEN QUIT\n*        MVC   ERRMSG,READERR          ELSE MOVE IN ERROR MSG\n*        B     PUTERR\nREADOK   DS    0H\n         BAL   RA,TRANSLAT       TRANSLATE TO UPPER CASE.\n         LA    R8,3(R8)     BUMP PAST THE CURRENT CURSOR POSITION\n         CLC   WORKSBA,0(R8)    IS THIS A WORK SCREEN\n         BE    WORKPROC         GO PROCESS WORK SCREEN\n         OI    VOLFLAG,PASSVOL  SET FLAG TO SIGNIFY PASS VOLSER\n         CLC   VOLSBA,0(R8)     IS THIS THE VOLSER SBA\n         BE    MOVEVOL          YES OK\n         CLC   ENDSBA,0(R8)     ACTION SBA\n         BE    ENDUP\n         MVC   ERRMSG,VOLERR    NO THEN ERROR\n         B     PUTERR           PUT IT OUT\nMOVEVOL  DS    0H\n         MVC   VOLSAVE,3(R8)    MOVE THE VOLSER\n         LA    R8,9(R8)         BUMP PAST SBA AND VOLSER\n         CLC   SCANSBA,0(R8)    SCAN DATE SPECIFIED\n         BE    MOVEDATE         USE DATE SPECIFIED\n         TIME  DEC              SET A DEFAULT DATE\n         ST    R1,WORD\n         UNPK  DATE,WORD+1(3)   UNPACK IT\n         B     SETFLAG\nMOVEDATE DS    0H\n         MVC   DATE,3(R8)       MOVE IN SCAN DATE SPECIFIED\nSETFLAG  DS    0H\n         OI    ACTFLAG,GETDSNS  SET ACTION FLAG\nINITWORK DS    0H\n         LA    R6,ENTRY           POINT TO WORK SCREEN ENTRY\n         USING WRKDSECT,R6\n         LA    R5,15              LOOP CONTROL\nRESET    DS    0H\n         NI    ATTR,X'F7'         RESET HIGH INTENSITY FLAG\n         XC    DATASETN,DATASETN  CLEAR DATASET NAME FIELD\n         XC    CREATDAY,CREATDAY  CREATION DATE FIELD\n         XC    TRACKS,TRACKS      TRACKS FIELD\n         LA    R6,ENTRYLEN(R6)    BUMP POINTER\n         BCT   R5,RESET           DO SOME MORE\nCALLPROC DS    0H\n         TM    ACTFLAG,GETDSNS  CALL BACKGROUND TO GET DSNAMES?\n         BZ    CALLBACK         NO THEN CALL BACKGROUND\nVOLMVE   DS    0H\n         TM    VOLFLAG,PASSVOL  1ST TIME PASS VOLSER ?\n         BZ    CLRPARM          NO\n         MVC   PARMAREA(L'VOLPARM),VOLPARM YES... MOVE IN VOLSER.\n         B     CALLBACK          GO CALL\nCLRPARM  DS    0H\n         XC    PARMAREA,PARMAREA CLEAR PARM AREA\nCALLBACK DS    0H                CALL BACKGROUND\n         NI    VOLFLAG,X'00'     RESET CALL FLAG\n         LA    R1,PARM           POINT TO PARMS\n         CALL  BACKEND           CALL\n         CLC   ERRMASK,PARMAREA ANY ERRORS\n         BNE   CHKEMPTY         NO... CHECK IF ANY RETURNED\n         MVC   ERRMSG,PARMAREA  MOVE IN ERROR MSG\n         B     PUTERR           PUT OUT THE ERROR MESSAGE\nCHKEMPTY DS    0H\n         CLC   EMPTY,PARMAREA   ANY DATA RETURNED.\n         BNE   MOVENAME         YES... GO PROCESS IT\n         OI    ACTFLAG,LASTTIME SET EOV FLAG\n         B     PUTWORK          GO PUT OUT WORK SCREEN\nMOVENAME DS    0H\n         TM    ACTFLAG,GETDSNS  IS THIS SCRATCH PROCESSING\n         BZ    MOVEANS          YES THEN GO MOVE RESULT OF SCRATCH\n         LA    R6,ENTRY         POINT TO WORK SCREEN\n         LA    R5,14            SET LOOP COUNTER\n         USING WRKDSECT,R6      ESTABLISH ADDRESSABILITY\nCHKFIELD DS    0H\n         CLC   EMPTY,DATASETN   CHECK IF DATASET FIELD IS EMPTY\n         BE    MOVEIT           YES GO MOVE IN NAME\n         LA    R6,ENTRYLEN(R6)  BUMP TO NEXT ENTRY\n         BCT   R5,CHKFIELD      ANY MORE\n         MVC   DATASETN(L'PARMAREA),PARMAREA MOVE IN 15TH NAME.\n         CLC   CREATDAY,DATE     CREATED ON SCAN DATE\n         BNE   PUTWORK           NO ... PUT OUT SCREEN\n         OI    ATTR,X'08'        YES SET HIGH INTENSITY\n         B     PUTWORK           GO NOW PUT OUT SCREEN.\nMOVEIT   DS    0H\n         MVC   DATASETN(L'PARMAREA),PARMAREA MOVE IN DATASET NAME.\n         CLC   CREATDAY,DATE     CREATE EQUAL TO SCAN DATE\n         BNE   CALLPROC          NO GET SOME MORE NAMES.\n         OI    ATTR,X'08'        SET HIGH INTENSITY ON\n         B     CALLPROC          GO GET MORE NAMES.\nPUTWORK  DS    0H\n         NI    ACTFLAG,X'10'     RESET ACTION FLAG\n         MVC   SCNDATE,DATE      MOVE IN DATE\n         MVC   VOLUME,VOLSAVE    MOVE IN VOLSER\n         LA    R5,WORKSCRN       POINT TO WORK SCREEN\n         TPUT  (5),WORKLEN,FULLSCR  PUT IT OUT\n         B     READ1            GO DO A READ\nWORKPROC DS    0H\n         LA    R5,7             CURRENT CURSOR POSS & WRKSCR SBA\n         CR    R1,R5            WAS ANYTHING ENTERED\n         BH    SCRPROC          YES GO PROCESS SCRATCHES\n         OI    ACTFLAG,GETDSNS  SET FLAG TO GET DSNS\n         TM    ACTFLAG,LASTTIME WAS THIS EOV\n         BZ    INITWORK         NO ... THEN GET SOMEMORE\n         B     PUT1             YES.. THEN GET NEXT VOLUME\nSCRPROC  DS    0H\n         LA    R8,4(R8)        BUMP  WORKSBA\n         LR    R9,R1           SAVE LENGTH OF INPUT\n         LA    R6,7            LENGTH OF CURSOR POSS AND WRKSBA\n         SR    R9,R6           DECREMENT CURSOR & SBA\n         LA    R6,ENTRY         POINT TO WORK SCREEN\n         LA    R5,15            SET LOOP COUNTER\n         USING WRKDSECT,R6      ESTABLISH ADDRESSABILITY\nCKSCRSBA DS    0H\n         NI    2(R8),X'FE'      DECREMENT THE SBA BY ONE\n         CLC   SCRSBA,0(R8)     CHECK IF THIS IS DATA SET TO SCR\n         BE    NAMEMOVE         YES GO MOVE NAME\n         LA    R6,ENTRYLEN(R6)  BUMP TO NEXT ENTRY\n         BCT   R5,CKSCRSBA      ANY MORE\n         MVC   ERRMSG,READERR   NO ERROR\n         B     PUTERR           PUT OUT PROMPT\nNAMEMOVE DS    0H\n         CLC   INDSCR,3(R8)      WAS PROPER INDICATOR SET?\n         BNE   SKIPIT            NO THEN SKIP THIS GUY\n         MVC   PARMAREA,DATASETN MOVE IN DATASET NAME TO SCRATCH\n         NI    ACTFLAG,X'10'     RESET ACTION FLAG\n         B     CALLPROC          GO GET HIM\nMOVEANS  DS    0H\n         MVC   DATASETN(L'PARMAREA),PARMAREA\nSKIPIT   DS    0H\n         LA    R8,5(R8)        BUMP TO NEXT SBA\n         LA    RA,5            DECREMENT LENGTH OF INPUT\n         SR    R9,RA           FROM SAVED LENTGH\n         LTR   R9,R9           ANY LEFT\n         BP    CKSCRSBA        YES.  GO PROCESS\n         B     PUTWORK         GO GET THEM.\nENDUP    DS    0H\n         LA    R5,CLEARSCR\n         TPUT  (5),CLEARLEN,FULLSCR\n         L     RD,SAVEA+4\n         RETURN (14,12)\nTRANSLAT DS    0H\n         LA    R8,INPUT         POINT TO START OF DATA\n         ST    R1,FULLENGH     SAVE FULL LENGTH\nTRLOOP   ST    R1,SAVELEN       SAVE LEN OF DATA TO TRT\n         LR    R12,R1           PUT DATA LENGTH IN R12\n         C     R12,=F'256'      MORE THAN 256\n         BNH   EXTRT            NO THEN DO TRT\n         L     R12,=F'255'\n         EX    R12,INSTR        TRANSLATE 255 WORTH\n         L     R1,SAVELEN       RESTORE R1\n         LA    R12,1(R12)       RESTORE R12 TO 256\n         SR    R1,R12           SUBTRACT OUT TR DATA LEN OF 256\n         LA    R8,0(R12,R8)     BUMP POINTER\n         B     TRLOOP           GO AGAIN\nEXTRT    BCTR  R12,0            MINUS 1 FOR EXEECUTE\n         EX    R12,INSTR        TRANSLATE\n         LA    R8,INPUT         RESTORE R8\n         L     R1,FULLENGH     RESTOR1 R1\n         BR    RA              RETURN TO CALLER\nINSTR    TR    0(0,R8),TRANSTBL   TRANSLATE TO UPPER CASE !!!!\n         LTORG\nPROMPT   DC    X'27F5C3115D7E11404E1D6011404F'\n*        DC    C'MASSACHUSETTS  MUTUAL  LIFE  INSURANCE  CO' AXC-CBT\n         DC    C'    CONNECTICUT BANK AND TRUST COMPANY    ' AXC-CBT\n         DC    X'11C1E9'\n         DC    C'DISK  MANAGEMENT  ROUTINE'\n         DC    X'11C37A'\n         DC    C'VOLUME'\n         DC    X'1DC811C4C1'\n         DC    CL6' '\n         DC    X'1DF011C4C7'\n         DC    X'11C4E7'\n         DC    C'SCAN DATE'\n         DC    X'1DC8'\n         DC    CL5' '\n         DC    X'1D6011C54A'\n         DC    C'ACTION'\n         DC    X'1DC811C5D1'\n         DC    CL3' '\n         DC    X'1D60'\n         DC    X'11C76A'\n         DC    C'ENTER THE VOLUME YOU WISH TO EXAMINE'\n         DC    C'  AND THE SCAN DATE.'\n         DC    X'11C87A'\n         DC    C'ANY DATASET CREATED ON THE SCAN DATE'\n         DC    C' WILL BE HIGHLIGHTED.'\n         DC    X'114A4A'\n         DC    C'THE DEFAULT SCAN DATE IS TODAYS DATE. '\n         DC    X'114D7A'\nERRMSG   DC    CL70' '\n         DC    X'11C4C113'\nPRMPTLEN EQU   *-PROMPT\nWORKSCRN DC    X'27F5C3115D7E1140C41D7DC111404E1D6011404F'\n*        DC    C'MASSACHUSETTS  MUTUAL  LIFE  INSURANCE  CO' AXC-CBT\n         DC    C'    CONNECTICUT BANK AND TRUST COMPANY    ' AXC-CBT\n         DC    X'11C1E9'\n         DC    C'DISK  MANAGEMENT  ROUTINE'\n         DC    X'11C37A'\n         DC    C'VOLUME'\n         DC    X'1DC811C4C1'\nVOLUME   DC    CL6' '\n         DC    X'1DF011C4C7'\n         DC    X'11C4E7'\n         DC    C'SCAN DATE'\n         DC    X'1DC8'\nSCNDATE  DC    CL5' '\n         DC    X'1D6011C54A'\n         DC    C'DATASET NAME'\n         DC    X'11C5F8'\n         DC    C'CREATION DATE   TRACKS'\nENTRY    DC    X'11C6D41DC8'              6 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB1   DC    X'F0'\n         DC    X'11C6D8'\n         DC    C'  '\nDSNAME1  DC    CL70' '\n         DC    X'11C7E41DC8'        7 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB2   DC    X'F0'\n         DC    X'11C7E8'\n         DC    C'  '\nDSNAME2  DC    CL70' '\n         DC    X'11C8F41DC8'        8 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB3   DC    X'F0'\n         DC    X'11C8F8'\n         DC    C'  '\nDSNAME3  DC    CL70' '\n         DC    X'114AC41DC8'        9 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB4   DC    X'F0'\n         DC    X'114AC8'\n         DC    C'  '\nDSNAME4  DC    CL70' '\n         DC    X'114BD41DC8'        10 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB5   DC    X'F0'\n         DC    X'114BD8'\n         DC    C'  '\nDSNAME5  DC    CL70' '\n         DC    X'114CE41DC8'        11 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB6   DC    X'F0'\n         DC    X'114CE8'\n         DC    C'  '\nDSNAME6  DC    CL70' '\n         DC    X'114DF41DC8'        12 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB7   DC    X'F0'\n         DC    X'114DF8'\n         DC    C'  '\nDSNAME7  DC    CL70' '\n         DC    X'114FC41DC8'        13 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB8   DC    X'F0'\n         DC    X'114FC8'\n         DC    C'  '\nDSNAME8  DC    CL70' '\n         DC    X'1150D41DC8'        14 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB9   DC    X'F0'\n         DC    X'1150D8'\n         DC    C'  '\nDSNAME9  DC    CL70' '\n         DC    X'11D1E41DC8'        15 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB10  DC    X'F0'\n         DC    X'11D1E8'\n         DC    C'  '\nDSNAME10 DC    CL70' '\n         DC    X'11D2F41DC8'        16 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB11  DC    X'F0'\n         DC    X'11D2F8'\n         DC    C'  '\nDSNAME11 DC    CL70' '\n         DC    X'11D4C41DC8'        17 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB12  DC    X'F0'\n         DC    X'11D4C8'\n         DC    C'  '\nDSNAME12 DC    CL70' '\n         DC    X'11D5D41DC8'        18 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB13  DC    X'F0'\n         DC    X'11D5D8'\n         DC    C'  '\nDSNAME13 DC    CL70' '\n         DC    X'11D6E41DC8'        19 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB14  DC    X'F0'\n         DC    X'11D6E8'\n         DC    C'  '\nDSNAME14 DC    CL70' '\n         DC    X'11D7F41DC8'        20 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB15  DC    X'F0'\n         DC    X'11D7F8'\n         DC    C'  '\nDSNAME15 DC    CL70' '\n         DC    X'115A5E1D60'\n         DC    C'INDICATE WHICH DATASET YOU WISH TO SCRATCH'\n         DC    C' BY PLACING'\n         DC    X'115B6F'\n         DC    C'AN XX IN FRONT OF THE DATASET NAME'\n         DC    X'115C7F'\n         DC    C'THEN HIT ENTER TO PROCEED.'\n         DC    X'11C6D513'\nWORKLEN  EQU   *-WORKSCRN\nCLEARSCR DC    X'27F5C3115D7E1140403C4040001140C113'\nCLEARLEN EQU   *-CLEARSCR\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nPASSVOL  EQU   X'80'\nGETDSNS  EQU   X'40'\nSCRDSNS  EQU   X'20'\nLASTTIME EQU   X'10'\nSAVEA    DC    18F'0'\nPARM     DC    A(PARMAREA)\nPARMAREA DS    CL70\nRETCD    DC    XL1'00'\nVOLFLAG  DC    XL1'00'\nACTFLAG  DC    XL1'00'\nERRMASK  DC    CL4'ERROR'\nINDSCR   DC    CL2'XX'\nEMPTY    DC    F'0'\nWORD     DC    XL4'0000000F'\nVOLPARM  DS    0CL10\n         DC    CL4'VOL '\nVOLSAVE  DC    CL6' '\nDATE     DC    CL5' '\nSAVELEN  DC    F'0'\nFULLENGH DC    F'0'\nVOLSBA   DC    XL3'11C4C1'\nSCANSBA  DC    XL3'11C4F1'\nENDSBA   DC    XL3'11C5D1'\nWORKSBA  DC    XL3'1140C5'\nREADERR  DC    CL70'ERROR ON TGET TRY AGAIN'\nVOLERR   DC    CL70'PLEASE SPECIFY A VOLUME OR ACTION.'\nINPUT    DC    400F'0'\nTRANSTBL DS    0H\n*\n*   IBM 3270 TRANSLATE TABLE TRANSLATES\n*   EBCIDIC SMALL AND CAPITALS TO CAPITALS ONLY\n*\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'000102030405060708090A0B0C0D0E0F' 0\n         DC    X'101112131415161718191A1B1C1D1E1F' 1\n         DC    X'202122232425262728292A2B2C2D2E2F' 2\n         DC    X'303132333435363738393A3B3C3D3E3F' 3\n         DC    X'404142434445464748494A4B4C4D4E4F' 4\n         DC    X'505152535455565758595A5B5C5D5E5F' 5\n         DC    X'606162636465666768696A6B6C6D6E6F' 6\n         DC    X'707172737475767778797A7B7C7D7E7F' 7\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F' 8\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F' 9\n         DC    X'A0E1E2E3E4E5E6E7E8E9AAABACADAEAF' A\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' B\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' C\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' D\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' E\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF' F\nWRKDSECT DSECT\nSCRSBA   DS   CL3       SBA\n         DS   XL2       ATTR\nSCRIND   DS   CL2       SCRATCH INDICATOR\nSF       DS   XL1       START FIELD\nATTR     DS   XL1       ATTRIBUTE BYTE\n         DS   CL5       SBA &LINE NUMBER\nDATASETN DS   CL44\n         DS   CL5\nCREATDAY DS   CL5\n         DS   CL6\nTRACKS   DS   CL5\n         DS   CL5\nENTRYLEN EQU  *-SCRSBA\n         IKJPSCB\n         IKJCPPL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PACKRAT$": {"ttr": 1038, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x11\\x01\\x121\\x1f\\x01\\x15\\x03/\\x19)\\x00!\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2015-02-01T19:29:11", "lines": 33, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//* ------------------------------------------------- *//\n//*        ASM LINKEDIT Z/OS VERSION OF PACKRAT       *//\n//* ------------------------------------------------- *//\n//*\n//*     YOU HAVE TO ASSEMBLE BOTH PACKRATZ AND BACKENDZ\n//*      SOURCE MEMBERS.\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE046(PACKRATZ)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE046(BACKENDZ)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n SETSSI  CB490046\n SETCODE AC(0)\n NAME    PACKRAT(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PACKRAT#": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\n\\x00'\\x01\\x121\\x1f\\x01\\x15\\x03/\\x19(\\x00$\\x00\\x1c\\x00\\x00\\xc1\\xe2\\xd4\\xd1\\xc3\\xd3@@@@\"", "ispf": {"version": "01.10", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2015-02-01T19:28:27", "lines": 36, "newlines": 28, "modlines": 0, "user": "ASMJCL"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//* ------------------------------------------------- *//\n//*        ASM LINKEDIT Z/OS VERSION OF PACKRAT       *//\n//*          USING THE ULUT UCB LOOKUP METHOD         *//\n//* ------------------------------------------------- *//\n//*\n//*     YOU HAVE TO ASSEMBLE BOTH PACKRATU AND BACKENDU\n//*      SOURCE MEMBERS.\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(OBJECT,NODECK,NOESD,NORLD)\n//SYSLIB   DD DISP=SHR,DSN=SYS1.MACLIB\n//         DD DISP=SHR,DSN=SYS1.MODGEN\n//         DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE046   <== ULU**** MACROS\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE046(PACKRATU)\n//         DD DISP=SHR,DSN=SBGOLOB.CBT490.FILE046(BACKENDU)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//SYSLIN   DD UNIT=VIO,SPACE=(TRK,1),DISP=(,PASS),DCB=BLKSIZE=3200,\n//            DSN=&&TEMP\n//*\n//LKED   EXEC  PGM=HEWL,\n//       PARM='NCAL,MAP,LIST,LET'\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(2048,(200,20))\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//SYSLMOD  DD  DISP=SHR,DSN=SYS1.W$$.LINKLIB\n//OBJECT   DD  DISP=(OLD,DELETE),DSN=&&TEMP\n//SYSLIN   DD  *\n INCLUDE OBJECT\n ENTRY   PACKRAT\n SETSSI  CB490046\n SETCODE AC(0)\n NAME    PACKRATU(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PACKRATU": {"ttr": 1283, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x05\\x01\\x121\\x1f\\x01\\x121o\\x13\"\\x01\\xff\\x01\\xf6\\x00\\x00\\xe4\\xd3\\xe4\\xe3@@@@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-11T13:22:05", "lines": 511, "newlines": 502, "modlines": 0, "user": "ULUT"}, "text": "PACKRAT  CSECT\nPACKRAT  AMODE 31\nPACKRAT  RMODE 24\n*                                                          AXC-CBT\n*                                                                  ULUT\n*    ****** CHANGED FOR ESA 5.2.2 AND UP, TO USE ULUT              ULUT\n*           (UCB LOOKUP TABLE) METHOD OF OBTAINING THE             ULUT\n*           UCB OF THE VOLUME YOU WANT TO SEARCH.                  ULUT\n*                                                                  ULUT\n*    ****** CBT CHANGED HOW MASS MUTUAL WAS CHECKING FOR   AXC-CBT\n*           AN AUTHORIZED TSO USERS. THEY CHECKED THE      AXC-CBT\n*           OPERATOR BIT FROM UADS. I LINK TO A PROGRAM    AXC-CBT\n*           CALLED AON (IN FILE 227 OF THIS TAPE) TO       AXC-CBT\n*           CHECK FOR AN AUTHORIZED (IE. TECH SUPPORT)     AXC-CBT\n*           TSO USERS. YOU WILL PROBABLY WHAT TO DO        AXC-CBT\n*           YOUR OWN CHECKING, REMOVE THE LINK TO AON      AXC-CBT\n*           ANYWAYS BECAUSE YOU PROBABLY DON'T CALL YOUR   AXC-CBT\n*           CHECKER BY THAT NAME. *******                  AXC-CBT\n*                                                          AXC-CBT\n*          A FEW CHANGES BY CBT. ALL ARE MARKED BY         AXC-CBT\n*           1. CHECK FOR THE FOLOIWNG 1ST LEVELS:          AXC-CBT\n*              SYS1. SYS2. CBT. PROD.                      AXC-CBT\n*           2. CHANGED TITLE FROM MASS MUTUAL TO CBT       AXC-CBT\n*                                                          AXC-CBT\n*        THIS  IS THE MASS MUTUAL DISK PACK MAINTENANCE ROUTINE\n*        IT'S  ONLY FUNCTION IS TO EXAMINE THE VTOC OF A\n*        PARTICULAR VOLUME AND SCRATCH THE DATASETS SPECIFIED.\n*        THIS MODULE IS THE TERMINAL INTERFACE MODULE\n*        IT INVOKES A BACKEND MODULE TO DO THE ACTUAL SCRATCH\n*        AND UNCATALOG.\n*        THE TERMINAL INTERFACE WAS WRITTEN BY GERRY ROBERTS.\n*        THE BACKEND WAS WRITTEN BY .......... ? IT WAS PART OF\n*        THE MVT VERSION OF HYDRO.\n*        THE UNCATALOG ONLY OCCURS IF THE DATA SET IS\n*        CATALOGUED ON THE VOLUME CURRENTLY BEING EXAMINED.\n*        IF IT IS A MULTI VOLUME DATA SET IT IS NOT SCRATCHED\n*        OR UNCATALOGUED.\n*        IF THE DSNAME BEGINS WITH SYS1 IT IS NOT SCRATCHED OR\n*        UNCATALOGUED.\n*        IN ADDITION TO THE DATA SET NAME, THE CREATION DATE\n*        AND NUMBER OF TRACKS ARE DISPLAYED.\n*        DATA SETS CREATED ON THE SCAN DATE ARE HIGHLIGHTED.\n*        THE SCAN DATE CAN BE SPECIFIED ON THE INITIAL PROMPT\n*        IF IT IS NOT SPECIFIED THEN THE CURRENT DATE IS USED.\n*        THIS PROGRAM HAS BEEN USED ON 3330 AND 3350 DEVICES.\n*        IT HAS BEEN RUN UNDER MVS 3.8 VANILLA.\n*        IT ALSO HAS BEEN RUN UNDER MVS3.8 MVS/SP1.1 8106  AXC-CBT\n*        IT LINK EDITED WITH AC=1\n*        THE USER MUST HAVE OPERATOR AUTHORIZATION.\n*        NO WARRANTIES ARE EXPRESSED OR IMPLIED IN  THIS CODE\n*        USE IT AT YOUR OWN RISK.\n*        THE PROMPT SCREEN ALLOWS YOU TO ENTER THE VOLSER YOU\n*        WISH TO EXAMINE AND THE SCAN DATE .  ENTERING ANYTHING\n*        IN THE ACTION FIELD WILL CASE THE PROGRAM TO END\n*        UNLESS A VOLSER OR SCAN DATE HAS BEEN SPECIFIED IN WHICH CASE\n*        THE ACTION FIELD IS IGNORED.\n*        WHEN THE ENTIRE VTOC HAS BEEN SCANNED THE PROMPT IS RETURNED\n*        GIVING YOU THE OPPORTUNITY TO SPECIFY ANOTHER VOLUME OR END.\n*        A FULL SCREEN AF DATA SETS CAN BE SCRATCHED AT A TIME.\n*        HITTING THE ENTER KEY PAGES YOU FORWARD THROUGH THE VTOC.\n*        PLACING AN 'XX' IN FRONT OF THE DATA SET NAME CAUSES IT\n*        TO BE SCRATCED AND UNCATALOGUED. ANYTHING OTHER THAN 'XX'\n*        IS IGNORED .  MODIFYING THE VOLUME OR SCAN DATE ON OTHER\n*        THAN THE INITIAL PROMPT WILL RESULT IN AN ERROR AND\n*        TRANMISSION OF ANY INITIAL PROMPT .\n         STM   RE,RC,12(RD)            SAVE REGS\n         LR    R4,RF                   SET R4\n         LA    R7,4095(R4)             SET R7 AS SECOND\n         LA    R7,1(R7)                BASE REGISTER\n         USING PACKRAT,R4,R7           ESATBLISH BASE R4 R7\n         LR    R3,RD                   AND DO\n         LA    RD,SAVEA                SAVE AREA\n         ST    RD,8(,R3)               CHAINNING.\n         ST    R3,4(,RD)\n         USING CPPL,R1                 ADDRESSABILITY FOR CPPL\n         L     R2,CPPLPSCB             POINT TO PSCB\n         USING PSCB,R2\n         AGO   .SKIP1                                      ZOS\n         LINK  EP=AON                                      AXC-CBT\n         B     PUT1                                        AXC-CBT\n.SKIP1   ANOP                                              ZOS\n         TM    PSCBATR1,PSCBCTRL       OPER AUTHORIZED.\n         BNO   ENDUP                   NO THEN GO AWAY.\nPUT1     DS    0H\n         MVI   RETCD,X'00'\n         NI    ACTFLAG,X'00'\n         NI    VOLFLAG,X'00'\n         XC    ERRMSG,ERRMSG           CLEAR OUT ERRMSG AREA\n         XC    VOLSAVE,VOLSAVE         VOLSER\n         XC    DATE,DATE               SCAN DATE\n         XC    PARMAREA,PARMAREA\nPUTERR   DS    0H\n         LA    R5,PROMPT               POINT TO PROMPT AREA\n         TPUT  (5),PRMPTLEN,FULLSCR    PUT IT OUT\nREAD1    DS    0H\n         LA    R1,INPUT\n         TGET  (1),1500,ASIS           READ THE SCREEN\n         LTR   RF,RF                   CHECK RETCD\n         BZ    READOK\n         STC   R15,RETCD\n         CLI   RETCD,X'08'             ATTENTION INTERRUPT\n         BE    ENDUP                   YES THEN QUIT\n*        MVC   ERRMSG,READERR          ELSE MOVE IN ERROR MSG\n*        B     PUTERR\nREADOK   DS    0H\n         BAL   RA,TRANSLAT       TRANSLATE TO UPPER CASE.\n         LA    R8,3(R8)     BUMP PAST THE CURRENT CURSOR POSITION\n         CLC   WORKSBA,0(R8)    IS THIS A WORK SCREEN\n         BE    WORKPROC         GO PROCESS WORK SCREEN\n         OI    VOLFLAG,PASSVOL  SET FLAG TO SIGNIFY PASS VOLSER\n         CLC   VOLSBA,0(R8)     IS THIS THE VOLSER SBA\n         BE    MOVEVOL          YES OK\n         CLC   ENDSBA,0(R8)     ACTION SBA\n         BE    ENDUP\n         MVC   ERRMSG,VOLERR    NO THEN ERROR\n         B     PUTERR           PUT IT OUT\nMOVEVOL  DS    0H\n         MVC   VOLSAVE,3(R8)    MOVE THE VOLSER\n         LA    R8,9(R8)         BUMP PAST SBA AND VOLSER\n         CLC   SCANSBA,0(R8)    SCAN DATE SPECIFIED\n         BE    MOVEDATE         USE DATE SPECIFIED\n         TIME  DEC              SET A DEFAULT DATE\n         ST    R1,WORD\n         UNPK  DATE,WORD+1(3)   UNPACK IT\n         B     SETFLAG\nMOVEDATE DS    0H\n         MVC   DATE,3(R8)       MOVE IN SCAN DATE SPECIFIED\nSETFLAG  DS    0H\n         OI    ACTFLAG,GETDSNS  SET ACTION FLAG\nINITWORK DS    0H\n         LA    R6,ENTRY           POINT TO WORK SCREEN ENTRY\n         USING WRKDSECT,R6\n         LA    R5,15              LOOP CONTROL\nRESET    DS    0H\n         NI    ATTR,X'F7'         RESET HIGH INTENSITY FLAG\n         XC    DATASETN,DATASETN  CLEAR DATASET NAME FIELD\n         XC    CREATDAY,CREATDAY  CREATION DATE FIELD\n         XC    TRACKS,TRACKS      TRACKS FIELD\n         LA    R6,ENTRYLEN(R6)    BUMP POINTER\n         BCT   R5,RESET           DO SOME MORE\nCALLPROC DS    0H\n         TM    ACTFLAG,GETDSNS  CALL BACKGROUND TO GET DSNAMES?\n         BZ    CALLBACK         NO THEN CALL BACKGROUND\nVOLMVE   DS    0H\n         TM    VOLFLAG,PASSVOL  1ST TIME PASS VOLSER ?\n         BZ    CLRPARM          NO\n         MVC   PARMAREA(L'VOLPARM),VOLPARM YES... MOVE IN VOLSER.\n         B     CALLBACK          GO CALL\nCLRPARM  DS    0H\n         XC    PARMAREA,PARMAREA CLEAR PARM AREA\nCALLBACK DS    0H                CALL BACKGROUND\n         NI    VOLFLAG,X'00'     RESET CALL FLAG\n         LA    R1,PARM           POINT TO PARMS\n         CALL  BACKEND           CALL\n         CLC   ERRMASK,PARMAREA ANY ERRORS\n         BNE   CHKEMPTY         NO... CHECK IF ANY RETURNED\n         MVC   ERRMSG,PARMAREA  MOVE IN ERROR MSG\n         B     PUTERR           PUT OUT THE ERROR MESSAGE\nCHKEMPTY DS    0H\n         CLC   EMPTY,PARMAREA   ANY DATA RETURNED.\n         BNE   MOVENAME         YES... GO PROCESS IT\n         OI    ACTFLAG,LASTTIME SET EOV FLAG\n         B     PUTWORK          GO PUT OUT WORK SCREEN\nMOVENAME DS    0H\n         TM    ACTFLAG,GETDSNS  IS THIS SCRATCH PROCESSING\n         BZ    MOVEANS          YES THEN GO MOVE RESULT OF SCRATCH\n         LA    R6,ENTRY         POINT TO WORK SCREEN\n         LA    R5,14            SET LOOP COUNTER\n         USING WRKDSECT,R6      ESTABLISH ADDRESSABILITY\nCHKFIELD DS    0H\n         CLC   EMPTY,DATASETN   CHECK IF DATASET FIELD IS EMPTY\n         BE    MOVEIT           YES GO MOVE IN NAME\n         LA    R6,ENTRYLEN(R6)  BUMP TO NEXT ENTRY\n         BCT   R5,CHKFIELD      ANY MORE\n         MVC   DATASETN(L'PARMAREA),PARMAREA MOVE IN 15TH NAME.\n         CLC   CREATDAY,DATE     CREATED ON SCAN DATE\n         BNE   PUTWORK           NO ... PUT OUT SCREEN\n         OI    ATTR,X'08'        YES SET HIGH INTENSITY\n         B     PUTWORK           GO NOW PUT OUT SCREEN.\nMOVEIT   DS    0H\n         MVC   DATASETN(L'PARMAREA),PARMAREA MOVE IN DATASET NAME.\n         CLC   CREATDAY,DATE     CREATE EQUAL TO SCAN DATE\n         BNE   CALLPROC          NO GET SOME MORE NAMES.\n         OI    ATTR,X'08'        SET HIGH INTENSITY ON\n         B     CALLPROC          GO GET MORE NAMES.\nPUTWORK  DS    0H\n         NI    ACTFLAG,X'10'     RESET ACTION FLAG\n         MVC   SCNDATE,DATE      MOVE IN DATE\n         MVC   VOLUME,VOLSAVE    MOVE IN VOLSER\n         LA    R5,WORKSCRN       POINT TO WORK SCREEN\n         TPUT  (5),WORKLEN,FULLSCR  PUT IT OUT\n         B     READ1            GO DO A READ\nWORKPROC DS    0H\n         LA    R5,7             CURRENT CURSOR POSS & WRKSCR SBA\n         CR    R1,R5            WAS ANYTHING ENTERED\n         BH    SCRPROC          YES GO PROCESS SCRATCHES\n         OI    ACTFLAG,GETDSNS  SET FLAG TO GET DSNS\n         TM    ACTFLAG,LASTTIME WAS THIS EOV\n         BZ    INITWORK         NO ... THEN GET SOMEMORE\n         B     PUT1             YES.. THEN GET NEXT VOLUME\nSCRPROC  DS    0H\n         LA    R8,4(R8)        BUMP  WORKSBA\n         LR    R9,R1           SAVE LENGTH OF INPUT\n         LA    R6,7            LENGTH OF CURSOR POSS AND WRKSBA\n         SR    R9,R6           DECREMENT CURSOR & SBA\n         LA    R6,ENTRY         POINT TO WORK SCREEN\n         LA    R5,15            SET LOOP COUNTER\n         USING WRKDSECT,R6      ESTABLISH ADDRESSABILITY\nCKSCRSBA DS    0H\n         NI    2(R8),X'FE'      DECREMENT THE SBA BY ONE\n         CLC   SCRSBA,0(R8)     CHECK IF THIS IS DATA SET TO SCR\n         BE    NAMEMOVE         YES GO MOVE NAME\n         LA    R6,ENTRYLEN(R6)  BUMP TO NEXT ENTRY\n         BCT   R5,CKSCRSBA      ANY MORE\n         MVC   ERRMSG,READERR   NO ERROR\n         B     PUTERR           PUT OUT PROMPT\nNAMEMOVE DS    0H\n         CLC   INDSCR,3(R8)      WAS PROPER INDICATOR SET?\n         BNE   SKIPIT            NO THEN SKIP THIS GUY\n         MVC   PARMAREA,DATASETN MOVE IN DATASET NAME TO SCRATCH\n         NI    ACTFLAG,X'10'     RESET ACTION FLAG\n         B     CALLPROC          GO GET HIM\nMOVEANS  DS    0H\n         MVC   DATASETN(L'PARMAREA),PARMAREA\nSKIPIT   DS    0H\n         LA    R8,5(R8)        BUMP TO NEXT SBA\n         LA    RA,5            DECREMENT LENGTH OF INPUT\n         SR    R9,RA           FROM SAVED LENTGH\n         LTR   R9,R9           ANY LEFT\n         BP    CKSCRSBA        YES.  GO PROCESS\n         B     PUTWORK         GO GET THEM.\nENDUP    DS    0H\n         LA    R5,CLEARSCR\n         TPUT  (5),CLEARLEN,FULLSCR\n         L     RD,SAVEA+4\n         RETURN (14,12)\nTRANSLAT DS    0H\n         LA    R8,INPUT         POINT TO START OF DATA\n         ST    R1,FULLENGH     SAVE FULL LENGTH\nTRLOOP   ST    R1,SAVELEN       SAVE LEN OF DATA TO TRT\n         LR    R12,R1           PUT DATA LENGTH IN R12\n         C     R12,=F'256'      MORE THAN 256\n         BNH   EXTRT            NO THEN DO TRT\n         L     R12,=F'255'\n         EX    R12,INSTR        TRANSLATE 255 WORTH\n         L     R1,SAVELEN       RESTORE R1\n         LA    R12,1(R12)       RESTORE R12 TO 256\n         SR    R1,R12           SUBTRACT OUT TR DATA LEN OF 256\n         LA    R8,0(R12,R8)     BUMP POINTER\n         B     TRLOOP           GO AGAIN\nEXTRT    BCTR  R12,0            MINUS 1 FOR EXEECUTE\n         EX    R12,INSTR        TRANSLATE\n         LA    R8,INPUT         RESTORE R8\n         L     R1,FULLENGH     RESTOR1 R1\n         BR    RA              RETURN TO CALLER\nINSTR    TR    0(0,R8),TRANSTBL   TRANSLATE TO UPPER CASE !!!!\n         LTORG\nPROMPT   DC    X'27F5C3115D7E11404E1D6011404F'\n*        DC    C'MASSACHUSETTS  MUTUAL  LIFE  INSURANCE  CO' AXC-CBT\n*        DC    C'    CONNECTICUT BANK AND TRUST COMPANY    ' AXC-CBT\n         DC    C'       CBT TAPE - FULL SCREEN UTILITY     '\n         DC    X'11C1E9'\n         DC    C' DISK MANAGEMENT ROUTINE '\n         DC    X'11C37A'\n         DC    C'VOLUME'\n         DC    X'1DC811C4C1'\n         DC    CL6' '\n         DC    X'1DF011C4C7'\n         DC    X'11C4E7'\n         DC    C'SCAN DATE'\n         DC    X'1DC8'\n         DC    CL5' '\n         DC    X'1D6011C54A'\n         DC    C'ACTION'\n         DC    X'1DC811C5D1'\n         DC    CL3' '\n         DC    X'1D60'\n         DC    X'11C76A'\n         DC    C'ENTER THE VOLUME YOU WISH TO EXAMINE'\n         DC    C'  AND THE SCAN DATE.'\n         DC    X'11C87A'\n         DC    C'ANY DATASET CREATED ON THE SCAN DATE'\n         DC    C' WILL BE HIGHLIGHTED.'\n         DC    X'114A4A'\n         DC    C'THE DEFAULT SCAN DATE IS TODAYS DATE. '\n         DC    X'114D7A'\nERRMSG   DC    CL70' '\n         DC    X'11C4C113'\nPRMPTLEN EQU   *-PROMPT\nWORKSCRN DC    X'27F5C3115D7E1140C41D7DC111404E1D6011404F'\n*        DC    C'MASSACHUSETTS  MUTUAL  LIFE  INSURANCE  CO' AXC-CBT\n*        DC    C'    CONNECTICUT BANK AND TRUST COMPANY    ' AXC-CBT\n         DC    C'        CBT TAPE - FULL SCREEN UTILITY    '\n         DC    X'11C1E9'\n         DC    C' DISK MANAGEMENT ROUTINE '\n         DC    X'11C37A'\n         DC    C'VOLUME'\n         DC    X'1DC811C4C1'\nVOLUME   DC    CL6' '\n         DC    X'1DF011C4C7'\n         DC    X'11C4E7'\n         DC    C'SCAN DATE'\n         DC    X'1DC8'\nSCNDATE  DC    CL5' '\n         DC    X'1D6011C54A'\n         DC    C'DATASET NAME'\n         DC    X'11C5F8'\n         DC    C'CREATION DATE   TRACKS'\nENTRY    DC    X'11C6D41DC8'              6 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB1   DC    X'F0'\n         DC    X'11C6D8'\n         DC    C'  '\nDSNAME1  DC    CL70' '\n         DC    X'11C7E41DC8'        7 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB2   DC    X'F0'\n         DC    X'11C7E8'\n         DC    C'  '\nDSNAME2  DC    CL70' '\n         DC    X'11C8F41DC8'        8 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB3   DC    X'F0'\n         DC    X'11C8F8'\n         DC    C'  '\nDSNAME3  DC    CL70' '\n         DC    X'114AC41DC8'        9 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB4   DC    X'F0'\n         DC    X'114AC8'\n         DC    C'  '\nDSNAME4  DC    CL70' '\n         DC    X'114BD41DC8'        10 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB5   DC    X'F0'\n         DC    X'114BD8'\n         DC    C'  '\nDSNAME5  DC    CL70' '\n         DC    X'114CE41DC8'        11 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB6   DC    X'F0'\n         DC    X'114CE8'\n         DC    C'  '\nDSNAME6  DC    CL70' '\n         DC    X'114DF41DC8'        12 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB7   DC    X'F0'\n         DC    X'114DF8'\n         DC    C'  '\nDSNAME7  DC    CL70' '\n         DC    X'114FC41DC8'        13 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB8   DC    X'F0'\n         DC    X'114FC8'\n         DC    C'  '\nDSNAME8  DC    CL70' '\n         DC    X'1150D41DC8'        14 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB9   DC    X'F0'\n         DC    X'1150D8'\n         DC    C'  '\nDSNAME9  DC    CL70' '\n         DC    X'11D1E41DC8'        15 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB10  DC    X'F0'\n         DC    X'11D1E8'\n         DC    C'  '\nDSNAME10 DC    CL70' '\n         DC    X'11D2F41DC8'        16 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB11  DC    X'F0'\n         DC    X'11D2F8'\n         DC    C'  '\nDSNAME11 DC    CL70' '\n         DC    X'11D4C41DC8'        17 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB12  DC    X'F0'\n         DC    X'11D4C8'\n         DC    C'  '\nDSNAME12 DC    CL70' '\n         DC    X'11D5D41DC8'        18 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB13  DC    X'F0'\n         DC    X'11D5D8'\n         DC    C'  '\nDSNAME13 DC    CL70' '\n         DC    X'11D6E41DC8'        19 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB14  DC    X'F0'\n         DC    X'11D6E8'\n         DC    C'  '\nDSNAME14 DC    CL70' '\n         DC    X'11D7F41DC8'        20 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB15  DC    X'F0'\n         DC    X'11D7F8'\n         DC    C'  '\nDSNAME15 DC    CL70' '\n         DC    X'115A5E1D60'\n         DC    C'INDICATE WHICH DATASET YOU WISH TO SCRATCH'\n         DC    C' BY PLACING'\n         DC    X'115B6F'\n         DC    C'AN XX IN FRONT OF THE DATASET NAME'\n         DC    X'115C7F'\n         DC    C'THEN HIT ENTER TO PROCEED.'\n         DC    X'11C6D513'\nWORKLEN  EQU   *-WORKSCRN\nCLEARSCR DC    X'27F5C3115D7E1140403C4040001140C113'\nCLEARLEN EQU   *-CLEARSCR\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nPASSVOL  EQU   X'80'\nGETDSNS  EQU   X'40'\nSCRDSNS  EQU   X'20'\nLASTTIME EQU   X'10'\nSAVEA    DC    18F'0'\nPARM     DC    A(PARMAREA)\nPARMAREA DS    CL70\nRETCD    DC    XL1'00'\nVOLFLAG  DC    XL1'00'\nACTFLAG  DC    XL1'00'\nERRMASK  DC    CL4'ERROR'\nINDSCR   DC    CL2'XX'\nEMPTY    DC    F'0'\nWORD     DC    XL4'0000000F'\nVOLPARM  DS    0CL10\n         DC    CL4'VOL '\nVOLSAVE  DC    CL6' '\nDATE     DC    CL5' '\nSAVELEN  DC    F'0'\nFULLENGH DC    F'0'\nVOLSBA   DC    XL3'11C4C1'\nSCANSBA  DC    XL3'11C4F1'\nENDSBA   DC    XL3'11C5D1'\nWORKSBA  DC    XL3'1140C5'\nREADERR  DC    CL70'ERROR ON TGET TRY AGAIN'\nVOLERR   DC    CL70'PLEASE SPECIFY A VOLUME OR ACTION.'\nINPUT    DC    400F'0'\nTRANSTBL DS    0H\n*\n*   IBM 3270 TRANSLATE TABLE TRANSLATES\n*   EBCIDIC SMALL AND CAPITALS TO CAPITALS ONLY\n*\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'000102030405060708090A0B0C0D0E0F' 0\n         DC    X'101112131415161718191A1B1C1D1E1F' 1\n         DC    X'202122232425262728292A2B2C2D2E2F' 2\n         DC    X'303132333435363738393A3B3C3D3E3F' 3\n         DC    X'404142434445464748494A4B4C4D4E4F' 4\n         DC    X'505152535455565758595A5B5C5D5E5F' 5\n         DC    X'606162636465666768696A6B6C6D6E6F' 6\n         DC    X'707172737475767778797A7B7C7D7E7F' 7\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F' 8\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F' 9\n         DC    X'A0E1E2E3E4E5E6E7E8E9AAABACADAEAF' A\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' B\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' C\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' D\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' E\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF' F\nWRKDSECT DSECT\nSCRSBA   DS   CL3       SBA\n         DS   XL2       ATTR\nSCRIND   DS   CL2       SCRATCH INDICATOR\nSF       DS   XL1       START FIELD\nATTR     DS   XL1       ATTRIBUTE BYTE\n         DS   CL5       SBA &LINE NUMBER\nDATASETN DS   CL44\n         DS   CL5\nCREATDAY DS   CL5\n         DS   CL6\nTRACKS   DS   CL5\n         DS   CL5\nENTRYLEN EQU  *-SCRSBA\n         IKJPSCB\n         IKJCPPL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PACKRATZ": {"ttr": 1292, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00D\\x01\\x121\\x1f\\x01\\x121\\x1f!\\x07\\x01\\xf8\\x01\\xf6\\x00\\x00\\xe9\\xd6\\xe2`\\xe5\\xc5\\xd9@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-06T21:07:44", "lines": 504, "newlines": 502, "modlines": 0, "user": "ZOS-VER"}, "text": "PACKRAT  CSECT\n*                                                          AXC-CBT\n*    ****** CBT CHANGED HOW MASS MUTUAL WAS CHECKING FOR   AXC-CBT\n*           AN AUTHORIZED TSO USERS. THEY CHECKED THE      AXC-CBT\n*           OPERATOR BIT FROM UADS. I LINK TO A PROGRAM    AXC-CBT\n*           CALLED AON (IN FILE 227 OF THIS TAPE) TO       AXC-CBT\n*           CHECK FOR AN AUTHORIZED (IE. TECH SUPPORT)     AXC-CBT\n*           TSO USERS. YOU WILL PROBABLY WHAT TO DO        AXC-CBT\n*           YOUR OWN CHECKING, REMOVE THE LINK TO AON      AXC-CBT\n*           ANYWAYS BECAUSE YOU PROBABLY DON'T CALL YOUR   AXC-CBT\n*           CHECKER BY THAT NAME. *******                  AXC-CBT\n*                                                          AXC-CBT\n*          A FEW CHANGES BY CBT. ALL ARE MARKED BY         AXC-CBT\n*           1. CHECK FOR THE FOLOIWNG 1ST LEVELS:          AXC-CBT\n*              SYS1. SYS2. CBT. PROD.                      AXC-CBT\n*           2. CHANGED TITLE FROM MASS MUTUAL TO CBT       AXC-CBT\n*                                                          AXC-CBT\n*        THIS  IS THE MASS MUTUAL DISK PACK MAINTENANCE ROUTINE\n*        IT'S  ONLY FUNCTION IS TO EXAMINE THE VTOC OF A\n*        PARTICULAR VOLUME AND SCRATCH THE DATASETS SPECIFIED.\n*        THIS MODULE IS THE TERMINAL INTERFACE MODULE\n*        IT INVOKES A BACKEND MODULE TO DO THE ACTUAL SCRATCH\n*        AND UNCATALOG.\n*        THE TERMINAL INTERFACE WAS WRITTEN BY GERRY ROBERTS.\n*        THE BACKEND WAS WRITTEN BY .......... ? IT WAS PART OF\n*        THE MVT VERSION OF HYDRO.\n*        THE UNCATALOG ONLY OCCURS IF THE DATA SET IS\n*        CATALOGUED ON THE VOLUME CURRENTLY BEING EXAMINED.\n*        IF IT IS A MULTI VOLUME DATA SET IT IS NOT SCRATCHED\n*        OR UNCATALOGUED.\n*        IF THE DSNAME BEGINS WITH SYS1 IT IS NOT SCRATCHED OR\n*        UNCATALOGUED.\n*        IN ADDITION TO THE DATA SET NAME, THE CREATION DATE\n*        AND NUMBER OF TRACKS ARE DISPLAYED.\n*        DATA SETS CREATED ON THE SCAN DATE ARE HIGHLIGHTED.\n*        THE SCAN DATE CAN BE SPECIFIED ON THE INITIAL PROMPT\n*        IF IT IS NOT SPECIFIED THEN THE CURRENT DATE IS USED.\n*        THIS PROGRAM HAS BEEN USED ON 3330 AND 3350 DEVICES.\n*        IT HAS BEEN RUN UNDER MVS 3.8 VANILLA.\n*        IT ALSO HAS BEEN RUN UNDER MVS3.8 MVS/SP1.1 8106  AXC-CBT\n*        IT LINK EDITED WITH AC=1\n*        THE USER MUST HAVE OPERATOR AUTHORIZATION.\n*        NO WARRANTIES ARE EXPRESSED OR IMPLIED IN  THIS CODE\n*        USE IT AT YOUR OWN RISK.\n*        THE PROMPT SCREEN ALLOWS YOU TO ENTER THE VOLSER YOU\n*        WISH TO EXAMINE AND THE SCAN DATE .  ENTERING ANYTHING\n*        IN THE ACTION FIELD WILL CASE THE PROGRAM TO END\n*        UNLESS A VOLSER OR SCAN DATE HAS BEEN SPECIFIED IN WHICH CASE\n*        THE ACTION FIELD IS IGNORED.\n*        WHEN THE ENTIRE VTOC HAS BEEN SCANNED THE PROMPT IS RETURNED\n*        GIVING YOU THE OPPORTUNITY TO SPECIFY ANOTHER VOLUME OR END.\n*        A FULL SCREEN AF DATA SETS CAN BE SCRATCHED AT A TIME.\n*        HITTING THE ENTER KEY PAGES YOU FORWARD THROUGH THE VTOC.\n*        PLACING AN 'XX' IN FRONT OF THE DATA SET NAME CAUSES IT\n*        TO BE SCRATCED AND UNCATALOGUED. ANYTHING OTHER THAN 'XX'\n*        IS IGNORED .  MODIFYING THE VOLUME OR SCAN DATE ON OTHER\n*        THAN THE INITIAL PROMPT WILL RESULT IN AN ERROR AND\n*        TRANMISSION OF ANY INITIAL PROMPT .\n         STM   RE,RC,12(RD)            SAVE REGS\n         LR    R4,RF                   SET R4\n         LA    R7,4095(R4)             SET R7 AS SECOND\n         LA    R7,1(R7)                BASE REGISTER\n         USING PACKRAT,R4,R7           ESATBLISH BASE R4 R7\n         LR    R3,RD                   AND DO\n         LA    RD,SAVEA                SAVE AREA\n         ST    RD,8(,R3)               CHAINNING.\n         ST    R3,4(,RD)\n         USING CPPL,R1                 ADDRESSABILITY FOR CPPL\n         L     R2,CPPLPSCB             POINT TO PSCB\n         USING PSCB,R2\n         AGO   .SKIP1                                      ZOS\n         LINK  EP=AON                                      AXC-CBT\n         B     PUT1                                        AXC-CBT\n.SKIP1   ANOP                                              ZOS\n         TM    PSCBATR1,PSCBCTRL       OPER AUTHORIZED.\n         BNO   ENDUP                   NO THEN GO AWAY.\nPUT1     DS    0H\n         MVI   RETCD,X'00'\n         NI    ACTFLAG,X'00'\n         NI    VOLFLAG,X'00'\n         XC    ERRMSG,ERRMSG           CLEAR OUT ERRMSG AREA\n         XC    VOLSAVE,VOLSAVE         VOLSER\n         XC    DATE,DATE               SCAN DATE\n         XC    PARMAREA,PARMAREA\nPUTERR   DS    0H\n         LA    R5,PROMPT               POINT TO PROMPT AREA\n         TPUT  (5),PRMPTLEN,FULLSCR    PUT IT OUT\nREAD1    DS    0H\n         LA    R1,INPUT\n         TGET  (1),1500,ASIS           READ THE SCREEN\n         LTR   RF,RF                   CHECK RETCD\n         BZ    READOK\n         STC   R15,RETCD\n         CLI   RETCD,X'08'             ATTENTION INTERRUPT\n         BE    ENDUP                   YES THEN QUIT\n*        MVC   ERRMSG,READERR          ELSE MOVE IN ERROR MSG\n*        B     PUTERR\nREADOK   DS    0H\n         BAL   RA,TRANSLAT       TRANSLATE TO UPPER CASE.\n         LA    R8,3(R8)     BUMP PAST THE CURRENT CURSOR POSITION\n         CLC   WORKSBA,0(R8)    IS THIS A WORK SCREEN\n         BE    WORKPROC         GO PROCESS WORK SCREEN\n         OI    VOLFLAG,PASSVOL  SET FLAG TO SIGNIFY PASS VOLSER\n         CLC   VOLSBA,0(R8)     IS THIS THE VOLSER SBA\n         BE    MOVEVOL          YES OK\n         CLC   ENDSBA,0(R8)     ACTION SBA\n         BE    ENDUP\n         MVC   ERRMSG,VOLERR    NO THEN ERROR\n         B     PUTERR           PUT IT OUT\nMOVEVOL  DS    0H\n         MVC   VOLSAVE,3(R8)    MOVE THE VOLSER\n         LA    R8,9(R8)         BUMP PAST SBA AND VOLSER\n         CLC   SCANSBA,0(R8)    SCAN DATE SPECIFIED\n         BE    MOVEDATE         USE DATE SPECIFIED\n         TIME  DEC              SET A DEFAULT DATE\n         ST    R1,WORD\n         UNPK  DATE,WORD+1(3)   UNPACK IT\n         B     SETFLAG\nMOVEDATE DS    0H\n         MVC   DATE,3(R8)       MOVE IN SCAN DATE SPECIFIED\nSETFLAG  DS    0H\n         OI    ACTFLAG,GETDSNS  SET ACTION FLAG\nINITWORK DS    0H\n         LA    R6,ENTRY           POINT TO WORK SCREEN ENTRY\n         USING WRKDSECT,R6\n         LA    R5,15              LOOP CONTROL\nRESET    DS    0H\n         NI    ATTR,X'F7'         RESET HIGH INTENSITY FLAG\n         XC    DATASETN,DATASETN  CLEAR DATASET NAME FIELD\n         XC    CREATDAY,CREATDAY  CREATION DATE FIELD\n         XC    TRACKS,TRACKS      TRACKS FIELD\n         LA    R6,ENTRYLEN(R6)    BUMP POINTER\n         BCT   R5,RESET           DO SOME MORE\nCALLPROC DS    0H\n         TM    ACTFLAG,GETDSNS  CALL BACKGROUND TO GET DSNAMES?\n         BZ    CALLBACK         NO THEN CALL BACKGROUND\nVOLMVE   DS    0H\n         TM    VOLFLAG,PASSVOL  1ST TIME PASS VOLSER ?\n         BZ    CLRPARM          NO\n         MVC   PARMAREA(L'VOLPARM),VOLPARM YES... MOVE IN VOLSER.\n         B     CALLBACK          GO CALL\nCLRPARM  DS    0H\n         XC    PARMAREA,PARMAREA CLEAR PARM AREA\nCALLBACK DS    0H                CALL BACKGROUND\n         NI    VOLFLAG,X'00'     RESET CALL FLAG\n         LA    R1,PARM           POINT TO PARMS\n         CALL  BACKEND           CALL\n         CLC   ERRMASK,PARMAREA ANY ERRORS\n         BNE   CHKEMPTY         NO... CHECK IF ANY RETURNED\n         MVC   ERRMSG,PARMAREA  MOVE IN ERROR MSG\n         B     PUTERR           PUT OUT THE ERROR MESSAGE\nCHKEMPTY DS    0H\n         CLC   EMPTY,PARMAREA   ANY DATA RETURNED.\n         BNE   MOVENAME         YES... GO PROCESS IT\n         OI    ACTFLAG,LASTTIME SET EOV FLAG\n         B     PUTWORK          GO PUT OUT WORK SCREEN\nMOVENAME DS    0H\n         TM    ACTFLAG,GETDSNS  IS THIS SCRATCH PROCESSING\n         BZ    MOVEANS          YES THEN GO MOVE RESULT OF SCRATCH\n         LA    R6,ENTRY         POINT TO WORK SCREEN\n         LA    R5,14            SET LOOP COUNTER\n         USING WRKDSECT,R6      ESTABLISH ADDRESSABILITY\nCHKFIELD DS    0H\n         CLC   EMPTY,DATASETN   CHECK IF DATASET FIELD IS EMPTY\n         BE    MOVEIT           YES GO MOVE IN NAME\n         LA    R6,ENTRYLEN(R6)  BUMP TO NEXT ENTRY\n         BCT   R5,CHKFIELD      ANY MORE\n         MVC   DATASETN(L'PARMAREA),PARMAREA MOVE IN 15TH NAME.\n         CLC   CREATDAY,DATE     CREATED ON SCAN DATE\n         BNE   PUTWORK           NO ... PUT OUT SCREEN\n         OI    ATTR,X'08'        YES SET HIGH INTENSITY\n         B     PUTWORK           GO NOW PUT OUT SCREEN.\nMOVEIT   DS    0H\n         MVC   DATASETN(L'PARMAREA),PARMAREA MOVE IN DATASET NAME.\n         CLC   CREATDAY,DATE     CREATE EQUAL TO SCAN DATE\n         BNE   CALLPROC          NO GET SOME MORE NAMES.\n         OI    ATTR,X'08'        SET HIGH INTENSITY ON\n         B     CALLPROC          GO GET MORE NAMES.\nPUTWORK  DS    0H\n         NI    ACTFLAG,X'10'     RESET ACTION FLAG\n         MVC   SCNDATE,DATE      MOVE IN DATE\n         MVC   VOLUME,VOLSAVE    MOVE IN VOLSER\n         LA    R5,WORKSCRN       POINT TO WORK SCREEN\n         TPUT  (5),WORKLEN,FULLSCR  PUT IT OUT\n         B     READ1            GO DO A READ\nWORKPROC DS    0H\n         LA    R5,7             CURRENT CURSOR POSS & WRKSCR SBA\n         CR    R1,R5            WAS ANYTHING ENTERED\n         BH    SCRPROC          YES GO PROCESS SCRATCHES\n         OI    ACTFLAG,GETDSNS  SET FLAG TO GET DSNS\n         TM    ACTFLAG,LASTTIME WAS THIS EOV\n         BZ    INITWORK         NO ... THEN GET SOMEMORE\n         B     PUT1             YES.. THEN GET NEXT VOLUME\nSCRPROC  DS    0H\n         LA    R8,4(R8)        BUMP  WORKSBA\n         LR    R9,R1           SAVE LENGTH OF INPUT\n         LA    R6,7            LENGTH OF CURSOR POSS AND WRKSBA\n         SR    R9,R6           DECREMENT CURSOR & SBA\n         LA    R6,ENTRY         POINT TO WORK SCREEN\n         LA    R5,15            SET LOOP COUNTER\n         USING WRKDSECT,R6      ESTABLISH ADDRESSABILITY\nCKSCRSBA DS    0H\n         NI    2(R8),X'FE'      DECREMENT THE SBA BY ONE\n         CLC   SCRSBA,0(R8)     CHECK IF THIS IS DATA SET TO SCR\n         BE    NAMEMOVE         YES GO MOVE NAME\n         LA    R6,ENTRYLEN(R6)  BUMP TO NEXT ENTRY\n         BCT   R5,CKSCRSBA      ANY MORE\n         MVC   ERRMSG,READERR   NO ERROR\n         B     PUTERR           PUT OUT PROMPT\nNAMEMOVE DS    0H\n         CLC   INDSCR,3(R8)      WAS PROPER INDICATOR SET?\n         BNE   SKIPIT            NO THEN SKIP THIS GUY\n         MVC   PARMAREA,DATASETN MOVE IN DATASET NAME TO SCRATCH\n         NI    ACTFLAG,X'10'     RESET ACTION FLAG\n         B     CALLPROC          GO GET HIM\nMOVEANS  DS    0H\n         MVC   DATASETN(L'PARMAREA),PARMAREA\nSKIPIT   DS    0H\n         LA    R8,5(R8)        BUMP TO NEXT SBA\n         LA    RA,5            DECREMENT LENGTH OF INPUT\n         SR    R9,RA           FROM SAVED LENTGH\n         LTR   R9,R9           ANY LEFT\n         BP    CKSCRSBA        YES.  GO PROCESS\n         B     PUTWORK         GO GET THEM.\nENDUP    DS    0H\n         LA    R5,CLEARSCR\n         TPUT  (5),CLEARLEN,FULLSCR\n         L     RD,SAVEA+4\n         RETURN (14,12)\nTRANSLAT DS    0H\n         LA    R8,INPUT         POINT TO START OF DATA\n         ST    R1,FULLENGH     SAVE FULL LENGTH\nTRLOOP   ST    R1,SAVELEN       SAVE LEN OF DATA TO TRT\n         LR    R12,R1           PUT DATA LENGTH IN R12\n         C     R12,=F'256'      MORE THAN 256\n         BNH   EXTRT            NO THEN DO TRT\n         L     R12,=F'255'\n         EX    R12,INSTR        TRANSLATE 255 WORTH\n         L     R1,SAVELEN       RESTORE R1\n         LA    R12,1(R12)       RESTORE R12 TO 256\n         SR    R1,R12           SUBTRACT OUT TR DATA LEN OF 256\n         LA    R8,0(R12,R8)     BUMP POINTER\n         B     TRLOOP           GO AGAIN\nEXTRT    BCTR  R12,0            MINUS 1 FOR EXEECUTE\n         EX    R12,INSTR        TRANSLATE\n         LA    R8,INPUT         RESTORE R8\n         L     R1,FULLENGH     RESTOR1 R1\n         BR    RA              RETURN TO CALLER\nINSTR    TR    0(0,R8),TRANSTBL   TRANSLATE TO UPPER CASE !!!!\n         LTORG\nPROMPT   DC    X'27F5C3115D7E11404E1D6011404F'\n*        DC    C'MASSACHUSETTS  MUTUAL  LIFE  INSURANCE  CO' AXC-CBT\n*        DC    C'    CONNECTICUT BANK AND TRUST COMPANY    ' AXC-CBT\n         DC    C'       CBT TAPE - FULL SCREEN UTILITY     '\n         DC    X'11C1E9'\n         DC    C' DISK MANAGEMENT ROUTINE '\n         DC    X'11C37A'\n         DC    C'VOLUME'\n         DC    X'1DC811C4C1'\n         DC    CL6' '\n         DC    X'1DF011C4C7'\n         DC    X'11C4E7'\n         DC    C'SCAN DATE'\n         DC    X'1DC8'\n         DC    CL5' '\n         DC    X'1D6011C54A'\n         DC    C'ACTION'\n         DC    X'1DC811C5D1'\n         DC    CL3' '\n         DC    X'1D60'\n         DC    X'11C76A'\n         DC    C'ENTER THE VOLUME YOU WISH TO EXAMINE'\n         DC    C'  AND THE SCAN DATE.'\n         DC    X'11C87A'\n         DC    C'ANY DATASET CREATED ON THE SCAN DATE'\n         DC    C' WILL BE HIGHLIGHTED.'\n         DC    X'114A4A'\n         DC    C'THE DEFAULT SCAN DATE IS TODAYS DATE. '\n         DC    X'114D7A'\nERRMSG   DC    CL70' '\n         DC    X'11C4C113'\nPRMPTLEN EQU   *-PROMPT\nWORKSCRN DC    X'27F5C3115D7E1140C41D7DC111404E1D6011404F'\n*        DC    C'MASSACHUSETTS  MUTUAL  LIFE  INSURANCE  CO' AXC-CBT\n*        DC    C'    CONNECTICUT BANK AND TRUST COMPANY    ' AXC-CBT\n         DC    C'        CBT TAPE - FULL SCREEN UTILITY    '\n         DC    X'11C1E9'\n         DC    C' DISK MANAGEMENT ROUTINE '\n         DC    X'11C37A'\n         DC    C'VOLUME'\n         DC    X'1DC811C4C1'\nVOLUME   DC    CL6' '\n         DC    X'1DF011C4C7'\n         DC    X'11C4E7'\n         DC    C'SCAN DATE'\n         DC    X'1DC8'\nSCNDATE  DC    CL5' '\n         DC    X'1D6011C54A'\n         DC    C'DATASET NAME'\n         DC    X'11C5F8'\n         DC    C'CREATION DATE   TRACKS'\nENTRY    DC    X'11C6D41DC8'              6 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB1   DC    X'F0'\n         DC    X'11C6D8'\n         DC    C'  '\nDSNAME1  DC    CL70' '\n         DC    X'11C7E41DC8'        7 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB2   DC    X'F0'\n         DC    X'11C7E8'\n         DC    C'  '\nDSNAME2  DC    CL70' '\n         DC    X'11C8F41DC8'        8 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB3   DC    X'F0'\n         DC    X'11C8F8'\n         DC    C'  '\nDSNAME3  DC    CL70' '\n         DC    X'114AC41DC8'        9 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB4   DC    X'F0'\n         DC    X'114AC8'\n         DC    C'  '\nDSNAME4  DC    CL70' '\n         DC    X'114BD41DC8'        10 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB5   DC    X'F0'\n         DC    X'114BD8'\n         DC    C'  '\nDSNAME5  DC    CL70' '\n         DC    X'114CE41DC8'        11 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB6   DC    X'F0'\n         DC    X'114CE8'\n         DC    C'  '\nDSNAME6  DC    CL70' '\n         DC    X'114DF41DC8'        12 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB7   DC    X'F0'\n         DC    X'114DF8'\n         DC    C'  '\nDSNAME7  DC    CL70' '\n         DC    X'114FC41DC8'        13 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB8   DC    X'F0'\n         DC    X'114FC8'\n         DC    C'  '\nDSNAME8  DC    CL70' '\n         DC    X'1150D41DC8'        14 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB9   DC    X'F0'\n         DC    X'1150D8'\n         DC    C'  '\nDSNAME9  DC    CL70' '\n         DC    X'11D1E41DC8'        15 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB10  DC    X'F0'\n         DC    X'11D1E8'\n         DC    C'  '\nDSNAME10 DC    CL70' '\n         DC    X'11D2F41DC8'        16 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB11  DC    X'F0'\n         DC    X'11D2F8'\n         DC    C'  '\nDSNAME11 DC    CL70' '\n         DC    X'11D4C41DC8'        17 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB12  DC    X'F0'\n         DC    X'11D4C8'\n         DC    C'  '\nDSNAME12 DC    CL70' '\n         DC    X'11D5D41DC8'        18 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB13  DC    X'F0'\n         DC    X'11D5D8'\n         DC    C'  '\nDSNAME13 DC    CL70' '\n         DC    X'11D6E41DC8'        19 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB14  DC    X'F0'\n         DC    X'11D6E8'\n         DC    C'  '\nDSNAME14 DC    CL70' '\n         DC    X'11D7F41DC8'        20 5\n         DC    CL2' '\n         DC    X'1D'\nATRIB15  DC    X'F0'\n         DC    X'11D7F8'\n         DC    C'  '\nDSNAME15 DC    CL70' '\n         DC    X'115A5E1D60'\n         DC    C'INDICATE WHICH DATASET YOU WISH TO SCRATCH'\n         DC    C' BY PLACING'\n         DC    X'115B6F'\n         DC    C'AN XX IN FRONT OF THE DATASET NAME'\n         DC    X'115C7F'\n         DC    C'THEN HIT ENTER TO PROCEED.'\n         DC    X'11C6D513'\nWORKLEN  EQU   *-WORKSCRN\nCLEARSCR DC    X'27F5C3115D7E1140403C4040001140C113'\nCLEARLEN EQU   *-CLEARSCR\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nPASSVOL  EQU   X'80'\nGETDSNS  EQU   X'40'\nSCRDSNS  EQU   X'20'\nLASTTIME EQU   X'10'\nSAVEA    DC    18F'0'\nPARM     DC    A(PARMAREA)\nPARMAREA DS    CL70\nRETCD    DC    XL1'00'\nVOLFLAG  DC    XL1'00'\nACTFLAG  DC    XL1'00'\nERRMASK  DC    CL4'ERROR'\nINDSCR   DC    CL2'XX'\nEMPTY    DC    F'0'\nWORD     DC    XL4'0000000F'\nVOLPARM  DS    0CL10\n         DC    CL4'VOL '\nVOLSAVE  DC    CL6' '\nDATE     DC    CL5' '\nSAVELEN  DC    F'0'\nFULLENGH DC    F'0'\nVOLSBA   DC    XL3'11C4C1'\nSCANSBA  DC    XL3'11C4F1'\nENDSBA   DC    XL3'11C5D1'\nWORKSBA  DC    XL3'1140C5'\nREADERR  DC    CL70'ERROR ON TGET TRY AGAIN'\nVOLERR   DC    CL70'PLEASE SPECIFY A VOLUME OR ACTION.'\nINPUT    DC    400F'0'\nTRANSTBL DS    0H\n*\n*   IBM 3270 TRANSLATE TABLE TRANSLATES\n*   EBCIDIC SMALL AND CAPITALS TO CAPITALS ONLY\n*\n*                 0 1 2 3 4 5 6 7 8 9 A B C D E F\n         DC    X'000102030405060708090A0B0C0D0E0F' 0\n         DC    X'101112131415161718191A1B1C1D1E1F' 1\n         DC    X'202122232425262728292A2B2C2D2E2F' 2\n         DC    X'303132333435363738393A3B3C3D3E3F' 3\n         DC    X'404142434445464748494A4B4C4D4E4F' 4\n         DC    X'505152535455565758595A5B5C5D5E5F' 5\n         DC    X'606162636465666768696A6B6C6D6E6F' 6\n         DC    X'707172737475767778797A7B7C7D7E7F' 7\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F' 8\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F' 9\n         DC    X'A0E1E2E3E4E5E6E7E8E9AAABACADAEAF' A\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF' B\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF' C\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF' D\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF' E\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF' F\nWRKDSECT DSECT\nSCRSBA   DS   CL3       SBA\n         DS   XL2       ATTR\nSCRIND   DS   CL2       SCRATCH INDICATOR\nSF       DS   XL1       START FIELD\nATTR     DS   XL1       ATTRIBUTE BYTE\n         DS   CL5       SBA &LINE NUMBER\nDATASETN DS   CL44\n         DS   CL5\nCREATDAY DS   CL5\n         DS   CL6\nTRACKS   DS   CL5\n         DS   CL5\nENTRYLEN EQU  *-SCRSBA\n         IKJPSCB\n         IKJCPPL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SAMPSCR1": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00I\\x01\\x121\\x1f\\x01\\x121\\x1f!I\\x00\\x15\\x00\\x13\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-06T21:49:49", "lines": 21, "newlines": 19, "modlines": 0, "user": "SAMPLE"}, "text": "                CBT TAPE - FULL SCREEN UTILITY\n                    DISK MANAGEMENT ROUTINE\n\n    VOLUME                                       SCAN DATE\n    ACTION\n\n    ENTER THE VOLUME YOU WISH TO EXAMINE  AND THE SCAN DATE.\n    ANY DATASET CREATED ON THE SCAN DATE WILL BE HIGHLIGHTED.\n    THE DEFAULT SCAN DATE IS TODAYS DATE.\n\n\n\n\nInstructions:\n\nA.  Type a volser in the VOLUME field to examine files on a disk pack.\n\nB.  Type any character in the ACTION field to end the program.\n\nC.  Type a julian date in the SCAN DATE field to make that date current.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SAMPSCR2": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00C\\x01\\x121\\x1f\\x01\\x121\\x1f!P\\x00\\x18\\x00\\x18\\x00\\x00\\xe2\\xc1\\xd4\\xd7\\xd3\\xc5@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2012-11-06T00:00:00", "modifydate": "2012-11-06T21:50:43", "lines": 24, "newlines": 24, "modlines": 0, "user": "SAMPLE"}, "text": "                CBT TAPE - FULL SCREEN UTILITY\n                   DISK MANAGEMENT ROUTINE\n\n   VOLUME MVSRES                                SCAN DATE 12311\n   DATASET NAME                                  CREATION DATE   TRACKS\n   MVSRES.MASTER.CATALOG                            01176      00006\n   SYS1.VVDS.VMVSRES                                01176      00010\n   MVSRES.MASTER.CATALOG.CATINDEX                   01176      00001\n   SYS1.NUCLEUS                                     97106      00351\n   SYS1.LINKLIB                                     97106      02058\n   SYS1.PARMLIB                                     97112      00030\n   SYS1.LPALIB                                      97106      00839\n   ISP.SISPCLIB                                     96170      00017\n   ISP.SISPEXEC                                     97087      00077\n   SYS1.SISPLOAD                                    97087      00422\n   SYS1.SISPLPA                                     97087      00366\n   ISP.SISPMENU                                     96170      00038\n   ISP.SISPPENU                                     97087      00357\n   SYS1.SISPSASC                                    01110      00079\n   ISP.SISPSENU                                     00195      00087\n\n        INDICATE WHICH DATASET YOU WISH TO SCRATCH BY PLACING\n        AN XX IN FRONT OF THE DATASET NAME\n        THEN HIT ENTER TO PROCEED.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULUDSECT": {"ttr": 1549, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00B\\x01\\x124_\\x01\\x15\\x02o\\x18\\x18\\x00\\xe2\\x00D\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2012-12-10T00:00:00", "modifydate": "2015-01-26T18:18:42", "lines": 226, "newlines": 68, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         ULUDSECT &NAM=ULUDSECT\n&NAM     DSECT\n* ------------------------------------------------------------------- *\n*    ULUDSECT - PASS INFORMATION FROM A ULUT TABLE ENTRY              *\n*                                                                     *\n*    Author   - Sam Golob                                             *\n*                                                                     *\n*    Version  - 2.0.0                                                 *\n*                                                                     *\n*    Current Length - 88 bytes                                        *\n*                                                                     *\n*    Description:                                                     *\n*                                                                     *\n*        The idea of this DSECT is to provide an area to pass         *\n*        information from a UCB Lookup Table entry (ULUE) to a        *\n*        calling program, one entry at a time.                        *\n*                                                                     *\n*        The information requested from each ULUT entry, is what      *\n*        you would probably require during a typical UCB scan.        *\n*                                                                     *\n*        There are also a few register save areas in here.            *\n*                                                                     *\n*        The reason for this arrangement, is to be able to            *\n*        substitute the ULUT lookup for a UCBSCAN macro execution     *\n*        in an Assembler program.  UCBSCAN returns information        *\n*        about one UCB at a time, and we want to be able to do        *\n*        the same thing, using the ULUT method instead.               *\n*                                                                     *\n*        The difference between this method and the UCBSCAN method    *\n*        is that information about REAL UCB's can be returned this    *\n*        way, without the caller having to be APF-authorized.         *\n*                                                                     *\n*        If you are just looking at the UCB and not trying to         *\n*        change anything in it, it seems that this method is          *\n*        quite harmless to use.                                       *\n*                                                                     *\n*    Attribution:                                                     *\n*                                                                     *\n*        This is an undocumented interface that was unearthed for     *\n*        the general public by Gilbert Saint-flour, and we are        *\n*        publicizing this discovery to perpetuate his memory.         *\n*                                                                     *\n*    System Dependencies:                                             *\n*                                                                     *\n*        The user of this interface must be aware that if IBM         *\n*        changes the layout of the ULUT by creating a new \"ULUT       *\n*        type\", then the programming interface must be adjusted       *\n*        for the new ULUT type. (At present writing, there are        *\n*        three ULUT types.  Type 3, starting with PTF UA90741, is     *\n*        located in 64-bit storage.  It is pointed to by a new        *\n*        location in the IOVT, a doubleword at +1B8 (decimal 440)     *\n*        off the beginning of the IOVT.  The previous ULUT types,     *\n*        Type 1 and Type 2, were pointed to by a fullword address     *\n*        at location +8 off the IOVT.                                 *\n*                                                                     *\n*        If IOVT+X'8' (for a fullword) is zero, then IOVT+X'1B8'      *\n*        (for a doubleword) points to the real ULUT (Type 3 or        *\n*        higher).  This depends on PTF level (for z/OS 1.13           *\n*        of z/OS 2.1) or on system level (for z/OS 2.2 and more).     *\n*                                                                     *\n*    ULUT Types:                                                      *\n*                                                                     *\n*        The ULUT interface to UCB scanning is not a documented       *\n*        IBM interface.  Therefore IBM (of course) reserves the       *\n*        right to change it at its own discretion.  It has changed    *\n*        twice, since ESA 5.  This was at the z/OS 1.7 level.         *\n*                                                                     *\n*        A new change, to ULUT Type 2, was made at the z/OS 1.7       *\n*        level.  ULUT Type 3, starting at the z/OS 2.2 level, has     *\n*        been moved to 64-bit storage and is pointed to by a          *\n*        doubleword address at +1B8 off the IOVT.  It must be         *\n*        addressed in 64-bit mode (SAM64).                            *\n*                                                                     *\n*        It is up to the user to keep track of any changes to the     *\n*        ULUT.  Access to the ULUT is provided by the following       *\n*        set of instructions (to be executed in 31-bit mode):         *\n*                                                                     *\n*          L     R3,16                  CVT                           *\n*          L     R3,X'7C'(,R3)          CVTIXAVL - IOCOM              *\n*          L     R3,X'D0'(,R3)          IOVT                          *\n*          L     R4,8(,R3)              UCB Lookup Table (ULUT)       *\n*          LR    R3,R4                  Point both regs to ULUT       *\n*          CLC   =C'ULUT',0(R3)         Eyecatcher there?             *\n*          BNE   EXIT                   Nope. It ain't it. Out.       *\n*                                                                     *\n*        This set of instructions is only valid through ULUT          *\n*        Type 2 (before PTF UA90741).  To include ULUT Type 3         *\n*        as well, you will need the following code:                   *\n*                                                                     *\n*   GETULUT  DS    0H                                                 *\n*            L     R2,16                     CVT                      *\n*            USING CVTMAP,R2                                          *\n*            MVC   OSLVLSW6,CVTOSLV6         Copy off CVTOSLV6 byte   *\n*            DROP  R2                                                 *\n*            L     R3,X'7C'(,R2)             CVTIXAVL                 *\n*            L     R3,X'D0'(,R3)             IOVT                     *\n*            L     R4,8(,R3)                 Check IOVTUL31           *\n*            LTR   R4,R4                     Zero?                    *\n*            BZ    GETULUN2                  Yes. Type 2 or 1.        *\n*            OI    OSLVLSW6,X'40'            No. Indicate 64-bit ULUT *\n*            LLGTR R3,R3                     Clear 33 hi-order bits   *\n*            LLGTR R4,R4                      of                      *\n*            LLGTR R9,R9                       registers              *\n*            LLGTR R10,R10                      for running in        *\n*            LLGTR R12,R12                       64-bit mode.         *\n*            LG    R4,X'1B8'(,R3)            Get dwd addr of ULUT.    *\n*            SAM64                           Go to 64-bit mode        *\n*            LGR   R3,R4                     Copy register.           *\n*            B     GETULUN3                  Skip old 31-bit stuff.   *\n*   GETULUN2 DS    0H                                                 *\n*            L     R4,8(,R3)                 Old ULUT addr off IOVT   *\n*            LR    R3,R4                     Copy register.           *\n*   GETULUN3 DS    0H                                                 *\n*            TM    OSLVLSW6,X'40'            64-bit ULUT?             *\n*            BZ    GETULUN4                  No. Skip 64-bit instrs.  *\n*            LLGTR Rx,Rx            Rx, Ry are base registers, etc.   *\n*            LLGTR Ry,Ry            Rx, Ry are base registers, etc.   *\n*   GETULUN4 DS    0H                                                 *\n*            CLC   =C'ULUT',0(R3)            Eyecatcher present?      *\n*            BNE   EXIT                      No. Get out.             *\n*                                                                     *\n*        A binary number at ULUT+4 indicates the ULUT type.           *\n*        There have currently been three ULUT types, Type X'01'       *\n*        and Type X'02', as well as the new Type X'03' which resides  *\n*        in 64-bit storage.  The pointers to the beginning of the     *\n*        actual table entries, and the addresses of other pointers    *\n*        differ in their location according to ULUT type.  Thus       *\n*        any program looking at the ULUT must first refer to the      *\n*        \"ULUT type\" field, and then get all the other information    *\n*        accordingly.                                                 *\n*                                                                     *\n*        The description of the ULUT table entries themselves,        *\n*        seems to be identical for all ULUT types thus far.           *\n*        For ULUT table entries, the entries are 12 bytes long.       *\n*        The first halfword is the hexadecimal four digit device      *\n*        address.  The last 4 bytes, at entry+8, is the UCB address.  *\n*        Each ULUT table entry also contains a halfword counter,      *\n*        at entry+4, starting with X'0002', and which appears to be   *\n*        incremented by 1, with each successive table entry.          *\n*                                                                     *\n*        However, whenever there is a switch of device type in the    *\n*        ULUT table, the counter field is zero for the last entry     *\n*        representing each given device type.                         *\n*                                                                     *\n*        The way we find the end of the table, is to get the total    *\n*        number of table entries from a field in the ULUT control     *\n*        block, get to the first entry, and count through all the     *\n*        entries until we get to the last one.                        *\n*                                                                     *\n*    Requirements:                                                    *\n*                                                                     *\n*        A calling program will refer to the ULUDSECT data area       *\n*        multiple times.  The number of times will usually reflect    *\n*        the total number of UCB's defined in the ULUT table.  The    *\n*        calling program must GETMAIN storage for this work area,     *\n*        and initialize it to zeros at the beginning.  It must NOT    *\n*        be initialized while the scan is running, because this       *\n*        DSECT is keeping track of which ULUT table entry (i.e.       *\n*        which UCB) the program is currently looking at.              *\n*                                                                     *\n*    Notes:                                                           *\n*                                                                     *\n*        While the calling program has a given ULUT table entry,      *\n*        and its associated UCB, in its sights, it is expected        *\n*        that all the required information be extracted from that     *\n*        UCB and passed to the work area described by this DSECT.     *\n*                                                                     *\n*    Residence:                                                       *\n*                                                                     *\n*        The storage pointed to by this DSECT can reside below        *\n*        the 16M line (in 24-bit storage), but the calling program    *\n*        must execute in 31-bit mode, because the real UCB info       *\n*        may reside above the 16M line, and the ULUT itself is        *\n*        usually located above the 16M line.                          *\n*                                                                     *\n*    Return Codes:                                                    *\n*                                                                     *\n*        Each referral to this DSECT should return a code of 0,       *\n*        except when the table has been exhausted, at which time      *\n*        the return code should be 4.  This is to copy the action     *\n*        of the UCBSCAN macro, so it is easier to insert a            *\n*        routine using this DSECT, into an existing program.          *\n*                                                                     *\n*    Date:  December 10, 2012                                         *\n*                                                                     *\n*    Revision:    2.0.0                                               *\n*                                                                     *\n*    Change History:                                                  *\n*                                                                     *\n*      2.0.0 - 2015/01/26 - Change for doubleword addressing in       *\n*                           the ULUT.  Older ULUT types use the       *\n*                           first word of the doubleword save areas.  *\n*                                                                     *\n* ------------------------------------------------------------------- *\n         DS    0D            Align to doubleword for GETMAIN\nULUDULUT DS    D             Address of ULUT in this system\nULUDCURR DS    D             Current ULUT table entry address\nULUDNEXT DS    D             Next ULUT table entry address\nULUDTOTC DS    F             Total count of ULUT entries\nULUDRUNC DS    F             Realtime descending count of ULUT entries\n*                             (initialized to ULUDTOTC at beginning)\nULUDDEVA DS    H             Device address of current table entry\nULUDCNTR DS    H             Counter in ULUT of current table entry\n*                             This is one higher than the table entry\n*                             count, and is incremented by one with\n*                             each successive table entry.  However,\n*                             this field is sometimes zero when there\n*                             is going to be a switch of device types.\nULUDUCBA DS    F             UCB address of current table entry\nULUDCEXT DS    F             Address of this UCB's common extension\nULUDDEVT DS    F             UCB device type (4 bytes)\nULUDONLF DS    X             UCB + 3 (device online has X'80' set)\nULUDTYPE DS    X             ULUT TYPE for this table\nULUDSLV6 DS    X             Copy of CVTOSLV6 flag byte in the CVT.\n*                             X'40' is used as a switch to show 64-bit.\nULUDRSV1 DS    X             RESERVED\nULUDSVR0 DS    F             Save area for R0 - fullword\nULUDSVR1 DS    F             Save area for R1 - fullword\nULUDSVUR DS    F             Save USING register for workarea\nULUDSVW1 DS    D             Save first work register  - doubleword\nULUDSVW2 DS    D             Save second work register - doubleword\nULUDSVBR DS    F             Save BCT register - fullword\n         DS    0D            Align for GETMAIN\nULUDLENG EQU   *-ULUDSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ULUINIT": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00T\\x01\\x15\\x02o\\x01\\x15\\x02o\"7\\x00\\x86\\x00~\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2015-01-26T00:00:00", "modifydate": "2015-01-26T22:37:54", "lines": 134, "newlines": 126, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         ULUINIT &WRKAREA=,&UREG=,&EXIT=,&BREG=,&WR1=,&WR2=\n* ------------------------------------------------------------------ *\n*   ULUINIT - Access the ULUT (UCB Lookup Table) and initialize      *\n*             the ULUDSECT control block with some of the ULUT       *\n*             information.                                           *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*   Important:  If you are running with ULUT Type=3 or higher,       *\n*   ---------   this macro invokes the SAM64 instruction.            *\n*                                                                    *\n*       Therefore, YOU MUST CLEAR bit 33 X'00000000_80000000'        *\n*       from the BASE REGISTERS before invoking this macro.          *\n*                                                                    *\n*       Example:  If the base register is R10, then code:            *\n*                                                                    *\n*          LLGTR    R10,R10                                          *\n*          ULUINIT  etc, etc.                                        *\n*                                                                    *\n*       Otherwise you may get a S0C4, reason code 3B.                *\n*                                                                    *\n* ------------------------------------------------------------------ *\n*    The ULUINIT macro must be invoked in AMODE 31.                  *\n*    The ULUINIT macro initializes the ULUDSECT control block.       *\n*    The user must supply a 88 bit workarea for ULUINIT to use.      *\n*    The ULUDSECT work area may reside in 24 bit storage.            *\n* ------------------------------------------------------------------ *\n*        Registers indicated by WRn will be saved and restored.      *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*    Parameter descriptions:                                         *\n*                                                                    *\n*        WRKAREA - a 88 byte work area to contain the data           *\n*                  described by the ULUDSECT control block           *\n*        UREG    - the USING register for accessiblity to the        *\n*                  ULUDSECT control block in the work area           *\n*        EXIT    - a location to escape the ULUT access if           *\n*                  there is an error                                 *\n*        BREG    - BCT register initially containing ULUITOTC        *\n*                  to count table entries as you pass through        *\n*                  them.  May not have to be decremented by BCT.     *\n*                  But it should be decremented for each ULUT        *\n*                  entry that was passed through.                    *\n*        WR1     - work register - saved and restored  31- or 64-bit *\n*        WR2     - work register - saved and restored  31- or 64-bit *\n*                                                                    *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*        Enter and leave this macro in 31-bit mode, always.          *\n*        -----     -----               -----------                   *\n* ------------------------------------------------------------------ *\n         LA    &UREG,&WRKAREA         Point to work area\n         USING ULUDSECT,&UREG\n*                                     Get ULUT and initialize.\n         ST    &UREG,ULUDSVUR         Save USING register in cntl blk.\n         STG   &WR1,ULUDSVW1          Save off entire two bytes.\n         STG   &WR2,ULUDSVW2          Save off entire two bytes.\n         ST    &BREG,ULUDSVBR         Save count register in cntl blk.\n         LLGTR &WR1,&WR1              Make sure hi order not corrupted\n         LLGTR &WR2,&WR2\n         L     &WR1,16                CVT\n         MVC   ULUDSLV6(1),X'4F6'(&WR1)  Move entire CVTOSLV6 to DSECT\n*                                        Will use as a switch, later.\n         LLGTR &WR1,&WR1              Make sure hi order not corrupted\n         LLGTR &WR2,&WR2\n*                                     ****  GET THE ULUT NOW  ****\n         L     &WR1,X'7C'(,&WR1)      CVTIXAVL\n         L     &WR1,X'D0'(,&WR1)      IOVT\n*                                     Check if IOVTUL31 is zero or not.\n*                                     If zero, then IOVTULUT is nonzero\n         L     &WR2,X'8'(,&WR1)       Load IOVTUL31 fullword.\n         LTR   &WR2,&WR2              Is it zero?\n         BNZ   ULUNTYP3               No. We have Type 1 or 2.\n*                                     Yes. Handle 64-bit ULUT\n         OI    ULUDSLV6,X'40'         Indicate 64-bit ULUT table.\n         LG    &WR2,X'1B8'(,&WR1)     Load dwd ULUT address in 2nd reg\n         LGR   &WR1,&WR2              Copy dwd address to first reg\n* ------------------------------------------------------------------ *\n         SAM64                        Deal with ULUT in 64-bit mode\n         CLC   =C'ULUT',0(&WR1)       Is ULUT eyecatcher there?\n         BNE   &EXIT                  No eyecatcher, not ULUT, exit.\n         STG   &WR1,ULUDULUT          Save ULUT address in DSECT\n         CLI   4(&WR1),X'03'          Is the Type = X'03' ?\n         BE    ULUITYP3               Yes. Deal with Type 3.\n         SAM31                        31-bit in anticipation of exit\n         B     &EXIT                  No. exit.\nULUITYP3 DS    0H                     Handle Type 3\n         MVI   ULUDTYPE,X'03'         Indicate ULUT Type 3.\n         SAM64                        Has to be 64-bit mode\n         LG    &WR1,X'10'(,&WR1)      Type 3, addr of first table entry\n         STG   &WR1,ULUDCURR          Store 64-bit entry in cntl block\n         L     &WR2,X'1C'(,&WR2)      Count of all entries - fullword\n         LLGTR &WR2,&WR2              Clear hi order of WR2.\n         SAM31                        Nothing later needs SAM64\n         ST    &WR2,ULUDTOTC          Store in control block\n         ST    &WR2,ULUDRUNC          Initialize running descent count\n         B     ULUILSET               Do search processing.\nULUNTYP3 DS    0H\n         L     &WR2,8(,&WR1)          UCB LOOKUP TABLE (ULUT)\n         LR    &WR1,&WR2              Point both registers to it.\n         CLC   =C'ULUT',0(&WR1)       Eyecatcher there?\n         BNE   &EXIT                  Nope. Not pointing to table.\n         ST    &WR1,ULUDULUT          Start filling control block.\n         CLI   4(&WR1),X'01'          Type 1?\n         BE    ULUITYP1               Yes. Handle as type 1.\n         CLI   4(&WR1),X'02'          Type 2?\n         BE    ULUITYP2               Yes. Handle as type 2.\n         B     &EXIT                  No. If new type, test for it here\nULUITYP1 DS    0H                     Handle Type 1\n         MVI   ULUDTYPE,X'01'         Move type to control block.\n         L     &WR1,X'0C'(,&WR1)      TYPE 1, addr of first entry\n         ST    &WR1,ULUDCURR          Store entry addr in control block\n         L     &WR2,X'10'(,&WR2)      Count of all entries.\n         ST    &WR2,ULUDTOTC          Put number into control block.\n         ST    &WR2,ULUDRUNC          Initialize running descend count\n         B     ULUILSET               Do search processing.\n*\nULUITYP2 DS    0H                     Handle Type 2\n         MVI   ULUDTYPE,X'02'         Move type to control block.\n         L     &WR1,X'14'(,&WR1)      TYPE 2, addr of first entry\n         ST    &WR1,ULUDCURR          Store entry addr in control block\n         L     &WR2,X'18'(,&WR2)      Count of all entries.\n         ST    &WR2,ULUDTOTC          Put number into control block.\n         ST    &WR2,ULUDRUNC          Initialize running descend count\n         B     ULUILSET               Do search processing.\n*\nULUILSET DS    0H                     Must exit in 31-bit mode.\n         L     &BREG,ULUDTOTC         Load number of loops in register\n         LG    &WR1,ULUDSVW1          Restore work register contents\n         LG    &WR2,ULUDSVW2\n*\n         ULUDSECT\n&SYSECT  CSECT ,                      Resume user's CSECT\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULUSCAN": {"ttr": 1800, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x02\\x00\\x00V\\x01\\x124o\\x01\\x15\\x02o\"Q\\x00Q\\x00\\x14\\x00\\x00\\xd4\\xc1\\xc3\\xd9\\xd6@@@@@'", "ispf": {"version": "02.00", "flags": 0, "createdate": "2012-12-11T00:00:00", "modifydate": "2015-01-26T22:51:56", "lines": 81, "newlines": 20, "modlines": 0, "user": "MACRO"}, "text": "         MACRO\n         ULUSCAN &WR1=,&UCBR=,&BREG=\n* ------------------------------------------------------------------ *\n*   ULUSCAN - Access one ULUT (UCB Lookup Table) entry and fill      *\n*             in all the rest of the fields of the ULUDSECT control  *\n*             block, which depend on the current particular ULUT     *\n*             table entry.                                           *\n* ------------------------------------------------------------------ *\n*    The ULUSCAN macro must be invoked in AMODE 31.                  *\n*    The user must supply a 88 bit workarea which contains the       *\n*      data described by the ULUDSECT macro.                         *\n*    The ULUDSECT work area may reside in 24 bit storage.            *\n* ------------------------------------------------------------------ *\n*        Registers indicated by WRn will be saved and restored.      *\n* ------------------------------------------------------------------ *\n*                                                                    *\n*    Parameter descriptions:                                         *\n*                                                                    *\n*        UCBR    - the register pointing to the current UCB          *\n*                  pointed to by this ULUT entry                     *\n*        BREG    - BCT register initially containing ULUDTOTC        *\n*                  to count table entries as you pass through        *\n*                  them.  Later contains descending count,           *\n*                  ULUDRUNC.                                         *\n*        WR1     - work register - saved and restored                *\n*                                                                    *\n* ------------------------------------------------------------------ *\n         TM    ULUDSLV6,X'40'         Is this a 64-bit ULUT?\n         BZ    SKIPTY3                No. Deal as 31-bit.\n         STG   &WR1,ULUDSVW1          Save work reg previous contents\n*                                     64-bit housekeeping\n         LLGTR &WR1,&WR1              Clear 64-bit hi order for safety\n         LLGTR &UCBR,&UCBR            Clear 64-bit hi order for safety\n         LLGTR &BREG,&BREG            Clear 64-bit hi order for safety\n         LG    &WR1,ULUDCURR          Look at current ULUT entry\n         B     SKIPTY2\n*                                     31-bit processing\nSKIPTY3  DS    0H\n         ST    &WR1,ULUDSVW1          Save work reg previous contents\n         L     &WR1,ULUDCURR          Look at current ULUT entry\n*\nSKIPTY2  DS    0H                     Both modes come here.\n         ST    &BREG,ULUDRUNC         Save descending count.\n         TM    ULUDSLV6,X'40'         64-bit ULUT?\n         BZ    SKIPTY3A               No. Stay in 31-bit mode.\n         SAM64\nSKIPTY3A DS    0H                     Both modes come here.\n         MVC   ULUDDEVA(2),0(&WR1)    Get hex device address in entry\n         MVC   ULUDCNTR(2),4(&WR1)    Get counter of this ULUT entry\n         L     &UCBR,8(,&WR1)         Get address of current UCB\n         ST    &UCBR,ULUDUCBA         Save address in control block\n         MVC   ULUDONLF(1),3(&UCBR)   Save byte to show if online\n         MVC   ULUDDEVT(4),X'10'(&UCBR) Copy device type to ctrl block\n*                                   Get address of UCB common extension\n         TM    ULUDSLV6,X'40'         64-bit mode?\n         BZ    SKIPTY3B               No. No need to SAM31.\n         SAM31\nSKIPTY3B DS    0H\n         ST    R1,ULUDSVR1            Save R1 in control block\n         L     R1,ULUDUCBA            Load real UCB address\n         ST    R0,ULUDSVR0            Save register 0\n         IOSCMXR\n         ST    R1,ULUDCEXT            Result of macro, UCB common ext.\n         L     R0,ULUDSVR0            Restore register 0\n         L     R1,ULUDSVR1            Restore register 1\n         TM    ULUDSLV6,X'40'         Running z/OS 2.2 or higher?\n         BZ    SKIPTY3C               No. Don't switch modes.\n         SAM64                        ULUT address is 64-bit\nSKIPTY3C DS    0H\n         LA    &WR1,X'C'(,&WR1)       Go to next ULUT entry\n         TM    ULUDSLV6,X'40'         Are we running a 64-bit ULUT?\n         BZ    SKIPTY3D               No. Handle fullword processing.\n         STG   &WR1,ULUDNEXT          Doubleword processing.\n         LG    &WR1,ULUDSVW1\n         SAM31                        Switch to 31-bit before exit.\n         B     SKIPEXIT\nSKIPTY3D DS    0H                     Fullword processing 31-bit ULUT.\n         ST    &WR1,ULUDNEXT          And save it in control block\n         L     &WR1,ULUDSVW1          Restore prev work reg contents\nSKIPEXIT DS    0H\n         MEND\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT046/FILE046.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT046", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}