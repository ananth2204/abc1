{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012613000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 411502, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE689.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 411502, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE689.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x07\\n'", "DS1TRBAL": "b'\\x02d'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xd2\\x00\\x02\\x04\\xd2\\x00\\t\\x00\\x08'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04C\\x00\\x00\\x01\\x04$\\x9f\\x01\\x04$\\x9f\\x13\\x00\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf7@@@'", "ispf": {"version": "04.67", "flags": 0, "createdate": "2004-09-05T00:00:00", "modifydate": "2004-09-05T13:00:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-467"}, "text": "REGULAR CBT TAPE - VERSION 467    FILE:  689\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT467.FILE689\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   16 MEMBERS COUNTED; CUMULATIVE SIZE IS 3,508 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/05/04    13:00:21    GMT-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$MACDOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"X\\x00\\x1f\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:58:00", "lines": 31, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "This data set contains the 8 macros used to map control blocks for\nSVC 26.\n\n IDAAMDSB - 2004/09/01 22:49    83    83 CATMACS\n IEZCAML  - 2004/09/01 22:49    52    52 CATMACS\n IEZCTGCV - 2004/09/01 22:49    35    35 CATMACS\n IEZCTGFL - 2004/09/01 22:49   129   129 CATMACS\n IEZCTGFV - 2004/09/01 22:49   110   110 CATMACS\n IEZCTGPL - 2004/09/01 22:49   383   383 CATMACS\n IEZCTGVL - 2004/09/01 22:49    30    30 CATMACS\n IEZCTGWA - 2004/09/01 22:49    31    31 CATMACS\n\nThe macros are mostly based upon PL/S mappings distributed on the\noptional materials tapes for MVS, and on information in the old\nCatalog Management PLM.  To the best of my knowledge, there is no\ncopyright attached to these macros, and they may be considered to\nbe public domain.\n\nWhile they are believed to be correct, the author can not be\nresponsible for any damages resulting from their use.\n\nPeter Sawyer\nSawyer and Associates\n\nNote from Sam Golob:\n\n  The member called $$MACROS contains the macros as expanded in\n  Peter's written paper.  But the machine-readable assemblable\n  macros themselves have been included under their own names, as\n  separate members in this file.  See the list of names, above.\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$MACROS": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x04$_\\x01\\x04$_#\\x04\\x02\\x18\\x02\\x06\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T23:04:00", "lines": 536, "newlines": 518, "modlines": 0, "user": "SBGOLOB"}, "text": "./ ADD NAME=$$NOTE\n     This IEBUPDTE-unloaded pds of macros contains an unofficial\n     version of the catalog macros necessary for invoking SVC 26.\n\n     These were the macros as they were printed in Peter's paper.\n\n     The actual machine-readable macros are included under their\n     own names in File 689, and are listed below.\n\n     IDAAMDSB - 2004/09/01 22:49    83    83 CATMACS\n     IEZCAML  - 2004/09/01 22:49    52    52 CATMACS\n     IEZCTGCV - 2004/09/01 22:49    35    35 CATMACS\n     IEZCTGFL - 2004/09/01 22:49   129   129 CATMACS\n     IEZCTGFV - 2004/09/01 22:49   110   110 CATMACS\n     IEZCTGPL - 2004/09/01 22:49   383   383 CATMACS\n     IEZCTGVL - 2004/09/01 22:49    30    30 CATMACS\n     IEZCTGWA - 2004/09/01 22:49    31    31 CATMACS\n\n./ ADD NAME=IDAAMDSB 0100-04242-04242-0927-00081-00081-00000-MACRO\n* THE AMDSB CONTAINS STATISTICAL INFORMATION ABOUT RECORD PROCESSING  *\n* IN THE DATASET.  IT ALSO CONTAINS SOME OF THE DATASET'S ATTRIBUTES  *\n* AND SPECIFICATIONS.  THE AMDSB IS BUILT USING THE DATASET OR INDEX  *\n* CATALOG RECORD'S AMDSB SET OF FIELDS, WHEN THE CLUSTER IS OPENED.   *\n* A COPY OF THE AMDSB IS CONTAINED IN THE DATASET'S DATA CATALOG      *\n* RECORD AND, IF THE DATASET IS KEY SEQUENCED, IN THE INDEX CATALOG   *\n* RECORD.  THE DATA OR INDEX AMB (AMBDSB) POINTS TO ITS ASSOCIATED    *\n* AMDSB.                                                              *\n*                                                                     *\nIDAAMDSB DSECT ,\nAMDSB    EQU   *\nAMDSBID  DS    X            AMDSB IDENTIFIER, X'60'.\nAMDATTR  DS    X            ATTRIBUTES OF THE DATASET:\nAMDDST   EQU   B'10000000'  KEY SEQUENCED DATASET.\nAMDWCK   EQU   B'01000000'  CHECK EACH RECORD WHEN IT IS WRITTEN.\nAMDSDT   EQU   B'00100000'  SEQUENCE SET IS STORED WITH THE DATA AND IS\n*                           REPLICATED   DUPLICATED AS MANY TIMES AS\n*                           POSSIBLE AROUND THE TRACK.\nAMDREPL  EQU   B'00010000'  ALL INDEX RECORDS ARE REPLICATED\n*                           DUPLICATED AS MANY TIMES AS POSSIBLE AROUND\n*                           THE TRACK.\nAMDORDER EQU   B'00001000'  USE THE VOLUMES IN THE SAME ORDER AS IN THE\n*                           VOLUME LIST.\nAMDRANGE EQU   B'00000100'  THE DATASET IS DIVIDED INTO KEY RANGES.\nAMDRRDS  EQU   B'00000010'  RELATIVE RECORD DATASET.\nAMDSPAN  EQU   B'00000001'  DATASET CONTAINS SPANNED RECORDS.\nAMDLEN   DS    H            LENGTH OF AMDSB.\nAMDNEST  DS    0H           NO OF ENTRIES IN THE INDEX SECTION.\nAMDAKRKP DS    H            RELATIVE KEY POSITION OF THE ALTERNATE KEY.\nAMDRKP   DS    H            RELATIVE KEY POSITION.\nAMDKEYLN DS    H            KEY LENGTH.\nAMDPCTCA DS    X            PERCENT OF FREE CONTROL INTERVALS IN THE\n*                           CONTROL AREA.\nAMDPCTCI DS    X            PERCENT OF FREE BYTES IN THE CONTROL\n*                           INTERVAL.\nAMDCIPCA DS    H            NUMBER OF CONTROL INTERVALS IN A CONTROL\n*                           AREA.\nAMDFSCA  DS    H            NUMBER OF FREE CONTROL INTERVALS IN A\n*                           CONTROL AREA.\nAMDFSCI  DS    XL4          NUMBER OF FREE BYTES PER CONTROL INTERVAL.\nAMDCINV  DS    F            CONTROL INTERVAL SIZE.\nAMDLRECL DS    F            MAXIMUM RECORD SIZE.\nAMDHLRBA DS    0F           RELATIVE BYTE ADDRESS (RBA) OF THE HIGH\n*                           LEVEL INDEX RECORD (KSDS).\nAMDNSLOT DS    F            NUMBER OF RECORD SLOTS PER CONTROL INTERVAL\n*                           (RRDS).\nAMDSSRBA DS    0F           RELATIVE BYTE ADDRESS (RBA) OF THE FIRST\n*                           SEQUENCE SET RECORD (KSDS).\nAMDMAXRR DS    F            MAXIMUM VALID RELATIVE RECORD NUMBER(RRDS).\nAMDPARDB DS    F            ADDRESS OF THE TO FIRST ARDB\nAMDATTR3 DS    X            ATTRIBUTES:\nAMDUNQ   EQU   B'10000000'  THE DATASET HAS NONUNIQUE KEYS.\nAMDFAULT EQU   B'01000000'  THE DATASET IS STAGED BY CYLINDER FAULT.\nAMDBIND  EQU   B'00100000'  THE DATASET IS STAGED AND BOUND.\nAMDWAIT  EQU   B'00010000'  THE DATASET DESTAGING IS COMPLETED BEFORE\n*                           CONTROL IS RETURNED TO THE PROGRAM THAT\n*                           CLOSES THE DATASET.\nAMDLM    EQU   B'00001000'  THE DATASET IS LOADED.\nAMDLDS   EQU   B'00000100'  LINEAR DATASET\n*        EQU   B'00000011'  RESERVED\nAMDSTRNO DS    X            NUMBER OF CONCURRENT REQUESTS.\nAMDDUI   DS    CL4          RESERVEIMS DBRC USAGE INDICATOR\nAMDBFNO  DS    XL2          NUMBER OF DATA OR INDEX BUFFERS.\nAMDSTAT  DS    0XL48        DATASET STATISTICS:\nAMDSTSP  DS    XL8          OS/VS SYSTEM TIME STAMP.\nAMDNIL   DS    H            NUMBER OF INDEX LEVELS\nAMDNEXT  DS    H            NUMBER OF EXTENTS IN THE DATASET.\nAMDNLR   DS    F            NUMBER OF USER SUPPLIED RECORDS IN THE\n*                           DATASET.\nAMDDELR  DS    F            NUMBER OF DELETED RECORDS.\nAMDIREC  DS    F            NUMBER OF INSERTED RECORDS.\nAMDUPR   DS    F            NUMBER OF UPDATED RECORDS.\nAMDRETR  DS    F            NUMBER OF RETRIEVED RECORDS.\nAMDASPA  DS    F            NUMBER OF BYTES OF FREE SPACE IN THE\n*                           DATASET.\nAMDNCIS  DS    F            NUMBER OF TIMES A CONTROL INTERVAL WAS\n*                           SPLIT.\nAMDNCAS  DS    F            NUMBER OF TIMES A CONTROL AREA WAS SPLIT.\nAMDEXCP  DS    F            NUMBER OF TIMES EXCP WAS ISSUED BY VSAM I/O\n*                           ROUTINES.\nAMDSBLEN EQU   * AMDSB\n./ ADD NAME=IEZCTGCV 0100-04242-04242-0927-00031-00031-00000-MACRO\n***********************************************************************\n*                                                                     *\n*  MACRO NAME = IEZCTGCV                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME = CATALOG CONTROL VOLUME LIST                     *\n*                                                                     *\n*  FUNCTION = THE CTGCV IS BUILT BY THE ISSUER (PRIMARILY THE         *\n*             SCHEDULER) OF A SUPERLOCATE REQUEST BY DATA SET NAME    *\n*             FOR VOLUME INFORMATION.  CATALOG MANAGEMENT USES        *\n*             THE CTGCV TO RETURN TO THE CALLER THE NAME OF THE       *\n*             CATALOG THAT CONTAINS THE DATA SET NAME.  THE CTGPL     *\n*             POINTS TO THE CTGCV.                                    *\n*                                                                     *\n***********************************************************************\nCTGCV    DSECT ,\n*\nCTGCVVOL DS    CL6                VOLUME SERIAL NUMBER OF THE CATALOG\n*                                 NAMED IN CTGCVDSN. RETURNED ONLY FOR\n*                                 GDG SINGLE REQUESTS.\nCTGCVDSN DS    CL44               NAME OF THE CATALOG IN WHICH THE DATA\n*                                 SET NAME WAS LOCATED, OR WHICH NEEDS\n*                                 TO BE OPENED TO CONTINUE THE\n*                                 SUPERLOCATE\nCTGCVDEV DS    XL4                CVOL DEVICE TYPE\nCTGCVCC  DS    CL44               AN ALIAS OF THE CATALOG (CATALOG\n*                                 CONNECTOR).  RETURNED ONLY WHEN THE\n*                                 CATALOG IS IDENTIFIED BY THE FIRST\n*                                 QUALIFIER OF THE DATASET NAME AND\n*                                 THE FIRST QUALIFIER IS AN ALIAS OF\n*                                 THE CATALOG NAME.\n*                                                                     *\n./ ADD NAME=IEZCTGFL 0100-04242-04242-0927-00058-00058-00000-MACRO\nCTGFL    DSECT ,                        */\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGFL                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = CATALOG FIELD PARAMETER LIST                */\n*/*                                                                  */\n*/*   FUNCTION = THE FIELD PARAMETER LIST (CTGFL) DEFINES ONE OF     */\n*/*              THE CATALOG RECORD'S FIELDS OR A GROUP OF           */\n*/*              LOGICALLY RELATED FIELDS.  THE CTGFL IS BUILT       */\n*/*              BEFORE AN OS/VS COMPONENT ISSUES THE CATLG          */\n*/*              MACRO INSTRUCTION (SVC 26) TO PROCESS A             */\n*/*              CATALOG RECORD.  THE CTGFL IS USED IN TWO           */\n*/*              SITUATIONS:                                         */\n*/*                (1)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO RETRIEVE OR UPDATE.  THE CTGPL CONTAINS   */\n*/*                     THE ADDRESS OF EACH CTGFL USED IN THIS WAY.  */\n*/*                (2)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO COMPARE AGAINST CALLER SUPPLIED DATA.     */\n*/*                     THIS IS A \"TEST\" CTGFL AND IS ADDRESSED BY   */\n*/*                     ANOTHER CTGFL.                               */\n*/*                                                                  */\n*/********************************************************************/\n*\nCTGFLDNO DS    XL1                      NUMBER PAIRS DATA LNG/ADDR\n*\nCTGFLDCD DS    XL1                      TEST CONDITION\nCTGFLDEQ EQU   X'80'                    EQUAL\nCTGFLDNE EQU   X'60'                    NOT EQUAL\nCTGFLDGT EQU   X'20'                    GREATER THAN\nCTGFLDLT EQU   X'40'                    LESS THAN\nCTGFLDGE EQU   X'A0'                    GREATER THAN OR EQUAL\nCTGFLDLE EQU   X'C0'                    LESS THAN OR EQUAL\nCTGFLDZ  EQU   X'80'                    TEST UNDER MASK FOR ZEROES\nCTGFLDON EQU   X'10'                    TEST UNDER MASK FOR ONES\nCTGFLDMX EQU   X'40'                    TEST UNDER MASK FOR MIXED\nCTGFLDGF EQU   X'FF'                    GENERIC FILTER TEST\n*\nCTGFLDGC DS    XL1                      GROUP CODE NUMBER\n*\nCTGFLDRE DS    XL1                      TEST RESULT\nCTGFLDTS EQU   X'01'                    TEST MASK   CTGFLDRE\n*                                       = 0   SUCCESSFUL TEST,\n*                                       = 1   TEST FAILED\n*\nCTGFLDWA DS    F                        CATALOG WORK AREA\n*\nCTGFLDNM DS    A                        FIELD NAME ADDRESS\n*\nCTGFLCHN DS    A                        ADDRESS OF NEXT FIELD\n*\n*\nCTGFLDAT DS    0CL8                     PAIRS OF DATA LENGTH/ADDRESS\nCTGFLNG  DS    F                        DATA LENGTH\nCTGFLPT  DS    A                        DATA ADDRESS\n*\n*\nCTGFLLEN EQU   * CTGFL                  LENGTH OF CTGFL\n./ ADD NAME=IEZCTGFV 0100-04242-04242-0927-00107-00107-00000-MACRO\nCTGFV    DSECT ,\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGFV                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = FIELD VECTOR TABLE                          */\n*/*                                                                  */\n*/*   FUNCTION = THE \"CTGFV\" IS BUILT BY THE ACCESS METHOD SERVICES  */\n*/*              UTILITY PROGRAMS AND CONTAINS ADDRESSES OF USER     */\n*/*              SUPPLIED INFORMATION FIELDS AND LISTS.  THE \"CTGFV\" */\n*/*              IS BUILT WHEN THE USER ISSUES A \"DEFINE\" OR \"ALTER\" */\n*/*              COMMAND.  IF THE USER IS CREATING A CLUSTER, A      */\n*/*              \"CTGFV\" IS BUILT FOR EACH CATALOG RECORD THAT WILL  */\n*/*              BE BUILT TO DESCRIBE THE CLUSTER: THAT IS, ACCESS   */\n*/*              METHOD SERVICES \"DEFINE\" PROCESSING BUILDS A        */\n*/*              \"CLUSTER\" CTGFV, A \"DATA\" CTGFV\", AND, IF THE       */\n*/*              CLUSTER IS KEY SEQUENCED, AN \"INDEX\" CTGFV.  THE    */\n*/*              \"CTGFV\" IS POINTED TO BY THE \"CTGPL(CTGFVT).  IF    */\n*/*              ACCESS METHOD SERVICES BUILDS MORE THAN ONE \"CTGFV\" */\n*/*              THE \"CLUSTER\" CTGFV IS POINTED TO BY THE \"CTGPL\"    */\n*/*              (CTGFVT) AND THE \"DATA\" AND \"INDEX\" CTGFVS ARE      */\n*/*              POINTED TO BY THE \"CLUSTER\" CTGFV.                  */\n*/*                                                                  */\n*/********************************************************************/\nCTGFVTYP DS    C                  THE CTGFV CONTAINS INFORMATION USED\n*                                 BY THE DEFINE ROUTINES TO BUILD A\n*                                 CATALOG RECORD OF TYPE:\nCTGFVALN EQU   C'A'               NON VSAM DATA SET\nCTGFVGBS EQU   C'B'               GENERATION DATA GROUP (GDG) BASE\nCTGFVCL  EQU   C'C'               CLUSTER\nCTGFVDTA EQU   C'D'               DATA SET\nCTGFVAIX EQU   C'G'               ALTERNATE INDEX\nCTGFVIDX EQU   C'I'               INDEX\nCTGFVPTH EQU   C'R'               PATH\nCTGFVVOL EQU   C'V'               VOLUME\nCTGFVANM EQU   C'X'               ALIAS NAME\nCTGFVPRO DS    B                  CATALOG MANAGEMENT SERVICES\n*                                 PROCESSING OPTION FLAGS:\nCTGFVAVL EQU   B'10000000'        ALTER: ADD VOLUMES\nCTGFVRVL EQU   B'01000000'        ALTER: REMOVE VOLUMES\nCTGFVNDC EQU   B'00100000'        NO DEVICE TYPE CONVERSION\nCTGFVDRC EQU   B'00010000'        DEFINE A RECOVERABLE CATALOG\nCTGFVRON EQU   B'00001000'        TURN RACF INDICATOR ON\nCTGFVROF EQU   B'00000100'        TURN RACF INDICATOR OFF\nCTGFVBOF EQU   B'00000010'        TURN BUSY INDICATOR OFF\n*        EQU   B'00000001'        RESERVED\nCTGFVELM DS    X                  ELEMENT NUMBER OF CMSPCATR\nCTGFVFL2 DS    B                  ICF PROCESSING FLAGS\nCTGFVSRC EQU   B'10000000'        SOURCE CATALOG NAME CHANGE\nCTGFVNAL EQU   B'01000000'        DEFINE WITH NO ALLOCATION\nCTGFVICF EQU   B'00100000'        0=VSAM CATALOG, 1=ICF CATALOG\nCTGFVRCT EQU   B'00010000'        DEFINE WITH RECATALOG\nCTGFVNSD EQU   B'00001000'        NO CATALOG SELF DESCRIBING RECORDS\nCTGFVABS EQU   B'00000100'        SUBALLOCATED DATASET FOR ICF\n*                                 CONVERTCAT\n*        EQU   B'00000011'        RESERVED\nCTGFVDCH DS    A                  ADDRESS OF CLUSTER'S DATA CTGFV\nCTGFVICH DS    A                  ADDRESS OF CLUSTER'S INDEX CTGFV\nCTGFVVCH DS    A                  ADDRESS OF SPACE CTGFV\nCTGFVIND DS    A                  ADDRESS OF ASSOCIATED JCL DD\n*                                 STATEMENT\nCTGFVENT DS    A                  ADDRESS OF ENTRY NAME\nCTGFVSTY DS    A                  ADDRESS OF THE SECURITY INFORMATION\n*                                 CTGFL (PASSWORDS, CODEWORD, AND\n*                                 NUMBER OF TRIES)\nCTGFVOWN DS    A                  ADDRESS OF OWNER IDENTIFICATION CTGFL\nCTGFVEXP DS    A                  ADDRESS OF EXPIRY DATE CTGFL\nCTGFVCRE DS    A                  ADDRESS OF CREATION DATE CTGFL\nCTGFVVLT DS    A                  ADDRESS OF VOLUME SERIAL NUMBER LIST\nCTGFVRNG DS    A                  ADDRESS OF THE KEY RANGE LIST\nCTGFVDVT DS    A                  ADDRESS OF THE DEVTYPE CTGFL (FOR\n*                                 DEFINE NONVSAM ONLY)\nCTGFVSPC DS    0A                 ADDRESS OF THE SPACE ALLOCATION\n*                                 INFORMATION CTGFL\nCTGFVTTR DS    A                  ADDRESS OF THE DSCB'S TTR (FOR DEFINE\n*                                 NONVSAM ONLY)\nCTGFVAMD DS    0A                 ADDRESS OF THE AMDSB CTGFL (FOR\n*                                 DEFINE CATALOG AND DEFINE CLUSTER\n*                                 ONLY)\nCTGFVFSN DS    A                  ADDRESS OF THE FILE SEQUENCE NUMBER\n*                                 CTGFL (FOR DEFINE NONVSAM ONLY)\nCTGFVATR DS    A                  ADDRESS OF DATA SET ATTRIBUTES CTGFL\nCTGFVBUF DS    A                  ADDRESS OF THE BUFFER SIZE CTGFL\nCTGFVLRS DS    A                  ADDRESS OF THE AVERAGE RECORD SIZE\n*                                 CTGFL\nCTGFVLMT DS    0A                 ADDRESS OF THE GDG LIMIT (FOR DEFINE\n*                                 GDG BASE ONLY)\nCTGFVEXT DS    A                  ADDRESS OF EXCEPTION EXIT PARAMETER\n*                                 LIST\nCTGFVGAT DS    0A                 ADDRESS OF THE GDG ATTRIBUTES (FOR\n*                                 DEFINE GDG BASE ONLY)\nCTGFVUPG DS    A                  ADDRESS OF RGATTR PARAMETER LIST\nCTGFVNAM DS    A                  ADDRESS OF THE TRUE NAME CTGFL (FOR\n*                                 DEFINE ALIAS ONLY)\nCTGFVPWD DS    0A                 ADDRESS OF THE RELATED OBJECTS\n*                                 PASSWORD\nCTGFVCPP DS    A                  ADDRESS OF TSO COMMAND PROCESSOR\n*                                 PARAMETER LIST (CPPL TSO COMMAND\n*                                 CALLERS ONLY). IF ZERO, DAIRFAIL\n*                                 MESSAGES WILL BE WTP'S.\nCTGFVWKA DS    0A                 ADDRESS OF THE CRA FEEDBACK AREA\nCTGFVCAT DS    A                  ADDRESS OF SOURCE CATALOG ACB\nCTGFVELT DS    A                  ADDRESS OF EXTENT INFORMATION LIST\nCTGFVRBA DS    A                  ADDRESS OF FPL OF HURBA AND HARBA FOR\n*                                 DATA OR INDEX COMPONENT DURING\n*                                 CONVERTCAT\nCTGFVLEN EQU   * CTGFV            LENGTH OF FIELD VECTOR TABLE\n./ ADD NAME=IEZCTGPL 0100-04242-04242-0927-00183-00183-00000-MACRO\nCTGPL    DSECT ,\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGPL                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = CATALOG PARAMETER LIST                      */\n*/*                                                                  */\n*/*   FUNCTION = THE CATALOG PARAMETER LIST (CTGPL) DEFINES THE      */\n*/*              CATALOG MANAGEMENT REQUEST AND ITS OPTIONS, THE     */\n*/*              CATALOG RECORD TO BE PROCESSED, AND THE VSAM        */\n*/*              CATALOG THAT CONTAINES THE RECORD.  THE CTGPL IS    */\n*/*              BUILT BEFORE AN OS/VS COMPONENT ISSUES THE CATLG    */\n*/*              MACRO INSTRUCTION (SVC 26) TO PROCESS A CATALOG     */\n*/*              RECORD.  WHEN THE CATALOG MANAGEMENT ROUTINES       */\n*/*              BUILD A CCA TO SUPPORT THE REQUEST, THE ADDRESS     */\n*/*              OF THE CTGPL IS PUT INTO THE CCA (CCACPL).          */\n*/*                                                                  */\n*/*   CONTROL BLOCK STRUCTURE = THE CTGPL IS POINTED TO BY           */\n*/*                             REGISTER 1.                          */\n*/*                                                                  */\n*/********************************************************************/\n*/*\nCTGOPTN1 DS    XL1                      FIRST OPTION INDICATOR\nCTGBYPSS EQU   X'80'                    BYPASS\nCTGMAST  EQU   X'40'                    VERIFY MASTER PASSWORD\nCTGCI    EQU   X'20'                    VERIFY CONTROL INDICATOR\nCTGUPD   EQU   X'10'                    VERIFY UPDATE\nCTGREAD  EQU   X'08'                    VERIFY READ\nCTGNAME  EQU   X'04'                    1   44 BYTE NAME OR VOLSER\n*                                       0   ENTRY ID NUMBER\nCTGCNAME EQU   X'02'                    1   44 BYTE NAME\n*                                       0   ACB ADDRESS\nCTGGENLD EQU   X'01'                    GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    XL1                      SECOND OPTION INDICATOR\nCTGEXT   EQU   X'80'                    EXTEND(UPDATE)\nCTGNSVS  EQU   X'80'                    CATLG CLEANUP REQUEST\nCTGERASE EQU   X'40'                    ERASE(DELETE)\nCTGSMF   EQU   X'40'                    WRITE SMF(LSPACE)\nCTGREL   EQU   X'40'                    RELEASE(UPDATE)\nCTGGTALL EQU   X'40'                    CONCAT SEARCH (LISTCAT)\nCTGGFLIC EQU   X'40'                    SRCH ONLY 1 CAT(GFL)\nCTGPURG  EQU   X'20'                    PURGE (DELETE)\nCTGVMNT  EQU   X'20'                    VOLUME MOUNT CALLER\nCTGRCATN EQU   X'20'                    RTN CAT NAME(GLOC)\nCTGSWAP  EQU   X'20'                    SWAPSPACE (DEFINE)\nCTGGTNXT EQU   X'10'                    GET NEXT (LIST CTLG)\nCTGUCRAX EQU   X'10'                    UCRA EXTEND OPTION\nCTGDELRC EQU   X'10'                    DELETE RECOVER\nCTGDISC  EQU   X'08'                    DISCONNECT (DELETE)\nCTGRESM  EQU   X'08'                    GFL RESUME FUNCTION\nCTGOVRID EQU   X'04'                    ERASE OVERRIDE (DELETE)\nCTGCNVTC EQU   X'04'                    CONVERT CAT (DELETE SPACE)\nCTGSCR   EQU   X'02'                    SCRATCH SPACE (DELETE)\nCTGCDI   EQU   X'02'                    DATA INDEX ARE MATCHES IF ITS\n*                                       CLUSTER/AIX MATCHES FILTER KEY\nCTGBOTH  EQU   X'01'                    CALLER CAN ACCEPT ICF CATALOG\n*                                       ARCHITECTURE\nCTGOPTN3 DS    XL1                      THIRD OPTION INDICATOR\nCTGFUNC  EQU   X'E0'                    HIGH ORDER THREE BITS DEFINE\n*                                       FUNCTION\n*   LOCATE         001* ****\nCTGLOC   EQU   X'20'                    LOCATE   BITS ON\n*   LSPACE         010* ****\nCTGLSP   EQU   X'40'                    LSPACE   BITS ON\n*   UPDATE         011* ****\nCTGUPDAT EQU   X'60'                    UPDATE   BITS ON\n*   CMS FUNCTION   100* ****\nCTGCMS   EQU   X'80'                    CMS FUNCTION   BITS ON\n*   GFL FUNCTION   101* ****\nCTGGFL   EQU   X'A0'                    GFL FUNCTION   BITS ON\n*\nCTGSUPLT EQU   X'10'                    SUPER LOCATE\nCTGGDGL  EQU   X'08'                    GDG LOCATE FUNCTION (CTGWAGB IN\n*                                       CTGWA)\nCTGSRH   EQU   X'04'                    0   SEARCH MASTER CAT ONLY\n*                                       1   SEARCH OS CAT FIRST\nCTGNUM   EQU   X'02'                    0   SEARCH BOTH CATALOGS\n*                                       1   SEARCH ONE CATALOG\nCTGAM0   EQU   X'01'                    VSAM REQ VERSUS NONVSAM\n*\nCTGOPTN4 DS    XL1                      FOURTH OPTION INDICATOR\nCTGLBASE EQU   X'80'                    LOCATE GDG BASE ONLY\nCTGNDISC EQU   X'80'                    DELETE CATALOG NO DISCONNECT\nCTGNOCON EQU   X'80'                    DEFINE CATALOG NO CONNECT\nCTGDOCAT EQU   X'40'                    DO NOT OPEN NEEDED CATLG\nCTGNPROF EQU   X'20'                    NO (RAC) PROFILE SHOULD BE\n*                                       DEFINED OR DELETED\nCTGCOIN  EQU   X'10'                    CONTROLLER INTERCEPT REQUESTED\nCTGBYPMT EQU   X'08'                    BYPASS SECURITY PROMPTING TO\n*                                       SYSTEM OPERATOR\nCTGTIOT  EQU   X'04'                    CALLER OWNS SYSZTIOT EXCLUSIVE\nCTGICFC  EQU   X'02'                    REQUEST ORIENTED TO ICF CATALOG\nCTGICFOR EQU   X'01'                    ICF ONLY REQUEST\nCTGENT   DS    0A                       USER ENTRY ADDRESS OR POINTER\n*                                       TO VOLUME SERIAL NUMBER(LSPACE)\nCTGFVT   DS    A                        FVT ADDRESS (DEFINE, ALTER)\nCTGCAT   DS    0A                       CATALOG POINTER\n*\nCTGCVOL  DS    A                        CVOL PTR (SUPER LOCATE)\n*\nCTGWKA   DS    A                        WORKAREA ADDRESS\n*\nCTGDSORG DS    CL2                      DATA SET ORG (SUPER LOCATE)\n*   BITS 0 4 DEFINE ORGANIZATION\nCTGOPTNS EQU   X'F8'                    TOP 5 BITS\n*   DEFINE            0000 1*** **** ****\nCTGDEFIN EQU   X'08'                    DEFINE\n*   ALTER             0001 0*** **** ****\nCTGALTER EQU   X'10'                    ALTER\n*   DELETE            0001 1*** **** ****\nCTGDELET EQU   X'18'                    DELETE\n*   LIST CATALOG      0010 0*** **** ****\nCTGLTCAT EQU   X'20'                    LIST CATALOG\n*   CONVERTV          0011 0*** **** ****\nCTGCNVTV EQU   X'30'                    CONVERTV\n*   CAS CAT OPEN      0011 1*** **** ****\nCTGOPEN  EQU   X'38'                    CAS CAT OPEN\n*   CAS CAT CLOSE     0100 0*** **** ****\nCTGCLOSE EQU   X'40'                    CAS CAT CLOSE\n*   CAS CAT VVDS      0100 1*** **** ****\nCTGVVDS  EQU   X'48'                    CAS CAT VVDS\nCTGF2WKA EQU   X'04'                    FORMAT 2 WORK AREA\nCTGVVRUP EQU   X'02'                    VVDS UPDATE ONLY\nCTGF2SEN EQU   X'01'                    CAN HANDLE 40 2 RC\nCTGFVFY  EQU   X'80'                    FORCE PASSWORD VERIFICATION\n*                                       DO NOT CHECK FOR AUTHORIZED\n*                                       CALLER\nCTGHDLET EQU   X'40'                    HSM HAS DELETED A MIGRATED\n*                                       DATA SET\nCTGHALTL EQU   X'20'                    LOCATE FROM ALTER\nCTGHDLTL EQU   X'10'                    LISTCAT FROM DELETE\nCTGBRCAT EQU   X'08'                    BRANCH ENTRY TO IGGOCLAH\n*                                       RESTRICTED TO KEY ZERO USE AND\n*                                       CMS FUNCTIONS CTGOPEN,\n*                                       CTGCLOSE, AND CTGVVDS.\n*\n*   BITS 13 15 RESERVED\n*\nCTGTYPE  DS    CL1                      ENTRY TYPE LISTCAT,DELETE\nCTGTALIN EQU   C'A'                     ALIEN   A\nCTGTGBS  EQU   C'B'                     GDG BASE   B\nCTGTCL   EQU   C'C'                     CLUSTER   C\nCTGTDATA EQU   C'D'                     DATA   D\nCTGTFREE EQU   C'F'                     FREE   F\nCTGTAIX  EQU   C'G'                     ALTERNATE INDEX   G\nCTGTGDS  EQU   C'H'                     GDS   H\nCTGTINDX EQU   C'I'                     INDEX   I\nCTGTVVR  EQU   C'K'                     VSAM VOLUME RECORD\nCTGTMCAT EQU   C'M'                     MASTER CATALOG   M\nCTGTPGSP EQU   C'P'                     PAGE SPACE   P\nCTGTPATH EQU   C'R'                     PATH   R\nCTGTPTH  EQU   C'R'                     PATH   R\nCTGTTNAM EQU   C'T'                     ICF TRUE NAME\nCTGTUCAT EQU   C'U'                     USER CATALOG   U\nCTGTVOL  EQU   C'V'                     VOLUME   V\nCTGTANM  EQU   C'X'                     ALIAS BASE  X\nCTGTUPG  EQU   C'Y'                     UPGRADE   Y\nCTGTJES3 EQU   X'01'                    JES3 SUPERLOCATE REQUEST\nCTGMULTY EQU   X'FF'                    MULTIPLE TYPES\n*\nCTGNOFLD DS    XL1                      NUMBER FIELD POINTERS\nCTGDDNM  DS    0A                       DD NAME ADDRESS\nCTGNEWNM DS    0A                       NEWNAME ADDRESS   ALTER\nCTGFILTR DS    0A                       GFL FILTER KEY ADDRESS\nCTGPROB  DS    0XL4                     PROBLEM DETERMINATION\nCTGMODID DS    0CL2                     MODULE IDENTIFICATION\nCTGFDBK  DS    XL2                      SUPER LOCATE FEEDBACK\nCTGFBFLG DS    0XL2                     SUPER LOCATE FLAGS\nCTGREASN DS    0XL2                     ERROR REASON CODE\nCTGREAS1 DS    XL1                      HIGH ORDER BYTE ZERO\nCTGPAR   EQU   X'80'                    PARALLEL MOUNT   SUPER LOC\nCTGKEEP  EQU   X'40'                    FORCED KEEP = SUPER LOCATE\nCTGGDGB  EQU   X'20'                    GDG BASE LOCATED\nCTGNGDSN EQU   X'10'                    GDG NAME GENERATED\nCTGCLV   EQU   X'08'                    CANDIDATE VOLUME LIST\n*        6 8  RESERVED\nCTGREAS2 DS    XL1                      REASON CODE LOW BYTE\n*\nCTGJSCB  DS    0A                       JSCB ADDRESS\nCTGPSWD  DS    A                        PASSWORD ADDRESS\nCTGFIELD DS    A                        FIELD POINTERS   MAY BE MORE\n*                                       THAN ONE\n./ ADD NAME=IEZCTGVL 0100-04242-04242-0927-00025-00025-00000-MACRO\n***********************************************************************\n*                                                                     *\n*  MACRO NAME = IEZCTGVL                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME = CATALOG VOLUME LIST                             *\n*                                                                     *\n*  FUNCTION = THE CTGVL IS BUILT BY THE ISSUER OF A LOCATE REQUEST    *\n*             FOR A DATA SET NAME.  CATALOG MANAGEMENT USES THE CTGVL *\n*             TO RETURN TO THE CALLER THE VOLUME SERIAL NUMBERS OF    *\n*             THE VOLUMES ON WHICH SPACE IS ALLOCATED TO THE DATA     *\n*             SET.  FOR SUPERLOCATE REQUESTS, THE CTGWA POINTS TO THE *\n*             CTGVL.                                                  *\n*                                                                     *\n***********************************************************************\nCTGVL    DSECT ,\nCTGVLVOL DS    CL6                VOLUME SERIAL NUMBER\nCTGVLDEV DS    XL4                DEVICE TYPE\nCTGVLSEQ DS    XL2                FILE SEQUENCE NUMBER\nCTGVLLX  DS    0X                 VOLUME LIST EXTENSION\nCTGVLTTR DS    0XL3               FOR A SINGLE VOL DSN, THE TTR OF ITS\n*                                 DSCB\nCTGVLNXT DS    0X                 FOR A MULTI VOLUME DATASET, A\n*                                 REPETITION OF CTGVLVOL, CTGVLDEV, AND\n*                                 CTGVLSEQ FOR THE REST OF THE VOLUMES\nCTGVLLEN EQU   * CTGVL\n./ ADD NAME=IEZCTGWA 0100-04242-04242-0927-00026-00026-00000-MACRO\n***********************************************************************\n*                                                                     *\n*  MACRO NAME = IEZCTGWA                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME = CATALOG WORK AREA                               *\n*                                                                     *\n*  FUNCTION = THE CTGWA IS BUILT BY THE CALLER OF CATALOG MANAGEMENT  *\n*             FOR MOST REQUESTS.  THE CTGPL POINTS TO THE CTGWA.      *\n*             THE WORK AREA HAS ONE FORMAT FOR A SUPERLOCATE          *\n*             REQUEST AND ANOTHER FORMAT FOR ALL OTHER REQUESTS.      *\n*                                                                     *\n***********************************************************************\nCTGWA    DSECT ,\nCTGWALNG DS    XL2                      LENGTH OF THE WORK AREA\n* FORMAT FOR A SUPERLOCATE REQUEST\n         ORG   CTGWALNG\nCTGWAVL  DS    A                  ADDRESS OF THE CTGVL (VOLUME LIST)\nCTGWALV  DS    XL2                LENGTH OF THE VOLUME LIST\nCTGWAVCT DS    XL2                NO OF VOLSERS RETURNED IN VSL MINIMUM\nCTGWAUCT DS    XL2                NO OF VOLUMES THAT MUST BE MOUNTED\n* THE FOLLOWING TWO FIELDS ARE FOR A GDG BASE ONLY:\nCTGWAGCT DS    XL2                NO OF GENERATIONS CATALOGED\n*                                 CTGGDGB IN CTGPL IS SET ON (FOR GDGS)\nCTGWAGB  DS    A                  ADDRESS OF 4 BYTE FIELD\n*                                CONTAINING GENERATION LEVEL TO BE USED\nCTGWALEN EQU   * CTGWA\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE689": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04C\\x00\\x00\\x01\\x04$\\x9f\\x01\\x04$\\x9f\\x13\\x00\\x00#\\x00#\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf7@@@'", "ispf": {"version": "04.67", "flags": 0, "createdate": "2004-09-05T00:00:00", "modifydate": "2004-09-05T13:00:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CBT-467"}, "text": "//***FILE 689 is from Peter Sawyer and contains his (now famous)    *   FILE 689\n//*           paper from SHARE in 1989, which documents how SVC 26  *   FILE 689\n//*           is used in programming.  SVC 26, which generally      *   FILE 689\n//*           includes catalog lookups, LOCATE, SUPERLOCATE, and    *   FILE 689\n//*           other things, is VERY SPARSELY documented by IBM.     *   FILE 689\n//*           It is very difficult to find real help in programming *   FILE 689\n//*           when you want to write a user program which calls     *   FILE 689\n//*           SVC 26 directly.  So therefore Peter Sawyer's paper   *   FILE 689\n//*           on this subject is very much needed.                  *   FILE 689\n//*                                                                 *   FILE 689\n//*           Peter has retrieved this document, and has very       *   FILE 689\n//*           kindly donated it to the CBT Tape, so now, it can     *   FILE 689\n//*           be very accessible to everybody.                      *   FILE 689\n//*                                                                 *   FILE 689\n//*           email:  Peter_Sawyer@mail.share.org                   *   FILE 689\n//*                                                                 *   FILE 689\n//*           Please note that the coding examples of the catalog   *   FILE 689\n//*           macros have been included in a member of this pds     *   FILE 689\n//*           called PRINT, which is in TSO XMIT format.  When      *   FILE 689\n//*           you do a RECEIVE of the PRINT member, you will get    *   FILE 689\n//*           an FB-133 sequential dataset which has the catalog    *   FILE 689\n//*           macros expanded, and the field displacements shown.   *   FILE 689\n//*           Alternatively, you can assemble the pds member        *   FILE 689\n//*           called CATMAP, using the macro sources which appear   *   FILE 689\n//*           in this file's pds.                                   *   FILE 689\n//*                                                                 *   FILE 689\n//*           The following is an example execution of the TSO      *   FILE 689\n//*           RECEIVE command for the PRINT member:                 *   FILE 689\n//*                                                                 *   FILE 689\n//*             RECEIVE INDS(xxxx.FILE689.PDS(PRINT))               *   FILE 689\n//*                                                                 *   FILE 689\n//*           When you execute this, you'll get the FB-133          *   FILE 689\n//*           sequential file which shows the field displacements   *   FILE 689\n//*           in the catalog macros.                                *   FILE 689\n//*                                                                 *   FILE 689\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMMAP": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x04$\\x9f\\x01\\x04$\\x9f\\x12Y\\x00\\x0c\\x00\\x0f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2004-09-05T00:00:00", "modifydate": "2004-09-05T12:59:00", "lines": 12, "newlines": 15, "modlines": 0, "user": "SBGOLOB"}, "text": "//SBGOLOBU JOB (CCMVS),ASMLINK,\n// NOTIFY=&SYSUID,\n// CLASS=B,MSGCLASS=X,COND=(1,LT)\n//*\n//*  ASSEMBLE CATALOG MACROS TO OBTAIN A LISTING WITH DISPLACEMENTS\n//*\n//ASMH EXEC PGM=ASMA90,PARM=(NOOBJECT,NODECK,ESD,RLD,BATCH)\n//SYSLIB   DD DISP=SHR,DSN=SBGOLOB.CBT467.FILE689\n//SYSIN    DD DISP=SHR,DSN=SBGOLOB.CBT467.FILE689(CATMAP)\n//SYSUT1   DD UNIT=VIO,SPACE=(CYL,2)\n//SYSPRINT DD SYSOUT=*\n//*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CATMAP": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x04$\\x8f\\x01\\x04$\\x8f#\\x17\\x00\\x11\\x00\\x11\\x00\\x00\\xd9\\xe2\\xc9\\xf0\\xf1\\xe6\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-09-04T00:00:00", "modifydate": "2004-09-04T23:17:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "RSI01WY"}, "text": "         TITLE 'Access Method Data Statistics Block'\n         IDAAMDSB ,\n         TITLE 'Catalog Management List (CAMLST)'\n         IEZCAML ,\n         TITLE 'Catalog Control Volume List'\n         IEZCTGCV ,\n         TITLE 'Catalog Field Parameter List'\n         IEZCTGFL ,\n         TITLE 'Catalog Field Vector Table'\n         IEZCTGFV ,\n         TITLE 'Catalog Parameter List'\n         IEZCTGPL ,\n         TITLE 'VSAM Catalog Volume List and Extension'\n         IEZCTGVL ,\n         TITLE 'Catalog Work Area'\n         IEZCTGWA ,\n         END   ,\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IDAAMDSB": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x00S\\x00S\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 83, "newlines": 83, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO ,\n         IDAAMDSB\n*---------------------------------------------------------------------*\n* THE AMDSB CONTAINS STATISTICAL INFORMATION ABOUT RECORD PROCESSING  *\n* IN THE DATASET.  IT ALSO CONTAINS SOME OF THE DATASET'S ATTRIBUTES  *\n* AND SPECIFICATIONS.  THE AMDSB IS BUILT USING THE DATASET OR INDEX  *\n* CATALOG RECORD'S AMDSB SET OF FIELDS, WHEN THE CLUSTER IS OPENED.   *\n* A COPY OF THE AMDSB IS CONTAINED IN THE DATASET'S DATA CATALOG      *\n* RECORD AND, IF THE DATASET IS KEY-SEQUENCED, IN THE INDEX CATALOG   *\n* RECORD.  THE DATA OR INDEX AMB (AMBDSB) POINTS TO ITS ASSOCIATED    *\n* AMDSB.                                                              *\n*---------------------------------------------------------------------*\nIDAAMDSB DSECT ,\nAMDSB    DS    0C\nAMDSBID  DS    X            AMDSB IDENTIFIER, X'60'\nAMDATTR  DS    B            ATTRIBUTES OF THE DATASET -\nAMDDST   EQU   B'10000000'  KEY SEQUENCED DATASET\nAMDWCK   EQU   B'01000000'  CHECK EACH RECORD WHEN IT IS WRITTEN\nAMDSDT   EQU   B'00100000'  SEQUENCE SET IS STORED WITH THE DATA AND IS\n*                           REPLICATED - DUPLICATED AS MANY TIMES AS\n*                           POSSIBLE AROUND THE TRACK\nAMDREPL  EQU   B'00010000'  ALL INDEX RECORDS ARE REPLICATED -\n*                           DUPLICATED AS MANY TIMES AS POSSIBLE AROUND\n*                           THE TRACK\nAMDORDER EQU   B'00001000'  USE THE VOLUMES IN THE SAME ORDER AS IN THE\n*                           VOLUME LIST\nAMDRANGE EQU   B'00000100'  THE DATASET IS DIVIDED INTO KEY RANGES\nAMDRRDS  EQU   B'00000010'  RELATIVE RECORD DATASET\nAMDSPAN  EQU   B'00000001'  DATASET CONTAINS SPANNED RECORDS\nAMDLEN   DS    H            LENGTH OF AMDSB\nAMDNEST  DS    0H           NO OF ENTRIES IN THE INDEX SECTION\nAMDAXRKP DS    H            RELATIVE KEY POSITION OF THE ALTERNATE KEY\nAMDRKP   DS    H            RELATIVE KEY POSITION\nAMDKEYLN DS    H            KEY LENGTH\nAMDPCTCA DS    X            PERCENT OF FREE CONTROL INTERVALS IN THE\n*                           CONTROL AREA\nAMDPCTCI DS    X            PERCENT OF FREE BYTES IN THE CONTROL\n*                           INTERVAL\nAMDCIPCA DS    H            NUMBER OF CONTROL INTERVALS IN A CONTROL\n*                           AREA\nAMDFSCA  DS    H            NUMBER OF FREE CONTROL INTERVALS IN A\n*                           CONTROL AREA\nAMDFSCI  DS    F            NUMBER OF FREE BYTES PER CONTROL INTERVAL\nAMDCINV  DS    F            CONTROL INTERVAL SIZE\nAMDLRECL DS    F            MAXIMUM RECORD SIZE\nAMDHLRBA DS    0F           RELATIVE BYTE ADDRESS (RBA) OF THE HIGH-\n*                           LEVEL INDEX RECORD (KSDS)\nAMDNSLOT DS    F            NUMBER OF RECORD SLOTS PER CONTROL INTERVAL\n*                           (RRDS)\nAMDSSRBA DS    0F           RELATIVE BYTE ADDRESS (RBA) OF THE FIRST\n*                           SEQUENCE-SET RECORD (KSDS)\nAMDMAXRR DS    F            MAXIMUM VALID RELATIVE RECORD NUMBER(RRDS)\nAMDPARDB DS    F            ADDRESS OF THE TO FIRST ARDB\nAMDATTR3 DS    B            ATTRIBUTES -\nAMDUNQ   EQU   B'10000000'  THE DATASET HAS NONUNIQUE KEYS\nAMDFAULT EQU   B'01000000'  THE DATASET IS STAGED BY CYLINDER FAULT\nAMDBIND  EQU   B'00100000'  THE DATASET IS STAGED AND BOUND\nAMDWAIT  EQU   B'00010000'  THE DATASET DESTAGING IS COMPLETED BEFORE\n*                           CONTROL IS RETURNED TO THE PROGRAM THAT\n*                           CLOSES THE DATASET\nAMDLM    EQU   B'00001000'  THE DATASET IS LOADED\nAMDSTRNO DS    X            NUMBER OF CONCURRENT REQUESTS\nAMDDUI   DS    CL4          RESERVEIMS DBRC USAGE INDICATOR\nAMDBFNO  DS    XL2          NUMBER OF DATA OR INDEX BUFFERS\nAMDSTAT  DS    0XL48        DATASET STATISTICS -\nAMDSTSP  DS    XL8          OS/VS SYSTEM TIME STAMP\nAMDNIL   DS    H            NUMBER OF INDEX LEVELS\nAMDNEXT  DS    H            NUMBER OF EXTENTS IN THE DATASET\nAMDNLR   DS    F            NUMBER OF USER-SUPPLIED RECORDS IN THE\n*                           DATASET\nAMDDELR  DS    F            NUMBER OF DELETED RECORDS\nAMDIREC  DS    F            NUMBER OF INSERTED RECORDS\nAMDUPR   DS    F            NUMBER OF UPDATED RECORDS\nAMDRETR  DS    F            NUMBER OF RETRIEVED RECORDS\nAMDASPA  DS    F            NUMBER OF BYTES OF FREE SPACE IN THE\n*                           DATASET\nAMDNCIS  DS    F            NUMBER OF TIMES A CONTROL INTERVAL WAS\n*                           SPLIT\nAMDNCAS  DS    F            NUMBER OF TIMES A CONTROL AREA WAS SPLIT\nAMDEXCP  DS    F            NUMBER OF TIMES EXCP WAS ISSUED BY VSAM I/O\n*                           ROUTINES\nAMDSBLEN EQU   *-AMDSB\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCAML": {"ttr": 780, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x004\\x004\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO ,\n         IEZCAML\nCAMLSTD  DSECT ,\nCAMOPTN1 DS    B                   FIRST OPTION BYTE\nCAMCVOL  EQU   B'10000000'         - CVOL SPECIFIED\nCAMNUCAM EQU   B'01000100'         - CAMLST MACRO GENERATED-NOT USED\nCAMCAT   EQU   B'00100000'         - CATALOG OR CATBX SPECIFIED\nCAMRECAT EQU   B'00010000'         - RECAT (RE-CATALOG SPECIFIED)\nCAMUNCAT EQU   B'00001000'         - UNCAT OR UCATDX SPECIFIED\nCAMLOCAT EQU   B'00000010'         - LOCATE BY TTR SPECIFIED\nCAMBLOCK EQU   B'00000010'         - LOCATE BY BLOCK SPECIFIED\n*              B'00000001'         - RESERVED\n*\nCAMOPTN2 DS    B                   SECOND OPTION BYTE\nCAMNOALC EQU   B'10000000'         - DO NOT ALLOCATE CVOL\nCAMBLDX  EQU   B'01000000'         - BLDX / CATBX SPECIFIED\nCAMBLDG  EQU   B'00100000'         - BLDG SPECIFIED\nCAMBLDA  EQU   B'00010000'         - BLDA SPECIFIED\nCAMLNKX  EQU   B'00001000'         - LNKX SPECIFIED\nCAMDLTX  EQU   B'00000100'         - DLTX / UCATDX SPECIFIED\nCAMDSCB  EQU   B'00000010'         - DSCB TTR SPECIFIED\nCAMDSCBT EQU   B'00000010'         - DSCB TTR SPECIFIED\nCAMDLTA  EQU   B'00000001'         - DLTA SPECIFIED\n*\nCAMOPTN3 DS    B                   THIRD OPTION BYTE\nCAMDRPX  EQU   B'10000000'         - DRPX SPECIFIED\nCAMDELET EQU   B'01000000'         - INDICATE DELETE OPTION\nCAMRENAM EQU   B'00100000'         - RENAME SPECIFIED\nCAMTIOT  EQU   B'00010000'         - SYSZTIOT IS ENQUEUED EXCLUSIVELY\nCAMEMPTY EQU   B'00001000'         - INDICATE THE EMPTY OPTION\nCAMSLOCB EQU   B'00000100'         - SUPERLOCATE WITH BASE SUPPLIED\nCAMSLOC  EQU   B'00000010'         - SUPERLOCATE\n*              B'.......0'         - THE CALLER SUPPLIED A CAMLST\nCAMAM0   EQU   B'00000001'         - THE CALLER SUPPLIED A CTGPL\n*\nCAMGEN   DS    X                   MAXIMUM GENERATION COUNT FOR GDG\n*\nCAMPTR1  DS    A                   ADDRESS OF NAME OR TTR IF LOCATE\n*\nCAMPTR2  DS    0A                  ADDRESS OF CVOL VOLSER\nCAMCVOLP DS    A                   CVOL VOLUME SERIAL ADDRESS\n*\nCAMPTR3  DS    A                   A) CATLG VOLUME LIST\n*                                  B) ALIAS/HIGH LEVEL INDEX\n*                                  C) LNKX DEVTYPE/VOLSER\n*                                  D) LOCATE WORK AREA\n*\nCAMPTR4  DS    0A                  ADDRESS OF DSCB TTR FOR CATLG\nCAMDSCBP DS    A                   DSCB TTR ADDRESS\n*\nCAMLEN   EQU   *-CAMLSTD           DATA LENGTH\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCTGCV": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x00#\\x00#\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO ,\n         IEZCTGCV &P=CTG\n***********************************************************************\n*                                                                     *\n*  MACRO NAME = IEZCTGCV                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME = CATALOG CONTROL VOLUME LIST                     *\n*                                                                     *\n*  FUNCTION = THE CTGCV IS BUILT BY THE ISSUER (PRIMARILY THE         *\n*             SCHEDULER) OF A SUPERLOCATE REQUEST BY DATA SET NAME    *\n*             FOR VOLUME INFORMATION.  CATALOG MANAGEMENT USES        *\n*             THE CTGCV TO RETURN TO THE CALLER THE NAME OF THE       *\n*             CATALOG THAT CONTAINS THE DATA SET NAME.  THE CTGPL     *\n*             POINTS TO THE CTGCV.                                    *\n*                                                                     *\n*  DATE OF LAST CHANGE = 21 FEB 83                                    *\n*                                                                     *\n***********************************************************************\n&P.CV    DSECT ,\n*\n&P.CVVOL DS    CL6                VOLUME SERIAL NUMBER OF THE CATALOG\n*                                 NAMED IN CTGCVDSN. RETURNED ONLY FOR\n*                                 GDG SINGLE REQUESTS.\n&P.CVDSN DS    CL44               NAME OF THE CATALOG IN WHICH THE DATA\n*                                 SET NAME WAS LOCATED, OR WHICH NEEDS\n*                                 TO BE OPENED TO CONTINUE THE\n*                                 SUPERLOCATE\n&P.CVDEV DS    XL4                CVOL DEVICE TYPE\n&P.CVCC  DS    CL44               AN ALIAS OF THE CATALOG (CATALOG\n*                                 CONNECTOR).  RETURNED ONLY WHEN THE\n*                                 CATALOG IS IDENTIFIED BY THE FIRST\n*                                 QUALIFIER OF THE DATASET NAME AND\n*                                 THE FIRST QUALIFIER IS AN ALIAS OF\n*                                 THE CATALOG NAME.\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCTGFL": {"ttr": 784, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x00\\x81\\x00\\x81\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 129, "newlines": 129, "modlines": 0, "user": "CATMACS"}, "text": "*  %GO TO CTGFLX01;\n*  /*\n         MACRO\n         IEZCTGFL &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODS\nCTGFL    DSECT ,\n         AGO   .BOTHDS\n.NODS    ANOP  ,\nCTGFL    DS    0F\n.BOTHDS  ANOP  ,                        */\n*%CTGFLX01:;\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGFL                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = CATALOG FIELD PARAMETER LIST                */\n*/*                                                                  */\n*/*   FUNCTION = THE FIELD PARAMETER LIST (CTGFL) DEFINES ONE OF     */\n*/*              THE CATALOG RECORD'S FIELDS OR A GROUP OF           */\n*/*              LOGICALLY RELATED FIELDS.  THE CTGFL IS BUILT       */\n*/*              BEFORE AN OS/VS COMPONENT ISSUES THE CATLG          */\n*/*              MACRO INSTRUCTION (SVC 26) TO PROCESS A             */\n*/*              CATALOG RECORD.  THE CTGFL IS USED IN TWO           */\n*/*              SITUATIONS:                                         */\n*/*                (1)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO RETRIEVE OR UPDATE.  THE CTGPL CONTAINS   */\n*/*                     THE ADDRESS OF EACH CTGFL USED IN THIS WAY.  */\n*/*                (2)  IT IDENTIFIES CATALOG RECORD INFORMATION     */\n*/*                     TO COMPARE AGAINST CALLER-SUPPLIED DATA.     */\n*/*                     THIS IS A \"TEST\" CTGFL AND IS ADDRESSED BY   */\n*/*                     ANOTHER CTGFL.                               */\n*/*                                                                  */\n*/*   CONTROL BLOCK STRUCTURE = THE CTGFL IS POINTED TO BY THE       */\n*/*                             CCA ('CCAFLPT' OR 'CCATEST').        */\n*/*                                                                  */\n*/*   INCLUDED MACROS = NONE                                         */\n*/*                                                                  */\n*/*   METHOD OF ACCESS = PL/S - NO DECLARES NECESSARY                */\n*/*                                                                  */\n*/*   STATUS = VS/2 RELEASE 3   (CHANGE FLAG @Y30SSXX)               */\n*/*                                                                  */\n*/*   DATE OF LAST CHANGE = 17 JUL 74                                */\n*/*                                                                  */\n*/********************************************************************/\n         AGO   .CTGFL01                 */\n*%DECLARE (CTGFLLEN, CTGFL999, CTGFLLVL) CHAR;\n*%CTGFLLEN = 'LENGTH(CTGFL)';       /* LENGTH OF CTGFL               */\n*%GOTO CTGFLX03;\n* /*\n*%CTGFLX03:;\n*%IF CTGFL999 \u00ac= ','                /* IF BLOCK NOT CONTINUED,       */\n*  %THEN %CTGFL999 = ';';           /*   THEN CLOSE DECLARE STMNT    */\n*%IF CTGFLLVL  = ''                 /* IF BLOCK NOT CONCATENATED,    */\n*  %THEN %GOTO CTGFL001;            /*   THEN GENERATE DECLARE       */\n*%CTGFLDUM = CTGFLLVL||' CTGFL';    /* SET MINOR LEVEL NUMBER        */\n*   CTGFLDUM                        /* CTGFL CONCATENATED LEVEL      */\n*%GOTO CTGFL002;                    /* SKIP DECLARE                  */\n*%CTGFL001:;                        /* DECLARE                       */\n    DECLARE\n*     1 CTGFL BASED(CTGFLPTR)       /* DECLARE CTGFL LEVEL ONE       */\n*%CTGFL002:;                        /* SKIP DECLARE                  */\n*        BDY(WORD),                 /* WORD BOUNDARY                 */\n*       5 CTGFLDNO PTR(8),          /* NO. PAIRS DATA LENGTH/ADDR    */\n*       5 CTGFLDCD BIT(8),          /* TEST CONDITION                */\n*       5 CTGFLDGC PTR(8),          /* GROUP CODE NUMBER             */\n*       5 CTGFLDRE BIT(8),          /* TEST RESULT                   */\n*         10 *        BIT(7),       /* RESERVED                      */\n*         10 CTGFLDTS BIT(1),       /* 0 = SUCCESSFUL TEST,          */\n*                                   /* 1 = TEST FAILED               */\n*       5 CTGFLDWA BIT(32),         /* CATALOG WORK AREA             */\n*       5 CTGFLDNM PTR(31),         /* FIELD NAME ADDRESS            */\n*       5 CTGFLCHN PTR(31),         /* ADDR OF NEXT FIELD MACRO      */\n*                                   /* OR ZERO                       */\n*       5 CTGFLDAT(*),              /* PAIRS OF DATA LENGTH/ADDR     */\n*         10 CTGFLNG FIXED(31),     /* DATA LENGTH                   */\n*         10 CTGFLPT  PTR(31) CTGFL999 /* DATA ADDRESS               */\n*/********************************************************************/\n*/*     CONSTANTS USED TO SET AND/OR TEST FIELDS DECLARED ABOVE      */\n*/********************************************************************/\n    DECLARE                         /* TEST CONDITION - CTGFLDCD     */\n      CTGFLDEQ BIT(8) CONSTANT('80'X), /* EQUAL                      */\n      CTGFLDNE BIT(8) CONSTANT('60'X), /* NOT EQUAL                  */\n      CTGFLDGT BIT(8) CONSTANT('20'X), /* GREATER THAN               */\n      CTGFLDLT BIT(8) CONSTANT('40'X), /* LESS THAN                  */\n      CTGFLDGE BIT(8) CONSTANT('A0'X), /* GREATER THAN OR EQUAL      */\n      CTGFLDLE BIT(8) CONSTANT('C0'X), /* LESS THAN OR EQUAL         */\n      CTGFLDZ  BIT(8) CONSTANT('80'X), /* TEST UNDER MASK FOR ZEROES */\n      CTGFLDON BIT(8) CONSTANT('10'X), /* TEST UNDER MASK FOR ONES   */\n      CTGFLDMX BIT(8) CONSTANT('40'X); /* TEST UNDER MASK FOR MIXED  */\n* %GO TO CTGFLX02;\n*/*\n.CTGFL01 ANOP\n*\nCTGFLDNO DS    XL1                      NUMBER PAIRS DATA LNG/ADDR\n*\nCTGFLDCD DS    XL1                      TEST CONDITION\nCTGFLDEQ EQU   X'80'                    EQUAL\nCTGFLDNE EQU   X'60'                    NOT EQUAL\nCTGFLDGT EQU   X'20'                    GREATER THAN\nCTGFLDLT EQU   X'40'                    LESS THAN\nCTGFLDGE EQU   X'A0'                    GREATER THAN OR EQUAL\nCTGFLDLE EQU   X'C0'                    LESS THAN OR EQUAL\nCTGFLDZ  EQU   X'80'                    TEST UNDER MASK FOR ZEROES\nCTGFLDON EQU   X'10'                    TEST UNDER MASK FOR ONES\nCTGFLDMX EQU   X'40'                    TEST UNDER MASK FOR MIXED\nCTGFLDGF EQU   X'FF'                    GENERIC FILTER TEST        @SCA\n*\nCTGFLDGC DS    XL1                      GROUP CODE NUMBER\n*\nCTGFLDRE DS    XL1                      TEST RESULT\nCTGFLDTS EQU   X'01'                    TEST MASK - CTGFLDRE\n*                                       = 0 - SUCCESSFUL TEST,\n*                                       = 1 - TEST FAILED\n*\nCTGFLDWA DS    F                        CATALOG WORK AREA\n*\nCTGFLDNM DS    A                        FIELD NAME ADDRESS\n*\nCTGFLCHN DS    A                        ADDRESS OF NEXT FIELD\n*\n*\nCTGFLDAT DS    0CL8                     PAIRS OF DATA LENGTH/ADDRESS\nCTGFLNG  DS    F                        DATA LENGTH\nCTGFLPT  DS    A                        DATA ADDRESS\n*\n*\nCTGFLLEN EQU   *-CTGFL                  LENGTH OF CTGFL\n         MEND  ,                        */\n* %CTGFLX02:;\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEZCTGFV": {"ttr": 787, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x00n\\x00n\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 110, "newlines": 110, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO ,\n         IEZCTGFV &P=CTG\n&P.FV    DSECT ,\n*/********************************************************************/\n*/*                                                                  */\n*/*   MACRO NAME = IEZCTGFV                                          */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = FIELD VECTOR TABLE                          */\n*/*                                                                  */\n*/*   FUNCTION = THE \"CTGFV\" IS BUILT BY THE ACCESS METHOD SERVICES  */\n*/*              UTILITY PROGRAMS AND CONTAINS ADDRESSES OF USER-    */\n*/*              SUPPLIED INFORMATION FIELDS AND LISTS.  THE \"CTGFV\" */\n*/*              IS BUILT WHEN THE USER ISSUES A \"DEFINE\" OR \"ALTER\" */\n*/*              COMMAND.  IF THE USER IS CREATING A CLUSTER, A      */\n*/*              \"CTGFV\" IS BUILT FOR EACH CATALOG RECORD THAT WILL  */\n*/*              BE BUILT TO DESCRIBE THE CLUSTER: THAT IS, ACCESS   */\n*/*              METHOD SERVICES \"DEFINE\" PROCESSING BUILDS A        */\n*/*              \"CLUSTER\" CTGFV, A \"DATA\" CTGFV\", AND, IF THE       */\n*/*              CLUSTER IS KEY-SEQUENCED, AN \"INDEX\" CTGFV.  THE    */\n*/*              \"CTGFV\" IS POINTED TO BY THE \"CTGPL(CTGFVT).  IF    */\n*/*              ACCESS METHOD SERVICES BUILDS MORE THAN ONE \"CTGFV\" */\n*/*              THE \"CLUSTER\" CTGFV IS POINTED TO BY THE \"CTGPL\"    */\n*/*              (CTGFVT) AND THE \"DATA\" AND \"INDEX\" CTGFVS ARE      */\n*/*              POINTED TO BY THE \"CLUSTER\" CTGFV.                  */\n*/*                                                                  */\n*/********************************************************************/\n&P.FVTYP DS    C                  THE CTGFV CONTAINS INFORMATION USED\n*                                 BY THE DEFINE ROUTINES TO BUILD A\n*                                 CATALOG RECORD OF TYPE:\n&P.FVALN EQU   C'A'               NON-VSAM DATA SET\n&P.FVGBS EQU   C'B'               GENERATION DATA GROUP (GDG) BASE\n&P.FVCL  EQU   C'C'               CLUSTER\n&P.FVDTA EQU   C'D'               DATA SET\n&P.FVAIX EQU   C'G'               ALTERNATE INDEX\n&P.FVIDX EQU   C'I'               INDEX\n&P.FVPTH EQU   C'R'               PATH\n&P.FVVOL EQU   C'V'               VOLUME\n&P.FVANM EQU   C'X'               ALIAS NAME\n&P.FVPRO DS    B                  CATALOG MANAGEMENT SERVICES\n*                                 PROCESSING OPTION FLAGS:\n&P.FVAVL EQU   B'10000000'        ALTER: ADD VOLUMES\n&P.FVRVL EQU   B'01000000'        ALTER: REMOVE VOLUMES\n&P.FVNDC EQU   B'00100000'        NO DEVICE-TYPE CONVERSION\n&P.FVDRC EQU   B'00010000'        DEFINE A RECOVERABLE CATALOG\n&P.FVRON EQU   B'00001000'        TURN RACF INDICATOR ON\n&P.FVROF EQU   B'00000100'        TURN RACF INDICATOR OFF\n&P.FVBOF EQU   B'00000010'        TURN BUSY INDICATOR OFF          @CSO\n*        EQU   B'00000001'        RESERVED\n&P.FVELM DS    X                  ELEMENT NUMBER OF CMSPCATR\n&P.FVFL2 DS    B                  ICF PROCESSING FLAGS\n&P.FVSRC EQU   B'10000000'        SOURCE CATALOG NAME CHANGE\n&P.FVNAL EQU   B'01000000'        DEFINE WITH NO-ALLOCATION\n&P.FVICF EQU   B'00100000'        0=VSAM CATALOG, 1=ICF CATALOG\n&P.FVRCT EQU   B'00010000'        DEFINE WITH RECATALOG\n&P.FVNSD EQU   B'00001000'        NO CATALOG SELF DESCRIBING RECORDS\n&P.FVABS EQU   B'00000100'        SUBALLOCATED DATASET FOR ICF\n*                                 CONVERTCAT\n*        EQU   B'00000011'        RESERVED\n&P.FVDCH DS    A                  ADDRESS OF CLUSTER'S DATA CTGFV\n&P.FVICH DS    A                  ADDRESS OF CLUSTER'S INDEX CTGFV\n&P.FVVCH DS    A                  ADDRESS OF SPACE CTGFV\n&P.FVIND DS    A                  ADDRESS OF ASSOCIATED JCL DD\n*                                 STATEMENT\n&P.FVENT DS    A                  ADDRESS OF ENTRY NAME\n&P.FVSTY DS    A                  ADDRESS OF THE SECURITY INFORMATION\n*                                 CTGFL (PASSWORDS, CODEWORD, AND\n*                                 NUMBER OF TRIES)\n&P.FVOWN DS    A                  ADDRESS OF OWNER IDENTIFICATION CTGFL\n&P.FVEXP DS    A                  ADDRESS OF EXPIRY DATE CTGFL\n&P.FVCRE DS    A                  ADDRESS OF CREATION DATE CTGFL\n&P.FVVLT DS    A                  ADDRESS OF VOLUME SERIAL NUMBER LIST\n&P.FVRNG DS    A                  ADDRESS OF THE KEY RANGE LIST\n&P.FVDVT DS    A                  ADDRESS OF THE DEVTYPE CTGFL (FOR\n*                                 DEFINE NONVSAM ONLY)\n&P.FVSPC DS    0A                 ADDRESS OF THE SPACE ALLOCATION\n*                                 INFORMATION CTGFL\n&P.FVTTR DS    A                  ADDRESS OF THE DSCB'S TTR (FOR DEFINE\n*                                 NONVSAM ONLY)\n&P.FVAMD DS    0A                 ADDRESS OF THE AMDSB CTGFL (FOR\n*                                 DEFINE CATALOG AND DEFINE CLUSTER\n*                                 ONLY)\n&P.FVFSN DS    A                  ADDRESS OF THE FILE SEQUENCE NUMBER\n*                                 CTGFL (FOR DEFINE NONVSAM ONLY)\n&P.FVATR DS    A                  ADDRESS OF DATA SET ATTRIBUTES CTGFL\n&P.FVBUF DS    A                  ADDRESS OF THE BUFFER SIZE CTGFL\n&P.FVLRS DS    A                  ADDRESS OF THE AVERAGE RECORD SIZE\n*                                 CTGFL\n&P.FVLMT DS    0A                 ADDRESS OF THE GDG LIMIT (FOR DEFINE\n*                                 GDG BASE ONLY)\n&P.FVEXT DS    A                  ADDRESS OF EXCEPTION EXIT PARAMETER\n*                                 LIST\n&P.FVGAT DS    0A                 ADDRESS OF THE GDG ATTRIBUTES (FOR\n*                                 DEFINE GDG BASE ONLY)\n&P.FVUPG DS    A                  ADDRESS OF RGATTR PARAMETER LIST\n&P.FVNAM DS    A                  ADDRESS OF THE TRUE NAME CTGFL (FOR\n*                                 DEFINE ALIAS ONLY)\n&P.FVPWD DS    0A                 ADDRESS OF THE RELATED OBJECTS\n*                                 PASSWORD\n&P.FVCPP DS    A                  ADDRESS OF TSO COMMAND PROCESSOR\n*                                 PARAMETER LIST (CPPL TSO COMMAND\n*                                 CALLERS ONLY). IF ZERO, DAIRFAIL\n*                                 MESSAGES WILL BE WTP'S.\n&P.FVWKA DS    0A                 ADDRESS OF THE CRA FEEDBACK AREA\n&P.FVCAT DS    A                  ADDRESS OF SOURCE CATALOG ACB\n&P.FVELT DS    A                  ADDRESS OF EXTENT INFORMATION LIST\n&P.FVRBA DS    A                  ADDRESS OF FPL OF HURBA AND HARBA FOR\n*                                 DATA OR INDEX COMPONENT DURING\n*                                 CONVERTCAT\n&P.FVLEN EQU   *-&P.FV            LENGTH OF FIELD VECTOR TABLE\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IEZCTGPL": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x01\\x7f\\x01\\x7f\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 383, "newlines": 383, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO\n         IEZCTGPL &DSECT=YES\n         AIF   ('&DSECT' EQ 'NO').NODS\nCTGPL    DSECT ,\n         AGO   .BOTHDS\n.NODS    ANOP  ,\nCTGPL    DS    0F\n.BOTHDS  ANOP  ,                        */\n* %CTGPLX01:;\n*/********************************************************************/\n*/*                                                                  */\n*/*   $MAC(IEZCTGPL):                                                */\n*/*                                                                  */\n*/*   DESCRIPTIVE NAME = CATALOG PARAMETER LIST                      */\n*/*                                                                  */\n*/*   FUNCTION = THE CATALOG PARAMETER LIST (CTGPL) DEFINES THE      */\n*/*              CATALOG MANAGEMENT REQUEST AND ITS OPTIONS, THE     */\n*/*              CATALOG RECORD TO BE PROCESSED, AND THE VSAM        */\n*/*              CATALOG THAT CONTAINES THE RECORD.  THE CTGPL IS    */\n*/*              BUILT BEFORE AN OS/VS COMPONENT ISSUES THE CATLG    */\n*/*              MACRO INSTRUCTION (SVC 26) TO PROCESS A CATALOG     */\n*/*              RECORD.  WHEN THE CATALOG MANAGEMENT ROUTINES       */\n*/*              BUILD A CCA TO SUPPORT THE REQUEST, THE ADDRESS     */\n*/*              OF THE CTGPL IS PUT INTO THE CCA (CCACPL).          */\n*/*                                                                  */\n*/*   CONTROL BLOCK STRUCTURE = THE CTGPL IS POINTED TO BY           */\n*/*                             REGISTER 1.                          */\n*/*                                                                  */\n*/*   INCLUDED MACROS = NONE                                         */\n*/*                                                                  */\n*/*   METHOD OF ACCESS = PL/S - NO DECLARES NECESSARY                */\n*/*                                                                  */\n*/*   STATUS = MVS/XA DFP RELEASE 1.1                                */\n*/*   A 343000 A 346000                                      @ZA18274*/\n*/*                                                                  */\n*/*   DATE OF LAST CHANGE = 12 MARCH 84                              */\n*/*   JES3 SUPPORT - I 850084,892500,895500                          */\n*/*   &L5=ICFCAT,JDM1113,T790078,STLPCJ: DF/EF CATALOG SUPPORT   @L5A*/\n*/*   &L6=DFP,HDP1102,,STLPRB: DFP                               @L6A*/\n*/*                                                          @ZA58903*/\n*/*                                                          @ZA76423*/\n*/*   $PAS=DFP,HDP2102,,STLLEE: MVS/XA DFP V2R1M0                @PAS*/\n*/*   $LM=DFP,JDP1110,,STLLLL: MVS/XA DFP RELEASE 1.1                */\n*/*   $SC=GFL,JDP2110,,STLSSC: DPF/XA 2.1.1 GENERIC FILTER LOCATE@SCA*/\n*/*   $L9=ALIAS,HDP2230,STLJSC:   EXPORT OF ALIAS                @L9A*/\n*/*                                                              @HES*/\n*/********************************************************************/\n*%GOTO CTGPLX03;\n*/*\n         AGO   .CTGPL01                 */\n*%CTGPLX03:;\n*%DECLARE (CTGPLLEN, CTGPL999, CTGPLLVL) CHAR;\n*%CTGPLLEN = 'LENGTH(CTGPL)';       /* LENGTH OF CTGPL               */\n*%IF CTGPL999 \u00ac= ','                /* IF BLOCK NOT CONTINUED,       */\n*   %THEN %CTGPL999 = ';';          /*   THEN CLOSE DCL STATEMENT    */\n*%IF CTGPLLVL  = ''                 /* IF BLOCK NOT CONCATENATED,    */\n*   %THEN %GOTO CTGPL001;           /*   THEN GENERATE DCL           */\n*%CTGPLDUM = CTGPLLVL||' CTGPL';    /* SET MINOR LEVEL NUMBER        */\n*        CTGPLDUM                   /* CTGPL CONCATENATED LEVEL      */\n*%GOTO CTGPL002;                    /* SKIP DECLARE                  */\n*%CTGPL001:;                        /* DECLARE                       */\n*   DECLARE\n*     1 CTGPL BASED(CTGPLPTR)       /* DECLARE CTGPL LEVEL ONE       */\n*%CTGPL002:;                        /* SKIP DECLARE                  */\n*        BDY(WORD),                 /* WORD BOUNDARY                 */\n*       5 CTGOPTN1 BIT(8),          /* FIRST OPTION INDICATOR        */\n*         10 CTGBYPSS BIT(1),       /* BYPASS                        */\n*         10 CTGMAST  BIT(1),       /* VERIFY MASTER PASSWORD        */\n*         10 CTGCI    BIT(1),       /* VERIFY CONTROL INTERVAL       */\n*         10 CTGUPD   BIT(1),       /* VERIFY UPDATE                 */\n*         10 CTGREAD  BIT(1),       /* VERIFY READ                   */\n*         10 CTGNAME  BIT(1),       /* 1 = 44-BYTE NAME OR VOL SER,  */\n*                                   /* 0 = ENTRY ID NUMBER           */\n*         10 CTGCNAME BIT(1),       /* 1 = 44-BYTE NAME,             */\n*                                   /* 0 = ACB ADDRESS               */\n*         10 CTGGENLD BIT(1),       /* GENERIC LOCATE REQUEST  Y02020*/\n*       5 CTGOPTN2 BIT(8),          /* SECOND OPTION INDICATOR       */\n*         10 CTGEXT   BIT(1),       /* EXTEND       (UPDATE)         */\n*            15 CTGNSVS BIT(1),     /* CATLG CLEANUP REQUEST @ZA00605*/\n*         10 CTGERASE BIT(1),       /* ERASE        (DELETE)         */\n*            15 CTGSMF   BIT(1),    /* WRITE SMF    (LSPACE)         */\n*               20 CTGREL   BIT(1), /* RELEASE      (UPDATE)         */\n*                  25 CTGGTALL BIT(1),/* CONCAT SEARCH  FOR    Y02020*/\n*                                   /* (LISTCAT)               Y02020*/\n*         10 CTGPURG  BIT(1),       /* PURGE        (DELETE)         */\n*           15 CTGVMNT BIT(1),      /* VOLUME MOUNT CALLER           */\n*              20 CTGRCATN BIT(1),  /* RTN CATLG NAME(GLOC)    Y02020*/\n*                 25 CTGSWAP BIT(1),/* SWAPSPACE (DEFINE)    @Z40WSSG*/\n*         10 CTGGTNXT BIT(1),       /* GET NEXT     (LIST CATALOG)   */\n*           15 CTGUCRAX BIT(1),     /* UCRA EXTEND OPTION    @ZA18274*/\n*             20 CTGDELRC BIT(1),   /* DELETE RECOVER            @L5A*/\n*                                   /* (WITH UPDATE)                 */\n*         10 CTGDISC BIT(1),        /* DISCONNECT   (DELETE)         */\n*         10 CTGOVRID BIT(1),       /* ERASE OVERRIDE (DELETE)       */\n*            15 CTGCNVTC BIT(1),    /* CONVERT CAT (DELETE SPACE)\n*                                                                @L6C*/\n*         10 CTGSCR   BIT(1),       /* SCRATCH SPACE (DELETE)        */\n*         10 CTGBOTH  BIT(1),       /* CALLER CAN ACCEPT ICF CATALOG\n*                                      ARCHITECTURE              @L6C*/\n*       5 CTGOPTN3 BIT(8),          /* THIRD OPTION INDICATOR        */\n*         10 CTGFUNC  BIT(3),       /* CATALOG FUNCTION              */\n*         10 CTGSUPLT BIT(1),       /* SUPER LOCATE                  */\n*         10 CTGGDGL  BIT(1),       /* GDG LOCATE REQUEST      Y02020*/\n*                                   /* WITH BASE LEVEL GIVEN   Y02020*/\n*                                   /* (CTGWAGB IN CTGWA)      Y02020*/\n*         10 CTGSRH   BIT(1),       /* 0 = SEARCH MASTER CATLG Y02020*/\n*                                   /*     ONLY                Y02020*/\n*                                   /* 1 = SEARCH OS CATALOG FIRST   */\n*         10 CTGNUM   BIT(1),       /* 0 = SEARCH BOTH CATALOGS,     */\n*                                   /* 1 = SEARCH ONE CATALOG        */\n*         10 CTGAM0   BIT(1),       /* VSAM REQ VERSUS NONVSAM       */\n*       5 CTGOPTN4 BIT(8),          /* GDG FLAGS                     */\n*         10 CTGLBASE BIT(1),       /* LOCATE GDG BASE ONLY Y02020   */\n*         10 CTGDOCAT BIT(1),       /* DO NOT OPEN NEEDED CATALOG    */\n*         10 CTGNPROF BIT(1),       /* NO (RAC) PROFILE SHOULD BE\n*                                      DEFINED OR DELETED    @Z40RSRC*/\n*         10 CTGCOIN  BIT(1),       /* CONTROLLER INTERCEPT REQUESTED\n*                                                            @ZA20773*/\n*         10 CTGBYPMT BIT(1),       /* BYPASS SECURITY PROMPTING\n*                                       TO SYSTEM OPERATOR   @ZA07531*/\n*         10 CTGTIOT  BIT(1),       /* CALLER OWNS SYSZTIOT EXCLUSIVE\n*                                                            @ZA20773*/\n*         10 CTGICFC  BIT(1),       /* REQUEST ORIENTED TO ICF CATALOG\n*                                                                @L5A*/\n*         10 CTGICFOR BIT(1),       /* ICF ONLY REQUEST          @L5A*/\n*       5 CTGENT   PTR(31),         /* USER ENTRY ADDR OR PTR TO VOLUME\n*                                        SERIAL NUMBER (LSPACE)      */\n*         10 CTGFVT   PTR(31),      /* FVT ADDRESS (DEFINE, ALTER)   */\n*       5 CTGCAT   PTR(31),         /* CATALOG POINTER               */\n*         10 CTGCVOL PTR(31),       /* CVOL PTR (SUPER LOCATE)       */\n*       5 CTGWKA  PTR(31),          /* WORKAREA ADDR                 */\n*       5 CTGDSORG CHAR(2),         /* DATA SET ORG - SUPERLOCATE    */\n*         10 CTGOPTNS BIT(5),       /* CMS OPTIONS                   */\n*         10 CTGF2WKA BIT(1),       /* FORMAT 2 WORK AREA        @L5A*/\n*         10 CTGVVRUP BIT(1),       /* VVDS UPDATE ONLY          @L5A*/\n*         10 CTGF2SEN BIT(1),       /* CAN HANDLE 40-2 RC    @ZA58903*/\n*         10 CTGFVFY  BIT(1),       /* FORCE PASSWORD VERIFICATION -\n*                                      DO NOT CHECK FOR AUTHORIZED\n*                                      CALLER.                   @LMA*/\n*         10 CTGHDLET BIT(1),       /* HSM HAS DELETED A MIGRATED\n*                                      DATA SET                  @PAS*/\n*         10 CTGHALTL BIT(1),       /* LOCATE FROM ALTER         @PAS*/\n*         10 CTGHDLTL BIT(1),       /* LISTCAT FROM DELETE       @PAS*/\n*         10 CTGBRCAT BIT(1),       /* BRANCH ENTRY TO IGG0CLHA -\n*                                      RESTRICTED TO KEY ZERO USE AND\n*                                      CMS FUNCTIONS CTGOPEN,\n*                                      CTGCLOSE, AND CTGVVDS.        */\n*         10 *        BIT(3),       /* RESERVED              @ZA58903*/\n*       5 CTGTYPE  CHAR(1),         /* ENTRY TYPE - LISTCAT, DELETE  */\n*       5 CTGNOFLD PTR(8),          /* NUMBER OF FIELD POINTERS      */\n*       5 CTGDDNM PTR(31),          /* DD NAME ADDR                  */\n*         10 CTGNEWNM PTR(31),      /* NEWNAME ADDRESS - ALTER       */\n*            15 CTGFDBK  PTR(16),   /* SUPER LOCATE FEEDBACK         */\n*            15 CTGFBFLG BIT(16),   /* SUPER LOCATE FLAGS            */\n*               20 CTGPAR   BIT(1), /* PARALLEL MOUNT -SUPERLOCATE   */\n*               20 CTGKEEP  BIT(1), /* FORCED KEEP - SUPERLOCATE     */\n*               20 CTGGDGB  BIT(1), /* GDG BASE LOCATE         Y02020*/\n*               20 CTGNGDSN BIT(1), /* GDG NAME GENERATED      Y02020*/\n*               20 CTGCLV   BIT(1), /* CANDIDATE VOLUME LIST @ZA76423*/\n*               20 *        BIT(11), /* RESERVED             @ZA76423*/\n*       5 CTGJSCB  PTR(31),         /* JSCB ADDR                     */\n*         10 CTGPSWD  PTR(31),      /* PASSWORD ADDR                 */\n*       5 CTGFIELD(*) PTR(31) CTGPL999 /* FIELD POINTERS             */\n*/********************************************************************/\n*/*     CONSTANTS USED TO SET AND/OR TEST FIELDS DECLARED ABOVE      */\n*/********************************************************************/\n*   DECLARE                         /* CATALOG FUNCTION - CTGFUNC    */\n*     CTGLOC   BIT(3) CONSTANT('001'B), /* LOCATE                    */\n*     CTGLSP   BIT(3) CONSTANT('010'B), /* LSPACE                    */\n*     CTGUPDAT BIT(3) CONSTANT('011'B), /* UPDATE                    */\n*     CTGCMS   BIT(3) CONSTANT('100'B); /* CMS FUNCTION              */\n*   DECLARE                         /* CMS OPTIONS - CTGOPTNS        */\n*     CTGDEFIN BIT(5) CONSTANT('00001'B), /* DEFINE                  */\n*     CTGALTER BIT(5) CONSTANT('00010'B), /* ALTER                   */\n*     CTGDELET BIT(5) CONSTANT('00011'B), /* DELETE                  */\n*     CTGLTCAT BIT(5) CONSTANT('00100'B), /* LIST CATALOG            */\n*     CTGCNVTV BIT(5) CONSTANT('00110'B), /* CONVERTV        @Y30LSPS*/\n*     CTGOPEN  BIT(5) CONSTANT('00111'B), /* CAS CAT OPEN    @PAS    */\n*     CTGCLOSE BIT(5) CONSTANT('01000'B), /* CAS CAT CLOSE   @PAS    */\n*     CTGVVDS  BIT(5) CONSTANT('01001'B); /* CAS CAT VVDS    @PAS    */\n*   DECLARE                           /* RECORD ENTRY TYPE - CTGTYPE */\n*     CTGTDATA CHAR(1) CONSTANT('D'), /* DATA                        */\n*     CTGTINDX CHAR(1) CONSTANT('I'), /* INDEX                       */\n*     CTGTALIN CHAR(1) CONSTANT('A'), /* ALIEN                       */\n*     CTGTUCAT CHAR(1) CONSTANT('U'), /* USER CATALOG                */\n*     CTGTVOL  CHAR(1) CONSTANT('V'), /* VOLUME                      */\n*     CTGTCL   CHAR(1) CONSTANT('C'), /* CLUSTER                     */\n*     CTGTAIX  CHAR(1) CONSTANT('G'), /* ALTERNATE INDEX     @Y30SSPJ*/\n*     CTGTPATH CHAR(1) CONSTANT('R'), /* PATH                @Y30SSPJ*/\n*     CTGTTNAM CHAR(1) CONSTANT('T'), /* TRUE NAME               @L5A*/\n*     CTGTVVR  CHAR(1) CONSTANT('K'), /* VSAM VOLUME RECORD      @L5A*/\n*     CTGTFREE CHAR(1) CONSTANT('F'), /* FREE                @Y30SSPJ*/\n*     CTGTPTH  CHAR(1) CONSTANT('R'), /* PATH                @Y30SSSB*/\n*     CTGTUPG  CHAR(1) CONSTANT('Y'), /* UPGRADE             @Y30SSSB*/\n*     CTGTGBS  CHAR(1) CONSTANT('B'), /* GDG BASE              Y02020*/\n*     CTGTANM  CHAR(1) CONSTANT('X'), /* ALIAS NAME            Y02020*/\n*     CTGTPGSP CHAR(1) CONSTANT('P'), /* PAGE SPACE            Y02020*/\n*     CTGTMCAT CHAR(1) CONSTANT('M'), /* MASTER CATALOG              */\n*     CTGTJES3 BIT(8) CONSTANT('01'X);/* JES3 ORIGINATED, SUPERLOCATE\n*                                        REQUEST                     */\n*/********************************************************************/\n*/*                 PROBLEM  DETERMINATION  FIELDS                   */\n*/********************************************************************/\n*   DECLARE\n*     1 * DEF(CTGDDNM),             /* PROBLEM DETERMINATION @Y30SSJG*/\n*       2 CTGPROB CHAR(4),          /* PROBLEM DETERMINATION @Y30SSJG*/\n*         3 CTGMODID CHAR(2),       /* MODULE IDENTIFICATION @Y30SSJG*/\n*         3 CTGREASN CHAR(2),       /* REASON CODE           @Y30SSJG*/\n*           4 CTGREAS1 CHAR(1),     /* HIGH ORDER BYTE ZERO  @Y30SSJG*/\n*           4 CTGREAS2 CHAR(1);     /* REASON CODE LOW BYTE  @Y30SSJG*/\n* %GOTO CTGPLX02;                                                   /*\n.CTGPL01 ANOP\nCTGOPTN1 DS    XL1                      FIRST OPTION INDICATOR\nCTGBYPSS EQU   X'80'                    BYPASS\nCTGMAST  EQU   X'40'                    VERIFY MASTER PASSWORD\nCTGCI    EQU   X'20'                    VERIFY CONTROL INDICATOR\nCTGUPD   EQU   X'10'                    VERIFY UPDATE\nCTGREAD  EQU   X'08'                    VERIFY READ\nCTGNAME  EQU   X'04'                    1 - 44-BYTE NAME OR VOLSER\n*                                       0 - ENTRY ID NUMBER\nCTGCNAME EQU   X'02'                    1 - 44-BYTE NAME\n*                                       0 - ACB ADDRESS\nCTGGENLD EQU   X'01'                    GENERIC LOCATE REQUEST\n*\nCTGOPTN2 DS    XL1                      SECOND OPTION INDICATOR\nCTGEXT   EQU   X'80'                    EXTEND(UPDATE)\nCTGNSVS  EQU   X'80'                    CATLG CLEANUP REQUEST  @ZA00605\nCTGERASE EQU   X'40'                    ERASE(DELETE)\nCTGSMF   EQU   X'40'                    WRITE SMF(LSPACE)\nCTGREL   EQU   X'40'                    RELEASE(UPDATE)\nCTGGTALL EQU   X'40'                    CONCAT SEARCH (LISTCAT) Y02020\nCTGGFLIC EQU   X'40'                    SRCH ONLY 1 CAT(GFL)      @SCA\nCTGPURG  EQU   X'20'                    PURGE (DELETE)\nCTGVMNT  EQU   X'20'                    VOLUME MOUNT CALLER\nCTGRCATN EQU   X'20'                    RTN CAT NAME(GLOC)      Y02020\nCTGSWAP  EQU   X'20'                    SWAPSPACE (DEFINE)     @Z40WSSG\nCTGGTNXT EQU   X'10'                    GET NEXT (LIST CTLG)\nCTGUCRAX EQU   X'10'                    UCRA EXTEND OPTION     @ZA18274\nCTGDELRC EQU   X'10'                    DELETE RECOVER             @L5A\nCTGDISC  EQU   X'08'                    DISCONNECT (DELETE)\nCTGRESM  EQU   X'08'                    GFL RESUME FUNCTION        @SCA\nCTGOVRID EQU   X'04'                    ERASE OVERRIDE (DELETE)\nCTGCNVTC EQU   X'04'                    CONVERT CAT (DELETE SPACE)\n*                                                                  @L5A\nCTGSCR   EQU   X'02'                    SCRATCH SPACE (DELETE)\nCTGCDI   EQU   X'02'                    DATA INDEX ARE MATCHES IF ITS\n*                                       CLUSTER/AIX MATCHES FILTER KEY\n*                                                                  @SCA\nCTGBOTH  EQU   X'01'                    CALLER CAN ACCEPT ICF CATALOG\n*                                       ARCHITECTURE               @L5A\nCTGOPTN3 DS    XL1                      THIRD OPTION INDICATOR\nCTGFUNC  EQU   X'E0'                    HIGH ORDER THREE BITS DEFINE\n*                                       FUNCTION\n*   LOCATE     -   001* ****\nCTGLOC   EQU   X'20'                    LOCATE - BITS ON\n*   LSPACE     -   010* ****\nCTGLSP   EQU   X'40'                    LSPACE - BITS ON\n*   UPDATE     -   011* ****\nCTGUPDAT EQU   X'60'                    UPDATE - BITS ON\n*   CMS FUNCTION - 100* ****\nCTGCMS   EQU   X'80'                    CMS FUNCTION - BITS ON\n*   GFL FUNCTION - 101* ****                                       @SCA\nCTGGFL   EQU   X'A0'                    GFL FUNCTION - BITS ON     @SCA\n*\nCTGSUPLT EQU   X'10'                    SUPER LOCATE\nCTGGDGL  EQU   X'08'                    GDG LOCATE FUNCTION (CTGWAGB IN\n*                                       CTGWA)\nCTGSRH   EQU   X'04'                    0 - SEARCH MASTER CAT ONLY\n*                                       1 - SEARCH OS CAT FIRST\nCTGNUM   EQU   X'02'                    0 - SEARCH BOTH CATALOGS\n*                                       1 - SEARCH ONE CATALOG\nCTGAM0   EQU   X'01'                    VSAM REQ VERSUS NONVSAM\n*\nCTGOPTN4 DS    XL1                      FOURTH OPTION INDICATOR  Y02020\nCTGLBASE EQU   X'80'                    LOCATE GDG BASE ONLY\nCTGNDISC EQU   X'80'                    DELETE CATALOG NO DISCONNECT\n*                                                                  @L9A\nCTGNOCON EQU   X'80'                    DEFINE CATALOG NO CONNECT  @L9A\nCTGDOCAT EQU   X'40'                    DO NOT OPEN NEEDED CATLG\nCTGNPROF EQU   X'20'                    NO (RAC) PROFILE SHOULD BE\n*                                       DEFINED OR DELETED     @Z40RSRC\nCTGCOIN  EQU   X'10'                    CONTROLLER INTERCEPT REQUESTED\n*                                                              @ZA20773\nCTGBYPMT EQU   X'08'                    BYPASS SECURITY PROMPTING TO\n*                                       SYSTEM OPERATOR        @ZA07531\nCTGTIOT  EQU   X'04'                    CALLER OWNS SYSZTIOT EXCLUSIVE\nCTGICFC  EQU   X'02'                    REQUEST ORIENTED TO ICF CATALOG\n*                                                                  @L5A\nCTGICFOR EQU   X'01'                    ICF ONLY REQUEST           @L5A\nCTGENT   DS    0A                       USER ENTRY ADDRESS OR POINTER\n*                                       TO VOLUME SERIAL NUMBER(LSPACE)\nCTGFVT   DS    A                        FVT ADDRESS (DEFINE, ALTER)\nCTGCAT   DS    0A                       CATALOG POINTER\n*\nCTGCVOL  DS    A                        CVOL PTR (SUPER LOCATE)\n*\nCTGWKA   DS    A                        WORKAREA ADDRESS\n*\nCTGDSORG DS    CL2                      DATA SET ORG (SUPER LOCATE)\n*   BITS 0-4 DEFINE ORGANIZATION\nCTGOPTNS EQU   X'F8'                    TOP 5 BITS\n*   DEFINE          - 0000 1*** **** ****\nCTGDEFIN EQU   X'08'                    DEFINE\n*   ALTER           - 0001 0*** **** ****\nCTGALTER EQU   X'10'                    ALTER\n*   DELETE          - 0001 1*** **** ****\nCTGDELET EQU   X'18'                    DELETE\n*   LIST CATALOG    - 0010 0*** **** ****\nCTGLTCAT EQU   X'20'                    LIST CATALOG\n*   CONVERTV        - 0011 0*** **** ****\nCTGCNVTV EQU   X'30'                    CONVERTV\n*   CAS CAT OPEN    - 0011 1*** **** ****                         @PAS\nCTGOPEN  EQU   X'38'                    CAS CAT OPEN              @PAS\n*   CAS CAT CLOSE   - 0100 0*** **** ****                         @PAS\nCTGCLOSE EQU   X'40'                    CAS CAT CLOSE             @PAS\n*   CAS CAT VVDS    - 0100 1*** **** ****                         @PAS\nCTGVVDS  EQU   X'48'                    CAS CAT VVDS              @PAS\nCTGF2WKA EQU   X'04'                    FORMAT 2 WORK AREA        @L5A\nCTGXWAL  EQU   CTGF2WKA                 CPE ALIAS FOR ABOVE\nCTGVVRUP EQU   X'02'                    VVDS UPDATE ONLY          @L5A\nCTGF2SEN EQU   X'01'                    CAN HANDLE 40-2 RC    @ZA58903\nCTGFVFY  EQU   X'80'                    FORCE PASSWORD VERIFICATION -\n*                                       DO NOT CHECK FOR AUTHORIZED\n*                                       CALLER                    @LMA\nCTGHDLET EQU   X'40'                    HSM HAS DELETED A MIGRATED\n*                                       DATA SET                  @PAS\nCTGHALTL EQU   X'20'                    LOCATE FROM ALTER         @PAS\nCTGHDLTL EQU   X'10'                    LISTCAT FROM DELETE       @PAS\nCTGBRCAT EQU   X'08'                    BRANCH ENTRY TO IGGOCLAH -\n*                                       RESTRICTED TO KEY ZERO USE AND\n*                                       CMS FUNCTIONS CTGOPEN,\n*                                       CTGCLOSE, AND CTGVVDS.\n*\n*   BITS 13-15 RESERVED                                           @L5A\n*\nCTGTYPE  DS    CL1                      ENTRY TYPE-LISTCAT,DELETE\nCTGTALIN EQU   C'A'                     ALIEN - A\nCTGTGBS  EQU   C'B'                     GDG BASE - B\nCTGTCL   EQU   C'C'                     CLUSTER - C\nCTGTDATA EQU   C'D'                     DATA - D\nCTGTFREE EQU   C'F'                     FREE - F\nCTGTAIX  EQU   C'G'                     ALTERNATE INDEX - G\nCTGTGDS  EQU   C'H'                     GDS - H                    @SCA\nCTGTINDX EQU   C'I'                     INDEX - I\nCTGTVVR  EQU   C'K'                     VSAM VOLUME RECORD         @L5A\nCTGTMCAT EQU   C'M'                     MASTER CATALOG - M\nCTGTPGSP EQU   C'P'                     PAGE SPACE - P\nCTGTPATH EQU   C'R'                     PATH - R\nCTGTPTH  EQU   C'R'                     PATH - R\nCTGTTNAM EQU   C'T'                     ICF TRUE NAME              @L5A\nCTGTUCAT EQU   C'U'                     USER CATALOG - U\nCTGTVOL  EQU   C'V'                     VOLUME - V\nCTGTANM  EQU   C'X'                     ALIAS BASE -X\nCTGTUPG  EQU   C'Y'                     UPGRADE - Y\nCTGTJES3 EQU   X'01'                    JES3 SUPERLOCATE REQUEST\nCTGMULTY EQU   X'FF'                    MULTIPLE TYPES             @SCA\n*\nCTGNOFLD DS    XL1                      NUMBER FIELD POINTERS\nCTGDDNM  DS    0A                       DD NAME ADDRESS\nCTGNEWNM DS    0A                       NEWNAME ADDRESS - ALTER\nCTGFILTR DS    0A                       GFL FILTER KEY ADDRESS     @SCA\nCTGPROB  DS    0XL4                     PROBLEM DETERMINATION  @Y30SSJG\nCTGMODID DS    0CL2                     MODULE IDENTIFICATION  @Y30SSJG\nCTGFDBK  DS    XL2                      SUPER LOCATE FEEDBACK\nCTGFBFLG DS    0XL2                     SUPER LOCATE FLAGS\nCTGREASN DS    0XL2                     ERROR REASON CODE      @Y30SSJG\nCTGREAS1 DS    XL1                      HIGH ORDER BYTE ZERO\nCTGPAR   EQU   X'80'                    PARALLEL MOUNT - SUPER LOC\nCTGKEEP  EQU   X'40'                    FORCED KEEP = SUPER LOCATE\nCTGGDGB  EQU   X'20'                    GDG BASE LOCATED\nCTGNGDSN EQU   X'10'                    GDG NAME GENERATED\nCTGCLV   EQU   X'08'                    CANDIDATE VOLUME LIST  @ZA76423\n*        6-8  RESERVED                                         @ZA76423\nCTGREAS2 DS    XL1                      REASON CODE LOW BYTE\n*\nCTGJSCB  DS    0A                       JSCB ADDRESS\nCTGPSWD  DS    A                        PASSWORD ADDRESS\nCTGFIELD DS    A                        FIELD POINTERS - MAY BE MORE\n*                                       THAN ONE\nCTGPLLEN EQU   *-CTGPL                  LENGTH OF CTG WITH ONE FIELD\n*                                       POINTER\n         MEND\n* */ %CTGPLX02:;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCTGVL": {"ttr": 1032, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO ,\n         IEZCTGVL &P=CTG\n***********************************************************************\n*                                                                     *\n*  MACRO NAME = IEZCTGVL                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME = CATALOG VOLUME LIST                             *\n*                                                                     *\n*  FUNCTION = THE CTGVL IS BUILT BY THE ISSUER OF A LOCATE REQUEST    *\n*             FOR A DATA-SET NAME.  CATALOG MANAGEMENT USES THE CTGVL *\n*             TO RETURN TO THE CALLER THE VOLUME SERIAL NUMBERS OF    *\n*             THE VOLUMES ON WHICH SPACE IS ALLOCATED TO THE DATA     *\n*             SET.  FOR SUPERLOCATE REQUESTS, THE CTGWA POINTS TO THE *\n*             CTGVL.                                                  *\n*                                                                     *\n*  DATE OF LAST CHANGE = 21 FEB 83                                    *\n*                                                                     *\n***********************************************************************\n&P.VL    DSECT ,\n&P.VLVOL DS    CL6                VOLUME SERIAL NUMBER\n&P.VLDEV DS    XL4                DEVICE TYPE\n&P.VLSEQ DS    XL2                FILE SEQUENCE NUMBER\n&P.VLX   DS    0X                 VOLUME LIST EXTENSION\n&P.VLTTR DS    0XL3               FOR A SINGLE VOL DSN, THE TTR OF ITS\n*                                 DSCB\n&P.VLNXT DS    0X                 FOR A MULTI-VOLUME DATASET, A\n*                                 REPETITION OF CTGVLVOL, CTGVLDEV, AND\n*                                 CTGVLSEQ FOR THE REST OF THE VOLUMES\n&P.VLLEN EQU   *-&P.VL\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IEZCTGWA": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$_\\x01\\x04$_\"I\\x00\\x1f\\x00\\x1f\\x00\\x00\\xc3\\xc1\\xe3\\xd4\\xc1\\xc3\\xe2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-09-01T00:00:00", "modifydate": "2004-09-01T22:49:00", "lines": 31, "newlines": 31, "modlines": 0, "user": "CATMACS"}, "text": "         MACRO ,\n         IEZCTGWA &P=CTG\n***********************************************************************\n*                                                                     *\n*  MACRO NAME = IEZCTGWA                                              *\n*                                                                     *\n*  DESCRIPTIVE NAME = CATALOG WORK AREA                               *\n*                                                                     *\n*  FUNCTION = THE CTGWA IS BUILT BY THE CALLER OF CATALOG MANAGEMENT  *\n*             FOR MOST REQUESTS.  THE CTGPL POINTS TO THE CTGWA.      *\n*             THE WORK AREA HAS ONE FORMAT FOR A SUPERLOCATE          *\n*             REQUEST AND ANOTHER FORMAT FOR ALL OTHER REQUESTS.      *\n*                                                                     *\n*  DATE OF LAST CHANGE = 21 FEB 83                                    *\n*                                                                     *\n***********************************************************************\n&P.WA    DSECT ,\n&P.WALNG DS    XL2                      LENGTH OF THE WORK AREA\n* FORMAT FOR A SUPERLOCATE REQUEST\n         ORG   &P.WALNG\n&P.WAVL  DS    A                  ADDRESS OF THE CTGVL (VOLUME LIST)\n&P.WALV  DS    XL2                LENGTH OF THE VOLUME LIST\n&P.WAVCT DS    XL2                NO OF VOLSERS RETURNED IN VSL MINIMUM\n&P.WAUCT DS    XL2                NO OF VOLUMES THAT MUST BE MOUNTED\n* THE FOLLOWING TWO FIELDS ARE FOR A GDG BASE ONLY:\n&P.WAGCT DS    XL2                NO OF GENERATIONS CATALOGED\n*                                 CTGGDGB IN CTGPL IS SET ON (FOR GDGS)\n&P.WAGB  DS    A                  ADDRESS OF 4 BYTE FIELD\n*                                CONTAINING GENERATION LEVEL TO BE USED\n&P.WALEN EQU   *-&P.WA\n         MEND  ,\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PRINT": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x04$/\\x01\\x04$/\\tQ\\x03\\x80\\x03\\x80\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2004-08-29T00:00:00", "modifydate": "2004-08-29T09:51:00", "lines": 896, "newlines": 896, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "SVC26PAP": {"ttr": 1540, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x04$/\\x01\\x04$\\x8f#%\\x04\\\\\\x07\\xd3\\x00\\x00\\xd9\\xe2\\xc9\\xf0\\xf1\\xe6\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-08-29T00:00:00", "modifydate": "2004-09-04T23:25:00", "lines": 1116, "newlines": 2003, "modlines": 0, "user": "RSI01WY"}, "text": "                             SVC 26\n\n                               and\n\n                         What It Can Do\n\n\n\n                          Peter Sawyer\n                    National Advanced Systems\n\n                         MVS SCP Project\n\n                          Session O327\n                          March 3, 1989\n\n                        Table of Contents\n\nOverview and Disclaimer. . . . . . . . . . . . . . . . . . . .  1\n\nIntroduction . . . . . . . . . . . . . . . . . . . . . . . . .  2\n     The OS/360 Catalog. . . . . . . . . . . . . . . . . . . .  3\n     CAMLST functions. . . . . . . . . . . . . . . . . . . . .  4\n     OS Catalogs in MVS (with SU8) . . . . . . . . . . . . . .  5\n     VSAM Catalogs (including ICF) . . . . . . . . . . . . . .  5\n\nThe Catalog Parameter List (CTGPL) . . . . . . . . . . . . . .  6\n\nThe Catalog Field Vector Table (CTGFV) . . . . . . . . . . . .  8\n\nThe Catalog Field List (CTGFL) . . . . . . . . . . . . . . . . 10\n     CTGFL Dictionary of Names for Define. . . . . . . . . . . 11\n\nThe DELETE Function. . . . . . . . . . . . . . . . . . . . . . 12\n     EXPORT DISCONNECT . . . . . . . . . . . . . . . . . . . . 12\n\nInformation Retrieval - VSAM LOCATE. . . . . . . . . . . . . . 13\n\nSUPERLOCATE. . . . . . . . . . . . . . . . . . . . . . . . . . 14\n\nGENERIC LOCATE . . . . . . . . . . . . . . . . . . . . . . . . 15\n\nLSPACE - Available Space Report. . . . . . . . . . . . . . . . 16\n\nCreating Catalog Entries - The DEFINE Function . . . . . . . . 17\n     DEFINE NONVSAM. . . . . . . . . . . . . . . . . . . . . . 17\n          IMPORT CONNECT . . . . . . . . . . . . . . . . . . . 17\n     DEFINE GENERATIONDATAGROUP. . . . . . . . . . . . . . . . 18\n     DEFINE CLUSTER/ALTERNATEINDEX . . . . . . . . . . . . . . 18\n     DEFINE PATH . . . . . . . . . . . . . . . . . . . . . . . 20\n     DEFINE ALIAS. . . . . . . . . . . . . . . . . . . . . . . 20\n     DEFINE SPACE. . . . . . . . . . . . . . . . . . . . . . . 21\n\nModifying Catalog Information - ALTER. . . . . . . . . . . . . 22\n\nDIAGNOSTIC TIPS & HOW TO LEARN MORE. . . . . . . . . . . . . . 23\n     Testing AMS Under TSO . . . . . . . . . . . . . . . . . . 23\n     Testing AMS In The Background . . . . . . . . . . . . . . 23\n\nData Area Descriptions . . . . . . . . . . . . . . . . . . . . 25\n     CTGPL . . . . . . . . . . . . . . . . . . . . . . . . . . 26\n     CTGFV . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n     CTGFL . . . . . . . . . . . . . . . . . . . . . . . . . . 31\n     CTGWA . . . . . . . . . . . . . . . . . . . . . . . . . . 32\n     CTGVL . . . . . . . . . . . . . . . . . . . . . . . . . . 33\n     CTGCV . . . . . . . . . . . . . . . . . . . . . . . . . . 34\n     AMDSB . . . . . . . . . . . . . . . . . . . . . . . . . . 35\n\n\n                     Overview and Disclaimer\n\nThis is a discussion of the SVC 26 interface in MVS.  It includes\nsupport for ICF catalogs where appropriate, as well as a\ndescription of the CVOL processor support.  Except as noted, all\nreferences to VSAM catalogs include ICF catalogs as well.\n\nThe intended audience is an experienced system programmer, with a\nworking knowledge of Catalog Management externals, including Access\nMethod Services.  This is not a tutorial on catalog management, but\na detailed exploration of the internals.\n\nThe information is based upon personal observation, test cases,\ntracing, fiche reading, etcetera.  It is not exhaustive, and has\nnot been subjected to any formal testing by the author.\nNonetheless, the author believes it to be correct and useful.  In\nno circumstances will the author be liable for any damages arising\nfrom its use.\n\n                          Introduction\n\nThe catalog function, like much of MVS, has its origins in the\noriginal design of OS/360.  It has been enhanced several times\nsince.  The first version was limited to associating a list of\nvolumes with a dataset name.  This was adequate for the needs of\nOS.  The information was stored in a DASD dataset named SYSCTLG on\nthe system residence volume, in a tree structure based on index\nlevels in the dataset name.  One of the first improvements was the\nability to have more than one SYSCTLG, and to chain them together.\nThe search would still begin on sysres, but the first level could\nbe a pointer to another volume, known as a Control Volume Pointer\nEntry (CVPE).  The CVPE had the serial number of the volume to be\nsearched.  Alternatively, the caller could provide the serial\nnumber of the Control Volume in the CAMLST. It is interesting to\nnote that the OS/360 term \"Control Volume\" (CVOL for short) refers\nto the volume containing the SYSCTLG dataset, and not the dataset\nitself.  Hereafter, we will use the vernacular CVOL to refer to a\nSYSCTLG dataset.  Other changes were made to improve the OS catalog\nover time.  The CAMLST functions were documented externally in a\nmanual, the last version of which was titled \"Data Management for\nSystem Programmers.\"\n\nThe first major change was the introduction of VSAM as part of\nOS/VS1 and OS/VS2 SVS.  Both of these systems retained the OS\ncatalog structure intact, but added a parallel structure for VSAM.\nA new format of request was defined for SVC 26, used for VSAM\nrequests.  IBM did not document this new interface, claiming that\nto do so would impair their ability to make changes to it.  The\nauthor believes that perhaps the real reason is that the new\ninterface is so clumsy and awkward they sought to avoid public\nridicule by concealing the mess.  One day, history will judge this.\nAt any rate, the need for documentation does not diminish, hence\nthis work.\n\nWith the introduction of MVS, the two parallel catalog structures\nwere combined in what was, at best, a shotgun marriage.  All\nsearches would begin with the VSAM master catalog.  From there, the\nhigh level qualifier could redirect the activity to either a VSAM\nusercatalog, or to an OS catalog.  The use of an alternate\nusercatalog was possible either by specifying the catalog as a\nparameter to SVC 26, or through the use of STEPCAT.  There was no\nway to select a CVOL other than the one connected via the master\ncatalog.  Neither was there support for generation data groups\n(GDGs) in CVOL catalogs.  There was a new layer of software\nintroduced, known as the catalog controller.  The controller became\nthe first load of SVC 26, and translated CAMLST format requests\ninto VSAM Catalog Parameter Lists (CTGPLs).  If later processing\ndetermined that the target catalog was indeed a CVOL catalog, then\nthe CTGPL was translated to a CAMLST, and the CVOL processor\ncalled.  After CVOL processing, the CAMLST was again translated to\nCTGPL format if required.\n\nThe VSAM catalog (prior to ICF) was less than perfect, and users\ndemanded full OS catalog support in MVS.  They got it in MVS 3.7\nwith SU8.  SU8 reinstated all the code for CVOL functions that had\nbeen in SVS.  Now, the catalog controller had to recognize CAMLST\nrequests which specified a CVOL, and pass them directly to the CVOL\nprocessor untranslated. The possibility still existed for all of\nthe translations described above as well.\n\nThe latest major change was the introduction of ICF catalogs in the\nill fated Data Facility/Extended Function product. DF/EF had severe\nreliability problems in its early life.  It has since been\nsuperseded by the Data Facility Product (DFP).  There now were\nthree catalog types:  OS CVOL, VSAM catalog, and ICF catalog.\nFortunately the parameter lists for VSAM and ICF catalogs are\ncompatible with minor exceptions, so the mapping functions of the\ncatalog controller are not changed.\n\nOur purpose here is to understand the CTGPL format of request, and\nhow it applies to the various catalog types.  First, however, a\nbrief chat about CVOL functions.\n\n                       The OS/360 Catalog\n\nThe original catalog was a BSAM type dataset with 256 byte records\nhaving 8 byte hardware keys.  This is the same format as the\ndirectory for a partitioned data set, and in OS some of the code\nwas shared.  BLDL was branch entered to search catalogs, and\ncatalog management was entered (via SVC 28) to format PDS\ndirectories.  Enough esoteric trivia.\n\nFor a seemingly simple function, the internal complexity is\nsurprising.  If you think this is bad, just wait until I get to\nVSAM.\n\nThere were 10 types of entries in the catalog:\n    AE        Alias entry, provides a substitute high qualifier\n    CVPE      CVOL pointer entry, points to another OS catalog\n    DSPE      Dataset pointer entry (five or less volumes)\n    GIPE      Generation index pointer entry (GDG base)\n    ICE       Index control entry, an intermediate tree node\n    ILE       Index link entry, to chain to another ICE\n    IPE       Index pointer entry, points to the ICE at the next\n              lower level\n    VCB       Volume Control Block, holds up to 20 volumes\n    VCBPE     Volume Control Block pointer entry (more than 5\n              volumes)\n    VICE      Volume index control entry, first block of SYSCTLG\n\nAll requests were made with the CAMLST format.  On entry to SVC 26,\nregister 1 contains the address of the CAMLST, which is 3 to 5\nwords in length.  The first word of the CAMLST is a group of flags\nand control fields to identify the request.  Bit 23 of this word is\nalways zero to identify CAMLST format.  The next two to four words\nare pointers to data.  In general, word two points to the dataset\nor index name, and word three is zero or the address of the CVOL\nspecification.  Word four points to a second name, volume\ninformation, or a work area for LOCATE.  Word five is used only\nwhen a DSCB pointer is passed for a single volume dataset.\n\nThere were 14 CAMLST functions available:\n    BLDA      Build an alias for a high level index\n    BLDG      Build a generation index\n    BLDX      Build index (other than a GDG index)\n    BLOCK     LOCATE by TTR\n    CAT       Catalog a dataset when index levels exist\n    CATBX     Catalog a dataset creating required index levels\n    DLTA      Delete an alias for a high level index\n    DLTX      Delete an index (index must be empty)\n    DRPX      Disconnect control volumes\n    LNKX      Connect two control volumes\n    NAME      LOCATE by name\n    RECAT     Recatalog a dataset\n    UCATDX    Uncatalog and remove empty index levels\n    UNCAT     Uncatalog and retain index levels\n\nWord one of the CAMLST indicated the function as follows:\n\n    BLDA    ..00 0.0.   .001 0000   0... ...0   .... ....   0010\n0000\n    BLDG    ..00 0.0.   .010 0000   0... ...0   .... ....   0020\n0000\n    BLDX    ..00 0.0.   .100 0000   0... ...0   .... ....   0040\n0000\n    BLOCK   ..00 0.1.   .000 0000   0... ...0   .... ....   0200\n0000\n    CAT     ..10 0.0.   .000 0000   0... ...0   .... ....   2000\n0000\n    CATBX   ..10 0.0.   .100 0000   0... ...0   .... ....   2040\n0000\n    DLTA    ..00 0.0.   .000 0001   0... ...0   .... ....   0001\n0000\n    DLTX    ..00 0.0.   .000 0100   0... ...0   .... ....   0004\n0000\n    DRPX    ..00 0.0.   .000 0000   1... ...0   .... ....   0000\n8000\n    LNKX    ..00 0.0.   .000 1000   0... ...0   .... ....   0008\n0000\n    NAME    ..00 0.0.   .000 0000   0... ...0   .... ....   0000\n0000\n    RECAT   ..01 0.0.   .000 0000   0... ...0   .... ....   1000\n0000\n    UCATDX  ..00 1.0.   .000 0100   0... ...0   .... ....   0804\n0000\n    UNCAT   ..00 1.0.   .000 0000   0... ...0   .... ....   0800\n0000\n\nBit 0 is set on if the user has specified a CVOL.  Naturally, BLOCK\nis not meaningful without a CVOL specification.  In this case word\nthree is the address of the CVOL serial number.  Bits 1 and 5 are\nnot used by SVC 26, but the CAMLST macro always generates them as\none.  This makes locate by name appear as 44000000, for example.\n\n                   OS Catalogs in MVS (with SU8)\n\nMVS changes the rules for OS catalogs slightly.  Index levels are\nalways handled automatically in MVS, so that CAT and UNCAT are\ntreated as CATBX and UCATDX respectively.  BLDX is supported, but\nis redundant, and DLTX is needed only for a GDG.  Requests which\nare meaningful only in a CVOL are accepted only if the required\nCVOL is specified.  This affects BLDA, BLOCK, DLTA, DRPX and LNKX.\nAny request requiring a specific OS catalog is passed to the CVOL\nprocessor (IGG0CLCA) unchanged.  Others are mapped to equivalent\nVSAM requests, and passed to the VSAM catalog processor (IGG0CLA1).\n\nIf later processing determines that a CTGPL request is directed to\nan OS catalog, then most requests are rejected as not supported.\nThe ones that can be handled are VSAM LOCATE, SUPERLOCATE, Generic\nLOCATE, and DELETE.\n\nIt is a peculiarity that a CAMLST CATBX can be handled by any\ncatalog, but the analogous DEFINE NONVSAM is rejected by the CVOL\nprocessor.  Furthermore, when working with GDGs, the request must\nmatch the catalog type.  There is no remapping for BLDG/DLTX, or\nfor DEFINE/DELETE GDG.\n\n                  VSAM Catalogs (including ICF)\n\nThe primary support for these catalogs is via the VSAM catalog\nparameter list (CTGPL).  This is the undocumented interface, used\nprimarily between Access Method Services (AMS) and the catalog\nmanagement component.  All requests are issued in the form of an\nSVC 26.  This interface is much more complex than the CAMLST\ninterface.\n\nThere are basically only four functions from the user's point of\nview.  DEFINE is used to create catalog entries, DELETE to remove\nthem, ALTER to change them, and LOCATE to read them.\n\nThere are several flavors of retrieval requests.  The obvious one\nis SUPERLOCATE, which is used by the scheduler to retrieve catalog\ninformation about a specific entity.  For some unknown reason,\nSUPERLOCATE is restricted to authorized programs only.  VSAM LOCATE\nextracts selected fields from a catalog entry.  LSPACE returns\nspace information.  Generic LOCATE returns a list of dataset names,\nbut if you want to know what volumes they are on, you must do\nindividual calls for that.  Authorized callers would use\nSUPERLOCATE, but mere mortals must use the more clumsy VSAM LOCATE.\nLISTCAT can also be used to read sequentially through a catalog.\n\nOther functions, which are beyond the scope of this document,\ninclude UPDATE, used by VSAM to maintain descriptive information,\nand CONVERTV, used only with MSS.  With MVS/XATM DFP Version 2,\nthere are additional functions for communication with the catalog\naddress space, and there is something new in XA DFP 2.3 called GFL\nabout which nothing is yet known.\n\n               The Catalog Parameter List (CTGPL)\n\nFor all VSAM requests, register 1 at entry to SVC 26 holds the\naddress of the CTGPL.  At present, the CTGPL and all data areas\npointed to it are required to reside below the 16Mb line, however\nall the pointers are fullwords, and the high order bytes must\nalways be zero.  IEZCTGPL is the mapping for the CTGPL.\n\nThe CTGPL is distinguished from a CAMLST by bit 23 of the first\nword (CTGAM0) being on.  The CTGPL has a base portion 28 bytes\nlong, and may have additional 4-byte pointers at the end for\ncertain functions.  The basic function is identified in the high-\norder three bits of byte 2 of the parameter list (this is the same\nbyte (CTGOPTN3) that contains CTGAM0).  A value of B'100' means\ncatalog management services (CMS) request.  For a CMS request, the\nhigh order five bits of CTGDSORG indicate the specific request.\n\nTo clear some of the fog, consider this table:\n\n    Function       CTGOPTN3        CTGDSORG\n     SUPERLOCATE     000              n/a    with CTGSUPLT set on\n     GENERIC LOCATE  000              n/a    with CTGSUPLT &\nCTGGENLD on\n     LOCATE          001              n/a\n     LSPACE          010              n/a\n     UPDATE          011              n/a\n     DEFINE          100             00001\n     ALTER           100             00010\n     DELETE          100             00011\n     LISTCAT         100             00100\n     CONVERTV        100             00110\n     GFL             101              n/a\n\nMost functions require a work area to be provided by the caller.\nEven if none is required, it does no harm to provide one.  The word\nCTGWKA in the CTGPL points to the work area.  Except for\nSUPERLOCATE, the first halfword is the length of the workarea,\nincluding the halfword itself.  The second halfword contains the\nnumber of bytes of the workarea actually in use, and should\nnormally be initialized to zero.  On return, the content is the\nnumber of bytes used, including the header.  The workarea itself\nshould also be cleared to zeros, although it is not clear what the\neffect of not doing so would be.  Catalog management uses the work\narea to return information to the caller.  For DEFINE, generated\nfields such as component names are built here.  For SUPERLOCATE,\nthe workarea is special, and is described later.\n\nDFP levels of catalog management will also accept a \"Format-2\"\nworkarea, in which the two fields at the beginning are fullwords\nrather than halfwords, permitting a work area of more than 32K.\nSuch a work area is used only for a generic locate.  In a format-2\nworkarea, the second header field includes the length of the\nheader, so it must be initialized to 8.  Use of a Format-2 work\narea is indicated by setting bit CTGF2WKA on in CTGDSORG.\n\nIn the event that the workarea is too small, catalog management\nwill return the required size in the second header field, and give\nreturn code 40.  This enables the caller to obtain a sufficient\nwork area, and retry.  If the return code is 44-8 then the caller\nsupplied a format-1 workarea, but more than 64K is required (this\ncan only happen on a generic locate).\n\nThe CTGPL contains an optional pointer to specify which catalog to\nuse.  This word (CTGCAT) can be the address of a pointer to the\ncatalog's ACB if CTGCNAME=0, or the 44-byte catalog name if\nCTGCNAME=1.\n\nThere are several useful flags which modify processing.  They\ninclude:\n    CTGBYPSS  Bypass security checking (key 0 or supervisor state\n              only)\n    CTGDOCAT  Do not open or allocate the needed catalog\n    CTGSRH    Search only the master catalog\n    CTGTIOT   Caller owns SYSZTIOT exclusive (authorized callers)\n\nIf catalog management finds fault with the request, a return code\nis given in register 15.  Note that a branch table cannot be used,\nas the return code may not be divisible by four.  There will be a\nreason code stored in the halfword CTGFDBK, and the last 2\ncharacters of the detecting catalog management module will be\nstored at CTGMODID.  For a list of return and reason codes, refer\nto the description of message IDC3009I in the System Messages\nmanual for MVS.\n\nIf the request was processed in an ICF catalog, the bit CTGICFC\nwill be turned on by the system to indicate this to the caller.\n\n             The Catalog Field Vector Table (CTGFV)\n\nThis data area is used only with the DEFINE and ALTER functions.\nIf you are reading this for the first time, skip this until you\nunderstand the simpler stuff, and then come back.\n\nThe CTGFV is the basic unit for describing to catalog management\nthe form of an entity to be created in a VSAM or ICF catalog.  It\nis mapped by IEZCTGFV.  The CTGFV for the principal entity (eg.\ncluster) is pointed to by the CTGPL field CTGFVT.  Additional\nCTGFVs (if required) are chained from the first one.\n\nThe Field Vector Table is always 100 (X'64') bytes long.  Byte zero\nis the type code for the entity being described (eg.  \"B\" for a GDG\nbase).  Bytes one and three are option flags.  Byte two is not\nunderstood by the author.  The following 24 fullwords are pointers.\nNot all of these pointers will be used at one time.  Indeed, it is\nvalid to have a CTGFV with a type code of \"V\" followed by 99 bytes\nof zeros!\n\nMost of the pointers contain addresses of Catalog Field Lists\n(CTGFLs).  Don't panic yet, we'll describe them shortly. Others\npoint directly to the data itself.  At this time, we will look at\na few key pointers only.\n\nCTGFVENT contains the address of the 44-byte component name, or\nzero.  If zeros are passed when defining a Data, Index, or Space\ncomponent, then catalog management will generate a name, place the\nname in the catalog workarea, and place the address in CTGFVENT.\nGenerated names in the workarea are actually 45 bytes, with the\nfirst byte being the type code, and the address in CTGFVENT being\nthat of the second byte.  Other types (cluster, nonvsam, etc),\nalways require that a name be provided.\n\nData and index components are always associated with a cluster (or\nalternateindex) record.  The CTGFV for these components are pointed\nto by the fields CTGFVDCH and CTGFVICH of the primary entity during\ndefine.\n\nSpace (type \"V\") is meaningful only for old style VSAM catalogs.\nICF catalogs do not use this entity type.  Space may be requested\nalone, as in DEFINE SPACE, in which case the primary CTGFV is type\nV and is the only one.  Space may also be requested as part of\nanother request, such as DEFINE UCAT or DEFINE CLUSTER UNIQUE, in\nwhich case the type \"V\" CTGFV is chained from the primary CTGFV via\nfield CTGFVVCH.  When the SPACE CTGFV is secondary, it is provided\nas a feedback area only, and should be binary zeros except for the\ntype code.  CTGFVVCH is ignored when processing in an ICF catalog.\n\nWhen creating any entity except space (V), optional ownerid,\ncreation date and expiry date CTGFLs may be provided via CTGFVOWN,\nCTGFVCRE, and CTGFVEXP, respectively.  AMS always provides a create\ndate, but it is not required.  Curiously, on TSO AMS provides the\nusers dataset prefix (not his userid) as the default ownerid.\n\nAs a graphic illustration of the worst case CTGFV structure\n(defining a unique KSDS), observe:\n\n       CTGPL\n     +----------+\n     |          |\n     |          |         CTGFV\n     +----------+       +---------------+\n+-------------+\n     |  CTGFVT  |------>|  C3 00 00 00  |        +-------->|  \"D\"\nCTGFV  |\n     +----------+       +---------------+        |         |\n      |\n     |          |       |   CTGFVDCH    |--------+         |\n      |\n     |   . . .  |       +---------------+\n+-------------+  |\n     |          |       |   CTGFVICH    |-------------->|  \"I\"\nCTGFV  |  |\n     +----------+       +---------------+               |\n   |  |\n                        |   CTGFVVCH    |-----+         |\n   |  |\n                        +---------------+     |     +-------------+\n |--+\n                        |               |     +---->|  \"V\" CTGFV\n|   |\n                        |     . . .     |           |\n|   |\n                        |               |           |\n|---+\n                        +---------------+           |    . . .\n|\n                                                    |\n|\n                                                    |\n|\n                                                    +-------------+\n\nRemember that the \"C\", \"D\" and \"I\" field vectors also point to\nother data, including catalog field lists.\n\n                 The Catalog Field List (CTGFL)\n\nThe Catalog Field List (CTGFL) consists of a 16-byte fixed portion,\nand zero or more 8-byte variable fields.  The CTGFL is mapped by\nIEZCTGFL.  This data area is used with retrieval functions, update,\nand with DEFINE and ALTER.  The format is similar, but differs.\n\nWhen used with DEFINE or ALTER, the CTGFL is pointed to by one of\nthe fields in a CTGFV.  The type of data must be consistent with\nthe pointer used.  For this usage, CTGFLDNO will be one (or zero,\nto explicitly omit a field). CTGFLDNM will point to an 8-byte\nEBCDIC field name (see dictionary below).  Other header fields will\nbe zero.  The data pointer pair (CTGFLDAT) describes the data\npointed to.  CTGFLNG has the length, which must match the defined\nlength for the field (eg.  7 bytes for space), and CTGFLPT has the\naddress of the actual data.\n\nWhen used for UPDATE or information retrieval, the CTGPL points to\nthe CTGFL, which describes the field to be retrieved.  CTGNOFLD\n(when nonzero) indicates the number of fullword CTGFL pointers\nwhich are found beginning at CTGFIELD (CTGPL offset X'1C').  When\nused in this manner, the field name is the only indication of the\ntype of data being referred to.\n\nFor selective retrieval, the CTGFLCHN field in the retrieval CTGFL\npoints to another CTGFL (a \"TEST\" CTGFL) which describes the test.\nIt is through the use of this type of CTGFL that selective LISTCAT\nby entity type is implemented. In this case, there may be more than\none length/address pair describing alternative values.  In\naddition, CTGFLDCD will contain a code indicating what type of\nresult is required (eg.  equal, less than, etc.) The CTGFLCHN field\nmay chain a series of TEST CTGFLs together, in which case retrieval\nproceeds if any test is successful.\n\nThe length and address pair point to the data retrieved for LISTCAT\nor LOCATE, to the new data for ALTER, DEFINE or UPDATE, and to\ncomparison data in a test CTGFL.\n\nFor example, this diagram illustrates the CTGFL used by DEFINE for\na space request of CYLINDERS(5,3):\n\n        +----------------+\n  +0    |  01 00 00 00   |     +--->  C'SPACPARM'\n        +----------------+     |\n        |       0        |     |\n        +----------------+     |\n        |    CTGFLDNM    |-----+\n        +----------------+              =--->  X'000005,000003,C0'\n        |       0        |              |\n        +----------------+              |\n +10    |  00 00 00 07   |              |\n        +----------------+              |\n        |    CTGFLPT     |--------------+\n        +----------------+\n\n              CTGFL Dictionary of Names for Define\n\n                                                      Anchor\n  Name     Length        Description                 CTGFV---\nTypes\n\nPASSWALL     52+   Security fields                      STY\nCDGIR\nOWNERID       8    Owner identification                 OWN\nABCDGIR\nDSETEXDT      3    Expiration date                      EXP\nABCDGIR\nDSETCRDT      3    Creation date                        CRE\nABCDGIR\nDEVTYP       12    Device Type (left justified EBCDIC)  DVT\nA\nSPACPARM      7    Space quantity and format            SPC\nCDGIV\nAMDSBCAT     96    Copy of the AMDSB control block      AMD\nDI\nFILESEQ       2    File Sequence                        FSN\nA\nDSATTR        2    Cluster attributes                   ATR\nDI\nBUFSIZE       4    Buffer size                          BUF\nD\nLRECL         4    Average record length                LRS\nD\nRGATTR        1    Path/Alternate Index attribute       UPG\nGR\n\n                       The DELETE Function\n\nWe will examine the DELETE function first.  This is because it is\nrelatively simple, and provides a good way to get our feet wet.\n\nDELETE requires a 28-byte CTGPL, with the function codes in\nCTGOPTN3 and CTGDSORG being 100 and 00011 respectively. CTGENT must\npoint to the 44-byte name of the entity to be deleted, and CTGNAME\nin CTGOPTN1 must be on to indicate use of a name rather than an\nRBA.  To restrict the operation to s specific entity type, insert\nthe type code (eg.  \"P\" for pagespace) in CTGTYPE, otherwise leave\nCTGTYPE binary zero.  Set CTGSCR on unless you want NOSCRATCH.\n\nDespite the name, EXPORT DISCONNECT is a form of DELETE.  CTGDISC\nshould be turned on to signal export disconnect (as opposed to\ndelete usercatalog), and the type in CTGTYP should be \"U\" for\nusercat.\n\nThat's it for a basic DELETE.  Options which may be specified\ninclude:\n    CTGPURG   To ignore the expiry date of the entity\n    CTGERASE  To overwrite the object with zeros on deletion\n    CTGDELRC  Specifies the RECOVERY option for deleting a BCS\n    CTGOVRID  To override the ERASE attribute in the catalog\n    CTGSCR    Set OFF (0) for NOSCRATCH\n\nDELETE SPACE is funny.  For a delete space, the catalog owning the\nvolume must be specified via CTGCAT (unless it is the master\ncatalog), and CTGENT points to the six character volume serial\nfollowed by 38 bytes of binary zeros.\n\n               Information Retrieval - VSAM LOCATE\n\nWe now examine the VSAM LOCATE request.  Unlike the CAMLST LOCATE,\nwhich returns a complete record, VSAM LOCATE retrieves fields from\nwithin the record.  This isolates the caller from the actual record\nformat, but he must still be aware of the format of individual\nfields and groups of fields.\n\nVSAM LOCATE requires a work area large enough to hold the record\nbeing read.  AMS seems happy with 1024 bytes.  The CTGPL will have\nfunction code 001, and should have CTGBOTH set on.  CTGENT points\nto the 44-byte name, and CTGNAME is on to so indicate.  The list of\nCTGFL pointers begins at CTGFIELD, and the number of them is stored\nin CTGNOFLD.\n\nFor each field wanted, a CTGFL must be built, with one\nlength/address pair.  The name pointed to by CTGFLDNM indicates\nwhat data is wanted.  Catalog management will place the data in the\nworkarea, and insert the length and address into the CTGFL.\n\nThe dictionary of fields is voluminous, and is not included here.\nSee Catalog Management Logic manual for a list, or refer to the\nmicrofiche for IGG0CLAY.  Some of the \"fields\" are in fact derived\ninformation not residing in the catalog, for example, the catalog\nACB address.\n\nMost information can be had without any problems, but to receive\nsecurity information you must either (1) be authorized and not turn\non a \"check password\" bit, or (2) supply the master password by\npointing CTGPSWD to it.\n\nActually, the whole record will likely be put in the workarea\n(minus passwords in most cases), but it would be unwise to depend\non that.\n\n                           SUPERLOCATE\n\nSUPERLOCATE was designed for use by device allocation (the\nscheduler subcomponent), and is restricted to authorized callers.\nYou must provide a 28-byte CTGPL, with the function code in\nCTGOPTN3 being 000.  CTGNAME and CTGSUPLT must be turned on.\n\nA special form of workarea is required for SUPERLOCATE.  CTGWKA\npoints to the 16-byte area, called the Catalog Work Area (CTGWA),\nand mapped by IEZCTGWA.  The CTGWA in turn points to the variable\nlength work area where volume information is returned.\n\nThe CTGWA should be zero, except for two fields.  CTGWAVL points to\nthe area for the volume list, and CTGWALV holds the length.  The\nsystem will return the actual number of volumes in CTGWAVCT.\n\nReturned information is scattered across three places.  In the\nCTGPL, there are flags returned in CTGFDBK, and organization\ninformation is in CTGDSORG (it is only meaningful in terms of VSAM\nversus nonVSAM).  Bit CTGGDGB will be on if a GDG base was located.\n\nIn the CTGWA, the number of volumes will be returned in CTGWAVCT,\nand the minimum number of concurrent volumes required will be\nreturned in CTGWAUCT.  If CTGGDGB is on, then CTGWAGCT contains the\nnumber of generations catalogued.  A generation number is returned\nin CTGWAGB, if CTGGDGL was on the original CTGPL.\n\nVolume information is returned in the area pointed to by CTGWAVL.\nEach volume occupies 12 bytes.  Warning to CAMLST users:  The\nformat is different for superlocate.  The order of the data\nreturned from superlocate is Volume Serial, Device Type code, and\nFile Sequence (IEZCTGVL maps the volume list).  For a single volume\ndasd dataset, the TTR of the format-1 DSCB is returned in bytes\n12-15, otherwise zeros appear in those bytes.  For a multivolume\ndataset, the three fields are repeated as many times as indicated\nin CTGWAVCT.\n\nAn insufficient size of volume area will result in a return code 40\nwith the required size returned in CTGFDBK.\n\n                         GENERIC LOCATE\n\nGENERIC LOCATE is a form of SUPERLOCATE, but does not require\nauthorization.  It requires a 28-byte CTGPL, with the function code\nin CTGOPTN3 being 000.  You must turn on CTGNAME, CTGSUPLT, and\nCTGGENLD to further define the function. CTGENT points to the 44-\nbyte name of the entity to be located.\n\nA large work area is typically required.  Catalog information is\nreturned here, and 45 bytes are required for each entry.\n\nInput to the function is provided by CTGENT.  This field points to\na 1-byte length, followed by a variable length character string\n(maximum 43 characters).  Generic locate will find all catalog\nentries matching the partial name.  A period at the end of the\nstring is your responsibility, if needed.  If the string has no\nperiods at all, then the master catalog is implied, otherwise the\nfirst qualifier implies the catalog in the usual way.  For example,\nto find all datasets whose first qualifier is DEPT27, you would\nprovide AL1(7),C'DEPT27.' (if you omit the period, you get entries\nfrom the mastercat, including the alias DEPT27.)\n\nInformation is returned in the workarea, beginning at the first\navailable byte after the header.  If there is already data in the\nworkarea, then the new data is added to the existing data.  The\nsecond header field contains the number of bytes returned, which is\n45 times the number of names (plus the length of the header, either\n4 or 8).  Each name consists of a 1-byte type code followed by a\n44-byte component name.  If more information is required, then you\nmust make another call, using VSAM LOCATE, SUPERLOCATE, or OS\nLOCATE to get it.\n\nOptionally, flag bit CTGRCATN may be turned on to have the name of\nthe catalog returned as well.  If this is done, then the first name\nin the workarea will be the name of the catalog from which the\nother information was retrieved.  The type code byte for the\ncatalog name will be '0' (X'F0').\n\nAn catalog may be specified by pointing CTGCAT at its name, and\nturning on CTGCNAME, in which case only that catalog will be\nsearched.\n\n                 LSPACE - Available Space Report\n\nThe LSPACE function is used only with old style VSAM catalogs.  It\nis not applicable to ICF (you get a rude return code).  LSPACE\nsearches the data spaces on a volume, and reports on the free space\nwithin them, in a manner similar to the DADSM LSPACE function\nprovided by SVC 78.\n\nWhen LSPACE is invoked, the catalog owning the volume must be\nspecified via CTGCAT (unless it is the master catalog), and CTGENT\npoints to the six character volume serial followed by 38 bytes of\nbinary zeros.\n\nLSPACE will return a 30 byte character string of the form\n\"SPACE=CCCC,TTTT,AAAA/cccc,tttt\" in the caller's work area,\ndescribing free VSAM suballocate space on the volume.  If the\nCTGSMF bit is on, an SMF 69 record is also written\n\n         Creating Catalog Entries - The DEFINE Function\n\nNow, let us look at DEFINE.  This is quite complex, and requires\nthat we use the Catalog Field Vector (CTGFV) and Catalog Field List\n(CTGFL).  If you have not already read the descriptions of those\ndata areas, do so now before continuing.\n\nDEFINE is used to create one or more entities in the catalog.  Even\nif the type is nonVSAM, the request can be processed only in a VSAM\ncatalog.\n\nDEFINE requires a 28-byte CTGPL, with the function codes in\nCTGOPTN3 and CTGDSORG being 100 and 00001 respectively. CTGNAME in\nCTGOPTN1 must be on to indicate use of a name rather than an RBA.\nA work area is mandatory, and a size of 512 bytes is sufficient for\nall known requests.  The address of the primary CTGFV must be\nplaced in CTGFVT.\n\nThe primary CTGFV will contain the type of entity being defined in\nCTGFVTYP, which will be one of:\n    A         nonVSAM entity\n    B         generation data group (GDG) base\n    C         cluster, pagespace, usercatalog, or mastercatalog\n    G         alternate index\n    R         path\n    V         space (ie, DEFINE SPACE for VSAM suballocation)\n    X         alias (either nonVSAM or catalog)\n\nIn addition, the field CTGFVENT will have the address of the name\nfor all types except space (V).  If the entity being created is a\npagespace or catalog, then CTGTYPE in the CTGPL is set to \"P\" or\n\"U\", while CTGFVTYP is \"C\".  Otherwise, CTGTYPE is binary zeros.\nFor compatibility, SVC26 will accept a value of \"M\" in CTGTYPE and\nwill treat it as \"U\".\n\nCluster, alternate index, catalog and pagespace requests are quite\nsimilar.  We will examine the various types in turn.\n\n                         DEFINE NONVSAM\n\nThe creation of an \"alien\" (A) record requires a single CTGFV.\nCTGFVENT points to the name of the data set.  The device type is\npassed in EBCDIC using a CTGFL anchored at CTGFVDVT.  The volume\nlist is pointed to directly by CTGFVVLT.  It consists of a halfword\nlength, followed by a series of 8-byte entries.  Each entry\nconsists of two bytes of binary zeros, followed by the six\ncharacter volume serial number.  The length field does not include\nitself, eg. for one volume:  H'8',XL2'0',CL6'VOL001'.  Optionally\na file sequence number CTGFL may be provided via CTGFVFSN.  Also\noptionally, CTGFVTTR may point to a 3-byte TTR of the format-1\nDSCB.\n\nBelieve it or not, the connection of a usercatalog, known as IMPORT\nCONNECT, is a form of DEFINE NONVSAM.  The parameters are set up as\ndescribed, with a type \"A\" CTGFV.  CTGFVENT, CTGFVVLT and CTGFVDVT\nare the only fields used, and CTGTYP (in the CTGPL) must be \"U\" to\nindicate a catalog.  No workarea is needed.  Nothing in the catalog\nconnector record indicates whether the catalog is an ICF catalog.\n\n                   DEFINE GENERATIONDATAGROUP\n\nLike nonVSAM, creation of a GDG base (B) requires a single CTGFV.\nCTGFVENT points to the name of the object.  A work area of 256\nbytes is adequate.  GTFFVLMT points to the one byte binary limit\nvalue.  CTGFVGAT points to an attribute byte, where bit 0 means\nEMPTY and bit 1 means SCRATCH.\n\n                  DEFINE CLUSTER/ALTERNATEINDEX\n\nThe creation of clusters (C), alternate indices (G), pagespaces\n(P), and catalogs (U/M) is very similar.  We shall use \"cluster\"\nloosely to mean all of these, except as noted.  These requests\nrequire multiple CTGFVs to complete.  The primary CTGFV is pointed\nto from the CTGPL.  In the primary CTGFV, CTGFVDCH points to the\nCTGFV for the data (D) component.  CTGFVICH points to the CTGFV for\nthe index (I) component, if one exists.  CTGFVVCH points to the\nCTGFV for space (V), if any.  If a space CTGFV exists, it is empty\nexcept for the type code of V.  Such a CTGFV is always present for\na catalog, but is optional for other types, and denotes \"UNIQUE\".\nICF catalogs ignore the space CTGFV.\n\nThe following table illustrates the general relationships among the\nvarious data ares for defining each specific type of object:\n\n  Entity      CTGFVTYP  CTGTYPE   Data   Index   Space       Other\n   KSDS          C       X'00'     Yes    Yes     Opt\n   ESDS          C       X'00'     Yes    No      Opt\n   RRDS          C       X'00'     Yes    No      Opt\n   LDS           C       X'00'     Yes    No      ??\n?Linear?\n   AIX           G       X'00'     Yes    Yes     Opt\n   ICF Cat       C        U/M      Yes    Yes     Yes\nCTGICFOR=1\n   VSAM Cat      C        U/M      Yes    Yes     Yes\nCTGICFOR=0\n   PAGESPACE     C         P       Yes    No      Opt\nCTGSWAP=0\n   SWAPSPACE     C         P       Yes    No      Opt\nCTGSWAP=1\n\nThe data and index components (if present) will always each have an\nAMDSB.  Flags in the data AMDSB distinguish between ESDS, RRDS, and\nlinear objects.  The AMDSB is mapped by IDAAMDSB, and is described\nby a CTGFL anchored from the related CTGFVAMD field.  The AMDSB is\nupdated by catalog management to fill in additional information.\nAlso in the AMDSB are found:  CI size, maximum record size, key\nposition and length, numbers of buffers, IMBED, REPLICATE, spanned\nrecord indicator, writecheck flag, and MSS staging information.\nNot all information is applicable to all component types.\n\nAs a minimum, you must fill in AMDSBID and AMDLEN in every AMDSB.\nIf the entity is not an ESDS, then one of AMDRRDS, AMDDST, or\nAMDLDS must be set.  In the AMDSB for the data component, you must\nprovide maximum record length in AMDLRECL (the average length is\npassed separately).\n\nThe caller can specify names for all components when defining a\npagespace, cluster, or alternate index.  Names for catalog\ncomponents are always constructed by catalog management.  The\neffect of giving the data component of a VVDS a user-provided name\nhas not been studied.  When names are generated, they are placed in\nthe workarea as described in the CTGFV section above.\n\nData and index components require allocation information.  A DD\nstatement must exist for the volume, and CTGFVIND must point to the\nDDNAME.  Field lists for volumes and space are required.  This\ninformation may be provided at the component level, or the cluster\nlevel.  If both are specified, then the component level information\noverrides the cluster level.\n\nThe space field list anchored at CTGFVSPC is named SPACPARM, and\npoints to a 7-byte field.  The first three bytes contain the\nprimary quantity in binary.  The next three bytes contain the\nsecondary quantity, or zero if there is no secondary space desired.\nThe seventh byte is a space format indicator, where X'C0' denotes\ncylinders, X'80' means tracks, and X'40' requests records.  If\nrecords are requested, then the LRECL CTGFL must be present via\nCTGFVLRS to provide a fullword average record length.  AMS provides\na default of 4089 for unspanned records, and 4086 for spanned.\n\nWhen defining a non-ICF catalog, if space is specified at both the\ncluster level and data component level, then a dataspace is created\nbased on the cluster space request, and the data suballocated with\nthe data space request.  The leftover space is available for\nallocation of other clusters.\n\nTo create an ICF catalog, turn on CTGICFOR in the CTGPL, and\nCTGFVICF in the CTGFV.  For creation of a VSAM catalog, these bits\nmust be off.\n\nWhen a pagespace is created, the setting of CTGSWAP determines a\nswap dataset versus a normal page dataset.  The space request for\na pagespace must be at the data component level, and must have zero\nas the secondary quantity.  Contiguous space will be allocated.\nDefining the pagespace does not format it, and it cannot be used\nuntil formatted.  AMS formats the new pagespace by dynamically\nallocating it, opening it, and closing it.  Apparently VSAM is\nclever enough to format it during open.\n\nWhen creating an alternate index, the name of the related cluster\nmust be supplied by pointing CTGFVNAM of the \"G\" CTGFV to it.\n\nThe volume list is pointed to directly by CTGFVVLT.  It consists of\na halfword length, followed by a series of 8-byte entries.  Each\nentry consists of two bytes of binary zeros, followed by the six\ncharacter volume serial number.  The length field does not include\nitself, eg.  for one volume:  H'8',XL2'0',CL6'VOL001'.  All of the\nvolumes in the list must be of the same type, but different\ncomponents may use different lists.\n\nThe optional security information CTGFL is pointed to by CTGFVSTY.\nThe list is named PASSWALL.  The data addressed is at least 52\nbytes long, as follows:\n        +0    8-byte master password\n        +8    8-byte control interval password\n       +10    8-byte update password\n       +18    8-byte read password\n       +20    8-byte code word\n       +28    2-byte binary attempts count\n       +2A    8-byte user security verification module name\n       +32    2-byte user data length (min 0, max 256)\n       +34    optional user data string (up to 256 bytes)\nUnused fields are set to binary ones (X'FF').\n\nCTGFVATR points to the attributes field list named DSATTR.  The\ndata is two bytes long:\n        1... ....  .... ....    Speed\n        .1.. ....  .... ....    Unique\n        ..1. ....  .... ....    Reusable\n        ...1 ....  .... ....    Erase\n        .... 1...  .... ....    This catalog is recoverable (non\n                                ICF only)\n        .... .1..  .... ....    Inhibit update\n        .... ...1  .... ....    Track overflow (pagespaces only)\n        .... ....  XX.. ....    Cross-Region share options 00=1,\n                                01=2, etc\n        .... ....  ..XX ....    Cross-System share options 10=3,\n                                11=4\n        .... ..x.  .... xxxx    Reserved, must be zero\n\nFor an alternate index only, CTGFVUPG points to the RGATTR field\nlist, which addresses a flag byte, bit 0 of which is on for\nupgrade.\n\nFor a define with recatalog, turn on CTGFVRCT.  You must be\nauthorized for this function.\n\n                           DEFINE PATH\n\nA path (R) is like an alias for VSAM of sorts.  In the single\nCTGFV, CTGFVENT points to the 44-byte path name. CTGFVNAM points\ndirectly to the 44-byte path entry name, (\"true name\").  CTGFVUPG\npoints to the RGATTR field list, which addresses a flag byte, bit\n0 of which is on for upgrade.  CTGFVSTY may point to a CTGFL with\npassword information if desired (see define cluster for format).\n\n                          DEFINE ALIAS\n\nAn alias (X) requires a single CTGFV.  CTGFVENT points to the alias\nname being defined, and CTGFVNAM points directly to the 44-byte\ntrue name.  The referenced true name must be of type (A) or (U).\n\n                          DEFINE SPACE\n\nSpace, when requested alone, applies only to non-ICF catalogs.  It\nis the only entity for which no name need be provided.  An\nallocation must exist to the volume, and CTGFVIND must point to the\nDDNAME.  Volume and space information are required in the same\nformat as described under DEFINE CLUSTER.  A name will be\ngenerated, and returned in the workarea.\n\n              Modifying Catalog Information - ALTER\n\nAlter shares a lot with define, so you should be familiar with the\ndescription of define before continuing.\n\nThe setup for alter is always a single CTGFV which refers to the\ncomponent being altered.  To alter the share options for an entire\ncluster, you would alter the cluster, data, and index components in\nseparate requests.  Also, alter replaces whole fields in the\ncatalog.  To change STRNO, for example, you must provide a complete\nAMDSB replacement. This means you must first use VSAM LOCATE to\nobtain a copy of the existing AMDSB.\n\nThe CTGFV will only require pointers to the fields being changed.\nAll other pointers (except CTGFVENT) will be zero. CTGFVENT, of\ncourse, points to the 44-byte name of the object being altered.\nCTGFVTYP should contain the type code of the entity, but I don't\nknow if this is required.\n\nALTER NEWNAME is a special case, in that the new name is pointed to\nby CTGNEWNM in the CTGPL, and the CTGFV is all zeros (even\nCTGFVTYP) except for CTGFVENT.  Attempting ALTER NEWNAME on a\ncatalog or one of its components will fail with return code 48,\nreason 8.  If the entity being renamed is type A, D or I, then\nCTGFVIND should provide a DD as the VTOC will require updating.\n\nALTER REMOVEVOLUMES, for the volume cleanup function, requires that\nCTGFVENT point to the name of the master catalog, CTGFVIND must\npoint to the DDNAME to be used, and CTGFVRVL must be on.\n\n               DIAGNOSTIC TIPS & HOW TO LEARN MORE\n\nMuch information about the parameter lists was found through the\nexamination of the parameters created by AMS.  Two techniques are\nuseful, one for TSO and the other for background testing.\n\nProcessing for both TSO and background mode involves the mainline\nload module IDCAMS identifying the command. Depending on the\nrequest, one of several functional modules will be entered from the\nmainline, but control always passes back to a common \"System\nAdapter\" to perform the actual catalog management call.  The\nadapter we are interested in is named IDCSACA, and entry point in\nmodule IDCSA02, load module IDCAMS.  On entry to IDCSA02, register\n1 points to a two word parameter list.  The second word is the\naddress of the pointer to the CTGPL.  In TEST-ese, the CTGPL is\nlocated at 1R%+4%%.  Other data may be found chained from the\nCTGPL.\n\n                      Testing AMS Under TSO\n\nAll TSO requests begin at module IDCAM01, which resides in CMDLIB\nand has an alias for each AMS command.  Most levels of AMS also\nhave module IDCAM02, which is identical to IDCAM01, and is used to\navoid the limit of 16 aliases per load module.  (Note, PARM and\nCNVTCAT are not available under TSO).  IDCAM01 passes control via\nLINK to the AMS mainline IDCSATO (an alias of IDCAMS).\n\nBy running AMS under test, and setting a breakpoint at the entry to\nIDCSACA, we can examine (and modify!) the parameters to study them\nand their effect.\n\nThe following MVS/XATM CLIST has been useful to the author (it\nrequires slight modification for use with MVS/370):\n\n  10 PROC 1 VERB\n  20 WRITE ENTER OPERANDS FOR &VERB COMMAND\n  30 READ\n  40 TEST 'SYS1.CMDLIB(&VERB)' CP\n  50 &VERB &SYSDVAL\n  60 AT IDCSATO.IDCSACA +\n  70 (EQ CTGPL 1R%+4%% L(28);L CTGPL;EQ CTGFV CTGPL+4% L(100);L\n     CTGFV; +\n  80 EQ AFTER 14R%;AT AFTER (OFF AFTER)) DEFER\n  90 GO\n\nIn MVS/370, you must find the offset of label IDCSACA in module\nIDCSA02 (with AMBLIST, for example), and change line 60 to AT\nIDCSATO.IDCSA02.+xx, since TEST in 370 mode will not accept an\nexternal symbol which is not a CSECT name.\n\n                  Testing AMS In The Background\n\nTesting in the background is accomplished through the use of AMS\nown built in debugging facility.  AMS provides a generous number of\ndump points within the logic flow.  The most useful one is called\nZZCA, which is located in IDCSACA and is hit before and after each\ncall (ie.  twice per request).  The trap is activated by the AMS\ncommand \" PARM TEST(FULL(ZZCA,n,m)\", where n (default 1) indicates\nwhen dumping is to begin, and m (default 1) indicates how many\ndumps are to be taken.\n\nALTER usually requires a locate, followed by an alter call.  To\ntrace the before and after status of an ALTER, without tracing the\nlocate call, you might use:\n\n        PARM TEST(FULL(ZZCA,3,2))     /* ACTIVATE TRAP */\n        ALTER entity-name STRNO(8)\n        PARM TEST(OFF)                /* DEACTIVATE TRAP */\n\nThe dumps are taken to the AMSDUMP DD statement.  Each dump is\nassigned an ID number, and messages in SYSPRINT relate the dumps to\nthe logic flow.  Each pass through the active trap point will be\ntraced on SYSPRINT, even if no dump is produced.\n\n                     Data Area Descriptions\n\nThe following pages contain descriptions of the major data areas\ndiscussed in this paper.  They are based upon assembler language\nmapping macros which are not generally available.  Some of the\nmappings are available on the optional materials tape for the Data\nFacility Product (DFP), as component AAPVT, however (except for\nthe CTGPL), they are PL/S mappings only.  In order to produce these\nmappings, the PL/S descriptions have been manually translated into\nassembler language.\n\nOffsets are shown in hex, and for equated bit settings, the\nassembled values are shown in hex.\n\n\n--------------------------------\nAuthor's note, September 4, 2004\n--------------------------------\n\nThe original paper distributed through SHARE had mappings of several\ncontrol blocks included at this point.  A small font was used in the\npaper, but the lines are too wide to fit in 80-character lines.  They\nare not included here in order to fit the record size in the CBT file.\n\nThe mappings are included in file 689 in a member named PRINT, which\nis in TSO XMIT format.  To expand on an MVS system, execute the TSO\ncommand:\n\n  RECEIVE INDS(xxxx.FILE689.PDS(PRINT))\n\nand you'll get an FB-133 file which contains the correctly formatted\ndata.\n\nAlternatively, the macros to map these data areas are in file 689.\nYou can just run an assembly to expand them. Member CATMAP in this\ndata set is a source module which can be assembled to do just that.\n\nPeter Sawyer\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT689/FILE689.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT689", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}