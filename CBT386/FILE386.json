{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011909000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 764218, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE386.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 764218, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE386.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\r\\x08'", "DS1TRBAL": "b'tX'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\xc3\\x00\\x02\\x02\\xc4\\x00\\x00\\x00\\x0e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04_\\x00 \\x01\\x17\\x19_\\x01\\x17\\x19_\\x18\\x05\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@'", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-07-14T00:00:00", "modifydate": "2017-07-14T18:05:20", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-495"}, "text": "REGULAR CBT TAPE - VERSION 495    FILE:  386\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT495.FILE386\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 39 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,545 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/14/17    18:05:20    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$$READM": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x99 o\\x00\\x99 o\"4\\x00\\x18\\x00\\x15\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T22:34:00", "lines": 24, "newlines": 21, "modlines": 0, "user": "Z80236G"}, "text": "\n     Salvador Carrasco neither expresses nor implies any warranty\n     as to the fitness of these computer programs for any function.\n     The use of these programs or the results therefrom is entirely\n     at the risk of the user.  Consequently, the user may modify\n     these programs in any way he/she thinks fit.\n\n     These programs are Freeware and may be freely copied.  They\n     may be freely distributed to any other party on condition\n     that no inducement beyond reasonable handling costs is\n     offered or accepted by either side for such distribution.\n\n     I would be interested to hear of comments and/or proposed\n     enhancements.  Please write to the following address:\n\n     I have copy this text, my English is no very good in the rest\n     of the library. I'm sorry.\n\n     EMAIL to the author at:\n\n              Internet:   salvador@redestb.es\n\n     Visit my Web Page at http://www.redestb.es/personal/salvador\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$INDEX": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00&\\x00&\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "WSBGISP"}, "text": "$$$READM  Readme First\n$$INDEX   You are reading this member now\n$CHANGES  Changes History\n\n@EQUS     Equates Macro\n@EQISPF   Equates ISPF\n@ISPFVD   ISPF multi vdefine macro\n\nIGX00200  Ext-Svc authorization\n\nIRXF@DAI  Rexx function - Get Dasd information\nIRXF@CSI  Rexx function - Catalog Search Interface\nIRXF@DLY  Rexx function - Delay\nIRXF@EDM  Rexx function - Edit and mask\nIRXF@ENQ  Rexx function - Enq/Deq\nIRXF@MAT  Rexx function - Match source/pattern\nIRXF@MOD  Rexx function - QEdit capabilities\nIRXF@MON  Rexx function - Progress Barr\nIRXF@SRT  Rexx function - Calling Sort from Rexx\nIRXF@U34  Rexx function - Read tape units UCBs\nIRXF@VSK  Rexx function - Vsam KSDS rexx interface\nIRXF@WTO  Rexx function - WTO/WTOR\nIRXF@DOM  Rexx function - Delete Operator Message\nIRXF@CA1  Rexx function - Get CA1 volume information\nIRXF@VST  Rexx function - Verify Started Task\nIRXFLOC   Rexx Package\nIRXFLOC$  Rexx Package - Documentation\nIRXFLOCJ  Rexx Package - Compile job\nIRXFMONI  Progress Barr program.\nIRXFMONP  ISPF Panel for Progress Barr.\n\nISFPSAM$  Spool Access Method - Documentation\nISFPSAMC  Spool Access Method - Interface Rexx - S.A.M\nISFPSAMP  Spool Access Method - Parm list macro\nISFPSAMR  Spool Access Method - Main Module\nISFPSAM1  Spool Access Method - Rexx Example\n\nUTILMATC  Utilities - Match Source/Pattern\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$CHANGES": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00\\x16\\x00\\x16\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 22, "newlines": 22, "modlines": 0, "user": "WSBGISP"}, "text": "CBT     25 July 1999\n\n  SAM      R101 New - Spool Access Method\n  IGX00200 R100 New - Ext-Svc authorization\n  IRXFLOC  R100 New - Rexx Package\n  UTILMATC R100 New - Utility - Match source/pattern\n\nCBT      6 Febr 2000\n\n  IRXF@CSI R100 New - Catalog Search Interface\n  IRXF@DAI R100 New - Dasd Information\n  IRXFLOC* R101 Upd - Rexx Package\n\nCBT     31 Octo 2000\n\n  IRXF@CA1 R100 New - CA1 Volume Information\n  IRXF@CMD R100 New - Dirty System Console Command execution\n  IRXF@DOM R100 New - Delete Operator Message\n  IRXF@MOD R100 New - Modify/Stop (QEdit) capabilities\n  IRXF@VST R100 New - Verify Started Task\n  IRXF@WTO R101 Upd - Write to Operator\n  IRXFLOC* R102 Upd - Rexx Package\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@EQISPF": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x06\\x15\\x00#\\x00#\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T06:15:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "Z80236G"}, "text": "         MACRO\n&LABEL   @EQISPF\n***********************\n* ISPF COLORS EQUATES *\n***********************\nOUTBLUE  EQU   X'01'\nOUTWHITE EQU   X'02'\nOUTRED   EQU   X'03'\nOUTGREEN EQU   X'04'\nOUTTURQ  EQU   X'05'\nOUTYELLO EQU   X'06'\nOUTPINK  EQU   X'07'\nINBLUE   EQU   X'41'\nINWHITE  EQU   X'42'\nINRED    EQU   X'43'\nINGREEN  EQU   X'44'\nINTURQ   EQU   X'45'\nINYELLO  EQU   X'46'\nINPINK   EQU   X'47'\nISPDISP  DC    CL8'DISPLAY'\nISPREFR  DC    CL8'REFRESH'\nISPCNTL  DC    CL8'CONTROL'\nISPSELC  DC    CL8'SELECT'\nISPLOCK  DC    CL8'LOCK'\nISPVDEF  DC    CL8'VDEFINE'\nISPADDP  DC    CL8'ADDPOP'\nISPREMP  DC    CL8'REMPOP'\nISPCHAR  DC    CL8'CHAR'\nISPFIX   DC    CL8'FIXED'\nISPVGET  DC    CL8'VGET'\nISPVPUT  DC    CL8'VPUT'\nISPASIS  DC    CL8'ASIS'\nISPPROF  DC    CL8'PROFILE'\nISPBLAN  DC    CL8' '\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@EQUS": {"ttr": 526, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x05Y\\x003\\x003\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T05:59:00", "lines": 51, "newlines": 51, "modlines": 0, "user": "Z80236G"}, "text": "         MACRO\n&LABEL   @EQUS\n*********************\n* CONSTANT  EQUATES *\n*********************\nK0       EQU    0\nK1       EQU    1\nK2       EQU    2\nK3       EQU    3\nK4       EQU    4\nK5       EQU    5\nK6       EQU    6\nK7       EQU    7\nK8       EQU    8\nK9       EQU    9\nKA       EQU   10\nKB       EQU   11\nKC       EQU   12\nKD       EQU   13\nKE       EQU   14\nKF       EQU   15\n********************\n* REGISTER EQUATES *\n********************\nR0       EQU   00\nR1       EQU   01\nR2       EQU   02\nR3       EQU   03\nR4       EQU   04\nR5       EQU   05\nR6       EQU   06\nR7       EQU   07\nR8       EQU   08\nR9       EQU   09\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE386": {"ttr": 528, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04_\\x00X\\x01\\x17\\x19_\\x01\\x17\\x19_\\x18\\x04\\x00X\\x00X\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf5@@@'", "ispf": {"version": "04.95", "flags": 0, "createdate": "2017-07-14T00:00:00", "modifydate": "2017-07-14T18:04:58", "lines": 88, "newlines": 88, "modlines": 0, "user": "CBT-495"}, "text": "//***FILE 386 is from Salvador Carrasco and contains a collection   *   FILE 386\n//*           of REXX execs and other programs.                     *   FILE 386\n//*                                                                 *   FILE 386\n//*           Updated October 2000                                  *   FILE 386\n//*                                                                 *   FILE 386\n//*   Salvador Carrasco neither expresses nor implies any           *   FILE 386\n//*   warranty as to the fitness of these computer programs for     *   FILE 386\n//*   any function.  The use of these programs or the results       *   FILE 386\n//*   therefrom is entirely at the risk of the user.                *   FILE 386\n//*   Consequently, the user may modify these programs in any       *   FILE 386\n//*   way he/she thinks fit.                                        *   FILE 386\n//*                                                                 *   FILE 386\n//*   These programs are Freeware and may be freely copied.  They   *   FILE 386\n//*   may be freely distributed to any other party on condition     *   FILE 386\n//*   that no inducement beyond reasonable handling costs is        *   FILE 386\n//*   offered or accepted by either side for such distribution.     *   FILE 386\n//*                                                                 *   FILE 386\n//*   I would be interested to hear of comments and/or proposed     *   FILE 386\n//*   enhancements.  Please write to the following address:         *   FILE 386\n//*                                                                 *   FILE 386\n//*  EMAIL to the author at:                                        *   FILE 386\n//*                                                                 *   FILE 386\n//*           Internet:   salvador@redestb.es                       *   FILE 386\n//*                                                                 *   FILE 386\n//*  Visit my Web Page at http://www.redestb.es/personal/salvador   *   FILE 386\n//*                                                                 *   FILE 386\n//*      $$$READM  Readme Fisrt                                     *   FILE 386\n//*      $$INDEX   You are reading this member now                  *   FILE 386\n//*      $CHANGES  Changes History                                  *   FILE 386\n//*                                                                 *   FILE 386\n//*      @EQUS     Equates Macro                                    *   FILE 386\n//*      @EQISPF   Equates ISPF                                     *   FILE 386\n//*      @ISPFVD   ISPF multi vdefine macro                         *   FILE 386\n//*                                                                 *   FILE 386\n//*      IGX00200  Ext-Svc authorization                            *   FILE 386\n//*                                                                 *   FILE 386\n//*      IRXF@DLY  Rexx function - Delay                            *   FILE 386\n//*      IRXF@EDM  Rexx function - Edit and mask                    *   FILE 386\n//*      IRXF@ENQ  Rexx function - Enq/Deq                          *   FILE 386\n//*      IRXF@MAT  Rexx function - Match source/pattern             *   FILE 386\n//*      IRXF@MON  Rexx function - Progress Barr                    *   FILE 386\n//*      IRXF@SRT  Rexx function - Calling Sort from Rexx           *   FILE 386\n//*      IRXF@U34  Rexx function - Read tape units UCBs             *   FILE 386\n//*      IRXF@VSK  Rexx function - Vsam KSDS rexx interface         *   FILE 386\n//*      IRXF@WTO  Rexx function - WTOR                             *   FILE 386\n//*      IRXFLOC   Rexx Package                                     *   FILE 386\n//*      IRXFLOC$  Rexx Package - Documentation                     *   FILE 386\n//*      IRXFLOCJ  Rexx Package - Compile job                       *   FILE 386\n//*      IRXFMAT   Rexx Package                                     *   FILE 386\n//*      IRXFMONI  Progress Barr program.                           *   FILE 386\n//*      IRXFMONP  ISPF Panel for Progress Barr.                    *   FILE 386\n//*                                                                 *   FILE 386\n//*      ISFPSAM$  Spool Access Method - Documentation              *   FILE 386\n//*      ISFPSAMC  Spool Access Method - Interface Rexx - S.A.M     *   FILE 386\n//*      ISFPSAMP  Spool Access Method - Parm list macro            *   FILE 386\n//*      ISFPSAMR  Spool Access Method - Main Module                *   FILE 386\n//*      ISFPSAM1  Spool Access Method - Rexx Example               *   FILE 386\n//*                                                                 *   FILE 386\n//*      UTILMATC  Utilities - Match Source/Pattern                 *   FILE 386\n//*                                                                 *   FILE 386\n//*  - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  *   FILE 386\n//*                                                                 *   FILE 386\n//*  Updates:                                                       *   FILE 386\n//*                                                                 *   FILE 386\n//*      CBT     25 July 1999                                       *   FILE 386\n//*                                                                 *   FILE 386\n//*        SAM      R101 New - Spool Access Method                  *   FILE 386\n//*        IGX00200 R100 New - Ext-Svc authorization                *   FILE 386\n//*        IRXFLOC  R100 New - Rexx Package                         *   FILE 386\n//*        UTILMATC R100 New - Utility - Match source/pattern       *   FILE 386\n//*                                                                 *   FILE 386\n//*      CBT      6 Febr 2000                                       *   FILE 386\n//*                                                                 *   FILE 386\n//*        IRXF@CSI R100 New - Catalog Search Interface             *   FILE 386\n//*        IRXF@DAI R100 New - Dasd Information                     *   FILE 386\n//*        IRXFLOC* R101 Upd - Rexx Package                         *   FILE 386\n//*                                                                 *   FILE 386\n//*      CBT     31 Octo 2000                                       *   FILE 386\n//*                                                                 *   FILE 386\n//*        IRXF@CA1 R100 New - CA1 Volume Information               *   FILE 386\n//*        IRXF@CMD R100 New - Dirty System Console Command         *   FILE 386\n//*                            execution                            *   FILE 386\n//*        IRXF@DOM R100 New - Delete Operator Message              *   FILE 386\n//*        IRXF@MOD R100 New - Modify/Stop (QEdit) capabilities     *   FILE 386\n//*        IRXF@VST R100 New - Verify Started Task                  *   FILE 386\n//*        IRXF@WTO R101 Upd - Write to Operator                    *   FILE 386\n//*        IRXFLOC* R102 Upd - Rexx Package                         *   FILE 386\n//*                                                                 *   FILE 386\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@ISPFVD": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x06\\x18\\x004\\x004\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T06:18:00", "lines": 52, "newlines": 52, "modlines": 0, "user": "Z80236G"}, "text": "*%/*\n         MACRO\n&NAME    @ISPFVD &VARS=\n*----------------------------------------------------------------------\n* MACRO @ISPFVD EXECUTE FORM\n*----------------------------------------------------------------------\n         LCLA  &NDATA\n         LCLA  &WORK\n         LCLC  &NAM\n&NAM     SETC  '&NAME'\n         AIF   ('&NAM' NE '').BEG\n&NAM     SETC  '@ISPFVD'\n.BEG     B     &NAM._END\n&NDATA   SETA  N'&VARS\n&NAM._ILOPTS   DC CL8'LIST'\n* NAMES\n&NAM._ILNAME DC C'('\n&CNT     SETA  1\n.LOOP    AIF   (&CNT GT &NDATA).GE\n         DC    C'&VARS(&CNT,1) '\n&CNT     SETA  &CNT+1\n         AGO   .LOOP\n.GE      DC    C')'\n* TYPES\n&NAM._ILTYPE DS 0C\n&CNT     SETA  1\n.LOOP2   AIF   (&CNT GT &NDATA).GE2\n         AIF   ('&VARS(&CNT,2)' NE 'C').FIX\n         DC    CL8'CHAR'\n         AGO   .NEXT\n.FIX     AIF   ('&VARS(&CNT,2)' NE 'F').ERR1\n         DC    CL8'FIXED'\n.NEXT    ANOP\n&CNT     SETA  &CNT+1\n         AGO   .LOOP2\n.GE2     ANOP\n* LENGTHS\n&NAM._ILLNG  DS 0F\n&CNT     SETA  1\n.LOOP3   AIF   (&CNT GT &NDATA).GE3\n         DC    AL4(L'&VARS(&CNT,1))\n&CNT     SETA  &CNT+1\n         AGO   .LOOP3\n.GE3     ANOP\n* END\n.FIN     ANOP\n&NAM._END DS 0F\n         AGO   .END\n* MACROS ERRORS\n.ERR1    MNOTE 12,'INVALID TYPE OPERAND'\n         MEXIT\n.END     MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMALL": {"ttr": 533, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00}\\x00}\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 125, "newlines": 125, "modlines": 0, "user": "WSBGISP"}, "text": "//ROBZ1ASM JOB (0000),'ASM REXX',CLASS=A,MSGCLASS=X,REGION=0M,\n//         NOTIFY=&SYSUID\n//*--------------------------------------------------------------------*\n//* ACCEPTABLE RETURN CODES:                                           *\n//*                                                                    *\n//* ASM  FOR UTILMATC CC=12 - NOT USED BY INTERCHANGE                  *\n//* ASM  FOR IRXF@CAI CC=8  - NOT USED BY INTERCHANGE                  *\n//* ASM  FOR IRXF@CSI CC=12 - NOT USED BY INTERCHANGE                  *\n//* ASM  FOR IRXF@DAI CC=8  - NOT USED BY INTERCHANGE                  *\n//* LINK FOR IRXF@MON CC=8  - NOT USED BY INTERCHANGE                  *\n//*                                                                    *\n//*--------------------------------------------------------------------*\n//ASMLINK  PROC SOURCE='ROBZ1.CBT386A.SOURCE',LINKLIB='SYS1.LINKLIB',\n//         MEM=\n//ASM      EXEC PGM=ASMA90,REGION=2048K,  COND=(8,LE),\n//         PARM=(TERM,NODECK,OBJECT)\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=&SOURCE(&MEM),DISP=SHR\n//SYSLIB   DD DSN=&SOURCE,DISP=SHR\n//         DD DSN=SYS1.MACLIB,DISP=SHR\n//         DD DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSLIN   DD DSN=&&TEMP1(&MEM),DISP=(NEW,PASS),SPACE=(CYL,(1,1,1))\n//*---------------------------------------------------------------------\n//LINK     EXEC PGM=IEWL,REGION=256K,   COND=(12,LE),\n//         PARM=('LET,LIST,MAP,XREF,REUS')\n//SYSPRINT DD SYSOUT=X\n//SYSLIB   DD DSN=&LINKLIB,DISP=SHR\n//SYSLMOD  DD DSN=&LINKLIB(&MEM),DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,2)),DISP=(,DELETE)\n//         PEND\n//UTILMATC EXEC ASMLINK,MEM=UTILMATC\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(UTILMATC)\n   NAME UTILMATC(R)\n//IRXF@CA1 EXEC ASMLINK,MEM=IRXF@CA1\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@CA1)\n   NAME IRXF@CA1(R)\n//IRXF@CMD EXEC ASMLINK,MEM=IRXF@CMD\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@CMD)\n   NAME IRXF@CMD(R)\n//IRXF@CSI EXEC ASMLINK,MEM=IRXF@CSI\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@CSI)\n   NAME IRXF@CSI(R)\n//IRXF@DAI EXEC ASMLINK,MEM=IRXF@DAI\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@DAI)\n   NAME IRXF@DAI(R)\n//IRXF@DLY EXEC ASMLINK,MEM=IRXF@DLY\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@DLY)\n   NAME IRXF@DLY(R)\n//IRXF@DOM EXEC ASMLINK,MEM=IRXF@DOM\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@DOM)\n   NAME IRXF@DOM(R)\n//IRXF@EDM EXEC ASMLINK,MEM=IRXF@EDM\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@EDM)\n   NAME IRXF@EDM(R)\n//IRXF@ENQ EXEC ASMLINK,MEM=IRXF@ENQ\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@ENQ)\n   NAME IRXF@ENQ(R)\n//IRXF@MAT EXEC ASMLINK,MEM=IRXF@MAT\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@MAT)\n   NAME IRXF@MAT(R)\n//IRXF@MOD EXEC ASMLINK,MEM=IRXF@MOD\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@MOD)\n   NAME IRXF@MOD(R)\n//IRXF@MON EXEC ASMLINK,MEM=IRXF@MON\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@MON)\n   NAME IRXF@MON(R)\n//IRXF@SRT EXEC ASMLINK,MEM=IRXF@SRT\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@SRT)\n   NAME IRXF@SRT(R)\n//IRXF@U34 EXEC ASMLINK,MEM=IRXF@U34\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@U34)\n   NAME IRXF@U34(R)\n//IRXF@VSK EXEC ASMLINK,MEM=IRXF@VSK\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@VSK)\n   NAME IRXF@VSK(R)\n//IRXF@VST EXEC ASMLINK,MEM=IRXF@VST\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@VST)\n   NAME IRXF@VST(R)\n//IRXF@WTO EXEC ASMLINK,MEM=IRXF@WTO\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IRXF@WTO)\n   NAME IRXF@WTO(R)\n//IGX00200 EXEC ASMLINK,MEM=IGX00200,LINKLIB='SYS1.LPALIB'\n//LINK.SYSLIN DD DSN=&&TEMP1(&MEM),DISP=(OLD,DELETE)\n//         DD *\n   INCLUDE SYSLIB(IGX00200)\n   NAME IGX00200(R)\n//*---------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMFLOC": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00=\\x00=\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "WSBGISP"}, "text": "//ROBZ1ASM JOB (0000),'ASM FLOC',CLASS=A,MSGCLASS=X,REGION=0M,\n//         NOTIFY=&SYSUID\n//*--------------------------------------------------------------------*\n//* ACCEPTABLE RETURN CODES:                                           *\n//*                                                                    *\n//* LINK FOR IRXFLOC  CC=8                                             *\n//*                                                                    *\n//*--------------------------------------------------------------------*\n//IRXFLOC EXEC PGM=ASMA90,REGION=2048K,COND=(8,LE),\n//            PARM=(TERM,NODECK,OBJECT)\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=ROBZ1.CBT386A.SOURCE(IRXFLOC),DISP=SHR\n//SYSLIB   DD DSN=ROBZ1.CBT386A.SOURCE,DISP=SHR\n//         DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSLIN   DD DSN=&&TEMP1(IRXFLOC),DISP=(NEW,PASS),SPACE=(CYL,(1,1,1))\n//*---------------------------------------------------------------------\n//LINK     EXEC PGM=IEWL,REGION=256K,COND=(12,LE),\n//            PARM=('LET,LIST,MAP,XREF,REUS')\n//SYSPRINT DD SYSOUT=X\n//SYSLIB   DD DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLMOD  DD DSN=SYS1.LINKLIB(IRXFLOC),DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,2)),DISP=NEW\n//SYSLIN   DD DSN=&&TEMP1(IRXFLOC),DISP=(SHR,PASS)\n//         DD *\n   INCLUDE SYSLIB(IRXF@EDM)\n   ENTRY IRXF@EDM\n   INCLUDE SYSLIB(IRXF@ENQ)\n   ENTRY IRXF@ENQ\n   INCLUDE SYSLIB(IRXF@MAT)\n   ENTRY IRXF@MAT\n   INCLUDE SYSLIB(IRXF@DLY)\n   ENTRY IRXF@DLY\n   INCLUDE SYSLIB(IRXF@WTO)\n   ENTRY IRXF@WTO\n   INCLUDE SYSLIB(IRXF@SRT)\n   ENTRY IRXF@SRT\n   INCLUDE SYSLIB(IRXF@U34)\n   ENTRY IRXF@U34\n   INCLUDE SYSLIB(IRXF@VSK)\n   ENTRY IRXF@VSK\n   INCLUDE SYSLIB(IRXF@MON)\n   ENTRY IRXF@MON\n   INCLUDE SYSLIB(IRXF@DAI)\n   ENTRY IRXF@DAI\n   INCLUDE SYSLIB(IRXF@DOM)\n   ENTRY IRXF@DOM\n   INCLUDE SYSLIB(IRXF@CA1)\n   ENTRY IRXF@CA1\n   INCLUDE SYSLIB(IRXF@VST)\n   ENTRY IRXF@VST\n   INCLUDE SYSLIB(IRXF@CMD)\n   ENTRY IRXF@CMD\n   INCLUDE SYSLIB(IRXF@MOD)\n   ENTRY IRXF@MOD\n   ENTRY IRXFLOC\n   NAME IRXFLOC(R)\n//*---------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IGX00200": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x03I\\x00&\\x00&\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T03:49:00", "lines": 38, "newlines": 38, "modlines": 0, "user": "Z80236G"}, "text": "         TITLE 'EXT-SCV AUTHORIZATION'\n*-----------------------------------------------------------------*\n*                                                                 *\n* THIS EXT-SVC CHANGE CALLER TO SUPERVISOR/PROBLEM STATE.         *\n* PARMS:                                                          *\n*                                                                 *\n*   R0 = 1 SET SUP                                                *\n*   R0 = 2 SET PROB                                               *\n*                                                                 *\n*               * *  W A R N I N G  * *                           *\n*                                                                 *\n* THIS SVC DOES NOT MAKE ANY VERIFICATION, BE CAREFULL, THIS      *\n* SVC, IF INSTALLED \"AS IS\", CAN BE A HOLE IN YOUR SYSTEM         *\n* SECURITY.                                                       *\n*                                                                 *\n*-----------------------------------------------------------------*\nIGX00200 CSECT\nIGX00200 AMODE 31\nIGX00200 RMODE ANY\n         USING IGX00200,6                        BASE ADDRESS\n         LA    15,16                             RC = INVALID PARM\n         C     0,=F'1'                           R0 < 1 ?\n         BLR   14                                RETURN PARM ERROR\n         C     0,=F'2'                           R0 > 2 ?\n         BHR   14                                RETURN PARM ERROR\n         L     4,TCBRBP-TCB(4)                   LOAD RB POINTER\n         ICM   4,B'0111',RBLINKB-RBBASIC(4)      LOAD CALLING RB\n         LA    2,RBOPSW+1-RBBASIC(,4)            LOAD ADD. OLDPSW BYTE2\n         SR    15,15                             RC = OK\n         BCT   0,SETPROB                         SELECT FUNCTION\nSETSUP   NI    0(2),X'FE'                        1 - SET SUPERVISOR\n         BR    14                                RETURN OK\nSETPROB  OI    0(2),X'01'                        2 - SET PROBLEM\n         BR    14                                RETURN OK\n         LTORG\n         IKJTCB                                  TCB MAPPING\n         IHARB                                   RB MAPPING\n         END   IGX00200\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IRXF@CA1": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00V\\x00V\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 86, "newlines": 86, "modlines": 0, "user": "WSBGISP"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@CA1 CSECT\nIRXF@CA1 AMODE 31\nIRXF@CA1 RMODE ANY\n         @EQUS\nENTRY    TMMLINK (R12,R11)\n         LR    R2,R1\n         USING IRXF@CA1,R12\n         ST    R0,STKENV\n         GETMAIN RU,LV=340,LOC=(BELOW,ANY)\n         LR    R10,R01\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'6'\n         BNE   FINNOK\n         MVC   MYVOLSER(6),0(R5)\n************************\n* MAIN                 *\n************************\n         TMMOPTMC\n         TMMGETVL MYVOLSER,(R10),NOTFOUND,ENQ=NO\n         MVC   STKFUNC,KQUEUE\n         LA    R1,340\n         ST    R1,STKLEN\n         LR    R1,R10\n         ST    R1,STKDAT\n         LA    R1,IRXSTKP\n         LINK  EP=IRXSTK\n         LTR   R15,15\n         BNZ   FINNOK\n         LA    R8,1\n         ST    R8,EVALBLOCK_EVLEN\n         MVI   EVALBLOCK_EVDATA,C'1'\n         B     EXIT\nNOTFOUND LA    R8,1\n         ST    R8,EVALBLOCK_EVLEN\n         MVI   EVALBLOCK_EVDATA,C'0'\n************************\n* EXIT                 *\n************************\nEXIT     FREEMAIN RU,A=((R10)),LV=340\n         SR    R15,R15\n         L     R13,SAVEAREA+4\n         RETURN (14,12),,RC=0\nFINNOK   FREEMAIN RU,A=((R10)),LV=340\n         L     R13,SAVEAREA+4\n         RETURN (14,12),,RC=16\nABEND001 ABEND 001\nKQUEUE   DC    CL8'QUEUE   '\nSTKFUNC  DS    CL8\nSTKDAT   DS    F\nSTKLEN   DS    F\nSTKRC    DS    F\nSTKENV   DS    F\nSTKRCE   DS    F\nIRXSTKP  DS    0F\nP1       DC    A(STKFUNC)\nP2       DC    A(STKDAT)\nP3       DC    A(STKLEN)\nP4       DC    A(STKRC)\nP5       DC    A(STKENV)\nP6       DC    A(STKRCE+X'80000000')\nMYVOLSER DS    CL6\n         TMMLINK PATCH\n*************\n* MAPAS     *\n*************\nD        DSECT\nTMCREC   TMMTMREC DSECT=YES\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@CA1\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@CMD": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00=\\x00=\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "WSBGISP"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@CMD CSECT\nIRXF@CMD AMODE 31\nIRXF@CMD RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R2,R1\n         USING IRXF@CMD,R12\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R6,R6\n         BZ    FINNOK\n         C     R6,=F'126'\n         BNH   MOVTWK\n         LA    R6,126\nMOVTWK   A     R6,=F'4'\n         STH   R6,CMDTEXT\n         BCTR  R6,R0\n         EX    R6,MOVWT\n         LA    R0,1\n         LA    R15,200\n         SVC   109\n         SPKA  X'00'\n         SR    R0,R0\n         LA    R1,CMDTEXT\n         SVC   34\n         MODESET KEY=NZERO,MODE=PROB\n         MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R9,1\n         ST    R9,EVALBLOCK_EVLEN\n************************\n* EXIT                 *\n************************\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVWT    MVC   CMDTEXT+4(0),0(R5)\nCMDTEXT  DS    CL130\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@CMD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@CSI": {"ttr": 778, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x02\\t\\x02\\t\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 521, "newlines": 521, "modlines": 0, "user": "WSBGISP"}, "text": "IRXF@CSI TITLE 'REXX - CATALOG SEARCH INTERFACE'\nIRXF@CSI CSECT\nIRXF@CSI AMODE 31\nIRXF@CSI RMODE ANY\n*---------------------------------\n* MACRO FOR CALLING PUTVREX\n*---------------------------------\n         MACRO\n&NAME    $PUTV &REXXN,&ASMA,&ASML\n&LREXXN  SETA  K'&REXXN-2\n         MVC   VREXX_N(&LREXXN),=C&REXXN\n         MVC   VREXX_NL,=F'&LREXXN'\n         AIF   ('&ASMA'(1,1) NE '(').E1\n         ST    &ASMA,VREXX_B\n         AGO   .E2\n.E1      LA    R1,&ASMA\n         ST    R1,VREXX_B\n.E2      AIF   ('&ASML'(1,1) NE '(').E3\n         ST    &ASML,VREXX_BL\n         AGO   .E4\n.E3      LA    R1,&ASML\n         ST    R1,VREXX_BL\n.E4      BAL   R14,PUTVREX\n         MEND\n*---------------------------------\n* HOUSEKEEPING\n* R2  - EFPL\n* R3  - ARG TABLE\n* R4  - EVALBLOCK\n* R8  - IRXEXCOM\n* R9  - ENVBLOCK\n* R12 - BASE\n* R13 - SAVER AREA + WORKAREA\n* R14 - MACROS + LINK\n* R15 - MACROS + LINK\n*---------------------------------\n         @EQUS\n         SAVE  (14,12),,*\n         LR    R12,R15\n         LR    R9,R0\n         LR    R2,R1\n         USING IRXF@CSI,R12\n         GETMAIN RU,LV=LDATA,LOC=ANY\n         LR    R15,R13\n         LR    R13,R1\n         ST    R15,4(R13)\n         ST    R13,8(R15)\n         SR    R15,R15\n         USING DATA,R13\n*---------------------------------\n* MAIN\n*---------------------------------\n         USING ENVBLOCK,R9\n         L     R8,ENVBLOCK_IRXEXTE\n         USING IRXEXTE,R8\n         L     R8,IRXEXCOM\n         DROP  R8\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n         MVI   CONTINUE,C'1'\n         BAL   R14,GETARGS\n         BAL   R14,INITVAR\n         BAL   R14,CALLCSI\n*---------------------------------\n* RETURN\n*---------------------------------\nRETOK    MVC   EVALBLOCK_EVDATA(1),CONTINUE          OK DONE\n         LA    R1,1\n         ST    R1,EVALBLOCK_EVLEN\n         SLR   R11,R11\n         B     RET\nRETBAD   LA    R11,16                                BAD CALL\nRET      LR    R1,R13\n         L     R13,4(13)\n         FREEMAIN RU,LV=LDATA,A=(1)\n         LR    R15,R11\n         RETURN (14,12),RC=(15)\n*---------------------------------\n* GETARGS\n*---------------------------------\nGETARGS  EQU   *\n         ST    R14,GETARGSS\n         LA    R5,SELCRITA\n         USING CSIFIELD,R5\n         MVC   CSIFILTK,=CL44' '\n         MVC   CSICATNM,=CL44' '\n         MVC   CSIRESNM,=CL44' '\n         MVC   CSIDTYPD(16),=CL16' '\n         MVC   CSIOPTS,=C'Y   '\n         MVC   CSINUMEN,=H'0'\n* GET ARG 1\n         L     R6,ARGTABLE_ARGSTRING_PTR\n         LTR   R6,R6\n         BM    RETBAD                           NO FILTER SPEC.\n         L     R7,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R7,R7\n         BZ    RETBAD                           ZERO LENGTH FILTER\n         C     R7,=F'44'                        > 44 ?\n         BNH   COPFILT                          NO, COPY\n         LA    R7,44                            YES, TRIM IT\nCOPFILT  BCTR  R7,R00\n         EX    R7,COPFILTI                      COPY FILTER\n         B     GETARG2\nCOPFILTI MVC   CSIFILTK(0),0(R6)\n* GET ARG 2\nGETARG2  LA    R3,ARGTABLE_NEXT\n         L     R6,ARGTABLE_ARGSTRING_PTR\n         LTR   R6,R6                            NO MORE ARGS ?\n         BM    GETARGSR                         USE DEFAULTS\n         L     R7,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R7,R7                            ZERO LENGTH ?\n         BZ    GETARG3                          USE DEFAULT, GO NEXT\n         C     R7,=F'44'                        > 44 ?\n         BNH   COPCATN                          NO, COPY\n         LA    R7,44                            YES, TRIM IT\nCOPCATN  BCTR  R7,R00\n         EX    R7,COPCATNI                      COPY CATNAME\n         B     GETARG3\nCOPCATNI MVC   CSICATNM(0),0(R6)\n* GET ARG 3\nGETARG3  LA    R3,ARGTABLE_NEXT\n         L     R6,ARGTABLE_ARGSTRING_PTR\n         LTR   R6,R6                            NO MORE ARGS ?\n         BM    GETARGSR                         USE DEFAULTS\n         L     R7,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R7,R7                            ZERO LENGTH ?\n         BZ    GETARG4                          USE DEFAULT, GO NEXT\n         C     R7,=F'16'                        > 16 ?\n         BNH   COPTYPS                          NO, COPY\n         LA    R7,16                            YES, TRIM IT\nCOPTYPS  BCTR  R7,R00\n         EX    R7,COPTYPSI                      COPY TYPES\n         B     GETARG4\nCOPTYPSI MVC   CSIDTYPD(0),0(R6)\n* GET ARG 4\nGETARG4  LA    R3,ARGTABLE_NEXT\n         L     R6,ARGTABLE_ARGSTRING_PTR\n         LTR   R6,R6                            NO MORE ARGS ?\n         BM    GETARGSR                         USE DEFAULTS\n         L     R7,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R7,R7                            ZERO LENGTH ?\n         BZ    GETARG5                          USE DEFAULT, GO NEXT\n         C     R7,=F'4'                         > 16 ?\n         BNH   COPOPTS                          NO, COPY\n         LA    R7,4                             YES, TRIM IT\nCOPOPTS  BCTR  R7,R00\n         EX    R7,COPOPTSI                      COPY OPTIONS\n         B     GETARG5\nCOPOPTSI MVC   CSIOPTS(0),0(R6)\n* GET ARG 5\nGETARG5  LA    R3,ARGTABLE_NEXT\n         L     R6,ARGTABLE_ARGSTRING_PTR\n         LTR   R6,R6                            NO MORE ARGS ?\n         BM    GETARGSR                         USE DEFAULTS\n         L     R7,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R7,R7                            ZERO LENGTH ?\n         BZ    GETARGSR                         USE DEFAULT, GO NEXT\n         LR    R1,R7                            USE TOTAL LENGTH\n         LR    R15,R7\n         LA    R0,CSIENTS\n         LR    R14,R6\n         MVCL  R0,R14                           COPY FIELD NAMES\n         SRL   R7,3                             DIVIDE BY 8\n         STH   R7,CSINUMEN                      SAVE ENTRIES NUMBER\nGETARGSR L     R14,GETARGSS\n         BR    R14\n         DROP  R3,R5\n*---------------------------------\n* PUTVREX    *\n*---------------------------------\n* R2 - VAR_A *\nPUTVREX  EQU   *\n         ST    R14,PUTVREXS\n         LA    R1,SHV1\n         USING SHVBLOCK,R1\n* OPT\n         MVI   SHVCODE,SHVSTORE\n         MVC   SHVNEXT,=F'0'\n         MVC   SHVUSER,=F'0'\n         MVC   SHVRET,=F'0'\n* VAR\n         LA    R15,VREXX_N\n         ST    R15,SHVNAMA\n         MVC   SHVNAML,VREXX_NL\n         L     R15,VREXX_B\n         ST    R15,SHVVALA\n         MVC   SHVVALL,VREXX_BL\n* CALL IRXEXCOM\n         ST    R1,CP4\n         DROP  R1\n         LA    R1,VP1\n         ST    R1,CP1\n         LA    R1,VP2Y3\n         ST    R1,CP2\n         ST    R1,CP3\n         OI    CP4,X'80'\n         LA    R1,CP1\n         LR    R0,R9\n         LR    R15,R8\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    SETREXR\n         LR    R6,R15\n         ABEND 001,DUMP\nSETREXR  L     R14,PUTVREXS\n         BR    R14\n*---------------------------------\n* CALLCSI\n*---------------------------------\nCALLCSI  EQU   *\n         ST    R14,CALLCSIS\n         GETMAIN RU,LV=BUFFCSI,LOC=ANY\n         LR    R6,R1\n         L     R1,=AL4(BUFFCSI)\n         ST    R1,0(R6)\n         LA    R1,REASONA\n         ST    R1,W1\n         LA    R1,SELCRITA\n         ST    R1,W2\n         LR    R1,R6\n         ST    R1,W3\n         OI    W3,X'80'\nRESUME   LA    R1,W1\n         LINK  EP=IGGCSI00\n         C     R15,=F'8'\n         BNL   CSIERR\n         BAL   R14,EXTDATA\n         LA    R1,SELCRITA\n         USING CSIFIELD,R1\n         CLI   CSIRESUM,C'Y'\n         BE    RESUME\n         DROP  R1\nCSIEND   BAL   R14,WRTOTS\n         LR    R1,R6\n         FREEMAIN RU,LV=BUFFCSI,A=(1)\n         L     R14,CALLCSIS\n         BR    R14\nCSIERR   MVI   CONTINUE,C'0'\n         BAL   R14,DEBUG\n         B     CSIEND\n*---------------------------------\n* EXTDATA\n*---------------------------------\nEXTDATA  EQU   *\n         ST    R14,EXTDATAS\n         L     R1,CSI_CALLS\n         LA    R1,1(R1)\n         ST    R1,CSI_CALLS\n         USING CSIRWORK,R6\n         LR    R7,R6\n         A     R7,CSIUSDLN\n         LA    R3,HEAD_END\n         USING IGGCSI_ENTRY,R3\nNENTRY   CR    R3,R7\n         BNL   EXTDATAR\n         CLI   CSIETYPE,X'F0'\n         BE    CATENTRY\n         LA    R1,=C'ENTRY '\n         MVI   CMPNAMO,CMPNAMO_I+CMPNAMO_C\n         BAL   R14,CMPNAM\n         L     R1,CSI_ENTS\n         LA    R1,1(R1)\n         ST    R1,CSI_ENTS\n         MVI   CMPNAMO,CMPNAMO_T+CMPNAMO_N\n         BAL   R14,CMPNAM\n         LA    R1,CSIENAME\n         ST    R1,VREXX_B\n         MVC   VREXX_BL,=F'44'\n         BAL   R14,PUTVREX\n         LA    R1,=C'FLAG '\n         MVI   CMPNAMO,CMPNAMO_I+CMPNAMO_C\n         BAL   R14,CMPNAM\n         L     R1,CSI_ENTS\n         MVI   CMPNAMO,CMPNAMO_T+CMPNAMO_N\n         BAL   R14,CMPNAM\n         LA    R1,CSIEFLAG\n         ST    R1,VREXX_B\n         MVC   VREXX_BL,=F'1'\n         BAL   R14,PUTVREX\n         TM    CSIEFLAG,CSIEDATA_F\n         BZ    NODATA1\n         BAL   R14,EXTFIEL\n         B     VENTER\nNODATA1  LA    R1,=C'ERROR '\n         MVI   CMPNAMO,CMPNAMO_I+CMPNAMO_C\n         BAL   R14,CMPNAM\n         L     R1,CSI_ENTS\n         MVI   CMPNAMO,CMPNAMO_C+CMPNAMO_N\n         BAL   R14,CMPNAM\n         LA    R1,CSIERETN\n         ST    R1,VREXX_B\n         MVC   VREXX_BL,=F'4'\n         BAL   R14,PUTVREX\nVENTER   TM    CSIEFLAG,CSIENTER\n         BO    NODATA\n         LH    R1,CSITOTLN\n         B     NEXTRYP\nNODATA   LA    R1,4\nNEXTRYP  LA    R3,CSIEDATA\n         AR    R3,R1\n         B     NENTRY\nCATENTRY EQU   *\n         DROP  R3\n         USING IGGCSI_CATALOG,R3\n         LA    R1,=C'CATENTRY '\n         MVI   CMPNAMO,CMPNAMO_I+CMPNAMO_C\n         BAL   R14,CMPNAM\n         L     R1,CSI_CENTS\n         LA    R1,1(R1)\n         ST    R1,CSI_CENTS\n         MVI   CMPNAMO,CMPNAMO_T+CMPNAMO_N\n         BAL   R14,CMPNAM\n         LA    R1,CSICNAME\n         ST    R1,VREXX_B\n         MVC   VREXX_BL,=F'44'\n         BAL   R14,PUTVREX\n         LA    R3,CSICENTE\n         B     NENTRY\nEXTDATAR L     R14,EXTDATAS\n         DROP  R6,R3\n         BR    R14\n*---------------------------------\n* EXTFIEL\n*---------------------------------\nEXTFIEL  EQU   *\n         ST    R14,EXTFIELS\n         STM   R0,R15,SAVER2\n         USING CSIRWORK,R6\n         USING IGGCSI_ENTRY,R3\n         LA    R1,SELCRITA\n         USING CSIFIELD,R1\n         LA    R7,CSIENTS\n         DROP  R1\n         LA    R5,CSILENF1\n         LR    R11,R5\n         LH    R1,CSINUMFD\n         BCTR  R1,R0\n         LR    R10,R1\n         LTR   R10,R10\n         BZ    EXTFIELR\n         SLL   R1,1\n         AR    R11,R1\nNFIELD   EQU   *\n         MVC   WORKF(8),0(R7)\n         MVI   WORKF+8,C' '\n         LA    R1,WORKF\n         MVI   CMPNAMO,CMPNAMO_I+CMPNAMO_C\n         BAL   R14,CMPNAM\n         L     R1,CSI_ENTS\n         MVI   CMPNAMO,CMPNAMO_C+CMPNAMO_N\n         BAL   R14,CMPNAM\n         LH    R1,0(R5)\n         LTR   R1,R1\n         BZ    FNOTF\n         CH    R1,=H'-1'\n         BE    FNOTA\n         ST    R11,VREXX_B\n         ST    R1,VREXX_BL\n         AR    R11,R1\n         B     WRVAR\nFNOTA    LA    R1,=C'N/A'\n         B     FNOTF1\nFNOTF    LA    R1,=C'N/F'\nFNOTF1   ST    R1,VREXX_B\n         LA    R1,3\n         ST    R1,VREXX_BL\nWRVAR    BAL   R14,PUTVREX\nSKFIELD  EQU   *\n         LA    R7,8(R7)\n         LA    R5,2(R5)\n         BCT   R10,NFIELD\nEXTFIELR LM    R0,R15,SAVER2\n         L     R14,EXTFIELS\n         BR    R14\n*---------------------------------\n* CMPNAM\n*---------------------------------\nCMPNAM   EQU   *\n         ST    R14,CMPNAMS\n         TM    CMPNAMO,CMPNAMO_I\n         BZ    CMPNAM1\n         MVC   VREXX_N(4),=CL4'CSI'\n         MVC   VREXX_NL,=F'3'\nCMPNAM1  LA    R15,VREXX_N\n         L     R14,VREXX_NL\n         AR    R15,R14\n         MVI   0(R15),C'.'\n         LA    R14,1(R14)\n         ST    R14,VREXX_NL\n         TM    CMPNAMO,CMPNAMO_N\n         BO    CMPNAM3\n         LA    R15,VREXX_N\n         L     R14,VREXX_NL\n         AR    R15,R14\nNCHAR    CLI   0(R1),C' '\n         BE    CMPNAM2\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(R1)\n         LA    R15,1(R15)\n         LA    R14,1(R14)\n         B     NCHAR\nCMPNAM2  ST    R14,VREXX_NL\n         B     CMPNAMR\nCMPNAM3  CVD   R1,WORKD\n         MVC   EDMSK(17),MASK\n         ED    EDMSK(16),WORKD\n         LA    R15,VREXX_N\n         L     R14,VREXX_NL\n         AR    R15,R14\n         LA    R1,EDMSK\n         LA    R0,16\nNCHARN   CLI   0(R1),C' '\n         BE    SKIPC\n         MVC   0(1,R15),0(R1)\n         LA    R15,1(R15)\n         LA    R14,1(R14)\nSKIPC    LA    R1,1(R1)\n         BCT   R0,NCHARN\n         ST    R14,VREXX_NL\nCMPNAMR  L     R14,CMPNAMS\n         BR    R14\n*---------------------------------\n* WRTOTS\n*---------------------------------\nWRTOTS   EQU   *\n         ST    R14,WRTOTSS\n         $PUTV 'CSI.DEBUG.CALLS',CSI_CALLS,4\n         $PUTV 'CSI.ENTRY.0',CSI_ENTS,4\n         $PUTV 'CSI.CATENTRY.0',CSI_CENTS,4\n         L     R14,WRTOTSS\n         BR    R14\n*---------------------------------\n* INITVAR\n*---------------------------------\nINITVAR  EQU   *\n         ST    R14,INITVARS\n         XC    CSI_CALLS,CSI_CALLS\n         XC    CSI_ENTS,CSI_ENTS\n         XC    CSI_CENTS,CSI_CENTS\n         L     R14,INITVARS\n         BR    R14\n*---------------------------------\n* DEBUG\n*---------------------------------\nDEBUG    EQU   *\n         ST    R14,DEBUGS\n         $PUTV 'CSI.DEBUG.RSN',REASONA,4\n         $PUTV 'CSI.DEBUG.WA',(R6),256\n         $PUTV 'CSI.DEBUG.FILTER',SELCRITA,L_CSIFIELD\n         L     R14,DEBUGS\n         BR    R14\n*---------------------------------\n* CONST AREA\n*---------------------------------\nVP1      DC    CL8'IRXEXCOM'\nVP2Y3    DC    F'0'\nMASK     DC    X'4020202020202020202020202020212040'\n         LTORG\n*---------------------------------\n* DATA AREA\n*---------------------------------\n         DROP  R2,R4\nDATA     DSECT\nSAVER    DS    18F\nSAVER2   DS    16F\nGETARGSS DS    F\nPUTVREXS DS    F\nCALLCSIS DS    F\nDEBUGS   DS    F\nEXTDATAS DS    F\nWRTOTSS  DS    F\nINITVARS DS    F\nCMPNAMS  DS    F\nEXTFIELS DS    F\nCONTINUE DS    C\nWORKD    DS    D\nWORKF    DS    CL9\nEDMSK    DS    CL17\nW1       DS    F\nW2       DS    F\nW3       DS    F\nREASONA  DS    F\nSHV1     DS    8F\nCP1      DS    F\nCP2      DS    F\nCP3      DS    F\nCP4      DS    F\nVREXX_N  DS    CL64\nVREXX_NL DS    F\nVREXX_B  DS    F\nVREXX_BL DS    F\nCMPNAMO  DS    X\nCMPNAMO_I  EQU X'80'               INITIALIZE\nCMPNAMO_T  EQU X'00'               CONTINUE\nCMPNAMO_N  EQU X'40'               NUMBER\nCMPNAMO_C  EQU X'00'               CHAR\nCSI_CALLS DS   F                   CALLS TO ICS (FIRST + RESUMES)\nCSI_ENTS  DS   F                   ENTRIES READED\nCSI_CENTS DS   F                   CATALOG ENTRIES READED\n         DS    0D\nSELCRITA DS    XL(L_CSIFIELD)\nLDATA    EQU   *-DATA\nL_CSIFIELD EQU (CSIENTS-CSIFIELD)+800\nBUFFCSI  EQU   100*1024\n*---------------------------------\n* MAPS\n*---------------------------------\nMAPS     DSECT\n         IRXENVB\n         IRXEXTE\n         IRXSHVB\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         COPY  IGGCSINA\n         COPY  IGGCSIWK\n         END   IRXF@CSI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@DAI": {"ttr": 1029, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x01\\x0f\\x01\\x0f\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 271, "newlines": 271, "modlines": 0, "user": "WSBGISP"}, "text": "*---------------------------------\n* HOUSEKEEPING\n*---------------------------------\nIRXF@DAI CSECT\nIRXF@DAI AMODE 31\nIRXF@DAI RMODE 24\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R2,R1\n         USING IRXF@DAI,R12\n         LA    R13,SAVER\n         ST    R0,STKENV\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n         LOAD  EP=IRXSTK\n         LR    R8,R0\n*---------------------------------\n* 1st parm\n*---------------------------------\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R6,R06\n         BZ    FINNOK\n         C     R6,=F'7'\n         BL    FINNOK\n         XC    STATUS,STATUS\n         CLI   0(R5),C'Y'\n         BNE   PARM2\n         OI    STATUS,STATDEV\nPARM2    CLI   1(R5),C'Y'\n         BNE   PARM3\n         OI    STATUS,STATSPA\nPARM3    CLI   2(R5),C'Y'\n         BNE   PARM4\n         OI    STATUS,STATSMS\nPARM4    CLI   3(R5),C'Y'\n         BNE   PARM5\n         OI    STATUS,INCOFF\nPARM5    CLI   4(R5),C'Y'\n         BNE   PARM6\n         OI    STATUS,INCNSMS\nPARM6    CLI   5(R5),C'Y'\n         BNE   PARM7\n         OI    STATUS,INCSMS\nPARM7    CLI   6(R5),C'Y'\n         BNE   BEGSCAN\n         OI    STATUS,MONITOR\n*---------------------------------\n* MAIN\n*---------------------------------\nBEGSCAN  EQU   *\n         TM    STATUS,MONITOR\n         BZ    BEGSCAN1\n         XC    WORKA,WORKA\n         LA    R0,1\n         LA    R15,200\n         SVC   109\n         LTR   R15,R15\n         BNZ   FINNOK\n         SR    R6,R6\nSCANP    UCBSCAN ADDRESS,WORKAREA=WORKA,UCBPTR=UCBPTR,DEVCLASS=DASD,   X\n               DYNAMIC=YES,RANGE=ALL,NOPIN\n         C     R15,=F'5'\n         BNL   FINNOK\n         LTR   R15,R15\n         BNZ   ENDSCANP\n         LA    R6,1(R6)\n         B     SCANP\nENDSCANP ST    R6,N\n         MVC   I,=F'1'\n         XC    W,W\n         MVC   T,=CL30'Reading Volumes'\n         LA    R1,W1\n         CALL  IRXFMONI\nBEGSCAN1 MVC   STKFUNC,KQUEUE\n         LA    R1,TIPO\n         ST    R1,STKDAT\n         XC    WORKA,WORKA\n         LA    R0,1\n         LA    R15,200\n         SVC   109\n         LTR   R15,R15\n         BNZ   FINNOK\n         SR    R10,R10\nSCAN     UCBSCAN ADDRESS,WORKAREA=WORKA,UCBPTR=UCBPTR,DEVCLASS=DASD,   X\n               DYNAMIC=YES,RANGE=ALL,NOPIN\n         C     R15,=F'5'\n         BNL   FINNOK\n         LTR   R15,R15\n         BNZ   ENDSCAN\n*\n         TM    STATUS,MONITOR\n         BZ    NOMONI\n         LA    R10,1(R10)\n         ST    R10,I\n         LA    R1,W1\n         CALL  IRXFMONI\nNOMONI   L     R3,UCBPTR\n         S     R3,=AL4(UCBPRFX)\n         USING UCB,R3\n         UCBDEVN UCBPTR=UCBPTR,DEVN=ADDR\n         MVC   VOLSER,UCBVOLI\n         TM    UCBSTAT,UCBONLI\n         BO    INC1\n         TM    STATUS,INCOFF\n         BZ    SCAN\n         B     BEGPROC\nINC1     TM    UCBFL5,UCBSMS\n         BO    INC2\n         TM    STATUS,INCNSMS\n         BZ    SCAN\n         B     BEGPROC\nINC2     TM    UCBFL5,UCBSMS\n         BZ    BEGPROC\n         TM    STATUS,INCSMS\n         BZ    SCAN\nBEGPROC  TM    UCBSTAT,UCBONLI\n         BZ    OFFLINE\n         TM    STATUS,STATDEV\n         BZ    LSPAC\n         DEVTYPE ,(RTNDAT,24),UCBLIST=(UCBPTR,1)\nLSPAC    TM    STATUS,STATSPA\n         BZ    VSMS\n         LSPACE DATA=RTNDATL,UCB=UCBPTR\nVSMS     TM    UCBFL5,UCBSMS\n         BZ    NOSMS\n*---------------------------------------------------------------------*\n         TM    STATUS,STATSMS\n         BZ    NEXT\n         XC    SSOB_WRK,SSOB_WRK\n         LA    R6,SSOB_WRK             POINT TO WORK AREA\n         USING SSOB,R6\n         MVI   SSOBLEN+1,SSOBHSIZ      SSOB LENGTH\n         MVC   SSOBID,=C'SSOB'         SSOB\n         MVI   SSOBFUNC+1,SSOBSSMS     FUNCTION\n         L     R1,CVTPTR               CVT\n         L     R1,CVTJESCT-CVTMAP(,R1) JES COMM TABLE\n         L     R1,JESCTEXT-JESCT(,R1)  JESCT EXTENSION\n         MVC   SSOBSSIB,JESSMSIB-JESPEXT(R1) SMS SSIB\n         LA    R5,SSSA_WRK             SSSA WORK AREA\n         ST    R5,SSOBINDV             FUNCTION-DEPENDENT AREA\n*---------------------------------------------------------------------*\n         XC    SSSA_WRK,SSSA_WRK\n         USING IEFSSSA,R5\n         LA    R0,SSSALN+SSSA1LN+32    LENGTH\n         STH   R0,SSSALEN\n         MVC   SSSAID,=C'SSSA'         SSSA\n         MVI   SSSAVER+1,SSOBSSVR      VERSION\n         MVI   SSSASFN+1,SSSAACTV      SUB-FUNCTION CODE\n         MVI   SSSAIFLG,SSSANAUT       NON-AUTHORIZED CALLER\n         MVI   SSSA1TYP,SSSA1VOL       GIVE VOLSER, GET VLD BACK\n         MVI   SSSA1CNT+3,1            ONE CONSTRUCT PASSED\n         MVI   SSSA1NML+1,L'UCBVOLI    LENGTH OF NAME\n         MVC   SSSA1NAM(L'UCBVOLI),UCBVOLI  MOVE VOLUME SERIAL\n         LH    R0,=Y(VLDLEN)\n         ST    R0,SSSA1LEN             LENGTH OF WORK AREA\n         LA    R1,VLDAREA\n         ST    R1,SSSA1PTR             ADDR OF WORK AREA\n         LA    R1,SSOB_WRK             SSOB_PTR\n         ST    R1,SSOB_ADR\n         OI    SSOB_ADR,X'80'\n         LA    R1,SSOB_ADR\n         IEFSSREQ                  <== CALL SMS\n         LTR   R15,R15                 SSI OK?\n         BNZ   FINNOK                  NO, JUMP\n         ICM   R6,B'1111',SSOBRETN\n         LTR   R6,R6\n         BZ    NEXT\n         ABEND 001,DUMP\n         DROP  R5,R6                   SMS_WORK,SSSA\n*\nNEXT     MVI   TIPO,C'S'\n         LA    R9,VLDLEN\n         A     R9,=F'71'\n         B     DONE\nNOSMS    MVI   TIPO,C'N'\n         LA    R9,71\n         B     DONE\nOFFLINE  MVI   TIPO,C'F'\n         LA    R9,11\n         DROP  R3\nDONE     ST    R9,STKLEN\n         LA    R1,IRXSTKP\n         LR    R15,R8\n         BALR  R14,R15\n         LTR   R15,15\n         BNZ   FINNOK\n*\n         B     SCAN\nENDSCAN  EQU   *\n         MODESET MODE=PROB,KEY=NZERO\n         DELETE EP=IRXSTK\n         LA    R8,1\n         ST    R8,EVALBLOCK_EVLEN\n         MVI   EVALBLOCK_EVDATA,C'1'\n*---------------------------------\n* EXIT\n*---------------------------------\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\n         LTORG\nSAVER    DS    18F\nF256     DC    F'256'\nWORKA    DS    CL100\nSTATUS   DS    X\nSTATDEV  EQU   X'80'\nSTATSPA  EQU   X'40'\nSTATSMS  EQU   X'20'\nINCOFF   EQU   X'08'\nINCNSMS  EQU   X'04'\nINCSMS   EQU   X'02'\nMONITOR  EQU   X'01'\nUCBPTR   DS    F\nTIPO     DS    X\nADDR     DS    XL4\nVOLSER   DS    CL6\nRTNDAT   DS    6F\nRTNDATL  DS    XL36\nVLDAREA  DS    XL(VLDLEN)\nVLDLEN   EQU   (VLDEND-VLD)+(VLDEND2-VLDSYSDT)\nW1       DC    A(I)\nW2       DC    A(N)\nW3       DC    A(W)\nW4       DC    A(T)\nI        DS    F\nN        DS    F\nW        DS    F\nT        DS    CL30\nSSOB_ADR DS    F\nKPULL    DC    CL8'PUSH    '\nKQUEUE   DC    CL8'QUEUE   '\nSTKFUNC  DS    CL8\nSTKDAT   DS    F\nSTKLEN   DS    F\nSTKRC    DS    F\nSTKENV   DS    F\nSTKRCE   DS    F\nIRXSTKP  DS    0F\nP1       DC    A(STKFUNC)\nP2       DC    A(STKDAT)\nP3       DC    A(STKLEN)\nP4       DC    A(STKRC)\nP5       DC    A(STKENV)\nP6       DC    A(STKRCE+X'80000000')\n         DS    0D\nSSOB_WRK DS    XL(SSOBHSIZ)            SSOB\n         DS    0D\nSSSA_WRK DS    XL(SSSALN+SSSA1LN+32)    SSSA (HDR)\n*---------------------------------\n* MAPS\n*---------------------------------\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         IEFUCBOB DEVCLAS=DA,PREFIX=YES\n         IEFJSSOB\n         IEFSSSA\n         CVT DSECT=YES\n         IEFJESCT\n         IGDVLD\n         END   IRXF@DAI\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IRXF@DLY": {"ttr": 1034, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x955\\x7f\\x00\\x99 o\\x06\\x00\\x00A\\x00A\\x00\\x06\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-12-23T00:00:00", "modifydate": "1999-07-25T06:00:00", "lines": 65, "newlines": 65, "modlines": 6, "user": "Z80236G"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@DLY CSECT\nIRXF@DLY AMODE 31\nIRXF@DLY RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@DLY,R12\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         C     R06,F8\n         BH    FINNOK\n         LTR   R06,R06\n         BZ    FINNOK\n         MVC   ESPERA,CEROS\n*******************\n* MOVER DATOS     *\n*******************\n         LA    R15,ESPERA\n         LR    R14,R05\n         LA    R07,8\n         SR    R07,R06\n         AR    R15,R07\n         BCTR  R06,R00\n         EX    R06,MOVESP\n************************\n* STIMER WAIT          *\n************************\n         STIMER WAIT,DINTVL=ESPERA\n************************\n* EXIT                 *\n************************\nEXIT     MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R09,1\n         ST    R09,EVALBLOCK_EVLEN\n         SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVESP   MVC   0(0,R15),0(R14)\nF8       DC    F'8'\nCEROS    DC    C'00000000'\nESPERA   DS    D\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@DLY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@DOM": {"ttr": 1036, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x005\\x005\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 53, "newlines": 53, "modlines": 0, "user": "WSBGISP"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@DOM CSECT\nIRXF@DOM AMODE 31\nIRXF@DOM RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@DOM,R12\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         C     R06,=F'4'\n         BNE   FINNOK\n         L     R06,0(R05)\n************************\n* BORRAR WTO           *\n************************\n         DOM   MSG=(R06)\n         LTR   R15,R15\n         BNZ   FINNOK\n         MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R09,1\n         ST    R09,EVALBLOCK_EVLEN\n************************\n* EXIT                 *\n************************\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@DOM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@EDM": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x00\\x955O\\x00\\x99 o\\x06\\x01\\x00w\\x00w\\x00\\x07\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "1995-12-20T00:00:00", "modifydate": "1999-07-25T06:01:00", "lines": 119, "newlines": 119, "modlines": 7, "user": "Z80236G"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@EDM CSECT\nIRXF@EDM AMODE 31\nIRXF@EDM RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@EDM,R12\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n*******************\n* LEER PARAMETROS *\n*******************\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n************************\n* VER SIGNO            *\n************************\n         MVC   SIGNO,K0(R05)\n         CLI   SIGNO,C'-'\n         BNE   BPD\n         LA    R05,1(R05)\n         BCTR  R06,R00\n************************\n* BUSCAR PUNTO DECIMAL *\n************************\nBPD      EQU   *\n         LR    R08,R06\n         LR    R10,R05\nNP       CLI   K0(R05),C'.'\n         BE    PEND\n         LA    R05,1(R05)\n         BCT   R08,NP\n         SR    R07,R07\n         B     CZON\nPEND     LR    R07,R06\n         SR    R06,R08\n         SR    R07,R06\n         BCTR  R07,R00\n************************\n* CREAR ZONED          *\n************************\nCZON     EQU   *\n         MVI   ZONED,C'0'\n         MVC   ZONED+1(20),ZONED\n         LTR   R07,R07\n         BZ    CZON2\n         C     R07,F5\n         BL    CZON1\n         LA    R07,5\nCZON1    BCTR  R07,R00\n         LA    R15,ZONED+16\n         LR    R14,R10\n         AR    R14,R06\n         LA    R14,1(R14)\n         EX    R07,MOV1\nCZON2    LTR   R06,R06\n         BZ    PKNUM\n         C     R06,F16\n         BH    FINNOK\n         BCTR  R06,R00\n         LR    R14,R10\n         LA    R15,ZONED+15\n         SR    R15,R06\n         EX    R06,MOV1\n************************\n* EMPAQUETAR NUMERO    *\n************************\nPKNUM    EQU   *\n         CLI   SIGNO,C'-'\n         BNE   PKNUM1\n         NI    ZONED+20,X'DF'\nPKNUM1   EQU   *\n         PACK  NUM(8),ZONED(15)\n         PACK  NUM+7(4),ZONED+14(7)\n************************\n* EDITAR MASCARA       *\n************************\n         LA    R10,EVALBLOCK_EVDATA\n         LA    R01,21(R10)\n         MVC   0(29,R10),MASK\n         EDMK  0(29,R10),NUM\n         BCTR  R01,R00\n         MVC   0(1,R01),28(R10)\nVDEC     EQU   *\n         LA    R09,28\n         ST    R09,EVALBLOCK_EVLEN\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOV1     MVC   K0(0,R15),0(R14)\n*                1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\nMASK     DC    X'40204B2020204B2020204B2020204B2020204B2021206B20202020X\n               2060'\nF5       DC    F'5'\nF16      DC    F'16'\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         ORG   EVALBLOCK_EVDATA+30\nSIGNO    DS    C\nNUM      DS    PL11\nZONED    DS    CL21\n         ORG\n         END   IRXF@EDM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@ENQ": {"ttr": 1284, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00\\x00\\x00\\x955O\\x00\\x99 o\\x06\\x02\\x00U\\x00M\\x00\\x1a\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1995-12-20T00:00:00", "modifydate": "1999-07-25T06:02:00", "lines": 85, "newlines": 77, "modlines": 26, "user": "Z80236G"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@ENQ CSECT\nIRXF@ENQ AMODE 31\nIRXF@ENQ RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@ENQ,R12\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         C     R06,F1\n         BNE   FINNOK\n         MVC   TIP(1),K0(R05)\n*******************\n* LEER PARAMETRO 2*\n*******************\n         LA    R03,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BM    FINNOK\n         MVI   MINOR,C' '\n         MVC   MINOR+1(254),MINOR\n         BCTR  R06,R00\n         EX    R06,MOVMINOR\n************************\n* VER TIPO             *\n************************\n         CLI   TIP,C'E'\n         BE    HENQ\n         CLI   TIP,C'D'\n         BE    HDEQ\n         B     FINNOK\n************************\n* HACER ENQ            *\n************************\nHENQ     ENQ   (MAJOR,MINOR,E,,SYSTEMS)\n         LTR   R15,R15\n         BNZ   FINNOK\n         B     EXIT\n************************\n* HACER DEQ            *\n************************\nHDEQ     DEQ   (MAJOR,MINOR,,SYSTEMS)\n         LTR   R15,R15\n         BNZ   FINNOK\n************************\n* EXIT                 *\n************************\nEXIT     MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R09,1\n         ST    R09,EVALBLOCK_EVLEN\n         SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVMINOR MVC   MINOR(0),0(R05)\nMAJOR    DC    CL8'IRXF@ENQ'\nF1       DC    F'1'\nTIP      DS    C\nMINOR    DS    CL255\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@ENQ\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@MAT": {"ttr": 1287, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x955\\x7f\\x00\\x99 o\\x07\\x04\\x00\\xd0\\x00\\xcf\\x00\\n\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1995-12-23T00:00:00", "modifydate": "1999-07-25T07:04:00", "lines": 208, "newlines": 207, "modlines": 10, "user": "Z80236G"}, "text": "IRXF@MAT TITLE 'L_MATCH'\nIRXF@MAT CSECT\nIRXF@MAT AMODE 31\nIRXF@MAT RMODE ANY\n         @EQUS\n******************\n* ESTABLECER DIR.*\n******************\n         BAKR  R14,0\n         LR    R12,R15\n         USING IRXF@MAT,R12\n         LR    R02,R01\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         C     R06,F256\n         BH    FINNOK\n         LR    R00,R05\n         LR    R01,R06\n*******************\n* LEER PARAMETRO 2*\n*******************\n         LA    R03,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         C     R06,F256\n         BH    FINNOK\n         LR    R14,R05\n         LR    R15,R06\n         LR    R05,R04\n         USING EVALBLOCK,R05\n******************\n* CARGAR PARMS   *\n******************\n         LR    R03,R00                   -> SOURCE\n         LR    R02,R14                   -> PATTERN\n******************\n* INIT SOURCE    *\n******************\n         LR    R06,R01\n         BCTR  R06,0\n         EX    R06,MOVESTR               MOVE A WORK\n         LA    R10,MATSTR\n         LA    R06,1(R06)\n         AR    R10,R06\n         MVI   0(R10),MATNULL            PONER NULO AL FINAL\n         LA    R03,MATSTR\nMENOSSTR BCTR  R10,0\n         CR    R10,R03\n         BL    INIPAT\n         CLI   0(R10),MATNULL\n         BE    MENOSSTR\n         CLI   0(R10),MATBLANK\n         BNE   INIPAT\n         MVI   0(R10),MATNULL            MOVE NULOS A BLANCOS DE COLA\n         B     MENOSSTR\n******************\n* INIT PATTERN   *\n******************\nINIPAT   LR    R07,R15\n         BCTR  R07,0\n         EX    R07,MOVEPAT               MOVE A WORK\n         LA    R10,MATPAT\n         LA    R07,1(R07)\n         AR    R10,R07\n         MVI   0(R10),MATNULL            PONER NULO AL FINAL\n         LA    R02,MATPAT\nMENOSPAT BCTR  R10,0\n         CR    R10,R02\n         BL    COMPARE\n         CLI   0(R10),MATNULL\n         BE    MENOSPAT\n         CLI   0(R10),MATBLANK\n         BNE   COMPARE\n         MVI   0(R10),MATNULL            MOVE NULOS A BLANCOS DE COLA\n         B     MENOSPAT\n********************\n* COMIENZO COMPARE *\n********************\nCOMPARE  DS    0H\n         LA    R08,MATSCANS\n         CLI   0(R02),MATGEN\n         BNE   CHKNXT1\n         CLI   1(R02),MATNULL\n         BE    MATCH\nCHKNXT1  DS    0H\n         CR    R06,R07\n         BCTR  R06,0\n         BNE   CHKNXT5\n         EX    R06,CHKMATCH\n         BE    MATCH\nCHKNXT5  DS    0H\n         EX    R06,CHKBLNK2\n         BE    NOMATCH\nCHKNXT2  DS    0H\n         BCTR  R07,0\n         EX    R07,CHKBLNKS\n         BE    MATCH\n         SR    R04,R04\nSPCHARCK DS    0H\n         CLI   0(R02),MATGEN\n         BE    FNDASTR\n         CLI   0(R02),MATPLACE\n         BNE   REGALPHA\n         SR    R04,R04\nNXTFCHAR DS    0H\n         LA    R03,1(,R03)\nNXTPCHAR DS    0H\n         LA    R02,1(,R02)\n         CLI   0(R02),MATNULL\n         BE    PATRNEND\n         CLI   0(R02),MATGEN\n         BNE   CHKNXT4\n         CLI   1(R02),MATNULL\n         BE    MATCH\nCHKNXT3  DS    0H\n         CLI   0(R02),MATGEN\n         BNE   CHKNXT4\n         CLC   1(R02),MATGEN\n         BE    NXTPCHAR\nCHKNXT4  DS    0H\n         CLI   0(R03),MATNULL\n         BE    FAIL\n         B     SPCHARCK\nPATRNEND DS    0H\n         CLI   0(R03),MATNULL\n         BE    MATCH\n         BCTR  R02,0\n         B     FAIL1\nREGALPHA DS    0H\n         CLC   0(1,R02),0(R03)\n         BNE   FAIL1\n         SR    R04,R04\n         B     NXTFCHAR\nFNDASTR  DS    0H\n         BCTR  R04,0\n         CLI   1(R02),MATPLACE\n         BNE   MULTICHK\n         XC    0(1,R02),1(R02)\n         XC    1(1,R02),0(R02)\n         XC    0(1,R02),1(R02)\n         B     NXTFCHAR\nMULTICHK DS    0H\n         STM   R02,R03,0(R08)\n         LA    R08,8(,R08)\n         B     NXTPCHAR\nFAIL1    DS    0H\n         LTR   R04,R04\n         BZ    FAIL\n         BCTR  R02,0\n         B     NXTFCHAR\nFAIL     DS    0H\n         LA    R03,MATSCANS\n         CR    R08,R03\n         BE    NOMATCH\n         SH    R08,MATH8\n         LM    R02,R03,0(R08)\n         BCTR  R02,0\n         B     NXTFCHAR\n**************\n* FIN        *\n**************\nNOMATCH  MVI   EVALBLOCK_EVDATA,C'0'\n         LA    R09,1\n         ST    R09,EVALBLOCK_EVLEN\n         SR    R15,R15\n         PR\nMATCH    MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R09,1\n         ST    R09,EVALBLOCK_EVLEN\n         SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVESTR  MVC   MATSTR(0),0(R03)\nMOVEPAT  MVC   MATPAT(0),0(R02)\nCHKMATCH CLC   MATSTR(0),MATPAT\nCHKBLNKS CLC   MATPAT(0),MAT8BLNK\nCHKBLNK2 CLC   MATSTR(0),MAT8BLNK\nF256     DC    F'256'\nMATNULL  EQU   X'00'\nMATBLANK EQU   C' '\nMATGEN   EQU   C'*'\nMATPLACE EQU   C'%'\nMATH8    DC    H'8'\nMAT8BLNK DC    CL8' '\nMATSCANS DS    18F\nMATPAT   DS    256C\nMATSTR   DS    256C\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@MAT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@MOD": {"ttr": 1291, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00\\x91\\x00\\x91\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 145, "newlines": 145, "modlines": 0, "user": "WSBGISP"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@MOD CSECT\nIRXF@MOD AMODE 31\nIRXF@MOD RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R2,R1\n         USING IRXF@MOD,R12\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R6,R6\n         BZ    FINNOK\n         C     R6,=F'4'\n         BNE   FINNOK\n         CLC   0(4,R5),=C'INIT'\n         BE    HINIT\n         CLC   0(4,R5),=C'GETM'\n         BE    HGETM\n         CLC   0(4,R5),=C'WAIT'\n         BE    HWAIT\n         CLC   0(4,R5),=C'TERM'\n         BE    HTERM\n         B     FINNOK\n************************\n* INIT QEDIT           *\n************************\nHINIT    LA    R7,EVALBLOCK_EVDATA\n         EXTRACT (R7),FIELDS=COMM\n         L     R7,EVALBLOCK_EVDATA\n         USING IEZCOM,R7\n         USING IEZCIB,R6\n         L     R6,COMCIBPT\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R6)\n         QEDIT ORIGIN=COMCIBPT,CIBCTR=1\n         LA    R9,4\n         ST    R9,EVALBLOCK_EVLEN\n         B     EXIT\n         DROP  R6,R7\n************************\n* GET MODIFY           *\n************************\n* LEER PARAMETRO 2*\nHGETM    LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'4'\n         BNE   FINNOK\n         L     R7,0(R5)\n         USING IEZCOM,R7\n         USING IEZCIB,R6\nHWAITB   L     R6,COMCIBPT\n         L     R8,COMECBPT\n         TM    0(R8),X'40'\n         BZ    NOMOD\n         CLI   CIBVERB,CIBMODFY\n         BNE   TSTSTOP\n         LH    R8,CIBDATLN\n         ST    R8,EVALBLOCK_EVLEN\n         BCTR  R8,R0\n         EX    R8,DATAMOVE\n         B     BORRCMD\nTSTSTOP  CLI   CIBVERB,CIBSTOP\n         BNE   FINNOK\n         MVC   EVALBLOCK_EVDATA(4),=C'STOP'\n         LA    R9,4\n         ST    R9,EVALBLOCK_EVLEN\nBORRCMD  EQU   *\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R6)\n         B     EXIT\nNOMOD    MVI   EVALBLOCK_EVDATA,C'0'\n         LA    R9,1\n         ST    R9,EVALBLOCK_EVLEN\n         B     EXIT\nDATAMOVE MVC   EVALBLOCK_EVDATA(0),CIBDATA\n************************\n* WAIT MODIFY          *\n************************\nHWAIT    LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'4'\n         BNE   FINNOK\n         L     R7,0(R5)\n         USING IEZCOM,R7\n         USING IEZCIB,R6\n         L     R5,COMECBPT\n         WAIT  ECB=(R5)\n         L     R6,COMCIBPT\n         B     HWAITB\n************************\n* TERM QEDIT           *\n************************\nHTERM    LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'4'\n         BNE   FINNOK\n         L     R7,0(R5)\n         USING IEZCOM,R7\n         USING IEZCIB,R6\n         L     R6,COMCIBPT\n         QEDIT ORIGIN=COMCIBPT,BLOCK=(R6)\n         QEDIT ORIGIN=COMCIBPT,CIBCTR=0\n         MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R9,1\n         ST    R9,EVALBLOCK_EVLEN\n************************\n* EXIT                 *\n************************\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\nIEZCOM   DSECT\n         IEZCOM\nIEZCIB   DSECT\n         IEZCIB\n         END   IRXF@MOD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@MON": {"ttr": 1537, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x00\\x99\\x06o\\x00\\x99 o\\x06\\x05\\x00\\x8f\\x00\\x7f\\x00W\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "1999-03-07T00:00:00", "modifydate": "1999-07-25T06:05:00", "lines": 143, "newlines": 127, "modlines": 87, "user": "Z80236G"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@MON CSECT\nIRXF@MON AMODE 31\nIRXF@MON RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@MON,R12\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,F8\n         BH    FINNOK\n         LTR   R6,R6\n         BZ    FINNOK\n         LR    R0,R6\n         LR    R1,R5\n         LA    R15,I\n         BAL   R14,TOFIX\n*******************\n* LEER PARAMETRO 2*\n*******************\n         LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,F8\n         BH    FINNOK\n         LTR   R6,R6\n         BZ    FINNOK\n         LR    R0,R6\n         LR    R1,R5\n         LA    R15,N\n         BAL   R14,TOFIX\n*******************\n* LEER PARAMETRO 3*\n*******************\n         LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'30'\n         BH    FINNOK\n         LTR   R6,R6\n         BZ    FINNOK\n         BCTR  R6,R0\n         MVC   T,BLANCOS\n         EX    R6,MOVT\n*******************\n* LEER PARAMETRO 4*\n*******************\n         LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINIT\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'4'\n         BH    FINNOK\n         LTR   R6,R6\n         BZ    FINNOK\n         MVC   W(4),0(R5)\n         B     CM\nFINIT    MVC   W,=F'0'\n************************\n* LLAMAR A MONIT       *\n************************\nCM       LA    R1,W1\n         CALL  IRXFMONI\n************************\n* EXIT                 *\n************************\nEXIT     MVC   EVALBLOCK_EVDATA(4),W\n         LA    R09,4\n         ST    R09,EVALBLOCK_EVLEN\n         SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVT     MVC   T(0),0(R5)\n****************\n* TO-FIX       *\n* R0 - LENGTH  *\n* R1 -> PIC    *\n* R15 -> OUT   *\n****************\nTOFIX    BAKR  R14,0\n         SR    R2,R2\n         LR    R14,R0\n         BCTR  R14,0\n         CLI   0(R1),C'-'\n         BNE   TOFIXM\n         LA    R2,1\n         LA    R1,1(R1)\n         BCTR  R14,R0\n         B     TOFIXP\nTOFIXM   CLI   0(R1),C'+'\n         BNE   TOFIXP\n         LA    R1,1(R1)\n         BCTR  R14,R0\nTOFIXP   N     R14,=X'0000000F'\n         O     R14,=X'00000070'\n         EX    R14,PACKN\n         LTR   R2,R2\n         BZ    TOFIXC\n         NI    WORKD+7,X'FD'\nTOFIXC   CVB   R14,WORKD\n         ST    R14,0(R15)\n         PR\nPACKN    PACK  WORKD(0),0(,R1)\nBLANCOS  DC    CL30' '\nWORKD    DS    D\nF8       DC    F'8'\nW1       DC    A(I)\nW2       DC    A(N)\nW3       DC    A(W)\nW4       DC    A(T)\nI        DS    F\nN        DS    F\nW        DS    F\nT        DS    CL30\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@MON\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@SRT": {"ttr": 1541, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x15\\x00\\x00\\x00\\x955\\x9f\\x00\\x99 o\\x06\\x06\\x00\\xc4\\x00<\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.21", "flags": 0, "createdate": "1995-12-25T00:00:00", "modifydate": "1999-07-25T06:06:00", "lines": 196, "newlines": 60, "modlines": 0, "user": "Z80236G"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@SRT CSECT\nIRXF@SRT AMODE 31\nIRXF@SRT RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@SRT,R12\n         ST    R00,STKENV\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         MVI   SORTCTU,C' '\n         MVC   SORTCTU+1(255),SORTCTU\n         C     R06,F256\n         BNH   HMOV\n         LA    R06,256\nHMOV     BCTR  R06,R00\n         EX    R06,MOVCTU\n*******************\n* LEER PARAMETRO 2*\n*******************\n         LA    R03,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    NMSG\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    NMSG\n         CLI   0(R05),C'M'\n         BE    SMSG\nNMSG     MVC   SORTCT1,SORTCTN\n         B     HSORT\nSMSG     MVC   SORTCT1,SORTCTM\n         B     HSORT\n************************\n* LLAMAR SORT          *\n************************\nHSORT    LOAD  EP=IRXSTK\n         ST    R12,SORTPL4\n         LA    R01,SORTPL1\n         MVC   STKFUNC,KPULL\n         ST    R00,IRXEP\n         LINK  EP=SORT\n         LTR   R15,R15\n         BNZ   FINNOK\n         LA    R08,1\n         ST    R08,EVALBLOCK_EVLEN\n         MVI   EVALBLOCK_EVDATA,C'1'\n************************\n* EXIT                 *\n************************\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nF256     DC    F'256'\nMOVCTU   MVC   SORTCTU(0),0(R05)\nIRXEP    DS    F\nKPULL    DC    CL8'PULL    '\nSTKFUNC  DS    CL8\nSTKDAT   DS    F\nSTKLEN   DS    F\nSTKRC    DS    F\nSTKENV   DS    F\nSTKRCE   DS    F\nIRXSTKP  DS    0F\nP1       DC    A(STKFUNC)\nP2       DC    A(STKDAT)\nP3       DC    A(STKLEN)\nP4       DC    A(STKRC)\nP5       DC    A(STKENV)\nP6       DC    A(STKRCE+X'80000000')\nMOVDTA   MVC   0(0,R15),0(R14)\nSORTCTM  DC    C' OPTION HIPRMAX=0,DYNALLOC=OFF            '\nSORTCTN  DC    C' OPTION HIPRMAX=0,DYNALLOC=OFF,MSGPRT=NONE'\n*******************************************************\n* LLAMADA AL SORT                                     *\n*******************************************************\nSORTPL1  DC    A(SORTCTL)\nSORTPL2  DC    A(SORTE15+X'80000000')\nSORTPL3  DC    A(SORTE35+X'80000000')\nSORTPL4  DS    A\nSORTPL5  DC    F'-1'\nSORTCTL  DS    0H\n         DC    AL2(SORTCTE-SORTCT1)\nSORTCT1  DC    C'                                          '\nSORTCT2  DC    C' RECORD TYPE=V,LENGTH=4096 '\nSORTCTU  DS    CL256\nSORTCTE  EQU   *\n         DROP  R12\n***************************\n* DAR REGISTROS AL SORT   *\n***************************\nSORTE15  CSECT\nSORTE15  AMODE 31\nSORTE15  RMODE ANY\n         BAKR  R14,0\n         LR    R12,R15\n         USING SORTE15,R12\n         USING SORPE15,R01\n         L     R07,SORUEC\n         DROP  R01\n         USING IRXF@SRT,R07\n         LA    R01,IRXSTKP\n         L     R15,IRXEP\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   NOMAS\n         L     R08,STKLEN\n         C     R08,F4092\n         BH    ERROR\n         LA    R08,4(R08)\n         STH   R08,BUFF\n         XC    BUFF+2(2),BUFF+2\n         LR    R01,R08\n         LR    R15,R08\n         LA    R00,BUFF+4\n         L     R14,STKDAT\n         MVCL  R00,R14\n         LA    R01,BUFF\n         LA    R15,12\n         PR\nNOMAS    LA    R15,8\n         MVC   STKFUNC,KQUEUE\n         PR\nERROR    LA    R15,16\n         PR\n         DROP  R07,R12\nF4092    DC    F'4092'\nKQUEUE   DC    CL8'QUEUE'\nBUFF     DS    CL4100\nSORPE15  DSECT\nSORADD   DS    F\nSORUEC   DS    F\n********************************\n* RECIBIR REGISTROS DEL SORT   *\n********************************\nSORTE35  CSECT\nSORTE35  AMODE 31\nSORTE35  RMODE ANY\n         BAKR  R14,0\n         LR    R12,R15\n         USING SORTE35,R12\n         USING SORPE35,R01\n         L     R07,SORUEC2\n         L     R08,SORADIN\n         DROP  R01\n         LTR   R08,R08\n         BZ    NMS\n         USING IRXF@SRT,R07\n         LH    R01,0(R08)\n         S     R01,FIJO4\n         ST    R01,STKLEN\n         LA    R01,4(R08)\n         ST    R01,STKDAT\n         LA    R01,IRXSTKP\n         L     R15,IRXEP\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   ERRORS\n         LA    R15,4\n         PR\nNMS      LA    R15,8\n         PR\nERRORS   LA    R15,16\n         PR\n         DROP  R07,R12\nFIJO4    DC    F'4'\nSORPE35  DSECT\nSORADIN  DS    F\nSORADOU  DS    F\nSORUEC2  DS    F\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@SRT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@U34": {"ttr": 1545, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x96\\x10/\\x00\\x99 o\\x06\\x07\\x00N\\x00p\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1996-04-11T00:00:00", "modifydate": "1999-07-25T06:07:00", "lines": 78, "newlines": 112, "modlines": 0, "user": "Z80236G"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@U34 CSECT\nIRXF@U34 AMODE 31\nIRXF@U34 RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R01\n         USING IRXF@U34,R12\n         ST    R00,STKENV\n         USING EFPL,R02\n         L     R03,EFPLARG\n         L     R04,EFPLEVAL\n         USING ARGTABLE_ENTRY,R03\n         L     R04,0(R04)\n         USING EVALBLOCK,R04\n************************\n* MAIN                 *\n************************\nBEGSCAN  EQU   *\n         MVC   STKFUNC,KQUEUE\n         LA    R01,48\n         ST    R01,STKLEN\n         LA    R01,UCBX\n         ST    R01,STKDAT\n         XC    WORKA,WORKA\nSCAN     UCBSCAN COPY,WORKAREA=WORKA,UCBAREA=UCBX,DEVCLASS=TAPE,       X\n               DYNAMIC=YES,RANGE=ALL\n         C     R15,=F'5'\n         BNL   FINNOK\n         LTR   R15,R15\n         BNZ   ENDSCAN\n*\n         LA    R01,IRXSTKP\n         LINK  EP=IRXSTK\n         LTR   R15,15\n         BNZ   FINNOK\n*\n         B     SCAN\nENDSCAN  EQU   *\n         LA    R08,1\n         ST    R08,EVALBLOCK_EVLEN\n         MVI   EVALBLOCK_EVDATA,C'1'\n************************\n* EXIT                 *\n************************\nEXIT     SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nF256     DC    F'256'\nWORKA    DS    CL100\nUCBX     DS    XL48\nKPULL    DC    CL8'PUSH    '\nKQUEUE   DC    CL8'QUEUE   '\nSTKFUNC  DS    CL8\nSTKDAT   DS    F\nSTKLEN   DS    F\nSTKRC    DS    F\nSTKENV   DS    F\nSTKRCE   DS    F\nIRXSTKP  DS    0F\nP1       DC    A(STKFUNC)\nP2       DC    A(STKDAT)\nP3       DC    A(STKLEN)\nP4       DC    A(STKRC)\nP5       DC    A(STKENV)\nP6       DC    A(STKRCE+X'80000000')\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@U34\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@VSK": {"ttr": 1548, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x12\\x00\\x00\\x00\\x964\\x8f\\x00\\x99 o\\x06\\x10\\x01\\xe0\\x01\\xbc\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.18", "flags": 0, "createdate": "1996-12-13T00:00:00", "modifydate": "1999-07-25T06:10:00", "lines": 480, "newlines": 444, "modlines": 0, "user": "Z80236G"}, "text": "IRXF@VSK TITLE 'IRXF@VSK  - INTERFASE VSAM/REXX'\n***************************\n* DIRECCIONAMIENTO        *\n*                         *\n* R0  - WORK              *\n* R1  - WORK              *\n* R2  -                   *\n* R3  - RC                *\n* R4  - RPL               *\n* R5  - BUFF              *\n* R6  - ACB               *\n* R7  - IRXEXCOM          *\n* R8  - IRXEXTE           *\n* R9  - ENV-BLOCK (REXX)  *\n* R10 - EFPL              *\n* R11 - BASE+4096         *\n* R12 - BASE              *\n* R13 - SAVER/DATA        *\n* R14 - WORK (BALR)       *\n* R15 - WORK              *\n*                         *\n***************************\nIRXF@VSK CSECT\nIRXF@VSK AMODE 31\nIRXF@VSK RMODE ANY\n         @EQUS\n**********************\n* ESTABLECER DIRECC. *\n**********************\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R10,R1\n         LR    R9,R0\n         LA    R1,1\n         LA    R11,4095(R1,R12)\n         USING IRXF@VSK,R12,R11\n         USING EFPL,R10\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING ENVBLOCK,R9\n         GETMAIN RU,LV=LDATA,LOC=(BELOW,ANY)\n         LR    R13,R1\n         USING DATA,R13\n         ST    R4,SAVEEVAL\n         LA    R5,BUFFER\n         ST    R5,BUFF_A+8\n         LA    R1,ENQ_N\n         ST    R1,ENQ_A+0\n         LA    R1,ENQ_L\n         ST    R1,ENQ_A+4\n         LA    R1,ENQ_V\n         ST    R1,ENQ_A+8\n         LA    R1,ENQ_S\n         ST    R1,ENQ_A+12\n         LA    R1,ACBA_N\n         ST    R1,ACBA_A+0\n         LA    R1,ACBA_L\n         ST    R1,ACBA_A+4\n         LA    R1,ACBA_V\n         ST    R1,ACBA_A+8\n         LA    R1,ACBA_S\n         ST    R1,ACBA_A+12\n         LA    R1,ACBR_N\n         ST    R1,ACBR_A+0\n         LA    R1,ACBR_L\n         ST    R1,ACBR_A+4\n         LA    R1,ACBR_V\n         ST    R1,ACBR_A+8\n         LA    R1,ACBR_S\n         ST    R1,ACBR_A+12\n         LA    R1,BUFF_N\n         ST    R1,BUFF_A+0\n         LA    R1,BUFF_L\n         ST    R1,BUFF_A+4\n         LA    R1,BUFF_S\n         ST    R1,BUFF_A+12\n         MVC   BUFF_S,=F'32760'\n         L     R2,ARGTABLE_ARGSTRING_PTR\n         DROP  R3\n         LTR   R2,R2\n         BM    EXITNOK\n         L     R8,ENVBLOCK_IRXEXTE\n         USING IRXEXTE,R8\n         L     R7,IRXEXCOM\n         DROP  R8\n***********\n* MAIN    *\n***********\n         CLC   0(4,R2),=CL4'OPEN'\n         BE    FOPEN\n         CLC   0(5,R2),=CL5'CLOSE'\n         BE    FCLOSE\n         CLC   0(3,R2),=CL6'ENQ'\n         BE    ENQS\n         CLC   0(3,R2),=CL6'DEQ'\n         BE    DEQS\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),ARG=(R5),      X\n               RECLEN=(R2),OPTCD=(DIR,NUP,KEQ),MF=(L,MODCB1,MODCBL)\n         CLC   0(6,R2),=CL6'INSERT'\n         BE    FINSERT\n         CLC   0(6,R2),=CL6'SELECT'\n         BE    FSELECT\n         CLC   0(6,R2),=CL6'DELETE'\n         BE    FDELETE\n         CLC   0(6,R2),=CL6'UPDATE'\n         BE    FUPDATE\n         CLC   0(6,R2),=CL6'SELECN'\n         BE    FSELECN\n         CLC   0(6,R2),=CL6'SELECF'\n         BE    FSELECF\n         CLC   0(6,R2),=CL6'SELECL'\n         BE    FSELECL\n         CLC   0(6,R2),=CL6'SELECB'\n         BE    FSELECB\nEXITNOK  FREEMAIN RU,A=(R13),LV=LDATA\n         LA    R15,16\n         PR\n***********\n* SALIDAS *\n***********\nEXIT     EQU   *\n         L     R4,SAVEEVAL\n         USING EVALBLOCK,R4\n         CVD   R3,WORKD\n         MVC   EDWK(4),=X'21202040'\n         ED    EDWK(4),WORKD+6\n         MVC   EVALBLOCK_EVDATA(2),EDWK+1\n         LA    R1,2\n         ST    R1,EVALBLOCK_EVLEN\n         FREEMAIN RU,A=(R13),LV=LDATA\n         SR    R15,R15\n         PR\n         DROP  R4\n**************\n* GETVREX    *\n* R2 - VAR_A *\n**************\nGETVREX  EQU   *\n         ST    R14,PUTVREXS\n         LA    R8,SHV1\n         USING SHVBLOCK,R8\n         MVI   SHVCODE,SHVFETCH\n         L     R1,12(R2)\n         MVC   SHVBUFL,0(R1)\n         B     SETREX\n**************\n* PUTVREX    *\n* R2 - VAR_A *\n**************\nPUTVREX  EQU   *\n         ST    R14,PUTVREXS\n         LA    R8,SHV1\n         USING SHVBLOCK,R8\n         MVI   SHVCODE,SHVSTORE\nSETREX   MVC   SHVNEXT,=F'0'\n         MVC   SHVUSER,=F'0'\n         MVC   SHVRET,=F'0'\n         L     R1,0(R2)\n         ST    R1,SHVNAMA\n         L     R1,4(R2)\n         MVC   SHVNAML,0(R1)\n         L     R1,8(R2)\n         ST    R1,SHVVALA\n         L     R1,12(R2)\n         MVC   SHVVALL,0(R1)\n         LA    R1,VP1\n         ST    R1,CP1\n         LA    R1,VP2Y3\n         ST    R1,CP2\n         ST    R1,CP3\n         LR    R1,R8\n         ST    R1,CP4\n         OI    CP4,X'80'\n         LA    R1,CP1\n         LR    R0,R9\n         LR    R15,R7\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    SETREXR\n         LA    R3,9\n         B     EXIT\nSETREXR  L     R14,PUTVREXS\n         BR    R14\n**********************************\n* ENQS                           *\n**********************************\nENQS     EQU   *\n         LA    R2,ENQ_A\n         BAL   R14,GETVREX\n         LA    R2,ENQ_V\n         ENQ   (MAJOR,(R2),E,,SYSTEMS),MF=(E,ENQ1)\n         SR    R3,R3\n         B     EXIT\n**********************************\n* DEQS                           *\n**********************************\nDEQS     EQU   *\n         LA    R2,ENQ_A\n         BAL   R14,GETVREX\n         LA    R2,ENQ_V\n         DEQ   (MAJOR,(R2),,SYSTEMS),MF=(E,DEQ1)\n         SR    R3,R3\n         B     EXIT\n**********************************\n* GETACBE                        *\n**********************************\nGETACBE  EQU   *\n         ST    R14,GETACBES\n         LA    R2,ACBA_A\n         BAL   R14,GETVREX\n         L     R6,ACBA_V\n         LA    R2,ACBR_A\n         BAL   R14,GETVREX\n         L     R4,ACBR_V\n         L     R14,GETACBES\n         BR    R14\n*************\n* FOPEN     *\n*************\nFOPEN    EQU   *\n         LH    R2,KEINTVF+2\n         GETMAIN RU,LV=(R2),LOC=ANY\n         LR    R6,R1\n         BCTR  R2,R0\n         EX    R2,COPACB\n         MVI   OPEN1,X'FF'\n         OPEN  ((R6),UPDAT),MODE=31,MF=(E,OPEN1)\n         LTR   R15,R15\n         BZ    SAVACB\n         LA    R3,10\n         B     EXIT\nSAVACB   ST    R6,ACBA_V\n         LA    R2,ACBA_A\n         BAL   R14,PUTVREX\n         GENCB BLK=RPL,                                                X\n               ACB=(R6),AREALEN=(R1),AREA=(R1),MF=(L,GENCB1,GENCBL)\n         GENCB BLK=RPL,                                                X\n               ACB=(R6),AREALEN=(R1),AREA=(R1),MF=(E,GENCB1)\n         LTR   R15,R15\n         BZ    OKGEN\n         LA    R3,19\n         B     EXIT\nOKGEN    LR    R4,R1\n         ST    R4,ACBR_V\n         LA    R2,ACBR_A\n         BAL   R14,PUTVREX\n         SR    R3,R3\n         B     EXIT\nCOPACB   MVC   0(0,R6),KEINTVF\n*************\n* FCLOSE    *\n*************\nFCLOSE   EQU   *\n         BAL   R14,GETACBE\n         MVI   CLOSE1,X'80'\n         CLOSE ((R6)),MODE=31,MF=(E,CLOSE1)\n         LTR   R15,R15\n         BZ    FREEW\n         LA    R3,11\n         B     EXIT\nFREEW    LH    R2,KEINTVF+2\n         FREEMAIN RU,LV=((R2)),A=((R6))\n         SR    R3,R3\n         B     EXIT\n*************\n* FINSERT   *\n*************\nFINSERT  EQU   *\n         BAL   R14,GETACBE\n         LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         L     R2,SHVVALL\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               RECLEN=(R2),OPTCD=(DIR,NUP,KEQ),MF=(E,MODCB1)\n         PUT   RPL=(R4)\n         LTR   R15,R15\n         BZ    INSOK\n         LA    R3,12\n         B     EXIT\nINSOK    SR    R3,R3\n         B     EXIT\n*************\n* FSELECT   *\n*************\nFSELECT  EQU   *\n         BAL   R14,GETACBE\n         LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               ARG=(R5),OPTCD=(DIR,UPD,KEQ),MF=(E,MODCB1)\n         GET   RPL=(R4)\n         LTR   R15,R15\n         BZ    SELOK\n         LA    R3,13\n         B     EXIT\nSELOK    SHOWCB RPL=(R4),AREA=BUFF_S,LENGTH=4,FIELDS=(RECLEN)\n         LA    R2,BUFF_A\n         BAL   R14,PUTVREX\n         SR    R3,R3\n         B     EXIT\n*************\n* FSELECN   *\n*************\nFSELECN  EQU   *\n         BAL   R14,GETACBE\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               OPTCD=(SEQ,NUP,KEQ,FWD),MF=(E,MODCB1)\n         GET   RPL=(R4)\n         LTR   R15,R15\n         BZ    NEXOK\n         LA    R3,18\n         B     EXIT\nNEXOK    SHOWCB RPL=(R4),AREA=BUFF_S,LENGTH=4,FIELDS=(RECLEN)\n         LA    R2,BUFF_A\n         BAL   R14,PUTVREX\n         SR    R3,R3\n         B     EXIT\n*************\n* FSELECB   *\n*************\nFSELECB  EQU   *\n         BAL   R14,GETACBE\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               OPTCD=(SEQ,NUP,KEQ,BWD),MF=(E,MODCB1)\n         GET   RPL=(R4)\n         LTR   R15,R15\n         BZ    NEBOK\n         LA    R3,21\n         B     EXIT\nNEBOK    SHOWCB RPL=(R4),AREA=BUFF_S,LENGTH=4,FIELDS=(RECLEN)\n         LA    R2,BUFF_A\n         BAL   R14,PUTVREX\n         SR    R3,R3\n         B     EXIT\n*************\n* FSELECL   *\n*************\nFSELECL  EQU   *\n         BAL   R14,GETACBE\n         LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               OPTCD=(DIR,NUP,KEQ,BWD),ARG=(R5),MF=(E,MODCB1)\n         POINT RPL=(R4)\n         LTR   R15,R15\n         BZ    NELOK\n         LA    R3,22\nNELOK    B     EXIT\n*************\n* FSELECF   *\n*************\nFSELECF  EQU   *\n         BAL   R14,GETACBE\n         LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               OPTCD=(SKP,NUP,KGE,FWD),ARG=(R5),MF=(E,MODCB1)\n         POINT RPL=(R4)\n         LTR   R15,R15\n         BZ    NEFOK\n         LA    R3,20\nNEFOK    B     EXIT\n*************\n* FDELETE   *\n*************\nFDELETE  EQU   *\n         BAL   R14,GETACBE\n         LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               ARG=(R5),OPTCD=(DIR,UPD,KEQ),MF=(E,MODCB1)\n         GET   RPL=(R4)\n         LTR   R15,R15\n         BZ    DELOK\n         LA    R3,14\n         B     EXIT\nDELOK    ERASE RPL=(R4)\n         LTR   R15,R15\n         BZ    DEL2OK\n         LA    R3,15\n         B     EXIT\nDEL2OK   SR    R3,R3\n         B     EXIT\n*************\n* FUPDATE   *\n*************\nFUPDATE  EQU   *\n         BAL   R14,GETACBE\n         LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         L     R2,=F'32760'\n         MODCB RPL=(R4),ACB=(R6),AREA=(R5),AREALEN=(R2),               X\n               ARG=(R5),OPTCD=(DIR,UPD,KEQ),MF=(E,MODCB1)\n         GET   RPL=(R4)\n         LTR   R15,R15\n         BZ    UPDOK\n         LA    R3,16\n         B     EXIT\nUPDOK    LA    R2,BUFF_A\n         BAL   R14,GETVREX\n         PUT   RPL=(R4)\n         LTR   R15,R15\n         BZ    UPD2OK\n         LA    R3,17\n         B     EXIT\nUPD2OK   SR    R3,R3\n         B     EXIT\n         DROP  R13\n*************\n* VARIABLES *\n*************\n* TRABAJO\nMAJOR    DC    CL8'IRXF@VSK'\nVP1      DC    CL8'IRXEXCOM'\nVP2Y3    DC    F'0'\nENQ_N    DC    CL10'KEINTV_ENQ'\nENQ_L    DC    AL4(L'ENQ_N)\nENQ_S    DC    AL4(L'ENQ_V)\nACBA_N   DC    CL11'KEINTV_ACBA'\nACBA_L   DC    AL4(L'ACBA_N)\nACBA_S   DC    AL4(L'ACBA_V)\nACBR_N   DC    CL11'KEINTV_ACBR'\nACBR_L   DC    AL4(L'ACBR_N)\nACBR_S   DC    AL4(L'ACBR_V)\nBUFF_N   DC    CL11'KEINTV_BUFF'\nBUFF_L   DC    AL4(L'BUFF_N)\n* ACBS / RPLS\nKEINTVF  ACB   DDNAME=KEINTVF,MACRF=(KEY,DIR,SEQ,IN,OUT),RMODE31=ALL\n*************\n* DATA AREA *\n*************\nDATA     DSECT\nSAVER    DS    18F\nSHV1     DS    8F\nWORKD    DS    D\nSAVEEVAL DS    F\nPUTVREXS DS    F\nGETACBES DS    F\nCP1      DS    F\nCP2      DS    F\nCP3      DS    F\nCP4      DS    F\nEDWK     DS    CL4\nENQ_V    DS    CL255\nACBA_V   DS    F\nACBR_V   DS    F\nBUFF_S   DS    F\nENQ_A    DS    F,F,F,F\nACBA_A   DS    F,F,F,F\nACBR_A   DS    F,F,F,F\nBUFF_A   DS    F,F,F,F\nENQ1     ENQ   (,,,,),MF=L\nDEQ1     DEQ   (,,,),MF=L\nOPEN1    OPEN  (R0,),MODE=31,MF=L\nCLOSE1   CLOSE (R0),MODE=31,MF=L\nGENCB1   DS    0D,XL(GENCBL)\nMODCB1   DS    0D,XL(MODCBL)\nBUFFER   DS    0D\nLDATA    EQU   (*-DATA)+32760\n*************\n* MAPAS     *\n*************\nPARM     DSECT\nTXTADD   DS    F\nTXTLEN   DS    F\n         IRXENVB\n         IRXEXTE\n         IRXSHVB\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@VSK\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@VST": {"ttr": 1799, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00d\\x00d\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "WSBGISP"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@VST CSECT\nIRXF@VST AMODE 31\nIRXF@VST RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R2,R1\n         USING IRXF@VST,R12\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         C     R6,=F'8'\n         BH    FINNOK\n         LTR   R6,R6\n         BZ    FINNOK\n*******************\n* MOVER DATOS     *\n*******************\n         MVC   PREFIX,=CL8' '\n         BCTR  R6,R0\n         EX    R6,MOVESTC\n*******************\n* BUSCAR STC      *\n*******************\n         USING PSA,0\n         L     R10,FLCCVT\n         L     R10,CVTASVT-CVTMAP(,R10)\n         L     R6,ASVTMAXU-ASVT(,R10)\n         LA    R10,ASVTENTY-ASVT(,R10)\nLOOPASCB EQU   *\n         TM    0(R10),ASVTAVAI\n         BO    NEXTASCB\n         L     R5,0(R10)\n         LA    R5,0(R5)\n         LTR   R5,R5\n         BZ    NEXTASCB\n         USING ASCB,R5\n         L     R7,ASCBOUCB\n         LA    R7,0(R7)\n         LTR   R7,R7\n         BZ    NEXTASCB\n         USING OUCB,R7\n         TM    OUCBSFL,OUCBINV\n         BO    NEXTASCB\n         CLC   ASCBJBNI,=F'0'\n         BE    STSTC\n         L     R8,ASCBJBNI\n         MVC   NAME,0(R8)\n         B     NAMESET\nSTSTC    L     R8,ASCBJBNS\n         MVC   NAME,0(R8)\nNAMESET  CALL  UTILMATC,(NAME,PREFIX,LLNGSTR,LLNGPAT)\n         LTR   R15,R15\n         BZ    EXIT\nNEXTASCB EQU   *\n         LA    R10,4(R10)\n         BCT   R6,LOOPASCB\n         MVI   EVALBLOCK_EVDATA,C'0'\n         B     EXITM\n************************\n* EXIT                 *\n************************\nEXIT     MVI   EVALBLOCK_EVDATA,C'1'\nEXITM    LA    R9,1\n         ST    R9,EVALBLOCK_EVLEN\n         SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVESTC  MVC   PREFIX(0),0(R5)\nNAME     DS    CL8\nPREFIX   DS    CL8\nLLNGSTR  DC    X'08'\nLLNGPAT  DC    X'08'\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         IRAOUCB DSECT=YES\n         IHAASCB DSECT=YES\n         IHAASVT LIST=NO\n         CVT   DSECT=YES,LIST=NO\n         IHAPSA LIST=NO\n         END   IRXF@VST\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXF@WTO": {"ttr": 1802, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00\\x8e\\x00\\x8e\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 142, "newlines": 142, "modlines": 0, "user": "WSBGISP"}, "text": "**********************\n* ESTABLECER DIRECC. *\n**********************\nIRXF@WTO CSECT\nIRXF@WTO AMODE 31\nIRXF@WTO RMODE ANY\n         @EQUS\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R2,R1\n         USING IRXF@WTO,R12\n         USING EFPL,R2\n         L     R3,EFPLARG\n         L     R4,EFPLEVAL\n         USING ARGTABLE_ENTRY,R3\n         L     R4,0(R4)\n         USING EVALBLOCK,R4\n         MVI   TYPE,C'N'\n         MVI   SUPS,C'N'\n*******************\n* LEER PARAMETRO 1*\n*******************\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    FINNOK\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R6,R6\n         BZ    FINNOK\n         C     R6,F122\n         BNH   MOVTWK\n         LA    R6,122\nMOVTWK   STH   R6,WTOTEXT\n         BCTR  R6,R0\n         EX    R6,MOVWT\n*******************\n* LEER PARAMETRO 2*\n*******************\n         LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    EXECUTE\n         L     R6,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R6,R6\n         BZ    RP3\n         CLI   0(R5),C'R'\n         BNE   LP2\n         MVI   TYPE,C'R'\n         B     RP3\nLP2      CLI   0(R5),C'B'\n         BNE   RP3\n         MVI   TYPE,C'B'\n*******************\n* LEER PARAMETRO 3*\n*******************\nRP3      LA    R3,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR\n         LTR   R5,R5\n         BM    EXECUTE\n         CLI   0(R5),C'S'\n         BNE   EXECUTE\n         MVI   SUPS,C'S'\n*******************\n* EXECUTE         *\n*******************\nEXECUTE  CLI   SUPS,C'S'\n         BNE   EXECUT2\n         LA    R0,1\n         LA    R15,200\n         SVC   109\nEXECUT2  CLI   TYPE,C'N'\n         BE    HWTO\n         CLI   TYPE,C'R'\n         BE    HWTOR\n************************\n* HACER WTO BLANCO     *\n************************\nHWTOB    MVC   HWTOB1+32(2),=B'0100000000000000'\nHWTOB1   WTO   TEXT=WTOTEXT\n         LTR   R15,R15\n         BNZ   FINNOK\n         ST    R1,EVALBLOCK_EVDATA\n         LA    R9,4\n         ST    R9,EVALBLOCK_EVLEN\n         B     EXIT\n************************\n* HACER WTOR           *\n************************\nHWTOR    XC    ECBREPLY,ECBREPLY\n         MVI   REPLY,C' '\n         MVC   REPLY+1(118),REPLY\n         WTOR  TEXT=(WTOTEXT,REPLY,119,ECBREPLY)\n         LTR   R15,R15\n         BNZ   FINNOK\n         WAIT  ECB=ECBREPLY\n         MVC   EVALBLOCK_EVDATA(119),REPLY\n         LA    R9,119\n         LA    R5,EVALBLOCK_EVDATA+118\nSTRIPT   CLI   0(R5),C' '\n         BNE   SETL\n         BCTR  R5,R0\n         BCT   R9,STRIPT\nSETL     LTR   R9,R9\n         BNZ   SETL2\n         LA    R9,1\nSETL2    ST    R9,EVALBLOCK_EVLEN\n         B     EXIT\n************************\n* HACER WTO            *\n************************\nHWTO     WTO   TEXT=WTOTEXT\n         LTR   R15,R15\n         BNZ   FINNOK\n         MVI   EVALBLOCK_EVDATA,C'1'\n         LA    R9,1\n         ST    R9,EVALBLOCK_EVLEN\n************************\n* EXIT                 *\n************************\nEXIT     CLI   SUPS,C'S'\n         BNE   EXIT1\n         LA    R0,2\n         LA    R15,200\n         SVC   109\nEXIT1    SR    R15,R15\n         PR\nFINNOK   LA    R15,16\n         PR\nMOVWT    MVC   WTOTEXT+2(0),0(R5)\nF122     DC    F'122'\nWTOTEXT  DS    CL124\nREPLY    DS    CL119\nECBREPLY DS    F\nTYPE     DS    C\nSUPS     DS    C\n*************\n* MAPAS     *\n*************\nD        DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXF@WTO\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXFLOC": {"ttr": 2049, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00d\\x00d\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "WSBGISP"}, "text": "IRXFLOC  CSECT\nIRXFLOC  AMODE 31\nIRXFLOC  RMODE ANY\n         DC    CL8'IRXFPACK'            HEADER\n         DC    FL4'24'                  LENGTH OF HEADER\n         DC    FL4'16'                  ENTRIES\n         DC    FL4'0'                   RESERVED\n         DC    FL4'32'                  LENGTH ADDR.\n*\n         DC    CL8'L_EDITM '            REXX NAME\n         DC    VL4(IRXF@EDM)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_ENQRES'            REXX NAME\n         DC    VL4(IRXF@ENQ)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_MATCH '            REXX NAME\n         DC    VL4(IRXF@MAT)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_DELAY '            REXX NAME\n         DC    VL4(IRXF@DLY)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_WTO   '            REXX NAME\n         DC    VL4(IRXF@WTO)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_SORT  '            REXX NAME\n         DC    VL4(IRXF@SRT)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_U34   '            REXX NAME\n         DC    VL4(IRXF@U34)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_VSKS  '            REXX NAME\n         DC    VL4(IRXF@VSK)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_MON   '            REXX NAME\n         DC    VL4(IRXF@MON)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_DAI   '            REXX NAME\n         DC    VL4(IRXF@DAI)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_DOM   '            REXX NAME\n         DC    VL4(IRXF@DOM)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_CA1   '            REXX NAME\n         DC    VL4(IRXF@CA1)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_VST   '            REXX NAME\n         DC    VL4(IRXF@VST)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_CMD   '            REXX NAME\n         DC    VL4(IRXF@CMD)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         DC    CL8'L_MOD   '            REXX NAME\n         DC    VL4(IRXF@MOD)            ADD.\n         DC    FL4'0'                   RESERV.\n         DC    CL8'        '            ENT. POINT\n         DC    CL8'        '            LOAD DD\n*\n         END   IRXFLOC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXFLOC$": {"ttr": 2052, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x02\\x97\\x02\\x97\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 663, "newlines": 663, "modlines": 0, "user": "WSBGISP"}, "text": "\n                       IRXFLOC\n                       -------\n\nIRXFLOC is a Rexx Package that extend Rexx functions.\n\nThe default installation has an empty IRXFLOC module in SYS1.LINKLIB.\nTo install this package compile every function and then compile and link\nIRXFLOC to create the package. Copy to SYS1.LINKLIB, refresh LLA if\nneeded and restart TSO sesion. Be sure that your installation has no a\nIRXFLOC package yet installed. If your system has one expand it with\nthis functions.\n\nThis package has some usefull functions and is very easy to add your\nown functions. I recommend this way because Rexx external functions\nare loaded from disk on every call, but packages are only loaded\none time at begining of sesion. If you have slowly execs try it, it\nspeed up 100%, 300%, and more.\n\nPlease be free to modify, replace, add new functions and let me know.\n\n                     THE FUNCTIONS\n                     -------------\n\nEvery functions must be called as functions no procedures.\n\n------------------------------------------------------------------------\nL_EDITM.\n\nEdit mask. Return any number foramted as:\n           \"Z.\u00d1\u00d1\u00d1.\u00d1\u00d1\u00d1.\u00d1\u00d1\u00d1.\u00d1\u00d1\u00d1.\u00d1\u00d1\u00d1,\u00d1\u00d1\u00d1\u00d1\u00d1\"\nRight aligned and padded with blanks. Allways return five decimal\npositions. Make a substr to get your result.\n\n|say L_EDITM(1234.45)                                                  |\n\nReturns:\n'                 1.234,45000'\nChange ',' and '.' in source code according to your needs.\n\n------------------------------------------------------------------------\nL_ENQRES.\n\nENQ or DEQ a SYSTEMS EXCL UNCOND resource with MAJOR=IRXF@ENQ.\nL_ENQRES(\"E\"/\"D\",\"MINOR\")\nE/D   - Enqueue/Dequeue\nMinor - Your resource\nRC = 1 - OK\n\n|if L_ENQRES(\"E\",\"MYRES\") then do                                      |\n|   call process                                                       |\n|   retc = L_ENQRES(\"D\",\"MYRES\")                                       |\n|   end                                                                |\n\n\n------------------------------------------------------------------------\nL_MATCH.\n\nCompare a string with a pattern returnig result.\nPattern must contain * for varios characters and % for one character.\nString and pattern are limited to 256 chars.\nRC = 1 - Match, 0 - No Match\n\n|if L_MATCH(text,\"SYS1.*\") then do                                     |\n\n------------------------------------------------------------------------\nL_DELAY.\n\nDelay execution.\nL_DELAY(HHMMSSDC)\nHH = Hours\nMM = Minutes\nSS = Seconds\nD  = Seconds/10\nC  = Seconds/100\n\n|ret_c = L_Delay(3000)     /* Wait for 30 s. */                        |\n|ret_c = L_Delay(1)        /* Wait for 1/100 s. */                     |\n|ret_c = L_Delay(24000000) /* Wait for 1 day */                        |\n\n------------------------------------------------------------------------\nL_WTO.\n\nWrite to operator. WTO/WTOR\nL_WTO(\"MSG\"\u00cb,\"R|B\"!\u00cb,\"S\"!)\nMSG max 122 chars.\n\"R\" reply required.\n\"B\" 'Bold' wto. (Wto with descriptor code 12, White-non rollable)\n\"S\" Supervisor State. Supress \"+\" in WTO text.\nReturn = 1 - OK\n         Message identification number - For \"Bold\" wtos.\n         Reply Information (up to 118) - For \"Replys\" wtos.(WTORs)\n\n|retc = L_WTO(\"BEGIN PROCESS\")                                         |\n|wton = L_WTO(\"Initialization....\",\"B\")                                |\n|if L_WTO(\"OK TO CONTINUE\",\"R\") = \"OK\" then do                         |\n\n------------------------------------------------------------------------\nL_SORT.\n\nCall sort.\nL_SORT will call sort passing data in stack and retrieving ordered\ndata to stack.\nL_SORT(\"CNTL\"\u00cb,\"M\"!)\nCNTL - Control sysin. (Max 255 chars).\nM - Messages required. (User must alloc sysout dd)\nRetcode = 1 OK\n\n| ret_c = L_SORT(\"SORT FIELD=(10,2,CH,A)\")                             |\n| ret_c = L_SORT(\"SORT FIELD=(4,8,CH,A) INCLUDE COND.....\")            |\n\nWarning: Records in stack are passed like variable records (RDW), so you\n         must add 4 for all records position.\n\n------------------------------------------------------------------------\nL_U34.\n\nReturn unit tape UCBs to stack.\n\n|retc = L_U34()                                                        |\n\n------------------------------------------------------------------------\nL_VSKS.\n\nRexx/VASM KSDS Interface\nL_VSKS(\"function\")\n\nFunctions:\n\n   OPEN   - Open file\n   CLOSE  - Close file\n   INSERT - Insert (Add) record\n   SELECT - Select (Search) key\n   DELETE - Delete selected record\n   UPDATE - Update selected record\n   SELECN - Search next record\n   SELECF - Select first record ( = KEY or > KEY)\n   SELECB - Select previous record\n   SELECL - Select last record\n\nRetCodes:\n         0 - O.K.\n         8 - Invalid function\n         9 - IRXEXCOM error\n         10 - OPEN error\n         11 - CLOSE error\n         12 - INSERT error\n         13 - SELECT error\n         14 - DELETE error (Key Does not exist)\n         15 - DELETE error\n         16 - UPDATE error (Key Does not exist)\n         17 - UPDATE error\n         18 - SELECN error (End of dataset)\n         19 - GENCB error\n         20 - SELECF error (End of dataset)\n         21 - SELECB error (Begin of dataset)\n         22 - SELECL error (Dos not found)\n\nYou must allocate a VSAM/KSDS with ddname(KEINTVF).\nL_VSKS uses three Rexx variables:\nKEINTV_ACBA = Address of VSAM ACB. Do not modify\nKEINTV_ACBR = Address of VSAM RPL. Do not modify\nKEINTV_BUFF = Record Buffer\n\n| \"alloc fi(keintvf) da('my.vsam') shr\" '                              |\n| if L_VSKS(\"OPEN\") then do                                            |\n|    KEINTV_BUFF = mykey                                               |\n|    if L_VSKS(\"SELECT\") = 0 then say \"FOUND\" substr(KEINTV_BUFF,1,20) |\n|    end                                                               |\n| rk = L_VSKS(\"CLOSE\")                                                 |\n| free fi(keintvf)                                                     |\n\n------------------------------------------------------------------------\nL_MON.\n\nDraw a progress barr in the screen.\nL_MON(I,N,\"Text\")\nI = Count\nN = Total\nText = Window title\nL_MON only actualize screen when it needed, no on every call, so you\nmust use to monitorize process.\n\n|do i = 1 to 100                                                       |\n|   retc = L_MON(I,100,\"Be patient\")                                   |\n|   call process                                                       |\n|   end'                                                               |\n\n------------------------------------------------------------------------\nL_CSI.\n\nCall Catalog Search Interface.\nL_CSI(Level,Catalog,EntType,Flags,Fields)\nLevel = Dataset level, name, or mask (*, **, %)\nCatalog = Catalog name\nEntType = Entry Type\nFlags = Four positions \"Y\" or blank\nFields = Fields to be readed from catalog\nRetcode = 1 (OK)\n\n* Catalog Search Interface is more faster and clean than LISTCAT, it can\n* search datasets, catalogs and library tapes.\n* Refer to \"Catalog Search Interface User's Guide\" in Appendix \"D\" of\n* \"DFSMS/MVS Managing Catalogs\" for details\n\nFields must be padded to eight positions\n\n|fields = 'ENTYPE  '||,                                                |\n|         'VOLSER  '||,                                                |\n|         'DEVTYP  '                                                   |\n|if l_csi('SYS1.**','','','',fields) then do                           |\n|   say \"Total Call to CSI.....\" c2d(csi.debug.calls)                  |\n|   say \"Total Entries returned\" c2d(csi.entry.0)                      |\n|   say \"Total Catalogs readed \" c2d(csi.catentry.0)                   |\n|   say \"--Catalogs readed\"                                            |\n|   do i = 1 to c2d(csi.catentry.0)                                    |\n|      say csi.catentry.i                                              |\n|      end                                                             |\n|   say \"--Entries Founds\"                                             |\n|   do i = 1 to c2d(csi.entry.0)                                       |\n|      if bitand(csi.flag.i,'20'x) = '20'x then do                     |\n|         say csi.entry.i csi.volser.i csi.entype.i c2x(csi.devtyp.i)  |\n|         end                                                          |\n|      else say csi.entry.i csi.error.i                                |\n|      end                                                             |\n|   end                                                                |\n|else do                                                               |\n|   say c2d(csi.debug.calls)                                           |\n|   say c2x(csi.debug.rsn)                                             |\n|   end                                                                |\n\n------------------------------------------------------------------------\nL_DAI.\n\nGet Dasd Information\nL_DAI(Flags)\n\nFlags = 7 positions Y/N or blanks\n        Y...... - Get DEVTYPE information\n        .Y..... - Get LSPACE information\n        ..Y.... - Get SMS information\n        ...Y... - Include Offline volumes\n        ....Y.. - Include nonSms volumes\n        .....Y. - Include Sms volumes\n        ......Y - Display Progress Barr\nRetcode = 1 (OK)\n\nL_DAI must run authorized, it used SVC 109 (200) to get auth. See\nIGX00200. Modify or add your auth method.\nL_DAI scan UCBs for all Dasd in the system and return requested\ninformation to the active stack. Each record can be formated with\nthis code:\n/*-------------------------------------------------------------------*/\nFormat_Dai:\nparse arg 1   Dai_Type,              /* 'F':Offline,'S':SMS,'N':NOSMS */\n          2   Dai_Addr,              /* MVS Address 4 Digits          */\n          6   Dai_Volser,            /* Volser                        */\n          12  Dai_Reserved,          /* Reserved                      */\n          13  Dai_Devt_Type,         /* Device Type (UCBTYP)          */\n          17  Dai_Devt_MaxBlksize,   /* Maximum Block Size            */\n          21  Dai_Devt_Cyls,         /* Cylinders Volumen             */\n          23  Dai_Devt_TrksCyls,     /* Tracks per Cylinders          */\n          25  Dai_Devt_TrkLen,       /* Track Length                  */\n          27  Dai_Devt_BlkOver,      /* Block OverHead                */\n          29  Dai_Devt_BlkOverFac,   /* Block OverHead or Modulo Fac. */\n          30  Dai_Devt_Flgs,         /* Flags - See below             */\n          31  Dai_Devt_TolFactor,    /* Tolerance Factor              */\n          33  Dai_Devt_R0OverHead,   /* R0 OverHead for sector calcs. */\n          35  Dai_Devt_Sectors,      /* Number of sectors for the dev.*/\n          36  Dai_Devt_DataSect,     /* Number of data sectors.       */\n          37  Dai_Spac_Flg1,         /* Flags - See below             */\n          38  Dai_Spac_Flg2,         /* Flags - See below             */\n          39  Dai_Spac_Reserved,     /* Reserved                      */\n          41  Dai_Spac_FreeExts,     /* Numero de Free Extents        */\n          45  Dai_Spac_FreeCyls,     /* Numero de Free Cylinders      */\n          49  Dai_Spac_FreeTrks,     /* Numero de Free Trks Adicional.*/\n          53  Dai_Spac_LargCyls,     /* Numero Cyls en Largest Extent.*/\n          57  Dai_Spac_LargTrks,     /* Numero Trak en Larg.Ext. Add..*/\n          61  Dai_Spac_F0Count,      /* Format 0 Count                */\n          65  Dai_Spac_FreeVirs,     /* Free VIR Count                */\n          69  Dai_Spac_FragIdx,      /* Fragmentation Index           */\n          73  Dai_SmsI_Vldpid,       /* VLDID = 'IGDVLD'              */\n          81  Dai_SmsI_Reserved,     /* Reserved                      */\n          83  Dai_SmsI_Vldpver,      /* Version id                    */\n          85  Dai_SmsI_Vldpcnt,      /* NUMBER OF VOLUMES COUNT       */\n          89  Dai_SmsI_Vldtyp,       /* TYPE OF ITEMS IN LIST         */\n          91  Dai_SmsI_Reserved2,    /* Reserved                      */\n          93  Dai_SmsI_Vldplen,      /* Length of one def VLDEF       */\n          97  Dai_SmsI_Vldvslen,     /* Volser length = 6             */\n          99  Dai_SmsI_Vldvser,      /* Volser                        */\n          105 Dai_SmsI_Reserved3,    /* Reserved                      */\n          129 Dai_SmsI_Vldduser,     /* USERID OF LAST UPDATER        */\n          137 Dai_SmsI_Vldddate,     /* DATE OF LAST UPDATE           */\n          147 Dai_SmsI_Vldtrksz,     /* Volume R1 track capacity      */\n          149 Dai_SmsI_Reserved4,    /* Reserved                      */\n          153 Dai_SmsI_Vlddtime,     /* Time OF LAST UPDATE           */\n          161 Dai_SmsI_Vldsgl,       /* Length of storgrp name        */\n          163 Dai_SmsI_Vldsgn,       /* Name of storgrp               */\n          193 Dai_SmsI_Vldnstat,     /* Old status by system          */\n          209 Dai_SmsI_Vldnucba,     /* ADDRESS OF UCB IF KNOWN       */\n          213 Dai_SmsI_Vldntcpy,     /* TOTAL CAPACITY IN MEGABYTES   */\n          217 Dai_SmsI_Vldnfree,     /* AMOUNT FREE IN MEGABYTES      */\n          221 Dai_SmsI_Vldnlext,     /* LARGEST FREE EXTENT IN MB.    */\n          225 Dai_SmsI_Vldflags,     /* Flags, see below              */\n          226 Dai_SmsI_Reserved5,    /* Reserved                      */\n          227 Dai_SmsI_Vldn0cnt,     /* Volume level Reset Count      */\n          229 Dai_SmsI_Vldnssi1,     /* Reserved for subsystem use    */\n          233 Dai_SmsI_Vldsgst,      /* STORGRP status on this sytem  */\n          234 Dai_SmsI_Reserved5,    /* Reserved                      */\n          237 Dai_SmsI_Vldnlevl,     /* Update level for volume       */\n          241 Dai_SmsI_Vldcsmss,     /* Old location of confirmed stat*/\n          249 Dai_SmsI_Vldsysof,     /* Offset of system data         */\n          253 Dai_SmsI_Vldsysln,     /* Length of system data         */\n          257 Dai_SmsI_Reserved6,    /* Reserved                      */\n          273 Dai_SmsI_SystemsStat   /* Systems Status                */\nDai_Devt_Type = c2x(Dai_Devt_Type)\nDai_Devt_MaxBlksize = c2d(Dai_Devt_MaxBlksize)\nDai_Devt_Cyls = c2d(Dai_Devt_Cyls)\nDai_Devt_TrksCyls = c2d(Dai_Devt_TrksCyls)\nDai_Devt_TrkLen = c2d(Dai_Devt_Trklen)\nDai_Devt_BlkOver = c2d(Dai_Devt_BlkOver)\nDai_Devt_BlkOverFac = c2d(Dai_Devt_BlkOverFac)\n                                     /* Invalid Cylinders number     */\nDai_Devt_Flg_CylInvalid = bitand(Dai_Devt_Flgs,x'80') = x'80'\n                                     /* Reserved                     */\nDai_Devt_Flg_Reserved1 = bitand(Dai_Devt_Flgs,x'40') = x'40'\n                                     /* Reserved                     */\nDai_Devt_Flg_Reserved2 = bitand(Dai_Devt_Flgs,x'20') = x'20'\n                                     /* Modulo Device                */\nDai_Devt_Flg_Modulo = bitand(Dai_Devt_Flgs,x'10') = x'10'\n                                     /* BlkOver = OverHead for any Bl*/\nDai_Devt_Flg_OverH = bitand(Dai_Devt_Flgs,x'08') = x'08'\n                                     /* Reserved                     */\nDai_Devt_Flg_Reserved3 = bitand(Dai_Devt_Flgs,x'04') = x'04'\n                                     /* Reserved                     */\nDai_Devt_Flg_Reserved4 = bitand(Dai_Devt_Flgs,x'02') = x'02'\n                                     /* Tolerance Factor for Blk     */\nDai_Devt_Flg_TolFact = bitand(Dai_Devt_Flgs,x'01') = x'01'\nDai_Devt_TolFactor = c2d(Dai_Devt_TolFactor)\nDai_Devt_R0OverHead = c2d(Dai_Devt_R0OverHead)\nDai_Devt_Sectors = c2d(Dai_Devt_Sectors)\nDai_Devt_DataSect = c2d(Dai_Devt_DataSect)\n                                     /* Valid LSPACE data            */\nDai_Spac_Flg_SpaceInf = bitand(Dai_Spac_Flg1,x'80') = x'80'\n                                     /* Valid F0 data                */\nDai_Spac_Flg_F0Inf = bitand(Dai_Spac_Flg1,x'40') = x'40'\n                                     /* Valid VIR data               */\nDai_Spac_Flg_VirInf = bitand(Dai_Spac_Flg1,x'20') = x'20'\n                                     /* Vtoc Index found             */\nDai_Spac_Flg_Ixds = bitand(Dai_Spac_Flg2,x'80') = x'80'\n                                     /* Vtoc Index Active            */\nDai_Spac_Flg_Ixac = bitand(Dai_Spac_Flg2,x'40') = x'40'\nDai_Spac_FreeExts = c2d(Dai_Spac_FreeExts)\nDai_Spac_FreeCyls = c2d(Dai_Spac_FreeCyls)\nDai_Spac_FreeTrks = c2d(Dai_Spac_FreeTrks)\nDai_Spac_LargCyls = c2d(Dai_Spac_LargCyls)\nDai_Spac_LargTrks = c2d(Dai_Spac_LargTrks)\nDai_Spac_F0Count = c2d(Dai_Spac_F0Count)\nDai_Spac_FreeVirs = c2d(Dai_Spac_FreeVirs)\nDai_Spac_FragIdx = c2d(Dai_Spac_FragIdx)\nDai_SmsI_Vldpver = c2d(Dai_SmsI_Vldpver)\nDai_SmsI_Vldpcnt = c2d(Dai_SmsI_Vldpcnt)\nDai_SmsI_Vldplen = c2d(Dai_SmsI_Vldplen)\nDai_SmsI_Vldvslen = c2d(Dai_SmsI_Vldvslen)\nDai_SmsI_Vldtrksz = c2d(Dai_SmsI_Vldtrksz)\nDai_SmsI_Vldsgl = c2d(Dai_SmsI_Vldsgl)\nDai_SmsI_Vldsgn = substr(Dai_SmsI_Vldsgn,1,Dai_SmsI_Vldsgl)\nDai_SmsI_Vldntcpy = c2d(Dai_SmsI_Vldntcpy)\nDai_SmsI_Vldnfree = c2d(Dai_SmsI_Vldnfree)\nDai_SmsI_Vldnlext = c2d(Dai_SmsI_Vldnlext)\n                                     /* Vol is in conversion         */\nDai_SmsI_Flg_Conv = bitand(Dai_SmsI_Vldflags,x'80') = x'80'\nDai_SmsI_Vldn0cnt = c2d(Dai_SmsI_Vldn0cnt)\nDai_SmsI_Vldnlevl = c2d(Dai_SmsI_Vldnlevl)\nDai_SmsI_SmsStat. = \"\"                /* SMS Status */\n                                      /* 0 - No status given */\n                                      /* 1 - Enabled */\n                                      /* 2 - Quiesce/All */\n                                      /* 3 - Quiesce/New */\n                                      /* 4 - Disabled/All */\n                                      /* 5 - Disabled/New */\nDai_SmsI_MvsStat. = \"\"                /* MVS Status */\n                                      /* 1 - Online */\n                                      /* 2 - Offline */\n                                      /* 3 - Pending offline */\n                                      /* 4 - Boxed */\n                                      /* 5 - Not Ready */\nDai_SmsI_SmsCStat. = \"\"               /* Confirmed SMS Status */\n                                      /* See SmsStat */\n/* Up to 256 sistems status flags */\ndo j = 1 to 4\n   Dai_SmsI_SmsStat.j = c2d(substr(Dai_SmsI_SystemsStat,((j-1)*8)+1,1))\n   Dai_SmsI_MvsStat.j = c2d(substr(Dai_SmsI_SystemsStat,((j-1)*8)+2,1))\n   Dai_SmsI_SmsCStat.j = c2d(substr(Dai_SmsI_SystemsStat,((j-1)*8)+3,1))\n   end\nreturn\n/*-------------------------------------------------------------------*/\nEj:\n|/* Rexx - Read all SMS volumes and get total space */                 |\n|space = 0                                                             |\n|spacefree = 0                                                         |\n|if L_DAI(\"NNYNNYN\") then do                                           |\n|   n = queued()                                                       |\n|   do i = 1 to n                                                      |\n|      pull b                                                          |\n|      call Format_dai(b)                                              |\n|      space = space + Dai_SmsI_Vldntcpy                               |\n|      spacefree = spacefree + Dai_SmsI_Vldnfree                       |\n|      vols = vols + 1                                                 |\n|      end                                                             |\n|   end                                                                |\n------------------------------------------------------------------------\nL_DOM.\n\nDelete Operator Message.\n\nr = L_DOM(wton)\nwton  - Wto Number, returned by L_WTO\nRC = 1 - OK\n\n|wton = L_WTO(\"Starting\",\"B\")                                          |\n|call Initialization                                                   |\n|r = L_DOM(wton)                                                       |\n\n------------------------------------------------------------------------\nL_CA1.\n\nGet CA1 tape volume information.\n* MUST BE COMPILED WITH CAIMAC LIBRARY *\nr = L_CA1(Volume)\nRetcode = 1 (OK)\n\nL_CA1 returns CA1 volume information to the active stack. Each record\ncan be formated with this code:\n/*-------------------------------------------------------------------*/\nFormat_TMMREC:\nparse arg 1   TMVOLSER,              /* VOLUME SERIAL NUMBER         */\n          7   TMDSN,                 /* DATA SET NAME                */\n          51  TMEXPDT,               /* EXPIRATION DATE              */\n          55  TMVOLSEQ,              /* VOLUME SEQUENCE NUMBER       */\n          57  TMFRSVOL,              /* FIRST VOLSER OF DATA SET     */\n          63  TMPRVVOL,              /* PREVIOUS VOLSER OF DATA SET  */\n          69  TMNXTVOL,              /* NEXT VOLSER OF DATA SET      */\n          75  TM#DSNBS,              /* NUMBER OF DATA SET NAME BLOCK*/\n          77  TMADSNB,               /* ADDRESS OF 1ST DSNB          */\n          81  TMALDSNB,              /* ADDRESS OF LAST DSNB         */\n          85  TMFLAG1,               /* INTERNAL FLAG BITS           */\n          86  TMFLAG2,               /* INTERNAL FLAG BITS           */\n          87  TMFLAG3,               /* INTERNAL FLAG BITS           */\n          88  TMFLAG4,               /* INTERNAL FLAG BITS           */\n          89  TMTRTCH,               /* RECORDING TECHNIQUE          */\n          90  TMDEN,                 /* DENSITY                      */\n          91  TMLTYPE,               /* TAPE LABEL TYPE              */\n          92  TMRECFM,               /* RECORD FORMAT                */\n          93  TMLRECL,               /* LOGICAL RECORD LENGTH        */\n          97  TMBLKSI,               /* MAXIMUM BLOCK SIZE           */\n         101  TMBLKCNT,              /* DATA SET BLOCK COUNT         */\n         105  TMOUTDAT,              /* DATE TAKEN OUT OF AREA       */\n         109  TMOUTAR,               /* OUT OF AREA CODE             */\n         113  TMSLOT,                /* VAULT SLOT NUMBER            */\n         117  TMCRTDT,               /* CREATION DATE                */\n         121  TMFILL1,               /* Reserved                     */\n         122  TMCRTTI,               /* CREATION TIME                */\n         125  TMJOBNM,               /* CREATING JOB NAME            */\n         133  TMSTPNAM,              /* CREATING STEP NAME           */\n         141  TMDDNAME,              /* CREATING DDNAME              */\n         149  TMCRUNI,               /* CREATION UNIT                */\n         151  TMLASUSD,              /* DATE LAST USED               */\n         155  TMFILL2,               /* Reserved                     */\n         156  TMLASUST,              /* TIME LAST USED               */\n         159  TMLASUSJ,              /* JOB NAME WHICH LAST USED VOL */\n         167  TMUSUNI,               /* UNIT LAST USED               */\n         169  TMACTVL1,              /* ACTUAL INTERNAL VOLSER       */\n         174  TMCLNCNT,              /* NUMBER OF TIMES TAPE CLEANED */\n         175  TMUSECLN,              /* USE COUNT AT LAST CLEANING   */\n         177  TMDATCLN,              /* DATE OF LAST CLEANING        */\n         181  TMBTHDT,               /* DATE TAPE IS FIRST USED      */\n         185  TMUCOUNT,              /* NUMBER OF TIMES TAPE OPENED  */\n         187  TMVENDOR,              /* TAPE VENDOR NAME             */\n         195  TMEDMID,               /* EXT. DATA MANAGER ID         */\n         199  TMTRERRC,              /* # TEMP READ ERR CLEAN        */\n         201  TMTWERRC,              /* # TEMP WRITE ERR CLEAN       */\n         203  TMPRERRC,              /* # PERM READ ERR CLEAN        */\n         205  TMPWERRC,              /* # PERM WRITE ERR CLEAN       */\n         207  TMTRERRI,              /* # TEMP READ ERR INIT         */\n         209  TMTWERRI,              /* # TEMP WRITE ERR INIT        */\n         211  TMPRERRI,              /* # PERM READ ERR INIT         */\n         213  TMPWERRI,              /* # PERM WRITE ERR INIT        */\n         215  TMDSN17,               /* LAST 17 BYTES OF DSN         */\n         232  TMROBTY,               /* TAPE IN ROBOTIC DEVICE       */\n         233  TMB1INT,               /* B1 INTEGRITY LABEL           */\n         236  TMFLAG5,               /* INTERNAL FLAG BITS           */\n         237  TMB1DIS,               /* B1 DISCLOSURE LABEL          */\n         240  TMFLAG6,               /* INTERNAL FLAG BITS (Reserv.) */\n         241  TMSMSMC,               /* SMS MANAGEMENT CLASS         */\n         249  TMCPGM,                /* CREATING PROGRAM             */\n         257  TMLPGM,                /* LAST USED PROGRAM            */\n         265  TMROBID,               /* ROBOTIC DEVICE INDICATOR     */\n         266  TMACTVL2,              /* REM ACTUAL INT VOLSER        */\n         267  TMUSER,                /* USER JOB ACCOUNTING AREA     */\n         317  TMAUTSA                /* Audit Area                   */\n /*------------------------------------------------------------------*/\n /* Valores para TMFLAG1                                             */\n /*------------------------------------------------------------------*/\n /*TMINTAL  EQU   X'80'          INTERNAL FIELD CHANGED BY USER      */\n /*TMCLOSED EQU   X'40'          VOLUME CLOSED BY TMS                */\n /*TMUPDATE EQU   X'20'          TMC RECORD UPDATED BY USER          */\n /*TMABEND  EQU   X'10'          VOLUME CLOSED BY ABEND              */\n /*TMCLEAN  EQU   X'08'          TAPE IS TO BE CLEANED               */\n /*TMSCRTCH EQU   X'04'          LISTED ON SCRATCH LIST              */\n /*TMDELET  EQU   X'02'          VOLUME DELETED FROM LIBRARY         */\n /*TMDFAULT EQU   X'01'          DEFAULT EXPIRATION DATE USED        */\n /*------------------------------------------------------------------*/\n /* Valores para TMFLAG2                                             */\n /*------------------------------------------------------------------*/\n /*TMCATLOG EQU   X'80'          DATA SET WAS CATALOGED              */\n /*TMOUTPUT EQU   X'40'          DATA SET OPENED FOR OUTPUT          */\n /*TMREUSE  EQU   X'20'          DATA SET RECREATED                  */\n /*TMTEMPDS EQU   X'10'          TEMPORARY DATA SET                  */\n /*TMECATLG EQU   X'08'          CATALOG CONTROLED                   */\n /*TMECYCLE EQU   X'04'          CYCLE CONTROL                       */\n /*TMELDATE EQU   X'02'          FREQUENCY CONTROL                   */\n /*TMETMS   EQU   X'01'          EXPIRED BY TMS                      */\n /*------------------------------------------------------------------*/\n /* Valores para TMFLAG3                                             */\n /*------------------------------------------------------------------*/\n /*TMBADTAP EQU   X'80'          BAD TAPE, DO NOT MOUNT FOR SCR      */\n /*TMRELEVM EQU   X'40'          TAPE REL BY EXT VAULT MGR           */\n /*TMEDMTAP EQU   X'20'          EXTERNAL DATA MANAGED               */\n /*TMDYNAM  EQU   X'10'          DYNAM-T OWNED TAPE                  */\n /*TMERASE  EQU   X'08'          DATA SET ERASE REQUIRED             */\n /*TMDFEXU  EQU   X'04'          DEFAULT EXPDT USED AT OPEN          */\n /*TMULTIF  EQU   X'02'          ADDITIONAL FILES EXIST ON TAPE      */\n /*TMFILCPY EQU   X'01'          FILE CREATED BY COPYCAT             */\n /*------------------------------------------------------------------*/\n /* Valores para TMFLAG4                                             */\n /*------------------------------------------------------------------*/\n /*TMESMS   EQU   X'80'          TAPE EXPIRED BY SMS                 */\n /*TMACVOLI EQU   X'40'          ACTUAL VOLSER IN USE                */\n /*TMVSR    EQU   X'20'          VAULT SPECIFIC REQUEST              */\n /*TMDEGAU  EQU   X'10'          TAPE HAS BEEN DEGAUSSED             */\n /*TMISCAT  EQU   X'08'          FILE ON OS CATALOG                  */\n /*TMNRS    EQU   X'04'          NON-RESIDENT TAPE                   */\n /*TMINUSE  EQU   X'02'          TAPE IS IN-USE                      */\n /*TMNOSTAK EQU   X'01'          NO-STACKING ALLOWED                 */\n /*------------------------------------------------------------------*/\n /* Valores para TMTRTCH                                             */\n /*------------------------------------------------------------------*/\n /*TM9TRK   EQU   X'80'           9 TRK REEL                         */\n /*TM18TRK  EQU   X'C0'          18 TRK CARTRIDGE TAPE               */\n /*TM36TRK  EQU   X'E0'          36 TRK CARTRIDGE TAPE               */\n /*TM36TRK2 EQU   X'E1'          36 TRK CARTRIDGE TAPE DBL LEN       */\n /*TMREDWD1 EQU   X'E4'          REDWOOD 12.5G CAPACITY              */\n /*TMREDWD2 EQU   X'E5'          REDWOOD 25G CAPACITY                */\n /*TMREDWD3 EQU   X'E6'          REDWOOD 50G CAPACITY                */\n /*TM128TRK EQU   X'E8'          128 TRK 3590 CARTRIDGE TAPE         */\n /*               X'23'          EVEN PARITY                         */\n /*               X'3B'          BCD EBCDIC TRANSLATION              */\n /*               X'13'          DATA CONVERSION                     */\n /*               X'2B'          EVEN PARITY AND TRANSLATION         */\n /*------------------------------------------------------------------*/\n /* Valores para TMDEN                                               */\n /*------------------------------------------------------------------*/\n /*TM38000  EQU   X'E3'           3480 CARTRIDGE - 38000 BPI         */\n /*TM38KC   EQU   X'E7'           3480 CARTRIDGE TAPE COMPACTED      */\n /*TM3590   EQU   X'E8'           3590 CARTRIDGE TAPE                */\n /*         EQU   X'D3'           6250 BPI                           */\n /*         EQU   X'C3'           1600 BPI                           */\n /*         EQU   X'83'           800  BPI                           */\n /*         EQU   X'43'           556  BPI                           */\n /*         EQU   X'03'           200  BPI                           */\n /*------------------------------------------------------------------*/\n /* Valores para TMTYPE                                              */\n /*------------------------------------------------------------------*/\n /*         EQU   X'02'           SL                                 */\n /*         EQU   X'0A'           SUL                                */\n /*         EQU   X'01'           NL                                 */\n /*         EQU   X'04'           NSL                                */\n /*         EQU   X'10'           BLP                                */\n /*         EQU   X'40'           AL1                                */\n /*         EQU   X'48'           AU1                                */\n /*         EQU   X'C0'           AL3                                */\n /*         EQU   X'C8'           AU3                                */\n /*------------------------------------------------------------------*/\n /* Valores para TMRECFM                                             */\n /*------------------------------------------------------------------*/\n /*                         10.. ....  FIXED                         */\n /*                         01.. ....  VARIABLE                      */\n /*                         11.. ....  UNDEFINED                     */\n /*                         ...1 ....  BLOCKED                       */\n /*                         .... 1...  STANDARD BLOCKS               */\n /*                                                                  */\n /*------------------------------------------------------------------*/\n /* Valores para TMFLAG5                                             */\n /*------------------------------------------------------------------*/\n /*TMSTACK  EQU   X'80'          FILES WHERE DYNAMICALLY STACKED     */\nEj:\n|if L_CA1(\"123456\") then do                                            |\n|   parse pull tmrec                                                   |\n|   call format_TMMREC(tmrec)                                          |\n|   say TMDSN TMTMFRSVOL                                               |\n|   end                                                                |\n|else do                                                               |\n|   say \"Volume not found\"                                             |\n|   end                                                                |\n------------------------------------------------------------------------\nL_VST.\n\nVerify Started Task.\nr = L_VST(\"CICSPR\")\nRetcode = 1 (OK) (CICSPR is Active).\n\nL_VST returns 1 (OK) if the specified STC name is found on the\ncurrent system. Patterns with '*' and '%' can be especified.\n\nEj:\n|do while(l_vst(\"CICS*\"))                                              |\n|   reply = L_WTO(\"There are active CICS, reply 'RETRY' or 'CANCEL')   |\n|   if reply = 'CANCEL' then exit 99                                   |\n|   end                                                                |\n------------------------------------------------------------------------\nL_CMD.\n\nSend a command to the system.\nr = L_CMD(\"D J,L\")\nRetcode = 1 (OK) (CMD has been sended to the system)\n\n\nEj:\n| /* Start CICS1-10 */                                                 |\n|do i = 1 to 10                                                        |\n|   r = L_CMD(\"S CICS\"||i)                                             |\n|   end                                                                |\n------------------------------------------------------------------------\nL_MOD.\n\nQEdit capabilities. Modify/Stop console command for Rexx execs.\nid = l_mod(\"INIT\")       /* Initialize Command Input */\nr = l_mod(\"GETM\",id)     /* Get a Modify/Stop if any or 0 */\nr = l_mod(\"WAIT\",id)     /* Wait for a Modify/Stop */\nrc = l_mod(\"TERM\",id)    /* Terminates Command Input */\n\nReturns:\nid - Session Id. Can't be modified.\nr - Modify Command/STOP or 0.\nrc - 1 (Termination OK).\n\nEj:\n|Qid = l_mod(\"INIT\")                                                   |\n|do forever                                                            |\n|   modify = l_mod(\"GETM\",id)                                          |\n|   select                                                             |\n|      when(modify = \"DON\") then debug = 1                             |\n|      when(modify = \"DOF\") then debug = 0                             |\n|      otherwise                                                       |\n|      end                                                             |\n|   call Process                                                       |\n|   end                                                                |\n|rwto = l_wto(\"Waiting for stop....\")                                  |\n|while(l_mod(\"WAIT\",Qid) ^= \"STOP\")                                    |\n|   end                                                                |\n|r = l_dom(rwto)                                                       |\n|r = l_mod(\"TERM\",Qid)                                                 |\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IRXFLOCJ": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x009\\x009\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 57, "newlines": 57, "modlines": 0, "user": "WSBGISP"}, "text": "//???????J JOB MSGCLASS=X,REGION=8M,NOTIFY=&SYSUID\n//*---------------------------------------------------------------------\n//IRXFLOC EXEC PGM=ASMA90,REGION=2048K,COND=(8,LE),\n//            PARM=(TERM,NODECK,OBJECT)\n//SYSPRINT DD SYSOUT=*\n//SYSTERM  DD SYSOUT=*\n//SYSIN    DD DSN=THIS.PDS(IRXFLOC),DISP=SHR\n//SYSLIB   DD DSN=THIS.PDS,DISP=SHR\n//         DD DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSUT2   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSUT3   DD UNIT=SYSDA,SPACE=(CYL,(6,2))\n//SYSLIN   DD DSN=&&TEMP1(IRXFLOC),DISP=(NEW,PASS),SPACE=(CYL,(1,1,1))\n//*---------------------------------------------------------------------\n//LINK     EXEC PGM=IEWL,REGION=256K,COND=(12,LE),\n//            PARM=('LET,LIST,MAP,XREF,REUS')\n//SYSPRINT DD SYSOUT=X\n//SYSLIB   DD DSN=YOUR.LOAD,DISP=SHR\n//SYSLMOD  DD DSN=SYS1.LINKLIB(IRXFLOC),DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,SPACE=(CYL,(2,2)),DISP=NEW\n//SYSLIN   DD DSN=&&TEMP1(IRXFLOC),DISP=(SHR,PASS)\n//         DD *\n   INCLUDE SYSLIB(IRXF@EDM)\n   ENTRY IRXF@EDM\n   INCLUDE SYSLIB(IRXF@ENQ)\n   ENTRY IRXF@ENQ\n   INCLUDE SYSLIB(IRXF@MAT)\n   ENTRY IRXF@MAT\n   INCLUDE SYSLIB(IRXF@DLY)\n   ENTRY IRXF@DLY\n   INCLUDE SYSLIB(IRXF@WTO)\n   ENTRY IRXF@WTO\n   INCLUDE SYSLIB(IRXF@SRT)\n   ENTRY IRXF@SRT\n   INCLUDE SYSLIB(IRXF@U34)\n   ENTRY IRXF@U34\n   INCLUDE SYSLIB(IRXF@VSK)\n   ENTRY IRXF@VSK\n   INCLUDE SYSLIB(IRXF@MON)\n   ENTRY IRXF@MON\n   INCLUDE SYSLIB(IRXF@CSI)\n   ENTRY IRXF@CSI\n   INCLUDE SYSLIB(IRXF@DAI)\n   ENTRY IRXF@DAI\n   INCLUDE SYSLIB(IRXF@DOM)\n   ENTRY IRXF@DOM\n   INCLUDE SYSLIB(IRXF@CA1)\n   ENTRY IRXF@CA1\n   INCLUDE SYSLIB(IRXF@VST)\n   ENTRY IRXF@VST\n   INCLUDE SYSLIB(IRXF@CMD)\n   ENTRY IRXF@CMD\n   INCLUDE SYSLIB(IRXF@MOD)\n   ENTRY IRXF@MOD\n   ENTRY IRXFLOC\n   NAME IRXFLOC(R)\n//*---------------------------------------------------------------------\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXFMAT": {"ttr": 2311, "alias": false, "halfwords": 40, "notes": 0, "parms": "b'\\x01\\x00 R\\x01\\x17\\x19/\\x01\\x17\\x19/\\x122\\x00\\xa5\\x00\\xa5\\x00\\x00\\xe3\\xf3\\xf1\\xf1\\xd3\\xc2\\xc4@\\x00\\x00\\x00\\xa5\\x00\\x00\\x00\\xa5\\x00\\x00\\x00\\x00'", "ispf": {"version": "01.00", "flags": 32, "createdate": "2017-07-11T00:00:00", "modifydate": "2017-07-11T12:32:52", "lines": 165, "newlines": 165, "modlines": 0, "user": "T311LBD"}, "text": "IRXFMAT2 TITLE 'MATCH Wildcard source/pattern Rexx Function'\nIRXFMAT2 RSECT\nIRXFMAT2 AMODE 31\nIRXFMAT2 RMODE ANY\n         YREGS\n*----------------------------------------------------------------------\n* HOUSEKEEPING\n*        R15 - Work\n*        R14 - Rexx EvalBlock\n*        R13 - Saver chain\n*        R12 - Base\n*        R11 - Rexx EFPL\n*        R10 - Rexx EFPLARG\n*        R9  - Work\n*        R8  - Work\n*        R7  - MP\n*        R6  - CP\n*        R5  - Pattern\n*        R4  - Pattern length\n*        R3  - Source\n*        R2  - Source Length\n*        R1  - n/a\n*        R0  - n/a\n*----------------------------------------------------------------------\n         SAVE  (14,12),,'IRXFMAT2 MATCH SOURCE/PATTERN'\n         LR    R12,R15\n         USING IRXFMAT2,R12\n         LR    R11,R1\n         USING EFPL,R11\n         L     R10,EFPLARG\n         USING ARGTABLE_ENTRY,R10\n         L     R14,EFPLEVAL\n         L     R14,0(R14)\n         USING EVALBLOCK,R14\n*----------------------------------------------------------------------\n* arg(1) Source\n*----------------------------------------------------------------------\n         L     R3,ARGTABLE_ARGSTRING_PTR           Source Pointer\n         LTR   R3,R3\n         JM    EXITBAD\n         L     R2,ARGTABLE_ARGSTRING_LENGTH        Source length\n*----------------------------------------------------------------------\n* arg(2) Pattern\n*----------------------------------------------------------------------\n         LA    R10,ARGTABLE_NEXT\n         L     R5,ARGTABLE_ARGSTRING_PTR           Pattern Pointer\n         LTR   R5,R5\n         JM    EXITBAD\n         L     R4,ARGTABLE_ARGSTRING_LENGTH        Pattern length\n*-Pseudocode-----------------------------------------------------------\n* ARG STRING,PATTERN\n* WILD = 1\n* STR = 1\n* CP = 1\n* MP = 1\n*----------------------------------------------------------------------\n         LR    R6,R3               CP\n         LR    R7,R5               MP\n         LR    R8,R3\n         AR    R8,R2               END OF STRING\n         LR    R9,R5\n         AR    R9,R4               END OF PATTERN\n*-Pseudocode-----------------------------------------------------------\n* DO WHILE(STR <= LENGTH(STRING) & SUBSTR(PATTERN,WILD,1) *= '*')\n*    IF SUBSTR(PATTERN,WILD,1) *= SUBSTR(STRING,STR,1) &,\n*       SUBSTR(PATTERN,WILD,1) *= '%' THEN RETURN -1\n*    WILD = WILD + 1\n*    STR = STR + 1\n*    END\n*----------------------------------------------------------------------\nLOOP1    CR    R3,R8\n         JE    LOOP2\n         CLI   0(R5),C'*'\n         JE    LOOP2\n         CLC   0(1,R5),0(R3)\n         JE    LOOP1C\n         CLI   0(R5),C'%'\n         JNE   FALSE\nLOOP1C   LA    R5,1(R5)\n         LA    R3,1(R3)\n         CR    R5,R9\n         JNE   LOOP1\n         CR    R3,R8\n         JE    TRUE\n         J     FALSE\n*-Pseudocode-----------------------------------------------------------\n* DO WHILE(STR <= LENGTH(STRING))\n*----------------------------------------------------------------------\nLOOP2    CR    R3,R8\n         JE    LOOP3\n*-Pseudocode-----------------------------------------------------------\n*   IF SUBSTR(PATTERN,WILD,1) = '*' THEN DO\n*      WILD = WILD+1\n*      IF WILD > LENGTH(PATTERN) THEN RETURN 1\n*      MP = WILD\n*      CP = STR+1\n*      END\n*----------------------------------------------------------------------\n         CLI   0(R5),C'*'\n         JNE   LOOP21\n         LA    R5,1(R5)\n         CR    R5,R9\n         JE    TRUE\n         LR    R7,R5\n         LA    R6,1(R3)\n         J     LOOP2\n*-Pseudocode-----------------------------------------------------------\n*   ELSE IF SUBSTR(PATTERN,WILD,1)=SUBSTR(STRING,STR,1) |,\n*           SUBSTR(PATTERN,WILD,1)='%' THEN DO\n*        WILD = WILD + 1\n*        STR = STR + 1\n*        END\n*----------------------------------------------------------------------\nLOOP21   CLC   0(1,R5),0(R3)\n         JE    LOOP211\n         CLI   0(R5),C'%'\n         JNE   LOOP22\nLOOP211  LA    R5,1(R5)\n         LA    R3,1(R3)\n         J     LOOP2\n*-Pseudocode-----------------------------------------------------------\n*   ELSE DO\n*      WILD = MP\n*      CP = CP+1\n*      STR = CP\n*      END\n*   END\n*----------------------------------------------------------------------\nLOOP22   LR    R5,R7\n         LA    R6,1(R6)\n         LR    R3,R6\n         J     LOOP2\n*-Pseudocode-----------------------------------------------------------\n* DO WHILE(SUBSTR(PATTERN,WILD,1)='*')\n*    WILD = WILD + 1\n*    END\n*----------------------------------------------------------------------\nLOOP3    CLI   0(R5),C'*'\n         JNE   END\n         LA    R5,1(R5)\n         J     LOOP3\n*-Pseudocode-----------------------------------------------------------\n* IF WILD > LENGTH(PATTERN) THEN RETURN 1\n* ELSE RETURN -1\n*----------------------------------------------------------------------\nEND      CR    R5,R9\n         JNL   TRUE\nFALSE    MVI   EVALBLOCK_EVDATA,C'0'\n         J     RETURN\nTRUE     MVI   EVALBLOCK_EVDATA,C'1'\nRETURN   MVC   EVALBLOCK_EVLEN,=F'1'\n         SR    R15,R15\nRETURN2  ST    R15,16(R13)\n         LM    R14,R12,12(R13)\n         BSM   0,R14\nEXITBAD  LA    R15,16\n         J     RETURN2\n*----------------------------------------------------------------------\n* Used Maps\n*----------------------------------------------------------------------\nDUMMY    DSECT\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         END   IRXFMAT2\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "IRXFMONI": {"ttr": 2315, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x06\\x19\\x00M\\x00M\\x00\\x04\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T06:19:00", "lines": 77, "newlines": 77, "modlines": 4, "user": "Z80236G"}, "text": "IRXFMONI TITLE 'IRXFMONI  - MONITORIZAR EJECUCION PROGRAMA'\nIRXFMONI CSECT\nIRXFMONI AMODE 31\nIRXFMONI RMODE ANY\n         @EQUS\n**********************\n* ESTABLECER DIRECC. *\n**********************\n         BAKR  R14,0\n         LR    R12,R15\n         USING IRXFMONI,R12\n         LR    R9,R1\n         GETMAIN RU,LV=LDATA,LOC=ANY\n         LR    R13,R1\n         USING DYNAREA,R13\n************************\n* DEFINIR ENTORNO ISPF *\n************************\n         L     R1,0(R9)\n         L     R2,0(R1)        -> I\n         L     R1,4(R9)\n         L     R3,0(R1)        -> N\n         L     R1,8(R9)\n         L     R4,0(R1)        -> W\n         SR    R0,R0\n         LR    R1,R2\n         LA    R15,40\n         MR    R0,R15\n         DR    R0,R3\n         LA    R1,1(R1)\n         CR    R1,R4\n         BNH   EXIT\n         LR    R4,R1\n         L     R1,8(R9)\n         ST    R4,0(R1)       -> SALVO WRK\n         L     R1,12(R9)\n         MVC   ZWINTTL,0(R1)\n         MVC   SL1,MSL1\n         BCTR  R4,R0\n         EX    R4,MOVMSL2\n         @ISPFVD VARS=((SL1,C),(ZWINTTL,C))\n         CALL  ISPLINK,(ISPVDEF,@ISPFVD_ILNAME,SL1,                    X\n               @ISPFVD_ILTYPE,@ISPFVD_ILLNG,@ISPFVD_ILOPTS),VL,        X\n               MF=(E,CALL1)\n******************\n* DISPLAY  PANEL *\n******************\nDSP      EQU   *\n         CALL  ISPLINK,(ISPADDP,ISPBLAN,RW,CL),VL\n         CALL  ISPLINK,(ISPCNTL,ISPDISP,ISPLOCK),VL\n         CALL  ISPLINK,(ISPDISP,ISPPANEL),VL\n         CALL  ISPLINK,(ISPREMP),VL\n*************\n* SALIDA    *\n*************\nEXIT     LR    R1,R13\n         FREEMAIN RU,LV=LDATA,A=(1)\n         SLR   R15,R15\n         PR\nMOVMSL2  MVC   SL1(0),MSL2\n         B     EXIT\n*************\n* VARIABLES *\n*************\n         @EQISPF\nISPPANEL DC    CL8'IRXFMONP'\nRW       DC    F'14'\nCL       DC    F'15'\nMSL1     DC    C' BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB'\nMSL2     DC    C' AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA'\nDYNAREA  DSECT\nSAVER    DS    18F\nCALL1    CALL  ,(,,,,,),VL,MF=L\nSL1      DS    CL41\nZWINTTL  DS    CL30\nLDATA    EQU   *-DYNAREA\n         END   IRXFMONI\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IRXFMONP": {"ttr": 2318, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x06!\\x00\\x0c\\x00\\x0c\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T06:21:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "Z80236G"}, "text": ")ATTR DEFAULT(%+_)\n  } AREA(DYNAMIC) SCROLL(Off) EXTEND(OFF)\n   C1 TYPE(CHAR) COLOR(RED) GE(ON)\n   C2 TYPE(CHAR) COLOR(BLUE) GE(ON)\n   E2 TYPE(CHAR) COLOR(TURQ)\n   08 TYPE(CHAR) COLOR(GREEN) HILITE(USCORE)\n)BODY WINDOW(41,1)\n}GL1,SL1                                }\n)INIT\n  &GL1=' CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC'\n)PROC\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ISFPSAM$": {"ttr": 2320, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00\\xa1\\x00\\xa1\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 161, "newlines": 161, "modlines": 0, "user": "WSBGISP"}, "text": "\n                         Spool Access Method.\n                         --------------------\n\nChanges.\n--------\n\n  Jan  1.996 - V 1.00\n  Jul  1.999 - V 1.01 (Documentation and little changes)\n\nIntroduction.\n-------------\n\n  Spool Access Method (SAM) is a program that access a jes2 spool\n  to retrieve some blocks.\n  It is not a browser or Sdsf substitute, it's function is to make\n  spooled data visible to programs.\n\n  SAM has two interfaces a program to program (ISFPSAMR) and a Rexx\n  interface (ISFPSAMC). With a little of work it can be used for a\n  lot of tasks. I used it to release all jobs that matchs a pattern,\n  to test jobs codes and messages, and a lot of little tasks for\n  operators.\n\n  Its works in OS390/V2R5 (Sysplex/MAS), and has been working in\n  several previous versions of OS/390 and ESA.\n\nWarning.\n--------\n\n  SAM does not make any security verification. If in your shop spooled\n  output are protected by RACF or other products, SAM can read any way.\n  Do not install or protect the program.\n\nInstallation.\n-------------\n\n  Install IGX00200 extended Svc or change authorization procedure\n  (SETSUP) to your own method.\n\n  Assemble ISFPSAMR and ISFPSAMC concatenating SYS1.MACLIB, SYS1.MODGEN\n  and SYS1.HASPSRC/SYS1.V?R?M0.SHASMAC in SYSLIB.\n\n  (OS/390 V2R5) Assemble can terminate with code 8 due to an error\n  in $JQE.\n\n  Copy load modules to tso step library or linklist library.\n\n  Customize and test ISFPSAM1.\n\nCalling ISFPSAMR.\n-----------------\n\n  Allocate a work area mapped in ISFPSAMP macro.\n  Do not clear or free before calling \"TER\" function.\n  Set function code in R_PARM.\n  Set data in R_ENT.\n  Call or link ISFPSAMR with R1 pointing to work area.\n  Return code will be 0 or abend.\n\n  \"INI\" - Init interface. Open spool and get work areas.\n          Call:   R_PARM = \"INI\"\n          Return: R_WAREA = ISFPSAMR work area.\n\n  \"TER\" - Terminate interface. Close spool and free work areas.\n          Call:   R_PARM = \"TER\"\n          Return: none\n\n  \"JQE\" - Return a buffer with all JQE's in Jes.\n          In Jes exist a JEQ (Job queue element) for every Job, Tsu\n          and Stc. (Sdsf's ST panel).\n          Call:   R_PARM = \"JQE\"\n          Return: R_ADDR = Add. of buffer returned with all JQEs.\n                  R_BUFLEN = Length of buffer.\n                  R_BUFEND = End of buffer.\n                  R_ELEML  = Length of a single JQE.\n\n  \"JDS\" - Return a list of datasets of a specified JQE. (PDDBs)\n          Call:   R_PARM = \"JDS\"\n                  R_ENT  = JQE\n          Return: R_ADDR = Add. of buffer returned with all PDDBS\n                  R_BUFLEN = Length of buffer.\n                  R_BUFEND = End of buffer.\n                  R_ELEML  = Length of a single PDDB.\n\n  \"DSR\" - Return records from a specified PDDB. Until EOD or buffer\n          full.\n          Call:   R_PARM = \"DSR\"\n                  R_ENT  = PDDB\n          Return: R_ADDR = Add. of buffer returned with variable\n                           records from adtaset\n                  R_BUFLEN = Length of buffer.\n                  R_BUFEND = End of buffer.\n                  R_ELEML  = 0 - Buffer full / 1 - EOD.\n                  R_OTHER  = Last block readed if buffer full.\n\n  \"DS2\" - Return records from a specified PDDB starting at a specified\n          position.\n          Call:   R_PARM = \"DS2\"\n                  R_ENT  = PDDB\n                  R_OTHER= Last block readed\n          Return: R_ADDR = Add. of buffer returned with variable\n                           records from adtaset\n                  R_BUFLEN = Length of buffer.\n                  R_BUFEND = End of buffer.\n                  R_ELEML  = 0 - Buffer full / 1 - EOD.\n                  R_OTHER  = Last block readed if buffer full.\n\n  \"JOE\" - Return all JOEs (Job output element) in a specified class.\n          Joes are collection of datasets. (Sdsf's O panel).\n          Call:   R_PARM = \"JOE\"\n                  R_ENT  = class\n          Return: R_ADDR = Add. of buffer returned with all Joes\n                  R_BUFLEN = Length of buffer.\n                  R_BUFEND = End of buffer.\n                  R_ELEML  = Length of a single JOE.\n\n  \"JOS\" - Return a list of datasets of a specified JOE. (PDDBs)\n          Call:   R_PARM = \"JOS\"\n                  R_ENT  = JOE\n          Return: R_ADDR = Add. of buffer returned with all PDDBS\n                  R_BUFLEN = Length of buffer.\n                  R_BUFEND = End of buffer.\n                  R_ELEML  = Length of a single PDDB.\n\nCalling ISFPSAMC.\n-----------------\n\n\n  \"INI\" - Init interface. Open spool and get work areas.\n          Call:   'ret_code = ISFPSAMC(\"INI\")'\n          Return: none\n\n  \"TER\" - Terminate interface. Close spool and free work areas.\n          Call:   'ret_code = ISFPSAMC(\"TER\")'\n          Return: none\n\n  \"JQE\" - Return a buffer with all JQE's in Jes.\n          In Jes exist a JEQ (Job queue element) for every Job, Tsu\n          and Stc. (Sdsf's ST panel).\n          Call:   'ret_code = ISFPSAMC(\"JQE\",\"PREFIX\",\"USERID\")\n          Return: JQEs are in stack, read it with pull.\n\n  \"JDS\" - Return a list of datasets of a specified JQE. (PDDBs)\n          Call:   'ret_code = ISFPSAMC(\"JDS\",jqe)\n          Return: PDDBs are in stack read it with pull.\n\n  \"DSR\" - Return records from a specified PDDB. Until EOD or buffer\n          full.\n          Call:   'ret_code = ISFPSAMC(\"JDS\",pddb)\n          Return: Data is in the stack read it with pull.\n\n\n  \"JOE\" - Return all JOEs (Job output element) in a specified class.\n          Joes are collection of datasets. (Sdsf's O panel).\n          Call:   'ret_code = ISFPSAMC(\"JOE\",class)\n          Return: Joes are in the stack, read it with pull\n\n  \"JOS\" - Return a list of datasets of a specified JOE. (PDDBs)\n          Call:   'ret_code = ISFPSAMC(\"JOS\",joe)\n          Return: PDDBs are in stack read it with pull.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISFPSAMC": {"ttr": 2564, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x96\\x02\\x8f\\x00\\x99 o\\x051\\x02\\x93\\x00C\\x00\\x00\\xe2\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-01-28T00:00:00", "modifydate": "1999-07-25T05:31:00", "lines": 659, "newlines": 67, "modlines": 0, "user": "S80236G"}, "text": "         TITLE 'ISFPSAMC'\nISFPSAMC CSECT\n         ENTRY ISFPSAMC\n********************\n* REGISTER EQUATES *\n********************\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nISFPSAMC AMODE 31\nISFPSAMC RMODE ANY\n**********************************\n* DIRECC.                        *\n**********************************\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R02,R00\n         LR    R03,R01\n         LA    R01,1\n         LA    R11,4095(R01,R12)\n         USING ISFPSAMC,R12,R11\n         GETMAIN RU,LV=LDATA,LOC=(BELOW,ANY)\n         LR    R10,R01\n         USING DYNAREA,R10\n         LA    R13,SAVER\n         USING ENVBLOCK,R02\n         L     R8,ENVBLOCK_IRXEXTE\n         USING IRXEXTE,R8\n         L     R7,IRXEXCOM\n         ST    R7,SAV_IRXEXCOM\n         DROP  R02,R08\n**********************************\n* ESTABLECER ENTORNO REXX        *\n**********************************\n         ST    R02,REXXENT\n         USING EFPL,R03\n         L     R04,EFPLARG\n         L     R05,EFPLEVAL\n         DROP  R03\n         L     R05,0(R05)\n         ST    R05,REXXRET\n         USING ARGTABLE_ENTRY,R04\n         MVC   PJNAME,=CL8'*'\n         MVC   PUNAME,=CL8'*'\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         CLC   0(3,R05),=CL3'INI'\n         BE    GETINI\n         LA    R1,SAMPWA_N\n         ST    R1,D1\n         LA    R1,SAMPWA_L\n         ST    R1,D2\n         LA    R1,SAMPWA\n         ST    R1,D3\n         LA    R1,SAMPWA_S\n         ST    R1,D4\n         LA    R15,D1\n         BAL   R14,GETVREX\n         MVC   R_WAREA(4),SAMPWA\n         CLC   0(3,R05),=CL3'TER'\n         BE    GETTER\n         CLC   0(3,R05),=CL3'JQE'\n         BE    GETPJQE\n         CLC   0(3,R05),=CL3'JOE'\n         BE    GETPJOE\n         CLC   0(3,R05),=CL3'JDS'\n         BE    GETPJDS\n         CLC   0(3,R05),=CL3'JOS'\n         BE    GETPJOS\n         CLC   0(3,R05),=CL3'DSR'\n         BE    GETPDSR\n         CLC   0(3,R05),=CL3'JCT'\n         BE    GETPJCT\n         B     FINNOK\n**************************************\n* ESTABLECER PARAMETROS PARA GET JQE *\n**************************************\nGETPJQE  LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    GETJQE\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         C     R06,=F'8'\n         BH    FINNOK\n         BCTR  R06,R00\n         EX    R06,MOVP1\n         LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    GETJQE\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         C     R06,=F'8'\n         BH    FINNOK\n         BCTR  R06,R00\n         EX    R06,MOVP2\n**********************************\n* GETJQE                         *\n**********************************\nGETJQE   EQU   *\n         MVC   R_PARM,=CL3'JQE'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         L     R02,R_ADDR\n         L     R03,R_BUFLEN\n         L     R04,R_ELEML\n         AR    R03,R02\n         MVC   STKFUNC,=CL8'QUEUE'\n         ST    R04,STKLEN\n         MVC   STKENV,REXXENT\n         LA    R01,STKFUNC\n         ST    R01,P1\n         LA    R01,STKDAT\n         ST    R01,P2\n         LA    R01,STKLEN\n         ST    R01,P3\n         LA    R01,STKRC\n         ST    R01,P4\n         LA    R01,STKENV\n         ST    R01,P5\n         LA    R01,STKRCE\n         A     R01,=X'80000000'\n         ST    R01,P6\n         USING JQE,R02\n         LOAD  EP=IRXSTK\n         LR    R08,R00\nLOOPJQE  EQU   *\n         TM    JQETYPE,$FREE\n         BO    NJQE\n         BZ    NJQE\n         MVI   LLNGSTR,X'08'\n         MVI   LLNGPAT,X'08'\n         MVC   STR(8),JQEJNAME\n         MVC   PAT(8),PJNAME\n         LA    R05,STR\n         LA    R06,PAT\n         LA    R07,LLNGSTR\n         LA    R09,LLNGPAT\n         CALL  UTILMATC,((R05),(R06),(R07),(R09)),MF=(E,CALL1)\n         LTR   R15,R15\n         BNZ   NJQE\n         MVI   LLNGSTR,X'08'\n         MVI   LLNGPAT,X'08'\n         MVC   STR(8),JQEUSRID\n         MVC   PAT(8),PUNAME\n         LA    R05,STR\n         LA    R06,PAT\n         LA    R07,LLNGSTR\n         LA    R09,LLNGPAT\n         CALL  UTILMATC,((R05),(R06),(R07),(R09)),MF=(E,CALL1)\n         LTR   R15,R15\n         BNZ   NJQE\n         ST    R02,STKDAT\n         LA    R01,IRXSTKP\n         LR    R15,R08\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    NJQE\n         ABEND 002,DUMP\nNJQE     AR    R02,R04\n         CR    R02,R03\n         BL    LOOPJQE\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         B     EXIT\n**************************************\n* ESTABLECER PARAMETROS PARA GET JOE *\n**************************************\nGETPJOE  LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    GETJQE\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         C     R06,=F'1'\n         BNE   FINNOK\n         MVC   R_ENT(1),0(R05)\n**********************************\n* GETJOE                         *\n**********************************\nGETJOE   EQU   *\n         MVC   R_PARM,=CL3'JOE'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         L     R02,R_ADDR\n         L     R03,R_BUFEND\n         CR    R02,R03\n         BNL   NJOES\n         L     R04,R_ELEML\n         MVC   STKFUNC,=CL8'QUEUE'\n         ST    R04,STKLEN\n         MVC   STKENV,REXXENT\n         LA    R01,STKFUNC\n         ST    R01,P1\n         LA    R01,STKDAT\n         ST    R01,P2\n         LA    R01,STKLEN\n         ST    R01,P3\n         LA    R01,STKRC\n         ST    R01,P4\n         LA    R01,STKENV\n         ST    R01,P5\n         LA    R01,STKRCE\n         A     R01,=X'80000000'\n         ST    R01,P6\n         USING JQE,R02\n         LOAD  EP=IRXSTK\n         LR    R08,R00\nLOOPJOE  ST    R02,STKDAT\n         LA    R01,IRXSTKP\n         LR    R15,R08\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    NJOE\n         ABEND 011,DUMP\nNJOE     AR    R02,R04\n         CR    R02,R03\n         BL    LOOPJOE\nNJOES    L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         B     EXIT\n**************************************\n* ESTABLECER PARAMETROS PARA GET JDS *\n**************************************\nGETPJDS  LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         BCTR  R06,R00\n         EX    R06,MOVP3\n**********************************\n* GETJDS                         *\n**********************************\nGETJDS   EQU   *\n         MVC   R_PARM,=CL3'JDS'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         L     R04,R_ELEML\n         LTR   R04,R04\n         BZ    FINNOK\n         C     R04,=F'1'\n         BE    JDSERROR\n         LOAD  EP=IRXSTK\n         LR    R08,R00\n         L     R02,R_ADDR\n         L     R03,R_BUFEND\n         MVC   STKFUNC,=CL8'QUEUE'\n         ST    R04,STKLEN\n         MVC   STKENV,REXXENT\n         LA    R01,STKFUNC\n         ST    R01,P1\n         LA    R01,STKDAT\n         ST    R01,P2\n         LA    R01,STKLEN\n         ST    R01,P3\n         LA    R01,STKRC\n         ST    R01,P4\n         LA    R01,STKENV\n         ST    R01,P5\n         LA    R01,STKRCE\n         A     R01,=X'80000000'\n         ST    R01,P6\nNJDS     ST    R02,STKDAT\n         LA    R01,IRXSTKP\n         LR    R15,R08\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   ABEND6\n         AR    R02,R04\n         CR    R02,R03\n         BL    NJDS\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         B     EXIT\nABEND6   ABEND 006,DUMP\nJDSERROR EQU   *\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         MVI   WCR,C'0'\n         SR    R09,R09\n         B     EXITM\n**************************************\n* ESTABLECER PARAMETROS PARA GET JCT *\n**************************************\nGETPJCT  LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         BCTR  R06,R00\n         EX    R06,MOVP3\n**********************************\n* GETJCT                         *\n**********************************\nGETJCT   EQU   *\n         MVC   R_PARM,=CL3'JCT'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         L     R04,R_ELEML\n         LTR   R04,R04\n         BZ    FINNOK\n         C     R04,=F'1'\n         BE    JCTERROR\n         LOAD  EP=IRXSTK\n         LR    R08,R00\n         L     R02,R_ADDR\n         L     R03,R_BUFEND\n         MVC   STKFUNC,=CL8'QUEUE'\n         ST    R04,STKLEN\n         MVC   STKENV,REXXENT\n         LA    R01,STKFUNC\n         ST    R01,P1\n         LA    R01,STKDAT\n         ST    R01,P2\n         LA    R01,STKLEN\n         ST    R01,P3\n         LA    R01,STKRC\n         ST    R01,P4\n         LA    R01,STKENV\n         ST    R01,P5\n         LA    R01,STKRCE\n         A     R01,=X'80000000'\n         ST    R01,P6\n         ST    R02,STKDAT\n         LA    R01,IRXSTKP\n         LR    R15,R08\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   ABEND7\n         AR    R02,R04\n         CR    R02,R03\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         B     EXIT\nABEND7   ABEND 007,DUMP\nJCTERROR EQU   *\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         MVI   WCR,C'0'\n         SR    R09,R09\n         B     EXITM\n**************************************\n* ESTABLECER PARAMETROS PARA GET JOS *\n**************************************\nGETPJOS  LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         BCTR  R06,R00\n         EX    R06,MOVP3\n**********************************\n* GETJOS                         *\n**********************************\nGETJOS   EQU   *\n         MVC   R_PARM,=CL3'JOS'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         L     R04,R_ELEML\n         LTR   R04,R04\n         BZ    FINNOK\n         C     R04,=F'1'\n         BE    JOSERROR\n         LOAD  EP=IRXSTK\n         LR    R08,R00\n         L     R02,R_ADDR\n         L     R03,R_BUFEND\n         MVC   STKFUNC,=CL8'QUEUE'\n         ST    R04,STKLEN\n         MVC   STKENV,REXXENT\n         LA    R01,STKFUNC\n         ST    R01,P1\n         LA    R01,STKDAT\n         ST    R01,P2\n         LA    R01,STKLEN\n         ST    R01,P3\n         LA    R01,STKRC\n         ST    R01,P4\n         LA    R01,STKENV\n         ST    R01,P5\n         LA    R01,STKRCE\n         A     R01,=X'80000000'\n         ST    R01,P6\nNJOS     ST    R02,STKDAT\n         LA    R01,IRXSTKP\n         LR    R15,R08\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   ABEND12\n         AR    R02,R04\n         CR    R02,R03\n         BL    NJOS\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         B     EXIT\nABEND12  ABEND 012,DUMP\nJOSERROR EQU   *\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         MVI   WCR,C'0'\n         SR    R09,R09\n         B     EXITM\n**************************************\n* ESTABLECER PARAMETROS PARA GET DSR *\n**************************************\nGETPDSR  LA    R04,ARGTABLE_NEXT\n         L     R05,ARGTABLE_ARGSTRING_PTR\n         LTR   R05,R05\n         BM    FINNOK\n         L     R06,ARGTABLE_ARGSTRING_LENGTH\n         LTR   R06,R06\n         BZ    FINNOK\n         BCTR  R06,R00\n         EX    R06,MOVP3\n**********************************\n* GETDSR                         *\n**********************************\nGETDSR   EQU   *\n         MVC   R_PARM,=CL3'DSR'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         L     R04,R_ELEML\n         LTR   R04,R04\n         BZ    FINNOK\n         LOAD  EP=IRXSTK\n         LR    R08,R00\n         L     R02,R_ADDR\n         L     R03,R_BUFEND\n         MVC   STKFUNC,=CL8'QUEUE'\n         MVC   STKENV,REXXENT\n         LA    R01,STKFUNC\n         ST    R01,P1\n         LA    R01,STKDAT\n         ST    R01,P2\n         LA    R01,STKLEN\n         ST    R01,P3\n         LA    R01,STKRC\n         ST    R01,P4\n         LA    R01,STKENV\n         ST    R01,P5\n         LA    R01,STKRCE\n         A     R01,=X'80000000'\n         ST    R01,P6\nNDSR     SR    R05,R05\n         ICM   R05,B'0011',0(R02)\n         LA    R02,2(R02)\n         ST    R02,STKDAT\n         ST    R05,STKLEN\n         LA    R01,IRXSTKP\n         LR    R15,R08\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   ABEND6\n         AR    R02,R05\n         CR    R02,R03\n         BL    NDSR\n         L     R01,R_ADDR\n         L     R03,R_BUFLEN\n         FREEMAIN RU,LV=(R03),A=(R01)\n         B     EXIT\n**********************************\n* GETINI                         *\n**********************************\nGETINI   EQU   *\n         MVC   R_PARM,=CL3'INI'\n         XC    R_WAREA,R_WAREA\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         MVC   SAMPWA,R_WAREA\n         LA    R1,SAMPWA_N\n         ST    R1,D1\n         LA    R1,SAMPWA_L\n         ST    R1,D2\n         LA    R1,SAMPWA\n         ST    R1,D3\n         LA    R1,SAMPWA_S\n         ST    R1,D4\n         LA    R15,D1\n         BAL   R14,PUTVREX\n         B     EXIT\n**********************************\n* GETTER                         *\n**********************************\nGETTER   EQU   *\n         MVC   R_PARM,=CL3'TER'\n         LA    R01,PARM\n         LINK  EP=ISFPSAMR\n         MVC   SAMPWA,R_WAREA\n         LA    R1,SAMPWA_N\n         ST    R1,D1\n         LA    R1,SAMPWA_L\n         ST    R1,D2\n         LA    R1,SAMPWA\n         ST    R1,D3\n         LA    R1,SAMPWA_S\n         ST    R1,D4\n         LA    R15,D1\n         BAL   R14,PUTVREX\n         B     EXIT\n*************************\n* SALIDAS               *\n*************************\n         DROP  R04\nEXIT     EQU   *\n         MVI   WCR,C'1'\n         SR    R09,R09\nEXITM    EQU   *\n         L     R05,REXXRET\n         USING EVALBLOCK,R05\n         LA    R01,1\n         ST    R01,EVALBLOCK_EVLEN\n         MVC   EVALBLOCK_EVDATA(1),WCR\n         DROP  R05\n         LR    R01,R10\n         FREEMAIN RU,LV=LDATA,A=(1)\n         LR    R15,R09\n         PR\nFINNOK   LA    R09,16\n         B     EXITM\nMOVP1    MVC   PJNAME(0),0(R05)\nMOVP2    MVC   PUNAME(0),0(R05)\nMOVP3    MVC   R_ENT(0),0(R05)\n**************\n* GETVREX    *\n* R15- VAR_A *\n* R1 - LENGTH*\n**************\nGETVREX  EQU   *\n         BAKR  R14,R0\n         LA    R8,SHV1\n         USING SHVBLOCK,R8\n         MVI   SHVCODE,SHVFETCH\n         L     R1,12(R15)\n         MVC   SHVBUFL,0(R1)\n         B     SETREX\n**************\n* PUTVREX    *\n* R15- VAR_A *\n**************\nPUTVREX  EQU   *\n         BAKR  R14,R0\n         LA    R8,SHV1\n         USING SHVBLOCK,R8\n         MVI   SHVCODE,SHVSTORE\nSETREX   MVC   SHVNEXT,=F'0'\n         MVC   SHVUSER,=F'0'\n         MVC   SHVRET,=F'0'\n         L     R1,0(R15)\n         ST    R1,SHVNAMA\n         L     R1,4(R15)\n         MVC   SHVNAML,0(R1)\n         L     R1,8(R15)\n         ST    R1,SHVVALA\n         L     R1,12(R15)\n         MVC   SHVVALL,0(R1)\n         LA    R1,VP1\n         ST    R1,DD1\n         LA    R1,VP2Y3\n         ST    R1,DD2\n         ST    R1,DD3\n         LR    R1,R8\n         ST    R1,DD4\n         OI    DD4,X'80'\n         LA    R1,DD1\n         LR    R0,R9\n         L     R15,SAV_IRXEXCOM\n         BALR  R14,R15\n         L     R1,SHVVALL\n         PR\nVP1      DC    CL8'IRXEXCOM'\nVP2Y3    DC    F'0'\nSAMPWA_N DC    CL8'@SAMP_WA'\nSAMPWA_L DC    AL4(L'SAMPWA_N)\nSAMPWA_S DC    AL4(L'SAMPWA)\n**********************************\n* AREA DE TRABAJO                *\n**********************************\nDYNAREA  DSECT\nSAVER    DS    18F\nPJNAME   DS    CL8\nPUNAME   DS    CL8\nREXXENT  DS    F\nREXXRET  DS    F\nWCR      DS    C\nLLNGSTR  DS    X\nLLNGPAT  DS    X\nSTR      DS    CL256\nPAT      DS    CL256\nCALL1    CALL  ,(,,,),MF=L\nSHV1     DS    8F\nSAV_IRXEXCOM   DS   F\n* REXX\nSTKFUNC  DS    CL8\nSTKDAT   DS    F\nSTKLEN   DS    F\nSTKRC    DS    F\nSTKENV   DS    F\nSTKRCE   DS    F\nIRXSTKP  DS    0F\nP1       DS    F\nP2       DS    F\nP3       DS    F\nP4       DS    F\nP5       DS    F\nP6       DS    F\nDD1      DS    F\nDD2      DS    F\nDD3      DS    F\nDD4      DS    F\nD1       DS    F\nD2       DS    F\nD3       DS    F\nD4       DS    F\nSAMPWA   DS    F\n**********************\n* PARM AREA          *\n**********************\nPARM     DS    0D\n         ISFPSAMP\nLDATA    EQU   *-DYNAREA\n**********************************\n* MAPAS DEL SISTEMA USADOS       *\n**********************************\n         IRXENVB\n         IRXEXTE\n         IRXSHVB\n         IRXEFPL\n         IRXARGTB\n         IRXEVALB\n         $JQE\n         $HASPEQU\n         END   ISFPSAMC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISFPSAMP": {"ttr": 2821, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x96\\x03\\x0f\\x00\\x99 o\\x04R\\x00\\x0f\\x00\\n\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-01-30T00:00:00", "modifydate": "1999-07-25T04:52:00", "lines": 15, "newlines": 10, "modlines": 0, "user": "Z80236G"}, "text": "         MACRO\n&NAME    ISFPSAMP\n***************************\n* PARM AREA               *\n***************************\n         DS    0D\nR_PARM   DS    CL3                           MODULE FUNCTION\nR_ADDR   DS    F                             ADD. OF BUFFER RETURNED\nR_BUFLEN DS    F                             LENGTH OF BUFFER\nR_BUFEND DS    F                             END OF BUFFER\nR_ELEML  DS    F                             LENGTH OF ONE RECORD IN B.\nR_WAREA  DS    F                             PREVIOUS WORK AREA\nR_OTHER  DS    F                             OTHER RETURN DATA\nR_ENT    DS    100F                          DATA FROM CALLER\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ISFPSAMR": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x96\\x02\\x8f\\x00\\x99 o\\x03\\x00\\x04Y\\x01E\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1996-01-28T00:00:00", "modifydate": "1999-07-25T03:00:00", "lines": 1113, "newlines": 325, "modlines": 0, "user": "Z80236G"}, "text": "         TITLE 'ISFPSAMR'\nISFPSAMR CSECT\n         ENTRY ISFPSAMR\nISFPSAMR AMODE 31\nISFPSAMR RMODE 24\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = ISFPSAMR                                  *\n*                                                                     *\n*             DESCRIPTIVE NAME =  JES2 SPOOL/DATA STRUC. READ MODULE  *\n*                                                                     *\n*             AUTHOR = SALVADOR CARRASCO GIMENA                       *\n*             E-MAIL = SALVADOR@REDESTB.ES (LOWERCASE)                *\n*             WEB    = WWW.REDESTB.ES/PERSONAL/SALVADOR (LOWERCASE)   *\n*                                                                     *\n*             FUNCTION =                                              *\n*                PARM \"JQE\" = RETURN A BUFFER WITH ALL JQE'S IN JES.  *\n*                PARM \"JDS\" = RETURN ALL DATASETS OF A JQE SPECIFIED  *\n*                             IN R_ENT                                *\n*                PARM \"DSR\" = RETURN ALL RECORDS OF A DATASET         *\n*                             SPECIFIED IN R_ENT                      *\n*                PARM \"DS2\" = RETURN MORE RECORD FROM A DATASET       *\n*                             SPECIFIED IN R_ENT                      *\n*                PARM \"JOE\" = RETURN ALL JOES IN A CLASS SPECIFIED    *\n*                             IN R_ENT                                *\n*                PARM \"JOS\" = RETURN ALL DATASETS OF A JOE SPECIFIED  *\n*                             IN R_ENT                                *\n*                PARM \"INI\" = RETURN PROGRAM WORKAREA TO CALLER       *\n*                PARM \"TER\" = FREE WORKAREA                           *\n*                                                                     *\n*                                                                     *\n*             NOTES =                                                 *\n*                 CODE LINES = 814                                    *\n*                 DOC. LINES = 207                                    *\n*                                                                     *\n*                 RESTRICTIONS = NONE                                 *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 8  = WORK REGISTERS               *\n*                    REGISTERS 9       = PARAMETER AREA               *\n*                    REGISTERS 10      = WORK AREA                    *\n*                    REGISTER  11 & 12 = ADDRESSABILITY TO ISFPSAMR   *\n*                                        CSECT                        *\n*                    REGISTER  13      = ADDRESSIBILITY TO SAVE AREA  *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                                                                     *\n*                ATTRIBUTES = KEY 0, REENTRANT,                       *\n*                   SUPERVISOR STATE, ENABLED, NO LOCKS HELD          *\n*                                                                     *\n*             ENTRY POINTS = ISFPSAMR (ONLY ENTRY POINT)              *\n*                                                                     *\n*                LINKAGE =                                            *\n*                                                                     *\n*                                                                     *\n*             INPUT = REG1 POINTS TO USER SUPLIED DATA, MAPPED        *\n*                     BY ISFPSAMP                                     *\n*                                                                     *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA PR                   *\n*                                                                     *\n*                OUTPUT = DATA IN USER SUPLIED AREA                   *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXIT - ERROR = ABEND                                    *\n*                                                                     *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                DATA AREAS = ISFPSAMP                                *\n*                                                                     *\n*                CONTROL BLOCKS = VARIOUS MVS/JES2.                   *\n*                                 SEE BOOTOM OF CODE.                 *\n*                                                                     *\n*             ABEND CODES = 001 - NOT AUTHORIZED                      *\n*                           003 - DYNALLOC ERROR (ALLOC)              *\n*                           004 - DYNALLOC ERROR (UNALLOC)            *\n*                           005 - INVALID PARM                        *\n*                           007 - SPOOL VOLUME NOT CONTROLED          *\n*                                                                     *\n***********************************************************************\n*----------------------------------------------------------------------\n* PROLOG.\n* THIS PROGRAM MUST RUN AUTHORIZED, I USE EXT-SVC(109) SUBCODE 200\n* TO SWITCH TO SUPERVISOR MODE.\n* SEE IGX00200 FOR MORE INFORMATION.\n*----------------------------------------------------------------------\n         COPY $HASPGBL\n         USING ISFPSAMR,R15                  TEMP BASE REGISTER\n*----------------------------------------------------------------------\n* ESTABLISH ADDRESSING FOR MODULE\n*----------------------------------------------------------------------\nSTART001 DS    0H\n         BAKR  R14,0                         SAVE CALLING REGISTERS\n         LR    R12,R15                       LOAD NEW BASE REG.\n         DROP  R15                           DROP OLD BASE REG.\n         LR    R9,R1                         LOAD PARM ADD. REG.\n         LA    R1,1                          4096-4095\n         LA    R11,4095(R1,R12)              LOAD BASE+4096\n         USING ISFPSAMR,R12,R11              R11-12, BASE REG.\n         USING PARM,R9                       ESTABLISH ADD.\n         CLC   R_WAREA,=F'0'                 USER PROVIDE A WORK AREA\n         BE    GETWAREA                      NO, GETMAIN IT\n         L     R10,R_WAREA                   YES, USE IT\n         B     BEGIN                         START PROGRAM\nGETWAREA GETMAIN RU,LV=LDATA,LOC=(BELOW,ANY) GETMAIN WORK AREA\n         LR    R10,R1                        R10, WORK AREA ADD. REG.\n         USING DYNAREA,R10                   ESTABLISH ADD.\n         XC    STATUS,STATUS                 CLEAR STATUS\nBEGIN    LA    R13,SAVER                     OBVIOUS\n*----------------------------------------------------------------------\n* MAIN PROCEDURE\n*----------------------------------------------------------------------\nMAIN     EQU   *\n         BAL   R14,GETMEM                    GET SOME JES2 DATA\n         CLC   R_PARM,=CL3'JQE'              USER REQUIRE JQE'S?\n         BNE   NP                            NO, GO NEXT OPT.\n         BAL   R14,READJQE                   GO READ JQE'S\n         B     EXIT                          RETURN TO CALLER.\nNP       CLC   R_PARM,=CL3'JDS'              USER REQUIRE JDS'S?\n         BNE   NP1                           NO, GO NEXT OPT.\n         MVI   OPT,C'F'                      FULL DATASET LIST\n         BAL   R14,READJDS                   GO READ JDS'S.\n         B     EXIT                          RETURN TO CALLER.\nNP1      CLC   R_PARM,=CL3'DSR'              USER REQUIRE DSR?\n         BNE   NP2                           NO, GO NEXT OPT.\n         MVI   OPT,C'F'                      FULL DATASET\n         BAL   R14,READDSR                   GO READ DSR.\n         B     EXIT                          RETURN TO CALLER.\nNP2      CLC   R_PARM,=CL3'JOE'              USER REQUIRE JOE'S?\n         BNE   NP3                           NO, GO NEXT OPT.\n         BAL   R14,READJOE                   GO READ JOE'S.\n         B     EXIT                          RETURN TO CALLER.\nNP3      CLC   R_PARM,=CL3'JOS'              USER REQUIRE JOS'S?\n         BNE   NP4                           NO, GO NEXT OPT.\n         MVI   OPT,C'O'                      JOES ONLY DATASETS\n         BAL   R14,READJDS                   GO READ JOS'S.\n         B     EXIT                          RETURN TO CALLER.\nNP4      CLC   R_PARM,=CL3'DS2'              USER REQUIRE DS2?\n         BNE   NP5                           NO, GO NEXT OPT\n         MVI   OPT,C'M'                      MODE DATASET RECORDS\n         BAL   R14,READDSR                   GO READ DSR.\n         B     EXIT                          RETURN TO CALLER.\nNP5      CLC   R_PARM,=CL3'JCT'              USER REQUIRE JCT?\n         BNE   NP6                           NO, BAD PARM\n         BAL   R14,READJCT                   READ JCT\n         B     EXIT                          RETURN TO CALLER.\nNP6      CLC   R_PARM,=CL3'INI'              USER REQUIRE INIT?\n         BNE   NP7                           NO, GO NEXT OPT\n         BAL   R14,OPSPL                     OPEN SPOOL\n         ST    R10,R_WAREA                   SAVE WORK AREA\n         B     EXIT                          RETURN TO CALLER.\nNP7      CLC   R_PARM,=CL3'TER'              USER REQUIRE TERM?\n         BNE   PARMM                         NO, BAD PARM\n         BAL   R14,CLSPL                     CLOSE SPOOL\n         XC    R_WAREA,R_WAREA               CLEAR USER PTR WORKAREA\n         B     EXIT                          RETURN TO CALLER.\nEXIT     EQU   *                             RETURN TO CALLER.\n         CLC   R_WAREA,=F'0'                 USER PROVIDE A WORK AREA\n         BNE   EXIT1                         YES, DO NOT CLOSE/FREE\n         BAL   R14,CLSPL                     CLOSE SPOOL\n         FREEMAIN RU,LV=LDATA,A=(R10)        FREE WORK AREA.\nEXIT1    SLR   R15,R15                       RC = 0\n         PR                                  RETURN\nPARMM    ABEND 005,DUMP                      BAD PARM\n*----------------------------------------------------------------------\n* READJQE\n* GET ALL JQE'S IN JES2.\n* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH JQE'S DATA.\n* CALLER MUST FREE THIS AREA.\n*----------------------------------------------------------------------\nREADJQE  EQU   *\n         ST    R14,READJQES                  SAVE RETURN ADD.\n         L     R2,BUFJQE                     GET BUFFER LENGTH\n         ST    R2,R_BUFLEN                   SAVE BUFFER LENGTH\n         GETMAIN RU,LV=(R2),LOC=BELOW        GETMAIN BUFFER.\n         LR    R6,R1                         SAVE ADD.\n         ST    R6,R_ADDR                     SAVE ADD. FOR CALLER.\n         BAL   R14,SETXM                     GO TO X-MEM\n         LR    R1,R6                         LOAD PTR.\n         L     R2,PTRJQE                     LOAD JES2 PTR TO JQE'S\n         L     R3,BUFJQE                     LOAD TOTAL LENGTH TO COPY\n         LA    R15,256                       MAX COPY IN ONE STEP\n         LA    R0,16                         JES2 PSW KEY\nCMAS     MVCP  0(R3,R1),0(R2),R0             COPY DATA\n         BC    8,READJQE1                    END OF COPY ?\n         AR    R1,R15                        NO, ADD 256 TO OUT PTR.\n         AR    R2,R15                        ADD 256 TO IN PTR\n         SR    R3,R15                        TOTAL LENGTH-COPIED LEN.\n         B     CMAS                          COPY MORE DATA\nREADJQE1 EQU   *                             END OF COPY\n         BAL   R14,RSETXM                    RESET X-MEM\n         LH    R4,LENJQE                     LOAD ONE JQE LENGTH\n         ST    R4,R_ELEML                    SAVE IT FOR CALLER\n         L     R14,READJQES                  LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* READJDS\n* GET ALL DATASET IN A JQE/JOE.\n* CALLER MUST PROVIDE A JQE/JOE IN R_ENT.\n* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH DATASETS LIST.\n* CALLER MUST FREE THIS AREA.\n*----------------------------------------------------------------------\nREADJDS  EQU   *\n         ST    R14,READJDSS                  SAVE RETURN ADD.\n         LH    R2,WBUFFS                     SYS1.HASPACE BLKSIZE\n         GETMAIN RU,LV=(R2),LOC=BELOW        GET SPACE FOR BUFFER\n         ST    R1,WBUFFA                     SAVE BUFFER ADD.\n         LA    R1,PDBLENG                    LOAD PDBLENG\n         LA    R15,1000                      GET 1000 DATASET MAX.\n         MR    R0,R15                        GET TOTAL AREA LENGTH\n         ST    R1,WJDSS                      SAVE LENGTH\n         GETMAIN RU,LV=(R1),LOC=(ANY,ANY)    GETMAIN BUFFER\n         ST    R1,WJDSA                      SAVE ADD.\n         A     R1,WJDSS                      ADD LENGTH.\n         ST    R1,WJDSE                      SAVE END OF AREA.\n         BAL   R14,OPSPL                     GO TO OPEN SPOOL.\n         L     R8,WJDSA                      RECALL ADD.\n         XC    WSPIOT,WSPIOT                 CLEAR SPIN IOT SAVER\n         CLI   OPT,C'F'                      JQE ?\n         BE    RJQE                          YES\n         LA    R2,R_ENT                      LOAD CALLER JOE\n         USING JOE,R2                        ESTABLISH ADD.\n         L     R3,JOEIOTTR                   LOAD IOT MTTR\n         MVC   WOUTGNAM,JOENAME              SAVE JOENAME\n         B     DIOT                          READ IOT\n         DROP  R2                            END JOE PROC.\nRJQE     LA    R2,R_ENT                      ADD. OF USER SUP. JQE\n         USING JQE,R2                        ESTABLISH ADD.\n         L     R3,JQETRAK                    GET JQETRAK (MTTR)\n         LTR   R3,R3                         IS MTTR OK ?\n         BZ    ENDJDS                        NO, NO JCT AVAILABLE\n         TM    JQEFLAG3,JQE3SYSD             IS SPECIAL SYSTEM JQE?\n         BO    DIOT                          YES, GO READ IOT\n         DROP  R2                            END OF JQE PROCCESS.\n         BAL   R14,SPREAD                    READ BLOCK.\n         CLC   JCTID-JCTSTART(4,R7),=CL4'JCT ' IS A JCT BLOCK ?\n         BNE   ENDJDS                        NO, NO JCT AVAILABLE\n         L     R3,JCTSPIOT-JCTSTART(R7)      YES, SAVE SPIN IOT\n         ST    R3,WSPIOT                     SAVE IT\n         L     R3,JCTIOT-JCTSTART(R7)        LOAD IOT MTTR.\n         LTR   R3,R3                         OK ?\n         BZ    ENDJDS                        NO, NO JCT AVAILABLE\nDIOT     BAL   R14,SPREAD                    READ IOT\n         MVC   WGAT,IOTTGATR-IOTSTART(R7)    SAVE GAT IOT\nLOOPIOT  CLC   IOTID-IOTSTART(4,R7),=CL4'IOT ' IOT OK ?\n         BNE   ENDJDS                        NO, NO JCT/IOT AVAILABLE\n         BAL   R14,COPYPDDB                  COPY VALID PDDBS\n         L     R3,IOTIOTTR-IOTSTART(R7)      NEXT IOT\n         LTR   R3,R3                         IF IOT OK ?\n         BZ    FINIOT                        NO, END OF IOT\n         BAL   R14,SPREAD                    YES, READ IT\n         B     LOOPIOT                       PROCESS IT\nFINIOT   EQU   *                             END OF IOT\n         L     R3,WGAT                       LOAD SAVED IOTGAT\nLOOPIOTS LTR   R3,R3                         IS OK ?\n         BZ    NMIOTS                        NO, NO MORE IOTS\n         BAL   R14,SPREAD                    YES, READ IT\n         CLC   IOTID-IOTSTART(4,R7),=CL4'IOT ' IS OK ?\n         BNE   ENDJDS                        NO, NO MORE IOTS\n         BAL   R14,COPYPDDB                  YES, COPY DATASETS\n         L     R3,IOTTGATR-IOTSTART(R7)      NEXT IOT GAT\n         B     LOOPIOTS                      PROCESS\nNMIOTS   L     R3,WSPIOT                     PROCESS SPIN IOT\n         LTR   R3,R3                         IS OK ?\n         BZ    ENDJDS                        NO, END OF PROCESS\n         BAL   R14,SPREAD                    YES, READ IT\n         CLC   IOTID-IOTSTART(4,R7),=CL4'IOT ' IOT OK ?\n         BNE   ENDJDS                        NO, END OF PROCESS\n         BAL   R14,COPYPDDB                  COPY IT\nENDJDS   LA    R1,PDBLENG                    GET PDDB LENGTH\n         ST    R1,R_ELEML                    SAVE FOR CALLER\n         ST    R8,R_BUFEND                   SAVE BUFFER END\n         L     R8,WJDSA                      LOAD BUFFER START\n         ST    R8,R_ADDR                     SAVE IT\n         L     R1,WJDSS                      LOAD BUFFER LENGTH\n         ST    R1,R_BUFLEN                   SAVE IT\n         L     R1,WBUFFA                     LOAD BUFFER ADD.\n         LH    R2,WBUFFS                     LOAD BUFFER LENGTH\n         FREEMAIN RU,LV=(R2),A=(R1)          FREE BUFFER\n         L     R14,READJDSS                  GET RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* READJCT\n* GET A JCT OF A JQE\n* CALLER MUST PROVIDE A JQE IN R_ENT.\n* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH JCT AREA.\n* CALLER MUST FREE THIS AREA.\n*----------------------------------------------------------------------\nREADJCT  EQU   *\n         ST    R14,READJCTS                  SAVE RETURN ADD.\n         LH    R2,WBUFFS                     SYS1.HASPACE BLKSIZE\n         GETMAIN RU,LV=(R2),LOC=BELOW        GET SPACE FOR BUFFER\n         ST    R1,WBUFFA                     SAVE BUFFER ADD.\n         LA    R1,4095                       LOAD LENGTH OF JCT\n         ST    R1,WJCTS                      SAVE LENGTH\n         GETMAIN RU,LV=(R1),LOC=(ANY,ANY)    GETMAIN BUFFER\n         ST    R1,WJCTA                      SAVE ADD.\n         A     R1,WJCTS                      ADD LENGTH.\n         ST    R1,WJCTE                      SAVE END OF AREA.\n         BAL   R14,OPSPL                     GO TO OPEN SPOOL.\n         L     R8,WJCTA                      RECALL ADD.\n         LA    R2,R_ENT                      ADD. OF USER SUP. JQE\n         SR    R1,R1                         LENGTH\n         USING JQE,R2                        ESTABLISH ADD.\n         L     R3,JQETRAK                    GET JQETRAK (MTTR)\n         LTR   R3,R3                         IS MTTR OK ?\n         BZ    ENDJCT                        NO, NO JCT AVAILABLE\n         TM    JQEFLAG3,JQE3SYSD             IS SPECIAL SYSTEM JQE?\n         BO    ENDJCT                        YES, GO READ IOT\n         DROP  R2                            END OF JQE PROCCESS.\n         BAL   R14,SPREAD                    READ BLOCK.\n         SR    R1,R1\n         CLC   JCTID-JCTSTART(4,R7),=CL4'JCT ' IS A JCT BLOCK ?\n         BNE   ENDJCT                        NO, NO JCT AVAILABLE\n         LH    R1,JCTLENG-JCTSTART(R7)       YES, GET LENGTH\n         LR    R2,R1                         SAVE LENGTH\n         LR    R15,R1                        COPY LENGTH\n         LR    R0,R8                         GET ADD OF BUFFER\n         LR    R14,R7                        GET ADD OF JCT\n         MVCL  R0,R14                        COPY\n         AR    R8,R2                         END OF JCT\n         LR    R1,R2                         RESTORE LENGTH\nENDJCT   ST    R1,R_ELEML                    SAVE FOR CALLER\n         ST    R8,R_BUFEND                   SAVE BUFFER END\n         L     R8,WJCTA                      LOAD BUFFER START\n         ST    R8,R_ADDR                     SAVE IT\n         L     R1,WJCTS                      LOAD BUFFER LENGTH\n         ST    R1,R_BUFLEN                   SAVE IT\n         L     R1,WBUFFA                     LOAD BUFFER ADD.\n         LH    R2,WBUFFS                     LOAD BUFFER LENGTH\n         FREEMAIN RU,LV=(R2),A=(R1)          FREE BUFFER\n         L     R14,READJCTS                  GET RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* COPYPDDB\n* COPY ALL VALID PDDB IN IOT TO BUFFER.\n* R7 => BLK, R8 => BUFFADD\n*----------------------------------------------------------------------\nCOPYPDDB EQU   *\n         ST    R14,COPYPDDS                  SAVE RETURN ADD.\n         L     R4,IOTPDDB-IOTSTART(R7)       OFFSET FIRST PDDB IN IOT\n         L     R2,IOTPDDBP-IOTSTART(R7)      OFFSET LAST PDDB IN IOT\n         S     R4,=AL4(IOTSTART-IOT)         SUBS HEADER\n         S     R2,=AL4(IOTSTART-IOT)         SUBS HEADER\n         AR    R4,R7                         POINT TO PDDB\n         AR    R2,R7                         POINT TO LAST PDDB\n         USING PDB,R4                        ESTABLISH ADD.\nLOOPPDB  NC    PDBMTTR,PDBMTTR               MTTR OK ?\n         BZ    PDDBNEXT                      NO, GO TO NEXT\n         CLI   OPT,C'F'                      FULL DATASET LIST ?\n         BE    COPYIT                        COPY IT\n         CLC   WOUTGNAM,PDBNAME              IS A JOE DATASET ?\n         BNE   PDDBNEXT                      NO, SKIP IT\nCOPYIT   LA    R1,PDBLENG                    YES, GET LENGTH\n         LR    R15,R1                        COPY LENGTH\n         LR    R0,R8                         GET ADD OF BUFFER\n         LR    R14,R4                        GET ADD OF PDDB\n         MVCL  R0,R14                        COPY\n         LA    R8,PDBLENG(R8)                NEXT BUFFER POS.\n         C     R8,WJDSE                      AT END OF BUFFER ?\n         BNL   COPYPDDR                      YES, NO MORE COPIES\nPDDBNEXT LA    R4,PDBLENG(R4)                NEXT PDDB IN BLOCK\n         CR    R4,R2                         MORE PDDB IN BLOCK ?\n         BL    LOOPPDB                       YES, GO TO GET IT\n         DROP  R4                            END\nCOPYPDDR L     R14,COPYPDDS                  LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* READJOE\n* GET ALL JOE'S IN CLASS (R_ENT) PASSED BY CALLER.\n* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH JOE'S DATA.\n* CALLER MUST FREE THIS AREA.\n*----------------------------------------------------------------------\nREADJOE  EQU   *\n         ST    R14,READJOES                  SAVE RETURN ADDRESS\n         L     R1,JOEMAX                     MAX NUM. OF JOES\n         LA    R15,JOESIZE                   JOE SIZE.\n         MR    R0,R15                        TOTAL SIZE JOE TABLE.\n         LR    R2,R1                         SAVE IT\n         ST    R2,R_BUFLEN                   SAVE TOTAL SIZE JOE TABLE.\n         GETMAIN RU,LV=(R2),LOC=ANY          GETMAIN BUFFER.\n         LR    R6,R1                         BUFFER ADDRESS.\n         ST    R6,R_ADDR                     SAVE BUFFER ADDRESS.\n         BAL   R14,SETXM                     SWITCH TO X-MEM.\n         L     R2,PTRJOT                     LOAD JES2 PTR TO JOT\n         LA    R15,JOTCLSQ-JOT(R2)           ADD. OF JOT CLASSES PTRS.\n         TR    R_ENT(1),TRANSCL              TRANSLATE USER. SUP. CLASS\n         SR    R1,R1                         ZERO R1\n         ICM   R1,B'0001',R_ENT              LOAD USER. SUP. CLASS.\n         LA    R3,12                         LENGTH CLASS DESCRIP.\n         MR    R0,R3                         OFFSET USER CLASS.\n         AR    R15,R1                        ADD TO BASE ADDRESS.\n         LA    R0,16                         JES2 PSW KEY.\n         LA    R3,4                          LENGTH FOR MOVE TO PRIMARY\n         MVCP  NJOE(R3),0(R15),R0            MOVE POINTER.\n         L     R1,NJOE                       LOAD JOE POINTER.\n         LTR   R1,R1                         IS ZERO?\n         BZ    NMJOESP                       YES, NO MORE JOES.\nNJOES    LR    R4,R2                         LOAD PTR TO JOT.\n         AR    R4,R1                         ADD OFFSET OF CLASS REQ.\n         LA    R0,16                         JES2 PSW KEY.\n         LA    R3,JOESIZE                    GET JOE SIZE.\n         MVCP  0(R3,R6),0(R4),R0             COPY JOE.\n         SR    R1,R1                         ZERO R1\n         ICM   R1,B'0111',1(R6)              GET NEXT JOE ADD.\n         LTR   R1,R1                         IS ZERO ?\n         BZ    NMJOES                        YES, GO NO MORE JOES.\n         AR    R6,R3                         NEXT BUFFER RECORD.\n         B     NJOES                         GET MORE JOES.\nNMJOES   DS    0H                            NO MORE JOES.\n         AR    R6,R3                         END OF BUFFER.\nNMJOESP  ST    R6,R_BUFEND                   SAVE END OF BUFFER.\n         BAL   R14,RSETXM                    NO MORE X-MEM.\n         LA    R4,JOESIZE                    LOAD JOESIZE\n         ST    R4,R_ELEML                    SAVE JOESIZE\n         L     R14,READJOES                  RETURN ADD.\n         BR    R14                           END\n*----------------------------------------------------------------------\n* READDSR\n* READ SOOLED DATA SET\n* USER MUST PORVIDE A PDDB IN R_ENT.\n* GETMAIN A BUFFER AND RETURN IT TO CALLER WITH DATASET RECORDS.\n* CALLER MUST FREE THIS AREA.\n*----------------------------------------------------------------------\nREADDSR  EQU   *\n         ST    R14,READDSRS                  SAVE RETURN ADD.\n         LH    R2,WBUFFS                     LOAD HASPACE BLKSIZE LEN\n         GETMAIN RU,LV=(R2),LOC=BELOW        GETMAIN BUFFER\n         ST    R1,WBUFFA                     SAVE BUFF. ADD.\n         LA    R1,R_ENT                      LOAD PDDB USER AREA\n         USING PDB,R1                        ESTABLISH ADD.\n         L     R2,PDBBYTCT                   LOAD DATASET BYTE COUNT\n         DROP  R1                            END PDDB ADD.\n         A     R2,=X'0000FFFF'               ADD 64 K\n         L     R1,=X'000FFFFF'               1 MGB.\n         CR    R2,R1                         COMPARE LENGTH+64, 1 MG\n         BL    DSRGETM                       LOW, GO GET IT\n         LR    R2,R1                         HIGH, GET 1 MG ONLY\nDSRGETM  ST    R2,R_BUFLEN                   SAVE LENGTH\n         GETMAIN RU,LV=(R2),LOC=(ANY,ANY)    GET BUFFER\n         ST    R1,R_ADDR                     SAVE ADD.\n         AR    R1,R2                         ADD LENGTH\n         ST    R1,WJDSE                      SAVE BUFFER END\n         BAL   R14,OPSPL                     OPEN SPOOL VOLUMES\n         L     R8,R_ADDR                     LOAD START OF BUFFER\n         LA    R2,R_ENT                      LOAD PDDB USER AREA\n         USING PDB,R2                        ESTABLISH ADD.\n         MVC   WDSKEY,PDBDSKEY               SAVE DATASET KEY\n         CLI   OPT,C'F'                      FULL DATASET ?\n         BE    DSRFULL                       YES, GET START\n         L     R3,R_OTHER                    GET SAVED LAST BLOCK\n         B     DSRRBR                        PROCESS PARTIAL\nDSRFULL  L     R3,PDBMTTR                    LOAD MTTR\nDSRRBR   ST    R3,WSR03                      SAVE CURRENT BLK MTTR\n         ST    R8,WCHECK                     SAVE LAST CHECK ADD.\n         BAL   R14,SPREAD                    READ BLOCK\n         USING BUFSTART,R7                   ESTABLISH ADD.\n         LA    R4,HDBSTART                   LOAD HDBSTART ADD.\n         CLC   WDSKEY,HDBDSKEY               KEY MATCH ?\n         BNE   DSREND                        NO, RETURN\n         USING LRC,R4                        ESTABLISH ADD.\nDSRNR    CLI   LRCTLENG,LRCBFEND             AT END OF BLOCK ?\n         BE    DSRNB                         YES, GO FOR NEXT BLOCK\n         TM    LRCFLAG1,LRC1SPAN             SPANNED RECORD ?\n         BO    DSRSPAN                       YES, GO PROCESS IT\n         SR    R1,R1                         ZERO R1\n         ICM   R1,B'0001',LRCTLENG           LOAD RECORD LEN\n         TM    LRCFLAG1,LRC1CCTL             CONTROL CHAR ?\n         BZ    N1                            NO, PROCESS IT\n         LA    R1,1(R1)                      YES, SKIP IT\nN1       TM    LRCFLAG1,LRC1ONUL             NULL RECORD ?\n         BO    NULO                          YES, SKIP IT\n         LA    R6,2(R1,R8)                   NO, LOAD STORE ADD.\n         C     R6,WJDSE                      AT END OF BUFFER?\n         BNL   NOSPC                         YES, BUFFER FULL\n         STCM  R1,B'0011',0(R8)              NO, SAVE RECORD LEN\n         BCTR  R1,R0                         ADJUST LENGTH\n         EX    R1,MOVTXT                     MOVE RECORD\n         LR    R8,R6                         ADD. NEXT RECORD BUFFER\n         AR    R4,R1                         ADD. NEXT RECORD SPOOL\n         LA    R4,4(R4)                      SKIP HEADER\n         B     DSRNR                         GO FOR NEXT RECORD\nNULO     AR    R4,R1                         SKIP RECORD\n         LA    R4,3(R4)                      SKIP HEADER\n         B     DSRNR                         GO FOR NEXT RECORD\nMOVTXT   MVC   2(0,R8),LRCTEXT               MVC TARGET INSTRUC.\nDSRSPAN  EQU   *                             PROCESS SPANNED REC.\n         LH    R1,LRCSEGL                    LOAD LENGTH\n         TM    LRCFLAG1,LRC1CCTL             CONTROL CHAR ?\n         BZ    N2                            NO, PROCESS.\n         LA    R1,1(R1)                      YES, SKIP IT\nN2       TM    LRCFLAG1,LRC1SBGN             SPAN REC BEGIN ?\n         BO    DSRSPAN1                      YES, PROCESS IT\n         TM    LRCFLAG1,LRC1SMID             SPAN REC MIDLE ?\n         BO    DSRSPAN2                      YES, PROCESS IT\n         B     DSRSPAN3                      NO, FINISH SPAN REC\nDSRSPAN1 EQU   *                             PROCESS BEGIN SPAN REC\n         LA    R6,2(R1,R8)                   LOAD END OF TEXT TARGET\n         C     R6,WJDSE                      AT END OF BUFFER ?\n         BNL   NOSPC                         YES, NO SPACE IN BUFF.\n         ST    R1,WLENS                      SAVE LENGTH OF REC\n         ST    R8,WLENA                      SAVE ADD.\n         STCM  R1,B'0011',0(R8)              SAVE TOTAL LENGTH\n         LR    R15,R1                        LOAD LENGTH\n         LA    R0,2(R8)                      LOAD TARGET ADD.\n         LA    R14,LRCSFTXT                  LOAD SOURCE ADD.\n         MVCL  R0,R14                        COPY TEXT\n         LR    R8,R6                         POINT END OF RECORD.\n         A     R4,WLENS                      ADD LENGTH\n         LA    R4,6(R4)                      SKIP HEADER\n         B     DSRNR                         NEXT RECORD\nDSRSPAN2 EQU   *                             PROCESS MIDLE SPAN RECORD\n         LA    R6,0(R1,R8)                   LOAD END OF TARGET ADD.\n         C     R6,WJDSE                      AT END OF BUFFER ?\n         BNL   NOSPC                         YES, NO SPACE IN BUFF\n         LR    R0,R1                         LOAD LENGTH\n         A     R0,WLENS                      ADD TO CURRENT LENGTH\n         ST    R0,WLENS                      SAVE TOTAL LENGTH\n         LR    R15,R1                        LOAD LENGTH\n         LR    R0,R8                         LOAD TARGET ADD.\n         LR    R8,R1                         SAVE LENGTH\n         LA    R14,LRCSTEXT                  LOAD SOURCE ADD.\n         MVCL  R0,R14                        COPY TEXT\n         AR    R4,R8                         ADD LENGTH TO SOURCE ADD.\n         LR    R8,R6                         POINT TO END OF RECORD\n         LA    R4,4(R4)                      SKIP HEADER\n         B     DSRNR                         NEXT RECORD\nDSRSPAN3 EQU   *                             PROCESS END SPAN RECORD\n         LA    R6,0(R1,R8)                   LOAD END TARGET ADD.\n         C     R6,WJDSE                      AT END OF BUFFER ?\n         BNL   NOSPC                         YES, END OF BUFFER\n         LR    R0,R1                         LOAD LENGTH\n         A     R0,WLENS                      ADD TO CURRENT LENGTH\n         L     R15,WLENA                     LOAD LENGTH ADD.\n         STCM  R0,B'0011',0(R15)             SAVE TOTAL LENGTH\n         LR    R15,R1                        LOAD LENGTH\n         LR    R0,R8                         LOAD TARGET ADD.\n         LR    R8,R1                         SAVE LENGTH\n         LA    R14,LRCSTEXT                  LOAD SOURCE ADD.\n         MVCL  R0,R14                        COPY TEXT\n         AR    R4,R8                         POINT NEXT RECORD\n         LR    R8,R6                         LOAD END OF TARGET\n         LA    R4,4(R4)                      SKIP HEADER\n         B     DSRNR                         NEXT RECORD\nDSRNB    EQU   *                             END OF BLOCK\n         L     R3,HDBNXTRK                   LOAD NEXT BLOCK ADD.\n         LTR   R3,R3                         IS OK ?\n         BZ    DSREND                        NO, END OF DATASET\n         B     DSRRBR                        YES, PROCESS IT.\n         DROP  R2,R4,R7                      END OF PROCESSING\nNOSPC    EQU   *                             NO MORE SPACE IN BUFFER\n         MVC   R_ELEML,=F'0'                 SET RETURN CODE 0=PARTIAL\n         MVC   R_BUFEND,WCHECK               SAVE LAST CHECK ADD.\n         MVC   R_OTHER,WSR03                 SAVE LAST BLOCK PROCESED\n         B     DSRRET                        RETURN\nDSREND   EQU   *                             END OF DATASET\n         ST    R8,R_BUFEND                   SAVE END OF BUFFER\n         MVC   R_ELEML,=F'1'                 SET RETURN CODE 1=FULL\nDSRRET   L     R1,WBUFFA                     LOAD BUFFER ADD.\n         LH    R2,WBUFFS                     LOAD BUFFER LENGTH\n         FREEMAIN RU,LV=(R2),A=(R1)          FREE IT\n         L     R14,READDSRS                  LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* SPREAD\n* READ SPOOL BLOCK.\n* R3 CONTAINS MTTRR TO BE READ.\n*----------------------------------------------------------------------\nSPREAD   EQU   *\n         ST    R14,SPREADS                   SAVE RETURN ADD.\n         ST    R8,WSR08                      SAVE R8\n         LR    R2,R3                         COPY MTTR\n         LR    R1,R2                         GET MTTR\n         SRL   R1,24                         MTTR => 0000M\n         CH    R1,WSPNUM                     OK ?\n         BH    ABEND7                        NO, BAD VOLUME NUMBER.\n         M     R0,=AL4(WSPL)                 GET WSP ADDR FOR THIS VOL.\n         C     R1,WSPPTL                     IS OK?\n         BNL   ABEND7                        NO, BAD VOLUME NUMBER.\n         L     R3,WSPPTRS                    LOAD START OF WSP\n         AR    R3,R1                         ADD OFFSET OF VOLUME\n         USING WSP,R3                        ESTABLISH ADD.\n         CLI   WSPVAL,C'S'                   IS OK ?\n         BNE   ABEND7                        NO, BAD VOLUME NUMBER.\n         L     R15,WSPTRK                    LOAD TRK/CYL\n         LR    R1,R2                         GET MTTR\n         SLL   R1,8                          MTTR = TTR0\n         SRL   R1,16                         TTR0 = 000TT\n         SR    R0,R0                         ZERO R0\n         DR    R0,R15                        TT/(TRK/CYL)\n         XC    WSPCHHR,WSPCHHR               CLEAR WORK CHHR\n         STCM  R1,B'0011',WSPCHHR+3          SET CC\n         STCM  R0,B'0011',WSPCHHR+5          SET HH\n         STC   R2,WSPCHHR+7                  SET R\n         LA    R5,WSPDECBI                   LOAD ADD. OF DECB\n         LA    R6,WSPDCB                     LOAD ADD. OF DCB\n         L     R7,WBUFFA                     LOAD ADD. OF BUFFER\n         LA    R8,WSPCHHR                    LOAD ADD. OF CCHHR\n         LA    R1,L24B02                     LOAD A 24 BIT ADDRESS\n         BSM   0,R1                          SET MODE 24\nL24B02   EQU   *                             24 BIT ADDRESS\n         READ  (R5),DI,(R6),(R7),'S',0,(R8),MF=E MAKE READ\n         CHECK (R5)                          CHECK IT\n         LA    R1,L31B01                     LOAD LABEL\n         O     R1,=X'80000000'               MAKE 31 BIT ADDRESS\n         BSM   0,R1                          SET MODE 31\nL31B01   EQU   *                             31 BIT ADDRESS\n         L     R14,SPREADS                   LOAD RETURN ADD.\n         DROP  R3                            END\n         L     R8,WSR08                      RECALL R8\n         BR    R14                           RETURN\nABEND7   ABEND 007,DUMP                      BAD SPOOL VOLUME\n*----------------------------------------------------------------------\n* OPSPL\n* MAKE WSP AREA. WSP AREA CONTAIN ONE RECORD FOR EACH SPOOL VOLUME.\n* EACH WSP RECORD CONTAINS SOMES ADDRESS, DDNAME, DCB, ETC..\n* ALLOC AND OPEN ALL SPOOL VOLUMES\n*----------------------------------------------------------------------\nOPSPL    EQU   *\n         ST    R14,OPSPLS                    SAVE RETURN ADD.\n         TM    STATUS,ISSPOPEN               IS SPOOL YET OPEN ?\n         BNZR  R14                           YES, DO NOT OPEN\n         LH    R1,WSPNUM                     GET SPOOL VOLUMES NUMBER\n         M     R0,=AL4(WSPL)                 GET WSP TOTAL LENGTH\n         LR    R2,R1                         SAVE IT\n         GETMAIN RU,LV=(R2),LOC=BELOW        GETMAIN BUFFER\n         ST    R1,WSPPTRS                    SAVE PTR\n         ST    R2,WSPPTL                     SAVE LENGTH\n         BAL   R14,SETXM                     GO FOR X-MEM\n         LH    R4,WSPNUM                     GET SPOOL VOLUMES NUMBER\n         L     R2,PTRDAS                     LOAD PTR TO DAS\n         L     R8,WSPPTRS                    LOAD START OF WSP\n         USING DAS,R2                        ESTABLISH ADD.\n         USING WSP,R8                        =\n         A     R2,=F'24'                     SKIP DAS HEADER.\n* HERE, I HAD A PROBLEM WITH DAS HEADER. JES2 DATA AREAS BOOK SAY THAT\n* IF YOU WANT TO READ DAS DATA, YOU MUST SKIP A \"EIGHTEEN\" BYTES HEADER\n* I TRIED IT WITH A LOT ASSEMBLING, DEBUGING, TESTING, ABENDS. AND\n* FINALLY I DISCOVER THAT DATA AREAS BOOK WAS SPEAKING ABOUT \"EIGHTEEN\"\n* IN HEXADECIMAL, 24 IN DECIMAL.\n* I FOUND OTHERS ERRORS IN JES2 DATA AREAS BOOK (V4.2).\nNDAS     LA    R0,16                         JES2 PSW KEY\n         LA    R3,1                          LENGTH\n         MVCP  WDASFLG(R3),DASFLAG,R0        COPY DASFLG\n         TM    WDASFLG,DASALLOC              IS THIS VOLUME ALLOCATED?\n         BZ    LOOPD                         NO, GO TO NEXT\n         LA    R0,16                         =\n         LA    R3,6                          =\n         MVCP  WSPDAS(R3),DASVOLID,R0        COPY VOLSER\n         LA    R0,16                         =\n         LA    R3,4                          =\n         MVCP  WSPTRK(R3),DASTKCYL,R0        COPY TRK/CYL\n         MVI   WSPVAL,C'S'                   SET VALID IN WSP REC.\nLOOPD    A     R8,=AL4(WSPL)                 NEXT WSP\n         A     R2,=AL4(DASSIZ)               NEXT DAS\n         BCT   R4,NDAS                       MORE ?\n         DROP  R2                            END READING DAS.\n         DROP  R8                            =\n         BAL   R14,RSETXM                    RESET X-MEM\n         L     R8,WSPPTRS                    GET WSP START\n         USING WSP,R8                        ESTABLISH ADD.\n         LH    R4,WSPNUM                     GET SPOOL VOLUMES\nNWSP     CLI   WSPVAL,C'S'                   IS VALID ?\n         BNE   LOOPWSP                       NO, GO FOR NEXT\n         MVC   WVOLDAS,WSPDAS                GET VOLSER\n         BAL   R14,ALLSPC                    GO TO ALLOCATE IT\n         MVC   WSPDDN,DATUDDND               SAVE DDNAME RETURNED\n         MVC   WSPDCB(WRKDCBL),WRKDCB        COPY DCB MODEL\n         LA    R7,WSPDCB                     ESTABLISH ADD.\n         USING IHADCB,R7                     =\n         MVC   DCBDDNAM,WSPDDN               SAVE DDNAME\n         MVC   DCBBLKSI,WBUFFS               SAVE BLKSIZE\n         DROP  R7                            END\n         MVI   OPENL,X'80'                   SET OPEN OPTION\n         OPEN  ((R7),INPUT),MF=(E,OPENL)     MAKE OPEN\nLOOPWSP  A     R8,=AL4(WSPL)                 NEXT WSP\n         BCT   R4,NWSP                       MORE ?\n         DROP  R8                            END\n         OI    STATUS,ISSPOPEN               SET SPOOL OPEN STATUS\n         L     R14,OPSPLS                    GET RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* CLSPL\n* CLOSE AND UNALLOC ALL SPOOL VOLUMES.\n* FREE WSP AREA.\n*----------------------------------------------------------------------\nCLSPL    EQU   *\n         ST    R14,CLSPLS                    SAVE RETURN ADD.\n         TM    STATUS,ISSPOPEN               IS SPOOL OPEN ?\n         BZR   R14                           NO, DO NOT CLOSE\n         L     R8,WSPPTRS                    LOAD WSP ADD.\n         USING WSP,R8                        ESTABLISH ADD.\n         LH    R4,WSPNUM                     GET NUMBER OF SPOOL VOLS.\nNWSPC    CLI   WSPVAL,C'S'                   IF VALID ?\n         BNE   LOOPWSPC                      NO, NEXT SPOOL VOLUME.\n         MVC   WDDN,WSPDDN                   GET DDNAME\n         LA    R7,WSPDCB                     GET DCB ADD.\n         MVI   CLOSL,X'80'                   MOVE CLOSE OPTION.\n         CLOSE ((R7)),MF=(E,CLOSL)           CLOSE FILE\n         BAL   R14,UNLSPC                    UNALLOC SPOOL VOLUME\nLOOPWSPC A     R8,=AL4(WSPL)                 NEXT SPOOL VOLUME\n         BCT   R4,NWSPC                      ANY MORE?\n         DROP  R8                            NO, END\n         L     R2,WSPPTL                     LOAD WSP ADD.\n         L     R1,WSPPTRS                    LOAD WSP LENGTH.\n         FREEMAIN RU,LV=(R2),A=(R1)          FREEMAIN\n         L     R14,CLSPLS                    LOAD RETURN ADD.\n         NI    STATUS,HEXFF-ISSPOPEN         SET SPOOL OPEN STATUS\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* ALLSPC\n* ALLOC SYS1.HASPACE\n* CALLED FOR EACH VOLUME IN JES2 SPOOL.\n*----------------------------------------------------------------------\nALLSPC   EQU   *\n         ST    R14,ALLSPCS                   SAVE RETURN ADD.\n         LA    R2,DAS99RB                    LOAD REQUEST BLK. ADD.\n         USING S99RB,R2                      ESTABLISH ADD.\n         ST    R2,DAS99PTR                   SAVE ADD.\n         OI    DAS99PTR,S99TUPLN             LAST REQUEST.\n         XC    S99RB(RBLEN),S99RB            CLEAR RB\n         MVI   S99RBLN,RBLEN                 SAVE RB LENGTH\n         MVI   S99VERB,S99VRBAL              SET TO ALLOCATE\n         MVI   S99FLG11,S99NOMNT             SET NOMOUNT\n         LA    R1,DATP1                      LOAD PTR TO TEXT UNIT\n         ST    R1,S99TXTPP                   SAVE ADD.\n         MVI   S99FLG21,S99NORES             DO NOT RESERVE\n         LA    R1,DATUDSN                    LOAD DSN= PARM ADD.\n         ST    R1,DATP1                      SAVE\n         LA    R1,DATUDIS                    LOAD DISP= PARM ADD.\n         ST    R1,DATP2                      SAVE\n         LA    R1,DATUVOL                    LOAD VOL=SER= PARM ADD.\n         ST    R1,DATP3                      SAVE\n         LA    R1,DATUDDN                    LOAD DDNAME PARM ADD.\n         ST    R1,DATP4                      SAVE\n         LA    R1,DATUUNI                    LOAD UNIT= PARM ADD.\n         ST    R1,DATP5                      SAVE\n         OI    DATP5,S99TUPLN                LAST TEXT UNIT\n         LA    R3,DATUDSN                    ESTABLISH ADD.\n         USING S99TUNIT,R3                   ESTABLISH ADD.\n         MVC   S99TUKEY,=AL2(DALDSNAM)       DSNAME=\n         MVC   S99TUNUM,=AL2(1)              NUMBER\n         MVC   S99TULNG,=AL2(44)             LENGTH\n         MVC   DATUDSND,WDSNSP               MOVE SYS1.HASPACE NAME\n         LA    R3,DATUDIS                    LOAD ADD.\n         MVC   S99TUKEY,=AL2(DALSTATS)       DISP=\n         MVC   S99TUNUM,=AL2(1)              NUMBER\n         MVC   S99TULNG,=AL2(1)              LENGTH\n         MVI   DATUDISD,X'08'                SET SHR DISPOSITION\n         LA    R3,DATUVOL                    LOAD ADD.\n         MVC   S99TUKEY,=AL2(DALVLSER)       VOLSER=\n         MVC   S99TUNUM,=AL2(1)              NUMBER\n         MVC   S99TULNG,=AL2(6)              LENGTH\n         MVC   DATUVOLD,WVOLDAS              MOVE VOLSER ID\n         LA    R3,DATUDDN                    LOAD ADD.\n         MVC   S99TUKEY,=AL2(DALRTDDN)       RETURN DDNAME\n         MVC   S99TUNUM,=AL2(1)              NUMBER\n         MVC   S99TULNG,=AL2(8)              LENGTH\n         XC    DATUDDND,DATUDDND             CLEAR IT\n         LA    R3,DATUUNI                    LOAD ADD.\n         MVC   S99TUKEY,=AL2(DALUNIT)        UNIT=\n         MVC   S99TUNUM,=AL2(1)              NUMBER\n         MVC   S99TULNG,=AL2(8)              LENGTH\n         MVC   DATUUNID,=CL8'SYSALLDA'       MOVE SYSALLDA\n         DROP  R3                            END OF TEXT UNIT\n         BAL   R14,SETSUP                    SET SUPERVISOR STATE\n         LA    R1,DAS99PTR                   LOAD RB POINTER\n         DYNALLOC                            MAKE DYNALLOC\n         LTR   R15,R15                       OK?\n         BZ    FINALL                        YES, RETURN.\n         L     R5,S99ERROR                   NO, LOAD ERROR CODE IN R5\n         ABEND 003,DUMP                      ABEND\n         DROP  R2                            END OF PROCESS\nFINALL   BAL   R14,SETPROB                   GO BACK TO PROB. STATE\n         L     R14,ALLSPCS                   GET RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* UNLSPC\n* UNALLOC SYS1.HASPACE\n* CALLED FOR EACH VOLUME IN JES2 SPOOL.\n*----------------------------------------------------------------------\nUNLSPC   EQU   *\n         ST    R14,UNLSPCS                   SAVE RETURN ADD.\n         LA    R2,DAS99RB                    LOAD REQUEST BLK. ADD.\n         USING S99RB,R2                      ESTABLISH ADD.\n         ST    R2,DAS99PTR                   SAVE PTR.\n         OI    DAS99PTR,S99TUPLN             LAST REQUEST.\n         XC    S99RB(RBLEN),S99RB            CLEAR RB\n         MVI   S99RBLN,RBLEN                 SAVE RB LENGTH\n         MVI   S99VERB,S99VRBUN              SET UNALLOC REQUEST\n         LA    R1,DATP1                      LOAD ADD. OF PTR TO TEXT\n         ST    R1,S99TXTPP                   SAVE TEXT UNIT PTR\n         LA    R1,DATUDSN                    LOAD TEST UNIT ADD.\n         ST    R1,DATP1                      SAVE IT\n         OI    DATP1,S99TUPLN                LAST TEXT UNIT\n         LA    R3,DATUDSN                    ESTABLISH ADD. TO TEXT U.\n         USING S99TUNIT,R3                   ESTABLISH ADD.\n         MVC   S99TUKEY,=AL2(DUNDDNAM)       DDNAME PARM\n         MVC   S99TUNUM,=AL2(1)              NUMBER\n         MVC   S99TULNG,=AL2(8)              LENGTH\n         MVC   DATUDSND,WDDN                 DDNAME\n         DROP  R3                            END OF PROCESS\n         LA    R1,DAS99PTR                   LOAD DYNALLOC RB\n         DYNALLOC                            MAKE IT\n         LTR   R15,R15                       OK?\n         BZ    ENDUNL                        YES, RETURN.\n         L     R5,S99ERROR                   NO, LOAD ERROR CODE IN R5\n         ABEND 004,DUMP                      ABEND\n         DROP  R2                            END OF PROCESS\nENDUNL   L     R14,UNLSPCS                   LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* GETMEM\n* GET SOME NEEDED DATA & POINTERS\n*----------------------------------------------------------------------\nGETMEM   EQU   *\n         ST    R14,GETMEMS                   SAVE RETURN ADD.\n         L     R1,FLCCVT-PSA(0)              LOAD CVT ADD.\n         L     R2,CVTTCBP-CVT(R1)            LOAD TCB PTR.\n         L     R2,12(R2)                     LOAD ASCB PTR.\n         LH    R0,ASCBASID-ASCB(R2)          LOAD USER ASID\n         STH   R0,USERASID                   SAVE IT\n         L     R1,CVTJESCT-CVT(R1)           LOAD JES CVT PTR.\n         L     R1,JESSSCT-JESCT(R1)          LOAD JES2 SSCT PTR.\n         L     R1,SSCTSUS2-SSCT(R1)          LOAD JES2 HCCT PTR.\n         L     R0,CCTHCT-HCCT(R1)            LOAD HCT PTR.\n         ST    R0,PTRHCT                     SAVE IT\n         L     R1,CCTPOSTE+4-HCCT(R1)        LOAD JES2 ASCB PTR.\n         LH    R0,ASCBASID-ASCB(R1)          LOAD JES2 ASID\n         STH   R0,JESASID                    SAVE IT\n         BAL   R14,SETXM                     GO TO X-MEM\n         L     R2,PTRHCT                     LOAD HCT PTR\n         USING HCT,R2                        ESTABLISH ADDRESSING\n         LA    R0,16                         JES2 PSW KEY\n         LA    R3,4                          LENGTH\n         MVCP  PTRJQE(R3),$JOBQPTR,R0        GET JQE PTR.\n         LA    R0,16                         =\n         LA    R3,4                          =\n         MVCP  PTRJOT(R3),$JOTABLE,R0        GET JOT PTR.\n         LA    R0,16                         =\n         LA    R3,2                          =\n         MVCP  LENJQE(R3),$JQELEN,R0         GET JQE LENGTH\n         LA    R0,16                         =\n         LA    R3,2                          =\n         MVCP  JOBMAX(R3),$MAXJOBS,R0        GET MAX JOBS ON SPOOL.\n         LA    R0,16                         =\n         LA    R3,4                          =\n         MVCP  JOEMAX(R3),$NUMJOES,R0        GET MAX JOES IN SPOOL.\n         LA    R0,16                         =\n         LA    R3,4                          =\n         MVCP  PTRDAS(R3),$DASAREA,R0        GET PTR TO VOLUMES DATA\n         LA    R0,16                         =\n         LA    R3,44                         =\n         MVCP  WDSNSP(R3),$DSNSPOL,R0        GET SYS1.HASPACE NAME\n         LA    R0,16                         =\n         LA    R3,2                          =\n         MVCP  WSPNUM(R3),$SPOLNUM,R0        GET SPOOL VOLUMES NUMBER\n         LA    R0,16                         =\n         LA    R3,2                          =\n         MVCP  WBUFFS(R3),$BUFSIZE,R0        GET BLKSIZE SYS1.HASPACE\n         LH    R1,LENJQE                     GET JQE LENGTH\n         LH    R15,JOBMAX                    GET JOBMAX\n         LA    R15,1(R15)                    ADD ONE\n         MR    R0,R15                        CALC. BUFFER SIZE\n         ST    R1,BUFJQE                     SAVE IT\n         DROP  R2                            END OF JES2 DATA ACCESS.\n         BAL   R14,RSETXM                    RESET X-MEM\n         L     R14,GETMEMS                   LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* SETXM\n* SET CROSS MEMORY ENV.\n*----------------------------------------------------------------------\nSETXM    EQU   *\n         ST    R14,SETXMS                    SAVE RETURN ADD.\n         BAL   R14,SETSUP                    SET SUP. STATE\n         STAX  DEFER=YES                     PRESERVE ATTENTION KEY\n         SYSEVENT DONTSWAP                   MAKE UNSWAPPABLE\n         STATUS SET,MC,STEP                  EXCLUSIVE TASK\n         LA    R1,1                          LOAD NEW AUTH. INDEX\n         AXSET AX=(1)                        SET NEW AUTH. INDEX\n         ST    R0,OLDAX                      SAVE OLD AUTH. INDEX\n         LH    R1,JESASID                    LOAD JES2 ASID.\n         SSAR  R1                            SET SPACE SECONDARY JES2.\n         L     R14,SETXMS                    LOAD RETURN ADD.\n         BR    R14                           RETURN.\n*----------------------------------------------------------------------\n* RSETXM\n* RESET X-MEM.\n*----------------------------------------------------------------------\nRSETXM   EQU   *\n         ST    R14,RSETXMS                   SAVE RETURN ADD.\n         LH    R1,USERASID                   GET SAVED USER ASID.\n         SSAR  R1                            RESET TO PASN=SASN\n         L     R1,OLDAX                      LOAD OLD AUTH INDEX\n         AXSET AX=(1)                        SET OLD AUTH INDEX.\n         STATUS RESET,MC,STEP                RESET TCB DISPATCHING\n         SYSEVENT OKSWAP                     MAKE SWAPPABLE\n         STAX  DEFER=NO                      RESET ATTENTION PROCESS\n         BAL   R14,SETPROB                   RETURN TO PROB. STATE\n         L     R14,RSETXMS                   LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* SETSUP\n* SET SUPERVISOR/KEY 0 STATUS.\n* I USE EXT-SVC 109 SUBCODE 200, REFER TO IGX00200.\n*----------------------------------------------------------------------\nSETSUP   EQU   *\n         ST    R14,SETSUPS                   SAVE RETURN ADDRESS.\n         LA    R0,1\n         LA    R15,200\n         SVC   109\nTESTSUP  LTR   R15,R15                       OK ?\n         BNZ   ABEND1                        NO, GO TO ABEND\n         SPKA  X'00'                         SET PSW KEY 0\n         L     R14,SETSUPS                   LOAD RETURN ADD.\n         BR    R14                           RETURN\nABEND1   ABEND 001                           NOT AUTHORIZED\n*----------------------------------------------------------------------\n* SETPROB\n* RETURN TO PROBLEM STATE KEY NZERO.\n*----------------------------------------------------------------------\nSETPROB  EQU   *\n         ST    R14,SETPROBS                  SAVE RETURN ADD.\n         MODESET MODE=PROB,KEY=NZERO         SET PROB/NZERO\n         L     R14,SETPROBS                  LOAD RETURN ADD.\n         BR    R14                           RETURN\n*----------------------------------------------------------------------\n* SOME CONSTANTS DATA\n*----------------------------------------------------------------------\nWRKDCB   DCB   DDNAME=XXX,BLKSIZE=4008,DSORG=DA,MACRF=(RIC),OPTCD=A,   X\n               RECFM=F                       DCB MODEL\nWRKDCBL  EQU   *-WRKDCB                      DCB LENGTH\nTRANSCL  DC    256X'00'                      TRANS. TABLE FOR CLASES.\n         ORG   TRANSCL+C'A'\n         DC    AL1(0,1,2,3,4,5,6,7,8)\n         ORG   TRANSCL+C'J'\n         DC    AL1(9,10,11,12,13,14,15,16,17)\n         ORG   TRANSCL+C'S'\n         DC    AL1(18,19,20,21,22,23,24,25)\n         ORG   TRANSCL+C'0'\n         DC    AL1(26,27,28,29,30,31,32,33,34,35)\n         ORG\n*----------------------------------------------------------------------\n* WORK AREA\n*----------------------------------------------------------------------\nDYNAREA  DSECT\nSAVER    DS    18F\n* PROCEDURES SAVES R14\nGETMEMS  DS    F\nSETSUPS  DS    F\nSETPROBS DS    F\nSETXMS   DS    F\nRSETXMS  DS    F\nREADJQES DS    F\nALLSPCS  DS    F\nUNLSPCS  DS    F\nREADJDSS DS    F\nREADJCTS DS    F\nREADDSRS DS    F\nREADJOES DS    F\nOPSPLS   DS    F\nCLSPLS   DS    F\nSPREADS  DS    F\nCOPYPDDS DS    F\n* WORK\nWMTTR    DS    F\nWSR03    DS    F\nWCHECK   DS    F\nWLENS    DS    F\nWLENA    DS    F\nWJDSS    DS    F\nWJCTA    DS    F\nWJCTS    DS    F\nWJCTE    DS    E\nWSR08    DS    F\nWJDSA    DS    F\nWJDSE    DS    F\nWSPIOT   DS    F\nWGAT     DS    F\nWDSKEY   DS    F\nWBUFFA   DS    F\nPTRHCT   DS    F\nPTRJQE   DS    F\nPTRJOT   DS    F\nENDJQE   DS    F\nBUFJQE   DS    F\nPTRDAS   DS    F\nOLDAX    DS    F\nSAVEKEY  DS    F\nWSPPTRS  DS    F\nWSPPTL   DS    F\nNJOE     DS    F\nJESASID  DS    H\nUSERASID DS    H\nLENJQE   DS    H\nJOBMAX   DS    H\nJOEMAX   DS    F\nWSPNUM   DS    H\nWBUFFS   DS    H\nWOUTGNAM DS    CL8\nWDDN     DS    CL8\nWVOLDAS  DS    CL6\nWDSNSP   DS    CL44\nWDASFLG  DS    X\nOPT      DS    C\nSTATUS   DS    X\nHEXFF    EQU   X'FF'\nISSPOPEN EQU   X'80'\n* OPEN\nOPENL    OPEN  (,),MF=L\nCLOSL    CLOSE (,),MF=L\n* DYNALLOC\nDAS99PTR DS    F\nDAS99RB  DS    XL(RBLEN)\nRBLEN    EQU   S99RBEND-S99RB\nDATP1    DS    F\nDATP2    DS    F\nDATP3    DS    F\nDATP4    DS    F\nDATP5    DS    F\nDATUDSN  DS    H,H,H\nDATUDSND DS    CL44\nDATUDIS  DS    H,H,H\nDATUDISD DS    X\nDATUVOL  DS    H,H,H\nDATUVOLD DS    CL6\nDATUDDN  DS    H,H,H\nDATUDDND DS    CL8\nDATUUNI  DS    H,H,H\nDATUUNID DS    CL8\n*\nLDATA    EQU   *-DYNAREA\n*----------------------------------------------------------------------\n* PARM MAPPING\n*----------------------------------------------------------------------\nPARM     DSECT\n         ISFPSAMP\n*----------------------------------------------------------------------\n* WSP  AREA\n* THIS DSECT MAP A WORK AREA THAT CONTAINS ONE RECORD FOR EACH SPOOL\n* VOLUME\n*----------------------------------------------------------------------\nWSP      DSECT\nWSPCHHR  DS    D                             CCHHR TO BE READ\nWSPDDN   DS    CL8                           DDNAME\nWSPTRK   DS    F                             TRK/CYL\nWSPDAS   DS    CL6                           VOLSER\nWSPVAL   DS    C                             VALID?\nWSPDCB   DCB   DDNAME=XXX,BLKSIZE=4008,DSORG=DA,MACRF=(RIC),OPTCD=A,   X\n               RECFM=F                       DCB\nWSPDECB  READ  WSPDECBI,DI,MF=L              DECB\nWSPALGN  DS    0F                            ALIGN.\nWSPL     EQU   *-WSP                         LENGTH\n*----------------------------------------------------------------------\n* VERSI MACRO\n* THIS MACRO IS INCLUDED BECAUSE IT'S REFERENCED BY OTHERS.\n* BUT IT IS NOT USED.\n*----------------------------------------------------------------------\n* VERSI MACRO\n         MACRO\n&NAME    VERSI\n         GBLC  &VERSION,&UVERS,&MACSPLV\n&VERSION SETC    'XXX'\n&UVERS   SETC    'XXX'\n&MACSPLV SETC    'XXX'\n         MEND\n*----------------------------------------------------------------------\n* MVS & JES2 USED MAPS.\n*----------------------------------------------------------------------\n         VERSI\n         IHAPSA   DSECT=YES                  PSA\n         CVT      DSECT=YES                  CVT\n         IEFJESCT                            JESCT\n         IEFJSCVT                            SCVT\n         $HCCT                               HCCT\n         $HCT                                HCT\n         $JQE                                JQE\n         $DAS                                DAS\n         $JCT                                JCT\n         $IOT                                IOT\n         $PDDB                               PDDB\n         $LRC                                LRC\n         $BUFFER                             BUFFER\n         $JOT                                JOT\n         $JOE                                JOE\n         IHAASCB  DSECT=YES                  ASCB\n         IEFZB4D0                            DYNALLOC PARM LIST\n         IEFZB4D2                            DYNALLOC KEY TABLE\n         DCBD     DSORG=PS                   DCB MAP.\n         IHADECB  DSECT=YES                  DECB MAP.\n*----------------------------------------------------------------------\n* OTHER MAPS.\n* THESE MAPS ARE INCLUDED BECAUSE THEY ARE REFERENCED BY USED MAPS.\n* BUT THEY ARE NOT USED.\n*----------------------------------------------------------------------\n         PRINT NOGEN\n         $HASPEQU\n         $SCAT\n         $HFAME\n         $XECB\n         $PCE\n         $MIT\n         $LMT\n         $TAB\n         $QSE\n         $PSV\n         IFGRPL\n         IHAPDS   DSECT=YES\nPDS2BLEN EQU   PDSS03ND-PDS2\n         END   ISFPSAMR\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ISFPSAM1": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x99 o\\x00\\x99 o\\x050\\x00.\\x00\\x00\\x00\\x00\\xe9\\xf8\\xf0\\xf2\\xf3\\xf6\\xc7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1999-07-25T00:00:00", "modifydate": "1999-07-25T05:30:00", "lines": 46, "newlines": 0, "modlines": 0, "user": "Z80236G"}, "text": "/* rexx */\n/*\n * This exec read every datasets from any job in Jes2 spool\n * where userid = \"SALVA\" and write its contents to screen.\n */\nnewstack\njqe. = \" \"\n/* Init SAM interface */\nr = isfpsamc(\"INI\")\n/* Read Jqe's to stack where jobname = * & userid = SALVA */\nif isfpsamc(\"JQE\",\"CIHM27\",\"*\") then do\n   njqes = queued()\n   do i = 1 to njqes\n      pull b\n      jqe.i = b\n      end\n   do j = 1 to njqes\n/* Read Jqe's datasets */\n      if isfpsamc(\"JDS\",jqe.j) then do\n         jds.j.ks = queued()\n         do k = 1 to jds.j.ks\n            pull b\n            jds.j.k = b\n            end\n         end\n      else do\n         say error 2\n         exit\n         end\n      end\n   do j = 1 to njqes\n      do k = 1 to jds.j.ks\n         say \"============\" substr(jds.j.k,341,44) \"============\"\n/* Read Datasets records */\n         if isfpsamc(\"DSR\",jds.j.k) then do\n            do r = 1 to queued()\n               pull b\n               say substr(b,1,79)\n               end\n            end\n         end\n      end\n   end\n/* Terminate SAM interface */\nr = isfpsamc(\"TER\")\ndelstack\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "UTILMATC": {"ttr": 3333, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x01\\x05O\\x01\\x01\\x05O\\x121\\x00\\xb2\\x00\\xb2\\x00\\x00\\xe6\\xe2\\xc2\\xc7\\xc9\\xe2\\xd7@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2001-02-23T00:00:00", "modifydate": "2001-02-23T12:31:00", "lines": 178, "newlines": 178, "modlines": 0, "user": "WSBGISP"}, "text": "UTILMATC TITLE 'MATCH SOURCE/PATTERN'\nUTILMATC CSECT\nUTILMATC AMODE 31\nUTILMATC RMODE ANY\n         $KEEQUS\n******************\n* HOUSEKEEPING   *\n******************\n         BAKR  R14,0\n         LR    R12,R15\n         LR    R03,R01\n         USING UTILMATC,R12\n         GETMAIN RU,LV=LDATA,LOC=ANY\n         LR    R09,R01\n         USING DYNAREA,R09\n         LR    R01,R03\n******************\n* LOAD PARMS     *\n******************\n         MVC   MATPAT,MAT8BLNK\n         MVC   MATSTR,MAT8BLNK\n         L     R03,0(R01)                -> SOURCE\n         L     R02,4(R01)                -> PATTERN\n******************\n* INIT SOURCE    *\n******************\n         SR    R06,R06\n         L     R11,8(R01)\n         IC    R06,0(R11)                LOAD LENGTH OF SOURCE\n         BCTR  R06,0\n         EX    R06,MOVESTR               MOVE TO WORK\n         LA    R10,MATSTR\n         LA    R06,1(R06)\n         AR    R10,R06\n         MVI   0(R10),MATNULL            NULL AT END OF STRING\n         LA    R03,MATSTR\nMENOSSTR BCTR  R10,0\n         CR    R10,R03\n         BL    INIPAT\n         CLI   0(R10),MATNULL\n         BE    MENOSSTR\n         CLI   0(R10),MATBLANK\n         BNE   INIPAT\n         MVI   0(R10),MATNULL            NULL AT END OF STRING\n         B     MENOSSTR\n******************\n* INIT PATTERN   *\n******************\nINIPAT   SR    R07,R07\n         L     R11,12(R01)\n         IC    R07,0(R11)                LOAD  LENGTH PATTERN\n         BCTR  R07,0\n         EX    R07,MOVEPAT               MOVE TO WORK\n         LA    R10,MATPAT\n         LA    R07,1(R07)\n         AR    R10,R07\n         MVI   0(R10),MATNULL            NULL AT END\n         LA    R02,MATPAT\nMENOSPAT BCTR  R10,0\n         CR    R10,R02\n         BL    COMPARE\n         CLI   0(R10),MATNULL\n         BE    MENOSPAT\n         CLI   0(R10),MATBLANK\n         BNE   COMPARE\n         MVI   0(R10),MATNULL            NULL AT END\n         B     MENOSPAT\n********************\n* BEGIN COMPARE    *\n********************\nCOMPARE  DS    0H\n         LA    R08,MATSCANS\n         CLI   0(R02),MATGEN\n         BNE   CHKNXT1\n         CLI   1(R02),MATNULL\n         BE    MATCH\nCHKNXT1  DS    0H\n         CR    R06,R07\n         BCTR  R06,0\n         BNE   CHKNXT5\n         EX    R06,CHKMATCH\n         BE    MATCH\nCHKNXT5  DS    0H\n         EX    R06,CHKBLNK2\n         BE    NOMATCH\nCHKNXT2  DS    0H\n         BCTR  R07,0\n         EX    R07,CHKBLNKS\n         BE    MATCH\n         SR    R04,R04\nSPCHARCK DS    0H\n         CLI   0(R02),MATGEN\n         BE    FNDASTR\n         CLI   0(R02),MATPLACE\n         BNE   REGALPHA\n         SR    R04,R04\nNXTFCHAR DS    0H\n         LA    R03,1(,R03)\nNXTPCHAR DS    0H\n         LA    R02,1(,R02)\n         CLI   0(R02),MATNULL\n         BE    PATRNEND\n         CLI   0(R02),MATGEN\n         BNE   CHKNXT4\n         CLI   1(R02),MATNULL\n         BE    MATCH\nCHKNXT3  DS    0H\n         CLI   0(R02),MATGEN\n         BNE   CHKNXT4\n         CLC   1(R02),MATGEN\n         BE    NXTPCHAR\nCHKNXT4  DS    0H\n         CLI   0(R03),MATNULL\n         BE    FAIL\n         B     SPCHARCK\nPATRNEND DS    0H\n         CLI   0(R03),MATNULL\n         BE    MATCH\n         BCTR  R02,0\n         B     FAIL1\nREGALPHA DS    0H\n         CLC   0(1,R02),0(R03)\n         BNE   FAIL1\n         SR    R04,R04\n         B     NXTFCHAR\nFNDASTR  DS    0H\n         BCTR  R04,0\n         CLI   1(R02),MATPLACE\n         BNE   MULTICHK\n         XC    0(1,R02),1(R02)\n         XC    1(1,R02),0(R02)\n         XC    0(1,R02),1(R02)\n         B     NXTFCHAR\nMULTICHK DS    0H\n         STM   R02,R03,0(R08)\n         LA    R08,8(,R08)\n         B     NXTPCHAR\nFAIL1    DS    0H\n         LTR   R04,R04\n         BZ    FAIL\n         BCTR  R02,0\n         B     NXTFCHAR\nFAIL     DS    0H\n         LA    R03,MATSCANS\n         CR    R08,R03\n         BE    NOMATCH\n         SH    R08,MATH8\n         LM    R02,R03,0(R08)\n         BCTR  R02,0\n         B     NXTFCHAR\n         EJECT\nNOMATCH  DS    0H\n         LR    R01,R09\n         FREEMAIN RU,LV=LDATA,A=(1)\n         LA    R15,4(0)\n         PR\nMATCH    DS    0H\n         LR    R01,R09\n         FREEMAIN RU,LV=LDATA,A=(1)\n         SLR   R15,R15\n         PR\nMOVESTR  MVC   MATSTR(0),0(R03)\nMOVEPAT  MVC   MATPAT(0),0(R02)\nCHKMATCH CLC   MATSTR(0),MATPAT\nCHKBLNKS CLC   MATPAT(0),MAT8BLNK\nCHKBLNK2 CLC   MATSTR(0),MAT8BLNK\nMATNULL  EQU   X'00'\nMATBLANK EQU   C' '\nMATGEN   EQU   C'*'\nMATPLACE EQU   C'%'\nMATH8    DC    H'8'\nMAT8BLNK DC    CL256' '\nDYNAREA  DSECT\nMATSCANS DS    18F\nMATPAT   DS    CL256\nMATSTR   DS    CL256\nLDATA    EQU   *-DYNAREA\n         END   UTILMATC\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT386/FILE386.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT386", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}