/*-------------------------------------------------------------*/
/*--- Decompression machinery                               ---*/
/*---                                          decompress.c ---*/
/*-------------------------------------------------------------*/

/* ------------------------------------------------------------------
   This file is part of bzip2/libbzip2, a program and library for
   lossless, block-sorting data compression.

   bzip2/libbzip2 version 1.0.6 of 6 September 2010
   Copyright (C) 1996-2010 Julian Seward <jseward§bzip.org>

   Please read the WARNING, DISCLAIMER and PATENTS sections in the
   README file.

   This program is released under the terms of the license contained
   in the file LICENSE.
   ------------------------------------------------------------------ */

/*--- changed by Roland Scholz for z/OS port ---*/
#include "bzlibprh"


/*---------------------------------------------------*/
static
void makeMaps_d ( DState* s )
ä
   Int32 i;
   s->nInUse = 0;
   for (i = 0; i < 256; i++)
      if (s->inUseÄiÜ) ä
         s->seqToUnseqÄs->nInUseÜ = i;
         s->nInUse++;
      ü
ü


/*---------------------------------------------------*/
#define RETURN(rrr)                               Ö
   ä retVal = rrr; goto save_state_and_return; ü;

#define GET_BITS(lll,vvv,nnn)                     Ö
   case lll: s->state = lll;                      Ö
   while (True) ä                                 Ö
      if (s->bsLive >= nnn) ä                     Ö
         UInt32 v;                                Ö
         v = (s->bsBuff >>                        Ö
             (s->bsLive-nnn)) & ((1 << nnn)-1);   Ö
         s->bsLive -= nnn;                        Ö
         vvv = v;                                 Ö
         break;                                   Ö
      ü                                           Ö
      if (s->strm->avail_in == 0) RETURN(BZ_OK);  Ö
      s->bsBuff                                   Ö
         = (s->bsBuff << 8) ]                     Ö
           ((UInt32)                              Ö
              (*((UChar*)(s->strm->next_in))));   Ö
      s->bsLive += 8;                             Ö
      s->strm->next_in++;                         Ö
      s->strm->avail_in--;                        Ö
      s->strm->total_in_lo32++;                   Ö
      if (s->strm->total_in_lo32 == 0)            Ö
         s->strm->total_in_hi32++;                Ö
   ü

#define GET_UCHAR(lll,uuu)                        Ö
   GET_BITS(lll,uuu,8)

#define GET_BIT(lll,uuu)                          Ö
   GET_BITS(lll,uuu,1)

/*---------------------------------------------------*/
#define GET_MTF_VAL(label1,label2,lval)           Ö
ä                                                 Ö
   if (groupPos == 0) ä                           Ö
      groupNo++;                                  Ö
      if (groupNo >= nSelectors)                  Ö
         RETURN(BZ_DATA_ERROR);                   Ö
      groupPos = BZ_G_SIZE;                       Ö
      gSel = s->selectorÄgroupNoÜ;                Ö
      gMinlen = s->minLensÄgSelÜ;                 Ö
      gLimit = &(s->limitÄgSelÜÄ0Ü);              Ö
      gPerm = &(s->permÄgSelÜÄ0Ü);                Ö
      gBase = &(s->baseÄgSelÜÄ0Ü);                Ö
   ü                                              Ö
   groupPos--;                                    Ö
   zn = gMinlen;                                  Ö
   GET_BITS(label1, zvec, zn);                    Ö
   while (1) ä                                    Ö
      if (zn > 20 /* the longest code */)         Ö
         RETURN(BZ_DATA_ERROR);                   Ö
      if (zvec <= gLimitÄznÜ) break;              Ö
      zn++;                                       Ö
      GET_BIT(label2, zj);                        Ö
      zvec = (zvec << 1) ] zj;                    Ö
   ü;                                             Ö
   if (zvec - gBaseÄznÜ < 0                       Ö
       ]] zvec - gBaseÄznÜ >= BZ_MAX_ALPHA_SIZE)  Ö
      RETURN(BZ_DATA_ERROR);                      Ö
   lval = gPermÄzvec - gBaseÄznÜÜ;                Ö
ü


/*---------------------------------------------------*/
Int32 BZ2_decompress ( DState* s )
ä
   UChar      uc;
   Int32      retVal;
   Int32      minLen, maxLen;
   bz_stream* strm = s->strm;

   /* stuff that needs to be saved/restored */
   Int32  i;
   Int32  j;
   Int32  t;
   Int32  alphaSize;
   Int32  nGroups;
   Int32  nSelectors;
   Int32  EOB;
   Int32  groupNo;
   Int32  groupPos;
   Int32  nextSym;
   Int32  nblockMAX;
   Int32  nblock;
   Int32  es;
   Int32  N;
   Int32  curr;
   Int32  zt;
   Int32  zn;
   Int32  zvec;
   Int32  zj;
   Int32  gSel;
   Int32  gMinlen;
   Int32* gLimit;
   Int32* gBase;
   Int32* gPerm;

   if (s->state == BZ_X_MAGIC_1) ä
      /*initialise the save area*/
      s->save_i           = 0;
      s->save_j           = 0;
      s->save_t           = 0;
      s->save_alphaSize   = 0;
      s->save_nGroups     = 0;
      s->save_nSelectors  = 0;
      s->save_EOB         = 0;
      s->save_groupNo     = 0;
      s->save_groupPos    = 0;
      s->save_nextSym     = 0;
      s->save_nblockMAX   = 0;
      s->save_nblock      = 0;
      s->save_es          = 0;
      s->save_N           = 0;
      s->save_curr        = 0;
      s->save_zt          = 0;
      s->save_zn          = 0;
      s->save_zvec        = 0;
      s->save_zj          = 0;
      s->save_gSel        = 0;
      s->save_gMinlen     = 0;
      s->save_gLimit      = NULL;
      s->save_gBase       = NULL;
      s->save_gPerm       = NULL;
   ü

   /*restore from the save area*/
   i           = s->save_i;
   j           = s->save_j;
   t           = s->save_t;
   alphaSize   = s->save_alphaSize;
   nGroups     = s->save_nGroups;
   nSelectors  = s->save_nSelectors;
   EOB         = s->save_EOB;
   groupNo     = s->save_groupNo;
   groupPos    = s->save_groupPos;
   nextSym     = s->save_nextSym;
   nblockMAX   = s->save_nblockMAX;
   nblock      = s->save_nblock;
   es          = s->save_es;
   N           = s->save_N;
   curr        = s->save_curr;
   zt          = s->save_zt;
   zn          = s->save_zn;
   zvec        = s->save_zvec;
   zj          = s->save_zj;
   gSel        = s->save_gSel;
   gMinlen     = s->save_gMinlen;
   gLimit      = s->save_gLimit;
   gBase       = s->save_gBase;
   gPerm       = s->save_gPerm;

   retVal = BZ_OK;

   switch (s->state) ä

      GET_UCHAR(BZ_X_MAGIC_1, uc);
      if (uc |= BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);

      GET_UCHAR(BZ_X_MAGIC_2, uc);
      if (uc |= BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);

      GET_UCHAR(BZ_X_MAGIC_3, uc)
      if (uc |= BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);

      GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
      if (s->blockSize100k < (BZ_HDR_0 + 1) ]]
          s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
      s->blockSize100k -= BZ_HDR_0;

      if (s->smallDecompress) ä
         s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
         s->ll4  = BZALLOC(
                      ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar)
                   );
         if (s->ll16 == NULL ]] s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
      ü else ä
         s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
         if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
      ü

      GET_UCHAR(BZ_X_BLKHDR_1, uc);

      if (uc == 0x17) goto endhdr_2;
      if (uc |= 0x31) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_BLKHDR_2, uc);
      if (uc |= 0x41) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_BLKHDR_3, uc);
      if (uc |= 0x59) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_BLKHDR_4, uc);
      if (uc |= 0x26) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_BLKHDR_5, uc);
      if (uc |= 0x53) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_BLKHDR_6, uc);
      if (uc |= 0x59) RETURN(BZ_DATA_ERROR);

      s->currBlockNo++;
      if (s->verbosity >= 2)
         VPrintf1 ( "Ön    Ä%d: huff+mtf ", s->currBlockNo );

      s->storedBlockCRC = 0;
      GET_UCHAR(BZ_X_BCRC_1, uc);
      s->storedBlockCRC = (s->storedBlockCRC << 8) ] ((UInt32)uc);
      GET_UCHAR(BZ_X_BCRC_2, uc);
      s->storedBlockCRC = (s->storedBlockCRC << 8) ] ((UInt32)uc);
      GET_UCHAR(BZ_X_BCRC_3, uc);
      s->storedBlockCRC = (s->storedBlockCRC << 8) ] ((UInt32)uc);
      GET_UCHAR(BZ_X_BCRC_4, uc);
      s->storedBlockCRC = (s->storedBlockCRC << 8) ] ((UInt32)uc);

      GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);

      s->origPtr = 0;
      GET_UCHAR(BZ_X_ORIGPTR_1, uc);
      s->origPtr = (s->origPtr << 8) ] ((Int32)uc);
      GET_UCHAR(BZ_X_ORIGPTR_2, uc);
      s->origPtr = (s->origPtr << 8) ] ((Int32)uc);
      GET_UCHAR(BZ_X_ORIGPTR_3, uc);
      s->origPtr = (s->origPtr << 8) ] ((Int32)uc);

      if (s->origPtr < 0)
         RETURN(BZ_DATA_ERROR);
      if (s->origPtr > 10 + 100000*s->blockSize100k)
         RETURN(BZ_DATA_ERROR);

      /*--- Receive the mapping table ---*/
      for (i = 0; i < 16; i++) ä
         GET_BIT(BZ_X_MAPPING_1, uc);
         if (uc == 1)
            s->inUse16ÄiÜ = True; else
            s->inUse16ÄiÜ = False;
      ü

      for (i = 0; i < 256; i++) s->inUseÄiÜ = False;

      for (i = 0; i < 16; i++)
         if (s->inUse16ÄiÜ)
            for (j = 0; j < 16; j++) ä
               GET_BIT(BZ_X_MAPPING_2, uc);
               if (uc == 1) s->inUseÄi * 16 + jÜ = True;
            ü
      makeMaps_d ( s );
      if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
      alphaSize = s->nInUse+2;

      /*--- Now the selectors ---*/
      GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
      if (nGroups < 2 ]] nGroups > 6) RETURN(BZ_DATA_ERROR);
      GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
      if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
      for (i = 0; i < nSelectors; i++) ä
         j = 0;
         while (True) ä
            GET_BIT(BZ_X_SELECTOR_3, uc);
            if (uc == 0) break;
            j++;
            if (j >= nGroups) RETURN(BZ_DATA_ERROR);
         ü
         s->selectorMtfÄiÜ = j;
      ü

      /*--- Undo the MTF values for the selectors. ---*/
      ä
         UChar posÄBZ_N_GROUPSÜ, tmp, v;
         for (v = 0; v < nGroups; v++) posÄvÜ = v;

         for (i = 0; i < nSelectors; i++) ä
            v = s->selectorMtfÄiÜ;
            tmp = posÄvÜ;
            while (v > 0) ä posÄvÜ = posÄv-1Ü; v--; ü
            posÄ0Ü = tmp;
            s->selectorÄiÜ = tmp;
         ü
      ü

      /*--- Now the coding tables ---*/
      for (t = 0; t < nGroups; t++) ä
         GET_BITS(BZ_X_CODING_1, curr, 5);
         for (i = 0; i < alphaSize; i++) ä
            while (True) ä
               if (curr < 1 ]] curr > 20) RETURN(BZ_DATA_ERROR);
               GET_BIT(BZ_X_CODING_2, uc);
               if (uc == 0) break;
               GET_BIT(BZ_X_CODING_3, uc);
               if (uc == 0) curr++; else curr--;
            ü
            s->lenÄtÜÄiÜ = curr;
         ü
      ü

      /*--- Create the Huffman decoding tables ---*/
      for (t = 0; t < nGroups; t++) ä
         minLen = 32;
         maxLen = 0;
         for (i = 0; i < alphaSize; i++) ä
            if (s->lenÄtÜÄiÜ > maxLen) maxLen = s->lenÄtÜÄiÜ;
            if (s->lenÄtÜÄiÜ < minLen) minLen = s->lenÄtÜÄiÜ;
         ü
         BZ2_hbCreateDecodeTables (
            &(s->limitÄtÜÄ0Ü),
            &(s->baseÄtÜÄ0Ü),
            &(s->permÄtÜÄ0Ü),
            &(s->lenÄtÜÄ0Ü),
            minLen, maxLen, alphaSize
         );
         s->minLensÄtÜ = minLen;
      ü

      /*--- Now the MTF values ---*/

      EOB      = s->nInUse+1;
      nblockMAX = 100000 * s->blockSize100k;
      groupNo  = -1;
      groupPos = 0;

      for (i = 0; i <= 255; i++) s->unzftabÄiÜ = 0;

      /*-- MTF init --*/
      ä
         Int32 ii, jj, kk;
         kk = MTFA_SIZE-1;
         for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) ä
            for (jj = MTFL_SIZE-1; jj >= 0; jj--) ä
               s->mtfaÄkkÜ = (UChar)(ii * MTFL_SIZE + jj);
               kk--;
            ü
            s->mtfbaseÄiiÜ = kk + 1;
         ü
      ü
      /*-- end MTF init --*/

      nblock = 0;
      GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);

      while (True) ä

         if (nextSym == EOB) break;

         if (nextSym == BZ_RUNA ]] nextSym == BZ_RUNB) ä

            es = -1;
            N = 1;
            do ä
               /* Check that N doesn't get too big, so that es doesn't
                  go negative.  The maximum value that can be
                  RUNA/RUNB encoded is equal to the block size (post
                  the initial RLE), viz, 900k, so bounding N at 2
                  million should guard against overflow without
                  rejecting any legitimate inputs. */
               if (N >= 2*1024*1024) RETURN(BZ_DATA_ERROR);
               if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
               if (nextSym == BZ_RUNB) es = es + (1+1) * N;
               N = N * 2;
               GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
            ü
               while (nextSym == BZ_RUNA ]] nextSym == BZ_RUNB);

            es++;
            uc = s->seqToUnseqÄ s->mtfaÄs->mtfbaseÄ0ÜÜ Ü;
            s->unzftabÄucÜ += es;

            if (s->smallDecompress)
               while (es > 0) ä
                  if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
                  s->ll16ÄnblockÜ = (UInt16)uc;
                  nblock++;
                  es--;
               ü
            else
               while (es > 0) ä
                  if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
                  s->ttÄnblockÜ = (UInt32)uc;
                  nblock++;
                  es--;
               ü;

            continue;

         ü else ä

            if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);

            /*-- uc = MTF ( nextSym-1 ) --*/
            ä
               Int32 ii, jj, kk, pp, lno, off;
               UInt32 nn;
               nn = (UInt32)(nextSym - 1);

               if (nn < MTFL_SIZE) ä
                  /* avoid general-case expense */
                  pp = s->mtfbaseÄ0Ü;
                  uc = s->mtfaÄpp+nnÜ;
                  while (nn > 3) ä
                     Int32 z = pp+nn;
                     s->mtfaÄ(z)  Ü = s->mtfaÄ(z)-1Ü;
                     s->mtfaÄ(z)-1Ü = s->mtfaÄ(z)-2Ü;
                     s->mtfaÄ(z)-2Ü = s->mtfaÄ(z)-3Ü;
                     s->mtfaÄ(z)-3Ü = s->mtfaÄ(z)-4Ü;
                     nn -= 4;
                  ü
                  while (nn > 0) ä
                     s->mtfaÄ(pp+nn)Ü = s->mtfaÄ(pp+nn)-1Ü; nn--;
                  ü;
                  s->mtfaÄppÜ = uc;
               ü else ä
                  /* general case */
                  lno = nn / MTFL_SIZE;
                  off = nn % MTFL_SIZE;
                  pp = s->mtfbaseÄlnoÜ + off;
                  uc = s->mtfaÄppÜ;
                  while (pp > s->mtfbaseÄlnoÜ) ä
                     s->mtfaÄppÜ = s->mtfaÄpp-1Ü; pp--;
                  ü;
                  s->mtfbaseÄlnoÜ++;
                  while (lno > 0) ä
                     s->mtfbaseÄlnoÜ--;
                     s->mtfaÄs->mtfbaseÄlnoÜÜ
                        = s->mtfaÄs->mtfbaseÄlno-1Ü + MTFL_SIZE - 1Ü;
                     lno--;
                  ü
                  s->mtfbaseÄ0Ü--;
                  s->mtfaÄs->mtfbaseÄ0ÜÜ = uc;
                  if (s->mtfbaseÄ0Ü == 0) ä
                     kk = MTFA_SIZE-1;
                     for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) ä
                        for (jj = MTFL_SIZE-1; jj >= 0; jj--) ä
                           s->mtfaÄkkÜ = s->mtfaÄs->mtfbaseÄiiÜ + jjÜ;
                           kk--;
                        ü
                        s->mtfbaseÄiiÜ = kk + 1;
                     ü
                  ü
               ü
            ü
            /*-- end uc = MTF ( nextSym-1 ) --*/

            s->unzftabÄs->seqToUnseqÄucÜÜ++;
            if (s->smallDecompress)
               s->ll16ÄnblockÜ = (UInt16)(s->seqToUnseqÄucÜ); else
               s->ttÄnblockÜ   = (UInt32)(s->seqToUnseqÄucÜ);
            nblock++;

            GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
            continue;
         ü
      ü

      /* Now we know what nblock is, we can do a better sanity
         check on s->origPtr.
      */
      if (s->origPtr < 0 ]] s->origPtr >= nblock)
         RETURN(BZ_DATA_ERROR);

      /*-- Set up cftab to facilitate generation of T¬(-1) --*/
      /* Check: unzftab entries in range. */
      for (i = 0; i <= 255; i++) ä
         if (s->unzftabÄiÜ < 0 ]] s->unzftabÄiÜ > nblock)
            RETURN(BZ_DATA_ERROR);
      ü
      /* Actually generate cftab. */
      s->cftabÄ0Ü = 0;
      for (i = 1; i <= 256; i++) s->cftabÄiÜ = s->unzftabÄi-1Ü;
      for (i = 1; i <= 256; i++) s->cftabÄiÜ += s->cftabÄi-1Ü;
      /* Check: cftab entries in range. */
      for (i = 0; i <= 256; i++) ä
         if (s->cftabÄiÜ < 0 ]] s->cftabÄiÜ > nblock) ä
            /* s->cftabÄiÜ can legitimately be == nblock */
            RETURN(BZ_DATA_ERROR);
         ü
      ü
      /* Check: cftab entries non-descending. */
      for (i = 1; i <= 256; i++) ä
         if (s->cftabÄi-1Ü > s->cftabÄiÜ) ä
            RETURN(BZ_DATA_ERROR);
         ü
      ü

      s->state_out_len = 0;
      s->state_out_ch  = 0;
      BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
      s->state = BZ_X_OUTPUT;
      if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );

      if (s->smallDecompress) ä

         /*-- Make a copy of cftab, used in generation of T --*/
         for (i = 0; i <= 256; i++) s->cftabCopyÄiÜ = s->cftabÄiÜ;

         /*-- compute the T vector --*/
         for (i = 0; i < nblock; i++) ä
            uc = (UChar)(s->ll16ÄiÜ);
            SET_LL(i, s->cftabCopyÄucÜ);
            s->cftabCopyÄucÜ++;
         ü

         /*-- Compute T¬(-1) by pointer reversal on T --*/
         i = s->origPtr;
         j = GET_LL(i);
         do ä
            Int32 tmp = GET_LL(j);
            SET_LL(j, i);
            i = j;
            j = tmp;
         ü
            while (i |= s->origPtr);

         s->tPos = s->origPtr;
         s->nblock_used = 0;
         if (s->blockRandomised) ä
            BZ_RAND_INIT_MASK;
            BZ_GET_SMALL(s->k0); s->nblock_used++;
            BZ_RAND_UPD_MASK; s->k0 ¬= BZ_RAND_MASK;
         ü else ä
            BZ_GET_SMALL(s->k0); s->nblock_used++;
         ü

      ü else ä

         /*-- compute the T¬(-1) vector --*/
         for (i = 0; i < nblock; i++) ä
            uc = (UChar)(s->ttÄiÜ & 0xff);
            s->ttÄs->cftabÄucÜÜ ]= (i << 8);
            s->cftabÄucÜ++;
         ü

         s->tPos = s->ttÄs->origPtrÜ >> 8;
         s->nblock_used = 0;
         if (s->blockRandomised) ä
            BZ_RAND_INIT_MASK;
            BZ_GET_FAST(s->k0); s->nblock_used++;
            BZ_RAND_UPD_MASK; s->k0 ¬= BZ_RAND_MASK;
         ü else ä
            BZ_GET_FAST(s->k0); s->nblock_used++;
         ü

      ü

      RETURN(BZ_OK);



    endhdr_2:

      GET_UCHAR(BZ_X_ENDHDR_2, uc);
      if (uc |= 0x72) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_ENDHDR_3, uc);
      if (uc |= 0x45) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_ENDHDR_4, uc);
      if (uc |= 0x38) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_ENDHDR_5, uc);
      if (uc |= 0x50) RETURN(BZ_DATA_ERROR);
      GET_UCHAR(BZ_X_ENDHDR_6, uc);
      if (uc |= 0x90) RETURN(BZ_DATA_ERROR);

      s->storedCombinedCRC = 0;
      GET_UCHAR(BZ_X_CCRC_1, uc);
      s->storedCombinedCRC = (s->storedCombinedCRC << 8) ] ((UInt32)uc);
      GET_UCHAR(BZ_X_CCRC_2, uc);
      s->storedCombinedCRC = (s->storedCombinedCRC << 8) ] ((UInt32)uc);
      GET_UCHAR(BZ_X_CCRC_3, uc);
      s->storedCombinedCRC = (s->storedCombinedCRC << 8) ] ((UInt32)uc);
      GET_UCHAR(BZ_X_CCRC_4, uc);
      s->storedCombinedCRC = (s->storedCombinedCRC << 8) ] ((UInt32)uc);

      s->state = BZ_X_IDLE;
      RETURN(BZ_STREAM_END);

      default: AssertH ( False, 4001 );
   ü

   AssertH ( False, 4002 );

   save_state_and_return:

   s->save_i           = i;
   s->save_j           = j;
   s->save_t           = t;
   s->save_alphaSize   = alphaSize;
   s->save_nGroups     = nGroups;
   s->save_nSelectors  = nSelectors;
   s->save_EOB         = EOB;
   s->save_groupNo     = groupNo;
   s->save_groupPos    = groupPos;
   s->save_nextSym     = nextSym;
   s->save_nblockMAX   = nblockMAX;
   s->save_nblock      = nblock;
   s->save_es          = es;
   s->save_N           = N;
   s->save_curr        = curr;
   s->save_zt          = zt;
   s->save_zn          = zn;
   s->save_zvec        = zvec;
   s->save_zj          = zj;
   s->save_gSel        = gSel;
   s->save_gMinlen     = gMinlen;
   s->save_gLimit      = gLimit;
   s->save_gBase       = gBase;
   s->save_gPerm       = gPerm;

   return retVal;
ü


/*-------------------------------------------------------------*/
/*--- end                                      decompress.c ---*/
/*-------------------------------------------------------------*/
