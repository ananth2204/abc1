{"INMR01": {"INMLRECL": 80, "INMFNODE": "ORIGNODE", "INMFUID": "ORIGUID", "INMTNODE": "DESTNODE", "INMTUID": "DESTUID", "INMFTIME": "20191002000633000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 6160, "INMRECFM": "FB", "INMDIR": 44, "INMDSNAM": "PDPCLIB.DOC", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 6176, "INMBLKSZ": 6180, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"PDPCLIB.DOC": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 6160, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 6180, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 1113, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 0, "DS1REFD": "000000", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x00\\x00\\x00\\x00'", "DS1LSTAR": "b'\\x00\\x00\\x00'", "DS1TRBAL": "b''"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0cvD\\x04\\x94\\x0c\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x0cvD\\x04\\x94\\x0c\\xd8'", "b'X\\x000\\x10\\x00\\x00\\x00\\x00\\x00\\x06\\x00\\x00\\x00\\t\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"MVS": {"ttr": 257, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Design of MVS i/o routines\n\nin/out function rec-type mode   method\nin     fread    fixed    bin    loop reading, remember remainder\nin     fread    fixed    text   loop reading + truncing, remember rem\nin     fread    var      bin    loop reading (+ len), remember remainder\nin     fread    var      text   loop reading (+ len), remember remainder\nin     fgets    fixed    bin    read, scan, remember remainder\nin     fgets    fixed    text   read, trunc, remember remainder\nin     fgets    var      bin    read, scan, rr\nin     fgets    var      text   read, rr\nin     fgetc    fixed    bin    read, rr\nin     fgetc    fixed    text   read, trunc, rr\nin     fgetc    var      bin    read, rr\nin     fgetc    var      text   read, rr\n\nout    fwrite   fixed    bin    loop doing put, rr\nout    fwrite   fixed    text   search newline, copy + pad, put, rr\nout    fwrite   var      bin    if nelem != 1 copy to max lrecl\nout    fwrite   var      text   loop search nl, put, rr\nout    fputs    fixed    bin    loop doing put, rr\nout    fputs    fixed    text   search newline, copy + pad, put, rr\nout    fputs    var      bin    put\nout    fputs    var      text   search newline, put, copy rem\nout    fputc    fixed    bin    copy to rr until rr == lrecl\nout    fputc    fixed    text   copy to rr until newline, then pad\nout    fputc    var      bin    copy to rr until rr == lrecl\nout    fputc    var      text   copy to rr until newline\n\noptimize for fread on binary files (read matching record length),\nespecially fixed block files, and fgets on text files, especially\nvariable blocked files.\n\nbinary, variable block files are not a file type supported by this\nlibrary as part of the conforming implementation.  Instead, they\nare considered to be record-oriented processing, similar to unix\nsystems reading data from a pipe, where you can read less bytes\nthan requested, without reaching EOF.  ISO 7.9.8.1 doesn't give you\nthe flexibility of calling either of these things conforming.\nBasically, the C standard doesn't have a concept of operating\nsystem maintained length binary records, you have to do that\nyourself, e.g. by writing out the lengths yourself.  You can do\nthis in a fixed block dataset on MVS, and if you're concerned\nabout null-padding at the end of your data, use a lrecl of 1\n(and suffer the consequences!).  You could argue that this\nnon-conformance should only be initiated if fopen has a parameter\nincluding \",type=record\" or whatever.  Another option would\nbe to make VB binary records include the record size as part of\nthe stream.  Hmmm, sounds like that's the go actually.\n\nfread: if quickbin, if read elem size == lrecl, doit\nfgets: if variable record + no remainder\n       if buffer > record size, copy + add newline\n\nchar *fgets(char *buf, size_t szbuf, FILE *stream)\n{\n    char *dptr;\n    size_t len;\n\n    if (stream->quickText)\n    {\n        if (szbuf > (stream->lrecl + 1))\n        {\n            __aread(&dptr, &len, stream->hfile);\n            memcpy(buf, dptr, len);\n            memcpy(buf + len, \"\\n\", 2);\n        }\n    }\n    return (buf);\n}\n\nchar *fputs(char *buf, FILE *stream)\n{\n    char *p;\n\n    p = strchr(buf, '\\n');\n    __awrite(buf, p - buf, stream->hfile);\n    return (buf);\n}\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDPCLIB": {"ttr": 260, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "            Public Domain C runtime library\n            -------------------------------\n\nVersion : 4.00\nReleased: 2019-10-01\n\nWritten by Paul Edwards.\nReleased to the public domain.\nYou may use this entire package for any purpose whatsoever without\nrestriction.\n\nHere is a more formal wording governing the software:\n\nI, the copyright holder of this work, hereby release it into the\npublic domain. This applies worldwide.\n\nIn case this is not legally possible, I grant any entity the right\nto use this work for any purpose, without any conditions, unless\nsuch conditions are required by law.\n\nYou can also follow this if you wish:\nhttp://creativecommons.org/publicdomain/zero/1.0/\n\n\n\nINTRODUCTION\n------------\n\nThis project is to create a public domain runtime library which\nconforms to ISO/IEC 9899:1990.  Although originally intended\nto be OS-specific (based on the principle that it is the C\nlibrary's job to do unportable but fast processing rather than\nthe application developer), but not compiler-specific, an enormous\namount of the C library turned out to be sharable, with the\nnotable exception that the I/O is mostly divided into mainframe\nand non-mainframe versions.\n\nAnyone wishing to contribute to this project, please contact\nPaul Edwards at mutazilah@gmail.com.\n\nThe official method for obtaining PDPCLIB is to download it from:\nhttp://pdos.sourceforge.net\n\n\n\nMAIN DESIGN GOALS\n-----------------\n\n1. Application developers should not have to resort to DosOpen, open et al\n   in order to get better performance for binary files.\n\n2. Application developers should not have to resort to using binary mode to\n   get better performance for fgets in text mode.\n\n\n\nCURRENT STATUS\n--------------\n\nAll routines have been implemented according to the\nISO C90 standard on all environments, although there\nare restrictions on some operations, such as opening\na file for update or append. However, these restrictions\ndo not prevent it from being a conforming implementation.\nI believe the DOS version doesn't do full long arithmetic\nso that environment is possibly non-conforming.\n\n\nThe following environments have been used:\n\nWin32 for:\ngcc 3.4.4\n\nDOS for:\nTurbo C++ 1.01\nOpen Watcom 1.6\n\nMVS for:\nIBM C/370 v2r1m0\nGCCMVS 3.2.3\n\nCMS for:\nGCCCMS 3.2.3\n\nOS/2 for:\nEMX 0.9b\nWatcom C++ 10.0b\nIBM CSET++ 2.0\nBorland C++ 1.5\n\nPDOS for:\nEMX 0.9d\n\n\n\nWHO WANTS IT?\n-------------\n\nIt is expected that this archive will interest the following groups of\npeople:\n\n1. People who have a commercial compiler, such as IBM CSET (OS/2),\nbut would like to have the source code to the C runtime library,\nso that they can have control over it.\n\n2. People who have a commercial compiler, such as Borland, where\nalthough they have the runtime source, Borland have some restrictions\non the use of their object code, saying that the resultant executable\nmust have either their copyright notice on it, or yours, or some such\nrubbish.\n\n3. People who have EMX 0.9d, but would like to be able to modify the\nruntime library code without being bound by any of EMX's licensing\nrestrictions on doing that.\n\n4. People who are interested in the internal workings of a runtime\nlibrary, and would like unrestricted use of any useful code they\nmay find whilst investigating that.\n\n5. Someone who wants to write their own commercial C compiler and\nlibrary, and wants something to use as a base.  This at least gives\nyou the library, there are no public domain C compilers available\nto the best of my knowledge, on any platform.\n\n6. People who have ISO text-processing programs that want a significant\nspeed improvement.\n\n7. Mainframe users who don't have any other choice to use with GCC.\n\n\n\nUSAGE\n-----\n\nThere are makefiles for all the different compilers supported.  Choose\nthe one you want, and compile it, creating a library if you want, and\nthen compiling your programs in the same way that the \"pdptest\" program\nis compiled.  Note that code that refers to __32BIT__ is for compiling\nprograms using EMX 0.9d for DOS.\n\nFor 16-bit DOS, the default is to use the free C Turbo C++ 1.01\n(in order to get the C compiler) and the free Open Watcom 1.6\n(in order to get the assembler), so that you have a totally free\n16-bit DOS development system. Just type \"compile\" to use this\ncombination.\n\nFor 32-bit Windows (pdpclib-win32), the default is to use\nthe (free) gcc compiler and the (free) jwasm as the assembler.\nUse a decent \"make\" that doesn't need tabs (e.g. Borland's make\nor Microsoft's nmake) and then go \"make -f makefile.w32\".\n\nFor PDOS/386 go either \"make -fmakefile.pds\" when running\nEMX 0.9d or go \"dmake -B -f makefile.pdw\" when cross-compiling\nfrom Windows.\n\nTo produce a Windows executable that is similar to mingw,\nrun compmsvcrt (which produces a DLL suitable for use\nin PD-Windows) then comppdptest.\n\n\n\nPERFORMANCE\n-----------\n\nA long time ago I did performance testing (of version 0.07 of\nPDPCLIB) of the stated objectives, using perf*.c as the testing\ntool, and got the following results (on OS/2):\n\n                fgets on text files\n                -------------------\n\nbcc - 12.98 12.98 13.10\ngcc - 12.59 12.51 12.45\nicc - 7.84 7.72 7.76\nwcc - 23.38 23.36 23.34\npbcc - 4.87 4.84 4.85\npgcc - 4.42 4.52 4.50\npicc - 4.87 4.96 4.85\npwcc - 4.87 4.85 4.87\n\nsummary - cset has the best library, watcom the worst.  pdpclib\ncreams the lot.  gcc is the best compiler.\n\n\n                large freads on binary files\n                ----------------------------\n\nbcc - 2.10 2.01 1.98\ngcc - 2.71 2.70 2.64\nicc - 3.87 3.88 3.93\nwcc - 2.18 2.18 2.18\npbcc - 1.83 1.85 1.87\npgcc - 1.89 1.83 1.87\npicc - 1.87 1.84 1.85\npwcc - 1.85 1.83 1.86\n\nsummary - Borland has the best library, cset has the worst.\npdpclib creams the lot.  The compilers are equal.\n\n\n                small freads on binary files\n                ----------------------------\n\nbcc - 8.13 8.27 8.42\ngcc - 3.98 3.92 3.91\nicc - 4.54 4.64 4.68\nwcc - 3.89 3.95 3.93\npbcc - 3.24 3.22 3.19\npgcc - 3.41 3.43 3.41\npicc - 3.24 3.24 3.21\npwcc - 3.21 3.20 3.21\n\nsummary - Borland has the worst library, gcc has the best. pdpclib,\nas usual, beats the lot.  The compilers are basically equal,\nexcept that gcc is slightly worse, as it doesn't generate an\ninline memcpy() for the situation I am using it in.  The main\nreason for gcc having the best library is that it has a default\nbuffer size of 5120 compared to the others at 4096.  Note - in\nother tests I did, gcc was coming out ahead of wcc, by about 5%,\nso I don't know why this particular set of tests had them level.\n\n\nInformation:\nI used a 486DX33 with a RAM disk in order to perform these tests,\nin an effort to concentrate the stats on the library itself rather\nthan the physical hard disk.\nbcc = Borland C++ 1.5\ngcc = EMX 0.9a\nicc = CSET++/2 2.0\nwcc = Watcom 10.0b\np* = PDPCLIB compiled with one of the above compilers.\n\n\nSorry I don't have up-to-date stats or mainframe stats.\nI wouldn't expect pdpclib on the mainframe to be better\nthan the commercial compilers because it does record reads\nrather than block reads. Hopefully one day this will be\nrectified.\n\n\n\nHISTORY\n-------\n\nOn 1994-04-28 in the PUBLIC_DOMAIN Fidonet echo, the question\nwas asked what was required to replace MSDOS, and experimentation\nbegan. By 1994-07-03 the POS/PDOS project was \"formally\" elaborated.\nOn 1994-07-12 focus was switched to the C runtime library to\nsupport it and to identify the high priority MSDOS interfaces\nthat would be required by PDOS. First beta of PDPCLIB was made\navailable on 1994-07-30.\n\n0.01  Released 1994-08-27\n      A lot of stuff has been implemented, and a lot of stuff has\n      not.  However, there has been sufficient amount of work done\n      to make it at least interesting reading.\n\n0.02  Released 1994-12-29\n      Further down the track, but not enough to go bananas about.\n      Main work was done in fopen(), which is far more robust now.\n\n0.03  Released 1995-01-07\n      Got it working on Watcom, CSET + GNU.\n\n0.04  Released 1995-08-06\n      Miscellaneous additions\n\n0.05  Released 1995-12-26\n      There is a function for every single function except those in\n      the math library, but there are still holes in the system,\n      especially with the File I/O.  But now I have all of the\n      fundamental design in place.\n\n0.06  Released 1996-01-02\n      Much more robust file i/o.\n\n0.07  Released 1996-02-04\n      Many bug fixes and enhancements.\n\n0.50  Released 1997-05-03\n      DOS support, and various bug fixes.\n\n0.51  Released 1997-05-18 together with PDOS 0.10.\n      General tidy up.\n\n0.52  Released 1997-09-13\n      Bug fixes for problems found whilst doing PDOS work.\n\n0.60  Released 1997-11-01\n      Added MVS support, since I suddenly had an MVS machine available\n      and had always wondered how on earth C was able to be implemented\n      on that environment.  Now I know some of the answers.\n\n0.61  Released 1997-12-28\n      Implemented a stub function required for some situations under\n      MSDOS.\n\n0.70  Released 1998-01-05\n      Added PDOS support.\n\n0.71  Released 1998-01-11\n      Completed PDOS and fixed DOS bug.\n\n0.73  Released 1998-04-07\n      Revamped interface to PDOS.\n\n0.80  Released 2004-03-17\n      Many changes to work with GCC (MVS port).\n\n0.81  Released 2006-01-06\n      Now works for CMS as well, and both CMS and MVS\n      have a working setjmp/longjmp.\n\n0.82  Released 2006-01-20\n      Made __CMS__ independent of __MVS__. Also fixed\n      a bug.\n\n0.83  Released 2006-03-04\n      Whitespace change required to avoid assembly error.\n\n0.84  Released 2007-08-23\n      All math functions have been implemented, meaning\n      every function has now been implemented, although\n      some still have limitations. Also, Win32 support has been\n      added so you can use PDPCLIB in combination with gcc to\n      create console mode applications. Also, MVS has been\n      significantly enhanced so that it can read PDS\n      concatenations. Also, MVS executables are now 31-bit.\n\n0.85  Released 2007-12-16\n      Support for S/380, bug fixes, memmgr option.\n\n0.86  Released 2008-03-04\n      Bug fixes to do with floating point. On MVS, null variable\n      length records have a single blank as data, as per ISPF and\n      as IEBCOMPR expects. Macros are now provided for the different\n      compile environments (370, 380 and 390).\n\n1.00  Released 2009-01-26\n      Supports VM/380, writing to variable-blocked datasets,\n      reading and writing RECFM=U on MVS, rename and remove\n      on MVS, scanf has been updated to support all formats.\n      There is now no longer anything I know of that hasn't\n      been implemented. It would require going through the\n      ISO standard to check that, which I haven't done. Since\n      I don't know of anything that hasn't been implemented,\n      this is now version 1.00, after 15 years! If you see\n      anything that isn't implemented, let me know and I'll\n      check the standard and try to add it. Or better yet,\n      submit the code fix with the bug report. :-) Note that\n      opening files for update isn't implemented yet, but I\n      think that it's still conformant without that facility,\n      so long as an error is returned on open. It just means\n      that it's usability is downgraded. Similar to it not\n      being able to open VSAM datasets.\n\n1.50  Released 2009-06-04\n      setjmp & longjmp implemented properly for all PC environments,\n      making them compliant too. setjmp & longjmp revamped on MVS\n      and CMS to stop saving the entire stack. Several bug fixes.\n      And hack for MVS taken out now that the compiler bug has\n      been fixed.\n\n2.00  Released 2009-08-21\n      Linux version added. Some missing functionality in CMS\n      added. Some bugs fixed. Some parameters unclumped.\n\n2.01  Released 2009-09-26\n      Bug fixes and minor enhancements, mainly for MVS.\n\n3.00  Released 2010-05-23\n      Major revamp of MVS assembler to support default DCB info.\n      Also MUSIC/SP has a working target. VSE also has a working\n      target, but it's still very much alpha.\n\n3.10  Released 2011-01-01\n      VSE target completely revamped and is now good enough to\n      release a GCCVSE.\n      A \"standalone\" target is provided for S/3x0 hardware,\n      which PDOS (the operating system) now uses.\n      Some changes to the MVS target were required to support\n      running MVS applications under PDOS nicely. Specifically\n      \"unit record\" devices needed to be detected as such,\n      and operate as line-buffered, including (nominally)\n      RECFM=U devices.\n      Miscellaneous bug fixes.\n\n4.00  Released 2019-10-01\n      MVS target has had large boost in functionality. By\n      default it produces load modules that run as 31/ANY\n      on z/OS while still running as AM24 on MVS 3.8J. And\n      they will still get memory above the line on MVS/XA\n      and MVS/380. Modules are 32-bit clean so will run as\n      AM32 on MVS/380, not just AM31.\n      PC target now produces a MSVCRT.DLL which allows very\n      small executables on Windows or PD-Windows.\n\n\nFUTURE DIRECTION\n----------------\n\nVM/CMS port that uses native CMS macros instead of OS emulation.\nGet DD overrides implemented for MVS the same way that SMP calls\n  IEBCOPY etc and perhaps detect more environments such as CICS\n  and check the general interface.\nStack checking at least for stack overwrite on termination.\nCheck buffer sizes in AOPEN are not excessive.\nCheck IBM's use of CRAB/DSA prior to getting code reentrant again.\nGet it working (again) with other MVS C compilers such as C/370.\nEnsure no anomalies remain with regards to flushing on MVS\n  when in an interactive environment.\nRead/write blocks instead of records on all mainframe platforms.\nAllow open for update and append on various environments.\nLong arithmetic to be implemented on MSDOS.\nVSE port needs to be more flexible with file opens.\nPorts to some of the more obscure mainframe environments such as TSS.\nA port to z/TPF.\nUpdate MSDOS/Windows/OS2 code to cope with a x'1a' (ctrl-z) as\n  an end-of-file marker (files like this are produced by some\n  MSDOS commands like \"type *.txt >temp.dat\".\n\n\n\nCREDITS\n-------\n\nDave Wade for doing the CMS port, the maths functions\n  and getting floating point supported and various other\n  enhancements and bug fixes along the way.\nDave Edwards (RIP) for various bug fixes/enhancements and\n  MUSIC/SP support.\nFausto Saporito for his work on the native MUSIC/SP port.\nPhil Roberts for helping to debug the MVS port.\nGerhard Postpischil for the MVS assembler revamp, and for\n  his extremely important work on MVS/380 too.\nRobert O'Hara for getting EPLIST support working in CMS\n  and for making the mods to CMS (in VM/380) to support\n  a 31-bit environment for PDPCLIB to use.\nFran Hensler, Bruce Smith, Bill Carlborg, Louis Millon,\n  Michel Beaulieu and others for assistance and code\n  for the z/VSE port.\nRay Gardner for making his date routines public domain, plus\n  the original qsort routine (since replaced with libnix).\nJim Nutt and Rob Duff for releasing strftime to the public domain.\nRowan Crowe for some mods to memcpy.\nMatthew Parker for getting the program name under MSDOS.\nAnd last but not least, my wife, for putting up with me in\n  the many many man-days/weeks/months/years (lost track) it\n  took me to write this, when I should have been doing\n  family-related things.\n\nAlso, I have used a small amount of code from libnix,\nanother public domain C runtime library available here:\nhttp://sourceforge.net/projects/libnix\nwhich was only known to me after pdpclib was mostly written.\n\nAlso in the past I used some code from pdclib, available here:\nhttp://sourceforge.net/projects/pdclib\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "PDPGOAL": {"ttr": 267, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "          GOALS OF THE PUBLIC DOMAIN PROJECT\n          ----------------------------------\n\nVersion:  1.8\nDate:     2018-11-21\nAuthor:   Paul Edwards\nInternet: mutazilah@gmail.com\nStatus:   This document is released to the public domain\n\n\nThe Public Domain Project's philosophy is basically to put as much\nbase material into the public domain so that commercial developers,\nor other PD developers, can build upon it, rather than having to\nreinvent the wheel.  Unless something is public domain, it essentially\nhasn't been invented yet, as far as not needing to reinvent it is\nconcerned.  It's like inventing the cure for cancer and keeping it a\nsecret.  You may as well not have bothered.\n\nThe commercial software which you end up using (which most people use,\nif only for the support) will always be sold at a price designed to\nrecoup costs.  The only way you can reduce the price of commercial\nsoftware is to reduce the costs they have.  One way to do this is to\ngive them quality public domain code on which to use as a basis for\nfurther development.  Normal market forces will guarantee that the\ncost saving goes through to the customer.  It's the basis of\ncapitalism.  Feel free to start your own business and make enormous\nprofits if you disagree.\n\nWhy not use GPL (aka the Gnu Virus License)?  Well, there are three\nbig problems with it.  The first is that if you are a commercial\ndeveloper, and have some spare time to contribute to a freeware\nproduct, after spending 10 hours wading through someone else's code,\ngetting familiar with it, and improving it or bug fixing it, all the\ntime you spent is wasted, as far as being able to reuse any routines\nyou found in a commercial product is concerned.\n\nThe second is that encourages others to join the dog-in-the-manger\nbrigade.  Someone who ordinarily would be happy to contribute something\nto the public domain, once and for all, now instead goes and spends their\neffort on a GPL product, meaning the world still doesn't get the code\nfreely available for ALL use (i.e. in public domain projects AND commercial\nprojects, not JUST other GPL projects).\n\nThe third is that it is actually technology-inhibitive.  E.g. let's\nsay there's a GPL wordprocessor, but it doesn't support italics.\nQuite a lot of people want italics, but no-one to date has been\nwilling to do that work for free.  Let's say a portion of the market\nwants italics.  But no one individual can afford to pay the cost of\ndevelopment by themselves.  Normally this is where a company would\njump in, do the work, and then sell the new version to the market,\nmeaning that each individual only has to pay a fraction of the\ndevelopment cost.  But the problem is that the company CAN'T just\nmake those changes and sell them, because it can't make those\nchanges proprietary, as it needs to do in order to sell them.  So\ninstead, the commercial operation needs to develop the entire\nequivalent of the GPL wordprocessor, and THEN add italics.  But it\nis too expensive for the company to do that, so the technology is\nsimply never developed!\n\nAnother factor is that people writing freeware often solicit\ndonations of time or money from the public. If you expect\nrandom members of the public to assist your project, then how\nabout doing the courtesy of letting the public actually own\nthe code that they are funding, by making it public domain.\n\nGPL code will eventually become as useful as public domain code - 50\nyears after the death of the original author, when it becomes public\ndomain!  That's a long time to have to wait.  Until then, unless your\nlawyer informs you that the 2756 license agreement conditions don't\naffect you, the GPL work is only useful as reference material.\n\nNote that when a company makes a sovereign decision to not release\nsource code for their product, that is their innate right. When you\nrelease source code that doesn't allow their company to exercise\ntheir innate desire, you are trying to force something on them,\nand have no respect for their sovereign choices. It is insisting\nthat it is either your way or the highway. This is not a sensible\ndefinition of freedom/free software any more than a communist\ndictator was considered to be the ultimate freedom (compared\nto capitalist slavery) by its advocates.\n\nThe default for any software written is for it to be copyright by the\nauthor.  Please include an explicit \"Released to the public domain\" if\nyou wish to make your code public domain.  If you wish to contribute\nsome public domain code, please contact Paul Edwards at the address\nabove.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "README": {"ttr": 515, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "Public Domain C Library\n-----------------------\n\nFiles included:\n\npdpclib.txt  - documentation for this archive\npdpgoal.txt  - philosophy of the Public Domain Project\n*.c          - source code\n*.asm        - source code\n*.h          - header files\nmakefile.*   - various makefiles\ncompile.cmd  - command to execute makefiles for OS/2\ncompile.bat  - command to execute makefile for DOS\npdptest.*    - demo program\n*.lib        - lib files for various compilers\npdpcms.bat   - build example program for CMS\npdpmts.bat   - build example program for MTS\npdpmus.bat   - build example program for MUSIC/SP\npdpmvs.bat   - build example program for MVS\npdpvse.bat   - build example program for DOS/VSE\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT852/CBT.V500.FILE852.PDS/PDPDOC.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT852/CBT.V500.FILE852.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}