{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011403000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2116296, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 13, "INMDSNAM": "CBT.V500.FILE168.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2116296, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2116296, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE168.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00!\\r'", "DS1TRBAL": "b'\\x05\\xb6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x01$\\x00\\x07\\x01&\\x00\\n\\x00\"'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x007\\x01 \\x11\\x0f\\x01 \\x11\\x0f\\x12\\x10\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-04-19T00:00:00", "modifydate": "2020-04-19T12:10:37", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-499"}, "text": "REGULAR CBT TAPE - VERSION 499    FILE:  168\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT499.FILE168\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 47 MEMBERS COUNTED; CUMULATIVE SIZE IS 19,332 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   04/19/20    12:10:37    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x91\\x11_\\x01\\x01\\x03\\x0f\\x14\\x16\\x000\\x000\\x00\\x00\\xe6\\xe2\\xc2\\xc7@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "2001-01-30T14:16:00", "lines": 48, "newlines": 48, "modlines": 0, "user": "WSBG"}, "text": " MVS SOFTWARE AND MODIFICATIONS\n FROM BILL GODFREY, OF PRC INC.     email:  Bill.Godfrey@noaa.gov\n (FORMERLY PLANNING RESEARCH CORPORATION)\n MCLEAN, VIRGINIA\n\n MEMBER NAMES ENDING WITH '$' CONTAIN JCL TO ASSEMBLE AND LINK,\n AND ARE NOT LISTED BELOW.\n MEMBER NAMES ENDING WITH '#' CONTAIN HELP FOR A TSO COMMAND,\n AND ARE NOT LISTED BELOW.\n\n $DOC     - THIS FILE YOU ARE READING.\n ASMH     - REFRESH OF ASSEMBLER PROMPTER  FROM CBT FILE 300.\n CATPW    - DISPLAY ICF MASTER CATALOG PASSWORDS.\n COPYPDS  - REFRESH OF COPYPDS TSO COMMAND FROM CBT FILE 300. ISPF ENQ.\n CUTC01   - ISPF/PDF EDIT CLIST 'CUT', PART OF CUT/PASTE SET.\n CUTC02   - ISPF/PDF EDIT CLIST 'PASTE', PART OF CUT/PASTE SET.\n CUTDOC   - DESCRIPTION OF CUT/PASTE.\n CUTD01   - INSTALLATION INSTRUCTIONS FOR CUT/PASTE, SINGLE-USER TEST.\n CUTD02   - INSTALLATION INSTRUCTIONS FOR CUT/PASTE, SYSTEM-WIDE.\n CUTH01   - ISPF/PDF PANEL, DISPLAYED WHEN USER ENTERS \"CUT ?\"\n CUTH02   - ISPF/PDF PANEL, DISPLAYED WHEN USER ENTERS \"PASTE ?\"\n CUTJ01   - INSTALLATION JCL FOR CUT/PASTE, SINGLE-USER TEST.\n CUTJ02   - INSTALLATION JCL FOR CUT/PASTE, SYSTEM-WIDE.\n CUTL01   - ISPF/PDF EDIT MACRO 'CUT', PART OF CUT/PASTE SET.\n CUTL02   - ISPF/PDF EDIT MACRO 'PASTE', PART OF CUT/PASTE SET.\n CVD      - TSO COMMAND TO CONVERT A HEX NUMBER TO DECIMAL.\n CVX      - TSO COMMAND TO CONVERT A DECIMAL NUMBER TO HEX.\n DSPRINT  - TSO COMMAND TO PRINT SYSOUT. SAME SYNTAX AS IBM'S DSPRINT.\n FINDAZAP - UTILITY TO FIND A STRING IN A LOAD MODULE, GENERATE A ZAP.\n MEMBER   - REFRESH OF MEMBER TSO COMMAND  FROM CBT FILE 300. XA FIX.\n SHOWDS   - REFRESH OF SHOWDS TSO COMMAND  FROM CBT FILE 300. XA FIX.\n ULXDOC   - INFORMATION ABOUT THE ULX... MEMBERS.\n ULX...   - ISPF PROGRAM FOR DISPLAYING FREE SPACE ON A DISK VOLUME.\n XBE      - EXECUTE ISPF BROWSE OR EDIT VIA SHORTCUT.\n XBEDOC   - INSTRUCTIONS FOR USING XBE.\n\n THE FOLLOWING NAMING CONVENTION HAS BEEN USED FOR MEMBERS THAT\n ARE PARTS OF AN ISPF APPLICATION:\n    THE FIRST 3 CHARACTERS IDENTIFY THE APPLICATION.\n    THE 4TH CHARACTER IS\n            'L' FOR SOURCE CODE OF LOAD MODULES  'D' FOR DOCUMENTATION\n            'P' FOR PANEL        'H' FOR TUTORIAL PANEL\n            'M' FOR MESSAGE SET  'C' FOR CLIST\n            'S' FOR SKELETON     'J' FOR JCL\n    THE 5TH AND 6TH CHARACTERS ARE NUMBERS THAT UNIQUELY IDENTIFY\n    EACH MODULE WITHIN THE GROUP.\n    THE NAMING CONVENTION FITS WITHIN THE NAMING REQUIREMENTS FOR\n    MEMBERS OF THE ISPF MESSAGE LIBRARIES.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE168": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04c\\x002\\x01 \\x11\\x0f\\x01 \\x11\\x0f\\x12\\x10\\x00S\\x00S\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf9@@@'", "ispf": {"version": "04.99", "flags": 0, "createdate": "2020-04-19T00:00:00", "modifydate": "2020-04-19T12:10:32", "lines": 83, "newlines": 83, "modlines": 0, "user": "CBT-499"}, "text": "//***FILE 168 WAS CONTRIBUTED BY BILL GODFREY OF PRC, INC.          *   FILE 168\n//*           IN SUITLAND, MD.  THESE ARE UPDATES TO SOME OF        *   FILE 168\n//*           IS PROGRAMS IN JIM MARSHALL'S FILES, AND THERE        *   FILE 168\n//*           ARE SOME NEW THINGS.  BILL HAS DONE MUCH PIONEERING   *   FILE 168\n//*           WORK, AND HIS SOFTWARE DESERVES A GOOD LOOK.          *   FILE 168\n//*                                                                 *   FILE 168\n//*   email:  Bill.Godfrey@noaa.gov                                 *   FILE 168\n//*                                                                 *   FILE 168\n//*         MVS SOFTWARE AND MODIFICATIONS                          *   FILE 168\n//*         FROM BILL GODFREY, OF PRC INC.                          *   FILE 168\n//*         (FORMERLY PLANNING RESEARCH CORPORATION)                *   FILE 168\n//*         MCLEAN, VIRGINIA                                        *   FILE 168\n//*                                                                 *   FILE 168\n//*         MEMBER NAMES ENDING WITH '$' CONTAIN JCL TO             *   FILE 168\n//*         ASSEMBLE AND LINK, AND ARE NOT LISTED BELOW.            *   FILE 168\n//*                                                                 *   FILE 168\n//*         MEMBER NAMES ENDING WITH '#' CONTAIN HELP FOR A         *   FILE 168\n//*         TSO COMMAND, AND ARE NOT LISTED BELOW.                  *   FILE 168\n//*                                                                 *   FILE 168\n//*         $DOC     - THIS FILE YOU ARE READING.                   *   FILE 168\n//*         ASMH     - REFRESH OF ASSEMBLER PROMPTER FROM CBT       *   FILE 168\n//*                    FILE 300.                                    *   FILE 168\n//*         CATPW    - DISPLAY ICF MASTER CATALOG PASSWORDS.        *   FILE 168\n//*         COPYPDS  - REFRESH OF COPYPDS TSO COMMAND FROM          *   FILE 168\n//*                    CBT FILE 300. ISPF ENQ.                      *   FILE 168\n//*         CUTC01   - ISPF/PDF EDIT CLIST 'CUT', PART OF           *   FILE 168\n//*                    CUT/PASTE SET.                               *   FILE 168\n//*         CUTC02   - ISPF/PDF EDIT CLIST 'PASTE', PART OF         *   FILE 168\n//*                    CUT/PASTE SET.                               *   FILE 168\n//*         CUTDOC   - DESCRIPTION OF CUT/PASTE.                    *   FILE 168\n//*         CUTD01   - INSTALLATION INSTRUCTIONS FOR                *   FILE 168\n//*                    CUT/PASTE, SINGLE-USER TEST.                 *   FILE 168\n//*         CUTD02   - INSTALLATION INSTRUCTIONS FOR                *   FILE 168\n//*                    CUT/PASTE, SYSTEM-WIDE.                      *   FILE 168\n//*         CUTH01   - ISPF/PDF PANEL, DISPLAYED WHEN USER          *   FILE 168\n//*                    ENTERS \"CUT ?\"                               *   FILE 168\n//*         CUTH02   - ISPF/PDF PANEL, DISPLAYED WHEN USER          *   FILE 168\n//*                    ENTERS \"PASTE ?\"                             *   FILE 168\n//*         CUTJ01   - INSTALLATION JCL FOR CUT/PASTE,              *   FILE 168\n//*                    SINGLE-USER TEST.                            *   FILE 168\n//*         CUTJ02   - INSTALLATION JCL FOR CUT/PASTE,              *   FILE 168\n//*                    SYSTEM-WIDE.                                 *   FILE 168\n//*         CUTL01   - ISPF/PDF EDIT MACRO 'CUT', PART OF           *   FILE 168\n//*                    CUT/PASTE SET.                               *   FILE 168\n//*         CUTL02   - ISPF/PDF EDIT MACRO 'PASTE', PART OF         *   FILE 168\n//*                    CUT/PASTE SET.                               *   FILE 168\n//*         CVD      - TSO COMMAND TO CONVERT A HEX NUMBER TO       *   FILE 168\n//*                    DECIMAL.                                     *   FILE 168\n//*         CVX      - TSO COMMAND TO CONVERT A DECIMAL             *   FILE 168\n//*                    NUMBER TO HEX.                               *   FILE 168\n//*         DSPRINT  - TSO COMMAND TO PRINT SYSOUT. SAME            *   FILE 168\n//*                    SYNTAX AS IBM'S DSPRINT.                     *   FILE 168\n//*                    (fixed for 8-character TSO userids)          *   FILE 168\n//*         FINDAZAP - UTILITY TO FIND A STRING IN A LOAD           *   FILE 168\n//*                    MODULE, GENERATE A ZAP.                      *   FILE 168\n//*         MEMBER   - REFRESH OF MEMBER TSO COMMAND FROM           *   FILE 168\n//*                    CBT FILE 300. XA FIX.                        *   FILE 168\n//*         SHOWDS   - REFRESH OF SHOWDS TSO COMMAND  FROM          *   FILE 168\n//*                    CBT FILE 300. XA FIX.                        *   FILE 168\n//*         ULXDOC   - INFORMATION ABOUT THE ULX... MEMBERS.        *   FILE 168\n//*         ULX...   - ISPF PROGRAM FOR DISPLAYING FREE SPACE       *   FILE 168\n//*                    ON A DISK VOLUME.                            *   FILE 168\n//*         XBE      - EXECUTE ISPF BROWSE OR EDIT VIA              *   FILE 168\n//*                    SHORTCUT.                                    *   FILE 168\n//*         XBEDOC   - INSTRUCTIONS FOR USING XBE.                  *   FILE 168\n//*                                                                 *   FILE 168\n//*         THE FOLLOWING NAMING CONVENTION HAS BEEN USED FOR       *   FILE 168\n//*         MEMBERS THAT ARE PARTS OF AN ISPF APPLICATION:          *   FILE 168\n//*                                                                 *   FILE 168\n//*            THE FIRST 3 CHARACTERS IDENTIFY THE APPLICATION.     *   FILE 168\n//*            THE 4TH CHARACTER IS                                 *   FILE 168\n//*                  'L' FOR SOURCE CODE OF LOAD MODULES            *   FILE 168\n//*                  'D' FOR DOCUMENTATION                          *   FILE 168\n//*                  'P' FOR PANEL        'H' FOR TUTORIAL PANEL    *   FILE 168\n//*                  'M' FOR MESSAGE SET  'C' FOR CLIST             *   FILE 168\n//*                  'S' FOR SKELETON     'J' FOR JCL               *   FILE 168\n//*            THE 5TH AND 6TH CHARACTERS ARE NUMBERS THAT          *   FILE 168\n//*            UNIQUELY IDENTIFY EACH MODULE WITHIN THE GROUP.      *   FILE 168\n//*                                                                 *   FILE 168\n//*            THE NAMING CONVENTION FITS WITHIN THE NAMING         *   FILE 168\n//*            REQUIREMENTS FOR MEMBERS OF THE ISPF MESSAGE         *   FILE 168\n//*            LIBRARIES.                                           *   FILE 168\n//*                                                                 *   FILE 168\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "ASMH": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x0by\\x0by\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 2937, "newlines": 2937, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   A S S E M B L E R   T S O   P R O M P T E R  '\n***********************************************************************\n*                                                                     *\n*        ASSEMBLER TSO PROMPTER.                                      *\n*                                                                     *\n***********************************************************************\n*\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* ORIGINAL INSTALLATION:\n*  AIR FORCE DATA SERVICES CENTER, THE PENTAGON.\n* DATE WRITTEN: MARCH 12 1981, AT AFDSC.\n* DATE UPDATED: APRIL 25 1991, AT NOAA.\n* ATTRIBUTES: RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*         THIS TSO COMMAND INVOKES THE ASSEMBLER.\n*\n*         BY SPECIFYING CERTAIN SYSPARM VALUES WHEN ASSEMBLING\n*         THE COMMAND, IT CAN BE MADE TO INVOKE ASSEMBLER XF (IFOX00)\n*         ASSEMBLER G, ASSEMBLER H, OR THE 3705 ASSEMBLER.\n*         IF YOU WANT MORE THAN ONE, YOU MUST ASSEMBLE A SEPARATE\n*         PROMPTER FOR EACH, AND GIVE EACH PROMPTER A DIFFERENT NAME.\n*\n*         AT THE TIME THIS WAS WRITTEN, ASSEMBLER H WAS VERSION 1\n*         (IBM PRODUCT # 5734-AS1).  WITH XA CAME VERSION 2 (5668-962).\n*         TO THE BEST OF MY KNOWLEDGE ALL OF THE PARMS ARE THE SAME.\n*\n*        LOG OF CHANGES.\n*         06APR81 - 'MOD' KEYWORD ADDED.\n*         20APR81 - FIX BUG IN OBJ MEMBERNAME.\n*         20APR81 - FIX BUG IN HANDLING MEMBER NAMES WITHOUT DSNAMES.\n*         13MAY81 - MREF KEYWORD TO INVOKE AFOX00 (MACRO REFERENCE).\n*         17NOV81 - SHOW SYSOUT CLASS IF SYSOUT AND MSG SPECIFIED.\n*         17NOV81 - IF SYS1.MACLIB IS SPECIFIED AS ANY OF THE MACRO\n*                   LIBRARIES, SET THE DEFAULT TO NOMACLIB SO IT\n*                   WILL BE ALLOCATED ONLY WHERE SPECIFIED.\n*                   OTHERWISE ALLOCATE IT FIRST, AS BEFORE.\n*         17DEC81 - ATTACH ASSEMBLER INSTEAD OF LINK, IF TASKLIB.\n*         21DEC81 - ASSEMBLER G PROMPTER MAY NOW BE GENERATED.\n*                   BUT FEW KEYWORDS UNIQUE TO ASMG ARE SUPPORTED.\n*         05JAN82 - SYSPARM USAGE CHANGED. SEE 'HOW TO INSTALL'.\n*                   TASKLIB DDNAME CHANGED FROM ASMLIB TO ASMFLIB\n*                   OR ASMGLIB OR ASMHLIB.\n*         14JUL82 - CHANGES AT STATE DEPARTMENT.\n*                   INSTRUCTION IN FRONT OF MACOVSET FIXED.\n*                   MINOR CHANGES TO COMMENTS ABOUT INSTALLING.\n*         21JUN83 - CHANGES AT STATE DEPARTMENT.\n*                   ADD ASMTASK TO GET CPU TIME UNDER TASKLIB.\n*                   DISK/NODISK KEYWORD ADDED FOR STANFORD ASSEMBLER H.\n*                   PAUSE KEYWORD ADDED FOR NOBREAK TERMINALS.\n*                   SHOW CPU TIME TO 1 DECIMAL PLACE INSTEAD OF 2.\n*         30DEC85 - LIB DEFAULT NOLIB.\n*         07SEP89 - ADD SUPPORT FOR 3705 ASSEMBLER. PROBABLY WILL NEVER\n*                   BE USED, BUT ITS PARAMETERS ARE SO SIMILAR THAT I\n*                   JUST HAD TO TRY IT ONCE.\n*         25APR91 - REPLACE INLINE SDWA DSECT WITH IHASDWA SO THAT\n*                   XA SYSTEMS WILL GET THEIR SDWA MAPPED CORRECTLY.\n*                   SAME CHANGE MADE BY JIM MARSHALL 11MAR85 AS\n*                   SUGGESTED BY HOWARD DEAN. (GETTING IN SYNC WITH\n*                   THE MODS TAPE BEFORE RESUBMITTING TO MODS TAPE).\n*\n***********************************************************************\n         SPACE\n         MACRO\n&N       APPEND &X\n         LCLA  &L\n         LCLC  &C\n&L       SETA  L'&X\n&C       SETC  '&L'\n&N       MVC   0(&C,R15),&X\n         LA    R15,&C.(,R15)\n         MEND\n         SPACE\n         GBLB  &MVS,&BETA,&F,&G,&H,&C,&P1,&P2,&P3,&P4,&P5,&P6,&P7,&P8\n         GBLC  &NAME2,&NAMEL\n*              SYSPARM(F1) VS ASSEMBLER FIRST LOAD\n*              SYSPARM(F2) VS ASSEMBLER SECOND LOAD\n*              SYSPARM(G1) ASSEMBLER G FIRST LOAD\n*              SYSPARM(G2) ASSEMBLER G SECOND LOAD\n*              SYSPARM(H1) ASSEMBLER H FIRST LOAD\n*              SYSPARM(H2) ASSEMBLER H SECOND LOAD\n*              SYSPARM(C1) 3705 ASSEMBLER FIRST LOAD\n*              IF NONE OF THE ABOVE, SYSPARM(H1) ASSUMED\n         SPACE\n         MNOTE *,'             SYSPARM IS (&SYSPARM)       '\n         SPACE\n&MVS     SETB  1   TRUE            1 = MVS    0 = OS/MVT (BUT ESTAE..)\n&P1      SETB  ('&SYSPARM' EQ 'H1')\n&P2      SETB  ('&SYSPARM' EQ 'H2')\n&P3      SETB  ('&SYSPARM' EQ 'F1')\n&P4      SETB  ('&SYSPARM' EQ 'F2')\n&P5      SETB  ('&SYSPARM' EQ 'G1')\n&P6      SETB  ('&SYSPARM' EQ 'G2')\n&P7      SETB  ('&SYSPARM' EQ 'C1')\n&P8      SETB  ('&SYSPARM' EQ 'C2')\n         AIF   (&P1 OR &P2 OR &P3 OR &P4 OR &P5 OR &P6).SPOK\n         AIF   (&P7 OR &P8).SPOK\n&P1      SETB  1   TRUE\n.SPOK    ANOP\n&H       SETB  (&P1 OR &P2)\n&F       SETB  (&P3 OR &P4)\n&G       SETB  (&P5 OR &P6)\n&C       SETB  (&P7 OR &P8)\n&BETA    SETB  (&P2 OR &P4 OR &P6 OR &P8)  SECOND LOAD\n&NAME2   SETC  'ASMH02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMTLIB'           TASKLIB DDNAME\n         AIF   (&H).HH00\n&NAME2   SETC  'ASMG02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMGLIB'           TASKLIB DDNAME\n         AIF   (&G).HH00\n&NAME2   SETC  'ASMF02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMFLIB'           TASKLIB DDNAME\n         AIF   (&F).HH00\n&NAME2   SETC  'ASMC02'            FIRST LOAD XCTL'S TO THIS\n&NAMEL   SETC  'ASMCLIB'           TASKLIB DDNAME\n.HH00    AIF   (&BETA).BETA01\n         EJECT\n***********************************************************************\n*\n*          SYNTAX -\n*                  ASM  'DSNAME'  PRINT(DSNAME) / NOPR / SYSOUT /\n*                                 / PFILE(DDNAME)    LIST / NOLIST\n*                                 OBJECT(DSNAME) / NOOBJECT    MOD\n*                                 LIB(DSNAMES) / NOLIB  MACLIB/NOMAC\n*                                 XREF(FULL/SHORT) / NOXREF\n*                                 BATCH/NOBATCH  ALIGN/NOALIGN\n*                                 TERM/NOTERM  TEST/NOTEST\n*                                 ESD/NOESD  RLD/NORLD  RENT/NORENT\n*                                 FLAG(NNN)  LINECOUNT(NN)\n*                                 SYSPARM()  TIME/NOTIME  MSG/NOMSG\n*\n***********************************************************************\n         SPACE\n***********************************************************************\n*\n*          SOME DIFFERENCES BETWEEN ASSEMBLERS\n*\n*          THESE PARM OPTIONS ARE IN THE VS ASSEMBLER\n*          BUT NOT THE H ASSEMBLER -\n*\n*          ALOGIC/NOALOGIC  YFLAG/NOYFLAG  MCALL/NOMCALL\n*          MLOGIC/NOMLOGIC  LIBMAC/NOLIBMAC   NUMBER   STMT\n*          WORKSIZE(2048K) (32K-10240K)  BUFSIZE(MIN/MAX/STD)\n*\n*          THE VS ASSEMBLER DOES NOT HAVE THE BATCH OPTION.\n*\n*          VS ASSEMBLER USES SYSUT2 AND SYSUT3, H DOES NOT.\n*\n*          THE VS ASSEMBLER IS IFOX00 INSTEAD OF IEV90\n*\n*          THE VS ASSEMBLER SYSPRINT FILE USES ASA\n*          CARRIAGE CONTROLS, WHILE ASSEMBLER H USES\n*          MACHINE CARRIAGE CONTROLS.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         HOW TO INSTALL IT\n*\n*         1) LOOK AT THE DEFAULT MACRO LIBRARY AT 'LIBKW'.\n*            YOU MAY WANT TO MAKE IT DEFAULT='LIB(''USER.MACLIB'')'\n*\n*         2) LOOK AT LABEL 'XCTLKW' AND SEE WHAT THE DEFAULT IS.\n*            YOU MAY WANT TO CHANGE IT BEFORE YOU ASSEMBLE THE\n*            COMMAND.  IT IS EXPLAINED LATER ON THIS PAGE.\n*\n*         3) ASSEMBLE THIS WITH SYSPARM(F1) OR (G1) OR (H1) DEPENDING\n*            ON WHETHER THE PROMPTER IS TO INVOKE ASSEMBLER XF\n*            (IFOX00) OR ASSEMBLER G (ASMGASM) OR ASSEMBLER H (IEV90).\n*            LINK-EDIT THAT AND NAME IT 'ASMF' OR 'ASMG' OR 'ASMH'\n*            (OR 'ASM' IF YOU DONT HAVE AN ASSEMBLER PROMPTER BY THAT\n*            NAME ALREADY).  THE NAME DOES NOT EFFECT THE WAY IT RUNS.\n*\n*         4) IF XCTLKW DEFAULT IS '$X',\n*            ASSEMBLE THIS SAME PROGRAM AGAIN, THIS TIME SPECIFYING\n*            SYSPARM(F2) OR (G2) OR (H2).  THIS WILL CAUSE DIFFERENT\n*            CODE TO BE GENERATED. LINK-EDIT THAT AND NAME IT 'ASMF02'\n*            OR 'ASMG02' OR 'ASMH02'.\n*\n*         XCTL OPTION\n*\n*         THE SECOND LOAD MODULE IS XCTL'D TO BY THE FIRST MODULE.\n*         THE ONLY REASON THIS IS DONE IS TO GIVE THE ASSEMBLER\n*         MORE ROOM TO RUN IN.  IF YOUR TSO REGION SIZES ARE\n*         PLENTY BIG, OR IF THIS COMMAND WILL BE IN LPA,\n*         YOU DONT HAVE TO ASSEMBLE A SECOND MODULE, BUT YOU SHOULD\n*         MAKE SURE THAT THE STATEMENT LABELLED 'XCTLKW' SPECIFIES\n*         DEFAULT='$NOX'.\n*         IF YOU THINK YOU WILL NEED THE EXTRA STORAGE PROVIDED BY\n*         THE XCTL OPTION, MAKE SURE THE DEFAULT IS '$X' AND ASSEMBLE\n*         AND LINK BOTH MODULES.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         MOST OF THE KEYWORDS CORRESPOND TO OPTIONS PASSED TO THE\n*         ASSEMBLER IN ITS PARM FIELD.  PRINT, SYSOUT, PFILE, MOD,\n*         LIB, MACLIB, TIME, AND MSG ARE NOT PARM FIELD OPTIONS,\n*         BUT CONTROL FUNCTIONS WITHIN THE COMMAND.  NOPRINT\n*         CAUSES A NOLIST PARM OPTION.\n*\n*         LIB DATA SETS WILL BE CONCATENATED AFTER 'SYS1.MACLIB',\n*         UNLESS 'SYS1.MACLIB' IS ONE OF THE LIB DATA SETS.\n*         NOMACLIB MAY BE SPECIFIED TO SUPPRESS 'SYS1.MACLIB'.\n*         IF BOTH NOMACLIB AND NOLIB ARE SPECIFIED THEN THE\n*         ASSEMBLER WILL USE WHATEVER YOU HAVE PRE-ALLOCATED\n*         TO DDNAME SYSLIB.\n*\n*         PFILE IS USED WHEN WE PRE-ALLOCATE A SYSOUT FILE WITH\n*         ALL KINDS OF OPTIONS LIKE HOLD OR DEST OR FORMS, AND\n*         WE WANT THE PROMPTER TO USE THAT FILENAME FOR ITS PRINT.\n*\n*         THE 'LIST/NOLIST' KEYWORD IS A FAIRLY USELESS KEYWORD,\n*         BUT IS INCLUDED SO THAT USING IT WONT RESULT IN AN ERROR.\n*         IF 'LIST' IS SPECIFIED, THE 'LIST' OPTION IS PASSED\n*         TO THE ASSEMBLER, BUT THAT IS NEVER NECESSARY.\n*         IF 'NOLIST' IS SPECIFIED, IT FORCES 'NOPRINT'.\n*         IF 'NOPRINT' IS SPECIFIED, IT FORCES 'NOLIST.\n*         JUST USE THE PRINT/NOPRINT/SYSOUT/PFILE KEYWORD\n*         TO CONTROL THE LIST OPTION, AND THINGS WILL WORK FINE.\n*\n*         TO MAKE THE COMMAND DEFAULT TO NOPRINT,\n*         DO NOT PUT DEFAULT='NOLIST' AT LISTKW.  THIS WOULD\n*         FORCE THE USER TO TYPE IN BOTH LIST AND PRINT.\n*         JUST PUT DEFAULT='NOPRINT' AT PRINTKW.\n*\n*         THE 'MSG' KEYWORD CAUSES THE NAMES OF THE PRINT AND\n*         OBJECT DATA SETS TO BE DISPLAYED.  THIS IS USEFUL\n*         BECAUSE THE WAY THE COMMAND BUILDS THESE NAMES TAKES\n*         A WHILE TO GET USED TO.  THE DEFAULT (MSGD) CAUSES\n*         THE NAMES TO BE DISPLAYED WHENEVER THEY ARE NOT OBVIOUS.\n*\n*         THE 'TIME' KEYWORD CAUSES THE CPU TIME USED BY THE\n*         ASSEMBLER TO BE DISPLAYED.  THIS TIME DOES NOT INCLUDE\n*         THE TIME USED BY THE TSO COMMAND BEFORE IT INVOKES\n*         THE ASSEMBLER.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         DATA SET NAME CONVENTIONS\n*\n*          SOURCE INPUT DATA SET\n*             IF AN UNQUALIFIED NAME IS ENTERED, IKJEHDEF\n*             PUTS A PREFIX ON THE FRONT AND '.ASM' ON THE END.\n*             IF THE RESULTING NAME IS NOT IN THE CATALOG,\n*             IKJEHDEF STILL RETURNS IT BUT ALSO SETS THE\n*             RETURN CODE TO 20.  IF THE RETURN CODE IS 20,\n*             WE REMOVE THE '.ASM', UNLESS THAT LEAVES NOTHING\n*             BUT THE PREFIX (ONLY A MEMBER NAME WAS SPECIFIED)\n*             IN WHICH CASE WE SAY PREFIX.ASM NOT IN CATALOG.\n*\n*             IF AN UNQUALIFIED NAME IS ENTERED, AND OBJ OR\n*             PRINT IS SPECIFIED WITHOUT A DSNAME, THE COMMAND\n*             ATTEMPTS TO USE THE UNQUALIFIED NAME AS A PATTERN\n*             FOR THE NAMES OF THE OBJECT AND PRINT DATA SETS.\n*\n*             FOR EXAMPLE, IF ALPHA IS SPECIFIED, AND YOUR DATA\n*             IS IN 'PREFIX.ALPHA.ASM', IT WILL USE\n*             'PREFIX.ALPHA.OBJ' AND 'PREFIX.ALPHA.LIST'.\n*\n*             HOWEVER, IF ALPHA IS SPECIFIED, AND YOUR DATA IS\n*             IN 'PREFIX.ALPHA', THE COMMAND CANNOT CREATE\n*             'PREFIX.ALPHA.OBJ' AND 'PREFIX.ALPHA.LIST' (AT LEAST\n*             IT CANT UNDER AN OS CVOL CATALOG), SO IT USES\n*             DEFAULT OBJECT AND PRINT DSNAMES UNLESS OVERRIDDEN.\n*\n*             IF A QUALIFIED DATA SET NAME IS ENTERED,\n*             THE DEFAULT OBJECT AND PRINT DSNAMES WILL BE\n*             USED UNLESS OVERRIDDEN.\n*\n*             THE DEFAULT OBJECT AND PRINT DSNAMES ARE TEMP.OBJ\n*             AND TEMP.LIST, THAT IS, OBJECT(TEMP) AND PRINT(TEMP).\n*             THESE ARE USED ONLY IF THE OBJECT AND PRINT\n*             DSNAMES ARE NOT SPECIFIED AND THE SOURCE DSNAME IS\n*               A) QUALIFIED (IN QUOTES), OR\n*               B) UNQUALIFIED, AND THE NAME YOU ENTERED\n*                  WAS NONSTANDARD (DOESNT EXIST WITH .ASM\n*                  APPENDED TO WHAT YOU ENTERED).\n*\n*             WHENEVER DEFAULT OBJECT OR PRINT DSNAMES ARE USED,\n*             A MESSAGE IS ISSUED INFORMING YOU OF THAT FACT,\n*             UNLESS NOMSG IS SPECIFIED.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*          THE 3705 ASSEMBLER\n*\n*          THE 3705 ASSEMBLER IS NOT USUALLY IN A LINKLIST LIBRARY\n*          SO YOU WILL HAVE TO ALLOCATE SYS1.SSPLIB OR ACFNCP.SSPLIB\n*          (OR WHATEVER THE LIBRARY IS CALLED) TO DDNAME ASMCLIB\n*          BEFORE USING THE PROMPTER.\n*\n*          THE MANUAL FOR THE ASSEMBLER, GC30-3003-2, THAT I HAVE\n*          WAS LAST UPDATED IN MAY 1975.  IT HAS THE FOLLOWING\n*          INCONSISTENCIES:\n*           . THE LIST OF PARM OPTIONS ON PAGE F4-F5 DOES NOT\n*             INCLUDE ALIGN, OBJECT, OR TERMINAL.\n*           . PAGE F6 MENTIONS THE ALIGN AND OBJECT OPTIONS.\n*           . THE DDNAME LIST ON PAGE F-6 DOES NOT INCLUDE\n*             SYSGO OR SYSTERM.\n*           . ERROR MESSAGE CWA256 ON PAGE I-27 IMPLIES THE\n*             EXISTENCE OF SYSGO DDNAME.\n*           . ERROR MESSAGE CWA268 ON PAGE I-29 IMPLIES THE\n*             EXISTENCE OF SYSTERM DDNAME AND TERMINAL OPTION.\n*\n***********************************************************************\n         EJECT\nASMP01   START\n         USING *,R10,R11,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ASMP01  1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND SIZE\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             INITIALIZE BASE REG\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LA    R12,4095(R15,R11)\n         LR    R2,R1               PARM POINTER\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         LR    R15,R1              POINT TO AREA TO CLEAR\n         L     R1,@SIZE            GET LENGTH TO CLEAR\n         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE\n         SRDL  R0,8                DIVIDE BY 256\n         SRL   R1,24               ISOLATE REMAINDER\n         LTR   R0,R0               IS QUOTIENT ZERO\n         BZ    CLEARR              YES, GO DO REMAINDER\nCLEARQ   XC    0(256,R15),0(R15)   ZERO 256 BYTES\n         LA    R15,256(,R15)       INCREMENT ADDRESS\n         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH\nCLEARR   LTR   R1,R1               IS REMAINDER ZERO?\n         BZ    CLEARX              YES, BRANCH TO EXIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                GO AROUND EXECUTED INST\n         XC    0(0,R15),0(R15)     EXECUTED\n         EX    R1,*-6              DO THE ABOVE XC\nCLEARX   EQU   *\n         SPACE\n         ST    R13,4(,R9)          PUT OLD ADDRESS IN NEW AREA\n         ST    R9,8(,R13)          PUT NEW ADDRESS IN OLD AREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE\n         STM   R10,R12,BASES\n         SPACE 1\n         MVC   SIZE,@SIZE\n         ST    R2,CPPLPTR\n         SPACE\n         AGO   .BETA02\n.BETA01  ANOP\n         SPACE\n***********************************************************************\n*                                                                     *\n*         THIS IS THE SECOND LOAD OF THE ASSEMBLER PROMPTER           *\n*                                                                     *\n***********************************************************************\n         EJECT\nASMP02   START\n         USING *,R10,R11,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ASMP02 1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             INITIALIZE BASE REG\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LA    R12,4095(R15,R11)\n         LR    R9,R1\n         USING @DATA,R9\n         L     R2,CPPLPTR          PARM POINTER\n         USING CPPL,R2\n         ST    R13,4(,R9)          PUT OLD ADDRESS IN NEW AREA\n         ST    R9,8(,R13)          PUT NEW ADDRESS IN OLD AREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE 1\n         STM   R10,R12,BASES\n         SPACE 1\n         AGO   .BETA03\n.BETA02  ANOP\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP DAPL FOR IKJDAIR                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYDAPL\n         USING DAPL,R15\n         MVC   DAPLUPT(12),MYIOPL  UPT,ECT,ECB\n         MVC   DAPLPSCB,CPPLPSCB\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB\n         DROP  R15                 DAPL\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(ASMPPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA           FOR VALIDITY CHECK ROUTINE\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15             PARSE SUCCESSFUL?\n         BZ    PARSEOK             YES, BRANCH\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         B     EXIT12\n         EJECT\n************************************************************\n*                                                          *\n*        CALL THE DEFAULT SERVICE ROUTINE                  *\n*        TO PREFIX THE DSN AND ADD DESC. QUALIFIER         *\n*                                                          *\n************************************************************\n         SPACE\nQUALIFY  ST    R14,DOUBLE\n         MVC   DSNAMEU(46),DSNAMEQ SAVE A 'BEFORE' COPY\n         LA    R1,MYIOPL\n         USING IOPL,R1\n         LA    R14,MYDFPB          POINT TO DEFAULT PARMS\n         ST    R14,IOPLIOPB        STORE ADDRESS IN IOPL\n         DROP  R1                  IOPL\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)    CLEAR DFPB\n         LA    R0,DSNAMEQ          POINT TO DSNAME HALFWORD\n         ST    R0,DFPBDSN          STORE ADDRESS IN DFPB\n*        MVI   DFPBCODE,X'00'      USE QUALIFIER PROVIDED\n         MVC   DFPBPSCB,CPPLPSCB   STORE PSCB ADDRESS IN DFPB\n         OI    DFPBCNTL,DFPBUID+DFPBADD PREFIX DSN AND ADD QUAL\n         LA    R15,MYQUAL          POINT TO QUALIFIER\n         ST    R15,DFPBQUAL        STORE QUAL ADDRESS IN DFPB\n         DROP  R14                 DFPB\n         SPACE\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    736(R15),X'80'      IF HI ORDER BIT ON\n         BNO   DEFLINK1               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     DEFEXIT1            SKIP AROUND LINK\nDEFLINK1 EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\nDEFEXIT1 EQU   *\n         SPACE\n         STC   R15,QUALRC\n         LTR   R15,R15             SUCCESSFUL?\n         BZ    DEFRET              YES, BRANCH\n         CH    R15,=H'20'          SUCCESSFUL BUT NOT IN CATALOG\n         BNE   ERRDEF              NO, SOMETHING ELSE\n         CLI   DSNAMEU+1,0         WAS UNQUALIFIED NAME NULL\n         BE    DEFRET              YES, JUST PREFIX.QUAL, LET DAIR FAIL\n         CLI   MYQUAL,C'A'         IS THIS INPUT DATA SET (OR SYSLIB)\n         BNE   DEFRET              NO, LEAVE QUALIFIER ON (OBJ LIST)\n         LH    R1,DSNAMEQ          REMOVE ASM, TRY TO ALLOCATE\n         SH    R1,=H'4'            LENGTH OF .ASM\n         STH   R1,DSNAMEQ\n         LA    R1,DSNAMEQ+2(R1)\n         MVC   0(4,R1),BLANKS      REMOVE .ASM\n         B     DEFRET\n         SPACE\nDEFRET   L     R14,DOUBLE\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS SYSIN DATA SET NAME                      *\n*                                                          *\n************************************************************\n         SPACE\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n         MVC   TIMEKV,TIMEKW       SAVE KEYWORDS THAT MAY BE\n         MVC   DEBUGKV,DEBUGKW      REFERENCED\n         MVC   XCTLKV,XCTLKW         AFTER IKJRLSA\n         MVC   PAUSEKV,PAUSEKW        IS EXECUTED\n         SPACE\n         LA    R1,CONIDAPB+12\n         ST    R1,CONIPTR\n         LA    R4,DSNI\n         B     *+8\nINNLOOP  L     R4,24(,R4)          POINT TO NEXT DSNAME\n         L     R1,CONIPTR          POINT TO LIST OF DDNAMES\n         LA    R0,CONIDAPX         POINT TO END OF LIST\n         CR    R1,R0               IS THERE ROOM FOR ANOTHER\n         BNL   ERRCONI             NO, BRANCH\n         MVC   DSNAMEI(46),DSNNULL\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BZ    DSNIN               NO, JUST A MEMBER NAME\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    DSNIN               YES, BRANCH\n         STH   R1,DSNAMEI          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEI+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\nDSNIN    EQU   *\n         MVC   DSNAMEQ(46),DSNAMEI\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         SPACE\n         MVC   MEMI(10),MEMNULL\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    DSNIMX              NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNIMX              YES, BRANCH\n         STH   R1,MEMI             STORE LENGTH\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08MNM(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER TO DAPB\n         MVC   MEMI+2(8),DA08MNM\nDSNIMX   EQU   *\n         MVC   MEMBER(10),MEMI\n         SPACE\n         MVC   DSNIQ,6(R4)\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    DSNINQ              YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'ASM'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         MVC   DSNAMEI(46),DSNAMEQ\n         CLI   QUALRC,0            IS IT IN CATALOG\n         BE    DSNIXQ              YES, .ASM APPENDED\n         OI    DSNIQ,X'40'         NO, NONSTANDARD NAME\n*               IF USER'S PROGRAM IS IN PREFIX.ALPHA.ASM\n*               USER NEED ONLY SPECIFY ALPHA, BUT IN CASE\n*               USER SPECIFIES ALPHA.ASM, DEFAULT SERVICE\n*               ROUTINE LOOKS FOR PREFIX.ALPHA.ASM.ASM.\n*               IF IT DOESNT FIND THAT IN THE CATALOG, IT SETS\n*               RETURN CODE 20, IN WHICH CASE WE REMOVE\n*               THE .ASM AND MARK IT AS A NONSTANDARD NAME.\n*               THIS NEXT ROUTINE CHECKS TO SEE IF THE NAME\n*               STILL ENDS WITH .ASM, AND IF IT DOES WE RESET\n*               THE NAME AS BEING STANDARD (MEANING OBJECT\n*               AND PRINT DSNAMES CAN BE MODELED AFTER IT).\n*               IN SUMMARY, IF USER ENTERS ALPHA.ASM AND DATA\n*               SET ALPHA.ASM.ASM DOES NOT EXIST, WE PROCEED\n*               AS THOUGH USER HAD ENTERED JUST ALPHA.\n         LH    R1,DSNAMEQ\n         LA    R1,DSNAMEQ+2(R1)    POINT PAST DSNAME\n         SH    R1,=H'4'\n         CLC   0(4,R1),=C'.ASM'    IS LAST QUALIFIER .ASM\n         BNE   *+8                 NO, BRANCH\n         NI    DSNIQ,255-X'40'     YES, USER ENTERED .ASM UNNECESSARILY\nDSNIXQ   EQU   *\n         SPACE\nDSNINQ   TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    DSNIPX              NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNIPX              YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nDSNIPX   EQU   *\n         OI    DA08DSP1,DA08SHR    DISP=SHR\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSIN DATA SET                       *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR\n         XC    DA08PSWD,DA08PSWD\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n*        MVC   DDIN(8),DA08DDN     SAVE DDNAME\n         L     R1,CONIPTR          POINT TO LIST OF DDNAMES\n         MVC   0(8,R1),DA08DDN     SAVE THE DDNAME\n         LA    R1,8(,R1)           POINT TO NEXT SLOT\n         ST    R1,CONIPTR          SAVE UPDATED POINTER\n         LA    R1,1\n         AH    R1,CONINUM\n         STH   R1,CONINUM\n         CH    R1,=H'1'            IS THIS THE FIRST SYSIN DATA SET\n         BNE   DSNINOT1            NO, BRANCH\n         MVC   DSNAMEH(46),DSNAMEI\n         MVC   DSNHQ,DSNIQ\n         MVC   MEMH(10),MEMI\nDSNINOT1 TM    DA08DSO,X'02'       IS IT A PDS\n         BZ    DSNIPS              NO, BRANCH\n         CLI   DA08MNM,C' '        YES, WAS MEMBER SPECIFIED\n         BE    ERRPDS              NO, ERROR\n         SPACE\n************************************************************\n*                                                          *\n*         VERIFY THAT THE MEMBER EXISTS                    *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,PDSDCBW\n         MVC   0(PDSDCBL,R6),PDSDCB\n         MVC   DDNAM(8,R6),DA08DDN\n         LA    R1,PDSEXLST         EXLST=PDSEXLST\n         IC    R0,EXLST(,R6)\n         ST    R1,EXLST(,R6)\n         STC   R0,EXLST(,R6)\n         LA    R0,PDSABEND         DCB ABEND EXIT\n         ST    R0,0(,R1)           STORE ADDRESS IN EXLST\n         MVI   0(R1),128+X'11'     DCB ABEND EXIT TYPE IN EXLST\n         MVI   RC,0\n         MVI   OPEN,X'80'\n         OPEN  ((R6),INPUT),MF=(E,OPEN)\n         CLOSE ((R6)),MF=(E,OPEN)\n         CLI   RC,0                WAS MEMBER FOUND\n         BE    DSNIOK              YES, BRANCH\n         B     ERRMEM              NO, GO WRITE ERROR MESSAGE\nPDSABEND L     R8,0(,R1)           GET COMPLETION CODE\n         N     R8,=A(X'FFF0FF00')\n         CL    R8,=A(X'01301800')  IS IT AN 013-18 ABEND\n         BE    PDSAB013            YES, BRANCH\n         MVI   3(R1),0             NO, ABNORMALLY TERMINATE\n         BR    R14\nPDSAB013 OI    RC,X'80'            INDICATE MEMBER NOT FOUND\n         MVI   3(R1),4             IGNORE THE ABEND\n         BR    R14\nDSNIPS   CLI   DA08MNM,C' '        NOT PDS, WAS MEMBER SPECIFIED\n         BNE   ERRPDSN             YES, ERROR\nDSNIOK   EQU   *\nDSNINEXT CLI   24(R4),X'FF'        IS THERE ANOTHER DSNAME\n         BNE   INNLOOP             YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         CONCATENATE IF THERE WAS MORE THAN ONE           *\n*                                                          *\n************************************************************\n         SPACE\nINNCON   LA    R6,CONIDAPB\n         USING DAPB0C,R6\n         XC    0(12,R6),0(R6)\n         MVI   DA0CCD+1,X'0C'\n         LH    R1,CONINUM          NUMBER OF DDNAMES\n         CH    R1,=H'1'            IS THERE ONLY ONE DDNAME\n         BE    INNCONX             YES, BYPASS CONCAT\n         STH   R1,DA0CNUMB\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         ST    R6,DAPLDAPB\n         DROP  R6                  DAPB0C\n         BAL   R14,CALLDAIR        CONCATENATE SYSIN'S\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVI   CONISW,1            INDICATE CONCATENATED\n*        CLI   MSGKW+1,2           MSGD\n*        BNE   *+8                 NO\n*        MVI   MSGKW+1,1           DISPLAY PRINT AND OBJECT NAMES\nINNCONX  MVC   DDIN,CONIDAPB+12\n         LA    R1,MYDAPL\n         ST    R5,DAPLDAPB         RESTORE MYDAPL ADDRESS\n         DROP  R1                  DAPL\nINNX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IF SYS1.MACLIB IS SPECIFIED, SET NOMACLIB        *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   MACKW+1,2           'NOMACLIB' SPECIFIED\n         BE    MACOVX              YES, NO NEED TO DO THIS\n         CLI   LIBKW+1,1           LIB SPECIFIED OR DEFAULTED\n         BNE   MACOVX              NO, BRANCH\n         LA    R4,DSNL             POINT TO PDE OF FIRST LIB DSN\n         B     *+8\nMACOVLP  L     R4,24(,R4)          POINT TO NEXT DSNAME\n         LA    R1,11               GET LENGTH OF SYS1.MACLIB\n         CH    R1,4(,R4)           IS LENGTH RIGHT\n         BNE   MACOVNX             NO, BRANCH\n         L     R15,0(,R4)          POINT TO DSN\n         CLC   0(11,R15),=C'SYS1.MACLIB'  IS IT MACLIB\n         BNE   MACOVNX             NO, BRANCH\n         TM    6(R4),X'40'         IS IT QUOTED\n         BO    MACOVSET            YES, BRANCH\n         L     R1,CPPLUPT\n         CLI   UPTPREFL-UPT(R1),0  IS PROFILE NOPREFIX\n         BNE   MACOVNX             NO, BRANCH\nMACOVSET MVI   MACKW+1,2           YES, SET NOMACLIB\n         B     MACOVX              AND STOP LOOKING\nMACOVNX  CLI   24(R4),X'FF'        ANY MORE DSNAMES\n         BNE   MACOVLP             YES, BRANCH\nMACOVX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         ALLOCATE SYS1.MACLIB (UNLESS NOMAC)              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,CONLDAPB+12\n         ST    R1,CONLPTR\n         CLI   MACKW+1,2           'NOMACLIB' SPECIFIED\n         BE    MACX                YES, BYPASS SYS1.MACLIB\n         SPACE\n         MVC   DSNAMEQ(46),MACLIB\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         OI    DA08DSP1,X'08'      DISP=SHR\n         SPACE\n         BAL   R14,CALLDAIR        ALLOCATE SYS1.MACLIB\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         L     R1,CONLPTR          POINT TO LIST OF DDNAMES\n         MVC   0(8,R1),DA08DDN     SAVE THE DDNAME\n         LA    R1,8(,R1)           POINT TO NEXT SLOT\n         ST    R1,CONLPTR          SAVE UPDATED POINTER\n         MVC   CONLNUM,=H'1'\nMACX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         ALLOCATE OTHER MACRO LIBRARIES (UNLESS NOLIB)    *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   LIBKW+1,1           LIB SPECIFIED\n         BNE   LIBCON              NO, BRANCH\n         LA    R4,DSNL\n         B     *+8\nLIBLOOP  L     R4,24(,R4)          POINT TO NEXT DSNAME\n         TM    14(R4),X'80'        MEMBER NAME PRESENT\n         BO    ERRMEML             YES, ERROR\n         L     R1,CONLPTR          POINT TO LIST OF DDNAMES\n         LA    R0,CONLDAPX         POINT TO END OF LIST\n         CR    R1,R0               IS THERE ROOM FOR ANOTHER\n         BNL   ERRCONL             NO, BRANCH\n         MVC   DSNAMEL(46),DSNNULL\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    LIBCON              YES, BRANCH\n         STH   R1,DSNAMEL          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEL+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\n         MVC   DSNAMEQ(46),DSNAMEL\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         SPACE\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    *+14                YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'ASM'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    NOPASSL             NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    NOPASSL             YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nNOPASSL  EQU   *\n         SPACE\n         OI    DA08DSP1,X'08'      DISP=SHR\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE LIBRARY                              *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR        ALLOCATE SPECIFIED MACLIB\n         XC    DA08PSWD,DA08PSWD\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         L     R1,CONLPTR          POINT TO LIST OF DDNAMES\n         MVC   0(8,R1),DA08DDN     SAVE THE DDNAME\n         LA    R1,8(,R1)           POINT TO NEXT SLOT\n         ST    R1,CONLPTR          SAVE UPDATED POINTER\n         LA    R1,1\n         AH    R1,CONLNUM\n         STH   R1,CONLNUM\n         SPACE\n************************************************************\n*                                                          *\n*        VERIFY THAT DATA SET IS PARTITIONED               *\n*                                                          *\n************************************************************\n         SPACE\n         TM    DA08DSO,X'02'       IS IT PARTITIONED\n         BZ    ERRPDSN             NO, BRANCH\n         DROP  R5                  DAPB08\n         CLI   24(R4),X'FF'        IS THERE ANOTHER DSNAME\n         BNE   LIBLOOP             YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         CONCATENATE IF THERE WAS MORE THAN ONE           *\n*                                                          *\n************************************************************\n         SPACE\nLIBCON   LA    R6,CONLDAPB\n         USING DAPB0C,R6\n         XC    0(12,R6),0(R6)\n         MVI   DA0CCD+1,X'0C'\n         LH    R1,CONLNUM          NUMBER OF DDNAMES\n         CH    R1,=H'1'            IS THERE ONLY ONE DDNAME\n         BE    LIBCONX             YES, BYPASS CONCAT\n         BL    LIBX                BRANCH IF NOMAC NOLIB (USE SYSLIB)\n         STH   R1,DA0CNUMB\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         ST    R6,DAPLDAPB\n         DROP  R6                  DAPB0C\n         BAL   R14,CALLDAIR        CONCATENATE MACLIBS\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVI   CONLSW,1            INDICATE CONCATENATED\nLIBCONX  MVC   DDLIB,CONLDAPB+12\n         LA    R1,MYDAPL\n         ST    R5,DAPLDAPB         RESTORE MYDAPL ADDRESS\n         DROP  R1                  DAPL\nLIBX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSTERM FILE TO THE TERMINAL         *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   TERMKW+1,2          NOTERM\n         BE    TERMX               BRANCH IF NOTERM\n         USING DAPB1C,R5\n         MVC   DA1CCD(MODEL1CL),MODEL1C\n         BAL   R14,CALLDAIR        ALLOCATE SYSTERM\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDTERM,DA1CDDN\n         DROP  R5                  DAPB1C\nTERMX    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE WHERE SYSPRINT GOES                    *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   LISTKW+1,2          IS NOLIST SPECIFIED\n         BNE   *+8                 NO, SKIP NEXT INSTRUCTION\n         MVI   PRINTKW+1,3         YES, FORCE NOPRINT\n         CLI   PRINTKW+1,3         IS NOPRINT SPECIFIED\n         BE    PRINTDUM            YES, BRANCH\n         CLI   PRINTKW+1,4         IS SYSOUT SPECIFIED\n         BE    PRINTSOU            YES, BRANCH\n         CLI   PRINTKW+1,5         IS PFILE SPECIFIED\n         BE    PRINTFIL            YES, BRANCH\n         MVC   DSNAMEP(46),DSNNULL\n         LA    R4,DSNP\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BO    PRINTNME            YES                          22APR81\n         TM    14(R4),X'80'        MEMBER NAME PRESENT          22APR81\n         BZ    PRINTGEN            NO, GENERATE A DSNAME\n         B     PRINTDS             YES, USE LIST(MEMBER)        22APR81\nPRINTNME L     R15,0(,R4)          POINT TO DSNAME\n         CLI   0(R15),C'*'         TERMINAL\n         BE    PRINTERM            YES, BRANCH\n         B     PRINTDS             NO, ITS A DSNAME\n         SPACE\n************************************************************\n*                                                          *\n*         GENERATE A NAME FOR THE PRINT DATA SET           *\n*                                                          *\n************************************************************\n         SPACE\nPRINTGEN EQU   *\n         TM    DSNHQ,X'40'         WAS SYSIN NAME NONSTANDARD\n         BO    PRINTGDF            YES, USE DEFAULT\n         MVC   DSNAMEP(46),DSNAMEH\n         MVC   MEMP(10),MEMH\n         LH    R1,DSNAMEP          GET LENGTH OF INPUT DSNAME\n         SH    R1,=H'4'            MINUS LENGTH OF .ASM\n         LA    R15,DSNAMEP+2(R1)   POINT TO .ASM\n         MVC   0(5,R15),=C'.LIST'  REPLACE IT WITH .LIST\n         AH    R1,=H'5'            NEW LENGTH\n         STH   R1,DSNAMEP          STORE NEW LENGTH\n         CH    R1,=H'44'           TOO LONG\n         BH    PRINTGDF            YES, BRANCH\n         MVC   DSNAMEQ(46),DSNAMEP\n         MVC   MEMBER(10),MEMP\n         MVC   PSWD,BLANKS\n         B     DSNPA\nPRINTGDF LA    R4,DSNPPDE          POINT TO DEFAULT PDE\n         XC    0(20,R4),0(R4)      CLEAR IT\n         LA    R1,DSNPOPB          POINT TO DEFAULT OPERAND BUFFER\n         ST    R1,0(,R4)\n         MVC   0(4,R1),=C'TEMP'    DEFAULT PRINT(TEMP)\n         MVI   5(R4),4             LENGTH 4\n         CLI   MSGKW+1,3           IS NOMSG SPECIFIED\n         BE    *+8                 YES,\n         MVI   MSGKW+1,1           NO, FORCE MSG FOR DEFAULT NAMES\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE (DATA SET)             *\n*                                                          *\n************************************************************\n         SPACE\nPRINTDS  LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    DSNP1               YES, BRANCH\n         STH   R1,DSNAMEP          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEP+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\nDSNP1    EQU   *\n         MVC   DSNAMEQ(46),DSNAMEP\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    *+14                YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'LIST'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         SPACE\n         MVC   MEMP(10),MEMNULL\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    DSNP2               NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNP2               YES, BRANCH\n         STH   R1,MEMP             STORE LENGTH\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   MEMP+2(0),0(R15)    (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER TO DAPB\nDSNP2    EQU   *\n         MVC   MEMBER(10),MEMP\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    DSNP3               NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNP3               YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   PSWD(0),0(R15)      (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nDSNP3    EQU   *\n         SPACE\nDSNPA    LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08MNM,MEMBER+2\n         MVC   DA08PSWD,PSWD\n         XC    PSWD,PSWD\n         OI    DA08DSP1,DA08OLD    DISP=OLD\n         CLI   MODKW+1,1           MOD REQUESTED\n         BNE   *+8                 NO\n         MVI   DA08DSP1,DA08MOD    YES\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DATA SET\n         XC    DA08PSWD,DA08PSWD\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   DSNPNEW             NO, GO CREATE A DATA SET\n         MVC   DDPRINT,DA08DDN\n         SPACE\n         TM    DA08DSO,X'02'       IS IT A PDS\n         BZ    DSNPPS              NO, BRANCH\n         CLI   DA08MNM,C' '        YES, WAS MEMBER SPECIFIED\n         BNE   DSNPOK              YES, BRANCH\n         B     ERRPDS              ERROR, MEMBER NAME OMITTED\nDSNPPS   CLI   DA08MNM,C' '        NOT PDS, WAS MEMBER SPECIFIED\n         BNE   ERRPDSN             YES, ERROR\nDSNPOK   EQU   *\n         SPACE\n         CLI   MSGKW+1,1\n         BNE   PRINTX\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(24,R15),=C' WILL BE USED FOR PRINT '\n         LA    R15,24(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     PRINTX\n         SPACE\nDSNPNEW  CH    R15,=H'8'           IS DAIR RETURN CODE 8\n         BE    DSNPNEW1            YES, BRANCH\n         B     ERRDAIR             NO, UNRECOVERABLE PROBLEM\nDSNPNEW1 CLC   DA08DARC(4),=X'17080008' WAS IT BECAUSE NOT IN CATALOG\n         BNE   ERRDAIR             NO, UNRECOVERABLE PROBLEM\n         MVI   DA08DSP1,DA08NEW\n         MVI   DA08DPS2,DA08CAT\n         MVI   DA08DPS3,DA08CATL\n         MVC   DA08PQTY,=F'03'\n         MVC   DA08SQTY,=F'07'\n         OI    DA08CTL,DA08TRKS\n         MVC   DA08BLK,=F'2420'\n         CLI   DA08MNM,C' '        IS MEMBER SPECIFIED\n         BE    *+10                NO\n         MVC   DA08DQTY,=F'1'      YES, DIRECTORY SPACE\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DATA SET NEW\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   ERRDAIR             NO, UNRECOVERABLE ERROR\n         MVC   DDPRINT,DA08DDN\n         SPACE\n         CLI   MSGKW+1,1           MSG\n         BNE   PRINTX              NO, BRANCH\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(27,R15),=C' HAS BEEN CREATED FOR PRINT'\n         LA    R15,27(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     PRINTX\n         SPACE\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE (DUMMY)                *\n*                                                          *\n************************************************************\n         SPACE\n         USING DAPB08,R5\nPRINTDUM MVI   LISTKW+1,2          FORCE NOLIST\n         MVC   DA08CD(84),MODEL08\n         OI    DA08CTL,DA08DMMY\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DUMMY\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA08DDN\n         B     PRINTX\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE TO THE TERMINAL        *\n*                                                          *\n************************************************************\n         SPACE\n         USING DAPB1C,R5\nPRINTERM MVC   DA1CCD(MODEL1CL),MODEL1C\n         BAL   R14,CALLDAIR        ALLOCATE PRINT TERMINAL\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA1CDDN\n         DROP  R5                  DAPB1C\n         B     PRINTX\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE TO SYSOUT              *\n*                                                          *\n************************************************************\n         SPACE\n         USING DAPB30,R5\nPRINTSOU LA    R4,CLASS\n         MVI   SOUT,C' '\n         L     R1,0(,R4)\n         TM    6(R4),X'80'\n         BZ    *+10\n         MVC   SOUT,0(R1)          SAVE SYSOUT CLASS FOR UNALLOCATE\n         OI    SOUT,X'40'\n         MVC   DA30CD(MODEL30L),MODEL30\n         BAL   R14,CALLDAIR        ALLOCATE PRINT SYSOUT\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA30DDN\n         MVI   FREEOPT,1           FREE DDPRINT WITH CLASS\n         DROP  R5                  DAPB30\n         CLI   MSGKW+1,1           'MSG' SPECIFIED\n         BNE   PRINTX              NO, BRANCH\n         LA    R15,MSGWK\n         MVC   0(09,R15),=C'SYSOUT(*)'\n         CLI   SOUT,C' '\n         BE    *+10\n         MVC   7(1,R15),SOUT\n         LA    R15,09(,R15)\n         MVC   0(24,R15),=C' WILL BE USED FOR PRINT '\n         LA    R15,24(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     PRINTX\n         SPACE\n************************************************************\n*                                                          *\n*         USE SPECIFIED DDNAME FOR SYSPRINT                *\n*                                                          *\n************************************************************\n         SPACE\nPRINTFIL LA    R4,PFILE\n         TM    6(R4),X'80'         PFILE PRESENT?\n         BZ    PRINTX              NO, USE SYSPRINT\n         LH    R1,4(,R4)           GET LENGTH\n         L     R15,0(,R4)\n         MVC   DDPRINT,BLANKS\n         BCTR  R1,0\n         B     *+10\n         MVC   DDPRINT(0),0(R15)\n         EX    R1,*-6\n         MVI   FREEOPT,2           DO NOT FREE DDPRINT\n         B     PRINTX\n         SPACE\nPRINTX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         GENERATE A NAME FOR THE OBJECT DATA SET          *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   OBJKW+1,3           LOAD SPECIFIED\n         BNE   *+8                 NO, BRANCH\n         MVI   OBJKW+1,1           YES, MAKE IT OBJ\n         CLI   OBJKW+1,4           NOLOAD SPECIFIED\n         BNE   *+8                 NO, BRANCH\n         MVI   OBJKW+1,2           YES, MAKE IT NOOBJ\n         CLI   OBJKW+1,1           OBJ SPECIFIED\n         BNE   OBJX                NO, BRANCH\n         MVC   DSNAMEO(46),DSNNULL\n         LA    R4,DSNO\n         TM    6(R4),X'80'         IS A NAME SPECIFIED\n         BO    OBJDS               YES, BRANCH\n         TM    14(R4),X'80'        IS A MEMBER SPECIFIED        22APR81\n         BO    OBJDS               YES, BRANCH                  22APR81\n         SPACE\n         TM    DSNHQ,X'40'         WAS SYSIN NAME NONSTANDARD\n         BO    OBJGENDF            YES, BRANCH\n         MVC   DSNAMEO(46),DSNAMEH\n         MVC   MEMO(10),MEMH\n         LH    R1,DSNAMEO          GET LENGTH OF INPUT DSNAME\n         SH    R1,=H'4'            MINUS LENGTH OF .ASM\n         LA    R15,DSNAMEO+2(R1)   POINT TO .ASM\n         MVC   0(4,R15),=C'.OBJ'   REPLACE IT WITH .OBJ\n*        AH    R1,=H'4'            NEW LENGTH  (SAME LENGTH)\n*        STH   R1,DSNAMEO          STORE NEW LENGTH\n*        CH    R1,=H'44'           TOO LONG\n*        BH    OBJGENDF            YES, BRANCH\n         MVC   DSNAMEQ(46),DSNAMEO\n         MVC   MEMBER(10),MEMO\n         MVC   PSWD,BLANKS\n         B     DSNOA\nOBJGENDF LA    R4,DSNOPDE          POINT TO DEFAULT PDE\n         XC    0(20,R4),0(R4)      CLEAR IT\n         LA    R1,DSNOOPB          POINT TO DEFAULT OPERAND BUFFER\n         ST    R1,0(,R4)\n         MVC   0(4,R1),=C'TEMP'    DEFAULT OBJECT(TEMP)\n         MVI   5(R4),4             LENGTH 4\n         CLI   MSGKW+1,3           IS NOMSG SPECIFIED\n         BE    *+8                 YES,\n         MVI   MSGKW+1,1           NO, FORCE MSG\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE OBJECT DATA SET                      *\n*                                                          *\n************************************************************\n         SPACE\nOBJDS    LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    DSNO1               YES, BRANCH\n         STH   R1,DSNAMEO          DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAMEO+2(0),0(R15) (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\nDSNO1    EQU   *\n         MVC   DSNAMEQ(46),DSNAMEO\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES?\n         BO    *+14                YES, BYPASS DEFAULT SERVICE\n         MVC   MYQUAL,=CL8'OBJ'\n         BAL   R14,QUALIFY         NO, QUALIFY THE DSNAME\n         SPACE\n         MVC   MEMO(10),MEMNULL\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    DSNO2               NO, BRANCH\n         LH    R1,12(,R4)          YES, GET LENGTH OF MEMBER\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNO2               YES, BRANCH\n         STH   R1,MEMO             STORE LENGTH\n         L     R15,08(,R4)         GET ADDRESS OF MEMBER\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   MEMO+2(0),0(R15)    (EXECUTED)\n         EX    R1,*-6              MOVE MEMBER TO DAPB\nDSNO2    EQU   *\n         MVC   MEMBER(10),MEMO\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    DSNO3               NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    DSNO3               YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   PSWD(0),0(R15)      (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nDSNO3    EQU   *\n         SPACE\nDSNOA    LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08MNM,MEMBER+2\n         MVC   DA08PSWD,PSWD\n         XC    PSWD,PSWD\n         OI    DA08DSP1,DA08OLD    DISP=OLD\n         CLI   MODKW+1,1           MOD REQUESTED\n         BNE   *+8                 NO\n         MVI   DA08DSP1,DA08MOD    YES\n         BAL   R14,CALLDAIR        ALLOCATE OBJECT DATA SET\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   DSNONEW             NO, BRANCH\n         MVC   DDLIN,DA08DDN\n         SPACE\n         TM    DA08DSO,X'02'       IS IT A PDS\n         BZ    DSNOPS              NO, BRANCH\n         CLI   DA08MNM,C' '        YES, WAS MEMBER SPECIFIED\n         BNE   DSNOOK              YES, BRANCH\n         B     ERRPDS              ERROR, MEMBER NAME OMITTED\nDSNOPS   CLI   DA08MNM,C' '        NOT PDS, WAS MEMBER SPECIFIED\n         BNE   ERRPDSN             YES, ERROR\nDSNOOK   EQU   *\n         SPACE\n         CLI   MSGKW+1,1\n         BNE   OBJX\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(24,R15),=C' WILL BE USED FOR OBJECT'\n         LA    R15,24(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     OBJX\n         SPACE\nDSNONEW  CH    R15,=H'8'           IS DAIR RETURN CODE 8\n         BE    DSNONEW1            YES, BRANCH\n         B     ERRDAIR             NO, UNRECOVERABLE PROBLEM\nDSNONEW1 CLC   DA08DARC(4),=X'17080008' WAS IT BECAUSE NOT IN CATALOG\n         BNE   ERRDAIR             NO, UNRECOVERABLE PROBLEM\n         MVI   DA08DSP1,DA08NEW\n         MVI   DA08DPS2,DA08CAT\n         MVI   DA08DPS3,DA08CATL\n         MVC   DA08PQTY,=F'01'\n         MVC   DA08SQTY,=F'07'\n         OI    DA08CTL,DA08TRKS\n         MVC   DA08BLK,=F'800'\n         CLI   DA08MNM,C' '        IS MEMBER SPECIFIED\n         BE    *+10                NO\n         MVC   DA08DQTY,=F'1'      YES, DIRECTORY SPACE\n         BAL   R14,CALLDAIR        ALLOCATE PRINT DATA SET NEW\n         LTR   R15,R15             WAS ALLOCATE SUCCESSFUL\n         BNZ   ERRDAIR             NO, BRANCH\n         MVC   DDLIN,DA08DDN\n         SPACE\n         CLI   MSGKW+1,1           MSG\n         BNE   OBJX                NO, BRANCH\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(28,R15),=C' HAS BEEN CREATED FOR OBJECT'\n         LA    R15,28(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         SPACE\nOBJX     EQU   *\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT1 WORK SPACE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVC   DSNAMEQ(46),UT1DSN\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,BLANKS\n         LA    R0,10               10 TRACKS\n         ST    R0,DA08PQTY         PRIMARY SPACE\n         ST    R0,DA08SQTY         SECONDARY SPACE\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         AIF   (NOT &H).HHDX\n         CLI   DISKKW+1,2          NODISK\n         BNE   *+8                 NO, SKIP OI\n         OI    DA08CTL,DA08DMMY    DUMMY FOR NODISK\n*              FOR NODISK WE DO A DUMMY ALLOCATION TO BE SURE THAT\n*              IF THE VANILLA IBM ASSEMBLER H GETS USED IT WILL NOT\n*              WIPE OUT WHATEVER DATA SET IS ALLOCATED TO SYSUT1\n*              BECAUSE IT DOES NOT RECOGNIZE NODISK.\n.HHDX    ANOP\n         BAL   R14,CALLDAIR        ALLOCATE SYSUT1 WORK FILE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT1,DA08DDN\n         SPACE\n         DROP  R5                  DAPB08\n         SPACE\n         AIF   (&H).HH01           BYPASS SYSUT2 SYSUT3\n         AIF   (&G).GG01           BYPASS MREF\n         SPACE\n************************************************************\n*                                                          *\n*         IF MREF, ALLOCATE DDNAME MACREF                  *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   MREFKV,MREFKW\n         CLI   MREFKW+1,1\n         BNE   MREFX\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08\n         MVC   DA08DDN,=CL8'MACREF'\n         OI    DA08CTL,DA08DMMY    DUMMY\n         BAL   R14,CALLDAIR        ALLOCATE MACREF DUMMY\n*        LTR   R15,R15             IF IT FAILS, ITS EITHER DUE TO\n*        BNZ   ERRDAIR             DYNAMNBR TOO SMALL OR ALREADY ALLOC\n         DROP  R5                  DAPB08\nMREFX    EQU   *\n.GG01    ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT2 WORK SPACE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVI   DSNAMEQ+2+3,C'2'    CHANGE &UT1 TO &UT2\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,BLANKS\n         LA    R0,10               10 TRACKS\n         ST    R0,DA08PQTY         PRIMARY SPACE\n         ST    R0,DA08SQTY         SECONDARY SPACE\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT2,DA08DDN\n         SPACE\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT3 WORK SPACE                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVI   DSNAMEQ+2+3,C'3'    CHANGE &UT2 TO &UT3\n         LA    R0,DSNAMEQ\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,BLANKS\n         LA    R0,10               10 TRACKS\n         ST    R0,DA08PQTY         PRIMARY SPACE\n         ST    R0,DA08SQTY         SECONDARY SPACE\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT3,DA08DDN\n         SPACE\n         DROP  R5                  DAPB08\n.HH01    ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        BUILD ASSEMBLER PARMS                             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,PARMLEN+1\n         SPACE\n         APPEND NODECK                  ALWAYS\n         SPACE\n         CLI   OBJKW+1,1                OBJECT\n         BNE   *+14\n         APPEND OBJECT\n         SPACE\n         CLI   OBJKW+1,2                NOOBJECT\n         BNE   *+14\n         APPEND NOOBJECT\n         SPACE\n         CLI   LISTKW+1,1               LIST\n         BNE   *+14\n         APPEND LIST\n         SPACE\n         CLI   LISTKW+1,2               NOLIST\n         BNE   *+14\n         APPEND NOLIST\n         SPACE\n         CLI   TERMKW+1,1               TERM\n         BNE   *+14\n         APPEND TERM\n         SPACE\n         CLI   TERMKW+1,2               NOTERM\n         BNE   *+14\n         APPEND NOTERM\n         SPACE\n         CLI   ESDKW+1,1                ESD\n         BNE   *+14\n         APPEND ESD\n         SPACE\n         CLI   ESDKW+1,2                NOESD\n         BNE   *+14\n         APPEND NOESD\n         SPACE\n         CLI   RLDKW+1,1                RLD\n         BNE   *+14\n         APPEND RLD\n         SPACE\n         CLI   RLDKW+1,2                NORLD\n         BNE   *+14\n         APPEND NORLD\n         SPACE\n         CLI   RENTKW+1,1               RENT\n         BNE   *+14\n         APPEND RENT\n         SPACE\n         CLI   RENTKW+1,2               NORENT\n         BNE   *+14\n         APPEND NORENT\n         SPACE\n         CLI   TESTKW+1,1               TEST\n         BNE   *+14\n         APPEND TEST\n         SPACE\n         CLI   TESTKW+1,2               NOTEST\n         BNE   *+14\n         APPEND NOTEST\n         SPACE\n         CLI   XRESKW+1,1               XREF(FULL)\n         BNE   *+14\n         APPEND XREFF\n         SPACE\n         CLI   XRESKW+1,2               XREF(SHORT)\n         BNE   *+14\n         APPEND XREFS\n         SPACE\n         CLI   XREFKW+1,2               NOXREF\n         BNE   *+14\n         APPEND NOXREF\n         SPACE\n         CLI   ALIGNKW+1,1              ALIGN\n         BNE   *+14\n         APPEND ALIGN\n         SPACE\n         CLI   ALIGNKW+1,2              NOALIGN\n         BNE   *+14\n         APPEND NOALIGN\n         SPACE\n         CLI   LINEKW+1,1               LINECOUNT(55)\n         BNE   LINEX\n         APPEND LINCOUNT\n         L     R14,LINE\n         LH    R1,LINE+4\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVI   0(R15),C')'\n         LA    R15,1(,R15)\nLINEX    EQU   *\n         SPACE\n         CLI   FLAGKW+1,1               FLAG(0)\n         BNE   FLAGX\n         APPEND FLAG\n         L     R14,FLAGLV\n         LH    R1,FLAGLV+4\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVI   0(R15),C')'\n         LA    R15,1(,R15)\nFLAGX    EQU   *\n         SPACE\n         CLI   SYSPKW+1,1               SYSPARM()\n         BNE   SYSPX\n         APPEND SYSPARM\n         L     R14,SYSP\n         LH    R1,SYSP+4\n         LTR   R1,R1                    IS IT NULL STRING\n         BZ    SYSPN                    YES, BRANCH\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\nSYSPN    MVI   0(R15),C')'\n         LA    R15,1(,R15)\nSYSPX    EQU   *\n         SPACE\n         AIF   (&H).HH02                SKIP PARMS NOT IN H\n         AIF   (&G).GG02                SKIP PARMS NOT IN G\n         SPACE\n         CLI   STMTKW+1,1               STMT\n         BNE   *+14\n         APPEND STMT\n         SPACE\n         CLI   STMTKW+1,2               NOSTMT\n         BNE   *+14\n         APPEND NOSTMT\n         SPACE\n         CLI   NUMKW+1,1                NUMBER\n         BNE   *+14\n         APPEND NUM\n         SPACE\n         CLI   NUMKW+1,2                NONUM\n         BNE   *+14\n         APPEND NONUM\n         SPACE\n         AGO   .HH02X\n.GG02    ANOP                           G PARMS NOT IN F\n         SPACE\n         CLI   BATCHKW+1,1              BATCH\n         BNE   *+14\n         APPEND BATCH\n         SPACE\n         CLI   BATCHKW+1,2              NOBATCH\n         BNE   *+14\n         APPEND NOBATCH\n         SPACE\n         AGO   .HH02X\n.HH02    ANOP                           H PARMS NOT IN F\n         SPACE\n         CLI   BATCHKW+1,1              BATCH\n         BNE   *+14\n         APPEND BATCH\n         SPACE\n         CLI   BATCHKW+1,2              NOBATCH\n         BNE   *+14\n         APPEND NOBATCH\n         SPACE\n         CLI   DISKKW+1,1               DISK\n         BNE   *+14\n         APPEND DISK\n         SPACE\n         CLI   DISKKW+1,2               NODISK\n         BNE   *+14\n         APPEND NODISK\n         SPACE\n.HH02X   ANOP\n         SPACE\n         B     ENDPARMS\n         SPACE\nESD      DC    C',ESD'\nNOESD    DC    C',NOESD'\nRLD      DC    C',RLD'\nNORLD    DC    C',NORLD'\nDECK     DC    C',DECK'\nNODECK   DC    C',NODECK'\nFLAG     DC    C',FLAG('\nLIST     DC    C',LIST'\nNOLIST   DC    C',NOLIST'\nRENT     DC    C',RENT'\nNORENT   DC    C',NORENT'\nTERM     DC    C',TERM'\nNOTERM   DC    C',NOTERM'\nTEST     DC    C',TEST'\nNOTEST   DC    C',NOTEST'\nXREFF    DC    C',XREF(FULL)'\nXREFS    DC    C',XREF(SHORT)'\nNOXREF   DC    C',NOXREF'\nALIGN    DC    C',ALIGN'\nNOALIGN  DC    C',NOALIGN'\nOBJECT   DC    C',OBJECT'\nNOOBJECT DC    C',NOOBJECT'\nSYSPARM  DC    C',SYSPARM('\nLINCOUNT DC    C',LINECOUNT('\n         AIF   (&H).HH03                SKIP PARMS NOT IN H\n         AIF   (&G).HH03                SKIP PARMS NOT IN G\nNUM      DC    C',NUM'\nNONUM    DC    C',NONUM'\nSTMT     DC    C',STMT'\nNOSTMT   DC    C',NOSTMT'\n         AGO   .HH03X                   SKIP PARMS NOT IN F\n.HH03    ANOP                           H PARMS NOT IN F\nBATCH    DC    C',BATCH'\nNOBATCH  DC    C',NOBATCH'\n         AIF   (&G).HH03X               SKIP PARMS NOT IN G\nDISK     DC    C',DISK'\nNODISK   DC    C',NODISK'\n.HH03X   ANOP\n         SPACE\nENDPARMS LA    R14,PARMLEN+2       ADDRESS FIRST BYTE OF PARM DATA\n         SR    R15,R14             COMPUTE LENGTH OF PARM DATA\n         BNP   *+8                 SHOULD ALWAYS BE POSITIVE\n         STH   R15,PARMLEN         SET LENGTH PREFIX IN PARM FIELD\n         SPACE\n         LA    R1,PARMPTR          GET ADDRESS OF PARAMETER LIST\n         LA    R15,PARMLEN         GET ADDRESS OF PARM FIELD\n         ST    R15,0(,R1)          STORE IT AS FIRST PARAMETER\n         LA    R15,DDNAMES         GET ADDRESS OF DDNAMES\n         ST    R15,4(,R1)          STORE IT AS SECOND PARAMETER\n         OI    4(R1),X'80'         FLAG SECOND PARAMETER AS LAST\n         LA    R14,DDLEN           GET LENGTH OF DDNAME LIST\n         STH   R14,0(,R15)         STORE IT IN FIRST HALFWORD\n         SPACE\n         CLI   SHOWKW+1,1\n         BNE   SHOWX\n         LA    R1,PARMLEN+2\n         LH    R0,PARMLEN\n         BAL   R14,PUTLINE\nSHOWX    EQU   *\n         SPACE\n*                                  FREE THE SPACE GETMAINED BY PARSE\n         IKJRLSA MYANS\n         XC    MYANS,MYANS         INDICATE PARSE SPACE IS FREED\n         SPACE\n         MVC   PDSDCBW(PDSDCBL),PDSDCB  SO SECOND LOAD WONT NEED MODEL\n         SPACE\n         CLI   XCTLKV+1,1          ARE WE GOING TO XCTL\n         BNE   STAYHERE            NO, BRANCH\n         SPACE\n         L     R13,4(,R13)         POINT BACK TO OLD SAVEAREA\n         LR    R1,R9               PASS THE GETMAINED AREA\n         MVC   LINKNAME,=CL8'&NAME2'\n         XCTL  EPLOC=LINKNAME,SF=(E,LINKAREA)\n         SPACE\nSTAYHERE EQU   *\n.BETA03  ANOP\n         EJECT\n************************************************************\n*                                                          *\n*         SET UP AN ESTAE EXIT WHILE ASSEMBLING            *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,STAEEXIT         POINT TO ESTAE EXIT\n         LA    R1,STAEMFLW         POINT TO LIST FORM OF ESTAE\n         MVC   0(STAEMFLL,R1),STAEMFL  INITIALIZE IT\n         SPACE\n         ESTAE (R6),PARAM=(R9),MF=(E,(1))\n         SPACE\n************************************************************\n*                                                          *\n*         IF PAUSE WAS SPECIFIED, TELL USER TO HIT ENTER   *\n*         AND WAIT FOR A RESPONSE.                         *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   PAUSEKV+1,1         PAUSE\n         BNE   PAUSEX\n         LA    R1,=C'PAUSE - PRESS (ENTER) KEY TO CONTINUE'\n         LA    R0,37\n         TPUT  (1),(0),R\n         LA    R1,PAUSEBUF\n         MVC   0(8,R1),=CL8' '\n         LA    R0,L'PAUSEBUF\n         O     R1,=A(X'80000000')\n         TGET  (1),(0),R\n         LTR   R15,R15\n         BZ    PAUSEOK\n         TCLEARQ INPUT\nPAUSEOK  MVI   PAUSEKV+1,3         PAUSE AGAIN AFTER ASSEMBLY\nPAUSEX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IF DDNAME ASMFLIB IS AROUND, USE IT              *\n*                                                          *\n************************************************************\n         SPACE\n         SLR   R6,R6               INDICATE NO DCB\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCB WORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,12(,R1)          TIOT\n         LA    R1,24(,R1)          TIOT+24\nDDLOOP   CLI   0(R1),0             END OF TIOT\n         BE    DDNOTF              YES, BRANCH\n         CLC   4(8,R1),=CL8'&NAMEL'\n         BE    DDFOUND\n         SLR   R15,R15\n         IC    R15,0(,R1)\n         LA    R1,0(R15,R1)\n         B     DDLOOP\nDDFOUND  L     R15,16(,R1)         TIOEFSRT-1\n         CLI   18(R15),X'20'       DASD\n         BNE   DDNOTF\n         LA    R6,PDSDCBW\n         MVC   DDNAM(8,R6),4(R1)   PUT DDNAME IN DCB\n         MVI   OPEN,X'80'\n         OPEN  ((R6),INPUT),MF=(E,OPEN)\n         TM    OFLGS(R6),X'10'     WAS OPEN SUCCESSFUL\n         BO    *+6                 YES\n         SR    R6,R6               NO\nDDNOTF   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         SET UP ASSEMBLER NAME                            *\n*                                                          *\n************************************************************\n         SPACE\n         AIF   (&H).HH04\n         AIF   (&G).GG04\n         AIF   (&C).CC04\n         MVC   LINKNAME,=CL8'IFOX00'\n         CLI   MREFKV+1,1          MREF\n         BNE   *+8                 NO\n         MVI   LINKNAME,C'A'       YES, INVOKE AFOX00 INSTEAD\n         LA    R1,=C'ASSEMBLER (XF) PROCEEDING'\n         LA    R0,25\n         AGO   .HH04X\n.CC04    ANOP\n         MVC   LINKNAME,=CL8'CWAX00'\n         LA    R1,=C'3705 ASSEMBLER PROCEEDING'\n         LA    R0,25\n         AGO   .HH04X\n.GG04    ANOP\n         MVC   LINKNAME,=CL8'ASMGASM'\n         LA    R1,=C'ASSEMBLER G PROCEEDING'\n         LA    R0,22\n         AGO   .HH04X\n.HH04    ANOP\n         MVC   LINKNAME,=CL8'IEV90'\n         LA    R1,=C'ASSEMBLER H PROCEEDING'\n         LA    R0,22\n.HH04X   ANOP\n         BAL   R14,PUTLINE\n         SPACE\n         CLI   DEBUGKV+1,1         DEBUGGING?\n         BE    *+8                 YES, LET ABENDS ABEND\n         MVI   STAEOPT,1           NO, TRY TO RECOVER\n         LTR   R6,R6               IS THERE A TASKLIB\n         BNZ   ATTACH              YES, BRANCH\n         SPACE\n************************************************************\n*                                                          *\n*         INVOKE THE ASSEMBLER                             *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,STIMER          START TIMING THE ASSEMBLY\n         LA    R1,PARMPTR\n         SPACE\n         LINK  EPLOC=LINKNAME,SF=(E,LINKAREA)\n         SPACE\n         STH   R15,RC\n         BAL   R14,TTIMER          STOP TIMING THE ASSEMBLY\n         B     DETACHED\n         SPACE\n************************************************************\n*                                                          *\n*         ATTACH THE ASSEMBLER WITH TIMING                 *\n*                                                          *\n************************************************************\n         SPACE\nATTACH   CLI   TIMEKV+1,1          TIME REQUESTED\n         BNE   ATTACHO             NO, BRANCH\n*              WE HAVE TO DO AN ATTACH IN ORDER TO ESTABLISH A TASKLIB\n*              ENVIRONMENT FOR ALL THE MODULES THAT THE ASSEMBLER\n*              LOADS AND LINKS TO.\n*              IF WE SIMPLY ATTACH THE ASSEMBLER ITSELF, THE CPU TIME\n*              MEASURED BY STIMER/TTIMER IS ALMOST ZERO BECAUSE THE\n*              ATTACHED TASK IS NOT MEASURED.\n*              SO INSTEAD WE ATTACH ASMTASK WHICH WHILE RUNNING AS\n*              A SUBTASK IN THE TASKLIB ENVIRONMENT LINKS TO THE\n*              ASSEMBLER AND TAKES CARE OF MEASURING CPU TIME.\n         IDENTIFY EPLOC=TASKNAME,ENTRY=ASMTASK\n         LTR   R15,R15             DID IDENTIFY FAIL\n         BNZ   ATTACHO             YES, PROCEED WITHOUT PROPER TIMING\n         MVC   ATCHAREA(ATCHAR2L),ATCHAR2M\n         XC    ATCHECB,ATCHECB\n         LR    R1,R9               PASS @DATA AS PARAMETER\n         ATTACH EPLOC=TASKNAME,SF=(E,ATCHAREA),                        +\n               TASKLIB=(R6),ECB=ATCHECB\n         ST    R1,ATCHTCBP        SAVE TCB POINTER\n         WAIT  ECB=ATCHECB\n         LA    R1,ATCHTCBP\n         DETACH (1)\n         L     R15,ATCHECB\n         STH   R15,RC\n         B     DETACHED\n         SPACE\n************************************************************\n*                                                          *\n*         SUBTASK TO INVOKE AND TIME THE ASSEMBLY          *\n*                                                          *\n************************************************************\n         SPACE\nASMTASK  STM   14,12,12(R13)\n         LR    R9,R1               RESTORE @DATA POINTER\n         LM    R10,R12,BASES       RESTORE BASE REGISTERS\n         LA    R1,TASKSAVE         GET NEW SAVE AREA\n         ST    R13,4(,R1)          PUT OLD ADDRESS IN NEW SAVE AREA\n         ST    R1,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R1              SWITCH TO NEW SAVE AREA\n         BAL   R14,STIMER          START TIMING THE ASSEMBLY\n         LA    R1,PARMPTR\n         SPACE\n         LINK  EPLOC=LINKNAME,SF=(E,LINKAREA)\n         SPACE\n         STH   R15,RC\n         BAL   R14,TTIMER          STOP TIMING THE ASSEMBLY\n         LH    R15,RC\n         L     R13,4(,R13)         SWITCH TO OLD SAVE AREA\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         ATTACH THE ASSEMBLER WITHOUT TIMING              *\n*                                                          *\n************************************************************\n         SPACE\nATTACHO  BAL   R14,STIMER          START TIMING THE ATTACH/DETACH\n         MVC   ATCHAREA(ATCHAREL),ATCHAREM\n         XC    ATCHECB,ATCHECB\n         LA    R1,PARMPTR\n         ATTACH EPLOC=LINKNAME,SF=(E,ATCHAREA),DCB=(R6),               X\n               TASKLIB=(R6),ECB=ATCHECB\n         ST    R1,ATCHTCBP        SAVE TCB POINTER\n         WAIT  ECB=ATCHECB\n         LA    R1,ATCHTCBP\n         DETACH (1)\n         L     R15,ATCHECB\n         STH   R15,RC\n         BAL   R14,TTIMER          STOP TIMING THE ATTACH/DETACH\n         SPACE\nDETACHED MVI   STAEOPT,0           TURN RECOVERY OFF\n         SPACE\n         ESTAE 0                   CANCEL THE ESTAE\n         SPACE\n         LTR   R6,R6               WAS THERE A DCB\n         BZ    NOCLOS6             NO\n         MVI   OPEN,X'80'          YES, CLOSE IT\n         CLOSE ((R6)),MF=(E,OPEN)\nNOCLOS6  EQU   *\n         SPACE\n         CLI   PAUSEKV+1,3\n         BNE   PAUS2X\n         LA    R1,=C'PAUSE - PRESS (ENTER) KEY TO CONTINUE'\n         LA    R0,37\n         TPUT  (1),(0),R\n         LA    R1,PAUSEBUF\n         MVC   0(8,R1),=CL8' '\n         LA    R0,L'PAUSEBUF\n         O     R1,=A(X'80000000')\n         TGET  (1),(0),R\n         LTR   R15,R15\n         BZ    PAUS2X\n         TCLEARQ INPUT\nPAUS2X   EQU   *\n         LH    R15,RC\n         LTR   R15,R15\n         BNZ   ERRLINK\n         B     EXIT0\n         SPACE\n************************************************************\n*                                                          *\n*         COMPUTE CPU TIME USED BY ASSEMBLER               *\n*                                                          *\n************************************************************\n         SPACE\nSTIMER   CLI   TIMEKV+1,2          NOTIME\n         BER   R14\n         ST    R14,TTIMERS\n         LA    R1,INTERVAL\n         STIMER TASK,TUINTVL=(1)\n         L     R14,TTIMERS\n         BR    R14\n         SPACE\nTTIMER   CLI   TIMEKV+1,2          NOTIME\n         BER   R14\n         STM   R14,R15,TTIMERS\n         TTIMER CANCEL\n         LTR   R0,R0               ANYTHING IN R0?\n         BZ    CPUX                NO, BRANCH\n         L     R1,INTERVAL\n         SR    R1,R0               GET ELAPSED CPU TIME (IN TU'S)\n         SR    R0,R0               PREPARE TO DIVIDE\n         D     R0,=F'3840'         38400 TU = 1 SECOND\n         C     R0,=F'1920'         ROUND UP IF REMAINDER GT HALF\n         BNH   *+8                 BRANCH IF LE HALF\n         A     R1,=F'1'            ROUND UP\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK(9),=C'CPU TIME:'\n         LA    R15,MSGWK+10\n         CVD   R1,DOUBLE\n         MVC   0(7,R15),=X'40202021204B20'\n         ED    0(7,R15),DOUBLE+5\nCPUSUP1  CLI   0(R15),C' '\n         BNE   CPUSUP1A\n         MVC   0(6,R15),1(R15)     LEFT ADJUST\n         MVI   6(R15),C' '\n         B     CPUSUP1\nCPUSUP1A CLI   0(R15),C' '\n         BE    CPUSUP1B\n         LA    R15,1(,R15)\n         B     CPUSUP1A\nCPUSUP1B MVC   1(7,R15),=C'SECONDS'\n         LA    R15,8(,R15)\n         LR    R0,R15              POINT PAST LAST BYTE OF MESSAGE\n         LA    R1,MSGWK            POINT TO MESSAGE\n         SR    R0,R1               GET LENGTH OF MESSAGE IN R0\n         BAL   R14,PUTLINE\nCPUX     LM    R14,R15,TTIMERS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         CALL DYNAMIC ALLOCATION                          *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR LR    R8,R14\n         LA    R1,MYDAPL\n         AIF   (NOT &MVS).SKIP4\n         L     R15,16              CVTPTR\n         TM    732(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   DAIRLINK               THEN DO LINK, NOT CALL\n         L     R15,732(,R15)       CVTDAIR\n         BALR  R14,R15             CALL IKJDAIR\n         B     DAIREXIT            SKIP AROUND LINK\nDAIRLINK EQU   *\n.SKIP4   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIREXIT EQU   *\n         LR    R14,R8\n         BR    R14\n         SPACE\n         AIF   (&BETA).BETA04\n         SPACE\n************************************************************\n*                                                          *\n*         INSERT A DATA SET NAME IN A MESSAGE              *\n*                                                          *\n************************************************************\n         SPACE\nDSNOUT   MVC   0(9,R15),=C'DATA SET '\n         LA    R15,9(,R15)\n         LH    R1,DSNAMEQ\n         LTR   R1,R1\n         BZ    DSNOUTM\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),DSNAMEQ+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         SPACE\nDSNOUTM  LH    R1,MEMBER\n         LTR   R1,R1\n         BZR   R14\n         MVI   0(R15),C'('\n         BCTR  R1,0\n         B     *+10\n         MVC   1(0,R15),MEMBER+2\n         EX    R1,*-6\n         LA    R15,2(R1,R15)\n         MVI   0(R15),C')'\n         LA    R15,1(,R15)\n         BR    R14\n         SPACE\n.BETA04  ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,MYREGS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,MYREGS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         TERMINATION                                      *\n*                                                          *\n************************************************************\n         SPACE\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\nEXIT     STH   R15,RC\n         NC    MYANS,MYANS         IS PARSE SPACE FREED\n         BZ    EXITRLSA            YES, BRANCH\n         IKJRLSA MYANS\n         XC    MYANS,MYANS         INDICATE PARSE SPACE IS FREED\nEXITRLSA EQU   *\n         SPACE\n         USING DAPB18,R5\n         CLI   DDLIN,0\n         BE    FFLIN\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDLIN\n         BAL   R14,CALLDAIR\nFFLIN    EQU   *\n         CLI   DDPRINT,0\n         BE    FFPRINT\n         CLI   FREEOPT,2           PFILE\n         BE    FFPRINT             YES, LEAVE ALLOCATED\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDPRINT\n         CLI   FREEOPT,1           SYSOUT?\n         BNE   *+10                NO\n         MVC   DA18SCLS(1),SOUT    YES, INSERT CLASS\n         BAL   R14,CALLDAIR\nFFPRINT  EQU   *\n         CLI   DDUT1,0\n         BE    FFUT1\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT1\n         BAL   R14,CALLDAIR\nFFUT1    EQU   *\n         AIF   (&H).HH06\n         CLI   DDUT2,0\n         BE    FFUT2\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT2\n         BAL   R14,CALLDAIR\nFFUT2    EQU   *\n         CLI   DDUT3,0\n         BE    FFUT3\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT3\n         BAL   R14,CALLDAIR\nFFUT3    EQU   *\n.HH06    ANOP\n         CLI   CONLNUM+1,1         ANY LIBRARIES ALLOCATED\n         BL    FFLIBX              NO, BRANCH\n         CLI   CONLSW,1            HAVE THEY BEEN CONCATENATED\n         BNE   FFLIBD              NO, BRANCH\n         LR    R6,R5\n         USING DAPB10,R6\n         MVC   DA10CD(MODEL10L),MODEL10\n         MVC   DA10DDN,DDLIB\n         BAL   R14,CALLDAIR        DECONCATENATE\n         LTR   R15,R15             WAS IT SUCCESSFUL\n         BNZ   FFLIBX              NO, BRANCH\n         DROP  R6\nFFLIBD   L     R6,CONLPTR\n         LH    R4,CONLNUM          GET NUMBER OF DDNAMES\nFFLIBC   SH    R6,=H'8'\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,0(R6)\n         BAL   R14,CALLDAIR        FREE THE DECONCATENATED DDNAME\n         BCT   R4,FFLIBC           LOOP FOR NEXT DDNAME\nFFLIBX   EQU   *\n         CLI   CONINUM+1,1         ANY SYSIN'S ALLOCATED\n         BL    FFINPX              NO, BRANCH\n         CLI   CONISW,1            HAVE THEY BEEN CONCATENATED\n         BNE   FFINPD              NO, BRANCH\n         LR    R6,R5\n         USING DAPB10,R6\n         MVC   DA10CD(MODEL10L),MODEL10\n         MVC   DA10DDN,DDIN\n         BAL   R14,CALLDAIR        DECONCATENATE\n         LTR   R15,R15             WAS IT SUCCESSFUL\n         BNZ   FFINPX              NO, BRANCH\n         DROP  R6\nFFINPD   L     R6,CONIPTR\n         LH    R4,CONINUM          GET NUMBER OF DDNAMES\nFFINPC   SH    R6,=H'8'\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,0(R6)\n         BAL   R14,CALLDAIR        FREE THE DECONCATENATED DDNAME\n         BCT   R4,FFINPC           LOOP FOR NEXT DDNAME\nFFINPX   EQU   *\n         DROP  R5                  DAPB18\n         CLI   RC+1,0              IS RC ZERO?\n         BZ    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\nEXITX    LH    R15,RC\n         LR    1,R13               SET UP FREE ADDRESS\n         L     R0,SIZE\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nEXLST    EQU   36                  DCB OFFSET\nDDNAM    EQU   40                  DCB OFFSET\nOFLGS    EQU   48                  DCB OFFSET\nINTERVAL DC    A(12*60*60*38400)  TIMER UNITS IN 12 HRS APPROX\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nATCHAREM ATTACH EPLOC=99,ECB=88,DCB=77,TASKLIB=66,SF=L\nATCHAREL EQU   *-ATCHAREM\n         SPACE\nATCHAR2M ATTACH EPLOC=99,ECB=88,TASKLIB=66,SF=L\nATCHAR2L EQU   *-ATCHAR2M\n         SPACE\nTASKNAME DC    CL8'ASMTASK '\n         SPACE\nMODEL10  DC    X'0010',XL6'00',CL8' '\nMODEL10L EQU   *-MODEL10\nMODEL18  DC    X'0018',XL10'0',CL18' ',XL2'0',CL8' '\nMODEL18L EQU   *-MODEL18\n         AIF   (&BETA).BETA05\nMODEL08  DC    AL2(8),XL10'0',CL24' ',XL16'0',CL16' ',XL8'0',CL8' '\nMODEL08L EQU   *-MODEL08\nMODEL1C  DC    X'001C',XL6'0',CL16' '\nMODEL1CL EQU   *-MODEL1C\nMODEL30  DC    X'0030',XL10'0',CL24' ',XL12'0',CL14' ',XL2'0',CL8' '\nMODEL30L EQU   *-MODEL30\n         SPACE\nMACLIB   DC    H'11',CL44'SYS1.MACLIB'\nUT1DSN   DC    H'4',CL44'&&UT1'\n*              BEWARE IF YOU DONT HAVE PRE-ALLOCATED &SYSUT1,\n*              THE 'LINK' COMMAND ALLOCATES A SMALL &SYSUT1\n*              AND DOESNT FREE IT, SO A SUBSEQUENT USE OF\n*              THIS COMMAND WILL PICK UP THE DATA SET ALLOCATED\n*              BY 'LINK' AND THE SPACE WILL NOT BE ENOUGH.\n*              THAT IS WHY WE USE &UT1 AND NOT &SYSUT1.\nDSNNULL  DC    H'0',CL44' '\nMEMNULL  DC    H'0',CL8' '\n         PRINT NOGEN\nPDSDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R\nPDSDCBL  EQU   *-PDSDCB\n         PRINT GEN\n.BETA05  ANOP\nSTAEMFL  ESTAE R0,MF=L\nSTAEMFLL EQU   *-STAEMFL\n         LTORG\nBLANKS   DC    CL8' '\n         DC    0D'0'\n         SPACE\n         AIF   (&BETA).BETA06\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         LA    R1,MYDFPARM\n*        USING DFDSECTD,R1         MAPPED BY IKJEFFDF DFDSECT=YES MACRO\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,4(,R1)          DFRCP\n         LA    R15,MYDAPL\n         ST    R15,0(,R1)          DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,8(,R1)          DFJEFF02\n         LA    R15,1               DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,12(,R1)         DFIDP\n         ST    R2,16(,R1)          DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n*        DROP  R1                  DFDSECTD\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n.BETA06  ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        ERROR HANDLERS                                    *\n*                                                          *\n************************************************************\n         SPACE\n         AIF   (&BETA).BETA07\nERRCONI  LA    R1,MSGCONI\n         LA    R0,L'MSGCONI\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRCONL  LA    R1,MSGCONL\n         LA    R0,L'MSGCONL\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMEML  LA    R1,MSGMEML\n         LA    R0,L'MSGMEML\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nMSGCONI  DC    C'MAXIMUM OF 10 INPUT DATA SETS EXCEEDED'\nMSGCONL  DC    C'MAXIMUM OF 10 MACRO LIBRARIES EXCEEDED'\nMSGMEML  DC    C'MEMBER NAME NOT ALLOWED IN LIB DSNAMES'\n         SPACE\nERRDEF   CVD   R15,DOUBLE\n         MVC   MSGWK(17),=C'ERROR QUALIFYING '\n         LA    R15,MSGWK+17\n         BAL   R14,DSNOUT\n         MVC   0(8,R15),=C'  CODE= '\n         LA    R15,7(,R15)\n         MVI   RC+1,0\n         B     ERRNUM\n         SPACE\nERRCAT   LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(17,R15),=CL17' IS NOT CATALOGED'\n         LA    R15,17(,R15)\n         B     ERRPDSM\nERRPDS   LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(39,R15),=CL39' IS PARTITIONED BUT NO MEMBER SPECIFIED'\n         LA    R15,39(,R15)\n         B     ERRPDSM\nERRPDSN  LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(19,R15),=CL19' IS NOT PARTITIONED'\n         LA    R15,19(,R15)\nERRPDSM  LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMEM   MVC   MSGWK(7),=C'MEMBER '\n         LA    R15,MSGWK+7\n         LH    R1,MEMBER\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),MEMBER+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(14,R15),=C' NOT FOUND IN '\n         LA    R15,14(,R15)\n         XC    MEMBER(2),MEMBER\n         BAL   R14,DSNOUT\n         B     ERRPDSM\n         SPACE\nERRDAIR  CLI   DEBUGKV+1,1\n         BNE   *+8\n         EX    R0,*                PROGRAM CHECK\n         BAL   R14,DAIRFAIL\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB         RESTORE DAPB POINTER IN CASE CONCAT\n         DROP  R1                  DAPL\n         B     EXIT12\n         SPACE\nMSG01    DC    C'PARSE ERROR'\n.BETA07  ANOP\n         SPACE\nERRLINK  CVD   R15,DOUBLE\n         STH   R15,RC\n         LA    R15,MSGWK\n         MVC   0(14,R15),=CL14'RETURN CODE IS'\n         LA    R15,14(,R15)\n         MVI   0(R15),C' '\nERRNUM   UNPK  1(3,R15),DOUBLE+6(2)\n         OI    3(R15),X'F0'\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         LA    R15,4(,R15)\n         CLI   RC+1,20             IS RETURN CODE 20\n         BNE   ERRLINK2\n         MVC   0(L'MSGSIZE,R15),MSGSIZE\n         LA    R15,L'MSGSIZE(,R15)\nERRLINK2 LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTLINE\n         LH    R15,RC\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         CONSTANTS FOR ERROR HANDLERS                     *\n*                                                          *\n************************************************************\n         SPACE\nMSGSIZE  DC    C'(MIGHT BE DUE TO REGION SIZE TOO SMALL)'\nHEXTR    DC    C'0123456789ABCDEF'\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        ESTAE EXIT                                        *\n*                                                          *\n************************************************************\n         SPACE\n         CNOP  0,8\n         USING *,R15\nSTAEEXIT EQU   *\n         CH    R0,STAE12  SDWA (SYSTEM DIAGNOSTIC WORK AREA)\n         BNE   STAEXWA             YES - BRANCH\n         LR    R0,R9               SAVE R9\n         LR    R9,R2               RESTORE WORK AREA BASE\n         STM   R0,R15,STAESAVE     SAVE ALL REGS\n         ST    R0,STAESAVE+36      STORE ORIGINAL VALUE OF R9\n         LA    R0,12               RESTORE R0\n         ST    R0,STAESAVE         AND SAVE ITS ORIGINAL VALUE\n         LM    R10,R12,BASES       RESTORE PROGRAM BASES\n         DROP  R15                 DROP TEMPORARY BASE REG\n         ST    R1,ABEND            SAVE ABEND COMPLETION CODE\n         CLI   STAEOPT,0           DO WE WANT TO RECOVER\n         BE    STAERC0             NO, BRANCH\n         LA    R0,STAERETR         POINT TO RETRY ROUTINE\n         LA    R15,4               INDICATE RETRY\n         LM    R1,R14,STAESAVE     RESTORE OTHER REGS\n         BR    R14                 RETURN TO SYSTEM\n         SPACE\nSTAERC0  LM    R0,R14,STAESAVE\n         SR    R15,R15             CONTINUE TERMINATION\n         BR    R14\n         SPACE\nSTAE12   DC    H'12'\n         SPACE\n         CNOP  0,8\n         USING SDWA,R1\nSTAEXWA  STM   14,12,12(13)        SAVE REGISTERS\n         L     R9,SDWAPARM         RESTORE WORK AREA BASE\n         LM    R10,R12,BASES       RESTORE PROGRAM BASES\n         MVC   ABEND(4),SDWACMPC-1 MOVE ABEND CODE\n         L     R15,SDWAGR15        GET ABEND RC\n         ST    R15,ABENDRC         SAVE IT\n         CLI   STAEOPT,0           DO WE WANT TO RECOVER\n         BE    STAERW0             NO, BRANCH\n         ST    R9,SDWAGR09         SET UP FOR SETRP RETREGS\n         STM   R10,R12,SDWAGR10    SET UP FOR SETRP RETREGS\n         SETRP RC=4,DUMP=NO,RETADDR=STAERETY,                          +\n               RETREGS=YES,REGS=(14,12)\n         SPACE\nSTAERW0  SETRP RC=0,REGS=(14,12)\n         SPACE\n************************************************************\n*                                                          *\n*        STAE RETRY ROUTINE                                *\n*                                                          *\n************************************************************\n         SPACE\n         CNOP  0,8\nSTAERETR EQU   *\n         L     R9,0(,R1)\n         LM    R10,R12,BASES\nSTAERETY EQU   *\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(70),MSGWK\n         MVC   MSGWK(8),=C'ABEND (S'\n         L     R1,ABEND\n         N     R1,=A(X'00FFF000')\n         BZ    STAERETU\n         UNPK  MSGWK+8(5),ABEND+1(3)    ABCXYZ TO FAFBFCFXZY\n         TR    MSGWK+8(3),HEXTR-240     FAFBFC TO C1C2C3\n         MVC   MSGWK+11(2),=C') '\n         CLC   MSGWK+8(3),=C'106'\n         BE    STAERETS                 REGION SIZE TOO SMALL\n         CLC   MSGWK+8(3),=C'804'\n         BNE   STAERETM\nSTAERETS MVC   MSGWK+13(L'MSGSIZE),MSGSIZE\n         B     STAERETM\nSTAERETU MVI   MSGWK+7,C'U'\n         L     R1,ABEND\n         N     R1,=A(X'00000FFF')\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+8(4),DOUBLE+5(3)\n         MVI   MSGWK+12,C')'\nSTAERETM LA    R1,MSGWK\n         LA    R0,52\n         BAL   R14,PUTLINE\n         LA    R6,PDSDCBW\n         TM    OFLGS(R6),X'10'     IS A DCB OPEN\n         BNO   EXIT12              NO, BRANCH\n         MVI   OPEN,X'80'          YES, CLOSE IT\n         CLOSE ((R6)),MF=(E,OPEN)\n         B     EXIT12\n         SPACE\n*               ABENDS MOST LIKELY TO HAPPEN\n*               806-4 MODULE NOT FOUND (ASSEMBLER H NOT INSTALLED)\n*               106-C GETMAIN IN FETCH FAILED (REGION TOO SMALL)\n*               804-1 GETMAIN IN ASSEMBLER H FAILED (REGION TOO SMALL)\n         SPACE\n         LTORG\n         DC    0D'0'\n         SPACE\n         AIF   (&BETA).BETA08\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nASMPPCL  IKJPARM\nDSNI     IKJPOSIT DSNAME,LIST,PROMPT='INPUT DATA SET NAME'\nMACKW    IKJKEYWD\n         IKJNAME 'MACLIB'\n         IKJNAME 'NOMACLIB'\nLIBKW    IKJKEYWD DEFAULT='NOLIB'\n         IKJNAME 'LIB',SUBFLD=LIBSF\n         IKJNAME 'NOLIB'\nPRINTKW  IKJKEYWD DEFAULT='PRINT'\n         IKJNAME 'PRINT',SUBFLD=PRINTSF\n         IKJNAME 'P',SUBFLD=PRINTSF\n         IKJNAME 'NOPRINT'\n         IKJNAME 'SYSOUT',SUBFLD=CLASSSF\n         IKJNAME 'PFILE',SUBFLD=PFILESF\nLISTKW   IKJKEYWD\n         IKJNAME 'LIST'\n         IKJNAME 'NOLIST'\nOBJKW    IKJKEYWD DEFAULT='OBJECT'\n         IKJNAME 'OBJECT',SUBFLD=OBJSF\n         IKJNAME 'NOOBJECT'\n         IKJNAME 'LOAD',SUBFLD=OBJSF\n         IKJNAME 'NOLOAD'\nMODKW    IKJKEYWD\n         IKJNAME 'MOD'\n         IKJNAME 'NOMOD'\nESDKW    IKJKEYWD\n         IKJNAME 'ESD'\n         IKJNAME 'NOESD'\nRLDKW    IKJKEYWD\n         IKJNAME 'RLD'\n         IKJNAME 'NORLD'\nRENTKW   IKJKEYWD\n         IKJNAME 'RENT'\n         IKJNAME 'NORENT'\nTERMKW   IKJKEYWD DEFAULT='TERM'\n         IKJNAME 'TERM'\n         IKJNAME 'NOTERM'\nTESTKW   IKJKEYWD\n         IKJNAME 'TEST'\n         IKJNAME 'NOTEST'\nALIGNKW  IKJKEYWD\n         IKJNAME 'ALIGN'\n         IKJNAME 'NOALIGN'\nXREFKW   IKJKEYWD DEFAULT='XREF'\n         IKJNAME 'XREF',SUBFLD=XREFSF\n         IKJNAME 'NOXREF'\nLINEKW   IKJKEYWD\n         IKJNAME 'LINECOUNT',SUBFLD=LINESF\nFLAGKW   IKJKEYWD\n         IKJNAME 'FLAG',SUBFLD=FLAGSF\nSYSPKW   IKJKEYWD\n         IKJNAME 'SYSPARM',SUBFLD=SYSPSF\n         AIF   (&H).HH07\n         AIF   (&G).GG07\nNUMKW    IKJKEYWD\n         IKJNAME 'NUMBER'\n         IKJNAME 'NONUMBER'\nSTMTKW   IKJKEYWD\n         IKJNAME 'STMT'\n         IKJNAME 'NOSTMT'\nMREFKW   IKJKEYWD\n         IKJNAME 'MREF'\n         IKJNAME 'NOMREF'\n         AGO   .HH07X\n.GG07    ANOP\nBATCHKW  IKJKEYWD\n         IKJNAME 'BATCH'\n         IKJNAME 'NOBATCH'\n         AGO   .HH07X\n.HH07    ANOP\nBATCHKW  IKJKEYWD\n         IKJNAME 'BATCH'\n         IKJNAME 'NOBATCH'\nDISKKW   IKJKEYWD\n         IKJNAME 'DISK'\n         IKJNAME 'NODISK'\n.HH07X   ANOP\nMSGKW    IKJKEYWD DEFAULT='MSGD'\n         IKJNAME 'MSG'             MESSAGES FOR OBJECT AND PRINT NAMES\n         IKJNAME 'MSGD'            MESSAGES ONLY IF NONSTANDARD DEFAULT\n         IKJNAME 'NOMSG'           MESSAGES NEVER\nTIMEKW   IKJKEYWD DEFAULT='NOTIME'\n         IKJNAME 'TIME'\n         IKJNAME 'NOTIME'\nSHOWKW   IKJKEYWD\n         IKJNAME 'SHOWPARM'\nPAUSEKW  IKJKEYWD\n         IKJNAME 'PAUSE'\nXCTLKW   IKJKEYWD DEFAULT='$NOX'\n         IKJNAME '$X'\n         IKJNAME '$NOX'\nDEBUGKW  IKJKEYWD\n         IKJNAME '$DEBUG'\n*\n*         SUBFIELDS\n*\nLIBSF    IKJSUBF\nDSNL     IKJPOSIT DSNAME,LIST,PROMPT='MACRO LIBRARY'\nPRINTSF  IKJSUBF\nDSNP     IKJPOSIT DSTHING\nPFILESF  IKJSUBF\nPFILE    IKJIDENT 'PRINT FILENAME',                                    +\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +\n               PROMPT='PRINT FILENAME'\nCLASSSF  IKJSUBF\nCLASS    IKJIDENT 'SYSOUT CLASS',                                      +\n               FIRST=ALPHANUM,MAXLNTH=1,                               +\n               DEFAULT='A'\nOBJSF    IKJSUBF\nDSNO     IKJPOSIT DSTHING\nLINESF   IKJSUBF\nLINE     IKJIDENT 'LINECOUNT',                                         +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +\n               PROMPT='LINECOUNT',VALIDCK=LINEVC\nFLAGSF   IKJSUBF\nFLAGLV   IKJIDENT 'FLAG LEVEL',                                        +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=3,                  +\n               PROMPT='FLAG LEVEL',VALIDCK=FLAGVC\nXREFSF   IKJSUBF\nXRESKW   IKJKEYWD DEFAULT='SHORT'\n         IKJNAME 'FULL'\n         IKJNAME 'SHORT'\nSYSPSF   IKJSUBF\nSYSP     IKJPOSIT QSTRING,                                             +\n               PROMPT='SYSPARM VALUE IN QUOTES'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE VALIDITY CHECK ROUTINES                    *\n*                                                          *\n************************************************************\n         SPACE\n         DC    0D'0'\nLINEVC   STM   14,12,12(13)\n         L     R9,4(,R1)           RESTORE R9\n         LM    R10,R12,BASES       RESTORE BASE REGS\n         L     R2,0(,R1)           POINT R2 TO PDE\n         SR    15,15\n         L     R14,0(,R2)          POINT TO OPERAND\n         LH    R1,4(,R2)           GET LENGTH OF OPERAND\n         BCTR  R1,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         LTR   R1,R1\n         BZ    LINEVCR4\n         CH    R1,=H'99'\n         BH    LINEVCR4\n         B     LINEVCR\nLINEVCR4 LA    R15,4\nLINEVCR  L     14,12(,13)\n         LM    0,12,20(13)\n         BR    14\n         SPACE\n         DC    0D'0'\nFLAGVC   STM   14,12,12(13)\n         L     R9,4(,R1)           RESTORE R9\n         LM    R10,R12,BASES       RESTORE BASE REGS\n         L     R2,0(,R1)           POINT R2 TO PDE\n         SR    15,15\n         L     R14,0(,R2)          POINT TO OPERAND\n         LH    R1,4(,R2)           GET LENGTH OF OPERAND\n         BCTR  R1,0\n         B     *+10\n         PACK  DOUBLE(8),0(0,R14)\n         EX    R1,*-6\n         CVB   R1,DOUBLE\n         LTR   R1,R1\n         BZ    FLAGVCR4\n         CH    R1,=H'255'\n         BH    FLAGVCR4\n         B     FLAGVCR\nFLAGVCR4 LA    R15,4\nFLAGVCR  L     14,12(,13)\n         LM    0,12,20(13)\n         BR    14\n         SPACE\n         LTORG\n         DC    0D'0'\n.BETA08  ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nSIZE     DS    F\nCPPLPTR  DS    F\nLINKAREA DS    D\nDOUBLE   DS    D\nLINKNAME DS    CL8\nBASES    DS    3F\nRC       DS    H\nQUALRC   DS    C\nSOUT     DS    C\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F\nMYIOPL   DS    4F\nMYDFPB   DS    5F\nMYQUAL   DS    CL8\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE\nPAUSEBUF EQU   MYSEG1+4,80\nMYREGS   DS    4F                 USED BY PUTLINE ROUTINE\nMYDFREGS DS    F\nMYSTPB   DS    0F                 STACK DELETE USES 5 WORDS\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nCONIDAPB DS    3F,10CL8\nCONIDAPX EQU   *\nCONLDAPB DS    3F,10CL8\nCONLDAPX EQU   *\nCONINUM  DS    H\nCONLNUM  DS    H\nCONISW   DS    C\nCONLSW   DS    C\nCONIPTR  DS    F\nCONLPTR  DS    F\nMEMBER   DS    H,CL8               MEMBER NAME FOR MESSAGES\nDSNAMEH  DS    H,CL44              FIRST INPUT DSNAME\nDSNAMEI  DS    H,CL44              INPUT DSNAME\nDSNAMEL  DS    H,CL44              LIB DSNAME\nDSNAMEP  DS    H,CL44              PRINT DSNAME\nDSNAMEO  DS    H,CL44              OBJECT DSNAME\nDSNAMEU  DS    H,CL44              UNQUALIFIED DSNAME\nDSNAMEQ  DS    H,CL44              QUALIFIED DSNAME FOR MESSAGES\nMEMH     DS    H,CL8\nMEMI     DS    H,CL8\nMEMP     DS    H,CL8\nMEMO     DS    H,CL8\nPSWD     DS    CL8\nDSNHQ    DS    C\nDSNIQ    DS    C\nDSNPPDE  DS    0F                  FAKE PDE\nDSNOPDE  DS    6F                  FAKE PDE\nDSNPOPB  DS    0CL8                FAKE CBUF\nDSNOOPB  DS    CL8                 FAKE CBUF\nOPEN     DS    0F\nTTIMERS  DS    2F\nPDSDCBW  DS    0F,88X\nPDSEXLST DS    F\nTIMEKV   DS    H\nDEBUGKV  DS    H\nXCTLKV   DS    H\nMREFKV   DS    H\nPAUSEKV  DS    H\nABEND    DS    F\nABENDRC  DS    F\nSTAEOPT  DS    C\nSTAEMFLW DS    0F,(STAEMFLL)X\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nATCHAREA DS    0F,(ATCHAREL)X\nATCHECB  DS    F\nATCHTCBP DS    F\n*\nFREEOPT  DS    H\n*\nPARMPTR  DS    2F,H\nPARMLEN  DS    H\nPARM     DS    CL100\n         AIF   (&H).HH09\n         DS    0F,H                VS ASSEMBLER OR G\nDDNAMES  DS    H                   LENGTH\n         DS    CL8                 NEVER USED\n         DS    CL8                 NEVER USED\n         DS    CL8                 NEVER USED\nDDLIB    DS    CL8                 IF LIB\nDDIN     DS    CL8\nDDPRINT  DS    CL8                 IF LIST/PRINT\nDDPUNCH  DS    CL8                 IF DECK\nDDUT1    DS    CL8\nDDUT2    DS    CL8\nDDUT3    DS    CL8\nDDLIN    DS    CL8    (SYSGO)      IF OBJECT\nDDTERM   DS    CL8                 IF TERM\nDDLEN    EQU   *-DDNAMES-2\n*\n         AGO   .HH09A\n.HH09    ANOP\n         DS    0F,H                ASSEMBLER H\nDDNAMES  DS    H                   LENGTH\nDDLIN    DS    CL8                 IF OBJECT\n         DS    CL8                 NEVER USED\n         DS    CL8                 NEVER USED\nDDLIB    DS    CL8                 IF LIB\nDDIN     DS    CL8\nDDPRINT  DS    CL8                 IF LIST/PRINT\nDDPUNCH  DS    CL8                 IF DECK\nDDUT1    DS    CL8\nDDTERM   DS    CL8                 IF TERM\nDDLEN    EQU   *-DDNAMES-2\n*\n.HH09A   ANOP\n         DS    0D\nMSGWK    DS    CL256\n         DS    0D\nSTAESAVE DS    16F\nTASKSAVE DS    18F\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJUPT\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE\n         IKJDAPL\n         SPACE\n         IKJDAP08\n         SPACE\n         IKJDAP0C\n         SPACE\n         IKJDAP10\n         SPACE\n         IKJDAP18\n         SPACE\n         IKJDAP1C\n         SPACE\n         IKJDAP30\n         SPACE\n*        IKJEFFDF DFDSECT=YES\n         SPACE\n         PRINT NOGEN\n         IHASDWA\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMH$": {"ttr": 1793, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'ASM'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD,SYSPARM(F1)',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(ASMH),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(ASM),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'ASMH'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD,SYSPARM(H1)',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(ASMH),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(ASMH),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMH#": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00r\\x00r\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 114, "newlines": 114, "modlines": 0, "user": "BG@PRC"}, "text": ")F     THE TSO ASSEMBLER H PROMPTER CALLS ASSEMBLER H USING THE\n   INTERACTIVE FACILITIES OF TSO.\n\n)X ASM  'DSN'   OBJECT/NOOBJECT  PRINT/NOPRINT/SYSOUT  TERM/NOTERM\n             MACLIB/NOMACLIB  LIB('LIBLIST')/NOLIB  TEST/NOTEST\n             RENT/NORENT  BATCH/NOBATCH  ALIGN/NOALIGN  MSG/NOMSG\n             XREF/XREF(FULL)/XREF(SHORT)/NOXREF  ESD/NOESD  RLD/NORLD\n             FLAG('INTEGER')  LINECOUNT('INTEGER')  SYSPARM('STRING')\n\n   NOTE- OBJECT MAY BE FOLLOWED BY- ('DSNAME')\n         PRINT MAY BE FOLLOWED BY- ('DSNAME'/*)\n         SYSOUT MAY BE FOLLOWED BY- ('CLASS')\n\n   REQUIRED- 'DSN'\n   DEFAULTS- OBJECT, PRINT, TERMINAL, MACLIB, NOTEST, NORENT,\n             NOBATCH, ALIGN, XREF(SHORT), ESD, RLD, FLAG(0),\n             LINECOUNT(55), SYSPARM(), LIB('SYS2.MACLIB')\n                                                                       .\n))MSG - INDICATES THAT YOU WANT THE PROMPTER TO SHOW YOU THE\n   DATA SET NAMES WHERE THE PRINT AND OBJECT FILES WILL BE WRITTEN.\n   THIS IS USEFUL UNTIL YOU GET USED TO THE WAY THE PROMPTER BUILDS\n   THE NAMES WHEN YOU DONT SPECIFY THEM.\n                                                                       .\n))OBJECT('DSNAME')  INDICATES THAT THE ASSEMBLER IS TO  PRODUCE\n   AN OBJECT MODULE. IF ('DSNAME') IS PRESENT, IT SPECIFIES THE\n   DATA SET TO CONTAIN THE OBJECT MODULE; OTHERWISE, A DSNAME\n   WILL BE CREATED BASED ON THE SOURCE PROGRAM DSNAME.\n))NOOBJECT  SPECIFIES THAT THE ASSEMBLER IS NOT TO PRODUCE AN\n   OBJECT MODULE.\n                                                                       .\n))PRINT('DSNAME'/*)  SPECIFIES THAT THE ASSEMBLY  LISTING\n   IS TO BE PLACED IN THE DATA SET SPECIFIED BY 'DSNAME' OR\n   *.  THE * MEANS THE LISTING IS TO APPEAR AT THE TERMINAL.  IF\n   ('DSNAME'/*) IS OMITTED, A DSNAME BASED ON THE INPUT DSNAME\n   WILL BE USED.  PRINT IS IGNORED IF NOLIST IS SPECIFIED.\n))SYSOUT('CLASS')  - SPECIFIES THAT THE ASSEMBLY  LISTING\n   IS TO BE PRINTED TO A SYSOUT DATA SET.\n))NOPRINT  INDICATES THE ASSEMBLER IS TO PRODUCE NO LISTING. IF EITHER\n   NOPRINT OR NOLIST IS REQUESTED, NO SYSPRINT LISTING WILL BE CREATED.\n))LIST  SPECIFIES A NORMAL ASSEMBLY LISTING IS TO BE PRODUCED AND\n   PLACED IN THE DATA SET DERIVED FROM THE PRINT OPTION.  LIST IS\n   IGNORED IF NOPRINT IS SPECIFIED.\n))NOLIST  SPECIFIES NO ASSEMBLER LISTING IS TO BE PRODUCED.  IF EITHER\n   NOPRINT OR NOLIST IS REQUESTED, NO SYSPRINT LISTING WILL BE CREATED.\n                                                                       .\n))TERM  SPECIFIES THAT ANY ERROR DIAGNOSTICS GENERATED BY THE\n   ASSEMBLER ARE TO BE PRINTED AT THE TERMINAL.\n))NOTERM  SPECIFIES THAT NO DIAGNOSTIC MESSAGES ARE TO BE PRINTED\n   AT THE TERMINAL (UNLESS THE PRINT DATA SET SPECIFIES THE TERMINAL).\n                                                                       .\n))MACLIB  INDICATES THE STANDARD SYSTEM LIBRARY DATA SET SYS1.MACLIB\n   IS TO BE USED BY THE ASSEMBLER FOR MACRO DEFINITIONS.  SYS1.MACLIB\n   IS CONCATENATED IN FRONT OF ANY DATA SETS IN THE LIB OPTION UNLESS\n   IT IS EXPLICITLY SPECIFIED WITHIN THE LIB OPTION.\n))NOMACLIB  SPECIFIES THAT THE DATA SET  SYS1.MACLIB  IS TO\n   BE USED FOR MACRO DEFINITIONS ONLY IF EXPLICITLY SPECIFIED.\n                                                                       .\n))LIB('LIBLIST')  SPECIFIES A LIST OF LIBRARY DATA SETS\n   TO BE USED BY THE ASSEMBLER.  THE STANDARD LIBRARY DATA SET,\n   SYS1.MACLIB, IS CONCATENATED IN FRONT OF THE DATA SETS SPECIFIED,\n   UNLESS IT IS EXPLICITLY SPECIFIED SOMEWHERE IN 'LIBLIST' OR\n   UNLESS NOMACLIB IS SPECIFIED.                                       .\n                                                                       .\n))TEST  SPECIFIES A SYMBOL TABLE IS TO BE GENERATED WITH THE OBJECT\n   MODULE FOR USE WITH THE TEST COMMAND.\n))NOTEST  SPECIFIES NO SYMBOL TABLE IS TO BE GENERATED WITH THE\n   OBJECT MODULE.\n                                                                       .\n))RENT  SPECIFIES THAT THE ASSEMBLER IS TO CHECK FOR POSSIBLE\n   CODING VIOLATIONS OF RE-ENTRABILITY.\n))NORENT  SPECIFIES THAT NO CHECK IS TO BE MADE BY THE ASSEMBLER\n   FOR POSSIBLE CODING VIOLATIONS OF RE-ENTRABILITY\n                                                                       .\n))BATCH    SPECIFIES THAT MULTIPLE PROGRAMS ARE TO BE ASSEMBLED WITH\n   THIS INVOCATION OF THE ASSEMBLER.\n))NOBATCH  SPECIFIES THAT ONLY THE FIRST PROGRAM (UP TO THE FIRST \"END\"\n   STATEMENT) IS TO BE ASSEMBLED WITH THIS INVOCATION OF THE ASSEMBLER.\n                                                                       .\n))ALIGN  SPECIFIES THAT ALIGNMENT OF DATA IS TO BE DONE ABOVE\n   MINIMUM HARDWARE REQUIREMENTS.\n))NOALIGN  SPECIFIES THAT OPERANDS AND DATA ARE ONLY TO BE CHECKED\n   FOR BOUNDARY CONSTRAINTS MADE MANDATORY BY HARDWARE.\n                                                                       .\n))XREF  OR  XREF(FULL)  SPECIFIES THAT YOU WANT A CROSS REFERENCE\n   TABLE OF SYMBOLS INCLUDED IN THE OUTPUT ASSEMBLY LISTING.\n   SPECIFY  XREF(SHORT)  IF ONLY THOSE IDENTIFIERS WHICH ACTUALLY ARE\n   REFERENCED ARE TO BE INCLUDED IN THE XREF TABLE.\n   XREF IS IGNORED IF NOPRINT AND/OR NOLIST IS IN EFFECT.\n))NOXREF  SPECIFIES THAT NO SYMBOL CROSS REFERENCE TABLE IS TO BE\n   GENERATED AS PART OF THE ASSEMBLY.\n                                                                       .\n))ESD  TELLS THE ASSEMBLER TO PRODUCE AN EXTERNAL SYMBOL DICTIONARY\n   AS PART OF THE ASSEMBLER LISTING.  ESD IS IGNORED IF NOPRINT\n   AND/OR NOLIST IS IN EFFECT.\n))NOESD  TELLS THE ASSEMBLER NOT TO LIST THE EXTERNAL SYMBOL\n   DICTIONARY.\n                                                                       .\n))RLD  TELLS THE ASSEMBLER TO PRODUCE THE RELOCATION DICTIONARY\n   AS PART OF THE ASSEMBLER LISTING. RLD IS IGNORED IF NOPRINT\n   AND/OR NOLIST IS IN EFFECT.\n))NORLD  TELLS THE ASSEMBLER NOT TO LIST THE RELOCATION DICTIONARY.\n                                                                       .\n))FLAG('INTEGER')  SPECIFIES THAT ERROR DIAGNOSTIC MESSAGES\n   AND MNOTES BELOW SEVERITY CODE 'INTEGER' SHOULD NOT APPEAR\n   IN THE LISTING. 'INTEGER' RANGE IS 0-255 INCLUSIVE .\n                                                                       .\n))LINECOUNT('INTEGER')  SPECIFIES THE NUMBER OF LINES PER PAGE\n   IN THE LISTING DATA SET.  THIS OPTION DOES NOT APPLY\n   IF THE LISTING GOES DIRECTLY TO THE  TERMINAL.\n                                                                       .\n))SYSPARM('STRING')  SPECIFIES THE VALUE OF THE SYSTEM\n   VARIABLE SYMBOL &SYSPARM. THE STRING MAY CONSIST OF UP TO\n   255 CHARACTERS SPECIFIED WITHIN QUOTES.\n                                                                       .\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CATPW": {"ttr": 1798, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x01Q\\x01Q\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 337, "newlines": 337, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   C A T P W   '\n***********************************************************************\n*                                                                     *\n*         CATPW - ICF MASTER CATALOG                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN: MARCH 26 1987.\n* DATE UPDATED: APRIL 25 1991.\n* ATTRIBUTES: AC(1), NOT RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*   THIS PROGRAM READS AN ICF MASTERCATALOG AND DISPLAYS THE PASSWORDS.\n*\n*   IT CAN RUN AS A PROGRAM OR A TSO COMMAND, BUT IT MUST RUN UNDER\n*   TSO TO BE USEFUL BECAUSE IT DISPLAYS THE RESULTS VIA 'TPUT'.\n*\n*   THE NAME OF THE CATALOG AND THE SYSTEM ID MUST BE HARD-CODED IN\n*   THIS COMMAND IN THE TABLE AT LABEL 'SIDLIST'.  THIS ALLOWS US\n*   TO HAVE ONLY ONE SOURCE MODULE TO MAINTAIN FOR MULTIPLE SYSTEMS.\n*\n*   IT MUST RUN IN AN APF-AUTHORIZED ENVIRONMENT, AND WILL ONLY\n*   WORK FOR USERIDS THAT ARE IN A TABLE IN THE PROGRAM.\n*   IF IT IS NOT AUTHORIZED, AN ERROR MESSAGE IS ISSUED.\n*\n*   IF DDNAME 'CATALOG' IS PRE-ALLOCATED IT WILL BE USED INSTEAD OF\n*   DYNAMICALLY ALLOCATING THE HARD-CODED MASTER CATALOG. HOWEVER,\n*   THIS HAS NEVER WORKED FOR USERCATALOGS. OPEN FAILS WITH RC=8,\n*   ERR0R 188, AND MESSAGE IEC161I 076-002.\n*\n*  28SEP87 - CHECK FOR 255 INSTEAD OF ZERO, *+10 INSTEAD OF *+8\n*  13APR89 - CHANGE NAME OF CATALOG\n*  25JUN90 - SHOW ACBERFLG IN DECIMAL. ADD ERR99.\n*            USE DIFFERENT CATALOG NAMES DEPENDING ON SYSTEM ID.\n*  25APR91 - USERLIST CHANGED TO DUMMIES FOR MODS TAPE DISTRIBUTION.\n         SPACE\nCATPW    CSECT\n         USING *,R10\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'CATPW'\n         DC    CL16' &SYSDATE &SYSTIME '\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15\n         LA    R15,@SAVE\n         ST    R13,4(,R15)\n         ST    R15,8(,R13)\n         LR    R13,R15\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE IF TSO USER IS ALLOWED TO DO THIS *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCBWORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,180(,R1)         TCBJSCB\n         L     R1,264(,R1)         JSCBPSCB\n         LTR   R1,R1               ANY PSCB?\n         BZ    EXIT0               NO - NOT A TSO SESSION\n         USING PSCB,R1\n         MVC   USERID,=CL8' '\n         SR    R15,R15\n         IC    R15,PSCBUSRL        LENGTH OF USERID\n         BCTR  R15,0               MINUS 1 FOR EX\n         B     *+10                JUMP TO EX\n         MVC   USERID(0),PSCBUSER  (EXECUTED BY EX)\n         EX    R15,*-6             EXECUTE MVC\n         CLC   USERID(2),USERLIST  ANY 'T0' USERID\n         BE    USEROK               IS OK\n         DROP  R1                  PSCB\n         LA    R1,USERLIST\nUSERLOOP CLI   0(R1),X'FF'\n         BE    EXIT0\n         CLC   0(7,R1),USERID\n         BE    USEROK\n         LA    R1,8(,R1)\n         B     USERLOOP\nUSERLIST DC    CL8'T0SYS   '\n         DC    CL8'T1MOE   '\n         DC    CL8'T1LARRY '\n         DC    CL8'T1CURLY '\n         DC    X'FFFF'\nUSEROK   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE IF APF AUTHORIZED\n*                                                          *\n************************************************************\n         SPACE\n         TESTAUTH FCTN=1           TEST FOR AC=1\n         LTR   R15,R15             ARE WE AC=1\n         BZ    OKMODSET            YES\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         SVC   93\n         B     EXIT0\n         SPACE\nOKMODSET EQU   *\n         MODESET KEY=ZERO\n         SPACE\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCBWORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R3,180(,R1)         TCBJSCB\n         OI    243(R3),X'80'       JSCBSWT1,JSCBPASS\n         SPACE\n         MODESET KEY=NZERO\n         SPACE\n************************************************************\n*                                                          *\n*         ALLOCATE THE CATALOG\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DDNAME,=CL8'CATALOG'\n         DEVTYPE DDNAME,DEVAREA\n         LTR   R15,R15\n         BZ    ALREADY\n         MVC   DDNAME,=CL8' '\n         SPACE\n         L     R1,16               CVTPTR\n         L     R1,196(,R1)         CVTSMCA\n         LA    R1,16(,R1)          SMCASID, SYSTEM ID\n         LA    R14,SIDLIST\nSIDLOOP  CLI   0(R14),0            IF NO MATCHING SYSTEM ID\n         BE    SIDX                   USE NAME IN P99DSNAM+6\n         CLC   0(4,R14),0(R1)      IF SID MATCHES\n         BE    SIDMATCH               REPLACE NAME IN P99DSNAM+6\n         LA    R14,48(,R14)        ELSE POINT TO NEXT SID\n         B     SIDLOOP             GO COMPARE\nSIDMATCH MVC   P99DSNAM+6(44),4(R14)\nSIDX     EQU   *\n         LA    R1,P99RBP\n         SVC   99                  ALLOCATE AND GET DDNAME\n         LTR   R15,R15\n         BNZ   ERR99\n         MVC   MSG01+22(23),P99DSNAM+6\n         SPACE\n************************************************************\n*                                                          *\n*         OPEN THE CATALOG\n*                                                          *\n************************************************************\n         SPACE\nALREADY  LA    R4,CATACB\n         LA    R5,CATRPL\n         USING IFGACB,R4\n         USING IFGRPL,R5\n         MVC   ACBDDNM(8),P99RTDDN+6 PUT DDNAME IN ACB\n         OPEN  (CATACB)\n         LTR   R15,R15\n         BNZ   OPENERR\n         SPACE\n************************************************************\n*                                                          *\n*         READ THE CATALOG\n*                                                          *\n************************************************************\n         SPACE\nREAD     GET   RPL=(R5)\n         LTR   R15,R15\n         BNZ   READERR\n         SPACE\n         CLI   RECORD+75,255\n         BE    *+10\n         MVC   MASTPW(8),RECORD+75\n         CLI   RECORD+83,255\n         BE    *+10\n         MVC   CNTLPW(8),RECORD+83\n         CLI   RECORD+91,255\n         BE    *+10\n         MVC   UPDTPW(8),RECORD+91\n         SPACE\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         SVC   93\n         LA    R1,MSG02\n         LA    R0,L'MSG02\n         SVC   93\n         SPACE\n         B     EOF\n         SPACE\n************************************************************\n*                                                          *\n*         ERROR ROUTINES\n*                                                          *\n************************************************************\n         SPACE\nOPENERR  MVC   LINE(18),=C'OPEN  ERROR XX XXX'\n         ST    R15,DOUBLE\n         LA    R1,DOUBLE+3\n         LA    R0,1\n         LA    R15,LINE+12\n         BAL   R14,HEX\n         SR    R1,R1\n         IC    R1,ACBERFLG\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE+15(3),DOUBLE+6(2)\n         LA    R1,LINE\n         LA    R0,18\n         SVC   93\n         B     EOF\n         SPACE\nREADERR  MVC   LINE(18),=C'READ  ERROR XX XXX'\n         ST    R15,DOUBLE\n         LA    R1,DOUBLE+3\n         LA    R0,1\n         LA    R15,LINE+12\n         BAL   R14,HEX\n         LA    R1,RPLFDBK\n         LA    R0,3\n         LA    R15,LINE+15\n         BAL   R14,HEX\n         LA    R1,LINE\n         LA    R0,18\n         SVC   93\n         B     EOF\n         SPACE\n************************************************************\n*                                                          *\n*        THIS ROUTINE CONVERTS DATA TO HEX                 *\n*                                                          *\n************************************************************\n         SPACE\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTRAN-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n************************************************************\n*                                                          *\n*         END OF FILE                                      *\n*                                                          *\n************************************************************\n         SPACE\nERR99    LR    R2,R15\n         MVC   MSG04A(44),P99DSNAM+6\n         LA    R1,MSG04\n         LA    R0,L'MSG04+44\n         SVC   93\n         LR    R15,R2\n         B     EXIT\nEOF      EQU   *\n         CLOSE (CATACB)\nEXIT0    SR    R15,R15\nEXIT     L     R13,4(,R13)\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\n         SPACE\n         LTORG\n@SAVE    DC    18F'0'\nDEVAREA  DC    2F'0'\nDOUBLE   DC    D'0'\nCOUNT    DC    F'0'\nUSERID   DC    CL8' '\nLINE     DC    CL18' '\nMSG01    DC    C'PASSWORDS FOR CATALOG XXXXXXXXXXXXXXXXXXXXXXX'\nMSG02    DC   C' UPDATE---(NULL)    MASTER---(NULL)   CONTROL---(NULL)'\nMSG03    DC    C'ENVIRONMENT IS NOT APF AUTHORIZED'\nMSG04    DC    C'UNABLE TO ALLOCATE '\nMSG04A   DC    CL44' '\nUPDTPW   EQU   MSG02+10\nMASTPW   EQU   MSG02+29\nCNTLPW   EQU   MSG02+48\nP99RBP   DC    0F'0',X'80',AL3(P99RB)\nP99RB    DC    X'14012000',A(0,P99TUPL,0,0)\nP99TUPL  DC    A(P99RTDDN,P99DSNAM,P99STATS)\n         DC    X'80',AL3(P99CLOSE)\n         DC    0H'0'\nP99RTDDN DC    X'0055'             DALRTDDN  S99TUKEY\n         DC    H'1'                          S99TUNUM\n         DC    H'8'                          S99TULNG\nDDNAME   DC    CL8'        '                 S99TUPAR\n         DC    0H'0'\nP99DSNAM DC    X'0002'             DALDSNAM  S99TUKEY\n         DC    H'1'                          S99TUNUM\n         DC    H'44'                         S99TULNG\n         DC    CL44'CATALOG.MVSICFM.VIPOCAT'\n         DC    0H'0'\nP99STATS DC    X'0004'             DALSTATS\n         DC    H'1'                          S99TUNUM\n         DC    H'1'                          S99TULNG\n         DC    X'08'               SHR\n         DC    0H'0'\nP99CLOSE DC    0H'0',X'001C',H'0'  DALCLOSE, UNALLOCATE AT CLOSE\nSIDLIST  DC    CL4'VDUC',CL44'CATALOG.MVSICFM.VIPOCAT'\n         DC    CL4'MDAS',CL44'CATALOG.MVSICFM.VMVSCAT'\n         DC    X'00' END OF SIDLIST\n         DC    0D'0'\n         SPACE\n         PRINT NOGEN\n         SPACE\nCATACB   ACB   AM=VSAM,DDNAME=CATALOG,CATALOG=NO,                      X\n               MACRF=(ADR,SEQ,IN),PASSWD=CATPW\nCATPW    DC    AL1(8),CL8' '\n         SPACE\nCATRPL   RPL   AM=VSAM,ACB=CATACB,AREA=RECORD,AREALEN=512,             X\n               OPTCD=(ADR,SEQ,ARD,NUP,MVE)\n         SPACE\nRECORD   DS    0D,512C\nOFLGS    EQU   48\nDDNAM    EQU   40\n         SPACE\n         IKJPSCB\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         SPACE\n         IFGACB\n         SPACE\n         IFGRPL\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYPDS": {"ttr": 1804, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x07\\x12\\x07\\x12\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 1810, "newlines": 1810, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   C O P Y P D S  '\n***********************************************************************\n*                                                                     *\n*        'COPYPDS' TSO COMMAND                                        *\n*                                                                     *\n***********************************************************************\n*\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN: JUNE 14 1979.\n* DATE UPDATED: APRIL 25 1991.\n* ATTRIBUTES: RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*         THIS TSO COMMAND COPIES A PARTITIONED DATA SET,\n*         USING THE IEBCOPY UTILITY PROGRAM.\n*\n*         IF IT INVOKES IEBCOPY DIRECTLY, ON A NON-TSO/E SYSTEM,\n*         IT MUST BE LINK-EDITED AS AN AUTHORIZED PROGRAM AND\n*         THE NAME OF THE COMMAND MUST BE ADDED TO THE TABLE\n*         OF AUTHORIZED COMMANDS IN IKJEFT02 CSECT IKJEFTE2.\n*\n*         HOWEVER, BY DEFAULT ON NON-TSO/E SYSTEMS IT INVOKES 'SPFCOPY'\n*         WHICH IS A PROGRAM THAT INVOKES IEBCOPY AFTER TAKING CARE\n*         OF THE AUTHORIZATION ITSELF.\n*\n*         ON TSO/E SYSTEMS IT INVOKES 'IEBCOPY' VIA THE TSO\n*         SERVICE ROUTINE, SO 'IEBCOPY' MUST BE IN THE TABLE\n*         IN MEMBER IKJEFT02 CSECT IKJEFTAP.\n*\n*  THIS COMMAND WAS WRITTEN TO PROVIDE THE FOLLOWING CAPABILITIES\n*  TO TSO USERS -\n*\n*     .  COPY ONE PDS TO ANOTHER, WITH AN OPTION TO KEEP OR REPLACE\n*        IDENTICALLY NAMED MEMBERS.\n*     .  COPY SELECTED MEMBERS AND ALIASES FROM ONE PDS TO ANOTHER,\n*     .  COPY LOAD MODULES TO A LIBRARY HAVING A DIFFERENT BLOCKSIZE\n*        WITHOUT ATTEMPTING TO REBLOCK THEM (LIKE A CERTAIN OTHER\n*        COMMAND UNSUCCESSFULLY DOES).\n*     .  IN SHORT, DO ANYTHING IEBCOPY CAN DO EXCEPT A) COMPRESS,\n*        AND B) COPY SOME MEMBERS WITH REPLACE AND OTHERS WITHOUT\n*        REPLACE. (COMPRESS IS DONE WITH ANOTHER COMMAND).\n*     .  REQUIRE THAT THE OUTPUT PDS ALREADY EXIST, SO THAT IF\n*        THE USER MISSPELLS THE OUTPUT DSNAME A MESSAGE WILL BE\n*        ISSUED INSTEAD OF A NEW DATA SET BEING CREATED.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*         LOG OF CHANGES.\n*            09OCT79 - 3330 ADDED. DELETE IKJPUTL ADDED. GBLB ADDED.\n*            09OCT79 - STACK DELETE. TIOTSCAN, VOL COMPARISON.\n*            13MAY80 - ADD ERRPD2 ROUTINE FOR DSNAM2. FIX CLEAR.\n*            23FEB81 - 3330V ADDED. CHECK FOR EXISTING MEMBER IN\n*                      OUTPUT DATA SET WHEN 'SELECT' IS SPECIFIED\n*                      BUT 'REPLACE' IS NOT.  IF OUTPUT PDS LACKS\n*                      DCB ATTRIBUTES (WAS JUST CREATED), OUR OPEN\n*                      MAY FORCE RECFM U, SO SPECIFY REPLACE.\n*                      ADDED OBTAIN-DSCB TO CHECK FOR NO-ATTRIBUTES.\n*                      IUNIT, OUNIT, LOAD, UNLOAD KEYWORDS.\n*            07MAY81 - LIST KEYWORD ADDED TO SUPPRESS LIST=NO.\n*                      SECOND BASE REGISTER ADDED.\n*                      A MEMBER NAME MAY NOW BE SPECIFIED WITH\n*                      THE INPUT DSNAME. IT WILL BE TREATED\n*                      EXACTLY AS IF IT HAD BEEN SPECIFIED IN THE\n*                      'SELECT' OPERAND. IF 'SELECT' MEMBERS ARE\n*                      ALSO SPECIFIED, THE MEMBER IN THE DSNAME IS\n*                      INCLUDED IN FRONT OF THE SPECIFIED MEMBERS.\n*                      IF (AND ONLY IF) THE INPUT DSNAME HAS A\n*                      MEMBER NAME, THE OUTPUT DSNAME MAY HAVE ONE\n*                      ALSO, BUT IT DOESNT HAVE TO UNLESS YOU WANT\n*                      THE MEMBER NAME TO BE DIFFERENT.\n*            28DEC89 - UNDER TSO/E INVOKE IEBCOPY VIA TSO SERVICE RTN.\n*            12JAN90 - ADD ISPF ENQ/RESERVE. ADD 3380 TO DEFAULT UNIT.\n*            16JAN90 - BRING UCB SEARCH ROUTINE UP TO XA LEVEL.\n*                      ADD COMMENTS ABOUT ZAP FOR MSG IEB173I.\n*            26APR90 - CHANGE 'BNE' IN FRONT OF DEQ'S TO 'BE'.\n*                      ADD RETUCB.\n*                      ALLOCATE SYSPRINT TO TERMINAL USING SVC 99\n*                      TO AVOID MSG IEB173I.\n*            25APR91 - CHECK FOR 3390.\n*\n*            THERE ARE 3 WAYS TO COPY ONE MEMBER:\n*               COPYPDS X.DATA Y.DATA SELECT(MEM)\n*               COPYPDS X.DATA(MEM) Y.DATA\n*               COPYPDS X.DATA(MEM) Y.DATA(MEM)\n*\n*            ALLOCATION UNITNAME 'SYSDA' IS HARD-CODED IN THIS\n*            COMMAND FOR SYSUT3 AND SYSUT4 WORKSPACE.  THIS MAY\n*            BE CHANGED TO 'SYSVIO' OR SOME VIO UNITNAME\n*            IF THE COMMAND IS TO RUN AT ANOTHER INSTALLATION.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            THE SYNTAX IS:\n*\n*               COPYPDS 'INDSNAME' 'OUTDSNAME' SELECT(MEMBER,...)\n*\n*            A MEMBER CAN BE GIVEN A NEW NAME WHEN IT IS COPIED\n*            IF SELECT(MEMBER1:NEWNAME1 MEMBER2:NEWNAME2) IS USED.\n*            A COLON SEPARATES THE OLD NAME AND NEW NAME.\n*\n*            OPTIONAL KEYWORDS ARE:\n*               REPLACE  - REPLACE IDENTICALLY NAMED MEMBERS.\n*               SHR      - ALLOCATE THE OUTPUT DATA SET SHARED.\n*               LIST     - DONT TELL IEBCOPY LIST=NO.\n*               LOAD     - INPUT DATA SET IS SEQUENTIAL, CREATED\n*                          BY A PREVIOUS IEBCOPY UNLOAD.\n*               UNLOAD   - OUTPUT DATA SET IS SEQUENTIAL, TO BE\n*                          WRITTEN IN IEBCOPY UNLOADED FORMAT.\n*               IEBCOPY  - USE IEBCOPY INSTEAD OF SPFCOPY.\n*               IVOL(VOLUME) - VOLUME CONTAINING THE IN DATA SET.\n*                          NOT NEEDED IF CATALOGED.\n*               OVOL(VOLUME) - VOLUME CONTAINING THE OUT DATA SET.\n*                          NOT NEEDED IF CATALOGED.\n*               IUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE INPUT\n*                          DATA SET. NOT NEEDED IF CATALOGED.\n*               OUNIT(UNIT) - UNIT NAME FOR ALLOCATING THE OUTPUT\n*                          DATA SET. NOT NEEDED IF CATALOGED.\n*               SYSOUT   - MESSAGES TO A SYSOUT DATA SET.\n*               PRINT    - MESSAGES TO TERMINAL (DEFAULT).\n*               NOPRINT  - MESSAGES TO DUMMY FILE.\n*               OUTFILE(FILENAME) - MESSAGES TO SPECIFIED DDNAME.\n*            MOST OF THE ABOVE ARE NOT DOCUMENTED IN 'HELP'.\n*            THEY ARE NOT NEEDED 99 PERCENT OF THE TIME.\n*\n*            LOAD AND UNLOAD WERE WRITTEN FOR A SPECIAL APPLICATION\n*            WHICH HAD ACCESS TO TAPES, SO THEY WILL PROBABLY HAVE\n*            NO PURPOSE AT MOST OTHER INSTALLATIONS.\n*\n*            WHEN THE IVOL OR OVOL KEYWORDS ARE USED TO INDICATE\n*            TWO IDENTICALLY NAMED DATASETS ON DIFFERENT VOLUMES\n*            ARE BEING USED, UNEXPECTED RESULTS CAN OCCUR UNLESS\n*            BOTH IVOL AND OVOL ARE SPECIFIED.  FOR EXAMPLE, IF\n*            IVOL IS SPECIFIED AND OVOL IS NOT, THE ALLOCATION\n*            OF 'OUTDSNAME' WITH NO VOLUME SPECIFIED MAY PICK UP\n*            THE ALREADY ALLOCATED 'INDSNAME' INSTEAD OF THE\n*            'OUTDSNAME' IN THE CATALOG.\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*            YOU MAY WANT TO MAKE A MODIFIED COPY OF IEBCOPY\n*            THAT ISSUES FEWER MESSAGES. HERE ARE SOME ZAPS THAT\n*            HAVE WORKED IN THE PAST BUT HAVE NOT BEEN KEPT\n*            UP TO DATE WITH MORE RECENT PTFS TO IEBCOPY.\n*\n*            ZEBCOPY IS A COPY OF THE IEBCOPY UTILITY THAT HAS\n*            BEEN ZAPPED TO SUPPRESS THE FOLLOWING MESSAGES:\n*               IEB161I COMPRESS TO BE DONE\n*               IEB152I MEMBER COMPRESSED - WAS ALREADY IN PLACE\n*               IEB167I FOLLOWING MEMBER(S) COPIED\n*               IEB154I MEMBER HAS BEEN SUCCESSFULLY COPIED\n*               IEB153I ALL MEMBER COMPRESSED - ALL WERE ORIGINALLY\n*               IEB144I THERE ARE NNNNN UNUSED TRACKS\n*               IEB149I THERE ARE NNNNN UNUSED DIRECTORY BLOCKS\n*               IEB147I END OF JOB - NN WAS HIGHEST SEVERITY CODE\n*\n*               NAME ZEBCOPY IEBVMS\n*               VER 0082 1233,4780\n*               REP 0084      4700        SUPPRESS HEADING\n*\n*               NAME ZEBCOPY IEBMCM\n*               VER 01BC 9230,4B29\n*               VER 01D0 05EF\n*               REP 01D0 0700             SUPPRESS IEB152I\n*               VER 01DA 9231,4B29\n*               VER 01E6 05EF\n*               REP 01E6 0700             SUPPRESS IEB153I\n*\n*               NAME ZEBCOPY IEBVTM\n*               VER 0402 9104,4B1D,4710\n*               REP 0406           47F0   SUPPRESS IEB167I\n*               VER 0450 9104,4B1D,4710\n*               REP 0454           47F0   SUPPRESS IEB154I\n*\n***********************************************************************\n         EJECT\n***********************************************************************\n*\n*               NAME ZEBCOPY IEBVTM\n*               VER 056C 9228,4B29\n*               VER 0578 05EF\n*               REP 0578 0700             SUPPRESS IEB144I\n*               VER 05BC 922D,4B29\n*               VER 05C8 05EF\n*               REP 05C8 0700             SUPPRESS IEB149I\n*               VER 068A 922B,4B29\n*               VER 0696 05EF\n*               REP 0696 0700             SUPPRESS IEB147I\n*\n*               NAME ZEBCOPY IEBDV1\n*               VER 0B14 9239,4B29\n*               VER 0B24 47F0,CB56\n*               REP 0B24 47F0,8000        SUPPRESS IEB161I\n*\n*\n*            WHEN ALLOCATING SYSPRINT TO THE TERMINAL (WHICH IS\n*            THE DEFAULT) THE SYSTEM WILL USE AN EXISTING ALLOCATION\n*            IF IT FINDS ONE. THIS SOMETIMES CAUSES IEBCOPY TO\n*            TERMINATE WITH THE FOLLOWING MESSAGES:\n*               IEB120I DDNAMEXX VALIDATION ERROR\n*               IEB125I INVALID BLOCKSIZE\n*            THIS IS BECAUSE THE PREVIOUS PROGRAM TO WRITE IN THE\n*            EXISTING ALLOCATION HAD A BLOCKSIZE THAT WAS NOT A\n*            MULTIPLE OF 121.  TO FORCE IEBCOPY TO IGNORE THAT\n*            CONDITION AND USE ITS OWN BLOCKSIZE, ZAP IT AS FOLLOWS:\n*             *LEVEL UZ26557             *LEVEL UZ90091\n*             NAME ZEBCOPY IEBDV1   OR   NAME ZEBCOPY IEBDV1\n*             VER 08C4 9602,4B20         VER 08D4 9602,4B20\n*             REP 08C4 9600,4B20         REP 08D4 9600,4B20\n*\n*            TO SUPPRESS WTO MESSAGE\n*            IEB173I SYSPRINT - INVALID BLOCKSIZE\n*             *LEVEL UZ72727 JDQ1110\n*             NAME ZEBCOPY IEBDV1\n*             VER 097C 9602,4B34\n*             REP 097C 9600,4B34\n*\n*            AFTER ALL THE ABOVE ZAPS ARE APPLIED, THE ONLY TIME\n*            A MESSAGE WILL APPEAR WILL BE WHEN AN ERROR OCCURS.\n*\n***********************************************************************\n         EJECT\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS    0 - SVS,MVT\n         SPACE\nCOPYPDS  START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'COPYPDS '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(R13)\n         LR    R10,R15             FIRST BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)   SECOND BASE REGISTER\n         LR    R2,R1               PARM POINTER\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         LR    R15,R1              AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         LA    R0,0(,R1)           CLEAR HIGH ORDER BYTE\n         SRDL  R0,8                DIVIDE BY 256\n         SRL   R1,24               ISOLATE REMAINDER\n         LTR   R0,R0               IS QUOTIENT ZERO\n         BZ    CLEARR              YES, GO CLEAR REMAINDER\nCLEARQ   XC    0(256,R15),0(R15)   CLEAR 256 BYTES\n         LA    R15,256(,R15)\n         BCT   R0,CLEARQ           DECREMENT QUOTIENT AND BRANCH\nCLEARR   LTR   R1,R1               IS REMAINDER ZERO\n         BZ    CLEARX              YES, BRANCH TO FINISH\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BYPASS EXECUTED INSTR\n         XC    0(0,R15),0(R15)     (EXECUTED)\n         EX    R1,*-6              DO THE ABOVE XC\nCLEARX   EQU   *\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN FORWARD\n         ST    R9,8(,R13)          CHAIN BACK\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         SPACE 1\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP DAPL FOR IKJDAIR                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYDAPL\n         USING DAPL,R15\n         MVC   DAPLUPT(12),MYIOPL  UPT,ECT,ECB\n         MVC   DAPLPSCB,CPPLPSCB\n         LA    R0,MYDAPB\n         ST    R0,DAPLDAPB\n         DROP  R15                 DAPL\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(COMPRPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    X'020C'(R15),X'80'  IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,X'020C'(,R15)   CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15             PARSE SUCCESSFUL?\n         BZ    PARSEOK             YES, BRANCH\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         B     EXIT12\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         MVI   DSNAME+2,C' '\n         MVC   DSNAME+3(43),DSNAME+2\n         MVC   DSNAM2+2(44),DSNAME+2\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS INPUT DSNAME MEMBER                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,DSN\n         XC    MEMDSPDE(20),MEMDSPDE\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    MEMDS1X             NO, BRANCH\n         MVC   MEMDSPDE(8),8(R4)   CREATE FAKE 'SELECT' PDE\n         MVI   MEMDSPDE+16,X'FF'   LAST PDE\n         CLI   MEMKW+1,0           SELECT/EXCLUDE ALSO SPECIFIED\n         BE    MEMDS1X             NO, FAKE PDE IS COMPLETE\n         CLI   MEMKW+1,1           IS IT SELECT\n         BNE   ERRMIX              NO, DSN(MEM) WITH EXCLUDE, ERROR\n         LA    R1,MEM              POINT TO SELECT PDE\n         ST    R1,MEMDSPDE+16      CHAIN IT TO FAKE PDE\nMEMDS1X  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS INPUT DSNAME                             *\n*                                                          *\n************************************************************\n         SPACE\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BZ    ERRNODSN            NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    EXIT12              YES, BRANCH\n         STH   R1,DSNAME           DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAME+2(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    NOPASS              NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    NOPASS              YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nNOPASS   EQU   *\n         SPACE\n         OI    DA08DSP1,X'08'      DISP=SHR\n         AIF   (&MVS).SKIP3        DAIR TO PREFIX DSNAME\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES\n         BO    *+8                 YES, BRANCH\n         OI    DA08CTL,X'20'       NO, TELL DAIR TO PREFIX DSNAME\n.SKIP3   ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        INPUT UNIT AND VOLUME                             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,IVOL\n         TM    6(R4),X'80'         VOLUME SPECIFIED\n         BZ    NOVOL               NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF VOLUME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    NOVOL               YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF VOLUME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08SER(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         SPACE\n         LA    R4,IUNI\n         TM    6(R4),X'80'         UNIT SPECIFIED\n         BZ    IUNIT2              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF UNIT\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    IUNIT2              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF UNIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08UNIT(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         B     IUNITX\n         SPACE\nIUNIT2   LA    R1,DA08SER          POINT TO VOLSER FOR UCB SEARCH\n         BAL   R14,CUU             FIND UCB FOR VOLUME\n         LTR   R15,R15             DASD UCB FOUND?\n         BZ    IUNITX              NO, LEAVE UNIT TO SESSION DEFAULT\n         CLI   19(R15),X'0F'       3390?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3390'\n         CLI   19(R15),X'0E'       3380?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3380'\n         CLI   19(R15),X'0C'       3375?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3375'\n         CLI   19(R15),X'0B'       3350?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3350'\n         CLI   19(R15),X'0D'       3330-1?\n         BNE   *+10                NO\n         MVC   DA08UNIT(6),=C'3330-1'\n         CLI   19(R15),X'09'       3330?\n         BNE   IUNITX              NO\n         MVC   DA08UNIT(4),=C'3330-1'  NOTE. ONLY MOVE 4 BYTES.\n         TM    17(R15),X'08'       3330V (MSS VIRTUAL VOLUME)\n         BZ    *+8\n         MVI   DA08UNIT+4,C'V'     MAKE IT 3330V\nIUNITX   EQU   *\nNOVOL    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE INPUT DATA SET                       *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT1(8),DA08DDN    SAVE DDNAME\n         SPACE\n************************************************************\n*                                                          *\n*        VERIFY THAT DATA SET IS PARTITIONED               *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DSORG1,DA08DSO\n         CLI   LOADKW+1,1          IS 'LOAD' SPECIFIED\n         BE    *+12                YES, DONT CHECK DSORG\n         TM    DA08DSO,X'02'\n         BZ    ERRPDS\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS SECOND OPERAND DSNAME2 MEMBERNAME        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,DS2\n         TM    14(R4),X'80'        MEMBER NAME SPECIFIED?\n         BZ    MEMDS2X             NO, BRANCH\n         TM    MEMDSPDE+6,X'80'    WAS MEMBER SPECIFIED IN INPUT DSN\n         BZ    ERRMIX2             NO, OUTPUT CANNOT BE ONE MEMBER\n         MVC   MEMDSPDE+8(8),8(R4) CREATE FAKE 'SELECT' PDE NEWNAME\n         LH    R1,MEMDSPDE+4       GET LENGTH OF INPUT MEMBER NAME\n         CH    R1,MEMDSPDE+12      ARE LENGTHS EQUAL\n         BNE   MEMDS2X             NO, BRANCH\n         L     R14,MEMDSPDE        POINT TO INPUT MEMBER NAME\n         L     R15,MEMDSPDE+8      POINT TO OUTPUT MEMBER NAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         CLC   0(0,R14),0(R15)     EXECUTED\n         EX    R1,*-6              COMPARE MEMBER NAMES\n         BNE   MEMDS2X             OK IF DIFFERENT\n         XC    MEMDSPDE+8(8),MEMDSPDE+8 ZERO SECOND NAME IF SAME\nMEMDS2X  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         PROCESS SECOND OPERAND DSNAME2                   *\n*                                                          *\n************************************************************\n         SPACE\n         TM    6(R4),X'80'         DSNAME PRESENT\n         BZ    ERRNODSN            NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF DSNAME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    EXIT12              YES, BRANCH\n         STH   R1,DSNAM2           DSN LENGTH IN DAIR BUFFER\n         L     R15,0(,R4)          GET ADDRESS OF DSNAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DSNAM2+2(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE DSNAME TO DAIR BUFFER\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         LA    R0,DSNAM2\n         ST    R0,DA08PDSN\n         SPACE\n         TM    22(R4),X'80'        DSNAME/PASSWORD SPECIFIED?\n         BZ    NOPAS2              NO, BRANCH\n         LH    R1,20(,R4)          YES, GET LENGTH OF PASSWORD\n         LTR   R1,R1               LENGTH ZERO\n         BZ    NOPAS2              YES, BRANCH\n         L     R15,16(,R4)         GET ADDRESS OF PASSWORD\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INST\n         MVC   DA08PSWD(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE PASSWORD TO DAPB\nNOPAS2   EQU   *\n         SPACE\n         CLI   OSHRKW+1,2          SHR OR OSHR\n         BNL   DISP2S              YES, BRANCH\n         OI    DA08DSP1,X'01'      DISP=OLD\n         B     DISP2X\nDISP2S   OI    DA08DSP1,X'08'      DISP=SHR\nDISP2X   EQU   *\n         AIF   (&MVS).SKIP4        DAIR TO PREFIX DSNAME\n         TM    6(R4),X'40'         IS DSNAME IN QUOTES\n         BO    *+8                 YES, BRANCH\n         OI    DA08CTL,X'20'       NO, TELL DAIR TO PREFIX DSNAME\n.SKIP4   ANOP\n         SPACE\n************************************************************\n*                                                          *\n*        OUTPUT UNIT AND VOLUME                            *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,OVOL\n         TM    6(R4),X'80'         VOLUME SPECIFIED\n         BZ    NOVOL2              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF VOLUME\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    NOVOL2              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF VOLUME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08SER(0),0(R15)   (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         LA    R4,OUNI\n         TM    6(R4),X'80'         UNIT SPECIFIED\n         BZ    OUNIT2              NO, BRANCH\n         LH    R1,4(,R4)           GET LENGTH OF UNIT\n         LTR   R1,R1               IS LENGTH ZERO\n         BZ    OUNIT2              YES, BRANCH\n         L     R15,0(,R4)          GET ADDRESS OF UNIT\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED INS\n         MVC   DA08UNIT(0),0(R15)  (EXECUTED)\n         EX    R1,*-6              MOVE VOLUME TO DAIR PARAM\n         B     OUNITX\n         SPACE\nOUNIT2   LA    R1,DA08SER          POINT TO VOLSER FOR UCB SEARCH\n         BAL   R14,CUU             FIND UCB FOR VOLUME\n         LTR   R15,R15             DASD UCB FOUND?\n         BZ    OUNITX              NO, LEAVE UNIT TO SESSION DEFAULT\n         CLI   19(R15),X'0E'       3380?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3380'\n         CLI   19(R15),X'0B'       3350?\n         BNE   *+10                NO\n         MVC   DA08UNIT(4),=C'3350'\n         CLI   19(R15),X'0D'       3330-1?\n         BNE   *+10                NO\n         MVC   DA08UNIT(6),=C'3330-1'\n         CLI   19(R15),X'09'       3330?\n         BNE   OUNITX              NO\n         MVC   DA08UNIT(4),=C'3330-1'  NOTE. ONLY MOVE 4 BYTES.\n         TM    17(R15),X'08'       3330V (MSS VIRTUAL VOLUME)\n         BZ    *+8\n         MVI   DA08UNIT+4,C'V'     MAKE IT 3330V\nOUNITX   EQU   *\nNOVOL2   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE OUTPUT PDS                           *\n*                                                          *\n************************************************************\n         SPACE\n         BAL   R14,CALLDAIR\n         SPACE\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT2(8),DA08DDN    SAVE DDNAME\n         SPACE\n************************************************************\n*                                                          *\n*        VERIFY THAT DATA SET IS PARTITIONED               *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DSORG2,DA08DSO\n         CLI   UNLOKW+1,1          IS 'UNLOAD' SPECIFIED\n         BE    *+12                YES, DONT CHECK DSORG\n         TM    DA08DSO,X'02'\n         BZ    ERRPD2\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK FOR IDENTICAL DSNAMES AND VOLUMES           *\n*                                                          *\n************************************************************\n         SPACE\n         CLC   DSNAME+2(44),DSNAM2+2\n         BNE   OKDIFF\n         LA    R4,DDUT1            POINT TO INPUT DDNAME\n         BAL   R14,TIOTSCAN\n         MVC   DOUBLE(6),28(R1)    HOLD VOL FROM UCB\n         LA    R4,DDUT2            POINT TO OUTPUT DDNAME\n         BAL   R14,TIOTSCAN\n         CLC   DOUBLE(6),28(R1)    IS IT SAME VOLUME\n         BNE   OKDIFF              NO, BRANCH\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nTIOTSCAN L     R15,16              CVTPTR\n         L     R15,0(,R15)         TCB WORDS\n         L     R15,4(,R15)         CURRENT TCB\n         L     R15,12(,R15)        TCBTIOT\n         LA    R15,24(,R15)        TIOENTRY\n         USING TIOENTRY,R15\nTIOTLOOP CLI   TIOENTRY,X'00'      END OF TIOT?\n         BER   R14                 YES - RETURN\n         CLC   TIOEDDNM,0(R4)      DOES DDNAME MATCH?\n         BE    TIOTEXIT            YES - RETURN\n         SR    R1,R1\n         IC    R1,TIOELNGH         GET LENGTH OF ENTRY\n         LA    R15,0(R1,R15)       POINT TO NEXT ENTRY\n         B     TIOTLOOP\nTIOTEXIT L     R1,TIOEFSRT-1       GET UCB ADDRESS\n         BR    R14\n         SPACE\nOKDIFF   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IF OUTPUT IS NEW, WE DONT WANT TO OPEN IT        *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   REPKW+1,2           WAS REPLACE SPECIFIED\n         BE    OBTX                YES, BYPASS OBTAIN\n         CLI   UNLOKW+1,1          WAS UNLOAD SPECIFIED\n         BE    OBTX                YES, BYPASS OBTAIN\n         LA    R4,DDUT2            POINT TO OUTPUT DDNAME\n         BAL   R14,TIOTSCAN\n         TM    18(R1),X'20'        DIRECT ACCESS DEVICE?\n         BZ    OBTX                NO, BYPASS OBTAIN\n         TM    0(R1),X'80'         VIO\n         BO    OBTX                YES, BYPASS OBTAIN\n         MVC   OBTVOL,28(R1)       UCBVOLI\nOBTDSCB  LA    R1,OBTAINW\n         MVC   0(OBTAINL,R1),OBTAIN\n         LA    R0,DSNAM2+2         DSN FOR OBTAIN\n         ST    R0,4(,R1)\n         LA    R0,OBTVOL           VOLUME FOR OBTAIN\n         ST    R0,8(,R1)\n         LA    R0,DSCB             ANSWER AREA FOR OBTAIN\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS OBTAIN SUCCESSFUL\n         BZ    OKDSCB              YES, BRANCH\n         SPACE\n*               OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN\n*               DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT\n*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY\n*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL\n*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW\n*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.\n         SPACE\n*        TM    STATUS,STATL        HAS LOCATE BEEN TRIED ALREADY?\n*        BNZ   ERROBT              YES, GO PRINT OBTAIN ERROR MSG\n*        OI    STATUS,STATL        TRIP THE SWITCH\n*        LA    R1,LOCATEW\n*        MVC   0(LOCATEL,R1),LOCATE\n*        LA    R0,DSNAM2+2         DSNAME FOR LOCATE\n*        ST    R0,4(,R1)\n*        LA    R0,LOCBUF           ANSWER AREA FOR LOCATE\n*        ST    R0,12(,R1)\n*        LOCATE (1)\n*        LTR   15,15               WAS LOCATE SUCCESSFUL?\n*        BZ    OBTDSCB             YES, GO OBTAIN AGAIN\n         SPACE\nERROBT   LA    R1,MSG05            UNABLE TO OBTAIN DSCB\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nOKDSCB   EQU   *\n*        NI    STATUS,255-STATL    TURN OFF LOCATE SWITCH\n         TM    DSCB-44+X'52',X'02' DSORG = PO\n         BZ    FORCEREP            NO, BRANCH\n         TM    DSCB-44+X'54',X'C0' RECFM = U, F, OR V\n         BZ    FORCEREP            NO, MUST BE NEW\n         CLC   DSCB-44+X'65'(2),=H'0' IS BLKSIZE ZERO\n         BNE   *+8                 NO, BRANCH\nFORCEREP MVI   REPKW+1,2           FORCE REP ON\n*                                  SO VERIFY WONT OPEN THE OUTPUT\n*                                  PDS AND THEREBY GIVE IT A\n*                                  BAD RECFM AND BLKSIZE\nOBTX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSIN FILE (DUMMY)                   *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DA08CD(84),MODEL08\n         MVC   DA08UNIT,@UNITVIO\n         MVI   DA08PQTY+3,1        1 TRACK\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDIN,DA08DDN\n         SPACE\n************************************************************\n*                                                          *\n*        WRITE SYSIN CONTROL STATEMENTS                    *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,CTLDCBW\n         MVC   0(CTLDCBL,R6),CTLDCB\n         MVC   DDNAM(8,R6),DDIN\n         LA    R1,OPEN\n         MVI   0(R1),X'80'\n         OPEN  ((R6),OUTPUT),MF=(E,(1))\n         TM    OFLGS(R6),X'10'\n         BNO   EXIT12\n         MVI   CARD,C' '\n         MVC   CARD+1(79),CARD\n         MVC   CARD+1(7),=C'COPY I='\n         LA    R15,CARD+8\n         CLI   REPKW+1,2           REPLACE\n         BE    CTLDD2              YES, BRANCH\n         MVC   0(8,R15),DDUT1\nCTLDD1   CLI   0(R15),C' '\n         BE    CTLDD5\n         LA    R15,1(,R15)\n         B     CTLDD1\nCTLDD2   MVC   0(2,R15),=C'(('\n         MVC   2(8,R15),DDUT1\n         LA    R15,3(,R15)\nCTLDD3   CLI   0(R15),C' '\n         BE    CTLDD4\n         LA    R15,1(,R15)\n         B     CTLDD3\nCTLDD4   MVC   0(4,R15),=C',R))'\n         LA    R15,4(,R15)\nCTLDD5   MVC   0(3,R15),=C',O='\n         MVC   3(8,R15),DDUT2\nCTLDD6   CLI   3(R15),C' '\n         BE    CTLDD7\n         LA    R15,1(,R15)\n         B     CTLDD6\nCTLDD7   CLI   LISTKW+1,2          LIST REQUESTED\n         BNL   *+10                YES, SKIP MVC\n         MVC   3(8,R15),=C',LIST=NO'\n         PUT   (R6),CARD\n         TM    MEMDSPDE+6,X'80'    WAS MEMBER SPECIFIED WITH INPUT DSN\n         BZ    *+8                 NO\n         MVI   MEMKW+1,1           YES, FAKE SELECT\n         CLI   MEMKW+1,0           'SELECT/EXCLUDE' SPECIFIED\n         BE    NOMEM               NEITHER, BRANCH\n         SPACE\n         LA    R4,VERDCBW\n         MVC   0(VERDCBL,R4),VERDCB\n         MVC   DDNAM(8,R4),DDUT2\n         CLI   MEMKW+1,1           SELECT\n         BNE   NOVER               NO, MUST BE EXCLUDE\n         CLI   REPKW+1,2           REP\n         BE    NOVER               YES, NO NEED TO VERIFY\n         TM    DSORG2,X'02'        IS OUTPUT A PDS\n         BZ    NOVER               NO, MUST HAVE SPECIFIED UNLOAD\n         LA    R1,OPEN\n         MVI   0(R1),X'80'\n         OPEN  ((R4),INPUT),MF=(E,(1))\nNOVER    EQU   *\n         LA    R4,MEM              POINT TO SELECT PDE\n         TM    MEMDSPDE+6,X'80'    WAS MEMBER SPECIFIED WITH INPUT DSN\n         BZ    *+8                 NO\n         LA    R4,MEMDSPDE         YES, FAKE SELECT PDE\nCARDLOOP MVC   CARD+1(79),CARD\n         MVC   CARD+1(4),=C'S M='\n         CLI   MEMKW+1,2\n         BNE   *+8\n         MVI   CARD+1,C'E'\n         LA    R15,CARD+5\n         SPACE\nMEMLOOP  EQU   *\n         TM    6(R4),X'80'         MEMBER PRESENT\n         BZ    MEMEND              NO, BRANCH (NEVER HAPPENS)\n         TM    14(R4),X'80'        NEWNAME PRESENT\n         BZ    NONEW1              NO, SKIP NEXT 2 INSTR\n         MVC   0(2,R15),=C'(('     YES\n         LA    R15,2(,R15)         YES\nNONEW1   LH    R1,4(,R4)           GET LENGTH OF MEMBER NAME\n         L     R14,0(,R4)          POINT TO MEMBER NAME\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)     (EXECUTED)\n         EX    R1,*-6\n         MVC   MEMNAME,0(R15)      SAVE NAME PADDED WITH BLANKS\n         MVC   NEWNAME,0(R15)      NEWNAME IS SAME SO FAR\n         TM    14(R4),X'80'        IS MEMBER:NEWNAME SPECIFIED\n         BZ    NONEW2              NO, USE OLD NAME\n         LA    R15,1(R1,R15)       POINT PAST MEMBER NAME\n         MVI   0(R15),C','\n         LA    R15,1(,R15)\n         LH    R1,12(,R4)          GET LENGTH OF NEW NAME\n         L     R14,8(,R4)          POINT TO NEW NAME\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)     (EXECUTED)\n         EX    R1,*-6\n         MVC   NEWNAME,0(R15)      SAVE NAME PADDED WITH BLANKS\n         LA    R15,1(R1,R15)       POINT PAST MEMBER NAME\n         MVC   0(2,R15),=C'))'     APPEND PARENS\nNONEW2   LA    R15,NEWNAME\n         BAL   R14,VERIFY          ISSUE MSG IF IT WONT BE COPIED\n         PUT   (R6),CARD\n         CLI   16(R4),X'FF'\n         L     R4,16(,R4)\n         BNE   CARDLOOP\nMEMEND   EQU   *\n         LA    R4,VERDCBW\n         TM    OFLGS(R4),X'10'     IS OUTPUT PDS OPEN FOR VERIFY\n         BNO   MEMX                NO, BRANCH\n         MVI   CLOSE,X'80'\n         CLOSE ((R4)),MF=(E,CLOSE)\n         B     MEMX\n         SPACE\nVERIFY   LA    R1,VERDCBW          POINT TO DCB FOR OUTPUT PDS\n         TM    OFLGS(R1),X'10'     ARE WE VERIFYING MEMBERS\n         BNO   0(,R14)             NO, RETURN\n         ST    R14,VERREGS         YES, SAVE RETURN ADDRESS\n         MVC   VERBLDL(4),=AL2(1,12) FILL IN BLDL PARAMETER\n         MVC   VERBLDL+4(8),0(R15) PUT MEMBER NAME IN BLDL PARAMETER\n         BLDL  (1),VERBLDL\n         LTR   R15,R15             DOES MEMBER ALREADY EXIST\n         BNZ   VERIFYX             NO, SHOULD COPY OK\n*        ISSUE MESSAGE - MEMBER ALREADY EXISTS - WONT BE COPIED\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK(6),=C'MEMBER'\n         LA    R1,MSGWK+7\n         MVC   0(8,R1),VERBLDL+4\n         CLI   0(R1),C' '\n         BE    *+12\n         LA    R1,1(,R1)\n         B     *-12\n         MVC   1(L'MSG04,R1),MSG04\n         LA    R0,L'MSG04+16\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE\nVERIFYX  L     R14,VERREGS\n         BR    R14\n         SPACE\nNOMEM    CLI   REPKW+1,2           REP\n         BE    MEMX                YES, EVERYTHING WILL BE COPIED\n         LA    R1,MSG09            WARN USER ABOUT IDENTICAL NAMES\n         LA    R0,L'MSG09\n         BAL   R14,PUTMSG\n         LA    R1,MSG09A           WARN USER ABOUT IDENTICAL NAMES\n         LA    R0,L'MSG09A\n         BAL   R14,PUTMSG\nMEMX     MVI   CLOSE,X'80'\n         CLOSE ((R6)),MF=(E,CLOSE)\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE (DUMMY)                *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   PRINTKW+1,0\n         BNE   *+8\n         MVI   PRINTKW+1,1         DEFAULT PRINT\n         SPACE\n         CLI   PRINTKW+1,4         'NOPRINT' SPECIFIED?\n         BNE   PRINTERM            NO\n         MVC   DA08CD(84),MODEL08\n         OI    DA08CTL,DA08DMMY\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA08DDN\n         B     PRINTX\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSPRINT FILE TO THE TERMINAL        *\n*                                                          *\n************************************************************\n         SPACE\nPRINTERM CLI   PRINTKW+1,1         PRINT\n         BNE   PRINTSYS\n*        USING DAPB1C,R5\n*        MVC   DA1CCD(MODEL1CL),MODEL1C\n*        BAL   R14,CALLDAIR\n*        LTR   R15,R15\n*        BNZ   ERRDAIR\n*        MVC   DDPRINT,DA1CDDN\n*        DROP  R5                  DAPB1C\n*\n*         REPLACE DAIR WITH SVC 99\n*\n         MVC   W99RB(20),T99RB\n         MVC   W99RTDDN(14),T99RTDDN\n         MVC   W99TERM(4),T99TERM\n         LA    R15,W99TUPL\n         ST    R15,W99RB+8\n         LA    R14,W99RTDDN\n         ST    R14,0(,R15)\n         LA    R14,W99TERM\n         ST    R14,4(,R15)\n         MVI   4(R15),X'80'\n         LA    R0,W99RB\n         ST    R0,W99RBP\n         OI    W99RBP,X'80'\n         LA    R1,W99RBP\n         SVC   99\n         LTR   R15,R15\n         BNZ   ERRS99\n         MVC   DDPRINT,W99RTDDN+6\n*\n         B     PRINTX\n         SPACE\nPRINTSYS CLI   PRINTKW+1,2         SYSOUT\n         BNE   PRINTOUT\n         USING DAPB30,R5\n         MVC   DA30CD(MODEL30L),MODEL30\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDPRINT,DA30DDN\n         MVI   FREEOPT,1           FREE DDPRINT WITH CLASS\n         DROP  R5                  DAPB30\n         B     PRINTX\n         SPACE\nPRINTOUT CLI   PRINTKW+1,3         OUTFILE\n         BNE   PRINTX              NO, USE SYSPRINT\n         LA    R4,OUT\n         TM    6(R4),X'80'         OUTFILE PRESENT?\n         BZ    PRINTX              NO, USE SYSPRINT\n         LH    R1,4(,R4)           GET LENGTH\n         L     R15,0(,R4)\n         MVC   DDPRINT,=CL8' '\n         BCTR  R1,0\n         B     *+10\n         MVC   DDPRINT(0),0(R15)\n         EX    R1,*-6\n         MVI   FREEOPT,2           DO NOT FREE DDPRINT\n         B     PRINTX\n         SPACE\nPRINTX   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE SYSUT3 AND SYSUT4                        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R5,MYDAPB           POINT TO DAIR PARAMETER BLOCK\n         USING DAPB08,R5\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVC   DA08UNIT,@UNITVIO\n         MVI   DA08PQTY+3,10       10 TRACKS\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT3,DA08DDN\n         SPACE\n         MVC   DA08CD(84),MODEL08  MOVE 08 MODEL DAPB\n         MVC   DA08UNIT,@UNITVIO\n         MVI   DA08PQTY+3,10       10 TRACKS\n         MVI   DA08DSP1,DA08NEW\n         OI    DA08CTL,DA08TRKS\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BNZ   ERRDAIR\n         MVC   DDUT4,DA08DDN\n         DROP  R5                  DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*         ENQ ON OUTPUT PDS                                *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   QNAME,0             INDICATE DEQ NOT REQUIRED\n         LA    R4,DDUT2            POINT TO OUTPUT DDNAME\n         BAL   R14,TIOTSCAN\n         LA    R1,0(,R1)           CLEAR HI ORDER BYTE\n         ST    R1,UCBAD            SAVE UCB ADDRESS\n         CLI   18(R1),X'20'        DASD\n         BNE   ENQX                NO, SERIALIZATION NOT REQUIRED\n         MVC   QNAME,=CL8'SPFEDIT'\n         MVC   DEQ(12),DEQZ\n         SPACE\n************************************************************\n*                                                          *\n*         IF DEVICE NOT SHARED, ISSUE ENQ                  *\n*                                                          *\n************************************************************\n         SPACE\n         TM    17(R1),X'20'        SHARED DASD\n         BO    SHARED              YES, RESERVE REQUIRED\n         MVC   ENQ(12),ENQZ\n         SPACE\n         ENQ   (QNAME,RNAME,E,44,SYSTEMS),RET=NONE,                    +\n               MF=(E,ENQ)\n         SPACE\n         B     ENQX\n         SPACE\n************************************************************\n*                                                          *\n*         IF DEVICE SHARED, ISSUE RESERVE                  *\n*                                                          *\n************************************************************\n         SPACE\nSHARED   MVC   RESERVE(16),RESZ\n         RESERVE (QNAME,RNAME,E,44,SYSTEMS),UCB=UCBAD,RET=NONE,        +\n               MF=(E,RESERVE)\n         SPACE\nENQX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        BUILD IEBCOPY PARAMETERS                          *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,PARMPTR\n         LA    R15,PARMLEN\n         ST    R15,0(,R1)\n         LA    R15,DDNAMES\n         ST    R15,4(,R1)\n         OI    4(R1),X'80'\n         LA    R14,88\n         STH   R14,0(,R15)\n         SPACE\n************************************************************\n*                                                          *\n*         INVOKE IEBCOPY                                   *\n*                                                          *\n************************************************************\n         SPACE\n         L     R14,16             CVTPTR\n         L     R14,X'09C'(,R14)   CVTTVT-CVTMAP\n         CLC   0(4,R14),=C'TSVT'  IF TSO/E SYSTEM\n         BE    TSOE                  GO CALL TSO SERVICE ROUTINE\n         MVC   LINKEP,=CL8'IEBCOPY'\n         CLI   IEBKW+1,1           IEBCOPY REQUESTED\n         BE    *+10                YES\n         MVC   LINKEP(3),=C'SPF'   NO, USE DEFAULT SPFCOPY\n         SPACE\n         LINK  EPLOC=LINKEP,SF=(E,LINKAREA)\n         SPACE\n         LR    R4,R15\n         CLI   QNAME,0             IF DEQ NOT REQUIRED\n         BE    NODEQ1                 SKIP DEQ\n         DEQ   (QNAME,RNAME,44,SYSTEMS),MF=(E,DEQ)\nNODEQ1   LTR   R15,R4\n         BZ    EXIT0\n         B     ERRCOPY\n         SPACE\nTSOE     MVC   TSRPARM1(4),=X'00000002'  NO DUMP, PROGRAM\n         MVC   TSRPARM2(8),=CL8'IEBCOPY'\n         MVC   TSRPARM3(4),=F'8'  LENGTH OF PROGRAM NAME\n         LA    R1,TSRPARMS\n         LA    R0,TSRPARM1\n         ST    R0,0(,R1)\n         LA    R0,TSRPARM2\n         ST    R0,4(,R1)\n         LA    R0,TSRPARM3\n         ST    R0,8(,R1)\n         LA    R0,TSRPARM4\n         ST    R0,12(,R1)\n         LA    R0,TSRPARM5\n         ST    R0,16(,R1)\n         LA    R0,TSRPARM6\n         ST    R0,20(,R1)\n         LA    R0,PARMPTR\n         ST    R0,24(,R1)\n         OI    24(R1),X'80'       7TH AND LAST TSR PARAMETER\n         L     R14,16             CVTPTR\n         L     R14,X'09C'(,R14)   CVTTVT-CVTMAP\n         L     R15,X'010'(,R14)   TSVTASF-TSVT\n         BALR  R14,R15            CALL IKJEFTSR\n         LR    R4,R15\n         CLI   QNAME,0             IF DEQ NOT REQUIRED\n         BE    NODEQ2                 SKIP DEQ\n         DEQ   (QNAME,RNAME,44,SYSTEMS),MF=(E,DEQ)\nNODEQ2   LTR   R15,R4\n         BZ    EXIT0\n         C     R15,=F'4'           IF RC IS IN TSRPARM4\n         BNE   TSRNOT4                THEN\n         L     R15,TSRPARM4           GET RC INTO R15\n         B     ERRCOPY                GO DISPLAY RC FROM IEBCOPY\nTSRNOT4  C     R15,=F'8'\n         BE    TSRATTN\n         C     R15,=F'12'\n         BE    TSRABEND\n         C     R15,=F'20'\n         BE    TSRERROR\n         B     EXIT12\nTSRATTN  LA    R1,=C'ATTENTION'\n         LA    R0,9\n         SVC   93\n         B     EXIT12\n         SPACE\nTSRABEND LA    R1,=C'ABEND'\n         LA    R0,5\n         SVC   93\n         B     EXIT12\n         SPACE\nTSRERROR L     R14,TSRPARM5\n         C     R14,=F'40'\n         BE    TSRNOTF\n         LA    R1,=C'TSR ERROR'\n         LA    R0,9\n         SVC   93\n         B     EXIT12\nTSRNOTF  LA    R1,=C'IEBCOPY NOT FOUND'\n         LA    R0,17\n         SVC   93\n         B     EXIT12\n         SPACE\n************************************************************\n*                                                          *\n*         CALL DYNAMIC ALLOCATION                          *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR LR    R8,R14\n         LA    R1,MYDAPL\n         AIF   (NOT &MVS).SKIP5\n         L     R15,16              CVTPTR\n         TM    X'02DC'(R15),X'80'  IF HI ORDER BIT NOT ON\n         BNO   DAIRLINK               THEN DO LINK, NOT CALL\n         L     R15,X'02DC'(,R15)   CVTDAIR\n         BALR  R14,R15             CALL IKJDAIR\n         B     DAIREXIT            SKIP AROUND LINK\nDAIRLINK EQU   *\n.SKIP5   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIREXIT EQU   *\n         LR    R14,R8\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP6\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         ST    R2,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1                  DFDSECTD\n.SKIP6   AIF   (&MVS).SKIP7\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP7   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CUU - GET UCB ADDRESS FOR A GIVEN VOLUME          *\n*                                                          *\n************************************************************\n         SPACE\nCUU      LR    0,14                SAVE RETURN ADDRESS\n         L     14,16               CVTPTR\n         TM    116(R15),X'80'      MVS/XA                          .XA.\n         BO    UCBXA               YES                             .XA.\n         L     14,X'28'(,14)       CVTILK2\nCUU1     LH    15,0(,14)           LOAD UCB ADDRESS\n         LTR   15,15               VALID ADDRESS?\n         BZ    CUU2                NULL - TRY NEXT\n         BM    CUU3                END OF LIST\n         CLI   18(15),X'20'        DASD?\n         BNE   CUU2                NO - TRY NEXT\n         TM    3(15),X'80'         ONLINE?\n         BZ    CUU2                NO - TRY NEXT\n         CLC   28(6,15),0(1)       DOES VOLUME SERIAL MATCH?\n         BNE   CUU2                NO - TRY NEXT\n         LR    14,0                RESTORE RETURN ADDRESS\n         BR    14                  RETURN\nCUU2     LA    14,2(,14)           INCREMENT UCB POINTER\n         B     CUU1                CONTINUE\nCUU3     SLR   15,15               CLEAR UCB POINTER\n         LR    14,0                RESTORE RETURN ADDRESS\n         BR    14                  RETURN\nUCBXA    ST    R0,RETUCB           SAVE RETURN ADDRESS             .XA.\n         MVC   VOLNAME(6),0(R1)    SAVE VOLUME NAME                .XA.\n         LA    R1,DEVPARMS                                         .XA.\n         LA    R14,DEVWORK                                         .XA.\n         ST    R14,0(,R1)          1ST ARG IS WORK AREA            .XA.\n         XC    0(100,R14),0(R14)   INITIALIZE WORK AREA            .XA.\n         LA    R14,DEVCLASS                                        .XA.\n         ST    R14,4(,R1)          2ND ARG IS CLASS                .XA.\n         MVI   0(R14),X'20'        UCB3DACC (DASD UCB'S)           .XA.\n         LA    R14,DEVUCBAD                                        .XA.\n         ST    R14,8(,R1)          3RD ARG IS WORD FOR UCB ADDRESS .XA.\n         OI    8(R1),X'80'         3RD ARG IS LAST ARG             .XA.\nUCBLOOPX LA    R1,DEVPARMS                                         .XA.\n         L     R14,16              CVTPTR                          .XA.\n         L     R15,X'434'(,R14)    CVTUCBSC V(IOSVSUCB)            .XA.\n         BALR  R14,R15             CALL IOSVSUCB                   .XA.\n         LTR   R15,R15             IF NO MORE UCB'S                .XA.\n         BNZ   UCBLOOPY               GO SET R15=0                 .XA.\n         L     R15,DEVUCBAD                                        .XA.\n         TM    3(R15),X'80'        ONLINE                          .XA.\n         BZ    UCBLOOPX                                            .XA.\n         CLC   28(6,R15),VOLNAME   DOES VOLUME MATCH?              .XA.\n         BNE   UCBLOOPX            NO - BRANCH                     .XA.\n         L     R14,RETUCB          GET RETURN ADDRESS              .XA.\n         BR    R14                 RETURN TO CALLER                .XA.\nUCBLOOPY SLR   R15,R15             INDICATE UCB NOT FOUND          .XA.\n         L     R14,RETUCB          GET RETURN ADDRESS              .XA.\n         BR    R14                 RETURN TO CALLER                .XA.\n         SPACE\n************************************************************\n*                                                          *\n*        ERROR HANDLERS                                    *\n*                                                          *\n************************************************************\n         SPACE\nERRNODSN LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMIX   LA    R1,MSG07\n         LA    R0,L'MSG07\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMIX2  LA    R1,MSG08\n         LA    R0,L'MSG08\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRMEM   LA    R1,MSG02\n         LA    R0,L'MSG02\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRS99   LA    R1,MSGS99\n         LA    R0,L'MSGS99\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nERRDAIR  BAL   R14,DAIRFAIL\n         B     EXIT12\n         SPACE\nERRPDS   LA    R15,MSGWK\n         BAL   R14,DSNOUT\nERRPDSC  MVC   0(30,R15),=CL30' IS NOT A PARTITIONED DATA SET'\n         LA    R15,30(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG\n         B     EXIT12\nERRPD2   LA    R15,MSGWK\n         BAL   R14,DSNOU2\n         B     ERRPDSC\n         SPACE\nERRCOPY  CVD   R15,DOUBLE\n         LA    R15,MSGWK\n         BAL   R14,DSNOUT\n         MVC   0(21,R15),=CL21' COPYPDS RETURN CODE'\n         LA    R15,21(,R15)\n         MVI   0(R15),C' '\n         UNPK  1(3,R15),DOUBLE+6(2)\n         OI    3(R15),X'F0'\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         CLI   1(R15),C'0'\n         BNE   *+14\n         MVC   1(2,R15),2(R15)\n         MVI   3(R15),C' '\n         LA    R15,4(,R15)\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTLINE\n         B     EXIT12\n         SPACE\nDSNOUT   LH    R1,DSNAME\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),DSNAME+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         BR    R14\n         SPACE\nDSNOU2   LH    R1,DSNAM2\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),DSNAM2+2\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,MYREGS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,MYREGS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,MYREGS\n         BR    R14\n         SPACE\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE 1\nEXIT0    SR    R15,R15             RETURN CODE ZERO\nEXIT     LR    R2,R15              HOLD RETURN CODE\n         IKJRLSA MYANS\n         DROP  R3\n         SPACE\n         USING DAPB18,R5\n         CLI   DDUT1,0\n         BE    FFUT1\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT1\n         BAL   R14,CALLDAIR\nFFUT1    EQU   *\n         CLI   DDUT2,0\n         BE    FFUT2\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT2\n         BAL   R14,CALLDAIR\nFFUT2    EQU   *\n         CLI   DDUT4,0\n         BE    FFUT4\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT4\n         BAL   R14,CALLDAIR\nFFUT4    EQU   *\n         CLI   DDUT3,0\n         BE    FFUT3\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDUT3\n         BAL   R14,CALLDAIR\nFFUT3    EQU   *\n         CLI   DDIN,0\n         BE    FFIN\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDIN\n         BAL   R14,CALLDAIR\nFFIN     EQU   *\n         CLI   DDPRINT,0\n         BE    FFPRINT\n         CLI   FREEOPT,2           OUTFILE\n         BE    FFPRINT             YES, LEAVE ALLOCATED\n         MVC   DA18CD(MODEL18L),MODEL18\n         MVC   DA18DDN,DDPRINT\n         CLI   FREEOPT,1           SYSOUT?\n         BNE   *+8                 NO\n         MVI   DA18SCLS,C'A'       YES\n         BAL   R14,CALLDAIR\nFFPRINT  EQU   *\n         DROP  R5                  DAPB18\n         TM    MYPUTLEP,X'80'      WAS PUTLINE LOADED\n         BO    DELPUTLX            NO, BRANCH\n         LA    R0,=CL8'IKJPUTL'    YES, DELETE IT\n         DELETE EPLOC=(0)\nDELPUTLX EQU   *\n         LTR   R2,R2               IS RC ZERO?\n         BZ    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\nEXITX    LR    R15,R2              RESTORE RETURN CODE\n         LR    1,R13               SET UP FREE ADDRESS\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         ST    R15,16(,R13)        STORE RETURN CODE FOR LM\n         L     R0,@SIZE\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(R13)       LOAD RETURN ADDRESS AND RC\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n@UNITVIO DC    CL8'SYSDA '         SYSUT3 AND SYSUT4 UNIT NAME\nMODEL08  DC    AL2(8),XL10'0',CL24' ',XL16'0',CL16' ',XL8'0',CL8' '\nMODEL08L EQU   *-MODEL08\nMODEL18  DC    X'0018',XL10'0',CL18' ',XL2'0',CL8' '\nMODEL18L EQU   *-MODEL18\nMODEL1C  DC    X'001C',XL6'0',CL16' '\nMODEL1CL EQU   *-MODEL1C\nMODEL30  DC    X'0030',XL10'0',CL24' ',XL12'0',CL14' ',XL2'0',CL8' '\nMODEL30L EQU   *-MODEL30\n         SPACE\nMSG01    DC    C'PARSE ERROR'\nMSG02    DC    C'- ERROR - A MEMBER NAME WAS SPECIFIED FOR COPYPDS'\nMSG03    DC    C'OUTPUT DATA SET MAY NOT BE SAME AS INPUT'\nMSG04    DC    C'ALREADY EXISTS - WILL NOT BE COPIED'\nMSG05    DC    C'UNABLE TO OBTAIN DSCB FOR OUTPUT DATA SET'\nMSG06    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG07    DC    C'EXCLUDE NOT PERMITTED WHEN DSNAME(MEMBER) SPECIFIED'\nMSG08    DC    C'DSNAME2(MEMBER) NOT PERMITTED WITHOUT DSNAME1(MEMBER)'\nMSG09    DC    C'WARNING: IDENTICALLY NAMED MEMBERS WILL NOT BE COPIED'\nMSG09A   DC    C'AND THERE WILL BE NO INDICATION IF THAT HAPPENS'\nMSGDAIR  DC    C'UNABLE TO ALLOCATE'\nMSGS99   DC    C'UNABLE TO ALLOCATE TERMINAL'\n         LTORG\n         PRINT NOGEN\nCTLDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=PM,BUFNO=2,                 +\n               RECFM=FB,LRECL=80,BLKSIZE=800\nCTLDCBL  EQU   *-CTLDCB\nVERDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R\nVERDCBL  EQU   *-VERDCB\n         PRINT GEN\nDDNAM    EQU   40\nOFLGS    EQU   48\n         SPACE\nOBTAIN   CAMLST SEARCH,2,3,4\nOBTAINL  EQU   *-OBTAIN\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nENQZ     ENQ   (Q,R,E,44,SYSTEMS),MF=L\nRESZ     RESERVE (Q,R,E,44,SYSTEMS),UCB=U,MF=L\nDEQZ     DEQ   (Q,R,44,SYSTEMS),MF=L\nQ        EQU   0                   DUMMY OPERAND\nR        EQU   0                   DUMMY OPERAND\nU        EQU   0                   DUMMY OPERAND\n         SPACE\nT99RB    DC    0F'0',X'14016000',A(0,0,0,0)\nT99RTDDN DC    X'0055',X'0001',X'0008',CL8' '\nT99TERM  DC    X'0028',X'0000'\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nCOMPRPCL IKJPARM\nDSN      IKJPOSIT DSNAME,USID,PROMPT='DATA SET NAME',                  +\n               HELP='INPUT DATA SET NAME'\nDS2      IKJPOSIT DSNAME,USID,PROMPT='DATA SET NAME',                  +\n               HELP='OUTPUT DATA SET NAME'\nMEMKW    IKJKEYWD\n         IKJNAME 'SELECT',SUBFLD=MEMSF\n         IKJNAME 'EXCLUDE',SUBFLD=MEMSF\nREPKW    IKJKEYWD\n         IKJNAME 'ADD'\n         IKJNAME 'REPLACE'\nIUNIKW   IKJKEYWD\n         IKJNAME 'IUNIT',SUBFLD=IUNISF\nOUNIKW   IKJKEYWD\n         IKJNAME 'OUNIT',SUBFLD=OUNISF\nIVOLKW   IKJKEYWD\n         IKJNAME 'IVOLUME',SUBFLD=IVOLSF\nOVOLKW   IKJKEYWD\n         IKJNAME 'OVOLUME',SUBFLD=OVOLSF\nOSHRKW   IKJKEYWD\n         IKJNAME 'OLD'\n         IKJNAME 'SHR'\n         IKJNAME 'OSHR'\nPRINTKW  IKJKEYWD\n         IKJNAME 'PRINT'\n         IKJNAME 'SYSOUT'\n         IKJNAME 'OUTFILE',SUBFLD=OUTSF\n         IKJNAME 'NOPRINT'\nIEBKW    IKJKEYWD\n         IKJNAME 'IEBCOPY'\nLISTKW   IKJKEYWD\n         IKJNAME 'NOLIST'\n         IKJNAME 'LIST'\n         IKJNAME 'L'\nLOADKW   IKJKEYWD\n         IKJNAME 'LOAD'\nUNLOKW   IKJKEYWD\n         IKJNAME 'UNLOAD'\nMEMSF    IKJSUBF\nMEM      IKJIDENT 'MEMBER NAME',LIST,RANGE,                            +\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +\n               PROMPT='MEMBER NAME'\nIUNISF   IKJSUBF\nIUNI     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +\n               PROMPT='UNIT NAME FOR INPUT PDS'\nOUNISF   IKJSUBF\nOUNI     IKJIDENT 'UNIT',FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,           +\n               PROMPT='UNIT NAME FOR OUTPUT PDS'\nIVOLSF   IKJSUBF\nIVOL     IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    +\n               PROMPT='VOLUME SERIAL FOR INPUT PDS'\nOVOLSF   IKJSUBF\nOVOL     IKJIDENT 'VOLUME',FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,    +\n               PROMPT='VOLUME SERIAL FOR OUTPUT PDS'\nOUTSF    IKJSUBF\nOUT      IKJIDENT 'OUTFILE FILENAME',                                  +\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +\n               PROMPT='OUTFILE FILENAME'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\nTIOT     DSECT\n         DS    CL24                JOBNAME, ETC\nTIOENTRY DS    0C\nTIOELNGH DS    AL1                 LENGTH OF THIS ENTRY\n         DS    XL3\nTIOEDDNM DS    CL8                 DD NAME\nTIOEJFCB DS    CL3                 TTR OF JFCB\n         DS    XL2\nTIOEFSRT DS    AL3                 ADDRESS OF UCB\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nDOUBLE   DS    D\nLINKAREA DS    2F\nLINKEP   DS    0CL8\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nMYREGS   DS    4F                 USED BY PUTLINE ROUTINE\nMYDFREGS DS    F\nMYSTPB   DS    0F                 USED BY STACK DELETE (5F)\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nDSNAME   DS    H,CL44\nDSNAM2   DS    H,CL44\nRNAME    EQU   DSNAM2+2\nMEMNAME  DS    CL8\nNEWNAME  DS    CL8\nMEMDSPDE DS    5F                 FAKE SELECT PDE\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\n*\nFREEOPT  DS    H\n*\nPARMPTR  DS    2F,H\nPARMLEN  DS    H\nPARM     DS    0F,H\nDDNAMES  DS    H,CL32\nDDIN     DS    CL8\nDDPRINT  DS    CL8\n         DS    CL8\nDDUT1    DS    CL8\nDDUT2    DS    CL8\nDDUT3    DS    CL8\nDDUT4    DS    CL8\n*\nMSGWK    DS    CL72\nOPEN     DS    0F\nCLOSE    DS    F\nCTLDCBW  DS    0D,(CTLDCBL)X\nVERDCBW  DS    0D,(VERDCBL)X\nVERREGS  DS    F\nVERBLDL  DS    2H,CL8,CL4\nDSORG1   DS    C\nDSORG2   DS    C\nOBTVOL   DS    CL6\nOBTAINW  DS    4F\nTSRPARMS DS    7F\nTSRPARM1 DS    F\nTSRPARM2 DS    CL8\nTSRPARM3 DS    F\nTSRPARM4 DS    F\nTSRPARM5 DS    F\nTSRPARM6 DS    F\n*\nQNAME    DS    CL8\nUCBAD    DS    F\nENQ      DS    3F\nRESERVE  DS    4F\nDEQ      DS    4F\n*\nDEVPARMS DS    3F\nDEVCLASS DS    C\nVOLNAME  DS    CL6\nDEVUCBAD DS    F\nDEVWORK  DS    25F\nRETUCB   DS    F\n*\nDSCB     DS    CL140\n         DS    0D\nCARD     DS    CL80\nW99RBP   DS    F\nW99RB    DS    5F\nW99TUPL  DS    2F\nW99RTDDN DS    7H\nW99TERM  DS    2H\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE\n         IKJIOPL\n         SPACE\n         IKJPPL\n         SPACE\n         IKJDAPL\n         SPACE\n         IKJDAP08\n         SPACE\n         IKJDAP18\n         SPACE\n         IKJDAP1C\n         SPACE\n         IKJDAP30\n         SPACE\n         AIF   (NOT &MVS).SKIP8\n         IKJEFFDF DFDSECT=YES\n.SKIP8   ANOP\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYPDS$": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'COPYPDS'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(COPYPDS),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(COPYPDS),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYPDS#": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x006\\x006\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 54, "newlines": 54, "modlines": 0, "user": "BG@PRC"}, "text": ")F FUNCTION -\n  THE COPYPDS COMMAND COPIES AN ENTIRE PDS, OR SELECTED MEMBERS,\n  TO ANOTHER PDS.\n\n  THE 'IEBCOPY' UTILITY IS INVOKED.  THE 'SYSPRINT' MESSAGES\n  FROM IEBCOPY ARE WRITTEN TO WHEREVER FILENAME(SYSPRINT) IS\n  ALLOCATED - USUALLY TO THE TERMINAL.\n\n  COPYPDS ALLOWS YOU TO COPY A MEMBER AND ITS ALIAS, WHICH\n  CANNOT BE DONE CORRECTLY WITH THE 'COPY' COMMAND.\n  SPECIFY THE MEMBER AND ALIAS NAME IN THE 'SELECT' KEYWORD.\n)X SYNTAX  -\n         COPYPDS   'DSNAME1'  'DSNAME2'  SELECT('MEMBERS')\n                                         ADD/REPLACE SHR LIST\n  REQUIRED - 'DSNAME1' 'DSNAME2'\n  DEFAULTS - ADD (EXISTING MEMBERS WILL NOT BE REPLACED).\n  ALIAS    - NONE\n  EXAMPLES -\n         HERE ARE 3 WAYS OF COPYING ONE MEMBER:\n             COPYPDS X.DATA Y.DATA SELECT(MEM1)\n             COPYPDS X.DATA(MEM1) Y.DATA\n             COPYPDS X.DATA(MEM1) Y.DATA(MEM1)\n         HERE ARE 2 WAYS OF COPYING ONE MEMBER AND RENAMING IT:\n             COPYPDS X.DATA Y.DATA SELECT(MEM1:MEM2)\n             COPYPDS X.DATA(MEM1) Y.DATA(MEM2)\n         TO COPY 2 MEMBERS (OR ONE MEMBER AND ITS ALIAS):\n             COPYPDS X.DATA Y.DATA SELECT(MEM1 MEMA)\n         TO COPY ALL MEMBERS:\n             COPYPDS X.DATA Y.DATA\n)O OPERANDS -\n  'DSNAME1' -  THE NAME OF THE INPUT PDS.\n             A MEMBER NAME MAY BE SPECIFIED WITH THE DSNAME.\n  'DSNAME2' -  THE NAME OF THE OUTPUT PDS. IT MUST ALREADY EXIST.\n             A NEW DATA SET WILL NOT BE ALLOCATED IF IT DOES NOT EXIST.\n             A MEMBER NAME MAY BE SPECIFIED WITH THE DSNAME (UNLESS\n             ONE WAS NOT SPECIFIED WITH 'DSNAME1').\n))ADD      - ONLY MEMBERS HAVING NAMES DIFFERENT FROM EXISTING MEMBERS\n             IN THE OUTPUT PDS WILL BE COPIED.\n             IF YOU EXPLICITLY SPECIFIED MEMBER NAMES, COPYPDS WILL\n             TELL YOU WHICH ONES WONT BE COPIED.\n             IF YOU DID NOT SPECIFY ANY MEMBER NAMES, A WARNING MESSAGE\n             WILL BE ISSUED THAT THERE WILL BE NO INDICATION OF WHICH\n             MEMBERS WERE NOT COPIED.\n))REPLACE  - ALL MEMBERS WILL BE COPIED, EVEN IF IT MEANS REPLACING\n             AN EXISTING MEMBER IN THE OUTPUT PDS.\n))SELECT('MEMBERS') - RESTRICTS THE COPY TO SPECIFIC MEMBERS.\n             MEMBERS CAN BE GIVEN NEW NAMES AS THEY ARE COPIED,\n             BY SPECIFYING SELECT(MEMBER1:NEWNAME1 MEMBER2:NEWNAME2).\n             THE COLON AND NEWNAME SHOULD BE OMITTED FOR ANY MEMBERS\n             THAT ARE TO HAVE THEIR OLD NAME.\n))SHR      - THE OUTPUT PDS WILL BE ALLOCATED SHR INSTEAD OF EXCLUSIVE.\n             YOU RISK UNPREDICTABLE RESULTS IF ANOTHER JOB OR USER\n             IS WRITING IN THE PDS AT THE SAME TIME.\n))LIST     - 'LIST=NO' WILL NOT BE PASSED TO IEBCOPY.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTC01": {"ttr": 2572, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "BG@PRC"}, "text": "ISREDIT MACRO (P1 P2 P3) NOPROCESS\nISPEXEC CONTROL ERRORS RETURN\nISREDIT !CUT &P1 &P2 &P3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTC02": {"ttr": 2574, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x03\\x00\\x03\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 3, "newlines": 3, "modlines": 0, "user": "BG@PRC"}, "text": "ISREDIT MACRO (P1 P2 P3) NOPROCESS\nISPEXEC CONTROL ERRORS RETURN\nISREDIT !PASTE &P1 &P2 &P3\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTDOC": {"ttr": 2576, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00C\\x00C\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 67, "newlines": 67, "modlines": 0, "user": "BG@PRC"}, "text": "A BRIEF DESCRIPTION OF THE CUT AND PASTE EDIT MACROS.     APRIL 25 1991\n\nTHESE CUT AND PASTE EDIT MACROS WERE WRITTEN BY BILL GODFREY,\nOF PRC INC. (FORMERLY PLANNING RESEARCH CORPORATION), MCLEAN, VIRGINIA.\n\nTHE AUTHOR HAD SEEN SOME MACROS WRITTEN AS CLISTS THAT PERFORM A\nSIMILAR FUNCTION, BUT THE CLISTS USED THE ISPF PROFILE DATA SET AS A\nHOLDING AREA FOR THE CUT DATA, AND THE AUTHOR FELT THERE HAD TO BE A\nBETTER WAY.  THE CLISTS ARE IMPRESSIVE, AND THERE PROBABLY IS NO BETTER\nWAY TO WRITE THEM IF THEY HAVE TO BE CLISTS.  I NEEDED CUT AND PASTE,\nAND IT WAS TIME I LEARNED HOW TO WRITE AN EDIT MACRO, SO I WROTE THIS\nVERSION OF CUT AND PASTE, NOT AS CLISTS BUT IN ASSEMBLER.  THE CLISTS\nWERE A GREAT HELP AS AN INITIAL MODEL.\n\nCUT AND PASTE WERE WRITTEN TO LOOK AS MUCH AS POSSIBLE LIKE THE EDIT\n'COPY' COMMAND, SO IF YOU KNOW 'COPY' YOU KNOW CUT AND PASTE.\n\nTHE USER TYPES \"CUT\" ON THE COMMAND LINE AND THEN USES THE \"C\"\nLINE COMMAND THE SAME WAY IT IS USED BY THE \"COPY\" COMMAND (THAT IS,\nC ON ONE LINE OR CC ON TWO LINES), OR THE USER TYPES \"CC\" ON ONE\nLINE, PAGES UP OR DOWN TO ANOTHER LINE, TYPES \"CC\" THERE, AND THEN\nTYPES \"CUT\" ON THE COMMAND LINE.\n\nTHE DATA WILL BE COPIED TO A \"TEMPORARY LOCATION\" (ACTUALLY A VIO\nDATA SET).\n\nTHE USER CAN PASTE IT BACK TO THE SAME DATA SET BEING EDITED, BUT\nTHAT'S NOTHING NEW - YOU DON'T NEED CUT AND PASTE FOR THAT (ALTHOUGH\nTHE ABILITY TO REPEATEDLY PASTE THE SAME THING IS NEW).\n\nTHE USER CAN ALSO PASTE IT BACK TO A DIFFERENT DATA SET.  FIRST HE OR\nSHE MUST GET INTO EDIT ON THE DATA SET INTO WHICH IT IS TO BE PASTED.\nTHE USER MAY ALREADY BE THERE ON A SPLIT SCREEN, OR MAY ALREADY BE\nTHERE IN A NESTED EDIT, OR MAY WANT TO END THE CURRENT EDIT AND START\nANOTHER - IT MAKES NO DIFFERENCE.  ONCE THE USER IS IN EDIT ON THE\nDESIRED DATA SET, HE OR SHE JUST HAS TO TYPE \"PASTE\" ON THE COMMAND\nLINE AND AND \"A\" (AFTER) OR \"B\" (BEFORE) LINE COMMAND ON THE DESIRED\nLINE, AND THE DATA THAT WAS CUT TO THE \"TEMPORARY LOCATION\" WILL BE\nCOPIED INTO PLACE.\n\nTHAT IS HOW CUT AND PASTE ARE MOST OFTEN USED, BUT THERE IS MORE.\n\nTHERE ARE IN FACT NINE \"TEMPORARY LOCATIONS\" IN WHICH TO HOLD CUT\nLINES, SO YOU CAN DO SEVERAL CUTS FROM ONE EDIT AND THEN SEVERAL\nPASTES LATER ON. (CUT, CUT 2, CUT 3...CUT 9) (PASTE, PASTE 2...)\n\nUSING THE \"M\" LINE COMMAND INSTEAD OF \"C\" WILL CAUSE THE LINES TO\nBE DELETED AS THEY ARE CUT.\n\nINSTEAD OF LINE COMMANDS YOU CAN USE LABELS, JUST LIKE THE \"COPY\"\nCOMMAND.\n\nTHE DETAILS ARE ON THE HELP SCREEN, WHICH IS DISPLAYED BY ENTERING\n\"CUT ?\" AND \"PASTE ?\" ON THE COMMAND LINE.  (SEE MEMBER CUTH01).\n\nTHE \"TEMPORARY LOCATIONS\" ARE LOST WHEN YOU LOGOFF, AND ARE PROBABLY\nDELETED BY \"FREEALL\" COMMANDS TOO, SO BE CAREFUL WITH \"FREEALL\".\n\nTHERE IS A LIMIT OF 1000 LINES PER \"TEMPORARY LOCATION\", BUT IT IS JUST\nAN ARBITRARY NUMBER CHOSEN TO NOT WASTE LARGE AMOUNTS OF VIO SPACE.  IF\nYOU CHANGE THE LIMIT BY MODIFYING THE SOURCE CODE, CHANGE THE SPACE\nALLOCATIONS FOR VIO IN THE SAME PROGRAM.\n\nONE THING THAT A CLIST VERSION OF CUT-AND-PASTE DOES THAT THIS VERSION\nDOES NOT DO IS RECOGNIZE BOUNDS WITHIN A LINE.  THE AUTHOR HAS NOT PUT\nTHIS FEATURE IN MAINLY BECAUSE NEITHER HE HIMSELF NOR THE CLIENT HE\nSERVES HAS A GREAT NEED FOR IT, AND THERE IS PLENTY OF OTHER WORK TO DO.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTD01": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00K\\x00K\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 75, "newlines": 75, "modlines": 0, "user": "BG@PRC"}, "text": "HOW TO INSTALL THE CUT AND PASTE EDIT MACROS FOR YOUR USERID ONLY,\nJUST TO TEST IT ONCE.\n\nIT IS ASSUMED YOU CAN LOOK AT A JOB THAT LINKS AND COPIES SOFTWARE\nINTO DEFAULT LIBRARIES AND MODIFY THAT JOB TO LINK AND COPY INTO YOUR\nOWN USERID-OWNED LIBRARIES.\n\nIT IS ASSUMED YOU KNOW ENOUGH ABOUT TSO TO TEMPORARILY CHANGE THE\nALLOCATIONS OF PANEL LIBRARIES (DDNAME ISPPLIB), CLIST LIBRARIES\n(DDNAME SYSPROC) AND ISPF LOAD LIBRARIES (ISPLLIB) FOR YOUR SESSION\nWITHOUT AFFECTING OTHER SESSIONS.\n\nON SOME SYSTEMS THE ALLOCATIONS ARE DONE IN LOGON PROCS, AND ON OTHERS\nTHEY ARE DONE BY A CLIST THAT IS EXECUTED TO ENTER ISPF. YOU MAY HAVE\nTO WRITE A CLIST THAT UNDOES THESE ALLOCATIONS AND RE-DOES THEM\nWITH AN ADDITONAL LIBRARY.\n\n1) CREATE A LOAD LIBRARY NAMED CUT.LOAD, ONE TRACK, ONE DIR BLOCK,\n   RECFM=U BLKSIZE=6144.  FULL NAME = YOURUSERID.CUT.LOAD\n\n2) CREATE A CLIST LIBRARY NAMED CUT.CLIST, ONE TRACK, ONE DIR BLOCK,\n   RECFM=FB LRECL=80 BLKSIZE=3120. FULL NAME = YOURUSERID.CUT.CLIST\n\n\n3) CREATE A PANEL LIBRARY NAMED CUT.PANELS, ONE TRACK, ONE DIR BLOCK,\n   RECFM=FB LRECL=80 BLKSIZE=3120 OR WHATEVER YOUR PANEL LIBRARIES ARE.\n   FULL NAME = YOURUSERID.CUT.PANELS\n\nSTEPS 4, 5, 6, 7, AND 8 CAN BE DONE BY SUBMITTING THE JOBS IN 'CUTJ01'\nBUT YOU SHOULD READ THE REST OF THESE INSTRUCTIONS BEFORE SUBMITTING\nTHE JOB.  THE JOB WILL HAVE TO BE TAILORED TO YOUR INSTALLATION.\n\n4) ASSEMBLE 'CUTL01' AND LINK IT INTO YOURUSERID.CUT.LOAD\n   GIVING IT A MEMBER NAME OF 'CUT'\n\n5) ASSEMBLE 'CUTL02' AND LINK IT INTO YOURUSERID.CUT.LOAD\n   GIVING IT A MEMBER NAME OF 'PASTE'\n\n6) COPY 'CUTH01' AND 'CUTH02' INTO YOURUSERID.CUT.PANELS\n\n7) COPY 'CUTC01' INTO YOURUSERID.CUT.CLIST RENAMING IT TO 'CUT'.\n\n8) COPY 'CUTC02' INTO YOURUSERID.CUT.CLIST RENAMING IT TO 'PASTE'.\n\n9) GET OUT OF ISPF.  IF YOU ALWAYS USE A CLIST TO GET INTO ISPF,\n   GO TO STEP 14.\n\n10) STILL OUT OF ISPF, ADD CUT.PANELS TO YOUR CONCATENATION\n   OF PANEL LIBRARIES (DDNAME ISPPLIB). ADD IT TO THE END.\n\n11) STILL OUT OF ISPF, ADD CUT.CLIST TO YOUR CONCATENATION OF\n   CLIST LIBRARIES (DDNAME SYSPROC). PUT IT FIRST IN THE LIST.\n   IF SYSPROC IS NOT ALLOCATED AT ALL, ALLOCATE IT TO CUT.CLIST.\n\n12) STILL OUT OF ISPF, ADD CUT.LOAD TO YOUR CONCATENATION\n   OF LOAD LIBRARIES (DDNAME ISPLLIB). PUT IT FIRST IN THE LIST.\n   IF ISPLLIB IS NOT ALLOCATED AT ALL, ALLOCATE IT TO CUT.LOAD.\n\n13) GO BACK INTO ISPF USING A METHOD THAT DOES NOT REQUIRE A CLIST.\n    EDIT SOMETHING AND ENTER \"CUT ?\" ON THE COMMAND LINE. INSTALL DONE.\n    YOU WILL HAVE TO REPEAT STEPS 10, 11, AND 12 EACH TIME YOU LOGON,\n    SO WRITE A CLIST THAT PERFORMS THAT FUNCTION IF YOU WISH TO GO ON\n    USING THIS VERSION OF CUT AND PASTE.\n    END OF INSTALL.\n\n14) HERE FROM STEP 9. SKIP THIS STEP IF YOU DID STEP 13.\n   IF YOU ALWAYS USE A CLIST TO GET INTO ISPF, COPY THAT CLIST TO\n   CUT.CLIST AS MEMBER 'ISPF', EDIT IT SO THAT ANY ALLOCATIONS\n   OF ISPPLIB WILL INCLUDE CUT.PANELS,\n   OF SYSPROC WILL INCLUDE CUT.CLIST,\n   OF ISPLLIB WILL INCLUDE CUT.LOAD (ADD ONE IF THERE IS NONE)\n   AND USE THAT CLIST TO GET INTO ISPF BY ENTERING \"%ISPF\" AND ANY\n   OPERANDS YOUR OTHER CLIST MAY REQUIRE.\n    EDIT SOMETHING AND ENTER \"CUT ?\" ON THE COMMAND LINE.\n    END OF INSTALL.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTD02": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00/\\x00/\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 47, "newlines": 47, "modlines": 0, "user": "BG@PRC"}, "text": "HOW TO INSTALL THE CUT AND PASTE EDIT MACROS SYSTEM-WIDE\n\n1) MAKE SURE THERE ARE NOT ALREADY SOME MEMBERS NAMED 'CUT' OR 'PASTE'\n   IN THE SYSTEM LINKLIST LIBRARIES (OR LPA, OR TSO SESSION STEPLIBS).\n   IF THERE ARE, YOU WILL EITHER HAVE TO RENAME THE ONES YOU HAVE OR\n   THE ONES YOU ARE ABOUT TO INSTALL.\n\n2) MAKE SURE THERE ARE NOT ALREADY SOME MEMBERS NAMED 'CUT' OR 'PASTE'\n   IN THE TSO SYSPROC CLIST LIBRARIES.\n   IF THERE ARE, YOU WILL EITHER HAVE TO RENAME THE ONES YOU HAVE OR\n   THE ONES YOU ARE ABOUT TO INSTALL.\n\n3) MAKE SURE THERE ARE NOT ALREADY SOME MEMBERS NAMED 'CUTH01' OR\n   'CUTH02' IN YOUR TSO ISPF PANEL LIBRARIES.\n   IF THERE ARE, YOU WILL EITHER HAVE TO RENAME THE ONES YOU HAVE OR\n   THE ONES YOU ARE ABOUT TO INSTALL.  IF YOU RENAME THE ONES YOU ARE\n   ABOUT TO INSTALL, YOU WILL HAVE TO CHANGE THE REFERENCES TO NAMES\n   'CUTH01' AND 'CUTH02' IN THE SOURCE CODE BEFORE ASSEMBLING IT.\n\nSTEPS 4, 5, 6, 8, AND 9 CAN BE DONE BY SUBMITTING THE JOBS IN 'CUTJ02'\nBUT YOU SHOULD READ THE REST OF THESE INSTRUCTIONS BEFORE SUBMITTING\nTHE JOB.  THE JOB WILL HAVE TO BE TAILORED TO YOUR INSTALLATION.\n\n4) ASSEMBLE 'CUTL01' AND LINK IT INTO A SYSTEM LINKLIST LIBRARY OR TSO\n   STEPLIB OR TSO ISPLLIB, GIVING IT A MEMBER NAME OF 'CUT' (OR\n   SOMETHING LIKE 'XCUT' IF NECESSARY TO AVOID A CONFLICT).\n\n5) ASSEMBLE 'CUTL02' AND LINK IT INTO A SYSTEM LINKLIST LIBRARY OR TSO\n   STEPLIB OR TSO ISPLLIB, GIVING IT A MEMBER NAME OF 'PASTE' (OR\n   SOMETHING LIKE 'XPASTE' IF NECESSARY TO AVOID A CONFLICT).\n\n6) COPY 'CUTH01' AND 'CUTH02' INTO ONE OF YOUR ISPF PANEL LIBRARIES,\n   RENAMING THEM IF NECESSARY.\n\n7) AT THIS POINT IT IS POSSIBLE TO TEST THE COMMANDS BY ENTERING\n     !CUT ?   OR  !PASTE ?   ON THE COMMAND LINE IN ISPF/PDF EDIT.\n   ( !XCUT ?   OR  !XPASTE ?    IF YOU CHANGED THE NAMES IN STEPS 4&5.)\n   YOU ONLY NEED THE EXCLAMATION POINT THE FIRST TIME YOU USE THE\n   COMMAND AFTER ENTERING ISPF.  FOR THE REST OF THE SESSION YOU CAN\n   OMIT IT.  THE NEXT STEPS INSTALL CLISTS THAT ELIMINATE THE NEED\n   TO USE THE EXCLAMATION POINT THE FIRST TIME.\n\n8) COPY 'CUTC01' TO ONE OF YOUT SYSPROC CLIST LIBRARIES, RENAMING IT\n   TO 'CUT' OR 'XCUT' OR WHATEVER NAME YOU USED IN STEP 4 LINKEDIT.\n\n9) COPY 'CUTC02' TO ONE OF YOUT SYSPROC CLIST LIBRARIES, RENAMING IT\n   TO 'PASTE' OR 'XPASTE' OR WHATEVER NAME YOU USED IN STEP 5 LINKEDIT.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTH01": {"ttr": 2822, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "BG@PRC"}, "text": "%TUTORIAL -------------------- EDIT - 'CUT' COMMAND ------------------- TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+  The%CUT+command is used to copy one or more lines of the data being edited\n   to a temporary location from which it can later be retrieved using the\n  %PASTE+command.  The temporary locations are erased when you logoff.\n\n   To specify the lines to be put into the temporary location, use line\n   commands%C+or%CC+to copy line(s), or%M+or%MM+to move lines, or use%labels+.\n\n   If you specify a%level number+as part of the command, you can use multiple\n   temporary locations, each of which you can later refer to with the%PASTE+\n   command.  Level numbers are '1' thru '9'.  If you do not specify a level\n   number, level '1' is used.\n\n   A maximum of 1000 lines can be copied to each temporary location.\n\n        %COMMAND ===> cut                   +cuts the lines specified by\n                                            +line commands to level 1.\n\n        %COMMAND ===> cut 2 .zf .zl         +cuts all lines to level 2\n\n)PROC\n   &ZUP = ISR2M600\n   &ZCONT = ISR20000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CUTH02": {"ttr": 2824, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x19\\x00\\x19\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 25, "newlines": 25, "modlines": 0, "user": "BG@PRC"}, "text": "%TUTORIAL ------------------ EDIT - 'PASTE' COMMAND ------------------- TUTORIAL\n%COMMAND ===>_ZCMD                                                             +\n+\n+  The%PASTE+command is used to copy one or more lines of data from a\n   temporary location created by the%CUT+command to the data being edited.\n\n   To specify where the data is to be copied, use the%A+(after) or%B+(before)\n   line commands or specify%AFTER+or%BEFORE+as a parameter, followed by a\n  %label+name.  AFTER and BEFORE can be abbreviated %AFT+and%BEF+.\n\n   If you specify a level number as part of the command, you can refer to\n   any one of multiple temporary locations that may have been created by the\n  %CUT+command.  Level numbers are '1' thru '9'.  The default level is '1'.\n\n        %COMMAND ===> paste                 +copies the lines from temporary\n                                            +location level '1' to a location\n                                            +specified by a line command.\n\n        %COMMAND ===> paste 2 before .zf    +copies the lines from temporary\n                                            +location level '2' to the line\n                                            +before the first line.\n)PROC\n   &ZUP = ISR2M600\n   &ZCONT = ISR20000\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CUTJ01": {"ttr": 2826, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00)\\x00)\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 41, "newlines": 41, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'CUT OR XCUT'\n//* THESE JOBS ARE FOR A SINGLE-USER INSTALL OF CUT AND PASTE.\n//* BEFORE RUNNING THESE JOBS, PLEASE READ THE INSTALLATION\n//* INSTRUCTIONS.  YOU HAVE TO CHANGE SOME NAMES IN THIS JOB.\n//* YOU MUST AT LEAST CHANGE $USERID TO YOUR USERID.\n//* THIS JOB ASSEMBLES CUTL01 AND LINKS IT AS 'CUT'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.CUT.SOURCE(CUTL01),DISP=SHR\n//LKED.SYSLMOD DD DSN=$USERID.CUT.LOAD(CUT),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'PASTE OR XPASTE'\n//* THIS JOB ASSEMBLES CUTL02 AND LINKS IT AS 'PASTE'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.CUT.SOURCE(CUTL02),DISP=SHR\n//LKED.SYSLMOD DD DSN=$USERID.CUT.LOAD(PASTE),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'CUT/PASTE PANELS'\n//* THIS JOB COPIES PANELS CUTH01 AND CUTH02 TO YOUR PANEL LIBRARY\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.CUT.SOURCE,DISP=SHR\n//ISPPLIB  DD  DSN=$USERID.CUT.PANELS,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=ISPPLIB\n S M=CUTH01\n S M=CUTH02\n//$USERID1 JOB (ACCT),'CUT/PASTE CLISTS'\n//* THIS JOB COPIES CLISTS CUTC01 AND CUTC02 TO YOUR CLIST LIBRARY\n//* WITH NEW NAMES CUT AND PASTE\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.CUT.SOURCE,DISP=SHR\n//CLIST    DD  DSN=$USERID.CUT.CLIST,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=CLIST\n S M=((CUTC01,CUT))\n S M=((CUTC02,PASTE))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTJ02": {"ttr": 2828, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00(\\x00(\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 40, "newlines": 40, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'CUT OR XCUT'\n//* THESE JOBS ARE FOR A SYSTEM-WIDE INSTALL OF CUT AND PASTE.\n//* BEFORE RUNNING THESE JOBS, PLEASE READ THE INSTALLATION\n//* INSTRUCTIONS.  YOU MAY WANT TO CHANGE SOME NAMES IN THIS JOB.\n//* THIS JOB ASSEMBLES CUTL01 AND LINKS IT AS 'CUT'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(CUTL01),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(CUT),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'PASTE OR XPASTE'\n//* THIS JOB ASSEMBLES CUTL02 AND LINKS IT AS 'PASTE'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(CUTL02),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(PASTE),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n//$USERID1 JOB (ACCT),'CUT/PASTE PANELS'\n//* THIS JOB COPIES PANELS CUTH01 AND CUTH02 TO YOUR PANEL LIBRARY\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.SOURCE,DISP=SHR\n//ISPPLIB  DD  DSN=SYS2.ISPPLIB,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=ISPPLIB\n S M=CUTH01\n S M=CUTH02\n//$USERID1 JOB (ACCT),'CUT/PASTE CLISTS'\n//* THIS JOB COPIES CLISTS CUTC01 AND CUTC02 TO YOUR CLIST LIBRARY\n//* WITH NEW NAMES CUT AND PASTE\n//COPY    EXEC PGM=IEBCOPY\n//SYSPRINT DD  SYSOUT=*\n//SOURCE   DD  DSN=$USERID.SOURCE,DISP=SHR\n//CLIST    DD  DSN=SYS2.CLIST,DISP=SHR\n//SYSIN    DD  *\n COPY I=SOURCE,O=CLIST\n S M=((CUTC01,CUT))\n S M=((CUTC02,PASTE))\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CUTL01": {"ttr": 2830, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x04\\x18\\x04\\x18\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 1048, "newlines": 1048, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   C U T   '\n***********************************************************************\n*                                                                     *\n*        'CUT' - ISPF EDIT MACRO                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE-WRITTEN: APRIL 25 1991.\n* DATE-UPDATED: OCTOBER 18 1990.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* ISPF PANELS: CUTH01.\n* SITE-DEPENDENCIES:\n*  UNIT NAME 'VIO' MAY NEED TO BE CHANGED.\n*  IF MAXLINES IS CHANGED, BE SURE N99PRIME SPECIFIES ENOUGH TRACKS\n*  TO HOLD THAT MANY 256-BYTE RECORDS, AND CHANGE MSG04B.\n* DESCRIPTION.\n*  THIS ISPF EDIT MACRO COPIES ONE OR MORE LINES TO A TEMPORARY FILE\n*  FOR LATER USE BY THE 'PASTE' MACRO.\n*\n*  UP TO 9 DIFFERENT 'CUT' BUFFERS CAN CO-EXIST.  THE DEFAULT BUFFER\n*  (1) IS USED IF NO PARAMETER IS SPECIFIED.  THE USER CAN SPECIFY ANY\n*  OF THE 9 BUFFER LEVELS (1 THRU 9) AS THE PARAMETER.\n*\n*  EACH BUFFER IS ACTUALLY A TEMPORARY DATA SET NAMED '&CUTX' WHERE\n*  X HAS A VALUE THAT CAN RANGE FROM 1 THRU 9.\n*\n*  THE USER HAS TWO WAYS TO SPECIFY THE LINES TO BE CUT.\n*  THEY CAN BE SPECIFIED WITH LINE COMMANDS (C, CC, M, MM)\n*  OR WITH LABELS.  FOR EXAMPLE, CUT 2 .ZF .ZL\n*\n*  THE ONLY PARAMETERS ARE THE BUFFER LEVEL (OPTIONAL) AND ONE OR\n*  TWO LABELS.  IF THE BUFFER LEVEL IS SPECIFIED IT MUST BE THE FIRST\n*  PARAMETER.\n*\n*  MANY 'CUT' CLISTS STORE THE DATA LINES IN THE PROFILE POOL, WHICH\n*  WHICH COULD ADD SEVERAL TRACKS TO THE SIZE OF THE USER'S ISPF\n*  PROFILE DATA SET.  THIS COMMAND DOESN'T DO IT THAT WAY.\n*\n*  RATHER THAN STORE THE DATA LINES IN VARIABLES IN THE PROFILE POOL,\n*  WE STORE THEM IN A TEMPORARY DATA SET ALLOCATED TO VIO.\n*\n*  NOTE THAT CUTP1 THRU CUTP4 ARE 80 BYTES LONG SO WE CAN HANDLE\n*  ALMOST ANYTHING THAT THE USER ENTERS.  CUTP4 WILL CONTAIN\n*  ANY REMAINING PARAMETERS AFTER THE OTHERS, AND IS ONLY USED TO\n*  CHECK THAT NO 4TH OPERAND IS ENTERED.\n*\n*  HAD TO USE 'CER' TO RETAIN CONTROL DURING 'PROCESS' SO WE COULD\n*  ISSUE SETMSG FOR &ZERRMSG SO THAT 'BLOCK COMMAND INCOMPLETE' AND\n*  'COMMAND CONFLICT' WOULD BE DISPLAYED WHEN APPROPRIATE.\n*\n*  ONE BIG DISADVANTAGE OF EDIT MACROS THAT ARE NOT CLISTS IS THAT\n*  EVERY TIME YOU GO INTO EDIT, THEY ARE NOT RECOGNIZED UNTIL:\n*      1) THEY ARE \"DEFINED\" BY AN EDIT MACRO COMMAND IN A CLIST OR IN\n*         ANOTHER PROGRAM, OR\n*      2) THEY ARE ENTERED PRECEDED BY AN EXCLAMATION POINT.\n*  SO IT IS USEFUL TO HAVE A CLIST LIKE THE FOLLOWING IN A MEMBER\n*  OF THE SYSPROC CLIST LIBRARY:\n*      ISREDIT MACRO\n*      ISREDIT DEFINE CUT MACRO PGM\n*      ISREDIT DEFINE PASTE MACRO PGM\n*      ISREDIT DEFINE PAS ALIAS PASTE\n*      SET ZEDSMSG = &STR(CUT/PASTE INSTALLED)\n*      SET ZEDLMSG = &STR(FOR HELP, ENTER \"CUT ?\")\n*      ISPEXEC SETMSG MSG(ISRZ000)\n*  THEN YOU JUST TYPE THE NAME OF THE CLIST ('CUTMAC' FOR EXAMPLE)\n*  ON THE COMMAND LINE, AND THE COMMANDS ARE AVAILABLE.  IF YOU WANT\n*  THE 'CUTMAC' CLIST TO AUTOMATICALLY EXECUTE EACH TIME YOU GO\n*  INTO EDIT, SET 'IMACRO CUTMAC' IN EACH EDIT PROFILE.\n*\n*  AN EVEN BETTER ALTERNATIVE IS A CLIST IN SYSPROC NAMED 'CUT'\n*  WHICH LOOKS LIKE THIS:\n*      ISREDIT MACRO (P1 P2 P3) NOPROCESS\n*      ISPEXEC CONTROL ERRORS RETURN\n*      ISREDIT !CUT &P1 &P2 &P3\n*  THE CLIST GETS INVOKED THE FIRST TIME YOU USE THE CUT COMMAND\n*  AND FROM THEN ON YOU GO STRAIGHT TO THE PROGRAM.\n*  THERE SHOULD ALSO BE A CLIST IN SYSPROC NAMED 'PASTE':\n*      ISREDIT MACRO (P1 P2 P3) NOPROCESS\n*      ISPEXEC CONTROL ERRORS RETURN\n*      ISREDIT !PASTE &P1 &P2 &P3\n*  NOTE: 'ISPEXEC CONTROL ERRORS RETURN' IN THE ABOVE CLISTS SUPPRESSES\n*      AN ERROR PANEL THAT APPEARS IF A 'BLOCK COMMAND INCOMPLETE'\n*      SITUATION (LIKE ONLY ONE CC) OR A 'COMMAND CONFLICT'\n*      SITUATION (LIKE THREE CC'S) OCCURS THE FIRST TIME YOU USE 'CUT'\n*      IN AN ISPF SESSION.  UNFORTUNATELY THE COMMAND IS NOT LEFT ON\n*      THE LINE, BUT THAT'S A MINOR IRRITATION COMPARED TO THE ERROR\n*      PANEL, AND IT ONLY HAPPENS IF IT'S THE FIRST TIME YOU USE CUT.\n* LOG OF CHANGES:\n*  25SEP90 - ADD 'ISPEXEC CONTROL ERRORS RETURN' TO SUGGESTED CLISTS,\n*            AND NOTE ABOUT THEM.  NO CODE CHANGES IN PROGRAM.\n*  04OCT90 - MAKE THAT 'ISPEXEC' IN 25SEP90 COMMENTS, NOT 'ISREXEC'.\n*            NO CODE CHANGES IN PROGRAM.\n*  18OCT90 - ADD VERSION TO @PROLOG.\n*  25APR91 - NO CODE CHANGES. MINOR COMMENT CHANGES.\n         SPACE\nCUT      CSECT\n         USING *,R8\n@ORIGIN  B     @PROLOG-*(,R15)\n         DC    AL1(3),CL7'CUT 1.0'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)\n@PROLOG  STM   14,8,12(13)         SAVE REGS\n         LR    R8,15               BASE REGISTER\n         LR    R2,R1               PARM POINTER\n         LA    R3,68(,R13)         POINT TO 18TH WORD OF SAVE AREA\n         LA    R1,56(,R13)         POINT TO 15TH WORD OF SAVE AREA\n         MVC   0(10,R1),GMLIST\n         L     R0,@SIZE\n         GETMAIN EC,LV=(0),A=(R3),MF=(E,(1))\n         LTR   R15,R15             IF GETMAIN WAS NOT SUCCESSFUL\n         BZ    GOTMAIN                THEN\n         LM    14,8,12(13)            RESTORE REGS\n         LA    R15,12                 SET RC = 12\n         BR    R14                    RETURN\nGOTMAIN  L     R3,68(,R13)         GET ADDRESS RETURNED BY GETMAIN\n         STM   9,12,56(R13)        SAVE REMAINING REGISTERS\n         DROP  R8\n         LR    R10,R8\n         USING @ORIGIN,R10,R11\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         SPACE\n         LR    R0,R3               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              CLEAR GETMAINED AREA\n         SPACE\n         ST    R3,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         ST    R13,4(,R3)          PUT OLD ADDRESS IN NEW SAVE AREA\n         LR    R13,R3              SWITCH TO NEW SAVEAREA\n         USING @DATA,R13\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPLINKA\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DEFINE VARIABLES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP1)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP1\n         LA    R0,L'CUTP1\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP2)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP2\n         LA    R0,L'CUTP2\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP3)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP3\n         LA    R0,L'CUTP3\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP4)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP4\n         LA    R0,L'CUTP4\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTCM)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTCM\n         LA    R0,L'CUTCM\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTZF)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTZF\n         LA    R0,L'CUTZF\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTZL)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTZL\n         LA    R0,L'CUTZL\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTDW)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTDW\n         LA    R0,L'CUTDW\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTLN)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTLN\n         LA    R0,256\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTBO)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTBO\n         LA    R0,L'CUTBO\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IDENTIFY THIS AS AN EDIT MACRO, GET PARAMETER               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CMD1             ISREDIT MACRO (CUTP1) NOPROCESS\n         LA    R0,L'CMD1\n         BAL   R8,ISREDIT\n         SPACE\n         CLI   CUTP1,C'.'          IF 1ST PARM LOOKS LIKE A LABEL\n         BNE   P1ID                   THEN\n         MVC   CUTP4,CUTP3            SHIFT 3RD TO 4TH\n         MVC   CUTP3,CUTP2            SHIFT 2ND TO 3RD\n         MVC   CUTP2,CUTP1            SHIFT 1ST TO 2ND\n         MVI   CUTP1,C' '             BLANK 1ST\n         MVC   CUTP1+1(79),CUTP1      BLANK 1ST\nP1ID     CLI   CUTP1+1,C' '        IF 1ST OPERAND LONGER THAN 1 CHAR\n         BNE   ERR01                  ERROR\n         CLI   CUTP1,C' '          IF NO OPERAND\n         BNE   P1NB                   THEN\n         MVI   CUTP1,C'1'             DEFAULT LEVEL 1\nP1NB     CLI   CUTP1,C'?'          HELP\n         BE    HELP\n         CLI   CUTP1,C':'          COLON\n         BE    ERR12\n         OI    CUTP1,X'40'         CAPS\n         CLI   CUTP1,C'1'\n         BL    ERR01\n         CLI   CUTP1,C'9'\n         BH    ERR01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF ONE OR TWO LABELS ARE SPECIFIED, INTERPRET THEM          *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKP1     BAL   R8,CER\n         TR    CUTP2,CAPS\n         CLI   CUTP2,C' '\n         BE    NOLABS\n         CLI   CUTP2,C'.'\n         BNE   ERR02\n         LA    R1,CUTP2\n         LA    R15,LABEL1\n         MVC   0(9,R15),=CL9' '\n         LA    R0,9\nMOVLAB1  CLI   0(R1),C' '\n         BE    GOTLAB1\n         CLI   0(R1),0\n         BE    GOTLAB1\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(,R1)\n         LA    R15,1(,R15)\n         BCT   R0,MOVLAB1\n         CLI   0(R1),C' '\n         BNE   ERR02               LABEL TOO LONG\nGOTLAB1  MVC   LABELW,LABEL1\n         LA    R1,CMDA             ISREDIT (CUTZF) = LINENUM .LABELXXX\n         LA    R0,L'CMDA\n         MVC   LINE(L'CMDA),0(R1)\n         MVC   LINE+18(9),LABEL1\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         LTR   R15,R15\n         BNZ   ERR11\n         MVC   CUTZL,CUTZF\n         MVI   CUTCM,C'C'\nOKP2     TR    CUTP3,CAPS\n         CLI   CUTP3,C' '\n         BE    NOP3\n         CLI   CUTP3,C'.'\n         BNE   ERR02\n         LA    R1,CUTP3\n         LA    R15,LABEL2\n         MVC   0(9,R15),=CL9' '\n         LA    R0,9\nMOVLAB2  CLI   0(R1),C' '\n         BE    GOTLAB2\n         CLI   0(R1),0\n         BE    GOTLAB2\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(,R1)\n         LA    R15,1(,R15)\n         BCT   R0,MOVLAB2\n         CLI   0(R1),C' '\n         BNE   ERR02               LABEL TOO LONG\nGOTLAB2  MVC   LABELW,LABEL2\n         LA    R1,CMDB             ISREDIT (CUTZL) = LINENUM .LABELXXX\n         LA    R0,L'CMDB\n         MVC   LINE(L'CMDB),0(R1)\n         MVC   LINE+18(9),LABEL2\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         LTR   R15,R15\n         BNZ   ERR11\n         SPACE\nNOP3     MVI   CUTCM,C'C'\n         SPACE\n         LA    R1,CMDC             ISREDIT PROCESS\n         LA    R0,L'CMDC            (NEITHER DEST NOR RANGE)\n         BAL   R8,ISREDIT           (JUST TO ENSURE NO LINE CMDS)\n         SPACE\n         LTR   R15,R15             IF RC = 0\n         BZ    OKLABS                 THERE WERE NO LINE CMDS\n         C     R15,=F'16'          IF COMMAND CONFLICT\n         BE    ERR10                SHOW ZERRMSG\n         B     EXIT0               OTHERWISE DONT DO ANYTHING FOR NOW\nOKLABS   BAL   R8,CEC\n         CLC   CUTZF,CUTZL         IF FIRST IS GREATER THAN LAST\n         BNH   OKRANGE                THEN\n         MVC   DOUBLE(6),CUTZF        SWAP THEM\n         MVC   CUTZF,CUTZL\n         MVC   CUTZL,DOUBLE\n         B     OKRANGE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         PROCESS THE LINE COMMAND(S)                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nNOLABS   LA    R1,CMD8             ISREDIT (CUTBO) = LINENUM .ZLAST\n         LA    R0,L'CMD8\n         BAL   R8,ISREDIT\n         SPACE\n         BAL   R8,CER\n         SPACE\n         LA    R1,CMD2             ISREDIT PROCESS RANGE C\n         LA    R0,L'CMD2\n         BAL   R8,ISREDIT\n         SPACE\n         LTR   R15,R15\n         BZ    OKLINEC\n         SPACE\n         C     R15,=F'16'          IF RC EQ 16\n         BE    ERR10                  BLOCK INCOMPLETE, CMD CONFLICT\n         C     R15,=F'20'          IF RC EQ 20\n         BE    CHKEMPTY               CHECK FOR EMPTY DATA SET\n         C     R15,=F'4'           IF RC GT 4\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         B     ERR03               NO LINE COMMAND(S) SPECIFIED\nCHKEMPTY CLC   CUTBO,=C'000000'    IF NOT EMPTY\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         B     ERR09               EMPTY\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE FIRST AND LAST LINE NUMBERS OF THE RANGE            *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKLINEC  EQU   *\n         BAL   R8,CEC\n         SPACE\n         LA    R1,CMD3             ISREDIT (CUTCM) = RANGE_CMD\n         LA    R0,L'CMD3\n         BAL   R8,ISREDIT\n         SPACE\n         LA    R1,CMD4             ISREDIT (CUTZF) = LINENUM .ZFRANGE\n         LA    R0,L'CMD4\n         BAL   R8,ISREDIT\n         SPACE\n         LA    R1,CMD5             ISREDIT (CUTZL) = LINENUM .ZLRANGE\n         LA    R0,L'CMD5\n         BAL   R8,ISREDIT\n         SPACE\n*               CUTZF AND CUTZL WERE ORIGINALLY 8 BYTES LONG, AND THE\n*               ABOVE CALLS FILLED THEM IN WITH 6 DIGITS FOLLOWED BY\n*               TWO BLANKS.  WE THEN CHANGED THE LENGTH TO 6.\n         SPACE\n***********************************************************************\n*                                                                     *\n*         WE KNOW THE LINE NUMBERS, EITHER FROM LABELS OR LINE CMDS   *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKRANGE  LA    R1,CMD6             ISREDIT (CUTDW) = DATA_WIDTH\n         LA    R0,L'CMD6\n         BAL   R8,ISREDIT\n         PACK  DOUBLE,CUTDW\n         CVB   R0,DOUBLE\n         STH   R0,WIDTH\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COMPUTE THE NUMBER OF LINES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         PACK  DOUBLE(8),CUTZF\n         CVB   R4,DOUBLE\n         PACK  DOUBLE(8),CUTZL\n         CVB   R5,DOUBLE\n         SPACE\n         LR    R0,R5\n         SR    R0,R4               COMPUTE NUMBER OF LINES - 1\n         A     R0,=F'1'            COMPUTE NUMBER OF LINES\n         CVD   R0,DOUBLE\n         MVC   HOWMANY,=X'4020202020202120'\n         ED    HOWMANY,DOUBLE+4\n         C     R0,MAXLINES\n         BH    ERR04\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE CUT BUFFER AS AN OLD TEMPORARY DATA SET        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   OLDNEW,=C'OLD'\n         LA    R1,W99RBPTR\n         LA    R15,W99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         MVC   W99RB(20),P99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99RTDDN\n         ST    R1,0(,R14)\n         MVC   0(14,R1),P99RTDDN\n         LA    R1,W99DSNAM\n         ST    R1,4(,R14)\n         MVC   0(11,R1),P99DSNAM\n         MVC   10(1,R1),CUTP1      APPEND PARM TO DSN\n         LA    R1,P99STATS\n         ST    R1,8(,R14)\n         LA    R1,P99NDISP\n         ST    R1,12(,R14)\n         LA    R1,P99PERMA\n         ST    R1,16(,R14)\n         LA    R1,P99CNVRT\n         ST    R1,20(,R14)\n         OI    20(R14),X'80'\n         LA    R1,P99NDISP\n         LA    R1,W99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZ    OKALLOC\n         C     R15,=F'4'\n         BNE   ERR05\n         CLC   W99RB+4(2),=X'1708'\n         BNE   ERR05\n         MVC   OLDNEW,=C'NEW'\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE CUT BUFFER AS A NEW TEMPORARY DATA SET         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R15,W99RB\n         MVC   W99RB(20),P99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99RTDDN\n         ST    R1,0(,R14)\n         MVC   0(14,R1),P99RTDDN\n         LA    R1,W99DSNAM\n         ST    R1,4(,R14)\n         MVC   0(11,R1),P99DSNAM\n         MVC   10(1,R1),CUTP1      APPEND PARM TO DSN\n         LA    R1,N99STATS\n         ST    R1,8(,R14)\n         LA    R1,P99NDISP\n         ST    R1,12(,R14)\n         LA    R1,P99PERMA\n         ST    R1,16(,R14)\n         LA    R1,P99CNVRT\n         ST    R1,20(,R14)\n         LA    R1,N99UNIT\n         ST    R1,24(,R14)\n         LA    R1,N99TRK\n         ST    R1,28(,R14)\n         LA    R1,N99PRIME\n         ST    R1,32(,R14)\n         OI    32(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZ    OKALLOC\n         C     R15,=F'4'\n         BNE   ERR05\n         CLC   W99RB+4(2),=X'021C'\n         BNE   ERR05\n         B     ERR06\nOKALLOC  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE TEMPORARY DATA SET                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   OPEN,X'80'\n         MVI   CLOSE,X'80'\n         SPACE\n         LA    R3,VIODCBW\n         MVC   0(VIODCBL,R3),VIODCB\n         MVC   DDNAM(8,R3),W99RTDDN+6\n         LH    R0,WIDTH\n         STH   R0,LRECL(,R3)\n         MH    R0,=H'10'\n         STH   R0,BLKSI(,R3)\n*        LA    R1,VIOEXL           SET EXLST=VIOEXL IN DCB\n*        STCM  R1,7,EXLST+1(R3)\n*        LA    R0,VIOEXO\n*        ST    R0,VIOEXL\n*        MVI   VIOEXL,X'85'\n         OPEN  ((R3),OUTPUT),MF=(E,OPEN)\n         TM    48(R3),X'10'\n         BNO   ERR07\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY THE EDIT LINES TO THE TEMPORARY DATA SET               *\n*                                                                     *\n***********************************************************************\n         SPACE\nLOOP     CVD   R4,DOUBLE\n         UNPK  NUMBER(6),DOUBLE+4(4)\n         OI    NUMBER+5,X'F0'\n         LA    R1,CMD7             (CUTLN) = LINE XXXXXX\n         LA    R0,L'CMD7\n         MVC   LINE(L'CMD7),0(R1)\n         MVC   LINE+15(6),NUMBER\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         SPACE\n         PUT   (R3),CUTLN\n         SPACE\n         CR    R4,R5\n         BE    LOOPEND\n         A     R4,=F'1'\n         B     LOOP\nLOOPEND  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF LINE COMMAND WAS 'M' DELETE THE LINE(S)                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   CUTCM,C'M'\n         BNE   COPYONLY\n         LA    R1,CMD9             ISREDIT DELETE XXXXXX YYYYYY\n         LA    R0,L'CMD9\n         MVC   LINE(L'CMD9),0(R1)\n         MVC   LINE+7(6),CUTZF\n         MVC   LINE+14(6),CUTZL\n         LA    R1,LINE\n         BAL   R8,ISREDIT\nCOPYONLY EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND ISSUE COMPLETION MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nDONE     LA    R3,VIODCBW\n         CLOSE ((R3)),MF=(E,CLOSE)\n         BAL   R8,UNALLO           REMOVE IN-USE FLAG\n         LTR   R15,R15\n         BNZ   ERR08\n         LA    R1,LINE\n         MVC   0(MSG00L,R1),MSG00\n         MVC   8(6,R1),HOWMANY+2\n         CLC   HOWMANY+6(2),=C' 1' IF ONE LINE\n         BNE   *+10                   THEN\n         MVC   15(9,R1),=C'LINE CUT ' CHANGE PLURAL TO SINGULAR\n         A     R1,MSG00            POINT TO 2ND MESSAGE\n         LA    R1,8(,R1)           POINT TO 2ND MESSAGE\n         MVC   0(1,R1),CUTCM\n         MVC   8(6,R1),CUTZF\n         MVC   15(6,R1),CUTZL\n         MVC   22(3,R1),CUTDW\n         MVC   26(8,R1),W99RTDDN+6\n         MVC   35(3,R1),OLDNEW\n*               ELIMINATE LEADING BLANKS FROM FINAL MESSAGE\n         L     R1,LINE             GET LENGTH OF 1ST MESSAGE\n         A     R1,LINE+4           GET LENGTH OF BOTH MSGS\n         LR    R14,R1\n         BCTR  R14,0               GET LENGTH MINUS 1\n         BCTR  R14,0               GET LENGTH MINUS 2\n         LA    R15,LINE+8          POINT TO 1ST MESSAGE\nSHIFTL   CLI   0(R15),C' '\n         BNE   SHIFTED\n         EX    R14,SHIFTM          SHIFT MESSAGES LEFT\n         BCTR  R1,0                REDUCE LENGTH\n         B     SHIFTL\nSHIFTM   MVC   LINE+8(0),LINE+9    (EXECUTED)\nSHIFTED  S     R1,LINE+4           COMPUTE NEW LENGTH OF 1ST MSG\n         ST    R1,LINE             STORE NEW LENGTH\n*               LEADING BLANKS HAVE BEEN ELIMINATED\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(IT WORKED)\n         SPACE\n         BAL   R8,SETMSG0          ISPEXEC SETMSG MSG(ISRZ000)\nEXIT0    SR    R15,R15\nEXIT     LR    R2,R15\n         L     R15,ISPLINKA\n         LTR   R15,R15\n         BZ    EXITNOD\n         DELETE EP=ISPLINK\nEXITNOD  EQU   *\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*               REMOVE THE IN-USE FLAG SO THAT SUBSEQUENT ALLOCATIONS\n*               (BY CUT AND PASTE) DO NOT GENERATE ADDITIONAL DDNAMES\n*               AND EVENTUALLY FILL UP THE TIOT.\n         SPACE\nUNALLO   LA    R15,W99RB\n         MVC   W99RB(20),U99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99DDNAM\n         ST    R1,0(,R14)\n         MVC   0(6,R1),U99DDNAM\n         MVC   6(8,R1),W99RTDDN+6\n         LA    R1,U99REMOV\n         ST    R1,4(,R14)\n         OI    04(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         BR    R8\n         SPACE\nERR01    LA    R1,LINE\n         MVC   0(MSG01L,R1),MSG01\n         MVC   26(8,R1),CUTP1      COPY 1ST 8 BYTES OF 1ST PARM\nERR01J   BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(WHATEVER)\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR02    LA    R1,LINE\n         MVC   0(MSG02L,R1),MSG02\n         MVC   26(8,R1),CUTP2      COPY 1ST 8 BYTES OF 2ND PARM\n         B     ERR01J              SET ZEDSMSG = &STR(INVALID PARM)\n         SPACE\nERR03    LA    R1,LINE\n         MVC   0(MSG03L,R1),MSG03\n         B     ERR01J              SET ZEDSMSG = &STR(NO LINE CMD)\n         SPACE\nERR04    LA    R1,LINE\n         MVC   0(MSG04L,R1),MSG04\n         A     R1,MSG04\n         LA    R1,8(,R1)\n         MVC   0(6,R1),HOWMANY+2\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(TOO MANY LINES)\n         SPACE\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR05    LA    R1,LINE\n         MVC   0(MSG05L,R1),MSG05\nERR05J   A     R1,LINE\n         LA    R1,8(,R1)\n         CVD   R15,DOUBLE          RETURN CODE FROM SVC 99\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R1),DOUBLE+6(2)\n         UNPK  DOUBLE(5),W99RB+4(3) ERROR CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   12(4,R1),DOUBLE\n         UNPK  DOUBLE(5),W99RB+6(3) INFO  CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   22(4,R1),DOUBLE\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(ALLOC ERROR)\n         SPACE\nERR06    LA    R1,LINE\n         MVC   0(MSG06L,R1),MSG06\n         B     ERR01J              SET ZEDSMSG = &STR(UNIT ERROR)\n         SPACE\nERR07    LA    R1,LINE\n         MVC   0(MSG07L,R1),MSG07\n         B     ERR01J              SET ZEDSMSG = &STR(OPEN ERROR)\n         SPACE\nERR08    LA    R1,LINE\n         MVC   0(MSG08L,R1),MSG08\n         B     ERR05J              SET ZEDSMSG = &STR(UNALLOC ERROR)\n         SPACE\nERR09    LA    R1,LINE\n         MVC   0(MSG09L,R1),MSG09\n         B     ERR01J              SET ZEDSMSG = &STR(EMPTY)\n         SPACE\nERR10    BAL   R8,GETZERR\n         BAL   R8,SETMSGZ          ISPEXEC SETMSG MSG(&ZERRMSG)\n         B     EXIT12\n         SPACE\nERR11    LA    R1,LINE\n         MVC   0(MSG11L,R1),MSG11\n         A     R1,MSG11\n         LA    R1,8(,R1)\n         MVC   0(9,R1),LABELW\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(LABEL ERROR)\n         SPACE\nERR12    LA    R1,LINE\n         MVC   0(MSG12L,R1),MSG12\n         OC    8+L'MSG12A(L'MSG12B,R1),MSG12C\n         B     ERR01J              SET ZEDSMSG = &STR(VERSION 1.0)\n         SPACE\nVDEFINE  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE '\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          STORE ADDRESS\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nGETZERR  LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY '\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZERRMSG)'\n         ST    R0,4(,R1)\n         LA    R0,ZERRMSL\n         MVC   ZERRMSL,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nZEDSMSG  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VREPLACE'\n         ST    R0,0(,R1)\n         LA    R0,=CL17'(ZEDSMSG ZEDLMSG)'\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          LENGTHS\n         LA    R15,8(,R15)\n         ST    R15,12(,R1)         VALUES\n         OI    12(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nSETMSGZ  LA    R1,ZERRMSG\n         B     SETMSG\nSETMSG0  LA    R1,=CL8'ISRZ000 '\n         B     SETMSG\nSETMSG1  LA    R1,=CL8'ISRZ001 '\nSETMSG   LR    R15,R1              SAVE ADDRESS OF 'ISRZ001'\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'SETMSG'\n         ST    R0,0(,R1)\n         ST    R15,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCER      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCEC      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'CANCEL'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nHELP     BAL   R8,CER\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'CUTH01'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         B     EXIT0\n         SPACE\nISREDIT  LR    R15,R1\n         ST    R0,LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'ISREDIT '\n         ST    R0,0(,R1)\n         LA    R0,LENGTH\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nVIOEXO   CLC   LRECL(2,R1),=H'0'\n         BNE   *+10\n         MVC   LRECL(2,R1),WIDTH\n         CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         LH    R0,LRECL(,R1)\n         SLL   R0,4   LRECL TIMES 16\n         STH   R0,BLKSI(,R1)\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CONSTANTS                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\nMAXLINES DC    F'1000' MAXIMUM LINES THAT MAY BE CUT\nGMLIST   GETMAIN EC,MF=L\nCMD1     DC    C'MACRO (CUTP1,CUTP2,CUTP3,CUTP4) NOPROCESS'\nCMD2     DC    C'PROCESS RANGE C M'\nCMD3     DC    C'(CUTCM) = RANGE_CMD'\nCMD4     DC    C'(CUTZF) = LINENUM .ZFRANGE'\nCMD5     DC    C'(CUTZL) = LINENUM .ZLRANGE'\nCMD6     DC    C'(CUTDW) = DATA_WIDTH'\nCMD7     DC    C'(CUTLN) = LINE XXXXXX'\nCMD8     DC    C'(CUTBO) = LINENUM .ZLAST'\nCMD9     DC    C'DELETE XXXXXX XXXXXX'\nCMDA     DC    C'(CUTZF) = LINENUM .LABELXXX'\nCMDB     DC    C'(CUTZL) = LINENUM .LABELXXX'\nCMDC     DC    C'PROCESS'\n*\nMSG00    DC    A(L'MSG00A,L'MSG00B)\nMSG00A   DC    C'NNNNNN LINES CUT'\nMSG00B   DC    C'X RANGE XXXXXX XXXXXX WID DDNAMEXX OLD'\nMSG00L   EQU   *-MSG00\n*\nMSG01    DC    A(L'MSG01A,L'MSG01B)\nMSG01A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG01B   DC    C'BUFFER IDENTIFIER MUST BE 0-9 OR A-Z'\nMSG01L   EQU   *-MSG01\n*\nMSG02    DC    A(L'MSG02A,L'MSG02B)\nMSG02A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG02B   DC    C'ONLY ONE OPERAND MAY BE SPECIFIED'\nMSG02L   EQU   *-MSG02\n*\nMSG03    DC    A(L'MSG03A,L'MSG03B)\nMSG03A   DC    C'RANGE NOT SPECIFIED'\nMSG03B   DC    C'A \"C\" OR \"M\" LINE COMMAND HAS NOT BEEN SPECIFIED'\nMSG03L   EQU   *-MSG03\n*\nMSG04    DC    A(L'MSG04A,L'MSG04B)\nMSG04A   DC    C'TOO MANY LINES'\nMSG04B   DC    C'XXXXXX IS MORE THAN THE MAXIMUM OF 1000 LINES'\nMSG04L   EQU   *-MSG04\n*\nMSG05    DC    A(L'MSG05A,L'MSG05B)\nMSG05A   DC    C'ALLOCATION ERROR'\nMSG05B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG05L   EQU   *-MSG05\n*\nMSG06    DC    A(L'MSG06A,L'MSG06B)\nMSG06A   DC    C'ALLOCATION ERROR'\nMSG06B   DC    C'UNIT NAME VIO IS UNDEFINED'\nMSG06L   EQU   *-MSG06\n*\nMSG07    DC    A(L'MSG07A,L'MSG07B)\nMSG07A   DC    C'OPEN ERROR'\nMSG07B   DC    C'UNABLE TO OPEN TEMPORARY FILE'\nMSG07L   EQU   *-MSG07\n*\nMSG08    DC    A(L'MSG08A,L'MSG08B)\nMSG08A   DC    C'UNALLOCATE ERROR'\nMSG08B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG08L   EQU   *-MSG08\n*\nMSG09    DC    A(L'MSG09A,L'MSG09B)\nMSG09A   DC    C'NO LINES TO CUT'\nMSG09B   DC    C'THERE ARE NO LINES TO CUT'\nMSG09L   EQU   *-MSG09\n*\nMSG11    DC    A(L'MSG11A,L'MSG11B)\nMSG11A   DC    C'LABEL ERROR'\nMSG11B   DC    C'.LABELXXX IS NOT A LABEL'\nMSG11L   EQU   *-MSG11\n*\nMSG12    DC    A(L'MSG12A,L'MSG12B)\nMSG12A   DC    C'VERSION 1.0'\nMSG12B   DC    X'C0E040C0C0D0D040C0D0C0C0D0C0E0'\nMSG12L   EQU   *-MSG12\nMSG12C   DC    X'020800020903030007060406090508'\n*\nPAD      EQU   0  WHENEVER THIS IS REFERENCED, IT'S JUST FOR ALIGNMENT\nP99RB    DC    0F'0',AL1(20,1),X'A000',A(0,0,0,0)\nP99RTDDN DC    0H'0',X'0055',H'1,8',CL8' '\nP99DSNAM DC    0H'0',X'0002',H'1,5',CL5'&&CUT '\nP99STATS DC    0H'0',X'0004',H'1,1',X'01',AL1(PAD) OLD=1 NEW=4\nP99NDISP DC    0H'0',X'0005',H'1,1',X'04',AL1(PAD) DELETE=4\nP99PERMA DC    0H'0',X'0052',H'0'\nP99CNVRT DC    0H'0',X'0053',H'0'\nN99STATS DC    0H'0',X'0004',H'1,1',X'04',AL1(PAD) OLD=1 NEW=4\nN99UNIT  DC    0H'0',X'0015',H'1,8',CL8'VIO'\nN99TRK   DC    0H'0',X'0007',H'0'\nN99PRIME DC    0H'0',X'000A',H'1,3',AL3(8),AL1(PAD) 8 TRACKS\nU99RB    DC    0F'0',AL1(20,2),X'0000',A(0,0,0,0)\nU99DDNAM DC    0H'0',X'0001',H'1,8',CL8' '\nU99REMOV DC    0H'0',X'0008',H'0'\nHEXTAB   DC    C'0123456789ABCDEF'\n         DC    0D'0'\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n         SPACE\n         PRINT NOGEN\n         SPACE\nVIODCB   DCB   DDNAME=CUTPASTE,DSORG=PS,MACRF=(PM),RECFM=FB,BUFNO=2\nVIODCBL  EQU   *-VIODCB\n         SPACE\n         PRINT GEN\n         DC    0D'0'\n***********************************************************************\n*                                                                     *\n*         WORKSPACE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n@DATA    DSECT\nSAVE     DS    18F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    DS    F\nVIODCBW  DS    0F,(VIODCBL)X\nVIOEXL   DS    F\nISPLINKA DS    F\nPARAMS   DS    5F\nSERVICE  DS    CL8\nLENGTH   DS    F\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nVDEFNAME DS    CL10\nCUTP1    DS    CL80\nCUTP2    DS    CL80\nCUTP3    DS    CL80\nCUTP4    DS    CL80\nCUTCM    DS    CL8\nCUTZF    DS    CL6\nCUTZL    DS    CL6\nCUTDW    DS    CL3\nCUTBO    DS    CL6\nNUMBER   DS    CL6\nHOWMANY  DS    CL8\nWIDTH    DS    H\nOLDNEW   DS    CL3\nZERRMSL  DS    F\nZERRMSG  DS    CL8\nLABEL1   DS    CL9\nLABEL2   DS    CL9\nLABELW   DS    CL9\n         DS    0F                 ALIGN LINE\n         DS    CL3\nLINEM1   DS    C                  LINE-1\nLINE     DS    CL133\nCUTLN    DS    CL256\nW99RBPTR DS    F\nW99RB    DS    5F\nW99TUPL  DS    9F\nW99RTDDN DS    3H,CL8\nW99DDNAM DS    3H,CL8\nW99DSNAM DS    3H,CL5\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nEODAD    EQU   32  OFFSET INTO DCB\nEXLST    EQU   32  OFFSET INTO DCB\nDDNAM    EQU   40  OFFSET INTO DCB\nOFLGS    EQU   48  OFFSET INTO DCB\nMACR     EQU   50  OFFSET INTO DCB\nBLKSI    EQU   62  OFFSET INTO DCB\nLRECL    EQU   82  OFFSET INTO DCB\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CUTL02": {"ttr": 3332, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x03f\\x03f\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 870, "newlines": 870, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   P A S T E   '\n***********************************************************************\n*                                                                     *\n*        'PASTE' - ISPF EDIT MACRO                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE-WRITTEN: AUGUST 7 1990.\n* DATE-UPDATED: APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*  THIS ISPF EDIT MACRO COPIES ONE OR MORE LINES FROM TEMPORARY FILES\n*  CREATED BY THE 'CUT' MACRO TO THE DATA SET BEING EDITED.\n*\n*  UP TO 9 DIFFERENT 'CUT' BUFFERS CAN CO-EXIST. THE DEFAULT BUFFER\n*  (1) IS USED IF NO PARAMETER IS SPECIFIED.  THE USER CAN SPECIFY ANY\n*  OF THE 9 BUFFER LEVELS AS THE PARAMETER.\n*\n*  EACH BUFFER IS ACTUALLY A TEMPORARY DATA SET NAMED '&CUTX'\n*  WHERE X HAS A VALUE RANGING FROM 1 TO 9.\n*\n*  NOTE THAT CUTP1 THRU CUTP4 ARE 80 BYTES LONG SO WE CAN HANDLE\n*  ALMOST ANYTHING THAT THE USER ENTERS.  CUTP4 WILL CONTAIN\n*  ANY REMAINING PARAMETERS AFTER THE FIRST THREE, AND IS ONLY USED\n*  TO CHECK THAT NO 4TH OPERAND IS ENTERED.\n*\n*  THERE SHOULD BE A CLIST IN SYSPROC NAMED 'PASTE' THAT CONTAINS:\n*      ISREDIT MACRO (P1 P2 P3) NOPROCESS\n*      ISREDIT !PASTE &P1 &P2 &P3\n*  SEE THE COMMENTS IN THE SOURCE CODE FOR 'CUT' ABOUT THIS CLIST.\n*\n* LOG OF CHANGES.\n*  18OCT90 - ADD VERSION TO @PROLOG. FIX MSG12L.\n*  25APR91 - NO CODE CHANGES. MINOR COMMENT CHANGES.\n*\n         SPACE\nPASTE    CSECT\n         USING *,R8\n@ORIGIN  B     @PROLOG-*(,R15)\n         DC    AL1(5),CL11'PASTE 1.0  '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)\n@PROLOG  STM   14,8,12(13)         SAVE REGS\n         LR    R8,15               BASE REGISTER\n         LR    R2,R1               PARM POINTER\n         LA    R3,68(,R13)         POINT TO 18TH WORD OF SAVE AREA\n         LA    R1,56(,R13)         POINT TO 15TH WORD OF SAVE AREA\n         MVC   0(10,R1),GMLIST\n         L     R0,@SIZE\n         GETMAIN EC,LV=(0),A=(R3),MF=(E,(1))\n         LTR   R15,R15             IF GETMAIN WAS NOT SUCCESSFUL\n         BZ    GOTMAIN                THEN\n         LM    14,8,12(13)            RESTORE REGS\n         LA    R15,12                 SET RC = 12\n         BR    R14                    RETURN\nGOTMAIN  L     R3,68(,R13)         GET ADDRESS RETURNED BY GETMAIN\n         STM   9,12,56(R13)        SAVE REMAINING REGISTERS\n         DROP  R8\n         LR    R10,R8\n         USING @ORIGIN,R10\n         SPACE\n         LR    R0,R3               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              CLEAR GETMAINED AREA\n         SPACE\n         ST    R3,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         ST    R13,4(,R3)          PUT OLD ADDRESS IN NEW SAVE AREA\n         LR    R13,R3              SWITCH TO NEW SAVEAREA\n         USING @DATA,R13\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPLINKA\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DEFINE VARIABLES                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP1)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP1\n         LA    R0,L'CUTP1\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP2)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP2\n         LA    R0,L'CUTP2\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP3)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP3\n         LA    R0,L'CUTP3\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTP4)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTP4\n         LA    R0,L'CUTP4\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTBO)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTBO\n         LA    R0,L'CUTBO\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTIP)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTIP\n         LA    R0,L'CUTIP\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTDW)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTDW\n         LA    R0,L'CUTDW\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(CUTLN)'\n         MVC   VDEFFMT,=CL8'CHAR'\n         LA    R1,CUTLN\n         LA    R0,256\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IDENTIFY THIS AS AN EDIT MACRO, GET PARAMETER               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CMD1             ISREDIT MACRO (CUTP1) NOPROCESS\n         LA    R0,L'CMD1\n         BAL   R8,ISREDIT\n         SPACE\n         TR    CUTP1,CAPS\n         CLC   CUTP1(4),=C'AFT '\n         BE    ABSP1\n         CLC   CUTP1(4),=C'BEF '\n         BE    ABSP1\n         CLC   CUTP1(5),=C'AFTER '\n         BE    ABSP1\n         CLC   CUTP1(6),=C'BEFORE '\n         BNE   P1ID                   THEN\nABSP1    MVC   CUTP4,CUTP3            SHIFT 3RD TO 4TH\n         MVC   CUTP3,CUTP2            SHIFT 2ND TO 3RD\n         MVC   CUTP2,CUTP1            SHIFT 1ST TO 2ND\n         MVI   CUTP1,C' '             BLANK 1ST\n         MVC   CUTP1+1(79),CUTP1      BLANK 1ST\nP1ID     CLI   CUTP1+1,C' '        IF 1ST OPERAND LONGER THAN 1 CHAR\n         BNE   ERR01                  ERROR\n         CLI   CUTP1,C' '          IF NO OPERAND\n         BNE   P1NB                   THEN\n         MVI   CUTP1,C'1'             DEFAULT IS 1\nP1NB     CLI   CUTP1,C'?'          HELP\n         BE    HELP\n         CLI   CUTP1,C':'          COLON\n         BE    ERR14\n         OI    CUTP1,X'40'         CAPS\n         CLI   CUTP1,C'1'\n         BL    ERR01\n         CLI   CUTP1,C'9'\n         BH    ERR01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF 'BEFORE' OR 'AFTER' SPECIFIED, INTERPRET LABEL           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         BAL   R8,CER\n         MVC   CUTPW,CUTP2         SAVE FOR ERR02\n         TR    CUTP2,CAPS\n         CLI   CUTP2,C' '\n         BE    NOLABS\n         CLC   CUTP2(4),=C'AFT '\n         BE    OKP2\n         CLC   CUTP2(4),=C'BEF '\n         BE    OKP2\n         CLC   CUTP2(5),=C'AFTER '\n         BE    OKP2\n         CLC   CUTP2(6),=C'BEFORE '\n         BNE   ERR02\nOKP2     CLI   CUTP3,C' '          IF NOTHING FOLLOWS 'BEF' OR 'AFT'\n         BE    ERR12                  ERROR\n         TR    CUTP3,CAPS\n         LA    R1,CUTP3\n         LA    R15,LABEL1\n         MVC   0(10,R15),=CL10' '\n         LA    R0,9\nMOVLAB2  CLI   0(R1),C' '\n         BE    GOTLAB2\n         CLI   0(R1),0\n         BE    GOTLAB2\n         MVC   0(1,R15),0(R1)\n         LA    R1,1(,R1)\n         LA    R15,1(,R15)\n         BCT   R0,MOVLAB2\n         MVC   0(1,R15),0(R1)      COPY TRAILING BLANK\n         CLI   0(R1),C' '\n         BNE   ERR11               LABEL TOO LONG\nGOTLAB2  EQU   *\n         CLI   LABEL1,C'.'\n         BNE   ERR11\n         LA    R1,CMDB             ISREDIT (CUTIP) = LINENUM .LABELXXX\n         LA    R0,L'CMDB\n         MVC   LINE(L'CMDB),0(R1)\n         MVC   LINE+18(9),LABEL1\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         LTR   R15,R15\n         BNZ   ERR11\n         SPACE\n         LA    R1,CMDC             ISREDIT PROCESS\n         LA    R0,L'CMDC            (NEITHER DEST NOR RANGE)\n         BAL   R8,ISREDIT           (JUST TO ENSURE NO LINE CMDS)\n         SPACE\n         LTR   R15,R15             IF RC = 0\n         BZ    OKLABS                 THERE WERE NO LINE CMDS\n         C     R15,=F'16'          IF COMMAND CONFLICT\n         BE    ERR10                SHOW ZERRMSG\n         B     EXIT0               OTHERWISE DONT DO ANYTHING FOR NOW\nOKLABS   BAL   R8,CEC\n         CLI   CUTP2,C'B'          IF BEFORE\n         BNE   HAVIP                  THEN\n         PACK  DOUBLE,CUTIP           REDUCE INSERTION POINT\n         CVB   R1,DOUBLE\n         LTR   R1,R1                  UNLESS\n         BZ    ALR0                    IT IS ZERO\n         BCTR  R1,0\nALR0     CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  CUTIP(6),DOUBLE+4(4)\n         B     HAVIP\n         SPACE\n***********************************************************************\n*                                                                     *\n*         PROCESS THE LINE COMMAND(S)                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nNOLABS   LA    R1,CMD6             ISREDIT (CUTBO) = LINENUM .ZLAST\n         LA    R0,L'CMD6\n         BAL   R8,ISREDIT\n         SPACE\n         BAL   R8,CER\n         SPACE\n         LA    R1,CMD2             ISREDIT PROCESS DEST\n         LA    R0,L'CMD2\n         BAL   R8,ISREDIT\n         SPACE\n         LTR   R15,R15\n         BZ    OKLINEC\n         SPACE\n         C     R15,=F'20'          IF RC EQ 20\n         BE    CHKEMPTY               MAY BE EMPTY\n         C     R15,=F'16'          IF RC EQ 16\n         BE    ERR10                  COMMAND CONFLICT\n         C     R15,=F'8'           IF RC NE 8\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         B     ERR03               NO LINE COMMAND SPECIFIED\nCHKEMPTY CLC   CUTBO,=C'000000'    IF NOT EMPTY\n         BNE   EXIT0                  ISPF WILL ISSUE ITS OWN MESSAGE\n         MVC   CUTIP,CUTBO         EMPTY DATA SET\n         B     HAVIP                  SO USE 000000 AS INSERTION POINT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE INSERTION POINT                                     *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKLINEC  EQU   *\n         LA    R1,CMD3             ISREDIT (CUTIP) = LINENUM .ZDEST\n         LA    R0,L'CMD3\n         BAL   R8,ISREDIT\n         SPACE\nHAVIP    BAL   R8,CEC\n         SPACE\n         LA    R1,CMD4             ISREDIT (CUTDW) = DATA_WIDTH\n         LA    R0,L'CMD4\n         BAL   R8,ISREDIT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE CUT BUFFER AS AN OLD TEMPORARY DATA SET        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,W99RBPTR\n         LA    R15,W99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         MVC   W99RB(20),P99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99RTDDN\n         ST    R1,0(,R14)\n         MVC   0(14,R1),P99RTDDN\n         LA    R1,W99DSNAM\n         ST    R1,4(,R14)\n         MVC   0(11,R1),P99DSNAM\n         MVC   10(1,R1),CUTP1      APPEND PARM TO DSN\n         LA    R1,P99STATS\n         ST    R1,8(,R14)\n         LA    R1,P99NDISP\n         ST    R1,12(,R14)\n         LA    R1,P99PERMA\n         ST    R1,16(,R14)\n         LA    R1,P99CNVRT\n         ST    R1,20(,R14)\n         OI    20(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         LTR   R15,R15\n         BZ    OKALLOC\n         C     R15,=F'4'\n         BNE   ERR05\n         CLC   W99RB+4(2),=X'1708'\n         BNE   ERR05\n         B     ERR06\nOKALLOC  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE TEMPORARY DATA SET                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   OPEN,X'80'\n         MVI   CLOSE,X'80'\n         SPACE\n         LA    R3,VIODCBW\n         MVC   0(VIODCBL,R3),VIODCB\n         MVC   DDNAM(8,R3),W99RTDDN+6\n         LA    R1,EOF              SET EODAD=EOF    IN DCB\n         STCM  R1,7,EODAD+1(R3)\n         LA    R1,VIOEXL           SET EXLST=VIOEXL IN DCB\n*        STCM  R1,7,EXLST+1(R3)\n*        LA    R0,VIOEXO\n*        ST    R0,VIOEXL\n*        MVI   VIOEXL,X'85'\n         OPEN  ((R3),INPUT),MF=(E,OPEN)\n         TM    48(R3),X'10'\n         BNO   ERR07\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY THE TEMPORARY FILE TO THE EDIT DATA SET                *\n*                                                                     *\n***********************************************************************\n         SPACE\n         SR    R5,R5\n         PACK  DOUBLE,CUTIP\n         CVB   R4,DOUBLE\n         MVI   CUTLN,C' '          PAD WITH BLANKS\n         MVC   CUTLN+1(255),CUTLN  FOR DATA CUT AS 72 AND PASTED AS 80\n         SPACE\nLOOP     GET   (R3),CUTLN\n         CVD   R4,DOUBLE\n         UNPK  NUMBER(6),DOUBLE+4(4)\n         OI    NUMBER+5,X'F0'\n         LA    R1,CMD5             LINE_AFTER XXXXXX = DATALINE (CUTLN)\n         LA    R0,L'CMD5\n         MVC   LINE(L'CMD5),0(R1)\n         MVC   LINE+11(6),NUMBER\n         LA    R1,LINE\n         BAL   R8,ISREDIT\n         SPACE\n         A     R4,=F'1'\n         A     R5,=F'1'\n         B     LOOP\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND ISSUE COMPLETION MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nEOF      LA    R3,VIODCBW\n         CLOSE ((R3)),MF=(E,CLOSE)\n         BAL   R8,UNALLO           REMOVE IN-USE FLAG\n         LTR   R15,R15\n         BNZ   ERR08\n         CVD   R5,DOUBLE\n         MVC   HOWMANY,=X'4020202020202120'\n         ED    HOWMANY,DOUBLE+4\n         LA    R1,LINE\n         MVC   0(MSG00L,R1),MSG00\n         MVC   8(6,R1),HOWMANY+2\n         CLC   HOWMANY+6(2),=C' 1' IF ONE LINE\n         BNE   *+10                   THEN\n         MVC   15(12,R1),=C'LINE PASTED ' CHANGE PLURAL TO SINGULAR\n         A     R1,MSG00            POINT TO 2ND MESSAGE\n         LA    R1,8(,R1)           POINT TO 2ND MESSAGE\n         MVC   6(6,R1),CUTIP\n         MVC   13(3,R1),CUTDW\n         MVC   17(8,R1),W99RTDDN+6\n*               ELIMINATE LEADING BLANKS FROM FINAL MESSAGE\n         L     R1,LINE             GET LENGTH OF 1ST MESSAGE\n         A     R1,LINE+4           GET LENGTH OF BOTH MSGS\n         LR    R14,R1\n         BCTR  R14,0               GET LENGTH MINUS 1\n         BCTR  R14,0               GET LENGTH MINUS 2\n         LA    R15,LINE+8          POINT TO 1ST MESSAGE\nSHIFTL   CLI   0(R15),C' '\n         BNE   SHIFTED\n         EX    R14,SHIFTM          SHIFT MESSAGES LEFT\n         BCTR  R1,0                REDUCE LENGTH\n         B     SHIFTL\nSHIFTM   MVC   LINE+8(0),LINE+9    (EXECUTED)\nSHIFTED  S     R1,LINE+4           COMPUTE NEW LENGTH OF 1ST MSG\n         ST    R1,LINE             STORE NEW LENGTH\n*               LEADING BLANKS HAVE BEEN ELIMINATED\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(IT WORKED)\n         SPACE\n         BAL   R8,SETMSG0          ISPEXEC SETMSG MSG(ISRZ000)\nEXIT0    SR    R15,R15\nEXIT     LR    R2,R15\n         L     R15,ISPLINKA\n         LTR   R15,R15\n         BZ    EXITNOD\n         DELETE EP=ISPLINK\nEXITNOD  EQU   *\n         LR    R1,R13\n         L     R0,@SIZE\n         L     R13,4(,R13)\n         FREEMAIN R,LV=(0),A=(1)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     R14,12(,R13)\n         BR    R14\nEXIT12   LA    R15,12\n         B     EXIT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES                                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*               REMOVE THE IN-USE FLAG SO THAT SUBSEQUENT ALLOCATIONS\n*               (BY CUT AND PASTE) DO NOT GENERATE ADDITIONAL DDNAMES\n*               AND EVENTUALLY FILL UP THE TIOT.\n         SPACE\nUNALLO   LA    R15,W99RB\n         MVC   W99RB(20),U99RB\n         LA    R14,W99TUPL\n         ST    R14,8(,R15)\n         LA    R1,W99DDNAM\n         ST    R1,0(,R14)\n         MVC   0(6,R1),U99DDNAM\n         MVC   6(8,R1),W99RTDDN+6\n         LA    R1,U99REMOV\n         ST    R1,4(,R14)\n         OI    04(R14),X'80'\n         LA    R1,W99RBPTR\n         SVC   99\n         BR    R8\n         SPACE\nERR01    LA    R1,LINE\n         MVC   0(MSG01L,R1),MSG01\n         MVC   26(8,R1),CUTP1      COPY 1ST 8 BYTES OF 1ST PARM\nERR01J   BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(WHATEVER)\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR02    LA    R1,LINE\n         MVC   0(MSG02L,R1),MSG02\n         MVC   26(8,R1),CUTPW      COPY 1ST 8 BYTES OF PARM\n         B     ERR01J              SET ZEDSMSG = &STR(INVALID PARM)\n         SPACE\nERR03    LA    R1,LINE\n         MVC   0(MSG03L,R1),MSG03\n         B     ERR01J              SET ZEDSMSG = &STR(NO LINE CMD)\n         SPACE\nERR04    LA    R1,LINE\n         MVC   0(MSG04L,R1),MSG04\n         A     R1,MSG04\n         LA    R1,8(,R1)\n         MVC   0(6,R1),HOWMANY+2\n         LA    R1,LINE\n         BAL   R8,ZEDSMSG          SET ZEDSMSG = &STR(TOO MANY LINES)\n         SPACE\n         BAL   R8,SETMSG1          ISPEXEC SETMSG MSG(ISRZ001)\n         B     EXIT0\n         SPACE\nERR05    LA    R1,LINE\n         MVC   0(MSG05L,R1),MSG05\nERR05J   A     R1,LINE\n         LA    R1,8(,R1)\n         CVD   R15,DOUBLE          RETURN CODE FROM SVC 99\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R1),DOUBLE+6(2)\n         UNPK  DOUBLE(5),W99RB+4(3) ERROR CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   12(4,R1),DOUBLE\n         UNPK  DOUBLE(5),W99RB+6(3) INFO  CODE FROM SVC 99\n         TR    DOUBLE(4),HEXTAB-240\n         MVC   22(4,R1),DOUBLE\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(ALLOC ERROR)\n         SPACE\nERR06    LA    R1,LINE\n         MVC   0(MSG06L,R1),MSG06\n         B     ERR01J              SET ZEDSMSG = &STR(NOT FOUND)\n         SPACE\nERR07    LA    R1,LINE\n         MVC   0(MSG07L,R1),MSG07\n         B     ERR01J              SET ZEDSMSG = &STR(OPEN ERROR)\n         SPACE\nERR08    LA    R1,LINE\n         MVC   0(MSG08L,R1),MSG08\n         B     ERR05J              SET ZEDSMSG = &STR(UNALLOC ERROR)\n         SPACE\nERR09    LA    R1,LINE\n         MVC   0(MSG09L,R1),MSG09\n         A     R1,LINE\n         LA    R1,8(,R1)\n         CVD   R15,DOUBLE          RETURN CODE FROM PROCESS\n         OI    DOUBLE+7,X'0F'\n         UNPK  3(2,R1),DOUBLE+6(2)\n         MVC   6(6,R1),CUTBO\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(EMPTY FILE)\n         SPACE\nERR10    BAL   R8,GETZERR\n         BAL   R8,SETMSGZ          ISPEXEC SETMSG MSG(&ZERRMSG)\n         B     EXIT12\n         SPACE\nERR11    LA    R1,LINE\n         MVC   0(MSG11L,R1),MSG11\n         A     R1,MSG11\n         LA    R1,8(,R1)\n         MVC   0(10,R1),LABEL1\n         LA    R1,LINE\n         B     ERR01J              SET ZEDSMSG = &STR(LABEL ERROR)\n         SPACE\nERR12    LA    R1,LINE\n         MVC   0(MSG12L,R1),MSG12\n         B     ERR01J              SET ZEDSMSG = &STR(OPEN ERROR)\n         SPACE\nERR14    LA    R1,LINE\n         MVC   0(MSG14L,R1),MSG14\n         OC    8+L'MSG14A(L'MSG14B,R1),MSG14C\n         B     ERR01J              SET ZEDSMSG = &STR(VERSION 1.0)\n         SPACE\nVDEFINE  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE '\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          STORE ADDRESS\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nGETZERR  LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY '\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZERRMSG)'\n         ST    R0,4(,R1)\n         LA    R0,ZERRMSL\n         MVC   ZERRMSL,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nZEDSMSG  LR    R15,R1              SAVE ADDRESS\n         ST    R0,VDEFLEN          STORE LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VREPLACE'\n         ST    R0,0(,R1)\n         LA    R0,=CL17'(ZEDSMSG ZEDLMSG)'\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)          LENGTHS\n         LA    R15,8(,R15)\n         ST    R15,12(,R1)         VALUES\n         OI    12(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nSETMSGZ  LA    R1,ZERRMSG\n         B     SETMSG\nSETMSG0  LA    R1,=CL8'ISRZ000 '   ALARM=N0\n         B     SETMSG\nSETMSG1  LA    R1,=CL8'ISRZ001 '   ALARM=YES\nSETMSG   LR    R15,R1              SAVE ADDRESS OF 'ISRZ001'\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'SETMSG'\n         ST    R0,0(,R1)\n         ST    R15,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCER      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nCEC      LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,=CL8'CANCEL '\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nHELP     BAL   R8,CER\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,=CL8'CUTH02'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         B     EXIT0\n         SPACE\nISREDIT  LR    R15,R1\n         ST    R0,LENGTH\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'ISREDIT '\n         ST    R0,0(,R1)\n         LA    R0,LENGTH\n         ST    R0,4(,R1)\n         ST    R15,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPLINKA\n         BALR  R14,R15\n         BR    R8\n         SPACE\nVIOEXO   CLC   LRECL(2,R1),=H'0'\n         BNE   *+10\n         MVC   LRECL(2,R1),WIDTH\n         CLC   BLKSI(2,R1),=H'0'\n         BNER  R14\n         LH    R0,LRECL(,R1)\n         SLL   R0,4   LRECL TIMES 16\n         STH   R0,BLKSI(,R1)\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CONSTANTS                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LTORG\nGMLIST   GETMAIN EC,MF=L\nCMD1     DC    C'MACRO (CUTP1,CUTP2,CUTP3,CUTP4) NOPROCESS'\nCMD2     DC    C'PROCESS DEST'\nCMD3     DC    C'(CUTIP) = LINENUM .ZDEST'\nCMD4     DC    C'(CUTDW) = DATA_WIDTH'\nCMD5     DC    C'LINE_AFTER XXXXXX = DATALINE (CUTLN)'\nCMD6     DC    C'(CUTBO) = LINENUM .ZLAST'\nCMDB     DC    C'(CUTIP) = LINENUM .LABELXXX'\nCMDC     DC    C'PROCESS'\n*\nMSG00    DC    A(L'MSG00A,L'MSG00B)\nMSG00A   DC    C'NNNNNN LINES PASTED'\nMSG00B   DC    C'AFTER XXXXXX WID DDNAMEXX'\nMSG00L   EQU   *-MSG00\n*\nMSG01    DC    A(L'MSG01A,L'MSG01B)\nMSG01A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG01B   DC    C'EXPECTING LEVEL OR \"AFTER\" OR \"BEFORE\"'\nMSG01L   EQU   *-MSG01\n*\nMSG02    DC    A(L'MSG02A,L'MSG02B)\nMSG02A   DC    C'INVALID PARAMETER XXXXXXXX'\nMSG02B   DC    C'EXPECTING \"AFTER\" OR \"BEFORE\"'\nMSG02L   EQU   *-MSG02\n*\nMSG03    DC    A(L'MSG03A,L'MSG03B)\nMSG03A   DC    C'LINE COMMAND MISSING'\nMSG03B   DC    C'AN \"A\" OR \"B\" LINE COMMAND HAS NOT BEEN SPECIFIED'\nMSG03L   EQU   *-MSG03\n*\nMSG04    DC    A(L'MSG04A,L'MSG04B)\nMSG04A   DC    C'TOO MANY LINES'\nMSG04B   DC    C'XXXXXX IS MORE THAN THE MAXIMUM OF 1000 LINES'\nMSG04L   EQU   *-MSG04\n*\nMSG05    DC    A(L'MSG05A,L'MSG05B)\nMSG05A   DC    C'ALLOCATION ERROR'\nMSG05B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG05L   EQU   *-MSG05\n*\nMSG06    DC    A(L'MSG06A,L'MSG06B)\nMSG06A   DC    C'NOTHING WAS CUT'\nMSG06B   DC    C'CANNOT FIND CUT BUFFER'\nMSG06L   EQU   *-MSG06\n*\nMSG07    DC    A(L'MSG07A,L'MSG07B)\nMSG07A   DC    C'OPEN ERROR'\nMSG07B   DC    C'UNABLE TO OPEN TEMPORARY FILE'\nMSG07L   EQU   *-MSG07\n*\nMSG08    DC    A(L'MSG08A,L'MSG08B)\nMSG08A   DC    C'UNALLOCATE ERROR'\nMSG08B   DC    C'RC=XX ERROR=XXXX INFO=XXXX'\nMSG08L   EQU   *-MSG08\n*\nMSG09    DC    A(L'MSG09A,L'MSG09B)\nMSG09A   DC    C'UNEXPECTED ERROR'\nMSG09B   DC    C'RC=XX XXXXXX'\nMSG09L   EQU   *-MSG09\n*\nMSG11    DC    A(L'MSG11A,L'MSG11B)\nMSG11A   DC    C'LABEL ERROR'\nMSG11B   DC    C'.LABELXXX  IS NOT A LABEL'\nMSG11L   EQU   *-MSG11\n*\nMSG12    DC    A(L'MSG12A,L'MSG12B)\nMSG12A   DC    C'MISSING LABEL'\nMSG12B   DC    C'LABEL EXPECTED FOLLOWING \"BEFORE\" OR \"AFTER\"'\nMSG12L   EQU   *-MSG12\n*\nMSG14    DC    A(L'MSG14A,L'MSG14B)\nMSG14A   DC    C'VERSION 1.0'\nMSG14B   DC    X'C0E040C0C0D0D040C0D0C0C0D0C0E0'\nMSG14L   EQU   *-MSG14\nMSG14C   DC    X'020800020903030007060406090508'\n*\nP99RB    DC    0F'0',AL1(20,1),X'A000',A(0,0,0,0)\nP99RTDDN DC    0H'0',X'0055',H'1,8',CL8' '\nP99DSNAM DC    0H'0',X'0002',H'1,5',CL5'&&CUT '\nP99STATS DC    0H'0',X'0004',H'1,1',X'01',X'00' OLD=1 NEW=4 LAST=PAD\nP99NDISP DC    0H'0',X'0005',H'1,1',X'04',X'00' DELETE=4\nP99PERMA DC    0H'0',X'0052',H'0'\nP99CNVRT DC    0H'0',X'0053',H'0'\nU99RB    DC    0F'0',AL1(20,2),X'0000',A(0,0,0,0)\nU99DDNAM DC    0H'0',X'0001',H'1,8',CL8' '\nU99REMOV DC    0H'0',X'0008',H'0'\nHEXTAB   DC    C'0123456789ABCDEF'\n         DC    0D'0'\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n         PRINT NOGEN\n         SPACE\nVIODCB   DCB   DDNAME=CUTPASTE,DSORG=PS,MACRF=(GM),RECFM=FB,BUFNO=2\nVIODCBL  EQU   *-VIODCB\n         SPACE\n         PRINT GEN\n         DC    0D'0'\n***********************************************************************\n*                                                                     *\n*         WORKSPACE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n@DATA    DSECT\nSAVE     DS    18F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    DS    F\nVIODCBW  DS    0F,(VIODCBL)X\nVIOEXL   DS    F\nISPLINKA DS    F\nPARAMS   DS    5F\nSERVICE  DS    CL8\nLENGTH   DS    F\nVCOPYLEN DS    F\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nVDEFNAME DS    CL10\nCUTPW    DS    CL8\nCUTP1    DS    CL80\nCUTP2    DS    CL80\nCUTP3    DS    CL80\nCUTP4    DS    CL80\nCUTBO    DS    CL6\nCUTIP    DS    CL6\nCUTDW    DS    CL3\nNUMBER   DS    CL6\nHOWMANY  DS    CL8\nWIDTH    DS    H\nZERRMSL  DS    F\nZERRMSG  DS    CL8\nLABEL1   DS    CL9,C\n         DS    0F                 ALIGN LINE\n         DS    CL3\nLINEM1   DS    C                  LINE-1\nLINE     DS    CL133\nCUTLN    DS    CL256\nW99RBPTR DS    F\nW99RB    DS    5F\nW99TUPL  DS    6F\nW99RTDDN DS    3H,CL8\nW99DDNAM DS    3H,CL8\nW99DSNAM DS    3H,CL5\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nEODAD    EQU   32  OFFSET INTO DCB\nEXLST    EQU   32  OFFSET INTO DCB\nDDNAM    EQU   40  OFFSET INTO DCB\nOFLGS    EQU   48  OFFSET INTO DCB\nMACR     EQU   50  OFFSET INTO DCB\nBLKSI    EQU   62  OFFSET INTO DCB\nLRECL    EQU   82  OFFSET INTO DCB\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CVD": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x01\\xa0\\x01\\xa0\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 416, "newlines": 416, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   C V D   '\n***********************************************************************\n*                                                                     *\n*        'CVD' - CONVERT HEX TO DECIMAL                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. MAY 9 1985.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*   THIS TSO COMMAND DISPLAYS THE DECIMAL VALUE OF A HEX STRING.\n*   THE VALUE IS ASSUMED TO BE POSITIVE UNLESS:\n*    1) H IS NOT SPECIFIED, THERE ARE 8 HEX CHARACTERS, AND THE FIRST\n*       CHARACTER IS GREATER THAN HEX 7.\n*    2) H IS SPECIFIED, THERE ARE 4 HEX CHARACTERS, AND THE FIRST\n*       CHARACTER IS GREATER THAN HEX 7.\n*    IF THE 'TIME' KEYWORD IS SPECIFIED, THE HEX STRING IS CONVERTED\n*    FROM TIME-OF-DAY AS RETURNED BY THE 'TIME BIN' MACRO (HUNDREDTHS\n*    OF A SECOND SINCE MIDNIGHT) TO HH.MM.SS.\n*  SYNTAX.\n*   FIRST OPERAND: 1 TO 8 HEX DIGITS.\n*   OPTIONAL KEYWORD: H - HALFWORD DATA (16 BIT SIGNED INTEGER).\n*   OPTIONAL KEYWORD: T - TIME-OF-DAY\n* LOG OF CHANGES.\n*  08AUG86 - TIME KEYWORD ADDED.\n*  25APR91 - NO CODE CHANGES. MINOR CHANGES TO COMMENTS.\n         SPACE\nCVDBASE  START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'CVD    '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)   SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,13\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(CVDPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS,MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'     IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n************************************************************\n*                                                          *\n*         GET FIRST POSITIONAL OPERAND                     *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   HEXATE(8),=8C'0'    LEADING ZEROES\n         LA    R15,HEXATE+8        POINT PAST HEXATE\n         SH    R15,HEXNUM+4        POINT INTO HEXATE BASED ON LENGTH\n         L     R1,HEXNUM           REG 1  --> OPERAND\n         LH    R14,HEXNUM+4        REG 15  =  LENGTH OF OPERAND\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE OPERAND INTO HEXATE\n         EX    R14,*-6             EXECUTE MVC\n         SPACE\n         LA    R1,HEXATE           FROM AND TO ADDRESS\n         LA    R0,4                LENGTH TO PACK\n         BAL   R14,PACK            CONVERT TO BINARY\n         SPACE\n************************************************************\n*                                                          *\n*         DISPLAY THE RESULT                               *\n*                                                          *\n************************************************************\n         SPACE\n         L     R0,HEXATE\n         CLI   TYPEKW+1,3          T SPECIFIED\n         BE    TIME\n         CLI   TYPEKW+1,2          H SPECIFIED\n         BNE   CVD                 NO, SKIP LH\n         LH    R0,HEXATE+2         YES, LOAD HALFWORD\n         CLC   HEXATE(2),=H'0'     MORE THAN 4 SIGNIFICANT DIGITS\n         BNE   ERROR               YES, ERROR\nCVD      CVD   R0,DOUBLE\n         LA    R15,LINE\n         LTR   R0,R0\n         BNM   NOSIGN\n         MVI   0(R15),C'-'\n         LA    R15,1(,R15)\nNOSIGN   EQU   *\n         MVC   0(16,R15),=X'4020206B2020206B2020206B20212040'\n         ED    0(15,R15),DOUBLE+2\n         LA    R0,15(,R15)         POINT PAST LAST DIGIT\nZSUP1    CLI   0(R15),C' '\n         BNE   ZSUP2\n         MVC   0(14,R15),1(R15)\n         BCTR  R0,0\n         B     ZSUP1\nZSUP2    EQU   *\n         LA    R1,LINE\n         SR    R0,R1               COMPUTE LENGTH OF RESULT\nPUTRES   AH    R0,=H'4'\n         STH   R0,LINESEG\n         XC    LINESEG+2(2),LINESEG+2\n         SPACE\n         BAL   R14,PUTLINE\n         SPACE\n         B     EXIT0\n         SPACE\nTIME     LR    R1,R0\n         SR    R0,R0\n         D     R0,=A(360000)\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE(2),DOUBLE+6(2)\n         SRDL  R0,32\n         D     R0,=F'6000'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE+3(2),DOUBLE+6(2)\n         SRDL  R0,32\n         D     R0,=F'100'\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  LINE+6(2),DOUBLE+6(2)\n         MVI   LINE+2,C'.'\n         MVI   LINE+5,C'.'\n         LA    R0,8\n         B     PUTRES\n         SPACE\nERROR    MVC   LINE(5),=C'ERROR'\n         LA    R0,5\n         B     PUTRES\n         SPACE\n************************************************************\n*                                                          *\n*        THIS ROUTINE CONVERTS EXTERNAL HEX TO BINARY HEX  *\n*                                                          *\n************************************************************\n         SPACE\nPACK     ST    R14,PACK14\n         LR    R15,R1              REG 15 --> SENDING/RECEIVING FIELD\nPACLOOP  SR    R14,R14\n         IC    R14,0(,R1)          REG 14  =  1ST CHAR\n         CLI   0(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT TO FA-FF\n         SLL   R14,4               SHIFT LEFT 4 BITS\n         STC   R14,0(,R15)         STORE THE LEFT HALF\n         IC    R14,1(,R1)          REG 14  =  2ND CHAR\n         CLI   1(R1),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R14,57(,R14)        LETTER - CONVERT\n         SLL   R14,28              SHIFT LEFT HALF TO OBLIVION\n         SRL   R14,28              SHIFT BACK AGAIN\n         STC   R14,1(,R15)         STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R1,2(,R1)           INCREMENT SENDING FIELD\n         LA    R15,1(,R15)         INCREMENT RECEIVING FLD\n         BCT   R0,PACLOOP          LOOP USING LENGTH IN REG 0\n         L     R14,PACK14\n         BR    R14                 EXIT\n         SPACE\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTRAN-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         MVC   MYPTPB(12),MODLPTPB\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(LINESEG,DATA),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         TERMINATE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    15,15\nEXIT     IKJRLSA MYANS\n         LR    R1,R13              ADDRESS TO FREEMAIN\n         L     R0,@SIZE            LENGTH AND SUBPOOL TO FREEMAIN\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     14,12(,R13)\n         BR    14\n         DROP  R12                 BASE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         PARSE VALIDITY CHECK ROUTINE FOR HEX STRING                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n*\n*              THE IKJIDENT MACRO SPECIFIES THE FOLLOWING:\n*                FIRST=NONATNUM,OTHER=NONATNUM,VALIDCK=REPVALCK\n*              THIS VALIDITY CHECKING ROUTINE ONLY HAS TO CHECK FOR\n*              ALPHABETIC CHARACTERS GREATER THAN 'F' BECAUSE THE\n*              CHARACTERS ARE KNOWN TO BE ALPHABETIC AND/OR NUMERIC.\n*\nREPVALCK DC    0H'0'\n         USING *,R6\n         STM   R14,R12,12(R13)\n         LR    R6,R15              REG 6  =  BASE\n         L     R7,0(,R1)           REG 7 --> PDE\n         L     R4,0(,R7)           REG 4 --> CHARACTER STRING\n         LH    R0,4(,R7)           REG 0  =  LENGTH\n         LA    R15,4               RETURN 4 IF CHECK FAILS\nVALLOOP  CLI   0(R4),C'0'          NUMERIC?\n         BNL   VALINCR             YES - THIS CHAR OK\n         CLI   0(R4),C'F'          IN RANGE A THRU F?\n         BH    VALEXIT             NO - EXIT WITH RC=4\nVALINCR  LA    R4,1(,R4)           POINT TO NEXT CHAR\n         BCT   R0,VALLOOP\n         SR    R15,R15             SET RC=0\nVALEXIT  L     R14,12(,R13)\n         LM    0,12,20(R13)\n         BR    R14\n         DROP  R6\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nCVDPCL   IKJPARM\nHEXNUM   IKJIDENT 'HEX NUMBER',                                        +\n               FIRST=NONATNUM,OTHER=NONATNUM,MAXLNTH=8,                +\n               VALIDCK=REPVALCK,                                       +\n               PROMPT='HEXADECIMAL NUMBER',                            +\n               HELP='HEX NUMBER (MAX LENGTH 8) TO BE CONVERTED TO DECIM+\n               AL'\nTYPEKW   IKJKEYWD\n         IKJNAME 'F'\n         IKJNAME 'H'\n         IKJNAME 'TIME'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nHEXATE   DS    D\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nPACK14   DS    F\nLINESEG  DS    2H\nLINE     DS    CL16\n         SPACE\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPPL\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVD$": {"ttr": 3845, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'CVD'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(CVD),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(CVD),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVD#": {"ttr": 3847, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "BG@PRC"}, "text": ")F FUNCTION -\n  THE CVD COMMAND CONVERTS A HEX NUMBER TO DECIMAL\n\n)X SYNTAX  -\n         CVD  'HEXSTRING'  F/H/TIME\n  REQUIRED - 'HEXSTRING'\n  DEFAULTS - F\n  ALIAS    - NONE\n)O OPERANDS -\n  'HEXSTRING' - AN UNQUOTED STRING OF 1 TO 8 HEX CHARACTERS.\n))F        - THE HEX STRING IS TO BE TREATED AS A FULLWORD (31 BITS\n             PLUS A SIGN BIT ON THE LEFT). IF FEWER THAN 8 HEX DIGITS\n             ARE SPECIFIED, LEADING ZEROES WILL BE ASSUMED.\n))H        - THE HEX STRING IS TO BE TREATED AS A HALFWORD (15 BITS\n             PLUS A SIGN BIT ON THE LEFT). IF FEWER THAN 4 HEX DIGITS\n             ARE SPECIFIED, LEADING ZEROES WILL BE ASSUMED.  THE FIRST\n             OPERAND SHOULD HAVE NO MORE THAN 4 CHARACTERS.\n))TIME     - THE HEX STRING IS A NUMBER REPRESENTING HUNDREDTHS OF A\n             SECOND SINCE MIDNIGHT, AND IS TO BE CONVERTED TO\n             HOURS, MINUTES,AND SECONDS.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVX": {"ttr": 3849, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x01s\\x01s\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 371, "newlines": 371, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   C V X   '\n***********************************************************************\n*                                                                     *\n*        'CVX' - CONVERT DECIMAL TO HEX                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. OCT 17 1985.\n* DATE UPDATED. APR 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*   THIS TSO COMMAND DISPLAYS THE HEX VALUE OF A DECIMAL NUMBER\n*   OR AN EBCDIC STRING.\n*  SYNTAX.\n*   FIRST OPERAND: 1 TO 9 DECIMAL DIGITS\n*   OPTIONAL KEYWORD: C - CHARACTER TO HEX.\n*  LOG OF CHANGES.\n*   06NOV88 - CHANGE MAXLNTH FROM 8 TO 11 (11 CHARS IN -2147483647)\n*             NOTE: IF VALUE > 2,147,483,647 (HEX 7FFFFFFF)\n*                   OR      < -2,147,483,648 (HEX 80000000)\n*                   THEN YOU GET AN ERROR MESSAGE.\n*   25APR91 - NO CODE CHANGES. MINOR CHANGES TO COMMENTS.\n*\n         SPACE\nCVXBASE  START\n         USING *,R12\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'CVX    '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)   SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,13\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(CVXPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS,MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'     IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n         LINK  EP=IKJPARS\nPARSEEXT EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n************************************************************\n*                                                          *\n*         GET FIRST POSITIONAL OPERAND                     *\n*                                                          *\n************************************************************\n         SPACE\n         DROP  R2                  CPPL   (R2 CHANGED BY TRT)\n         L     R4,POSIT1           REG 1  --> OPERAND\n         LH    R14,POSIT1+4        REG 14  =  LENGTH OF OPERAND\n         CLI   TYPEKW+1,2          C SPECIFIED\n         BE    CHARCVX\n*              SINCE THE ABSOLUTE VALUE OF THE LARGEST NEGATIVE NUMBER\n*              IS ONE GREATER THAN THE LARGEST POSITIVE NUMBER, AND\n*              SINCE WE BUILD OUR RESULT BY MAKING A POSITIVE NUMBER\n*              AND THEN NEGATING IT, WE MAKE A SPECIAL TEST FOR THE\n*              LARGEST NEGATIVE NUMBER AND BYPASS THE NORMAL LOGIC.\n         L     R7,=A(X'80000000')  LARGEST NEGATIVE NUMBER\n         CH    R14,=H'11'          IF LENGTH = 11\n         BNE   NOTSPEC                AND\n         CLC   0(11,R4),=C'-2147483648' LARGEST NEGATIVE NUMBER\n         BE    GOTVAL                 THEN USE R7\nNOTSPEC  EQU   *\n*              THE NEXT 3 INSTRUCTIONS TURN OFF FIXED-POINT OVERFLOW\n*              INTERRUPTS (S0C8 ABENDS) WHICH COULD OCCUR ON THE 'AR'\n*              INSTRUCTION LATER ON.  IT MAY NOT REALLY BE NECESSARY,\n*              BECAUSE THE MASK BIT WAS ALREADY OFF IN TESTS WE RAN,\n*              BUT WE DO IT ANYWAY JUST TO BE SURE.\n         BALR  R5,0                GET PROGRAM MASK\n         N     R5,=A(X'F7FFFFFF')  TURN OFF FIXED POINT OVERFLOW\n         SPM   R5                  SET PROGRAM MASK\n*\n         SR    R5,R5\n         SR    R6,R6               INITIALIZE THE VALUE\n         SR    R7,R7               INITIALIZE THE VALUE\n         MVI   SIGN,C'+'\n         TRT   0(1,R4),NUMERIC\n         BZ    NOSIGN\n         BCT   R14,CKSIGN\n         B     ERROR               ONLY ONE BYTE, NOT NUMERIC\nCKSIGN   CLI   0(R4),C'+'\n         BE    OKSIGN\n         CLI   0(R4),C'-'\n         BNE   ERROR               FIRST CHAR NOT A SIGN, NOT NUMERIC\nOKSIGN   MVC   SIGN,0(R4)\n         LA    R4,1(,R4)           POINT TO NEXT CHARACTER\nNUMLOOP  TRT   0(1,R4),NUMERIC\n         BNZ   ERROR\nNOSIGN   IC    R5,0(,R4)\n         N     R5,=A(X'0000000F')  CHANGE F0-F9 TO 00-09\n         M     R6,=F'10'\n         LTR   R7,R7               IS RESULT GREATER THAN 31 BITS\n         BM    ERROR\n         LTR   R6,R6               IS RESULT GREATER THAN 32 BITS\n         BNZ   ERROR\n         AR    R7,R5\n         BO    ERROR               BRANCH IF OVERFLOW\n         LA    R4,1(,R4)           POINT TO NEXT CHARACTER\n         BCT   R14,NUMLOOP\n         CLI   SIGN,C'-'\n         BNE   *+6\n         LNR   R7,R7               CONVERT TO MINUS\n         SPACE\nGOTVAL   ST    R7,DOUBLE\n         LA    R1,DOUBLE\n         LA    R0,4\n         LA    R15,LINE\n         BAL   R14,HEX\n         LA    R0,8\n         B     PUTLN\n         SPACE\nCHARCVX  LR    R1,R4\n         LR    R0,R14\n         CH    R0,=H'128'\n         BNH   *+8\n         LH    R0,=H'128'\n         LA    R15,LINE\n         BAL   R14,HEX\n         LA    R1,LINE\n         LR    R0,R15\n         SR    R0,R1\n         SPACE\n************************************************************\n*                                                          *\n*         DISPLAY THE RESULT                               *\n*                                                          *\n************************************************************\n         SPACE\nPUTLN    LA    R1,LINE\nPUTRES   AH    R0,=H'4'\n         STH   R0,LINESEG\n         XC    LINESEG+2(2),LINESEG+2\n         SPACE\n         BAL   R14,PUTLINE\n         SPACE\n         B     EXIT0\n         SPACE\nERROR    MVC   LINE(5),=C'ERROR'\n         LA    R0,5\n         B     PUTRES\n         SPACE\n************************************************************\n*                                                          *\n*        THIS ROUTINE CONVERTS DATA TO HEX                 *\n*                                                          *\n************************************************************\n         SPACE\n         SPACE\nHEX      MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTRAN-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTRAN  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         MVC   MYPTPB(12),MODLPTPB\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(LINESEG,DATA),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n***********************************************************************\n*                                                                     *\n*         TERMINATE                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    15,15\nEXIT     IKJRLSA MYANS\n         LR    R1,R13              ADDRESS TO FREEMAIN\n         L     R0,@SIZE            LENGTH AND SUBPOOL TO FREEMAIN\n         L     R13,4(,R13)\n         LR    R2,R15\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)\n         L     14,12(,R13)\n         BR    14\n         DROP  R12                 BASE\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\nNUMERIC  DC    240X'FF',10X'00',6X'FF'\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PCL                                         *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nCVXPCL   IKJPARM\nPOSIT1   IKJIDENT 'DATA TO BE CONVERTED TO HEX',ASIS,                  +\n               FIRST=ANY,OTHER=ANY,MAXLNTH=11,                         +\n               PROMPT='DATA TO BE CONVERTED TO HEX',                   +\n               HELP='DATA (MAX LENGTH 10) TO BE CONVERTED TO HEX'\nTYPEKW   IKJKEYWD\n         IKJNAME 'N'\n         IKJNAME 'C'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F\nDOUBLE   DS    D\nSIGN     DS    C\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nLINESEG  DS    2H\nLINE     DS    CL256,CL1\n         DS    0D\n         SPACE\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJIOPL\n         SPACE 3\n         IKJPPL\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVX$": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'CVX'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(CVX),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(CVX),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVX#": {"ttr": 4101, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x12\\x00\\x12\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 18, "newlines": 18, "modlines": 0, "user": "BG@PRC"}, "text": ")F FUNCTION -\n  THE CVX COMMAND CONVERTS A DECIMAL NUMBER TO HEX\n  (OR OPTIONALLY CONVERTS A CHARACTER STRING TO HEX).\n  VALUES MAY RANGE FROM -2147483648 THRU +2147483647.\n\n)X SYNTAX  -\n         CVX  'NUMBER'  N/C\n  REQUIRED - 'NUMBER'\n  DEFAULTS - N\n  ALIAS    - NONE\n)O OPERANDS -\n  'NUMBER' - A DECIMAL NUMBER (WITH OPTIONAL SIGN ON LEFT)\n             OR, IF THE SECOND OPERAND IS 'C', A STRING OF CHARACTERS.\n             MAXIMUM LENGTH IS 11 CHARACTERS.\n))N        - THE STRING IS TO BE TREATED AS A DECIMAL NUMBER WHOSE\n             NUMERIC VALUE IS TO BE SHOWN IN HEX.\n))C        - THE STRING IS TO BE TREATED AS EBCDIC CHARACTERS WHOSE\n             CHARACTER VALUE IS TO BE SHOWN IN HEX.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSPRINT": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x001\\x00\\x91\\x11_\\x01\\x174\\x9f\\x00 \\x06\\x8f\\x06\\x82\\x00\\x00\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "2017-12-15T00:20:31", "lines": 1679, "newlines": 1666, "modlines": 0, "user": "UPDATED"}, "text": "         TITLE '   D S P R I N T    '\n***********************************************************************\n*                                                                     *\n*        'DSPRINT' TSO COMMAND                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. JUNE 20 1986.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* EXTERNAL REFERENCE. SYSO99 SUBPROGRAM.\n* DESCRIPTION.\n*  THIS TSO COMMAND IS FOR ISPF INSTALLATIONS THAT DO NOT HAVE IBM'S\n*  'DSPRINT' COMMAND.  IT DOESN'T DO WHAT IBM'S DSPRINT DOES,\n*  BUT IT LETS YOU USE ISPF'S DSPRINT SUPPORT FOR ANOTHER PURPOSE.\n*\n*  THIS TSO COMMAND PRINTS A DATA SET TO A SPECIFIED SYSOUT\n*  CLASS.  IT HAS THE SAME NAME AND SYNTAX AS IBM'S 'DSPRINT'\n*  COMMAND WHICH IS INVOKED BY CERTAIN FUNCTIONS OF ISPF.\n*\n*  IT WRITES TO A SYSOUT DATA SET INSTEAD OF A 'LOCAL PRINTER',\n*  SO WHEN YOU SPECIFY A LOCAL PRINTER ON THE ISPF PANEL,\n*  IT HAS TO BE A SYSOUT CLASS.\n*\n*   SYNTAX -\n*          DSPRINT 'DSNAME' 'CLASS'     NONUM  CCHAR\n*\n*  NUM/NONUM IS IGNORED.  IT IS ONLY IN THE PARSE PARAMETERS\n*  BECAUSE ISPF GENERATES 'NONUM' AS AN OPERAND.\n*\n*  CCHAR MEANS THE DATA SET ALREADY CONTAINS CARRIAGE CONTROLS\n*  (MACHINE OR ASA) IN COLUMN 1 OF EACH RECORD, AND NEED NOT\n*  BE SPECIFIED IF THE DATA SET RECFM ALREADY INDICATES SO.\n*  ISPF GENERATES THE 'CCHAR' KEYWORD WHEN PRINTING A 'LIST'\n*  DATA SET, BUT NOT WHEN PRINTING 'HARDCOPY'.\n*\n*  THERE ARE MANY OTHER OPTIONAL OPERANDS THAT HAVE BEEN LEFT IN\n*  FROM THE 'OUTPRINT' COMMAND.  NEVER BOTHERED TO REMOVE THEM.\n*\n*  BEFORE THE 'LIST' COMMAND WAS ADDED TO ISPF, WHICH LETS YOU RELEASE\n*  YOUR PRINT FILES TO THE PRINTER WITHOUT EXITING FROM ISPF, THIS\n*  COMMAND ADDED A SIGNIFICANT NEW CAPABILITY TO ISPF.  NOW THAT YOU\n*  HAVE THE 'LIST' COMMAND IT'S NOT SO SIGNIFICANT. THE MAIN DIFFERENCE\n*  NOW IS THAT DSPRINT DOESN'T HAVE TO SUBMIT A JOB.\n*\n* LOG OF CHANGES.\n*  20JUN86 - NEW COMMAND CREATED BY MODIFYING THE 'OUTPRINT'\n*            TSO COMMAND, BY SAME AUTHOR, FROM CBT FILE 300.\n*            DOES MOSTLY THE SAME THING AS OUTPRINT, BUT THE\n*            SYNTAX IS CHANGED TO MATCH IBM'S DSPRINT.\n*  25OCT88 - TRANSLATE LOWERCASE TO CAPS\n*  25APR91 - REMOVE LOWERCASE TO CAPS TRANSLATION.\n*  14DEC17 - CHECK UPT FOR 8-BYTE PREFIX - Z/OS V2R3.\n*\n* MISCELLANEOUS.\n*  ALLOCATION OF THE SYSOUT FILE IS HANDLED BY\n*  A SUBPROGRAM NAMED 'SYSO99'.  YOU MAY FIND THE SOURCE\n*  FOLLOWING THE 'END' STATEMENT OF THIS PROGRAM,\n*  FOR BATCH ASSEMBLY.\n*\n*  THE 'FILE' KEYWORD IS USEFUL FOR PRINTING TEMPORARY\n*  DATA SETS.  IT TELLS THE COMMAND TO TREAT THE FIRST\n*  OPERAND AS A FILENAME (DDNAME) INSTEAD OF A DSNAME.\n*  WHATEVER DATA SET IS CURRENTLY ALLOCATED TO THE\n*  FILENAME WILL BE PRINTED (AND QUICKLY, BECAUSE\n*  THE COMMAND DOESNT HAVE TO ALLOCATE ANYTHING).\n*\n*  NOTE - IF A NON-EXISTENT MEMBER OF A PDS IS SPECIFIED,\n*  THE COMMAND WILL ABEND WITH 013-18.\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  1                   1 - MVS   0 - SVS,MVT\n         SPACE\nDSPRINT  START\n         USING *,R12,R11\n         B     @PROLOG-*(,R15)\n         DC    AL1(11),CL11'DSPRINT'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(13)\n         LR    R12,R15             BASE\n         LA    R15,1\n         LA    R11,4095(R15,R12)   BASE\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         LR    R9,R1\n         USING @DATA,R9\n         ST    13,4(,1)            CHAIN SAVEAREA\n         ST    1,8(,13)            CHAIN SAVEAREA\n         LR    13,1                NEW SAVEAREA\n         SPACE 1\n         MVI   STATUS,0\n         XC    LINKAREA(8),LINKAREA\n         SLR   R15,R15\n         STH   R15,RC              SET RC = 0\n         ST    R15,KOUNT\n         SPACE\n         L     R15,CPPLCBUF        ECHO\n         LH    R0,0(,R15)           THE\n         SH    R0,=H'4'              COMMAND\n         LA    R1,4(,R15)             BUFFER\n         SVC   93                  TPUT\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLOADX            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(DSPRPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         XC    MYANS(4),MYANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         ST    R9,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXITRCC\nPARSEOK  EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         SPACE\n************************************************************\n*                                                          *\n*         BUILD SYSOUT PARAMETERS                          *\n*                                                          *\n************************************************************\n         SPACE\n         XC    O99DSECT(52),O99DSECT\n         MVC   O99DD,=CL8' '\n         MVI   O99SO,C'A'          SYSOUT=A\n         MVI   O99FC,C'C'          FREE=CLOSE\n         ST    R2,O99CPPL          FOR ERROR MESSAGES VIA PUTLINE\n         SPACE\n         LA    R4,CLASS\n         L     R1,0(,R4)           POINT TO SPECIFIED CLASS\n         MVC   O99SO(1),0(R1)      FILL IN CLASS\nCLASSX   EQU   *\n         SPACE\n         LA    R4,DEST\n         TM    6(R4),X'80'         IS DEST SPECIFIED?\n         BZ    DESTX               NO, BRANCH\n         MVC   O99DE,=CL8' '       PAD DEST WITH BLANKS\n         L     R1,0(,R4)           POINT TO SPECIFIED DEST\n         LH    R15,4(,R4)          GET LENGTH\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   O99DE(0),0(R1)      FILL IN DEST\n         EX    R15,*-6\nDESTX    EQU   *\n         SPACE\n         LA    R4,COPIES\n         TM    6(R4),X'80'         IS COPIES SPECIFIED?\n         BZ    COPIESX             NO, BRANCH\n         L     R1,0(,R4)           POINT TO SPECIFIED COPIES\n         LH    R15,4(,R4)          GET LENGTH\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         B     *+10\n         PACK  DOUBLE(8),0(0,R1)   EXECUTED\n         EX    R15,*-6             PACK COPIES\n         CVB   R15,DOUBLE\n         LTR   R15,R15\n         BZ    *+8\n         STH   R15,O99CO\nCOPIESX  EQU   *\n         SPACE\n         LA    R4,FORM\n         TM    6(R4),X'80'         IS FORM SPECIFIED?\n         BZ    FORMX               NO, BRANCH\n         MVC   O99FO,=CL8' '       PAD FORM WITH BLANKS (4 BYTES)\n         L     R1,0(,R4)           POINT TO SPECIFIED FORM\n         LH    R15,4(,R4)          GET LENGTH\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   O99FO(0),0(R1)      FILL IN FORM\n         EX    R15,*-6\nFORMX    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         GET OUTPUT DDNAME                                *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   O99DD,=CL8' '       PAD DDNAME WITH BLANKS\n         LA    R4,OUTFIL\n         TM    6(R4),X'80'         IS OUTFILE SPECIFIED?\n         BZ    OUTFILX             NO, BRANCH\n         L     R1,0(,R4)           POINT TO SPECIFIED DDNAME\n         LH    R15,4(,R4)          GET LENGTH\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   O99DD(0),0(R1)      EXECUTED\n         EX    R15,*-6             FILL IN O99DD\n         DEVTYPE O99DD,DEVDATA     GET DEVICE TYPE\n         LTR   R15,R15             WAS DDNAME VALID\n         BZ    OUTFILX             YES, BRANCH\n         MVC   MSGWK(L'MSG14),MSG14\n         MVC   MSGWK+L'MSG14(8),O99DD\n         MVC   MSGWK+L'MSG14+8(L'MSG14B),MSG14B\n         LA    R1,MSGWK\n         LA    R0,L'MSG14+8+L'MSG14B\n         BAL   R14,PUTMSG          OUTFILE DDNAME NOT ALLOCATED\n         B     EXIT12              EXIT, RC=12\nOUTFILX  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         QUALIFY THE DSNAME IF NECESSARY                  *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R4,DSN\n         TM    6(R4),X'80'         IS DATASET NAME SPECIFIED?\n         BO    OKDSN               YES - BRANCH\n         LA    R1,MSG05            NO - JUST MEMBER NAME\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXIT12\nOKDSN    EQU   *\n         LA    R15,DSNAME+2\n         MVI   0(R15),C' '         BLANK THE DSNAME AREA\n         MVC   1(43,R15),0(R15)\n         SLR   R1,R1\n         STH   R1,DSNAME           ZERO DSNAME LENGTH\n         TM    6(R4),X'40'         IS DSN QUOTED?\n         BO    NOPREF              YES, SKIP PREFIXING\n         CLI   FILEKW+1,1          DSN TO BE TREATED AS DDNAME\n         BE    NOPREF              YES, SKIP PREFIXING\n         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX\n         L     R14,CPPLUPT         POINT TO UPT\n         USING UPT,R14\n         CLI   UPTPREFX,C'>'      IF PREFIX IS '>7BYTES' (8 BYTES)\n         BNE   PREF07                THEN\n         IC    R1,UPTPREFL+18        GET UPTPRF8L (SHOULD ALWAYS BE 8)\n         LTR   R1,R1                 IS IT ZERO\n         BZ    NOPREF                YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),UPTPREFX+17  COPY UPTPREF8\n         EX    R1,*-6              MOVE PREFIX TO DSNAME AREA\n         B     PREFDONE\nPREF07   EQU   *\n         IC    R1,UPTPREFL         GET LENGTH OF PREFIX\n         LTR   R1,R1               IS IT ZERO\n         BZ    NOPREF              YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),UPTPREFX\n         EX    R1,*-6              MOVE USERID TO DSNAME AREA\n         DROP  R14                 UPT\n.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID\n         L     R14,CPPLPSCB        POINT TO PSCB\n         USING PSCB,R14\n         IC    R1,PSCBUSRL         GET LENGTH OF USERID\n         LTR   R1,R1               IS IT ZERO\n         BZ    NOPREF              YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),PSCBUSER\n         EX    R1,*-6              MOVE USERID TO DSNAME AREA\n         DROP  R14                 PSCB\n.SKIPU   ANOP\nPREFDONE EQU   *\n         LA    R15,0(R1,R15)       POINT PAST USERID\n         MVI   0(R15),C'.'         APPEND PERIOD\n         LA    R15,1(,R15)         POINT PAST PERIOD\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         STH   R1,DSNAME           STORE LENGTH OF USERID PLUS 1\nNOPREF   EQU   *\n         LH    R1,4(,R4)           GET LENGTH\n         LR    R0,R1\n         AH    R0,DSNAME           ADD LENGTH OF PREFIX OR ZERO\n         STH   R0,DSNAME           SET COMBINED LENGTH\n         L     R14,0(,R4)          POINT TO DSN VALUE\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10                BRANCH AROUND EXECUTED MVC\n         MVC   0(0,R15),0(R14)     (EXECUTED)\n         EX    R1,*-6              MOVE DSN TO DSNAME (AFTER PREFIX)\n         SPACE\n************************************************************\n*                                                          *\n*        IF 'FILE' KEYWORD IS SPECIFIED,                   *\n*        GET DSNAME FROM JFCB USING FILE NAME.             *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   FILEKW+1,1          'FILE' SPECIFIED?\n         BNE   NOFILE              NO, BRANCH\n         CLI   DSNAME+1,8          IS LENGTH 8 OR LESS\n         BH    FILERR1             NO, BRANCH\n         DEVTYPE DSNAME+2,DEVDATA  GET DEVICE TYPE\n         LTR   R15,R15             WAS FILENAME VALID\n         BNZ   FILERR2             NO, BRANCH\n         TM    DEVDATA+2,X'20'     DIRECT ACCESS\n         BZ    FILERR3             NO, BRANCH\n         LA    R8,DYNDCBW\n         MVC   0(DYNDCBL,R8),DYNDCB\n         LA    R0,JFCB\n         LA    R1,DYNEXLST\n         ST    R0,0(,R1)\n         MVI   0(R1),X'87'\n         ST    R1,36(,R8)          DCBEXLST\n         MVC   40(8,R8),DSNAME+2   DCBDDNAM\n         MVC   DDSAVE,DSNAME+2\n         MVI   OPEN,X'80'\n         RDJFCB ((R8)),MF=(E,OPEN)\n         MVC   DSNAME+2(44),JFCB\n         LA    R1,DSNAME+45        LAST CHAR OF DSNAME\n         LA    R0,44               INITIAL LENGTH\nFILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   FILEB               YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH\nFILEB    STH   R0,DSNAME           STORE LENGTH OF DSNAME\n*        MVC   VOLUME(6),JFCB+118  GET VOLUME FROM JFCB\n         B     FILESPEC\nFILERR1  LA    R0,MSG14A\n         B     FILERR\nFILERR2  LA    R0,MSG14B\n         B     FILERR\nFILERR3  LA    R0,MSG14C\nFILERR   MVC   MSGWK(L'MSG14),MSG14\n         LA    R15,MSGWK+L'MSG14\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG14(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         LR    R14,R0 POINT TO MSG14A, B, OR C\n         MVC   0(L'MSG14A,R15),0(R14)\n         LA    R0,L'MSG14+L'MSG14A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     EXIT12\nNOFILE   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE DATASET                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         DROP  R1                  DAPL\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),=CL8' '\n         MVC   DA08UNIT,=CL8' '\n         MVC   DA08SER,=CL8' '\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         TM    14(R4),X'80'        MEMBER SPECIFIED?\n         BZ    MEMBX               NO - BRANCH\n         LH    R1,12(,R4)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,8(,R4)          GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   DA08MNM(0),0(R14)   MOVE MEMBER NAME\n         EX    R1,*-6\nMEMBX    EQU   *\n         TM    22(R4),X'80'        PASSWORD SPECIFIED?\n         BZ    PASSX               NO - BRANCH\n         LH    R1,20(,R4)          GET LENGTH OF PSWD\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,16(,R4)         GET ADDRESS OF PSWD\n         B     *+10\n         MVC   DA08PSWD(0),0(R14)  MOVE PSWD\n         EX    R1,*-6\nPASSX    EQU   *\n         LA    R1,MYDAPL\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BZ    OKDAIR\n         BAL   R14,DAIRFAIL\n         B     EXIT12\nOKDAIR   EQU   *\n         OI    STATUS,STALLOC      TELL CLEANUP TO FREE IT\n         LA    R15,MYDAPB\n         MVC   DDSAVE,DA08DDN\n         TM    DA08DSO,X'40'       IS DSORG SEQUENTIAL?\n         BO    OKDSORG             YES - BRANCH\n         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?\n         BO    OKDSORGP            YES, BRANCH\n*\n*              DSORG IS NEITHER PS NOR PO\n*              ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'\n*\nERRDSORG LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG\n         B     EXIT12\nOKDSORGP EQU   *\n         CLC   DA08MNM,=CL8' '     WAS MEMBER SPECIFIED?\n         BNE   OKDSORG             YES - BRANCH\n         LA    R1,MSG07\n         LA    R0,L'MSG07\n         BAL   R14,PUTMSG\n         B     EXIT12\nOKDSORG  EQU   *\n         DROP  R15                 DAPB08\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK FORMAT-1 DSCB FOR EMPTY DATA SET            *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCB WORDS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,12(,R1)          TIOT\n         LA    R1,24(,R1)          TOIENTRY\nDDLOOP   CLI   0(R1),0             END OF TIOT\n         BE    EXIT12              YES, BRANCH (NEVER HAPPENS)\n         CLC   4(8,R1),DDSAVE      DOES DDNAME MATCH\n         BE    DDFOUND\n         SLR   R15,R15\n         IC    R15,0(,R1)\n         LA    R1,0(R15,R1)\n         B     DDLOOP\nDDFOUND  L     R15,16(,R1)         TIOEFSRT-1\n         TM    18(R15),X'20'       DIRECT ACCESS DEVICE?\n         BZ    OBTX                NO, BYPASS OBTAIN\n         MVC   VOLSER,28(R15)      UCBVOLI\nOBTDSCB  LA    R1,OBTAINW\n         MVC   0(OBTAINL,R1),OBTAIN\n         LA    R0,DSNAME+2         DSN FOR OBTAIN\n         ST    R0,4(,R1)\n         LA    R0,VOLSER           VOLUME FOR OBTAIN\n         ST    R0,8(,R1)\n         LA    R0,MYDSCB           ANSWER AREA FOR OBTAIN\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS OBTAIN SUCCESSFUL\n         BZ    OKDSCB              YES, BRANCH\n         SPACE\n*               OBTAIN HAS FAILED. HOW CAN THAT HAPPEN WHEN\n*               DYNAMIC ALLOCATION WAS SUCCESSFUL? ONE WAY IT\n*               CAN HAPPEN IS IF THE DSNAME IS AN ALIAS ENTRY\n*               IN A VSAM CATALOG.  IF IT IS, A 'LOCATE' WILL\n*               PUT THE TRUE NAME IN THE DSNAME FIELD, SO NOW\n*               WE ISSUE A LOCATE, AND TRY THE OBTAIN AGAIN.\n         SPACE\n         TM    STATUS,STLOCAT      HAS LOCATE BEEN TRIED ALREADY?\n         BZ    ALIAS               NO, GO TRY IT\nERROBT   LA    R1,MSG09            UNABLE TO OBTAIN DSCB\n         LA    R0,L'MSG09\n         BAL   R14,PUTMSG\n         B     EXIT12\nALIAS    OI    STATUS,STLOCAT      TRIP THE SWITCH\n         LA    R1,LOCATEW\n         MVC   0(LOCATEL,R1),LOCATE\n         LA    R0,DSNAME+2         DSNAME FOR LOCATE\n         ST    R0,4(,R1)\n         LA    R0,LOCBUF           ANSWER AREA FOR LOCATE\n         ST    R0,12(,R1)\n         LOCATE (1)\n         LTR   15,15               WAS LOCATE SUCCESSFUL?\n         BZ    OBTDSCB             YES, GO OBTAIN AGAIN\n         B     ERROBT              NO, ISSUE MESSAGE\n         SPACE\nOKDSCB   NI    STATUS,255-STLOCAT  TURN OFF LOCATE SWITCH\n         TM    MYDSCB-44+X'52',X'42' DSORG = PS OR PO\n         BZ    ERRDSORG\n         TM    MYDSCB-44+X'54',X'C0' RECFM = U\n         BO    ERRRECFM\n         CLC   MYDSCB-44+X'62'(3),=X'000000' CHECK DS1LSTAR\n         BE    EMPTY               BRANCH IF EMPTY DATA SET\nOBTX     EQU   *\nFILESPEC EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE SYSOUT FILE  (UNLESS OUTFILE)        *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,O99PTR\n         LA    R0,O99DSECT\n         ST    R0,0(,R1)\n         OI    0(R1),X'80'\n         L     R15,=V(SYSO99)\n         BALR  R14,R15\n         SPACE\n         LTR   R15,R15\n         BNZ   EXIT12\n         SPACE\n************************************************************\n*                                                          *\n*         OPEN THE INPUT DATA SET AND SYSOUT FILE          *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,UT1DCBW\n         LA    R7,UT2DCBW\n         MVC   0(UT1DCBL,R6),UT1DCB\n         MVC   0(UT2DCBL,R7),UT2DCB\n         MVC   DDNAM(8,R6),DDSAVE\n         MVC   DDNAM(8,R7),O99DD\n         MVI   OPEN,X'80'\n         OPEN  ((R6),INPUT),MF=(E,OPEN)\n         CLI   CCKW+1,0\n         BNE   CCSPEC\n         TM    UT1RECFM,X'06'       IS RECFM A OR M\n         BZ    CCSPEC               BRANCH IF NEITHER\n         MVI   CCKW+1,1             IF A OR M, DEFAULT IS CCHAR\nCCSPEC   EQU   *\n         OPEN  ((R7),OUTPUT),MF=(E,OPEN)\n         TM    UT1RECFM,X'C0'      RECFM U\n         BNO   *+8                 NO\n         NI    UT1RECFM,255-X'C0'  YES, SET BOTH BITS OFF\n         MVI   PREV,0\n         MVC   BLINEV(4),=X'00060000' SET LRECL 6 FOR RECFM V\n         MVI   BLINE,X'40'\n         MVC   BLINE+1(255),BLINE\n         SPACE\n************************************************************\n*                                                          *\n*         COPY INPUT TO SYSOUT,  WITH CONVERSION           *\n*                                                          *\n************************************************************\n         SPACE\nLOOP     EQU   *\n         GET   (R6)\n         LR    R8,R1               POINT TO CARRIAGE CONTROL\n         CLI   CCKW+1,1\n         BNE   BYCC\n         TM    UT1RECFM,X'40'      RECFM V\n         BZ    NOTV                NO\n         AGO   .NOCAPS1\n         LH    R1,0(,R8)           YES, GET RECORD LENGTH\n         SH    R1,=H'6'            MINUS 4 FOR RDW, 1 FOR CC, 1 FOR EX\n         B     *+10\n         TR    5(0,R8),CAPS\n         EX    R1,*-6\n.NOCAPS1 ANOP\n         LA    R8,4(,R8)           YES, POINT TO CARRIAGE CONTROL\n         B     NOTF\nNOTV     EQU   *\n         AGO   .NOCAPS2\n         LH    R1,LRECL(,R6)\n         BCTR  R1,0                MINUS 1 FOR CC\n         BCTR  R1,0                MINUS 1 FOR EX\n         B     *+10\n         TR    1(0,R8),CAPS\n         EX    R1,*-6\n.NOCAPS2 ANOP\nNOTF     EQU   *\n         BAL   R14,CONVERT\n         LTR   R15,R15\n         BNZ   LOOP\n         TM    UT1RECFM,X'C0'      RECFM U\n         BNZ   *+10                NO\n         MVC   LRECL(2,R7),LRECL(R6) YES, COPY RECFM U RECORD LENGTH\n         TM    UT1RECFM,X'40'      RECFM V\n         BNO   *+8                 NO\n         S     R8,=F'4'            POINT TO RECFM V RECORD DESCRIPTOR\nBYCC     EQU   *\n         PUT   (R7),(R8)\n         B     LOOP\n         SPACE\n************************************************************\n*                                                          *\n*         SUBROUTINES                                      *\n*                                                          *\n************************************************************\n         SPACE\nUT1EXT   EQU   *\n         MVC   UT1RECFM,RECFM(R1)  SAVE INPUT RECFM\n         MVC   UT1LRECL,LRECL(R1)  SAVE INPUT LRECL\n         MVC   UT1BLKSI,BLKSI(R1)  SAVE INPUT BLKSIZE\n         BR    R14\nUT2EXT   EQU   *\n         CLI   RECFM(R1),0\n         BNE   UT2EXTA\n         MVC   RECFM(1,R1),UT1RECFM\n         NI    RECFM(R1),255-X'02'  MACHINE OFF\n         CLI   CCKW+1,1             CCHAR SPEC, OR INPUT RECFM A/M\n         BNE   *+8                  NO, BYPASS CC PROCESSING\n         OI    RECFM(R1),X'04'      ASA ON\nUT2EXTA  EQU   *\n         CLC   LRECL(2,R1),=H'0'\n         BNE   *+10\n         MVC   LRECL(2,R1),UT1LRECL\n         CLC   BLKSI(2,R1),=H'0'\n         BNE   *+10\n         MVC   BLKSI(2,R1),UT1BLKSI\n         BR    R14\nUT1EOD   EQU   *\n         MVI   CLOSE,X'80'\n         CLOSE ((R6)),MF=(E,CLOSE)\n         CLOSE ((R7)),MF=(E,CLOSE)\n         B     EXIT0\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CONVERT CARRIAGE CONTROLS TO ASA                            *\n*                                                                     *\n***********************************************************************\n*\n*               ANY RECORD NOT CONTAINING A MACHINE CC WILL BE\n*               COPIED WITH ITS OWN CC, EXCEPT:\n*                   IF IT IS THE FIRST RECORD OF ITS TYPE\n*                   AND IS A SINGLE-SPACE IT WILL BE CHANGED TO\n*                   SKIP-TO-CHANNEL 1.\n*\n*               A RECORD CONTAINING A MACHINE CC (WRITE) WILL BE\n*               COPIED WITH AN ASA BASED ON THE PREVIOUS MACHINE CC.\n*               IF THE RECORD WAS NOT PRECEDED WITH A MACHINE CC\n*               RECORD, IT IS WRITTEN WITH SKIP-TO-CHANNEL 1.\n*\n*               A RECORD CONTAINING A MACHINE CC (IMMEDIATE) WILL\n*               NOT BE COPIED, BUT ITS CC WILL DETERMINE THE CC\n*               OF THE NEXT RECORD (UNLESS NEXT IS ASA OR IMM).\n*\n*               IF A MACHINE WRTSP1 OR IMMSP1 IS FOLLOWED BY\n*               A MACHINE IMMEDIATE SKIP, THE SPACE 1 WILL BE\n*               DROPPED.  THIS IS BECAUSE A BLANK LINE WOULD\n*               HAVE TO BE WRITTEN, AND IT IS PROBABLY UNNECESSARY.\n*               IF THIS EVER CAUSES A PROBLEM, IT IS EASY TO REMOVE\n*               THIS LOGIC AND WRITE THE BLANK LINE.  JUST REMOVE\n*               THE GROUP OF INSTRUCTIONS MARKED '-OPT-'\n*\n*               CONDITIONS NOT PROPERLY HANDLED (BUT INSIGNIFICANT).\n*                  IMMEDIATE FOLLOWED BY ASA OR EOF.\n*                     (IGNORED)\n*                  WRITE FOLLOWED BY ASA OR EOF.\n*                     (SP/SK IGNORED)\n*\nCONVERT  MVC   HPREV,PREV\n         TRT   0(1,R8),TABMACH     MACHINE CC\n         BZ    ASA                 NO, BRANCH\n*\n*               MACHINE CC\n*\n         STC   R2,PREV             STORE ASA FOR NEXT RECORD\n         TM    0(R8),X'02'         IS IT IMMEDIATE\n         BZ    PUTP                NO, ITS A WRITE\n         CLI   HPREV,0             IS THERE AN OUTSTANDING ACTION\n         BE    NOPUT               NO, BRANCH\n         CLI   HPREV,C'+'          WAS PREV WRTSP0 OR IMMSP0\n         BE    NOPUT               YES, BRANCH\n         CLI   HPREV,C' '   -OPT-  WAS PREV WRTSP1 OR IMMSP1\n         BNE   PREVSIG      -OPT-  NO, ITS PROBABLY SIGNIFICANT\n         TM    0(R8),X'80'  -OPT-  IS THIS A SKIP, NOT A SPACE\n         BO    NOPUT        -OPT-  ITS A SKIP, SO PREV CAN BE IGNORED\nPREVSIG  MVC   BLINE(1),HPREV      WRITE A BLANK LINE WITH HPREV\n         LA    R8,BLINE\n         SR    R15,R15             WRITE THE LINE POINTED TO BY R8\n         BR    R14\nNOPUT    LA    R15,4               DO NOT WRITE A LINE\n         BR    R14\n         SPACE\nPUTP     MVC   0(1,R8),HPREV\n         CLI   0(R8),0             IS THERE A CC BASED ON PREV RECORD\n         BNE   PUT                 YES, GO USE IT\n*\n*               WE'VE HIT A MACHINE WRT CC NOT PRECEDED BY\n*               A MACHINE CC.\n*               MAKE IT SKIP TO CHANNEL 1.\n*\n         MVI   0(R8),C'1'\n         B     PUT\n*\n*               ASA CC\n*\nASA      CLI   PREV,0              WAS PREVIOUS RECORD MACHINE\n         BE    PUT                 NO, BRANCH\n         MVI   PREV,0\n*\n*               WE'VE HIT AN ASA RECORD NOT PRECEDED BY AN ASA RECORD.\n*\n*               IF IT'S A SINGLE SPACE, CHANGE IT TO SKIP TO CH 1.\n*\n         CLI   0(R8),C' '\n         BNE   PUT\n         MVI   0(R8),C'1'\nPUT      SR    R15,R15\n         BR    R14\n         SPACE\n         DC    0D'0'\nTABMACH  DC    256X'00'\n         ORG   TABMACH+X'01'       WRT SP0\n         DC    C'+'\n         ORG   TABMACH+X'09'       WRT SP1\n         DC    C' '\n         ORG   TABMACH+X'11'       WRT SP2\n         DC    C'0'\n         ORG   TABMACH+X'19'       WRT SP3\n         DC    C'-'\n         ORG   TABMACH+X'89'       WRT SK1\n         DC    C'1'\n         ORG   TABMACH+X'91'       WRT SK2\n         DC    C'2'\n         ORG   TABMACH+X'99'       WRT SK3\n         DC    C'3'\n         ORG   TABMACH+X'A1'       WRT SK4\n         DC    C'4'\n         ORG   TABMACH+X'A9'       WRT SK5\n         DC    C'5'\n         ORG   TABMACH+X'B1'       WRT SK6\n         DC    C'6'\n         ORG   TABMACH+X'B9'       WRT SK7\n         DC    C'7'\n         ORG   TABMACH+X'C1'       WRT SK8\n         DC    C'8'\n         ORG   TABMACH+X'C9'       WRT SK9\n         DC    C'9'\n         ORG   TABMACH+X'D1'       WRT SK10\n         DC    C'A'\n         ORG   TABMACH+X'D9'       WRT SK11\n         DC    C'B'\n         ORG   TABMACH+X'E1'       WRT SK12\n         DC    C'C'\n         ORG   TABMACH+X'03'       IMM SP0 (NO-OP)\n         DC    C'+'\n         ORG   TABMACH+X'0B'       IMM SP1\n         DC    C' '\n         ORG   TABMACH+X'13'       IMM SP2\n         DC    C'0'\n         ORG   TABMACH+X'1B'       IMM SP3\n         DC    C'-'\n         ORG   TABMACH+X'8B'       IMM SK1\n         DC    C'1'\n         ORG   TABMACH+X'93'       IMM SK2\n         DC    C'2'\n         ORG   TABMACH+X'9B'       IMM SK3\n         DC    C'3'\n         ORG   TABMACH+X'A3'       IMM SK4\n         DC    C'4'\n         ORG   TABMACH+X'AB'       IMM SK5\n         DC    C'5'\n         ORG   TABMACH+X'B3'       IMM SK6\n         DC    C'6'\n         ORG   TABMACH+X'BB'       IMM SK7\n         DC    C'7'\n         ORG   TABMACH+X'C3'       IMM SK8\n         DC    C'8'\n         ORG   TABMACH+X'CB'       IMM SK9\n         DC    C'9'\n         ORG   TABMACH+X'D3'       IMM SK10\n         DC    C'A'\n         ORG   TABMACH+X'DB'       IMM SK11\n         DC    C'B'\n         ORG   TABMACH+X'E3'       IMM SK12\n         DC    C'C'\n         ORG\n         SPACE\n************************************************************\n*                                                          *\n*         TERMINATE                                        *\n*                                                          *\n************************************************************\n         SPACE\nEXIT12   LA    R15,12\n         B     EXITRC\nEXIT0    SR    R15,R15\n         SPACE\nEXITRC   CH    R15,RC\n         BNH   *+8\n         STH   R15,RC              SET HIGHEST RC\n         TM    STATUS,STALLOC      FREE REQUIRED?\n         BZ    NOFREE\n         LA    R1,MYDAPL\n         LA    R15,MYDAPB\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,DDSAVE\n         MVC   DA18MNM(8),=CL8' '\n         MVC   DA18SCLS(2),=CL8' '\n         BAL   R14,CALLDAIR        UNALLOCATE\n         NI    STATUS,255-STALLOC  UNALLOCATED\n         DROP  R15                 DAPB18\nNOFREE   EQU   *\n         SPACE\n         IKJRLSA MYANS\n         SPACE\n         CLI   RC+1,0              IS RC ZERO?\n         BZ    STACKDX             YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nSTACKDX  EQU   *\n         SPACE\n         LH    R15,RC\n         B     EXITRCC\n         SPACE\n************************************************************\n*                                                          *\n*         CALL IKJDAIR SERVICE ROUTINE                     *\n*                                                          *\n************************************************************\n          SPACE\nCALLDAIR ST    R14,DAIRREGS\n         AIF   (NOT &MVS).SKIP6\n         L     R15,16\n         TM    732(R15),X'80'     CVTDAIR\n         BNO   DAIRLINK\n         L     R15,732(,R15)\n         BALR  R14,R15\n         B     DAIRFINI\nDAIRLINK EQU   *\n.SKIP6   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIRFINI L     R14,DAIRREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP7\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1                  DFDSECTD\n.SKIP7   ANOP\n         AIF   (&MVS).SKIP8\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP8   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,MYIOPL)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         LA    R1,MYIOPL\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE 1\nERRRECFM LA    R1,MSGRECFM\n         LA    R0,L'MSGRECFM\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nEMPTY    LA    R1,MSGEMPTY\n         LA    R0,L'MSGEMPTY\n         BAL   R14,PUTMSG\n         B     EXIT12\n         SPACE\nEXITRCC  LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nRECFM    EQU   36\nDDNAM    EQU   40\nOFLGS    EQU   48\nLRECL    EQU   82\nBLKSI    EQU   62\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         PRINT NOGEN\n         SPACE\nDYNDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(GL),                       +\n               EODAD=0,SYNAD=0,EROPT=ACC\nDYNDCBL  EQU   *-DYNDCB\n         SPACE\nUT1DCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(GL),                       +\n               EODAD=UT1EOD,EXLST=UT1EXL\nUT1DCBL  EQU   *-UT1DCB\n         SPACE\nUT2DCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(PM),EXLST=UT2EXL\nUT2DCBL  EQU   *-UT2DCB\n         SPACE\n         PRINT GEN\n         SPACE\nUT1EXL   DC    0F'0',X'85',AL3(UT1EXT)\nUT2EXL   DC    0F'0',X'85',AL3(UT2EXT)\n         SPACE\nOBTAIN   CAMLST SEARCH,2,3,4\nOBTAINL  EQU   *-OBTAIN\n         SPACE\nLOCATE   CAMLST NAME,2,,4\nLOCATEL  EQU   *-LOCATE\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'IKJ58503I DATA SET '\nMSG02A   DC    C' NOT IN CATALOG'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG04    DC    C'UNABLE TO OPEN DATASET'\nMSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED OR SEQUEN+\n               TIAL'\nMSG07    DC    C'DATA SET IS PARTITIONED, MEMBER NOT SPECIFIED'\nMSG08    DC    C'SPECIFIED MEMBER NOT FOUND IN DATASET'\nMSG09    DC    C'UNABLE TO OBTAIN DSCB FOR DATA SET'\nMSG10    DC    C'UNABLE TO OPEN SYSOUT FILE'\nMSG11    DC    C'DATA SET NOT PRINTED - NOT FIXED LENGTH 80'\nMSG14    DC    C'FILENAME '\nMSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS  '\nMSG14B   DC    C' IS NOT CURRENTLY ALLOCATED       '\nMSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET '\nMSGRECFM DC    C'RECORD FORMAT U NOT SUPPORTED'\nMSGEMPTY DC    C'DATA SET IS EMPTY'\nMSGDAIR  DC    C'UNABLE TO ALLOCATE'\n         LTORG\n         DC    0D'0'\n         AGO   .NOCAPS3\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n.NOCAPS3 ANOP\n         SPACE\nPCLADDR  DC    0D'0'               END OF CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nDSPRPCL  IKJPARM\nDSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME'\nCLASS    IKJIDENT 'SYSOUT CLASS',                                      +\n               FIRST=NONATNUM,MAXLNTH=1,                               +\n               PROMPT='SYSOUT CLASS'\nFILEKW   IKJKEYWD\n         IKJNAME 'FILE'\nQUICKW   IKJKEYWD\n         IKJNAME 'Q'\nNUMKW    IKJKEYWD\n         IKJNAME 'NUM'\n         IKJNAME 'NONUM'\nCCKW     IKJKEYWD\n         IKJNAME 'CCHAR'\n         IKJNAME 'NOCCHAR'\nDESTKW   IKJKEYWD\n         IKJNAME 'DEST',SUBFLD=DESTSF\nCOPIESKW IKJKEYWD\n         IKJNAME 'COPIES',SUBFLD=COPIESSF\nOUTFILKW IKJKEYWD\n         IKJNAME 'OUTFILE',SUBFLD=OUTFILSF\nFORMKW   IKJKEYWD\n         IKJNAME 'FORM',SUBFLD=FORMSF\nDESTSF   IKJSUBF\nDEST     IKJIDENT 'DESTINATION',                                       +\n               FIRST=ALPHA,OTHER=ANY,MAXLNTH=8,                        +\n               PROMPT='DESTINATION'\nCOPIESSF IKJSUBF\nCOPIES   IKJIDENT 'COPIES',                                            +\n               FIRST=NUMERIC,OTHER=NUMERIC,MAXLNTH=2,                  +\n               PROMPT='COPIES'\nOUTFILSF IKJSUBF\nOUTFIL   IKJIDENT 'DDNAME',                                            +\n               FIRST=ALPHA,OTHER=ALPHANUM,MAXLNTH=8,                   +\n               PROMPT='OUTPUT DDNAME'\nFORMSF   IKJSUBF\nFORM     IKJIDENT 'FORM',                                              +\n               FIRST=ANY,OTHER=ANY,MAXLNTH=4,                          +\n               PROMPT='FORM'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nLINKAREA DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL256           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  ADDRESS OF IKJPUTL\nMYSTPB   DS    0F                 5 WORDS USED BY STACK DELETE\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDFPB   DS    5F\nDSNAME   DS    H,CL44,CL9          PADDING FOR PREFIXL8.\nVOLSER   DS    CL6\nLOCATEW  DS    0F\nOBTAINW  DS    4F\nLOCBUF   DS    0D                  USES NEXT 265 BYTES\nMYDSCB   DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR\nMSGWK    DS    CL128\nSTATUS   DS    X\nSTALLOC  EQU   X'80'\nSTOPEN1  EQU   X'40'\nSTOPEN2  EQU   X'20'\nSTABEND  EQU   X'10'\nSTLOCAT  EQU   X'08'\nRC       DS    H\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nDOUBLE   DS    D\nEIGHT    DS    CL8\nDDSAVE   DS    CL8\nDAIRREGS DS    F\nDYNEXLST DS    2F\nKOUNT    DS    F\nKOUNTSP  DS    F\nOPEN     DS    F\nCLOSE    DS    F\nDYNDCBW  DS    0D,XL(DYNDCBL)\nUT1DCBW  DS    0D,XL(UT1DCBL)\nUT2DCBW  DS    0D,XL(UT2DCBL)\nUT1LRECL DS    H\nUT1BLKSI DS    H\nUT1RECFM DS    X\nDEVDATA  DS    2F\nJFCB     DS    0F,CL176\nPREV     DS    C\nHPREV    DS    C\nBLINEV   DS    F\nBLINE    DS    0F,CL256\nPARMPTR  DS    2F\nPARM     DS    H\nALTDD    DS    H,CL72\nO99PTR   DS    F\nO99DSECT DS    0D\nO99DD    DS    CL8                 DDNAME\nO99SO    DS    CL1                 SYSOUT CLASS\nO99FC    DS    C                   FREE=CLOSE IF 'C'\nO99HO    DS    C                   HOLD=YES IF 'H'\n         DS    C                   RESERVED\nO99CPPL  DS    A                   ADDRESS OF CPPL OR ZERO\nO99DE    DS    CL8                 DEST\nO99PG    DS    CL8                 PROGRAM NAME OR 'INTRDR'\nO99AT    DS    CL8                 ATTRIBUTE LIST NAME\nO99FO    DS    CL4                 FORM NUMBER\nO99CO    DS    H                   COPIES\n         DS    CL2                 RESERVED\nO99RSC   DS    CL4                 REASON CODES RETURNED HERE\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         IKJPSCB\n         SPACE 2\n         AIF   (NOT &MVS).SKIP12\n         IKJEFFDF DFDSECT=YES\n.SKIP12  ANOP\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n         TITLE '   S Y S O U T 9 9  '\n***********************************************************************\n*                                                                     *\n*        'SYSOUT99' SUBPROGRAM                                        *\n*                                                                     *\n***********************************************************************\n*\n*        WRITTEN BY. BILL GODFREY, PRC (PLANNING RESEARCH CORPORATION).\n*        INSTALLATION. PRC, MCLEAN VA\n*        DATE WRITTEN. NOV 21 1975\n*        DATE UPDATED. JANUARY 26 1982.\n*        ATTRIBUTES. RE-ENTRANT.\n*        MACROS. GETMAIN FREEMAIN LINK IEFZB4D0 IEFZB4D2 IKJEFFDF.\n*\n*         THIS SUBPROGRAM ALLOCATES A SYSOUT DATASET.\n*         THE OPERATING SYSTEM MUST BE OS/VS2 MVS.\n*\n*         AT ENTRY REGISTER 1 POINTS TO A FULLWORD\n*         WHICH CONTAINS THE ADDRESS OF THE BLOCK DESCRIBED\n*         BY THE O99DSECT DSECT IN THIS CODE.\n*\n*         UPON RETURN TO CALLER, REGISTER 15 IS ZERO IF THE\n*         ALLOCATION WAS SUCCESSFUL.  OTHERWISE REGISTER 15\n*         IS NONZERO AND A MESSAGE WAS ISSUED BY IKJEFF18.\n*\n*         30MAR78 - FORM NUMBER ADDED\n*         03DEC80 - O99DSECT FIELDS SHUFFLED. COMMENTS ADDED.\n*                   FREE=CLOSE FORCED IF INTRDR.\n*         02MAR81 - ATTRIBUTE LIST NAME ADDED.\n*                   SUBPROGRAM RENAMED SYSOUT99 FROM SYSOOT.\n*                   SYMBOL 'PRM' PREFIX CHANGED TO 'O99'.\n*         10APR81 - DEST LENGTH MVC CHANGED FROM 7 TO 8.\n*         26JAN82 - RETURN CODE LOADED FROM MYDFRC.\n*\n*         O99DD   DS CL8      DDNAME (OR BLANKS IF TO BE RETURNED)\n*         O99SO   DS C        SYSOUT CLASS\n*         O99FC   DS C        'C' IF FREE=CLOSE REQUESTED\n*         O99HO   DS C        'H' IF HOLD=YES REQUESTED\n*         O99RSV1 DS C        RESERVED\n*         O99CPPL DS A        ADDRESS OF CPPL OR ZERO (FOR MESSAGE)\n*         O99DE   DS CL8      DEST OR BLANKS\n*         O99PG   DS CL8      PROGRAM NAME OR 'INTRDR' OR BLANKS\n*         O99AT   DS CL8      ATTRIBUTE LIST NAME\n*         O99FO   DS CL4      FORM NUMBER OR BLANKS\n*         O99CO   DS H        COPIES\n*         O99RSV2 DS CL2      RESERVED\n*         O99RSC  DS CL4      REASON CODES RETURNED HERE\n*\n*$DOC$*****************************************************************\n         SPACE\nSYSOUT99 START\n         ENTRY SYSO99         SHORT NAME FOR PL1 AND FORTRAN\n         USING *,R12\nSYSO99   B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'SYSOUT99 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@PROLOG  STM   14,12,12(R13)\n         LR    R12,R15\n         LR    R2,R1               SAVE PARAMETER LIST ADDRESS\n         GETMAIN R,LV=@DATAL\n         ST    R13,4(,R1)\n         ST    R1,8(,R13)\n         LR    R13,R1\n         USING @DATA,R13\n         SPACE\n         L     R2,0(,R2)           POINT TO PARAMETER BLOCK\n         USING O99DSECT,R2\n         SPACE\n         USING S99TUNIT,R3\n         SPACE\n         LA    R1,MY99RB\n         ST    R1,MY99RBP\n         OI    MY99RBP,X'80'\n         XC    MY99RB(20),MY99RB\n         LA    R14,MY99RB\n         USING S99RB,R14\n         MVI   S99RBLN,20\n         MVI   S99VERB,S99VRBAL\n         LA    R1,MY99TUPL\n         ST    R1,S99TXTPP\n         DROP  R14                 S99RB\n         SPACE\n         XC    MY99TUPL(TUPL$LEN),MY99TUPL\n         OI    MY99TUPL+TUPL$LEN-4,X'80'\n*\n*              PROCESS DDNAME\n*\n         MVI   MYDDRET,0\n         LA    R3,MY99TXDD\n         ST    R3,MY99TUDD\n         CLI   O99DD,X'40'         DD TO BE RETURNED?\n         BE    DDRET               YES - BRANCH\n         CLI   O99DD,X'00'         DD TO BE RETURNED?\n         BE    DDRET               YES - BRANCH\n*\n*              DDNAME IS SPECIFIED\n*\n         LA    R15,DALDDNAM\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,8\n         STH   R15,S99TULNG\n         MVC   S99TUPAR(8),O99DD\n         B     PROCSO\n*\n*              DDNAME NOT SPECIFIED\n*\nDDRET    LA    R15,DALRTDDN\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,8\n         STH   R15,S99TULNG\n         MVC   S99TUPAR(8),=CL8' '\n         MVI   MYDDRET,C'R'\n*\n*              PROCESS SYSOUT CLASS\n*\nPROCSO   LA    R3,MY99TXSO\n         ST    R3,MY99TUSO\n         LA    R15,DALSYSOU\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,1\n         STH   R15,S99TULNG\n         MVC   S99TUPAR(1),O99SO\n         CLI   O99SO,X'40'         CLASS SPECIFIED?\n         BE    NOSO                NO - BRANCH\n         CLI   O99SO,X'00'         CLASS SPECIFIED?\n         BNE   XITSO               YES - BRANCH\nNOSO     SR    R15,R15             INDICATE NO ENTRIES\n         STH   R15,S99TUNUM         FOR THIS KEY\nXITSO    EQU   *\n*\n*              PROCESS COPIES\n*\n         CLC   O99CO,=H'0'         IS COPIES ZERO\n         BZ    NOCO                YES, DO NOT SPECIFY COPIES\n         LA    R3,MY99TXCO\n         ST    R3,MY99TUCO\n         LA    R15,DALCOPYS\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n*                                  O99CO IS 2 BYTES TO ALLOW COBOL\n*                                  CALLERS TO SPECIFY PIC S(2) COMP.\n*                                  COBOL DOESNT HAVE 1 BYTE COMP.\n         LA    R15,1               SVC99 ONLY ALLOWS 1 BYTE.\n         STH   R15,S99TULNG\n         MVC   S99TUPAR(1),O99CO+1\nNOCO     EQU   *\n*\n*              PROCESS DEST\n*\n         CLI   O99DE,X'40'         DEST?\n         BE    NODE                NO - BRANCH\n         CLI   O99DE,X'00'         DEST?\n         BE    NODE                NO - BRANCH\n         LA    R3,MY99TXDE\n         ST    R3,MY99TUDE\n         LA    R15,DALSUSER\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,8               LENGTH\n         STH   R15,S99TULNG\n         MVC   S99TUPAR(8),O99DE\nNODE     EQU   *\n*\n*              PROCESS HOLD\n*\n         CLI   O99HO,C'H'          HOLD?\n         BNE   NOHO                NO - BRANCH\n         LA    R3,MY99TXHO\n         ST    R3,MY99TUHO\n         LA    R15,DALSHOLD\n         STH   R15,S99TUKEY\n         LA    R15,0\n         STH   R15,S99TUNUM\nNOHO     EQU   *\n*\n*              PROCESS PROGRAM NAME OR INTRDR\n*\n         CLI   O99PG,X'40'\n         BE    NOPG\n         CLI   O99PG,X'00'\n         BE    NOPG\n         LA    R3,MY99TXPG\n         ST    R3,MY99TUPG\n         LA    R15,DALSPGNM\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,8               SET LENGTH INITIALLY TO 8\n         LA    R1,O99PG+7 POINT TO 8TH CHAR OF NAME\nPGLOOP   CLI   0(R1),X'40'         BLANK?\n         BNE   PGLEN               NO - BRANCH TO STORE LENGTH\n         BCTR  R15,0               YES - DECREMENT LENGTH BY 1\n         BCT   R1,PGLOOP           POINT BACK 1 CHAR AND BRANCH\nPGLEN    STH   R15,S99TULNG\n         MVC   S99TUPAR(8),O99PG\nNOPG     EQU   *\n*\n*              PROCESS ATTRIBUTE LIST NAME\n*\n         CLI   O99AT,X'40'\n         BE    NOAT\n         CLI   O99AT,X'00'\n         BE    NOAT\n         LA    R3,MY99TXAT\n         ST    R3,MY99TUAT\n         LA    R15,DALDCBDD\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,8               SET LENGTH INITIALLY TO 8\n         LA    R1,O99AT+7 POINT TO 8TH CHAR OF NAME\nATLOOP   CLI   0(R1),X'40'         BLANK?\n         BNE   ATLEN               NO - BRANCH TO STORE LENGTH\n         BCTR  R15,0               YES - DECREMENT LENGTH BY 1\n         BCT   R1,ATLOOP           POINT BACK 1 CHAR AND BRANCH\nATLEN    STH   R15,S99TULNG\n         MVC   S99TUPAR(8),O99AT\nNOAT     EQU   *\n*\n*              PROCESS FORM\n*\n         CLI   O99FO,X'40'         FORM?\n         BE    NOFO                NO - BRANCH\n         CLI   O99FO,X'00'         FORM?\n         BE    NOFO\n         LA    R3,MY99TXFO\n         ST    R3,MY99TUFO\n         LA    R15,DALSFMNO\n         STH   R15,S99TUKEY\n         LA    R15,1\n         STH   R15,S99TUNUM\n         LA    R15,4\n         STH   R15,S99TULNG\n         MVC   S99TUPAR(4),O99FO\nNOFO     EQU   *\n*\n*              PROCESS PERMANENTLY ALLOC\n*\n         LA    R3,MY99TXPE\n         ST    R3,MY99TUPE\n         LA    R15,DALPERMA\n         STH   R15,S99TUKEY\n         LA    R15,0\n         STH   R15,S99TUNUM\n*\n*              PROCESS FREE=CLOSE\n*\n         CLC   O99PG,=CL8'INTRDR'  IF INTERNAL READER\n         BE    FC                  THEN FORCE FREE=CLOSE\n         CLI   O99FC,C'C'          FREE=CLOSE REQUESTED?\n         BNE   NOFC                NO - BRANCH\nFC       LA    R3,MY99TXFC\n         ST    R3,MY99TUFC\n         LA    R15,DALCLOSE\n         STH   R15,S99TUKEY\n         LA    R15,0\n         STH   R15,S99TUNUM\nNOFC     EQU   *\n*\n*              ALLOCATE\n*\n         LA    R1,MY99RBP\n         SVC   99\n*\n*              TEST RETURN CODE\n*\n         LTR   R15,R15\n         BNZ   DAIRFAIL\n         SPACE\n         CLI   MYDDRET,C'R'        DDNAME TO BE RETURNED?\n         BNE   EXIT                NO - BRANCH\n         LA    R3,MY99TXDD\n         MVC   O99DD,=CL8' '       PAD WITH BLANKS\n         LH    R14,S99TULNG\n         BCTR  R14,0               LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   O99DD(0),S99TUPAR   (EXECUTED)\n         EX    R14,*-6             MOVE DDNAME\n         B     EXIT\n*\n*              DIAGNOSE ALLOCATION ERROR\n*\nDAIRFAIL LA    R14,MY99RB\n         USING S99RB,R14\n         MVC   O99RSC,S99RSC       PASS REASON CODE TO CALLER\n         DROP  R14                 S99RB\n         LA    R1,MYDFAREA\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC          STORE SVC 99 RETURN CODE\n         LA    R15,MYDFRC\n         ST    R15,DFRCP           STORE ADDRESS OF RETURN CODE\n         LA    R15,MY99RB\n         ST    R15,DFS99RBP        STORE ADDRESS OF SVC 99 REQUEST BLK\n         SR    R15,R15\n         ST    R15,MYJEFF02        STORE ZERO IN IKJEFF02 ADDRESS\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02        STORE ADDRESS OF ZERO\n         LA    R15,DFSVC99\n         STH   R15,MYDFID          STORE TYPE OF REQUEST (SVC 99)\n         LA    R15,MYDFID\n         ST    R15,DFIDP           STORE ADDRESS OF TYPE\n         L     R15,O99CPPL\n         ST    R15,DFCPPLP         STORE CPPL ADDRESS OR ZERO\n         CLC   DFCPPLP+1(3),=AL3(0) CPPL ADDRESS SUPPLIED\n         BNE   *+8                 YES - USE PUTLINE\n         OI    MYDFID,DFWTP        NO - USE WRITE-TO-PROGRAMMER\n         LINK  EP=IKJEFF18\n         L     R15,MYDFRC          RETURN SVC 99 RETURN CODE\n         B     EXIT\n*\n*\n*\nEXIT0    SR    15,15               RETURN CODE ZERO\nEXIT     LR    R1,R13              AREA TO BE FREED\n         L     R13,4(,R13)         RESTORE OLD R13\n         LR    R2,R15              SAVE RETURN CODE\n         FREEMAIN R,A=(1),LV=@DATAL\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    0,12,20(R13)        RESTORE OLD REGISTERS\n         L     R14,12(,R13)        RESTORE RETURN ADDRESS\n         BR    R14                 RETURN\n         SPACE 3\n         LTORG\n         DC    0D'0'\n         SPACE\nO99DSECT DSECT\nO99DD    DS    CL8                 DDNAME\nO99SO    DS    CL1                 SYSOUT CLASS\nO99FC    DS    C                   FREE=CLOSE IF 'C'\nO99HO    DS    C                   HOLD=YES IF 'H'\n         DS    C                   RESERVED\nO99CPPL  DS    A                   ADDRESS OF CPPL OR ZERO\nO99DE    DS    CL8                 DEST\nO99PG    DS    CL8                 PROGRAM NAME OR 'INTRDR'\nO99AT    DS    CL8                 ATTRIBUTE LIST NAME\nO99FO    DS    CL4                 FORM NUMBER\nO99CO    DS    H                   COPIES\n         DS    CL2                 RESERVED\nO99RSC   DS    CL4                 REASON CODES RETURNED HERE\n         SPACE 3\n@DATA    DSECT\n         DS    18F\nMY99RBP  DS    A                   SVC 99 RB POINTER\nMY99RB   DS    5A                  SVC 99 REQUEST BLOCK\n*\n* TEXT UNIT POINTERS\n*\nMY99TUPL DS    0A                  SVC 99 TEXT LIST POINTERS\nMY99TUDD DS    A                   TEXT UNIT POINTER, DDNAME\nMY99TUSO DS    A                   TEXT UNIT POINTER, SYSOUT CLASS\nMY99TUCO DS    A                   TEXT UNIT POINTER, COPIES\nMY99TUDE DS    A                   TEXT UNIT POINTER, DEST\nMY99TUHO DS    A                   TEXT UNIT POINTER, HOLD\nMY99TUPG DS    A                   TEXT UNIT POINTER, PGM NAME\nMY99TUPE DS    A                   TEXT UNIT POINTER, PERM\nMY99TUFC DS    A                   TEXT UNIT POINTER, FREE=CLOSE\nMY99TUFO DS    A                   TEXT UNIT POINTER, USING DD REF\nMY99TUAT DS    A                   TEXT UNIT POINTER, ATTR LIST NAME\n         DS    A                   HI ORDER BIT ON\nTUPL$LEN EQU   *-MY99TUPL\n*\n* TEXT UNITS\n*\nMY99TXDD DS    3H,CL8              TEXT UNIT, DDNAME\nMY99TXSO DS    3H,CL1              TEXT UNIT, SYSOUT CLASS\nMY99TXCO DS    3H,H                TEXT UNIT, COPIES\nMY99TXDE DS    3H,CL8              TEXT UNIT, DEST\nMY99TXHO DS    3H                  TEXT UNIT, HOLD=YES\nMY99TXPG DS    3H,CL8              TEXT UNIT, PROGRAM NAME\nMY99TXPE DS    3H                  TEXT UNIT, PERM\nMY99TXFC DS    3H                  TEXT UNIT, FREE=CLOSE\nMY99TXFO DS    3H,CL4              TEXT UNIT, FORM NUMBER\nMY99TXAT DS    3H,CL8              TEXT UNIT, ATTRIBUTE LIST NAME\n*\n*\n*\nMYDFAREA DS    5F                  IKJEFF18 PARAMETER BLOCK\nMYDFRC   DS    F                   SVC 99 RETURN CODE\nMYJEFF02 DS    F                   MESSAGE ROUTINE (ZERO)\nMYDFID   DS    H                   TYPE OF FAILURE (SVC 99)\nMYDDRET  DS    C                   SWITCH\n         DS    0D\n@DATAL   EQU   *-@DATA\n         EJECT\n         IEFZB4D0\n         EJECT\n         IEFZB4D2\n         EJECT\n         IKJEFFDF DFDSECT=YES\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DSPRINT#": {"ttr": 4618, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x0e\\x00\\x0e\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 14, "newlines": 14, "modlines": 0, "user": "BG@PRC"}, "text": ")F FUNCTION -\n  THE DSPRINT COMMAND PRINTS A DATA SET TO A SPECIFIED SYSOUT CLASS.\n\n)X SYNTAX  -\n         DSPRINT  'DSNAME'  'CLASS'\n  REQUIRED - 'DSNAME'  'CLASS'\n  DEFAULTS - NONE\n  ALIAS    - NONE\n)O OPERANDS -\n  'DSNAME'   THE DATA SET TO BE PRINTED.\n  'CLASS'    THE SYSOUT CLASS.\n))CCHAR    - THE DATA SET CONTAINS CARRIAGE CONTROLS IN COLUMN 1\n))NOCCHAR  - THE DATA SET DOES NOT CONTAIN CARRIAGE CONTROLS.\n))NONUM    - A VALID KEYWORD, BUT IT IS IGNORED.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FINDAZAP": {"ttr": 4865, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x06D\\x06D\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 1604, "newlines": 1604, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   F I N D A Z A P '\n***********************************************************************\n*                                                                     *\n*  FINDAZAP: FIND A STRING IN A LOAD MODULE AND MAKE A ZAP.           *\n*                                                                     *\n*  'FINDAZAP' WAS WRITTEN TO SIMPLIFY THE SYSTEMS SUPPORT TASK        *\n*  OF FINDING CERTAIN INSTRUCTIONS OR CONSTANTS IN A LOAD MODULE      *\n*  AND CHANGING THEM.  THE PROGRAM DOES NOT DIRECTLY CHANGE THE       *\n*  LOAD MODULE, BUT GENERATES CONTROL STATEMENTS FOR THE MVS          *\n*  SERVICE AID PROGRAM 'AMASPZAP' WHICH COULD BE RUN SEPARATELY.      *\n*                                                                     *\n*  THIS PROGRAM FINDS ALL OCCURRENCES OF A SPECIFIED STRING           *\n*  (UNLESS THE STRING SPANS 2 RECORDS) AND OPTIONALLY GENERATES       *\n*  AMASPZAP STATEMENTS THAT COULD BE USED TO CHANGE THE STRING        *\n*  TO A NEW VALUE OF EQUAL LENGTH.                                    *\n*                                                                     *\n*  'FINDAZAP' USES THE FOLLOWING DDNAMES:                             *\n*    .  SYSPRINT - THE LOG AND MESSAGE OUTPUT,                        *\n*    .  SYSIN    - THE CONTROL STATEMENT INPUT,                       *\n*    .  SYSLIB   - THE PARTITIONED DATA SET CONTAINING                *\n*                  THE MEMBER(S) TO BE PROCESSED.                     *\n*    .  SYSPUNCH - OPTIONAL OUTPUT FILE FOR AMASPZAP                  *\n*                  CONTROL STATEMENTS.                                *\n*                                                                     *\n*  WARNING - THIS PROGRAM IS INTENDED TO BE A TOOL FOR PEOPLE         *\n*  WHO ALREADY HAVE EXPERIENCE MAKING ZAPS TO LOAD MODULES.           *\n*  IN MANY CASES, PROBABLY IN MOST CASES, THE OUTPUT OF THIS          *\n*  PROGRAM WILL NOT BE EXACTLY WHAT IS NEEDED FOR THE INTENDED        *\n*  LOGICAL CHANGE, BUT MUST BE CAREFULLY EXAMINED, COMPARED           *\n*  AGAINST SOURCE LISTINGS AND AMASPZAP DUMPS, SO EACH CHANGE         *\n*  IS COMPLETELY UNDERSTOOD.  MANY TIMES A STRING IS FOUND THAT       *\n*  HAS NO RELATION TO THE STRING THAT NEEDS TO BE CHANGED, BUT        *\n*  JUST HAPPENS TO MATCH BY SHEER COINCIDENCE.  THE SHORTER           *\n*  THE STRING, THE MORE COINCIDENTAL MATCHES WILL BE FOUND.           *\n*  SOME STRINGS ARE NOT FOUND BECAUSE THEY SPAN 2 RECORDS.            *\n*  IF THIS PROGRAM IS NOT USED WITH EXTREME CARE, IF IT IS            *\n*  PRESUMED TO BE MORE THAN THE CRUDE STRING-FINDER THAT IT IS,       *\n*  IT WILL PROBABLY DO MORE HARM THAN GOOD.                           *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  'FINDAZAP' CONTROL STATEMENTS                                      *\n*                                                                     *\n*  CONTROL STATEMENTS ARE 80-CHARACTER RECORDS, IN WHICH              *\n*  ONLY THE FIRST 72 CHARACTERS ARE SCANNED.  THE LAST                *\n*  8 POSITIONS ARE IGNORED, AND ARE NOT LISTED ON THE LOG.            *\n*                                                                     *\n*  A CONTROL STATEMENT CONSISTS OF AN OPERATION AND ONE               *\n*  OR MORE OPERANDS.  THE OPERATION MAY BEGIN IN COLUMN 1 OR          *\n*  MAY BE PRECEDED BY ONE OR MORE BLANKS.                             *\n*  ONE OR MORE OPERANDS FOLLOW THE OPERATION, SEPARATED               *\n*  FROM IT AND FROM EACH OTHER BY ONE OR MORE BLANKS.                 *\n*  STATEMENTS MAY NOT BE CONTINUED.                                   *\n*                                                                     *\n*  A STATEMENT CONTAINING ALL BLANKS WILL BE TREATED AS A             *\n*  COMMENT AND MERELY LOGGED.  IF THE FIRST NONBLANK                  *\n*  CHARACTER ON A STATEMENT IS AN ASTERISK (*), THE                   *\n*  STATEMENT WILL BE TREATED AS A COMMENT.                            *\n*                                                                     *\n*  THE 'NAME' STATEMENT CONSISTS OF THE OPERATION 'NAME'              *\n*  FOLLOWED BY THE MEMBER NAME OF THE LOAD MODULE, FOLLOWED           *\n*  (OPTIONALLY) BY THE NAME OF THE CSECT OR THE WORD 'ALL'.           *\n*                                                                     *\n*  THE 'FIND' STATEMENT CONTAINS THE OPERATION 'FIND'                 *\n*  OR 'F' FOLLOWED BY THE VALUE TO BE FOUND, IN HEX.                  *\n*  FOR EXAMPLE: FIND C1C2,C3C4                                        *\n*  WOULD CAUSE ALL OCCURRENCES OF 'ABCD' TO BE LISTED.                *\n*                                                                     *\n*  THE 'CHANGE' STATEMENT CONTAINS THE OPERATION 'CHANGE'             *\n*  OR 'C' FOLLOWED BY THE OLD AND NEW VALUES, IN HEX.                 *\n*  FOR EXAMPLE: CHANGE C1C2,C3C4 E4E2,C5D9                            *\n*  WOULD CAUSE ALL OCCURRENCES OF 'ABCD' TO BE LISTED                 *\n*  AND CHANGED TO 'USER' (BY PUNCHING AMASPZAP STATEMENTS).           *\n*                                                                     *\n*  THE STRINGS IN THE 'FIND' AND 'CHANGE' STATEMENTS                  *\n*  MAY BE SPECIFIED IN EBCDIC INSTEAD OF HEX BY ENCLOSING             *\n*  EACH STRING IN QUOTES (APOSTROPHES).  FOR EXAMPLE:                 *\n*  CHANGE 'ABCD' 'USER'                                               *\n*                                                                     *\n*  THE 'OPTION' STATEMENT CONTAINS THE OPERATION 'OPTION'             *\n*  FOLLOWED BY ANY OF THE FOLLOWING WORDS -                           *\n*  FLUSH   - CONTROL STATEMENTS WILL BE FLUSHED IF AN ERROR OCCURS.   *\n*  NOFLUSH - CONTROL STATEMENTS WILL NOT BE FLUSHED.                  *\n*  LOG     - CONTROL STATEMENTS WILL BE LOGGED ON SYSPRINT.           *\n*  NOLOG   - CONTROL STATEMENTS WILL NOT BE LOGGED.                   *\n*  MSG     - ALL MESSAGES WILL BE ISSUED.                             *\n*  NOMSG   - ONLY ERROR MESSAGES WILL BE ISSUED.                      *\n*  THE DEFAULTS AT THE START OF THE PROGRAM ARE FLUSH, LOG, MSG.      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*  THE PARM FIELD MAY BE USED TO SPECIFY OPTIONS.  IF THESE LETTERS   *\n*  APPEAR ANYWHERE IN THE PARM, AND ARE NOT PRECEDED BY THE LETTER    *\n*  'N', THEY ARE INTERPRETED AS FOLLOWS -                             *\n*     F - FLUSH   L - LOG   M - MSG                                   *\n*     D - DEBUG (MESSAGE FOR EACH RECORD PROCESSED)                   *\n*  IF THE LETTER IS PRECEDED BY AN 'N', THE OPTION IS TURNED OFF.     *\n*                                                                     *\n*  IF THIS PROGRAM IS INVOKED BY ANOTHER PROGRAM, ALTERNATE           *\n*  DDNAMES MAY BE PASSED AS PARAMETERS IN AN AREA POINTED TO BY       *\n*  THE SECOND WORD IN THE PARM LIST (THE SAME CONVENTION USED         *\n*  IN IBM UTILITIES AND COMPILERS). THE AREA CONSISTS OF A            *\n*  HALFWORD LENGTH FIELD FOLLOWED BY A TABLE OF 8-BYTE DDNAMES.       *\n*  THE FIRST 4 ENTRIES IN THE TABLE ARE IGNORED. ENTRIES              *\n*  5, 6, 8, AND 9 ARE FOR SYSIN, SYSPRINT, SYSLIB, AND SYSPUNCH.      *\n*                                                                     *\n***********************************************************************\n         EJECT\n***********************************************************************\n*                                                                     *\n*        'FINDAZAP'                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. JULY 9 1980.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*     THIS PROGRAM FINDS STRINGS IN A LOAD MODULE.\n*        LOG OF CHANGES.\n*         03SEP80 - LAST CHANGE BEFORE 06OCT82.\n*         06OCT82 - ADD OPEN EXIT TO SYSLIB TO ZERO OPTCD.\n*         08NOV82 - WHEN READING IN CESD RECORDS,\n*                   STOP READING IF NON-CESD RECORD IS FOUND.\n*                   ONLY SYM RECORDS MAY PRECEDE CESD RECORDS.\n*                   SOLVES 0C4 PROBLEM WHEN FIRST BYTE OF TEXT\n*                   IS X'20' (CESD RECORD ID).\n*                 - MAKE ESDSIZE A CONSTANT SO IT CAN BE\n*                   ZAPPED IF NECESSARY.\n*         28OCT83 - ESDSIZE INCREASED FROM 32000 TO 48000.\n*                   ISSUE MESSAGE IF ESD AREA TOO SMALL.\n*         25APR91 - SYSLIB OPENED FOR INPUT ONLY.\n*                   IN COMMENTS ABOUT CESD RECORD FORMAT,\n*                   OFFSET 1 LENGTH 1 IS NO LONGER SPARE BUT FLAG.\n*                   IN COMMENTS ABOUT CONTROL (CCW) RECORD FORMAT,\n*                   OFFSET 3 LENGTH 1 IS NO LONGER SPARE BUT RLD COUNT.\n*\n***********************************************************************\n*\n*        LOAD MODULE RECORD FORMATS\n*             OFFSET  LENGTH  DESCRIPTION\n*\n*        SYM     0       1    IDENTIFICATION X'40'\n*\n*        CESD    0       1    IDENTIFICATION X'20'\n*                1       1    IF X'80' BYTE 12 OF ITEMS NOT SEG NUMBERS\n*                2       2    SPARE, BINARY ZEROES\n*                4       2    ESDID OF FIRST ESD ITEM\n*                6       2    COUNT, IN BYTES, OF ESD DATA\n*                8     240    UP TO 240 BYTES OF ESD DATA,\n*                             UP TO 15 ENTRIES, 16 BYTES EACH\n*\n*        SCT     0       1    IDENTIFICATION X'10' SCATTER/TRANSLATION\n*\n*        CCW     0       1    IDENTIFICATION X'01' OR X'05' OR X'0D'\n*                1       2    SPARE, BINARY ZEROES\n*                3       1    COUNT, IN BYTES, OF RLD AND/OR CCW/RLD\n*                             RECORDS FOLLOWING NEXT TEXT RECORD\n*                4       2    LENGTH OF CONTROL DATA FOLLOWING CCW\n*                6       2    COUNT, BINARY ZEROES\n*                8       8    CCW TO READ TEXT RECORD THAT FOLLOWS.\n*                             LINK-ASSIGNED ADDRESS, LENGTH OF RECORD.\n*               16     240    CONTROL DATA, UP TO 60 4-BYTE ENTRIES.\n*                             EACH ENTRY IS A 2 BYTE CESD ENTRY NUMBER\n*                             AND A 2-BYTE CSECT SECTION SIZE.\n*\n*        RLD     0       1    IDENTIFICATION X'02' OR X'06' OR X'0E'\n*                1       3    SPARE, BINARY ZEROES\n*                4       2    COUNT, BINARY ZEROES\n*                6       2    COUNT, IN BYTES, OF RLD DATA\n*                8       8    SPARE, BINARY ZEROES\n*               16     240    RLD DATA\n*\n*        CCW/    0       1    IDENTIFICATION X'03' OR X'07' OR X'0F'\n*         RLD    1       3    SPARE, BINARY ZEROES\n*                4       2    COUNT, IN BYTES, OF CONTROL DATA\n*                6       2    COUNT, IN BYTES, OF RLD DATA\n*                8       8    CCW TO READ FOLLOWING TEXT RECORD\n*               16     240    RLD DATA FOLLOWED BY CONTROL DATA\n*\n*        IDR     0       1    IDENTIFICATION X'80'\n         SPACE\n         MACRO\n&NAME    PARMC &C,&B\n&NAME    CLI   0(R1),C'&C'         IS CHARACTER PRESENT?\n         BNE   *+20                NO, SKIP REMAINING INSTRUCTIONS\n         OI    OPTIONS,&B          YES, SET BIT ON\n         CLI   1(R2),C'N'          IS CHARACTER PRECEDED BY 'N'?\n         BNE   *+8                 NO, SKIP NEXT INSTRUCTION\n         NI    OPTIONS,255-&B      YES, SET BIT OFF\n         MEND\n         SPACE\nFINDAZAP START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'FINDAZAP'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)  SUBPOOL AND LENGTH\n@PROLOG  STM   14,12,12(13)\n         LR    R10,15              BASE REGISTER\n         LA    R15,4095\n         LA    R11,1(R15,R10)      BASE REGISTER\n         LR    R7,R1               PARM LIST ADDRESS\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)            CHAIN SAVEAREAS\n         ST    1,8(,13)            CHAIN SAVEAREAS\n         LR    13,1                NEW SAVEAREA POINTER\n         USING @DATA,R13\n         SPACE 1\n         SLR   R15,R15\n         ST    R15,COUNTIN\n         STH   R15,RC\n         MVI   SW,0\n         MVI   OPTIONS,#DEFAULT    DEFAULT OPTIONS\n         L     R2,0(,R7)           PARM\n         LH    R0,0(,R2)           PARM LENGTH\n         LTR   R0,R0               IS PARM PRESENT\n         BZ    NOPARM              NO, BRANCH\n         LA    R1,2(,R2)           POINT TO PARM DATA\nPARMLOOP EQU   *\n         PARMC L,#L                LOG CONTROL STATEMENTS\n         SPACE\n         PARMC M,#M                NORMAL MESSAGES\n         SPACE\n         PARMC F,#F                FLUSH AFTER FIRST ERROR\n         SPACE\n         PARMC D,#D                DEBUG\n         SPACE\n         LA    R1,1(,R1)           POINT TO NEXT CHARACTER\n         LA    R2,1(,R2)           POINT TO NEXT CHARACTER MINUS 2\n         BCT   R0,PARMLOOP         CONTINUE SCAN\nNOPARM   EQU   *\n         MVC   REPORTPG,=H'0'      INITIAL PAGE COUNTER\n         MVC   REPORTLN,=H'0'      INITIAL LINE COUNTER\n         MVC   REPORTMX,=H'50'     INITIAL LINES PER PAGE\n         MVI   REPORTO-1,X'40'     BLANK PROPOGATOR\n         MVI   LINE-1,X'40'        BLANK PROPOGATOR\n         MVI   STATUS,0\n         EJECT\n************************************************************\n*                                                          *\n*        OPEN THE DCB'S                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   PRTDCBW(PRTDCBL),PRTDCB\n         MVC   CTLDCBW(CTLDCBL),CTLDCB\n         MVC   LIBDCBW(LIBDCBL),LIBDCB\n         MVC   PUNDCBW(PUNDCBL),PUNDCB\n         LA    R3,PRTDCBW\n         LA    R4,CTLDCBW\n         LA    R5,LIBDCBW\n         LA    R6,PUNDCBW\n         SPACE\n         TM    0(R7),X'80'         IS THERE ONLY ONE PARM ADDRESS\n         BO    DDLISTX             YES, BRANCH, NO DDNAME LIST\n         L     R2,4(,R7)           POINT TO DDNAME LIST\n         LH    R0,0(,R2)           GET LENGTH OF DDNAME LIST\n         LA    R2,2(,R2)           POINT TO FIRST ENTRY\n         SPACE\n         CH    R0,=H'40'           ARE THERE AT LEAST 5 ENTRIES\n         BL    DDLISTX             NO, BRANCH\n         CLI   32(R2),0            IS THERE A NAME PRESENT\n         BE    *+10                NO, LEAVE UNCHANGED\n         MVC   DDNAM(8,R4),32(R2)  YES, REPLACE SYSIN\n         SPACE\n         CH    R0,=H'48'           ARE THERE AT LEAST 6 ENTRIES\n         BL    DDLISTX             NO, BRANCH\n         CLI   40(R2),0            IS THERE A NAME PRESENT\n         BE    *+10                NO, LEAVE UNCHANGED\n         MVC   DDNAM(8,R3),40(R2)  YES, REPLACE SYSPRINT\n         SPACE\n         CH    R0,=H'64'           ARE THERE AT LEAST 8 ENTRIES\n         BL    DDLISTX             NO, BRANCH\n         CLI   56(R2),0            IS THERE A NAME PRESENT\n         BE    *+10                NO, LEAVE UNCHANGED\n         MVC   DDNAM(8,R5),56(R2)  YES, REPLACE SYSLIB\n         SPACE\n         CH    R0,=H'72'           ARE THERE AT LEAST 9 ENTRIES\n         BL    DDLISTX             NO, BRANCH\n         CLI   64(R2),0            IS THERE A NAME PRESENT\n         BE    *+10                NO, LEAVE UNCHANGED\n         MVC   DDNAM(8,R6),64(R2)  YES, REPLACE SYSPUNCH\nDDLISTX  EQU   *\n         SPACE\n         IC    R0,EXLST(,R3)\n         LA    R14,PRTEXLST\n         ST    R14,EXLST(,R3)\n         STC   R0,EXLST(,R3)       SYSPRINT EXLST=PRTEXLST\n         SPACE\n         LA    R0,PRTEXO\n         ST    R0,0(,R14)\n         MVI   0(R14),X'85'        DCB EXIT\n         SPACE\n         IC    R0,EODAD(,R4)\n         LA    R14,EODCTL\n         ST    R14,EODAD(,R4)\n         STC   R0,EODAD(,R4)       SYSIN EODAD=EODCTL\n         SPACE\n         IC    R0,EXLST(,R5)\n         LA    R14,LIBEXLST\n         ST    R14,EXLST(,R5)\n         STC   R0,EXLST(,R5)       SYSLIB EXLST=LIBEXLST\n         SPACE\n         LA    R0,LIBEXOPN         OPEN EXIT ENTRY POINT\n         ST    R0,0(,R14)\n         MVI   0(R14),X'05'        OPEN EXIT\n         LA    R0,JFCB\n         ST    R0,4(,R14)\n         MVI   4(R14),X'87'        JFCB EXIT\n         SPACE\n         IC    R0,EXLST(,R6)\n         LA    R14,PUNEXLST\n         ST    R14,EXLST(,R6)\n         STC   R0,EXLST(,R6)       SYSPRINT EXLST=PRTEXLST\n         SPACE\n         LA    R0,PUNEXO\n         ST    R0,0(,R14)\n         MVI   0(R14),X'85'        DCB EXIT\n         SPACE\n         LA    R7,OPEN\n         MVI   0(R7),128\n         SPACE\n         OPEN  ((R3),OUTPUT),MF=(E,(R7))\n         SPACE\n         TM    OFLGS(R3),X'10'\n         BO    OKPRT\n         LA    R15,16\n         B     EXIT\nPRTEXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE PRESENT\n         BNER  R14                 YES, USE IT\n         MVC   BLKSI(2,R1),LRECL(R1) NO, MAKE IT SAME AS LRECL\n         NI    RECFM(R1),255-X'10' CHANGE RECFM TO UNBLOCKED\n         BR    R14\nOKPRT    OI    STATUS,OPENP        SYSPRINT IS OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,(R7))\n         SPACE\n         TM    OFLGS(R4),X'10'\n         BO    OKCTL\n         LA    R15,16\n         B     EXIT\nOKCTL    OI    STATUS,OPENC        SYSIN IS OPEN\n         SPACE\n         OPEN  ((R5),INPUT),MF=(E,(R7))\n         B     OPENTM\n         SPACE\nLIBEXOPN MVI   OPTCD(R5),0\n         BR    R14\n         SPACE\nOPENTM   TM    OFLGS(R5),X'10'\n         BO    OKLIB\n         LA    R15,16\n         B     EXIT\nOKLIB    OI    STATUS,OPENL        SYSLIB IS OPEN\n         SPACE\n         RDJFCB ((R5)),MF=(E,(R7))\n         SPACE\n         L     R0,=A(BUFF1L+BUFF2L)\n         A     R0,ESDSIZE          ROOM FOR 2000 ESD ENTRIES\n         ST    R0,GETSIZ\n         GETMAIN R,LV=(0)\n         ST    R1,BUFF1A           POINTER TO BUFFER1\n         A     R1,=A(BUFF1L)       POINT PAST BUFFER1 TO BUFFER2\n         ST    R1,BUFF2A           POINTER TO BUFFER2\n         A     R1,=A(BUFF2L)       POINT PAST BUFFER2 TO ESD TABLE\n         ST    R1,ESDPTR           POINTER TO ESD TABLE\n         A     R1,ESDSIZE\n         ST    R1,ESDEND\n         OI    STATUS,GETMN\n         SPACE\n         LA    R4,DDNAM(,R6)       SYSPUNCH DDNAME\n         DEVTYPE (R4),DEVDATA\n         LTR   R15,R15             IS DDNAME ALLOCATED\n         BNZ   NOPUNCH             NO, BRANCH\n         SPACE\n         OPEN  ((R6),OUTPUT),MF=(E,(R7))\n         SPACE\n         TM    OFLGS(R6),X'10'\n         BO    OKPUN\n         LA    R15,16\n         B     EXIT\nPUNEXO   CLC   BLKSI(2,R1),=H'0'   IS BLKSIZE PRESENT\n         BNER  R14                 YES, USE IT\n         MVC   BLKSI(2,R1),LRECL(R1) NO, MAKE BLKSIZE SAME AS LRECL\n         NI    RECFM(R1),255-X'10' CHANGE RECFM TO UNBLOCKED\n         BR    R14\nOKPUN    OI    STATUS,OPENZ        SYSPUNCH IS OPEN\nNOPUNCH  EQU   *\n         SPACE\n         MVC   LINE,LINE-1         MAKE A BLANK LINE\n         BAL   R14,REPORT          WRITE BLANK LINE TO FORCE HEADING\n         EJECT\n************************************************************\n*                                                          *\n*        READ A CONTROL STATEMENT                          *\n*                                                          *\n************************************************************\n         SPACE\nREADCTL  EQU   *\n         CLI   RC+1,0              HAS THERE BEEN AN ERROR\n         BE    READGET             NO, SKIP FLUSH CHECK\n         TM    OPTIONS,#F          YES, IS OPTION FLUSH\n         BO    FLUSH               YES, GO FLUSH REMAINING CARDS\nREADGET  EQU   *\n         LA    R4,CTLDCBW\n         GET   (R4),INREC          READ A CONTROL STATEMENT\n         SPACE\n         L     R1,COUNTIN\n         A     R1,=F'1'            COUNT CONTROL STATEMENTS\n         ST    R1,COUNTIN\n         TR    INREC(72),CAPS      CONVERT ANY LOWER CASE TO UPPER\n         MVC   LINE,LINE-1         CLEAR THE PRINT LINE\n         TM    OPTIONS,#L          LOG\n         BZ    NOLOG               BRANCH IF NOLOG\n         MVC   MID(6),=C'MSG000'\n         MVC   TXT(72),INREC       MOVE STMT TO PRINT LINE\n         BAL   R14,REPORT          LOG THE STATEMENT\nNOLOG    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         PARSE THE CONTROL STATEMENT                      *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,INREC           POINT TO COLUMN 1\n         LA    R3,72-1             LENGTH CODE OF CONTROL STATEMENT\n         LA    R6,ODL              POINT TO OPERAND DESCRIPTOR LIST\n         XC    0(ODLL,R6),0(R6)    ZERO THE ODL\n         SR    R1,R1               INSURE HI ORDER BYTE ZERO\n         LA    R0,ODLL/8-1         NUMBER OF ENTRIES IN O.D.L.\n*                                  MINUS 1 (LAST ODE WILL REMAIN ZERO)\n         B     LOOP\nTRTNONBL TRT   0(0,R15),TABNONBL   (EXECUTED)\nTRTBLANK TRT   0(0,R15),TABBLANK   (EXECUTED)\nTRTQUOTE TRT   0(0,R15),TABQUOTE   (EXECUTED)\nLOOP     XC    0(8,R6),0(R6)       ZERO THE OPERAND DESCRIPTOR ENTRY\n         EX    R3,TRTNONBL         FIND A NONBLANK\n         BZ    DONE                BRANCH IF ALL BLANKS\n         LR    R14,R1              GET ADDRESS OF STRING\n         SR    R14,R15             GET LENGTH OF PRECEDING BLANKS\n         SR    R3,R14              GET LENGTH OF REMAINING TEXT\n         LR    R15,R1              GET ADDRESS OF NONBLANK\n         CLI   0(R15),QUOTE        DOES OPERAND BEGIN WITH A QUOTE\n         BE    PQUOTE              YES, BRANCH\n         EX    R3,TRTBLANK         FIND A BLANK\n         BZ    LAST                BRANCH IF NOT FOUND\n         LR    R14,R1              GET ADDRESS OF BLANK\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),PRESENT       OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REMAINING TEXT\n         BZ    DONE                BRANCH IF ONE TRAILING BLANK\n         LR    R15,R1              POINT TO BLANK\nPNEXT    LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         BCT   R0,LOOP             GO PROCESS NEXT OPERAND\n         B     DONE                MAX OPERANDS PROCESSED\nPQUOTE   LA    R15,1(,R15)         POINT PAST QUOTE\n         LA    R1,1                VALUE 1\n         SR    R3,R1               REDUCE LENGTH CODE BY 1\n         BM    DONE                IGNORE QUOTE IN LAST COLUMN\n         EX    R3,TRTQUOTE         FIND THE NEXT QUOTE\n         BZ    LASTQ               NOT FOUND, USE ALL REM TEXT\n         LR    R14,R1              GET ADDRESS OF QUOTE\n         SR    R14,R15             GET LENGTH OF FIELD\n         OI    6(R6),PRESENT+QUOTED OPERAND PRESENT AND IN QUOTES\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\n         SR    R3,R14              GET LENGTH CODE OF REM TEXT\n         BZ    DONE                BRANCH IF QUOTE WAS FINAL CHAR\n         LA    R15,1(,R1)          POINT TO CHAR AFTER ENDING QUOTE\n         BCTR  R3,0                REDUCE LENGTH CODE BY 1\n         B     PNEXT               SET UP FOR NEXT OPERAND\nLASTQ    OI    6(R6),QUOTED        OPERAND IN QUOTES\nLAST     LA    R14,1(,R3)          GET LENGTH\n         OI    6(R6),PRESENT       OPERAND PRESENT\n         ST    R15,0(,R6)          ADDRESS OF OPERAND\n         STH   R14,4(,R6)          LENGTH OF OPERAND\nDONE     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DETERMINE TYPE OF CONTROL STATEMENT              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R6,ODE1             POINT TO FIRST O.D.E.\n         TM    6(R6),PRESENT       ANYTHING PRESENT\n         BZ    READCTL             BRANCH IF WHOLE STATEMENT BLANK\n         TM    6(R6),QUOTED        IS OPERATION IN QUOTES\n         BO    ILLCARD             YES, ERROR\n         L     R1,0(,R6)           POINT TO FIRST NONBLANK IN STATEMENT\n         CLI   0(R1),C'*'          COMMENT CARD\n         BE    READCTL             YES, BRANCH\n         SPACE\n         SPACE\n         LA    R6,ODE1             RESTORE POINTER TO FIRST O.D.E.\n         L     R1,0(,R6)           POINT TO FIRST STRING AGAIN\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         MVC   TYPE(1),0(R1)       SAVE FIRST CHARACTER\n         LA    R0,7                MAX VALID LENGTH\n         CR    R15,R0              IS STRING TOO LONG ?\n         BH    ILLCARD             BRANCH IF TOO LONG\n         SLL   R15,2               MULTIPLY LENGTH BY 4\n         B     *(R15)              BRANCH TO ONE OF NEXT 7\n         B     LEN1                1 CHAR\n         B     ILLCARD             2 CHAR\n         B     LEN3                3 CHAR\n         B     LEN4\n         B     ILLCARD\n         B     LEN6\n         B     ILLCARD\nLEN1     CLI   0(R1),C'C'\n         BE    CHANGE\n         CLI   0(R1),C'F'\n         BE    CHANGE\n         B     TYPEI\nLEN3     CLC   0(3,R1),=C'END'\n         BE    EODCTL\n         B     TYPEI\nLEN4     EQU   *\n         CLC   0(4,R1),=C'NAME'\n         BE    NAME\n         CLC   0(4,R1),=C'FIND'\n         BE    CHANGE\n         CLC   0(4,R1),=C'FILE'\n         BE    FILE\nTYPEI    MVI   TYPE,C'I'\n         B     ILLCARD\nLEN6     CLC   0(6,R1),=C'CHANGE'\n         BE    CHANGE\n         CLC   0(6,R1),=C'OPTION'\n         BE    OPTION\n         B     TYPEI\n         SPACE\nILLCARD  EQU   *\n         CLI   TYPE,C'F'\n         MVI   TYPE,C'I'\n         BE    FILE\n         MVC   LINE,LINE-1\n         TM    OPTIONS,#L          LOG\n         BNZ   LOGGED              YES, BRANCH\n         MVC   MID(6),=C'MSG000'\n         MVC   TXT(72),INREC\n         BAL   R14,REPORT\n         MVC   LINE,LINE-1\nLOGGED   MVC   MID(33),=C'MSG001  *** ILLEGAL STATEMENT ***'\nILLRC4   BAL   R14,REPORT\n         MVI   RC+1,4\n         B     READCTL\n         SPACE\nILLPREV  MVC   MID(29),=C'MSG012  *** FILE NOT OPEN ***'\n         B     ILLRC4\n         EJECT\n************************************************************\n*                                                          *\n*         CHANGE LIBRARY DDNAME                            *\n*                                                          *\n************************************************************\n         SPACE\nFILE     EQU   *\n         NI    SW,255-SWN          SET NAME OFF\n         MVI   ZPM,C' '\n         SR    R15,R15             FORCE NEW PAGE\n         STH   R15,REPORTLN\n         LA    R6,CLOSE\n         MVI   0(R6),128\n         TM    STATUS,OPENL\n         BZ    FILEC5X\n         CLOSE ((R5)),MF=(E,(R6))\n         NI    STATUS,255-OPENL\nFILEC5X  EQU   *\n         CLI   TYPE,C'I'\n         BE    FILERR\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),PRESENT       IS OPERAND PRESENT ?\n         BZ    FILERR              BRANCH IF MISSING OPERAND\n         TM    6(R6),QUOTED        IS OPERAND IN QUOTES ?\n         BO    FILERR              YES, ERROR\n         MVC   MEMBER,=CL8' '\n         L     R1,0(,R6)           POINT TO STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS LENGTH VALID ?\n         BH    FILERR              BRANCH IF OPERAND TOO LONG\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         EX    R15,MVCMEM          MOVE STRING TO MEMBER\n         DEVTYPE MEMBER,DEVDATA    TEST IF DDNAME ALLOCATED\n         LTR   R15,R15             IS DDNAME ALLOCATED\n         BNZ   FILENAV             NO, BRANCH\n         MVC   DDNAM(8,R5),MEMBER\n         LA    R6,CLOSE\n         OPEN  ((R5),UPDAT),MF=(E,(R6))\n         TM    OFLGS(R5),X'10'\n         BO    OKFILE\nFILENAV  MVC   MID(35),=C'MSG011  FILE XXXXXXXX NOT AVAILABLE'\n         MVC   MID+13(8),MEMBER\nFILERC4  MVI   JFCB,C' '\n         MVC   JFCB+1(43),JFCB\n         BAL   R14,REPORT\n         MVI   RC+1,4\n         B     READCTL\nOKFILE   EQU   *\n         OI    STATUS,OPENL        SYSLIB FILE IS OPEN\n         RDJFCB ((R5)),MF=(E,(R6))\n         MVC   LINE,LINE-1\n         MVC   MID(19),=C'MSG010  NEW FILE IS'\n         MVC   MID+20(8),MEMBER    DDNAME\n         BAL   R14,REPORT\n         B     READCTL\n         SPACE\nFILERR   MVC   MID(38),=C'MSG013  *** INVALID FILE STATEMENT ***'\n         B     FILERC4\n         EJECT\n************************************************************\n*                                                          *\n*        NAME STATEMENT                                    *\n*                                                          *\n************************************************************\n         SPACE\nNAME     EQU   *\n         NI    SW,255-SWE          CSECT SWITCH OFF\n         MVI   ZPM,C' '            FORCE NAME CARD\n         TM    STATUS,OPENL        IS SYSLIB OPEN?\n         BZ    ILLPREV             NO, ERROR\n         SPACE\n         LA    R6,ODE2             POINT TO SECOND O.D.E.\n         TM    6(R6),PRESENT       IS OPERAND PRESENT ?\n         BZ    ILLCARD             BRANCH IF MISSING OPERAND\n         TM    6(R6),QUOTED        IS OPERAND IN QUOTES ?\n         BO    ILLCARD             YES, ERROR\n         MVC   MEMBER,=CL8' '\n         L     R1,0(,R6)           POINT TO STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS LENGTH VALID ?\n         BH    ILLCARD             BRANCH IF OPERAND TOO LONG\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         EX    R15,MVCMEM          MOVE STRING TO MEMBER\n         SPACE\n         MVC   LINE,LINE-1\n         MVC   MID(14),=C'MSGXXX  MEMBER'\n         MVC   MBR(8),MEMBER\n         SPACE\n         LA    R6,BLDL\n         MVC   0(4,R6),=AL2(1,80)\n         MVC   4(8,R6),MEMBER\n         SPACE\n         BLDL  (R5),(R6)\n         SPACE\n         B     BLDLRC(R15)\nBLDLRC   B     BLDLRC00\n         B     BLDLRC04\n         B     BLDLRC08\n         B     BLDLRC0C\n         SPACE\nBLDLRC04 MVC   RESULT(09),=CL09'NOT FOUND'\n         B     BLDLERR\nBLDLRC08 MVC   RESULT(17),=CL17'*** I/O ERROR ***'\n         B     BLDLERR\nBLDLRC0C MVC   RESULT(17),=CL17'*** DCB ERROR ***'\n         B     BLDLERR\nBLDLLMOD MVC   RESULT(17),=CL17'NOT A LOAD MODULE'\nBLDLERR  MVC   MID+3(3),=C'007'\nERROR    MVI   RC+1,4\n         BAL   R14,REPORT\n         B     READCTL\nBLDLRC00 LA    R6,4(,R6)\n         CLI   11(R6),0            CONCATENATION ZERO\n         BNE   BLDLRC04            NO, TREAT AS NOT FOUND\n         TM    13(R6),X'60'        ANY TTR'S IN USER DATA\n         BZ    BLDLLMOD            NO, NOT A LOAD MODULE\n         SPACE\n         MVC   POINTER,8(R6)       COPY TTR AND ZERO\n         MVC   CSECT,=CL8' '\n         LA    R6,ODE3             POINT TO CSECT OPERAND DESCRIPTOR\n         TM    6(R6),PRESENT       IS OPERAND PRESENT ?\n         BZ    NOCSECT             BRANCH IF NO OPERAND\n         TM    6(R6),QUOTED        IS OPERAND IN QUOTES ?\n         BO    ILLCARD             YES, ERROR\n         L     R1,0(,R6)           POINT TO STRING\n         LH    R15,4(,R6)          GET LENGTH OF STRING\n         LA    R0,8                MAX VALID LENGTH\n         CR    R15,R0              IS LENGTH VALID ?\n         BH    ILLCARD             BRANCH IF OPERAND TOO LONG\n         BCTR  R15,0               LENGTH MINUS 1 FOR EX\n         EX    R15,MVCSEC          MOVE STRING TO MEMBER\n         CLC   CSECT(4),=C'ALL '\n         BNE   *+10\n         MVC   CSECT,=CL8' '\nNOCSECT  EQU   *\n         SPACE\n         IC    R0,EODAD(,R5)\n         LA    R14,EODESD\n         ST    R14,EODAD(,R5)\n         STC   R0,EODAD(,R5)       SYSLIB EODAD=EODESD\n         SPACE\n         POINT (R5),POINTER\n         SPACE\n         L     R2,BUFF1A           POINT TO I/O BUFFER\n         MVC   DECBW(DECBML),DECBM\nESDLOOP  EQU   *\n         READ  DECBW,SF,(R5),(R2),BUFF1L,MF=E\n         SPACE\n         CHECK DECBW\n         SPACE\n         LH    R1,DECBW+6          GET LENGTH FROM DECB\n         L     R15,DECBW+16        GET IOB ADDRESS\n         SH    R1,14(,R15)         SUBTRACT RESIDUAL COUNT\n         STH   R1,BLKLEN           SAVE ACTUAL LENGTH\n         SPACE\n*              ONLY A SYM RECORD CAN PRECEDE A CESD RECORD\n         CLI   0(R2),X'40'         SYM RECORD\n         BE    ESDLOOP             YES, LOOP UNTIL CESD FOUND\n         CLI   0(R2),X'20'         CESD RECORD\n         BNE   EODESD              NO, END OF CESD RECORDS\n         L     R4,ESDPTR           ESD TABLE ORIGIN\n         LH    R0,4(,R2)           ESDID OF FIRST ENTRY\n         BCTR  R0,0                MINUS 1 FOR ZERO BASE\n         SLL   R0,4                MULTIPLY BY 16\n         AR    R4,R0               ADD OFFSET TO TABLE ORIGIN\n         LH    R0,6(,R2)           LENGTH OF ESD DATA\n         SRL   R0,4                DIVIDE LENGTH BY 16\n         LTR   R0,R0               ARE THERE ANY ENTRIES\n         BZ    ESDLOOP             NO, BRANCH (NEVER HAPPENS)\n         LA    R1,8(,R2)           FIRST ENTRY\nENTLOOP  CLI   CSECT,C' '          CSECT NAME SPECIFIED\n         BE    ENTCOPY             NO, BRANCH\n         CLC   CSECT,0(R1)         YES, DOES IT MATCH THIS ENTRY\n         BNE   ENTCOPY             NO, BRANCH\n         TM    8(R1),X'0F'         TYPE SD\n         BNZ   ENTCSTC             NO, TREAT AS NOT FOUND\n         OI    SW,SWE\nENTCSTC  STC   R0,8(,R1)\nENTCOPY  C     R4,ESDEND           IS OUR ESD AREA BIG ENOUGH\n         BNL   ESDFAIL             NO, CANNOT CONTINUE\n         MVC   0(16,R4),0(R1)\n         LA    R4,16(,R4)\nENTNEXT  LA    R1,16(,R1)\n         BCT   R0,ENTLOOP\n         B     ESDLOOP\nEODESD   EQU   *\n         MVI   0(R4),255\n         CLI   CSECT,C' '          WAS CSECT SPECIFIED\n         BE    ENTMSG              NO, BRANCH\n         TM    SW,SWE              YES, WAS IT FOUND\n         BZ    ENTNF               NO, BRANCH\nENTMSG   LR    R0,R4\n         S     R0,ESDPTR           LENGTH OF ESD TABLE\n         SRL   R0,4                DIVIDE BY 16\n         CVD   R0,DOUBLE\n         MVC   RESULT(6),=X'402020202120'\n         ED    RESULT(6),DOUBLE+5\n         MVC   RESULT+6(12),=C' ESD ENTRIES'\n         MVC   MID+3(3),=C'003'\n         OI    SW,SWN              VALID NAME STATEMENT\n         TM    OPTIONS,#D          IN DEBUG MODE\n         BZ    READCTL             NO, SKIP MEMBER MESSAGE\n         TM    OPTIONS,#M          MSG\n         BZ    READCTL\n         BAL   R14,REPORT\n         B     READCTL\nENTNF    MVC   RESULT(31),=CL31'FOUND, CSECT XXXXXXXX NOT FOUND'\n         MVC   RESULT+13(8),CSECT\n         MVC   MID+3(3),=C'008'\n         B     ERROR\n         SPACE\nESDFAIL  MVC   RESULT(34),=CL34'HAS ESD TOO LARGE FOR THIS PROGRAM'\n         MVC   MID+3(3),=C'008'\n         B     ERROR\n         SPACE\nMVCMEM   MVC   MEMBER(0),0(R1)     (EXECUTED)\nMVCSEC   MVC   CSECT(0),0(R1)      (EXECUTED)\n         EJECT\n************************************************************\n*                                                          *\n*         FIND OR CHANGE STATEMENT                         *\n*                                                          *\n************************************************************\n         SPACE\nCHANGE   EQU   *\n         CLI   TYPE,C'F'           FIND\n         BNE   *+8                 NO, SKIP NEXT INSTRUCTION\n         MVI   TYPE,C'X'           NOT TO BE CONFUSED WITH FILE\n         TM    STATUS,OPENL        IS SYSLIB OPEN?\n         BZ    ILLPREV             NO, ERROR\n         SPACE\n         TM    SW,SWN              NAME SPECIFIED\n         BZ    ILLCARD             NO, BRANCH\n         SPACE\n         LA    R6,ODE2             FIRST OPERAND DESCRIPTOR\n         TM    6(R6),PRESENT       IS OPERAND PRESENT\n         BZ    ILLCARD\n         TM    6(R6),QUOTED        IS OPERAND IN QUOTES\n         BO    CHOP1Q              YES, NOT HEX\n         LH    R0,4(,R6)           GET LENGTH OF OPERAND\n         L     R1,0(,R6)           POINT TO OPERAND\n         LA    R15,STRINGA         POINT TO OUTPUT AREA\n         BAL   R14,VALX            VALIDATE THE HEX STRING\n         STH   R0,STRINGL          SAVE LENGTH OF RESULT\n         B     CHOP1X\n         SPACE\nCHOP1M   MVC   STRINGA(0),0(R15)   (EXECUTED)\nCHOP1Q   LH    R0,4(,R6)           GET LENGTH OF OPERAND\n         LTR   R1,R0               IS IT A NULL STRING\n         BZ    ILLCARD             YES, BRANCH\n         L     R15,0(,R6)          POINT TO OPERAND\n         STH   R1,STRINGL          SAVE LENGTH OF OPERAND\n         BCTR  R1,0\n         EX    R1,CHOP1M           MOVE IT TO STRINGA\n         SPACE\nCHOP1X   CLI   TYPE,C'X'           FIND\n         BE    CHGGO               YES, BRANCH\n         SPACE\n         LA    R6,ODE3             SECOND OPERAND DESCRIPTOR\n         TM    6(R6),PRESENT       IS OPERAND PRESENT\n         BZ    ILLCARD             NO, ERROR\n         TM    6(R6),QUOTED        IS OPERAND IN QUOTES\n         BO    CHOP2Q              YES, BRANCH\n         LH    R0,4(,R6)           GET LENGTH OF OPERAND\n         L     R1,0(,R6)           POINT TO OPERAND\n         LA    R15,STRINGB         POINT TO OUTPUT AREA\n         BAL   R14,VALX            VALIDATE THE HEX STRING\n         B     CHOP2X\n         SPACE\nCHOP2M   MVC   STRINGB(0),0(R15)   (EXECUTED)\nCHOP2Q   LH    R0,4(,R6)           GET LENGTH OF OPERAND\n         LTR   R1,R0               IS IT A NULL STRING\n         BZ    ILLCARD             YES, BRANCH\n         L     R15,0(,R6)          POINT TO OPERAND\n         BCTR  R1,0\n         EX    R1,CHOP2M           MOVE IT TO STRINGA\n         SPACE\nCHOP2X   CH    R0,STRINGL          IS THE LENGTH SAME AS THE OTHER\n         BNE   ILLCARD             NO, ERROR\n         SPACE\n         MVI   ZPVER,C' '          BUILD A VER STATEMENT\n         MVC   ZPVER+1(79),ZPVER\n         MVC   ZPVER+1(3),=C'VER'\n         LA    R1,STRINGA\n         LH    R0,STRINGL\n         LA    R15,ZPVER+12\n         BAL   R14,HEX\n         SPACE\n         MVI   ZPREP,C' '          BUILD A REP STATEMENT\n         MVC   ZPREP+1(79),ZPREP\n         MVC   ZPREP+1(3),=C'REP'\n         LA    R1,STRINGB\n         LH    R0,STRINGL\n         LA    R15,ZPREP+12\n         BAL   R14,HEX\n         B     CHGGO\n         SPACE\nVALX     STM   R14,R3,VALXR        SAVE REGISTERS\n         LR    R3,R1               COPY INPUT POINTER\n         LA    R14,2               LOAD VALUE 2\nVALXLOOP CR    R0,R14              ARE THERE AT LEAST 2 BYTES LEFT\n         BL    VALXERR             NO, ERROR\n         CLI   0(R3),C','          IS THE FIRST BYTE A COMMA\n         BE    VALXCOMA            YES, BRANCH\n         TRT   0(2,R3),VALXTAB     ARE THE TWO BYTES 0-9 OR A-F\n         BNZ   VALXERRT            NO, R1 POINTS TO THE ERROR\n         SR    R1,R1\n         IC    R1,0(,R3)           REG 1  =  1ST CHAR\n         CLI   0(R3),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R1,57(,R1)          LETTER - CONVERT TO FA-FF\n         SLL   R1,4                SHIFT LEFT 4 BITS\n         STC   R1,0(,R15)          STORE THE LEFT HALF\n         SR    R1,R1\n         IC    R1,1(,R3)           REG 1  =  2ND CHAR\n         CLI   1(R3),C'0'          NUMBER OR LETTER\n         BNL   *+8                 NUMBER - BRANCH\n         LA    R1,57(,R1)          LETTER - CONVERT\n         SLL   R1,28               SHIFT LEFT HALF TO OBLIVION\n         SRL   R1,28               SHIFT BACK AGAIN\n         STC   R1,1(,R15)          STORE RIGHT HALF\n         OC    0(1,R15),1(R15)     'OR' RIGHT HALF OVER LEFT HALF\n         LA    R3,2(,R3)           POINT PAST THE TWO CHARACTERS\n         LA    R15,1(,R15)         POINT PAST MOVED CHARACTERS\n         SR    R0,R14              REDUCE LENGTH BY 2\n         BNZ   VALXLOOP            BRANCH IF LENGTH NOT ZERO YET\n         LR    R0,R15              POINT PAST LAST BYTE OF RESULT\n         S     R0,VALXR+4          R0 = LENGTH OF RESULT\n         L     R14,VALXR           RETURN ADDRESS\nVALXX    LM    R2,R3,VALXR+16      RESTORE REGISTERS\n         BR    R14\nVALXCOMA LA    R3,1(,R3)           POINT PAST COMMA\n         BCTR  R0,0                REDUCE LENGTH ACCORDINGLY\n         CLI   0(R3),C','          TWO COMMAS IN A ROW\n         BNE   VALXLOOP            NO, BRANCH\nVALXERR  LR    R1,R3               POINT R1 TO BYTE IN ERROR\nVALXERRT LM    R2,R3,VALXR+16\n         B     ILLCARD\n         SPACE\n************************************************************\n*                                                          *\n*        READ EACH RECORD OF THE MODULE                    *\n*                                                          *\n************************************************************\n         SPACE\nCHGGO    EQU   *\n         IC    R0,EODAD(,R5)\n         LA    R14,EODLIB\n         ST    R14,EODAD(,R5)\n         STC   R0,EODAD(,R5)       SYSLIB EODAD=EODESD\n         SPACE\n         POINT (R5),POINTER\n         SPACE\n         SLR   R15,R15\n         ST    R15,COUNTREP\n         ST    R15,COUNTSPN\n         MVI   PREVTYPE,0\n         L     R2,BUFF1A           POINT TO I/O BUFFER\n         MVC   DECBW(DECBML),DECBM\nREADLOOP EQU   *\n         READ  DECBW,SF,(R5),(R2),BUFF1L,MF=E\n         SPACE\n         CHECK DECBW\n         SPACE\n         LH    R1,DECBW+6          GET LENGTH FROM DECB\n         L     R15,DECBW+16        GET IOB ADDRESS\n         SH    R1,14(,R15)         SUBTRACT RESIDUAL COUNT\n         STH   R1,BLKLEN           SAVE ACTUAL LENGTH\n         SPACE\n         NI    SW,255-SWT-SWC      SET RECORD TYPES OFF\n         MVC   LINE,LINE-1\n         MVC   LINE+1(31),=C'MSG004  RECORD SIZE NNNNN, TYPE'\n         CVD   R1,DOUBLE\n         MVC   LINE+20(6),=X'402020202120'\n         ED    LINE+20(6),DOUBLE+5\n         LA    R1,LINE+33\n         TM    PREVTYPE,X'01'      WAS PREVIOUS RECORD A CCW\n         BZ    NOTTXT              NO, BRANCH\n         MVC   0(3,R1),=C'TXT'     YES, THIS ONE IS TEXT\n         MVI   PREVTYPE,0\n         OI    SW,SWT              TEXT\n         B     OKRTYPE\nNOTTXT   MVC   PREVTYPE,0(R2)\n         CLI   0(R2),X'40'\n         BNE   *+14\n         MVC   0(3,R1),=C'SYM'\n         B     OKRTYPE\n         CLI   0(R2),X'20'\n         BNE   *+14\n         MVC   0(3,R1),=C'ESD'\n         B     OKRTYPE\n         CLI   0(R2),X'10'\n         BNE   *+14\n         MVC   0(3,R1),=C'SCT'\n         B     OKRTYPE\n         CLI   0(R2),X'80'\n         BNE   *+14\n         MVC   0(3,R1),=C'IDR'\n         B     OKRTYPE\n         TM    0(R2),X'03'\n         BNO   *+14\n         MVC   0(7,R1),=C'CCW/RLD'\n         B     OKMORC\n         TM    0(R2),X'01'\n         BZ    *+14\n         MVC   0(3,R1),=C'CCW'\n         B     OKMORC\n         TM    0(R2),X'02'\n         BZ    *+14\n         MVC   0(3,R1),=C'RLD'\n         B     OKMORE\n         MVC   0(3,R1),=C'***'\n         B     OKRTYPE\nOKMORC   OI    SW,SWC\nOKMORE   TM    0(R2),X'0C'\n         BZ    OKRTYPE\n         MVC   8(3,R1),=C'EOM'\n         TM    0(R2),X'08'\n         BO    OKRTYPE\n         MVC   8(3,R1),=C'EOS'\nOKRTYPE  EQU   *\n         TM    OPTIONS,#D          DEBUG MODE\n         BZ    *+8                 NO, SKIP RECORD SIZE MESSAGE\n         BAL   R14,REPORT\n         MVC   LINE,LINE-1\n         TM    SW,SWC\n         BZ    NOTCCW\n         L     R1,8(,R2)           GET LINK-ASSIGNED ADDRESS\n         LA    R1,0(,R1)           ZERO HIGH ORDER BYTE\n         ST    R1,ADDRESS          SAVE ADDRESS\n         LH    R1,4(,R2)           LENGTH OF CONTROL DATA\n         LTR   R1,R1               IS IT ZERO\n         BZ    NOINFO\n         LA    R15,16(,R2)         POINT TO CONTROL DATA\n         AH    R15,6(,R2)          POINT PAST RLD INFO IF ANY\n         BCTR  R1,0\n         EX    R1,INFOMVC          MOVE CONTROL DATA\n         LA    R1,1(,R1)\nNOINFO   SRL   R1,2                DIVIDE LENGTH BY 4\n         STH   R1,INFONUM          SAVE NUMBER OF ENTRIES\n         B     READLOOP\nINFOMVC  MVC   INFO(0),0(R15)      (EXECUTED)\nNOTCCW   TM    SW,SWT              IS THIS A TEXT RECORD\n         BZ    READLOOP            BRANCH IF NOT A TEXT RECORD\n         SPACE\n************************************************************\n*                                                          *\n*        SCAN THE TEXT FOR THE STRING                      *\n*                                                          *\n************************************************************\n         SPACE\n         NI    SW,255-SWM-SWS      SET CHANGE BIT OFF, SPAN BIT OFF\n         LR    R4,R2\n         LH    R3,BLKLEN\n         BCTR  R3,0                LENGTH CODE OF RECORD\n         LA    R6,STRINGA          POINT TO OLD STRING\n         LH    R7,STRINGL          LENGTH OF STRING\n         BCTR  R7,0                LENGTH CODE OF STRING\n         LA    R8,STRINGB          POINT TO NEW STRING\nCHGLOOP  CR    R7,R3               ROOM FOR STRING\n         BH    CHGSPAN             NO, BRANCH\n         EX    R7,CHGCLC           DOES STRING MATCH\n         BNE   CHGNXT              NO, BRANCH\n         BAL   R14,WHERE           FIND OUT WHAT CSECT THIS IS\n         LTR   R15,R15             IS THIS CSECT ELIGIBLE\n         BNZ   CHGNXT              NO, BRANCH\n         BAL   R14,SHOW            PRINT THE OFFSET AND CSECT\n         LA    R1,1\n         A     R1,COUNTREP         COUNT THE HITS\n         ST    R1,COUNTREP\n         CLI   TYPE,C'X'           IS THIS A FIND\n         BE    CHGBYP              YES, DO NOT MODIFY\n         BAL   R14,PUNCH           PUNCH ZAPS\n         EX    R7,CHGMVC           MOVE STRING INTO RECORD\n         OI    SW,SWM              RECORD CHANGED\nCHGBYP   AR    R4,R7               POINT TO LAST BYTE MOVED\n         SR    R3,R7               REDUCE LENGTH ACCORDINGLY\nCHGNXT   LA    R4,1(,R4)           POINT TO NEXT BYTE OF RECORD\n         BCTR  R3,0                REDUCE LENGTH BY 1\n         B     CHGLOOP             KEEP LOOKING\nCHGCLC   CLC   0(0,R4),0(R6)       (EXECUTED)\nCHGMVC   MVC   0(0,R4),0(R8)       (EXECUTED)\nCHGSPAN  EQU   *\n         LTR   R7,R7               IS STRING LENGTH 1\n         BZ    CHGX                YES, CANT SPAN 2 RECORDS\n         BCTR  R7,0                REDUCE STRING LENGTH CODE BY 1\nCHGSPANL EX    R7,CHGCLC           DOES PART OF STRING MATCH\n         BE    CHGSPANW            YES, BRANCH\n         LA    R4,1(,R4)           POINT TO NEXT BYTE OF RECORD\n         BCTR  R7,0                REDUCE LENGTH CODE BY 1\n         LTR   R7,R7               IS LENGTH CODE NEGATIVE\n         BNM   CHGSPANL            NO, BRANCH TO KEEP LOOKING\n         B     CHGX                YES, NOT A SPAN CANDIDATE\nCHGSPANW EQU   *\n         OI    SW,SWS              INDICATE SPAN CANDIDATE\n         BAL   R14,WHERE\n         LTR   R15,R15             IS THIS AN ELIGIBLE CSECT\n         BNZ   CHGX                NO, BRANCH\n         BAL   R14,SHOW\n         LA    R1,1\n         A     R1,COUNTSPN         COUNT THE PARTIAL HITS\n         ST    R1,COUNTSPN\nCHGX     EQU   *\n         B     READLOOP\n         SPACE\n************************************************************\n*                                                          *\n*         SUBROUTINE TO DETERMINE CURRENT CSECT            *\n*                                                          *\n************************************************************\n         SPACE\nWHERE    ST    R14,PUNCHR\n         LR    R1,R4\n         SR    R1,R2               OFFSET INTO RECORD\n         LA    R15,INFO\n         LH    R0,INFONUM\nINFOLOOP CH    R1,2(,R15)          IN THIS CSECT\n         BL    INFOFND             YES, BRANCH\n         SH    R1,2(,R15)          REDUCE OFFSET BY CSECT LEN\n         LA    R15,4(,R15)\n         BCT   R0,INFOLOOP\n         LA    R15,2\n         B     WHEREX              ILLOGIC\nINFOFND  LH    R15,0(,R15)         GET CESD ENTRY NUMBER\n         BCTR  R15,0\n         SLL   R15,4               MULTIPLY BY 16\n         A     R15,ESDPTR\n         LR    R0,R4               ADDRESS OF CHANGE\n         SR    R0,R2               OFFSET INTO RECORD\n         A     R0,ADDRESS          GET LINKED ADDRESS OF CHANGE\n         L     R1,8(,R15)          GET LINKED ADDRESS OF CSECT\n         LA    R1,0(,R1)           CLEAR HI ORDER BYTE\n         SR    R0,R1               COMPUTE THE OFFSET\n         L     R1,12(,R15)         GET THE LENGTH OF THE CSECT\n         LA    R1,0(,R1)           CLEAR HIGH ORDER BYTE\n         CR    R0,R1               IS OFFSET VALID\n         BNL   WHEREX              NO, SOMETHING IS WRONG, ILLOGIC\n         ST    R0,OFFSET\n         MVC   OFFESD(16),0(R15)\n         AH    R0,STRINGL          ADD LENGTH OF STRING TO OFFSET\n         BCTR  R0,0                GET OFFSET OF LAST BYTE OF STRING\n         CR    R0,R1               IS LAST BYTE IN SAME CSECT\n         BNL   WHEREX              NO, EXIT WITH R15 NONZERO\n         LA    R15,OFFESD\n         IC    R0,8(,R15)\n         NI    8(R15),X'0F'\n         CLI   8(R15),X'04'        PRIVATE CODE CSECT\n         BNE   WHERENP             NO, BRANCH\n         MVC   0(8,R15),=C'$PRIVATE'\n         STC   R0,8(,R15)          RESTORE BITS ERASED BY NI\n         TM    8(R15),X'14'        IS IT ENTAB/SEGTAB\n         BO    WHEREX              YES, EXIT WITH R15 NONZERO\nWHERENP  EQU   *\n         CLI   CSECT,C' '          DID NAME SPECIFY CSECT\n         BE    WHEREOK             NO, ANY CSECT IS OK\n         CLC   CSECT,0(R15)        IS THIS THE SPECIFIED CSECT\n         BNE   WHEREX              NO, EXIT WITH R15 NONZERO\nWHEREOK  SR    R15,R15             INDICATE CSECT ELIGIBLE\nWHEREX   L     R14,PUNCHR\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         SUBROUTINE TO DISPLAY CURRENT LOCATION           *\n*                                                          *\n************************************************************\n         SPACE\nSHOW     ST    R14,PUNCHR\n         MVC   LINE,LINE-1\n         MVC   LINE+1(30),=C'MSG005  OFFSET XXXXXX IN CSECT '\n         MVC   LINE+32(8),OFFESD\n         TM    SW,SWS              SPAN CANDIDATE?\n         BZ    *+14                NO, SKIP NEXT 2 INSTRUCTIONS\n         MVI   MID+5,C'6'          MSG006\n         MVC   LINE+42(L'SPANMSG),SPANMSG\n         LA    R1,OFFSET+1\n         LA    R0,3\n         LA    R15,OFFHEX\n         BAL   R14,HEX\n         MVC   LINE+16(6),OFFHEX\n         BAL   R14,REPORT\n         L     R14,PUNCHR\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         SUBROUTINE TO PUNCH ZAP STATEMENTS               *\n*                                                          *\n************************************************************\n         SPACE\nPUNCH    TM    STATUS,OPENZ        IS SYSPUNCH OPEN\n         BZR   R14                 NO, BRANCH\n         ST    R14,PUNCHR\n         CLC   ZPM,MEMBER          SAME AS LAST NAME STATEMENT\n         BNE   ZPNAME              NO, GO WRITE NEW NAME STMT\n         CLC   ZPC,OFFESD          SAME AS LAST NAME STMT\n         BE    ZPNAMEX             YES, BYPASS NAME STATEMENT\nZPNAME   MVC   ZPM,MEMBER          UPDATE LAST NAME VALUE\n         MVC   ZPC,OFFESD          UPDATE LAST NAME VALUE\n         MVI   ZPOUT,C' '\n         MVC   ZPOUT+1(79),ZPOUT\n         MVC   ZPOUT+1(4),=C'NAME'\n         MVC   ZPOUT+6(8),ZPM      MEMBER\n         MVC   ZPOUT+15(8),ZPC     CSECT\n         LA    R1,PUNDCBW\n         PUT   (1),ZPOUT           WRITE A NAME STATEMENT\nZPNAMEX  EQU   *\n         MVC   ZPVER+5(6),OFFHEX   VER OFFSET\n         MVC   ZPREP+5(6),OFFHEX   REP OFFSET\n         LA    R1,PUNDCBW\n         PUT   (1),ZPVER           WRITE A VER STATEMENT\n         LA    R1,PUNDCBW\n         PUT   (1),ZPREP           WRITE A REP STATEMENT\nNOZAPS   EQU   *\n         L     R14,PUNCHR\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*         END-OF-DATA ON CURRENT MEMBER                    *\n*                                                          *\n************************************************************\n         SPACE\nEODLIB   EQU   *\n         MVC   LINE,LINE-1\n         MVC   LINE+1(25),=C'MSG009  LOCATIONS FOUND ='\n         L     R0,COUNTREP\n         CVD   R0,DOUBLE\n         LA    R1,LINE+26\n         MVC   0(8,R1),=X'4020202020202120'\n         ED    0(8,R1),DOUBLE+4\nLEFT     CLI   1(R1),C' '          LEADING BLANK\n         BNE   *+18                NO, BRANCH, SHIFT LEFT IS DONE\n         MVC   1(6,R1),2(R1)       SHIFT LEFT\n         MVI   7(R1),C' '          BLANK LAST BYTE\n         B     LEFT                CONTINUE SHIFT\n         L     R0,COUNTSPN\n         LTR   R0,R0\n         BZ    ZROSPAN\n         CVD   R0,DOUBLE\n         LA    R1,LINE+35\n         MVC   0(4,R1),=C'PLUS'\n         LA    R1,4(,R1)\n         MVC   0(8,R1),=X'4020202020202120'\n         ED    0(8,R1),DOUBLE+4\nLEFTS    CLI   1(R1),C' '          LEADING BLANK\n         BNE   *+18                NO, BRANCH, SHIFT LEFT IS DONE\n         MVC   1(6,R1),2(R1)       SHIFT LEFT\n         MVI   7(R1),C' '          BLANK LAST BYTE\n         B     LEFTS               CONTINUE SHIFT\nZROSPAN  EQU   *\n         BAL   R14,REPORT\n         B     READCTL\n         SPACE\nHEX      UNPK  0(3,R15),0(2,R1)    UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEX              DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         EJECT\n************************************************************\n*                                                          *\n*         OPTION CONTROL STATEMENT                         *\n*                                                          *\n************************************************************\n         SPACE\nOPTION   EQU   *\n         LA    R6,ODE2\n         TM    6(R6),PRESENT\n         BNO   ILLCARD\nCTLSPEC  TM    6(R6),QUOTED        IS OPERAND IN QUOTES\n         BO    ILLCARD             YES, ERROR\n         L     R1,0(,R6)           POINT TO OPERAND\n         LH    R15,4(,R6)          GET LENGTH OF KEYWORD\n         CH    R15,=H'7'\n         BE    CTL7\n         CH    R15,=H'5'\n         BE    CTL5\n         CH    R15,=H'3'\n         BNE   ILLCARD\nCTL3     CLC   0(3,R1),OPMSG+2\n         BNE   *+12\n         OI    OPTIONS,#M          MSG\n         B     CTLNEXT\n         CLC   0(3,R1),OPLOG+2\n         BNE   *+12\n         OI    OPTIONS,#L          LOG\n         B     CTLNEXT\n         B     ILLCARD\nCTL5     CLC   0(5,R1),OPLOG\n         BNE   *+12\n         NI    OPTIONS,255-#L      NOLOG\n         B     CTLNEXT\n         CLC   0(5,R1),OPMSG\n         BNE   *+12\n         NI    OPTIONS,255-#M      NOMSG\n         B     CTLNEXT\n         CLC   0(5,R1),OPFLUSH+2\n         BNE   *+12\n         OI    OPTIONS,#F          FLUSH\n         B     CTLNEXT\n         B     ILLCARD\nCTL7     CLC   0(7,R1),OPFLUSH\n         BNE   *+12\n         NI    OPTIONS,255-#F      NOFLUSH\n         B     CTLNEXT\n         B     ILLCARD\nCTLNEXT  LA    R6,8(,R6)           POINT TO NEXT O.D.E.\n         TM    6(R6),PRESENT       OPERAND PRESENT?\n         BO    CTLSPEC             YES, BRANCH\n         B     READCTL\n         EJECT\n************************************************************\n*                                                          *\n*         ISSUE MESSAGE FOR PROGRAM LOGIC ERROR            *\n*                                                          *\n************************************************************\n         SPACE\nILLOGIC  MVC   LINE,LINE-1\n         MVC   LINE+1(26),=C'MSG099  LOGIC ERROR NUMBER'\n         LA    R1,LINE+27\n         CVD   R15,DOUBLE\n         MVC   0(4,R1),=X'40202120'\n         ED    0(4,R1),DOUBLE+6\n         BAL   R14,REPORT\n         MVI   RC+1,4\n         B     READCTL\n         EJECT\n************************************************************\n*                                                          *\n*         REPORT WRITER                                    *\n*                                                          *\n************************************************************\n         SPACE\nREPORT   LA    R1,LINE\n         LA    R0,121\nREPORTW  STM   R14,R3,REPORTS\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         LH    R15,REPORTLN        GET CURRENT LINE COUNT\n         CH    R15,REPORTMX        IS PAGE FILLED UP\n         BNH   *+10                NO\n         SR    R15,R15             YES, FORCE NEW PAGE\n         STH   R15,REPORTLN        YES, ZERO THE LINE COUNT\n         LTR   R15,R15             IS NEW PAGE REQUESTED?\n         BZ    REPORTH             YES, GO PRINT HEADING\nREPORTD  CH    R0,=H'121'          IS OUTPUT LINE LENGTH OK?\n         BNL   REPORTP             YES, BRANCH\n         MVC   REPORTO,REPORTO-1   BLANK THE WORK AREA\n         LTR   R14,R0              COPY LENGTH\n         BNP   REPORTB             BLANK LINE IF < 1\n         BCTR  R14,0               LENGTH MINUS 1\n         B     *+10\n         MVC   REPORTO(0),0(R1)    COPY OUTPUT LINE\n         EX    R14,*-6             EXECUTE MVC\nREPORTB  LA    R1,REPORTO          POINT TO NEW OUTPUT LINE\nREPORTP  LR    R2,R1               POINT R2 TO OUTPUT LINE\n         PUT   (R3),(R2)           WRITE OUTPUT LINE\n         LA    R15,1               INCREMENT\n         AH    R15,REPORTLN         LINE\n         STH   R15,REPORTLN          COUNT\nREPORTX  LM    R14,R3,REPORTS      RESTORE REGS\n         BR    R14                 RETURN\nREPORTH  LA    R15,1               INCREMENT\n         AH    R15,REPORTPG         PAGE\n         STH   R15,REPORTPG          COUNT\n         MVC   REPORTO,REPORTO-1   BLANK HEADING\n         MVI   REPORTO,C'1'        CC = NEW PAGE\n         MVC   REPORTO+1(L'HEAD1),HEAD1\n         LA    R15,REPORTO+1+L'HEAD1\n         MVC   0(44,R15),JFCB\n         LA    R15,44(,R15)\nAPPENDV  CLI   0(R15),C' '\n         BNE   *+8\n         BCT   R15,APPENDV\n         MVC   3(6,R15),JFCB+118   VOLUME\n         LH    R15,REPORTPG        GET PAGE NUMBER\n         CVD   R15,DOUBLE          CONVERT TO BINARY\n         LA    R1,REPORTO+100-9    RIGHT EDGE PAGE NO\n         MVC   3(6,R1),=X'402020202020' EDIT MASK\n         ED    3(6,R1),DOUBLE+5    UNPACK PAGE NO\n         MVC   0(4,R1),=C'PAGE'    INSERT 'PAGE'\n         PUT   (R3),REPORTO        PUT HEADING LINE 1\n         MVC   REPORTO,REPORTO-1   BLANK LINE\n         PUT   (R3),REPORTO        PUT HEADING LINE 2\n         LM    R0,R1,REPORTS+8     RESTORE R0 AND R1\n         B     REPORTD             GO PRINT DETAIL LINE\n         EJECT\nFLUSH    MVC   LINE,LINE-1\n         MVC   MID(L'MSG002),MSG002\n         BAL   R14,REPORT\n         SPACE\nEODCTL   EQU   *\nEXITRC   LH    R15,RC\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         LA    R7,CLOSE\n         MVI   0(R7),128\n         TM    STATUS,OPENZ        IS SYSPUNCH OPEN?\n         BZ    EXITCZX             NO, SKIP CLOSE\n         LA    R6,PUNDCBW\n         CLOSE ((R6)),MF=(E,(R7))\nEXITCZX  EQU   *\n         TM    STATUS,OPENL        IS SYSLIB OPEN?\n         BZ    EXITC5X             NO, SKIP CLOSE\n         CLOSE ((R5)),MF=(E,(R7))\nEXITC5X  EQU   *\n         TM    STATUS,GETMN        IS FREEMAIN NEEDED\n         BZ    EXITGMX             NO, SKIP CLOSE\n         L     R1,BUFF1A\n         L     R0,GETSIZ\n         FREEMAIN R,LV=(0),A=(1)\nEXITGMX  EQU   *\n         TM    STATUS,OPENC        IS SYSIN OPEN?\n         BZ    EXITC4X             NO, SKIP CLOSE\n         LA    R4,CTLDCBW\n         CLOSE ((R4)),MF=(E,(R7))\nEXITC4X  EQU   *\n         TM    STATUS,OPENP        IS SYSPRINT OPEN?\n         BZ    EXITC3X             NO, SKIP CLOSE\n         LA    R3,PRTDCBW          POINT R3 TO DCB\n         CLOSE ((R3)),MF=(E,(R7))\nEXITC3X  EQU   *\n         SPACE 1\n         LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2              RESTORE RETURN CODE\n         LM    0,12,20(13)\n         L     14,12(,13)\n         BR    14\n         EJECT\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\nOPLOG    DC    C'NOLOG'\nOPMSG    DC    C'NOMSG'\nOPFLUSH  DC    C'NOFLUSH'\n         SPACE\nHEAD1    DC    C'FINDAZAP - SYSTEMS SUPPORT PROGRAM - '\n         PRINT NOGEN\n         SPACE\nPRTDCB   DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,                    +\n               RECFM=FBA,LRECL=121\nPRTDCBL  EQU   *-PRTDCB\n         SPACE\nCTLDCB   DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,LRECL=80\nCTLDCBL  EQU   *-CTLDCB\n         SPACE\nLIBDCB   DCB   DDNAME=SYSLIB,MACRF=(R),DSORG=PO,                       +\n               RECFM=U,BLKSIZE=32760\nLIBDCBL  EQU   *-LIBDCB\n         SPACE\nPUNDCB   DCB   DDNAME=SYSPUNCH,MACRF=(PM),DSORG=PS,                    +\n               RECFM=FB,LRECL=80\nPUNDCBL  EQU   *-PUNDCB\n         SPACE\n         PRINT GEN\n         SPACE\n         READ  DECBM,SF,5,0,BUFF1L,MF=L\nDECBML   EQU   *-DECBM\n         SPACE\nMSG002   DC    C'MSG002  *** ALL REMAINING STATEMENTS FLUSHED ***'\n         SPACE\nVALXTAB  DC    193X'FF',6X'00',41X'FF',10X'00',6X'FF'\n*                       A-F            0-9\n         SPACE\nTABNONBL DC    64X'FF'\n         DC    X'00'               BLANK\n         DC    42X'FF'\n         DC    X'FF'               COMMA\n         DC    148X'FF'\nTABBLANK DC    64X'00'\n         DC    X'40'               BLANK\n         DC    42X'00'\n         DC    X'00'               COMMA\n         DC    148X'00'\nTABQUOTE DC    125X'00',X'7D',130X'00'\n         SPACE\nCAPS     DC    129AL1(*-CAPS)      00-80\n         DC    9AL1(*-CAPS+X'40')  81-89 BECOME C1-C9\n         DC    7AL1(*-CAPS)        8A-90\n         DC    9AL1(*-CAPS+X'40')  91-99 BECOME D1-D9\n         DC    8AL1(*-CAPS)        9A-A1\n         DC    8AL1(*-CAPS+X'40')  A2-A9 BECOME E2-E9\n         DC    86AL1(*-CAPS)       AA-FF\n         SPACE\nSPANMSG  DC    C'*** STRING ONLY PARTIALLY CHECKED ***'\n         SPACE\nQUOTE    EQU   X'7D'\n         SPACE\nEODAD    EQU   32                  OFFSET INTO DCB\nRECFM    EQU   36                  OFFSET INTO DCB\nEXLST    EQU   36                  OFFSET INTO DCB\nOFLGS    EQU   48                  OFFSET INTO DCB\nDDNAM    EQU   40                  OFFSET INTO DCB\nOPTCD    EQU   52                  OFFSET INTO DCB\nBLKSI    EQU   62                  OFFSET INTO DCB\nLRECL    EQU   82                  OFFSET INTO DCB\n         SPACE\n#F       EQU   X'10'               FLUSH\n#L       EQU   X'08'               LOG\n#M       EQU   X'04'               MSG\n#D       EQU   X'01'               DEBUG\n#DEFAULT EQU   #F+#L+#M            FLUSH,LOG,MSG\n         SPACE\nESDSIZE  DC    F'48000'            ROOM FOR 3000 ESD ENTRIES\n         SPACE\nBUFF1L   EQU   32760               LARGEST BLOCK SUPPORTED,\n*                                  AND A MULTIPLE OF 8, PLEASE.\nBUFF2L   EQU   0                   WILL BE CHANGED TO EQUAL BUFF1L IF\n*                                  SUPPORT FOR FINDING STRINGS THAT\n*                                  SPAN TWO RECORDS IS EVER ADDED.\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    0F\nDOUBLE   DS    D\nOPEN     DS    F\nCLOSE    EQU   OPEN\nCOUNTIN  DS    F\nGETSIZ   DS    F\nBLKLEN   DS    H\nBUFF1A   DS    F\nBUFF2A   DS    F\nESDPTR   DS    F\nESDEND   DS    F\nADDRESS  DS    F\nOFFSET   DS    F\nOFFESD   DS    CL16\nOFFHEX   DS    CL7\nDEVDATA  DS    2F\nCOUNTREP DS    F\nCOUNTSPN DS    F\nOPTIONS  DS    C\nSW       DS    C\nSWN      EQU   X'80'               VALID NAME STATEMENT\nSWM      EQU   X'20'               RECORD HAS BEEN MODIFIED\nSWT      EQU   X'10'               TEXT RECORD\nSWC      EQU   X'08'               CCW TYPE RECORD\nSWE      EQU   X'04'               CSECT FOUND\nSWS      EQU   X'02'               STRING MIGHT SPAN 2 RECORDS\nRC       DS    H\nPUNCHR   EQU   *\nVALXR    DS    6F\nPRTDCBW  DS    0F,(PRTDCBL)X\nCTLDCBW  DS    0F,(CTLDCBL)X\nLIBDCBW  DS    0F,(LIBDCBL)X\nPUNDCBW  DS    0F,(PUNDCBL)X\nLIBEXLST DS    F\nPRTEXLST DS    F\nPUNEXLST DS    F\nPOINTER  DS    F\nDECBW    DS    0F,(DECBML)X\nJFCB     DS    196X\nINREC    DS    0D,CL80\nODL      DS    0F                  OPERAND DESCRIPTOR LIST\nODE1     DS    2F                  OPERAND DESCRIPTOR ENTRY 1\nODE2     DS    2F                  OPERAND DESCRIPTOR ENTRY 2\nODE3     DS    2F                  OPERAND DESCRIPTOR ENTRY 3\nODE4     DS    2F                  OPERAND DESCRIPTOR ENTRY 4\nODE5     DS    2F                  OPERAND DESCRIPTOR ENTRY 5\nODE6     DS    2F                  OPERAND DESCRIPTOR ENTRY 6\nODLL     EQU   *-ODL\nPRESENT  EQU   X'80'\nQUOTED   EQU   X'40'\nSTRINGL  DS    H\nSTRINGA  DS    CL80\nSTRINGB  DS    CL80\nTYPE     DS    C\nSTATUS   DS    C\nOPENP    EQU   X'80'\nOPENC    EQU   X'40'\nOPENL    EQU   X'20'\nOPENZ    EQU   X'10'\nGETMN    EQU   X'08'\nPREVTYPE DS    C\n         DS    C                   LINE-1\nLINE     DS    CL133\nLINEH1   DS    CL133\nMID      EQU   LINE+1,6\nTXT      EQU   LINE+9\nMBR      EQU   LINE+16,8\nRESULT   EQU   LINE+25\nMEMBER   DS    D\nCSECT    DS    D\nDSNAME   DS    CL44\nVOLUME   DS    CL6\nBLDL     DS    0D,CL80\nREPORTS  DS    6F                  REGISTER SAVE AREA\nREPORTPG DS    H                   PAGE COUNT, INIT H'0'\nREPORTLN DS    H                   LINE COUNT, INIT H'0'\nREPORTMX DS    H                   LINES/PAGE, INIT H'50'\nREPORTOB DS    CL1                 REPORTO-1 (INIT BLANK)\nREPORTO  DS    CL133               OUTPUT AREA\n         DS    0D,CL6\nINFONUM  DS    H\nINFO     DS    CL256\nZPM      DS    CL8\nZPC      DS    CL8\nZPOUT    DS    CL80\nZPVER    DS    CL80\nZPREP    DS    CL80\n@DATAL   EQU   *-@DATA\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMBER": {"ttr": 5383, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x16\\x004\\x00\\x91\\x14\\x1f\\x01\\x174_!\"\\ni\\nG\\x00\\x00\\xe4\\xd7\\xc4\\xc1\\xe3\\xc5\\xc4@@@'", "ispf": {"version": "01.22", "flags": 0, "createdate": "1991-05-21T00:00:00", "modifydate": "2017-12-11T21:22:34", "lines": 2665, "newlines": 2631, "modlines": 0, "user": "UPDATED"}, "text": "         TITLE '   M E M B E R    '\n***********************************************************************\n*                                                                     *\n*        'MEMBER' TSO COMMAND                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN: JANUARY 20 1977.\n* DATE UPDATED: DEC 11 2017.\n* ATTRIBUTES: RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* DESCRIPTION.\n*           THIS TSO COMMAND DISPLAYS THE INFORMATION RETURNED BY\n*           THE 'BLDL' MACRO. FOR LOAD MODULES, IT FORMATS THE\n*           INFORMATION CONTAINED IN THE USER DATA FIELD OF THE\n*           DIRECTORY ENTRY RETURNED BY THE 'BLDL' MACRO. FOR\n*           MEMBERS CREATED BY THE 'SPF' IBM PRODUCT, IT FORMATS\n*           THE SPF STATISTICS FROM THE USER DATA FIELD. FOR LOAD\n*           MODULES, IT CAN LIST ESD AND IDR INFORMATION.\n*\n*           THE SYNTAX IS\n*                MEMBER  'DSNAME(MEMBER)'  UNIT(NAME)  VOLUME(NAME)\n*                                          ESOTERIC  DATA\n*                                          LIST  MAP  IDR  LOAD\n*                                          PLUS(MEMBER2 MEMBER3...)\n*            OR\n*                MEMBER 'MEMBER' SYS  ESOTERIC  WHERE\n*            OR\n*                MEMBER 'MEMBER' SLPA      LIST\n*\n*            THE LATTER 2 FORMS (SYS AND SLPA) ARE MORE FOR\n*            SYSTEMS SUPPORT USE THAN FOR NORMAL APPLICATIONS.\n*\n***********************************************************************\n*\n*            KEYWORDS FOR THE FIRST FORM (DSNAME FORM)\n*\n*            THE 'DATA' KEYWORD PRODUCES AN UNFORMATTED HEX DISPLAY\n*            OF THE DIRECTORY DATA.\n*\n*            THE 'ESOTERIC' KEYWORD CAUSES DISPLAY OF EXTRA INFORMATION\n*            THAT MOST USERS NEVER CARE OR NEED TO KNOW.\n*\n*            THE 'LIST' KEYWORD CAUSES THE FIRST 48 BYTES OF THE\n*            LOAD MODULE TEXT TO BE DISPLAYED.  THIS IS USEFUL FOR\n*            MODULES ASSEMBLED WITH IDENTIFICATION INFORMATION\n*            NEAR THE TOP OF THE MODULE.\n*\n*            THE 'MAP' KEYWORD CAUSES 'CESD' (EXTERNAL SYMBOL\n*            DICTIONARY) INFORMATION IN THE MODULE TO BE DISPLAYED.\n*\n*            THE 'IDR' KEYWORD CAUSES 'IDR' (IDENTIFICATION RECORD)\n*            INFORMATION IN THE MODULE TO BE DISPLAYED.\n*\n*            THERE ARE 4 TYPES OF IDR'S -\n*               LINKEDIT, TRANSLATOR, ZAP, AND IDENTIFY.\n*            IF ONLY 'IDR' IS SPECIFIED, ONLY LINKEDIT IS DISPLAYED.\n*            TO DISPLAY A TRANSLATOR, SPECIFY IDR(TRAN).\n*            TO DISPLAY A SECOND TRANSLATOR, SPECIFY IDR(PLS).\n*            TO DISPLAY ZAP RECORDS, SPECIFY IDR(ZAP).\n*            TO DISPLAY ZAP RECORD SPACE, SPECIFY IDR(SPACE).\n*            TO DISPLAY IDENTIFY RECORDS, SPECIFY IDR(ID).\n*            TO DISPLAY ALL OF THE ABOVE, EXCEPT SPACE,\n*               SPECIFY IDR(ALL) OR IDR(T Z I P).\n*\n*            THE CSECT('NAME') KEYWORD ALLOWS YOU TO RESTRICT THE\n*            MAP AND IDR DISPLAYS TO A SPECIFIC CSECT.\n*\n***********************************************************************\n*\n*            KEYWORDS FOR THE 'SYSTEM' AND 'SLPA' FORM\n*\n*            IF THE 'SYS' KEYWORD IS SPECIFIED, THE FIRST OPERAND\n*            IS ONLY A MEMBER NAME, AND THE SYSTEM LINK LIBRARIES\n*            ARE SEARCHED (AND STEPLIB IF THE SESSION HAS ONE).\n*\n*            IF THE 'SLPA' KEYWORD IS SPECIFIED, THE FIRST OPERAND\n*            IS ONLY A MEMBER NAME, AND THE LINK PACK AREA IS SEARCHED.\n*\n*            'LIST' IS THE ONLY VALID KEYWORD WITH 'SLPA'.\n*\n*            'LIST' 'MAP' 'IDR' AND 'CSECT' ARE NOT VALID WITH 'SYS'\n*            BECAUSE READING ESD AND IDR RECORDS REQUIRES A DCB\n*            AND THIS PROGRAM IS DOES NOT HAVE ACCESS TO THE\n*            SYSTEM LINKLIST DCB OR STEPLIB DCB.\n*\n*            THE 'WHERE' KEYWORD, VALID ONLY WITH 'SYS', CAUSES\n*            THE NUMBER OF THE SYSTEM LINK LIBRARY TO BE DISPLAYED.\n*\n***********************************************************************\n*\n*           LOG OF CHANGES.\n*            14SEP79 - GBLB ADDED FOR SVS/MVT VERSION.\n*                      SUBFIELD ADDED TO 'MAP' KEYWORD.\n*                      ESTAE REMOVED.\n*            18SEP79 - 'WHERE' KEYWORD ADDED.\n*            24OCT79 - MSG08 IMPROVED. MAPENTX LENGTHENED BY 1.\n*            10APR80 - TEST CVT+116 FOR MVS.\n*            09OCT80 - SPF STATISTICS DISPLAY ADDED.\n*            10OCT80 - FIRST OPERAND MAY NOW BE A LIST IN PARENS.\n*            19DEC80 - SPF SIZE FIELD 16 BITS, NOT 15.\n*            06JAN81 - SPF V.M IS BINARY, NOT DECIMAL.\n*            06JAN81 - SHOW SPF DATES AS MM/DD/YY INSTEAD OF JULIAN.\n*            27FEB81 - IDR DISPLAY ADDED. CSECT SELECTION ADDED.\n*            10APR81 - TEST OPT3I AT IDRIDENT. BUG FIXED (MAP(ALL)\n*                      BUG FIXED - WAS TESTING OPTION1 FOR OPT2A.\n*            27MAY81 - PLUS(MEMBER MEMBER MEMBER...) KEYWORD ADDED.\n*            09NOV82 - SHOW APF AUTHORIZATION ON FIRST LINE.\n*                      SHOW SCTR ATTRIBUTE. UNIT AND VOL KEYWORDS.\n*                      SLPA KEYWORD FOR SEARCH LPA DIRECTORY.\n*            10NOV82 - SLPA ALSO SEARCHES JPAQ/LPAQ USING THE\n*                      IDENTIFY SVC LIKE IKJEFT02 DOES.\n*            18JUL83 - LOAD KEYWORD, TO TEST FOR VALID LOAD MODULE.\n*            01MAY85 - FIX LOOP IN SLPA BY RESTORING R3 FROM MYANS\n*                      AFTER CALLING IEAVVMSR.\n*            22JUL86 - FIX BUG WHEN BOTH I(A) AND LOAD ARE SPECIFIED\n*                      R7 MUST BE RESET TO PROPERLY ADDRESS PDSINDIC.\n*            15FEB91 - CHECK FOR MSGCRTXT00'S FUNNY DATE IN IDR-TRAN,\n*                      FOUND IN TCPIP-FOR-MVS MODULES, CSECT MSG$LIST,\n*                      DOES NOT CONFORM TO TRANSLATOR RECORD FORMAT AS\n*                      DESCRIBED IN LINKAGE EDITOR LOGIC MANUAL.\n*                      SHOW SOME TRANSLATORS BY NAME. THIRD BASE REG.\n*                      SHOW PRIVATE (PC) REFERENCED IN IDR TRANS.\n*                      FIX DAIR ERROR 4 PROBLEM (XA) BY ADDING VOLSER\n*                      WITH TWO BLANKS FOR DA08SER. SHOW ESDID IN MAP.\n*                      ADD ANYCESD FLAG, TO READ PAST SYM'S FOR CESD.\n*            19FEB91 - IF VOL, SKIP IKJEHDEF AND ADD PREFIX (MVS).\n*            25APR91 - NO CODE CHANGES, JUST COMMENTS.\n*            06MAY91 - ADD RMODE/AMODE TO ESOTERIC INFO.\n*            14MAY91 - RMODE/AMODE IN PARENS IF NO BITS ON.\n*            15MAY91 - INSTEAD OF 1 BYTE UNDER VS, 3 UNDER VSMRLD.\n*            20MAY91 - CHECK FOR ALIAS THAT HAS NO ALIAS INFO.\n*            21MAY91 - ADD OUTFILE KEYWORD. MOVE DELETE OF IKJPUTL\n*                      OUTSIDE OF DSNLOOP.\n*            17NOV15 - INCREASE GETMAIN FOR ESDPTR FROM 32768 TO 98304\n*                      FOR CEE.SCEELPA(CEEEV003)\n*                      INCREASE GETMAIN FOR IDRPTR FROM 10240 TO 30720\n*                      CHECK FOR HLASM 569623400 AND XLC 5694A01 (Z/OS)\n*            11JUN16 - SHOW 4-BYTE LPDE EP AND ADDR INSTEAD OF 3-BYTE\n*                      EXAMPLE: MEMBER IGC0002G SLPA\n*                      CHECK FOR LINKER 566528408 OR BINDER 5695PMB01\n*            11DEC17 - CHECK UPT FOR 8-BYTE PREFIX - Z/OS V2R3.\n*\n***********************************************************************\n         SPACE\n         GBLB  &MVS\n&MVS     SETB  ('&SYSPARM' NE 'OS')     1 = MVS   0 = OS/MVT\n         SPACE\nMEMBER   START\n         USING *,R10,R11,R12\nORIGIN   B     @START-*(,15)\n         DC    AL1(8),CL11'MEMBER'\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL) SUBPOOL AND LENGTH\n@START   STM   14,12,12(13)\n         LR    R10,15\n         LA    R14,4095\n         LA    R11,1(R14,R10)      SECOND BASE REGISTER\n         LA    R12,1(R14,R11)      SECOND BASE REGISTER\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    R13,4(,R1)          PUT OLD ADDRESS IN NEW SAVE AREA\n         ST    R1,8(,R13)          PUT NEW ADDRESS IN OLD SAVE AREA\n         LR    R13,R1              SWITCH R13 TO NEW SAVE AREA\n         LR    R9,R13\n         USING @DATA,R9\n         SPACE 1\n         MVI   CLEANUP,0\n         MVI   OPTION1,0\n         MVI   OPTION2,0\n         SLR   R15,R15\n         STH   R15,RC\n         ST    R15,LINKAREA+4\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15                 IOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   PUTLOAD             BRANCH IF NOT MVS\n         TM    444(R15),X'80'      IS PUTLINE LOADED (VS2)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - GET ADDRESS\n         B     PUTLODED            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLODED ST    R15,MYPUTLEP        SAVE PUTLINE ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n*        L     R0,=A(MEMPCL)\n         LA    R0,PCLADDR\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   PARSELNK            BRANCH IF NOT MVS\n         TM    520(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,520(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     EXIT\nPARSEOK  EQU   *\n         SPACE\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         CLI   DATAKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1D       DATA\n         CLI   TESTKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1T       TEST\n         CLI   SYSTKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1S       SYSTEM OR SLPA\n         CLI   SYSTKW+1,3\n         BNE   *+8\n         OI    OPTION1,OPT1L       SLPA\n         CLI   ESOKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1E       ESOTERIC\n         CLI   MAPKW+1,0           MAP\n         BE    *+8\n         OI    OPTION2,OPT2M\n         CLI   MAPSKW+1,1          MAP(ALL)\n         BNE   *+8\n         OI    OPTION2,OPT2A       MAP(ALL)\n         CLI   LISTKW+1,0\n         BE    *+8\n         OI    OPTION2,OPT2L       LIST\n         CLI   LOADKW+1,0\n         BE    *+8\n         OI    OPTION2,OPT2O       LOAD\n         CLI   WHEREKW+1,0\n         BE    *+8\n         OI    OPTION1,OPT1W       WHERE\n         CLI   IDRKW+1,0\n         BE    NOIDRK\n         OI    OPTION2,OPT2I       IDR\n         CLI   IDRTRNKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3T       IDR(TRAN)\n         CLI   IDRPLSKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3T+OPT3P IDR(PLS)\n         CLI   IDRZAPKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3Z       IDR(ZAP)\n         CLI   IDRSPCKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3S       IDR(SPACE)\n         CLI   IDRIDEKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3I       IDR(IDENTIFY)\n         CLI   IDRALLKW+1,0\n         BE    *+8\n         OI    OPTION3,OPT3Z+OPT3T+OPT3P+OPT3I       (ALL)\nNOIDRK   EQU   *\n         SPACE\n         MVC   CNAME,=CL8' '\n         TM    CSECT+6,X'80'\n         BZ    NOCSECT\n         LA    R15,CSECT\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   CNAME(0),0(R14)\n         EX    R1,*-6\nNOCSECT  EQU   *\n         SPACE\n         MVC   ONAME,=CL8' '\n         TM    OUTFI+6,X'80'\n         BZ    NOOUTFI\n         LA    R15,OUTFI\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   ONAME(0),0(R14)\n         EX    R1,*-6\n         MVC   OUTDCBW(OUTDCBL),OUTDCB\n         LA    R4,OUTDCBW\n         USING IHADCB,R4\n         MVC   DCBDDNAM(8),ONAME\n         LA    R1,OUTEXL\n         STCM  R1,7,DCBEXLST\n         LA    R0,OUTOPEN          POINT R0 TO OPEN EXIT\n         ST    R0,0(,R1)           STORE ADDRESS IN OUTEXL\n         MVI   0(R1),X'85'         OPEN EXIT\n         MVC   OPEND(4),OPEN\n         SPACE\n         OPEN  ((R4),OUTPUT),MF=(E,OPEND)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OUTOK\n         B     NOOUTFI\nOUTOPEN  CLI   DCBRECFM,0          IF NO RECFM\n         BNE   *+8                    THEN\n         MVI   DCBRECFM,X'90'         RECFM=FB\n         CLC   DCBLRECL,=H'0'      IF NO LRECL\n         BNE   *+10                   THEN\n         MVC   DCBLRECL,=H'80'        LRECL=80\n         CLC   DCBBLKSI,=H'0'      IF NO BLKSI\n         BNE   *+10                   THEN\n         MVC   DCBBLKSI,=H'3120'      BLKSI=3120\n         BR    R14\n         DROP  R4                  IHADCB\nOUTOK    OI    OPTION1,OPT1O       OUTFILE\nNOOUTFI  EQU   *\n         SPACE\n         MVC   UNITN,=CL8' '\n         MVC   VOLSER(8),=CL8' '\n         TM    VOL+6,X'80'         VOL SPECIFIED\n         BZ    NOVOL               NO, LEAVE UNIT AND VOL BLANK\n         LA    R15,VOL\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   VOLSER(0),0(R14)\n         EX    R1,*-6\n         SPACE\n         TM    UNIT+6,X'80'\n         BZ    NOVOL\n         LA    R15,UNIT\n         L     R14,0(,R15)\n         LH    R1,4(,R15)\n         BCTR  R1,0\n         B     *+10\n         MVC   UNITN(0),0(R14)\n         EX    R1,*-6\nNOVOL    EQU   *\n         SLR   R15,R15\n         ST    R15,KOUNT\n         SPACE\n************************************************************\n*                                                          *\n*        GET THE MEMBER NAME                               *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R8,DSN\n         B     DSNGO\nDSNLOOP  L     R8,24(,R8)\nDSNGO    ST    R8,DSNPTR\n         MVC   MEMBER8(8),=CL8' '\n         TM    14(R8),X'80'        MEMBER SPECIFIED?\n         BZ    NOMEMBER            NO - BRANCH\n         LH    R1,12(,R8)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,8(,R8)          GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   MEMBER8(0),0(R14)    MOVE MEMBER NAME\nSYSDSN   EX    R1,*-6\n         STH   R1,MEMBERL\n         B     OKMEMBER\nNOMEMBER EQU   *\n         TM    OPTION1,OPT1S       'SYSTEM' SPECIFIED?\n         BZ    NOMEMMSG            NO, BRANCH          14SEP79\n         LH    R1,4(,R8)           YES - LET DSN BE MEM IF NOT GT 8\n         CH    R1,=H'8'            IS IT TOO LONG?\n         BH    NOMEMMSG            YES - BRANCH\n         L     R14,0(,R8)          NO - POINT TO DSN\n         BCTR  R1,0\n         B     SYSDSN\nNOMEMMSG LA    R1,MSG07\n         LA    R0,L'MSG07\n         BAL   R14,PUTMSG          MEMBER NOT SPECIFIED\n         LA    R15,12\n         B     NEXTDSN\nOKMEMBER EQU   *\n         TM    OPTION1,OPT1S       'SYSTEM' SPECIFIED?\n         BZ    NOTSYS              NO - ALLOCATE THE DATASET\n         SLR   R4,R4               NULLIFY DCB POINTER FOR BLDL\n         B     SYSTEM1\nNOTSYS   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        QUALIFY THE DSNAME IF NECESSARY                   *\n*                                                          *\n************************************************************\n         SPACE\n         TM    6(R8),X'80'         IS DATASET NAME SPECIFIED?\n         BO    OKDSN               YES - BRANCH\n         LA    R1,MSG05            NO - JUST MEMBER NAME\n         LA    R0,L'MSG05\n         BAL   R14,PUTMSG          DATA SET NAME NOT SPECIFIED\n         LA    R15,12\n         B     NEXTDSN\nOKDSN    EQU   *\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(45),DSNAME\n         LH    R1,4(,R8)           GET LENGTH\n         STH   R1,DSNAME\n         L     R14,0(,R8)          GET ADDRESS OF NAME\n         BCTR  R1,0\n         B     *+10\n         MVC   DSNAME+2(0),0(R14)\n         EX    R1,*-6\n         TM    6(R8),X'40'         IS IT QUOTED?\n         BO    DEFX                YES - SKIP DEFAULT SERVICE\n         CLI   VOLSER,C' '         IS VOL SPECIFIED?\n         BNE   DEFP                YES - SKIP DEFAULT SERVICE\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         LA    R14,MYDFPB\n         ST    R14,IOPLIOPB\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)\n         LA    R0,DSNAME\n         ST    R0,DFPBDSN\n         OI    DFPBCODE,X'04'      SEARCH CAT AND PROMPT IF MULTI\n         MVC   DFPBPSCB,CPPLPSCB\n         MVI   DFPBCNTL,X'20'      PREFIX THE DSNAME\n         DROP  R14\n         SPACE\n         LA    R1,MYIOPL\n         SPACE\n         LR    R1,R15              POINT TO IOPL\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   EHDEFLNK            BRANCH IF NOT MVS\n         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   EHDEFLNK               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     EHDEFEXT            SKIP AROUND LINK\nEHDEFLNK EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJEHDEF,SF=(E,LINKAREA)\nEHDEFEXT EQU   *\n         SPACE\n         B     DEFCODE(R15)\nDEFCODE  B     DEF00               SUCCESS\n         B     NEXTDSN              MSG ALREADY ISSUED\n         B     DEF08               INVALID NAME GT 44\n         B     NEXTDSN              MSG ALREADY ISUED\n         B     DEF16               NOT IN CATALOG\n         B     DEF20               NOT IN CATALOG\n         B     DEF24               IMPOSSIBLE\n         B     DEF28               COMMAND SYSTEM ERROR\n         B     DEF32               IMPOSSIBLE\n         B     DEF36               ?\nDEF08    EQU   *\nDEF16    EQU   *\n         B     DEF24\nDEF20    EQU   *\nLOCERR   EQU   *\n         MVC   MSGWK(L'MSG02),MSG02\n         LA    R15,MSGWK+L'MSG02\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG02(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG02A,R15),MSG02A\n         LA    R0,L'MSG02+L'MSG02A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG          NOT IN CATALOG\n         B     NEXTDSN\nDEF24    EQU   *\nDEF28    EQU   *\nDEF32    EQU   *\nDEF36    EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG          ERROR IN DEFAULT SERVICE ROUTINE\n         B     NEXTDSN\n         SPACE\nDEFP     MVI   DSNAME,C' '\n         MVC   DSNAME+1(45),DSNAME\n         L     R15,CPPLUPT\n         USING UPT,R15\n         SR    R0,R0               INITIAL LENGTH OF PREFIX AND PERIOD\n         SR    R1,R1\n         CLI   UPTPREFX,C'>'      IF PREFIX IS '>7BYTES' (8 BYTES)\n         BNE   PREF07                THEN\n         IC    R1,UPTPREFL+18      LENGTH OF PREFIX IN UPTPRF8L\n         LTR   R1,R1               IF PROFILE NOPREFIX\n         BZ    DEFP1                  SKIP PREFIX\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   DSNAME+2(0),UPTPREFX+17  (UPTPREF8)\n         EX    R1,*-6              MOVE PREFIX TO DSNAME+2\n         B     PREFDONE\nPREF07   EQU   *\n         IC    R1,UPTPREFL         LENGTH OF PREFIX\n         LTR   R1,R1               IF PROFILE NOPREFIX\n         BZ    DEFP1                  SKIP PREFIX\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   DSNAME+2(0),UPTPREFX  (EXECUTED)\n         EX    R1,*-6              MOVE PREFIX TO DSNAME+2\nPREFDONE EQU   *\n         LA    R1,1(,R1)           RESTORE LENGTH\n         LA    R15,DSNAME+2(R1)    POINT PAST PREFIX\n         DROP  R15                 UPT\n         MVI   0(R15),C'.'         APPEND PERIOD\n         LA    R0,1(,R1)           SET LENGTH OF PREFIX PLUS PERIOD\nDEFP1    LA    R15,DSNAME+2        RESET R15 IN CASE HERE VIA BRANCH\n         AR    R15,R0              POINT PAST PREFIX\n         LH    R1,4(,R8)           GET LENGTH\n         AR    R1,R0               PLUS LENGTH OF PREFIX\n         STH   R1,DSNAME\n         SR    R1,R0               MINUS LENGTH OF PREFIX\n         L     R14,0(,R8)          GET ADDRESS OF NAME\n         BCTR  R1,0                LENGTH MINUS 1 FOR EX\n         B     *+10\n         MVC   0(0,R15),0(R14)\n         EX    R1,*-6\nDEF00    EQU   *\nDEFX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        ALLOCATE THE DATASET                              *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R15,MYDAPB\n         ST    R15,DAPLDAPB\n         DROP  R1\n         USING DAPB08,R15\n         XC    0(84,R15),0(R15)\n         MVI   DA08CD+1,X'08'\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08DDN(8),=CL8' '\n         MVC   DA08UNIT,UNITN\n         MVC   DA08SER,VOLSER\n         MVC   DA08MNM,=CL8' '\n         MVC   DA08PSWD,=CL8' '\n         MVI   DA08DSP1,DA08SHR\n         MVI   DA08DPS2,DA08KEEP\n         MVI   DA08DPS3,DA08KEP\n         TM    22(R8),X'80'        PASSWORD SPECIFIED?\n         BZ    PASSX               NO - BRANCH\n         LH    R1,20(,R8)          GET LENGTH OF PSWD\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,16(,R8)         GET ADDRESS OF PSWD\n         B     *+10\n         MVC   DA08PSWD(0),0(R14)  MOVE PSWD\n         EX    R1,*-6\nPASSX    EQU   *\n         LA    R1,MYDAPL\n         SPACE\n         BAL   R14,CALLDAIR\n         LTR   R15,R15\n         BZ    OKDAIR\n         BAL   R14,DAIRFAIL\n         LA    R15,12\n         B     NEXTDSN\nOKDAIR   EQU   *\n         OI    CLEANUP,X'40'       TELL CLEANUP TO FREE IT\n         LA    R15,MYDAPB\n         MVC   DDSAVE,DA08DDN\n         TM    DA08DSO,X'02'       IS DSORG PARTITIONED?\n         BO    OKDSORGP            YES - BRANCH\n*\n*              DSORG IS NOT PO\n*              PS=X'40' ISAM=X'80' DA=X'20' VSAM=X'00' NONE=X'00'\n*\n         LA    R1,MSG06\n         LA    R0,L'MSG06\n         BAL   R14,PUTMSG          DATA SET NOT PARTITIONED\n         LA    R15,12\n         B     NEXTDSN\nOKDSORGP EQU   *\n         DROP  R15\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP THE DCB                                    *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   DCB(DCBLEN),DCBMODEL\n         LA    R4,DCB\n         USING IHADCB,R4\n         MVC   DCBDDNAM(8),DDSAVE\n         LA    R15,DYNEOD\n         IC    R0,DCBEODAD-1\n         ST    R15,DCBEODAD-1\n         STC   R0,DCBEODAD-1\n         LA    R15,DYNSYNAD\n         IC    R0,DCBSYNAD-1\n         ST    R15,DCBSYNAD-1\n         STC   R0,DCBSYNAD-1\n         MVC   OPEND(4),OPEN\n         SPACE\n         OPEN  ((R4),INPUT),MF=(E,OPEND)\n         SPACE\n         TM    DCBOFLGS,X'10'\n         BO    OKOPEN\n         LA    R1,MSG04\n         LA    R0,L'MSG04\n         BAL   R14,PUTMSG          UNABLE TO OPEN\n         LA    R15,12\n         B     NEXTDSN\nOKOPEN   EQU   *\n         OI    CLEANUP,X'80'       TELL CLEANUP TO CLOSE IT\n         SPACE\nSYSTEM1  EQU   *\n         MVI   SPFHDRS,0           SET SPF HEADER SWITCH\n         SPACE\n         CLI   PLUSKW+1,1          WAS PLUS(MEMBER,MEMBER...) SPECIFIED\n         BNE   PLUSNO              NO, BRANCH\n         LA    R0,PLUS             YES, PUT THE PDE\n         ST    R0,PLUSPTR           ADDRESS IN THE POINTER FIELD\nPLUSNO   EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF SLPA SPECIFIED, SEE IF MEMBER IS IN LPA                  *\n*                                                                     *\n***********************************************************************\n         SPACE\nMEMLOOP  EQU   *\n         TM    OPTION1,OPT1L       SLPA?\n         BZ    LPAX1               NO, BRANCH\n*\n*\n*\n         LA    R0,MEMBER8\n         SR    R1,R1\n         IDENTIFY EPLOC=(0),ENTRY=(1)\n         LR    R6,R15\n         CH    R15,=H'8'           IN JPAQ/LPAQ\n         BE    IDENTIF1\n         CH    R15,=H'20'          IN JPAQ/LPAQ\n         BNE   IDENTIFX\nIDENTIF1 LA    R1,MSGWK\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         MVC   1(L'MSG14,R15),MSG14\n         LA    R15,L'MSG14+1-3(,R15)\n         CH    R6,=H'20'\n         BNE   *+10\n         MVC   0(3,R15),=C'20)'    SHOW RC 20 FROM IDENTIFY\n         LA    R15,3(,R15)\n         LR    R0,R15\n         LA    R1,MSGWK\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER FOUND IN LPA\nIDENTIFX EQU   *\n*\n*              CALL IEAVVMSR TO SEARCH LPA DIRECTORY\n*\n*                  REGS 0 AND 1 - CONTAIN NAME\n*                  REG 3        - CVT\n*                  REGS 6 7 8 9 - WORK REGS\n*                  REG 14       - RETURN - BAD RETURN 4(14)\n*                  REG 0        - POINTS TO LPDE AFTER GOOD RETURN\n*\n         LM    R0,R1,MEMBER8\n         STM   R7,R8,LPAREGS\n         LR    R5,R9              SAVE R9\n         L     R3,16              CVTPTR\n         L     R15,352(,R3)       CVTLPDSR\n         BALR  R14,R15            CALL IEAVVMSR\n         B     LPAFOUND\n         B     LPANOTFO\nLPAFOUND LR    R9,R5\n         LM    R7,R8,LPAREGS\n         LR    R6,R0\n         B     LPAMSG\nLPANOTFO LR    R9,R5\n         LM    R7,R8,LPAREGS\n         SR    R6,R6\nLPAMSG   L     R3,MYANS            RESTORE R3\n         LA    R1,MSGWK\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         LTR   R6,R6               LPDE FOUND\n         BZ    LPAMSG2             NO, BRANCH\n         MVC   1(L'MSG12A,R15),MSG12A\n         LA    R15,L'MSG12A+1(,R15)\n         LA    R15,MSGWK+40\n*        MVC   0(35,R15),=C'LPDE XXXXXX, EP XXXXXX, ADDR XXXXXX'\n*        MVC   0(35,R15),=C'LPDE XXXXXX, EP XXXXXX, IN XXXXXXXX'\n         MVC   0(37,R15),=C'LPDE XXXXXX, EP XXXXXXXX, ADDR XXXXXXXX'\n*        MVC   0(35,R15),=C'LPDE XXXXXX, EP XXXXXXXX, IN XXXXXXXX'\n         LA    R15,05(,R15)\n         ST    R6,DOUBLE\n         LA    R1,DOUBLE+1\n         LA    R0,3\n         BAL   R14,UNPACK\n         MVI   0(R15),C','\n         SPACE\n         LA    R15,05(,R15)\n         LA    R1,16(,R6)\n         LA    R0,4\n         BAL   R14,UNPACK\n         MVI   0(R15),C','\n         SPACE\n         TM    28(R6),X'04'        IS THIS AN ALIAS\n         BO    LPALIAS             YES\n         SPACE\n         LA    R15,07(,R15)\n         LA    R1,36(,R6)\n         LA    R0,4\n         BAL   R14,UNPACK\n         MVI   0(R15),C' '\n         B     LPAMSG1\n         SPACE\nLPALIAS  LA    R15,2(,R15)\n         MVC   0(03,R15),=C'IN '\n         MVC   3(8,R15),32(R6)\n         LA    R15,12(,R15)\n         SPACE\nLPAMSG1  LR    R0,R15\n         LA    R1,MSGWK\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER FOUND IN LPA\n         SR    R15,R15\n         TM    OPTION2,OPT2L       LIST KEYWORD\n         BZ    NEXTMEM\n         MVC   MSGWK(6),=C'  +0  '\n         L     R1,16(,R6)\n         MVC   MSGWK+6(48),0(R1)\n         TR    MSGWK+6(48),PERIODS\n         LA    R1,MSGWK\n         LA    R0,6+48\n         BAL   R14,PUTLINE\n         SR    R15,R15\n         B     NEXTMEM\nLPAMSG2  MVC   1(L'MSG12B,R15),MSG12B\n         LA    R15,L'MSG12B+1(,R15)\n         LR    R0,R15\n         LA    R1,MSGWK\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER NOT FOUND IN LPA\n         LA    R15,12\n         B     NEXTMEM\nLPAX1    EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE BLDL FOR MEMBER                                       *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVI   SYNADSW,0           SET SYNAD SWITCH OFF\n         SPACE\n         LA    R15,BLDLW\n         XC    0(62,R15),0(R15)    CLEAR BLDL LIST\n         MVI   1(R15),1            NUMBER OF ENTRIES\n         MVI   3(R15),58           MAXIMUM LENGTH EXPECTED\n         MVC   4(8,R15),MEMBER8\n         LR    R0,R15              POINT R0 TO LIST\n         SPACE\n         BLDL  (R4),(0)\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BE    OKIO                NO - BRANCH\nERRSYNAD LA    R1,SYNADMSG\n         LA    R0,78\n         BAL   R14,PUTMSG\n         LA    R15,12\n         B     NEXTDSN\nOKIO     EQU   *\n         LTR   R15,R15\n         BZ    OKBLDL\nNOTINSYS LA    R1,MSGWK\n         MVC   0(7,R1),MSG08\n         LA    R15,7(,R1)\n         MVC   0(8,R15),MEMBER8\n         AH    R15,MEMBERL\n         MVC   1(L'MSG08A,R15),MSG08A\n         LA    R15,L'MSG08A+1(,R15)\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTMSG          MEMBER NOT FOUND\n         LA    R15,12\n         B     NEXTMEM\n         SPACE\n***********************************************************************\n*                                                                     *\n*         BLDL WAS SUCCESSFUL                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nOKBLDL   EQU   *\n         LA    R6,MSGWH\n         MVI   0(R6),C' '\n         MVC   1(L'MSGWH-1,R6),0(R6)\n         MVC   0(L'MSG09,R6),MSG09\n         LA    R6,L'MSG09(,R6)\n         LA    R5,L'MSG09\n         SPACE\n         LA    R1,BLDLW+4\n         LA    R15,BLDLX\n         LA    R0,60\n         BAL   R14,UNPACK          CONVERT TO HEX\n         SPACE\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         LA    R7,BLDLW+4\n         USING PDS,R7\n         LA    R8,BLDLX\n         MVC   MSGWK+2(8),PDSMEMBR\n         SPACE\n         MVC   MSGWK+11(6),(2*(PDSTTR-PDS))(R8)\n         SPACE\n         MVC   MSGWK+18(2),=C'NO'  SET ALIAS 'NO'\n         TM    PDSINDIC,X'80'      ALIAS?\n         BZ    *+10                NO - BRANCH\n         MVC   MSGWK+18(3),=C'YES' YES - MOVE YES\n         SPACE\n         MVI   MSGWK+24,C'0'       NO. OF TTR'S\n         TM    PDSINDIC,B'01100000'\n         BZ    FMT1\n         MVI   MSGWK+24,C'3'       NOT ZERO - TRY 3\n         BO    FMT1                BRANCH IF 3\n         MVI   MSGWK+24,C'1'       NOT 3 - TRY 1\n         TM    PDSINDIC,B'00100000'\n         BO    FMT1                BRANCH IF 1\n         MVI   MSGWK+24,C'2'       MUST BE 2\nFMT1     EQU   *\n         SPACE\n         SLR   R1,R1\n         IC    R1,PDSINDIC\n         STC   R1,BYTE\n         NI    BYTE,B'00011111'    ISOLATE LAST 5 BITS\n         IC    R1,BYTE\n         STH   R1,USERLEN\n         LA    R1,USERLEN+1\n         LA    R15,MSGWK+29\n         LA    R0,1\n         BAL   R14,UNPACK\n         SPACE\n         LH    R0,USERLEN\n         LTR   R0,R0               LENGTH ZERO?\n         BZ    NOTLINK             YES - BRANCH\n         CH    R0,=H'11'           LESS THAN 11 HALFWORDS?\n         BL    NOTLINK             YES - NOT CREATED BY LINK EDITOR\n*                                  COULD BE SPF-CREATED MEMBER\n*                                  (15 HALFWORDS), SO CHECK TTR BITS\n         TM    PDSINDIC,B'01100000' ANY TTR'S IN USER DATA AREA?\n         BZ    NOTLINK             NO, NOT CREATED BY LINKAGE EDITOR\n         SPACE\n         XC    LINKOFF(16),LINKOFF\n         LA    R15,33+2            SET OFFSET PAST REQUIRED DATA\n*              NOTE: EXTRA 2 BYTES AT OFFSET 11 INSERTED BY BLDL.\n         MVI   MODES,0\n         TM    PDSATTV,X'80'       VS?\n         BZ    MODEX               NO, NO MODES\n         MVC   MODES,PDSATTV+1     SAVE RMODE AND AMODES\nMODEX    EQU   *\n         TM    PDSATTR1,X'04'      SCATTER DATA PRESENT?\n         BZ    NOOFF1              NO - BRANCH\n*              SCATTER DATA IS PRESENT,\n*              SO 8 BYTES OF SCATTER INFO ARE AT OFFSET IN R15\n         ST    R15,LINKOFF1        YES - SAVE OFFSET\n         OI    LINKOFF1,X'80'      SET SWITCH\n         LA    R15,8(,R15)         INCREMENT OFFSET PAST SCATTER DATA\nNOOFF1   TM    PDSINDIC,X'80'      ALIAS?\n         BZ    NOOFF2              NO - BRANCH\n*              IT'S AN ALIAS. SWAP THE AMODE BITS\n*              SO THE LAST 2 (WHICH ARE THE ONLY ONES WE SHOW, AND\n*              ARE NORMALLY FOR THE MAIN EP) ARE FOR THE ALIAS.\n         IC    R0,MODES\n         N     R0,=A(X'03')        ISOLATE MAIN AMODE\n         IC    R1,MODES\n         N     R1,=A(X'0C')        ISOLATE ALIAS AMODE\n         IC    R14,MODES\n         N     R14,=A(X'F0')       ERASE ALL 4 AMODE BITS FROM R14\n         SLL   R0,2                SHIFT MAIN TO ALIAS\n         SRL   R1,2                SHIFT ALIAS TO MAIN\n         OR    R1,R0               COMBINE SWAPPED AMODES INTO R1\n         OR    R14,R1              COMBINE AMODES WITH RMODE\n         STC   R14,MODES\n*              CHECK FOR PRESENCE OF 11 BYTES OF ALIAS DATA\n         TM    PDSATTV,X'80'       VS?\n         BO    YSOFF2              YES - ALIAS DATA IS PRESENT\n         TM    PDSATTR1,X'C0'      OS - IS IT RENT OR REUS?\n         BZ    NOOFF2              NO - BRANCH\n*              IT'S AN ALIAS AND VS, OR\n*              IT'S AN ALIAS NOT VS BUT RENT-OR-REUS,\n*              SO 11 BYTES OF ALIAS INFO ARE AT OFFSET IN R15\nYSOFF2   EQU   *\n         LH    R14,USERLEN         NUMBER OF HALFWORDS OF USERDATA\n         SLL   R14,1               NUMBER OF BYYTES OF USERDATA\n         LA    R14,14(,R14)        PLUS 8,3,1,1,1 (NAME, TTR, C, L, I)\n         SR    R14,R15             MINUS OFFSET OF ALIAS DATA\n         CH    R14,=H'11'          ARE THERE AT LEAST 11 BYTES LEFT\n         BL    NOOFF2              NO, ALIAS IS MISSING ITS INFO\n         ST    R15,LINKOFF2        SAVE OFFSET OF ALIAS DATA\n         OI    LINKOFF2,X'80'      SET SWITCH\n         LA    R15,11(,R15)        SET OFFSET PAST ALIAS DATA\nNOOFF2   TM    PDSATTV,X'80'       VS BIT ON?\n         BNO   OFF3OS              NO - OS - BRANCH\n         TM    PDSATTV,X'10'       IS VS SSI BIT ON?\n         BO    YSOFF3              YES - BRANCH\n         B     NOOFF3              NO - BRANCH AROUND OS LOGIC\nOFF3OS   LR    R14,R15             COPY OFFSET INTO WORK REG\n         STC   R14,BYTE            SAVE OFFSET FOR EVEN/ODD CHECK\n         TM    BYTE,X'01'          IS IT ODD?\n         BZ    *+8                 NO - LEAVE IT\n         LA    R14,1(,R14)         YES - ADD 1\n         SH    R14,=H'14'          SUBTRACT LENGTH OF NON USER-DATA\n         SRL   R14,1               DIVIDE BY 2 FOR NO. OF HALFWORDS\n         CH    R14,USERLEN         IS COMPUTED LENGTH TOO SHORT?\n         BNL   NOOFF3              NO - THERE MUST NOT BE ANY SSI\n*              IT'S VS AND THE SSI BIT IS ON, OR\n*              IT'S NOT VS AND THE LENGTH OF THE USER DATA IS LONGER\n*               THAN THE OFFSET IN R15,\n*              SO 4 BYTES OF SSI INFO ARE AT OFFSET IN R15\n*               (UNLESS THE OFFSET IS ODD, IN WHICH CASE A PAD BYTE\n*                PLUS 4 BYTES OF SSI INFO ARE AT OFFSET IN R15)\nYSOFF3   STC   R15,BYTE            START EVEN/ODD CHECK\n         TM    BYTE,X'01'          IS IT ODD?\n         BZ    *+8                 NO - BRANCH\n         LA    R15,1(,R15)         YES - MAKE IT EVEN, (HALFWORD)\n         ST    R15,LINKOFF3        SAVE OFFSET OF SSI\n         OI    LINKOFF3,X'80'      SET SWITCH\n         LA    R15,4(,R15)         INCREMENT OFFSET PAST SSI\n*                R15 NOW HAS THE OFFSET TO THE AUTHORIZATION INFO.\nNOOFF3   TM    PDSATTV,X'80'       IS VS BIT ON?\n         BZ    NOOFF4              NO - BRANCH\n         TM    PDSATTV,X'08'       IS VS APF BIT ON?\n         BZ    NOOFF4              NO - BRANCH\n         ST    R15,LINKOFF4        SAVE OFFSET OF APF CODE\n         OI    LINKOFF4,X'80'      SET SWITCH\nNOOFF4   EQU   *\n         MVC   0(L'MSG09A,R6),MSG09A\n         LA    R5,L'MSG09A(,R5)\n         MVC   MSGWK+33(4),(2*(PDSATTR-PDS))(R8)\n         MVC   MSGWK+38(6),(2*(PDSSIZE-PDS))(R8)\n         MVC   FULL+1(3),PDSSIZE\n         MVI   FULL,0\n         L     R1,FULL\n         NC    FULL,=X'FFFFFC00'  SET OFF BITS UNDER 1 K\n         CL    R1,FULL            WERE ANY BITS SET OFF?\n         SRL   R1,10              SHIFT OUT BITS UNDER 1 K\n         BE    SIZER              BRANCH ON CONDITION SET BY 'CL'\n         LA    R15,10\n         CLR   R1,R15             IF OVER 10K, ROUND TO NEAREST K\n         BH    SIZERUP            BRANCH IF OVER\n         MVC   FULL+1(3),PDSSIZE\n         NC    FULL,=X'000003FF'  SET OFF ALL EXCEPT UNDER 1 K\n         L     R15,FULL\n         SLR   R14,R14            SET UP REG PAIR FOR DIVIDE\n         D     R14,=F'100'        DIVIDE BY 100\n         LA    R15,1(,R15)        ROUND THE QUOTIENT UP\n         CH    R15,=H'9'          GREATER THAN 9?\n         BNH   *+8                NO - LEAVE IT\n         LA    R15,9              YES - MAKE IT 9\n         MH    R1,=H'10'          MULTIPLY K BY 10\n         ALR   R1,R15             ADD TENTH-OF-K UNITS TO K\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+45\n         MVC   0(8,R15),=X'40202020214B2040'\n         ED    0(7,R15),DOUBLE+5\n         MVI   0(R15),C'('\n         B     SIZLOOP\n         SPACE\nSIZERUP  AH    R1,=H'1'           SOME BITS WERE SET OFF - ADD 1 K\nSIZER    CVD   R1,DOUBLE          CONVERT K TO DECIMAL\n         LA    R15,MSGWK+45\n         MVC   0(8,R15),=X'4020202020202120'\n         ED    0(8,R15),DOUBLE+4\n         MVI   0(R15),C'('\nSIZLOOP  CLI   1(R15),C' '\n         BNE   SIZLX\n         MVC   1(6,R15),2(R15)\n         MVI   7(R15),C' '\n         B     SIZLOOP\nSIZLX    CLI   1(R15),C' '\n         BE    SIZLX2\n         LA    R15,1(,R15)\n         B     SIZLX\nSIZLX2   MVI   1(R15),C'K'\n         MVI   2(R15),C')'\n         SPACE\n         MVC   MSGWK+54(6),=C'ABSENT'\n         TM    LINKOFF3,X'80'      IS SSI PRESENT?\n         BZ    NOSSI               NO - BRANCH\n         LH    R15,LINKOFF3+2      GET OFFSET TO SSI\n         SLL   R15,1               DOUBLE IT (FOR HEX)\n         LA    R15,0(R15,R8)       POINT TO HEX COPY\n         MVC   MSGWK+54(8),0(R15)  MOVE HEX COPY\nNOSSI    EQU   *\n         SPACE\n         LA    R15,MSGWK+64\n         TM    PDSATTR1,X'80'\n         BZ    *+14\n         MVC   0(3,R15),=C'RE,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'40'\n         BZ    *+14\n         MVC   0(3,R15),=C'RU,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'01'\n         BZ    *+14\n         MVC   0(3,R15),=C'RF,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'20'\n         BZ    *+14\n         MVC   0(5,R15),=C'OVLY,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'10'\n         BZ    *+14\n         MVC   0(5,R15),=C'TEST,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'08'\n         BZ    *+14\n         MVC   0(3,R15),=C'OL,'\n         LA    R15,3(,R15)\n         TM    PDSATTR1,X'04'\n         BZ    *+14\n         MVC   0(5,R15),=C'SCTR,'\n         LA    R15,5(,R15)\n         TM    PDSATTR1,X'02'\n         BO    *+14\n         MVC   0(4,R15),=C'NEX,'\n         LA    R15,4(,R15)\n         TM    PDSATTR2,X'08'\n         BZ    *+14\n         MVC   0(3,R15),=C'NE,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'80'\n         BO    *+14\n         MVC   0(3,R15),=C'DC,'\n         LA    R15,3(,R15)\n         TM    PDSATTR2,X'04'\n         BZ    *+14\n         MVC   0(4,R15),=C'SYM,'\n         LA    R15,4(,R15)\n         TM    PDSATTV,X'A0'\n         BNO   *+14\n         MVC   0(5,R15),=C'PAGE,'\n         LA    R15,5(,R15)\n         SPACE\n         TM    LINKOFF4,X'80'      IS APF PRESENT?\n         BZ    APF1X               NO - BRANCH\n         LH    R14,LINKOFF4+2      GET OFFSET TO APF\n         LA    R14,0(R14,R7)       POINT TO APF\n         CLC   0(2,R14),=X'0101'   IS IT AC(1)?\n         BNE   APF1X               NO - BRANCH\n         MVC   0(5,R15),=C'AC=1,'\n         LA    R15,5(,R15)\nAPF1X    EQU   *\n         BCTR  R15,0               POINT TO LAST COMMA\n         MVI   0(R15),C' '         BLANK OUT LAST COMMA\n         SPACE\n         LA    R1,MSGWH\n         LR    R0,R5\n         BAL   R14,PUTLINE         WRITE FIRST HEADER\n         LA    R1,MSGWK\n         LR    R0,R15\n         SR    R0,R1\n         BAL   R14,PUTLINE         WRITE LOAD MODULE BASIC INFO\n         SPACE\n************************************************************\n*                                                          *\n*         ESOTERIC                                         *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1E       'ESOTERIC' SPECIFIED?\n         BZ    NOESO               NO - BRANCH\n         LA    R1,MSG11\n         LA    R0,L'MSG11\n         TM    LINKOFF2,X'80'      ALIAS DATA PRESENT?\n         BO    *+8                 YES - BRANCH\n         LA    R0,56               NO - TRUNCATE HEADER         +13.RA.\n         BAL   R14,PUTLINE\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK+2(6),(2*(PDSTTRT-PDS))(R8)\n         MVC   MSGWK+10(6),(2*(PDSTTRN-PDS))(R8)\n         MVC   MSGWK+18(2),(2*(PDSTTRNO-PDS))(R8)\n         MVC   MSGWK+22(4),(2*(PDSFTXTL-PDS))(R8)\n         MVC   MSGWK+28(6),(2*(PDSENTRY-PDS))(R8)\n*        MVC   MSGWK+36(2),(2*(PDSATTV-PDS))(R8)\n         MVC   MSGWK+36(6),(2*(PDSATTV-PDS))(R8)\n         SPACE\n         MVC   MSGWK+44(7),=C'(24/24)'\n         TM    MODES,X'13'         IF ALL BITS OFF\n         BZ    MODEY                  24/24 AND KEEP PARENS\n         MVI   MSGWK+44,C' '\n         MVI   MSGWK+44+6,C' '\n         TM    MODES,X'10'\n         BNO   *+10\n         MVC   MSGWK+44(3),=C'ANY' RMODE ANY\n         TM    MODES,X'03'\n         BZ    MODEY               AMODE 24 IMPLICIT\n         MVC   MSGWK+44+4(3),=C'ANY' AMODE ANY\n         BO    MODEY\n         MVC   MSGWK+44+4(3),=C'31 ' AMODE 31\n         TM    MODES,X'02'\n         BO    MODEY\n         MVC   MSGWK+44+4(3),=C'24 ' AMODE 24 EXPLICIT\nMODEY    LA    R15,MSGWK+53                                     +13.RA.\n         MVI   0(R15),C'*'\n         TM    LINKOFF4,X'80'      IS APF PRESENT?\n         BZ    APFX                NO - BRANCH\n         LH    R14,LINKOFF4+2      GET OFFSET TO APF\n         LA    R14,0(R14,R7)       POINT TO APF\n         MVI   0(R15),C'0'\n         CLC   0(2,R14),=X'0100'   IS IT AC(0)?\n         BE    APFX                YES - BRANCH\n         MVI   0(R15),C'1'\n         CLC   0(2,R14),=X'0101'   IS IT AC(1)?\n         BE    APFX                YES - BRANCH\n         MVI   0(R15),C'?'         SOMETHING UNEXPECTED\nAPFX     EQU   *\n         SPACE\n         TM    LINKOFF2,X'80'      ALIAS DATA PRESENT?\n         BZ    NOESOA              NO - BRANCH\n         LH    R14,LINKOFF2+2\n         LA    R1,0(R14,R7)\n         MVC   MSGWK+57(8),3(R1)                                +13.RA.\n         SLL   R14,1                DOUBLE FOR HEX\n         LA    R1,0(R14,R8)\n         MVC   MSGWK+67(6),0(R1)                                +13.RA.\nNOESOA   EQU   *\n         LA    R1,MSGWK\n         LA    R0,73                                            +13.RA.\n         BAL   R14,PUTLINE\nNOESO    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DATA (UNFORMATTED)                               *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1D       'DATA' SPECIFIED?\n         BZ    NODATA              NO - BRANCH\n         LA    R1,MSG10\n         LA    R0,L'MSG10\n         BAL   R14,PUTLINE         WRITE HEADER FOR DATA\n         LH    R1,USERLEN\n         SLL   R1,2                DOUBLE FOR BYTES, DOUBLE FOR HEX\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+2(0),28(R8)\n         EX    R1,*-6\n         LA    R0,3(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE\nNODATA   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         WHERE                                            *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION1,OPT1S+OPT1W 'SYS' AND 'WHERE' SPECIFIED\n         BNO   NOWHERE             BRANCH IF NOT BOTH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(59),MSGWK\n         CLI   PDSBLDL2,1          LINKLIST LIBRARY\n         BNE   WHRSTEP             NO, BRANCH\n         MVC   MSGWK(11),=C'SYSTEM LINK'\n         LA    R15,MSGWK+12\n         B     WHRCON\nWHRSTEP  MVC   MSGWK(13),=C'JOB/TASK/STEP'\n         LA    R15,MSGWK+14\nWHRCON   SLR   R1,R1\n         IC    R1,PDSBLDL1         GET CONCAT NUMBER\n         LA    R1,1(,R1)           BASE 0 TO BASE 1\n         CVD   R1,DOUBLE\n         MVC   0(14,R15),=C'LIBRARY NUMBER'\n         LA    R15,15(,R15)\n         UNPK  0(3,R15),DOUBLE+6(2)\n         OI    2(R15),X'F0'\n         LA    R0,2\nWHRSUP   CLI   0(R15),C'0'         LEADING ZERO\n         BNE   WHRSUPX\n         MVC   0(2,R15),1(R15)\n         MVI   2(R15),C' '\n         BCT   R0,WHRSUP\nWHRSUPX  EQU   *\n         LA    R1,MSGWK\n         LA    R0,60\n         BAL   R14,PUTLINE\nNOWHERE  EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         LIST / MAP / IDR                                 *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2M+OPT2L+OPT2I  MAP,LIST,IDR\n         BZ    NOMAP               NO - BRANCH\n         TM    OPTION1,OPT1S       'SYSTEM'?\n         BO    NOMAP               YES - MAP NOT SUPPORTED\n         L     R0,=A(32768)        (COULD BE REDUCED TO BLKSIZE)\n         GETMAIN R,LV=(0)\n         LR    R5,R1\n         SPACE\n         TM    OPTION2,OPT2I       'IDR' SPECIFIED?\n         BZ    NOIDR1              NO - BRANCH\n         L     R0,=A(98304)\n         GETMAIN R,LV=(0)\n         ST    R1,ESDPTR\nNOIDR1   EQU   *\n         SPACE\n         TM    OPTION2,OPT2L       'LIST' SPECIFIED?\n         BZ    NOLIST              NO - BRANCH\n         MVC   FULL,PDSTTRT        TTR OF FIRST TEXT BLOCK\n         MVI   FULL+3,0\n         LA    R0,FULL\n         SPACE\n         POINT (R4),(0)\n         SPACE\nLISTREAD MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         MVC   MSGWK(6),=C'  +0  '\n         MVC   MSGWK+6(48),0(R5)\n         TR    MSGWK+6(48),PERIODS\n         LA    R1,MSGWK\n         LA    R0,6+48\n         BAL   R14,PUTLINE\nNOLIST   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         MAP / IDR                                        *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2M+OPT2I 'MAP' OR 'IDR' SPECIFIED\n         BZ    MAPX                NO - BRANCH\n         SPACE\n         LA    R7,BLDLW+4          RESET PDS ADDRESSABILITY\n         MVC   FULL,PDSTTR\n         MVI   FULL+3,0\n         LA    R0,FULL\n         SPACE\n         POINT (R4),(0)\n         SPACE\n         MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\n         MVI   ANYCESD,0\nMAPREAD  XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\n         CLI   0(R5),X'20'         CESD RECORD?\n         BE    HAVCESD             YES - BRANCH\n         TM    ANYCESD,1           IF NO CESD YET\n         BZ    MAPREAD                KEEP LOOKING (PAST SYM'S)\n         B     MAPX                CESD'S DONE\nHAVCESD  OI    ANYCESD,1           SHOW WE GOT SOME CESD\n         LH    R6,6(,R5)           GET NUMBER OF BYTES\n         TM    OPTION2,OPT2I       IDR\n         BZ    NOIDR2\n         LH    R15,4(,R5)          GET ESDID OF FIRST ITEM\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         BCTR  R6,0                LENGTH CODE FOR EX\n         B     *+10\n         MVC   0(0,R15),8(R5)      ADD RECORD TO OUR DICTIONARY\n         EX    R6,*-6\n         LA    R6,1(,R6)           RESTORE LENGTH\nNOIDR2   EQU   *\n         SRL   R6,4                DIV BY 16 = NO OF ENTRIES\n         LTR   R6,R6               ZERO?\n         BZ    MAPX                YES - BRANCH\n         MVC   ESDID,4(R5)         SAVE ESDID OF FIRST ITEM\n         LA    R7,8(,R5)           POINT TO 1ST ENTRY\nMAPENTRY EQU   *\n         CLI   CNAME,C' '          LOOKING FOR A SPECIFIC CSECT\n         BE    MAPALLC             NO, BRANCH\n         TM    8(R7),X'0F'         IS THIS AN SD\n         BNZ   MAPNEXT             NO, BRANCH\n         CLC   CNAME,0(R7)         IS THIS THE ONE\n         BNE   MAPNEXT             NO, BRANCH\n         MVC   CNAMEID,ESDID       YES, SAVE ITS ESDID\nMAPALLC  EQU   *\n         TM    OPTION2,OPT2M       MAP\n         BZ    MAPREAD             NO, BRANCH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(50),MSGWK\n         CLI   0(R7),0             IS THERE A NAME\n         BE    *+10                NO, SKIP NEXT INSTRUCTION\n         MVC   MSGWK(8),0(R7)      MOVE EXTERNAL NAME\n         LA    R15,MAPENTX         POINT TO AREA FOR HEX\n         LA    R1,8(,R7)           POINT TO LAST 8 BYTES OF ENTRY\n         LA    R1,8(,R7)           POINT TO LAST 8 BYTES OF ENTRY\n         LA    R0,8\n         BAL   R14,UNPACK\n         SPACE\n         MVC   BYTE,8(R7)          MOVE TYPE\n         NI    BYTE,X'0F'          ZERO 1ST 4 BITS\n         LA    R15,=C'SD'\n         CLI   BYTE,X'00'\n         BE    MAPTYPEX\n         LA    R15,=C'PC'\n         CLI   BYTE,X'04'\n         BE    MAPTYPPC\n         LA    R15,=C'CM'\n         CLI   BYTE,X'05'\n         BE    MAPTYPEX\n         TM    OPTION2,OPT2A     MAP(ALL)            .BUGFIX.08APR81.\n         BZ    MAPNEXT           NO, BYPASS IT\n         LA    R15,=C'LR'\n         CLI   BYTE,X'03'\n         BE    MAPTYPEX\n         LA    R15,=C'PR'\n         CLI   BYTE,X'06'\n         BE    MAPTYPEX\n         LA    R15,=C'NU'\n         CLI   BYTE,X'07'\n         BE    MAPTYPEX\n         LA    R15,=C'ER'\n         CLI   BYTE,X'02'\n         BE    MAPTYPEX\n         LA    R15,=C'WX'\n         CLI   BYTE,X'0A'\n         BE    MAPTYPEX\n         LA    R15,=C'??'\n         B     MAPTYPEX\nMAPTYPPC TM    8(R7),X'10'         DELETED PC MEANS SEGTAB/ENTAB\n         BZ    MAPTYPEX\n         MVC   MSGWK(8),=C'-SEGTAB-'\nMAPTYPEX MVC   MSGWK+9(2),0(R15)\n         MVC   MSGWK+12(2),MAPENTX\n         MVC   MSGWK+15(6),MAPENTX+2\n         MVC   MSGWK+22(2),MAPENTX+8\n         MVC   MSGWK+25(6),MAPENTX+10\n         UNPK  MSGWK+33(5),ESDID(3)\n         TR    MSGWK+33(4),UNPACKT-240\n         MVI   MSGWK+37,C' '\n         SPACE\n         LA    R1,MSGWK\n         LA    R0,37\n         BAL   R14,PUTLINE\nMAPNEXT  LA    R7,16(,R7)\n         LA    R1,1\n         AH    R1,ESDID\n         STH   R1,ESDID\n         BCT   R6,MAPENTRY\n         B     MAPREAD\nDYNEOD   EQU   *\n         B     IDRX\nMAPX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         IDR                                              *\n*                                                          *\n************************************************************\n         SPACE\n         TM    OPTION2,OPT2I       IDR\n         BZ    NOIDR3\n         CLI   0(R5),X'80'         IDR RECORD\n         BE    IDRIN               YES\n         TM    0(R5),X'01'         CCW RECORD\n         BO    IDRX                YES, THERE ARE NO IDR'S\n         B     IDRFIND             NO, READ UNTIL IDR FOUND\n         LA    R0,FULL             NO, START BACK AT BEGINNING\n         SPACE\n         POINT (R4),(0)\n         SPACE\nIDRFIND  MVC   MYDECB(20),LFDECB   MOVE IN MODEL DECB\nIDRFINDR XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\n         TM    0(R5),X'01'         CCW RECORD\n         BO    IDRX                YES, THERE ARE NO IDR'S\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRFINDR            NO, ASSUME NO MORE\nIDRIN    EQU   *\nIDRENTRY MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(5),=C'IDR -'\n         TM    2(R5),X'01'         ZAP DATA\n         BO    IDRZAP\n         TM    2(R5),X'02'         LINKAGE EDITOR DATA\n         BO    IDRLINK\n         TM    2(R5),X'04'         TRANSLATOR DATA\n         BO    IDRTRAN\n         TM    2(R5),X'08'         USER IDENTIFY\n         BO    IDRIDENT\nIDRNEXT  EQU   *\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         SPACE\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         SPACE\n         CHECK MYDECB\n         SPACE\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         SPACE\nIDRNEXTT CLI   0(R5),X'80'         IDR RECORD?\n         BE    IDRIN               YES, BRANCH\nIDRX     TM    OPTION2,OPT2I       IDR (MAY BE HERE FROM EOF)\n         BZ    NOIDR4              NO, BRANCH\n         L     R1,ESDPTR\n         L     R0,=A(32768)\n         FREEMAIN R,LV=(0),A=(1)\nNOIDR3   EQU   *\n         LR    R1,R5\n         L     R0,=A(32768)\n         FREEMAIN R,LV=(0),A=(1)\nNOIDR4   EQU   *\n         SPACE\nNOMAP    EQU   *\n         TM    OPTION2,OPT2O       LOAD\n         BZ    NOLOAD\n         LH    R0,USERLEN\n         LTR   R0,R0               LENGTH ZERO?\n         BZ    LOADCANT            YES - BRANCH\n         CH    R0,=H'11'           LESS THAN 11 HALFWORDS?\n         BL    LOADCANT            YES - NOT CREATED BY LINK EDITOR\n         LA    R7,BLDLW+4                                  (22JUL86)\n         TM    PDSINDIC,B'01100000' ANY TTR'S IN USER DATA AREA?\n         BZ    LOADCANT            NO, NOT CREATED BY LINKAGE EDITOR\n         LOAD  EPLOC=MEMBER8,DCB=(R4),ERRET=LOADFAIL\n         DELETE EPLOC=MEMBER8\n         LA    R1,=C'LOAD WAS SUCCESSFUL'\n         LA    R0,19\n         BAL   R14,PUTLINE\n         B     NOLOAD\nLOADFAIL LA    R1,=C'LOAD FAILED'\n         LA    R0,11\n         BAL   R14,PUTLINE\n         B     NOLOAD\nLOADCANT LA    R1,=C'LOAD IGNORED'\n         LA    R0,12\n         BAL   R14,PUTLINE\nNOLOAD   EQU   *\n         B     DONEMEM\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR ZAP                                      *\n*                                                          *\n************************************************************\n         SPACE\nIDRZAP   EQU   *\n         TM    OPTION3,OPT3Z\n         BZ    IDRZAP4\n         SLR   R6,R6\n         IC    R6,3(,R5)           GET NUMBER OF ACTIVE ENTRIES\n         N     R6,=A(X'0000003F')  ISOLATE LAST 6 BITS\n         BZ    IDRZAP4             BRANCH IF NONE ACTIVE\n         LA    R7,4(,R5)           POINT TO FIRST ENTRY\nIDRZAP1  MVC   DOUBLE(2),0(R7)\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         CLI   CNAME,C' '          ARE WE SELECTING A CSECT\n         BE    IDRZAP2             NO, PRINT ALL CSECT ZAPS\n         CLC   CNAME,0(R15)        IS THIS THE CSECT\n         BNE   IDRZAP3             NO, BRANCH\nIDRZAP2  MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)    MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(10),=C'ZAPPED    '\n         UNPK  MSGWK+21(5),02(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+27(8),5(R7)\n         LA    R1,MSGWK\n         LA    R0,72\n         BAL   R14,PUTLINE\nIDRZAP3  LA    R7,13(,R7)\n         BCT   R6,IDRZAP1\nIDRZAP4  TM    OPTION3,OPT3S      SPACE\n         BZ    IDRNEXT\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(40),=C'THERE ARE NO EMPTY SLOTS FOR ZAP IDRDATA'\n         SR    R0,R0\n         IC    R0,1(,R5)          GET LENGTH OF DATA (ALWAYS 250)\n         SH    R0,=H'3'           MINUS BYTES AT +1, +2, +3 = 247\n         SRDA  R0,32              SHIFT INTO DOUBLE REGISTER FOR DIVIDE\n         D     R0,=F'13'          GET NUMBER OF SLOTS (ALWAYS 19)\n         IC    R0,3(,R5)          NUMBER OF SLOTS USED\n         N     R0,=A(X'0000003F') ISOLATE LAST 6 BITS\n         SR    R1,R0              NUMBER OF SLOTS AVAILABLE\n         BNP   IDRZAP5\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+10(2),DOUBLE+6(2)\n         CH    R1,=H'1'           ONE SLOT\n         BNE   IDRZAP5            NO, MESSAGE IS READY\n         MVC   MSGWK+6(3),=C'IS ' CHANGE ARE TO IS\n         MVI   MSGWK+23,C' '      CHANGE SLOTS TO SLOT\nIDRZAP5  LA    R1,MSGWK\n         LA    R0,40\n         BAL   R14,PUTLINE\n         B     IDRNEXT\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR LINKAGE EDITOR                           *\n*                                                          *\n************************************************************\n         SPACE\nIDRLINK  EQU   *\n         MVC   MSGWK(8),MEMBER8\n         LA    R7,3(,R5)\n         MVC   MSGWK+9(23),=C'LINKEDITED YY.DDD USING'\n         UNPK  MSGWK+21(5),12(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),0(R7)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,10(,R7)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,11(,R7)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         CLC   0(9,R7),=C'5695PMB01'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(BINDER)'\n         CLC   0(9,R7),=C'566528408'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(LINKER)'\n         LA    R1,MSGWK\n         LA    R0,72\n         BAL   R14,PUTLINE\n         B     IDRNEXT\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR TRANSLATORS                              *\n*                                                          *\n************************************************************\n         SPACE\nIDRTRAN  EQU   *\n         TM    OPTION3,OPT3T\n         BZ    IDRNEXT\n         XC    IDRLEN,IDRLEN\n         L     R0,=A(10240)        GET AN AREA TO MERGE RECORDS IN\n         ST    R0,IDRFREE\n         GETMAIN R,LV=(0)\n         ST    R1,IDRPTR\nIDRTRANA L     R15,IDRPTR\n         A     R15,IDRLEN\n         SR    R6,R6\n         IC    R6,1(,R5)           BYTES COUNT (THIS PLUS REST)\n         SH    R6,=H'3'\n         B     *+10\n         MVC   0(0,R15),3(R5)\n         EX    R6,*-6              MOVE RECORD TO IDR AREA\n         LA    R6,1(,R6)\n         A     R6,IDRLEN\n         ST    R6,IDRLEN\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         CHECK MYDECB\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRTRANB\n         TM    2(R5),X'04'         FOR TRANSLATOR\n         BO    IDRTRANA            YES, ADD TO PREVIOUS RECORD\nIDRTRANB L     R1,IDRLEN\n         A     R1,IDRPTR\n         ST    R1,IDRPTRE          STORE END-OF-DATA ADDRESS\n         L     R7,IDRPTR\nIDRTRANC EQU   *\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTRANF            NO, BRANCH\n         TM    0(R7),X'80'         ONLY ONE ESDID\n         BO    IDRTRANF            YES, SWAP NOT NECESSARY\n         LR    R6,R7               NO, SWAP SELECTED ESDID WITH FIRST\nIDRTRAND MVC   DOUBLE(2),0(R6)     COPY ESDID TO WORK AREA\n         NI    DOUBLE,X'7F'        TURN OFF FLAG BIT\n         CLC   CNAMEID,DOUBLE      IS THIS THE ONE WE WANT\n         BE    IDRTRANE            YES, BRANCH\n         TM    0(R6),X'80'         NO, IS THIS THE LAST ONE\n         BO    IDRTRANF            YES, NOT FOUND IN THIS SET\n         LA    R6,2(,R6)           POINT TO NEXT ESDID\n         B     IDRTRAND\nIDRTRANE CR    R6,R7               YES, IS IT THE FIRST\n         BE    IDRTRANF            YES, NO NEED TO SWAP\n         MVC   DOUBLE+2(2),0(R7)   SAVE FIRST ENTRY\n         MVC   0(2,R7),DOUBLE      PUT THIS ONE FIRST\n         TM    0(R6),X'80'         WAS THIS ONE LAST\n         MVC   0(2,R6),DOUBLE+2    MOVE SAVED FIRST ONE HERE\n         BZ    *+8                 BRANCH IF NOT LAST\n         OI    0(R6),X'80'         RESTORE END BIT\nIDRTRANF EQU   *\n         SPACE\n         MVC   DOUBLE(2),0(R7)\n         NI    DOUBLE,X'7F'\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)     MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(23),=C'TRANSLATED YY.DDD USING'\n         LA    R1,MSGWK\n         BAL   R14,IDRTPC          CHECK FOR PC\n         SPACE\n         LR    R6,R7               START LOOKING FOR END OF ESDID LIST\nIDRTRAN1 TM    0(R6),X'80'         IS THIS THE LAST ONE\n         BO    IDRTRAN2            YES, BRANCH\n         LA    R6,2(,R6)           NO, BUMP ADDRESS BY 2\n         B     IDRTRAN1            KEEP LOOKING\nIDRTRAN2 LA    R6,2(,R6)           POINT PAST LAST ONE TO DATA\n         TM    15(R6),X'0F'        IF LAST 4 BITS OF DATE NOT F\n         BO    IDRTRANQ               IT'S NORMAL\n         CLC   11(2,R6),=X'0101'   IF VERSION IS 01 01\n         BE    IDRTRANU               IT'S FORTRAN-H 5734-FO3\n         MVC   DOUBLE(3),12(R6)    ELSE IT'S THAT CRAZY MSGCRTXT00\n         OI    DOUBLE+2,X'0F'      FORCE SIGN BITS\n         UNPK  MSGWK+21(5),DOUBLE(3)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         B     IDRTRANW            SKIP VERSION\nIDRTRANU MVC   DOUBLE(3),13(R6)    FORTRAN-H 0101 HAS A PROBLEM\n         OI    DOUBLE+2,X'0F'      FORCE SIGN BITS\n         UNPK  MSGWK+21(5),DOUBLE(3)\n         B     IDRTRANV\nIDRTRANQ UNPK  MSGWK+21(5),13(3,R6)\nIDRTRANV MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,11(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,12(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\nIDRTRANW CLC   1(9,R6),=C'566896201'\n         BNE   *+10\n         MVC   MSGWK+58(7),=C'(ASM-H)'\n         CLC   1(7,R6),=C'5734AS1'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(ASM-H1)'\n         CLC   1(9,R6),=C'5741SC103'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(ASM-XF)'\n         CLC   1(9,R6),=C'569623400'\n         BNE   *+10\n         MVC   MSGWK+58(7),=C'(HLASM)'\n         CLC   1(7,R6),=C'5694A01'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(XLC/C++)'\n         CLC   1(9,R6),=C'5688040  '\n         BNE   *+10\n         MVC   MSGWK+58(3),=C'(C)'\n         CLC   1(9,R6),=C'566876701'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(PASCAL)'\n         CLC   1(8,R6),=C'5734-FO3'\n         BNE   *+10\n         MVC   MSGWK+58(8),=C'(FORT-H)'\n         CLC   1(9,R6),=C' 5796-PKR'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(FORT-HX)'\n         CLC   1(8,R6),=C'5748-FO3'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(VSFORT1)'\n         CLC   1(8,R6),=C'5668-806'\n         BNE   *+10\n         MVC   MSGWK+58(9),=C'(VSFORT2)'\n         CLC   1(8,R6),=C'5734-PL1'\n         BNE   *+10\n         MVC   MSGWK+58(6),=C'(PL/1)'\n         CLC   1(4,R6),=C'ASMG'\n         BNE   *+10\n         MVC   MSGWK+58(7),=C'(ASM-G)'\n         CLI   MSGWK+58,C' '\n         BNE   *+8\n         MVI   MSGWK+58,C'?'\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTSEL1            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRTSUP1            NO, BYPASS DISPLAY\nIDRTSEL1 LA    R1,MSGWK\n         LA    R0,67\n         BAL   R14,PUTLINE\nIDRTSUP1 EQU   *\n         SPACE\n         LA    R15,16(,R6)         POINT TO NEXT ESDID LIST\n         CLI   0(R6),X'01'         PLS PRE-COMPILER ID PRESENT\n         BNE   IDRTRAN3            NO, BRANCH\n         LA    R6,15(,R6)          YES, POINT R6 TO SECOND ENTRY\n         TM    OPTION3,OPT3P       IDR(PLS) SPECIFIED\n         BZ    IDRTRANP            NO, BRANCH\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRTSEL2            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRTRANP            NO, BYPASS DISPLAY\nIDRTSEL2 MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK+27(5),=C'USING'\n         UNPK  MSGWK+21(5),13(3,R6)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         MVC   MSGWK+33(10),1(R6)\n         MVC   MSGWK+44(7),=C'VERSION'\n         SLR   R0,R0\n         IC    R0,11(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+52(2),DOUBLE+6(2)\n         IC    R0,12(,R6)\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+55(2),DOUBLE+6(2)\n         LA    R1,MSGWK\n         LA    R0,57\n         BAL   R14,PUTLINE\nIDRTRANP LA    R15,16(,R6)         POINT TO NEXT ESDID LIST\n         SPACE\nIDRTRAN3 ST    R15,IDRPTRC         UPDATE CURRENT POINTER\n         TM    0(R7),X'80'         WAS THERE ONLY ONE ESDID\n         BO    IDRTRANY            YES, ALREADY DISPLAYED IT\n         CLI   CNAME,C' '          ARE WE SELECTING A CSECT\n         BNE   IDRTRANY            YES, DONT SHOW OTHER NAMES\n         LA    R6,2(,R7)           POINT TO SECOND ESDID\nIDRTRAN4 MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK+2(6),=C'ALSO -'\n         LA    R1,MSGWK+9\n         LA    R0,7                FIT 7 NAMES ON A LINE\nIDRTRAN5 MVC   DOUBLE(2),0(R6)\n         NI    DOUBLE,X'7F'\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVC   0(8,R1),0(R15)      MOVE NAME FROM DICTIONARY\n         BAL   R14,IDRTPC          CHECK FOR PC\n         LA    R1,9(,R1)           POINT TO NEXT SLOT ON LINE\n         TM    0(R6),X'80'         WAS THAT LAST ID IN THIS RECORD\n         BO    IDRTRANX            YES, GO LIST THEM\n         LA    R6,2(,R6)           NO, POINT TO NEXT ESD ID\n         BCT   R0,IDRTRAN5         BRANCH IF LINE NOT FILLED\n         LA    R1,MSGWK\n         LA    R0,71\n         BAL   R14,PUTLINE\n         B     IDRTRAN4\nIDRTPC   CLC   0(8,R1),=CL8' '     IF NAME IS NOT BLANK\n         BNER  R14                    IT'S NOT A PC\n         MVC   DOUBLE+7(1),8(R15)  GET TYPE FROM DICTIONARY\n         NI    DOUBLE+7,X'0F'      ISOLATE IDENTIFYING BITS\n         CLI   DOUBLE+7,X'04'      PC\n         BNER  R14\n         MVC   0(3,R1),=C'PC('\n         UNPK  3(5,R1),DOUBLE(3)\n         TR    3(4,R1),UNPACKT-240\n         MVI   7(R1),C')'\n         BR    R14\nIDRTRANX EQU   *\n         LA    R1,MSGWK\n         LA    R0,71\n         BAL   R14,PUTLINE\nIDRTRANY L     R7,IDRPTRC          POINT TO NEXT ESDID LIST\n         C     R7,IDRPTRE          IS THAT ALL THERE IS\n         BL    IDRTRANC            NO, BRANCH\n         LM    R0,R1,IDRFREE\n         FREEMAIN R,LV=(0),A=(1)\n         B     IDRNEXTT            NEXT IDR IS ALREADY READ\n         SPACE\n************************************************************\n*                                                          *\n*         IDR FOR IDENTIFY                                 *\n*                                                          *\n************************************************************\n         SPACE\nIDRIDENT EQU   *\n         TM    OPTION3,OPT3I\n         BZ    IDRNEXT\n         XC    IDRLEN,IDRLEN\n         L     R0,=A(30720)\n         ST    R0,IDRFREE\n         GETMAIN R,LV=(0)\n         ST    R1,IDRPTR\nIDRIDENA L     R15,IDRPTR\n         A     R15,IDRLEN\n         SR    R6,R6\n         IC    R6,1(,R5)           BYTES COUNT (THIS PLUS REST)\n         SH    R6,=H'3'\n         B     *+10\n         MVC   0(0,R15),3(R5)\n         EX    R6,*-6              MOVE RECORD TO IDR AREA\n         LA    R6,1(,R6)\n         A     R6,IDRLEN\n         ST    R6,IDRLEN\n         XC    MYDECB(4),MYDECB    RESET THE ECB\n         READ  MYDECB,SF,(R4),(R5),32760,MF=E\n         CHECK MYDECB\n         CLI   SYNADSW,0           WAS SYNAD EXIT TAKEN?\n         BNE   ERRSYNAD            YES, BRANCH\n         CLI   0(R5),X'80'         IDR RECORD?\n         BNE   IDRIDENB\n         TM    2(R5),X'08'         FOR IDENTIFY\n         BO    IDRIDENA            YES, ADD TO PREVIOUS RECORD\nIDRIDENB L     R1,IDRLEN\n         A     R1,IDRPTR\n         ST    R1,IDRPTRE          STORE END-OF-DATA ADDRESS\n         L     R7,IDRPTR\nIDRIDENC MVC   DOUBLE(2),0(R7)\n         LH    R15,DOUBLE          ESDID\n         SLL   R15,4               MULTIPLY BY 16 TO GET OFFSET\n         A     R15,ESDPTR          ADD DICTIONARY ADDRESS TO OFFSET\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(80),MSGWK\n         MVC   MSGWK(8),0(R15)    MOVE NAME FROM DICTIONARY\n         MVC   MSGWK+9(10),=C'IDENTIFIED'\n         UNPK  MSGWK+21(5),02(3,R7)\n         MVC   MSGWK+20(2),MSGWK+21\n         MVI   MSGWK+22,C'.'\n         SLR   R1,R1\n         IC    R1,5(,R7)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+27(0),6(R7)\n         EX    R1,*-6\n         LA    R15,7(R1,R7)        POINT TO NEXT ENTRY\n         ST    R15,IDRPTRC\n         CLI   CNAME,C' '          SELECTING A CSECT\n         BE    IDRISEL1            NO, BRANCH\n         CLC   CNAME,MSGWK         IS THIS THE ONE WE WANT\n         BNE   IDRISUP1            NO, BYPASS DISPLAY\nIDRISEL1 LA    R1,MSGWK\n         LA    R0,68\n         BAL   R14,PUTLINE\nIDRISUP1 L     R7,IDRPTRC          POINT TO NEXT ESDID\n         C     R7,IDRPTRE          IS THAT ALL THERE IS\n         BL    IDRIDENC            NO, BRANCH\n         LM    R0,R1,IDRFREE\n         FREEMAIN R,LV=(0),A=(1)\n         B     IDRNEXTT            NEXT IDR IS ALREADY READ\n         SPACE\n************************************************************\n*                                                          *\n*         NON LOAD-MODULE MEMBERS                          *\n*                                                          *\n************************************************************\n         SPACE\nNOTLINK  TM    OPTION1,OPT1D       'DATA' SPECIFIED\n         BO    DATAPUT\n         CH    R0,=H'15'           SPF LENGTH\n         BNE   DATAPUT\n         LA    R0,10\n         SR    R6,R0\n         MVC   0(SPFHDRL,R6),SPFHDR\n         LA    R0,SPFHDRL(,R6)\n         LA    R1,MSGWH\n         SR    R0,R1\n         CLI   SPFHDRS,0           HAS HEADER BEEN WRITTEN ONCE\n         BNE   *+8                 YES, SKIP IT\n         BAL   R14,PUTLINE         WRITE SPF HEADER\n         MVI   SPFHDRS,1           INDICATE IT'S BEEN WRITTEN\n         SLR   R0,R0\n         IC    R0,SPFV             VERSION OF V.M\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+24(2),DOUBLE+6(2)\n         MVI   MSGWK+26,C'.'\n         IC    R0,SPFM             MODIFICATION OF V.M\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  MSGWK+27(2),DOUBLE+6(2)\n         MVI   MSGWK+29,C' '\n         MVC   MSGWK+30(3),MSGWK+29\n*        MVC   MSGWK+33(2),(2*(SPFCREDT+1-PDS))(R8)\n*        MVI   MSGWK+35,C'.'\n*        MVC   MSGWK+36(3),(2*(SPFCREDT+2-PDS))(R8)\n         LA    R1,SPFCREDT\n         BAL   R14,JULIAN\n         MVC   MSGWK+31(8),JULIANO\n*        MVC   MSGWK+43(2),(2*(SPFMODDT+1-PDS))(R8)\n*        MVI   MSGWK+45,C'.'\n*        MVC   MSGWK+46(3),(2*(SPFMODDT+2-PDS))(R8)\n         LA    R1,SPFMODDT\n         BAL   R14,JULIAN\n         MVC   MSGWK+41(8),JULIANO\n         MVC   MSGWK+50(2),(2*(SPFMODTM+0-PDS))(R8)\n         MVI   MSGWK+52,C'.'\n         MVC   MSGWK+53(2),(2*(SPFMODTM+1-PDS))(R8)\n         LH    R0,SPFSIZE\n         N     R0,=A(X'0000FFFF') USE ALL 16 BITS, NO SIGN\n         CVD   R0,DOUBLE\n         MVC   MSGWK+55(6),=X'402020202120'\n         ED    MSGWK+55(6),DOUBLE+5\n         MVC   MSGWK+63(10),SPFID\n         LA    R1,MSGWK\n         LA    R0,73\n         BAL   R14,PUTLINE\n         B     DONEMEM\n         SPACE\nJULIAN   CLC   0(4,R1),JULIANI\n         BER   R14\n         MVC   JULIANI(4),0(R1)\n         MVC   DOUBLE(4),0(R1)\n         LH    R0,DOUBLE           GET 00YY\n         SLL   R0,4                SHIFT TO 00000YY0\n         STH   R0,DOUBLE+6\n         OI    DOUBLE+7,X'0F'      SET SIGN\n         XC    DOUBLE(6),DOUBLE\n         CVB   R0,DOUBLE\n         UNPK  JULIANO+6(2),DOUBLE+6(2)\n         ST    R0,DOUBLE\n         MVC   JULIANW(26),JULIAND SET DAYS PER MONTH\n         TM    DOUBLE+3,X'03'      IS YEAR DIVISIBLE BY 4\n         BNZ   JULIAN1             NO\n         MVI   JULIANW+3,29        YES, CHANGE FEB TO 29\nJULIAN1  MVC   DOUBLE+4(4),0(R1)   GET 00YYDDDF\n         XC    DOUBLE(6),DOUBLE    GET DDDF\n         CVB   R1,DOUBLE           GET DDD IN BINARY\n         LA    R15,2               INDEX FOR TABLE\n         LR    R0,R15              INDEX INCREMENT\nJULIAN2  CH    R1,JULIANW-2(R15)   DAY .LT. OR .EQ. ENTRY\n         BNH   JULIAN3             YES, BRANCH\n         SH    R1,JULIANW-2(R15)   NO, SUBTRACT ENTRY FROM DDD\n         ALR   R15,R0              ADD 2 TO INDEX\n         B     JULIAN2             LOOP\nJULIAN3  SRL   R15,1               HALVE INDEX TO GET MM\n         CVD   R1,DOUBLE           CONVERT DD TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN OF DD\n         UNPK  JULIANO+3(2),DOUBLE+6(2) UNPACK DD\n         CVD   R15,DOUBLE          CONVERT MM TO PACKED\n         OI    DOUBLE+7,X'0F'      SET SIGN OF MM\n         UNPK  JULIANO+0(2),DOUBLE+6(2) UNPACK MM\n         MVI   JULIANO+2,C'/'\n         MVI   JULIANO+5,C'/'\n         BR    R14\n         SPACE\nDATAPUT  MVC   0(5,R6),=C'DATA-'\n         LA    R1,MSGWH\n         LA    R0,5(,R5)\n         BAL   R14,PUTLINE         WRITE BASIC HEADER\n         LH    R1,USERLEN\n         LTR   R1,R1\n         BZ    NOTLZRO\n         SLL   R1,2\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG09(0),28(R8)\n         EX    R1,*-6\nNOTLZRO  LA    R0,5(R5,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTLINE         WRITE BASIC INFO AND DATA\n         SPACE\nDONEMEM  TM    OPTION1,OPT1T       'TEST' SPECIFIED?\n         BZ    NOTESTD\n         LA    R1,BLDLX\n         LH    R0,USERLEN\n         AH    R0,=H'7'            14 OTHER BYTES (NAME, TTR, K, Z, C)\n         SLL   R0,2                DOUBLE TO BYTES, DOUBLE FOR HEX\n         BAL   R14,PUTLINE         DISPLAY ALL IN HEX FOR TESTING\nNOTESTD  EQU   *\n         SR    R15,R15\n         SPACE\nNEXTMEM  CH    R15,RC              IS R15 HIGHEST YET\n         BNH   *+8                 NO\n         STH   R15,RC              YES, SAVE HIGHEST VALUE\n         SPACE\n         CLI   PLUSKW+1,1          WAS PLUS(MEMBER,MEMBER..) SPECIFIED\n         BNE   PLUSX               NO, BRANCH\n         CLI   PLUSPTR,X'FF'       YES, ANY MORE MEMBERS SPECIFIED\n         BE    PLUSX               NO, BRANCH\n         L     R15,PLUSPTR         YES, POINT TO CURRENT PDE\n         MVC   PLUSPTR,8(R15)      SET UP FOR NEXT MEMBER\n         MVC   MEMBER8(8),=CL8' '\n         LH    R1,4(,R15)          GET LENGTH OF MEMBER\n         BCTR  R1,0                MINUS 1 FOR EX\n         L     R14,0(,R15)         GET ADDRESS OF MEMBER NAME\n         B     *+10\n         MVC   MEMBER8(0),0(R14)    MOVE MEMBER NAME\n         EX    R1,*-6\n         STH   R1,MEMBERL\n         B     MEMLOOP\nPLUSX    EQU   *\n         SPACE\nNEXTDSN  CH    R15,RC              IS R15 HIGHEST YET\n         BNH   *+8                 NO\n         STH   R15,RC              YES, SAVE HIGHEST VALUE\n         SPACE\n         TM    CLEANUP,X'80'\n         BZ    NOCLOSE\n         MVC   CLOSED,CLOSE\n         CLOSE ((R4)),MF=(E,CLOSED)\n         NI    CLEANUP,B'01111111'\nNOCLOSE  TM    CLEANUP,X'40'\n         BZ    NOFREE\n         LA    R1,MYDAPL\n         LA    R15,MYDAPB\n         USING DAPB18,R15\n         XC    0(40,R15),0(R15)\n         MVI   DA18CD+1,X'18'\n         MVC   DA18DDN,DDSAVE\n         MVC   DA18MNM(8),=CL8' '\n         MVC   DA18SCLS(2),=CL8' '\n         BAL   R14,CALLDAIR        UNALLOCATE\n         NI    CLEANUP,B'10111111'\nNOFREE   EQU   *\n         SPACE\n         L     R8,DSNPTR\n         CLI   24(R8),X'FF'\n         BNE   DSNLOOP\n         SPACE\n         TM    MYPUTLEP,X'80'     WAS PUTLINE LOADED BY ME?\n         BO    NODELETE           NO - USED CVTPUTL - BRANCH\n         LA    R0,=CL8'IKJPUTL '\n         DELETE EPLOC=(0)\nNODELETE EQU   *\n         SPACE\n         TM    OPTION1,OPT1O       IF OUTFILE IS OPEN\n         BZ    NOCLOUT\n         MVC   CLOSED,CLOSE\n         LA    R8,OUTDCBW\n         CLOSE ((R8)),MF=(E,CLOSED)\nNOCLOUT  EQU   *\n         LH    R15,RC\n         B     EXIT\n         SPACE\n************************************************************\n*                                                          *\n*         CALL IKJDAIR SERVICE ROUTINE                     *\n*                                                          *\n************************************************************\n         SPACE\nCALLDAIR ST    R14,DAIRREGS\n         AIF   (NOT &MVS).SKIP4\n         L     R15,16\n         TM    116(R15),X'13'      IS THIS MVS ?\n         BNO   DAIRLINK            BRANCH IF NOT MVS\n         TM    X'2DC'(R15),X'80'  CVTDAIR\n         BNO   DAIRLINK\n         L     R15,X'2DC'(,R15)\n         BALR  R14,R15\n         B     DAIRFINI\nDAIRLINK EQU   *\n.SKIP4   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\nDAIRFINI L     R14,DAIRREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        DYNAMIC ALLOCATION FAILURE ROUTINE                *\n*                                                          *\n************************************************************\n         SPACE\nDAIRFAIL ST    R14,MYDFREGS\n         AIF   (NOT &MVS).SKIP5\n         LA    R1,MYDFPARM\n         USING DFDSECTD,R1\n         ST    R15,MYDFRC\n         LA    R15,MYDFRC\n         ST    R15,DFRCP\n         LA    R15,MYDAPL\n         ST    R15,DFDAPLP\n         SLR   R15,R15\n         ST    R15,MYJEFF02\n         LA    R15,MYJEFF02\n         ST    R15,DFJEFF02\n         LA    R15,DFDAIR\n         STH   R15,MYDFID\n         LA    R15,MYDFID\n         ST    R15,DFIDP\n         SLR   R15,R15\n         ST    R15,DFCPPLP\n         LINK  EP=IKJEFF18,SF=(E,LINKAREA)\n         L     R15,MYDFRC\n         DROP  R1\n.SKIP5   ANOP\n         AIF   (&MVS).SKIP6\n         LA    R1,MSGDAIR\n         LA    R0,L'MSGDAIR\n         BAL   R14,PUTMSG\n.SKIP6   ANOP\n         L     R14,MYDFREGS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*  UNPACK - CONVERT A FIELD TO HEXADECIMAL.                *\n*  REG 1 --> INPUT   REG 15 --> OUTPUT                     *\n*  REG 0  =  INPUT LENGTH  (OUTPUT IS TWICE PLUS 1 BLANK)  *\n*  REG 14 --> RETURN ADDRESS                               *\n*                                                          *\n************************************************************\n         SPACE\nUNPACK   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),UNPACKT-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,UNPACK           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\nUNPACKT  DC    C'0123456789ABCDEF' TRANSLATE TABLE\n         SPACE\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         LA    R1,MYIOPL\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         TM    OPTION1,OPT1O\n         BO    PUTFILE\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         LA    R1,MYIOPL\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),ENTRY=(15),MF=(E,(1))\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         SPACE\nPUTFILE  LR    R14,R0              LENGTH IN R0\n         MVI   LINE,C' '\n         MVC   LINE+1(L'LINE-1),LINE\n         LTR   R14,R14\n         BZ    PUTF2\n         LA    R0,80\n         CR    R14,R0              IF LONGER THAN 80\n         BNH   *+6                    THEN\n         LR    R14,R0                 TRUNCATE TO 80\n         BCTR  R14,0\n         EX    R14,PUTFMOVE\nPUTF2    LA    R1,OUTDCBW\n         LA    R0,LINE\n         PUT   (1),(0)\n         LM    R14,R1,PUTLINS\n         BR    R14\nPUTFMOVE MVC   LINE(0),0(R1)      (EXECUTED VIA EX)\n         SPACE\nEXIT0    SR    15,15\nEXIT     LR    1,13\n         L     0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE\n************************************************************\n*                                                          *\n*        SYNAD EXIT                                        *\n*                                                          *\n************************************************************\n         SPACE\n*        THIS ROUTINE IS ENTERED DURING THE 'CHECK' MACRO\n*        IF AN I/O ERROR OCCURS.\n         SPACE\nDYNSYNAD EQU   *\n         SYNADAF ACSMETH=BPAM\n         MVC   SYNADMSG(78),50(R1)\n         MVI   SYNADSW,X'FF'\n         SYNADRLS\n         BR    R14\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\n         PRINT NOGEN\n         SPACE\nDCBMODEL DCB   DDNAME=DYNAM,DSORG=PO,MACRF=(R),                        +\n               EODAD=0,SYNAD=0\nDCBLEN   EQU   *-DCBMODEL\n         SPACE\nOUTDCB   DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(PM)\nOUTDCBL  EQU   *-OUTDCB\n         SPACE\n         PRINT GEN\n         SPACE\nOPEN     OPEN  0,MF=L\n         SPACE\nCLOSE    CLOSE 0,MF=L\n         SPACE\nLFDECB   READ  LFDECB1,SF,2,3,4,MF=L\nLFDECBL  EQU   *-LFDECB\n         SPACE\nJULIAND  DC    H'31,28,31,30,31,30,31,31,30,31,30,31,999'\n         SPACE\nMSG01    DC    C'ERROR IN PARSE SERVICE ROUTINE'\nMSG02    DC    C'IKJ58503I DATA SET '\nMSG02A   DC    C' NOT IN CATALOG'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG04    DC    C'UNABLE TO OPEN DATASET'\nMSG05    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG06    DC    C'ORGANIZATION OF DATA SET MUST BE PARTITIONED'\nMSG07    DC    C'MEMBER NOT SPECIFIED'\nMSG08    DC    C'MEMBER '\nMSG08A   DC    C' NOT FOUND'\nMSG09    DC    C'--MEMBER---TTR----ALIAS-TTRN-CNT-'\nMSG09A   DC    C'ATTR-STORAGE---------SSI------'\nMSG10    DC    C'--DATA--'\n*SG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VS--AC--ALIAS OF--\n*              MAINEP-'\n*SG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VS--R/AMODE--AC--A\n*              LIAS OF--MAINEP-'\nMSG11    DC    C'--TTR1----TTR2----OV--LFTX--EP------VSMRLD--R/AMODE--A+\n               C--ALIAS OF--MAINEP-'\nMSG12A   DC    C' FOUND IN LPA'\nMSG12B   DC    C' NOT FOUND IN LPA DIRECTORY'\nMSG14    DC    C' FOUND IN ACTIVE JPAQ/LPAQ (8) '\nSPFHDR   DC    C'  V.M    CREATED   LAST MODIFIED  SIZE    ID'\nSPFHDRL  EQU   *-SPFHDR\n         AIF   (&MVS).SKIP7\nMSGDAIR  DC    C'UNABLE TO ALLOCATE DATA SET'\n.SKIP7   ANOP\nPERIODS  DC    077C'.'                00-76    0-76\n         DC    C'(+'                  4D-4E   77-78\n         DC    C'.'                      4F      79\n         DC    X'50'                     50      80\n         DC    10C'.'                 51-5A   81-90\n         DC    C'$*)'                 5B-5D   91-93\n         DC    02C'.'                 5E-5F   94-95\n         DC    C'-/'                  60-61   96-97\n         DC    09C'.'                 62-6A   98-106\n         DC    C','                   6B      107\n         DC    15C'.'                 6C-7A  108-122\n         DC    C'#@',X'7D',C'='       7B-7E  123-126\n         DC    2C'.'                  7F-80  127-128\n         DC    C'ABCDEFGHI'           81-89  129-137\n         DC    7C'.'                  8A-90  138-144\n         DC    C'JKLMNOPQR'           91-99\n         DC    8C'.'                  9A-A1\n         DC    C'STUVWXYZ'            A2-A9\n         DC    23C'.'                 AA-C0\n         DC    C'ABCDEFGHI'           C1-C9\n         DC    7C'.'                  CA-D0\n         DC    C'JKLMNOPQR'           D1-D9\n         DC    8C'.'                  DA-E1\n         DC    C'STUVWXYZ'            E2-E9\n         DC    06C'.'                 EA-EF\n         DC    C'0123456789'          F0-F9\n         DC    6C'.'\n         LTORG\nPCLADDR  DC    0D'0'               END MAIN CSECT, BEGIN PCL CSECT\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nMEMPCL   IKJPARM\nDSN      IKJPOSIT DSNAME,PROMPT='DATA SET NAME',LIST\nUNITKW   IKJKEYWD\n         IKJNAME 'UNIT',SUBFLD=UNITSF\nVOLKW    IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VOLSF\nPLUSKW   IKJKEYWD\n         IKJNAME 'PLUS',SUBFLD=PLUSSF\nDATAKW   IKJKEYWD\n         IKJNAME 'DATA'\nTESTKW   IKJKEYWD\n         IKJNAME 'TEST'\nSYSTKW   IKJKEYWD\n         IKJNAME 'S'\n         IKJNAME 'SYSTEM'\n         IKJNAME 'SLPA'\nWHEREKW  IKJKEYWD\n         IKJNAME 'WHERE'\nESOKW    IKJKEYWD\n         IKJNAME 'ESOTERIC'\nMAPKW    IKJKEYWD\n         IKJNAME 'MAP',SUBFLD=MAPSF\nLISTKW   IKJKEYWD\n         IKJNAME 'LIST'\n         IKJNAME 'L'\nLOADKW   IKJKEYWD\n         IKJNAME 'LOAD'\nIDRKW    IKJKEYWD\n         IKJNAME 'IDR',SUBFLD=IDRSF\nCSECTKW  IKJKEYWD\n         IKJNAME 'CSECT',SUBFLD=CSECTSF\nOUTFIKW  IKJKEYWD\n         IKJNAME 'OUTFILE',SUBFLD=OUTFISF\nUNITSF   IKJSUBF\nUNIT     IKJIDENT 'UNIT NAME',                                         +\n               FIRST=ALPHANUM,OTHER=ANY,MAXLNTH=8,                     +\n               PROMPT='UNIT NAME'\nVOLSF    IKJSUBF\nVOL      IKJIDENT 'VOLUME SERIAL',                                     +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +\n               PROMPT='VOLUME SERIAL'\nPLUSSF   IKJSUBF\nPLUS     IKJIDENT 'MEMBER NAME',LIST,                                  +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='MEMBER NAME'\nMAPSF    IKJSUBF\nMAPSKW   IKJKEYWD\n         IKJNAME 'ALL'\n         IKJNAME 'SHORT'\nIDRSF    IKJSUBF\nIDRTRNKW IKJKEYWD\n         IKJNAME 'TRANSLATOR'\nIDRPLSKW IKJKEYWD\n         IKJNAME 'PLS'\nIDRZAPKW IKJKEYWD\n         IKJNAME 'ZAP'\nIDRSPCKW IKJKEYWD\n         IKJNAME 'SPACE'\nIDRIDEKW IKJKEYWD\n         IKJNAME 'IDENTIFY'\nIDRALLKW IKJKEYWD\n         IKJNAME 'ALL'\nCSECTSF  IKJSUBF\nCSECT    IKJIDENT 'CSECT NAME',                                        +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='CSECT NAME'\nOUTFISF  IKJSUBF\nOUTFI    IKJIDENT 'DDNAME',                                            +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=8,                +\n               PROMPT='DDNAME FOR OUTFILE'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nLINKAREA DS    2F\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nDSNPTR   DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL128           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYDAPL   DS    5F\nMYDAPB   DS    21F\nMYDFPB   DS    5F\nPLUSPTR  DS    F\nDSNAME   DS    H,CL44,CL9\nCLEANUP  DS    X\nOPTION1  DS    X\nOPT1D    EQU   X'80'               DATA\nOPT1T    EQU   X'40'               TEST\nOPT1S    EQU   X'20'               SYS\nOPT1E    EQU   X'10'               ESOTERIC\nOPT1W    EQU   X'08'               WHERE\nOPT1L    EQU   X'04'               SLPA\nOPT1O    EQU   X'02'               OUTFILE\nOPTION2  DS    X\nOPT2L    EQU   X'80'               LIST\nOPT2I    EQU   X'40'               IDR\nOPT2M    EQU   X'20'               MAP\nOPT2A    EQU   X'10'               MAP(ALL)\nOPT2O    EQU   X'08'               LOAD\nOPTION3  DS    X\nOPT3T    EQU   X'80'               TRAN\nOPT3P    EQU   X'40'               PLS\nOPT3Z    EQU   X'20'               ZAP\nOPT3I    EQU   X'10'               IDENT\nOPT3S    EQU   X'08'               SPACE\nCNAME    DS    CL8\nCNAMEID  DS    H\nESDID    DS    H\nRC       DS    H\nSPFHDRS  DS    C\nESDPTR   DS    F\nIDRLEN   DS    F\nIDRFREE  DS    F\nIDRPTR   DS    F\nIDRPTRC  DS    F\nIDRPTRE  DS    F\nIDRR5    DS    F\nMSGWK    DS    CL128\nMSGWH    DS    CL80\nMYDFPARM DS    5F  USED BY DAIRFAIL\nMYDFREGS DS    F   USED BY DAIRFAIL\nMYDFRC   DS    F   USED BY DAIRFAIL\nMYJEFF02 DS    F   USED BY DAIRFAIL\nMYDFID   DS    H   USED BY DAIRFAIL\nDOUBLE   DS    D\nFULL     EQU   DOUBLE,4\nBYTE     EQU   DOUBLE,1\nDDSAVE   DS    CL8\nDAIRREGS DS    F\nOPEND    DS    0F\nCLOSED   DS    F\nKOUNT    DS    F\nDCB      DS    0D,XL(DCBLEN)\nONAME    DS    CL8\nOUTDCBW  DS    0D,XL(OUTDCBL)\nOUTEXL   DS    F\nLINE     DS    CL80\nMYDECB   DS    5F\nSYNADSW  DS    F\nSYNADMSG DS    CL78\nANYCESD  DS    C\nMODES    DS    C\nJULIANI  DS    F\nJULIANO  DS    CL8\nJULIANW  DS    13H\nLPAREGS  DS    2F\nUNITN    DS    CL8\nVOLSER   DS    CL6,CL2\nMEMBER8  DS    D\nMEMBERL  DS    H\nUSERLEN  DS    H\nLINKOFF  DS    0F\nLINKOFF1 DS    F\nLINKOFF2 DS    F\nLINKOFF3 DS    F\nLINKOFF4 DS    F\nBLDLW    DS    CL64                4 + 11 + 2 + 47\nBLDLX    DS    CL129               2 * L'BLDLW + 1\nMAPENTX  DS    4F,C\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nPDSDSECT DSECT\nPDS      EQU   *\nPDSMEMBR DS    CL8                 MEMBER NAME\nPDSTTR   DS    XL3                 TTR OF 1ST BLOCK\nPDSBLDL1 DS    XL1                 CONCATENATION NUMBER\nPDSBLDL2 DS    XL1                 1 - LINKLIST  2 - STEPLIB\nPDSINDIC DS    XL1                 INDICATORS\n*              USER DATA FIELD\nPDSUSER  DS    0C\nPDSTTRT  DS    XL3                 TTR OF FIRST TEXT BLOCK\n         DS    XL1                 ZERO, FOR ALIGNMENT\nPDSTTRN  DS    XL3                 TTR OF NOTE LIST OR SCATTER\nPDSTTRNO DS    XL1                 NUMBER OF NOTE LIST ENTRIES\nPDSATTR  DS    0XL2                ATTRIBUTES\nPDSATTR1 DS    XL1                 ATTRIBUTES, BYTE 1\nPDSATTR2 DS    XL1                 ATTRIBUTES, BYTE 2\nPDSSIZE  DS    XL3                 CONTIGUOUS MAIN STORAGE REQUIRED\nPDSFTXTL DS    XL2                 LENGTH OF FIRST TEXT BLOCK\nPDSENTRY DS    XL3                 ENTRY POINT ADDRESS\nPDSFTXTO DS    0XL3                ORIGIN OF FIRST TEXT BLOCK (OS)\nPDSATTV  DS    XL3                 VS ATTRIBUTES, R/AMODE, RLD COUNT\nPDSOPTIO EQU   *                   BEGIN OPTIONAL FIELDS\n         ORG   PDSUSER\nSPFV     DS    XL1                 VERSION\nSPFM     DS    XL1                 MODIFICATION LEVEL\n         DS    XL2\nSPFCREDT DS    PL4                 00YYDDDF\nSPFMODDT DS    PL4                 00YYDDDF\nSPFMODTM DS    XL2                 HHMM\nSPFSIZE  DS    XL2                 CURRENT SIZE\nSPFINIT  DS    XL2                 INITIAL SIZE\nSPFMOD   DS    XL2                 MODIFICATIONS\nSPFID    DS    CL10                USERID\n         SPACE\nIHADCB   DSECT\n         DS    32XL1\n         DS    XL1\nDCBEODAD DS    AL3\nDCBRECFM DS    X\nDCBEXLST DS    AL3\nDCBDDNAM DS    CL8\nDCBOFLGS DS    X\n         DS    7XL1\n         DS    X\nDCBSYNAD DS    AL3\n         DS    H\nDCBBLKSI DS    H\n         DS    XL18\nDCBLRECL DS    H\n         SPACE\n         IKJCPPL\n         SPACE 3\n         IKJPPL\n         SPACE\n         IKJDFPB\n         SPACE 2\n         IKJUPT\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJDAPL\n         SPACE 2\n         IKJDAP08\n         SPACE 2\n         IKJDAP18\n         SPACE 2\n         AIF   (NOT &MVS).SKIP8\n         IKJEFFDF DFDSECT=YES\n.SKIP8   ANOP\n         SPACE 2\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMBER$": {"ttr": 6410, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'MEMBER'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(MEMBER),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(MEMBER),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD *\n ALIAS MEM\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMBER#": {"ttr": 6412, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00=\\x00=\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 61, "newlines": 61, "modlines": 0, "user": "BG@PRC"}, "text": ")F FUNCTION -\n  THE MEMBER COMMAND DISPLAYS INFORMATION ABOUT A MEMBER\n  OF A PDS FROM THE PDS DIRECTORY.\n\n  FOR MEMBERS CREATED BY THE 'SPF' EDIT, THE STATISTICS\n  IN THE DIRECTORY ARE FORMATTED.\n\n  FOR LOAD MODULES, INFORMATION FROM THE DIRECTORY\n  IS INTERPRETED AND FORMATTED, INCLUDING MODULE SIZE,\n  ATTRIBUTES, AND SSI INFORMATION.\n\n  FOR LOAD MODULES, INFORMATION FROM THE 'ESD' AND 'IDR'\n  RECORDS CAN BE LISTED.\n\n  THE COMMAND CAN ALSO BE USED TO SEARCH THE SYSTEM LINK\n  LIBRARIES FOR A SPECIFIED LOAD MODULE.\n)X SYNTAX  -\n         MEMBER  'DSNAME(MEMBER)'  ESOTERIC  LIST  MAP  IDR  CSECT(ID)\n     OR\n         MEMBER  'MEMBER'  SYS     ESOTERIC  WHERE\n  REQUIRED - 'DSNAME(MEMBER)'  (OR 'MEMBER' AND 'SYS')\n  DEFAULTS - NONE\n  ALIAS    - MEM\n)O OPERANDS -\n  'DSNAME(MEMBER)' THE DATA SET AND MEMBER TO BE DISPLAYED.\n             (OR JUST A MEMBER NAME IF 'SYS' IS ALSO SPECIFIED).\n             THIS OPERAND MAY OPTIONALLY BE A LIST IN PARENTHESES.\n))ESOTERIC - FOR LOAD MODULES, A SECOND LINE OF DIRECTORY\n             INFORMATION, WHICH IS RARELY OF INTEREST, IS TO\n             BE DISPLAYED.\n))LIST     - FOR LOAD MODULES, THE FIRST 48 BYTES OF THE\n             TEXT WILL BE DISPLAYED.  USEFUL IF THE PROGRAM\n             HAD IDENTIFYING INFORMATION SUCH AS DATE-ASSEMBLED\n             IN ITS 'SAVE' MACRO.  NOT VALID WITH 'SYS'.\n))MAP      - FOR LOAD MODULES, THE CSECT NAMES FROM THE CESD\n             RECORD(S) WILL BE DISPLAYED.  NOT VALID WITH 'SYS'.\n))IDR      - FOR LOAD MODULES, THE IDR RECORD CONTAINING THE\n             DATE OF LINKEDIT IS DISPLAYED.\n             IF IDR(ZAP) IS SPECIFIED, IDR ZAP RECORDS ARE DISPLAYED.\n             IF IDR(TRAN) IS SPECIFIED, IDR TRANSLATOR RECORDS, CON-\n             TAINING THE DATE OF ASSEMBLY OR COMPILATION, ARE DISPLAYED.\n             IDR(PLS) IS THE SAME AS IDR(TRANS), EXCEPT PLS TRANSLATOR\n             INFORMATION IS ALSO DISPLAYED.\n             IF IDR(IDENT) IS SPECIFIED, IDR IDENTIFY RECORDS, CREATED\n             BY THE LINKEDIT 'IDENTIFY' STATEMENT, ARE DISPLAYED.\n             IF IDR(SPACE) IS SPECIFIED, THE NUMBER OF AVAILABLE\n             SLOTS FOR ZAP ENTRIES IS DISPLAYED.\n             IF IDR(ALL) IS SPECIFIED, ALL IDR RECORDS ARE DISPLAYED,\n             BUT NOT THE ZAP SPACE AVAILABLE.  USE IDR(ALL SPACE).\n))CSECT(ID) - IF THE NAME OF A CSECT IS SPECIFIED HERE, THE\n             'MAP' AND 'IDR' INFORMATION WILL BE RESTRICTED TO\n             THE SPECIFIED CSECT.\n))SYS      - THE 'SYS' KEYWORD INDICATES THAT THE FIRST\n             OPERAND IS A MEMBER NAME AND THE SYSTEM LINK LIBRARIES\n             (OR SESSION STEPLIB) ARE TO BE SEARCHED FOR IT.\n             THIS OPERAND CANCELS THE 'LIST', 'MAP' AND 'IDR' OPERANDS,\n             WHICH REQUIRE A DATA SET NAME IN THE 1ST OPERAND.\n))WHERE    - VALID ONLY WITH 'SYS', THIS CAUSES THE CONCATENATION\n             NUMBER OF THE LINKLIST (OR STEPLIB) LIBRARY TO BE\n             DISPLAYED.  USEFUL FOR DETERMINING WHICH LIBRARY\n             A MEMBER IS LOCATED IN.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWDS": {"ttr": 6657, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x05\\x00E\\x00\\x86\\x12\\x7f\\x01\\x175?\\x15\\x19\\x08\\xb2\\x07\\xd0\\x00;\\xc9\\xc2\\xd4\\xe4\\xe2\\xc5\\xd9@@@'", "ispf": {"version": "05.05", "flags": 0, "createdate": "1986-05-07T00:00:00", "modifydate": "2017-12-19T15:19:45", "lines": 2226, "newlines": 2000, "modlines": 59, "user": "IBMUSER"}, "text": "         TITLE '   S H O W D S    '\n************************************************************\n*                                                          *\n*        'SHOWDS'                                          *\n*                                                          *\n************************************************************\n         SPACE 3\n*        WRITTEN BY: BILL GODFREY,  PLANNING RESEARCH CORPORATION.\n*        INSTALLATION: PRC COMPUTER CENTER INC, MCLEAN VA\n*        DATE WRITTEN: NOVEMBER 5 1976.\n*        DATE UPDATED: JANUARY 15 2002.\n*        ATTRIBUTES: RE-ENTRANT, AMODE=24, RMODE=24.\n*        DESCRIPTION:\n*            THIS IS A TSO COMMAND SIMILAR TO 'LISTDS'.\n*            IT SHOWS ADDITIONAL INFORMATION FROM THE DSCB\n*            PERTAINING TO SPACE.  IT DOES NOT ALLOCATE THE DATA\n*            SET UNLESS DIRECTORY INFORMATION IS REQUESTED.\n*            NOTE - DEVICE TYPE IN CATALOG IS IGNORED.\n*            NOTE - PRE-ALLOCATIONS ARE IGNORED.\n*\n*            THIS VERSION OF SHOWDS SHOULD FUNCTION CORRECTLY\n*            FOR OS AND ICF (EDF) DATA SETS UNDER\n*            MVS/370, OSIV/F4, MVS/XA, MVS/ESA AND OSIV MSP/EXA.\n         EJECT\n*         LOG OF CHANGES.\n*            20MAR78 - IKJRLSA ADDED\n*            25JUL78 - UCB LOOKUP ADDED\n*            25JUL78 - OBTAIN WITH CATALOG'S DSCBTTR ADDED.\n*            23FEB79 - ACCESS DATE ADDED (SU 60)\n*            28FEB79 - FORMAT 4 OBTAIN ADDED FOR DEVICES\n*                      OTHER THAN THOSE CURRENTLY INSTALLED.\n*            01MAR79 - STACK DELETE ADDED IF RC NON-ZERO.\n*            15JUN79 - CHECK FOR NEGATIVE TRACKS UNUSED.\n*            14SEP79 - GBLB &MVS ADDED. EXPDT IF ACCESS ZERO.\n*            14SEP79 - SVS/MVT CODE TO PREFIX DSNAME WITH USERID.\n*            14APR80 - IKJPOSIT WITHOUT USID FOR MVT.  SYSPARM.\n*            15APR80 - ADDED 2314. CANNOT OBTAIN-SEARCH FORMAT 4 ON MVT\n*            24APR80 - MUST SPECIFY 'ACCESS' TO GET ACCESS DATE.\n*            29MAY80 - SUPPORT FOR FILE KW ADDED (DEVTYPE, RDJFCB).\n*                      PREFIXING DONE BY COMMAND INSTEAD OF PARSE.\n*            30MAY80 - QUICK KW ADDED, TO BYPASS DEFAULT SERVICE\n*                      ROUTINE IF YOU KNOW YOU SPECIFIED TRAILING\n*                      QUALIFIERS ON UNQUOTED NAME AND WANT TO\n*                      BYPASS THE EXTRA CATALOG SEARCH.\n*            12FEB81 - DEVICE TYPE NOW DISPLAYED.\n*                      PDS DIRECTORY INFO ADDED, IF 'DIR' SPECIFIED,\n*                      BUT ONLY IF 'FILE' OPTION IS USED.\n*            11MAR81 - VIO SUPPORT (VOL BLANK, UCB FROM TIOT).\n*                      PDS DIRECTORY INFO NOW DISPLAYED, IF DIR IS\n*                      SPECIFIED, EVEN IF FILE NOT SPECIFIED.\n*                      WILL ALLOCATE THE DATA SET IF NECESSARY.\n*                      SINCE WE DETERMINE THE VOLUME FROM THE\n*                      CATALOG ONLY (IF IT IS NOT SPECIFIED), AND\n*                      IN SO DOING WE IGNORE PRE-ALLOCATIONS, THE\n*                      ALLOCATION REQUEST ALWAYS SPECIFIES THE VOLUME.\n*            20APR81 - SHOW RACF PROTECTION.\n*            09JUL81 - SHOW VIRTUAL 3330 AS 3330V. SHOW DIRBLKS USED\n*                      IN ADDITION TO UNUSED. SHOW TOTAL MEMBERS.\n*                      EXTENTS KEYWORD ADDED.\n*            01SEP81 - ADD UNITNAME TO DAIR PARAMETERS, SO ALLOCATION\n*                      WILL WORK REGARDLESS OF USER'S DEFAULT UNITNAME.\n*                      UNIT CHARACTERISTICS ARE NOW IN A TABLE.\n*                      DONT SHOW TOTAL MEMBERS IF THERE ARE NO ALIASES.\n*            27JAN84 - ADDED 3380 AND 2305-2 TO DEVICE LIST.    GP@SECV\n*            15MAR85 - SHOW BOTH ACCESS AND EXPIRY DATES,\n*                      AND REMOVE CORRESPONDING COMMAND OPERANDS. @SECV\n*            09DEC85 - SHOW STATUS AS MODIFIED IF DS1DSCHA BIT ON FOR\n*                      UNKEYED FILES.  SUPPORT UP TO 255 EXTENTS. @SECV\n*            05MAY86 - ADD SUPPORT FOR UCB LOOK-UP UNDER MVS/XA.  GP@P6\n*            12AUG86 - FIXED BUG IN 255 EXTENT SUPPORT - FIRST FORMAT\n*                      3 WAS OBTAINED FOR ALL FORMAT 3 DSCBS.     GP@P6\n*            18MAR87 - CHANGE IKJEHDEF TO IKJDFLT FOR F4.         GP@P6\n*            24MAR87 - SUPPORT CONCATENATED DATA SETS (NOT DIR).  GP@P6\n*            22APR87 - ADD SUPPORT FOR ALL KNOWN DISKS.           GP@P6\n*            06MAY89 - ADD SUPPORT FOR JFCBS ABOVE THE 16MB LINE. GP@P6\n*            07AUG89 - SUPPRESS ARL EXIT CALL UNLESS REQUIRED, THUS\n*                      CIRCUMVENTING AN ABEND0C4 IN SVC 64 (RDJFCB)\n*                      FOR HDP2230 AND HDP3300 (POSSIBLY FIXED BY\n*                      PUT8806).  ALSO SHOW SOME SMS DETAILS.     GP@P6\n*            04JUN90 - ADD 3390 SUPPORT.  SHOW SMS REBLOCK AND\n*                      SYSTEM-SUPPLIED-BLOCKSIZE FLAGS.           GP@P6\n*            26JUN91 - FIX SMS SECONDARY QUANTITY CODE.\n*                      ADD '-E' IN DSORG FOR PDSE.                GP@P6\n*            25SEP91 - ADD SUPPORT FOR UCB LOOK-UP UNDER MSP EXA. GP@P6\n*            18MAR92 - MAKE 'SYSALLDA' THE UNITNAME FOR 'DIR'\n*                      ALLOCATION SO THAT 'DIR' CAN FUNCTION CORRECTLY\n*                      EVEN IF DASD TYPE IS UNKNOWN AND/OR IF IBM\n*                      DEVICE NAME IS NOT A UNITNAME (WHICH IS\n*                      MOST LIKELY UNDER OSIV MSP).               GP@P6\n*            28JAN93 - HANDLE EXTENTS OVER 32767 TRACKS.          GP@FT\n*            13JUL93 - ADD SUPPORT FOR DEVICE TYPE 9345.          GP@FT\n*            23NOV95 - REMOVE LEFT-JUSTIFIED UNIT NAME FROM\n*                      DEVTABLE BECAUSE IT IS NOW NOT NEEDED (IT\n*                      WAS USED FOR ALLOCATION).  ADD TRACK SIZE\n*                      TO DEVTABLE TO ASCERTAIN UNIT DEVICE TYPE\n*                      FROM FORMAT-4 DSCB.  IF MVS/SP4 OR LATER\n*                      THEN ISSUE OBTAIN(S) EVEN IF UCB NOT FOUND\n*                      WHICH MEANS SP5 ET AL IS SUPPORTED WITHOUT\n*                      UPDATING UCB SCAN CODE.                    GP@FT\n*            08NOV00 - SHOW HFS AND PS-E FOR STRIPE IN DSORG.     GP@HC\n*            31AUG01 - DO NOT UPDATE REFERENCE DATE WITH 'DIR'.   GP@HC\n*            15JAN02 - CHANGE DATE DISPLAY TO ISO FORMAT.         GP@HC\n*            14APR06 - SHOW PS-L FOR LARGE SEQUENTIAL.            GP@P6\n*            19DEC17 - ALLOW FOR 8-CHARACTER TSO PREFIX            UID8\n*\n*            SPECIFYING SYSPARM(OS) TO THE ASSEMBLER WILL CAUSE\n*            A VERSION FOR OS/MVT TO BE ASSEMBLED INSTEAD OF MVS.\n         EJECT\n         GBLB  &MVS\n&MVS     SETB  ('&SYSPARM' NE 'OS')         1 - MVS   0 - OS/MVT\n         SPACE\nSHOWDS   START\n         USING *,R12,R11\n         B     @START-*(,15)\n         DC    AL1(22),CL6'SHOWDS'\n         DC    CL16' &SYSDATE &SYSTIME '\n         DC    CL12'ALL-SYSTEMS '\n         DC    CL25'(370/XA/ESA/390 EVEN MSP)'\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@START   STM   14,12,12(13)\n         LR    R12,15\n         LA    R11,4095\n         LA    R11,1(R11,R12)\n         LR    R2,R1\n         USING CPPL,R2\n         L     R0,@SIZE\n         GETMAIN R,LV=(0)\n         ST    13,4(,1)\n         ST    1,8(,13)\n         LR    13,1\n         USING @DATA,13\n         XC    LINKAREA(8),LINKAREA\n         XC    RC(8),RC\n         EJECT\n************************************************************\n*                                                          *\n*        SET UP IOPL FOR PUTLINE                           *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         MVC   IOPLUPT(4),CPPLUPT\n         MVC   IOPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,IOPLECB\n         XC    MYECB,MYECB\n         LA    R0,MYPTPB\n         ST    R0,IOPLIOPB\n         DROP  R15\n         SPACE\n         AIF   (NOT &MVS).SKIP1\n         L     R15,16              LOAD CVT POINTER\n         TM    444(R15),X'80'      IS PUTLINE LOADED? (MVS)\n         BNO   PUTLOAD             NO - BRANCH TO LOAD\n         L     R15,444(,R15)       YES - USE CVTPUTL\n         B     PUTLOADX            BRANCH AROUND LOAD\n.SKIP1   ANOP\nPUTLOAD  LA    R0,=CL8'IKJPUTL '\n         LOAD  EPLOC=(0)\n         LR    R15,R0              GET ENTRY ADDRESS\n         LA    R15,0(,R15)         CLEAR HI BYTE FOR DELETE ROUTINE\nPUTLOADX ST    R15,MYPUTLEP        SAVE PUTLINE ENTRY ADDRESS\n         SPACE\n************************************************************\n*                                                          *\n*        SET UP PPL FOR PARSE                              *\n*                                                          *\n************************************************************\n         SPACE 1\n         LA    R15,MYPPL\n         USING PPL,R15\n         MVC   PPLUPT(4),CPPLUPT\n         MVC   PPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,PPLECB\n         XC    MYECB,MYECB\n         L     R0,=A(SHOWDPCL)\n         ST    R0,PPLPCL\n         LA    R0,MYANS\n         ST    R0,PPLANS\n         MVC   PPLCBUF(4),CPPLCBUF\n         LA    R0,MYUWA\n         ST    R0,PPLUWA\n         DROP  R15                 PPL\n         SPACE 1\n************************************************************\n*                                                          *\n*        CALL THE PARSE SERVICE ROUTINE                    *\n*                                                          *\n************************************************************\n         SPACE 1\n         LR    R1,R15              POINT TO PPL\n         AIF   (NOT &MVS).SKIP2\n         L     R15,16              CVTPTR\n         TM    524(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   PARSELNK               THEN DO LINK, NOT CALL\n         L     R15,524(,R15)       CVTPARS\n         BALR  R14,R15             CALL IKJPARS\n         B     PARSEEXT            SKIP AROUND LINK\nPARSELNK EQU   *\n.SKIP2   ANOP\n         LINK  EP=IKJPARS,SF=(E,LINKAREA)\nPARSEEXT EQU   *\n         SPACE 1\n         LTR   R15,R15\n         BZ    PARSEOK\n         LA    R1,MSG01\n         LA    R0,L'MSG01\n         BAL   R14,PUTMSG\n         B     EXIT12\nPARSEOK  EQU   *\n         L     R3,MYANS\n         USING IKJPARMD,R3\n         LA    R9,DSN\n         B     FIRSTDSN\n         SPACE\nNEXTD12  MVI   RC+1,12             SET RC=12\nNEXTDSN  CLI   24(R9),X'FF'        END OF DSN LIST?\n         BE    EXIT                YES - BRANCH\n         L     R9,24(,R9)          POINT TO NEXT ENTRY\nFIRSTDSN TM    6(R9),X'80'         DSN OMITTED (MEMBER ONLY)?\n         BNZ   OKDSN               NO - BRANCH\n         LA    R1,MSG02\n         LA    R0,L'MSG02\n         BAL   R14,PUTMSG\n         B     NEXTD12\nOKDSN    EQU   *\n         LA    R15,DSNAME+2\n         MVI   0(R15),C' '         BLANK THE DSNAME AREA\n         MVC   1(43,R15),0(R15)\n         SLR   R1,R1\n         STH   R1,DSNAME           ZERO DSNAME LENGTH\n         TM    6(R9),X'40'         IS DSN QUOTED?\n         BO    NOPREF              YES, SKIP PREFIXING\n         CLI   FILEKW+1,1          DSN TO BE TREATED AS DDNAME?\n         BE    NOPREF              YES, SKIP PREFIXING\n         AIF   (NOT &MVS).SKIPP    PREFIX WITH PREFIX\n         L     R14,CPPLUPT         POINT TO UPT\n         USING UPT,R14\n* -- >                                                             UID8\n         CLI   16(R14),C'>'                                        UID8\n         BNE   PREF07                                              UID8\n         IC    R1,UPTPREFL+18                                      UID8\n         LTR   R1,R1                                               UID8\n         BZ    NOPREF                                              UID8\n         B     *+10                                                UID8\n         MVC   0(0,R15),UPTPREFX+17                                UID8\n         EX    R1,*-6              MOVE USERID TO DSNAME AREA      UID8\n         B     PREF08                                              UID8\nPREF07   DS    0H                                                  UID8\n* -- >                                                             UID8\n         IC    R1,UPTPREFL         GET LENGTH OF PREFIX\n         LTR   R1,R1               IS IT ZERO?\n         BZ    NOPREF              YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),UPTPREFX\n         EX    R1,*-6              MOVE USERID TO DSNAME AREA      UID8\nPREF08   DS    0H                                                  UID8\n         DROP  R14                 UPT\n.SKIPP   AIF   (&MVS).SKIPU        PREFIX WITH USERID\n         L     R14,CPPLPSCB        POINT TO PSCB\n         USING PSCB,R14\n         IC    R1,PSCBUSRL         GET LENGTH OF USERID\n         LTR   R1,R1               IS IT ZERO?\n         BZ    NOPREF              YES, SKIP PREFIXING\n         B     *+10\n         MVC   0(0,R15),PSCBUSER\n         EX    R1,*-6              MOVE USERID TO DSNAME AREA      UID8\n         DROP  R14                 PSCB\n.SKIPU   ANOP\n         LA    R15,0(R1,R15)       POINT PAST USERID\n         MVI   0(R15),C'.'         APPEND PERIOD\n         LA    R15,1(,R15)         POINT PAST PERIOD\n         LA    R1,1(,R1)           ADD 1 TO LENGTH\n         STH   R1,DSNAME           STORE LENGTH OF USERID PLUS 1\nNOPREF   EQU   *\n         LH    R1,4(,R9)           GET LENGTH\n         LR    R0,R1\n         AH    R0,DSNAME\n         STH   R0,DSNAME\n         L     R14,0(,R9)          POINT TO DSN VALUE\n         BCTR  R1,0\n         B     *+10\n         MVC   0(0,R15),0(R14)     (EXECUTED)\n         EX    R1,*-6              MOVE DSN TO DSNAME\n         SPACE\n************************************************************\n*                                                          *\n*        IF 'FILE' KEYWORD IS SPECIFIED,                   *\n*        GET DSNAME FROM JFCB USING FILE NAME.             *\n*                                                          *\n************************************************************\n         SPACE\n         XC    VOLUME(6),VOLUME\n         XC    UCBPTR,UCBPTR\n         XC    CONCTPTR,CONCTPTR\n         XC    CONCTCNT,CONCTCNT\n         XC    SDSARL(36),SDSARL   ZERO ALLOCATION RETRIEVAL LIST\n         MVI   ALLOCSW,0\n         MVI   CONCATSW,0\n         CLI   FILEKW+1,1          'FILE' SPECIFIED?\n         BNE   NOFILE              NO, BRANCH\n         CLI   DSNAME+1,8          IS LENGTH 8 OR LESS?\n         BH    FILERR1             NO, BRANCH\n         MVC   DDNAME,DSNAME+2\n         DEVTYPE DDNAME,DEVDATA    GET DEVICE TYPE\n         LTR   R15,R15             WAS FILENAME VALID?\n         BNZ   FILERR2             NO, BRANCH\n         TM    DEVDATA+2,X'20'     DIRECT ACCESS?\n         BZ    FILERR3             NO, BRANCH\n*               GET UCB ADDRESS\n         L     R1,16               CVTPTR\n         L     R1,0(,R1)           TCBS\n         L     R1,4(,R1)           CURRENT TCB\n         L     R1,12(,R1)          TIOT\n         LA    R1,24(,R1)          DDNAMES\n         SLR   R15,R15\nDDLOOP   CLI   0(R1),0             END OF TIOT?\n         BE    NEXTD12             YES, BRANCH (NEVER HAPPENS)\n         CLC   4(8,R1),DDNAME      DOES DDNAME MATCH?\n         BE    DDFOUND             YES\n         IC    R15,0(,R1)\n         LA    R1,0(R15,R1)\n         B     DDLOOP\nDDFOUND  IC    R15,0(,R1)\n         LA    R15,0(R15,R1)\n         ST    R15,CONCTPTR        POINT TO NEXT TIOT ENTRY\n         L     R15,16(,R1)         TIOEFSRT-1\n         LA    R15,0(,R15)\n         ST    R15,UCBPTR\n*\n         OC    SDSRTRVD,SDSRTRVD   PROCESSING A CONCATENATED FILE?\n         BNZ   ARLLOOP             YES, LOOP THROUGH ARL ENTRIES\n         CLI   CONCATSW,0          PROCESSING A CONCATENATED FILE?\n         BE    GETJFCB             NO\n         L     R15,12(,R1)         YES, GET JFCB ADDRESS\n         SRL   R15,8               CONVERT INTO ADDRESS FORMAT\n         MVC   JFCB(176),16(R15)   GET JFCB OF CONCATENATED FILE\n         B     GOTJFCB             CHEATED SO BYPASS RDJFCB\n*\nGETJFCB  LA    R8,DIRDCBW\n         MVC   0(DIRDCBL,R8),DIRDCB\n         MVI   SDSLEN+1,36         SUPPLY LENGTH\n         MVC   SDSIDENT,=C'AR'     SUPPLY IDENTIFIER\n         LA    R1,DIREXLST\n         LA    R0,SDSARL\n         ST    R0,0(,R1)\n         MVI   0(R1),X'13'         ALLOCATION RETRIEVAL EXIT\n         LA    R0,JFCB\n         ST    R0,4(,R1)\n         MVI   4(R1),X'87'         READ JFCB EXIT (PLUS LAST EXIT FLAG)\n         ST    R1,EXLST(,R8)           DCBEXLST\n         L     R15,CONCTPTR        POINT TO NEXT TIOT ENTRY\n         CLI   0(R15),0            END OF TIOT?\n         BE    DROPARL             YES, DON'T NEED ARL STUFF\n         CLI   4(R15),C' '         NO, CONCATENATED FILE?\n         BNE   DROPARL             NO, DON'T NEED ARL STUFF\n         TM    12(R15),X'FE'       YES, JFCB ADDRESS LESS THAN 128K?\n         BZ    ARLSETUP            YES, MUST BE SVA FOR ABOVE 16MB\nDROPARL  MVC   0(4,R1),4(R1)       ERASE X'13' EXIT FROM DCB EXIT LIST\nARLSETUP MVC   DDNAM(8,R8),DSNAME+2    DCBDDNAM\n         MVI   RDJFCB,X'80'\n         RDJFCB ((R8)),MF=(E,RDJFCB)\n*\n         CLI   SDSRCODE,0          ALLOCATION INFORMATION FETCHED?\n         BNE   GOTJFCB             NO\n         ICM   R0,15,SDSAREA       REALLY?\n         BZ    GOTJFCB             NO, EXIT X'13' NOT SUPPORTED\nARLLOOP  LA    R0,1\n         A     R0,CONCTCNT         INCREMENT CONCATENATION COUNT\n         CH    R0,SDSCONC          PAST TOTAL RETRIEVED?\n         BH    CONCATX             YES  (SHOULDN'T HAPPEN)\n         ST    R0,CONCTCNT         SAVE NEW CONCATENATION NUMBER\n         L     R1,SDSAREA          POINT TO FIRST FETCHED JFCB\nJFCBLOOP BCT   R0,NEXTJFCB         GET NEXT JFCB\n         B     GOTJFCBX            GOT THE RIGHT ONE NOW\nNEXTJFCB AH    R1,0(,R1)           POINT TO THE NEXT FETCHED JFCB\n         B     JFCBLOOP            LOOP THROUGH CONCATENATIONS\nGOTJFCBX MVC   JFCB(176),4(R1)     COPY THE JFCB\n*\nGOTJFCB  MVC   DSNAME+2(44),JFCB\n         LA    R1,DSNAME+45        LAST CHAR OF DSNAME\n         LA    R0,44               INITIAL LENGTH\nFILEA    CLI   0(R1),C' '          IS THIS LAST NONBLANK\n         BNE   FILEB               YES, BRANCH\n         BCTR  R1,0                BACK UP 1 CHARACTER\n         BCT   R0,FILEA            DECREMENT LENGTH AND BRANCH\nFILEB    STH   R0,DSNAME           STORE LENGTH OF DSNAME\n         MVC   VOLUME(6),JFCB+118  GET VOLUME FROM JFCB (BLANKS IF VIO)\n         B     NODEF\nFILERR1  LA    R0,MSG14A\n         B     FILERR\nFILERR2  LA    R0,MSG14B\n         B     FILERR\nFILERR3  LA    R0,MSG14C\nFILERR   MVC   MSGWK(L'MSG14),MSG14\n         LA    R15,MSGWK+L'MSG14\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG14(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         LR    R14,R0 POINT TO MSG14A, B, OR C\n         MVC   0(L'MSG14A,R15),0(R14)\n         LA    R0,L'MSG14+L'MSG14A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     NEXTD12\nNOFILE   EQU   *\n         TM    6(R9),X'40'         IS DSN QUOTED?\n         BO    NODEF               YES - SKIP DEFAULT SERVICE\n         CLI   VOLKW+1,0           WAS VOL SPECIFIED?\n         BNE   NODEF               YES - SKIP DEFAULT SERVICE\n         CLI   QUICKKW+1,1         WAS 'QUICKLY' SPECIFIED\n         BE    NODEF               YES, BYPASS CATALOG OVERHEAD\n         SPACE\n************************************************************\n*                                                          *\n*        CALL THE DEFAULT SERVICE ROUTINE                  *\n*        TO ADD A DESCRIPTIVE QUALIFIER IF NECESSARY       *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R15,MYIOPL\n         USING IOPL,R15\n         LA    R14,MYDFPB\n         ST    R14,IOPLIOPB\n         USING DFPB,R14\n         XC    0(20,R14),0(R14)\n         LA    R0,DSNAME\n         ST    R0,DFPBDSN\n         OI    DFPBCODE,X'04'      SEARCH CATLG AND PROMPT IF MULTI\n         MVC   DFPBPSCB,CPPLPSCB\n         DROP  R14\n         SPACE\n         LA    R1,MYIOPL\n         SPACE\n         AIF   (NOT &MVS).SKIP3\n         L     R15,16              CVTPTR\n         TM    736(R15),X'80'      IF HI ORDER BIT NOT ON\n         BNO   EHDEFLNK               THEN DO LINK, NOT CALL\n         L     R15,736(,R15)       CVTEHDEF\n         BALR  R14,R15             CALL IKJEHDEF\n         B     EHDEFEXT            SKIP AROUND LINK\nEHDEFLNK EQU   *\n.SKIP3   ANOP\n         LINK  EP=IKJDFLT,SF=(E,LINKAREA)\nEHDEFEXT EQU   *\n         SPACE 1\n         B     DEFCODE(R15)\nDEFCODE  B     DEF00               SUCCESS\n         B     NEXTD12             MSG ALREADY ISSUED\n         B     DEF08               INVALID NAME GT 44\n         B     NEXTD12             MSG ALREADY ISSUED\n         B     DEF16               NOT IN CATALOG\n         B     DEF20               NOT IN CATALOG\n         B     DEF24               IMPOSSIBLE\n         B     DEF28               COMMAND SYSTEM ERROR\n         B     DEF32               IMPOSSIBLE\n         B     DEF36               ?\nDEF08    EQU   *\nDEF16    EQU   *\n         B     DEF24\nDEF20    EQU   *\nLOCERR   EQU   *\n         MVC   MSGWK(L'MSG04),MSG04\n         LA    R15,MSGWK+L'MSG04\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG04(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG04A,R15),MSG04A\n         LA    R0,L'MSG04+L'MSG04A+1(,R1)\n         LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     NEXTD12\nDEF24    EQU   *\nDEF28    EQU   *\nDEF32    EQU   *\nDEF36    EQU   *\n         LA    R1,MSG03\n         LA    R0,L'MSG03\n         BAL   R14,PUTMSG\n         B     NEXTD12\n         SPACE\nDEF00    EQU   *\nNODEF    EQU   *\n         LA    R1,DSNAME+2\n         LH    R0,DSNAME\n         BAL   R14,PUTLINE\n         EJECT\n************************************************************\n*                                                          *\n*        GET THE VOLUME                                    *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   VOLUME,0            IS VOLUME FILLED IN FROM JFCB?\n         BNE   VOLGOT              YES, BRANCH\n         CLI   VOLKW+1,0           VOL SPECIFIED?\n         BE    LOCRTN              NO - DO LOCATE\n         TM    VOL+6,X'80'\n         BZ    LOCRTN\n         LH    R1,VOL+4            GET LENGTH\n         LTR   R1,R1               ZERO?\n         BZ    LOCRTN              YES - DO LOCATE\n         MVC   VOLUME(6),=CL8' '   PAD WITH BLANKS\n         L     R14,VOL             POINT TO VOL VALUE\n         BCTR  R1,0\n         B     *+10\n         MVC   VOLUME(0),0(R14)\n         EX    R1,*-6\nVOLGOT   XC    DSCBTTR,DSCBTTR     VOL NOT FROM CATALOG\n         B     VOLX\nLOCRTN   EQU   *\n         LA    R1,MYCAM\n         MVC   0(16,R1),LOCCAM\n         LA    R0,DSNAME+2\n         ST    R0,4(,R1)\n         LA    R0,MYLOCBUF\n         ST    R0,12(,R1)\n         LOCATE (1)\n         LTR   R15,R15\n         BNZ   LOCERR\n*                                  IF DSNAME WAS AN ALIAS\n*                                  IN A VSAM CATALOG, THEN\n*                                  LOCATE HAS REPLACED DSNAME\n*                                  WITH THE TRUE NAME, SO A\n*                                  SUBSEQUENT OBTAIN WILL WORK.\n         MVC   VOLUME,MYLOCBUF+6\n         MVC   DSCBTTR,MYLOCBUF+252\nVOLX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        GET THE DEVICE CHARACTERISTICS                    *\n*                                                          *\n************************************************************\n         SPACE\n         L     R1,UCBPTR\n         LTR   R1,R1               IS UCB ADDRESS FILLED IN?\n         BNZ   UCBFND              YES, BRANCH\n         L     R15,16              CVTPTR\n         TM    116(R15),X'80'      CHECK OS BITS FOR XA SYSTEM\n         BZ    MVS370              NOT XA SO DO OS/370 UCB LOOK UP\n         TM    116(R15),X'93'      CHECK OS BITS FOR MVS/XA SYSTEM\n         BNO   MSPEXA              NOT XA SO DO MSP/EXA UCB LOOK UP\n         L     R1,1252(,R15)       POINT TO FIRST UCB IN UCB CHAIN\n         B     *+8                 BYPASS CHAIN JUMP\nUCBLOOPX ICM   R1,15,8(R1)         POINT TO NEXT UCB\n         BZ    NOXAUCB             END OF CHAIN REACHED\n         CLI   18(R1),X'20'        DASD\n         BNE   UCBLOOPX            NO - BRANCH\n         TM    3(R1),X'80'         ONLINE\n         BZ    UCBLOOPX            NO - BRANCH\n         CLC   28(6,R1),VOLUME     DOES VOLUME MATCH?\n         BNE   UCBLOOPX            NO - BRANCH\n         B     UCBFNDX             YES\nNOXAUCB  L     R15,16              CVTPTR\n         TM    116(R15),X'9B'      MVS/ESA?\n         BNO   NOTMOUNT            NO, VOLUME NOT ON MVS/SP2 SYSTEM\n         TM    1264(R15),X'08'     TEST CVTOSLVL - IS IT SP4 OR MORE?\n         BNO   NOTMOUNT            NO, VOLUME NOT ON MVS/SP3 SYSTEM\n         B     UCBSLOW             YES, SEE IF OBTAIN CAN FIND VOLUME\nMSPEXA   LA    R0,1\n         SLL   R0,31\n         LA    R1,MSPIOCOM\n         OR    R1,R0\n         BSM   0,R1                HANDLE 31-BIT ADDRESSES\nMSPIOCOM L     R15,X'7C'(,R15)     IOS COUMMICATION AREA\n         L     R15,X'184'(,R15)    UCB LOOK-UP TABLE\n         B     *+8                 BYPASS INCREMENT\nUCBLOOPE LA    R15,4(,R15)         POINT TO NEXT UCB POINTER\n         ICM   R1,15,0(R15)        POINT TO UCB\n         BZ    UCBLOOPE            NULL, IGNORE IT\n         BM    NOTMOUNT            END OF POINTER LIST\n         CLI   18(R1),X'20'        DASD\n         BNE   UCBLOOPE            NO - BRANCH\n         TM    3(R1),X'80'         ONLINE\n         BZ    UCBLOOPE            NO - BRANCH\n         CLC   28(6,R1),VOLUME     DOES VOLUME MATCH?\n         BNE   UCBLOOPE            NO - BRANCH\n         LA    R15,UCBFNDX         YES\n         BSM   0,R15               REVERT TO 24-BIT ADDRESSING\nMVS370   L     R15,X'28'(,R15)     CVTILK2\n         B     *+8                 BYPASS INCREMENT\nUCBLOOP  LA    R15,2(,R15)         POINT TO NEXT UCB POINTER\n         LH    R1,0(,R15)          POINT TO UCB\n         LTR   R1,R1               TEST POINTER\n         BZ    UCBLOOP             NULL, IGNORE IT\n         N     R1,=A(X'0000FFFF')  16 BIT ADDRESS\n         C     R1,=A(X'0000FFFF')\n         BE    NOTMOUNT            END OF POINTER LIST\n         CLI   18(R1),X'20'        DASD\n         BNE   UCBLOOP             NO - BRANCH\n         TM    3(R1),X'80'         ONLINE\n         BZ    UCBLOOP             NO - BRANCH\n         CLC   28(6,R1),VOLUME     DOES VOLUME MATCH?\n         BNE   UCBLOOP             NO - BRANCH\nUCBFNDX  ST    R1,UCBPTR           SAVE FOR DEBUG\nUCBFND   EQU   *\n         SLR   R15,R15             CLEAR INDEX REGISTER\n*        TM    0(R1),X'80'         VIO?\n         CLI   19(R1),X'09'        3330?\n         BNE   NOT3330V            NO\n         TM    17(R1),X'08'        VIRTUAL 3330?\n         BO    UCBFAST             YES, USE ZERO AS INDEX\nNOT3330V CLI   19(R1),X'85'        F6421?\n         BNE   NOTF6421            NO\n         LA    R15,16              YES, GET INDEX\n         B     UCBFAST\nNOTF6421 CLI   19(R1),X'0F'        KNOWN DEVICE TYPE?\n         BH    UCBSLOW             NO\n         ICM   R15,1,19(R1)        USE DEVICE TYPE AS INDEX\n         BZ    UCBSLOW\nUCBFAST  EQU   *\n         MH    R15,DEVTBLSZ        SCALE UP INDEX\n         LA    R15,DEVTABLE(R15)   POINT TO DEVICE ENTRY\n         LH    R14,0(,R15)         DSCBS PER TRACK\n         STH   R14,DSCBTRK\n         LH    R14,2(,R15)         TRACKS PER CYL\n         STH   R14,TRKCYL\n         MVC   UNIT,4(R15)         FOR DISPLAY\n         B     UCBEXIT\n*\n*                     OBTAIN FORMAT 4 FOR OTHER DEVICES\n*\n*                     NOTE. UNDER OS/MVT THIS MUST BE DONE VIA\n*                     A SEEK CAMLST INSTEAD OF A SEARCH CAMLST.\n*\nUCBSLOW  LA    R1,MYCAM\n         MVC   0(16,R1),OBTCAM\n         LA    R15,FORMAT4\n         MVI   0(R15),X'04'\n         MVC   1(43,R15),0(R15)\n         ST    R15,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         LA    R0,MYF1DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 4 READ OK?\n         BNZ   NOTMOUNT            NO, (MUST BE MVT OR SP4 OR MORE)\n         LA    R8,MYF1DSCB\n         USING DSCB,R8\n         SLR   R14,R14\n         IC    R14,DS4DEVDT        DSCBS PER TRACK\n         STH   R14,DSCBTRK\n         LH    R14,DS4DEVSZ+2      TRACKS PER CYL\n         STH   R14,TRKCYL\n         MVC   UNIT,=C'        '\n         LA    R15,DEVTABLE        POINT TO DEVICE TABLE         GP@FT*\n         LA    R1,DEVTBLSZ         POINT PAST DEVICE TABLE            *\nOB4DEVLP CLC   DS4DEVTK,10(R15)    FOUND A TRACK LENGTH MATCH?        *\n         BE    OB4UNIT             YES                                *\n         AH    R15,0(,R1)          NO, POINT TO NEXT DEVICE ENTRY     *\n         CR    R15,R1              PAST END OF TABLE?                 *\n         BL    OB4DEVLP            NO, CONTINUE SCAN                  *\n         B     UCBEXIT             YES, LEAVE UNIT AS BLANK           *\nOB4UNIT  MVC   UNIT,4(R15)         SHOW UNIT DEVICE TYPE         GP@FT*\n         DROP  R8\nUCBEXIT  EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*        OBTAIN THE DSCB FROM THE VTOC                     *\n*                                                          *\n************************************************************\n         SPACE\n         CLC   DSCBTTR,=XL3'00'\n         BE    OBSEARCH\nOBSEEK   SLR   R14,R14\n         SLR   R15,R15\n         SLR   R1,R1\n         IC    R1,DSCBTTR+2        GET R FROM TTR\n         CH    R1,DSCBTRK          TOO HIGH FOR DEVICE?\n         BNH   OBSEEK0             NO, BRANCH (ALWAYS)\n         SH    R1,DSCBTRK          YES, REDUCE R\n         LA    R14,1(,R14)         ADD 1 TO HH\nOBSEEK0  AH    R14,DSCBTTR         GET TT FROM TTR\nOBSEEK1  CH    R14,TRKCYL          MORE THAN A CYLINDER?\n         BL    OBSEEK2             NO, BRANCH\n         SH    R14,TRKCYL          YES, REDUCE HH\n         LA    R15,1(,R15)         ADD 1 TO CC\n         B     OBSEEK1             GO CHECK NEW HH\nOBSEEK2  STH   R15,VTOCCHHR        STORE CC\n         STH   R14,VTOCCHHR+2      STORE HH\n         STC   R1,VTOCCHHR+4       STORE R\n         SPACE 1\n         LA    R1,MYCAM\n         MVC   0(16,R1),OBTSEEK\n         LA    R0,VTOCCHHR\n         ST    R0,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         LA    R0,MYF1KEY\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15\n         BNZ   OBSEEKER\n         CLC   MYF1KEY,DSNAME+2    WAS CATALOG TTR CORRECT?\n         BE    OBTOK               YES, BRANCH\nOBSEEKRE EQU   *\n*                                  BUM STEER FROM CATALOG\nOBSEARCH LA    R1,MYCAM\n         MVC   0(16,R1),OBTCAM\n         LA    R0,DSNAME+2\n         ST    R0,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         LA    R0,MYF1DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15\n         BZ    OBTOK\n         CH    R15,=H'4'\n         BNE   OBTERR08\nNOTMOUNT MVC   MSGWK(L'MSG06),MSG06\n         LA    R15,MSGWK+L'MSG06\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG06(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG06A,R15),MSG06A\n         MVC   L'MSG06A(6,R15),VOLUME\n         LA    R0,L'MSG06+L'MSG06A+1+6(,R1)\n         B     OBTERRMS\nOBTERR08 MVC   MSGWK(L'MSG05),MSG05\n         LA    R15,MSGWK+L'MSG05\n         LA    R14,DSNAME\n         LH    R1,0(,R14)\n         BCTR  R1,0\n         B     *+10\n         MVC   MSGWK+L'MSG05(0),2(R14)\n         EX    R1,*-6\n         LA    R15,1(R1,R15)\n         MVC   0(L'MSG05A,R15),MSG05A\n         MVC   L'MSG05A(6,R15),VOLUME\n         LA    R0,L'MSG05+L'MSG05A+1+6(,R1)\nOBTERRMS LA    R1,MSGWK\n         BAL   R14,PUTMSG\n         B     NEXTD12\n         SPACE\nOBSEEKER CH    R15,=H'4'\n         BE    NOTMOUNT\n         B     OBSEEKRE\n         SPACE\nOBTOK    EQU   *\n         MVI   DSORGSW,0\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   DESCRIP(L'MSG07),MSG07\n         MVC   DESCRIP+L'MSG07(L'MSG07A),BLANKS\n         EJECT\n         LA    R8,MYF1DSCB-44\n         USING DSCB,R8\n         SPACE\n************************************************************\n*                                                          *\n*        CHECK FOR FAKE DSCB BUILT FOR VSAM BY OBTAIN      *\n*                                                          *\n************************************************************\n         SPACE\n         MVI   VSAMSW,C' '\n         CLC   DS1END(5),=XL5'0000000000'\n         BNE   VSAMNF         NOT FAKE - BRANCH\n         CLC   DS1DSORG,=X'0008'\n         BNE   VSAMNF         NOT FAKE - BRANCH\n         CLI   DS1DSIND,X'30'\n         BNE   VSAMNF         NOT FAKE - BRANCH\n         MVI   VSAMSW,C'V'\n*              DATE IS DECIMAL - MAKE IT BINARY\n*              THE DECIMAL DATE WILL BE CHANGED BY IBM IN THE\n*              FUTURE IN RESPONSE TO APAR# OZ36717.\n*              REMOVED SUPPORT FOR DECIMAL DATE FORMAT.           GP@P6\n*              (ASIDE: THE BINARY FORMAT IS GOOD TILL 2155.)      GP@P6\n*        TM    DS1CREDT+2,X'0F'    IS DATE DECIMAL? LAST 4 BITS ON?\n*        BNO   VSAMD2              NO - LEAVE IT AS IS\n*        SLR   R1,R1\n*        ST    R1,DOUBLE\n*        IC    R1,DS1CREDT         GET YY FROM YYDDDF\n*        SLL   R1,4                GET 00000YY0\n*        ST    R1,DOUBLE+4         STORE IT\n*        OI    DOUBLE+7,X'0F'      SET TO 00000YYF\n*        CVB   R1,DOUBLE           CONVERY YY TO BINARY\n*        STC   R1,DS1CREDT         REPLACE DECIMAL WITH BINARY\n*        MVC   DOUBLE+6(2),DS1CREDT+1\n*        CVB   R1,DOUBLE           CONVERT DDDF TO BINARY\n*        STH   R1,DOUBLE\n*        MVC   DS1CREDT+1(2),DOUBLE\n*SAMD2   TM    DS1EXPDT+2,X'0F'    IS DATE DECIMAL? LAST 4 BITS ON?\n*        BNO   VSAMDX              NO - LEAVE IT AS IS\n*        CLC   DS1EXPDT(3),=X'00000F' EXPIRATION DATE ZERO?\n*        BNE   VSAMDE              NO - BRANCH\n*        NI    DS1EXPDT+2,X'F0'    YES - SET TO BINARY ZEROS\n*        B     VSAMDX\n*SAMDE   SLR   R1,R1\n*        ST    R1,DOUBLE\n*        IC    R1,DS1EXPDT         GET YY FROM YYDDDF\n*        SLL   R1,4                GET 00000YY0\n*        ST    R1,DOUBLE+4         STORE IT\n*        OI    DOUBLE+7,X'0F'      SET TO 00000YYF\n*        CVB   R1,DOUBLE           CONVERY YY TO BINARY\n*        STC   R1,DS1EXPDT         REPLACE DECIMAL WITH BINARY\n*        MVC   DOUBLE+6(2),DS1EXPDT+1\n*        CVB   R1,DOUBLE           CONVERT DDDF TO BINARY\n*        STH   R1,DOUBLE\n*        MVC   DS1EXPDT+1(2),DOUBLE\n*SAMDX   EQU   *\nVSAMNF   EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        RECFM                                             *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,RECFMWA\n         MVC   0(6,R1),=CL6' '\n         LR    R15,R1\n         TM    DS1RECFM,X'C0'      U?\n         BO    RECFMU              YES - BRANCH\n         BZ    TTEST1              NOT U, F, OR V\n         TM    DS1RECFM,X'80'      F?\n         BO    RECFMF              YES - BRANCH\n         MVI   0(R1),C'V'          MUST BE V\n         B     TTEST\nRECFMU   MVI   0(R1),C'U'\n         B     TTEST\nRECFMF   MVI   0(R1),C'F'\nTTEST    LA    R1,1(,R1)           INCREMENT PTR\nTTEST1   TM    DS1RECFM,X'20'      TRACK OVERFLOW\n         BNO   RECFB\n         MVI   0(R1),C'T'\n         LA    R1,1(,R1)\nRECFB    TM    DS1RECFM,X'10'      BLOCKED\n         BNO   RECFS\n         MVI   0(R1),C'B'\n         LA    R1,1(,R1)\nRECFS    TM    DS1RECFM,X'08'      STANDARD OR SPANNED\n         BNO   RECFA\n         MVI   0(R1),C'S'\n         LA    R1,1(,R1)\nRECFA    TM    DS1RECFM,X'04'      ASA\n         BNO   RECFMM\n         MVI   0(R1),C'A'\n         LA    R1,1(,R1)\nRECFMM   TM    DS1RECFM,X'02'      MACHINE\n         BNO   RECFX\n         MVI   0(R1),C'M'\n         LA    R1,1(,R1)\nRECFX    CR    R1,R15              IS R1 UNCHANGED?\n         BNE   RECFMXIT            NO - BRANCH\n         MVI   0(R1),C'*'          YES - USE '*'\n         MVI   1(R1),C'*'\nRECFMXIT MVC   MSGWK+2(6),RECFMWA\n         EJECT\n************************************************************\n*                                                          *\n*        LRECL                                             *\n*                                                          *\n************************************************************\n         SPACE\nLRECLTST MVC   MYWK5(6),=CL6' '\n         SLR   R1,R1\n         ICM   R1,3,DS1LRECL\n         BZ    LRECNO\n         CVD   R1,DOUBLE\n         UNPK  MYWK5,DOUBLE\n         OI    MYWK5+4,X'F0'\nLRECLOOP CLI   MYWK5,C'0'\n         BNE   LRECXIT\n         MVC   MYWK5,MYWK5+1\n         B     LRECLOOP\nLRECNO   MVC   MYWK5(2),=C'**'\nLRECXIT  MVC   MSGWK+8(5),MYWK5\n         SPACE\n************************************************************\n*                                                          *\n*        BLKSIZE                                           *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   MYWK5(6),=CL6' '\n         SLR   R1,R1\n         ICM   R1,3,DS1BLKL\n         BZ    BLKSNO\n         CVD   R1,DOUBLE\n         UNPK  MYWK5,DOUBLE\n         OI    MYWK5+4,X'F0'\nBLKSLOOP CLI   MYWK5,C'0'\n         BNE   BLKSXIT\n         MVC   MYWK5,MYWK5+1\n         B     BLKSLOOP\nBLKSNO   MVC   MYWK5(2),=C'**'\nBLKSXIT  MVC   MSGWK+14(5),MYWK5\n         EJECT\n************************************************************\n*                                                          *\n*        DSORG                                             *\n*                                                          *\n************************************************************\n         SPACE\nDSORGTST EQU   *\n         MVC   DSORGWA,=CL5'PS   '\n         LA    R1,DSORGWA\n         TM    DS1DSORG,X'40'      PS\n         BO    DSORGU\n         MVC   0(2,R1),=C'PO'\n         TM    DS1DSORG,X'02'      PO\n         BO    DSORGUP\n         MVC   0(2,R1),=C'IS'\n         TM    DS1DSORG,X'80'      IS\n         BO    DSORGUI\n         MVC   0(2,R1),=C'DA'\n         TM    DS1DSORG,X'20'      DA\n         BO    DSORGU\n         MVC   0(2,R1),=C'**'\n         TM    DS1DSORG,X'1C'      **\n         BZ    DSORGV\n         MVC   0(2,R1),=C'??'\n         B     DSORGU\nDSORGUP  MVI   DSORGSW,C'P'        SET PDS SWITCH ON\n         B     DSORGU\nDSORGUI  MVI   DSORGSW,C'1'        SET ISAM SWITCH ON\n         B     DSORGU\nDSORGV   TM    DS1DSORG+1,X'08'\n         BZ    DSORGU\n         MVC   0(2,R1),=C'VS'\nDSORGU   TM    DS1DSORG,X'01'      UNMOVEABLE?\n         BZ    DSORGUOK            NO - BRANCH\n         MVI   2(R1),C'U'          YES - APPEND U\n         LA    R1,1(,R1)           ADVANCE BUFFER POINTER\nDSORGUOK TM    DS1FLAG1,X'08'      LARGE DATA SET?\n         BZ    LARGEOK             NO - BRANCH\n         MVC   2(2,R1),=C'-L'      DENOTE LARGE SEQUENTIAL\nLARGEOK  TM    DS1SMSFG,X'0C'      PDSE OR STRIPED SEQUENTIAL?\n         BZ    DSORGCPY            NO - BRANCH\n         MVC   2(2,R1),=C'-E'      DENOTE PDSE OR EXTENDED FORMAT\n         TM    DS1SMSFG,X'02'      HFS?\n         BZ    DSORGCPY            NO - BRANCH\n         MVC   DSORGWA,=CL5'HFS  ' YES\nDSORGCPY EQU   *\n         MVC   MSGWK+22(5),DSORGWA\n         SPACE\n************************************************************\n*                                                          *\n*        PROTECTION                                        *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   MSGWK+58(5),=C'WRITE'\n         TM    DS1DSIND,X'14'\n         BO    PROTX\n         MVC   MSGWK+58(5),=C'NONE '\n         TM    DS1DSIND,X'10'\n         BNO   PROTX\n         MVC   MSGWK+58(5),=C'READ '\nPROTX    EQU   *\n         TM    DS1DSIND,X'40'\n         BZ    *+10\n         MVC   MSGWK+58(5),=C'RACF '\n         SPACE\n************************************************************\n*                                                          *\n*        CREATED / LAST REFERENCE / EXPIRATION DATES       *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,DS1CREDT\n         BAL   R14,YMD\n         MVC   MSGWK+28(8),YMDOUT\n         LA    R1,DS1REFD          POINT TO ACCESS DATE (SU 60)\n         BAL   R14,YMD\n         MVC   MSGWK+38(8),YMDOUT\n         LA    R1,DS1EXPDT\n         BAL   R14,YMD\n         MVC   MSGWK+48(8),YMDOUT\n         B     DATEX\n         SPACE\nYMD      MVC   YMDOUT,=C'00-00-00' SET OUTPUT AREA\n         OC    0(3,R1),0(R1)       ZERO DATE?\n         BZR   R14            YES - USE 00-00-00\n         ST    R14,YMDREGS\n         SLR   R14,R14\n         IC    R14,0(,R1)          GET YEAR\n         LA    R15,B'00000011'\n         NR    R14,R15\n         LA    R14,YMDNY\n         BNZ   *+8\n         LA    R14,YMDLY\n         MVC   DOUBLE(2),1(R1)\n         LH    R15,DOUBLE          GET JULIAN DDD\n         LA    R0,12\nYMD08    CH    R15,0(,R14)\n         BH    YMD10\n         LA    R14,2(,R14)\n         BCT   R0,YMD08\n         B     YMDX                USE 00/00/00 IF NEG\nYMD10    SH    R15,0(,R14)\n         CH    R15,=H'31'          LESS THAN 31?\n         BNH   *+8                 YES - OK\n         LA    R15,31              NO - SET TO 31\n         CVD   R0,DOUBLE\n         UNPK  YMDOUT+3(2),DOUBLE+6(2)\n         OI    YMDOUT+4,X'F0'      * CHANGED TO DD/MM/YY FORMAT GP@SECV\n         CVD   R15,DOUBLE\n         UNPK  YMDOUT+6(2),DOUBLE+6(2)\n         OI    YMDOUT+7,X'F0'      * CHANGED TO YY-MM-DD FORMAT   GP@HC\n         IC    R0,0(,R1)           GET YEAR\n         CVD   R0,DOUBLE\n         UNPK  YMDOUT(2),DOUBLE+6(2)\n         OI    YMDOUT+1,X'F0'      * CHANGED TO YY-MM-DD FORMAT   GP@HC\nYMDX     L     R14,YMDREGS\n         BR    R14\nDATEX    EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*        KEYLEN                                            *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   DS1KEYL,0           KEYLEN ZERO?\n         BNE   KEYYES              NO - BRANCH\n         MVC   DOUBLE(2),DS1RKP\n         LH    R1,DOUBLE           GET RKP\n         LTR   R1,R1               RKP ZERO?\n         BNZ   KEYYES              NO - BRANCH\n         TM    DS1DSORG,X'80'      ISAM?\n         BO    KEYYES\n         MVC   DESCRIP+L'MSG07(L'MSG07B),MSG07B\n         MVC   MSGWK+68(2),=C'NO'\n         TM    DS1DSIND,X'02'      MODIFIED SINCE BACKUP?\n         BZ    KEYNO               NO - BRANCH\n         MVC   MSGWK+68(3),=C'YES'\n         B     KEYNO\nKEYYES   EQU   *\n         SLR   R1,R1\n         IC    R1,DS1KEYL\n         CVD   R1,DOUBLE\n         MVC   MSGWK+67(6),=X'402020202120'\n         ED    MSGWK+67(6),DOUBLE+5\n         MVC   DOUBLE(2),DS1RKP\n         LH    R1,DOUBLE\n         CVD   R1,DOUBLE\n         MVC   MSGWK+73(4),=X'40202120'\n         ED    MSGWK+73(4),DOUBLE+6\n         MVC   DESCRIP+L'MSG07(L'MSG07A),MSG07A\n         SPACE\nKEYNO    LA    R0,L'MSG07+L'MSG07A\n         LA    R1,DESCRIP\n         BAL   R14,PUTLINE\n         LA    R1,MSGWK\n         LA    R0,79\n         BAL   R14,PUTLINE\n         SPACE\n************************************************************\n*                                                          *\n*        SECONDARY SPACE                                   *\n*                                                          *\n************************************************************\n         SPACE\n         LA    R1,MSG08\n         LA    R0,L'MSG08\n         BAL   R14,PUTLINE\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   SSPWA(L'SSPWA),MSGWK\n         MVC   SSPWA2(L'SSPWA2),MSGWK\n         MVC   MSGWK+2(6),VOLUME\n         CLI   VOLUME,C' '\n         BNE   *+10\n         MVC   MSGWK+2(6),=C'(VIO) '\n         MVC   MSGWK+10(6),UNIT\n         TM    DS1SCALO,X'C0'\n         BNZ   SSP1\n         MVC   SSPWA(3),=C'ABS'\n         B     SSP4\nSSP1     BNO   SSP2\n         MVC   SSPWA(3),=C'CYL'\n         B     SSP4\nSSP2     TM    DS1SCALO,X'80'\n         BNO   SSP3\n         MVC   SSPWA(3),=C'TRK'\n         B     SSP4\nSSP3     EQU   *\n         MVC   SSPWA(3),=C'BLK'\nSSP4     EQU   *\n         MVC   DOUBLE+1(3),DS1SCALO+1\n         MVI   DOUBLE,0\n         L     R1,DOUBLE\n         LTR   R1,R1\n         BZ    SSP5\n         CVD   R1,DOUBLE\n         UNPK  SSPWA+7(7),DOUBLE+4(4)\n         OI    SSPWA+7+6,X'F0'\nSSPLOOP  CLI   SSPWA+7,C'0'\n         BNE   SSP6\n         MVC   SSPWA+7(7),SSPWA+8\n         B     SSPLOOP\nSSP5     MVC   SSPWA+7(2),=C'**'\nSSP6     EQU   *\n         LA    R15,SSPWA2\n         TM    DS1SCALO,X'08'\n         BZ    SSP7\n         MVC   0(6,R15),=C'CONTIG'\n         LA    R15,7(,R15)\nSSP7     TM    DS1SCALO,X'04'\n         BZ    SSP8\n         MVC   0(4,R15),=C'MXIG'\n         LA    R15,5(,R15)\nSSP8     TM    DS1SCALO,X'02'\n         BZ    SSP9\n         MVC   0(3,R15),=C'ALX'\n         LA    R15,4(,R15)\nSSP9     TM    DS1SCALO,X'01'\n         BZ    SSP91\n         MVC   0(5,R15),=C'ROUND'\n         LA    R15,6(,R15)\nSSP91    EQU   *\n         MVC   MSGWK+18(L'SSPWA),SSPWA\n         SPACE\n************************************************************\n*                                                          *\n*        TRACKS ALLOCATED                                  *\n*                                                          *\n************************************************************\n         SPACE\n         MVC   LASTTRK+2(2),DS1LSTAR\n         XC    LASTTRK(2),LASTTRK\n         L     R1,LASTTRK\n         CLI   DS1LSTAR+2,0\n         BE    *+8\n         LA    R1,1(,R1)\n         ST    R1,LASTTRK\n         SPACE\n         LA    R1,EXTTABLE\n         ST    R1,EXTPTR\n         SLR   R1,R1\n         IC    R1,DS1NOEPV         GET NO. OF EXTENTS\n         STH   R1,EXTENTS\n         LA    R6,1                SET EXTENT COUNTER\n         SLR   R4,R4               CLEAR TRACK COUNTER\n         LTR   R1,R1               ANY EXTENTS?\n         BZ    TRKX                NO - BRANCH\n         CLI   VSAMSW,C'V'         IS IT A FAKE DSCB?\n         BE    TRKX                YES - EXTENTS ARE STRANGE\n         LA    R1,DS1EXT1          POINT TO FIRST EXTENT\n         MVI   NEWDSCB#+1,4        EXTENT NUMBER FOR NEW FORMAT 3 DSCB\n         MVI   JMPLBL3#+1,8        EXTENT NUMBER TO SKIP F3 ID\nTRKLOOP  MVC   HALF(2),6(R1)       MOVE HIGH CC\n         LH    R14,HALF\n         MVC   HALF(2),8(R1)       MOVE HIGH HH\n         LH    R15,HALF\n         MVC   HALF(2),2(R1)       MOVE LOW CC\n         SH    R14,HALF            GET NO. OF CYLS\n         MVC   HALF(2),4(R1)       MOVE LOW HH\n         SH    R15,HALF            GET DIFF. OF TRACKS\n         MH    R14,TRKCYL          CONVERT CYL TO TRK\n         AR    R14,R15             GET TOTAL (LESS 1)\n         AH    R14,=H'1'           GET TOTAL\n         L     R15,EXTPTR\n         MVC   0(10,R15),0(R1)     SAVE EXTENT IN TABLE\n         STH   R14,10(,R15)\n         LA    R15,12(,R15)        INCREMENT POINTER\n         ST    R15,EXTPTR\n         AR    R4,R14              ADD TO COUNTER\n         CH    R6,EXTENTS          LAST EXTENT?\n         BE    TRKX                YES - BRANCH\n         LA    R6,1(,R6)           INCREMENT EXTENT COUNTER\n         CH    R6,NEWDSCB#         END OF EXTENTS FOR THIS DSCB?\n         BE    TRKF3               YES - READ FMT 3\n         CH    R6,JMPLBL3#         UP TO THE F3 ID?\n         BE    TRKE8               YES - POINT PAST F3 ID\n         LA    R1,10(,R1)          POINT TO NEXT EXTENT\n         B     TRKLOOP             CONTINUE WITH NEXT EXTENT\n         SPACE\nTRKF3    MVC   VTOCCHHR(5),DS1PTRDS\n         LA    R1,13(,R6)          GET EXTENT NUMBER FOR NEXT F3 DSCB\n         STH   R1,NEWDSCB#         SAVE IT FOR LATER (ICF)        GP@P6\n         CLI   NEWDSCB#+1,17       GETTING FIRST DSCB AFTER FORMAT 1?\n         BE    GOTF3ADR            YES, HAVE CORRECT FORMAT 3 TTR\nTRKOBT3  MVC   VTOCCHHR(5),MYEXDSCB+135 DS2PTRDS OR DS3PTRDS      GP@P6\nGOTF3ADR LA    R1,MYCAM\n         MVC   0(16,R1),OBTSEEK\n         LA    R0,VTOCCHHR\n         ST    R0,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         LA    R0,MYEXDSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15\n         BZ    OBT3OK\n         LA    R0,L'MSG09\n         LA    R1,MSG09\n         BAL   R14,PUTMSG\n         B     NEXTD12\nOBT3OK   EQU   *\n         CLI   MYEXDSCB+44,C'3'    IS IT A FMT 3?\n         BNE   TRKF2               NO - ISAM F2\n         LA    R1,MYEXDSCB+4       POINT TO 1ST EXT IN F3\n         B     TRKLOOP\nTRKF2    MVI   DSORGSW,C'2'        SHOW F2 IS IN\n         MVC   MYF2DSCB(DS2END-IECSDSL2),IECSDSL2\n         B     TRKOBT3\nTRKE8    LA    R1,13(,R6)          GET EXTENT NUMBER FOR NEXT F3 ID\n         STH   R1,JMPLBL3#         SAVE IT FOR LATER (ICF)        GP@P6\n         LA    R1,MYEXDSCB+45\n         B     TRKLOOP\nTRKX     EQU   *\n         CVD   R4,DOUBLE\n         MVC   TRKWA(6),=X'402020202120'\n         ED    TRKWA(6),DOUBLE+5\n         MVC   MSGWK+35(6),TRKWA\n         TM    DS1DSORG,X'42'      PO OR PS?\n         BNZ   TRKU                YES - BRANCH\n         MVI   MSGWK+43+5,C'*'     NO - UNUSED IS MEANINGLESS\n         B     TRKUX\nTRKAM    MVC   TRKWA(6),=C'    -'\n         B     TRKUX\nTRKU     L     R1,LASTTRK\n         LR    R15,R4\n         SR    R15,R1\n         BM    TRKAM               NEGATIVE, DS1LSTAR IS BAD\n         CVD   R15,DOUBLE\n         MVC   TRKWA(6),=X'402020202120'\n         ED    TRKWA(6),DOUBLE+5\n         MVC   MSGWK+43(6),TRKWA\nTRKUX    EQU   *\n         LH    R1,EXTENTS\n         CVD   R1,DOUBLE\n         MVC   TRKWA(6),=X'402020202120'\n         ED    TRKWA(6),DOUBLE+5\n         MVC   MSGWK+51(6),TRKWA\n         MVC   MSGWK+59(21),SSPWA2\n         LA    R1,MSGWK\n         LA    R0,78\n         BAL   R14,PUTLINE\n         SPACE\n************************************************************\n*                                                          *\n*         SYSTEM MANAGED STORAGE DETAILS                   *\n*                                                          *\n************************************************************\n         SPACE\n         TM    DS1SMSFG,X'80'      SYSTEM MANAGED DATA SET?\n         BZ    SMSX                NO, BRANCH\n         LA    R1,MSG18\n         LA    R0,L'MSG18\n         BAL   R14,PUTLINE\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         MVC   MSGWK+2(2),=C'NO'   CATALOGUED\n         MVC   MSGWK+21(2),=C'**'  SECONDARY QUANTITY\n         MVC   MSGWK+35(2),=C'NO'  REBLOCKABLE\n         MVC   MSGWK+48(2),=C'NO'  SYSTEM BLOCKED\n         TM    DS1SMSFG,X'40'      DOES BCS ENTRY EXIST?\n         BO    SMSBCSOK            NO, PRIMED VALUE IS CORRECT\n         MVC   MSGWK+2(3),=C'YES'  YES, SUPPLY CORRECT VALUE\nSMSBCSOK TM    DS1SMSFG,X'20'      MAY THE DATA SET BE REBLOCKED?\n         BZ    SMSREBOK            NO, PRIMED VALUE IS CORRECT\n         MVC   MSGWK+35(3),=C'YES' YES, SUPPLY CORRECT VALUE\nSMSREBOK TM    DS1SMSFG,X'10'      DID THE DADSM SUPPLY BLKSIZE?\n         BZ    SMSBLKOK            NO, PRIMED VALUE IS CORRECT\n         MVC   MSGWK+48(3),=C'YES' YES, SUPPLY CORRECT VALUE\nSMSBLKOK SLR   R1,R1\n         ICM   R1,3,DS1SCXTV       LOAD SMS SECONDARY SPACE EXTN. VALUE\n         BZ    SMSDTL              VALUE IS ZERO\n         TM    DS1SCXTF,X'0C'      HAS VALUE BEEN COMPACTED?\n         BZ    SCXTVOK             NO\n         SLL   R1,8                YES, MULTIPLY BY 256\n         TM    DS1SCXTF,X'04'      WAS THE COMPACTION VALUE 256?\n         BZ    SCXTVOK             YES\n         SLL   R1,8                NO, IT WAS 65536\nSCXTVOK  CVD   R1,DOUBLE\n         MVC   MSGWK+17(6),=X'402020202120'\n         ED    MSGWK+17(6),DOUBLE+5\n         ICM   R15,8,DS1SCXTF      LOAD SMS SECONDARY SPACE EXTN. FLAGS\n         SLR   R1,R1               ZERO TABLE INDEX\n         LA    R0,4                FOUR BITS TO TEST IN FLAG BYTE\nSMSTYPLP LTR   R15,R15             TOP (SIGN) BIT ON?\n         BM    SMSTYPOK            YES, GOT SECONDARY SPACE TYPE\n         SLL   R15,1               NO, TRY NEXT BIT\n         LA    R1,9(,R1)           POINT TO NEXT DESCRIPTOR\n         BCT   R0,SMSTYPLP         TEST NEXT BIT\nSMSTYPOK LA    R1,SMSPCTYP(R1)     POINT TO DESCRIPTOR\n         MVC   MSGWK+24(9),0(R1)   LOAD IT INTO DISPLAY LINE\nSMSDTL   LA    R1,MSGWK\n         LA    R0,51\n         BAL   R14,PUTLINE\nSMSX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         EXTENTS                                          *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   EXTKW+1,1           EXTENTS REQUESTED\n         BNE   EXTX                NO, BRANCH\n         LH    R15,EXTENTS         GET NUMBER OF EXTENTS\n         LTR   R15,R15             ARE THERE ANY\n         BZ    EXTX                NO, BRANCH\n         LA    R1,MSG08+L'MSG08-11\n         LA    R0,11\n         BAL   R14,PUTLINE\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(35),MSGWK\n         ST    R2,CPPLPTR\n         LA    R2,EXTTABLE\nEXTLOOP  UNPK  MSGWK+03(9),2(5,R2) UNPACK CCHH\n         TR    MSGWK+03(9),HEXTAB-240\n         MVC   MSGWK+02(4),MSGWK+03\n         MVI   MSGWK+06,C'.'\n         MVI   MSGWK+11,C' '\n         UNPK  MSGWK+14(9),6(5,R2) UNPACK CCHH\n         TR    MSGWK+14(9),HEXTAB-240\n         MVC   MSGWK+13(4),MSGWK+14\n         MVI   MSGWK+17,C'.'\n         MVI   MSGWK+22,C' '\n         MVC   MSGWK+23(6),=X'402020202120'\n         SLR   R0,R0               CLEAR TOP HALFWORD             GP@FT\n         ICM   R0,3,10(R2)         GET NUMBER OF TRACKS           GP@FT\n         CVD   R0,DOUBLE\n         ED    MSGWK+23(6),DOUBLE+5\n         MVC   MSGWK+30(06),=C'TRACKS'\n         LA    R1,MSGWK\n         LA    R0,36\n         BAL   R14,PUTLINE\n         LA    R2,12(,R2)\n         BCT   R15,EXTLOOP\n         L     R2,CPPLPTR\nEXTX     EQU   *\n         SPACE\n************************************************************\n*                                                          *\n*         DIRECTORY BLOCKS                                 *\n*                                                          *\n************************************************************\n         SPACE\n         CLI   DIRKW+1,1           'DIR' REQUESTED\n         BNE   DIRX                NO, BRANCH\n         CLI   DSORGSW,C'P'        IS DATA SET PARTITIONED?\n         BNE   DIRX                NO, BRANCH\n         CLI   CONCATSW,0          IS A CONCATENATION?\n         BNE   DIRX                YES, BRANCH\n         CLI   FILEKW+1,1          IS FILE SPECIFIED?\n         BE    DIRDD               YES, BRANCH\n         BAL   R14,ALLOC           NO, ALLOCATE THE DATA SET\n         LTR   R15,R15             WAS ALLOC SUCCESSFUL?\n         BZ    DIRDD               YES, BRANCH\n         LA    R1,MSG17            UNABLE TO ALLOCATE\n         LA    R0,L'MSG17\n         BAL   R14,PUTMSG\n         B     DIRX\nDIRDD    XC    DIRBLKS,DIRBLKS\n         XC    DIRBLKSU,DIRBLKSU\n         XC    MEMBERS,MEMBERS\n         XC    ALIASES,ALIASES\n         ST    R2,CPPLPTR\n         SPACE\n         LA    R2,DIRDCBW\n         MVC   0(DIRDCBL,R2),DIRDCB\n         MVC   DDNAM(8,R2),DDNAME\n*        IC    R0,EXLST(,R2)       SAVE RECFM\n*        LA    R1,DIREXLST\n*        ST    R1,EXLST(,R2)\n*        STC   R0,EXLST(,R2)       RESTORE RECFM\n*        OI    JFCB+52,X'08'       DO NOT WRITE BACK JFCB\n         MVI   OPEN,X'80'\n         OPEN  ((R2),INPUT),MF=(E,OPEN)\n         MVC   DIRDECBW(DIRDECBL),DIRDECB\n         MVI   DIRSW,0\nDIRREAD  EQU   *\n         READ  DIRDECBW,SF,(R2),BLOCK,256,MF=E\n         CHECK DIRDECBW\n         TM    DIRSW,2             I/O ERROR\n         BO    DIRERR              YES, BRANCH\n         LA    R1,1\n         A     R1,DIRBLKS\n         ST    R1,DIRBLKS\n         TM    DIRSW,1             ARE WE PAST USED BLOCKS\n         BO    DIRREAD             YES, BRANCH\n         LA    R1,BLOCK            POINT TO DATA JUST READ\n         LH    R0,0(,R1)           GET NUMBER OF BYTES IN USE\n         LTR   R0,R0               IS THIS NEGATIVE?\n         BM    DIRINV              YES, NOT A DIRECTORY BLOCK\n         CH    R0,=H'256'          IS THIS TOO LARGE?\n         BH    DIRINV              YES, NOT A DIRECTORY BLOCK\n         AR    R0,R1               POINT PAST LAST BYTE\n         LA    R1,2(,R1)           POINT TO FIRST MEMBER\nDIRENTRY CLC   0(8,R1),=8X'FF'     END OF MEMBERS\n         BE    DIRUSED\n         TM    11(R1),X'80'        ALIAS\n         BO    DIRALIAS\n         LA    R15,1               COUNT NON-ALIAS MEMBERS\n         A     R15,MEMBERS\n         ST    R15,MEMBERS\n         B     DIRNEXT\nDIRALIAS LA    R15,1               COUNT ALIAS MEMBERS\n         A     R15,ALIASES\n         ST    R15,ALIASES\nDIRNEXT  SLR   R15,R15\n         IC    R15,11(,R1)\n         N     R15,=F'31'          SET OFF ALL BUT LAST 5 BITS\n         SLL   R15,1               CHANGE HALFWORDS TO BYTES\n         LA    R1,12(R15,R1)       POINT PAST USER DATA\n         CR    R1,R0               END OF BLOCK\n         BL    DIRENTRY            NO, BRANCH\n         B     DIRREAD             YES, READ NEXT BLOCK\nDIRUSED  OI    DIRSW,1             STOP COUNTING MEMBERS\n         MVC   DIRBLKSU,DIRBLKS    SAVE NUMBER OF USED BLOCKS\n         B     DIRREAD\nDIRSYN   EQU   *\n         SYNADAF ACSMETH=BSAM\n         MVC   DIRMSG(72),50(R1)\n         OI    DIRSW,2\n         SYNADRLS\n         BR    R14\nDIRINV   LA    R1,MSG16\n         LA    R0,L'MSG16\n         B     DIRERRX\nDIRERR   LA    R1,DIRMSG\n         LA    R0,72\nDIRERRX  BAL   R14,PUTMSG\n         OI    DIRSW,4\nDIREOF   EQU   *\n         CLOSE ((R2)),MF=(E,OPEN)\n         L     R2,CPPLPTR          RESTORE R2\n         TM    DIRSW,4             WAS DIRECTORY IN ERROR\n         BO    DIRX                YES, BRANCH\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         SPACE\n         L     R1,DIRBLKS\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+3\n         MVC   0(6,R15),=X'402020202120'\n         ED    0(6,R15),DOUBLE+5\n         SPACE\n         L     R1,DIRBLKSU\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+17\n         MVC   0(6,R15),=X'402020202120'\n         ED    0(6,R15),DOUBLE+5\n         SPACE\n         L     R1,DIRBLKS\n         S     R1,DIRBLKSU\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+25\n         MVC   0(6,R15),=X'402020202120'\n         ED    0(6,R15),DOUBLE+5\n         SPACE\n         L     R1,MEMBERS\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+33\n         MVC   0(6,R15),=X'402020202120'\n         ED    0(6,R15),DOUBLE+5\n         SPACE\n         L     R1,ALIASES\n         LTR   R1,R1               ANY ALIASES\n         BNZ   DIRALI              YES, BRANCH\n         MVI   MSGWK+47,C'0'\n         LA    R1,MSG15            NO, DONT SHOW TOTAL\n         LA    R0,52\n         BAL   R14,PUTLINE         WRITE SHORT HEADER\n         LA    R1,MSGWK\n         LA    R0,48\n         BAL   R14,PUTLINE         WRITE SHORT STATS\n         B     DIRX\nDIRALI   CVD   R1,DOUBLE\n         LA    R15,MSGWK+42\n         MVC   0(6,R15),=X'402020202120'\n         ED    0(6,R15),DOUBLE+5\n         SPACE\n         A     R1,MEMBERS          COMPUTE TOTAL MEMBERS AND ALIASES\n         CVD   R1,DOUBLE\n         LA    R15,MSGWK+49\n         MVC   0(6,R15),=X'402020202120'\n         ED    0(6,R15),DOUBLE+5\n         LA    R1,MSG15\n         LA    R0,L'MSG15\n         BAL   R14,PUTLINE         WRITE FULL HEADER WITH TOTAL\n         LA    R1,MSGWK\n         LA    R0,55\n         BAL   R14,PUTLINE         WRITE FULL STATS WITH TOTAL\nDIRX     EQU   *\n         TM    ALLOCSW,1\n         BZ    *+8\n         BAL   R14,FREE\n         B     FMT2\n         EJECT\n************************************************************\n*                                                          *\n*         ALLOCATE / FREE                                  *\n*                                                          *\n************************************************************\n         SPACE\nALLOC    ST    R14,ALLOCR\n         LA    R1,MYDAPL\n         USING DAPL,R1\n         MVC   DAPLUPT(4),CPPLUPT\n         MVC   DAPLECT(4),CPPLECT\n         LA    R0,MYECB\n         ST    R0,DAPLECB\n         MVC   DAPLPSCB(4),CPPLPSCB\n         LA    R14,MYDAPB\n         ST    R14,DAPLDAPB\n         DROP  R1                  DAPL\n         SPACE\n         USING DAPB08,R14\n         MVC   0(MODEL08L,R14),MODEL08\n         LA    R0,DSNAME\n         ST    R0,DA08PDSN\n         MVC   DA08UNIT,=CL8'SYSALLDA'\n         MVC   DA08SER,VOLUME\n         MVI   DA08DSP1,DA08SHR\n         SPACE\n         BAL   R14,DAIR\n         SPACE\n         LTR   R15,R15\n         BNZ   ALLOCX\n         LA    R14,MYDAPB\n         MVC   DDNAME,DA08DDN\n         OI    ALLOCSW,1\nALLOCX   L     R14,ALLOCR\n         BR    R14\n         SPACE\nFREE     ST    R14,ALLOCR\n         LA    R14,MYDAPB\n         USING DAPB18,R14\n         MVC   0(MODEL18L,R14),MODEL18\n         MVC   DA18DDN,DDNAME\n         LA    R1,MYDAPL\n         BAL   R14,DAIR\n         NI    ALLOCSW,255-1\n         B     ALLOCX\n         SPACE\nDAIR     ST    R14,DAIRR\n         AIF   (NOT &MVS).SKIP6\n         L     R15,16\n         TM    732(R15),X'80'     CVTDAIR\n         BNO   DAIRLINK\n         L     R15,732(,R15)\n         BALR  R14,R15\n         B     DAIRRET\nDAIRLINK EQU   *\n.SKIP6   ANOP\n         LINK  EP=IKJDAIR,SF=(E,LINKAREA)\n         SPACE\nDAIRRET  L     R14,DAIRR\n         BR    R14\n         SPACE\n         EJECT\n************************************************************\n*                                                          *\n*         ISAM FORMAT 2                                    *\n*                                                          *\n************************************************************\n         SPACE\nFMT2     CLI   DSORGSW,C'2'        IS FORMAT 2 IN?\n         BE    ISAMF               YES - BRANCH\n         CLI   DSORGSW,C'1'        IS DSORG ISAM?\n         BNE   ISAMX               NO - BRANCH\n         CLC   DS1PTRDS(5),=XL5'00'\n         BE    ISAMX               NO FORMAT 2 - BRANCH\n         MVC   VTOCCHHR(5),DS1PTRDS\n         LA    R1,MYCAM\n         MVC   0(16,R1),OBTSEEK\n         LA    R0,VTOCCHHR\n         ST    R0,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         LA    R0,MYF2DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15\n         BZ    ISAMOBOK\n         LA    R0,L'MSG11\n         LA    R1,MSG11\n         BAL   R14,PUTMSG\n         B     NEXTD12\nISAMOBOK EQU   *\nISAMF    EQU   *\n         CLI   ISAMKW+1,0\n         BE    ISAMX\n         LA    R1,MSG12\n         LA    R0,L'MSG12\n         BAL   R14,PUTLINE\n         LA    R8,MYF2DSCB         ADDRESSABILITY\n         MVI   MSGWK,C' '\n         MVC   MSGWK+1(L'MSGWK-1),MSGWK\n         SPACE\n         MVC   HALF,DS2OVRCT       OVERFLOW RECORD COUNT\n         LH    R1,HALF\n         CVD   R1,DOUBLE\n         LA    R1,MSGWK+4\n         MVC   0(6,R1),=X'402020202120'\n         ED    0(6,R1),DOUBLE+5\n         SPACE\n         MVC   HALF,DS2TAGDT       TAG DELETION COUNT\n         LH    R1,HALF\n         CVD   R1,DOUBLE\n         LA    R1,MSGWK+24\n         MVC   0(6,R1),=X'402020202120'\n         ED    0(6,R1),DOUBLE+5\n         SPACE\n         MVC   FULL,DS2PRCTR       PRIME RECORD COUNT\n         L     R1,FULL\n         CVD   R1,DOUBLE\n         LA    R1,MSGWK+41\n         MVC   0(6,R1),=X'402020202120'\n         ED    0(6,R1),DOUBLE+5\n         SPACE\n         LA    R1,MSGWK\n         LA    R0,60\n         BAL   R14,PUTLINE\nISAMX    EQU   *\n         EJECT\n************************************************************\n*                                                          *\n*         CONCATENATED DATA SETS                           *\n*                                                          *\n************************************************************\n         SPACE\n         ICM   R1,15,CONCTPTR      GET POINTER TO NEXT TIOT ENTRY\n         BZ    CONCATX             ZERO SO 'FILE' NOT SPECIFIED\n         CLI   0(R1),0             END OF TIOT?\n         BE    CONCATX             YES\n         CLI   4(R1),C' '          DDNAME BLANK? (NULL FOR FREED SLOT)\n         BNE   CONCATX             NO, NOT A CONCATENATION\n         MVI   CONCATSW,1          YES\n         SLR   R15,R15             CLEAR FOR INSERT\n         B     DDFOUND             PROCESS CONCATENATED DATA SET\nCONCATX  EQU   *\n         ICM   R1,15,SDSAREA       ALLOCATION RETRIEVAL EXIT TAKEN?\n         BZ    NEXTDSN             NO\n         L     R0,SDSPOOL          YES, LOAD SUBPOOL AND SIZE\n         FREEMAIN R,A=(1),LV=(0)   FREE IT\n         B     NEXTDSN\n         EJECT\n************************************************************\n*                                                          *\n*        PUTMSG ROUTINE                                    *\n*                                                          *\n************************************************************\n         SPACE\nPUTMSG   STM   R14,R1,PUTLINS\n         XC    MYOLD(8),MYOLD\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPM\n         LA    R14,1               NO. OF MESSAGE SEGMENTS\n         ST    R14,MYOLD\n         LA    R14,MYSEG1          POINT TO 1ST SEGMENT\n         ST    R14,MYOLD+4\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         LA    R15,MYSEG1+4\n         CLC   0(3,R1),=C'IKJ'     IS DATA PRECEEDED BY MESSAGE ID?\n         BE    *+16                YES - BRANCH\n         LA    R14,1(,R14)         ADD 1 TO LENGTH\n         MVI   0(R15),C' '         INSERT LEADING BLANK\n         LA    R15,1(,R15)         BUMP POINTER\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   0(0,R15),0(R1)      MOVE MESSAGE IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYOLD),MF=(E,MYIOPL),ENTRY=(15)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        PUTLINE ROUTINE                                   *\n*                                                          *\n************************************************************\n         SPACE\nPUTLINE  STM   R14,R1,PUTLINS\n         XC    MYSEG1(4),MYSEG1\n         MVC   MYPTPB(12),MODLPTPB\n         LR    R14,R0              LENGTH IN R0\n         LA    R14,4(,R14)         ADD 4\n         STH   R14,MYSEG1\n         LR    R14,R0\n         BCTR  R14,0\n         B     *+10\n         MVC   MYSEG1+4(0),0(R1)   MOVE TEXT IN\n         EX    R14,*-6\n         L     R15,MYPUTLEP\n         SPACE\n         PUTLINE PARM=MYPTPB,OUTPUT=(MYSEG1,DATA),MF=(E,MYIOPL),       +\n               ENTRY=(15)\n         SPACE\n         LM    R14,R1,PUTLINS\n         BR    R14\n         EJECT\n************************************************************\n*                                                          *\n*        TERMINATION                                       *\n*                                                          *\n************************************************************\n         SPACE\nEXIT12   MVI   RC+1,12\nEXIT     EQU   *\n         IKJRLSA MYANS\n         SPACE\n         CLI   RC+1,0              IS RC ZERO?\n         BZ    NOSTACKD            YES, BRANCH\n         MVC   MYSTPB(STACKDL),STACKD\n         SPACE\n         STACK DELETE=ALL,PARM=MYSTPB,MF=(E,MYIOPL)\n         SPACE\n         TCLEARQ\nNOSTACKD EQU   *\n         LH    R15,RC\nEXITX    LR    1,13\n         L     R0,@SIZE\n         L     13,4(,13)\n         ST    15,16(,13)\n         FREEMAIN R,A=(1),LV=(0)\n         LM    14,12,12(13)\n         BR    14\n         SPACE 2\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n*              DSCBS PER TRACK, TRACKS PER CYLINDER, NAME, TRACK SIZE\nDEVTABLE DS    0H\n         DC    H'39,019',C' 3330V',AL2(13165)     30582009\nDEVTBLEN EQU   *-DEVTABLE\n         DC    H'16,010',C' 2311 ',AL2(0)             2001\n         DC    H'63,200',C' 2301 ',AL2(0)             2002  DRUM\n         DC    H'17,010',C' 2303 ',AL2(0)             2003  DRUM\n*        DC    H'22,046',C' 2302 ',AL2(0)             2004\n         DC    H'45,015',C' 9345 ',AL2(0)         30102004\n         DC    H'08,010',C' 2321 ',AL2(0)             2005  DATA CELL\n         DC    H'18,008',C'2305-1',AL2(14576)         2006\n         DC    H'34,008',C'2305-2',AL2(14858)     30502007\n         DC    H'25,020',C' 2314 ',AL2(07403)         2008\n         DC    H'39,019',C' 3330 ',AL2(13165)     30502009\n         DC    H'22,012',C' 3340 ',AL2(08535)     3040200A\n         DC    H'47,030',C' 3350 ',AL2(19254)     3050200B\n         DC    H'51,012',C' 3375 ',AL2(36000)     3010200C\n         DC    H'39,019',C'3330-1',AL2(13165)     3050200D\n         DC    H'53,015',C' 3380 ',AL2(47968)     3010200E\n         DC    H'50,015',C' 3390 ',AL2(58786)     3010200F\n         DC    H'52,020',C' F6421',AL2(27051)     30502085\n         SPACE\nDEVTBLSZ DC    AL2(DEVTBLEN)       KEEP AT END OF DEVTABLE\n         EJECT\nMODLPTPM PUTLINE OUTPUT=(1,TERM,SINGLE,INFOR),                         X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nSTACKD   STACK DELETE=ALL,MF=L\nSTACKDL  EQU   *-STACKD\n         SPACE\nMODLPTPB PUTLINE OUTPUT=(1,TERM,SINGLE,DATA),                          X\n               TERMPUT=(EDIT,WAIT,NOHOLD,NOBREAK),MF=L\n         SPACE\nMSG04    DC    C'IKJ58503I DATA SET '\nMSG04A   DC    C' NOT IN CATALOG'\nMSG05    DC    C'IKJ58503I DATA SET '\nMSG05A   DC    C' NOT ON VOLUME '\nMSG06    DC    C'IKJ58503I DATA SET '\nMSG06A   DC    C' ON UNMOUNTED VOLUME '\nMSG07    DC    C'--RECFM-LRECL-BLKSIZE-DSORG-CREATED---ACCESSED--EXPIRE+\n               S---SECURITY--'\nMSG07A   DC    C'KEYLN-RKP--'\nMSG07B   DC    C'MODIFIED---'\nMSG08    DC    C'--VOLUME--DEVICE--ALLOC--2ND.QNTY--TRACKS--UNUSED--EXT+\n               ENTS--'\nMSG12    DC    C'--OVERFLOW RECORDS--TAGGED DELETION--PRIME RECORDS--'\nMSG14    DC    C'FILENAME '\nMSG14A   DC    C' INVALID, MORE THAN 8 CHARACTERS  '\nMSG14B   DC    C' IS NOT CURRENTLY ALLOCATED       '\nMSG14C   DC    C' NOT ALLOCATED TO A DASD DATA SET '\nMSG15    DC    C'--DIRECTORY BLOCKS--USED--UNUSED--MEMBERS--ALIASES--TO+\n               TAL--'\nMSG16    DC    C'  ERROR READING DIRECTORY'\nMSG17    DC    C'UNABLE TO ALLOCATE DATA SET TO READ DIRECTORY'\nMSG18    DC    C'--CATALOGUED--2ND.SPACE EXTENSION--REBLOCKABLE--SYSTEM+\n                BLOCKED--'\nBLANKS   DC    16C' '\nLOCCAM   CAMLST NAME,2,,4\nOBTCAM   CAMLST SEARCH,2,3,4\nOBTSEEK  CAMLST SEEK,2,3,4\n         DS    0F\nYMDNY    DC    AL2(334,304,273,243)\n         DC    AL2(212,181,151,120)\n         DC    AL2(90,59,31,0)\nYMDLY    DC    AL2(335,305,274,244)\n         DC    AL2(213,182,152,121)\n         DC    AL2(91,60,31,0)\n         LTORG\nMSG01    DC    C'PARSE ERROR'\nMSG02    DC    C'IKJ58509I DATA SET NAME REQUIRED WHEN MEMBER IS SPECIF+\n               IED'\nMSG03    DC    C'ERROR IN DEFAULT SERVICE ROUTINE'\nMSG09    DC    C'ERROR READING FORMAT 3 DSCB'\nMSG11    DC    C'ERROR READING FORMAT 2 DSCB'\nMODEL08  DC    AL2(8),XL10'0',CL24' ',XL16'0',CL16' ',XL8'0',CL8' '\nMODEL08L EQU   *-MODEL08\nMODEL18  DC    X'0018',XL10'0',CL18' ',XL2'0',CL8' '\nMODEL18L EQU   *-MODEL18\nSMSPCTYP DC    CL9'AVG BLKSZ'\n         DC    CL9'MEGABYTES'\n         DC    CL9'KILOBYTES'\n         DC    CL9'BYTES    '\n         DC    CL9'**       '\n*        IHAUDA DSECT=NO           USAGE DESCRIPTION AREA        GP@HC*\nUDA      DC    0F'0'                                                  *\nUDALEN   DC    H'16'                                                  *\nUDAFLAG1 DC    X'00'                                                  *\n         DC    X'00'                                                  *\nUDAFLAG3 DC    X'08'               UDANORFU IS SET ON                 *\nUDAFLAG4 DC    X'00'                                                  *\n         DC    2X'00'                                                 *\nUDAUACC  DC    F'0'                                                   *\nUDASACC  DC    F'0'                                                   *\n*        IHAUDA MACRO CALL SUPPRESSED - EXPANDED ABOVE           GP@HC*\nDIRUDAX  DC    X'94',AL3(UDA)\n         PRINT NOGEN\nDIRDCB   DCB   DDNAME=DYNAM,DSORG=PO,MACRF=R,EODAD=DIREOF,SYNAD=DIRSYN,X\n               RECFM=U,BLKSIZE=256,EXLST=DIRUDAX\nDIRDCBL  EQU   *-DIRDCB\n         SPACE\n         PRINT GEN\nDIRREADM READ  DIRDECB,SF,MF=L\nDIRDECBL EQU   *-DIRDECB\n         PRINT GEN\nHEXTAB   DC    C'0123456789ABCDEF'\nEODAD    EQU   32\nRECFM    EQU   36\nEXLST    EQU   36\nDDNAM    EQU   40\nOFLGS    EQU   48\nSYNAD    EQU   56\nBLKSI    EQU   62\nLRECL    EQU   82\n         DC    0D'0'\n         SPACE\n************************************************************\n*                                                          *\n*        PARSE PARAMETERS                                  *\n*                                                          *\n************************************************************\n         SPACE\n         PRINT NOGEN\nSHOWDPCL IKJPARM\nDSN      IKJPOSIT DSTHING,LIST,PROMPT='DATA SET NAME'\nFILEKW   IKJKEYWD\n         IKJNAME 'FILE'\nQUICKKW  IKJKEYWD\n         IKJNAME 'QUICKLY'\nVOLKW    IKJKEYWD\n         IKJNAME 'VOLUME',SUBFLD=VOLSF\nISAMKW   IKJKEYWD\n         IKJNAME 'ISAM'\nDIRKW    IKJKEYWD\n         IKJNAME 'DIRECTORY'\nEXTKW    IKJKEYWD\n         IKJNAME 'EXTENTS'\nVOLSF    IKJSUBF\nVOL      IKJIDENT 'VOLUME SERIAL',                                     +\n               FIRST=ALPHANUM,OTHER=ALPHANUM,MAXLNTH=6,                +\n               PROMPT='SERIAL NUMBER OF VOLUME WHICH CONTAINS DATA SET'\n         IKJENDP\n         PRINT GEN\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nLINKAREA DS    2F\nRC       DS    F\nSAVERS   DS    4F                                                  UID8\nNEWDSCB# DS    H\nJMPLBL3# DS    H\nMYPPL    DS    7F\nMYANS    DS    F\nMYUWA    DS    F\nMYECB    DS    F                  USED BY PUTLINE ROUTINE\nMYIOPL   DS    4F                 USED BY PUTLINE ROUTINE\nMYPTPB   DS    3F                 USED BY PUTLINE ROUTINE\nMYOLD    DS    2F                 USED BY PUTLINE ROUTINE\nMYSEG1   DS    2H,CL100           USED BY PUTLINE ROUTINE\nPUTLINS  DS    4F                 USED BY PUTLINE ROUTINE\nMYPUTLEP DS    F                  USED BY PUTLINE ROUTINE\nMYSTPB   DS    5F\nDDNAME   DS    CL8\nUNIT     DS    CL6\nDIRSW    DS    C\nALLOCSW  DS    C\nALLOCR   DS    F\nDAIRR    DS    F\nUCBPTR   DS    F\nCPPLPTR  DS    F\nDIRBLKS  DS    F\nDIRBLKSU DS    F\nMEMBERS  DS    F\nALIASES  DS    F\nCONCTPTR DS    F\nCONCTCNT DS    F\nVOLUME   DS    CL6\nDSNAME   DS    H,CL44\nMYDAPL   DS    0F (5F)\nMYDFPB   DS    5F\nMYCAM    DS    4F\nVSAMSW   DS    CL1\nCONCATSW DS    CL1\nRECFMWA  DS    CL6\nDSORGWA  DS    CL5\nYMDOUT   DS    CL8\nYMDREGS  DS    9F\nSSPWA    DS    CL36\nSSPWA2   DS    CL21  ROOM FOR CONTIG-MXIG-ALX-ROUND\nLASTTRK  DS    F\nEXTENTS  DS    H\nVTOCCHHR DS    XL5\nTRKCYL   DS    H\nDSCBTRK  DS    H\nDSCBTTR  DS    XL3\nTRKWA    DS    CL6\nFORMAT4  DS    0F,0CL44\nMSGWK    DS    CL128\nMYWK5    DS    CL5,CL1\nDOUBLE   DS    D\nHALF     EQU   DOUBLE,2\nFULL     EQU   DOUBLE,4\nMYF1KEY  DS    CL44\nMYF1DSCB DS    CL140               96 BYTES OF DSCB, 5 BYTES CCHHR\nMYEXDSCB DS    0D,CL140\nEXTPTR   DS    F\nMYLOCBUF DS    0D,XL265\nMYF2DSCB DS    0D,CL140            ISAM FORMAT 2 DSCB\nDSORGSW  DS    CL1\nDESCRIP  DS    CL80\nDIRDCBW  DS    0F,(DIRDCBL)X\nDIRDECBW DS    0F,(DIRDECBL)X\nDIRMSG   DS    CL72\nMYDAPB   DS    0D  (21F)\nBLOCK    DS    0D,256C\nDIREXLST DS    2F\nDEVDATA  DS    2F\nOPEN     DS    0F\nRDJFCB   DS    F\nJFCB     DS    0D,CL176\n         DS    0D\n*SDSARL  IHAARL DSECT=NO,PREFIX=SDS  ALLOCATION RETRIEVAL LIST   GP@P6*\nSDSARL   DS    0F                                                     *\nSDSLEN   DS    H                   LENGTH OF THIS AREA - AT LEAST 36  *\nSDSIDENT DS    CL2                 AREA ID - MUST BE 'AR'             *\nSDSOPT1  DS    X                   OPTION BYTE - X'80'=AREA ABOVE LINE*\nSDSRSVD1 DS    XL7                 RESERVED - SHOULD BE ZERO          *\nSDSRETRV DS    H                   DS # TO GET DATA FOR - 0 FOR ALL   *\nSDSFIRST DS    H                   1ST DS # TO GET DATA FOR - 0/1=1ST *\nSDSAREA  DS    A                   ADDRESS OF ALLOC'N RETRIEVAL AREA  *\nSDSPOOL  DS    HL1                 SUBPOOL - 0=>KEY 8-F, 230=>KEY 0-7 *\nSDSRLEN  DS    FL3                 LENGTH OF ALLOC'N RETRIEVAL AREA   *\nSDSRTRVD DS    H                   DS # FOR WHICH INFO WAS FETCHED    *\nSDSCONC  DS    H                   DS # CONCATENATED IN DD            *\nSDSRCODE DS    HL1                 REASON CODE                        *\nSDSRSVD2 DS    XL7                 RESERVED - SET BY RDJFCB           *\n*        IHAARL MACRO CALL SUPPRESSED - EXPANDED ABOVE           GP@P6*\nEXTTABLE DS    256XL12\n@DATAL   EQU   *-@DATA\n         SPACE 2\n         IKJCPPL\n         SPACE 2\n         IKJIOPL\n         SPACE 2\n         IKJPPL\n         SPACE 2\n         IKJDFPB\n         SPACE\n         AIF   (NOT &MVS).SKIP8\n         IKJUPT\n.SKIP8   AIF   (&MVS).SKIP9\n         IKJPSCB\n.SKIP9   ANOP\n         SPACE\nDSCB     DSECT\nIECSDSL1 EQU   *                   FORMAT 1 DSCB\nIECSDSF1 EQU   IECSDSL1\nDS1DSNAM DS    CL44                DATA SET NAME\nDS1FMTID DS    CL1                 FORMAT IDENTIFIER\nDS1DSSN  DS    CL6                 DATA SET SERIAL NUMBER\nDS1VOLSQ DS    XL2                 VOLUME SEQUENCE NUMBER\nDS1CREDT DS    XL3                 CREATION DATE\nDS1EXPDT DS    XL3                 EXPIRATION DATE\nDS1NOEPV DS    XL1                 NUMBER OF EXTENTS ON VOLUME\nDS1NOBDB DS    XL1                 NUMBER OF BYTES USED IN LAST\n*                                     DIRECTORY BLOCK\nDS1FLAG1 DS    XL1                 FLAG 1\n*        EQU   X'80'               COMPRESSABLE EXTENDED FORMAT\n*        EQU   X'40'               CHECKPOINTED DATASET\n*        EQU   X'20'               VSE EXP DATE SPEC BY RET PERIOD\n*        EQU   X'10'               DATA SET HAS BEEN RECALLED\n*        EQU   X'08'               >64K TRACK SUPPORT (\"LARGE\")\nDS1SYSCD DS    CL13                SYSTEM CODE\nDS1REFD  DS    XL3                 REFERENCE DATE\nDS1SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS\n*        EQU   X'80'               SYSTEM MANAGED DATA SET\n*        EQU   X'40'               NO BCS ENTRY EXISTS FOR DATA SET\n*        EQU   X'20'               DATA SET MAY BE REBLOCKED\n*        EQU   X'10'               DADSM CREATE ORIGINATED BLKSIZE\n*        EQU   X'08'               DATA SET IS A PDSE\n*        EQU   X'04'               DATA SET IS A STRIPE\n*        EQU   X'02'               HFS DATA SET\n*        EQU   X'01'               D.S. ATTRIBUTE EXTENSION\nDS1SCEXT DS    0XL3                SECONDARY SPACE EXTENSION\nDS1SCXTF DS    XL1                 SECONDARY SPACE EXTENSION FLAG BYTE\n*        EQU   X'80'               DS1SCXTV IS ORIGINAL AVG BLOCKLEN\n*        EQU   X'40'               DS1SCXTV IS MEGABYTES\n*        EQU   X'20'               DS1SCXTV IS KILOBYTES\n*        EQU   X'10'               DS1SCXTV IS BYTES\n*        EQU   X'08'               DS1SCXTV IS BYTES/256\n*        EQU   X'04'               DS1SCXTV IS BYTES/65536\n*        EQU   X'02'               RESERVED\n*        EQU   X'01'               RESERVED\nDS1SCXTV DS    XL2                 SECONDARY SPACE EXTENSION VALUE\nDS1DSORG DS    XL2                 DATA SET ORGANIZATION\nDS1RECFM DS    XL1                 RECORD FORMAT\nDS1OPTCD DS    XL1                 OPTION CODE\nDS1BLKL  DS    XL2                 BLOCK LENGTH\nDS1LRECL DS    XL2                 RECORD LENGTH\nDS1KEYL  DS    XL1                 KEY LENGTH\nDS1RKP   DS    XL2                 RELATIVE KEY POSITION\nDS1DSIND DS    XL1                 DATA SET INDICATORS\nDS1SCALO DS    XL4                 SECONDARY ALLOCATION\nDS1LSTAR DS    XL3                 LAST USED TRACK AND BLOCK ON TRACK\nDS1TRBAL DS    XL2                 BYTES REMAINING ON LAST TRACK USED\n         DS    XL2                 RESERVED\nDS1EXT1  DS    XL10                FIRST EXTENT DESCRIPTION\n*        FIRST BYTE                EXTENT TYPE INDICATOR\n*        SECOND BYTE               EXTENT SEQUENCE NUMBER\n*        THIRD - SIXTH BYTES       LOWER LIMIT\n*        SEVENTH - TENTH BYTES     UPPER LIMIT\nDS1EXT2  DS    XL10                SECOND EXTENT DESCRIPTION\nDS1EXT3  DS    XL10                THIRD EXTENT DESCRIPTION\nDS1PTRDS DS    XL5                 POSSIBLE PTR TO A FORMAT 2 OR 3 DSCB\nDS1END   EQU   *\n         ORG   DSCB\nIECSDSL2 EQU   *                   FORMAT 2 DSCB\nIECSDSF2 EQU   IECSDSL2\n         DS    XL1                 KEY IDENTIFIER\nDS22MIND DS    XL7                 ADDRESS OF 2ND LEVEL MASTER INDEX\nDS2L2MEN DS    XL5                 LAST 2ND LEVEL MASTER INDEX ENTRY\nDS23MIND DS    XL7                 ADDRESS OF 3RD LEVEL MASTER INDEX\nDS2L3MIN DS    XL5                 LAST 3RD LEVEL MASTER INDEX ENTRY\n         DS    XL11                RESERVED\nDS2LPDT  DS    XL8                 LAST PRIME TRACK ON LAST PRIME CYL\nDS2FMTID DS    CL1                 FORMAT IDENTIFIER\nDS2NOLEV DS    XL1                 NUMBER OF INDEX LEVELS\nDS2DVIND DS    XL1                 HIGH LEVEL INDEX DEVELOPMENT\n*                                     INDICATOR\nDS21RCYL DS    XL3                 FIRST DATA RECORD IN CYLINDER\nDS2LTCYL DS    XL2                 LAST DATA TRACK IN CYLINDER\nDS2CYLOV DS    XL1                 NUMBER OF TRACKS FOR CYLINDER\n*                                     OVERFLOW\nDS2HIRIN DS    XL1                 HIGHEST 'R' ON HIGH-LEVEL INDEX TRK\nDS2HIRPR DS    XL1                 HIGHEST 'R' ON PRIME DATA TRACK\nDS2HIROV DS    XL1                 HIGHEST 'R' ON OVERFLOW DATA TRACK\nDS2RSHTR DS    XL1                 'R' OF LAST DATA RECORD ON SHARED\n*                                     TRACK\nDS2HIRTI DS    XL1                 HIGHEST 'R' ON UNSHARED TRACK OF\n*                                     TRACK INDEX\nDS2HIIOV DS    XL1                 HIGHEST 'R' FOR INDEPENDENT OVERFLOW\n*                                     DATA TRACKS\nDS2TAGDT DS    XL2                 TAG DELETION COUNT\nDS2RORG3 DS    XL3                 NON-FIRST OVERFLOW REFERENCE COUNT\nDS2NOBYT DS    XL2                 NUMBER OF BYTES FOR HIGHEST-LEVEL\n*                                     INDEX\nDS2NOTRK DS    XL1                 NUMBER OF TRACKS FOR HIGHEST-LEVEL\n*                                     INDEX\nDS2PRCTR DS    XL4                 PRIME RECORD COUNT\nDS2STIND DS    XL1                 STATUS INDICATORS\nDS2CYLAD DS    XL7                 ADDRESS OF CYLINDER INDEX\nDS2ADLIN DS    XL7                 ADDRESS OF LOWEST LEVEL MASTER INDEX\nDS2ADHIN DS    XL7                 ADDRESS OF HIGHEST LEVEL MASTER\n*                                     INDEX\nDS2LPRAD DS    XL8                 LAST PRIME DATA RECORD ADDRESS\nDS2LTRAD DS    XL5                 LAST TRACK INDEX ENTRY ADDRESS\nDS2LCYAD DS    XL5                 LAST CYLINDER INDEX ENTRY ADDRESS\nDS2LMSAD DS    XL5                 LAST MASTER INDEX ENTRY ADDRESS\nDS2LOVAD DS    XL8                 LAST INDEPENDENT OVERFLOW RECORD\n*                                     ADDRESS\nDS2BYOVL DS    XL2                 BYTES REMAINING ON OVERFLOW TRACK\nDS2RORG2 DS    XL2                 TRACKS REMAINING IN INDEPENDENT\n*                                     OVERFLOW AREA\nDS2OVRCT DS    XL2                 OVERFLOW RECORD COUNT\nDS2RORG1 DS    XL2                 CYLINDER OVERFLOW AREA COUNT\nDS2NIRT  DS    XL3                 DUMMY TRACK INDEX ENTRY ADDRESS\nDS2PTRDS DS    XL5                 POSSIBLE POINTER TO A FORMAT 3 DSCB\nDS2END   EQU   *\n         ORG   DSCB\nIECSDSL3 EQU   *                   FORMAT 3 DSCB\nIECSDSF3 EQU   IECSDSL3\n         DS    XL4                 KEY IDENTIFIER\nDS3EXTNT DS    XL40                FOUR EXTENT DESCRIPTIONS\n*        FIRST BYTE                EXTENT TYPE INDICATOR\n*        SECOND BYTE               EXTENT SEQUENCE NUMBER\n*        THIRD - SIXTH BYTES       LOWER LIMIT\n*        SEVENTH - TENTH BYTES     UPPER LIMIT\nDS3FMTID DS    CL1                 FORMAT IDENTIFIER\nDS3ADEXT DS    XL90                NINE ADDITIONAL EXTENT DESCRIPTIONS\nDS3PTRDS DS    XL5                 POSSIBLE POINTER TO A FORMAT 3 DSCB\nDS3END   EQU   *\n         ORG   DSCB\nIECSDSL4 EQU   *                   FORMAT 4 DSCB\nIECSDSF4 EQU   IECSDSL4\nDS4IDFMT DS    CL1                 FORMAT IDENTIFIER\nDS4HPCHR DS    XL5                 HIGHEST ADDRESS OF A FORMAT 1 DSCB\nDS4DSREC DS    XL2                 NUMBER OF AVAILABLE DSCB'S\nDS4HCCHH DS    XL4                 CCHH OF NEXT AVAILABLE ALTERNATE TRK\nDS4NOATK DS    XL2                 NUMBER OF REMAINING ALTERNATE TRACKS\nDS4VTOCI DS    XL1                 VTOC INDICATORS\nDS4DOSBT EQU   X'80'               DOS BIT\nDS4DVTOC EQU   X'40'               THE INDEX WAS DISABLED\nDS4DSTKP EQU   X'10'               DOS STACKED PACK\nDS4DOCVT EQU   X'08'               DOS CONVERTED VTOC\nDS4DIRF  EQU   X'04'               DIRF BIT\nDS4DICVT EQU   X'02'               DIRF RECLAIMED\nDS4IVTOC EQU   X'01'               AN INDEX HAS BEEN CREATED FOR VTOC\nDS4NOEXT DS    XL1                 NUMBER OF EXTENTS IN THE VTOC\nDS4SMSFG DS    XL1                 SYSTEM MANAGED STORAGE INDICATORS\n*        EQU   X'C0'               SYSTEM MANAGED STORAGE VOLUME\n*        EQU   X'40'               SMS VOLUME IN INITIAL STATUS\n         DS    XL1                 RESERVED\nDS4DEVCT DS    0XL14               DEVICE CONSTANTS\nDS4DEVSZ DS    XL4                 DEVICE SIZE\nDS4DEVTK DS    XL2                 DEVICE TRACK LENGTH\nDS4DEVOV DS    0XL2                KEYED RECORD OVERHEAD\nDS4DEVI  DS    XL1                    NON-LAST KEYED RECORD OVERHEAD\nDS4DEVL  DS    XL1                    LAST KEYED RECORD OVERHEAD\nDS4DEVK  DS    XL1                 NON-KEYED RECORD OVERHEAD\n*                                     DIFFERENTIAL\nDS4DEVFG DS    XL1                 FLAG BYTE\nDS4DEVTL DS    XL2                 DEVICE TOLERANCE\nDS4DEVDT DS    XL1                 NUMBER OF DSCB'S PER TRACK\nDS4DEVDB DS    XL1                 NUMBER OF DIRECTORY BLOCKS PER TRACK\nDS4AMTIM DS    XL8                 VSAM TIME STAMP\nDS4AMCAT DS    0XL3                VSAM CATALOG INDICATOR\nDS4VSIND DS    XL1                 VSAM INDICATORS\nDS4VSCRA DS    XL2                 RELATIVE TRACK LOCATION OF THE CRA\nDS4R2TIM DS    XL8                 VSAM VOLUME/CATALOG MATCH\n*                                  TIME STAMP\n         DS    XL5                 RESERVED\nDS4F6PTR DS    XL5                 POINTER TO FIRST FORMAT 6 DSCB\nDS4VTOCE DS    XL10                VTOC EXTENT DESCRIPTION\n         DS    XL25                RESERVED\nDS4END   EQU   *\n         ORG   DSCB\nIECSDSL5 EQU   *                   FORMAT 5 DSCB\nIECSDSF5 EQU   IECSDSL5\nDS5KEYID DS    XL4                 KEY IDENTIFIER\nDS5AVEXT DS    XL5                 AVAILABLE EXTENT\n*        BYTES 1 - 2     RELATIVE TRACK ADDRESS OF THE FIRST TRACK\n*                        IN THE EXTENT\n*        BYTES 3 - 4     NUMBER OF UNUSED CYLINDERS IN THE EXTENT\n*        BYTE  5         NUMBER OF ADDITIONAL UNUSED TRACKS\nDS5EXTAV DS    XL35                SEVEN AVAILABLE EXTENTS\nDS5FMTID DS    CL1                 FORMAT IDENTIFIER\nDS5MAVET DS    XL90                EIGHTEEN AVAILABLE EXTENTS\nDS5PTRDS DS    XL5                 POINTER TO NEXT FORMAT 5 DSCB\nDS5END   EQU   *\n         ORG   DSCB\nIECSDSL6 EQU   *                   FORMAT 6 DSCB\nIECSDSF6 EQU   IECSDSL6\nDS6KEYID DS    XL4                 KEY IDENTIFIER\nDS6AVEXT DS    XL5                 SHARED EXTENT DESCRIPTION\n*        BYTES 1 - 2     RELATIVE TRACK ADDRESS OF THE FIRST CYLINDER\n*        BYTES 3 - 4     NUMBER OF FULL CYLINDERS BEING SHARED\n*        BYTE  5         NUMBER OF DATA SETS SHARING THE EXTENT\nDS6EXTAV DS    XL35                SEVEN SHARED EXTENTS\nDS6FMTID DS    CL1                 FORMAT IDENTIFIER\nDS6MAVET DS    XL90                EIGHTEEN SHARED EXTENTS\nDS6PTRDS DS    XL5                 POINTER TO NEXT FORMAT 6 DSCB\nDS6END   EQU   *\n         SPACE\n         IKJDAPL\n         SPACE\n         IKJDAP08\n         SPACE\n         IKJDAP18\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SHOWDS$": {"ttr": 7431, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'SHOWDS'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(SHOWDS),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(SHOWDS),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD *\n ALIAS SDS\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SHOWDS#": {"ttr": 7433, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "BG@PRC"}, "text": ")F FUNCTION -\n  THE SHOWDS COMMAND DISPLAYS A DATA SET'S ATTRIBUTES\n  AND SPACE USAGE INFORMATION.\n)X SYNTAX  -\n         SHOWDS  'NAME'  VOLUME('VOLUME')   DIR  EXT  FILE\n  REQUIRED - 'NAME'\n  DEFAULTS - NONE\n  ALIAS    - SDS\n)O OPERANDS -\n  'NAME'   - THE NAME OF THE DATA SET WHOSE ATTRIBUTES\n             ARE TO BE DISPLAYED, OR IF THE 'FILE' KEYWORD\n             IS ALSO SPECIFIED, THE 8-CHARACTER FILENAME (DDNAME)\n             ALLOCATED TO THE DATA SET WHOSE ATTRIBUTES ARE\n             TO BE DISPLAYED.\n))VOLUME('VOLUME') - IF THE FIRST OPERAND IS THE NAME OF AN\n             UNCATALOGED DATA SET, THIS KEYWORD SPECIFIES\n             THE VOLUME ON WHICH THE DATA SET RESIDES.\n             THE VOLUME KEYWORD IS IGNORED IF 'FILE' IS\n             SPECIFIED.\n))DIR      - DISPLAY INFORMATION ABOUT THE DIRECTORY OF\n             THE PARTITIONED DATA SET.\n))EXTENTS  - DISPLAY THE EXTENTS OF THE DATA SET (THE BEGINNING\n             AND ENDING CYLINDER/TRACK LOCATIONS).\n))FILE     - THIS KEYWORD INDICATES THAT THE FIRST OPERAND\n             IS TO BE TREATED AS A FILENAME (DDNAME) INSTEAD\n             OF A DATA SET NAME.  THE COMMAND WILL DETERMINE\n             WHICH DATA SET IS CURRENTLY ALLOCATED TO THE\n             SPECIFIED FILENAME AND DISPLAY ITS ATTRIBUTES.\n             THIS ALLOWS ATTRIBUTES OF TEMPORARY DATA SETS\n             TO BE DISPLAYED.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXDOC": {"ttr": 7435, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00.\\x00.\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 46, "newlines": 46, "modlines": 0, "user": "BG@PRC"}, "text": " ISPF DISK SPACE INFORMATION PROGRAM            VERSION 1.1  APRIL 1991\n\n WRITTEN BY BILL GODFREY OF PRC INC., MCLEAN, VIRGINIA\n\n THIS PROGRAM DISPLAYS INFORMATION ABOUT AVAILABLE SPACE ON A DISK\n IN THE FORM OF ISPF PANELS.  INDEXED VTOCS ARE SUPPORTED.\n THE USER CAN OPTIONALLY DISPLAY A LIST OF ALL FREE EXTENTS.\n\n MEMBERS IN DISTRIBUTION LIBRARY:\n\n    ULXDOC   -  THIS DOCUMENTATION YOU ARE READING\n    ULXJ01   -  JCL TO ASSEMBLE AND LINK ULXL01\n    ULXL01   -  SOURCE CODE (ASSEMBLER LANGUAGE)\n    ULXP01   -  PANEL 1\n    ULXP02   -  PANEL 2\n    ULXP03   -  PANEL 3\n    ULXH02   -  HELP FOR PANEL 2\n    ULXM01   -  MESSAGES\n\n TO INSTALL,\n   1) ASSEMBLE AND LINK-EDIT ULXL01 (SAMPLE JCL IN ULXJ01)\n      INTO ONE OF THE FOLLOWING, AND NAME IT ULXL01.\n         A) A LINKLIST LIBRARY\n         B) LPALIB  (IN WHICH CASE AN IPL WITH CLPA IS REQUIRED)\n         C) ANY LIBRARY THAT IS ALLOCATED TO DDNAME ISPLLIB AT THE TIME\n            ISPF IS ENTERED.\n\n   2) COPY THE PANELS AND THE HELP INTO YOUR PANEL LIBRARY.\n\n   3) COPY THE MESSAGE MEMBER INTO YOUR ISPF MESSAGE LIBRARY.\n\n AT THIS POINT YOU CAN TEST IT USING THE 'DIALOG TEST' FACILITY OF\n ISPF.  FROM THE PRIMARY OPTION MENU, ENTER 7.1 AND THEN WHEN YOU GET\n THE 'INVOKE DIALOG FUNCTION' SELECTION MENU, ENTER 'ULXL01' ON THE\n 'INVOKE PROGRAM' PGM ===> LINE.\n\n IF IT WORKS, YOU CAN ADD IT TO YOUR PRIMARY OPTION MENU OR ONE OF THE\n THE UTILITY MENUS OR ONE OF YOUR OWN MENUS.  I WILL NOT ATTEMPT TO\n EXPLAIN HOW TO DO THAT HERE EXCEPT TO SAY THAT IT INVOLVES ADDING\n A STATEMENT THAT LOOKS LIKE THIS:\n        SPACE,'PGM(ULXL01)'\n TO THE ')PROC' SECTION OF ONE OF YOUR MENUS, AND YOU CAN CHANGE THE\n WORD 'SPACE' TO WHATEVER YOU WANT.\n\n AN EARLIER VERSION OF THIS PROGRAM BY THE SAME AUTHOR WAS DISTRIBUTED\n ON THE CBT TAPE (FILES 88 AND 137).\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXH02": {"ttr": 7437, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x18\\x00\\x18\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 24, "newlines": 24, "modlines": 0, "user": "BG@PRC"}, "text": "%TUTORIAL------------------- DISK SPACE INFORMATION ----------------------------\n+\n+  The disk space information panel shows how much space is available\n+  on a specified disk.\n+\n+  Cylinders available --------- The number of cylinders containing no\n+                                used tracks.\n+  Tracks available ------------ The number of unused tracks that are\n+                                in partially used cylinders.\n+  Total tracks available ------ The number of unused tracks including\n+                                all unused cylinders.\n+\n+  Extents of free space ------- An extent is a group of adjacent tracks.\n+                                This is the number of groups of unused\n+                                tracks on the volume.\n+\n+  Largest single extent ------- The largest group of adjacent unused\n+                                tracks.\n+\n+  DSCB's available in VTOC ---- The maximum number of additional data\n+                                sets that this volume can have. The\n+                                number of unused entries in the volume\n+                                table of contents.\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXJ01": {"ttr": 7439, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x08\\x00\\x08\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 8, "newlines": 8, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'ASMFCL ULXL01'\n//* THIS JOB ASSEMBLES ULXL01 AND LINKS IT AS 'ULXL01'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.LIB.SOURCE(ULXL01),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(ULXL01),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXL01": {"ttr": 7441, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x06s\\x06s\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 1651, "newlines": 1651, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   U L X L 0 1   '\n***********************************************************************\n*                                                                     *\n*        'ULXL01' - AN ISPF DIALOG SERVICES PROGRAM                   *\n*         FOR DISPLAYING AVAILABLE DISK SPACE.                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. MAY 24 1985.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* REQUIRED PANELS.    ULXP01, ULXP02, ULXP03.\n* REQUIRED MESSAGES.  ULXM01.\n* REQUIRED CLISTS.    NONE.\n* MODULES LOADED. ISPEXEC.\n* DESCRIPTION.\n*         THIS SPF DIALOG PROGRAM DISPLAYS INFORMATION ABOUT\n*         AVAILABLE SPACE ON A DISK VOLUME, FROM THE FORMAT 5\n*         DSCB'S OR THE VTOC INDEX.\n*\n*         SOME OF THE VARIABLES THAT ARE VDEFINED ARE USED ONLY\n*         FOR DEBUGGING AND DO NOT APPEAR ON THE NORMAL PANEL.\n*         THEY COULD BE ADDED TO THE PANEL FOR DEBUGGING.\n*\n*         THE FIRST 3 CHARACTERS OF THE PANEL NAMES MAY BE\n*         OVERRIDDEN BY PASSING A PARM OF 'PFX=XXX'\n*         WHERE XXX ARE THE 3 NEW CHARACTERS.\n*         THIS ALSO OVERRIDES THE FIRST 3 CHARACTERS\n*         OF THE MESSAGE ID'S.  THE MESSAGE ID'S WITHIN THE\n*         MESSAGE MEMBER MUST CORRESPOND WITH THE MEMBER NAME,\n*         SO IF YOU RENAME A MESSAGE MEMBER YOU MUST CHANGE\n*         THE MESSAGE ID'S WITHIN THAT MEMBER.\n*\n* LOG OF CHANGES.\n*  15APR91 - RECOGNIZE 3390. USE LAST 2 BYTES OF DEVICES FOR ALT CYL.\n*            ADD XA UCB SCAN. CREATE VARIABLES ULXCPV ULXPCU.\n*\n* NOTE: AN EARLIER VERSION OF THIS PROGRAM, BY THE SAME AUTHOR, WAS\n*  DISTRIBUTED ON THE CBT TAPE (FILES 88 AND 137) WITH THE AUTHOR'S\n*  NAME REMOVED.\n*\n         SPACE\nULXL01   START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'ULXL01 1.1 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R10,R15             LOAD BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LR    R2,R1               PARM POINTER\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         SPACE 1\n         LR    R0,R1               AREA TO BE CLEARED\n         L     R1,@SIZE            LENGTH TO BE CLEARED\n         SLR   R15,R15             ZERO PAD AND 'FROM' LENGTH\n         MVCL  R0,R14              ZERO IT ALL\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         USING @DATA,R9\n         SPACE 1\n         AGO   .ESTAE1\n***********************************************************************\n*                                                                     *\n*         SET UP ESTAE ENVIRONMENT                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         STM   R10,R11,@BASES\n         MVC   ESTAEL(ESTAELL),ESTAEM\n         LA    R8,ESTAEX\n         ESTAE (R8),TERM=YES,PARAM=(R9),MF=(E,ESTAEL)\n         LTR   R15,R15\n         BNZ   EXIT12\n.ESTAE1  ANOP\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         GET OPTIONAL PREFIX FOR PANEL NAMES                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   PFX,=C'ULX'\n         L     R1,0(,R2)\n         LH    R15,0(,R1)          LENGTH OF PARM\n         LTR   R15,R15             IS THERE A PARM\n         BZ    NOPARM              NO, BRANCH\n         CH    R15,=H'4'           LONG ENOUGH FOR PFX=\n         BL    NOPARM              NO\n         CLC   2(4,R1),=C'PFX='    IS IT PFX=\n         BNE   NOPARM              NO\n         SH    R15,=H'4'           GET LENGTH OF PFX\n         BZ    NOPARM              BRANCH IF NULL\n         CH    R15,=H'3'           IS REMAINING LENGTH 3\n         BNE   NOPARM              NO\n         MVC   PFX,6(R1)           YES, CHANGE PANEL AND MESSAGE NAMES\nNOPARM   EQU   *\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*         GET ENTRY POINT OF ISPLINK                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPEXEC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MAKE 'ULXV01' A DEFINED VARIABLE                            *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXV01)'\n         MVC   VOLUME,=CL6' '\n         LA    R0,VOLUME\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SEE WHAT CONTROL-ERRORS-RETURN DOES                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n*              THIS KEEPS US IN CONTROL IF THE END KEY (PFK3) IS USED\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,ERRORS\n         MVC   ERRORS,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,RETURN\n         MVC   RETURN,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P01 AND WAIT FOR REPLY                        *\n*                                                                     *\n***********************************************************************\n         SPACE\nPAN01    LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP01'\n         MVC   PANEL(3),PFX\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n*              QUESTION: WHAT HAPPENS IF REPLY IS PFK 3?\nERRX01   LTR   R15,R15\n         BZ    OKPAN01\n*        LA    R1,=C'P01FAIL'\n*        LA    R0,7\n*        SVC   93\n         B     EXIT0\nOKPAN01  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         REPEAT DISPLAY IF NOTHING ENTERED                           *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLC   VOLUME,=CL6' '\n         BE    PAN01\n         MVC   VOLSER,VOLUME\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FIND THE UCB FOR THE SPECIFIED VOLUME                       *\n*                                                                     *\n***********************************************************************\n         SPACE\nREREAD   EQU   *\n         L     R15,16              CVTPTR\n         TM    116(R15),X'80'      MVS/XA                          .XA.\n         BO    UCBXA               YES                             .XA.\n         L     R15,40(,R15)        CVTILK2\n         B     *+8\nFINDLOOP LA    R15,2(,R15)\n         LH    R1,2(,R15)          GET UCB ADDRESS\n         N     R1,=A(X'0000FFFF')  CANCEL EFFECTS OF LEFTMOST BIT\n         BZ    FINDLOOP            IGNORE IF ADDRESS IS ZERO\n         C     R1,=A(X'0000FFFF')  END OF LIST\n         BE    FAILUCB\n         CLI   18(R1),X'20'        DASD\n         BNE   FINDLOOP            NO\n         TM    3(R1),X'80'         ONLINE?\n         BZ    FINDLOOP            NO\n         CLC   28(6,R1),VOLSER     VOLUME MATCH?\n         BNE   FINDLOOP            NO\n         B     FOUNDUCB\nUCBXA    EQU   *                                                   .XA.\n         LA    R1,DEVPARMS                                         .XA.\n         LA    R14,DEVWORK                                         .XA.\n         ST    R14,0(,R1)                                          .XA.\n         XC    0(100,R14),0(R14)                                   .XA.\n         LA    R14,DEVCLASS                                        .XA.\n         ST    R14,4(,R1)                                          .XA.\n         MVI   0(R14),X'20'        UCB3DACC (DASD UCB'S)           .XA.\n         LA    R14,DEVUCBAD                                        .XA.\n         ST    R14,8(,R1)                                          .XA.\n         OI    8(R1),X'80'                                         .XA.\nUCBLOOPX LA    R1,DEVPARMS                                         .XA.\n         L     R14,16              CVTPTR                          .XA.\n         L     R15,X'434'(,R14)    CVTUCBSC V(IOSVSUCB)            .XA.\n         BALR  R14,R15             CALL IOSVSUCB                   .XA.\n         LTR   R15,R15                                             .XA.\n         BNZ   FAILUCB                                             .XA.\n         L     R1,DEVUCBAD                                         .XA.\n         TM    3(R1),X'80'         ONLINE                          .XA.\n         BZ    UCBLOOPX                                            .XA.\n         CLC   28(6,R1),VOLSER     DOES VOLUME MATCH?              .XA.\n         BNE   UCBLOOPX            NO - BRANCH                     .XA.\n         SPACE\n***********************************************************************\n*                                                                     *\n*         UCB FOUND                                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\nFOUNDUCB MVC   DEVICE(4),16(R1)    COPY UCBTYPE\n         NI    DEVICE+1,255-X'20'  SET OFF SHARED DASD BIT\n         LA    R14,DEVICES\nDEVLOOP  CLI   0(R14),0\n         BE    DEVUNIT             UNKNOWN DEVICE TYPE\n         CLC   DEVICE(4),0(R14)\n         BE    DEVUNIT\n         LA    R14,12(,R14)\n         B     DEVLOOP\nDEVUNIT  MVC   UNITNAME,4(R14)\n         MVC   ALTCYL,10(R14)\n         MVC   CUU,13(R1)\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OBTAIN THE FORMAT-4 DSCB FROM THE VTOC                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,CAMLST\n         MVC   0(16,R1),OBTCAM4\n         LA    R15,F4KEY\n         MVI   0(R15),X'04'\n         MVC   1(43,R15),0(R15)\n         ST    R15,4(,R1)\n         LA    R0,VOLSER\n         ST    R0,8(,R1)\n         LA    R0,F4DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 4 READ OK\n         BNZ   FAILUCB             NO, GO FIND OUT WHY\n         SPACE\n***********************************************************************\n*                                                                     *\n*         INITIAL VALUES FOR READING EXTENTS                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R0,EXTENCE\n         ST    R0,EXTPTR\n         SR    R0,R0\n         ST    R0,EXTCNT\n         ST    R0,BINCALLS\n         ST    R0,BINFIVES\n         XC    LRGEXT,LRGEXT\n         MVI   ORDER,C'L'          ORDERED BY LOCATION\n         MVC   MY99TXDD+6(8),=CL8' '\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CHECK FOR INDEXED VTOC                                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R7,F4DSCB\n         USING F4DSECT,R7\n         CLC   UNITNAME(4),=C'3340'\n         BNE   NOT3340\n         CLC   DS4DEVSZ(2),=H'698' IF 70MB 3340\n         BNE   NOT3340                THEN\n         MVC   ALTCYL,=H'2'           2 ALT CYL\nNOT3340  EQU   *\n         LH    R1,DS4DEVSZ\n         SH    R1,ALTCYL\n         STH   R1,CYLVOL\n         MVC   TRKCYL,DS4DEVSZ+2\n         MVC   DSRECF4,DS4DSREC\n         MVC   VTOCE,DS4VTOCE\n         MVC   VTOCI,DS4VTOCI\n         TM    DS4VTOCI,1\n         BO    INDEXED\n         SPACE\n         MVC   CCHHR(4),DS4VTOCE+2\n         MVI   CCHHR+4,2           FMT5'S START WITH RECORD 2\n         DROP  R7\n         SR    R3,R3\n         SR    R4,R4\n         SPACE\n***********************************************************************\n*                                                                     *\n*         NOT INDEXED - READ FORMAT 5 DSCB'S                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nF5OLOOP  LA    R1,CAMLST\n         MVC   0(16,R1),OBTCAM5\n         LA    R15,CCHHR\n         ST    R15,4(,R1)\n         LA    R0,VOLSER\n         ST    R0,8(,R1)\n         LA    R0,F5DSCB\n         ST    R0,12(,R1)\n         OBTAIN (1)\n         LTR   R15,R15             WAS FORMAT 5 READ OK\n         BNZ   FAILUCB             NO, GO FIND OUT WHY\n         SPACE\n         LA    R0,1\n         A     R0,BINFIVES\n         ST    R0,BINFIVES\n         SPACE\n         LA    R7,F5DSCB\n         USING F5DSECT,R7\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY EXTENTS TO AREA CONTAINING ALL EXTENTS                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   DS5FMTID(90),DS5FMTID+1  ALL 26 IN A ROW\n         LA    R14,DS5AVEXT        POINT TO FIRST OF 26\n         SR    R1,R1               COUNTER\n         L     R15,EXTPTR\n         LA    R0,26               NUMBER OF EXTENTS IN RECORD\n         MVI   DOUBLE+2,0\nF5ILOOP  CLC   0(5,R14),=X'0000000000' NULL ENTRY\n         BE    F5INXT              YES, IGNORE\n         MVC   0(5,R15),0(R14)\n         MVC   DOUBLE(2),2(R14)    CYLS\n         AH    R3,DOUBLE\n         MVC   DOUBLE+3(1),4(R14)  TRKS\n         AH    R4,DOUBLE+2\n         CLC   LRGEXT,2(R14)\n         BNL   *+10\n         MVC   LRGEXT,2(R14)\n         LA    R15,5(,R15)\n         LA    R1,1(,R1)           COUNT\nF5INXT   LA    R14,5(,R14)\n         BCT   R0,F5ILOOP\nF5IDONE  ST    R15,EXTPTR\n         A     R1,EXTCNT           ADD COUNT IN R1\n         ST    R1,EXTCNT            TO TOTAL COUNT\nF5IMORE  MVC   CCHHR,DS5PTRDS      POINT TO NEXT FORMAT5\n         CLC   CCHHR,=X'0000000000' IS THERE ANOTHER?\n         BNE   F5OLOOP             YES, GO READ IT\n         DROP  R7                  F5DSECT\n         MVC   VOLUME,VOLSER\n         ST    R3,BINCYL\n         ST    R4,BINTRK\n         B     HAVEXT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ALLOCATE THE VOLUME                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\nINDEXED  LA    R1,MY99RBP\n         LA    R15,MY99RB\n         ST    R15,0(,R1)\n         OI    0(R1),X'80'\n         XC    0(20,R15),0(R15)\n         MVC   0(3,R15),=X'140140'\n         LA    R14,MY99TUPL\n         ST    R14,8(,R15)\n*\n         LA    R15,MY99TXDD\n         ST    R15,0(,R14)\n         MVC   0(14,R15),=X'0055000100084040404040404040' DALRTDDN\n*\n         LA    R15,MY99TXUN\n         ST    R15,4(,R14)\n         MVC   0(06,R15),=X'001500010003'                 DALUNIT\n         MVC   6(3,R15),CUU\n         SPACE\n         LA    R15,MY99TXVL\n         ST    R15,8(,R14)\n         MVC   0(06,R15),=X'001000010006'                 DALVLSER\n         MVC   6(6,R15),VOLSER\n         SPACE\n         LA    R15,MY99TXST\n         ST    R15,12(,R14)\n         MVC   0(07,R15),=X'00040001000108'               DALSTATS\n         SPACE\n         LA    R15,MY99TXFC\n         ST    R15,16(,R14)\n         MVC   0(04,R15),=X'001C0000'                     DALCLOSE\n         OI    16(R14),X'80'\n         SPACE\n         LA    R1,MY99RBP\n         SVC   99\n         SPACE\n         LTR   R15,R15\n         BNZ   FAILUCB\n         OI    SWA,SWA20           ALLOCATED\n         SPACE\n***********************************************************************\n*                                                                     *\n*         OPEN THE VTOC, TO BUILD A DEB                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R7,DYNDCBW\n         MVC   0(DYNDCBL,R7),DYNDCBM\n         MVC   DDNAM(8,R7),MY99TXDD+6\n         LA    R1,DYNJFCB\n         LA    R15,DYNEXL\n         ST    R1,0(,R15)\n         MVI   0(R15),X'87'\n         STCM  R15,7,EXLST+1(R7)\n         MVI   OPEN,X'80'\n         SPACE\n         RDJFCB ((R7)),MF=(E,OPEN)\n         SPACE\n         LTR   R15,R15\n         BNZ   FAILUCB\n         MVI   DYNJFCB,X'04'\n         MVC   DYNJFCB+1(43),DYNJFCB\n         OI    DYNJFCB+52,X'08'    DO NOT WRITE BACK DURING OPEN\n         MVI   OPEN,X'80'\n         OPEN  ((R7),INPUT),TYPE=J,MF=(E,OPEN)\n         OI    SWA,SWA10           OPENED\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CVAFDSM TO GET NUMBER OF DSCBS AVAILABLE              *\n*                                                                     *\n***********************************************************************\n         SPACE\n         L     R7,DEBAD(,R7)\n         MVC   CVAFDSM(CVAFDSML),CVAFDSMM\n         CVAFDSM ACCESS=MAPDATA,MAP=VTOC,COUNT=YES,CTAREA=CTAREA,      +\n               DEB=(R7),                                               +\n               MAPRCDS=NO,IOAREA=NOKEEP,BRANCH=NO,MF=(E,CVAFDSM)\n         LA    R7,DYNDCBW\n         ST    R15,CVAFDSRC\n         SR    R14,R14\n         IC    R14,CVAFDSM+7\n         ST    R14,CVAFDSST\n         LTR   R15,R15\n         BZ    OKCTAREA\n         XC    CTAREA,CTAREA\nOKCTAREA EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SET UP EXTENT VARIABLES FOR FIRST CALL                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         XC    EXTENTS+1(2),EXTENTS+1\n         SR    R3,R3\n         SR    R4,R4\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CVAFDSM                                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n*             NOTE: THE INTEGRITY OF THE MAP RECORDS READ IS MAINTAINED\n*             ONLY IF THE VTOC IS ENQUEUED AND THE VOLUME IS RESERVED.\n*             THIS PROGRAM CANNOT DO THAT BECAUSE IT IS UNAUTHORIZED.\n         SPACE\nCVAFLOOP L     R7,DEBAD(,R7)\n         MVC   CVAFDSM(CVAFDSML),CVAFDSMM\n         MVI   EXTENTS,255\n         LA    R0,1\n         A     R0,BINCALLS\n         ST    R0,BINCALLS\n         CVAFDSM ACCESS=MAPDATA,MAP=VOLUME,COUNT=NO,EXTENTS=EXTENTS,   +\n               DEB=(R7),                                               +\n               MAPRCDS=NO,IOAREA=NOKEEP,BRANCH=NO,MF=(E,CVAFDSM)\n         LA    R7,DYNDCBW\n         ST    R15,CVAFRC\n         SR    R14,R14\n         IC    R14,7(,R1)          CVSTAT\n         ST    R14,BINSTAT         SAVE CVSTAT\n         LTR   R15,R15\n         BZ    OKEXTEN\n         CH    R15,=H'4'\n         BNE   CVAFERR1\n         CLI   7(R1),32\n         BNE   CVAFERR1\nOKEXTEN  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         COPY EXTENTS TO AREA CONTAINING ALL EXTENTS                 *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R14,EXTENTS+1\n         SR    R1,R1               COUNTER\n         L     R15,EXTPTR\n         SR    R0,R0\n         IC    R0,EXTENTS          NUMBER OF EXTENTS REQUESTED\n         MVI   DOUBLE+2,0\nEXTLOOP  CR    R1,R0               HAVE WE GOT THEM ALL\n         BE    EXTDONE             YES, BRANCH\n         CLC   0(5,R14),=X'0000000000' END OF DATA\n         BE    EXTEOD\n         MVC   0(5,R15),0(R14)\n         MVC   DOUBLE(2),2(R14)    CYLS\n         AH    R3,DOUBLE\n         MVC   DOUBLE+3(1),4(R14)  TRKS\n         AH    R4,DOUBLE+2\n         CLC   LRGEXT,2(R14)\n         BNL   *+10\n         MVC   LRGEXT,2(R14)\n         LA    R15,5(,R15)\n         LA    R1,1(,R1)\n         LA    R14,5(,R14)\n         B     EXTLOOP\nEXTEOD   ST    R15,EXTPTR\n         A     R1,EXTCNT\n         ST    R1,EXTCNT\n         CLI   CVAFRC+3,4\n         BE    EXTGOT\n         B     CVAFERR2            RC 0 BUT NULL EXTENT FOUND\nEXTDONE  ST    R15,EXTPTR\n         A     R1,EXTCNT\n         ST    R1,EXTCNT\n         CLI   CVAFRC+3,0\n         BNE   CVAFERR3            RC 4-32 BUT NO NULL EXTENT\nEXTMORE  SH    R15,=H'5'           POINT TO LAST EXTENT PROCESSED\n         MVC   EXTENTS+1(2),0(R15) SET BEGINNING RTA FOR NEXT REQUEST\n         B     CVAFLOOP\nEXTGOT   ST    R3,BINCYL\n         ST    R4,BINTRK\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CLOSE AND UNALLOCATE                                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R8,DYNCLOSX\nDYNCLOSE TM    SWA,SWA20           ALLOCATED\n         BZR   R8                  NO, SKIP CLOSE-AND-UNALLOCATE\n         MVI   CLOSE,X'80'\n         CLOSE ((R7)),MF=(E,CLOSE)\n         NI    SWA,255-SWA20\n         NI    SWA,255-SWA10\n         BR    R8\nDYNCLOSX EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MAKE MORE DEFINED VARIABLES                                 *\n*                                                                     *\n***********************************************************************\n         SPACE\nHAVEXT   TM    SWA,SWA80           BEEN HERE BEFORE?\n         BO    DEFINED             YES, BYPASS\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXV02)'\n         LA    R0,WRKNEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXOPT)'\n         LA    R0,WRKOPT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'1'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXUNIT)'\n         LA    R0,WRKUNIT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'6'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCYL)'\n         LA    R0,WRKCYL\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTRK)'\n         LA    R0,WRKTRK\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXEXT)'\n         LA    R0,WRKEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLRGC)'\n         LA    R0,WRKLRGC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLRGT)'\n         LA    R0,WRKLRGT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXATOT)'\n         LA    R0,WRKATOT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXLTOT)'\n         LA    R0,WRKLTOT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXPCU)'\n         LA    R0,WRKPCTU\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCPV)'\n         LA    R0,WRKCPV\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTPC)'\n         LA    R0,WRKTPC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSREC)'\n         LA    R0,WRKDSREC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSROS)'\n         LA    R0,WRKDSROS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSRIX)'\n         LA    R0,WRKDSRIX\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXNOTE)'\n         LA    R0,WRKNOTE\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'60'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDSMRC)'\n         LA    R0,WRKDSMRC\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXSTAT)'\n         LA    R0,WRKSTAT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXDDNAM)'\n         LA    R0,WRKDDNAM\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXCALLS)'\n         LA    R0,WRKCALLS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXFIVES)'\n         LA    R0,WRKFIVES\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'7'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXTRACS)'\n         LA    R0,WRKTRACS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXVTOC1)'\n         LA    R0,WRKVTOCE+4\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(ULXVTOC2)'\n         LA    R0,WRKVTOCE+12\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         OI    SWA,SWA80\nDEFINED  EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         MOVE DATA FROM MESSAGE AREA TO DEFINED FIELDS               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   VOLUME,VOLSER\n         MVC   WRKUNIT,UNITNAME\n         MVC   WRKDDNAM,MY99TXDD+6\n         MVI   WRKNOTE,C' '\n         MVC   WRKNOTE+1(L'WRKNOTE-1),WRKNOTE\n         SPACE\n         LH    R1,DSRECF4\n         BAL   R8,LJ7\n         MVC   WRKDSREC,WORK\n         MVC   WRKDSROS,WORK\n         MVC   WRKDSRIX,=CL7'N/A'\n         TM    VTOCI,1             INDEXED VTOC?\n         BNO   GOTDSCBS            NO\n         L     R15,CVAFDSRC        GET RESULT OF CVAF REQUEST\n         LTR   R15,R15             WAS CVAF SUCCESSFUL\n         BZ    IXVTOC              YES, BRANCH\n         MVC   WRKDSRIX,=CL7'ERR'\n         B     GOTDSCBS            AND SHOW VALUE FROM FORMAT 4\nIXVTOC   L     R1,CTAREA           YES, GET AVAILABLE DSCB'S\n         BAL   R8,LJ7\n         MVC   WRKDSREC,WORK\n         MVC   WRKDSRIX,WORK\nGOTDSCBS EQU   *\n         SPACE\n         L     R1,BINTRK\n         BAL   R8,LJ7\n         MVC   WRKTRK,WORK\n         SPACE\n         L     R1,BINCYL\n         BAL   R8,LJ7\n         MVC   WRKCYL,WORK\n         SPACE\n         L     R1,EXTCNT\n         BAL   R8,LJ7\n         MVC   WRKEXT,WORK\n         SPACE\n         LH    R1,LRGEXT\n         BAL   R8,LJ7\n         MVC   WRKLRGC,WORK\n         SPACE\n         SR    R1,R1\n         IC    R1,LRGEXT+2\n         BAL   R8,LJ7\n         MVC   WRKLRGT,WORK\n         SPACE\n         L     R1,BINCYL\n         MH    R1,TRKCYL\n         A     R1,BINTRK\n         ST    R1,TRKTOTA\n         BAL   R8,LJ7\n         MVC   WRKATOT,WORK\n         SPACE\n         LH    R1,CYLVOL\n         MH    R1,TRKCYL           COMPUTE TRACKS PER VOLUME\n         LR    R15,R1              GET TRACKS PER VOLUME\n         S     R15,TRKTOTA         MINUS TRKS AVAILABLE = TRKS USED\n         M     R14,=F'100'         TIMES 100\n         DR    R14,R1              COMPUTE PERCENTAGE USED\n         LR    R1,R15\n         BAL   R8,LJ7\n         MVC   WRKPCTU,WORK\n         SPACE\n         LH    R1,LRGEXT\n         MH    R1,TRKCYL\n         SR    R0,R0\n         IC    R0,LRGEXT+2\n         AR    R1,R0\n         BAL   R8,LJ7\n         MVC   WRKLTOT,WORK\n         SPACE\n         L     R1,CVAFRC\n         BAL   R8,LJ7\n         MVC   WRKDSMRC,WORK\n         SPACE\n         L     R1,BINSTAT\n         BAL   R8,LJ7\n         MVC   WRKSTAT,WORK\n         SPACE\n         LH    R1,CYLVOL\n         BAL   R8,LJ7\n         MVC   WRKCPV,WORK\n         SPACE\n         LH    R1,TRKCYL\n         BAL   R8,LJ7\n         MVC   WRKTPC,WORK\n         SPACE\n         L     R1,BINCALLS\n         BAL   R8,LJ7\n         MVC   WRKCALLS,WORK\n         SPACE\n         L     R1,BINFIVES\n         BAL   R8,LJ7\n         MVC   WRKFIVES,WORK\n         SPACE\n         TM    VTOCI,1             INDEXED\n         BO    NONA                YES, LEAVE CVAF VALUES ALONE\n         MVC   WRKDSMRC,=CL8'N/A'\n         MVC   WRKSTAT,=CL8'N/A'\n         MVC   WRKDDNAM,=CL8'N/A'\nNONA     EQU   *\n         SPACE\n         LA    R1,VTOCE\n         LA    R15,WRKVTOCE\n         LA    R0,10\n         BAL   R14,HEXCVT\n         SPACE\n         MVC   DOUBLE(8),VTOCE+2\n         LH    R14,DOUBLE+2        HH\n         LH    R0,TRKCYL           TRACKS PER CYL\n         LA    R1,1\nCOUNTEM  CLC   DOUBLE,DOUBLE+4\n         BNL   COUNTED\n         LA    R1,1(,R1)           COUNT\n         LA    R14,1(,R14)         ADD 1 TO HH\n         CR    R14,R0              IF BEYOND LAST\n         BNE   NOTLAST                THEN\n         LH    R15,DOUBLE               ADD 1\n         AH    R15,=H'1'                  TO\n         STH   R15,DOUBLE                   CC\n         SR    R14,R14                  ZERO HH\nNOTLAST  STH   R14,DOUBLE+2\n         B     COUNTEM\nCOUNTED  LR    R14,R1\n         BAL   R8,LJ7\n         MVC   WRKTRACS,WORK\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P02 AND WAIT FOR ENTER                        *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   WRKNEXT,=CL6' '\nPAN02    MVI   WRKOPT,C' '\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP02'\n         MVC   PANEL(3),PFX\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\nERRX02   CLC   WRKNEXT,=CL6' '     ANOTHER VOLUME ENTERED?\n         BE    ERRX02A             NO\n         MVC   VOLSER,WRKNEXT\n         B     REREAD\nERRX02A  EQU   *\n         CH    R15,=H'8'           PF3\n*        BE    PAN01               YES, BACK TO PANEL 1\n         BE    EXIT0               YES, END APPLICATION\n         CLI   WRKOPT,C'L'         LIST REQUESTED\n         BE    LISTEXT             YES\n         CLI   WRKOPT,C'S'         LIST REQUESTED\n         BE    LISTEXT             YES\n         B     PAN02               REPEAT PANEL 2\nLISTEXT  L     R6,EXTCNT       GET NUMBER OF EXTENTS\n         LTR   R6,R6           ARE THERE ANY EXTENTS\n         BZ    ERRZEX          DONE IF NOT\n         C     R6,=F'1'            ONLY ONE EXTENT?\n         BE    SORTED              YES, BYPASS SORT\n         CLI   WRKOPT,C'L'     REQUEST SORT BY LOCATION?\n         BE    SORTL           YES, BRANCH\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SORT EXTENT TABLE IN DESCENDING ORDER BY SIZE               *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   ORDER,C'S'          ALREADY IN SIZE ORDER\n         BE    SORTED              YES, BRANCH\n         MVI   ORDER,C'S'\n         LA    R7,EXTENCE\n         BCTR  R6,0                NUMBER OF EXTENTS MINUS 1\n         MH    R6,=H'5'            SIZE OF TABLE, MINUS 5 BYTES\n         LA    R8,EXTENCE(R6)      POINT TO LAST ENTRY IN TABLE\nSORTO    SR    R0,R0\n         LA    R7,EXTENCE\nSORTI    CLC   2(3,R7),7(R7)\n         BNL   SORT2\n         XC    0(5,R7),5(R7)       SWAP\n         XC    5(5,R7),0(R7)        SWAP\n         XC    0(5,R7),5(R7)         SWAP\n         BCTR  R0,0                A SWAP TOOK PLACE\nSORT2    LA    R7,5(,R7)           NEXT PAIR\n         CR    R7,R8               IS THIS THE LAST ONE?\n         BL    SORTI               NO, LOOP\n         LTR   R0,R0               ANY SWAPS DURING THAT PASS?\n         BZ    SORTED              NO, WE ARE DONE\n         B     SORTO\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SORT EXTENT TABLE IN ASCENDING ORDER BY LOCATION            *\n*                                                                     *\n***********************************************************************\n         SPACE\nSORTL    CLI   ORDER,C'L'          ALREADY IN LOCATION ORDER\n         BE    SORTED              YES, BRANCH\n         MVI   ORDER,C'L'\n         LA    R7,EXTENCE\n         BCTR  R6,0                NUMBER OF EXTENTS MINUS 1\n         MH    R6,=H'5'            SIZE OF TABLE, MINUS 5 BYTES\n         LA    R8,EXTENCE(R6)      POINT TO LAST ENTRY IN TABLE\nSORTLO   SR    R0,R0\n         LA    R7,EXTENCE\nSORTLI   CLC   0(2,R7),5(R7)\n         BNH   SORTL2\n         XC    0(5,R7),5(R7)       SWAP\n         XC    5(5,R7),0(R7)        SWAP\n         XC    0(5,R7),5(R7)         SWAP\n         BCTR  R0,0                A SWAP TOOK PLACE\nSORTL2   LA    R7,5(,R7)           NEXT PAIR\n         CR    R7,R8               IS THIS THE LAST ONE?\n         BL    SORTLI              NO, LOOP\n         LTR   R0,R0               ANY SWAPS DURING THAT PASS?\n         BZ    SORTED              NO, WE ARE DONE\n         B     SORTLO\nSORTED   EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CREATE EXTENT TABLE                                         *\n*                                                                     *\n***********************************************************************\n         SPACE\n         TM    SWA,SWA08           BEEN HERE BEFORE?\n         BO    DEFINED2            YES, BYPASS\n         OI    SWA,SWA08\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBS)'   SCROLL VARIABLE\n         LA    R0,TBS\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'4'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBSEQ)'\n         LA    R0,TBSEQ+1\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBEXT)'\n         LA    R0,TBEXT\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'10'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBCYL)'\n         LA    R0,TBCYL\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBTRA)'\n         LA    R0,TBTRA\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'3'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBTRK)'\n         LA    R0,TBTRK\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'5'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBBEG)'\n         LA    R0,TBBEG\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\n         MVC   VDEFNAME,=CL10'(TBEND)'\n         LA    R0,TBEND\n         MVC   VDEFFMT,=CL8'CHAR'\n         MVC   VDEFLEN,=F'8'\n         BAL   R8,VDEFINE\n         SPACE\nDEFINED2 EQU   *\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBCREATE'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         MVC   TABLNAME,=CL8'ULXT01'\n         ST    R0,4(,R1)\n         LA    R0,KEYNAMES\n         MVC   KEYNAMES,=CL10'(TBSEQ)'\n         ST    R0,8(,R1)\n         LA    R0,VARNAMES\n         MVC   VARNAMES,=CL37'(TBEXT TBCYL TBTRA TBTRK TBBEG TBEND)'\n         ST    R0,12(,R1)\n         LA    R0,NOWRITE\n         MVC   NOWRITE,=CL8'NOWRITE'\n         ST    R0,16(,R1)\n         LA    R0,REPLACE\n         MVC   REPLACE,=CL8'REPLACE'\n         ST    R0,20(,R1)\n         OI    20(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         CH    R15,=H'4'\n         BH    ERRTC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FORMAT DATA FOR A ROW OF THE TABLE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\n* LOOP TO FORMAT EXTENTS FOR ISPF TABLE\n         L     R7,EXTCNT\n         LA    R6,EXTENCE\n         SR    R5,R5\nNXTROW   A     R5,=F'1'\n         CVD   R5,DOUBLE\n         MVC   TBSEQ,=X'402020202120'\n         ED    TBSEQ,DOUBLE+5\n         SPACE\n         LR    R1,R6\n         LA    R0,5\n         LA    R15,TBEXT\n         BAL   R14,HEXCVT\n         SPACE\n         MVC   DOUBLE(2),2(R6)\n         LH    R1,DOUBLE\n         BAL   R8,RJ7BZ\n         MVC   TBCYL,WORK+3\n         SPACE\n         SR    R1,R1\n         IC    R1,4(,R6)\n         BAL   R8,RJ7BZ\n         MVC   TBTRA,WORK+5\n         SPACE\n         MVC   DOUBLE(2),2(R6)\n         LH    R1,DOUBLE\n         MH    R1,TRKCYL\n         SR    R0,R0\n         IC    R0,4(,R6)\n         AR    R1,R0\n         ST    R1,BINTK\n         BAL   R8,RJ7BZ\n         MVC   TBTRK,WORK+3\n         SPACE\n         XC    DOUBLE(2),DOUBLE\n         MVC   DOUBLE+2(2),0(R6)\n         SR    R0,R0\n         L     R1,DOUBLE\n         LH    R15,TRKCYL\n         DR    R0,R15\n         STH   R1,BINBEG\n         STH   R0,BINBEG+2\n         SPACE\n         LA    R1,BINBEG\n         LA    R0,4\n         LA    R15,TBBEG\n         BAL   R14,HEXCVT\n         SPACE\n         XC    DOUBLE(2),DOUBLE\n         MVC   DOUBLE+2(2),0(R6)\n         SR    R0,R0\n         L     R1,DOUBLE\n         A     R1,BINTK\n         BCTR  R1,0\n         LH    R15,TRKCYL\n         DR    R0,R15\n         STH   R1,BINEND\n         STH   R0,BINEND+2\n         SPACE\n         LA    R1,BINEND\n         LA    R0,4\n         LA    R15,TBEND\n         BAL   R14,HEXCVT\n         SPACE\n***********************************************************************\n*                                                                     *\n*         FILL IN A ROW OF THE TABLE\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBADD'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         MVC   TABLNAME,=CL8'ULXT01'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         CH    R15,=H'4'\n         BH    ERRTA\n         SPACE\n         LA    R6,5(,R6)\n         BCT   R7,NXTROW       REPEAT IF ANY MORE EXTENTS\n         SPACE\n***********************************************************************\n*                                                                     *\n*         POINT CRP (CURRENT ROW POINTER) TO TOP                      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBTOP'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY PANEL P03 AND WAIT FOR END                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nPAN03    LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'TBDISPL'\n         ST    R0,0(,R1)\n         LA    R0,TABLNAME\n         ST    R0,4(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL8'ULXP03'\n         MVC   PANEL(3),PFX\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n         LTR   R15,R15\n         BZ    PAN03\n         B     PAN02\n         SPACE\n***********************************************************************\n*                                                                     *\n*         SUBROUTINES\n*                                                                     *\n***********************************************************************\n         SPACE\nLJUST    CLI   WORK,C' '\n         BNER  R8\n         MVC   WORK(7),WORK+1\n         MVI   WORK+7,C' '\n         B     LJUST\n         SPACE\nLJ7      CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  WORK(7),DOUBLE+4(4)\n         LA    R0,6\nLJ7B     CLI   WORK,C'0'\n         BNER  R8\n         MVC   WORK(6),WORK+1\n         MVI   WORK+6,C' '\n         BCT   R0,LJ7B\n         BR    R8\n         SPACE\nRJ7      CVD   R1,DOUBLE\n         MVC   WORK(8),=X'4020202020202120'\n         ED    WORK(8),DOUBLE+4\n         BR    R8\n         SPACE\nRJ7BZ    CVD   R1,DOUBLE\n         MVC   WORK(8),=X'4020202020202020'\n         ED    WORK(8),DOUBLE+4\n         BR    R8\n         SPACE\nHEXCVT   MVC   1(1,R15),0(R1)      MOVE BYTE\n         UNPK  0(3,R15),1(2,R15)   UNPACK\n         TR    0(2,R15),HEXTAB-240\n         LA    R15,2(,R15)         INCREMENT OUTPUT PTR\n         LA    R1,1(,R1)           INCREMENT INPUT PTR\n         BCT   R0,HEXCVT           DECREMENT LENGTH, THEN LOOP\n         MVI   0(R15),C' '         BLANK THE TRAILING BYTE\n         BR    R14                 RETURN TO CALLER\n         SPACE\n***********************************************************************\n*                                                                     *\n*         VDEFINE SERVICE\n*                                                                     *\n***********************************************************************\n         SPACE\nVDEFINE  LA    R1,PARAMS\n         ST    R0,8(,R1)           STORE ADDRESS OF FIELD\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VDEFINE'\n         ST    R0,0(,R1)\n         LA    R0,VDEFNAME\n         ST    R0,4(,R1)\n         LA    R0,VDEFFMT\n         ST    R0,12(,R1)\n         LA    R0,VDEFLEN\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         BR    R8\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ERROR ROUTINES\n*                                                                     *\n***********************************************************************\n         SPACE\nFAILUCB  MVC   MSG,=CL8'ULXM011A' NOT MOUNTED\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR1 CLI   CVAFRC+3,4\n         BNE   CVAFERR4\n         CLI   BINSTAT+3,10\n         BNE   CVAFERR4\n         MVC   MSG,=CL8'ULXM012A' NONINDEXED VTOC\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR2 MVC   MSG,=CL8'ULXM012B' ZERO ENTRY BUT RC WAS ZERO\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR3 MVC   MSG,=CL8'ULXM012C' END OF DATA RC BUT NO ZERO ENTRY\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nCVAFERR4 MVC   MSG,=CL8'ULXM012D' UNEXPECTED RC FROM CVAFDSM\n         BAL   R8,DYNCLOSE\n         B     ERRM01\n         SPACE\nERRZEX   MVC   MSG,=CL8'ULXM011C' NO EXTENTS\n         B     ERRM01\n         SPACE\nERRTC    MVC   MSG,=CL8'ULXM011D' TBCREATE ERROR\n         B     ERRM01\n         SPACE\nERRTA    MVC   MSG,=CL8'ULXM011E' TBADD ERROR\n         B     ERRM01\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RE-DISPLAY LAST PANEL WITH MESSAGE                          *\n*                                                                     *\n***********************************************************************\n         SPACE\nERRM01   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         ST    R0,4(,R1)\n         LA    R0,MSG\n         MVC   MSG(3),PFX\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         CLI   PANEL+5,C'1'\n         BE    ERRX01\n         B     ERRX02\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RETURN TO CALLER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         L     R0,ISPEXEC          GET ENTRY POINT OF ISPLINK\n         LTR   R0,R0               WAS IT LOADED\n         BZ    NODEL               NO, BYPASS DELETE\n         DELETE EP=ISPLINK\n         XC    ISPEXEC,ISPEXEC\nNODEL    EQU   *\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)        RESTORE REGISTERS\n         L     14,12(,R13)         LOAD RETURN ADDRESS\n         BR    14                  RETURN\n         SPACE\n         AGO   .ESTAE2\n         SPACE\n************************************************************\n*                                                          *\n*         ESTAE EXIT                                       *\n*                                                          *\n************************************************************\n         SPACE\nESTAEX   DC    0H'0'\n         USING *,R15\n         CH    R0,ESTAE12\n         BNE   ESTASDWA\n         SPACE\n*              REG 0 IS 12\n*              STORAGE NOT AVAILABLE FOR SDWA\n*              REG  1  -  CONTAINS ABEND COMPLETION CODE\n*              REG  2  -  ADDRESS OF PARAM LIST FROM ESTAE MACRO\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 3-13  UNPREDICTABLE\n         SPACE\n         STM   14,12,ESTAEWSV+12-@DATA(R2)\n         LR    R9,R2               RESTORE R9\n         ST    R1,ESTAEWCC\n         MVI   ESTAEWSW,C'N'\n         B     ESTAEXC\nESTAE12  DC    H'12'\n         SPACE\nESTASDWA EQU   *\n         SPACE\n*              REG  1  -  ADDRESS OF SDWA\n*              REG 13  -  ADDRESS OF 72 BYTE REGISTER SAVE AREA\n*              REG 14  -  RETURN ADDRESS\n*              REG 15  -  ENTRY ADDRESS\n*              REGS 2-12  UNPREDICTABLE\n         SPACE\n         STM   14,12,12(R13)\n         L     R9,0(,R1)           RESTORE R9\n         MVC   ESTAEWCC(4),4(R1)   SAVE ABEND CODE FROM SDWA\n         MVC   ESTAEWPS(8),8(R1)   SAVE PSW FROM SDWA\n         MVC   ESTAEWSV+12(60),12(R13)\n         MVI   ESTAEWSW,C'S'\n         ST    R1,ESTAEWWA         SAVE SDWA ADDRESS\n         SPACE\n*              COMMON TO EITHER TYPE OF ENTRY.\n*              (AS LONG AS YOU DONT REFER TO SDWA)\n         SPACE\n         MVC   MESSAGE(38),=C'ABEND XXXXXXXX BASE XXXXXX PSW XXXXXX '\n         LA    R1,ESTAEWCC\n         LA    R15,MESSAGE+6\n         LA    R0,4\n         BAL   R14,HEXCVT\n         LA    R1,@BASES+1\n         LA    R15,MESSAGE+20\n         LA    R0,3\n         BAL   R14,HEXCVT\n         LA    R1,ESTAEWPS+5\n         LA    R15,MESSAGE+31\n         LA    R0,3\n         BAL   R14,HEXCVT\n         LA    R1,MESSAGE\n         LA    R0,37\n         SVC   93\n         LA    R1,MESSAGE\n         LA    R0,38\n         O     R1,=A(X'80000000')\n         SVC   93\n         SPACE\nESTAEXC  EQU   *\n         LM    R10,R11,@BASES      RESTORE BASE REGISTER\n         DROP  R15                 DROP R15 ENTRY ADDRESS\n         SPACE\nESTAEX00 EQU   *\n         CLI   ESTAEWSW,C'S'       SDWA PRESENT?\n         BNE   ESTANOWA            NO - BRANCH\n         L     R1,ESTAEWWA         YES, RESTORE SDWA ADDRESS\n         MVI   X'FC'(R1),0         SET SDWARCDE = 0\n         LM    14,12,12(13)\n         BR    R14\n         SPACE\nESTANOWA LM    14,12,ESTAEWSV+12\n         SLR   R15,R15             CONTINUE TERMINATION\n         BR    R14\n.ESTAE2  ANOP\n         DROP  R9,R10,R11          DROP ALL\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\nOBTCAM4  CAMLST SEARCH,2,3,4\n         SPACE\nOBTCAM5  CAMLST SEEK,2,3,4\n         SPACE\nCVAFDSMM CVAFDSM MF=L\nCVAFDSML EQU   *-CVAFDSMM\n         SPACE\n*                UCBTYP      UNIT    ALTCYL\nDEVICES  DC    X'3010200F',C'3390  ',AL2(1)\n         DC    X'3010200E',C'3380  ',AL2(1)\n         DC    X'3010200C',C'3375  ',AL2(1)\n         DC    X'3050200B',C'3350  ',AL2(5)\n         DC    X'3050200D',C'3330-1',AL2(7)\n         DC    X'30502009',C'3330  ',AL2(7)\n         DC    X'30582009',C'3330V ',AL2(7) NOT SURE ABOUT ALT CYL\n         DC    X'3040200A',C'3340  ',AL2(1) 70MB VERSION HAS 2 ALT\n         DC    X'30502007',C'2305-2',AL2(1)\n         DC    X'00000000',C'?     ',AL2(1)\n         SPACE\nESTAEM   ESTAE 1,MF=L\nESTAELL  EQU   *-ESTAEM\n         SPACE\nNULL     DC    CL44'(NULL)'\nHEXTAB   DC    C'0123456789ABCDEF' TRANSLATE TABLE\nDYNDCBM  DCB   DDNAME=DYNAM,DSORG=PS,MACRF=(R),BLKSIZE=140\nDYNDCBL  EQU   *-DYNDCBM\n         DC    0D'0'\n         SPACE\nDDNAM    EQU   40   DCB OFFSET\nEXLST    EQU   36   DCB OFFSET\nDEBAD    EQU   44   DCB OFFSET\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nWORK     DS    CL8                 WORK AREA\nDOUBLE   DS    D                   DOUBLEWORD WORK AREA\nLINKAREA DS    2F                  LINK MACRO WORK AREA\nFLAG     DS    F\n@BASES   DS    3F                  BASE REGISTERS\nISPEXEC  DS    F\nPARAMS   DS    8F\nSERVICE  DS    CL8\nPANEL    DS    CL8\nMSG      DS    CL8\nPFX      DS    CL3\nVDEFNAME DS    CL10\nVDEFFMT  DS    CL8\nVDEFLEN  DS    F\nERRORS   DS    CL8\nRETURN   DS    CL8\nTABLNAME DS    CL8\nKEYNAMES DS    CL10\nVARNAMES DS    CL37\nNOWRITE  DS    CL8\nREPLACE  DS    CL8\nTBS      DS    CL4\nTBSEQ    DS    CL6\nTBEXT    DS    CL10,X\nTBCYL    DS    CL5\nTBTRA    DS    CL3\nTBTRK    DS    CL5\nTBBEG    DS    CL8,X\nTBEND    DS    CL8,X\nCAMLST   DS    4F\nCCHHR    DS    CL5\nVOLUME   DS    CL6\nVOLSER   DS    CL6\nDEVICE   DS    CL4\nUNITNAME DS    CL6\nCUU      DS    CL3\nS78MSG   DS    CL30\nTRKTOTA  DS    F\nTRKTOTV  DS    F\nCYLVOL   DS    H\nALTCYL   DS    H\nTRKCYL   DS    H\nDSRECF4  DS    H\nWRKNEXT  DS    CL7\nWRKOPT   DS    CL1\nSWA      DS    C\nSWA80    EQU   X'80'\nSWA40    EQU   X'40'\nSWA20    EQU   X'20'\nSWA10    EQU   X'10'\nSWA08    EQU   X'08'\nVTOCE    DS    CL10\nVTOCI    DS    C\nORDER    DS    C\n         DS    0F\nF4KEY    DS    CL44\nF4DSCB   DS    CL140\nF5DSCB   DS    CL140\nWRKUNIT  DS    CL6\nWRKCYL   DS    CL4\nWRKTRK   DS    CL4\nWRKEXT   DS    CL4\nWRKLRGC  DS    CL4\nWRKLRGT  DS    CL4\nWRKATOT  DS    CL7\nWRKPCTU  DS    CL7\nWRKLTOT  DS    CL7\nWRKCPV   DS    CL7\nWRKTPC   DS    CL7\nWRKDSREC DS    CL7\nWRKDSROS DS    CL7\nWRKDSRIX DS    CL7\nWRKDSMRC DS    CL7\nWRKSTAT  DS    CL7\nWRKDDNAM DS    CL8\nWRKCALLS DS    CL7\nWRKFIVES DS    CL7\nWRKVTOCE DS    CL21\nWRKTRACS DS    CL4\nWRKNOTE  DS    CL60\nCTAREA   DS    F\nCVAFDSRC DS    F\nCVAFDSST DS    F\nCVAFRC   DS    F\nBINCYL   DS    F\nBINTRK   DS    F\nBINLRGC  DS    F\nBINLRGT  DS    F\nBINSTAT  DS    F\nBINCALLS DS    F\nBINFIVES DS    F\nBINTK    DS    F\nBINBEG   DS    F\nBINEND   DS    F\nOPEN     DS    0F\nCLOSE    DS    F\nDYNDCBW  DS    0F,(DYNDCBL)X\nDYNEXL   DS    F\nCVAFDSM  DS    0F,(CVAFDSML)X\nDYNJFCB  DS    0F,176X\nDEVPARMS DS    3F\nDEVCLASS DS    C\nDEVUCBAD DS    F\nDEVWORK  DS    25F\n*\nMY99RBP  DS    F       REQUEST BLOCK POINTER\nMY99RB   DS    5F      REQUEST BLOCK\nMY99TUPL DS    5A      TEXT UNIT POINTERS\nMY99TXDD DS    3H,CL8  RETURN DDNAME\nMY99TXUN DS    3H,CL3  UNIT\nMY99TXVL DS    3H,CL6  VOLSER\nMY99TXST DS    3H,CL1  DISP=SHR\nMY99TXFC DS    2H      FREE=CLOSE\n*\nESTAEL   DS    0F,(ESTAELL)X\nESTAEWSV DS    18F\nESTAEWWA DS    F\nESTAEWCC DS    F\nESTAEWPS DS    2F\nESTAEWSW DS    C\nMESSAGE  DS    CL38\n         DS    0D\nEXTCNT   DS    F\nEXTPTR   DS    F\nLRGEXT   DS    XL3,X\nEXTENTS  DS    X,255CL5\nEXTENCE  DS    2600XL5             100 FORMAT 5'S\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nF4DSECT  DSECT\n*        IECSDSL1 4\nDS4IDFMT DS    CL1\nDS4HPCHR DS    XL5\nDS4DSREC DS    XL2\nDS4HCCHH DS    XL4\nDS4NOATK DS    XL2\nDS4VTOCI DS    XL1\nDS4NOEXT DS    XL1\n         DS    XL2\nDS4DEVSZ DS    XL4\n         DS    XL8\nDS4DEVDT DS    XL1\nDS4DEVDB DS    XL1\n         DS    XL29\nDS4VTOCE DS    XL10\n         SPACE\nF5DSECT  DSECT\n*        IECSDSL1 5\nDS5KEYID DS    XL4\nDS5AVEXT DS    XL5     FIRST\nDS5EXTAV DS    XL35    SEVEN MORE\nDS5FMTID DS    XL1\nDS5MAVET DS    XL90    EIGHTEEN MORE\nDS5PTRDS DS    XL5\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXM01": {"ttr": 8199, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x14\\x00\\x14\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 20, "newlines": 20, "modlines": 0, "user": "BG@PRC"}, "text": "ULXM010  ' '\n\nULXM011A 'VOLUME NOT MOUNTED'\n\nULXM011B 'INVALID OPTION'\n\nULXM011C 'NO EXTENTS'\n\nULXM011D 'TBCREATE ERROR'\n\nULXM011E 'TBADD ERROR'\n\nULXM012A 'NONINDEXED VTOC'\n\nULXM012B 'RC 0 BUT NULL EXTENT FOUND'\n\nULXM012C 'RC 4-32 BUT NO NULL EXTENT'\n\nULXM012D 'CVAFDSM FAILED'\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ULXP01": {"ttr": 8201, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\n\\x00\\n\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 10, "newlines": 10, "modlines": 0, "user": "BG@PRC"}, "text": "%--------------------------- DISK SPACE INFORMATION ----------------------------\n+COMMAND ===>_ZCMD                                                     +\n%\n%Display information about available space on a disk volume.\n%\n%     + VOLUME ===>_ULXV01+\n%\n)INIT\n  .CURSOR = ULXV01\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXP02": {"ttr": 8203, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x1e\\x00\\x1e\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 30, "newlines": 30, "modlines": 0, "user": "BG@PRC"}, "text": "%--------------------------- DISK SPACE INFORMATION ----------------------------\n+ COMMAND =======>_ZCMD                                                +\n+ NEXT VOLUME ===>_ULXV02 +\n+                              Volume ---%&ULXV01\n+                              Device ---%&ULXUNIT\n+\n+    Tracks per cylinder -------------%&ULXTPC  +Cylinders ------%&ULXCPV\n+\n+    Cylinders available -------------%&ULXCYL\n+    Tracks available ----------------%&ULXTRK\n+    Total Tracks available ----------%&ULXATOT +Percent used ---%&ULXPCU\n+\n+    Extents of free space -----------%&ULXEXT+Enter L here to List Extents\n+                                              S for Sorted-by-Size  ===>_ULXOPT\n+    Largest single extent:\n+      Cylinders ---------------------%&ULXLRGC\n+      Tracks ------------------------%&ULXLRGT\n+      Total Tracks ------------------%&ULXLTOT\n+\n+    DSCB's available in VTOC --------%&ULXDSREC\n+       According to Format 4 ---%&ULXDSROS +VTOC tracks ---%&ULXTRACS\n+       According to Index ------%&ULXDSRIX +VTOC Extent ---%&ULXVTOC1%&ULXVTOC2\n)INIT\n  .CURSOR = ULXV02\n  .HELP = ULXH02\n  &ZHTOP = ULXH01     /* TUTORIAL TABLE OF CONTENTS */\n  &ZHINDEX = ULXH00   /* TUTORIAL INDEX - 1ST PAGE  */\n)PROC\n  VER (&UCVOPT,LIST,L,S,MSG=ULXM011B)\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ULXP03": {"ttr": 8205, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x11\\x00\\x11\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 17, "newlines": 17, "modlines": 0, "user": "BG@PRC"}, "text": ")ATTR\n  @ TYPE(OUTPUT) INTENS(LOW)\n)BODY\n%------------- DISK SPACE INFORMATION ------------------------------------------\n+ COMMAND =======>_ZCMD                                        %SCROLL ===>_TBS\n+ Volume%&ULXV01 +Device%&ULXUNIT +Trk/Cyl%&ULXTPC +Extents%&ULXEXT\n+\n+      XXXX = Rel Trk of 1st Trk    YYYY = No. of Cyls    ZZ = No. of Trks\n+\n+SEQNO XXXXYYYYZZ     CYLINDERS   TRACKS   TOTAL     BEGIN CCHH  END CCHH\n+----- ----------     ---------   ------  -------    ---------- ----------\n)MODEL\n@Z    @Z                @Z        @Z      @Z         @Z         @Z\n)INIT\n  .ZVARS = '(TBSEQ TBEXT TBCYL TBTRA TBTRK TBBEG TBEND)'\n  &TBS = HALF\n)END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "XBE": {"ttr": 8207, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x02I\\x02I\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 585, "newlines": 585, "modlines": 0, "user": "BG@PRC"}, "text": "         TITLE '   X B E L 0 1   '\n***********************************************************************\n*                                                                     *\n*        'XBEL01' - AN ISPF DIALOG SERVICES PROGRAM                   *\n*         FOR EXECUTING BROWSE OR EDIT.                               *\n*                                                                     *\n***********************************************************************\n         SPACE\n* WRITTEN BY BILL GODFREY, PRC INC.\n*  (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n* CURRENT INSTALLATION:\n*  NOAA (NATIONAL OCEANIC AND ATMOSPHERIC ADMINISTRATION),\n*  5200 AUTH ROAD, CAMP SPRINGS, MARYLAND 20746\n* DATE WRITTEN. NOV 27 1985.\n* DATE UPDATED. APRIL 25 1991.\n* ATTRIBUTES. RE-ENTRANT.\n* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.\n* REQUIRED PANELS.   NONE, BUT USES PANEL ISREDM02 FOR EDIT RECOVERY.\n* REQUIRED MESSAGES. NONE.\n* REQUIRED CLISTS.   NONE.\n* MODULES LOADED. ISPEXEC.\n* DESCRIPTION.\n*  THIS SPF DIALOG PROGRAM CALLS BROWSE OR EDIT\n*  USING THE DATA SET NAME SPECIFIED IN THE PARM FIELD.\n*  THE SAME THING COULD BE DONE WITH A CLIST, BUT BY USING\n*  A PROGRAM WE AVOID THE OVERHEAD OF OPENING SYSPROC.\n*\n*  THE PARM FIELD CONTAINS:\n*          1) 'B' OR 'E'\n*          2) COMMA\n*          3) A FULLY QUALIFIED DATA SET NAME,\n*  PLUS, OPTIONALLY,\n*          4) COMMA AND OPTIONAL VOLUME,\n*          5) COMMA AND OPTIONAL PROFILE,\n*          6) COMMA AND OPTIONAL MACRO\n*\n***********************************************************************\n*\n*  SPECIAL CASE:\n*  IF THE FIRST CHARACTER OF THE DSNAME IS A PERIOD, THE PERIOD\n*  WILL BE DROPPED AND THE REST OF THE DSNAME WILL BE PASSED TO\n*  BROWSE/EDIT WITHOUT QUOTES, AND BROWSE/EDIT WILL INSERT THE\n*  THE TSO USER PREFIX (IF THERE IS ONE) AT THE FRONT OF THE\n*  DSNAME.  THIS IS IN CASE YOUR PANEL SPECIFIES:\n*          PGM(XBEL01) PARM(E,&ZPREFIX..LIB.CNTL)\n*  AND &ZPREFIX IS NULL, WHICH IT IS WHEN PROFILE NOPREFIX.\n*\n***********************************************************************\n*\n*    SPECIFYING THE MEMBER NAME IN THE ZCMD FIELD.\n*\n*    IF THE DSNAME IS A PDS WITH NO MEMBER SPECIFIED, BROWSE/EDIT\n*    WILL DISPLAY A MEMBER SELECTION LIST.  YOU CAN, HOWEVER\n*    SPECIFY THE MEMBER ANOTHER WAY.  YOUR PANEL )PROC SECTION\n*    COULD SPECIFY:\n*\n*     &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n*                   C,'PGM(XBEL01) PARM(E,&ZPREFIX..LIB.CLIST) NOCHECK'\n*                   J,'PGM(XBEL01) PARM(E,&ZPREFIX..LIB.CNTL) NOCHECK'\n*                 ' ',' '\n*                   X,'EXIT'\n*                   *,'?' )\n*     &ZTRAIL = .TRAIL\n*\n*    THIS ALLOWS YOU TO SPECIFY THE MEMBER NAME BY APPENDING\n*    A PERIOD AND THE MEMBER NAME TO THE SELECTION FIELD\n*    REPRESENTED BY &ZCMD.  IN THE ABOVE EXAMPLE, IF YOU SELECTED\n*    'J' IN THE &ZCMD FIELD, YOU WOULD GET A MEMBER SELECTION LIST\n*    FOR THE PDS LIB.CLIST, BUT IF YOU ENTERED 'J.ABC' INSTEAD\n*    YOU WOULD GET MEMBER ABC DIRECTLY.\n*\n***********************************************************************\n*\n*  LOG OF CHANGES:\n*    06JUN88 - USE ZTRAIL INSTEAD OF XBEMEM\n*              FIX BUG IN VOLUME: 1ST BCT AFTER PARMVOL WAS TO PARMDSN\n*              ADD EDIT PROFILE AND MACRO.\n*    24MAY90 - ADD RECOVERY SUPPORT.\n*    25APR91 - NO CODE CHANGES. MINOR COMMENT CHANGES.\n*\n         SPACE\nXBEL01   START\n         USING *,R10,R11\n         B     @PROLOG-*(,15)\n         DC    AL1(11),CL11'XBEL01 1.0 '\n         DC    CL16' &SYSDATE &SYSTIME '\n@SIZE    DC    0F'0',AL1(1),AL3(@DATAL)\n@PROLOG  STM   14,12,12(R13)       SAVE REGISTERS\n         LR    R10,R15             LOAD BASE REGISTER\n         LA    R15,1\n         LA    R11,4095(R15,R10)\n         LR    R2,R1               PARM POINTER\n         L     R0,@SIZE            WORKAREA SUBPOOL AND LENGTH\n         GETMAIN R,LV=(0)\n         LR    R9,R1               INITIALIZE WORKAREA POINTER\n         SPACE 1\n         ST    R13,4(,R9)          CHAIN SAVEAREA\n         ST    R9,8(,R13)          CHAIN SAVEAREA\n         LR    R13,R9              UPDATE SAVEAREA POINTER\n         USING @DATA,R9\n         XC    ISPEXEC,ISPEXEC\n         MVI   DSNAME,C' '\n         MVC   DSNAME+1(55),DSNAME\n         MVC   VOLUME,DSNAME\n         MVC   BLANKS,DSNAME\n         MVC   PROFILE,BLANKS\n         MVC   MARCO,BLANKS\n         MVC   DSNAME+56(8),DSNAME\n         L     R1,0(,R2)           POINT TO PARM\n         LH    R0,0(,R1)           GET LENGTH\n         LTR   R0,R0               IF LENGTH ZERO\n         BZ    EXIT12                 THEN EXIT\n         LA    R1,2(,R1)           POINT TO FIRST BYTE OF PARM\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET 'B' OR 'E' FROM PARM                                    *\n*                                                                     *\n***********************************************************************\n         SPACE\n         MVC   BORE,=CL8'BROWSE'\n         CLI   0(R1),C'B'\n         BE    GOTBORE\n         CLI   0(R1),C'E'\n         BNE   EXIT12\n         MVC   BORE,=CL8'EDIT'\nGOTBORE  LA    R1,1(,R1)\n         BCT   R0,COMMA1\n         B     EXIT12              JUST 1 BYTE IN PARM\nCOMMA1   CLI   0(R1),C','\n         BNE   EXIT12\n         LA    R1,1(,R1)\n         BCT   R0,GETDSN\n         B     EXIT12              JUST 2 BYTES IN PARM\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET DSNAME AND VOLUME FROM PARM                             *\n*                                                                     *\n***********************************************************************\n         SPACE\nGETDSN   MVI   DSNAME,C''''        LEADING QUOTES\n         MVI   QUOTES,C''''        CLOSING QUOTES\n         LA    R14,DSNAME+1\n         CLI   0(R1),C'.'          IS FIRST CHARACTER A PERIOD\n         BNE   QUOTED              NO\n         BCTR  R14,0               YES, BACK UP OVER LEADING QUOTES\n         MVI   QUOTES,C' '         CLOSING BLANK\n         LA    R1,1(,R1)           POINT PAST PERIOD\n         BCT   R0,QUOTED           REDUCE LENGTH BY 1 AND BRANCH\n         B     EXIT12              PARM WAS JUST A PERIOD\nQUOTED   LA    R15,54(,R14)        MAX LENGTH 54\nPARMDSN  CLI   0(R1),C','          IT THIS A COMMA\n         BE    PARMCOM2            YES, FINISHED WITH DSNAME\n         CR    R14,R15             TOO LONG?\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMDSN\n         MVC   0(1,R14),QUOTES     CLOSE QUOTES\n         B     PARMX\nPARMCOM2 MVC   0(1,R14),QUOTES     CLOSE QUOTES\n         LA    R1,1(,R1)           POINT PAST COMMA\n         BCT   R0,PARMNXT2\n         B     PARMX               NOTHING FOLLOWS COMMA\nPARMNXT2 LA    R14,VOLUME\n         LA    R15,6(,R14)         MAX LENGTH 6\nPARMVOL  CLI   0(R1),C','          COMMA\n         BE    PARMCOM3            YES, END OF NAME\n         CR    R14,R15             TOO LONG\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMVOL\n         B     PARMX\nPARMCOM3 LA    R1,1(,R1)           POINT PAST COMMA\n         BCT   R0,PARMNXT3\n         B     PARMX               NOTHING FOLLOWS COMMA\nPARMNXT3 LA    R14,PROFILE\n         LA    R15,8(,R14)         MAX LENGTH 8\nPARMPRO  CLI   0(R1),C','          COMMA\n         BE    PARMCOM4            YES, END OF NAME\n         CR    R14,R15             TOO LONG\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMPRO\n         B     PARMX               NOTHING FOLLOWS COMMA\nPARMCOM4 LA    R1,1(,R1)           POINT PAST COMMA\n         BCT   R0,PARMNXT4\n         B     PARMX\nPARMNXT4 LA    R14,MARCO\n         LA    R15,8(,R14)         MAX LENGTH 8\nPARMMAC  CLI   0(R1),C','          COMMA\n         BE    PARMX               YES, END OF NAME\n         CR    R14,R15             TOO LONG\n         BE    EXIT12              YES, EXIT\n         MVC   0(1,R14),0(R1)\n         LA    R1,1(,R1)\n         LA    R14,1(,R14)\n         BCT   R0,PARMMAC\nPARMX    CLI   DSNAME+1,C''''      WAS FIRST BYTE OF PARM A COMMA\n         BE    EXIT12              YES, ERROR\n         CLI   DSNAME+1,C' '       WAS FIRST BYTE OF PARM A COMMA\n         BE    EXIT12              YES, ERROR\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET ENTRY POINT OF ISPLINK                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LOAD  EP=ISPLINK,ERRET=EXIT12\n         ST    R0,ISPEXEC\n         SPACE\n***********************************************************************\n*                                                                     *\n*         ISSUE CONTROL-ERRORS-RETURN SO WE WILL MAINTAIN CONTROL     *\n*                                                                     *\n***********************************************************************\n         SPACE\n*              THIS KEEPS US IN CONTROL IF BROWSE/EDIT FAILS DUE TO\n*              DATA SET NOT FOUND OR MEMBER NOT FOUND (BROWSE).\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'CONTROL'\n         ST    R0,0(,R1)\n         LA    R0,ERRORS\n         MVC   ERRORS,=CL8'ERRORS'\n         ST    R0,4(,R1)\n         LA    R0,RETURN\n         MVC   RETURN,=CL8'RETURN'\n         ST    R0,8(,R1)\n         OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE VALUE OF 'ZTRAIL'                                   *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY'\n         ST    R0,0(,R1)\n*        LA    R0,=CL10'(XBEMEM)'\n         LA    R0,=CL10'(ZTRAIL)'\n         ST    R0,4(,R1)\n         LA    R0,MEMLEN\n         MVC   MEMLEN,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,MEMNAME\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF ZTRAIL CONTAINS A MEMBER NAME, APPEND IT TO THE DSN      *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CH    R15,=H'0'\n         BNE   NOMEM\n         L     R15,MEMLEN\n         LTR   R15,R15\n         BZ    NOMEM\n         LA    R1,DSNAME+56\nMEMA01   CLI   0(R1),C' '\n         BNE   MEMA02\n         BCT   R1,MEMA01\nMEMA02   SR    R0,R0\n         CLI   0(R1),C''''\n         BNE   MEMA03\n         BCTR  R0,0                INDICATE QUOTES PRESENT\n         BCTR  R1,0                POINT TO CHAR PRECEDING QUOTES\nMEMA03   CLI   0(R1),C')'          IS MEMBER SPECIFIED IN PARM\n         BE    EXIT12              YES, ERROR\n         MVI   1(R1),C'('          ADD OPEN PAREN\n         LA    R1,2(,R1)           POINT TO WHERE NAME WILL GO\n         BCTR  R15,0               MEMLEN MINUS 1 FOR EX\n         B     *+10\n         MVC   0(0,R1),MEMNAME     (EXECUTED)\n         EX    R15,*-6             MOVE MEMBER NAME\n         LA    R1,1(R15,R1)        POINT PAST MEMBER NAME\n         MVI   0(R1),C')'          CLOSE PARENS\n         LTR   R0,R0               WERE QUOTES PRESENT\n         BZ    *+8                 NO\n         MVI   1(R1),C''''         YES, PUT QUOTES BACK\nNOMEM    EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         IF EDIT, INVOKE EDIT RECOVERY                               *\n*            IF RECOVERY PENDING,                                     *\n*               DISPLAY PANEL ISREDM02                                *\n*               (USER WILL THEN ENTER A CHOICE)                       *\n*               COPY ZEDCMD TO CMDNAME                                *\n*               DEFER, CANCEL, OR PROCESS, DEPENDING ON CMDNAME       *\n*               CHECK FOR MORE RECOVERY PENDING                       *\n*                                                                     *\n***********************************************************************\n         SPACE\n         CLI   BORE,C'E'\n         BNE   EDRX\nEDRLOOP  LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,QUERY\n         MVC   QUERY,=CL8'QUERY'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF NOTHING PENDING\n         BZ    EDRX                   GO INVOKE EDIT\n         C     R15,=F'4'           IF RC NOT = 4 (PENDING)\n         BNE   EXIT12                 SEVERE ERROR\n         SPACE\n*               DISPLAY PANEL 'ISREDM02' TO GET THE USER'S DECISION\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'DISPLAY'\n         ST    R0,0(,R1)\n         LA    R0,PANEL\n         MVC   PANEL,=CL9'ISREDM02 '\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   EDRDEF\n         SPACE\n*              PANEL ISREDM02 COPIES THE USER'S RESPONSE IN ZCMD\n*              TO ZEDCMD, THEN ERASES ZCMD.\n*              NOW WE CALL ZCOPY TO GET THE VALUE IN ZEDCMD\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY'\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZEDCMD)'\n         ST    R0,4(,R1)\n         LA    R0,CMDLEN\n         MVC   CMDLEN,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,CMDNAME\n         ST    R0,12(,R1)\n         MVI   CMDNAME,C' '\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF USER ENTERED END\n         BNZ   EDRDEF                 DEFER\n         SPACE\n         L     R0,CMDLEN\n         LTR   R0,R0\n         BNZ   *+8\n         MVI   CMDNAME,C' '\n         SPACE\n         CLI   CMDNAME,C'D'        IF USER REPLIED DEFER\n         BE    EDRDEF                 DEFER\n         CLI   CMDNAME,C'C'        IF USER REPLIED CANCEL\n         BE    EDRCAN                 CANCEL\n         CLI   CMDNAME,C' '        IF USER HIT ANYTHING ELSE BUT ENTER\n         BNE   EDRDEF                 DEFER\n         SPACE\n         LA    R1,PARAMS           USER HIT ENTER, SO PROCESS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,PROCESS\n         MVC   PROCESS,=CL8'PROCESS '\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    EDRLOOP\n         C     R15,=F'4'\n         BNE   EXIT12\n         B     EDRLOOP\n         SPACE\nEDRDEF   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,DEFER\n         MVC   DEFER,=CL8'DEFER'\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF NOT SUCCESSFUL\n         BNZ   EXIT12                 SEVERE ERROR, GIVE UP\n         B     EDRLOOP             QUERY AGAIN IN CASE MULTIPLE PENDING\n         SPACE\nEDRCAN   LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'EDREC'\n         ST    R0,0(,R1)\n         LA    R0,CANCEL\n         MVC   CANCEL,=CL8'CANCEL '\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15             IF NOT SUCCESSFUL\n         BNZ   EXIT12                 SEVERE ERROR, GIVE UP\n         B     EDRLOOP             QUERY AGAIN IN CASE MULTIPLE PENDING\nEDRX     EQU   *\n         SPACE\n***********************************************************************\n*                                                                     *\n*         CALL THE BROWSE OR EDIT SERVICE                             *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,BORE\n         ST    R0,0(,R1)\n         LA    R0,DSNAME\n         ST    R0,4(,R1)\n         LA    R0,VOLUME\n         ST    R0,8(,R1)\n         CLI   BORE,C'B'\n         BE    ONLY3\n*              IF NEITHER PROFILE NOR MACRO ARE SPECIFIED, JUST PASS\n*              3 PARAMETERS, IN CASE IT'S AN OLDER ISPF.\n         CLI   PROFILE,C' '\n         BNE   EMORE\n         CLI   MARCO,C' '\n         BE    ONLY3\nEMORE    LA    R0,BLANKS PSWD\n         ST    R0,12(,R1)\n         LA    R0,BLANKS PANEL\n         ST    R0,16(,R1)\n         LA    R0,MARCO\n         ST    R0,20(,R1)\n         LA    R0,PROFILE\n         ST    R0,24(,R1)\n         OI    24(R1),X'80'\n         B     *+8\nONLY3    OI    8(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BZ    EXIT0\n         SPACE\n***********************************************************************\n*                                                                     *\n*         GET THE VALUE OF 'ZERRMSG'                                  *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'VCOPY'\n         ST    R0,0(,R1)\n         LA    R0,=CL10'(ZERRMSG)'\n         ST    R0,4(,R1)\n         LA    R0,ZERRMSL\n         MVC   ZERRMSL,=F'8'\n         ST    R0,8(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,12(,R1)\n         LA    R0,=CL7'MOVE'\n         ST    R0,16(,R1)\n         OI    16(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         LTR   R15,R15\n         BNZ   EXIT12\n         SPACE\n***********************************************************************\n*                                                                     *\n*         DISPLAY MESSAGE 'ZERRMSG' ON NEXT PANEL                     *\n*                                                                     *\n***********************************************************************\n         SPACE\n         LA    R1,PARAMS\n         LA    R0,SERVICE\n         MVC   SERVICE,=CL8'SETMSG'\n         ST    R0,0(,R1)\n         LA    R0,ZERRMSG\n         ST    R0,4(,R1)\n         OI    4(R1),X'80'\n         L     R15,ISPEXEC\n         BALR  R14,R15\n         B     EXIT12\n         SPACE\n***********************************************************************\n*                                                                     *\n*         RETURN TO CALLER                                            *\n*                                                                     *\n***********************************************************************\n         SPACE\nEXIT0    SR    R15,R15             RETURN CODE ZERO\n         B     EXIT\nEXIT12   LA    R15,12              RETURN CODE 12\nEXIT     LR    R2,R15              SAVE RETURN CODE\n         L     R0,ISPEXEC          GET ENTRY POINT OF ISPLINK\n         LTR   R0,R0               WAS IT LOADED\n         BZ    NODEL               NO, BYPASS DELETE\n         DELETE EP=ISPLINK\n         XC    ISPEXEC,ISPEXEC\nNODEL    EQU   *\n         LR    R1,R13              POINT R1 TO AREA TO BE FREED\n         L     R0,@SIZE            SUBPOOL AND LENGTH\n         L     R13,4(,R13)         RESTORE PREVIOUS SAVEAREA\n         FREEMAIN R,A=(1),LV=(0)\n         LR    R15,R2\n         LM    0,12,20(R13)        RESTORE REGISTERS\n         L     14,12(,R13)         LOAD RETURN ADDRESS\n         BR    14                  RETURN\n         SPACE\n************************************************************\n*                                                          *\n*        CONSTANTS                                         *\n*                                                          *\n************************************************************\n         SPACE\n         LTORG\n         SPACE\n************************************************************\n*                                                          *\n*        DSECTS                                            *\n*                                                          *\n************************************************************\n         SPACE\n@DATA    DSECT\n         DS    18F                 REGISTER SAVEAREA\nISPEXEC  DS    F\nPARAMS   DS    7F\nSERVICE  DS    CL8\nERRORS   DS    CL8\nRETURN   DS    CL8\nQUERY    DS    CL8\nDEFER    DS    CL8\nCANCEL   DS    CL8\nPROCESS  DS    CL8\nCMDLEN   DS    F\nCMDNAME  DS    CL8\nPANEL    DS    CL10\nBORE     DS    CL8\nDSNAME   DS    CL56,CL8\nVOLUME   DS    CL6\nPROFILE  DS    CL8\nMARCO    DS    CL8\nBLANKS   DS    CL8\nQUOTES   DS    CL1\nMEMLEN   DS    F\nMEMNAME  DS    CL8\nZERRMSL  DS    F\nZERRMSG  DS    CL8\n         DS    0D\n@DATAL   EQU   *-@DATA\n         SPACE\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XBE$": {"ttr": 8457, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x07\\x00\\x07\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "BG@PRC"}, "text": "//$USERID1 JOB (ACCT),'XBE'\n//ASMFCL EXEC ASMFCL,PARM.ASM='NODECK,OBJECT,NOXREF,NORLD',\n//             PARM.LKED='LIST,MAP,NCAL,RENT,REUS,REFR',\n//             COND.LKED=(0,NE,ASM)\n//ASM.SYSIN DD DSN=$USERID.SOURCE(XBE),DISP=SHR\n//LKED.SYSLMOD DD DSN=SYS2.CMDLIB(XBE),UNIT=,SPACE=,DISP=SHR\n//LKED.SYSIN   DD DUMMY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XBEDOC": {"ttr": 8459, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x91\\x11_\\x00\\x91\\x11_\\x10\\x00\\x00\\x8b\\x00\\x8b\\x00\\x00\\xc2\\xc7|\\xd7\\xd9\\xc3@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1991-04-25T00:00:00", "modifydate": "1991-04-25T10:00:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "BG@PRC"}, "text": "XBE - EXECUTE BROWSE OR EDIT                              APRIL 25 1991\n\nWRITTEN BY BILL GODFREY, PRC INC.\n (PRC INC. OF MCLEAN, VIRGINIA, WAS FORMERLY PLANNING RESEARCH CORP.)\n\nXBE IS A PROGRAM THAT IS EXECUTED FROM ISPF SELECTION PANELS\n\nXBE ALLOWS YOU TO SET UP ISPF SO THAT YOU CAN HAVE SHORT CODE WORDS\nFOR DATA SETS THAT YOU FREQUENTLY EDIT OR BROWSE.\n\nFOR EXAMPLE, WITH A SINGLE-LINE CHANGE TO THE PRIMARY OPTION PANEL,\nISR@PRIM, YOU WILL BE ABLE TO GO STRAIGHT TO THE EDIT MEMBER SELECTION\nLIST FOR SYS1.PROCLIB JUST BY ENTERING \"PR\" FROM THE PRIMARY OPTION\nPANEL, OR BY ENTERING \"=PR\" FROM ANYWHERE IN ISPF.  YOU WILL ALSO\nBE ABLE TO GO STRAIGHT INTO EDIT FOR A SPECIFIC MEMBER OF SYS1.PROCLIB\nJUST BY ENTERING \"PR.MEMBERNAME\" FROM THE PRIMARY OPTION MENU, OR BY\nENTERING \"=PR.MEMBERNAME\" FROM ANYWHERE IN ISPF.\n\nTHE LINE TO BE ADDED TO ISR@PRIM WOULD LOOK LIKE THIS:\n\n          PR,'PGM(XBE) PARM(E,SYS1.PROCLIB) NOCHECK'\n\nIF YOU ADD ANOTHER LINE LIKE THIS:\n\n        EDIT,'PGM(XBE) PARM(E,ISR.V2R3M0.ISRPLIB(ISR@PRIM)) NOCHECK'\n\nYOU WILL BE ABLE TO GO DIRECTLY INTO EDIT ON YOUR PRIMARY OPTION PANEL\nITSELF JUST BY ENTERING \"EDIT\" FROM THE PRIMARY OPTION MENU, OR \"=EDIT\"\nFROM ANYWHERE.  WE HAVE MANY OF OUR SELECTION PANELS SET UP TO GO INTO\nEDIT ON THEMSELVES JUST BY SPECIFYING 'EDIT' ON THAT PANEL.\n\nIF YOU ADD ANOTHER LINE LIKE THIS:\n\n                E,'PGM(XBE) PROC(E,&ZUSER..LIB.CNTL) NOCHECK'\n\nTHEN EACH USER ON THE SYSTEM CAN GET INTO A SPECIFIC MEMBER OF HIS OR\nHER LIB.CNTL LIBRARY FROM ANYWHERE IN ISPF JUST BY ENTERING\n\"=E.MEMBERNAME\".\n\nTO KEEP UPDATE ACTIVITY ON ISR@PRIM TO A MINIMUM, WE SET UP A NEW PANEL\nNAMED 'DSNP01' WHICH IS REACHED FROM THE PRIMARY MENU BY ENTERING 'D'.\nTHE PRIMARY OPTION PANEL HAS THIS LINE ADDED:\n\n                D,'PANEL(DSNP01)'\n\nTHE 'DSNP02' PANEL LOOKS LIKE THIS (IN ABBREVIATED FORM):\n\n\n%--------------------------  SYSTEM DATA SET MENU  -------------------\n%OPTION  ===>_ZCMD                                                             +\n%\n%      PA +SYS1.PARMLIB          % PA2 +SYS2.PARMLIB\n%      PR +SYS1.PROCLIB          % PR2 +SYS2.PROCLIB\n%\n%       X +EXIT          - RETURN TO PRIMARY OPTION MENU\n%\n+ENTER%END+COMMAND TO RETURN TO PRIMARY OPTION MENU\n%\n)INIT\n  .HELP = ISR00003\n)PROC\n  &ZSEL = TRANS( TRUNC (&ZCMD,'.')\n               PA,'PGM(XBE) PARM(E,SYS1.PARMLIB) NOCHECK'\n               PR,'PGM(XBE) PARM(E,SYS1.PROCLIB) NOCHECK'\n              PA2,'PGM(XBE) PARM(E,SYS2.PARMLIB) NOCHECK'\n              PR2,'PGM(XBE) PARM(E,SYS2.PROCLIB) NOCHECK'\n              JCL,'PGM(XBE) PARM(E,SYS2.JCLLIB) NOCHECK'\n             EDIT,'PGM(XBE) PARM(E,SYS2.PANELS(DSNP01)) NOCHECK'\n           BROWSE,'PGM(XBE) PARM(B,SYS2.PANELS(DSNP01)) NOCHECK'\n              ' ',' '\n                X,'EXIT'\n                *,'?' )\n  &ZTRAIL = .TRAIL\n)END\n\n\nNOTICE THAT YOUR MENU DOESN'T HAVE TO DISPLAY ALL OF THE AVAILABLE\nOPTIONS.  IN THE EXAMPLE ABOVE, \"JCL\" WILL STILL TAKE YOU INTO\nSYS2.JCLLIB EVEN THOUGH IT'S NOT SHOWN ON THE MENU. \"EDIT\" WILL\nPUT YOU INTO EDIT ON THE PANEL ITSELF.\n\nUNDER THIS KIND OF SETUP, YOU CAN GET INTO SYS1.PARMLIB BY ENTERING\n\"D.PA\" FROM THE PRIMARY MENU, OR BY ENTERING \"=D.PA\" FROM ANYWHERE.\nYOU CAN GET INTO A SPECIFIC MEMBER OF SYS1.PARMLIB BY ENTERING\n\"=D.PA.MEMBERNAME\".\n\nOF COURSE YOU CAN ALSO SEE THE \"SYSTEMS DATA SET\" MENU DEFINED ABOVE\nBY ENTERING \"D\" FROM THE PRIMARY MENU, AND THEN ENTER \"PA\" FROM THE\nNEW MENU TO GET INTO SYS1.PARMLIB.\n\nXBE REQUIRES TWO PARAMETERS, AND ACCEPTS THREE ADDITIONAL OPTIONAL\nPARAMETERS.  PARAMETERS ARE SEPARATED BY COMMAS. OMITTED PARAMETERS\nARE SPECIFIED BY CONSECUTIVE COMMAS.\n .  THE 1ST PARAMETER IS THE BROWSE-OR-EDIT OPTION \"B\" OR \"E\".\n .  THE 2ND PARAMETER IS THE DATA SET NAME, WHICH CAN BE A PDS,\n    PDS(MEMBERNAME), OR SEQUENTIAL DATA SET.\n .  THE 3RD PARAMETER IS AN OPTIONAL VOLUME, FOR UNCATALOGED DATA SETS\n    (OR FOR BYPASSING THE CATALOG OVERHEAD FOR CATALOGED DATA SETS).\n .  THE 4TH PARAMETER IS AN OPTIONAL PROFILE NAME FOR EDIT.\n .  THE 5TH PARAMETER IS AN OPTIONAL INITIAL MACRO FOR EDIT.\n\nAFTER INSTALLING XBE, AND AFTER INSTALLING ANY UPGRADE OR MAINTENANCE\nTO ISPF/PDF, IT IS A GOOD IDEA TO TEST THE EDIT RECOVERY FEATURE TO\nMAKE SURE THAT IT WORKS OK.\n1.  EDIT SOMETHING.\n2.  IN EDIT, SET RECOVERY ON IF IT ISN'T ALREADY.\n3.  MAKE SOME CHANGES, BUT DON'T SAVE.\n4.  STILL IN EDIT, ASK THE OPERATOR TO CANCEL YOUR SESSION\n    (OR GO TO LUNCH AND LET YOUR SESSION TIME OUT).\n5.  LOGON AGAIN, AND GO INTO ISPF/PDF.\n6.  EDIT SOMETHING USING AN OPTION THAT GOES THRU XBE.\n    IT DOESN'T HAVE TO BE THE SAME THING YOU WERE EDITING BEFORE.\n7.  IF YOU GET AN EDIT RECOVERY MENU ASKING WHAT YOU WANT\n    TO DO ABOUT THE STUFF YOU WERE EDITING BEFORE, IT'S WORKING,\n    AND YOU CAN SKIP THE REMAINING STEPS.\n8.  REPEAT STEPS 1 THRU 5. THEN, INSTEAD OF STEP 6, GO TO STEP 9.\n9.  EDIT SOMETHING BY SELECTING OPTION \"2\".\n    IF YOU GET AN EDIT RECOVERY MENU, THEN IBM'S EDIT RECOVERY IS OK,\n    AND SOMETHING IN XBE HAS TO BE CHANGED TO FIX THE PROBLEM, ALTHOUGH\n    EVERYTHING ELSE IN XBE SHOULD STILL WORK.\n    IF YOU DON'T GET AN EDIT RECOVERY MENU, THEN THE PROBLEM WITH\n    EDIT RECOVERY IS NOT RELATED TO XBE.  CORRECT IT AND REPEAT THE\n    WHOLE PROCESS.\n\n\nNOTE: WHENEVER YOU MAKE A CHANGE TO A PANEL THAT HAS ALREADY BEEN USED\nSINCE YOU ENTERED ISPF, THE CHANGE WILL NOT TAKE EFFECT UNTIL THE NEXT\nTIME YOU ENTER ISPF AFTER HAVING EXITED FROM IT.\n\n\n   * * *   W A R N I N G   * * *\nIT IS DANGEROUS TO CHANGE THE PRIMARY OPTION PANEL (ISR@PRIM) BECAUSE\nIF YOU MAKE A MISTAKE THAT LEAVES THE PANEL UNUSABLE, NOBODY ON THE\nSYSTEM WILL BE ABLE TO GET INTO ISPF, INCLUDING YOURSELF, SO IT CAN\nBE VERY DIFFICULT TO CORRECT THE PROBLEM.  SO BE SURE YOU HAVE A WAY\nOF RECOVERING ISR@PRIM QUICKLY, AND DON'T DEPEND ON USING ISPF TO DO\nTHE RECOVERY.  IF YOU ARE GOING TO ADD A SELF-EDIT OPTION TO THE\nPRIMARY OPTION PANEL, YOU BETTER HAVE SOME SECURITY ON THE PANEL\nLIBRARY THAT RESTRICTS WRITE-ACCESS.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT168/FILE168.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT168", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}