{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012610000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 117572, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE686.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 117572, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE686.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x03\\x03'", "DS1TRBAL": "b'\\xbdB'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xcd\\x00\\x00\\x04\\xcd\\x00\\x03\\x00\\x04'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x06\\x1f\\x01\\x06\\x06\\x1f\\x13(\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-03-02T00:00:00", "modifydate": "2006-03-02T13:28:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-472"}, "text": "REGULAR CBT TAPE - VERSION 472    FILE:  686\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT472.FILE686\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 5 MEMBERS COUNTED; CUMULATIVE SIZE IS 642 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   03/02/06    13:28:19    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x04!\\x0f\\x01\\x04!\\x0f\\x00\\x16\\x00\\r\\x00\\x0f\\x00\\x00\\xd5\\xd6\\xe3\\xc5@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2004-07-28T00:00:00", "modifydate": "2004-07-28T00:16:00", "lines": 13, "newlines": 15, "modlines": 0, "user": "NOTE"}, "text": "Single member PDS, XMIT'd - source only.  Some comments inline,\nmost people should know what to do with it.  I merely removed the\nMVS V4 code and added a check for GRS - enabled me to skip the\nRESERVE if it was active.\n\nWas going to do some more drastic surgery, but this should allow\ncurrent users to feel comfortable.\n\nHas been tested in both GRS active and GRS(NONE) environments,\nand appears to work as advertised.\n\nCheers  ...  Shane\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE2": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00Q\\x01\\x06\\x06\\x1f\\x01\\x06\\x06\\x1f\\x13&\\x00\\x13\\x00\\x13\\x00\\x00\\xe6\\xc8\\xc9\\xe3\\xc6\\xd9\\xc4@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2006-03-02T00:00:00", "modifydate": "2006-03-02T13:26:51", "lines": 19, "newlines": 19, "modlines": 0, "user": "WHITFRD"}, "text": "Subject:     SMFDUMP program on file 686 of the CBT tape\nFrom:        \"Whitford, Warren\" <Warren.Whitford@ErieInsurance.com>\nDate:        Wed, 1 Mar 2006 15:42:28 -0500\nTo:          <sbgolob@attglobal.net>\n\nSam,\n\nI downloaded the SMFDUMP program from File 686 of CBT468.  It\nworked ok except there was no message coming out saying the dump\nwas complete for the SMF dataset.  The manual says that for a\nmulti-line message you must clear the 3 high order bytes of\nregister zero.  After adding an instruction to clear register\nzero before the multi-line WTO, the messages started coming out.\nI added a SR R00,R00 after label DEQDONE.  It's just a one\ninstruction change.  Would you like me to send you my updated\ncopy of the program?\n\nWarren\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE686": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04H\\x00\\x00\\x01\\x06\\x06\\x1f\\x01\\x06\\x06\\x1f\\x13(\\x00\\x07\\x00\\x07\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf2@@@'", "ispf": {"version": "04.72", "flags": 0, "createdate": "2006-03-02T00:00:00", "modifydate": "2006-03-02T13:28:00", "lines": 7, "newlines": 7, "modlines": 0, "user": "CBT-472"}, "text": "//***FILE 686 is an SMFDUMP program which is very useful.  It was   *   FILE 686\n//*           distantly derived from an IBM SAMPLIB example which   *   FILE 686\n//*           has not been distributed by IBM for a long time.      *   FILE 686\n//*                                                                 *   FILE 686\n//*           Updated by Warren Whitford to fix the multi-line      *   FILE 686\n//*           WTO.                                                  *   FILE 686\n//*                                                                 *   FILE 686\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "SMFDUMP": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x00W\\x01\\x04!O\\x01\\x06\\x06\\x1f\\t\\x16\\x02O\\x02K\\x02O\\xe6\\xc8\\xc9\\xe3\\xc6\\xd9\\xc4@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "2004-08-01T00:00:00", "modifydate": "2006-03-02T09:16:57", "lines": 591, "newlines": 587, "modlines": 591, "user": "WHITFRD"}, "text": "SMFDUMP  CSECT\n         PRINT ON\nSMFDUMP  TITLE 'SMF DUMP ROUTINE TO DUMP - S M F - DATA SETS '\n*/* DOC: THIS PROGRAM USED TO DUMP NON-EMPTY SMF DATA SETS,\n*/*      THIS SAMPLE SMFDUMP IS FOR MVS VERSION 5.\n***********************************************************************\n*  CBT RELEASE OF CODE ORIGINALLY SHIPPED BY IBM IN SYS1.SAMPLIB      *\n*  SHIPMENT CEASED AFTER OS/390 2.7                                   *\n*                                                                     *\n*  THIS CODE CAN BE DRIVEN BY THE IEFU29 SHIPPED AS                   *\n*  SYS1.SAMPLIB(IEEU29), JUMPING TO THE CODE AT THE APPROPRIATE LABEL *\n*  .V5J2 OR V5J3.                                                     *\n*  THIS CAN BE ACHIEVED BY INSERTING IN IEFU29 AFTER THE CSECT CARD;  *\n*      AGO     .V5J2     (FOR EXAMPLE)                                *\n*                                                                     *\n*  UPDATES:                                       21/07/2004   SG     *\n*  - REMOVED MVS VERSION 4 DEPENDENT CODE                             *\n*  - MULTILINE WTO CORRECTED TO GENERATE REQUIRED INLINE              *\n*  - PRIOR TO ISSUEING \"RESERVE\", CHECK FOR GRS BEING ACTIVE.         *\n*    IF GRS IS ACTIVE, RESERVE IS *NOT* ISSUED/DEQ'D                  *\n*    IF GRS IS NOT ACTIVE, BUT THE (DASD) VOLUME IS GENNED AS         *\n*    NON-SHARED THE RESERVE (AND DEQ) IS AGAIN BYPASSED               *\n*  - IDENTIFIES ITSELF AS VERSION ONE RELEASE 10.                     *\n*  UPDATES:                                       01/03/2006   WW     *\n*  - ADDED INSTRUCTION AT DEQDONE TO CLEAR REG 0 TO ALLOW MULTI-LINE  *\n*    WTO TO COME OUT                                                  *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*             MODULE NAME = SMFDUMP                                   *\n*                                                                     *\n*             DESCRIPTIVE NAME =                                      *\n*                ROUTINE TO DUMP THE SMF DATASETS                     *\n*                                                                     *\n*             FUNCTION =                                              *\n*                DUMP ALL FULL AND ACTIVE SMF DATA SETS               *\n*                                                                     *\n*                OPERATION =                                          *\n*                   CHECK THAT DUMPOUT DD IS PRESENT.                 *\n*                   CHECK THAT DUMPOUT DEVICE TYPE IS DISK OR TAPE    *\n*                   IF ALTERNATE SMF DATASETS ARE ELIGIBLE TO         *\n*                     BE DUMPED, THEN DUMP THEM                       *\n*                   IF CURRENT SMF DATASET IS ELIGIBLE TO BE          *\n*                     DUMPED, THEN SWITCH SMF AND DUMP WHAT WAS       *\n*                     THE PRIMARY SMF DATASET                         *\n*                                                                     *\n*              NOTES =                                                *\n*                                                                     *\n*                 DEPENDENCIES = CHARACTER SET IS EBCDIC.  REASSEMBLE *\n*                    IF A DIFFERENT CHARACTER SET IS NEEDED.          *\n*                                                                     *\n*                 RESTRICTIONS =                                      *\n*                    SMF MUST BE ACTIVE.                              *\n*                    SMF DATA SETS MUST BE VSAM DATA SETS.            *\n*                    DUMPOUT DEVICE MUST BE DISK OR TAPE.             *\n*                                                                     *\n*                 REGISTER CONVENTIONS = STANDARD CONVENTIONS.        *\n*                    REGISTERS 0 TO 3  = WORK REGISTERS               *\n*                    REGISTERS 4 TO 6  = UNUSED                       *\n*                    REGISTER  7       = LINKAGE TO INTERNAL ROUTINES *\n*                    REGISTERS 8 TO 9  = UNUSED                       *\n*                    REGISTERS 10      = ADDRESSABILITY TO IEEMBRDS   *\n*                                       (RECORDING DATA SET BLOCKS)   *\n*                    REGISTER  11      = ADDRESSABILITY TO SMCA DSECT *\n*                    REGISTER  12      = ADDRESSABILITY TO SMFDUMP    *\n*                                        CSECT                        *\n*                    REGISTER  13      = SAVE AREA REGISTER           *\n*                    REGISTERS 14,15   = WORK REGISTERS               *\n*                                                                     *\n*                PATCH LABEL = PATCH (UNUSED AND INTIALIZED TO        *\n*                   BINARY ZEROES)                                    *\n*                                                                     *\n*             MODULE TYPE = PROCEDURE                                 *\n*                                                                     *\n*                PROCESSOR = ASM                                      *\n*                                                                     *\n*                MODULE SIZE = LESS THAN A PAGE                       *\n*                                                                     *\n*                ATTRIBUTES = KEY 8, NON-REENTRANT,                   *\n*                   PROBLEM PROGRAM STATE,AUTHORIZED                  *\n*                                                                     *\n*             ENTRY POINTS = SMFDUMP (ONLY ENTRY POINT)               *\n*                                                                     *\n*                LINKAGE = STANDARD OS LINKAGE CONVENTIONS            *\n*                                                                     *\n*             INPUT = NONE                                            *\n*                                                                     *\n*             OUTPUT = NONE                                           *\n*                                                                     *\n*             EXIT - NORMAL = AT PROGRAM END VIA BRANCH REGISTER 14   *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODES =                                       *\n*                   00 = NORMAL RETURN                                *\n*                   04 = NO SMF DATASETS AVAILABLE TO DUMP            *\n*                   08 = IFASMFDP RETURNED NON-ZERO RETURN CODE       *\n*                   12 = UNABLE TO SWITCH SMF RECORDING               *\n*                   16 = DUMPOUT DD MISSING OR UCB INVALID            *\n*                   20 = SMCA CANNOT BE LOCATED                       *\n*                                                                     *\n*             EXIT - ERROR = NONE - PROGRAM WILL RETURN WITH          *\n*                CODE IN REGISTER 15                                  *\n*                                                                     *\n*                OUTPUT = NONE                                        *\n*                                                                     *\n*                RETURN CODE = ZERO                                   *\n*                                                                     *\n*             EXTERNAL REFERENCES =                                   *\n*                                                                     *\n*                ROUTINES = IFASMFDP, IKJEFF18                        *\n*                                                                     *\n*                DATA AREAS = NONE                                    *\n*                                                                     *\n*                CONTROL BLOCKS = SMCA, CVT, GVT, UCB.                *\n*                                                                     *\n*                NOTE: IFASMFDP RUNS WITH RMODE=24 AND AMODE=24.      *\n*                      SMFDUMP RUNS WITH RMODE=24 BECAUSE IT MUST     *\n*                      PASS IFASMFDP A SAVEAREA IN 24-BIT ADDRESS     *\n*                      SPACE.                                         *\n*                      SMFDUMP RUNS WITH AMODE=31 TO ADDRESS THE      *\n*                      RDS CONTROL BLOCK.                             *\n*                                                                     *\n*             TABLES = NONE                                           *\n*                                                                     *\n*             MACROS = SAVE, DEVTYPE, WTO, MODESET, RETURN, DYNALLOC, *\n*                   STIMER, LINK, IEESMCA, IKJEFFDF.                  *\n*                                                                     *\n*             MESSAGES =                                              *\n*                DAIRFAIL SERVICE ROUTINE IS USED TO ISSUE MESSAGES.  *\n*                THOSE ISSUED BY THE COMMAND ARE FOUND FOLLOWING THE  *\n*                LABEL ERRMSGS.                                       *\n*                                                                     *\n*             ABEND CODES = NONE                                      *\n*                                                                     *\n*             ADDITIONAL INFORMATION:                                 *\n*                THE SMFDUMP PROGRAM WILL 'SWITCH' BETWEEN SMF        *\n*                DATA SETS AND WAIT FOR THE SWITCH TO OCCUR.          *\n*                THE WAIT TIME IS SET BY THE EQUATE STATEMENT         *\n*                'WAITLIM' AND MAY BE CHANGED BY ADDING 60 FOR        *\n*                EACH ADDITIONAL MINUTE OF WAIT TIME.                 *\n*                                                                     *\n***********************************************************************\n         EJECT\nSMFDUMP  CSECT ,                       CSECT NAME DECLARED\nSMFDUMP  AMODE 31                      ADDRESS MODE,TO ADDRESS RDS\nSMFDUMP  RMODE 24                      RESIDENCE MODE\n*\n*  CONSTANT EQUATES\n*\nCMDSVC   EQU   34                      SVC TO ISSUE COMMAND\nISITSP   EQU   X'80'                   HIGH-ORDER BIT CVTSMCA\n*                                        TO INDICATE SP SYSTEM\nDASD     EQU   X'20'                   UCB DEVICE TYPE FOR DASD DEVICES\nTAPE     EQU   X'80'                   UCB DEVICE TYPE FOR TAPE DEVICES\nWAITLIM  EQU   3600                    60 SECONDS/MINUTE\n*                                          FOR 60 MINUTES\n*\nK0       EQU   0                       CONSTANT 0\nK1       EQU   1                       CONSTANT 1\nK2       EQU   2                       CONSTANT 2\nK4       EQU   4                       CONSTANT 4\nK8       EQU   8                       CONSTANT 8\nK12      EQU   12                      CONSTANT 12\nK15      EQU   15                      CONSTANT 15\nK16      EQU   16                      CONSTANT 16\nK20      EQU   20                      CONSTANT 20\n*\n* REGISTER EQUATES\n*\nR00      EQU   00\nR01      EQU   01\nR02      EQU   02\nR03      EQU   03\nR04      EQU   04\nR05      EQU   05\nR06      EQU   06\nR07      EQU   07\nR08      EQU   08\nR09      EQU   09\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         EJECT\n         SAVE  (14,12),,SMFDUMP_&SYSDATE SAVE REGISTERS\n         USING SMFDUMP,R12             SET UP BASE ADDRESSABILITY\n         LR    R12,R15                 LOAD BASE REG WITH ENTRY POINT\n         LA    R14,SAVE                GET ADDRESS OF REGISTER SAVE\n         ST    R13,K4(R14)             SAVE CALLER'S SAVE AREA ADDR\n         ST    R14,K8(R13)             SAVE MY SAVE AREA ADDRESS\n         LR    R13,R14                 LOAD SAVE AREA ADDRESS\n*\n* ISSUE SMFDUMP PROGRAM STARTED MESSAGE\n*\n         WTO   MF=(E,MSG000)           ISSUE STARTED MESSAGE\n*\n* CHECK FOR DUMPOUT DD PRESENT\n*\n         DEVTYPE DDOUT,DEVAREA         GET DEVICE TYPE OF DUMPOUT DD\n         LTR   R15,R15                 IS DUMPOUT DD PRESENT?\n         BNZ   NODDOUT                 DD MISSING BR TO ERROR RTN\n*\n* CHECK DEVICE TYPE OF DUMPOUT DEVICE(TAPE OR DASD)\n*\n         CLI   DEVAREA+K2,TAPE         IS DUMPOUT A TAPE DEVICE\n         BE    OKTODUMP                YES, BR TO CONTINUE PROCESSING\n         CLI   DEVAREA+K2,DASD         IS DUMPOUT A DASD DEVICE\n         BNE   NOCANDMP                NO, INVLAID DEVICE TYPE BR\n*\n* IF DASD, GET UCB ADDRESS OF DUMPOUT FOR RESERVE\n*\n         EXTRACT TIOTADDR,FIELDS=TIOT  GET TIOT ADDRESS\n         SR    R02,R02                 CLEAR WORK REG\n         L     R03,TIOTADDR            LOAD TIOT POINTER\n         USING TIOT1,R03\nNEXTDD   ICM   R02,1,TIOELNGH          GET LENGTH OF DD ENTRY\n         BZ    NODDOUT                 END OF TIOT\n         CLC   TIOEDDNM,DDOUT          IS THIS OUR DD STMT\n         BE    DDFOUND                 YES - BRANCH\n         LA    R03,0(R02,R03)          POINT TO NEXT DD ENTRY\n         B     NEXTDD                  AND PROCESS IT\nDDFOUND  MVC   OUTUCB+1(3),TIOEFSRT    SAVE UCB ADDRESS\n         DROP  R03\n         L     R03,OUTUCB              LOAD UCB POINTER\n         USING UCBOB,R03\n         CLI   UCBID,X'FF'             VALID UCB ??\n         BNE   UCBERROR                NOPE - EXIT STAGE LEFT\n         MVC   VOLSER(6),UCBVOLI       SAVE THE VOLSER\n         TM    UCBTBYT2,UCBRR          GENNED SHARED ??\n         BO    OKTODUMP                YES - DON'T FLAG\n         OI    FLAG,NOTSHR             FLAG FOR LATER\n*\n* TEST IF THIS SYSTEM IS RUNNING MVS/SP\n*\nOKTODUMP EQU   *\n         DROP  R03\n         L     R11,CVTPTR              LOAD ADDRESS OF CVT\n         USING CVTMAP,R11              TELL THE ASSEMBLER\n         L     R01,CVTGVT              GET ADDRESS OF GVT\n         TM    GVTGSFLG-GVT(R01),GVTGRSNA     GRS NOT ACTIVE  ???\n         BO    NOGRS                   YES - MAY NEED A RESERVE ISSUED\n         OI    FLAG,GRSACT             FLAG FOR LATER\n*\nNOGRS    EQU   *\n         L     R11,CVTSMCA             GET ADDRESS OF SMCA\n         LTR   R11,R11                 DOES IT EXIST   ???\n         BZ    NOSMF                   NO - WE ARE NOT WANTED HERE\n         DROP  R11                     FINISHED WITH CVT\n         USING SMCABASE,R11            GET SMCA BASE ADDRESS\n*\n* DUMP ALL VSAM SMF DATA SETS THAT ARE FULL\n*\n         ENQ   (SMFQNAME,SMFRNAME,E,,SYSTEM) ENQ ON SMF SMFW-Q\nDMPINACT MVC   ACTRDS,SMCASVCR         SAVE ACTIVE RDS\n         ICM   R10,K15,SMCAFRDS        POINT TO FIRST RDS\n         BZ    SMFERROR                IF SMF NOT ACTIVE, EXIT\n         USING IEEMBRDS,R10\nGETNSMF  TM    RDSFLG1,RDSDUMP         IS SMF DATASET FULL\n         BZ    SMFBUMP                 NO - GET NEXT ONE\n         MVC   SMFDSN,RDSNAME          MOVE IN  SMF  DATASET NAME\n         BAL   R07,DALOC               CALL DUMP SUBROUTINE\nSMFBUMP  L     R10,RDSNEXT             GET NEXT RDS\n         TM    RDSFLG2,RDSLOST         IS THIS THE DUMMY RDS?\n         BZ    GETNSMF                 NO-PROCESS NEXT DATA SET\n*\n* ALL INACTIVE SMF DATA SETS HAVE BEEN DUMPED.\n* TEST IF A SWITCH OCCURED DURING DUMPING.\n*\n         C     R10,ACTRDS              WAS ACTIVE RDS THE DUMMY\n         BE    DODEQ                   YES, THEN DEQ AND EXIT\n         CLC   SMCASVCR,ACTRDS         IS SAME RDS STILL ACTIVE\n         BNE   DMPINACT                NO, START ALL OVER AGN\n         EJECT\n*\n* ISSUE OPERATOR 'SWITCH SMF' COMMAND AND WAIT FOR COMPLETION\n*\nSMFSWTCH DS    0H\n         L     R10,SMCASVCR            GET ADDR OF ACTIVE RDS\n         DROP  R11                     FINISHED WITH SMCABASE\n         MODESET MF=(E,SUPRMOD)        GET IN SUPR STATE FOR SVC 34  #\n         SLR   R00,R00                 CLEAR REG 0\n         LA    R01,CMDISMF             GET ADDRESS OF COMMAND I SMF\n         SVC   CMDSVC                  ISSUE COMMAND VIA SVC 34\n         MODESET MF=(E,PROBMOD)        GET BACK IN PROB STATE\n         WTO   MF=(E,MSG010)           DISPLAY SWITCHED MESSAGE\n         LA    R03,WAITLIM             SET LOOP COUNTER TO WAIT TIME\nCHKYX    TM    RDSFLG1,RDSDUMP         HAS SWITCH OCCURED ?\n         BO    DOLAST1                 YES - DON'T WAIT\n         STIMER WAIT,BINTVL=ONESEC     WAIT FOR ONE SECOND\n         BCT   R03,CHKYX               LOOP BACK TO TRY AGAIN\n         DEQ   MF=(E,DEQLIST)          DEQ ON SMF SMFWRITER-Q        #\n         WTO   MF=(E,MSG002)           UNABLE TO SWITCH ERROR MESSAGE\n         LA    R15,K12                 BAD RETURN CAN GO NO FURTHER\n         B     EXITR                   RETURN TO CALLER'S CALLER\n*\n* DUMP ALTERNATE SMF DATASET AFTER SWITCH OCCURRED\n*\nDOLAST1  MVC   SMFDSN,RDSNAME          MOVE IN  SMF  DATASET NAME\n         BAL   R07,DALOC               CALL RTN TO DUMP INACTIVE SMF\nDODEQ    DEQ   MF=(E,DEQLIST)          DEQ ON SMF SMFWRITER-Q\n*\n* RETURN BACK TO CALLER\n*\nEXIT     SLR   R15,R15                 SET NORMAL RETURN CODE\nEXITR    L     R13,K4(R13)             LOAD CALLERS SAVE AREA ADDRESS\n         RETURN (14,12),RC=(15)        RETURN TO CALLER\n         EJECT\n*\nNOSMF    WTO   MF=(E,MSG009)           ISSUE NO SP  SYSTEM MSG\n         LA    R15,K20                 LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT\n*\nSMFERROR WTO   MF=(E,MSG003)           ISSUE NO DATASET TO DUMP MESSAGE\n         LA    R15,K4                  LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RETURN CODE\n*\nNOCANDMP WTO   MF=(E,MSG008)           ISSUE INVALID DEVICE TYPE MSG\n         LA    R15,K16                 LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RET. CODE\n*\nNODDOUT  WTO   MF=(E,MSG001)           ISSUE DUMPOUT DD MISSING MSG\n         LA    R15,K16                 LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RET. CODE\n*\nUCBERROR WTO   MF=(E,MSG014)           ISSUE DUMPOUT DD MISSING MSG\n         LA    R15,K16                 LOAD RETURN CODE\n         B     EXITR                   BR TO EXIT WITH RET. CODE\n*\n*  ROUTINE TO ALLOCATE  S M F  DATASET AS DDNAME DUMPIN\n*\nDALOC    DS    0H                      ALLOC SUBROUTINE\n         XC    FREEER(K4),FREEER       CLEAR DYNALLOC ERROR AREAS\n         LA    R01,FREE                LOAD DYNALLOC PARM LIST\n         DYNALLOC                      FREE DDNAME DUMPIN\n         XC    ALOCER(K4),ALOCER       CLEAR DYNALLOC ERROR AREAS\n         LA    R01,ALOC                LOAD PARM LIST ADDRESS\n         DYNALLOC                      ALLOC  SMF  DATASET DD=DUMPIN\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DYNERR                  IF ZERO THEN ALLOC OK\n         CLI   DEVAREA+K2,DASD         IS DUMPOUT A DASD DVC\n         BNE   RESDONE                 NO, DONT RESERVE\n         TM    FLAG,GRSACT             GRS LOOKING AFTER US ???\n         BO    NORESMSG                YES, DONT RESERVE\n         TM    FLAG,NOTSHR             UCB GENNED NON-SHARE ??\n         BO    NOSHRMSG                YES, DONT RESERVE\n         MVC   MSG011+31(6),VOLSER     PUT VOLSER IN MESSAGE\n         WTO   MF=(E,MSG011)           SAY RES NEEDED\n         RESERVE MF=(E,OUTRSV)         RESERVE DUMPOUT\n         B     RESDONE                 ONE MSG IS ENOUGH\nNOSHRMSG EQU   *\n         MVC   MSG012+42(6),VOLSER     PUT VOLSER IN MESSAGE\n         WTO   MF=(E,MSG012)           SAY NON-GRS NON-SHARE\n         B     RESDONE                 ONE MSG IS ENOUGH\nNORESMSG EQU   *\n         MVC   MSG013+29(6),VOLSER     PUT VOLSER IN MESSAGE\n         WTO   MF=(E,MSG013)           SAY GRS ACTIVE\nRESDONE  EQU   *\n         LINK  SF=(E,LINKDUMP)         LINK TO SMF UTILITY\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DUMPERR                 IF ZERO THEN BR TO EXIT ROUTINE\n         CLI   DEVAREA+K2,DASD         IS DUMPOUT A DASD DVC\n         BNE   DEQDONE                 NO, DONT DEQUEUE\n         TM    FLAG,GRSACT+NOTSHR      DID WE SKIP THE RESERVE ???\n         BNZ   DEQDONE                 YES, DONT DEQ\n         DEQ   MF=(E,OUTDEQ)           RELEASE DUMPOUT\nDEQDONE  EQU   *\n         MVC   MSG2DSN,SMFDSN          SMF DATASET NAME TO MESSAGE\n         SR    R00,R00                 CLEAR REG. 0\n         WTO   TEXT=((MSG1,),(MSG2,)),MF=(E,MSG007)  ISSUE MSG\nCHKDMP   EQU   *\n         TM    RDSFLG1,RDSDUMP         HAS DUMP BEEN POSTED?\n         BZR   R07                     YES - DON'T WAIT ANYMORE\n         DROP  R10                     FINISHED WITH IEEMBRDS\n         STIMER WAIT,BINTVL=ONESEC     WAIT FOR ONE SECOND\n         B     CHKDMP                  LOOP BACK TO CHK AGAIN\n*\nDUMPERR  WTO   MF=(E,MSG006)           ISSUE DUMP FAILED MESSAGE\n         LA    R15,K8                  SET RETURN CODE\n         B     EXITR                   BR TO EXIT FROM SMFDUMP\n*\nDYNERR   ST    R15,DRFLR15             SAVE RETCODE FOR DAIRFAIL\n         LA    R01,DRFLPARM            LOAD DAIRFAIL PARM LIST ADDRESS\n         XC    DRFLPARM(DFLEN),DRFLPARM CLEAR AREA FIRST\n         USING DFDSECTD,R01            SET ADDRESSIBLITY TO PARM LIST\n         LA    R15,ALOCRB              GET ADDRESS OF ALLOCATION RB\n         ST    R15,DFS99RBP            SAVE IN DAIRFAIL PARM LIST\n         LA    R15,DRFLR15             GET ADDRESS OF SAVED REG 15\n         ST    R15,DFRCP               SAVE IN DAIRFAIL PARM LIST\n         LA    R15,FULL0               GET ADDRESS OF OF DUMMY F02\n         ST    R15,DFJEFF02            SAVE IN DAIRFAIL PARM LIST\n         LA    R15,DRFLID              GET ADDRESS OF CALLER'S FLAGS\n         ST    R15,DFIDP               SAVE IN DAIRFAIL PARM LIST\n         DROP  R01\n         LINK  SF=(E,LINKDRFL)         LINK TO DAIRFAIL SERVICE ROUTINE\n         LTR   R15,R15                 TEST RETURN CODE\n         BNZ   DRFLERR                 IF NOT ZERO THEN GOTO DRFL ERR\n         WTO   MF=(E,MSG005)           ELSE ISSUE DYNALLOC FAILED MSG\n         LA    R15,K12                 SET RETURN CODE\n         B     EXITR                   BR TO EXIT FROM SMFDUMP\n*\nDRFLERR  WTO   MF=(E,MSG004)           ELSE ISSUE DAIRFAIL ERROR MSG\n         LA    R15,K16                 SET RETURN CODE\n         B     EXITR                   BR TO EXIT FROM SMFDUMP\n         EJECT\n*\n*  DATA AREA\n*\n         DS    0D                                                    #\nSAVE     DC    18F'0'                  REGISTER SAVE AREA\nSMFQNAME DC    CL8'IPOSMF01'           QNAME FOR IFASMFDP      SIPO50#\nSMFRNAME DC    CL7'DATASET'            RNAME FOR IFASMFDP            #\nDEQLIST  DEQ   (SMFQNAME,SMFRNAME,,SYSTEM),MF=L     SMF SMFWRITER-Q  #\nCMDISMF  DC    Y(12),Y(00),CL08'I SMF' COMMAND (I SMF) SVC 34 INPUT\nACTRDS   DC    F'0'                    ACTIVE RECORDING DS\nTIOTADDR DC    F'0'                    ADDRESS OF TIOT\nOUTRSV   RESERVE (SMFQNAME,OUTRNAME,E,,SYSTEMS),UCB=OUTUCB,MF=L\nOUTDEQ   DEQ   (SMFQNAME,OUTRNAME,,SYSTEMS),MF=L RLSE DUMPOUT\nOUTRNAME DC    CL7'DUMPOUT'            RNAME FOR RESERVE\nOUTUCB   DC    F'0'                    UCB ADDRESS FOR RSVE\nFLAG     DC    XL1'0'                  AS IT SAYS ...\nGRSACT   EQU   X'80'                   ... GRS ACTIVE IN THIS IMAGE\nNOTSHR   EQU   X'40'                   ... VOLSER *NOT* GENNED SHR - IN\n*                                          NON-GRS THIS SAVES A RESERVE\nVOLSER   DC    CL6' '                  SAVE FOR LATER\n*\n*  CONTROL FOR SVC 99 TO FREE DDNAME DUMPIN\n*\nFREE     DC    A(FREERB+X'80000000')   RB POINTER\nFREERB   DS    0F                      REQUEST BLOCK FO DYNALLOC\n         DC    AL1(20),AL1(02),AL2(0)  LENGTH,UNALLOC_VERB,FLAGS\nFREEER   DC    AL2(0)                  ERROR CODE\nFREEIN   DC    AL2(0)                  INFO CODE\n         DC    A(FREETP)               TXT UNIT LIST POINTER\n         DC    A(0)                    RESERVED\n         DC    A(0)                    FLAGS\nFREETP   CALL  ,(FREEDDN),VL,MF=L      TEXT UNIT POINTERS\nFREEDDN  DC    XL2'1',XL2'1',XL2'8',CL8'DUMPIN'  FREE DDNAME=DUMPIN\n*\n*  CONTROL FOR SVC 99 TO ALLOCATE DDNAME DUMPIN TO  SMF DATASET NAME\n*\nALOC     DC    A(ALOCRB+X'80000000')   RB POINTER\nALOCRB   DS    0F\n         DC    AL1(20)                 LENGTH\n         DC    AL1(01)                 ALLOC_VERB\n         DC    AL2(0)                  FLAGS\nALOCER   DC    AL2(0)                  ERROR CODE\nALOCIN   DC    AL2(0)                  INFO CODE\n         DC    A(ALOCTP)               TEXT UNIT LIST POINTER\n         DC    A(0)                    RESERVED\n         DC    A(0)                    FLAGS\nALOCTP   CALL  ,(ALOCDDN,ALOCDSN,ALOCDSP,ALOCVBS),VL,MF=L TU POINTERS\nALOCDDN  DC    XL2'1'                  TEXT UNIT FOR DDNAME\n         DC    X'0001'                 NUMBER\n         DC    AL2(8)                  DDNAME LENGTH\n         DC    CL8'DUMPIN'             DDNAME=DUMPIN\nALOCDSN  DC    XL2'2'                  DATASET NAME KEY\n         DC    X'0001'                 NUMBER\n         DC    AL2(L'SMFDSN)           DATASET NAME LENGTH\nSMFDSN   DC    CL44' '                 SMF DATASET NAME\nALOCDSP  DC    XL2'4'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    XL1'08'                 DISP=SHR\nALOCVBS  DC    XL2'49'\n         DC    XL2'1'\n         DC    XL2'1'\n         DC    XL1'58'                 RECFM=VBS\n*\n* PROGRAM CONSTANTS\n*\nONESEC   DC    F'100'                  100 HUNDREDTHS SEC. FOR STIMER\nDDOUT    DC    CL8'DUMPOUT'            OUTPUT DDNAME FOR TIOT SCAN\nDEVAREA  DC    2F'0'                   OUTPUT FOR DEVTYPE MACRO\n         IKJEFFDF DFDSECT=YES          DAIRFAIL PARM LIST MAP\nSMFDUMP  CSECT\nFULL0    DC    F'0'                    ADDRESS OF NULL IKJEFF02 ROUTINE\nDRFLR15  DC    A(0)\nDRFLPARM DC    XL(DFLEN)'00'\nDRFLID   DC    AL1(DFWTP)\n         DC    AL1(DFSVC99)\nSAVEYORX DC    C' '                    SAVE AREA FOR ALT. MAN_ DATASET\n*\nMSG1     DC    AL2(L'MSG1TXT)\nMSG1TXT  DC    C'SMFDUMP COMPLETED FOR DATASET: '\nMSG2     DC    AL2(MSG2LEN)\nMSG2TXT  DC    C'DSNAME='\nMSG2DSN  DC    CL44' '\nMSG2LEN  EQU   *-MSG2TXT\n*\n*\n* MODESETS ISSUED\n*\nSUPRMOD  MODESET KEY=ZERO,MODE=SUP,MF=L GET IN SUPR STATE FOR SVC 34\nPROBMOD  MODESET KEY=NZERO,MODE=PROB,MF=L GET BACK IN PROB STATE\n*\n* LINKS ISSUED\n*\nLINKDRFL LINK  EP=IKJEFF18,SF=L        LINK TO DAIRFAIL SERVICE ROUTINE\nLINKDUMP LINK  EP=IFASMFDP,SF=L        LINK TO IFASMFDP SMF DUMP RTN\n*\n* MESSAGES ISSUED\n*\nERRMSGS  DS    0F\nMSG000   WTO   'SMFDUMP VERSION 1 RELEASE 10 - STARTED',               X\n               ROUTCDE=(11),MF=L\nMSG001   WTO   'SMFDUMP DUMPOUT DD MISSING',                           X\n               ROUTCDE=(11),MF=L\nMSG002   WTO   'SMFDUMP SWITCH OF SMF FAILED TO OCCUR',                X\n               ROUTCDE=(11),MF=L\nMSG003   WTO   'SMFDUMP NO SMF DATASETS ELIGIBLE FOR DUMP',            X\n               ROUTCDE=(11),MF=L\nMSG004   WTO   'SMFDUMP DYNAMIC ALLOCATION FAILED, AND DAIRFAIL',      X\n               ROUTCDE=(11),MF=L\nMSG005   WTO   'SMFDUMP DYNAMIC ALLOCATION FAILED',                    X\n               ROUTCDE=(11),MF=L\nMSG006   WTO   'SMFDUMP IFASMFDP PROGRAM FAILED TO DUMP SMF',          X\n               ROUTCDE=(11),MF=L\nMSG007   WTO   TEXT=((MSG1,D),(MSG2,DE)),ROUTCDE=(1,2,11),MF=L\nMSG008   WTO   'SMFDUMP DUMPOUT DD INVALID DEVICE TYPE ',              X\n               ROUTCDE=(11),MF=L\nMSG009   WTO   'SMFDUMP SMF NOT ACTIVE - SMCA MISSING',                X\n               ROUTCDE=(11),MF=L\nMSG010   WTO   'SMFDUMP SWITCH SMF COMMAND ISSUED',                    X\n               ROUTCDE=(11),MF=L\nMSG011   WTO   'SMFDUMP: GRS INACTIVE, VOL(******) RESERVED',          X\n               ROUTCDE=(11),MF=L\nMSG012   WTO   'SMFDUMP: GRS INACTIVE, NON-SHARED VOL(******) NOT RESERX\n               VED',ROUTCDE=(11),MF=L\nMSG013   WTO   'SMFDUMP: GRS ACTIVE, VOL(******) NOT RESERVED',        X\n               ROUTCDE=(11),MF=L\nMSG014   WTO   'SMFDUMP DUMPOUT UCB INVALID FORMAT',                   X\n               ROUTCDE=(11),MF=L\n*\n* PATCH AREA\n*\n         DS    0D\nMODLEN   EQU   *-SMFDUMP           EQUATE FOR MODULE LENGTH(- PATCH)\nPTCHLEN  EQU   ((MODLEN+7)/8+7)/8*8 PATCH AREA LENGTH EQUATE\nPTCHLNTH DC    Y(PTCHLEN)          LENGTH OF PATCH AREA\nPTCHBASE DC    S(PATCH)            BASE DISPLACED ADDRESS OF PATCH\nPATCH    DC    XL(32)'00'          PATCH AREA\n*PATCH    DC    XL(PTCHLEN)'00'     PATCH AREA\n*\n         EJECT\n         IEESMCA ,                 SMCA DSECT IN SYS1.AMODGEN\n         EJECT ,\n         IEFTIOT1 ,                TIOT MAPPING DSECT\n         EJECT ,\nIEEMBRDS DSECT\nRDSID    DS    CL4                 CONTROL BLOCK ID\nRDSNEXT  DS    F                   FORWARD CHAIN POINTER\nRDSPREV  DS    F                   BACKWARD CHAIN POINTER\n*\nRDSFLG1  DS    X\nRDSFREE  EQU   X'10'               1 - NEED TO FREE DATASET\nRDSDUMP  EQU   X'08'               1 - OPER HAS BEEN TOLD TO\n*                                      DUMP DS\nRDSREADY EQU   X'04'               1 - DS IS OPEN AND READY\nRDSCLOSE EQU   X'02'               1 - DS NEEDS TO BE CLOSED\nRDSNDOP  EQU   X'01'               1 - DS NEEDS TO BE OPENED\n*\nRDSFLG2  DS    X\nRDSLOST  EQU   X'80'               DUMMY RDS FOR LOST DATA\nRDSPHYER EQU   X'40'               1 - PHYSICAL I/O ERROR\nRDSLOGER EQU   X'20'               1 - LOGICAL I/O ERROR\n*\nRDSFLG3  DS    X                   RESERVED\nRDSNLEN  DS    X                   RESERVED\nRDSNAME  DS    CL44                DATASET NAME\nRDSVOLID DS    CL6                 VOLUME SERIAL\n         DS    CL2\nRDSDDN   DS    CL8                 DDNAME RETND BY DYNALLOC\nRDSCAPTY DS    F                   CAPACITY IN # OF BLOCKS\nRDSNXTBL DS    F                   NUMBER OF NEXT AVAIL BLOCK\nRDSBQE   DS    F                   ADDR OF BQE BEING WRITTEN\nRDSAVSPC DS    F                   AVAIL SPACE FROM SHOWCB\nRDSENRBA DS    F                   ENDRBA FROM SHOWCB\nRDSCINV  DS    F                   CONTROL INTERVAL SIZE\nRDSDOMID DS    2F                  MSG # OF DUMP MSG\nRDSRPL   DS    CL76                VSAM RPL\nRDSACB   DS    CL76                VSAM ACB\n*\n         PRINT OFF\n         CVT   DSECT=YES               MAP THE CVT AREA\n         PRINT ON\n         ISGGVT                    GRS VECTOR TABLE\n         IEFUCBOB                  UCB MAPPING\n         END   SMFDUMP\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT686/FILE686.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT686", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}