{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011737000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 705432, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 14, "INMDSNAM": "CBT.V500.FILE315.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 705432, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE315.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\r\\x06'", "DS1TRBAL": "b'\\x7f\\x1a'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02]\\x00\\x0c\\x02^\\x00\\n\\x00\\x0e'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00!\\x01\\x033\\x0f\\x01\\x033\\x0f\\x077\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-26T00:00:00", "modifydate": "2003-11-26T07:37:21", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  315\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE315\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 53 MEMBERS COUNTED; CUMULATIVE SIZE IS 6,454 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/26/03    07:35:54    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x11\\x00\\x04\\x01\\x00\\x01\\x9f\\x01\\x033\\x0f\\x075\\x00,\\x00\\x02\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.17", "flags": 0, "createdate": "2000-01-19T00:00:00", "modifydate": "2003-11-26T07:35:04", "lines": 44, "newlines": 2, "modlines": 0, "user": "TS00DZL"}, "text": "************************************************************************\nAUTHOR   - DAVID LEES\n         - lees_david_a@sbcglobal.net\n           CBT TAPE FILE 315 AS OF 09/24/2002\n************************************************************************\nBITMAP   - CALLABLE SUBROUTINE TO EXPAND 8 BITS TO 8 BYTES CHARACTER.\nBMSS     - FAIRLY FAST TEXT SEARCH PROGRAM.\nBOMB     - SUBROUTINE TO PRODUCE AN '0CB' ABEND. DIAGNOSTIC TOOL.\nCOB1     - COBOL/DB2 CROSS REFERENCE BASED ON USERID.\nCOB2     - COBOL/DB2 CROSS REFERENCE BASED ON TABLENAME.\nCOPYANY  - VERSATILE FILE TO FILE COPY: FB->VB, VB->FB, VB->VB, FB->FB,\n         - PADS OR TRUNCATES BASED ON OUTPUT DCB. DISPLAYS DCB, COUNTS.\n         - ADDED A PARM= OPTION FOR FILL CHARACTER.\nCPUID    - AUTHORIZED PGM TO DISPLAY CPC ID. OBSOLETED BY: D M=(CPU)\nCSTRACE  - SAMPLE OF USING SNAPSHOT MACRO TO CREATE A DEBUGGING TRACE.\n         - (YES, IT LOOKS LIKE IMS CALLS BUT ITS ACTUALLY AN IMS CLONE).\nCVD      - CALLABLE SUBROUTINE TO DUMP 80 BYTES IN VERTICAL HEX FORMAT.\nCVX      - CONVERT TWO BYTES DISPLAY FORMAT HEX TO ONE BYTE BINARY.\nDBALPHA  - PRODUCES POSTERS WITH MAX OF 6 LINES OF 13 CHARACTERS EACH.\nDBWAIT   - MEANT TO INTERACT WITH AUTOMATION SOFTWATE (AO, NETVIEW) TO\n         - CONTROL STEP BY STEP EXECUTION OF BATCH JOBS.\nDYNAM    - CBT TAPE FILE089, INCLUDED HERE FOR CONVENIENCE ONLY.\nERASER   - OPEN/CLOSE A CARD IMAGE FILE TO EMPTY IT, OPTIONALLY INSERT\n         - ONE DATA LINE FROM PARM=.\nFLATLIB  - CONVERTS A TEXT PDS INTO A FLAT FILE WITH THE MEMBERNAME AS\n         - AS A PREFIX. EASY TO BUILD XREFS WITH SAS/EASYTRIECE/ETC.\nLNKLST00 - MULTI STEP JCL TO PRODUCE A CROSS REFERENCE OF LPA/PROG00\n         - MEMBERS. SORTED BY MEMBERNAME AND LOADLIB. PRIMITIVE ISRDDN.\nMEMLIST  - EXPANDS A LIST OF PDS NAMES INTO MEMBERNAMES AND ATTRIBUTES.\n         - SHORT FORM FOR TEXT PDS, DEFAULT FOR LOAD LIBRARIES. DYNAM\nMIGRATOR - USES MGCRE AND VIRTUAL CONSOLE MACROS TO ISSUE HSM MIGRATE\n         - COMMANDS FOR A LIST OF DATASETS AND LOG SYSTEM RESPONSE MSGS.\n         - AMODE(31), RMODE(24), AC(1). MESSY DUE TO AR, IO, AMODE31...\nNATSUB   - SUBROUTINE TO SUBMIT JCL TO DYNALLOC INTERNAL READER.\nPARSIFAL - PARSER TO STRIP DSNAMES FROM FROM FORMATS LIKE (LPALST00)\nQDUMP80  - FORMATTED DATASET DUMP SHOWS CHARACTER/HEX IN 80 COL LISTING.\n         - DOES START-END AND LAST RECORDS. WILL TRANSLATE ASCII ALSO.\nR******* - JCL TO RUN THE PROGRAMS.\nREGS     - REGISTER EQUATE MACRO.\nSLEEPY   - WAITS FOR NN SECONDS. 99 MAX.\nTODAY    - SUBROUTINE RETURNS DAY OF WEEK FROM TIME MACRO. VALID TO Y4K.\nVOLLIE   - VARY A LIST OF VOLSERS (NOT ADDRESSES) ONLINE/OFFLINE.\nVSAMZAP  - SUPERZAP UTILITY FOR ESDS VSAM, ORIGINALLY USED FOR IMS,\n         - ALSO WORKS ON KSDS BUT CAN'T CHANGE KEYS.\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE315": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x033\\x0f\\x01\\x033\\x0f\\x075\\x00L\\x00L\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-26T00:00:00", "modifydate": "2003-11-26T07:35:00", "lines": 76, "newlines": 76, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 315 is from Dave Lees and contains a nice collection of   *   FILE 315\n//*           his utilities.                                        *   FILE 315\n//*                                                                 *   FILE 315\n//*       email:   lees_david_a@sbcglobal.net                       *   FILE 315\n//*                                                                 *   FILE 315\n//*     File Updated:  June 6, 2001                                 *   FILE 315\n//*                                                                 *   FILE 315\n//*           THE UTILITIES ARE:                                    *   FILE 315\n//*                                                                 *   FILE 315\n//*     *****************************************************       *   FILE 315\n//*     AUTHOR   - DAVID LEES                                       *   FILE 315\n//*                lees_david_a@sbcglobal.net                       *   FILE 315\n//*                CBT TAPE FILE 315 AS OF 2/14/2000                *   FILE 315\n//*                                                                 *   FILE 315\n//*     *****************************************************       *   FILE 315\n//*     BITMAP   - CALLABLE SUBROUTINE TO EXPAND 8 BITS TO 8        *   FILE 315\n//*                BYTES CHARACTER.                                 *   FILE 315\n//*     BMSS     - FAIRLY FAST TEXT SEARCH PROGRAM.                 *   FILE 315\n//*     BOMB     - SUBROUTINE TO PRODUCE AN '0CB' ABEND.            *   FILE 315\n//*                DIAGNOSTIC TOOL.                                 *   FILE 315\n//*     COB1     - COBOL/DB2 CROSS REFERENCE BASED ON USERID.       *   FILE 315\n//*     COB2     - COBOL/DB2 CROSS REFERENCE BASED ON TABLENAME.    *   FILE 315\n//*     COPYANY  - VERSATILE FILE TO FILE COPY: FB->VB,             *   FILE 315\n//*                VB->FB, VB->VB, FB->FB, - PADS OR TRUNCATES      *   FILE 315\n//*                BASED ON OUTPUT DCB. DISPLAYS DCB, COUNTS.       *   FILE 315\n//*     CPUID    - AUTHORIZED PGM TO DISPLAY CPC ID.                *   FILE 315\n//*                OBSOLETED BY: D M=(CPU)                          *   FILE 315\n//*     CSTRACE  - SAMPLE OF USING SNAPSHOT MACRO TO CREATE         *   FILE 315\n//*                A DEBUGGING TRACE.                               *   FILE 315\n//*              - (YES, IT LOOKS LIKE IMS CALLS BUT IT'S           *   FILE 315\n//*                ACTUALLY AN IMS CLONE).                          *   FILE 315\n//*     CVD      - CALLABLE SUBROUTINE TO DUMP 80 BYTES IN          *   FILE 315\n//*                VERTICAL HEX FORMAT.                             *   FILE 315\n//*     CVX      - CONVERT TWO BYTES DISPLAY FORMAT HEX TO          *   FILE 315\n//*                ONE BYTE BINARY.                                 *   FILE 315\n//*     DBALPHA  - PRODUCES POSTERS WITH MAX OF 6 LINES OF 13       *   FILE 315\n//*                CHARACTERS EACH.                                 *   FILE 315\n//*     DBWAIT   - MEANT TO INTERACT WITH AUTOMATION SOFTWATE       *   FILE 315\n//*                (AO, NETVIEW) TO CONTROL STEP BY STEP            *   FILE 315\n//*                EXECUTION OF BATCH JOBS.                         *   FILE 315\n//*     DYNAM    - CBT TAPE FILE089, INCLUDED HERE FOR              *   FILE 315\n//*                CONVENIENCE ONLY.                                *   FILE 315\n//*     ERASER   - OPEN/CLOSE A CARD IMAGE FILE TO EMPTY IT,        *   FILE 315\n//*                OPTIONALLY INSERT ONE DATA LINE FROM             *   FILE 315\n//*                PARM=.                                           *   FILE 315\n//*     FLATLIB  - CONVERTS A TEXT PDS INTO A FLAT FILE WITH        *   FILE 315\n//*                THE MEMBERNAME AS AS A PREFIX. EASY TO           *   FILE 315\n//*                BUILD XREFS WITH SAS/EASYTRIECE/ETC.             *   FILE 315\n//*     LNKLST00 - MULTI STEP JCL TO PRODUCE A CROSS                *   FILE 315\n//*                REFERENCE OF LPA/PROG00 MEMBERS. SORTED BY       *   FILE 315\n//*                MEMBERNAME AND LOADLIB. PRIMITIVE ISRDDN.        *   FILE 315\n//*     MEMLIST  - EXPANDS A LIST OF PDS NAMES INTO                 *   FILE 315\n//*                MEMBERNAMES AND ATTRIBUTES.  SHORT FORM          *   FILE 315\n//*                FOR TEXT PDS, DEFAULT FOR LOAD LIBRARIES.        *   FILE 315\n//*                DYNAM                                            *   FILE 315\n//*     MIGRATOR - USES MGCRE AND VIRTUAL CONSOLE MACROS TO         *   FILE 315\n//*                ISSUE HSM MIGRATE COMMANDS FOR A LIST OF         *   FILE 315\n//*                DATASETS AND LOG SYSTEM RESPONSE MSGS.           *   FILE 315\n//*                AMODE(31), RMODE(24), AC(1). MESSY DUE TO        *   FILE 315\n//*                AR, IO, AMODE31...                               *   FILE 315\n//*     NATSUB   - SUBROUTINE TO SUBMIT JCL TO DYNALLOC             *   FILE 315\n//*                INTERNAL READER.                                 *   FILE 315\n//*     PARSIFAL - PARSER TO STRIP DSNAMES FROM FROM FORMATS        *   FILE 315\n//*                LIKE (LPALST00)                                  *   FILE 315\n//*     QDUMP80  - FORMATTED DATASET DUMP SHOWS CHARACTER/HEX       *   FILE 315\n//*                IN 80 COL LISTING.  DOES START-END AND           *   FILE 315\n//*                LAST RECORDS. WILL TRANSLATE ASCII ALSO.         *   FILE 315\n//*     R******* - JCL TO RUN THE PROGRAMS.                         *   FILE 315\n//*     REGS     - REGISTER EQUATE MACRO.                           *   FILE 315\n//*     SLEEPY   - WAITS FOR NN SECONDS. 99 MAX.                    *   FILE 315\n//*     TODAY    - SUBROUTINE RETURNS DAY OF WEEK FROM TIME         *   FILE 315\n//*                MACRO. VALID TO Y4K.                             *   FILE 315\n//*     VSAMZAP  - SUPERZAP UTILITY FOR ESDS VSAM, ORIGINALLY       *   FILE 315\n//*                USED FOR IMS, ALSO WORKS ON KSDS BUT CAN'T       *   FILE 315\n//*                CHANGE KEYS.                                     *   FILE 315\n//*                                                                 *   FILE 315\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "BITMAP": {"ttr": 523, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET DBBM10000  AT LEVEL 002 AS OF 09/19/90\n         MACRO                                                          00001\n&LABEL   MAP     &NIBBLE                                                00002\n&LABEL   DC      CL8'&NIBBLE.0000'                                      00003\n         DC      CL8'&NIBBLE.0001'                                      00004\n         DC      CL8'&NIBBLE.0010'                                      00005\n         DC      CL8'&NIBBLE.0011'                                      00006\n         DC      CL8'&NIBBLE.0100'                                      00007\n         DC      CL8'&NIBBLE.0101'                                      00008\n         DC      CL8'&NIBBLE.0110'                                      00009\n         DC      CL8'&NIBBLE.0111'                                      00010\n         DC      CL8'&NIBBLE.1000'                                      00011\n         DC      CL8'&NIBBLE.1001'                                      00012\n         DC      CL8'&NIBBLE.1010'                                      00013\n         DC      CL8'&NIBBLE.1011'                                      00014\n         DC      CL8'&NIBBLE.1100'                                      00015\n         DC      CL8'&NIBBLE.1101'                                      00016\n         DC      CL8'&NIBBLE.1110'                                      00017\n         DC      CL8'&NIBBLE.1111'                                      00018\n         MEND                                                           00019\nBITMAP   CSECT                                                          00020\n         REGS                                                           00021**2\nSETUP    SAVE    (14,12)                                                00022\n         BALR    R11,R0                                                 00023\n         USING   *,R11                                                  00024\n         ST      R13,SAVE+4                                             00025\n         LA      R13,SAVE                                               00026\n*  PARMS=FIELD,LENGTH,RETURN                                            00027\n         LM      R2,R4,0(R1)                                            00028\n         L       R3,0(R3)                                               00029\n         LA      R5,TABLE                                               00030\nPROCESS  XR      R6,R6                                                  00031\n         IC      R6,0(R2)                                               00032\n         SLL     R6,3                                                   00033\n         LA      R6,0(R5,R6)                                            00034\n         MVC     0(8,R4),0(R6)                                          00035\n         LA      R4,8(R4)                                               00036\n         LA      R2,1(R2)                                               00037\n         BCT     R3,PROCESS                                             00038\nWRAPUP   L       R13,SAVE+4                                             00039\n         RETURN  (14,12),RC=0                                           00040\n*---------------------------------------*                               00041\n*---------------------------------------*                               00042\n*-------     W O R K I N G      --------*                               00043\n*-------     S T O R A G E      --------*                               00044\n*---------------------------------------*                               00045\n*---------------------------------------*                               00046\nSAVE     DC      18F'0'                                                 00047\nTABLE    MAP     0000                                                   00048\n         MAP     0001                                                   00049\n         MAP     0010                                                   00050\n         MAP     0011                                                   00051\n         MAP     0100                                                   00052\n         MAP     0101                                                   00053\n         MAP     0110                                                   00054\n         MAP     0111                                                   00055\n         MAP     1000                                                   00056\n         MAP     1001                                                   00057\n         MAP     1010                                                   00058\n         MAP     1011                                                   00059\n         MAP     1100                                                   00060\n         MAP     1101                                                   00061\n         MAP     1110                                                   00062\n         MAP     1111                                                   00063\n         END    BITMAP                                                  00064\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BMSS": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1f\\x00\\x00\\x00\\x96$\\x8f\\x00\\x96%\\x0f\\x154\\x00\\x93\\x00g\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.31", "flags": 0, "createdate": "1996-09-04T00:00:00", "modifydate": "1996-09-06T15:34:00", "lines": 147, "newlines": 103, "modlines": 0, "user": "TS00DZL"}, "text": "************************************************************\n* STRING SEARCH ALGORITHM BASED ON THE PUBLISHED WORKS OF  *\n* BOYER/MOORE 1977.       (DAVE LEES 1996)                 *\n* WELL, IT WAS, BUT NOW IT IS MORE OF AN ASSEMBLER         *\n* PROGRAMMER'S APPROACH USING THE TRT MICROCODE TO DO      *\n* MOST OF THE WORK. R15 CONTAINS THE COUNT OF HITS FOR THE *\n* SCANNED TEXT. FOR THOSE WHO CANNOT TEST R15 OR 'RETURN   *\n* CODE' AN OPTIONAL 5TH PARAMETER IS PROVIDED.             *\n************************************************************\nBMSS     CSECT    D.LEES 1996\nBMSS     AMODE    24\nBMSS     RMODE    24\n         SAVE     (14,12)\n         LR       R12,R15\n         USING    BMSS,R12\n         LA       R11,SAVEAREA\n         ST       R11,8(R13)\n         ST       R13,SAVEAREA+4\n         LR       R13,R11\n************************************************************\n*  CAPTURE INPUT PARAMETERS: P1 => AL2(LEN) STRING         *\n*                            P2 => SEARCH STRING A(80)     *\n*                            P3 => AL2(LEN) TEXT           *\n*                            P4 => TEXT STRING A(132)      *\n*                            P5 => F COUNT OF HITS {OPT.}  *\n************************************************************\n         LM       R1,R5,0(R1)\n         LH       R0,0(R1)          GET AND TEST STRING LENGTH\n         CH       R0,=H'80'\n         BH       ERROR\n         STH      R0,LENGTH\n         LH       R0,0(R3)          GET AND TEST TEXT LENGTH\n         CH       R0,=H'132'\n         BH       ERROR\n         STH      R0,LINESIZE\n         LR       R0,R2\n         ST       R0,@STRING\n         LR       R0,R4\n         ST       R0,@TEXT\n         N        R5,=X'7FFFFFFF'   REMOVE VL OR AMODE BIT\n         LTR      R5,R5\n         BZ       NOP5              P5 IS OPTIONAL\n         L        R0,0(R5)\n         LTR      R0,R0             IF PRESENT, MUST BE 0\n         BNZ      NOP5\n         ST       R5,P5\nNOP5     EQU      *\n************************************************************\n*  DIAGNOSTIC TRACE                                        *\n************************************************************\nSNAPINIT NOP    SNAPTERM\n         OPEN   (SNAPDD,OUTPUT)\n         MVI    SNAPINIT+1,X'F0'\n         B      SNAPTERM\nSNAPDD   DCB   DDNAME=SNAP01,MACRF=(W),DSORG=PS,RECFM=VBA,             X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU    *\n* SAMPLE:  SNAP DCB=SNAPDD,PDATA=REGS,STORAGE=(SNAPA,SNAPB),ID=1\n* SAMPLE:  LA   R2,START\n*          LA   R3,999(R2)      LENGTH\n*          SNAP DCB=SNAPDD,PDATA=REGS,STORAGE=((2),(3)),ID=1\n************************************************************\n*  INITIALIZE TRANSLATE TABLE WITH FIRST CHARACTER         *\n************************************************************\n         XC       TRTABLE,TRTABLE  ZERO OUT\n         LA       R1,0\n         L        R3,@STRING\n         LA       R2,TRTABLE\nBLDTRT   EQU      *\n         IC       R1,0(R3)         TREAT CHAR AS BIN DATA\n         LA       R2,0(R1,R2)      CALCULATE TRTABLE LOCATION\n         STC      R1,0(R2)         STORE 'CHAR' IN CELL\n************************************************************\n*  EVALUATE TEXT STRING                                    *\n************************************************************\n         L        R3,@STRING       POINT TO SEARCH STRING\n         LH       R4,LENGTH\n         L        R5,@TEXT         POINT TO TEXT FIELD\n         LH       R6,LINESIZE\n         LA       R11,0(R5,R6)     SET END OF TEXT = R11\n         SR       R11,R4           LESS SEARCH LENGTH\n         BCTR     R11,0            LAST BYTE !\n         XR       R8,R8            HIT COUNTER\nSEEK     EQU      *\n         LA       R9,8(R5)         PART OF TRACE\nTRACE    SNAP DCB=SNAPDD,PDATA=REGS,                                   X\n               STORAGE=(SNAPA,SNAPB,(5),(9)),ID=7\n         CR       R5,R11           CHECK FOR END OF TEXT (SOC4)\n         BH       RETURN           ALL DONE\n         LR       R1,R6\n         BCTR     R1,0\n         EX       R1,FINDIT        COMPARE STRING:TEXT (LENGTH)\n*        TRT      0(0,R5),TRTABLE  TBL: OFFSETS OF CHARACTERS\n         BZ       RETURN           ALL DONE\nCOMPARE  EQU      *                TRY FULL STRING COMPARE\n         LA       R7,0(R1)         SAVE HIT LOCATION IN R7\n         LR       R1,R4\n         BCTR     R1,0\n         EX       R1,CMPLEN\n*        CLC      0(0,R7),0(R3)    R3=SEARCH R7=TEXT HIT\n         BNE      INCR\nSUCCESS  EQU      *\n         AH       R8,=H'1'         R8 IS THE HIT COUNTER\n         LR       R1,R7\n         SR       R1,R5            CALCULATE OFFSET\n         SR       R6,R1            SUBTRACT OFFSET FROM TEXT LENGTH\n         SR       R6,R4            ALSO SUBTRACT SEARCH LENGTH\n         LA       R5,0(R7,R4)      ADVANCE TEXT POINTER TO HIT+LEN\n         B        SEEK\nINCR     EQU      *\n         LR       R1,R7            NO LUCK, MOVE ON . . . .\n         SR       R1,R5            CALCULATE OFFSET\n         SR       R6,R1            SUBTRACT OFFSET FROM TEXT LENGTH\n         LA       R5,1(R7)         ADVANCE TEXT POINTER TO HIT+1\n         B        SEEK\n************************************************************\n*  RETURN TO CALLER                                        *\n************************************************************\nRETURN   EQU      *\n         L        R1,P5\n         LTR      R1,R1\n         BZ       GOBACK\n         ST       R8,0(R1)\nGOBACK   EQU      *\n         L        R13,SAVEAREA+4\n         LR       R15,R8\n         RETURN   (14,12),RC=(15)  R15 (RC) R8=HIT COUNT\nERROR    EQU      *\n         L        R13,SAVEAREA+4\n         RETURN   (14,12),RC=16    R15 (RC) 16 = ERROR\n************************************************************\n*  STORAGE                                                 *\n************************************************************\nSNAPA    EQU      *\nSAVEAREA DS       9D\nFINDIT   TRT      0(0,R5),TRTABLE\nCMPLEN   CLC      0(0,R7),0(R3)        R3=SEARCH R1=TEXT\nLENGTH   DS       H\n@STRING  DS       A                    MAX SEARCH STRING = 80\nLINESIZE DS       H\n@TEXT    DS       A                    MAX TEXT LENGTH = 132\nTRTABLE  DS       XL256\nP5       DC       A(0)\nSNAPB    EQU      *\n         REGS\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "BOMB": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x00\\x92#\\x8f\\x00\\x92#\\x8f\\x16@\\x00\\x05\\x00\\x05\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "1992-08-25T00:00:00", "modifydate": "1992-08-25T16:40:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "TS00DZL"}, "text": "BOMB  CSECT\n      USING BOMB,15\n      DP    TEN,=P'0'        PRODUCE 0CB ABEND (CHARLIE BROWN)\nTEN   DC    PL3'10'\n      END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COBDB2": {"ttr": 531, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x00\\x03O\\x01\\x00\\x03O\\x14\\x17\\x00Y\\x00d\\x00/\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2000-02-03T00:00:00", "modifydate": "2000-02-03T14:17:00", "lines": 89, "newlines": 100, "modlines": 47, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*====================================================*//\n//********************************************************************\n//*\n//*      COMPILE PROCEDURE FOR COBOL 370, DB2 BATCH\n//*      COB1 IS XREF OF TABLES FOR A USERID\n//*      COB1 IS XREF OF USERS  FOR A TABLE/VIEW\n//********************************************************************\n//COMPILE      PROC MEMBER=TEMPNAME,\n//             SYSOUT='*'\n//********************************************************************\n//* DB2 PRECOMPILE STEP\n//********************************************************************\n//PRECOMP      EXEC  PGM=DSNHPC,COND=EVEN,REGION=4M,\n//             PARM='HOST(COB2),APOST,APOSTSQL,SOURCE'\n//STEPLIB  DD  DSN=SQP.PROD.DSNLOAD,DISP=SHR\n//DBRMLIB  DD  DSN=TS00DZL.DBRM(&MEMBER),DISP=SHR, (NEW,CATLG,DELETE),\n//             DCB=(LRECL=80,BLKSIZE=6160,RECFM=FB),\n//             SPACE=(TRK,(1,1,1)),UNIT=SYSDA\n//SYSCIN   DD  DSN=&&DSNHOUT,DISP=(MOD,PASS),UNIT=VIO,\n//             DCB=BLKSIZE=400,\n//             SPACE=(CYL,(1,1))\n//SYSLIB   DD  DSN=TST.DZL.DB2,DISP=SHR,\n//             DCB=BLKSIZE=20000\n//SYSPRINT DD  SYSOUT=&SYSOUT\n//SYSTERM  DD  SYSOUT=&SYSOUT\n//SYSUDUMP DD  DUMMY\n//SYSUT1   DD  SPACE=(CYL,(1,1)),UNIT=VIO\n//SYSUT2   DD  SPACE=(CYL,(1,1)),UNIT=VIO\n//SYSIN    DD  DSN=TST.DZL.XMIT(&MEMBER),\n//             DISP=SHR\n//         PEND\n//PRECOMP  EXEC COMPILE,MEMBER=COB1\n//********************************************************************\n//* COMPILE STEP\n//********************************************************************\n//*====================================================*//\n//* YOUR LE/370 LIBRARIES MAY BE NAMED DIFFERENTLY     *//\n//*====================================================*//\n//COB370  PROC CMP='SYS1.IGY.SIGYCOMP',LIB='SYS1.CEE.SCEELKED'\n//*   PROC FOR COBOL/LE - COMPILE AND LINK\n//COB    EXEC  PGM=IGYCRCTL,PARM=(OBJECT,LIST,MAP,LIB),\n//       REGION=4M\n//STEPLIB  DD  DSNAME=&CMP,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSNAME=&&LOADSET,UNIT=SYSDA,DISP=(MOD,PASS),\n//             SPACE=(TRK,(3,3))\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT5   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT6   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT7   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSIN    DD  DISP=(OLD,PASS),DSN=&&DSNHOUT\n//LKED   EXEC  PGM=IEWL,PARM='LIST,XREF,LET,MAP',COND=(5,LT,COB),\n//             REGION=2M\n//SYSLIN   DD  DSNAME=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSNAME=TST.DZL.XMIT.LOAD(&MEMBER),DISP=SHR\n//SYSLIB   DD  DSNAME=&LIB,DISP=SHR\n//         DD  DSN=SQP.PROD.DSNLOAD,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//         PEND\n//GO       EXEC COB370,MEMBER=COB1\n//********************************************************************\n//* BIND STEP\n//********************************************************************\n//BIND     EXEC PGM=IKJEFT1B,DYNAMNBR=99,REGION=0M,COND=(4,LT)\n//STEPLIB  DD DSN=SQP.TEST.DSNLOAD,DISP=SHR\n//SYSTSPRT DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//*YSUDUMP DD SYSOUT=*\n//DBRMLIB  DD DISP=SHR,DSN=TS00DZL.DBRM(COB1)\n//SYSTSIN DD *\nDSN SYSTEM(DSN)\n  BIND                          -\n   PLAN(COB1)                   -\n   MEM(COB1)                    -\n   ISOLATION(CS)                -\n   ACQUIRE(USE)                 -\n   RELEASE(COMMIT)              -\n   VALIDATE(BIND)               -\n   OWNER(TS00DZL)               -\n   EXPLAIN(YES)\nEND\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COB1": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00\\x00\\x00\\x96\\x05\\x7f\\x00\\x961\\x1f\\tX\\x01Y\\x00\\xe6\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "1996-02-26T00:00:00", "modifydate": "1996-11-06T09:58:00", "lines": 345, "newlines": 230, "modlines": 0, "user": "TS00DZL"}, "text": "000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID.    COB1.\n000300 ENVIRONMENT DIVISION.\n000400 CONFIGURATION SECTION.\n000500 SOURCE-COMPUTER. IBM-3090.\n000600 OBJECT-COMPUTER. IBM-3090.\n000700 INPUT-OUTPUT SECTION.\n000800 FILE-CONTROL.\n000900     SELECT REPORT-FILE ASSIGN TO UT-S-REPORT.\n001000 DATA DIVISION.\n001100 FILE SECTION.\n001200 FD  REPORT-FILE\n001300     RECORDING MODE IS V\n001400     BLOCK CONTAINS 0 RECORDS.\n001500 01  RPTSYSTABAUTH.\n001600     10 GRANTOR              PIC X(8).\n001700     10 GRANTEE              PIC X(8).\n001800     10 TCREATOR             PIC X(8).\n001900     10 TTNAME.\n002000        49 TTNAME-LEN        PIC S9(4) USAGE COMP.\n002100        49 TTNAME-TEXT       PIC X(18).\n002200     10 FILLER               PIC X(2).\n002300     10 DATEGRANTED          PIC X(6).\n002400     10 FILLER               PIC X(8).\n002500     10 UPDATECOLS           PIC X(1).\n002600     10 FILLER               PIC X(8).\n002700     10 ALTERAUTH            PIC X(1).\n002800     10 FILLER               PIC X(8).\n002900     10 DELETEAUTH           PIC X(1).\n003000     10 FILLER               PIC X(8).\n003100     10 INDEXAUTH            PIC X(1).\n003200     10 FILLER               PIC X(8).\n003300     10 INSERTAUTH           PIC X(1).\n003400     10 FILLER               PIC X(8).\n003500     10 SELECTAUTH           PIC X(1).\n003600     10 FILLER               PIC X(8).\n003700     10 UPDATEAUTH           PIC X(1).\n003800 01  RPT-HEADINGS            PIC X(132).\n003900 WORKING-STORAGE SECTION.\n004000 01  WS-START             PIC X(16)  VALUE 'XXXXXXXXXXXXXXXX'.\n004100 01  ALPHA-FIELDS.\n004200   05  USERID             PIC X(8)   VALUE SPACES.\n004300   05  CURRENT-DATE.\n004400       10  YR             PIC X(2).\n004500       10  MO             PIC X(2).\n004600       10  DY             PIC X(2).\n004700   05  TIME-OF-DAY.\n004800       10  HH             PIC X(2).\n004900       10  MM             PIC X(2).\n005000       10  SS             PIC X(2).\n005100       10  CC             PIC X(2).\n005200   05  PRINT-DATE         PIC X(8).\n005300   05  PRINT-TIME         PIC X(8).\n005400 01  ALPHA-LITERALS.\n005500   05  DUMMY              PIC X(4)   VALUE SPACES.\n005600 01  NUMERIC-FIELDS.\n005700   05  GROUP-COUNTER        PIC S9(8) COMP VALUE +0.\n005800   05  COUNTER              PIC S9(8)      VALUE +0.\n005900   05  PRINT-RC             PIC  9(3).\n006000 01  RPT-HEADER1.\n006100     10 GRANTOR-H            PIC X(8)  VALUE 'GRANTOR'.\n006200     10 GRANTEE-H            PIC X(8)  VALUE 'GRANTEE'.\n006300     10 TCREATOR-H           PIC X(8)  VALUE 'CREATOR'.\n006400     10 TTNAME-H.\n006500        49 TTNAME-LEN-H      PIC S9(4) USAGE COMP.\n006600        49 TTNAME-TEXT-H     PIC X(18) VALUE 'TABLENAME'.\n006700     10 DATEGRANTED-H        PIC X(6)  VALUE 'DATE'.\n006800     10 FILLER               PIC X(8).\n006900     10 UPDATECOLS-H         PIC X(9)  VALUE 'COLUMNS'.\n007000     10 ALTERAUTH-H          PIC X(9)  VALUE 'ALTER'.\n007100     10 DELETEAUTH-H         PIC X(9)  VALUE 'DELETE'.\n007200     10 INDEXAUTH-H          PIC X(9)  VALUE 'INDEX'.\n007300     10 INSERTAUTH-H         PIC X(9)  VALUE 'INSERT'.\n007400     10 SELECTAUTH-H         PIC X(9)  VALUE 'SELECT'.\n007500     10 UPDATEAUTH-H         PIC X(9)  VALUE 'UPDATE'.\n007600******************************************************************\n007700*    SQLCA INCLUDE                                               *\n007800******************************************************************\n007900     EXEC SQL INCLUDE SQLCA END-EXEC.\n008000******************************************************************\n008100*    DCLGEN TABLE(SYSIBM.SYSTABAUTH)                             *\n008200******************************************************************\n008300     EXEC SQL DECLARE SYSIBM.SYSTABAUTH TABLE\n008400     ( GRANTOR                        CHAR(8) NOT NULL,\n008500       GRANTEE                        CHAR(8) NOT NULL,\n008600       GRANTEETYPE                    CHAR(1) NOT NULL,\n008700       DBNAME                         CHAR(8) NOT NULL,\n008800       SCREATOR                       CHAR(8) NOT NULL,\n008900       STNAME                         VARCHAR(18) NOT NULL,\n009000       TCREATOR                       CHAR(8) NOT NULL,\n009100       TTNAME                         VARCHAR(18) NOT NULL,\n009200       AUTHHOWGOT                     CHAR(1) NOT NULL,\n009300       TIMESTAMP                      CHAR(12) NOT NULL,\n009400       DATEGRANTED                    CHAR(6) NOT NULL,\n009500       TIMEGRANTED                    CHAR(8) NOT NULL,\n009600       UPDATECOLS                     CHAR(1) NOT NULL,\n009700       ALTERAUTH                      CHAR(1) NOT NULL,\n009800       DELETEAUTH                     CHAR(1) NOT NULL,\n009900       INDEXAUTH                      CHAR(1) NOT NULL,\n010000       INSERTAUTH                     CHAR(1) NOT NULL,\n010100       SELECTAUTH                     CHAR(1) NOT NULL,\n010200       UPDATEAUTH                     CHAR(1) NOT NULL,\n010300       IBMREQD                        CHAR(1) NOT NULL,\n010400       GRANTEELOCATION                CHAR(16) NOT NULL,\n010500       LOCATION                       CHAR(16) NOT NULL,\n010600       COLLID                         CHAR(18) NOT NULL,\n010700       CONTOKEN                       CHAR(8) NOT NULL,\n010800       CAPTUREAUTH                    CHAR(1) NOT NULL\n010900     ) END-EXEC.\n011000******************************************************************\n011100* COBOL DECLARATION FOR TABLE SYSIBM.SYSTABAUTH                  *\n011200******************************************************************\n011300 01  DCLSYSTABAUTH.\n011400     10 GRANTOR              PIC X(8).\n011500     10 GRANTEE              PIC X(8).\n011600     10 GRANTEETYPE          PIC X(1).\n011700     10 DBNAME               PIC X(8).\n011800     10 SCREATOR             PIC X(8).\n011900     10 STNAME.\n012000        49 STNAME-LEN        PIC S9(4) USAGE COMP.\n012100        49 STNAME-TEXT       PIC X(18).\n012200     10 TCREATOR             PIC X(8).\n012300     10 TTNAME.\n012400        49 TTNAME-LEN        PIC S9(4) USAGE COMP.\n012500        49 TTNAME-TEXT       PIC X(18).\n012600     10 AUTHHOWGOT           PIC X(1).\n012700     10 TIMESTAMP            PIC X(12).\n012800     10 DATEGRANTED          PIC X(6).\n012900     10 TIMEGRANTED          PIC X(8).\n013000     10 UPDATECOLS           PIC X(1).\n013100     10 ALTERAUTH            PIC X(1).\n013200     10 DELETEAUTH           PIC X(1).\n013300     10 INDEXAUTH            PIC X(1).\n013400     10 INSERTAUTH           PIC X(1).\n013500     10 SELECTAUTH           PIC X(1).\n013600     10 UPDATEAUTH           PIC X(1).\n013700     10 IBMREQD              PIC X(1).\n013800     10 GRANTEELOCATION      PIC X(16).\n013900     10 LOCATION             PIC X(16).\n014000     10 COLLID               PIC X(18).\n014100     10 CONTOKEN             PIC X(8).\n014200     10 CAPTUREAUTH          PIC X(1).\n014300******************************************************************\n014400* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 25      *\n014500******************************************************************\n014600******************************************************************\n014700* DCLGEN TABLE(SYSIBM.SYSUSERAUTH)                               *\n014800******************************************************************\n014900     EXEC SQL DECLARE SYSIBM.SYSUSERAUTH TABLE\n015000     ( GRANTOR                        CHAR(8) NOT NULL,\n015100       GRANTEE                        CHAR(8) NOT NULL,\n015200       TIMESTAMP                      CHAR(12) NOT NULL,\n015300       DATEGRANTED                    CHAR(6) NOT NULL,\n015400       TIMEGRANTED                    CHAR(8) NOT NULL,\n015500       GRANTEETYPE                    CHAR(1) NOT NULL,\n015600       AUTHHOWGOT                     CHAR(1) NOT NULL,\n015700       ALTERBPAUTH                    CHAR(1) NOT NULL,\n015800       BINDADDAUTH                    CHAR(1) NOT NULL,\n015900       BSDSAUTH                       CHAR(1) NOT NULL,\n016000       CREATEDBAAUTH                  CHAR(1) NOT NULL,\n016100       CREATEDBCAUTH                  CHAR(1) NOT NULL,\n016200       CREATESGAUTH                   CHAR(1) NOT NULL,\n016300       DISPLAYAUTH                    CHAR(1) NOT NULL,\n016400       RECOVERAUTH                    CHAR(1) NOT NULL,\n016500       STOPALLAUTH                    CHAR(1) NOT NULL,\n016600       STOSPACEAUTH                   CHAR(1) NOT NULL,\n016700       SYSADMAUTH                     CHAR(1) NOT NULL,\n016800       SYSOPRAUTH                     CHAR(1) NOT NULL,\n016900       TRACEAUTH                      CHAR(1) NOT NULL,\n017000       IBMREQD                        CHAR(1) NOT NULL,\n017100       MON1AUTH                       CHAR(1) NOT NULL,\n017200       MON2AUTH                       CHAR(1) NOT NULL,\n017300       CREATEALIASAUTH                CHAR(1) NOT NULL,\n017400       SYSCTRLAUTH                    CHAR(1) NOT NULL,\n017500       BINDAGENTAUTH                  CHAR(1) NOT NULL,\n017600       ARCHIVEAUTH                    CHAR(1) NOT NULL,\n017700       CAPTURE1AUTH                   CHAR(1) NOT NULL,\n017800       CAPTURE2AUTH                   CHAR(1) NOT NULL\n017900     ) END-EXEC.\n018000******************************************************************\n018100* COBOL DECLARATION FOR TABLE SYSIBM.SYSUSERAUTH                 *\n018200******************************************************************\n018300 01  DCLSYSUSERAUTH.\n018400     10 GRANTOR              PIC X(8).\n018500     10 GRANTEE              PIC X(8).\n018600     10 TIMESTAMP            PIC X(12).\n018700     10 DATEGRANTED          PIC X(6).\n018800     10 TIMEGRANTED          PIC X(8).\n018900     10 GRANTEETYPE          PIC X(1).\n019000     10 AUTHHOWGOT           PIC X(1).\n019100     10 ALTERBPAUTH          PIC X(1).\n019200     10 BINDADDAUTH          PIC X(1).\n019300     10 BSDSAUTH             PIC X(1).\n019400     10 CREATEDBAAUTH        PIC X(1).\n019500     10 CREATEDBCAUTH        PIC X(1).\n019600     10 CREATESGAUTH         PIC X(1).\n019700     10 DISPLAYAUTH          PIC X(1).\n019800     10 RECOVERAUTH          PIC X(1).\n019900     10 STOPALLAUTH          PIC X(1).\n020000     10 STOSPACEAUTH         PIC X(1).\n020100     10 SYSADMAUTH           PIC X(1).\n020200     10 SYSOPRAUTH           PIC X(1).\n020300     10 TRACEAUTH            PIC X(1).\n020400     10 IBMREQD              PIC X(1).\n020500     10 MON1AUTH             PIC X(1).\n020600     10 MON2AUTH             PIC X(1).\n020700     10 CREATEALIASAUTH      PIC X(1).\n020800     10 SYSCTRLAUTH          PIC X(1).\n020900     10 BINDAGENTAUTH        PIC X(1).\n021000     10 ARCHIVEAUTH          PIC X(1).\n021100     10 CAPTURE1AUTH         PIC X(1).\n021200     10 CAPTURE2AUTH         PIC X(1).\n021300******************************************************************\n021400* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 29      *\n021500******************************************************************\n021600 01  WS-NULL-INDICATORS.\n021700   02  NI25             PIC S9(2)  COMP  OCCURS  25 TIMES.\n021800   02  NI29             PIC S9(2)  COMP  OCCURS  29 TIMES.\n021900******************************************************************\n022000     EXEC SQL DECLARE C1 CURSOR FOR\n022100       SELECT\n022200       GRANTOR,\n022300       GRANTEE,\n022400       GRANTEETYPE,\n022500       DBNAME,\n022600       SCREATOR,\n022700       STNAME,\n022800       TCREATOR,\n022900       TTNAME,\n023000       AUTHHOWGOT,\n023100       TIMESTAMP,\n023200       DATEGRANTED,\n023300       TIMEGRANTED,\n023400       UPDATECOLS,\n023500       ALTERAUTH,\n023600       DELETEAUTH,\n023700       INDEXAUTH,\n023800       INSERTAUTH,\n023900       SELECTAUTH,\n024000       UPDATEAUTH,\n024100       IBMREQD,\n024200       GRANTEELOCATION,\n024300       LOCATION,\n024400       COLLID,\n024500       CONTOKEN,\n024600       CAPTUREAUTH\n024700       FROM SYSIBM.SYSTABAUTH A\n024800       WHERE GRANTEE = :USERID\n024900       END-EXEC.\n025000*\n025100     EXEC SQL DECLARE C2 CURSOR FOR\n025200       SELECT\n025300     B.GRANTOR,\n025400     B.GRANTEE,\n025500     B.TIMESTAMP,\n025600     B.DATEGRANTED,\n025700     B.TIMEGRANTED,\n025800     B.GRANTEETYPE,\n025900     B.AUTHHOWGOT,\n026000     B.ALTERBPAUTH,\n026100     B.BINDADDAUTH,\n026200     B.BSDSAUTH,\n026300     B.CREATEDBAAUTH,\n026400     B.CREATEDBCAUTH,\n026500     B.CREATESGAUTH,\n026600     B.DISPLAYAUTH,\n026700     B.RECOVERAUTH,\n026800     B.STOPALLAUTH,\n026900     B.STOSPACEAUTH,\n027000     B.SYSADMAUTH,\n027100     B.SYSOPRAUTH,\n027200     B.TRACEAUTH,\n027300     B.IBMREQD,\n027400     B.MON1AUTH,\n027500     B.MON2AUTH,\n027600     B.CREATEALIASAUTH,\n027700     B.SYSCTRLAUTH,\n027800     B.BINDAGENTAUTH,\n027900     B.ARCHIVEAUTH,\n028000     B.CAPTURE1AUTH,\n028100     B.CAPTURE2AUTH\n028200       FROM SYSIBM.SYSUSERAUTH B\n028300       WHERE B.GRANTEE = :USERID\n028400       END-EXEC.\n028500 01  WS-END             PIC X(16)  VALUE 'XXXXXXXXXXXXXXXX'.\n028600*\n028700 LINKAGE SECTION.\n028800 01  EXEC-PARM.\n028900   05  PARM-LENGTH          PIC S9(4) COMP.\n029000   05  PARM-DATA            PIC X(8).\n029100*\n029200 PROCEDURE DIVISION USING EXEC-PARM.\n029300     DISPLAY 'EXECUTION STARTED'.\n029400 SIGNON.\n029500     IF PARM-LENGTH LESS THAN 4\n029600     THEN GO TO SIGNOFF\n029700     ELSE STRING PARM-DATA DELIMITED X'00' INTO USERID.\n029800     DISPLAY 'USERID ' USERID.\n029900     DISPLAY 'SEARCH FOR TABLE ACCESS'.\n030000     OPEN OUTPUT REPORT-FILE.\n030100     ACCEPT CURRENT-DATE FROM DATE.\n030200     ACCEPT TIME-OF-DAY FROM TIME.\n030300     STRING HH ':' MM ':' SS DELIMITED SIZE INTO PRINT-TIME.\n030400     STRING YR '/' MO '/' DY DELIMITED SIZE INTO PRINT-DATE.\n030500     EXEC SQL OPEN C1 END-EXEC.\n030600     EXEC SQL OPEN C2 END-EXEC.\n030700     MOVE RPT-HEADER1 TO RPT-HEADINGS.\n030800     WRITE RPT-HEADINGS.\n030900     MOVE SPACES TO RPT-HEADINGS.\n031000     WRITE RPT-HEADINGS.\n031100 MAINLINE.\n031200 REPORT1.\n031300     EXEC SQL FETCH C1 INTO :DCLSYSTABAUTH :NI25 END-EXEC.\n031400     PERFORM PTSQLCA.\n031500     IF SQLCODE NOT EQUAL ZERO\n031600     THEN GO TO REPORT1-END.\n031700     MOVE SPACES TO TTNAME-TEXT OF RPTSYSTABAUTH.\n031800     MOVE CORRESPONDING DCLSYSTABAUTH TO RPTSYSTABAUTH.\n031900     WRITE RPTSYSTABAUTH.\n032000     GO TO REPORT1.\n032100 REPORT1-END.\n032200     DISPLAY 'SEARCH FOR AUTHORIZATIONS'.\n032300 REPORT2.\n032400     EXEC SQL FETCH C2 INTO :DCLSYSUSERAUTH :NI29 END-EXEC.\n032500     PERFORM PTSQLCA.\n032600     IF SQLCODE NOT EQUAL ZERO\n032700     THEN GO TO REPORT2-END.\n032800     IF SYSOPRAUTH = 'Y'\n032900     THEN DISPLAY 'USERID ' USERID ' HAS SYSOPER ' .\n033000     IF SYSADMAUTH = 'Y'\n033100     THEN DISPLAY 'USERID ' USERID ' HAS SYSADAM '  .\n033200     GO TO REPORT2.\n033300 REPORT2-END.\n033400 SIGNOFF.\n033500     EXEC SQL CLOSE C1 END-EXEC.\n033600     EXEC SQL CLOSE C2 END-EXEC.\n033700     CLOSE REPORT-FILE.\n033800     DISPLAY 'EXECUTION COMPLETE'.\n033900     GOBACK.\n034000 PTSQLCA.\n034100     MOVE SQLCODE TO PRINT-RC.\n034200     DISPLAY 'RC=' PRINT-RC.\n034300 PTSQLCA-EXIT.\n034400     EXIT.\n034500*END*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COB2": {"ttr": 774, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00\\x00\\x00\\x96\\x07\\x1f\\x01\\x00\\x03O\\x14\\x16\\x00\\xe0\\x00\\xdc\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "1996-03-11T00:00:00", "modifydate": "2000-02-03T14:16:00", "lines": 224, "newlines": 220, "modlines": 0, "user": "TS00DZL"}, "text": "000100 IDENTIFICATION DIVISION.\n000200 PROGRAM-ID.    COB2.\n000300 ENVIRONMENT DIVISION.\n000400 CONFIGURATION SECTION.\n000500 SOURCE-COMPUTER. IBM-3090.\n000600 OBJECT-COMPUTER. IBM-3090.\n000700 INPUT-OUTPUT SECTION.\n000800 FILE-CONTROL.\n000900     SELECT REPORT-FILE ASSIGN TO UT-S-REPORT.\n001000 DATA DIVISION.\n001100 FILE SECTION.\n001200 FD  REPORT-FILE\n001300     RECORDING MODE IS V\n001400     BLOCK CONTAINS 0 RECORDS.\n001500 01  RPTSYSTABAUTH.\n001600     10 GRANTOR              PIC X(8).\n001700     10 FILLER               PIC X(1).\n001800     10 GRANTEE              PIC X(8).\n001900     10 FILLER               PIC X(1).\n002000     10 TCREATOR             PIC X(8).\n002100     10 TTNAME.\n002200        49 TTNAME-TEXT       PIC X(18).\n002300     10 FILLER               PIC X(2).\n002400     10 DATEGRANTED          PIC X(6).\n002500     10 FILLER               PIC X(8).\n002600     10 UPDATECOLS           PIC X(1).\n002700     10 FILLER               PIC X(8).\n002800     10 ALTERAUTH            PIC X(1).\n002900     10 FILLER               PIC X(8).\n003000     10 DELETEAUTH           PIC X(1).\n003100     10 FILLER               PIC X(8).\n003200     10 INDEXAUTH            PIC X(1).\n003300     10 FILLER               PIC X(8).\n003400     10 INSERTAUTH           PIC X(1).\n003500     10 FILLER               PIC X(8).\n003600     10 SELECTAUTH           PIC X(1).\n003700     10 FILLER               PIC X(8).\n003800     10 UPDATEAUTH           PIC X(1).\n003900 01  RPT-HEADINGS            PIC X(132).\n004000 WORKING-STORAGE SECTION.\n004100 01  WS-START             PIC X(16)  VALUE 'XXXXXXXXXXXXXXXX'.\n004200 01  ALPHA-FIELDS.\n004300   05  TABNAME            PIC X(18)  VALUE SPACES.\n004400   05  CURRENT-DATE.\n004500       10  YR             PIC X(2).\n004600       10  MO             PIC X(2).\n004700       10  DY             PIC X(2).\n004800   05  TIME-OF-DAY.\n004900       10  HH             PIC X(2).\n005000       10  MM             PIC X(2).\n005100       10  SS             PIC X(2).\n005200       10  CC             PIC X(2).\n005300   05  PRINT-DATE         PIC X(8).\n005400   05  PRINT-TIME         PIC X(8).\n005500 01  ALPHA-LITERALS.\n005600   05  DUMMY              PIC X(4)   VALUE SPACES.\n005700 01  NUMERIC-FIELDS.\n005800   05  GROUP-COUNTER        PIC S9(8) COMP VALUE +0.\n005900   05  COUNTER              PIC S9(8)      VALUE +0.\n006000   05  PRINT-RC             PIC  9(3).\n006100 01  RPT-HEADER1.\n006200     10 GRANTOR-H            PIC X(9)  VALUE 'GRANTOR'.\n006300     10 GRANTEE-H            PIC X(9)  VALUE 'GRANTEE'.\n006400     10 TCREATOR-H           PIC X(8)  VALUE 'CREATOR'.\n006500     10 TTNAME-H.\n006600        49 TTNAME-LEN-H      PIC S9(4) USAGE COMP.\n006700        49 TTNAME-TEXT-H     PIC X(18) VALUE 'TABLENAME'.\n006800     10 DATEGRANTED-H        PIC X(6)  VALUE 'DATE'.\n006900     10 FILLER               PIC X(8).\n007000     10 UPDATECOLS-H         PIC X(9)  VALUE 'COLUMNS'.\n007100     10 ALTERAUTH-H          PIC X(9)  VALUE 'ALTER'.\n007200     10 DELETEAUTH-H         PIC X(9)  VALUE 'DELETE'.\n007300     10 INDEXAUTH-H          PIC X(9)  VALUE 'INDEX'.\n007400     10 INSERTAUTH-H         PIC X(9)  VALUE 'INSERT'.\n007500     10 SELECTAUTH-H         PIC X(9)  VALUE 'SSELECT'.\n007600     10 UPDATEAUTH-H         PIC X(9)  VALUE 'UPDATE'.\n007700******************************************************************\n007800*    SQLCA INCLUDE                                               *\n007900******************************************************************\n008000     EXEC SQL INCLUDE SQLCA END-EXEC.\n008100******************************************************************\n008200*    DCLGEN TABLE(SYSIBM.SYSTABAUTH)                             *\n008300******************************************************************\n008400     EXEC SQL DECLARE SYSIBM.SYSTABAUTH TABLE\n008500     ( GRANTOR                        CHAR(8) NOT NULL,\n008600       GRANTEE                        CHAR(8) NOT NULL,\n008700       GRANTEETYPE                    CHAR(1) NOT NULL,\n008800       DBNAME                         CHAR(8) NOT NULL,\n008900       SCREATOR                       CHAR(8) NOT NULL,\n009000       STNAME                         VARCHAR(18) NOT NULL,\n009100       TCREATOR                       CHAR(8) NOT NULL,\n009200       TTNAME                         VARCHAR(18) NOT NULL,\n009300       AUTHHOWGOT                     CHAR(1) NOT NULL,\n009400       TIMESTAMP                      CHAR(12) NOT NULL,\n009500       DATEGRANTED                    CHAR(6) NOT NULL,\n009600       TIMEGRANTED                    CHAR(8) NOT NULL,\n009700       UPDATECOLS                     CHAR(1) NOT NULL,\n009800       ALTERAUTH                      CHAR(1) NOT NULL,\n009900       DELETEAUTH                     CHAR(1) NOT NULL,\n010000       INDEXAUTH                      CHAR(1) NOT NULL,\n010100       INSERTAUTH                     CHAR(1) NOT NULL,\n010200       SELECTAUTH                     CHAR(1) NOT NULL,\n010300       UPDATEAUTH                     CHAR(1) NOT NULL,\n010400       IBMREQD                        CHAR(1) NOT NULL,\n010500       GRANTEELOCATION                CHAR(16) NOT NULL,\n010600       LOCATION                       CHAR(16) NOT NULL,\n010700       COLLID                         CHAR(18) NOT NULL,\n010800       CONTOKEN                       CHAR(8) NOT NULL,\n010900       CAPTUREAUTH                    CHAR(1) NOT NULL\n011000     ) END-EXEC.\n011100******************************************************************\n011200* COBOL DECLARATION FOR TABLE   SYSIBM.SYSTABAUTH                *\n011300******************************************************************\n011400 01  DCLSYSTABAUTH.\n011500     10 GRANTOR              PIC X(8).\n011600     10 GRANTEE              PIC X(8).\n011700     10 GRANTEETYPE          PIC X(1).\n011800     10 DBNAME               PIC X(8).\n011900     10 SCREATOR             PIC X(8).\n012000     10 STNAME.\n012100        49 STNAME-LEN        PIC S9(4) USAGE COMP.\n012200        49 STNAME-TEXT       PIC X(18).\n012300     10 TCREATOR             PIC X(8).\n012400     10 TTNAME.\n012500        49 TTNAME-LEN        PIC S9(4) USAGE COMP.\n012600        49 TTNAME-TEXT       PIC X(18).\n012700     10 AUTHHOWGOT           PIC X(1).\n012800     10 TIMESTAMP            PIC X(12).\n012900     10 DATEGRANTED          PIC X(6).\n013000     10 TIMEGRANTED          PIC X(8).\n013100     10 UPDATECOLS           PIC X(1).\n013200     10 ALTERAUTH            PIC X(1).\n013300     10 DELETEAUTH           PIC X(1).\n013400     10 INDEXAUTH            PIC X(1).\n013500     10 INSERTAUTH           PIC X(1).\n013600     10 SELECTAUTH           PIC X(1).\n013700     10 UPDATEAUTH           PIC X(1).\n013800     10 IBMREQD              PIC X(1).\n013900     10 GRANTEELOCATION      PIC X(16).\n014000     10 LOCATION             PIC X(16).\n014100     10 COLLID               PIC X(18).\n014200     10 CONTOKEN             PIC X(8).\n014300     10 CAPTUREAUTH          PIC X(1).\n014400******************************************************************\n014500* THE NUMBER OF COLUMNS DESCRIBED BY THIS DECLARATION IS 25      *\n014600******************************************************************\n014700 01  WS-IND.\n014800   02  INDY             PIC S9(2)  COMP  OCCURS  25 TIMES.\n014900     EXEC SQL DECLARE C1 CURSOR FOR\n015000       SELECT\n015100       GRANTOR,\n015200       GRANTEE,\n015300       GRANTEETYPE,\n015400       DBNAME,\n015500       SCREATOR,\n015600       STNAME,\n015700       TCREATOR,\n015800       TTNAME,\n015900       AUTHHOWGOT,\n016000       TIMESTAMP,\n016100       DATEGRANTED,\n016200       TIMEGRANTED,\n016300       UPDATECOLS,\n016400       ALTERAUTH,\n016500       DELETEAUTH,\n016600       INDEXAUTH,\n016700       INSERTAUTH,\n016800       SELECTAUTH,\n016900       UPDATEAUTH,\n017000       IBMREQD,\n017100       GRANTEELOCATION,\n017200       LOCATION,\n017300       COLLID,\n017400       CONTOKEN,\n017500       CAPTUREAUTH\n017600       FROM SYSIBM.SYSTABAUTH\n017700       WHERE TTNAME  = :TABNAME\n017800       END-EXEC.\n017900 01  WS-END             PIC X(16)  VALUE 'XXXXXXXXXXXXXXXX'.\n018000 LINKAGE SECTION.\n018100 01  EXEC-PARM.\n018200   05  PARM-LENGTH          PIC S9(4) COMP.\n018300   05  PARM-DATA            PIC X(18).\n018400 PROCEDURE DIVISION USING EXEC-PARM.\n018500     DISPLAY 'EXECUTION STARTED'.\n018600 SIGNON.\n018700     IF PARM-LENGTH LESS THAN 4\n018800     THEN GO TO SIGNOFF\n018900     ELSE STRING PARM-DATA DELIMITED X'00' INTO TABNAME.\n019000     DISPLAY 'TABLE ' TABNAME.\n019100     OPEN OUTPUT REPORT-FILE.\n019200     ACCEPT CURRENT-DATE FROM DATE.\n019300     ACCEPT TIME-OF-DAY FROM TIME.\n019400     STRING HH ':' MM ':' SS DELIMITED SIZE INTO PRINT-TIME.\n019500     STRING YR '/' MO '/' DY DELIMITED SIZE INTO PRINT-DATE.\n019600     EXEC SQL OPEN C1 END-EXEC.\n019700     MOVE RPT-HEADER1 TO RPT-HEADINGS.\n019800     WRITE RPT-HEADINGS.\n019900     MOVE SPACES TO RPT-HEADINGS.\n020000     WRITE RPT-HEADINGS.\n020100 MAINLINE.\n020200     EXEC SQL FETCH C1 INTO :DCLSYSTABAUTH :INDY END-EXEC.\n020300     PERFORM PTSQLCA.\n020400     IF SQLCODE NOT EQUAL ZERO\n020500     THEN GO TO SIGNOFF\n020600     END-IF.\n020700     MOVE SPACES TO TTNAME-TEXT OF RPTSYSTABAUTH.\n020800     MOVE CORRESPONDING DCLSYSTABAUTH TO RPTSYSTABAUTH.\n020900     WRITE RPTSYSTABAUTH.\n021000     GO TO MAINLINE.\n021100 SIGNOFF.\n021200     EXEC SQL CLOSE C1 END-EXEC.\n021300     MOVE 'LEGEND: G = GRANTABLE, Y = NOT GRANTABLE'\n021400          TO RPT-HEADINGS.\n021500     WRITE RPT-HEADINGS.\n021600     CLOSE REPORT-FILE.\n021700     DISPLAY 'EXECUTION COMPLETE'.\n021800     GOBACK.\n021900 PTSQLCA.\n022000     MOVE SQLCODE TO PRINT-RC.\n022100     DISPLAY 'RC=' PRINT-RC.\n022200 PTSQLCA-EXIT.\n022300     EXIT.\n022400*END*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COB370": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x02\\x0f\\x01\\x00\\x03O\\x11\\x19\\x00\"\\x00\"\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-20T00:00:00", "modifydate": "2000-02-03T11:19:00", "lines": 34, "newlines": 34, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX$ JOB (TYYYYY,XXXX),'D.LEES.X4311',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(30),\n//      REGION=17M\n//*====================================================*//\n//* YOUR LE/370 LIBRARIES MAY BE NAMED DIFFERENTLY     *//\n//*====================================================*//\n//COB370  PROC CMP='SYS1.IGY.SIGYCOMP',LIB='SYS1.CEE.SCEELKED'\n//*   PROC FOR COBOL/LE - COMPILE AND LINK\n//COB    EXEC  PGM=IGYCRCTL,PARM=(OBJECT,LIST,MAP,LIB),\n//       REGION=4M\n//STEPLIB  DD  DSNAME=&CMP,DISP=SHR\n//SYSPRINT DD  SYSOUT=*\n//SYSLIN   DD  DSNAME=&&LOADSET,UNIT=SYSDA,DISP=(MOD,PASS),\n//             SPACE=(TRK,(3,3))\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT4   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT5   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT6   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSUT7   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//LKED   EXEC  PGM=IEWL,PARM='LIST,XREF,LET,MAP',COND=(5,LT,COB),\n//             REGION=2M\n//SYSLIN   DD  DSNAME=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSNAME=&&GOSET(GO),DISP=(,PASS),UNIT=SYSDA,\n//             SPACE=(CYL,(1,1,1))\n//SYSLIB   DD  DSNAME=&LIB,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPRINT DD  SYSOUT=*\n//         PEND\n//GO       EXEC COB370\n//COB.SYSIN  DD DSN=TST.DZL.XMIT(COB2),DISP=SHR\n//LKED.SYSLMOD DD DSN=TST.DZL.XMIT.LOAD(COB2)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "COPYANY": {"ttr": 781, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1d\\x00\\x00\\x00\\x933o\\x01\\x003?\\t5\\x00\\xc3\\x00z\\x00\\xc3\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.29", "flags": 0, "createdate": "1993-12-02T00:00:00", "modifydate": "2000-11-28T09:35:00", "lines": 195, "newlines": 122, "modlines": 195, "user": "TS00DZL"}, "text": "COPYANY  CSECT   D.LEES 1981,1993,2000\n         USING   COPYANY,12\n         PRINT   NOGEN\nSETUP    STM     14,12,12(13)\n         LR      12,15\n         ST      13,SAVE+4\n         LA      13,SAVE\n         L       1,0(1)\n         CLC     0(1,1),=H'1'              ONE BYTE PARM?\n         BNE     INDCB                     NOPE, DEFAULT TO X'00'\n         LA      1,2(1)\n         MVC     PAD,0(1)                  PARM=' ' BECOMES PAD\n         CLI     PAD,C'B'                  PARM='B' FOR BLANKS\n         BNE     INDCB\n         MVI     PAD,C' '\nINDCB    OPEN    (INFILE,INPUT)\n         LA      10,INFILE\n         USING   IHADCB,10\n         L       11,STORADR\n         USING   STORD,11\n         MVC     RECFM,DCBRECFM\n         MVC     LRECL,DCBLRECL\n         MVC     BLKSZ,DCBBLKSI\nOUTDCB   OPEN    (OUTFILE,OUTPUT)\n         LA      10,OUTFILE\n         USING   IHADCB,10\n         MVC     RECFM2,DCBRECFM\n         MVC     LRECL2,DCBLRECL\n         MVC     BLKSZ2,DCBBLKSI\nSELECT   TM      RECFM,B'10000000'      INDCB\n         BC      14,VARIN\n         BC      1,FIXIN\nVARIN    TM      DCBRECFM,B'10000000'   OUTDCB\n         BC      14,VBVB\n         BC      1,VBFB\nFIXIN    TM      DCBRECFM,B'10000000'\n         BC      14,FBVB\n         BC      1,FBFB\nVBVB     GET     INFILE\n         LR      6,1\n         AP      COUNT,=P'1'\n         PUT     OUTFILE\n         LR      4,1\n         LH      7,0(6)\n         CH      7,DCBLRECL\n         BC      13,NOTRUNC\n         LH      7,DCBLRECL\n         STH     7,0(6)                  SET RDW FOR TRUNC RECORD\nNOTRUNC  LR      5,7\n         ICM     7,8,PAD\n         MVCL    4,6\n         B       VBVB\nVBFB     GET     INFILE\n         LR      6,1\n         AP      COUNT,=P'1'\n         PUT     OUTFILE\n         LR      4,1\n         LH      5,DCBLRECL\n         LH      7,0(6)\n         A       6,=F'4'\n         S       7,=F'4'\n         ICM     7,8,PAD\n         MVCL    4,6\n         B       VBFB\nFBVB     GET     INFILE\n         LR      6,1\n         AP      COUNT,=P'1'\n         PUT     OUTFILE\n         LR      4,1\n         LH      5,DCBLRECL\n         LH      7,LRECL\n         MVC     RDW(2),DCBLRECL\n         MVC     0(2,4),RDW\n         A       4,=F'4'\n         ICM     7,8,PAD\n         MVCL    4,6\n         B       FBVB\nFBFB     GET     INFILE\n         LR      6,1\n         AP      COUNT,=P'1'\n         PUT     OUTFILE\n         LR      4,1\n         LH      5,DCBLRECL\n         LH      7,LRECL\n         ICM     7,8,PAD\n         MVCL    4,6\n         B       FBFB\nWRAPUP   CLOSE   (INFILE,,OUTFILE)\n         SPACE   3\n         PRINT ON,GEN\n         UNPK    BANNER+180(15),COUNT(8)\n         OI      BANNER+194,X'F0'\n         TM      RECFM,B'10000000'\n         BC      14,VB\n         MVC     BANNER+120(2),=C'FB'\n         B       FB\nVB       MVC     BANNER+120(2),=C'VB'\nFB       EQU     *\n         TM      RECFM2,B'10000000'\n         BC      14,VB2\n         MVC     BANNER+151(2),=C'FB'\n         B       FB2\nVB2      MVC     BANNER+151(2),=C'VB'\nFB2      EQU     *\n         LH      3,LRECL\n         CVD     3,DWORD\n         OI      DWORD+7,X'0F'\n         UNPK    BANNER+123(5),DWORD+5(3)\n         LH      3,LRECL2\n         CVD     3,DWORD\n         OI      DWORD+7,X'0F'\n         UNPK    BANNER+154(5),DWORD+5(3)\n         LH      3,BLKSZ\n         CVD     3,DWORD\n         OI      DWORD+7,X'0F'\n         UNPK    BANNER+129(5),DWORD+5(3)\n         LH      3,BLKSZ2\n         CVD     3,DWORD\n         OI      DWORD+7,X'0F'\n         UNPK    BANNER+160(5),DWORD+5(3)\n         XR      0,0\nBANNER   WTO   ('***************************',D),                      X\n               ('*     C O P Y A N Y       *',D),                      X\n               ('***************************',D),                      X\n               ('* INFILE : XX-XXXXX-XXXXX *',D),                      X\n               ('* OUTFILE: XX-XXXXX-XXXXX *',D),                      X\n               ('* COUNT= 000000000000000  *',D),                      X\n               ('***************************',D),                      X\n               ('D.LEES',DE),                                          X\n               ROUTCDE=11,DESC=6\n         SPACE   3\n         L       13,SAVE+4\n         LM      14,12,12(13)\n         XR      15,15\n         BR      14\n* * * * * END EXECUTABLE CODE  * * * * * * * * *\nSAVE     DS      18F\nCOUNT    DC      PL8'0'\nRDW      DC      F'0'\nDWORD    DC      D'0'\nPAD      DC      X'00'       DEFAULT PAD IS HEX 0'S\nINFILE   DCB     DDNAME=INFILE,EODAD=WRAPUP,MACRF=(GL),DSORG=PS,       X\n               BUFNO=20\n*\n         PRINT   GEN\nOUTFILE  DCB     DDNAME=OUTFILE,MACRF=(PL),DSORG=PS,EXLST=EXITLIST,    X\n               BUFNO=20\n         PRINT   GEN\nEXITLIST DS     0F\n         DC     AL1(5)\n         DC     VL3(EXITRTN)\n         DC     X'80000000'\nSTORADR  DC     V(STOR)\n         LTORG\n*---------------------------------------------------------------------*\nEXITRTN  CSECT\n         USING   EXITRTN,15\n         ST      14,SAVE14\n         LR      10,1\n         USING   IHADCB,10\n         L       11,STORADDR\n         USING   STORD,11\nDEFAULTS CLC     DCBRECFM,=X'00'\n         BNE     D1\n         MVC     DCBRECFM,RECFM\nD1       CLC     DCBBLKSI,=H'0'\n         BNE     D2\n         MVC     DCBBLKSI,BLKSZ\nD2       CLC     DCBLRECL,=H'0'\n         BNE     D3\n         MVC     DCBLRECL,LRECL\nD3       L       14,SAVE14\n         BR      14\nSAVE14   DS      F\nSTORADDR DC      V(STOR)\n         LTORG\n*---------------------------------------------------------------------*\nSTOR     CSECT\n         DS      H\n         DS      H\n         DS      BL1\n         DS      H\n         DS      H\n         DS      BL1\n*---------------------------------------------------------------------*\nSTORD    DSECT\nLRECL    DS      H                          INFILE\nBLKSZ    DS      H\nRECFM    DS      BL1\nLRECL2   DS      H                          OUTFILE\nBLKSZ2   DS      H\nRECFM2   DS      BL1\n*---------------------------------------------------------------------*\n         DCBD    DSORG=PS,DEVD=DA\n         END     COPYANY\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CPUID": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x0f\\x01\\x00\\x02\\x0f\\x10\\t\\x00\\x8b\\x00\\x8b\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-20T00:00:00", "modifydate": "2000-01-20T10:09:00", "lines": 139, "newlines": 139, "modlines": 0, "user": "TS00DZL"}, "text": "         TITLE 'CPU ID DISPLAY'\nCPUID    CSECT\n         PRINT OFF\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         PRINT ON\n*=====================================*\n*      I N I T I A L I Z A T I O N\n*=====================================*\n         PRINT NOGEN\nSOJ      SAVE  (14,12)\n         BALR  R12,R0\n         USING *,12\n         LA    R14,SAVEAREA\n         ST    R13,SAVEAREA+4\n         ST    R14,8(0,13)\n         LR    R13,R14\n*        LR    R10,R1\n*        USING CPPL,R10\n         OPEN  (SYSPRINT,OUTPUT)\n         PUT   SYSPRINT,HEADER\n*=====================================*\n*   M A I N    P R O C E D U R E\n*=====================================*\nMAIN     EQU   *\n         MODESET MODE=SUP\n         STIDP DWORD\n         MODESET MODE=PROB\nMODEL    EQU   *\n         LA    R3,MODEL#\n         LA    R4,TBLX\n         LA    R11,2\nMODL1    EQU   *\n         MVC   0(1,R4),0(R3)\n         MVC   1(1,R4),0(R3)\n         LA    R3,1(R3)\n         LA    R4,2(R4)\n         BCT   R11,MODL1\n         LA    R4,TBLX\n         LA    R11,2\nMODL2    EQU   *\n         TR    0(1,R4),HEXUPPER\n         TR    1(1,R4),HEXLOWER\n         LA    R4,2(R4)\n         BCT   R11,MODL2\nCPUID#   EQU   *\n         LA    R3,CPU#\n         LA    R4,TBLX+7\n         LA    R11,3\nCPUL1    EQU   *\n         MVC   0(1,R4),0(R3)\n         MVC   1(1,R4),0(R3)\n         LA    R3,1(R3)\n         LA    R4,2(R4)\n         BCT   R11,CPUL1\n         LA    R4,TBLX+7\n         LA    R11,3\nCPUL2    EQU   *\n         TR    0(1,R4),HEXUPPER\n         TR    1(1,R4),HEXLOWER\n         LA    R4,2(R4)\n         BCT   R11,CPUL2\n*        L     R4,CPPLUPT\n*        L     R5,CPPLECT\n*        PUTLINE PARM=PTPB,UPT=(R4),ECT=(R5),ECB=ECB1,            X\n*              OUTPUT=(LINES,TERM,MULTLIN,DATA),MF=(E,IOPL1)\n         PUT   SYSPRINT,TBLX\n*=====================================*\n*       T E R M I N A T I O N\n*=====================================*\nEOJ      EQU   *\n*        CLOSE (SYSPRINT)\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*=====================================*\n*      S T O R A G E   A R E A S\n*=====================================*\nSAVEAREA DC    9D'0'\n         DS    0F\nHEXUPPER DC    16CL1'0'\n         DC    16CL1'1'\n         DC    16CL1'2'\n         DC    16CL1'3'\n         DC    16CL1'4'\n         DC    16CL1'5'\n         DC    16CL1'6'\n         DC    16CL1'7'\n         DC    16CL1'8'\n         DC    16CL1'9'\n         DC    16CL1'A'\n         DC    16CL1'B'\n         DC    16CL1'C'\n         DC    16CL1'D'\n         DC    16CL1'E'\n         DC    16CL1'F'\nHEXLOWER DC    16CL16'0123456789ABCDEF'\nDWORD    DC    D'0'\n         ORG   DWORD\n         DS    C\nCPU#     DS    CL3\nMODEL#   DS    CL2\n         DS    CL2\nLINES    DS    0F\n         DC    A(TBLX),H'82',H'0'\n         DC    CL78'MODEL# CPUID#'\n         DC    A(0),H'82',H'0'\nTBLX     DC    CL78' '\nLINES@   EQU   *                    END OF SACRED AREA\nECB1     DC    F'0'\nIOPL1    DC    4F'0'\nPTPB     PUTLINE MF=L\n         EJECT\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,RECFM=FB,LRECL=60,  +\n               BLKSIZE=60\nHEADER   DC    CL60'MODEL / CPUID'\n         IKJEFFGF\n         IKJCPPL\n         IKJLSD\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CSTRACE": {"ttr": 1031, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01/\\x00\\x00\\x00\\x98\\x11?\\x00\\x98\\x12\\x0f\\x16H\\x00\\xac\\x00V\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.47", "flags": 0, "createdate": "1998-04-23T00:00:00", "modifydate": "1998-04-30T16:48:00", "lines": 172, "newlines": 86, "modlines": 0, "user": "TS00DZL"}, "text": "****************************************************************\n* FROM DMSC3001 SOURCE:  (WHY THE PARM LIST IS 'DIFFERENT')\n*        THIS CSECT IS THE APPLICATION INTERFACE FOR THE\n*        SEQUENTIAL FILE HANDLER. IT IS ENTERED VIA A CALL\n*        WITH A PARAMETER LIST. PL/I, COBOL, AND ASSEMBLER\n*        APPLICATIONS CAN BE SUPPORTED. FOR PL/I APPLICATIONS\n*        A SINGLE PARAMETER IS RECEIVED WHICH IS A POINTER\n*        VARIABLE INITIALIZED WITH THE ADDRESS OF AN ARRAY\n*        OF POINTER VARIABLES. THE ARRAY IS THE TRUE\n*        PARAMETER LIST WITH THE POINTER VARIABLE FOLLOWING\n*        THE LAST PARAMETER SET TO A NULL ADDRESS\n*        (X'FF000000'). FOR ALC OR COBOL, A STANDARD\n*        PARAMETER LIST IS RECEIVED WITH THE HIGH-ORDER\n*        BIT OF THE LAST WORD SET TO ONE.\n* THIS TRACE IS CALLED FROM THE PL/1 'BRIDGE' : DMSC3003\n* SO IT FOLLOWS THE PL/1 PARMLIST FORMAT. INTERNAL DIAGNOSTIC\n* SNAPS CAN BE UN-COMMENTED FOR HELPFUL INFORMATION.\n****************************************************************\nCSTRACE  CSECT                             D.LEES 4/98    V.1\n         STM   R14,R12,12(R13)             SAVE REGS\n         LR    R12,R15\n         USING CSTRACE,R12\n         ST    R13,SAVEAREA+4\n         LA    R14,SAVEAREA\n         ST    R14,8(,R13)\n         LR    R13,R14\n         LR    R11,R1              SAVE PARM PTR - VECTOR\n         L     R11,0(R11)          CALL CSTRACE (PARM PTR)\n* R1 -> PARM_PTR -> PARMLIST       (SEE DMSC3003)\nSNAPINIT NOP    SNAPTERM\n         OPEN   (SNAPDD,OUTPUT)\n         MVI    SNAPINIT+1,X'F0'\n         B      SNAPTERM\nSNAPDD   DCB   DDNAME=SNAPPY,MACRF=(W),DSORG=PS,RECFM=VBA,             X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU    *\n*\n         LA    R4,SNAPLST          START OF SNAPSHOT LIST {A:B}\n         LA    R6,HEADERS          START OF HEADER  LIST\n         MVC   HEADERS(64),HEDRLST CLEAN SLATE\n*\nFUNC     EQU   *\n         L     R2,4(R11)           SKIP 1ST PARM (PL1 COUNT)\n         MVC   CALLFUNC(4),0(R2)   COPY FUNCTION TO STORAGE\n         LA    R2,CALLFUNC         SNAP THIS AREA (ALIGNED)\n         LA    R3,4(R2)\n         STM   R2,R3,0(R4)\n         LA    R4,8(R4)            NEXT SNAP PAIR\n         LA    R6,4(R6)            NEXT HEADER\n**       SNAP  DCB=SNAPDD,STORAGE=((2),(3)),ID=001\n         CLC   0(4,R2),=C'OPN '\n         BE    ALLSET              JUST NOTE OPEN CALL\n         CLC   0(4,R2),=C'CLS '\n         BE    ALLSET              JUST NOTE CLOSE CALL\n         CLC   0(4,R2),=C'SNAP'\n         BE    ALLSET              JUST NOTE SNAP CALL\nPCB      EQU   *\n         TM    8(R11),X'80'        UNEXPECTED EOL?\n         BO    ALLSET\n         L     R2,8(R11)\n         LA    R3,76(R2)\n         STM   R2,R3,0(R4)\n         LA    R4,8(R4)            NEXT SNAP PAIR\n         LA    R6,4(R6)            NEXT HEADER\n**       SNAP  DCB=SNAPDD,STORAGE=((2),(3)),ID=002\nIOA      EQU   *\n         TM    12(R11),X'80'       UNEXPECTED EOL?\n         BO    ALLSET\n         L     R2,12(R11)\n         LH    R3,74(R2)           PCB+74 = LENGTH OF IOA\n         LA    R3,0(R2,R3)\n         STM   R2,R3,0(R4)\n         LA    R4,8(R4)            NEXT SNAP PAIR\n         LA    R6,4(R6)            NEXT HEADER\n**       SNAP  DCB=SNAPDD,STORAGE=((2),(3)),ID=003\nKFBA     EQU   *\n         TM    16(R11),X'80'       UNEXPECTED EOL?\n         BO    ALLSET\n         L     R2,16(R11)\n         LH    R1,0(R2)            HWD LEN OF KFB AREA\n         LA    R2,2(R2)            SKIP\n         LA    R3,0(R1,R2)         MAX PATH (KEYS+SEGNAMES)\n         STM   R2,R3,0(R4)\n         LA    R4,8(R4)            NEXT SNAP PAIR\n         LA    R6,4(R6)            NEXT HEADER\n**       SNAP  DCB=SNAPDD,STORAGE=((2),(3)),ID=004\n         LA    R5,20               STEP THRU SSA ADDRS IX\n         LA    R7,11               STEP THRU SSA ADDRS IX\nSSAX     EQU   *\n         LA    R1,0(R5,R11)\n         TM    0(R1),X'80'         VARIABLE # OF SSA'S\n         BO    ALLSET\n         L     R2,0(R5,R11)\n         LA    R3,8(R2)            DUMP 1ST 8 BYTES OF SSAX (DEFAULT)\n         LA    R1,KEYTBL\n         USING KEYTABLE,R1\n         LA    R8,KTBLINCR\n         LA    R9,KTBLEND\nLOOKFKEY EQU   *\n         CLC   SEGNAME,0(R2)       MATCH?\n         BE    HAVKEY\n         BXLE  R1,R8,LOOKFKEY\n         B     NOKEY               NOPE.\nHAVKEY   EQU   *\n         AH    R3,KEYLEN           ADD ACTUAL KEY LENGTH\nNOKEY    EQU   *\n         STM   R2,R3,0(R4)\n         LA    R4,8(R4)            NEXT SNAP PAIR\n         LA    R6,4(R6)            NEXT HEADER\n**       SNAP  DCB=SNAPDD,STORAGE=((2),(3)),ID=005\n         LA    R5,4(R5)            PURSUE NEXT SSA . . .\n         BCT   R7,SSAX             > 11 EXPAND SNAP LISTS!!\nALLSET   EQU   *\n         S     R4,=F'8'            BACK ONE WORD\n         OI    4(R4),X'80'         ,VL (ON LAST WORD)\n         S     R6,=F'4'            BACK ONE SLOT\n         OI    0(R6),X'80'         ,VL\n*\n*        LR    R2,R11              SNAP PARMLIST\n*        LA    R3,24(R2)\n*        SNAP  DCB=SNAPDD,STORAGE=((2),(3)),ID=666,PDATA=(REGS)\n*\n         SNAP  DCB=SNAPDD,LIST=SNAPLST,STRHDR=HEADERS\n*\nRETURN   EQU   *\n         L     R13,SAVEAREA+4\n         LM    R14,R12,12(R13)     RESTORE REGS\n         XR    R15,R15             I'M OK - YOU'RE OK !\n         BR    R14\n************************************************************\n**  S T O R A G E  *****************************************\n************************************************************\nSAVEAREA DC    9D'0'\nCALLFUNC DS    CL4\nSNAPLST  DC    15D'0'\n         DC    X'8000000080000000'           EMERGENCY STOP!\nHEADERS  DS    16F\nHEDRLST  DS    16F\n         ORG   HEDRLST\n         DC    A(HDR1L),A(HDR2L),A(HDR3L),A(HDR4L),A(HDR5L)\n         DC    A(HDR5L),A(HDR5L),A(HDR5L),A(HDR5L),A(HDR5L)\n         DC    A(HDR5L),A(HDR5L),A(HDR5L),A(HDR5L),A(HDR5L)\n         DC    X'80000000'                    EMERGENCY STOP!\nHDR1L    DC    AL1(L'HDR1)\nHDR1     DC    CL20'FUNCTION'\nHDR2L    DC    AL1(L'HDR2)\nHDR2     DC    CL20'PCB     '\nHDR3L    DC    AL1(L'HDR3)\nHDR3     DC    CL20'I/O AREA'\nHDR4L    DC    AL1(L'HDR4)\nHDR4     DC    CL20'KFB AREA'\nHDR5L    DC    AL1(L'HDR5)\nHDR5     DC    CL20'SSA_____'\n*\n         DS    0D                         ALIGN!\nKEYTBL   EQU   *\n         DC    CL8'ROOT    ',H'9'\n         DC    CL8'UNMTRRT ',H'5'\n         DC    CL8'SUNRCR  ',H'7'\n         DC    CL8'SVCCONT ',H'7'\n         DC    CL8'SUNONE  ',H'7'\n         DC    CL8'MTRRATE ',H'5'\n         DC    CL8'MTRDATA ',H'9'\n         ORG   *-KTBLINCR\nKTBLEND  EQU   *\n         LTORG\nKEYTABLE DSECT\nSEGNAME  DS    CL8\nKEYLEN   DS    H\nKTBLINCR EQU   *-KEYTABLE\n         REGS\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVD": {"ttr": 1035, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x02\\x7f\\x01\\x00\\x03O\\x13F\\x00O\\x00O\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-27T00:00:00", "modifydate": "2000-02-03T13:46:00", "lines": 79, "newlines": 79, "modlines": 0, "user": "TS00DZL"}, "text": "         TITLE '80-BYTE HEX VERTICAL DUMP ROUTINE'                      00001\n         SPACE                                                          00002\n*********************************************************************** 00003\n*                                                                     * 00004\n* THIS ROUTINE WILL DUMP 80 BYTES OF DATA IN HEX VERTICAL FORMAT      * 00005\n* ON DDNAME LISTDD. THE ADDRESS OF THE AREA TO BE DUMPED IS PASSED    * 00006\n* VIA A STANDARD CALL STATEMENT.                                      * 00007\n*        CALL CVD,(DATA)                                              * 00022\n*                                                                     * 00023\n* JCL STREAM:                                                         * 00024\n*                                                                     * 00025\n*    //DUMPOUT  DD SYSOUT=A         (IN EXECUTION RUN STREAM JCL)     * 00026\n*                                                                     * 00027\n*********************************************************************** 00028\n         EJECT                                                          00029\nCVD      START 0                                                        00030\n         USING *,15                                                     00031\n         STM   14,12,12(13)                                             00032\n         LR    10,13                                                    00033\n         CNOP  0,4                                                      00034\n         BAL   13,GO                                                    00035\n         DROP  15                                                       00036\n         USING *,13                                                     00037\n         DC    18F'0'                                                   00038\nGO       DS   0H                                                        00039\n         ST    13,8(10)                                                 00040\n         ST    10,4(13)                                                 00041\nEXIT     DS   0H                                                        00042\n         L     3,0(1)                                                   00043\n         TM    DCB+48,16                                                00045\n         BO    GO2                                                      00046\n         OPEN  (DCB,(OUTPUT))                                           00047\n         TM    DCB+48,16                                                00048\n         BO    GO2                                                      00049\n         MVC   EXIT(4),EXITBR                                           00050\nEXITBR   DS   0H                                                        00051\n         B     FORCERET                                                 00052\nGO2      DS   0H                                                        00053\n         MVC   PLINE,0(3)                                               00054\n         MVI   POUTCC,C'0'                                              00055\n         PUT   DCB,POUT                                                 00056\n         MVI   POUTCC,C' '                                              00057\n         TR    PLINE,HEXUPPER                                           00058\n         PUT   DCB,POUT                                                 00059\n         MVC   PLINE,0(3)                                               00060\n         TR    PLINE,HEXLOWER                                           00061\n         PUT   DCB,POUT                                                 00062\n         TRUNC DCB                                                      00063\nFORCERET DS   0H                                                        00064\n         L     13,4(13)                                                 00065\n         LM    14,12,12(13)                                             00066\n         MVI   12(13),X'FF'                                             00067\n         XR    15,15                                                    00068\n         BR    14                                                       00069\n         ENTRY DUMPDCB                                                  00070\nDUMPDCB  DS    0H                                                       00071\nDCB      DCB   DSORG=PS,DDNAME=DUMPOUT,MACRF=PM,LRECL=81,RECFM=FBA,    X00072\n               BLKSIZE=810                                              00073\nPOUT     DS   0F                                                        00074\nPOUTCC   DC    C'0'                                                     00075\nPLINE    DC    CL80' '                                                  00076\nHEXUPPER DC    16CL1'0'                                                 00077\n         DC    16CL1'1'                                                 00078\n         DC    16CL1'2'                                                 00079\n         DC    16CL1'3'                                                 00080\n         DC    16CL1'4'                                                 00081\n         DC    16CL1'5'                                                 00082\n         DC    16CL1'6'                                                 00083\n         DC    16CL1'7'                                                 00084\n         DC    16CL1'8'                                                 00085\n         DC    16CL1'9'                                                 00086\n         DC    16CL1'A'                                                 00087\n         DC    16CL1'B'                                                 00088\n         DC    16CL1'C'                                                 00089\n         DC    16CL1'D'                                                 00090\n         DC    16CL1'E'                                                 00091\n         DC    16CL1'F'                                                 00092\nHEXLOWER DC    16CL16'0123456789ABCDEF'                                 00093\n         END                                                            00094\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "CVX": {"ttr": 1038, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "CVX      CSECT\n* CONVERTS 2 BYTES OF PRINTABLE HEX TO 1 BYTE BINARY.\n* I.E. CALL CVX,(TWOBYTES,ONEBYTE)\n         PRINT  NOGEN\n         REGS\n         SAVE   (14,12)\n         BALR   R12,0\n         USING  *,R12\n         ST     R13,SAVE+4\n         LA     R13,SAVE\n         LM     R3,R4,0(R1)\nINIT     MVC    TWOBYTES,0(R3)\n         TR     TWOBYTES(1),TRTABLE\n         CLI    TWOBYTES,X'10'      ERROR?\n         BE     SYNERR\n         IC     R0,TWOBYTES\n         SLL    R0,4\nLDIGIT   STC    R0,ONEBYTES\n         TR     TWOBYTES+1(1),TRTABLE\n         CLI    TWOBYTES+1,X'10'     ERROR?\n         BE     SYNERR\nRDIGIT   OC     ONEBYTES,TWOBYTES+1\n         MVC    0(1,R4),ONEBYTES\nTERM     L      R13,SAVE+4\n         RETURN (14,12),RC=0\nSYNERR   L      R13,SAVE+4\n         RETURN (14,12),RC=16\nSAVE     DC     9D'0'\nTRTABLE  DC     193X'10'\n         DC     X'0A'\n         DC     X'0B'\n         DC     X'0C'\n         DC     X'0D'\n         DC     X'0E'\n         DC     X'0F'\n         DC     41X'10'\n         DC     X'00'\n         DC     X'01'\n         DC     X'02'\n         DC     X'03'\n         DC     X'04'\n         DC     X'05'\n         DC     X'06'\n         DC     X'07'\n         DC     X'08'\n         DC     X'09'\n         DC     6X'10'\nONEBYTES DS     X\nTWOBYTES DS     CL2\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DBALPHA": {"ttr": 1281, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET DBALPHA    AT LEVEL 003 AS OF 04/12/94\n         PRINT  NOGEN                                                   00001\nALPHA    CSECT                                                          00002\n         STM   14,12,12(13)                                             00003\n         LR    12,15                                                    00004\n         USING ALPHA,12                                                 00005\n         ST    13,SAVE+4                                                00006\n         LA    3,SAVE                                                   00007\n         ST    3,16(13)                                                 00008\n         LR    13,3                                                     00009\nSETUP    OPEN  (CARDS,INPUT,POSTER,OUTPUT)                              00010\n         LA    10,6(0,0)                                                00011\nPROCESS  BAL   11,ONECARD                                               00012\n         BCT   10,PROCESS                                               00013\nWRAPUP   CLOSE (CARDS,,POSTER)                                          00014\n         L     13,SAVE+4                                                00015\n         LM    14,12,12(13)                                             00016\n         XR    15,15                                                    00017\n         BR    14                                                       00018\n*______________________________________________________________________ 00019\nONECARD  GET   CARDS,CARDIN                                             00020\n         LA    4,CARDIN                                                 00021\n         LA    3,BLOKLINE                                               00022\n         LR    7,3                                                      00023\n         LA    5,13(0,0)                                                00024\nLOOKINIT LA    6,SCANTABL                                               00025\nLOOKUP   CLC   0(0,4),0(6)                                              00026\n         BE    MOVEBLOK                                                 00027\n         LA    6,4(0,6)                                                 00028\n         CLI   0(6),X'40'                                               00029\n         BNE   LOOKUP                                                   00030\nMOVEBLOK LH    8,2(6)                                                   00031\n         LA    9,BLOKTABL(8)                                            00032\n         LA    8,8(0,0)                                                 00033\nMOVELOOP MVC   0(10,7),0(9)                                             00034\n         LA    7,132(0,7)                                               00035\n         LA    9,10(0,9)                                                00036\n         BCT   8,MOVELOOP                                               00037\n         LA    4,1(0,4)                                                 00038\n         LA    7,10(0,3)                                                00039\n         LR    3,7                                                      00040\n         BCT   5,LOOKINIT                                               00041\n         LA    8,10(0,0)                                                00042\n         LA    7,BLOKLINE                                               00043\nPUTBLOK  MVC   POSTLINE(132),0(7)                                       00044\n         PUT   POSTER,POSTLINE                                          00045\n         LA    7,132(0,7)                                               00046\n         BCT   8,PUTBLOK                                                00047\n         BR    11                                                       00048\n*______________________________________________________________________ 00049\nSAVE     DS    18F                                                      00050\nCARDS    DCB   DDNAME=CARDS,EODAD=WRAPUP,MACRF=GM,DSORG=PS              00051\nPOSTER   DCB   DDNAME=POSTER,MACRF=PM,LRECL=132,DSORG=PS,              X00052\n               RECFM=FB,BLKSIZE=1320                                    00053\nBLOKLINE DS    CL1320                                                   00054\nPOSTLINE DS    CL132                                                    00055\nCARDIN   DS    CL80                                                     00056\nSCANTABL DC    C'A'                                                     00057\n         DC    H'000'                                                   00058\n         DC    C'B'                                                     00059\n         DC    H'080'                                                   00060\n         DC    C'C'                                                     00061\n         DC    H'160'                                                   00062\n         DC    C'D'                                                     00063\n         DC    H'240'                                                   00064\n         DC    C'E'                                                     00065\n         DC    H'320'                                                   00066\n         DC    C'F'                                                     00067\n         DC    H'400'                                                   00068\n         DC    C'G'                                                     00069\n         DC    H'480'                                                   00070\n         DC    C'H'                                                     00071\n         DC    H'560'                                                   00072\n         DC    C'I'                                                     00073\n         DC    H'640'                                                   00074\n         DC    C'J'                                                     00075\n         DC    H'720'                                                   00076\n         DC    C'K'                                                     00077\n         DC    H'800'                                                   00078\n         DC    C'L'                                                     00079\n         DC    H'880'                                                   00080\n         DC    C'M'                                                     00081\n         DC    H'960'                                                   00082\n         DC    C'N'                                                     00083\n         DC    H'1040'                                                  00084\n         DC    C'O'                                                     00085\n         DC    H'1120'                                                  00086\n         DC    C'P'                                                     00087\n         DC    H'1200'                                                  00088\n         DC    C'Q'                                                     00089\n         DC    H'1280'                                                  00090\n         DC    C'R'                                                     00091\n         DC    H'1360'                                                  00092\n         DC    C'S'                                                     00093\n         DC    H'1440'                                                  00094\n         DC    C'T'                                                     00095\n         DC    H'1520'                                                  00096\n         DC    C'U'                                                     00097\n         DC    H'1600'                                                  00098\n         DC    C'V'                                                     00099\n         DC    H'1680'                                                  00100\n         DC    C'W'                                                     00101\n         DC    H'1760'                                                  00102\n         DC    C'X'                                                     00103\n         DC    H'1840'                                                  00104\n         DC    C'Y'                                                     00105\n         DC    H'1920'                                                  00106\n         DC    C'Z'                                                     00107\n         DC    H'2000'                                                  00108\n         DC    C'1'                                                     00109\n         DC    H'2080'                                                  00110\n         DC    C'2'                                                     00111\n         DC    H'2160'                                                  00112\n         DC    C'3'                                                     00113\n         DC    H'2240'                                                  00114\n         DC    C'4'                                                     00115\n         DC    H'2320'                                                  00116\n         DC    C'5'                                                     00117\n         DC    H'2400'                                                  00118\n         DC    C'6'                                                     00119\n         DC    H'2480'                                                  00120\n         DC    C'7'                                                     00121\n         DC    H'2560'                                                  00122\n         DC    C'8'                                                     00123\n         DC    H'2640'                                                  00124\n         DC    C'9'                                                     00125\n         DC    H'2720'                                                  00126\n         DC    C'0'                                                     00127\n         DC    H'2800'                                                  00128\n         DC    C':'                                                     00129\n         DC    H'2880'                                                  00130\n         DC    C'#'                                                     00131\n         DC    H'2960'                                                  00132\n         DC    C'.'                                                     00133**2\n         DC    H'3040'                                                  00134**2\n         DC    C'?'                                                     00135**2\n         DC    H'3120'                                                  00136**2\n         DC    C'!'                                                     00137**2\n         DC    H'3200'                                                  00138**2\n         DC    C','                                                     00139**3\n         DC    H'3280'                                                  00140**3\n         DC    C' '           BLANK=END OF TABLE                        00141\n         DC    H'3360'                                                  00142**3\n*_____________________________                                          00143\nBLOKTABL DC    C'    AAA   '                                            00144\n         DC    C'   AA AA  '                                            00145\n         DC    C'  AA   AA '                                            00146\n         DC    C' AA     AA'                                            00147\n         DC    C' AAAAAAAAA'                                            00148\n         DC    C' AAAAAAAAA'                                            00149\n         DC    C' AA     AA'                                            00150\n         DC    C' AA     AA'                                            00151\n         DC    C' BBBBBBBB '                                            00152\n         DC    C' BB     BB'                                            00153\n         DC    C' BB     BB'                                            00154\n         DC    C' BBBBBBBB '                                            00155\n         DC    C' BBBBBBBB '                                            00156\n         DC    C' BB     BB'                                            00157\n         DC    C' BB     BB'                                            00158\n         DC    C' BBBBBBBB '                                            00159\n         DC    C'  CCCCCCC '                                            00160\n         DC    C' CC     CC'                                            00161\n         DC    C' CC     CC'                                            00162\n         DC    C' CC       '                                            00163\n         DC    C' CC       '                                            00164\n         DC    C' CC     CC'                                            00165\n         DC    C' CC     CC'                                            00166\n         DC    C'  CCCCCCC '                                            00167\n         DC    C' DDDDDDDD '                                            00168\n         DC    C' DD     DD'                                            00169\n         DC    C' DD     DD'                                            00170\n         DC    C' DD     DD'                                            00171\n         DC    C' DD     DD'                                            00172\n         DC    C' DD     DD'                                            00173\n         DC    C' DD     DD'                                            00174\n         DC    C' DDDDDDDD '                                            00175\n         DC    C' EEEEEEEEE'                                            00176\n         DC    C' EE       '                                            00177\n         DC    C' EE       '                                            00178\n         DC    C' EE       '                                            00179\n         DC    C' EEEEEEE  '                                            00180\n         DC    C' EE       '                                            00181\n         DC    C' EE       '                                            00182\n         DC    C' EEEEEEEEE'                                            00183\n         DC    C' FFFFFFFFF'                                            00184\n         DC    C' FF       '                                            00185\n         DC    C' FF       '                                            00186\n         DC    C' FF       '                                            00187\n         DC    C' FFFFFFF  '                                            00188\n         DC    C' FF       '                                            00189\n         DC    C' FF       '                                            00190\n         DC    C' FF       '                                            00191\n         DC    C'  GGGGGGG '                                            00192\n         DC    C' GG     GG'                                            00193\n         DC    C' GG     GG'                                            00194\n         DC    C' GG  GG   '                                            00195\n         DC    C' GG  GGGGG'                                            00196\n         DC    C' GG  GG GG'                                            00197\n         DC    C' GG     GG'                                            00198\n         DC    C'  GGGGGGG '                                            00199\n         DC    C' HH     HH'                                            00200\n         DC    C' HH     HH'                                            00201\n         DC    C' HH     HH'                                            00202\n         DC    C' HH     HH'                                            00203\n         DC    C' HHHHHHHHH'                                            00204\n         DC    C' HH     HH'                                            00205\n         DC    C' HH     HH'                                            00206\n         DC    C' HH     HH'                                            00207\n         DC    C' IIIIIIIII'                                            00208\n         DC    C'    II    '                                            00209\n         DC    C'    II    '                                            00210\n         DC    C'    II    '                                            00211\n         DC    C'    II    '                                            00212\n         DC    C'    II    '                                            00213\n         DC    C'    II    '                                            00214\n         DC    C' IIIIIIIII'                                            00215\n         DC    C' JJJJJJJJJ'                                            00216\n         DC    C'     JJ   '                                            00217\n         DC    C'     JJ   '                                            00218\n         DC    C'     JJ   '                                            00219\n         DC    C'     JJ   '                                            00220\n         DC    C' JJ  JJ   '                                            00221\n         DC    C' JJ  JJ   '                                            00222\n         DC    C'  JJJJ    '                                            00223\n         DC    C' KK     KK'                                            00224\n         DC    C' KK    KK '                                            00225\n         DC    C' KK   KK  '                                            00226\n         DC    C' KKKKKK   '                                            00227\n         DC    C' KKKKK    '                                            00228\n         DC    C' KK  KK   '                                            00229\n         DC    C' KK   KK  '                                            00230\n         DC    C' KK    KK '                                            00231\n         DC    C' LL       '                                            00232\n         DC    C' LL       '                                            00233\n         DC    C' LL       '                                            00234\n         DC    C' LL       '                                            00235\n         DC    C' LL       '                                            00236\n         DC    C' LL       '                                            00237\n         DC    C' LL       '                                            00238\n         DC    C' LLLLLLLLL'                                            00239\n         DC    C' MM     MM'                                            00240\n         DC    C' MMM   MMM'                                            00241\n         DC    C' MMMM MMMM'                                            00242\n         DC    C' MM MMM MM'                                            00243\n         DC    C' MM  M  MM'                                            00244\n         DC    C' MM  M  MM'                                            00245\n         DC    C' MM     MM'                                            00246\n         DC    C' MM     MM'                                            00247\n         DC    C' NN     NN'                                            00248\n         DC    C' NNN    NN'                                            00249\n         DC    C' NNNN   NN'                                            00250\n         DC    C' NN NN  NN'                                            00251\n         DC    C' NN  NN NN'                                            00252\n         DC    C' NN   NNNN'                                            00253\n         DC    C' NN    NNN'                                            00254\n         DC    C' NN     NN'                                            00255\n         DC    C'  OOOOOOO '                                            00256\n         DC    C' OO     OO'                                            00257\n         DC    C' OO     OO'                                            00258\n         DC    C' OO     OO'                                            00259\n         DC    C' OO     OO'                                            00260\n         DC    C' OO     OO'                                            00261\n         DC    C' OO     OO'                                            00262\n         DC    C'  OOOOOOO '                                            00263\n         DC    C' PPPPPPPP '                                            00264\n         DC    C' PP     PP'                                            00265\n         DC    C' PP     PP'                                            00266\n         DC    C' PPPPPPPP '                                            00267\n         DC    C' PP       '                                            00268\n         DC    C' PP       '                                            00269\n         DC    C' PP       '                                            00270\n         DC    C' PP       '                                            00271\n         DC    C'  QQQQQQQ '                                            00272\n         DC    C' QQ     QQ'                                            00273\n         DC    C' QQ     QQ'                                            00274\n         DC    C' QQ     QQ'                                            00275\n         DC    C' QQ     QQ'                                            00276\n         DC    C' QQ   Q QQ'                                            00277\n         DC    C' QQ    QQ '                                            00278\n         DC    C'  QQQQQ QQ'                                            00279\n         DC    C' RRRRRRRR '                                            00280\n         DC    C' RR     RR'                                            00281\n         DC    C' RR     RR'                                            00282\n         DC    C' RRRRRRRR '                                            00283\n         DC    C' RRRRRR   '                                            00284\n         DC    C' RR   RR  '                                            00285\n         DC    C' RR    RR '                                            00286\n         DC    C' RR     RR'                                            00287\n         DC    C'  SSSSSSS '                                            00288\n         DC    C' SS     SS'                                            00289\n         DC    C' SS     SS'                                            00290\n         DC    C'  SS      '                                            00291\n         DC    C'   SSSSSS '                                            00292\n         DC    C'        SS'                                            00293\n         DC    C' SS     SS'                                            00294\n         DC    C'  SSSSSSS '                                            00295\n         DC    C' TTTTTTTTT'                                            00296\n         DC    C'    TT    '                                            00297\n         DC    C'    TT    '                                            00298\n         DC    C'    TT    '                                            00299\n         DC    C'    TT    '                                            00300\n         DC    C'    TT    '                                            00301\n         DC    C'    TT    '                                            00302\n         DC    C'    TT    '                                            00303\n         DC    C' UU     UU'                                            00304\n         DC    C' UU     UU'                                            00305\n         DC    C' UU     UU'                                            00306\n         DC    C' UU     UU'                                            00307\n         DC    C' UU     UU'                                            00308\n         DC    C' UU     UU'                                            00309\n         DC    C' UU     UU'                                            00310\n         DC    C'  UUUUUUU '                                            00311\n         DC    C' VV     VV'                                            00312\n         DC    C' VV     VV'                                            00313\n         DC    C' VV     VV'                                            00314\n         DC    C' VV     VV'                                            00315\n         DC    C' VV     VV'                                            00316\n         DC    C'  VV   VV '                                            00317\n         DC    C'   VV VV  '                                            00318\n         DC    C'    VVV   '                                            00319\n         DC    C' WW     WW'                                            00320\n         DC    C' WW     WW'                                            00321\n         DC    C' WW  W  WW'                                            00322\n         DC    C' WW  W  WW'                                            00323\n         DC    C' WW WWW WW'                                            00324\n         DC    C' WWWW WWWW'                                            00325\n         DC    C' WWW   WWW'                                            00326\n         DC    C' WW     WW'                                            00327\n         DC    C' XX     XX'                                            00328\n         DC    C' XX     XX'                                            00329\n         DC    C'  XX   XX '                                            00330\n         DC    C'   XXXXX  '                                            00331\n         DC    C'   XXXXX  '                                            00332\n         DC    C'  XX   XX '                                            00333\n         DC    C' XX     XX'                                            00334\n         DC    C' XX     XX'                                            00335\n         DC    C' YY     YY'                                            00336\n         DC    C' YY    YY '                                            00337\n         DC    C'  YY  YY  '                                            00338\n         DC    C'   YYYY   '                                            00339\n         DC    C'    YY    '                                            00340\n         DC    C'    YY    '                                            00341\n         DC    C'    YY    '                                            00342\n         DC    C'    YY    '                                            00343\n         DC    C' ZZZZZZZZZ'                                            00344\n         DC    C' ZZ    ZZ '                                            00345\n         DC    C'      ZZ  '                                            00346\n         DC    C'     ZZ   '                                            00347\n         DC    C'    ZZ    '                                            00348\n         DC    C'   ZZ     '                                            00349\n         DC    C'  ZZ    ZZ'                                            00350\n         DC    C' ZZZZZZZZZ'                                            00351\n         DC    C'    111   '                                            00352\n         DC    C'   1111   '                                            00353\n         DC    C'  11 11   '                                            00354\n         DC    C'     11   '                                            00355\n         DC    C'     11   '                                            00356\n         DC    C'     11   '                                            00357\n         DC    C'     11   '                                            00358\n         DC    C' 111111111'                                            00359\n         DC    C'  2222222 '                                            00360\n         DC    C' 22     22'                                            00361\n         DC    C' 22     22'                                            00362\n         DC    C'      22  '                                            00363\n         DC    C'     22   '                                            00364\n         DC    C'   22     '                                            00365\n         DC    C' 222      '                                            00366\n         DC    C' 222222222'                                            00367\n         DC    C'  3333333 '                                            00368\n         DC    C' 33     33'                                            00369\n         DC    C' 33     33'                                            00370\n         DC    C'    33333 '                                            00371\n         DC    C'    3333  '                                            00372\n         DC    C' 33     33'                                            00373\n         DC    C' 33     33'                                            00374\n         DC    C'  3333333 '                                            00375\n         DC    C'     444  '                                            00376\n         DC    C'    4444  '                                            00377\n         DC    C'   44 44  '                                            00378\n         DC    C'  44  44  '                                            00379\n         DC    C' 444444444'                                            00380\n         DC    C'      44  '                                            00381\n         DC    C'      44  '                                            00382\n         DC    C'      44  '                                            00383\n         DC    C' 555555555'                                            00384\n         DC    C' 55       '                                            00385\n         DC    C' 55       '                                            00386\n         DC    C' 55555555 '                                            00387\n         DC    C'        55'                                            00388\n         DC    C' 55     55'                                            00389\n         DC    C' 55     55'                                            00390\n         DC    C'  5555555 '                                            00391\n         DC    C'  6666666 '                                            00392\n         DC    C' 66     66'                                            00393\n         DC    C' 66       '                                            00394\n         DC    C' 66       '                                            00395\n         DC    C' 66666666 '                                            00396\n         DC    C' 66     66'                                            00397\n         DC    C' 66     66'                                            00398\n         DC    C'  6666666 '                                            00399\n         DC    C' 777777777'                                            00400\n         DC    C'        77'                                            00401\n         DC    C'       77 '                                            00402\n         DC    C'      77  '                                            00403\n         DC    C'     77   '                                            00404\n         DC    C'    77    '                                            00405\n         DC    C'   77     '                                            00406\n         DC    C'  77      '                                            00407\n         DC    C'  8888888 '                                            00408\n         DC    C' 88     88'                                            00409\n         DC    C' 88     88'                                            00410\n         DC    C'  8888888 '                                            00411\n         DC    C'  8888888 '                                            00412\n         DC    C' 88     88'                                            00413\n         DC    C' 88     88'                                            00414\n         DC    C'  8888888 '                                            00415\n         DC    C'  9999999 '                                            00416\n         DC    C' 99     99'                                            00417\n         DC    C' 99     99'                                            00418\n         DC    C'  99999999'                                            00419\n         DC    C'        99'                                            00420\n         DC    C'        99'                                            00421\n         DC    C' 99     99'                                            00422\n         DC    C'  9999999 '                                            00423\n         DC    C'  000000  '                                            00424\n         DC    C' 00    00 '                                            00425\n         DC    C' 00    00 '                                            00426\n         DC    C' 00    00 '                                            00427\n         DC    C' 00    00 '                                            00428\n         DC    C' 00    00 '                                            00429\n         DC    C' 00    00 '                                            00430\n         DC    C'  000000  '                                            00431\n         DC    C'          '                                            00432\n         DC    C'          '                                            00433\n         DC    C'  :::     '                                            00434\n         DC    C'  :::     '                                            00435\n         DC    C'          '                                            00436\n         DC    C'  :::     '                                            00437\n         DC    C'  :::     '                                            00438\n         DC    C'          '                                            00439\n         DC    C'   ## ##  '                                            00440\n         DC    C'   ## ##  '                                            00441\n         DC    C' #########'                                            00442\n         DC    C'   ## ##  '                                            00443\n         DC    C'   ## ##  '                                            00444\n         DC    C' #########'                                            00445\n         DC    C'   ## ##  '                                            00446\n         DC    C'   ## ##  '                                            00447\n         DC    C'          '                                            00448**2\n         DC    C'          '                                            00449**2\n         DC    C'          '                                            00450**2\n         DC    C'          '                                            00451**2\n         DC    C'          '                                            00452**2\n         DC    C'   OOOO   '                                            00453**2\n         DC    C'   OOOO   '                                            00454**2\n         DC    C'   OOOO   '                                            00455**2\n         DC    C'   ???    '                                            00456**2\n         DC    C' ???????  '                                            00457**2\n         DC    C' ??  ???  '                                            00458**2\n         DC    C'    ???   '                                            00459**3\n         DC    C'    ???   '                                            00460**2\n         DC    C'    ???   '                                            00461**2\n         DC    C'          '                                            00462**2\n         DC    C'    ???   '                                            00463**2\n         DC    C'   !!!!   '                                            00464**2\n         DC    C'   !!!!   '                                            00465**2\n         DC    C'   !!!!   '                                            00466**2\n         DC    C'   !!!!   '                                            00467**2\n         DC    C'   !!!!   '                                            00468**2\n         DC    C'    !!    '                                            00469**2\n         DC    C'          '                                            00470**2\n         DC    C'    !!    '                                            00471**2\n         DC    C'          '                                            00472**3\n         DC    C'          '                                            00473**3\n         DC    C'          '                                            00474**3\n         DC    C'          '                                            00475**3\n         DC    C'   ,,,    '                                            00476**3\n         DC    C'   ,,,,   '                                            00477**3\n         DC    C'    ,,,   '                                            00478**3\n         DC    C'   ,,,    '                                            00479**3\n         DC    C'          '                                            00480\n         DC    C'          '                                            00481\n         DC    C'          '                                            00482\n         DC    C'          '                                            00483\n         DC    C'          '                                            00484\n         DC    C'          '                                            00485\n         DC    C'          '                                            00486\n         DC    C'          '                                            00487\n*________________________________                                       00488\n         END   ALPHA                                                    00489\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DBWAIT": {"ttr": 1289, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01%\\x00\\x00\\x00\\x91#O\\x00\\x910O\\x154\\x00\\x95\\x00i\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.37", "flags": 0, "createdate": "1991-08-22T00:00:00", "modifydate": "1991-10-31T15:34:00", "lines": 149, "newlines": 105, "modlines": 0, "user": "TS00DZL"}, "text": "R0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9        PARM LENGTH\nR10      EQU   10       PARM STRING PTR\nR11      EQU   11       RETURN CODE\nR12      EQU   12       BASE REG\nR13      EQU   13       SAVE\nR14      EQU   14       RETURN\nR15      EQU   15       EP\n*===========================================*\n$DBWAIT  CSECT        D. LEES 08/91  NUSCO  *\n*===========================================*\n* WORKS IN CONJUNCTION WITH AO PROCEDURES.  *\n* OPERATION: ISSUE A WTOR WITH MESSAGE TEXT *\n* FROM EXEC PARM=, THEN\n* WAIT FOR A REPLY FROM AO BEFORE*\n* ALLOWING EXECUTION TO CONTINUE.           *\n* REPLIES ARE: RELEASE : CONTINUE RC=0      *\n*              RC=NNNN : CONTINUE RC=N-NNNN *\n*              ABORT   : TERMINATE U101     *\n* 3 INCORRECT REPLIES AND IT ABORTS.......  *\n*===========================================*\n* 10/91 ADD TIME=NN MINUTES OPTION    | DZL *\n*===========================================*\n         PRINT  GEN\n         SAVE   (14,12)\n         BALR   R12,0\n         USING  *,R12\n         ST     R13,SAVE+4\n         LA     R0,SAVE\n         ST     R0,8(R13)\n         LR     R13,R0\n         LR     R10,R1\n         L      R10,0(R10)\nINIT     EQU    *\n         XR     R11,R11                      RC=0\n         XR     R9,R9\n         IC     R9,1(R10)\n         CH     R9,=H'100'                   MAX LEN OF WTOR = 100\n         BH     ABEND  PARMERR\n         CH     R9,=H'6'                     SEEMS SHORT\n         BL     ABEND  PARMERR\n         BCTR   R9,0\n         CLC    TIMER,2(R10)                 TIME=NN OPTION\n         BE     SETPOP\n         EX     R9,MOVE1\n         B      WTOR1\nMOVE1    MVC    WTORMSG(0),2(R10)\nWTOR1    WTOR '                                                        C\n                                                           ',          C\n               REPLY,RPLYLEN,ECB1,ROUTCDE=3,DESC=(7)\nWTORMSG  EQU    WTOR1+16                      VOLATILE..\n         WAIT   ECB=ECB1\n         XC     ECB1,ECB1\nRESPOND  EQU    *\n         CLC    ABORT,REPLY\n         BE     ABEND\n         CLC    RELEASE,REPLY\n         BE     GOBACK\n         CLC    RETCODE,REPLY\n         BE     SETCODE\nUNKNWN   AP     TRIES,ONE\n         CP     TRIES,LIMIT\n         BNH    WTOR1\n         B      ABEND\n*===========================================*\nGOBACK   L      R13,SAVE+4\n         LR     R15,R11\n         RETURN (14,12),RC=(15)\n*===========================================*\nPARMERR  EQU   *\n         LA    R11,20\n         B     GOBACK\n*===========================================*\nABEND    EQU   *\n         ABEND 101,DUMP,STEP\n         B     GOBACK\n*===========================================*\nSETCODE  EQU   *\n         LA    R3,DWORD+7\n         LA    R2,REPLY+6\nDIGIT    EQU   *\n         CLI   0(R2),C' '\n         BE    NEXT\n         CLI   0(R2),C'='\n         BE    PACKIT\n         MVC   0(1,R3),0(R2)\n         BCTR  R3,0\nNEXT     EQU   *\n         BCTR  R2,0\n         B     DIGIT\nPACKIT   EQU   *\n         PACK  DWORD,DWORD\n         CVB   R11,DWORD\n         B     GOBACK\n*===========================================*\nSETPOP   EQU   *\n         LA    R3,DWORD+7\n         LA    R2,8(R10)                     PARM+6-> NN\nNN       EQU   *\n         CLI   0(R2),X'00'\n         BE    NXT\n         CLI   0(R2),C'='\n         BE    PACKS                         DEFAULTS TO 0\n         MVC   0(1,R3),0(R2)\n         BCTR  R3,0\nNXT      EQU   *\n         BCTR  R2,0\n         B     NN\nPACKS    EQU   *\n         OC    DWORD+6(2),=X'F0F0'           MAKE IT ZONED\n         NC    DWORD+6(2),=X'F7F7'           MAKE IT 0-9\n         PACK  DWORD,DWORD\n         CP    DWORD,=P'10'                  10 MIN. MAX\n         BH    PARMERR\nSETTIME  EQU   *\n         UNPK  INTVL(4),DWORD                SET INTERVAL\n         MVC   POPMSG+17(4),INTVL\n         OI    POPMSG+20,X'F0'\nPOPMSG   WTO   'ENTERING 0000 MINUTE WAIT.',ROUTCDE=1\n         STIMER WAIT,DINTVL=INTVL\n         B     GOBACK\n*===========================================*\nSAVE     DC    9D'0'\nDWORD    DC    CL8'00000000'   <------------ ALIGNED D\nINTVL    DS    D\nPARMLEN  DC    F'0'\nTRIES    DC    PL2'0'\nLIMIT    DC    PL2'2'                        ALLOWS 3 TRIES\nONE      DC    P'1'\n*\nREPLY    DC    CL119' '                      MVS LIMIT\nRPLYLEN  EQU   L'REPLY\nECB1     DC    F'0'\n*\nABORT    DC    CL7'ABORT  '\nRELEASE  DC    CL7'RELEASE'\nRETCODE  DC    CL3'RC='\nTIMER    DC    CL5'TIME='\n*===========================================*\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DDCHECK": {"ttr": 1539, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x00\\x98\\x16o\\x00\\x98%?\\x13\\x15\\x00\\xa7\\x00\\xa5\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "1998-06-15T00:00:00", "modifydate": "1998-09-10T13:15:00", "lines": 167, "newlines": 165, "modlines": 0, "user": "TS00DZL"}, "text": "*******************************************************\n* DDCHECK IS A CALLABLE ASSEMBLER SUBROUTINE WHICH    *\n* WILL TEST A PASSED DDNAME TO DETERMINE IF IT IS A   *\n* REAL DATASET, A DUMMY, OR MISSING.    D.LEES 1998   *\n* EXAMPLE: CALL DDCHECK,(DDNAME)                      *\n*  - WHERE DDNAME IS CL8 CONTAINING THE NAME TO CHECK *\n*  - RETURN CODE 0 FOR A REAL  DATASET                *\n*  - RETURN CODE 4 FOR A DUMMY DATASET                *\n*  - RETURN CODE 8 FOR A MISSING DDNAME               *\n*  FOR PL/1: DECLARE DDCHECK ENTRY(CHARACTER(8)) -    *\n*            OPTIONS(ASM RETCODE) ;                   *\n*******************************************************\n         EJECT\nDDCHECK  CSECT\nDDCHECK  AMODE      ANY\nDDCHECK  RMODE      ANY\n         PRINT      ON,GEN\n         SAVE       (14,12)\n         BALR       R12,0\n         USING      *,R12\n         ST         R13,SAVE+4\n         LA         R15,SAVE\n         ST         R15,8(R13)\n         LR         R13,R15\nGETPARM  EQU        *\n         LR         R9,R1\n         L          R9,0(R9)\n* COMMENTED OUT CODE FOR JCL PARM='DDNAME'\n*        LH         R1,0(R9)\n*        LTR        R1,R1                   IF 0 THEN\n*        BZ         PROCESS                 USE DEFAULT OF MASTERO\n*        CH         R1,EIGHT\n*        BH         ERROR1                  TOO LONG!!\nOVERRIDE EQU        *\n*        MVC        CHECKDD,BLANKS\n*        LA         R9,2(R9)                OVERRIDE DEFAULT\n*        BCTR       R1,R0\n*        EX         R1,EXEC1\n*        B          PROCESS\n*XEC1    MVC        CHECKDD(0),0(R9)        SET DDNAME\nEXEC1    MVC        CHECKDD(8),0(R9)        SET DDNAME\nPROCESS  EQU    *\n         EXTRACT    TIOTADDR,'S',FIELDS=(TIOT)\n         L          R11,TIOTADDR\n         USING      TIOTD,R11\n* LOOP TO FIND DDNAME, INCREMENTING R11, REMEMBER TO STOP.\n* IF NOT FOUND . . . .\n         LA         R11,TIOENTRY\n         DROP       R11\n         USING      TIOENTRY,R11\n         LA         R3,1635                 ( MAX DD'S CIRCA 1977 )\nDDLOOKUP EQU        *\n         CLC        TIOEDDNM,CHECKDD\n         BE         SETJFCB\n         XR         R1,R1\n         ICM        R1,1,TIOELNGH\n         BZ         NODDNAME                END OF TIOT (LEN = 0)\n         LA         R11,0(R1,R11)\n         BCT        R3,DDLOOKUP\n         B          ERROR1\nSETJFCB  EQU        *\n         XR         R1,R1\n         ICM        R1,7,TIOEJFCB           GASP! 3 BYTE ADDR.\n         DROP       R11\n         LA         R11,16(,R1)             +16 TO ACTUAL JFCB\n         USING      JFCBD,R11\n* EXAMINE DSNAME, IS IT NULLFILE? IF IT IS . . . . .\n         CLC        JFCBDSNM(8),NULLF\n         BNE        REALDD\n         B          NULLFILE\nNODDNAME EQU        *\n         MVC        MSG1DDN,CHECKDD\n         MVC        MSG1DSN(9),NODDMSG\n         MVC        MSG1RC,RC08\n         LA         R10,08\n         B          RETURN\nNULLFILE EQU        *\n         MVC        MSG1DDN,CHECKDD\n         MVC        MSG1DSN,JFCBDSNM\n         MVC        MSG1RC,RC04\n         LA         R10,04\n         B          RETURN\nREALDD   EQU        *\n         MVC        MSG1DDN,CHECKDD\n         MVC        MSG1DSN,JFCBDSNM\n         MVC        MSG1RC,RC00\n         LA         R10,00\n*        B          RETURN\nRETURN   EQU        *\n         WTO TEXT=MSG1,                                                X\n               ROUTCDE=11,DESC=6\nREUS     EQU        *\n         MVC        CHECKDD,MASTERO\n         MVC        MSG1DDN,BLANKS\n         MVC        MSG1DSN,BLANKS\n         MVC        MSG1RC,BLANKS\n         L          R13,SAVE+4\n         LR         R15,R10\n         RETURN     (14,12),RC=(15)\n         SPACE      3\nERROR1   EQU        *\n         ABEND      911                     UNRECOVERABLE ERROR\n         EJECT\nSAVE     DC         9D'0'\nTIOTADDR DC         F'0'\nMSG1     EQU        *\nMSG1L    DC         AL2(MSG1LEN)\nMSG1ID   DC         CL8'DDCHECK1'\n         DC         C' '\nMSG1DDN  DC         CL8' '\n         DC         C' '\nMSG1DSN  DC         CL44' '\n         DC         C' '\n         DC         C'RC='\nMSG1RC   DC         CL2' '\nMSG1LEN  EQU        *-MSG1ID\n         SPACE      3\nCHECKDD  DC         CL8'MASTERO'\nMASTERO  DC         CL8'MASTERO'            DEFAULT TO CHECK\nNULLF    DC         CL8'NULLFILE'\nEIGHT    DC         H'8'\nRC00     DC         C'00'\nRC04     DC         C'04'\nRC08     DC         C'08'\nNODDMSG  DC         C'NO DDNAME'\nBLANKS   DC         CL44' '\n         EJECT\n*        PRINT      ON,GEN\n         PRINT      OFF,NOGEN\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR00      EQU   0\nR01      EQU   1\nR02      EQU   2\nR03      EQU   3\nR04      EQU   4\nR05      EQU   5\nR06      EQU   6\nR07      EQU   7\nR08      EQU   8\nR09      EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         SPACE    3\nJFCBD    DSECT\n         IEFJFCBN LIST=NO\nTIOTD    DSECT\n         IEFTIOT1\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DRIVER": {"ttr": 1543, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\n\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x03O\\x13G\\x00H\\x00Z\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.10", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-02-03T13:47:00", "lines": 72, "newlines": 90, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1     EXEC   ASMACL,PARM.ASM='XREF(SHORT)',\n//       PARM.LKED='LET,LIST,XREF,AC(1)',COND.LKED=(5,LT)\n//SYSLIB DD    BLKSIZE=32760\n//       DD    DSN=TST.DZL.XMIT,DISP=SHR\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//*      DD    DSN=SYS1.AMODGEN,DISP=SHR      CHECK DLIB VOLS!\n//*      DD    DSN=SYS1.AMACLIB,DISP=SHR\n//*      DD    DSN=SYS1.HASPSRC,DISP=SHR\n//SYSIN  DD    *\nDRIVER   CSECT\nDRIVER   AMODE     31\nDRIVER   RMODE     24                   DCB, ACB STILL < 16M !!!\n         PRINT     ON,GEN\n         REGS\n         SAVE      (14,12)\n         BALR      R12,0\n         USING     *,R12\n         ST        R13,SAVE+4\n         LA        R15,SAVE\n         ST        R15,8(R13)\n         LR        R13,R15\n         OPEN      (SYSOUT,OUTPUT),MODE=31\n         SPACE     3\nSNAPINIT NOP       SNAPTERM\n         OPEN      (SNAPDD,OUTPUT)\n         MVI       SNAPINIT+1,X'F0'\n         B         SNAPTERM\nSNAPDD   DCB       DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,         X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU       *\n         SNAP      DCB=SNAPDD,PDATA=REGS,ID=1\nLOAD1    LOAD      EP=CVD                          <==VERIFY\n         LR        R9,R0                           R9=EP\n         LA        R5,X'64'(,R9)\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=((9),(5)),ID=2\n         LA        R3,1                            SAFETY\n         LA        R2,0\nCALLIT   EQU        *\n         LA        R1,PARMS\n         LR        R15,R9\n         BALR      R14,R15                         <=GO FOR IT!!\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=(PARM1,PARM99),ID=7\n**       STIMER    WAIT,BINTVL=BINTVL\n         LA        R2,80(,R2)\nBCT      BCT       R3,CALLIT                       REPEAT:N\nRETURN   EQU       *\n         CLOSE     (SNAPDD,,SYSOUT)\n         L         R13,SAVE+4\n         RETURN    (14,12),RC=0\nSAVE     DC        9D'0'\nSTORAGE  DS        CL80\nPARMS    EQU       *\nP1       DC        A(PARM1)\nPARM1    DC        80C'*'\nPARM99   EQU       *\nBINTVL   DC        F'03'               3/100SEC\nSYSOUT   DCB       DDNAME=SYSOUT,MACRF=(PM),RECFM=F,BLKSIZE=80,DSORG=PS\n         END\n//LKED.SYSLIB   DD DSN=TST.AUTHLIB,DISP=(SHR)\n//LKED.SYSLMOD  DD DSN=&&LOADLIB(DRIVER),DISP=(,PASS),\n//      DCB=(DBP.JOBLIB),SPACE=(CYL,(1,1,7))\n//LKED.SYSPRINT DD SYSOUT=*\n//TEST     EXEC  PGM=*.S1.LKED.SYSLMOD,REGION=7M\n//STEPLIB  DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR E=32760\n//SNAPDD   DD    SYSOUT=*\n//DUMPOUT  DD    SYSOUT=*\n//SYSOUT   DD    SYSOUT=*\n//HG100280 DD    DUMMY\n//*SYSUDUMP DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "DYNALC": {"ttr": 1546, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x02\\x0f\\x01\\x00\\x02\\x1f\\x14H\\x00\\x00\\x02\\x9e\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-20T00:00:00", "modifydate": "2000-01-21T14:48:00", "lines": 0, "newlines": 670, "modlines": 0, "user": "TS00DZL"}, "mimetype": "application/x-empty", "datatype": "binary", "extension": ".x-empty"}, "DYNAM": {"ttr": 1547, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x02\\x1f\\x01\\x00\\x02\\x1f\\x130\\x04\\x92\\x04\\x91\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-21T00:00:00", "modifydate": "2000-01-21T13:30:00", "lines": 1170, "newlines": 1169, "modlines": 0, "user": "TS00DZL"}, "text": "*INCLUDED FOR CONVENIENCE: FROM FILE089 OF THE CBT 422 TAPE\n         TITLE 'DYNAMIC ALLOCATION INTERFACE'                               1.\n*                                                                           2.\n*   CREATE A VERB TABLE ENTRY                                               3.\n*                                                                           4.\n         MACRO                                                              5.\n         VENT  &VERB,&NUMBER                                                6.\n         LCLA  &LABEL                                                       7.\n&LABEL   SETA  &SYSNDX                                                      8.\n         DC    AL1(L'#&LABEL)                                               9.\n         DC    AL1(&NUMBER)                                                10.\n#&LABEL  DC    C'&VERB'                                                    11.\n         MEND                                                              12.\n         SPACE 3                                                           13.\n*                                                                          14.\n*   CREATE A KEYWORD TABLE ENTRY                                           15.\n*   &KEYWORD  - THE DYNAM KEYWORD                                          16.\n*   &UAL      - THE DYNAM KEYWORD UNAMBIGOUS LENGTH                        17.\n*   &KEY      - THE SVC99 TEXT UNIT KEY                                    18.\n*   &PARM     - THE SVC99 TEXT UNIT PARM                                   19.\n*   &PARMLEN  - THE SVC99 TEXT UNIT PARM LENGTH                            20.\n*                                                                          21.\n         MACRO                                                             22.\n         KENT  &KEYWORD,&UAL,&KEY,&PARM,&PARMLEN                           23.\n         GBLA  &OFFSET                                                     24.\n         LCLA  &LABEL                                                      25.\n         LCLC  &LEN                                                        26.\n&LEN     SETC  '0'                                                         27.\n&LABEL   SETA  &SYSNDX                                                     28.\n         DC    AL1(L'#&LABEL)                                              29.\n         DC    X'&UAL'                                                     30.\n         AIF   (T'&PARM EQ 'O').NOPARM                                     31.\n         AIF   ('&PARM' NE 'SUBTABLE').KENT003                             32.\n         DC    AL1(&OFFSET+240)                                            33.\n&OFFSET  SETA  &OFFSET+1                                                   34.\n&LEN     SETC  '1'                                                         35.\n         AGO   .KENT001                                                    36.\n.KENT003 ANOP                                                              37.\n         DC    X'&PARM'                                                    38.\n&LEN     SETC  '1'                                                         39.\n         AGO   .KENT001                                                    40.\n.NOPARM  ANOP                                                              41.\n         DC    AL1(0)                                                      42.\n.KENT001 ANOP                                                              43.\n         AIF   (T'&PARMLEN EQ 'O').KENT002                                 44.\n&LEN     SETC  '&PARMLEN'                                                  45.\n.KENT002 ANOP                                                              46.\n         DC    AL1(&LEN)                                                   47.\n         DC    AL2(&KEY)                                                   48.\n#&LABEL  DC    C'&KEYWORD'                                                 49.\n         MEND                                                              50.\n         EJECT                                                             51.\n*                                                                          52.\n*   CREATE A KEYWORD HASH TABLE ENTRY                                      53.\n*                                                                          54.\n         MACRO                                                             55.\n         BEGIN &CHAR                                                       56.\nBEGIN&CHAR DS  0X                                                          57.\n         MEND                                                              58.\n         SPACE 3                                                           59.\n*                                                                          60.\n*   CREATE THE KEYWORD TABLE HASH INDEX                                    61.\n*                                                                          62.\n         MACRO                                                             63.\n         INDEX                                                             64.\nKYWDINDX DS    0F                 ALIGN ON FULLWORD BOUNDARY               65.\n         DC    A(BEGINA)                                                   66.\n         DC    A(BEGINB)                                                   67.\n         DC    A(BEGINC)                                                   68.\n         DC    A(BEGIND)                                                   69.\n         DC    A(BEGINE)                                                   70.\n         DC    A(BEGINF)                                                   71.\n         DC    A(BEGING)                                                   72.\n         DC    A(BEGINH)                                                   73.\n         DC    A(BEGINI)                                                   74.\n         DC    7A(0)                                                       75.\n         DC    A(BEGINJ)                                                   76.\n         DC    A(BEGINK)                                                   77.\n         DC    A(BEGINL)                                                   78.\n         DC    A(BEGINM)                                                   79.\n         DC    A(BEGINN)                                                   80.\n         DC    A(BEGINO)                                                   81.\n         DC    A(BEGINP)                                                   82.\n         DC    A(BEGINQ)                                                   83.\n         DC    A(BEGINR)                                                   84.\n         DC    8A(0)                                                       85.\n         DC    A(BEGINS)                                                   86.\n         DC    A(BEGINT)                                                   87.\n         DC    A(BEGINU)                                                   88.\n         DC    A(BEGINV)                                                   89.\n         DC    A(BEGINW)                                                   90.\n         DC    A(BEGINX)                                                   91.\n         DC    A(BEGINY)                                                   92.\n         DC    A(BEGINZ)                                                   93.\n         MEND                                                              94.\n         EJECT                                                             95.\n*                                                                          96.\n*   BEGIN A NEW SUBTABLE                                                   97.\n*   SET COUNT OF # OF ENTRIES FOR PREVIOUS SUBTABLE                        98.\n*   REMEMBER ENTRY POINT                                                   99.\n*                                                                         100.\n         MACRO                                                            101.\n         BEGINSUB                 &SUBNAME                                102.\n         GBLC  &SUBLIST(30)       LIST OF SUBTABLE ENTRIES                103.\n         GBLA  &SUBCT(30)         LIST OF SUBTABLE ENTRY COUNTS           104.\n         GBLA  &SUBINDX           CURRENT SUBTABLE                        105.\n         GBLA  &SUBSENT           # ENTRIES IN CURRENT SUBTABLE           106.\n         AIF   (&SUBINDX EQ 0).SUB0001 FIRST INVOCATION                   107.\n&SUBCT(&SUBINDX) SETA &SUBSENT                                            108.\n&SUBSENT SETA  0                                                          109.\n.SUB0001 ANOP                                                             110.\n&SUBINDX SETA  &SUBINDX+1                                                 111.\n&SUBLIST(&SUBINDX) SETC '&SUBNAME'                                        112.\n&SUBNAME DS    0X                                                         113.\n         MEND                                                             114.\n         SPACE 3                                                          115.\n*                                                                         116.\n*   ADD LAST SUBTABLE DEFINITION TO SUBTABLE LIST                         117.\n*                                                                         118.\n         MACRO                                                            119.\n         ENDSUB                                                           120.\n         GBLA  &SUBCT(30)                                                 121.\n         GBLA  &SUBINDX                                                   122.\n         GBLA  &SUBSENT                                                   123.\n&SUBCT(&SUBINDX) SETA &SUBSENT                                            124.\n         MEND                                                             125.\n         EJECT                                                            126.\n*                                                                         127.\n*       GENERATE THE INDEX FOR ALL SUBTABLES                              128.\n*                                                                         129.\n         MACRO                                                            130.\n&LABEL   SUBINDEX                                                         131.\n         GBLC  &SUBLIST(30)                                               132.\n         GBLA  &SUBCT(30)                                                 133.\n         GBLA  &SUBINDX                                                   134.\n         LCLA  &X                                                         135.\n         AIF   (&SUBINDX LE 15).NOERR                                     136.\n         MNOTE 16,'ONLY 16 SUBTABLES PERMITTED'                           137.\n.NOERR   ANOP                                                             138.\n&LABEL   DS    0F                                                         139.\n.LOOP    ANOP                                                             140.\n         AIF   (&X EQ &SUBINDX).#1                                        141.\n&X       SETA  &X+1                                                       142.\n         DC    AL1(&SUBCT(&X)),AL3(&SUBLIST(&X))                          143.\n         AGO   .LOOP                                                      144.\n.#1      ANOP                                                             145.\n         MEND                                                             146.\n         SPACE 3                                                          147.\n*                                                                         148.\n*   BUILD AN ENTRY IN A SUBTABLE                                          149.\n*                                                                         150.\n         MACRO                                                            151.\n         SENT  &KEY,&VALUE                                                152.\n         GBLA  &SUBSENT                                                   153.\n         LCLA  &LABEL                                                     154.\n&SUBSENT SETA  &SUBSENT+1                                                 155.\n&LABEL   SETA  &SYSNDX                                                    156.\n         DC    AL1(L'#&LABEL)                                             157.\n         DC    XL2'&VALUE'                                                158.\n#&LABEL  DC    C'&KEY'                                                    159.\n         MEND                                                             160.\n         EJECT                                                            161.\n*                                                                         162.\n*   BUILD A TABLE USED TO BUILD A DICB                                    163.\n*                                                                         164.\n         MACRO                                                            165.\n&LABEL   DICBTAB1                                                         166.\n&LABEL   DS    0H                                                         167.\n         DC    X'000400010008',XL8'00' DDNAME                             168.\n         DC    X'00050001002C',XL44'00' DSNAME                            169.\n         DC    X'000600010008',XL8'00' MEMBER NAME                        170.\n         DC    X'000700010001',X'00' STATUS                               171.\n         DC    X'000800010001',X'00' DISPOSITION                          172.\n         DC    X'000900010001',X'00'  CONDITIONAL DISPOSITION             173.\n         DC    X'000A00010002',XL2'00' DSORG                              174.\n         DC    X'000B00010002',XL2'00' LIMIT SPECIFICATION                175.\n         DC    X'000C00010001',X'00' ATTRIBUTE SPECIFICATION              176.\n         DC    X'000D00010001',X'00' LAST ENTRY SPECIFICATION             177.\n         DC    X'000E00010001',X'00' DATA SET TYPE                        178.\n         MEND                                                             179.\n         MACRO                                                            180.\n&LABEL   DICBTAB2                                                         181.\n&LABEL   DS    0H                                                         182.\n         DC    X'005500010008',XL8'00' DDNAME                             183.\n         DC    X'00560001002C',XL44'00' DSNAME                            184.\n         DC    X'005700010002',XL2'00' DSORG                              185.\n         DC    X'005D00010006',XL6'00' VOLSER                             186.\n         MEND                                                             187.\n         EJECT                                                            188.\n***********************************************************************   189.\n*                                                                         190.\n*   THIS ROUTINE PROVIDES AN INTERFACE BETWEEN A HIGH LEVEL               191.\n*   LANGUAGE SUCH AS FORTRAN, PL/1 OR COBOL, AND THE OPERATING            192.\n*   SYSTEM DYNAMIC ALLOCATION ROUTINES.                                   193.\n*                                                                         194.\n*   INSTALLATION: UNIVERSITY OF MANITOBA COMPUTER CENTRE                  195.\n*   AUTHOR:       GERRY DUECK                                             196.\n*   DATE WRITTEN: SUMMER 1978                                             197.\n*   MODS:         ADDITION OF ALLOCR VERB.                                198.\n*                 LOTS OF MUCKING ABOUT TO MAKE THIS PROGRAM              198.1\n*                 CONSISTENT WITH ITS DOCUMENATION.                       198.2\n*                   ROD ZAZUBEK FEB 1979                                  199.\n*   DOCUMENTATION: COMPLETE DOCUMENTATION ON THE USE OF DYNAM IS          199.1\n*                  AVAILABLE IN SYS4.DOCUMENT.TEXT(DYNAM)                 199.2\n*   ATTRIBUTES:   RENT                                                    199.3\n*   HINTS:        PUT THIS PROGRAM SOMEWHERE IN THE LINK LIST.            199.4\n*                                                                         200.\n*   PARAMETERS                                                            201.\n*      1 - WORK AREA. THE FIRST WORD OF THIS WORK AREA MUST CONTAIN       202.\n*          THE LENGTH OF THE AREA. A MINIMUM OF 100 BYTES IS REQUIRED.    203.\n*          IF THE LENGTH IS ZERO, AND 'INIT' IS NOT SPECIFIED (SEE        204.\n*          PARM 2) THEN A WORK AREA IS OBTAINED AND USED FOR THIS         205.\n*          CALL ONLY. THE WORKAREA IS FREED BEFORE RETURNING TO THE       206.\n*          CALLER.                                                        207.\n*      2 - REQUEST VERB. THIS FIELD IS DELIMITED BY A BLANK.              208.\n*          IF THE REQUEST VERB IS 'INIT' THEN ALL THIS CALL               209.\n*          DOES IS TO ALLOCATE A WORK AREA FOR SUBSEQUENT                 210.\n*          CALLS. IF THE VERB IS 'END' THEN THIS WORK AREA                211.\n*          IS FREED.                                                      212.\n*      3 AND SUBSEQUENT PARAMETERS.                                       213.\n*        - CHARACTER STRINGS CONSISTING OF KEYWORD/VALUE PAIRS            214.\n*          SEPARATED BY '=' AND DELIMITED BY ' ', ';'.                    215.\n*          END OF STRING IS DETERMINED BY ';'                             216.\n*          END OF LIST IS INDICATED BY THE HIGH ORDER BIT OF              217.\n*          THE PARAMETER ADDRESS.                                         218.\n*      AT LEAST 3 PARAMETERS ARE ASSUMED FOR ALL VERBS OTHER THAN         219.\n*      'INIT' AND 'END'                                                   220.\n*                                                                         221.\n*   WORK AREA.                                                            222.\n*      THE WORK AREA CONTAINS 5 SECTIONS:                                 223.\n*         - WORK AREA CONTROL BLOCK.                                      224.\n*         - DAIRFAIL PARAMETER LIST.                                      225.\n*         - DYNAMIC ALLOCATION REQUEST BLOCK.                             226.\n*         - TEXT UNITS.                                                   227.\n*         - TEXT POINTERS.                                                228.\n*      THE TEXT POINTERS ARE STACKED AT THE BOTTOM OF THE WORK AREA.      229.\n*      THE TEXT UNITS ARE HEAPED AFTER THE REQUEST BLOCK.                 230.\n*                                                                         231.\n*  ENTRY OPTIONS:                                                         232.\n*     IF VERB = 'INIT' THEN                                               233.\n*        GET WORK AREA                                                    234.\n*        PLACE ADDRESS IN PARM 1                                          235.\n*        SET FIRST BYTE OF PARM 1 TO X'0F' TO INDICATE                    236.\n*           THAT THIS IS A GETMAINED AREA                                 237.\n*        RETURN                                                           238.\n*     ELSE IF VERB = 'END' THEN                                           239.\n*        FREE THE AREA POINTED TO BY PARM ONE                             240.\n*        RETURN                                                           241.\n*     ELSE IF PARM 1 = 0 THEN                                             242.\n*        GETMAIN AREA                                                     243.\n*        PERFORM ALLOCATION                                               244.\n*        FREMAIN AREA                                                     245.\n*        RETURN                                                           246.\n*     ELSE IF HIGH ORDER BYTE OF PARM 1 IS X'0F' THEN                     247.\n*        DEREFENCE WORK AREA POINTER                                      248.\n*        PERFORM COMMAND                                                  249.\n*     ELSE                                                                250.\n*        PERFORM COMMAND USING USER SUPPLIED WORK AREA                    251.\n*                                                                         252.\n*   THREE TABLES ARE USED TO BUILD TEXT UNITS FOR SVC99.                  253.\n*                                                                         254.\n*   VERB TABLE:                                                           255.\n*      THERE ARE ONLY 7 VERBS USED BY SVC99, AND SINCE SOME OF            256.\n*      THESE ARE INFORMATION VERBS (IE THEY RETURN INFO) THEY ARE         257.\n*      NOT SUPPORTED BY THIS INTERFACE SINCE THERE IS NO TRIVIAL          258.\n*      MEANS OF RETURNING INFORMATION TO THE CALLER. THE VERB MUST        259.\n*      BE AT LEAST AS LONG AS THE LENGTH SPECIFIED IN ITS CORRESONDING    260.\n*      TABLE ENTRY. ACCESS TO THIS TABLE IS BY LINEAR SEARCH AND THE      261.\n*      RESULT IS A ONE BYTE FIELD CONTAINING THE VERB CODE. TABLE         262.\n*      ENTRIES ARE OF VARIABLE LENGTH WITH THE FIRST BYTE CONTAINING      263.\n*      THE LENGTH OF THE VARIABLE PART. THE LENGTH OVERHEAD IS 2.         264.\n*                                                                         265.\n*   KEYWORD TABLE:                                                        266.\n*      THE KEYWORD TABLE IS VERY LONG, AND THE ENTRIES ARE VARIABLE       267.\n*      LENGTH SO A BINARY SEARCH IS OUT OF THE QUESTION (UNLESS YOU       268.\n*      HAD A TAG POINTING TO EACH TABLE ENTRY -- HMMMMM...) AND A         269.\n*      LINEAR SEARCH IS TOO SLOW. A PRIMITIVE HASH TABLE IS USED          270.\n*      IN WHICH THERE IS AN ENTRY FOR EVERY LETTER AND A POINTER          271.\n*      TO THE FIRST KEYWORD TABLE ENTRY WHOSE KEYWORD STARTS WITH         272.\n*      THAT LETTER. THE KEYWORD TABLE IS SORTED ALPHABETICALLY            273.\n*      AND THE HASH TABLE IS BUILT BY INSERTING A BEGIN MACRO             274.\n*      EVERY TIME A CHANGE IN FIRST LETTER OCCURS. WHEN PERFORMING        275.\n*      A SEARCH ON THIS TABLE, COMPARISONS ARE MADE TO THE LENGTH         276.\n*      OF THE KEYWORD SPECIFIED BY THE USER. WHEN A MATCH IS FOUND,       277.\n*      THE LENGTH OF THE KEYWORD IS COMPARED TO THE MINIMUM LENGTH        278.\n*      SPECIFIED IN THE TABLE ENTRY. IT MUST BE AT LEAST THIS LONG        279.\n*      IN ORDER TO BE UNAMBIGOUS.                                         280.\n*                                                                         281.\n*   KEYWORD SUBTABLE:                                                     282.\n*     SOME OF THE ENTRIES IN THE KEYWORD TABLE REQUIRE MORE INFORMATION   283.\n*      AND FOR THESE A POINTER TO A SUBTABLE IS SUPPLIED. THIS POINTER    284.\n*      IS AN INDEX INTO ANOTHER TABLE MUCH LIKE THE HASH TABLE AND IS     285.\n*      ONLY ONE BYTE, SO ONLY 16 SUBTABLES CAN OCCUR.                     286.\n*                                                                         287.\n*   BUILDING A TEXT UNIT:                                                 288.\n*      AFTER FINDING THE KEYWORD IN THE KEYWORD TABLE, A VARIETY          289.\n*      OF EVENTS CAN OCCUR. THIS IS BECAUSE IBM IN ITS INFINITE           290.\n*      WISDOM CANNOT DECIDE ON A SIMPLE STRUCTURE FOR TEXT UNITS.         291.\n*      SOME HAVE PARAMETERS THAT ARE PLI TYPE CHAR VAR, SOME ARE          292.\n*      VARIABLE LENGTH BINARY VALUES, SOME HAVE NO PARAMETERS, ETC.       293.\n*      THE FOLLOWING ALGORITHM IS USED TO BUILD THE TEXT UNIT:            294.\n*                                                                         295.\n*      IF THE USER SUPPLIED A PARM THEN                                   296.\n*         IF A NON ZERO LENGTH IS SPECIFIED IN THE KEYWORD TABLE THEN     297.\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH BINARY VALUE       298.\n*         ELSE                                                            299.\n*            CREATE A TEXT UNIT WITH A VARIABLE LENGTH STRING VALUE       300.\n*      ELIF THE PARM VALUE SUPPLIED IN THE KEYWORD TABLE IS >= X'F0'      301.\n*         CREATE A TEXT UNIT USING THE LENGTH AND VALUE SUPPLIED          302.\n*         IN THE SUBTABLE ENTRY CORRESSPONDING TO THE USER SUPPLIED       303.\n*         VALUE                                                           304.\n*      ELSE                                                               305.\n*         CREATE A TEXT UNIT USING A LENGTH OF 1 AND THE VALUE            306.\n*         SUPPLIED IN THE KEYWORD TABLE                                   307.\n*                                                                         308.\n*      THIS ALGORITHM WORKS WELL ENOUGH EXCEPT FOR TWO KLUGES:            309.\n*      CONCATENATION AND MULTI-VALUED KEYWORDS SUCH AS RECFM.             310.\n*                                                                         311.\n*      FOR CONCATENATION, THE TEXT UNIT MUST CONTAIN A VARIABLE           312.\n*      NUMBER OF VARIABLE LENGTH CHARACTER STRINGS SHOVED TOGETHER.       313.\n*      IF A ',' OCCURS AFTER A VALUE,THEN THE NEXT VALUE IS SCANNED AND   314.\n*      CONCATENATED TO THE CURRENT ONE. THIS ASSUMES THAT THE TEXT UNIT   315.\n*      IS ONE FOR WHICH CONCATENATED STRINGS ARE REQUIRED. IT IS UP TO    316.\n*      THE USER TO SUPPLY CORRECT DATA.                                   317.\n*                                                                         318.\n*      FOR THE SPECIAL KEYWORDS RECFM AND OPTCD, EACH LETTER OF THE       319.\n*      VALUE IS INDIVIDUALLY LOOKED UP IN THE SUBTABLE AND THE VALUE      320.\n*      THUS OBTAINED IS OR'ED WITH THE VALUE ALREADY IN THE TEXT UNIT.    321.\n*      IE RECFM=FBA = X'80' | X'10' | X'04' = X'94'                       322.\n*                                                                         323.\n*   RETURN CODES AND DIAGNOSTICS:                                         324.\n*      IF THE RETURN CODE FROM SVC99 IS NOT ZERO THEN A PARAMETER         325.\n*      BLOCK FOR DAIRFAIL IS BUILT. DAIRFAIL IS CALLED AND THE            326.\n*      DIAGNOSTIC THAT IT GENERATES IS WRITTEN TO THE JOB LOG (WTP).      327.\n*                                                                         328.\n*      THE INTERFACE ALSO HAS ITS OWN RETURNS CODES FOR ERRORS IS         329.\n*      DETECTS IN THE USERS PARAMETER LIST. THESE START AT 4 HIGHER       330.\n*      THAN THE RETURN CODES FROM SVC99.                                  331.\n*                                                                         332.\n*      THE RETURN CODE IS RETURNED BOTH IN REGISTER 15 AND IN THE         333.\n*      SECOND WORD OF THE WORKAREA, IF IT STILL EXISTS AT THE END         334.\n*      OF THE ROUTINE.                                                    335.\n*                                                                         336.\n*   SVC99 RETURN CODES (SEE SPL:JOB MANAGEMENT PAGE 34)                   337.\n*      00 SUCCESSFULL COMPLETION                                          338.\n*      04 ENVIRONMENT, RESOURCE FAILURE, SYSTEM ROUTINE                   339.\n*      08 REQUEST DENIED BY INSTALLATION VALIDATION ROUTINE               340.\n*      12 INVALID PARAMETER LIST                                          341.\n*                                                                         342.\n*   INTERFACE RETURN CODES                                                343.\n*      16 INVALID VERB                                                    344.\n*      20 INVALID KEYWORD                                                 345.\n*      24 WORK AREA OVERFLOW                                              346.\n*      28 VALUE NOT FOUND IN SUBTABLE: INVALID VALUE                      347.\n*                                                                         348.\n***********************************************************************   349.\n         EJECT                                                            350.\nWORKAREA DSECT                                                            351.\nWALEN    DS    F                  LENGTH OF WORK AREA                     352.\nWAS99RC  DS    A                  VALUE OF RETURN CODE FROM SVC 99        353.\nWADWORD  DS    D                  DOUBLE WORD FOR PACKS                   354.\nWABOTTOM DS    A                  END OF WORK AREA                        355.\nWAKYSTRT DS    A                  START OF KEYWORD                        356.\nWAVALAD  DS    A                  START OF VALUE                          357.\nWAVBSTRT DS    A                  START OF VERB                           358.\nWAS99RB  DS    A                  POINTER TO REQUEST BLOCK                359.\nWADFID   DS    XL2                CALLER IDENTIFIER FOR DAIR FAIL         360.\nWADFDSCT DS    A                  ADDR OF DSECT FOR CALLING DAIR FAIL     361.\nWAZEROES DS    A                  ADDRESS OF IKJEFF02                     362.\nWALASTTU DS    A                  ADDRESS OF END OF LAST TEXT UNIT        363.\nWAALLOCR DS    XL1                IS THIS AN ALLOCR VERB                  364.\nWATRUE   EQU   X'FF'                                                      365.\nWASAVE   DS    18F                SAVE AREA FOR DAIRFAIL                  366.\nWAEND    EQU   *                  END OF DSECT                            367.\n         SPACE 1                                                          368.\nVERBTABL DSECT                                                            369.\nVTVLEN   DS    X                  LENGTH OF VERB                          370.\nVTVERB   DS    X                  VERB CODE                               371.\nVTVSTR   DS    0C                 VERB STRING                             372.\nVTVEND   EQU   *                                                          373.\n         SPACE 1                                                          374.\nKYWDTABL DSECT                                                            375.\nKYWDLEN  DS    X                  KEYWORD LENGTH                          376.\nKYWDMIN  DS    X                  MINIMUM UNAMBIGOUS LENGTH               377.\nKYWDPARM DS    X                  SPECIAL PARAMETER                       378.\nKYNOPARM EQU   X'00'              FLAGS NO PARM                           379.\nKYWDPMLN DS    X                  LENGTH OF PARM IF FIXED LENGTH          380.\nKYWDKEY  DS    2X                 KEYWORD KEY                             381.\nKYWDSTRG DS    0C                 KEYWORD STRING                          382.\n         ORG   KYWDPARM                                                   383.\nKYWDSUBT DS    X                  FLAG A SUBTABLE FOR THIS ENTRY          384.\nKYWDSUBF EQU   X'F0'              FLAGS A SUBTABLE                        385.\n         ORG                                                              386.\n         SPACE 1                                                          387.\nVALUTABL DSECT                                                            388.\nVALULEN  DS    X                  LENGTH OF STRING IN THIS ENTRY          389.\nVALUPARM DS    2X                 PARAMETER VALUE FOR TEXT UNIT           390.\nVALUSTRG DS    0C                 ENTRY STRING                            391.\n         SPACE 1                                                          392.\nCHAR     DSECT                                                            393.\nCH       DS    C                                                          394.\n         EJECT                                                            395.\nDICB1    DSECT                                                            396.\nDIDDN    DS    XL14               DDNAME                                  397.\nDIDSN    DS    XL50               DSNAME                                  398.\nDIMEM    DS    XL14               MEMBER NAME                             399.\nDISTAT   DS    XL7                STATUS                                  400.\nDIDISP   DS    XL7                NORMAL DISPOSITION                      401.\nDICDISP  DS    XL7                CONDITIONAL DISPOSITION                 402.\nDIDSORG  DS    XL8                DSORG                                   403.\nDILIMIT  DS    XL8                NUMBER RESOURCES TO BE FREED            404.\nDIATTR   DS    XL7                ATTRIBUTE SPECIFICATION                 405.\nDILAST   DS    XL7                LAST ENTRY SPECIFICATION                406.\nDITYPE   DS    XL7                DATA SET TYPE (DUMMY,TERMINAL,OTHER)    407.\nDILEN1   EQU   *-DICB1                                                    408.\nDICB2    DSECT                                                            409.\nDIDDN2   DS    XL14                                                       410.\nDIDSN2   DS    XL50                                                       411.\nDIDSORG2 DS    XL8                                                        412.\nDIVOL2   DS    XL12                                                       413.\nDILEN2   EQU   *-DICB2                                                    414.\n         EJECT                                                            415.\n         IEFZB4D0                                                         416.\n         EJECT                                                            417.\n         IEFZB4D2                                                         418.\n         EJECT                                                            419.\n         IKJEFFDF DFDSECT=YES                                             420.\n         EJECT                                                            421.\n@WA      EQU   11                 BASE ADDRESS FOR WORK AREA              422.\n@RB      EQU   10                 BASE ADDRESS FOR REQUEST BLOCK          423.\n@TP      EQU   9                  BASE ADDRESS FOR TEXT POINTERS          424.\n@TU      EQU   8                  TEXT UNIT                               425.\n@CH      EQU   7                  POINTER INTO PARM STRING                426.\n@VTE     EQU   6                  VERB TABLE ENTRY                        427.\n@KTE     EQU   6                  KEYWORD TABLE ENTRY                     428.\nLENGTH   EQU   5                                                          429.\n@DF      EQU   5                  BASE ADDRESS FOR DFDSECT                430.\n         SPACE 1                                                          431.\nDYNAM    CSECT                                                            432.\n         USING DYNAM,12           ADDRESSIBILITY FOR CSECT                433.\n         SAVE  (14,12),,DYNAM-MARCH-22-1979                               434.\n         LR    R12,R15            GET BASE FOR CSECT                      435.\n         SPACE 1                                                          436.\n         USING WORKAREA,@WA       ADDRESSIBILITY FOR WORK AREA            437.\n         USING S99RB,@RB          ADDRESSIBILITY FOR REQUEST BLOCK        438.\n         USING S99TUPL,@TP        ADDRESSIBILITY FOR TEXT POINTERS        439.\n         USING S99TUNIT,@TU       ADDRESSIBILITY FOR TEXT UNITS           440.\n         USING CHAR,@CH                                                   441.\n         USING VERBTABL,@VTE      ADDRESSIBILITY FOR VERB TABLE           442.\n         USING DFDSECTD,@DF       ADDRESSIBILITY FOR DAIRFAIL DSECT       443.\n         SPACE 1                                                          444.\n*                                                                         445.\n**   DECODE ENTRY OPTIONS                                                 446.\n*                                                                         447.\n         L     R2,4(R1)           ADDRESS OF VERB                         448.\n         CLC   0(4,R2),=C'INIT'                                           449.\n         BE    INITCODE                                                   450.\n         CLC   0(3,R2),=C'END'                                            451.\n         BE    ENDCODE                                                    452.\n         L     @WA,0(R1)          ADDRESS OF WORK AREA                    453.\n         OC    WALEN,WALEN        IS IT 0?                                454.\n         BNZ   WORKGOT            NOPE                                    455.\n         LR    R2,R1              SAVE R1                                 456.\n         GETMAIN R,LV=2048                                                457.\n         L     R3,0(R2)           ADDR OF PARM 1                          458.\n         ST    R1,0(R3)           SAVE ADDRESS                            459.\n         MVI   0(R3),X'0E'        MARK TO BE FREED AFTER ALLOCATE         460.\n         L     @WA,0(R3)          GET ADDRESS                             461.\n         LA    R3,2048            LENGTH OF WORKAREA                      462.\n         ST    R3,WALEN           SET LENGTH                              463.\n         LR    R1,R2              RESTORE R1                              464.\n         B     WORKSET                                                    465.\nWORKGOT  CLI   WALEN,X'0F'        IS THIS THE ADDRESS OF A WORK AREA?     466.\n         BNE   WORKSET            NOPE, USER SUPPLIED AREA                467.\n         L     @WA,WALEN          YES, DEREFENCE IT                       468.\nWORKSET  DS    0H                                                         469.\n*                                                                         470.\n**   SET UP WORK AREA                                                     471.\n*                                                                         472.\n         L     @TP,WALEN          GET LENGTH                              473.\n         LR    R2,@WA             ADDRESS OF WORK AREA                    474.\n         LR    R3,@TP             LENGTH                                  475.\n         LR    R4,R2              FROM ADDR FOR ZAP                       476.\n         XR    R5,R5                                                      477.\n         MVCL  R2,R4              ZAP WORK AREA                           478.\n         LR    R15,R13            ADDR OF CALLERS SAVE                    479.\n         LA    R13,WASAVE                                                 480.\n         ST    R13,8(R15)         FORE LINK                               481.\n         ST    R15,4(R13)         BACK LINK                               482.\n         ST    @TP,WALEN                                                  483.\n         AR    @TP,@WA            + ADDRESS = END OF WORK AREA            484.\n         ST    @TP,WABOTTOM                                               485.\n         LA    @RB,WAEND          BEGINNING OF REQUEST BLOCK              486.\n         ST    @RB,WADFDSCT       ADDRESS OF DFDSECTD                     487.\n         LA    @RB,DFLEN(@RB)     POINT PAST DFDSECTD                     488.\n         ST    @RB,WAS99RB        ADDRESS OF REQUEST BLOCK                489.\n         LA    @TU,S99RBEND       BEGINNING OF TEXT UNIT HEAP             490.\n         MVI   S99RBLN,X'14'      LENGTH OF RB                            491.\n*                                                                         492.\n**  EXAMINE THE VERB PARAMETER                                            493.\n*                                                                         494.\n         L     @CH,4(R1)          GET SECOND PARM                         495.\n         LA    @VTE,VERBTAB       FIRST ENTRY IN VERB TABLE               496.\n         SR    R2,R2                                                      497.\nVERBLOOP DS    0H                                                         498.\n         C     @VTE,VERBTEND      END OF TABLE?                           499.\n         BE    FAILVERB           YES, VERB NOT FOUND                     500.\n         IC    R2,VTVLEN          GET LENGTH OF VERB                      501.\n         BCTR  R2,0               LESS 1                                  502.\n         EX    R2,VERBCLC         MATCH?                                  503.\n         BE    VERBPOOL           YES                                     504.\n         LA    @VTE,VTVSTR+1(R2)  GET NEXT ENTRY                          505.\n         B     VERBLOOP                                                   506.\nVERBCLC  CLC   VTVSTR,CH                                                  507.\nVERBPOOL DS    0H                                                         508.\n         CLC   CH(6),=C'ALLOCR'   VERB = ALLOCR?                          509.\n         BNE   VERBEND                                                    510.\n         MVI   WAALLOCR,WATRUE    SET ALLOCR FLAG                         511.\nVERBEND  DS    0H                                                         512.\n         MVC   S99VERB,VTVERB     MOVE IN VERB CODE                       513.\n*                                                                         514.\n*  SCAN OFF KEYWORD PARAMETERS.                                           515.\n*                                                                         516.\n         CLI   4(R1),X'80'        END OF PARM LIST?                       517.\n         BE    FAILKEY                                                    518.\n         LA    R1,8(R1)           POINT TO THIRD PARAMETER                519.\n         CLI   S99VERB,S99VRBIN   VERB = INFO?                            520.\n         BE    RETINFO            YUP                                     521.\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?                          522.\n         BE    RETALLOC                                                   523.\n         B     PARMLOOP           NOPE, START LOOP                        524.\n*                                                                         525.\n**   SET UP THE TEXT UNITS FOR DYNAMIC INFORMATION RETRIEVAL              526.\n**   THIS IS FOR THE INFO AND ALLOCR VERBS                                527.\n*                                                                         528.\nRETINFO  DS    0H                                                         529.\n         LA    R2,DILEN1(@TU)     POINT TO END OF DICB                    530.\n         MVC   0(DILEN1,@TU),DICBS1 MOVE IN MODEL TEXT UNITS              531.\n         B     RETLOOP                                                    532.\nRETALLOC DS    0H                                                         533.\n         LA    R2,DILEN2(@TU)     POINT TO END OF DICB2                   534.\n         MVC   0(DILEN2,@TU),DICBS2 MOVE IN MODEL TEXT UNITS              535.\nRETLOOP  DS    0H                                                         536.\n         S     @TP,=F'4'          POINT TO TUPTR ENTRY                    537.\n         ST    @TU,S99TUPTR       SET POINTER                             538.\n         LH    R3,S99TULNG        GET LENGTH OF PARM FIELD                539.\n         LA    @TU,S99TUPAR(R3)   POINT TO NEXT TEXT UNIT                 540.\n         CR    @TU,R2             END OF DICB?                            541.\n         BNE   RETLOOP                                                    542.\n         CLI   0(R1),X'80'        LAST PARM?                              543.\n         BE    PARMPOOL           YES                                     544.\n         LA    R1,4(R1)           POINT TO NEXT PARM                      545.\nPARMLOOP DS    0H                                                         546.\n         L     @CH,0(R1)          GET ADDRESS OF STRING                   547.\n         LA    @CH,0(@CH)         ZERO TOP BYTE                           548.\nSTRINGLP DS    0H                 START OF STRING LOOP                    549.\nSTRING01 DS    0H                                                         550.\n         CLI   CH,C';'            END OF STRING                           551.\n         BE    STRINGPL           YES, GOTO END OF STRING LOOP            552.\n         CLI   CH,C','            COMMA?                                  553.\n         BE    STRING02                                                   554.\n         CLI   CH,C' '            BLANK?                                  555.\n         BNE   STRING03                                                   556.\nSTRING02 LA    @CH,1(@CH)         GET NEXT CHAR                           557.\n         B     STRING01                                                   558.\nSTRING03 DS    0H                                                         559.\n         LA    R2,15             LENGTH OF LONGEST KEYWORD                560.\n         ST    @CH,WAKYSTRT       SAVE START ADDRESS                      561.\nKEYSLOOP DS    0H                                                         562.\n         CLI   CH,C'='            END OF KEYWORD?                         563.\n         BE    KEYSPOOL                                                   564.\n         CLI   CH,C','                                                    565.\n         BE    KEYSPOOL                                                   566.\n         CLI   CH,C';'                                                    567.\n         BE    KEYSPOOL                                                   568.\n         CLI   CH,C' '                                                    569.\n         BE    KEYSPOOL                                                   570.\n         LA    @CH,1(@CH)         GET NEXT CHAR                           571.\n         BCT   R2,KEYSLOOP                                                572.\n         B     FAILKEY            KEY WORD FAILED                         573.\n         USING KYWDTABL,@KTE      ADDRESSIBILITY FOR KEY WORD TABLE       574.\nKEYSPOOL DS    0H                                                         575.\n*                                                                         576.\n** KEYWORD - SCAN OFF AND LOOK UP A KEYWORD                               577.\n*                                                                         578.\nKEYWORD  DS    0H                                                         579.\n         L     R3,WAKYSTRT        GET FIRST CHR IN WORD                   580.\n         CLI   0(R3),C'A'                                                 581.\n         BL    FAILKEY            INVALID KEYWORD                         582.\n         CLI   0(R3),C'Z'                                                 583.\n         BH    FAILKEY            INVALID KEYWORD                         584.\n         IC    R2,0(R3) GET FIRST CHAR                                    585.\n         S     R2,=F'193'         SUBTRACT OFF VALUE OF 'A'               586.\n         SLL   R2,2               TIMES 4                                 587.\n         L     @KTE,KYWDINDX(R2)  GET ADDRESS OF FIRST ENTRY WITH         588.\n*                                 SAME FIRST LETTER                       589.\n         LR    LENGTH,@CH                                                 590.\n         S     LENGTH,WAKYSTRT    LENGTH OF KEYWORD                       591.\n         BCT   LENGTH,KEYLOOP     LESS ONE FOR EXECUTE                    592.\n         B     FAILKEY                                                    593.\nKEYLOOP  DS    0H                                                         594.\n         CLC   KYWDSTRG(1),0(R3)  CHECK FIRST CHAR                        595.\n         BNE   FAILKEY            NO LONGER IN CORRECT PART OF TABLE      596.\n         EX    LENGTH,KEYCLC      COMPARE KEYWORD TO ENTRY                597.\n         BE    KEYPOOL                                                    598.\n         IC    R2,KYWDLEN         GET LENGTH OF ENTRY                     599.\n         LA    @KTE,KYWDSTRG(R2)  GET NEXT ENTRY                          600.\n         B     KEYLOOP                                                    601.\nKEYCLC   CLC   KYWDSTRG,0(R3)                                             602.\nKEYPOOL  DS    0H                                                         603.\n         IC    R2,KYWDMIN         GET MIMINUM UNAMBIGOUS LENGTH           604.\n         LA    LENGTH,1(LENGTH)   LENGTH :=+ 1                            605.\n         CR    LENGTH,R2          CHECK LENGTH                            606.\n         BL    FAILKEY            KEY WORD TOO SHORT                      607.\n         MVC   S99TUKEY,KYWDKEY                                           608.\n         LA    R4,S99TULNG        ADDRESS OF LENGTH FIELD                 609.\n         ST    R4,WALASTTU        SAVE IT                                 610.\n         CLI   CH,C'='            DID THE USER SUPPLY A PARM              611.\n         BNE   SPECPARM           IF NOT, THEN PARM IS IN TABLE           612.\nVALUNEXT DS    0H                                                         613.\n         LA    @CH,1(@CH)         POINT PAST '='                          614.\n         ST    @CH,WAVALAD                                                615.\nVALULOOP DS    0H                                                         616.\n         CLI   CH,C' '            BLANK?                                  617.\n         BE    VALUPOOL           YES, END OF VALUE                       618.\n         CLI   CH,C','            COMMA?                                  619.\n         BE    VALUPOOL           YES, END OF VALUE                       620.\n         CLI   CH,C';'            SEMI?                                   621.\n         BE    VALUPOOL           YES, END OF VALUE                       622.\n         LA    @CH,1(@CH)         GET NEXT VALUE                          623.\n         B     VALULOOP                                                   624.\nVALUPOOL DS    0H                                                         625.\n         LR    LENGTH,@CH                                                 626.\n         S     LENGTH,WAVALAD     LENGTH OF VALUE                         627.\n         L     R4,WALASTTU                                                628.\n         STH   LENGTH,0(R4)       SAVE LENGTH                             629.\n         BCTR  LENGTH,0                                                   630.\n         BM    TEXTNUM            DONT MOVE VALUE IF NULL                 631.\n         L     R3,WAVALAD         GET START OF VALUE                      632.\n         CLI   KYWDSUBT,KYWDSUBF  IS THERE A SUBTABLE?                    633.\n         BNL   SUBTLKUP           YES                                     634.\n         CLI   KYWDPMLN,KYNOPARM  IS THERE A LENGTH SUPPLIED?             635.\n         BNE   CONVALUE                                                   636.\n         L     R4,WALASTTU                                                637.\n         LA    R4,2(R4)           POINT TO PARAMETER FIELD                638.\n         EX    LENGTH,VALUEMVC                                            639.\n         B     TEXTNUM                                                    640.\nVALUEMVC MVC   R0(0,R4),0(R3)                                             641.\nSUBTLKUP DS    0H                                                         642.\n@SUBT    EQU   4                                                          643.\n*                                                                         644.\n**   R3 POINTS TO VALUE                                                   645.\n**   R2 # OF ENTRIES IN SUBTABLE                                          646.\n**   R15 USED FOR IC,STC                                                  647.\n*                                                                         648.\n         XR    R15,R15                                                    649.\n         XR    R2,R2                                                      650.\n         IC    R2,KYWDSUBT        GET SUBTABLE INDEX POINTER              651.\n         N     R2,=F'15'          GET RID OF FLAG BITS                    652.\n         SLL   R2,2               TIMES 4                                 653.\n         L     @SUBT,VALUINDX(R2) ADDR OF SUBTABLE                        654.\n         USING VALUTABL,@SUBT     ADDRESSIBILITY FOR SUBTABLE ENTRIES     655.\n         IC    R2,VALUINDX(2)     # ENTRIES IN SUBTABLE                   656.\n         CLC   KYWDSTRG(5),=C'RECFM' SPECIAL CASE FOR RECFM               657.\n         BE    SPECCASE                                                   658.\n         CLC   KYWDSTRG(5),=C'OPTCD' AND FOR OPTION CODE                  659.\n         BE    SPECCASE                                                   660.\nSUBTLOOP DS    0H                                                         661.\n         EX    LENGTH,SUBTCLC     COMPARE ENTRIES                         662.\n         BE    SUBTPOOL           ENTRY FOUND                             663.\n         IC    R15,VALULEN        GET LENGTH OF THIS ENTRY                664.\n         LA    @SUBT,VALUSTRG(R15) GET NEXT ENTRY                         665.\n         BCT   R2,SUBTLOOP        REPEAT IF NOT AT END OF TABLE           666.\n         B     FAILVALU                                                   667.\nSUBTPOOL DS    0H                                                         668.\n         LA    LENGTH,1(LENGTH)   LENGTH +:= 1                            669.\n         CR    LENGTH,R15         CORRECT VALUE LENGTH                    670.\n         BNE   FAILVALU                                                   671.\n         IC    R2,KYWDPMLN        GET PARM LENGTH                         672.\n         STC   R2,S99TULNG+1      SAVE IT IN TEXT UNIT                    673.\n         IC    R2,CONVMASK(R2)    GET STCM MASK                           674.\n         ICM   R3,3,VALUPARM      GET VALUE                               675.\n         EX    R2,CONVSTCM        STCM R3,CONVMASK(R2),S99TUPAR           676.\n         B     TEXTNUM                                                    677.\nSUBTCLC  CLC   VALUSTRG,0(R3)                                             678.\n*                                                                         679.\n**   THIS CODE HANDLES THE SPECIAL CASE FOR KEYWORDS THAT CAN HAVE        680.\n**   MORE THAN ONE VALUE SPECIFIED. EG 'RECFM=FBA'.                       681.\n**   THE INDIVIDUAL VALUES ARE OR'ED TOGETHER                             682.\n*                                                                         683.\nSPECCASE DS    0H                                                         684.\n         LR    R0,@SUBT           SAVE ADDR OF START OF SUBTABLE          685.\n         LR    R15,R2             SAVE # SUBTABLE ENTRIES                 686.\n         L     @CH,WAVALAD        POINT TO FIRST VALUE                    687.\n         LA    LENGTH,1(LENGTH)   CORRECT LENGTH                          688.\nSPECLOOP DS    0H                                                         689.\n         CLC   CH,VALUSTRG        COMPARE CHAR WITH VALUE STRING          690.\n         BE    SPECPOOL           FOUND                                   691.\n         LA    @SUBT,VALUSTRG+1   NEXT ENTRY                              692.\n         BCT   R2,SPECLOOP        REPEAT WITH NEW ENTRY                   693.\n         B     FAILVALU           NO MORE ENTRIES LEFT                    694.\nSPECPOOL DS    0H                                                         695.\n         OC    S99TUPAR(1),VALUPARM+1                                     696.\n         LA    @CH,CH+1           NEXT CHAR IN USER SUPPLIED VALUE        697.\n         LR    @SUBT,R0           RESTORE SUBTABLE ADDR                   698.\n         LR    R2,R15             RESTORE SUBTABLE ENTRY COUNT            699.\n         BCT   LENGTH,SPECLOOP                                            700.\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH                      701.\n         B     TEXTNUM            FINISHED                                702.\n*                                                                         703.\n**   SUPPLY THE PARAMETER VALUE FOR THE TEXT UNIT FROM THE KEYWRD TABLE   704.\n*                                                                         705.\nSPECPARM DS    0H                                                         706.\n         CLI   KYWDPARM,KYNOPARM  IS THERE A SPECIAL PARM?                707.\n         BE    TEXTFINI                                                   708.\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN LENGTH                      709.\n         MVC   S99TUPAR(1),KYWDPARM MOVE IN SPECIAL PARM                  710.\n         B     TEXTNUM                                                    711.\n*                                                                         712.\n**   THE USER SUPPLIED VALUE IS TO BE CONVERTED TO BINARY AND RIGHT       713.\n**   JUSTIFIED IN A FIELD WHOSE LENGTH IS SUPPLIED IN THE KEYWORD TABLE   714.\n*                                                                         715.\nCONVALUE DS    0H                                                         716.\n         LA    R2,WADWORD-1+L'WADWORD POINT 1 BYTE BEFOR END OF WADWORD   717.\n         SR    R2,LENGTH          POINT TO CORRECT ADDR FOR MVC           718.\n         XC    WADWORD,WADWORD                                            719.\n         EX    LENGTH,CONVMVC     MOVE VALUE                              720.\n         PACK  WADWORD,WADWORD    CONVERT TO PACKED DECIMAL               721.\n         CVB   R3,WADWORD         CONVERT TO BINARY                       722.\n         MVC   S99TULNG+1(1),KYWDPMLN MOVE IN KYWDPARM                    723.\n         XR    R2,R2                                                      724.\n         IC    R2,S99TULNG+1      GET SPECIAL PARM                        725.\n         IC    R2,CONVMASK(R2)    SET BYTE 2 FOR STCM INST                726.\n         EX    R2,CONVSTCM        STCM R3,MASK(2),S99TUPAR                727.\n         B     TEXTNUM                                                    728.\nCONVMVC  MVC   0(0,R2),0(R3)                                              729.\nCONVSTCM STCM  0,0,S99TUPAR                                               730.\nCONVMASK DC    X'303133373F'                                              731.\n*                                                                         732.\n**   SET THE NUMBER FIELD IN THE TEXTUNIT                                 733.\n*                                                                         734.\nTEXTNUM  DS    0H                                                         735.\n         LH    R2,S99TUNUM        NUMBER OF KEYS IN THIS TEXT UNIT        736.\n         LA    R2,1(R2)           + ONE                                   737.\n         STH   R2,S99TUNUM        SAVE IT                                 738.\n         CLI   CH,C','            IS THERE ANOTHER PARAMETER?             739.\n         BNE   TEXTFINI           NO                                      740.\n         L     R4,WALASTTU        ADDRESF OF LENGTH FIELD FOR LAST TU     741.\n         AH    R4,0(R4)           ADD LENGTH OF PARAMETER                 742.\n         LA    R4,2(R4)           + 2 FOR LENGTH FIELD                    743.\n         ST    R4,WALASTTU        = ADDRESS OF NEXT LENGTH FIELD          744.\n         B     VALUNEXT           PROCESS NEXT VALUE                      745.\n*                                                                         746.\n**   COMLETE THE TEXT UNIT.                                               747.\n**   CHECK FOR WAORK AREA OVERFLOW.                                       748.\n**   ADD A NEW POINTER THE THE TEXTPOINTERS                               749.\n*                                                                         750.\nTEXTFINI DS    0H                                                         751.\n         L     R2,WALASTTU        ADDRESS OF LENGTH FIELD                 752.\n         AH    R2,0(2)            + LENGTH OF PARM                        753.\n         LA    R2,2(2)            + TWO FOR LENGTH FIELD                  754.\n         S     @TP,=F'4'          POINT TO NEW TEXT POINTER               755.\n         CR    R2,@TP             CHECK FOR OVERFLOW                      756.\n         BH    FAILOVFL           WORKAREA OVERFLOW                       757.\n         ST    @TU,S99TUPTR       SAVE ADDR OF TU                         758.\n         LR    @TU,R2             POINT TO NEW TEXT UNIT                  759.\n         B     STRINGLP                                                   760.\nSTRINGPL DS    0H                 END OF STRING LOOP                      761.\n         CLI   0(R1),X'80'        LAST PARM?                              762.\n         BE    PARMPOOL           YES                                     763.\n         LA    R1,4(R1)           POINT TO NEXT PARM                      764.\n         B     PARMLOOP                                                   765.\nPARMPOOL DS    0H                                                         766.\n         EJECT                                                            767.\n         ST    @TP,S99TXTPP       SET TEXT POINTER FIELD IN RB            768.\n         L     @TP,WABOTTOM       GET END OF WORKAREA                     769.\n         S     @TP,=F'4'          POINT TO LAST PARM                      770.\n         MVI   S99TUPTR,S99TUPLN  SET LAST TP FLAG                        771.\n         LA    R1,WAS99RB         GET ADDR OF REQUEST BLOCK               772.\n         OI    0(R1),S99RBPND     TURN ON FIRST BIT OF S99RBP             773.\nSVC99    DYNALLOC                 CALL DYNAMIC ALLOCATION RTN             774.\n         LTR   R15,R15                                                    775.\n         BNE   DAIRFAIL                                                   776.\n         CLI   S99VERB,S99VRBIN   VERB = INFO?                            777.\n         BE    INFODECO           YES, DECODE IT                          778.\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?                          779.\n         BE    INFODECO                                                   780.\n         B     RETURN                                                     781.\nDAIRFAIL DS    0H                                                         782.\n         L     @DF,WADFDSCT       ADDRESS OF DFDSECT                      783.\n         ST    @RB,DFS99RBP       ADDRESS OF SVC99 REQUEST BLOCK          784.\n         ST    R15,WAS99RC        SVC 99 RETURN CODE                      785.\n         LA    R2,WAS99RC         GET ADDR OF IT                          786.\n         ST    R2,DFRCP                                                   787.\n         LA    R2,WADFID          ADDR OF DIFD                            788.\n         ST    R2,DFIDP                                                   789.\n         MVI   WADFID,DFWTP       SPECIFY WRITE TO PROGRAMMER             790.\n         MVI   WADFID+1,DFSVC99   FROM SVC 99                             791.\n         LA    R2,WAZEROES                                                792.\n         ST    R2,DFJEFF02        ADDR OF ADDR OF IKJEFF02 (NOT KNOWN)    793.\n         LR    R1,@DF                                                     794.\n         LINK  EP=IKJEFF18        CALL DAIRFAIL                           795.\n         L     R15,WAS99RC        RESTORE RETURN CODE                     796.\n         B     RETURN                                                     797.\n         EJECT                                                            798.\n*                                                                         799.\n**   INITIALIZATION CODE                                                  800.\n*                                                                         801.\nINITCODE DS    0H                                                         802.\n         LR    R2,R1                                                      803.\n         GETMAIN R,LV=2048        GETMAIN AREA                            804.\n         L     R3,0(R2)           ADDRESS OF PARM ONE                     805.\n         ST    R1,0(R3)           SAVE ADDRESS                            806.\n         MVI   0(R3),X'0F'        INDICATE GETMAINED AREA                 807.\n         L     R3,0(R3)           POINT TO AREA                           808.\n         LA    R4,2048            LENGTH                                  809.\n         ST    R4,0(R3)           SET LENGTH                              810.\n         XR    R15,R15            SET RC                                  811.\n         XC    4(4,R3),4(R3)      ZERO WAS99RC                            812.\n         LM    R14,R12,12(R13)    RESTORE REGS                            813.\n         XR    R15,R15            SET RETURN CODE                         814.\n         XR    R0,R0                                                      815.\n         BR    R14                RETURN                                  816.\nENDCODE  DS    0H                                                         817.\n         LR    R2,R1              SAVE REG 1                              818.\n         L     R3,0(R1)           ADDRESS OF PARM 1                       819.\n         L     R3,0(R3)           ADDRESS TO BE FREED                     820.\n         L     R4,0(R3)           LENGTH TO BE FREED                      821.\n         FREEMAIN R,A=(3),LV=(4)                                          822.\n         LM    R14,R12,12(R13)    RESTORE REGS                            823.\n         XR    R15,R15            SET RETURN CODE                         824.\n         XR    R0,R0                                                      825.\n         BR    R14                RETURN                                  826.\n         EJECT                                                            827.\n*                                                                         828.\n**   DECODE INFO RETURNED BY SVC99                                        829.\n*                                                                         830.\nINFODECO DS    0H                                                         831.\n         L     R1,4(R13)                                                  832.\n         L     R1,24(R1)          RECOVER R1                              833.\n         L     R1,8(R1)           POINT TO THIRD PARM                     834.\n         L     @TU,S99TUPTR       POINT TO FIRST TEXT UNIT                835.\n         CLI   WAALLOCR,WATRUE    VERB = ALLOCR?                          836.\n         BE    INFO1                                                      837.\n         LA    R0,DILEN1(@TU)     POINT TO END OF DICB                    838.\n         LA    R4,DICBS1          ADDRESS OF DICB MODEL                   839.\n         B     INFO2                                                      840.\nINFO1    DS    0H                                                         841.\n         LA    R0,DILEN2(@TU)     POINT TO END OF DICB                    842.\n         LA    R4,DICBS2          ADDRESS OF DICB MODEL                   843.\nINFO2    DS    0H                                                         844.\nINFOLOOP DS    0H                                                         845.\n         LH    R3,S99TULNG        GET LENGTH                              846.\n         BCTR  R3,0               LESS ONE FOR EXECUTE                    847.\n         LTR   R3,R3                                                      848.\n         BL    INFOLEN                                                    849.\n         EX    R3,INFOMVC                                                 850.\nINFOLEN  LH    R3,S99TULNG-S99TUNIT(,R4) GET MAX PARM LENGTH              851.\n         AR    R1,R3              POINT TO NEXT INFO PARM                 852.\n         LA    @TU,S99TUPAR(R3)   NEXT TEXT UNIT                          853.\n         LA    R4,S99TUPAR-S99TUNIT(R3,4) NEXT TEXT UNIT IN MODEL         854.\n         CR    @TU,R0             END OF INFO TU'S?                       855.\n         BNE   INFOLOOP                                                   856.\n         XR    R15,R15            SET RETURN CODE                         857.\n         B     RETURN                                                     858.\nINFOMVC  MVC   0(0,R1),S99TUPAR                                           859.\n         SPACE 3                                                          860.\nFAILVERB DS    0H                                                         861.\n         LA    R15,16                                                     862.\n         B     RETURN                                                     863.\nFAILKEY  DS    0H                                                         864.\n         LA    R15,20                                                     865.\n         B     RETURN                                                     866.\nFAILVALU DS    0H                                                         867.\n         LA    R15,28                                                     868.\n         B     RETURN                                                     869.\nFAILOVFL DS    0H                                                         870.\n         LA    R15,24                                                     871.\n         B     RETURN                                                     872.\n         EJECT                                                            873.\nRETURN   DS    0H                                                         874.\n         ST    R15,WAS99RC        RETURN CODE                             875.\n         L     R13,4(R13)         RESTORE SAVEAREA ADDR                   876.\n         ST    R15,16(R13)        SET RETURN CODE                         877.\n         L     R1,24(R13)         RESTORE R1                              878.\n         L     R1,0(R1)           ADDR OF PARM 1                          879.\n         CLI   0(R1),X'0E'        IS AREA TO BE FREED?                    880.\n         BNE   RETURN01                                                   881.\n         LR    R2,R1              SAVE R1                                 882.\n         L     R1,0(R1)           ADDR TO BE FREED                        883.\n         FREEMAIN R,LV=2048,A=(1)                                         884.\n         LR    R1,R2              RESTORE R1                              885.\n         XC    0(4,R1),0(R1)      SET PARM 1 TO ZEROES                    886.\nRETURN01 DS    0H                                                         887.\n         LM    R14,R12,12(R13)    RESTORE REGS                            888.\n         LR    R0,R15                                                     889.\n         BR    R14                RETURN                                  890.\n         EJECT                                                            891.\n         PRINT NOGEN                                                      892.\n         INDEX                                                            893.\nVERBTAB  DS    0H                                                         894.\n         VENT  ALLOC,S99VRBAL                                             895.\n         VENT  ALLOCR,S99VRBAL                                            896.\n         VENT  UNALLOC,S99VRBUN                                           897.\n         VENT  CONCAT,S99VRBCC                                            898.\n         VENT  UNCONCAT,S99VRBDC                                          899.\n         VENT  REMOVE,S99VRBRI                                            900.\n         VENT  DDALLOC,S99VRBDN                                           901.\n         VENT  INFO,S99VRBIN                                              902.\nVERBMARK DS    0X                                                         903.\nVERBTEND DC    A(VERBMARK)                                                904.\n         SPACE 1                                                          905.\nKYWDTAB  DS    0H                                                         906.\n         BEGIN A                                                          907.\n         KENT  ABE,3,DALEROPT,20                                          908.\n         KENT  ACC,3,DALEROPT,80                                          909.\n         KENT  AL,2,DALLABEL,40                                           910.\n         KENT  ALIGNMENT,3,DALFCBAV,08                                    911.\n         KENT  ALX,3,DALSPFRM,02                                          912.\n         KENT  AUL,3,DALLABEL,48                                          913.\n         BEGIN B                                                          914.\n         KENT  BLKSIZE,3,DALBLKSZ,,2                                      915.\n         KENT  BLOCK,3,DALBLKLN,,3                                        916.\n         KENT  BLP,3,DALLABEL,10                                          917.\n         KENT  BUFALN,4,DALBFALN,SUBTABLE                                 918.\n         KENT  BUFIN,4,DALBUFIN,,2                                        919.\n         KENT  BUFL,4,DALBUFL,,2                                          920.\n         KENT  BUFMAX,4,DALBUFMX,,1                                       921.\n         KENT  BUFNO,4,DALBUFNO,,1                                        922.\n         KENT  BUFOFF,5,DALBUFOF,,1                                       923.\n         KENT  BUFOUT,5,DALBUFOU,,1                                       924.\n         KENT  BUFRQ,4,DALBUFRQ,,1                                        925.\n         KENT  BUFSZ,4,DALBUFSZ,,2                                        926.\n         KENT  BUFTEK,4,DALBFTEK,SUBTABLE                                 927.\n         BEGIN C                                                          928.\n         KENT  CATLG,2,DALNDISP,02                                        929.\n         KENT  CCATLG,2,DALCDISP,02                                       930.\n         KENT  CDELETE,2,DALCDISP,04                                      931.\n         KENT  CHARSET,2,DALUVRFY                                         932.\n         KENT  CKEEP,2,DALCDISP,08                                        933.\n         KENT  CLOSE,2,DALCLOSE                                           934.\n         KENT  CODE,3,DALCODE,SUBTABLE                                    935.\n         KENT  CONTIG,3,DALSPFRM,08                                       936.\n         KENT  CONVERT,4,DALCNVRT                                         937.\n         KENT  COPIES,3,DALCOPYS,,1                                       938.\n         KENT  CUNCATLG,2,DALCDISP,01                                     939.\n         KENT  CYL,2,DALCYL                                               940.\n         BEGIN D                                                          941.\n         KENT  DCBDD,5,DALDCBDD                                           942.\n         KENT  DCBDS,5,DALDCBDS                                           943.\n         KENT  DDNAME,2,DALDDNAM                                          944.\n         KENT  DELETE,2,DALNDISP,04                                       945.\n         KENT  DIRECTORY,2,DALDIR,,3                                      946.\n         KENT  DSNAME,3,DALDSNAM                                          947.\n         KENT  DSORG,3,DALDSORG,SUBTABLE,2                                948.\n         KENT  DSSEQ,3,DALDSSEQ,,2                                        949.\n         KENT  DUMMY,2,DALDUMMY                                           950.\n         KENT  D1600,5,DALDEN,C3                                          951.\n         KENT  D6250,5,DALDEN,D3                                          952.\n         KENT  D800,4,DALDEN,83                                           953.\n         BEGIN E                                                          954.\n         KENT  EXPIRY,1,DALEXPDT                                          955.\n         BEGIN F                                                          956.\n         KENT  F,1,DALRECFM,80                                            957.\n         KENT  FA,2,DALRECFM,84                                           958.\n         KENT  FAS,3,DALRECFM,8C                                          959.\n         KENT  FB,2,DALRECFM,C0                                           960.\n         KENT  FBA,3,DALRECFM,C4                                          961.\n         KENT  FBAS,4,DALRECFM,9C                                         962.\n         KENT  FBM,3,DALRECFM,C2                                          963.\n         KENT  FBMS,4,DALRECFM,8A                                         964.\n         KENT  FBS,3,DALRECFM,98                                          965.\n         KENT  FM,2,DALRECFM,82                                           966.\n         KENT  FMS,3,DALRECFM,8A                                          967.\n         KENT  FOLDMODE,3,DALUFOLD                                        968.\n         KENT  FORMS,3,DALFCBIM                                           969.\n         KENT  FS,2,DALRECFM,88                                           970.\n         BEGIN G                                                          971.\n         BEGIN H                                                          972.\n         KENT  HOLD,1,DALSHOLD                                            973.\n         BEGIN I                                                          974.\n         KENT  INPUT,1,DALINOUT,40                                        975.\n         BEGIN J                                                          976.\n         BEGIN K                                                          977.\n         KENT  KEEP,3,DALNDISP,08                                         978.\n         KENT  KEYLEN,3,DALKYLEN,,1                                       979.\n         BEGIN L                                                          980.\n         KENT  LIMCT,2,DALLIMCT,,3                                        981.\n         KENT  LRECL,2,DALLRECL,,2                                        982.\n         KENT  LTM,2,DALLABEL,21                                          983.\n         BEGIN M                                                          984.\n         KENT  MEMBER,2,DALMEMBR                                          985.\n         KENT  MOD,3,DALSTATS,02                                          986.\n         KENT  MODE,4,DALMODE,SUBTABLE                                    987.\n         KENT  MSVGP,2,DALMSVGP                                           988.\n         KENT  MXIG,2,DALSPFRM,04                                         989.\n         BEGIN N                                                          990.\n         KENT  NCP,2,DALNCP,,1                                            991.\n         KENT  NEW,3,DALSTATS,04                                          992.\n         KENT  NEWCLASS,4,DUNOVCLS                                        993.\n         KENT  NEWHOLD,4,DUNOVSHQ                                         994.\n         KENT  NEWNOHOLD,4,DUNOVSNH                                       995.\n         KENT  NEWREMOTE,4,DUNOVSUS                                       996.\n         KENT  NL,2,DALLABEL,01                                           997.\n         KENT  NSL,3,DALLABEL,04                                          998.\n         BEGIN O                                                          999.\n         KENT  OLD,3,DALSTATS,01                                         1000.\n         KENT  OPTCD,2,DALOPTCD,SUBTABLE                                 1001.\n         KENT  OUTLIM,4,DALOUTLM,,3                                      1002.\n         KENT  OUTPUT,3,DALINOUT,80                                      1003.\n         BEGIN P                                                         1004.\n         KENT  PARALLEL,3,DALPARAL                                       1005.\n         KENT  PASSREAD,5,DALPASPR,10                                    1006.\n         KENT  PASSWORD,6,DALPASSW                                       1007.\n         KENT  PASSWRITE,6,DALPASPR,30                                   1008.\n         KENT  PERMANENT,2,DALPERMA                                      1009.\n         KENT  PERMCONCAT,5,DCCPERMC                                     1009.1\n         KENT  PRIMARY,4,DALPRIME,,3                                     1010.\n         KENT  PRIVATE,4,DALPRIVT                                        1011.\n         KENT  PRTSP,3,DALPRTSP,SUBTABLE                                 1012.\n         BEGIN Q                                                         1013.\n         KENT  QNAME,1,DALQNAME                                          1014.\n         BEGIN R                                                         1015.\n         KENT  RECFM,3,DALRECFM,SUBTABLE                                 1016.\n         KENT  RELNO,3,DINRELNO,,2                                       1017.\n         KENT  REMOTE,3,DALSUSER                                         1018.\n         KENT  REMOVE,5,DUNREMOV                                         1019.\n         KENT  RETENTION,3,DALRETPD,,2                                   1020.\n         KENT  RLSE,2,DALRLSE                                            1021.\n         KENT  ROUND,2,DALROUND                                          1022.\n         BEGIN S                                                         1023.\n         KENT  SECONDARY,3,DALSECND,,3                                   1024.\n         KENT  SHR,2,DALSTATS,08                                         1025.\n         KENT  SKP,2,DALEROPT,40                                         1026.\n         KENT  SL,2,DALLABEL,02                                          1027.\n         KENT  SUL,3,DALLABEL,08                                         1028.\n         KENT  SYSOFORM,5,DALSFMNO                                       1029.\n         KENT  SYSOPROG,5,DALSPGNM                                       1030.\n         KENT  SYSOUT,5,DALSYSOU                                         1031.\n         BEGIN T                                                         1032.\n         KENT  TERMFILE,2,DALTERM                                        1033.\n         KENT  TRK,3,DALTRK                                              1034.\n         KENT  TRTCH,3,DALTRTCH,SUBTABLE                                 1035.\n         BEGIN U                                                         1036.\n         KENT  U,1,DALRECFM,C0                                           1037.\n         KENT  UCS,2,DALUCS                                              1038.\n         KENT  UNALLOC,3,DUNUNALC                                        1039.\n         KENT  UNCATLG,3,DALNDISP,01                                     1040.\n         KENT  UNICOUNT,4,DALUNCNT,,1                                    1041.\n         KENT  UNIT,4,DALUNIT                                            1042.\n         BEGIN V                                                         1043.\n         KENT  V,1,DALRECFM,40                                           1044.\n         KENT  VA,2,DALRECFM,44                                          1045.\n         KENT  VAS,3,DALRECFM,4C                                         1046.\n         KENT  VB,2,DALRECFM,50                                          1047.\n         KENT  VBA,3,DALRECFM,64                                         1048.\n         KENT  VBAS,4,DALRECFM,5C                                        1049.\n         KENT  VBM,3,DALRECFM,62                                         1050.\n         KENT  VBMS,4,DALRECFM,5A                                        1051.\n         KENT  VBS,3,DALRECFM,58                                         1052.\n         KENT  VERIFY,2,DALFCBAV,04                                      1053.\n         KENT  VM,2,DALRECFM,42                                          1054.\n         KENT  VMS,3,DALRECFM,4A                                         1055.\n         KENT  VOLUME,3,DALVLSER                                         1056.\n         KENT  VOLCOUNT,4,DALVLCNT,,1                                    1057.\n         KENT  VOLREF,4,DALVLRDS                                         1058.\n         KENT  VOLSEQ,4,DALVLSEQ,,2                                      1059.\n         KENT  VS,2,DALRECFM,48                                          1060.\n         BEGIN W                                                         1061.\n         BEGIN X                                                         1062.\n         BEGIN Y                                                         1063.\n         BEGIN Z                                                         1064.\nKYWDMARK DS    0X                                                        1065.\nKYWDTEND DC    A(KYWDMARK)                                               1066.\n         BEGINSUB BFALN           OFFSET 00                              1067.\n         SENT  F,01                                                      1068.\n         SENT  D,02                                                      1069.\n         BEGINSUB BFTEK           OFFSET 04                              1070.\n         SENT  D,08                                                      1071.\n         SENT  E,10                                                      1072.\n         SENT  R,20                                                      1073.\n         SENT  S,40                                                      1074.\n         SENT  A,60                                                      1075.\n         BEGINSUB CODE                                                   1076.\n         SENT  T,02                                                      1077.\n         SENT  A,04                                                      1078.\n         SENT  C,08                                                      1079.\n         SENT  B,10                                                      1080.\n         SENT  F,20                                                      1081.\n         SENT  I,40                                                      1082.\n         SENT  N,80                                                      1083.\n         BEGINSUB DSORG                                                  1084.\n         SENT  TQ,0020                                                   1085.\n         SENT  TX,0040                                                   1086.\n         SENT  GS,0080                                                   1087.\n         SENT  PO,0200                                                   1088.\n         SENT  MQ,0400                                                   1089.\n         SENT  CQ,0800                                                   1090.\n         SENT  CX,1000                                                   1091.\n         SENT  DA,2000                                                   1092.\n         SENT  PS,4000                                                   1093.\n         SENT  POU,0300                                                  1094.\n         SENT  DAU,2100                                                  1095.\n         SENT  PSU,4100                                                  1096.\n         SENT  TCAM,0004                                                 1097.\n         SENT  VSAM,0008                                                 1098.\n         BEGINSUB MODE                                                   1099.\n         SENT  E,40                                                      1100.\n         SENT  C,80                                                      1101.\n         SENT  ER,50                                                     1102.\n         SENT  EO,60                                                     1103.\n         SENT  CR,90                                                     1104.\n         SENT  CO,A0                                                     1105.\n         BEGINSUB OPTCD           OFFSET 04                              1106.\n         SENT  R,01                                                      1107.\n         SENT  T,02                                                      1108.\n         SENT  Z,04                                                      1109.\n         SENT  A,08                                                      1110.\n         SENT  Q,08                                                      1111.\n         SENT  F,10                                                      1112.\n         SENT  H,10                                                      1113.\n         SENT  O,10                                                      1114.\n         SENT  C,20                                                      1115.\n         SENT  E,20                                                      1116.\n         SENT  B,40                                                      1117.\n         SENT  U,40                                                      1118.\n         SENT  W,80                                                      1119.\n         BEGINSUB PRTSP                                                  1120.\n         SENT  0,01                                                      1121.\n         SENT  1,09                                                      1122.\n         SENT  2,11                                                      1123.\n         SENT  3,19                                                      1124.\n         BEGINSUB RECFM                                                  1125.\n         SENT  M,02                                                      1126.\n         SENT  R,02                                                      1127.\n         SENT  A,04                                                      1128.\n         SENT  G,04                                                      1129.\n         SENT  S,08                                                      1130.\n         SENT  B,10                                                      1131.\n         SENT  D,20                                                      1132.\n         SENT  T,20                                                      1133.\n         SENT  V,40                                                      1134.\n         SENT  F,80                                                      1135.\n         SENT  U,C0                                                      1136.\n         BEGINSUB TRTCH                                                  1137.\n         SENT  C,13                                                      1138.\n         SENT  E,23                                                      1139.\n         SENT  T,3B                                                      1140.\n         SENT  ET,2B                                                     1141.\n         ENDSUB                                                          1142.\nVALUINDX SUBINDEX                                                        1143.\nDICBS1   DICBTAB1                                                        1144.\nDICBS2   DICBTAB2                                                        1145.\nR0       EQU   0                                                         1146.\nR1       EQU   1                                                         1147.\nR2       EQU   2                                                         1148.\nR3       EQU   3                                                         1149.\nR4       EQU   4                                                         1150.\nR5       EQU   5                                                         1151.\nR6       EQU   6                                                         1152.\nR7       EQU   7                                                         1153.\nR8       EQU   8                                                         1154.\nR9       EQU   9                                                         1155.\nR10      EQU   10                                                        1156.\nR11      EQU   11                                                        1157.\nR12      EQU   12                                                        1158.\nR13      EQU   13                                                        1159.\nR14      EQU   14                                                        1160.\nR15      EQU   15                                                        1161.\n         END                                                             1162.\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ERASER": {"ttr": 2054, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "*          DATA SET DBER1000   AT LEVEL 001 AS OF 04/06/81\nERASER   CSECT                                                          00001\n         STM     14,12,12(13)                                           00002\n         BALR    12,0                                                   00003\n         USING   *,12                                                   00004\n         ST      13,SAVE+4                                              00005\n         LA      13,SAVE                                                00006\n         LR      3,1                                                    00007\n         L       3,0(3)                                                 00008\n         LH      4,0(3)                                                 00009\n         OPEN    (DD0001,OUTPUT)                                        00010\n         CH      4,=H'0'                                                00011\n         BE      CLOSEIT                                                00012\n         SH      4,=H'1'                                                00013\n         STC     4,MOVE+1                                               00014\nMOVE     MVC     CARD(0),2(3)                                           00015\n         PUT     DD0001,CARD                                            00016\nCLOSEIT  CLOSE   (DD0001)                                               00017\n         L       13,SAVE+4                                              00018\n         LM      14,12,12(13)                                           00019\n         XR      15,15                                                  00020\n         BR      14                                                     00021\nSAVE     DS      9D                                                     00022\nCARD     DC      CL100' '                                               00023\nDD0001   DCB     DDNAME=DD0001,DSORG=PS,MACRF=(PM)                      00024\n         END     ERASER                                                 00025\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "FLATLIB": {"ttr": 2056, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00\\x00\\x00\\x96\\x07_\\x01\\x00\\x02\\x0f\\x10\\x15\\x00Q\\x00U\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1996-03-15T00:00:00", "modifydate": "2000-01-20T10:15:00", "lines": 81, "newlines": 85, "modlines": 0, "user": "TS00DZL"}, "text": "FLATLIB  CSECT                                                          00010\n         REGS\n         SAVE  (14,12)                                                  00011\n         LR    R12,R15\n         USING FLATLIB,R12\n         ST    R13,SAVE+4\n         LA    R13,SAVE\n         OPEN (DIRECT,(INPUT))                                          00012\n         OPEN (PDS,(INPUT))                                             00013\n         LA   R9,PDS           POINT TO DCB                             00015\n         USING IHADCB,R9       GET ADDRESSABILITY                       00016\n         OPEN (PRINT,(OUTPUT))                                          00017\nDIRLOOP  EQU   *                                                        00038\n         GET   DIRECT,LIBLINE                                           00039\n         SR    R7,R7                                                    00040\n         LA    R7,LIBLINE                                               00041\n         AH    R7,LIBLINE                                               00042\n         LA    R4,LIBLINE+2                                             00043\nDIRSCAN  EQU   *                                                        00044\n         CLC   0(8,R4),=8X'FF'                                          00045\n         BE    EOFPROC                                                  00046\n         CR    R4,R7                                                    00047\n         BNL   DIRLOOP                                                  00048\nSRCHMEM  EQU   *                                                        00049\n         MVC  MEMBER,0(R4)                                              00050\n         FIND PDS,MEMBER,D     POINT TO MEMBER                          00051\nREADLOOP EQU   *                                                        00052\n         XC    DECB,DECB                                                00053\n         READ  DECB,SF,PDS,PDSBLOCK       READ BLOCK FROM MEMBER        00054\n         CHECK DECB                                                     00055\n         SR   R8,R8            CLEAR REG 8                              00056\n         LH   R8,DCBBLKSI      GET DCB BLOCK SIZE                       00057\n         L     R3,DECB+16                GET IOB ADDR                   00058\n         SH    R8,14(R3)                  R8 NOW ACTUAL BLOCKSIZE       00059\n         SR    R3,R3                      CLEAR REG 7                   00060\n         LA    R3,PDSBLOCK                                              00061\n         LA    R6,PDSBLOCK                                              00062\n         AR    R3,R8                      POINT TO END OF BLOCK         00063\nBLKLOOP  EQU   *                                                        00064\n         CR    R6,R3                      LAST RECORD IN BLOCK          00065\n         BE    READLOOP                   GET NEXT BLOCK                00066\n         MVC   MEMLINE,0(R6)              MOVE THIS RECORD              00067\n         LA    R5,MEMLINE                                               00068\nYES      EQU   *                                                        00079\n         MVC   OUTLINE,SPACES                                           00080\n         MVC   OUTLINE(8),MEMBER                                        00081\n         MVC   OUTLINE+8(80),MEMLINE                                    00082\n         PUT   PRINT,OUTLINE                PRINT THIS RECORD           00083\nNEXTREC  LA    R6,80(R6)                  POINT TO NEXT RECORD          00084\n         B     BLKLOOP                                                  00085\nEOFMEM   EQU   *                                                        00086\n         SR    R5,R5                                                    00087\n         IC    R5,11(R4)                                                00088\n         SLL   R5,1                                                     00089\n         LA    R5,12(R5)                                                00090\n         AR    R4,R5                                                    00091\n         B     DIRSCAN                                                  00092\nEOFPROC  EQU   *                                                        00093\n         CLOSE PDS                                                      00094\n         CLOSE PRINT                                                    00096\n         CLOSE DIRECT                                                   00097\n         L     R13,SAVE+4                                               00098\n         RETURN (14,12),RC=0\nSAVE     DS  9D\nMEMBER   DC  CL8'MEMBERXX'                                              00099\nMEMLINE  DS  CL80                                                       00100\nOUTLINE  DS  CL88                                                       00101\nPRINT DCB DDNAME=SYSPRINT,LRECL=88,BLKSIZE=0,RECFM=FB,MACRF=(PM),      C00104\n               DSORG=PS                                                 00105\nPDS     DCB DDNAME=LIBRARY,EODAD=EOFMEM,LRECL=080,MACRF=(R),DSORG=PO    00106\nDIRECT DCB DDNAME=LIBRARY,BLKSIZE=256,MACRF=(GM),DSORG=PS,             C00107\n               EODAD=EOFPROC,RECFM=U                                    00108\nLIBLINE DS CL256                                                        00109\nSPACES  DS CL132' '                                                     00110\nSEARCH  DS CL80                                                         00111\nCOUNT   DC PL5'0'                                                       00112\nLENGTH  DS F                                                            00113\n        LTORG                                                           00114\nPDSBLOCK DS  CL32760                                                    00115\n        DCBD    DSORG=(PO),DEVD=(DA)                                    00116\n        END                                                             00117\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "HLASM": {"ttr": 2059, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\t\\x00\\x00\\x01\\x00\\x01\\x9f\\x01\\x00\\x02\\x1f\\x14E\\x00\\x13\\x00\\x13\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.09", "flags": 0, "createdate": "2000-01-19T00:00:00", "modifydate": "2000-01-21T14:45:00", "lines": 19, "newlines": 19, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXXH JOB (TYYYYY,XXXX),'D.LEES.X4392',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(30),\n//      REGION=17M\n//*====================================================*//\n//* ALL ASSEMBLED AND RUN ON OS/390 2.5 SYSTEM         *//\n//*====================================================*//\n//ASM    EXEC   ASMACL,PARM.ASM='XREF(SHORT)',\n//       PARM.LKED='LET,LIST,XREF,AMODE=24,RMODE=24,AC=0',\n//       COND.LKED=(5,LT)\n//*STEPLIB DD  DSN=SYS1.ASMA.V1R2M0.SASMMOD1,DISP=SHR\n//SYSLIB DD    BLKSIZE=32760                        SYS1.MACLIB\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//       DD    DSN=SYS1.AMODGEN,DISP=SHR,UNIT=SYSDA,VOL=SER=(DLB001)\n//       DD    DSN=SYS1.AMACLIB,DISP=SHR,UNIT=SYSDA,VOL=SER=(DLB001)\n//       DD    DSN=TST.DZL.XMIT,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*  (A,,XXX)\n//SYSIN  DD    DISP=SHR,DSN=TST.DZL.XMIT(MEMLIST)\n//LKED.SYSLMOD  DD DISP=SHR,DSN=TST.DZL.XMIT.LOAD(MEMLIST)\n//LKED.SYSLIB   DD DISP=SHR,DSN=TST.DZL.XMIT.LOAD\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "JC": {"ttr": 2061, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x02\\x1f\\x01\\x00\\x02\\x1f\\x16@\\x00\\x02\\x00\\x02\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-21T00:00:00", "modifydate": "2000-01-21T16:40:00", "lines": 2, "newlines": 2, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "LNKLST00": {"ttr": 2063, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01P\\x00\\x00\\x00\\x98\\x17o\\x01\\x00\\x02\\x1f\\x14I\\x00a\\x00X\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.80", "flags": 0, "createdate": "1998-06-25T00:00:00", "modifydate": "2000-01-21T14:49:00", "lines": 97, "newlines": 88, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXXL JOB (TYYYYY,XXXX),'D.LEES.X411',CLASS=R,\n//**    RESTART=MLIST,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(30)\n//*====================================================*//\n//* USE SAS TO GET DSNAMES OUT OF SYS1.PARMLIB(PROG00) *//\n//*====================================================*//\n//PROG00   EXEC SAS609,OPTIONS='SETINIT,MACRO,DQUOTE'\n//FT11F001 DD   SYSOUT=* ,OUTLIM=10000   LOG\n//FT12F001 DD   SYSOUT=* ,OUTLIM=10000   DATA\n//FT13F001 DD   SYSOUT=* ,OUTLIM=10000   PUNCH\n//PARMLIB  DD   DSN=SYS1.PARMLIB(PROG00),DISP=SHR\n//PUNCH    DD   DSN=&&PROG00,DISP=(,PASS),SPACE=(TRK,5),UNIT=BOSS\n//SYSIN    DD   *\nDATA _NULL_;\nFORMAT DSNAME $44.;\nRETAIN LNKLST 0;\nFILE PUNCH;\nINFILE PARMLIB;\nINPUT @1 CARD $72.;\nIF INDEX(CARD,'LNKLST') THEN LNKLST = 1;\nIF LNKLST THEN;\nELSE DELETE;\nI = INDEX(CARD,'DSNAME');\nIF I THEN J = INDEX(CARD,')');\nIF I AND J THEN DO;\n    DSNAME = SUBSTR(CARD,I+7,J-(I+7));\n    PUT DSNAME;\n    END;\n//*=================================================================*//\n//* PARSE OUT DSNAMES FROM THE LPA LIST                             *//\n//*=================================================================*//\n//PARSE     EXEC PGM=PARSIFAL\n//STEPLIB   DD DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//*\n//*NOTE*    /* MLPA NOT INCLUDED BECAUSE IT'S MODULE SPECIFIC */\n//INFILE    DD DSN=SYS1.PARMLIB(LPALST00),DISP=SHR\n//**OLD     DD DSN=SYS1.PARMLIB(LNKLST00),DISP=SHR  NOW (PROG00)\n//          DD *  (IMPLICIT LINKLIB)\nSYS1.LINKLIB\n//          DD DSN=&&PROG00,DISP=(OLD,PASS)\n//*\n//*INFILE          DD *       /* REMOVE LINE #'S // NAME IN CC1 */\n//OUTFILE   DD DCB=(RECFM=FB,LRECL=80,BLKSIZE=800),\n//          DSN=&&DSNS,UNIT=SYSDA,SPACE=(TRK,(1,1)),DISP=(,PASS)\n//*=================================================================*//\n//* EXPAND DSNAMES TO LIST OF MEMBERS                               *//\n//*=================================================================*//\n//MLIST     EXEC  PGM=MEMLIST,   PARM='SHORT',\n//*>>>>>>   NOTE: SHORT IS FOR NON-LOAD PDS, IF MIXED TYPES USE SHORT.\n//          REGION=6000K\n//STEPLIB   DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//SYSIN     DD    DSN=&&DSNS,DISP=(OLD,PASS)\n//SYSOUT    DD    DCB=(RECFM=FB,LRECL=80,BLKSIZE=800),\n//          DSN=&&MEMLIST,UNIT=SYSDA,SPACE=(CYL,(10,10)),DISP=(,PASS)\n//SNAPDD    DD    SYSOUT=*\n//SYSUDUMP  DD    SYSOUT=*\n//*=================================================================*//\n//* USE SAS TO FORMAT THE XREF LISTING                              *//\n//*=================================================================*//\n//REPORT   EXEC SAS609\n//WORK     DD   SPACE=(CYL,(30,15))\n//FT11F001 DD   SYSOUT=*,OUTLIM=10000   LOG\n//*T12F001 DD   SYSOUT=*,OUTLIM=25000   PRINT\n//FT12F001 DD   SYSOUT=* (E,,XXX),COPIES=1     G=VERT. E=HORIZ.\n//FT13F001 DD   SYSOUT=*,OUTLIM=10000   PUNCH\n//INDD     DD   DSN=&&MEMLIST,DISP=(OLD,PASS)\n//SYSIN    DD   *\n OPTIONS DQUOTE;\nDATA  MEMLIST;\n INFILE INDD ;\n INPUT      MEMBER     $8.\n            SEQ         3.\n            DSNAME    $44.\n            ATTR       $4.\n            RMODE      $3.\n            AMODE      $3.\n            APF      PIB1.\n            SETSSI   PIB4.\n            STORAGE  PIB4.\n            ALIAS      $8.\n            FILLER     $8.       /* DIAGNOSTIC FIELD */\n            ;\nFORMAT SETSSI STORAGE HEX8. ;\nLABEL ALIAS = 'ALIAS OF'\n      RMODE = 'RMODE*'\n      AMODE = 'AMODE*';\nPROC SORT DATA=MEMLIST;\n BY MEMBER SEQ;\nPROC PRINT LABEL;\n ID MEMBER;\n VAR SEQ DSNAME ATTR RMODE AMODE APF SETSSI STORAGE ALIAS;\n TITLE1 'LINKLIST CONCATENATION REPORT II';\n TITLE2 ' ALL MEMBERS AND ALIASES SHOW';\n TITLE3 ' IN SEARCH SEQUENCE BY LIBRARY';\n TITLE4 '=================================';\n FOOTNOTE1 '* FOR RMODE AND AMODE CHECK AGAINST AMBLIST';\n//*=================================================================*//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MEMLIST": {"ttr": 2066, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x13\\x00\\x00\\x00\\x91&\\x7f\\x01\\x00\\x02\\x1f\\x14V\\x00\\xd3\\x00\\xcd\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.19", "flags": 0, "createdate": "1991-09-24T00:00:00", "modifydate": "2000-01-21T14:56:00", "lines": 211, "newlines": 205, "modlines": 0, "user": "TS00DZL"}, "text": "         PRINT NOGEN\nMEMLIST  CSECT                            D. LEES 12-82                 00010\n         REGS\nINIT     SAVE  (14,12)                                                  00011\n         BALR  R12,R0\n         USING *,R12\n         ST    R13,SAVE+4\n         LA    R0,SAVE\n         ST    R0,8(R13)\n         LR    R13,R0\n         L     R1,0(R1)\n         LA    R1,2(R1)\n         MVC   SHORT,0(R1)\n         OPEN  (SYSIN,,SYSOUT,OUTPUT)\n         CALL  DYNAM,(DYWORK,DYINIT),VL\n*****************************************\n* READ IN THE DATASET NAME              *\n*****************************************\nREADIN   EQU   *\n         GET   SYSIN,CARDIN\n         UNPK  SEQNO,SEQ\n         OI    SEQNO+2,X'F0'             GENERATE SEQUENCE#\n         AP    SEQ,=P'1'\n********************************************\n* ALLOCATE THE DATASET DYNAMICALLY         *\n* RE-WRITTEN TO USE DYNAM FROM CBT FILE089 *\n********************************************\nDYNALC   EQU   *                          FIRST ARG IS MEMBER\n         MVC   DYDSN+4(44),CARDIN\nDY1      EQU   *\n         CALL  DYNAM,(DYWORK,DYALLOCR,DYRETRN,DYDSN,DYDISP),VL\n         LTR   R15,R15\n         BZ    SVC99OK\n         ABEND 99,DUMP,STEP              DSN NOT AVAILABLE\n*        SVC 99 RETURN CODES\n*          00 SUCCESSFUL ALLOCATION\n*          04 ENVIRONMENT, RESOURCE, OR SYSTEM ROUTINE FAILURE\n*          08 REQUEST DENIED BY INSTALLATION VALIDATION ROUTINE\n*          12 INVALID SVC 99 PARAMETER LIST\n*        DYNAM RETURN CODES\n*          16 INVALID VERB (PARAMETER 2)\n*          20 INVALID KEYWORD (PARAMETER 3)\n*          24 WORK AREA OVERFLOW\n*          28 INVALID VALUE KEYWORD\nSVC99OK  EQU   *\n         MVC   DYDD+3(8),DYDDNAM\n*****************************************\n* PROCESS THE PDS DIRECTORY             *\n*****************************************\n         LA    R2,PDS\n         USING IHADCB,R2\n         MVC   DCBDDNAM,DYDDNAM\nOPENS    OPEN  (PDS,(INPUT))                                            00013\nDIRLOOP  EQU   *                                                        00038\n         GET   PDS,DIRBLOCK                                             00039\n         LA    R7,DIRBLOCK                                              00041\n         AH    R7,DIRBLOCK                COUNT OF BYTES ON BLOCK       00042\n         LA    R4,DIRBLOCK+2                                            00043\nDIRSCAN  EQU   *                                                        00044\n         CR    R4,R7                                                    00047\n         BNL   DIRLOOP                    NEXT BLOCK PLEASE             00048\n         CLC   0(8,R4),FFFFFFFF                                         00045\n         BE    EOFPROC                                                  00046\n         MVC   MEMBER,0(R4)\n         CLC   SHORT,=C'SHORT'\n         BE    KISS\n         BAL   R11,ATTRIB\nKISS     EQU   *\n         PUT   SYSOUT,TABLE\nNEXTMEM  XR    R5,R5                                                    00087\n         NI    11(R4),X'1F'           3 HIGH ORDER BITS TO 000\n         IC    R5,11(R4)                                                00088\n         SLL   R5,1                   H'S X 2                           00089\n         LA    R5,12(R5)              R5 = ((H'S*2)+12)                 00090\n         AR    R4,R5                                                    00091\n         B     DIRSCAN                                                  00092\nEOFPROC  EQU   *                                                        00093\n         CLOSE (PDS)                                                    00094\n         CALL  DYNAM,(DYWORK,DYUNALLC,DYDD),VL\n         B     READIN\nGOBACK   EQU   *                                                        00098\n         CLOSE (SYSIN,,SYSOUT)\n         CALL  DYNAM,(DYWORK,DYEND),VL\n         L     R13,SAVE+4                                               00098\n         RETURN (14,12),RC=0\n***************************************\n*  PROCESS THE MODULE ATTRIBUTES\n***************************************\nATTRIB   EQU *\nCLEAR    MVC    ATTR,BLANKS\n         MVC    TRUENM,BLANKS\n         XC     SSI,SSI\n         XC     STOR,STOR\n         MVI    APFLG,X'00'\n         USING  PDS2,R4\n         MVC    WORK1,PDS2FTB2\n*        CALL   BITMAP,(WORK1,ONE,FILLER)\nREUS     TM     PDS2ATR1,PDS2REUS\n         BNO    RENT\n         MVC    ATTR,=C'REUS'\nRENT     TM     PDS2ATR1,PDS2RENT\n         BZ     STORAGE\n         MVC    ATTR,=C'RENT'\nSTORAGE  XR     R0,R0\n         ICM    R0,14,PDS2STOR\n         SRL    R0,8\n         ST     R0,WORK4\n         MVC    STOR,WORK4\nRMOD     MVC    RMODE,=C' 24'\n         TM     PDS2FTB2,PDSLRMOD\n         BZ     AMODS\n         MVC    RMODE,=C' 31'\nAMODS    MVC    AMODE,=C' 24'\n         TM     PDS2INDC,PDS2ALIS\n         BO     ALIAS\nMAIN     TM     PDS2FTB2,PDSMAMOD\n         BZ     ATTREXT\n         MVC    AMODE,=C' 31'\n         TM     PDS2FTB2,BIT7\n         BZ     ATTREXT\n         MVC    AMODE,=C'ANY'\n         B      ATTREXT\nALIAS    TM     PDS2FTB2,PDSAAMOD\n         BZ     ATTREXT\n         MVC    AMODE,=C' 31'\n         TM     PDS2FTB2,BIT5\n         BZ     ATTREXT\n         MVC    AMODE,=C'ANY'\nATTREXT  LR     R5,R4\n         LA     R5,33(R5)\nSCATR    TM     PDS2ATR,PDS2SCTR\n         BZ     ALIASNM\n         LA     R5,PDSS01LN(R5)\nALIASNM  TM     PDS2INDC,PDS2ALIS\n         BZ     SETSSI\n         MVC    TRUENM,PDS2MNM-PDSS02(R5)\n         LA     R5,PDSS02LN(R5)\nSETSSI   TM     PDS2FTB1,PDS2SSI\n         BZ     APF\n         ST     R5,WORK4\n         TM     WORK4+3,1\n         BZ     ALIGNED\n         LA     R5,1(R5)\nALIGNED  MVC    SSI,PDSSSIWD-PDSS03(R5)\n         LA     R5,PDSS03LN(R5)\nAPF      TM     PDS2FTB1,PDSAPFLG\n         BZ     ENDATTR\n         MVC    APFLG,PDSAPFAC-PDSS04(R5)\nENDATTR  EQU    *\n         BR     R11\n         DROP   R4\n***************************************\n         EJECT\n***************************************\nSAVE     DC  9D'0'\nFFFFFFFF DC  8X'FF'\nWORK4    DS  F\nDIRBLOCK DS  CL256                       KEEP ON 0H                     00101\nCARDIN   DS  CL80                                                       00101\nSEQ      DC  PL2'1'\nTRTAB1   DC  256B'00'\n         ORG TRTAB1+X'40'\n         DC  C' '\n         ORG\nBLANKS   DC  CL16' '\nZERO     DC  F'0'\nONE      DC  F'1'\nWORK1    DS  C\nSHORT    DC  CL5' '\n*\nTABLE    DS  0CL90\nMEMBER   DS  CL8\nSEQNO    DS  ZL3\nDSNAME   DS  CL44\nATTR     DC  CL4' '\nRMODE    DC  CL3' '\nAMODE    DC  CL3' '\nAPFLG    DC  XL1'00'\nSSI      DC  XL4'00'\nSTOR     DC  XL4'00'\nTRUENM   DC  CL8' '\nFILLER   DC  CL8' '\n*\nDYRETRN  DS  0CL74\nDYDDNAM  DS  CL8\nDYDSNAME DS  CL44\nDYDSORG  DS  CL16\nDYVOLSER DS  CL6\n*\nDYWORK   DC  F'0'\nDYINIT   DC  C'INIT '\nDYEND    DC  C'END '\nDYALLOCR DC  C'ALLOCR '\nDYUNALLC DC  C'UNALLOC '\nDYDISP   DC  C'SHR;'\nDYDSN    DC  CL4'DSN=',CL44' ',C';'\nDYVOL    DC  CL4'VOL=',CL6' ',C';'\nDYDD     DC  CL3'DD=',CL8' ',C';'\n*\n         EJECT\nPDS      DCB DDNAME=PDS,BLKSIZE=256,MACRF=(GM),DSORG=PS,               C00107\n               EODAD=EOFPROC,RECFM=U                                    00108\nSYSOUT   DCB DDNAME=SYSOUT,BLKSIZE=9000,MACRF=(PM),DSORG=PS,           C00107\n               LRECL=90\nSYSIN    DCB DDNAME=SYSIN,MACRF=(GM),DSORG=PS,                         C00107\n               EODAD=GOBACK\n        DCBD  DSORG=PS                                                  00114\n        EJECT\n        PRINT NOGEN\n        IHAPDS PDSBLDL=NO\n        END                                                             00117\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "MIGRATOR": {"ttr": 2309, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x03/\\x01\\x00\\x03/\\x16D\\x01\\xdd\\x01\\xdd\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-01T00:00:00", "modifydate": "2000-02-01T16:44:00", "lines": 477, "newlines": 477, "modlines": 0, "user": "TS00DZL"}, "text": "          PRINT ON,NOGEN\n*********************************************************************   ********\n*****                                                              **   ********\n***** NUMIGRAT:                                                    **   ********\n***** GENERATES AND ISSUES HSM COMMANDS FOR DATASET NAMES INPUT.   **   ********\n*****                                                              **   ********\n***** CARDIN IS A LIST OF DATASET NAMES IN CARD IMAGE FORMAT       **   ********\n***** PUTLINE LISTS ALL HSM COMMANDS EXECUTED AND THE MVS MESSAGES **   ********\n***** ASSEMBLE WITH DEBUG SWITCH ON FOR SNAPSHOT TRACING . . .     **   ********\n*********************************************************************   ********\n***** D.LEES 01/00 FROM A SIMILAR PROGRAM BY S.MAGNANO             **   ********\n*********************************************************************   ********\nNUMIGRAT CSECT                                                          ********\nNUMIGRAT AMODE 31                                                       ********\nNUMIGRAT RMODE 24                                                       ********\n*                                                                       ********\n         B     24(R15)       BRANCH AROUND (V.R)                        ********\n*                                                                       ********\n         DC    CL20'NU NUMIGRAT V1.R1'                                  ********\n*                                                                       ********\n*********************************************************************   ********\n*  ESTABLISH ADDRESSING MODE AND BASE REGISTERS                         ********\n*  ENSURE ADDRESSABILITY FOR THIS PGM EVEN IN AR MODE                   ********\n*********************************************************************   ********\n         SAVE  (14,12)                 BACK TO THE TRADITIONAL . .\n         SAC   512                     SET AR ADDRESSING MODE.          ********\n         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS         ********\n         LAE   R12,0                   SET BASE REG AR. = 0             ********\n         BASR  R12,0                   SET BASE REG GPR.                ********\n         USING *,R12                                                    ********\n         ST    R13,SAVE+4              HSA\n         LA    R2,SAVE                 SAVE CHAIN VITAL FOR GET/PUT\n         ST    R2,8(,R13)              LSA\n         LAE   R13,SAVE                SAVEAREA FOR CALLED PROGRAMS\n         SAC   0                       SET PRIMARY ADDRESSING MODE.     ********\n         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS         ********\n*********************************************************************** ********\n* NOTE: ASSUME SAC 0 UNLESS SPECIFICALLY SET OTHERWISE                  ********\n* NOTE: ASSUME AMODE 31 UNLESS SPECIFICALLY SET OTHERWISE               ********\n* NOTE: 512 SETS AR MODE FOR ACCESSING NON-PRIMARY ADDRSP. DATA         ********\n*********************************************************************** ********\n         EJECT\nBEGIN    EQU   *                                                        ********\n         MVC   WTOT(50),NUMIGR01\n         BAL   R10,WTOP\n         B     STARTIT                 GO START PROCESSING.             ********\n*                                                                       ********\n*********************************************************************** ********\n*******************  NUMIGRAT MAINLINE ******************************** ********\n*********************************************************************** ********\nSTARTIT  EQU   *                                                        ********\n         BAL   R10,SNAPINIT\n*\n         BAL   R10,MCSOPA              GO ACTIVATE CONSOLE.             ********\nPROCESS  EQU   *                                                        ********\n         BAL   R10,GETDSN              GET INPUT DSNAME\n         CLI   EOF,X'80'\n         BE    ENDIT\n*\n         BAL   R10,MGCREE              GO ISSUE \"D A\" COMMAND           ********\n*                                                                       ********\n         BAL   R10,MCSWAIT             GO WAIT FOR THE CMD RESPONSE.    ********\n*                                                                       ********\n         BAL   R10,MCSGET              GO GET THE COMMAND RESPONSE.     ********\n*                                                                       ********\n         BAL   R10,PRNTLOG             GO STACK RESPONSE MESSAGE.       ********\n*                                                                       ********\n         B     PROCESS                                                  ********\n*                                                                       ********\nENDIT    EQU   *                       END - OF - INPUT                 ********\n*                                                                       ********\n         BAL   R10,MCSOPD              GO DEACTIVATE CONSOLE.           ********\n*\n         MVC   WTOT(50),NUMIGR03\n         BAL   R10,WTOP\n*                                                                       ********\n         CP    FAILURES,=P'1'\n         BL    RC0\nRC8      L     R13,SAVE+4\n         RETURN (14,12),RC=8\nRC0      L     R13,SAVE+4\n         RETURN (14,12),RC=0\n*********************************************************************** ********\n*                                                                       ********\n*  END OF MAINLINE                                                      ********\n*                                                                       ********\n*********************************************************************** ********\n        EJECT                                                           ********\n*********************************************************************** ********\n*****************************  GETDSN    ****************************** ********\n*********************************************************************** ********\nGETDSN   EQU   *                                                        ********\n*\n         ST    R10,SAVE10                       ENTERED IN 31 BIT MODE\n         LA    R15,GET224                      RESET AMODE TO 24\n         N     R15,=X'7FFFFFFF'                 SET 24\n         BSM   0,R15                           RMODE(24) !!\nGET224   EQU   *\n         CLI   OPENSW,X'80'\n         BE    GOGET\n         MVI   OPENSW,X'80'\n         OPEN  (CARDIN,INPUT)\n         OPEN  (PUTLINE,OUTPUT),MODE=31\nGOGET    GET   CARDIN,CARD\n         MVC   SAVEDSN(44),CARD\n         TRT   SAVEDSN(44),TRTABL               FIND FIRST BLANK\n         MVI   0(R1),C')'                       REPLACE W/R.PAREN\n*\n         L     R10,SAVE10\n         BSM   0,R10                            SET MODE AND RETURN\n*\nENDFILE  EQU   *\n         ED    SUMMARY3(16),COMMANDS\n         ED    SUMMARY5(16),FAILURES\n         PUT   PUTLINE,SUMMARY#\n         CLOSE (CARDIN,,PUTLINE)\n         MVI   EOF,X'80'\n         L     R10,SAVE10\n         BSM   0,R10                            SET MODE AND RETURN\n*********************************************************************** ********\n***************************** (END GETDSN) **************************** ********\n*********************************************************************** ********\n         EJECT                                                          ********\n*********************************************************************** ********\n************************  COMMON \"WTO\" ROUTINE  *********************** ********\n***********************  (50 BYTE MESSAGE AREA)  ********************** ********\n*********************************************************************** ********\n**                                                                      ********\nWTOP     EQU   *                                                        ********\n         ST    R10,SAVE10              SAVE WTO RETURN ADDRESS.         ********\n*\nWTO      WTO   'XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX',   +********\n               TOKEN=WTOK,DESC=(11)     TEXT MODIFIED PRIOR TO WTO.     ********\n         MVC   WTOT(50),=CL50' '       CLEAR TEXT AREA.                 ********\n*\n         L     R10,SAVE10              LOAD WTO RETURN ADDRESS.         ********\n         BR    R10                                                      ********\n*                                                                       ********\nWTOT     EQU   WTO+8 ====> WTO TEXT MODIFY AREA                         ********\n*                                                                       ********\nWTOD     EQU   WTO+78 ===> WTO DESC MODIFY AREA ((DATA LENGTH) + (28))) ********\n*                                                                       ********\n*                                                                       ********\n*    ROUTING AND DESCRIPTOR CODES (REFERENCE)                           ********\n*                                                                       ********\n*                                                                       ********\n*                 (2-BYTE CODE)    <<<<<<<<DESCRIPTION>>>>>>>>>>>>>>    ********\nWD1      DC    B'1000000000000000' HI--NO--????  = 1 (SYSTEM FAILURE)   ********\nWD2      DC    B'0100000000000000' HI--NO--????  = 2 (IMEDIATE ACTION)  ********\nWD3      DC    B'0010000000000000' HI-ROLL-????  = 3 (EVENTUAL ACTION)  ********\nWD4      DC    B'0001000000000000' HI-ROLL-????  = 4 (SYSTEM STATUS)    ********\nWD5      DC    B'0000100000000000' LO-ROLL-????  = 5 (IMD CMD RESPONSE) ********\nWD6      DC    B'0000010000000000' LO-ROLL-????  = 6 (JOB STATUS)       ********\nWD7      DC    B'0000001000000000' LO-ROLL-????  = 7 (APPL PROGRAM)     ********\nWD8      DC    B'0000000100000000' LO-ROLL-????  = 8 (OUT-OF-LINE MESG) ********\nWD9      DC    B'0000000010000000' LO-ROLL-????  = 9 (OPERATOR REQUEST) ********\nWD10     DC    B'0000000001000000' LO-ROLL-????  = 10 (DYNAMIC DISPLAY) ********\nWD11     DC    B'0000000000100000' HI--NO--RED   = 11 (CRITICAL EVENT)  ********\nWD12     DC    B'0000000000010000' NO-SHOW-BLANK = 12 (RESERVED)        ********\nWD13     DC    B'0000000000001000' NO-SHOW-BLANK = 13 (RESERVED)        ********\nWD14     DC    B'0000000000000100' NO-SHOW-BLANK = 14 (RESERVED)        ********\nWD15     DC    B'0000000000000010' NO-SHOW-BLANK = 15 (RESERVED)        ********\nWD16     DC    B'0000000000000001' NO-SHOW-BLANK = 16 (RESERVED)        ********\n*                                                                       ********\n**   OFFSETS   ===>+0         10        20        30        40          ********\n**   OFFSETS   ===>+0123456789012345678901234567890123456789012345678   ********\nNUMIGR01 DC    CL50'<NUMIGRAT> STARTED '                                ********\nNUMIGR02 DC    CL50'<NUMIGRAT> ISSUING HSM MIGRATE COMMAND'             ********\nNUMIGR03 DC    CL50'<NUMIGRAT> ENDING'                                  ********\nNUMIGR04 DC    CL50'<NUMIGRAT> IN DIAGNOSTIC MODE'                      ********\n*                                                                       ********\n*********************************************************************** ********\n****************************  END WTO  ******************************** ********\n*********************************************************************** ********\n         EJECT                                                          ********\n*********************************************************************** ********\n*********************************************************************** ********\n***  EXTRACT MESSAGES FROM THE VIRTUAL CONSOLE MDB DATA STRUCTURES **** ********\n*********************************************************************** ********\n*********************************************************************** ********\n*                                                                       ********\nPRNTLOG  EQU   *                       PRINT LOG MESSAGES ROUTINE.      ********\n         ST    R10,SAVE10              SAVE PRNTLOG RETURN ADDRESS.     ********\n*\n* R9 -> DSECT IEAVM105 FOR THE MDB AREAS; SET IN MCSGET ROUTINE (LAE)   ********\n*\n         SAC   512                     SET AR ADDRESSING MODE.          ********\n         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS         ********\n         USING MDB,R9                  DSECT FOR MDB HEADER\n         LH    R2,MDBLEN               TOTAL LENGTH OF MDB\n         LA    R9,MDBHLEN(0,R9)        +HEADER LEN. -> GENERAL OBJECT\n         SH    R2,MDBHLEN#             SUBTRACT HEADER LEN. FROM TOTAL\n         DROP  R9\n         USING MDBG,R9                 DSECT FOR MDB GENERAL OBJECT\n         LH    R3,MDBGLEN\n         LA    R9,0(R3,R9)             +GENERAL LEN. -> CONTROL OBJ.\n         SR    R2,R3                   SUBTRACT OBJECT LEN. FROM TOTAL\n         DROP  R9\n         USING MDBSCP,R9 DSECT FOR MDB CONTROL OBJECT\n         LH    R3,MDBCLEN\n         LA    R9,0(R3,R9)             +CONTROL LEN. -> TEXT OBJ.\n         SR    R2,R3 SUBTRACT OBJECT LEN. FROM TOTAL\n         DROP  R9\n         USING MDBT,R9                 DSECT FOR MDB TEXT LINE\n         LAE   R8,LOGBUFFR             LOCAL AREA FOR MESSAGE PRINT\n         MVI   LOGBUFFR,C' '           CLEAR LINE\n         MVC   LOGBUFFR+1(120),LOGBUFFR\n         MVC   HEADER2(44),SAVEDSN\nULOG     EQU   *\n         SAC   512                     SET AR ADDRESSING MODE.          ********\n         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS         ********\n         LH    R1,MDBTLEN              LENGTH OF TEXT LINE\n         BCTR  R1,0                    (-1)\n         EX    R1,TXT2BUFR\n**EX     MVC   00(00,R8),11(R9)        MOVE MDB TEXT (VAR) -> IO BUFFER ********\n         CLC   0(7,R8),GOODMSG         I.E. ARC1000I\n         BE    SUCCESS\n         AP    FAILURES,=P'1'\nSUCCESS  EQU   *\n         CLI   DEBUG,X'80'\n         BNE   NODBG1\n*(LONG DISTANCE)\n         LH    R2,MDBTLEN              TEXT LENGTH\n         BCTR  R2,0                    (-1)\n         LAE   R10,0(R2,R9)            DUMP ENTIRE MDB\n         STM   R9,R10,SNAPLIST         START-ADDR,END-ADDR,MDBSTOKEN\n         OI    SNAPLIST+4,X'80'        VL BIT\n         STAM  R9,R9,MDBALET           STORE R9'S ALET\n         ALESERV EXTRACT,ALET=MDBALET,STOKEN=MDBSTOKN    GIVE ALET, GET STOKEN\n         LAE   R1,0(0,0)               FORCE R1/AR TO 0, SNAPX DOESNT\n         SNAPX DCB=SNAPDD,PDATA=REGS,DSPSTOR=SNAPLIST,ID=1\n*(LOCAL)\n         LAE   R1,0(0,0)               FORCE R1/AR TO 0, SNAPX DOESNT\n         SNAP  DCB=SNAPDD,PDATA=REGS,STORAGE=(SMAP,SMAPEND),ID=2\n         PRINT ON,NOGEN\nNODBG1   EQU   *\n         SAC   0                       SET PRIMARY ADDRESSING MODE.     ********\n         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS         ********\n         PUT   PUTLINE,HEADER#         WRITE VB LOG RECORD (NON-AR)\n         PUT   PUTLINE,LOGBUFF#        WRITE VB LOG RECORD (NON-AR)\n         SAC   512                     SET AR ADDRESSING MODE.          ********\n         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS         ********\n         LH    R3,MDBTLEN              +TEXT LINE LENGTH\n         LA    R9,0(R3,R9)             -> NEXT TEXT ENTRY\n         SR    R2,R3                   REDUCE TOTAL MDB LENGTH\n         BP    ULOG                    REMAINING LEN. > 0 -> ULOG LOOP\nULOGEND  EQU   *                       END LOOP, BACK TO PRIMARY MODE\n*\n         SAC   0                       SET PRIMARY ADDRESSING MODE.     ********\n         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS         ********\n         L     R10,SAVE10              LOAD STACKEM RETURN ADDRESS.     ********\n         BR    R10                                                      ********\n*                                                                       ********\nTXT2BUFR MVC   00(00,R8),11(R9)        MOVE MDB TEXT (VAR) -> IO BUFFER ********\n*                                                                       ********\n*                                                                       ********\n         EJECT                                                          ********\n*********************************************************************** ********\n*************************  MGCRE EXEC FORM  *************************** ********\n*********************************************************************** ********\n*                                                                       ********\nMGCREE   EQU   *                       MVS COMMAND PROCESSOR ROUTINE.   ********\n*                                                                       ********\n         ST    R10,SAVE10              SAVE MGCREE RETURN ADDRESS.      ********\n*                                                                       ********\n         MVC   MDATA2(44),SAVEDSN      FROM DFDSS SYSPRINT\n         MODESET KEY=ZERO,MODE=SUP\n         LA    R0,0(0,0)               REQUIRED\n         MGCRE TEXT=MTEXTP,CONSNAME=CONLOG,MF=(E,MGCREL)                ********\n         MODESET KEY=NZERO,MODE=PROB\n         AP    COMMANDS,=P'1'          COUNT COMMANDS ISSUED\n*                                                                       ********\n         L     R10,SAVE10              LOAD MGCREE RETURN ADDRESS.      ********\n         BR    R10                                                      ********\n*                                                                       ********\n*********************************************************************** ********\n*************************  MGCRE LIST FORM  *************************** ********\n*********************************************************************** ********\n*                                                                       ********\n*                                                                       ********\nMGCREL   MGCRE MF=L                                                     ********\n*                                                                       ********\n*                                                                       ********\n         EJECT                                                          ********\n*********************************************************************** ********\n**********************   MCS CONSOLE OPEN   *************************** ********\n*********************************************************************** ********\n*                                                                       ********\nMCSOPA   EQU   *                       CONSOLE ACTIVATION   ROUTINE.    ********\n*                                                                       ********\n         ST    R10,SAVE10              SAVE MCSOPA RETURN ADDRESS.      ********\n*                                                                       ********\n         LA    R1,MCSOPERA\n         USING MCSOPPRM,R1\n         OI    MCSOAUTH,MCSOAALL        GIVE CONSOLE COMMAND AUTH.\n         MODESET KEY=ZERO,MODE=SUP\n         MCSOPER REQUEST=ACTIVATE,NAME=CONLOG,CONSID=CONID,            +********\n               OPERPARM=MCSOPERA,MCSCSA=MCSSTAT,MCSCSAA=MCSALET,       +********\n               RTNCODE=MCSCODE,RSNCODE=MCSRC,MSGECB=MCSECB,            +********\n               TERMNAME=MCSTNAM                                         ********\n         MODESET KEY=NZERO,MODE=PROB\n*                                                                       ********\n         L     R10,SAVE10              LOAD MCSOPA RETURN ADDRESS.      ********\n         BR    R10                                                      ********\n         EJECT                                                          ********\n*********************************************************************** ********\n**********************   MCS CONSOLE GET    *************************** ********\n*********************************************************************** ********\n*                                                                       ********\nMCSGET   EQU   *                       CONSOLE MESSAGE GET  ROUTINE.    ********\n*                                                                       ********\n         ST    R10,SAVE10              SAVE MCSGET RETURN ADDRESS.      ********\n*                                                                       ********\n         MODESET KEY=ZERO,MODE=SUP     SVC 107 - NOT IN AR MODE\n         SAC   512                     AR REQUIRED FOR MCS GET MACRO    ********\n         SYSSTATE ASCENV=AR            SET FOR MACRO EXPANSIONS         ********\n         MCSOPMSG REQUEST=GETMSG,CONSID=CONID,MF=(E,MCSGL,COMPLETE)     ********\n         ST    R1,MDBSAVE              SAVE MDB POINTER.                ********\n         LAE   R9,0(,R1)               LOAD CONSOLE ADDRSP. ALET\n*        USING IEAVM105,R9             ACTUALLY USED IN PRNTLOG\n*                                                                       ********\n         SAC   0                       AR NO LONGER REQUIRED            ********\n         SYSSTATE ASCENV=P             SET FOR MACRO EXPANSIONS         ********\n         MODESET KEY=NZERO,MODE=PROB\n*                                                                       ********\n         L     R10,SAVE10              LOAD MCSGET RETURN ADDRESS.      ********\n         BR    R10                                                      ********\n*                                                                       ********\n*********************************************************************** ********\n*******************   MCS CONSOLE LIST FORM   ************************* ********\n*********************************************************************** ********\n*                                                                       ********\nMCSGL    MCSOPMSG MF=(L,MCSDATA)                                        ********\n*                                                                       ********\n         EJECT                                                          ********\n*********************************************************************** ********\n**********************   MCS CONSOLE CLOSE  *************************** ********\n*********************************************************************** ********\n*                                                                       ********\nMCSOPD   EQU   *                       CONSOLE DEACTIVATION ROUTINE.    ********\n*                                                                       ********\n         ST    R10,SAVE10              SAVE MCSOPD RETURN ADDR.         ********\n*                                                                       ********\n         MODESET KEY=ZERO,MODE=SUP\n         MCSOPER REQUEST=DEACTIVATE,CONSID=CONID                        ********\n         MODESET KEY=NZERO,MODE=PROB\n*                                                                       ********\n         L     R10,SAVE10              LOAD MCSOPD RETURN ADDR.         ********\n         BR    R10                                                      ********\n         EJECT                                                          ********\n***********************************************************************\n*                                (WAIT)                               *\n* MCSWAIT                                                             *\n*                            (LINK = R10)                             *\n***********************************************************************\n*\n*\nMCSWAIT  EQU  *                        ISSUE OPERATOR COMMANDS.\n*\n         ST   R10,SAVE10               SAVE MGCR RETURN ADDRESS.\n*\n         WAIT ECB=MCSECB               FROM MCSOPEN\n         XC   MCSECB,MCSECB            CLEAR AFTER POST\n*\n         L    R10,SAVE10\n         BR   R10\n         EJECT                                                          ********\n***********************************************************************\n*                                (SNAPINIT)                           *\n* SNAPINIT                                                            *\n*                            (LINK = R10)                             *\n***********************************************************************\n         ST     R10,SAVE10\nSNAPINIT NOP    SNAPTERM\n         OPEN   (SNAPDD,OUTPUT),MODE=31\n         MVI    SNAPINIT+1,X'F0'\n         B      SNAPTERM\nSNAPDD   DCB   DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,             X\n               LRECL=125,BLKSIZE=882,DCBE=SNAPXX\nSNAPXX   DCBE  RMODE31=BUFF\nSNAPTERM EQU   *\n         L     R1,SAVE10\n         BR    R10\n         EJECT\n*********************************************************************** ********\n************************  DATA AREAS  ********************************* ********\n*********************************************************************** ********\n         DS    0D                                                       ********\nSMAP     EQU   *\nBLANKS   DC    CL26' '\nCONID    DC    CL4' '                                                   ********\nCONLOG   DC    CL8'MIGRATOR'                                            ********\nCARD     DS    CL80\nDEBUG    DC    X'00'                   X'80' TO SWITH DEBUG ON\nEOF      DC    X'00'\nGOODMSG  DC    CL7'ARC1000'\n         CNOP  0,4\nHEADER#  DC    AL2(125),AL2(0)         RDW                              ********\nHEADER1  DC    CL21'MIGRATE ISSUED FOR: (' MESSAGE IO AREA (121 CHAR)   ********\nHEADER2  DC    CL100' '                MESSAGE IO AREA (121 CHAR)       ********\nCOMMANDS DC    PL8'0'\nFAILURES DC    PL8'0'\n         CNOP  0,4\nLOGBUFF# DC    AL2(125),AL2(0)         RDW                              ********\nLOGBUFFR DC    CL121' '                MESSAGE IO AREA (121 CHAR)       ********\nMCSALET  DS    F                       MCS A-LET?                       ********\nMCSAREA  DS    CL40                    MCS PARAMETER AREA?              ********\nMCSCODE  DS    F                       MCS RETURN_CODE.                 ********\nMCSECB   DC    F'0'                    MCS WAIT/POST ECB.               ********\nMCSRC    DS    F                       MCS REASON_CODE.                 ********\nMCSSTAT  DS    CL8                     MCS STATUS AREA?                 ********\nMCSTNAM  DC    CL8'MIGRATOR'           MCS TERMINAL NAME?               ********\nMDATA0   DC    AL2(MDATA99-MDATA0-2)   LENGTH                           ********\nMDATA1   DC    CL23'F DFHSM,MIGRATE DSNAME('   MIGRATE COMMAND          ********\nMDATA2   DC    CL45' '                 NEEDS TRAILING PAREN.\nMDATA99  DS    0H                      ALIGN FOR MDBHLEN#\nMDBHLEN# DC    AL2(MDBHLEN)\nMDBSAVE  DS    F                       MDB POINTER SAVEAREA.            ********\nMTEXTP   DC    A(MDATA0)                                                ********\nSAVE     DS    18F                     HOUSEKEEPING SAVE AREA           ********\nSAVEDSN  DS    CL44\nSAVE10   DS    F\n         CNOP  0,4\nSUMMARY# DC    AL2(125),AL2(0)         RDW                              ********\nSUMMARY1 DC    CL18'COMMAND SUMMARY:  ' MESSAGE IO AREA (121 CHAR)      ********\nSUMMARY2 DC    CL07'ISSUED '            MESSAGE IO AREA (121 CHAR)      ********\nSUMMARY3 DC    XL16'21202020202020202020202020202020'                   ********\nSUMMARY4 DC    CL07'FAILED '            MESSAGE IO AREA (121 CHAR)      ********\nSUMMARY5 DC    XL16'21202020202020202020202020202020'                   ********\nTRTABL   DC    256X'00'\n         ORG   TRTABL+X'40'            TO FIND FIRST BLANK\n         DC    X'40'                   REPLACE W/APOSTROPHE\n         ORG\nWTOK     DC    F'11'                   WTO DELETE TOKEN FOR DOM         ********\nOPENSW   DC    X'0'\n         DS    0D\nSNAPLIST DS    A(0),A(0),0D            ATART-ADDR,END-ADDR,STOKEN\nMDBSTOKN DS    D\nMDBALET  DS    F\nSMAPEND  EQU   *\nMCSOPERA DC    44X'00'\n         PRINT ON,NOGEN\nCARDIN   DCB   DDNAME=CARDIN,EODAD=ENDFILE,MACRF=(GM),DSORG=PS\nPUTLINE  DCB   DDNAME=PUTLINE,MACRF=(PM),DSORG=PS,RECFM=VB,LRECL=252,  C\n               BLKSIZE=256,DCBE=PUTLINEX\nPUTLINEX DCBE  RMODE31=BUFF\n         LTORG                                                          ********\n*********************************************************************** ********\n************************  DSECT ZONE  ********************************* ********\n*********************************************************************** ********\n         PRINT OFF,NOGEN               ON,GEN\nIEZMGCR  DSECT\n         IEZMGCR\nIEAVM105 DSECT                                                          ********\n         IEAVM105                                                       ********\n         PRINT OFF,NOGEN               ON,GEN\nUCB      DSECT                                                          ********\n         IEFUCBOB                                                       ********\n         PRINT OFF,NOGEN\n         IEZVG111\nR0       EQU   0                                                        ********\nR1       EQU   1                                                        ********\nR2       EQU   2                                                        ********\nR3       EQU   3                                                        ********\nR4       EQU   4                                                        ********\nR5       EQU   5                                                        ********\nR6       EQU   6                                                        ********\nR7       EQU   7                                                        ********\nR8       EQU   8                                                        ********\nR9       EQU   9                                                        ********\nR10      EQU   10                                                       ********\nR11      EQU   11                                                       ********\nR12      EQU   12                                                       ********\nR13      EQU   13                                                       ********\nR14      EQU   14                                                       ********\nR15      EQU   15                                                       ********\n         END                                                            ********\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "NATSUB": {"ttr": 2562, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x0f\\x01\\x00\\x02\\x0f\\x109\\x00\\xce\\x00\\xce\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-20T00:00:00", "modifydate": "2000-01-20T10:39:00", "lines": 206, "newlines": 206, "modlines": 0, "user": "TS00DZL"}, "text": "* VERSION 2\n* THIS MACRO SIMPLY CONVERTS A BINARY NUMBER IN REG (&REG)\n* TO AN UNPACKED DECIMAL FIELD (&DEST) FOR PRINTOUT.\n* DEFINE: &DWORD  DS  D  - FOR USE BY ALL MACRO EXECUTIONS.\n         MACRO\n&NAME    CONVERT   &REG,&DEST,&DWORD\n&NAME    CVD   &REG,&DWORD\n         UNPK  &DEST,&DWORD\n         OI    &DEST+L'&DEST-1,X'F0'\n         MEND\n         MACRO\n         REGS\n         PRINT OFF\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         PRINT ON\n         MEND\n*******************************************\n* SUBMIT IS A GENERAL PURPOSE SUBROUTINE  *\n* WHICH WILL DYNAMICALLY ALLOCATE THE JES *\n* INTERNAL READER AND SUBMIT JCL ETC. FROM*\n* A NATURAL PROGRAM. THE LAST CALL TO THIS*\n* SUBROUTINE MUST BE A '/*EOF'.           *\n* CALL 'TSOSUB' P1 P2                     *\n*          P1 = CL80 TEXT TO SUBMIT       *\n*          P2 = CL6 (CL2=RC,CL4=REASON)   *\n* WRITTEN BY D.LEES 8/88                  *\n* PROGRAM IS REUSEABLE; NATURAL LOADS A   *\n* CALLED PROG AT 1ST CALL AND DELETES AT  *\n* END OF NATURAL PGM (OR SO IT APPEARS).  *\n*                                         *\n* ERRORS: R15 CONTAINS RETURN CODE        *\n*   RC    REASON   CAUSE                  *\n*   __    ______   ____________________   *\n*   NN    NNNN     ACTUAL R15 & S99ERROR  *\n*   66    0000     WRITE TO INTRDR ERROR  *\n*   77    0000     INTRDR OPEN ERROR      *\n*******************************************\nSUBMIT   CSECT                                                          00008\n         PRINT NOGEN                                                    00036\n         REGS                                                           00015\nINIT     STM   R14,R12,12(R13)                                          00046\n         BALR  R12,0                                                    00053\n         USING *,R12                                                    00054\n         LR    R11,R1                      PARMLIST\n         LA    R1,SAVEAREA                                              00048\n         ST    R13,4(R1)                                                00049\n         ST    R1,8(R13)                                                00050\n         LR    R13,R1                                                   00051\n         LM    R10,R11,0(R11)               R10->P1 R11->P2\n         MVC   RETCODE,=C'000000'           RC=0 REASON=0\n         MVI   CC,X'00'\n         LA    R9,RBBLK\n         USING S99RB,R9\n         TM    SW@ALLOC,X'80'\n         BO    WRITE                       ALREADY ALLOCATED\n         OI    RBPTR,X'80'\nALLOC    EQU   *                                                        00104\n         OI    ALLOCLST+12,X'80'\n         XC    RBBLK,RBBLK                 CLEAR RB\n         MVI   S99RBLN,RBLEN               SET LENGTH\n         MVI   S99VERB,S99VRBAL            SET FUNCTION\n         MVC   S99TXTPP,=A(ALLOCLST)       SET PTR TO LIST\n         LA    R1,RBPTR                    LOAD  RB ADDR                00104\n         SVC   99                          REQ ALLOC SERVICES           00105\n         LTR   R15,R15                     TEST SVC 99 RC               00107\n         BNZ   SVC99ERR                                                 00108\nOPENRDR  MVC   INTRDR+DCBDDNAM-IHADCB(8),DDNAME\n         OPEN  (INTRDR,(OUTPUT))\n         TM    INTRDR+DCBOFLGS-IHADCB,DCBOFOPN\n         BNO   OPENERR\n         OI    SW@ALLOC,X'80'              ALLOC & OPEN COMPLETED\nWRITE    EQU   *\n         PUT   INTRDR,0(R10)\n*        LA    R15,PUTERR\n*        ICM   R15,8,=X'02'\n*        LA    R0,=X'41000000'\n*        LA    R1,INTRDR\n*        ICM   R1,8,=X'40'\n*        BALR  R14,R15\n         CLC   0(5,R10),=C'/*EOF'\n         BNE   TERM\n         CLOSE (INTRDR)                    FREE=CLOSE\n         NI    SW@ALLOC,X'7F'              ALLOW ALLOC AGAIN\nTERM     EQU   *                                                        00306\n         MVC   0(6,R11),RETCODE            SET RETURN VALUES\n         L     R13,SAVEAREA+4                                           00307\n         L     R14,12(R13)                                              00308\n         XR    R15,R15\n         IC    R15,CC\n         RETURN (0,12)\n         BR    R14                                                      00310\n         EJECT                                                          00311\nSVC99ERR EQU   *\n         STC   R15,CC\n         CONVERT R15,RESPONSE,DWORD\n         LH    R15,S99ERROR\n         CONVERT R15,REASON,DWORD\n         B     TERM\nOPENERR  EQU   *\n         MVC   RETCODE,=C'770000'\n         MVI   CC,X'77'\nFREE     EQU   *\n         OI    FREELST,X'80'\n         XC    RBBLK,RBBLK                 CLEAR RB\n         MVI   S99RBLN,RBLEN               SET LENGTH\n         MVI   S99VERB,S99VRBUN            SET FUNCTION\n         MVC   S99TXTPP,=A(FREELST)        SET PTR TO LIST\n         MVC   DDNAMX,DDNAME\n         LA    R1,RBPTR                    LOAD  RB ADDR                00104\n         SVC   99                          REQ ALLOC SERVICES           00105\n         LTR   R15,R15                     TEST SVC 99 RC               00107\n         BNZ   SVC99ERR                                                 00108\n         B     TERM\nPUTERR   EQU   *                           PRESERVE R13,R14 !\n         SYNADAF ACSMETH=QSAM              GET SAVE\n         MVI   CC,X'66'\n         MVC   RETCODE,=C'660000'\n         NI    SW@ALLOC,X'7F'              ALLOW ALLOC AGAIN\n         CLOSE (INTRDR)                    FREE=CLOSE\n         SYNADRLS                          RELEASE SAVE\n         RETURN (2,12)                    EROPT=SKP (NO ABEND OF\n*                                          NATURAL FOR SOFT ERRORS)\n*                                                                       00312\n*        DATA AREAS AND DSECTS                                          00313\n*                                                                       00314\n         SPACE                                                          00315\nSAVEAREA DC    18F'0'                                                   00316\nDWORD    DS    D\n         SPACE 2                                                        00315\nRETCODE  DS    0CL6\nRESPONSE DS    CL2\nREASON   DS    CL4\nCC       DS    C\nSW@ALLOC DC    X'00'\n         SPACE 2                                                        00315\n*++++++++++++++++++++++++++++++++++++++*\n*   DYNAMIC ALLOCATION STRUCTURES      *\n*++++++++++++++++++++++++++++++++++++++*\n         DS    0F                                                       00348\nRBPTR    DC    A(RBBLK)                ADDR OF RB HEADER                00331\n         SPACE                                                          00333\n         DS    0F                                                       00348\nRBLEN    EQU   (S99RBEND-S99RB)\nRBBLK    DC    BL(RBLEN)'0'              RB STORAGE                     00334\n         SPACE 2                                                        00343\nALLOCLST DC    A(SYSOU)                TEXT POINTER LIST                00367\n         DC    A(SPGNM)\n         DC    A(CLOSE)\n         DC    A(RTDDN)                                                 00370\n         SPACE 2\nFREELST  DC    A(DEALOC)               TEXT POINTER LIST                00367\n         SPACE 2\n         DS    0F\nSYSOU    DC    AL2(DALSYSOU)            REQUEST SYSOUT ALLOCATION       00349\n         DC    H'1',H'1'                                                00350\n         DC    CL1'A'                   DEFAULT CLASS OF A              00351\n         SPACE                                                          00352\n         DS    0F\nRTDDN    DC    AL2(DALRTDDN)            REQUEST GENERATED DDN           00354\n         DC    H'1'                                                     00355\n         DC    H'8'                                                     00356\nDDNAME   DC    CL8'********'            RETURNED DDN FLD                00357\n         SPACE                                                          00352\n         DS    0F\nSPGNM    DC    AL2(DALSPGNM)            WRITER                          00354\n         DC    H'1'                                                     00355\n         DC    H'8'                                                     00356\n         DC    CL8'INTRDR  '            WRITER NAME                     00357\n         SPACE                                                          00352\n         DS    0F\nCLOSE    DC    AL2(DALCLOSE)            FREE=CLOSE                      00354\n         DC    H'0'                                                     00355\n         SPACE                                                          00352\nDEALOC   DC    AL2(DUNDDNAM)            UN-ALLOCATE                     00354\n         DC    H'1'                                                     00355\n         DC    H'8'                                                     00356\nDDNAMX   DC    CL8'********'            WRITER NAME                     00357\n         EJECT                                                          00726\nINTRDR   DCB   MACRF=(PM),DSORG=PS,BLKSIZE=80,LRECL=80,                X\n               RECFM=FB,SYNAD=PUTERR,EROPT=SKP\n         IEFZB4D0                                                       00727\n         EJECT                                                          00728\n         IEFZB4D2                                                       00729\n         DCBD  DSORG=PS,DEVD=DA\n         END                                                            00730\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PARSIFAL": {"ttr": 2566, "alias": false, "halfwords": 0, "notes": 0, "parms": "b''", "ispf": false, "text": "1 PARSER: PROC OPTIONS(MAIN);\n     /* ORIGINAL VERSION BY DICK SHELTZ */\n     /* IMPROVED VERSION BY DAVE LEES   */\n     DECLARE INFILE FILE  INPUT RECORD;                                 00002\n     DECLARE OUTFILE FILE OUTPUT RECORD;                                00003\n     DECLARE  1 INREC,                                                  00004\n                5 CARD CHAR(72),                                        00006\n                5 FILL CHAR(08);                                        00005\n     DECLARE  1 OUTREC,                                                 00008\n                5 KEYWORD CHAR (72),                                    00009\n                5 SEQ     PICTURE '99999999';                           00010\n     DECLARE  I FIXED DEC(3) INIT(0),                                   00012\n              J FIXED DEC(3) INIT(0),                                   00013\n              L FIXED DEC(3) INIT(0),                                   00014\n              N FIXED DEC(3) INIT(0),                                   00015\n              SEQ FIXED DEC(3) INIT(0),                                 00015\n              END_DESC CHAR(1) INIT('N'),                               00018\n              END_OF_FILE CHAR(1) INIT('N'),                            00019\n              DESC_1      CHAR(75) VARYING,                             00020\n              HIT         CHAR(1) INIT('N');                            00021\n     ON ENDFILE (INFILE)  END_OF_FILE='Y';                              00022\n     READ FILE (INFILE) INTO (INREC);                                   00024\n     DO UNTIL (END_OF_FILE='Y');                                        00023\n       I=1;                                                             00025\n       DESC_1=TRANSLATE(INREC.CARD,' ',',');                            00026\n       L=LENGTH(DESC_1);                                                00027\n       K=L;\n       END_DESC='N';                                                    00028\n       DO UNTIL (END_DESC = 'Y');                                       00029\n         IF SUBSTR(DESC_1,I,L) = ' ' THEN LEAVE; /* DZL */\n         J=INDEX(SUBSTR(DESC_1,I,L),' ');                               00030\n         IF J = 0 THEN LEAVE;\n         IF J <= 2 THEN HIT = 'Y';               /* DZL */\n         OUTREC.KEYWORD=SUBSTR(DESC_1,I,J);                             00031\n         OUTREC.SEQ = SEQ;                                              00041\n         SEQ=SEQ+1;                                                     00042\n         WRITE FILE (OUTFILE) FROM (OUTREC);                            00043\n         L = L - J; /*DECREMENT TO COMPENSATE FOR CHANGE IN LENGTH*/    00045\n         I = I + J; /*INCREMENT TO REPOSITION IN DESC LINE FOR    */    00046\n                    /*NEXT KEYWORD                                */    00047\n         IF I >= K THEN  END_DESC = 'Y';                                00048**2\n         END;                                                           00049\n     READ FILE (INFILE) INTO (INREC);                                   00024\n     END;                                                               00050\n END PARSER;                                                            00051\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "PLI370": {"ttr": 2568, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x01\\x00\\x02\\x0f\\x01\\x00\\x02\\x0f\\x10U\\x00'\\x00'\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-20T00:00:00", "modifydate": "2000-01-20T10:55:00", "lines": 39, "newlines": 39, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX$ JOB (TYYYYY,XXXX),'D.LEES.X4311',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(30)\n//*====================================================*//\n//* NOTE: PLISTART IS GONE, USE CEESTART OR NOTHING    *//\n//* NOTE: PLISTART 'THERE IS A WAY . . . . '           *//\n//*====================================================*//\n//PLI370    PROC OUTC='*'\n//PLI    EXEC PGM=IEL0AA,REGION=4096K,\n//   PARM='OBJECT,NODECK,OFFSET,MACRO,LIST'\n//STEPLIB  DD DISP=SHR,DSN=SYS1.IEL.SIELCOMP\n//SYSPRINT DD SYSOUT=&OUTC\n//SYSIN  DD   DUMMY\n//*SYSLIB DD   DISP=SHR,DSN=SYS1.CEE.SCEECALL\n//SYSLIN DD   DSN=&&LOADSET,UNIT=SYSDA,\n//       DISP=(MOD,PASS),\n//       SPACE=(400,(1800,400))\n//SYSUT1 DD   UNIT=SYSDA,DCB=BLKSIZE=1024,\n//       SPACE=(2048,(900,400))\n//SYSPUNCH DD  DSN=&&PROG,DCB=(BLKSIZE=800,LRECL=80,\n//       RECFM=FB),SPACE=(800,(750,250)),DISP=(NEW,PASS),UNIT=SYSDA\n//       PEND\n//*\n//GO     EXEC PLI370\n//PLI.SYSIN DD DISP=SHR,DSN=TST.DZL.XMIT(PARSIFAL)\n//*=================================================================*//\n//* YOUR LE/370 LIBRARIES MAY BE NAMED DIFFERENTLY                  *//\n//*=================================================================*//\n//LINK   EXEC PGM=IEWL,     COND=(0,LE),\n// PARM='LIST,LET,MAP,SIZE=(9999K,999K),AMODE=24,RMODE=24,NOXREF',\n//       REGION=8M\n//SYSUT1 DD DISP=(NEW,DELETE),DSNAME=&&SYSUT1,SPACE=(1700,(400,50)),\n//      UNIT=SYSDA\n//SYSPRINT DD SYSOUT=*,\n//    DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//*YSLIB   DD DSN=SYS1.CEE.SIBMCALL,DISP=SHR         FOR PLICALL*\n//SYSLIB DD DISP=SHR,DSN=SYS1.CEE.SCEELKED\n//SYSPUNCH DD DUMMY,DCB=BLKSIZE=80\n//SYSLMOD DD DISP=SHR,DSN=TST.DZL.XMIT.LOAD(PARSIFAL)\n//SYSLIN DD  DSN=&&LOADSET,DISP=(OLD,PASS)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "QDUMP80": {"ttr": 2570, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x15_\\x00\\x98\\x17_\\x100\\x01\\x02\\x01\\x02\\x00\\x0c\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-06-04T00:00:00", "modifydate": "1998-06-24T10:30:00", "lines": 258, "newlines": 258, "modlines": 12, "user": "TS00DZL"}, "text": "QDUMP    TITLE 'QSAM RECORD DUMP PROGRAM'\nQDUMP    CSECT\n*=====================================*\n*      I N I T I A L I Z A T I O N\n*=====================================*\n         PRINT NOGEN\n         REGS\nSOJ      SAVE  (14,12)\n         BALR  R12,R0\n         USING *,12\n         LA    R14,SAVEAREA\n         ST    R13,SAVEAREA+4\n         ST    R14,8(0,13)\n         LR    R13,R14\n         LR    R3,R1\n         BAL   R11,PARMS\n*=====================================*\n*   M A I N    P R O C E D U R E\n*=====================================*\nMAIN     EQU   *\n         LA    R10,SYSIN\n         USING IHADCB,R10\n         OPEN  (SYSIN,INPUT,SYSPRINT,OUTPUT)\n         LA    R8,80\nNEWREC   EQU   *\n         GET   SYSIN\n         LR    R7,R1\n         ST    R7,BUFFER\n         AP    RECOUNT,=P'1'\n         ZAP   BYTES,=P'1'\nLASTREC  EQU   *\n         LH    R9,DCBLRECL\n         TM    DCBRECFM,DCBRECV\n         BNO   NOTVB\n         LH    R9,0(R7)            RDW\nNOTVB    EQU   *\n         STH   R9,RECLEN\n         LR    R4,R9\n         LA    R9,0(R7,R9)\n         BCTR  R9,0\n         MVC   PUTLEN,=H'85'\n         CP    RECOUNT,START\n         BL    NEWREC\n         CP    RECOUNT,STOP\nLASTREC2 BNH   RECID\n         CLI   LASTSW,1\n         BNE   EOJ1\n         BE    NEWREC\nRECID    EQU   *\n         MVC   RECLINE+15(16),EDMASK1\n         ED    RECLINE+15(16),RECOUNT\n         LH    R0,RECLEN                  R9=LRECL OR RDW\n         CVD   R0,DWORD\n         UNPK  RECLINE+45(5),DWORD+5(3)\n         OI    RECLINE+49,X'F0'\n         MVC   DATALINE(50),RECLINE\n         MVC   DATALEN,=H'55'\n         MVI   DATASA,C'-'\n         BAL   R11,PUTLINE\nSETLEN   EQU   *\n         CR    R4,R8\n         BNL   RULER\n         LA    R1,5(R4)\n         STH   R1,PUTLEN\nRULER    EQU   *\n         MVI   DATASA,C'0'\n         MVC   DATALEN,PUTLEN\n         UNPK  RULE(5),BYTES\n         OI    RULE+4,X'F0'\n         MVC   DATALINE(80),RULE\n         BAL   R11,PUTLINE\n         AP    BYTES,=P'80'\nLINE1    EQU   *\n         MVC   DATALINE(80),0(R7)\n         CLI   ASCISW,1\n         BE    TRASCII\n         TR    DATALINE(80),EBCDIC           prevent printer problems\n         B     NOASCII\nTRASCII  EQU   *\n         TR    DATALINE(80),ASCII\nNOASCII  EQU   *\n         MVI   DATASA,C' '\n         MVC   DATALEN,PUTLEN\n         BAL   R11,PUTLINE\nLINE2    EQU   *\n         MVC   DATALINE(80),0(R7)\n         TR    DATALINE,HEXUPPER\n         MVI   DATASA,C' '\n         MVC   DATALEN,PUTLEN\n         BAL   R11,PUTLINE\nLINE3    EQU   *\n         MVC   DATALINE(80),0(R7)\n         TR    DATALINE,HEXLOWER\n         MVI   DATASA,C' '\n         MVC   DATALEN,PUTLEN\n         BAL   R11,PUTLINE\nENDREC   EQU   *\n         SR    R4,R8\n         BXLE  R7,R8,SETLEN\nLASTREC1 BC    0,EOJ1\n         B     NEWREC\n*=====================================*\n*       T E R M I N A T I O N\n*=====================================*\nEOJ      EQU   *\n         CLI   LASTSW,1\n         BNE   EOJ1\n         MVI   LASTSW,0\n         MVI   LASTREC1+1,X'F0'\n         MVI   LASTREC2+1,X'F0'\n         L     R7,BUFFER\n         B     LASTREC\nEOJ1     EQU   *\n         CLOSE (SYSIN,,SYSPRINT)\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=0\n*=====================================*\n*       S U B R O U T I N E S\n*=====================================*\nPUTLINE  EQU   *\n         AP    LINECNT,=P'1'\n         CLI   DATASA,C'-'              NEW RECORD\n         BE    ADD2\n         CLI   DATASA,C'0'              NEW LINE GROUP - RULER\n         BE    ADD1\n         B     NOPAGE\nADD2     EQU   *\n         AP    LINECNT,=P'1'\nADD1     EQU   *\n         AP    LINECNT,=P'1'\n         CP    LINECNT,=P'59'\n         BL    NOPAGE\nNEWPAGE  EQU   *\n         ZAP   LINECNT,=P'1'\n         MVI   DATASA,C'1'\nNOPAGE   EQU   *\n         PUT   SYSPRINT,DATALEN\n         BR    R11\n*=====================================*\nPARMS    EQU   *\n         L     R3,0(R3)\n         LH    R0,0(R3)\n         LA    R3,2(R3)\n         C     R0,=F'0'\n         BE    ENDPARMS\n         CH    R0,=H'9'\n         BL    ENDPARMS\n         PACK  START(5),0(9,R3)\n         CH    R0,=H'19'\n         BL    ENDPARMS\n         LA    R3,10(R3)\n         PACK  STOP(5),0(9,R3)\n         CH    R0,=H'24'\n         BL    ENDPARMS\n         LA    R3,10(R3)\n         CLC   0(4,R3),=C'LAST'\n         BNE   ASCI\n         MVI   LASTSW,1\nASCI     EQU   *\n         CH    R0,=H'29'\n         BL    ENDPARMS\n         LA    R3,5(R3)\n         CLC   0(4,R3),=C'ASCI'\n         BNE   ENDPARMS\n         MVI   ASCISW,1\nENDPARMS EQU   *\n         BR    R11\n         EJECT\n*=====================================*\n*       S P I E   E X I T\n*=====================================*\n*      S T O R A G E   A R E A S\n*=====================================*\nSAVEAREA DC    18F'0'\n         DS    0F\nHEXUPPER DC    16CL1'0'\n         DC    16CL1'1'\n         DC    16CL1'2'\n         DC    16CL1'3'\n         DC    16CL1'4'\n         DC    16CL1'5'\n         DC    16CL1'6'\n         DC    16CL1'7'\n         DC    16CL1'8'\n         DC    16CL1'9'\n         DC    16CL1'A'\n         DC    16CL1'B'\n         DC    16CL1'C'\n         DC    16CL1'D'\n         DC    16CL1'E'\n         DC    16CL1'F'\nHEXLOWER DC    16CL16'0123456789ABCDEF'\nDATALEN  DC    H'0',H'0'\nDATASA   DC    CL1' '\nDATALINE DC    CL80' '\nRULE     DC    ZL5'0'\n         DC    CL45'....10........20........30........40........5'\n         DC    CL30'0........60........70........|'\nRECLINE  DC    CL50'RECORD NUMBER  ................      LRECL = .....'\nEDMASK1  DC    X'40',15X'20'\nRECOUNT  DC    PL8'0'\nRECLEN   DC    H'0'\nLINECNT  DC    PL8'99'\nPUTLEN   DC    H'0'\nSTART    DC    PL5'1'\nSTOP     DC    PL5'1'\nBYTES    DC    PL3'1'\nLASTSW   DC    X'00'\nASCISW   DC    X'00'\nBUFFER   DC    A(0)\nDWORD    DC    D'0'\nASCII    DC    48X'00'\n         DC    C'0123456789'\n         DC    7X'00'\n         DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n         DC    6X'00'\n         DC    C'abcdefghijklmnopqrstuvwxyz'\n         DC    134X'00'\nASCIIL   EQU   *-ASCII\n         EJECT\nEBCDIC   DC    X'4040404040404040' 00-07\n         DC    X'4040404040404040' 08-0F\n         DC    X'4040404040404040' 1\n         DC    X'4040404040404040' 1\n         DC    X'4040404040404040' 2\n         DC    X'4040404040404040' 2\n         DC    X'4040404040404040' 3\n         DC    X'4040404040404040' 3\n         DC    X'4040404040404040' 4\n         DC    X'4040404040404040' 4\n         DC    X'4040404040404040' 5\n         DC    X'4040405B40404040' 5\n         DC    X'4040404040404040' 6\n         DC    X'4040404040404040' 6\n         DC    X'4040404040404040' 7\n         DC    X'4040407B7C404040' 7\n         DC    X'4081828384858687' 8\n         DC    X'8889404040404040' 8\n         DC    X'4091929394959697' 9\n         DC    X'9899404040404040' 9\n         DC    X'40A1A2A3A4A5A6A7' A\n         DC    X'A8A9404040404040' A\n         DC    X'4040404040404040' B\n         DC    X'4040404040404040' B\n         DC    X'40C1C2C3C4C5C6C7' C\n         DC    X'C8C9CACBCCCDCECF' C\n         DC    X'40D1D2D3D4D5D6D7' D\n         DC    X'D8D9DADBDCDDDEDF' D\n         DC    X'4040E2E3E4E5E6E7' E\n         DC    X'E8E9EAEBECEDEEEF' E\n         DC    X'F0F1F2F3F4F5F6F7' F\n         DC    X'F8F9404040404040' F\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,RECFM=VBA,LRECL=85, +\n               BLKSIZE=6233\nSYSIN    DCB   DDNAME=SYSIN,MACRF=(GL),DSORG=PS,EODAD=EOJ\n         DCBD  DSORG=PS,DEVD=DA\n         PRINT GEN\n         END\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "RBITMAP": {"ttr": 2817, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x02_\\x11Y\\x00I\\x00I\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-01-25T11:59:00", "lines": 73, "newlines": 73, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1     EXEC   ASMACL,PARM.ASM='XREF(SHORT)',\n//       PARM.LKED='LET,LIST,XREF,AC(1)',COND.LKED=(5,LT)\n//SYSLIB DD    BLKSIZE=32760\n//       DD    DSN=TST.DZL.XMIT,DISP=SHR\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//*      DD    DSN=SYS1.AMODGEN,DISP=SHR      CHECK DLIB VOLS!\n//*      DD    DSN=SYS1.AMACLIB,DISP=SHR\n//*      DD    DSN=SYS1.HASPSRC,DISP=SHR\n//SYSIN  DD    *\nDRIVER   CSECT\nDRIVER   AMODE     31\nDRIVER   RMODE     24                   DCB, ACB STILL < 16M !!!\n         PRINT     ON,GEN\n         REGS\n         SAVE      (14,12)\n         BALR      R12,0\n         USING     *,R12\n         ST        R13,SAVE+4\n         LA        R15,SAVE\n         ST        R15,8(R13)\n         LR        R13,R15\n         OPEN      (SYSOUT,OUTPUT),MODE=31\n         SPACE     3\nSNAPINIT NOP       SNAPTERM\n         OPEN      (SNAPDD,OUTPUT)\n         MVI       SNAPINIT+1,X'F0'\n         B         SNAPTERM\nSNAPDD   DCB       DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,         X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU       *\n         SNAP      DCB=SNAPDD,PDATA=REGS,ID=1\nLOAD1    LOAD      EP=BITMAP                       <==VERIFY\n         LR        R9,R0                           R9=EP\n         LA        R3,3                            SAFETY\n         LA        R4,PARMS\n         LA        R5,X'64'(,R9)\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=((9),(5)),ID=2\nCALLIT   EQU        *\n         LA        R1,PARMS\n         LR        R15,R9\n         BALR      R14,R15                         <=GO FOR IT!!\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=(PARM1,PARM99),ID=7\n**       STIMER    WAIT,BINTVL=BINTVL\n**BCT     BCT       R3,CALLIT                       REPEAT:N\nRETURN   EQU       *\n         CLOSE     (SNAPDD,,SYSOUT)\n         L         R13,SAVE+4\n         RETURN    (14,12),RC=0\nSAVE     DC        9D'0'\nSTORAGE  DS        CL80\nPARMS    EQU       *\nP1       DC        A(PARM1)\nP2       DC        A(PARM2)\nP3       DC        A(PARM3)\nPARM1    DC        CL3'010'\nPARM2    DC        F'3'\nPARM3    DC        3CL8' '\nPARM99   EQU       *\nBINTVL   DC        F'03'               3/100SEC\nSYSOUT   DCB       DDNAME=SYSOUT,MACRF=(PM),RECFM=F,BLKSIZE=80,DSORG=PS\n         END\n//LKED.SYSLIB   DD DSN=TST.AUTHLIB,DISP=(SHR)\n//LKED.SYSLMOD  DD DSN=&&LOADLIB(DRIVER),DISP=(,PASS),\n//      DCB=(DBP.JOBLIB),SPACE=(CYL,(1,1,7))\n//LKED.SYSPRINT DD SYSOUT=*\n//TEST     EXEC  PGM=*.S1.LKED.SYSLMOD,REGION=7M\n//STEPLIB  DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR E=32760\n//SNAPDD   DD    SYSOUT=*\n//SYSOUT   DD    SYSOUT=*\n//*SYSUDUMP DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RBMSS": {"ttr": 2820, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x06\\x00\\x00\\x01\\x00\\x02_\\x01\\x00\\x02_\\x11H\\x00Z\\x00 \\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.06", "flags": 0, "createdate": "2000-01-25T00:00:00", "modifydate": "2000-01-25T11:48:00", "lines": 90, "newlines": 32, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1     EXEC   ASMACL,PARM.ASM='XREF(SHORT)',\n//       PARM.LKED='LET,LIST,XREF,AC(1)',COND.LKED=(5,LT)\n//SYSLIB DD    BLKSIZE=32760\n//       DD    DSN=TST.DZL.XMIT,DISP=SHR\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//*      DD    DSN=SYS1.AMODGEN,DISP=SHR      CHECK DLIB VOLS!\n//*      DD    DSN=SYS1.AMACLIB,DISP=SHR\n//*      DD    DSN=SYS1.HASPSRC,DISP=SHR\n//SYSIN  DD    *\n         MACRO\n&LABEL   BMSS   &STRLEN,&BMSS,&TXTLEN,&TEXT,&COUNT\n         AIF ('&STRLEN'  EQ ' ').REJECT\n         AIF ('&BMSS'    EQ ' ').REJECT\n         AIF ('&TXTLEN'  EQ ' ').REJECT\n         AIF ('&TEXT'    EQ ' ').REJECT\n         AIF ('&COUNT'   EQ ' ').REJECT\n         CALL BMSS,(&STRLEN,&BMSS,&TXTLEN,&TEXT,&COUNT),VL\n.REJECT  ANOP\n         MEXIT\n         MEND\nDRIVER   CSECT\nDRIVER   AMODE     31\nDRIVER   RMODE     24                   DCB, ACB STILL < 16M !!!\n         PRINT     ON,GEN\n         REGS\n         SAVE      (14,12)\n         BALR      R12,0\n         USING     *,R12\n         ST        R13,SAVE+4\n         LA        R15,SAVE\n         ST        R15,8(R13)\n         LR        R13,R15\n         OPEN      (SYSOUT,OUTPUT),MODE=31\n         SPACE     3\nSNAPINIT NOP       SNAPTERM\n         OPEN      (SNAPDD,OUTPUT)\n         MVI       SNAPINIT+1,X'F0'\n         B         SNAPTERM\nSNAPDD   DCB       DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,         X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU       *\n         SNAP      DCB=SNAPDD,PDATA=REGS,ID=1\nLOAD1    LOAD      EP=BMSS                         <==VERIFY\n         LR        R9,R0                           R9=EP\n         LA        R3,3                            SAFETY\n         LA        R4,PARMS\n         LA        R5,X'64'(,R9)\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=((9),(5)),ID=2\nCALLIT   EQU        *\n         LA        R1,PARMS\n         LR        R15,R9\n**       BALR      R14,R15                         <=GO FOR IT!!\n         BMSS      PARM1,PARM2,PARM3,PARM4,PARM5\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=(PARM1,PARM99),ID=7\n**       STIMER    WAIT,BINTVL=BINTVL\n**BCT     BCT       R3,CALLIT                       REPEAT:N\nRETURN   EQU       *\n         CLOSE     (SNAPDD,,SYSOUT)\n         L         R13,SAVE+4\n         RETURN    (14,12),RC=0\nSAVE     DC        9D'0'\nSTORAGE  DS        CL80\nPARMS    EQU       *\nP1       DC        A(PARM1)           DOUBLE INDIRECTION\nP2       DC        A(PARM2)\nP3       DC        A(PARM3)\nP4       DC        A(PARM4)\nP5       DC        XL1'80',AL3(PARM5)\n         DS        0D\nPARM1    DC        AL2(7)\nPARM2    DC        CL7'???????'\nPARM3    DC        AL2(80)\nPARM4    DC        CL80'//*JOBPARM ???????     ??????? '\nPARM5    DC        F'0'\nPARM99   EQU       *\nBINTVL   DC        F'03'               3/100SEC\nSYSOUT   DCB       DDNAME=SYSOUT,MACRF=(PM),RECFM=F,BLKSIZE=80,DSORG=PS\n         END\n//LKED.SYSLIB   DD DSN=TST.AUTHLIB,DISP=(SHR)\n//LKED.SYSLMOD  DD DSN=&&LOADLIB(DRIVER),DISP=(,PASS),\n//      DCB=(DBP.JOBLIB),SPACE=(CYL,(1,1,7))\n//LKED.SYSPRINT DD SYSOUT=*\n//TEST     EXEC  PGM=*.S1.LKED.SYSLMOD,REGION=7M\n//STEPLIB  DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR E=32760\n//SNAPDD   DD    SYSOUT=*\n//SYSOUT   DD    SYSOUT=*\n//*SYSUDUMP DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCOBXREF": {"ttr": 2823, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0f\\x00\\x00\\x00\\x96$?\\x01\\x00\\x03_\\x14I\\x00+\\x00\\x12\\x00!\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.15", "flags": 0, "createdate": "1996-08-30T00:00:00", "modifydate": "2000-02-04T14:49:00", "lines": 43, "newlines": 18, "modlines": 33, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      RESTART=RUN2,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*====================================================*//\n//* XREF BY DB2 USERID  ===============================*//\n//*====================================================*//\n//RUN1     EXEC PGM=IKJEFT1B,DYNAMNBR=99,REGION=0M   ,COND=ONLY\n//STEPLIB  DD DSN=SQP.TEST.DSNLOAD,DISP=SHR,BLKSIZE=32760 DB2 4.1\n//         DD DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//SYSTSPRT DD SYSOUT=*\n//SYSPRINT DD SYSOUT=*\n//SYSOUT   DD SYSOUT=*\n//REPORT   DD SYSOUT=*\n//SYSABOUT DD SYSOUT=*\n//*YSUDUMP DD SYSOUT=*\n//SYSTSIN DD *\nDSN SYSTEM(DSN)\n    RUN  PROGRAM(COB1) PLAN(COB1) PARM('DB00GAM ') -\n          LIB('TST.DZL.XMIT.LOAD')\nEND\n/*\n//* PARM IS  8 CHAR USERID FOR COB1\n//* PARM IS 18 CHAR TABLE/VIEW FOR COB2\n//*====================================================*//\n//* XREF BY DB2 TABLENAME  ============================*//\n//*====================================================*//\n//RUN2     EXEC PGM=IKJEFT1B,DYNAMNBR=99,REGION=0M,COND=(0,GE)\n//STEPLIB  DD DSN=SQP.TEST.DSNLOAD,DISP=SHR,BLKSIZE=32760\n//         DD DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//SYSTSPRT DD SYSOUT=*   ,DEST=U85\n//SYSPRINT DD SYSOUT=*\n//SYSOUT   DD SYSOUT=*\n//REPORT   DD SYSOUT=*\n//SYSABOUT DD SYSOUT=*\n//*YSUDUMP DD SYSOUT=*\n//SYSTSIN DD *\nDSN SYSTEM(DSN)\n    RUN  PROGRAM(COB2) PLAN(COB2) PARM('BK_ACCT')  -\n          LIB('TST.DZL.XMIT.LOAD')\nEND\n/*\n//* PARM IS  8 CHAR USERID FOR COB1\n//* PARM IS 18 CHAR TABLE/VIEW FOR COB2\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RCOPYANY": {"ttr": 2825, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00\\x00\\x01\\x00\\x01\\x8f\\x01\\x003_\\x15U\\x00\\r\\x00\\r\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2000-01-18T00:00:00", "modifydate": "2000-11-30T15:55:00", "lines": 13, "newlines": 13, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//* NEW PARM OPTION: TRAILING FILLER CHARACTER PASSED AS ONE BYTE   *//\n//* PARAMETER. 'B' OR ' ' FOR BLANKS, OTHERS \"AS IS\". DEFAULT X'00' *//\n//*=================================================================*//\n//COPYANY   EXEC  PGM=COPYANY,REGION=0M,PARM='B'\n//STEPLIB   DD    DISP=SHR,DSN=TST.DZL.XMIT.LOAD\n//INFILE    DD    DISP=SHR,DSN=TST.DZL.XMIT(DYNAM),\n//          BUFNO=50\n//OUTFILE   DD    SYSOUT=T,\n//          BUFNO=50\n//SYSUDUMP  DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "RCPUID": {"ttr": 2827, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01!\\x00\\x00\\x00\\x92(\\x7f\\x01\\x00\\x02\\x1f\\x16C\\x00\\x08\\x00\\n\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.33", "flags": 0, "createdate": "1992-10-13T00:00:00", "modifydate": "2000-01-21T16:43:00", "lines": 8, "newlines": 10, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//*=================================================================*//\n//IKJACCNT EXEC PGM=CPUID\n//STEPLIB  DD DISP=SHR,DSN=TST.AUTHLIB                <= AUTHORIZED.\n//SYSPRINT DD SYSOUT=*\n//*SYSUDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RDBALPHA": {"ttr": 2829, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00\\x01\\x8f\\x01\\x00\\x02\\x7f\\x10B\\x00\\r\\x00\\x0b\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-01-18T00:00:00", "modifydate": "2000-01-27T10:42:00", "lines": 13, "newlines": 11, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*====================================================*//\n//GO EXEC PGM=DBALPHA\n//STEPLIB DD  DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//CARDS   DD  *  (13 X 6)\n123456789ABCD\n123456789ABCD\n123456789ABCD\n123456789ABCD\n123456789ABCD\n123456789ABCD\n//POSTER  DD  SYSOUT=A,DEST=U2004  (E,,XXX) 8,CHARS=GT15 (E,,XXX)\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RDBWAIT": {"ttr": 2831, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x1e\\x00\\x00\\x00\\x91#_\\x00\\x92\\x01_\\t$\\x00\\x07\\x00\\x05\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.30", "flags": 0, "createdate": "1991-08-23T00:00:00", "modifydate": "1992-01-15T09:24:00", "lines": 7, "newlines": 5, "modlines": 0, "user": "TS00DZL"}, "text": "//TS00DZL$ JOB (TYYYYY,XXXX),'D.LEES.X4311',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=TS00DZL,TIME=(14)\n//*====================================================*//\n//GO EXEC PGM=$DBWAIT,\n//   PARM='DB2INQY1 - PTDB'\n//STEPLIB DD DSN=DBP.JOBLIB,DISP=SHR\n//SYSUDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "REGS": {"ttr": 2833, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x01\\x9f\\x01\\x00\\x01\\x9f\\x11B\\x00%\\x00%\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-19T00:00:00", "modifydate": "2000-01-19T11:42:00", "lines": 37, "newlines": 37, "modlines": 0, "user": "TS00DZL"}, "text": "         MACRO\n         REGS\n         PRINT OFF\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR00      EQU   0\nR01      EQU   1\nR02      EQU   2\nR03      EQU   3\nR04      EQU   4\nR05      EQU   5\nR06      EQU   6\nR07      EQU   7\nR08      EQU   8\nR09      EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nRA       EQU   10\nRB       EQU   11\nRC       EQU   12\nRD       EQU   13\nRE       EQU   14\nRF       EQU   15\n         PRINT ON\n         MEND\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RERASER": {"ttr": 2835, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x98\\x13?\\x01\\x00\\x02\\x1f\\x16Q\\x00\\x08\\x00\\x06\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-05-13T00:00:00", "modifydate": "2000-01-21T16:51:00", "lines": 8, "newlines": 6, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1      EXEC PGM=ERASER,\n//        PARM='DUMMY'\n//STEPLIB DD DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//DD0001  DD   SYSOUT=*,DCB=(RECFM=F,BLKSIZE=80)\n//*=======================================>  OUTPUT    APAS REPORT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RFLATLIB": {"ttr": 2837, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00\\x00\\x01\\x00\\x01\\x8f\\x01\\x00\\x03/\\x10\\x01\\x00\\n\\x00\\n\\x00\\x05\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2000-01-18T00:00:00", "modifydate": "2000-02-01T10:01:00", "lines": 10, "newlines": 10, "modlines": 5, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//********************************************************************\n//POVBFLAT EXEC PGM=FLATLIB\n//STEPLIB  DD   DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//LIBRARY  DD DSN=TST.DZL.XMIT,DISP=SHR\n//SYSPRINT DD DSN=TS00DZL.FLATLIB,DISP=(,CATLG),\n//            SPACE=(CYL,(15,5)),UNIT=SYSDA\n//*           DCB=(DSORG=PS,LRECL=88,RECFM=FB,BLKSIZE=0)\n//*=================================================================*//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RMIGR": {"ttr": 2839, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x03/\\x01\\x00\\x03/\\x16E\\x00<\\x00<\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-01T00:00:00", "modifydate": "2000-02-01T16:45:00", "lines": 60, "newlines": 60, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//************************************************************\n//*\n//* DF/DSS GENERATE DATASET LIST\n//*\n//************************************************************\n//GENERATE EXEC  PGM=ADRDSSU,REGION=8000K,\n//         PARM='TYPRUN=NORUN'\n//SYSPRINT  DD  DSN=&&LIST,SPACE=(TRK,10),DISP=(,PASS),UNIT=SYSDA\n//TAPE1 DD  DUMMY\n//*\n//SYSIN DD *\n  DUMP -\n  SHARE -\n  SPHERE -\n  TOLERATE(ENQFAILURE) -\n  DATASET( -\n  INCLUDE( -\n           VSGP4.CZT.VDTEST.REPORT.** -\n         ) -\n  BY(CREDT,LT,*,-90)  -\n         )   -\n  OUTDDNAME(TAPE1)\n//************************************************************\n//*\n//* PARSER TO PRODUCE A LIST OF DATASET NAMES TO BE MIGRATED\n//*\n//************************************************************\n//PARSER  EXEC SAS\n//DFDSS   DD   DSN=&&LIST,DISP=(OLD,PASS)\n//SYSIN   DD   *\nDATA DFDSS;\nFORMAT CARDOUT $80.;\nINFILE DFDSS LENGTH=L;\nINPUT @27 CLUSTER $7.   @\n      ;\n*PUT CLUSTER;\nIF CLUSTER = :'CLUSTE'; /* ON SYSD SAS READS CLUSTER, ON A-C CLUSTE */\nL = L - 41;\nINPUT @42 DSNAME $VARYING44. L\n      ;\n*PUT CLUSTER DSNAME;\nPUT CARDOUT;\nFILE SASOUT RECFM=FB LRECL=80;\nCARDOUT = DSNAME;\nPUT CARDOUT;\n//SASOUT  DD  DSN=&&SASOUT,DISP=(,PASS),SPACE=(TRK,5)\n//************************************************************\n//*\n//* GENERATE HSM MIGRATE COMMANDS AND LOG ACTIVITY ON CONLOG\n//*\n//************************************************************\n//NUMIGRAT  EXEC  PGM=NUMIGRAT,REGION=17M\n//STEPLIB   DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//CARDIN    DD    DSN=&&SASOUT,DISP=(OLD,PASS)\n//SNAPDD    DD    SYSOUT=*\n//PUTLINE   DD    SYSOUT=*\n//ABENDAID  DD    SYSOUT=*\n//SYSUDUMP  DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RNATSUB": {"ttr": 2841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x03/\\x01\\x00\\x03/\\x10P\\x00P\\x00P\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-01T00:00:00", "modifydate": "2000-02-01T10:50:00", "lines": 80, "newlines": 80, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1     EXEC   ASMACL,PARM.ASM='XREF(SHORT)',\n//       PARM.LKED='LET,LIST,XREF,AC(1)',COND.LKED=(5,LT)\n//SYSLIB DD    BLKSIZE=32760\n//       DD    DSN=TST.DZL.XMIT,DISP=SHR\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//*      DD    DSN=SYS1.AMODGEN,DISP=SHR      CHECK DLIB VOLS!\n//*      DD    DSN=SYS1.AMACLIB,DISP=SHR\n//*      DD    DSN=SYS1.HASPSRC,DISP=SHR\n//SYSIN  DD    *\nDRIVER   CSECT\nDRIVER   AMODE     31\nDRIVER   RMODE     24                   DCB, ACB STILL < 16M !!!\n         PRINT     ON,GEN\n         REGS\n         SAVE      (14,12)\n         BALR      R12,0\n         USING     *,R12\n         ST        R13,SAVE+4\n         LA        R15,SAVE\n         ST        R15,8(R13)\n         LR        R13,R15\n         OPEN      (SYSOUT,OUTPUT),MODE=31\n         SPACE     3\nSNAPINIT NOP       SNAPTERM\n         OPEN      (SNAPDD,OUTPUT)\n         MVI       SNAPINIT+1,X'F0'\n         B         SNAPTERM\nSNAPDD   DCB       DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,         X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU       *\n         SNAP      DCB=SNAPDD,PDATA=REGS,ID=1\nLOAD1    LOAD      EP=NATSUB                       <==VERIFY\n         LR        R9,R0                           R9=EP\n         LA        R5,X'64'(,R9)\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=((9),(5)),ID=2\n         LA        R3,5                            SAFETY\n         LA        R2,0\nCALLIT   EQU        *\n         LA        R1,PARM1(R2)\n         ST        R1,PARMS\n         LA        R1,PARMS\n         LR        R15,R9\n         BALR      R14,R15                         <=GO FOR IT!!\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=(PARM1,PARM99),ID=7\n**       STIMER    WAIT,BINTVL=BINTVL\n         LA        R2,80(,R2)\nBCT      BCT       R3,CALLIT                       REPEAT:N\nRETURN   EQU       *\n         CLOSE     (SNAPDD,,SYSOUT)\n         L         R13,SAVE+4\n         RETURN    (14,12),RC=0\nSAVE     DC        9D'0'\nSTORAGE  DS        CL80\nPARMS    EQU       *\nP1       DC        A(PARM1)\nP2       DC        A(PARM6)\nPARM1    DC       CL80'//XXXXXXX7 JOB (TYYYYY,XXXX),D.LEES,CLASS=R,'\nPARM2    DC       CL80'//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX  '\nPARM3    DC       CL80'//*==========================================='\nPARM4    DC       CL80'//GO EXEC PGM=IEFBR14'\nPARM5    DC       CL80'/*EOF'\nXX       DC       CL2'XX'\n         DS        0F\nPARM6    DS        CL6\nPARM99   EQU       *\nBINTVL   DC        F'03'               3/100SEC\nSYSOUT   DCB       DDNAME=SYSOUT,MACRF=(PM),RECFM=F,BLKSIZE=80,DSORG=PS\n         END\n//LKED.SYSLIB   DD DSN=TST.AUTHLIB,DISP=(SHR)\n//LKED.SYSLMOD  DD DSN=&&LOADLIB(DRIVER),DISP=(,PASS),\n//      DCB=(DBP.JOBLIB),SPACE=(CYL,(1,1,7))\n//LKED.SYSPRINT DD SYSOUT=*\n//TEST     EXEC  PGM=*.S1.LKED.SYSLMOD,REGION=7M\n//STEPLIB  DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR E=32760\n//SNAPDD   DD    SYSOUT=*\n//SYSOUT   DD    SYSOUT=*\n//*SYSUDUMP DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RQDUMP80": {"ttr": 2844, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x019\\x00\\x00\\x00\\x90)\\x0f\\x01\\x00\\x02_\\x110\\x00\\x1b\\x00\\x17\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.57", "flags": 0, "createdate": "1990-10-17T00:00:00", "modifydate": "2000-01-25T11:30:00", "lines": 27, "newlines": 23, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//*=================================================================*//\n//S1 EXEC PGM=QDUMP80,PARM='000000200,000000215,LAST,#SCI'\n//*=================================================================*//\n//STEPLIB DD DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//* PARMS: AAAA,BBBB,LAST\n//*        AAAA IS THE NINE DIGIT STARTING RECORD NUMBER (DEFAULT=1)\n//*        BBBB IS THE NINE DIGIT ENDING   RECORD NUMBER (DEFAULT=1)\n//*        LAST CAUSES THE LAST RECORD TO BE PRINTED     (DEFAULT=NO)\n//*        0,0,LAST  ONLY  LAST RECORD TO BE PRINTED     (DEFAULT=NO)\n//*        ASCI CAUSES ASCII TRANSLATION                 (DEFAULT=NO)\n//* PARMS ARE VERY POSITIONAL. NONE CAN BE SKIPPED. AAAA <= BBBB.\n//*        EXAMPLES:\n//*            PARM='00001'           PRINT THE FIRST RECORD\n//*            PARM='00001,00003'      PRINT RECORDS ONE THRU THREE\n//*            PARM='00003,00003,LAST' PRINT RECORD THREE AND THE LAST\n//*            PARM='00003,00003,XXXX,ASCI'  RECORD THREE AND TRANSLATE\n//* NOTE: UPGRADED TO 9 DIGITS 3/21/91 DZL\n//*=================================================================*//\n//SYSIN   DD DISP=SHR,DSN=TSP.EREP.HISTORY.SYSC.MONTHLY(0)\n//*=================================================================*//\n//*  DCB=(DSORG=PS,RECFM=F,BLKSIZE=256) DIRECTORY\n//*  DCB=(BLKSIZE=32000,RECFM=U) VAX OR LOADLIB\n//SYSPRINT DD SYSOUT=*      (E,,XXX)       PORTRAIT=\n//*SYSUDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RSLEEPY": {"ttr": 3073, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x03/\\x01\\x00\\x03/\\x11\\x08\\x00\\x04\\x00\\x04\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-01T00:00:00", "modifydate": "2000-02-01T11:08:00", "lines": 4, "newlines": 4, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//GO    EXEC PGM=SLEEPY,PARM='99'\n//STEPLIB DD DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RTODAY": {"ttr": 3075, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x03/\\x01\\x00\\x03/\\x15V\\x00G\\x00G\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-02-01T00:00:00", "modifydate": "2000-02-01T15:56:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1     EXEC   ASMACL,PARM.ASM='XREF(SHORT)',\n//       PARM.LKED='LET,LIST,XREF,AC(1)',COND.LKED=(5,LT)\n//SYSLIB DD    BLKSIZE=32760\n//       DD    DSN=TST.DZL.XMIT,DISP=SHR\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//*      DD    DSN=SYS1.AMODGEN,DISP=SHR      CHECK DLIB VOLS!\n//*      DD    DSN=SYS1.AMACLIB,DISP=SHR\n//*      DD    DSN=SYS1.HASPSRC,DISP=SHR\n//SYSIN  DD    *\nDRIVER   CSECT\nDRIVER   AMODE     31\nDRIVER   RMODE     24                   DCB, ACB STILL < 16M !!!\n         PRINT     ON,GEN\n         REGS\n         SAVE      (14,12)\n         BALR      R12,0\n         USING     *,R12\n         ST        R13,SAVE+4\n         LA        R15,SAVE\n         ST        R15,8(R13)\n         LR        R13,R15\n         OPEN      (SYSOUT,OUTPUT),MODE=31\n         SPACE     3\nSNAPINIT NOP       SNAPTERM\n         OPEN      (SNAPDD,OUTPUT)\n         MVI       SNAPINIT+1,X'F0'\n         B         SNAPTERM\nSNAPDD   DCB       DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,         X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU       *\n         SNAP      DCB=SNAPDD,PDATA=REGS,ID=1\nLOAD1    LOAD      EP=TODAY                        <==VERIFY\n         LR        R9,R0                           R9=EP\n         LA        R5,X'64'(,R9)\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=((9),(5)),ID=2\n         LA        R3,1                            SAFETY\n         LA        R2,0\nCALLIT   EQU        *\n         LA        R1,PARMS\n         LR        R15,R9\n         BALR      R14,R15                         <=GO FOR IT!!\n         SNAP      DCB=SNAPDD,PDATA=REGS,STORAGE=(PARM1,PARM99),ID=7\n**       STIMER    WAIT,BINTVL=BINTVL\n         LA        R2,80(,R2)\nBCT      BCT       R3,CALLIT                       REPEAT:N\nRETURN   EQU       *\n         CLOSE     (SNAPDD,,SYSOUT)\n         L         R13,SAVE+4\n         RETURN    (14,12),RC=0\nSAVE     DC        9D'0'\nSTORAGE  DS        CL80\nPARMS    EQU       *\nP1       DC        A(PARM1)\nPARM1    DC       CL9' '\nPARM99   EQU       *\nBINTVL   DC        F'03'               3/100SEC\nSYSOUT   DCB       DDNAME=SYSOUT,MACRF=(PM),RECFM=F,BLKSIZE=80,DSORG=PS\n         END\n//LKED.SYSLIB   DD DSN=TST.AUTHLIB,DISP=(SHR)\n//LKED.SYSLMOD  DD DSN=&&LOADLIB(DRIVER),DISP=(,PASS),\n//      DCB=(DBP.JOBLIB),SPACE=(CYL,(1,1,7))\n//LKED.SYSPRINT DD SYSOUT=*\n//TEST     EXEC  PGM=*.S1.LKED.SYSLMOD,REGION=7M\n//STEPLIB  DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR E=32760\n//SNAPDD   DD    SYSOUT=*\n//SYSOUT   DD    SYSOUT=*\n//HG100280 DD    DUMMY\n//*SYSUDUMP DD    SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RVOLLIE": {"ttr": 3078, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x01\\x15\\x1f\\x01\\x01\\x15\\x1f\\x149\\x00\\x0f\\x00\\x0f\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2001-05-31T00:00:00", "modifydate": "2001-05-31T14:39:00", "lines": 15, "newlines": 15, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXXX JOB (TYYYYY,XXXX),'LEESDA',CLASS=R,REGION=4096K,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//TEST     EXEC  PGM=VOLLIE,COND=(0,LT),PARM='ONLINE'\n//STEPLIB  DD    DSN=TST.DZL.XMIT.LOAD,DISP=SHR\n//SNAPDD   DD    SYSOUT=*\n//SYSIN    DD    *\nTEMA3A\nTEMA3B\nTEMA3C\nRV111C\nRV1300\n/*\n//SYSOUT   DD    SYSOUT=*\n//SYSABEND DD    SYSOUT=T\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RVSAMZAP": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x04\\x00\\x00\\x01\\x00\\x03/\\x01\\x00\\x03/\\x16@\\x00\\r\\x00\\x0c\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.04", "flags": 0, "createdate": "2000-02-01T00:00:00", "modifydate": "2000-02-01T16:40:00", "lines": 13, "newlines": 12, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXX9 JOB (TYYYYY,XXXX),'D.LEES',CLASS=R,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//*=================================================================*//\n//SYSUT1    EXEC PGM=VSAMZAP\n//STEPLIB DD DISP=SHR,DSN=TST.DZL.XMIT.LOAD\n//SYSLIB DD DISP=SHR,DSN=VSGP4.TST.MUDDLE\n//*\n//SYSPRINT  DD SYSOUT=*   (E,,XXX),COPIES=1     G=VERT. E=HORIZ.\n//SYSIN     DD   *\nRBA 00000000\nVER 0009 E9C5D9D6\nREP 0009 40404040\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SLEEPY": {"ttr": 3082, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x00\\x01\\x9f\\x01\\x00\\x01\\x9f\\x10G\\x00;\\x00;\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2000-01-19T00:00:00", "modifydate": "2000-01-19T10:47:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "TS00DZL"}, "text": "*===========================================*\nSLEEPY   CSECT        D. LEES 02/99  NUSCO  *\n*===========================================*\n* PARM=NN SECONDS                     | DZL *\n*===========================================*\n         PRINT  GEN\n         SAVE   (14,12)\n         BALR   R12,0\n         USING  *,R12\n         ST     R13,SAVE+4\n         LA     R0,SAVE\n         ST     R0,8(R13)\n         LR     R13,R0\n         L      R3,0(R1)\n*===========================================*\nBEGIN    EQU   *\n         CLC   0(2,R3),=X'0002'              FIXED 2\n         BNE   DFLT                          DEFAULT\nCHECK    EQU   *\n         XC    DWORD,DWORD\n         PACK  DWORD,2(2,R3)\n         CP    DWORD,=P'100'                 99 SEC. MAX\n         BL    SETTIME\nDFLT     EQU   *\n         B     SETPOP\nSETTIME  EQU   *\n         MVC   INTVL+4(2),2(R3)\nSETPOP   EQU   *\n         STIMER WAIT,DINTVL=INTVL\n*===========================================*\nGOBACK   EQU   *\n         L     R13,SAVE+4\n         RETURN (14,12),RC=0\n*===========================================*\nSAVE     DC    9D'0'\nDWORD    DC    D'0'            <------------ ALIGNED D\n         DS    0D\nINTVL    DS    C'00001000'\n*                HHMMSSHH                 DEFAULT 10S.\nKILL     DC    F'0'\n*===========================================*\n         LTORG\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "TODAY": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x10\\x00\\x00\\x00\\x97\\t/\\x00\\x97\\t\\x7f\\x16D\\x00\\x9e\\x00m\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.16", "flags": 0, "createdate": "1997-04-02T00:00:00", "modifydate": "1997-04-07T16:44:00", "lines": 158, "newlines": 109, "modlines": 0, "user": "TS00DZL"}, "text": "         PRINT   GEN\n*******************************************\n* TODAY IS A SUBROUTINE WHICH RETURNS THE *\n* DAY OF THE WEEK. RETURNED VALUE IS NINE *\n* CHARACTERS. INPUT FROM TIME MACRO IS IN *\n* CCYYDDDF PACKED DECIMAL FORMAT IN R1.   *\n* EXAMPLE: CALL TODAY,(WEEKDAY),VL        *\n* WHERE WEEKDAY IS C9                     *\n*                         D.LEES 1997/091 *\n*******************************************\n* BASE YEAR (IBM) IS JAN 1,1900           *\n*******************************************\nTODAY    CSECT\n         STM     R14,R12,12(R13)\n         BALR    R12,0\n         USING   *,R12\n         LA      R2,SAVEAREA\n         ST      R2,8(R13)\n         ST      R13,SAVEAREA+4\n         LR      R13,R2\n         LR      R11,R1                    SAVE FOR RETURN VALUE\n         L       R1,0(R11)\n         L       R1,0(R1)\n*--------------------------------------------------------------------\nSTEP1    EQU     * ----------------------- GET MVS TIME\n*--------------------------------------------------------------------\n         TIME    BIN\n         STH     R1,DDD                    JULIAN 0000DDDF\n         ST      R1,FWORD     DIAGNOSTIC\n         SP      DDD,=P'1'                 MAKE 0 RELATIVE\n         SRL     R1,12                     JULIAN 000CCYYF\n         ST      R1,YYYY\n         OI      YYYY+3,X'0F'              SIGN IT +\n         TM      YYYY+2,X'10'              MASK=00010000\n         BO      ADD20                     TIME RETURNS CENTURY FLAG\n         AP      YYYY,BASEYR               0=19TH 1=20TH\n         B       STEP2\nADD20    EQU     *\n         NI      YYYY+2,X'EF'              REMOVE FLAG BIT\n         AP      YYYY,=P'2000'\n*--------------------------------------------------------------------\nSTEP2    EQU     * ----------------------- BASE CALCULATIONS\n*--------------------------------------------------------------------\n*\n*   REM((#-OF-YEARS + LEAP-YEARS + JULIAN-DAY) / 7 ) = 0->6 {MON-FRI}\n*\n         ZAP     WORKP4,YYYY\n         SP      WORKP4,BASEYR\n         ZAP     #YEARS,WORKP4             # OF YEARS SINCE BASE\n*\n         ZAP     WORKP4,#YEARS\n         DP      WORKP4,=PL2'4'\n         ZAP     #LEAPS,WORKP4(2)          # OF \"LEAP\" YEARS\n*\n         ZAP     WORKP4,#YEARS\n         DP      WORKP4,=PL2'100'\n         ZAP     #CENTS,WORKP4(2)          # OF NN00 YEARS SINCE BASE\n         CP      #CENTS,=P'0'\n         BE      SIMPLE\n*--------------------------------------------------------------------\nSTEP3    EQU     * ----------------------- FIND ACTUAL # OF DAYS\n*--------------------------------------------------------------------\n         ZAP     #COUNT,#CENTS\nLEAPER   EQU     *\n         ZAP     WORKP4,#CTEST\n         CP      WORKP4,=P'3600'            RULE: 3600 NOT A LEAP YEAR\n         BE      NOLEAP\n         DP      WORKP4,=PL2'400'\n         CP      WORKP4+2(2),=P'0'\n         BE      NEXTLEAP                  RULE: REM(YR00/400)=0 > LEAP\n         B       NOLEAP                    RULE: YR00'S ARE NOT LEAPS\nNOLEAP   EQU     *\n         AP      #NOLEAPS,=P'1'            REDUCE #LEAPS BY #NOLEAPS\nNEXTLEAP EQU     *\n         AP      #CTEST,=P'100'            TEST EACH '00' YEAR FOR /400\n         SP      #COUNT,=P'1'\n         CP      #COUNT,=P'0'\n         BNZ     LEAPER\nSIMPLE   EQU     *\n         SP      #LEAPS,#NOLEAPS           TRUE # OF LEAP DAYS\n         ZAP     WORKP4,#YEARS\n         MP      WORKP4,=P'365'            YEARS -> DAYS\n         AP      WORKP4,#LEAPS             ADD # OF LEAPDAYS\n         AP      WORKP4,DDD                # OF DAYS THIS YEAR\n         DP      WORKP4,=PL1'7'\n         XC      WORKP4(3),WORKP4          REMAINDER (0->6)\n*--------------------------------------------------------------------\nSTEP4    EQU     * ----------------------  RETURN THE DAY NAME\n*--------------------------------------------------------------------\n         MP      WORKP4,=P'9'              TABLE OFFSET\n         ZAP     DWORD,WORKP4              REMAINDER = INDEX TO DAY\n         CVB     R10,DWORD\n         LA      R10,DAYS(R10)\n         L       R11,0(R11)                RETURN VALUE\n         MVC     0(9,R11),0(R10)           DAYNAME!\n*        MVC     WORKSTOR(RESLEN),RESETS   SERIALLY REUSABLE CODE\n*+++++++++++++++++++++++++++++++++*\n*+++++++++++++++++++++++++++++++++*\nTERM     EQU     *\n         L       R13,SAVEAREA+4\n         LM      R14,R12,12(R13)\n         XR      R15,R15\n         BR      R14\n*+++++++++++++++++++++++++++++++++*\nSAVEAREA DC      18F'0'\nDWORD    DC      D'0'\nFWORD    DC      F'0'\n         DS      0F\nWORKSTOR EQU     *\nYYYY     DC      PL4'0'\nBASEYR   DC      PL4'1900'          REPRESENTS 1/1/1900\n#CTEST   DC      PL4'1900'          REPRESENTS 1/1/1900\n#COUNT   DC      PL4'0'\nWORKP4   DC      PL4'0'\n#YEARS   DC      PL4'0'\n#LEAPS   DC      PL4'0'\n#NOLEAPS DC      PL4'0'\n#CENTS   DC      PL4'0'\n         DS      0H\nDDD      DC      PL2'0'\nRESETS   EQU     *\nRES1     DC      PL4'0'\nRES2     DC      PL4'1900'          REPRESENTS 1/1/1900\nRES3     DC      PL4'1900'          REPRESENTS 1/1/1900\nRES4     DC      PL4'0'\nRES5     DC      PL4'0'\nRES6     DC      PL4'0'\nRES7     DC      PL4'0'\nRES8     DC      PL4'0'\nRES9     DC      PL4'0'\n         DS      0H\nRES10    DC      PL2'0'\nRESLEN   EQU     *-RESETS\nDAYS     EQU     *\n         DC      CL9'MONDAY'        1/1/1900 WAS A MONDAY\n         DC      CL9'TUESDAY'\n         DC      CL9'WEDNESDAY'\n         DC      CL9'THURSDAY'\n         DC      CL9'FRIDAY'\n         DC      CL9'SATURDAY'\n         DC      CL9'SUNDAY'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VOLLIE": {"ttr": 3088, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00%\\x0f\\x01\\x01\\x15\\x1f\\x14@\\x01\\x11\\x01\\x1d\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-09-06T00:00:00", "modifydate": "2001-05-31T14:40:00", "lines": 273, "newlines": 285, "modlines": 0, "user": "TS00DZL"}, "text": "//XXXXXXXX JOB (TYYYYY,XXXX),'LEESDA',CLASS=R,REGION=4096K,\n//      MSGCLASS=T,MSGLEVEL=1,NOTIFY=XXXXXXX,TIME=(,30)\n//*=================================================================*//\n//S1     EXEC   ASMACL,\n//       PARM.ASM='XREF(SHORT),SYSPARM(NODEBUG)',\n//       PARM.LKED='LET,LIST,XREF,AC(1)',COND.LKED=(5,LT)\n//SYSLIB DD    BLKSIZE=32760\n//       DD    DSN=DBP.MACLIB,DISP=SHR\n//       DD    DSN=TST.DZL.DATA,DISP=SHR\n//       DD    DSN=SYS1.MODGEN,DISP=SHR\n//*      DD    DSN=SYS1.AMODGEN,DISP=SHR      CHECK DLIB VOLS!\n//       DD    DSN=SYS1.AMACLIB,DISP=SHR,UNIT=SYSDA,VOL=SER=DLB001\n//*      DD    DSN=SYS1.HASPSRC,DISP=SHR,\n//*      UNIT=SYSDA,VOL=SER=XDLB1B\n//SYSIN  DD    *\nVOLLIE CSECT                            D.LEES 7/2000\nVOLLIE AMODE       24\nVOLLIE RMODE       24                   DCB, ACB STILL < 16M !!!\n****************************************\n* VOLLIE TAKES A LIST OF VOLSERS AS IN-*\n* PUT AND VARIES THEM ONLINE OR OFFLINE*\n* BASED ON A PARM= SETTING. VOLLIE, AS *\n* IN SWITCH VOLUMES BACK AND FORTH . . *\n* MUST RUN AS AN AUTHORIZED PROGRAM.   *\n****************************************\n* UCBSCAN WAS USED TO LOCATE ALL POTEN-*\n* TIAL DEVICE ADDRESSES THEN UCBLOOK   *\n* PROVIDES THE EXTENSION DATA FOR DE-  *\n* DERMINING ALLOCATION STATUS. VOLLIE  *\n* WILL SKIP OVER ANY DEVICE THAT IS    *\n* ALLOCATED TO THE CURRENT SYSTEM.     *\n****************************************\n* PARM='ONLINE' OR PARM='OFFLINE'      *\n* //SYSIN: VOLSER IN CC1-6             *\n* //SYSOUT: SYSOUT=*                   *\n* //SNAPDD: SYSOUT=* (OPTIONAL)        *\n****************************************\n**> R12 = BASE                         *\n**> R11 = UCB COMMON                   *\n**> R10 = UCB COMMON EXTENSION         *\n**> R9  = INTERNAL BAL                 *\n****************************************\n*   D.LEES, 2000                       *\n****************************************\n         PRINT     NOGEN\n         SAVE      (14,12)\n         BALR      R12,0\n         USING     *,R12\n         ICM       R12,B'1000',CLEAR       WILL ALSO BE USED IN 31-BIT\n         ST        R13,SAVE+4\n         LA        R15,SAVE\n         ST        R15,8(R13)\n         LR        R13,R15\n*******************\n* INITIAL         *\n*******************\n         L         R1,0(R1)             PARM='ONLINE|OFFLINE'\n         LH        R2,0(R1)\n         BCTR      R2,0\n         EX        R2,MVOPTN\n         CLC       OPTION,ON            VALIDATE OPTION\n         BE        OPTIONOK\n         CLC       OPTION,OFF\n         BNE       RC8\nOPTIONOK EQU       *\n         OPEN      (SYSIN,INPUT,SYSOUT,OUTPUT)\n         AIF       ('&SYSPARM' NE 'DEBUG').NOSNAPO\nSNAPINIT NOP       SNAPTERM\n         OPEN      (SNAPDD,OUTPUT)\n         MVI       SNAPINIT+1,X'F0'\n         B         SNAPTERM\nSNAPDD   DCB       DDNAME=SNAPDD,MACRF=(W),DSORG=PS,RECFM=VBA,         X\n               LRECL=125,BLKSIZE=882\nSNAPTERM EQU    *\n.NOSNAPO ANOP\n         PUT       SYSOUT,HEADING\n         MODESET   KEY=ZERO,MODE=SUP    MODESET!\n         EJECT\n*******************\n* MAINLINE        *\n*******************\nGETVOL   EQU       *\n         GET       SYSIN,VOLSER\n         XC        WORKAREA,WORKAREA    RESET WORKAREA F/NEW VOLSER\n         LA        R1,SETA31            31-BIT TO ALLOW FOR HIGH UCBS\n         O         R1,MAKE31\n         BSM       0,R1\nSETA31   EQU       *\nUCBSCAN  EQU       *                     SEARCH FOR VOLSER MATCH\n         UCBSCAN   ADDRESS,                                            C\n               WORKAREA=WORKAREA,                                      C\n               DEVCLASS=DASD,                                          C\n               UCBPTR=UCBPTR,                                          C\n               DYNAMIC=YES,                                            C\n               LOC=ANY,                                                C\n               RANGE=ALL,                                              C\n               NOPIN\n         LTR       R15,R15              Q. GOT A UCB?\n         BNZ       RC4                  SCANNED ALL UCBS + NO JOY\n         L         R11,UCBPTR\n         USING     UCBOB,R11             ADDRESS UCB TO TEST VOLSER\n         CLC       UCBVOLI,VOLSER\n         BE        FOUND                 FOUND VOLSER MATCH\n         B         UCBSCAN               NO MATCH / TRY NEXT UCB\nFOUND    EQU       *                     PROCESS VOLSER\n         AIF       ('&SYSPARM' NE 'DEBUG').NOSNAP1\n         MVC       DEBUG2,UCBCHAN\n         SNAP DCB=SNAPDD,PDATA=REGS,STORAGE=(AA,ZZ),ID=1\n.NOSNAP1 ANOP\n         UCBLOOK   VOLSER=VOLSER,                                      C\n               DEVCLASS=DASD,                                          C\n               UCBPTR=UCBPTR,                                          C\n               UCBCXPTR=UCBCXPTR,                                      C\n               DYNAMIC=YES,                                            C\n               LOC=ANY,                                                C\n               RANGE=ALL,                                              C\n               PIN,                                                    C\n               TEXT=PTEXT,                                             C\n               PTOKEN=PTOKEN\n         LTR       R15,R15              Q. GOT A UCB?\n         BNZ       RC12                 SCAN FOUND / LOOK FAILED . .\nALLOC    EQU       *\n         L         R11,UCBPTR\n         USING     UCBOB,R11            MAP COMMON\n         L         R10,UCBCXPTR\n         USING     UCBCMEXT,R10         MAP COMMON EXTENSION\n         AIF       ('&SYSPARM' NE 'DEBUG').NOSNAP2\n         MVC       DEBUG1,UCBASID\n         SNAP DCB=SNAPDD,PDATA=REGS,STORAGE=(AA,ZZ),ID=2\n.NOSNAP2 ANOP\n         TM        UCBSTAT,UCBALOC      DEVICE ALLOCATED?\n         BNO       SET                  NO\n         CLC       UCBASID,CLEAR        ALLOC ON THIS SYSTEM?\n         BE        SET                  NO, GO AHEAD AND SET STATUS\n         UCBPIN    UNPIN,PTOKEN=PTOKEN  DO NOT PROCESS; > NEXT\n         B         RC4\nSET      EQU       *\n         CLC       OPTION,ON\n         BNE       VARYOFF\nVARYON   EQU       *\n         OI        UCBSTAT,UCBONLI      SET VARY FLAG TO ON\n         NI        UCBFLA,BOXOFF        SET BOXED FLAG OFF\n         B         UNPIN\nVARYOFF  EQU       *\n         NI        UCBSTAT,UCBOFFLI     SET VARY FLAG TO OFF\n         NI        UCBFLA,BOXOFF        SET BOXED FLAG OFF\nUNPIN    EQU       *\n         UCBPIN    UNPIN,PTOKEN=PTOKEN  UNPIN (EOJ WILL CLEANUP)\nPOSTIT   EQU       *\n         MVC       MESSAGE,MSGSKEL1\n         MVC       MESSAGE(6),VOLSER\n         BAL       R9,CVTUNIT           RETURNS UNIT FIELD\n         MVC       MESSAGE+7(4),UNIT\n         MVC       MESSAGE+19(7),OPTION\n         LA        R1,SETA24\n         N         R1,MAKE24\n         BSM       R0,R1\nSETA24   EQU       *\n         PUT       SYSOUT,MESSAGE\n         B         GETVOL\n*******************\n* RETURN          *\n*******************\nRETURN   EQU       *\n         MODESET   KEY=NZERO,MODE=PROB    /*PREVENT S30A*/\n         PUT       SYSOUT,TRAILER\n         CLOSE     (SYSIN,,SYSOUT)\n         AIF       ('&SYSPARM' NE 'DEBUG').NOSNAPC\n         CLOSE     (SNAPDD)\n.NOSNAPC ANOP\n         L         R13,SAVE+4\n         L         R15,RETCODE\n         RETURN    (14,12),RC=(15)\nRC4      EQU       *\n         MVC       MESSAGE,MSGSKEL1\n         MVC       MESSAGE(6),VOLSER\n         BAL       R9,CVTUNIT\n         MVC       MESSAGE+7(4),UNIT\n         MVC       MESSAGE+19(6),FAILED\n         PUT       SYSOUT,MESSAGE\n         LA        R0,4\n         ST        R0,RETCODE\n         B         GETVOL\nRC8      EQU       *\n         WTO       '++++ UNRECOGNIZED PARAMETER ++++',ROUTCDE=11\n         LA        R15,8\n         ST        R15,RETCODE\n         B         RETURN\nRC12     EQU       *\n         WTO       '++++ UTTER AND COMPLETE FAILURE ++++',ROUTCDE=11\n         LA        R15,12\n         ST        R15,RETCODE\n         B         RETURN\n*******************\n* CVTUNIT         *\n*******************\nCVTUNIT  EQU       *  ONE OF MANY, MANY WAYS . . . .\n         ST        R9,CALLSAVE\n         SR        R2,R2\n         SR        R3,R3\n         LA        R8,UCBCHAN\n         IC        R2,0(R8)   WHERE RX -> 1 BYTE OF HEX (2 CHARACTERS)\n         SRDL      R2,4 SHIFT +4 BITS TO THE RIGHT (1 NIBBLE INTO R3)\n         SRL       R3,28 SHIFT +28 BITS TO THE RIGHT (NIBBLE SHIFT)\n         STC       R2,UNIT+0\n         STC       R3,UNIT+1\n         SR        R2,R2\n         SR        R3,R3\n         IC        R2,1(R8)   WHERE RX -> 1 BYTE OF HEX (2 CHARACTERS)\n         SRDL      R2,4 SHIFT +4 BITS TO THE RIGHT (1 NIBBLE INTO R3)\n         SRL       R3,28 SHIFT +28 BITS TO THE RIGHT (NIBBLE SHIFT)\n         STC       R2,UNIT+2\n         STC       R3,UNIT+3\n         TR        UNIT(4),TRTBL\n         L         R9,CALLSAVE\n         BR        R9\n*******************\n* STORAGE         *\n*******************\nAA       EQU   *\nCALLSAVE DS    F\nMVOPTN   MVC   OPTION(0),2(R1)\nOPTION   DC    CL7' '                                                -\nPTOKEN   DS    CL8\nRETCODE  DC    F'0'\nSAVE     DS    9D\nTARGET   DS    CL4\nUCBPTR   DS    A\nUCBCXPTR DS    A\nUNIT     DS    CL4\nWORKAREA DC    XL100'00'                          UCBSCAN WORKA.\nDEBUG1   DS    F\nDEBUG2   DS    F\nZZ       EQU   *\n*******************\n* CONSTANTS       *\n*******************\nCLEAR    DC    A(0)\nFAILED   DC    C'FAILED'\nHEADING  DC    CL80'THE VOLLIE REPORT'\n         DS    0F                                  ALIGN MASKS\nMAKE24   DC    X'7FFFFFFF'\nMAKE31   DC    X'80000000'\nMSGSKEL1 DC    CL80'______ ____ VARIED ______'\nOFF      DC    CL7'OFFLINE'\nON       DC    CL7'ONLINE'\nPTEXT    DC    CL58'PINNED BY THE VOLLIE PROGRAM'\nTRAILER  DC    CL80'GAME, SET, AND MATCH'\nTRTBL    DC    C'0123456789ABCDEF'\n*******************\n* DCBS / BUFFERS  *\n*******************\nSYSIN    DCB       DDNAME=SYSIN,MACRF=(GM),LRECL=80,                   +\n               EODAD=RETURN,DSORG=PS\nVOLSER   DS    CL6,CL74\n*\nSYSOUT   DCB       DDNAME=SYSOUT,MACRF=(PM),RECFM=FB,                  +\n               LRECL=80,BLKSIZE=0,DSORG=PS\nMESSAGE  DC    CL80' '\n*******************\n* DSECTS          *\n*******************\n         PRINT     NOGEN\n         IEFUCBOB  PREFIX=YES\n*******************\n* EQUATES         *\n*******************\nBOXOFF   EQU      B'11111110'\nUCBOFFLI EQU      B'01111111'\n         REGS\n         END\n//LKED.SYSLMOD  DD DSN=TST.DZL.XMIT.LOAD(VOLLIE),DISP=SHR\n//LKED.SYSOUT DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSAMZAP": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x00\\x02\\x0f\\x01\\x00\\x02\\x0f\\x10E\\x00\\xcf\\x00\\xcf\\x00\\x00\\xe3\\xe2\\xf0\\xf0\\xc4\\xe9\\xd3@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2000-01-20T00:00:00", "modifydate": "2000-01-20T10:45:00", "lines": 207, "newlines": 207, "modlines": 0, "user": "TS00DZL"}, "text": "*          DATA SET DBVSAMZAP  AT LEVEL 001 AS OF 08/10/84\nVSAMZAP  CSECT                            D. LEES  4-83                 00001\n*********************************************************************** 00002\n*    VSAMZAP IS A VSAM UTILITY INTENDED FOR USE IN PLACE OF AMASZAP   * 00003\n*    FOR REPAIR OF IMS DATABASE POINTERS. ZAPPING VSAM DATABASES      * 00004\n*    WITH AMASZAP REQUIRES LOCATING THE ACTUAL CCCCHHHHRR OF THE      * 00005\n*    RECORD WITHIN A DATASPACE AND ZAPPING THE VTOC TO TURN OFF THE   * 00006\n*    PASSWORD BIT. THIS UTILITY USES VSAM ACCESS AND NEEDS ONLY       * 00007\n*    THE RBA OF THE RECORD AND THE CLUSTER NAME.                      * 00008\n*    CONTROL CARDS:   (TOTALLY FIXED FORM)                            * 00009\n*    -------------                                                    * 00010\n*    RBA XXXXXXXX               RBA     AS AN EIGHT DIGIT HEX NUMBER  * 00011\n*                                       (RBN-OFFSET)                  * 00012\n*    VER OOOO XXXXXXXX          VERIFY  FOUR DIGIT HEX OFFSET (32767) * 00013\n*                                       EIGHT DIGIT HEX DATA          * 00014\n*                                       (SETS A GO/NOGO SWITCH)       * 00015\n*    REP OOOO XXXXXXXX          REPLACE FOUR DIGIT HEX OFFSET (32767) * 00016\n*                                       EIGHT DIGIT HEX DATA          * 00017\n*                                                                     * 00018\n*    *                          COMMENT CARD                          * 00019\n*                                                                     * 00020\n*                                                                     * 00021\n*   NOTES:                                                            * 00022\n*   -----                                                             * 00023\n*   THIS WORKS VERY MUCH LIKE AMASZAP SO IT'S A GOOD IDEA TO VERIFY   * 00024\n*   EVERYTHING BEFORE DOING ANY REPLACES.                             * 00025\n*                                                                     * 00026\n*   YES, IT WRITES THE RECORD OUT FOR EVERY REPLACE. YOU CAN ENHANCE  * 00027\n*   IT IF YOU LIKE.                                                   * 00028\n*********************************************************************** 00029\n         PRINT  NOGEN                                                   00030\n         REGS                                                           00031\n         SAVE   (14,12)                                                 00032\n         BALR   R12,0                                                   00033\n         USING  *,R12                                                   00034\n         ST     R13,SAVE+4                                              00035\n         LA     R13,SAVE                                                00036\nINIT     EQU    *                                                       00037\n         OPEN   (SYSIN,INPUT,SYSPRINT,OUTPUT)                           00038\n         GENCB  BLK=ACB,AM=VSAM,DDNAME=SYSLIB,MACRF=(ADR,DIR,OUT)       00039\n         LTR    R15,R15                                                 00040\n         BZ     GENACBOK                                                00041\nABEND201 ABEND  201,DUMP                                                00042\nGENACBOK EQU    *                                                       00043\n         LR     R3,R1                  R3->ACB                          00044\n         OPEN   ((R3))                                                  00045\n         SHOWCB ACB=(R3),AREA=LRECL,LENGTH=4,FIELDS=(LRECL)             00046\n         OI     LRECL,X'80'                                             00047\n         GETMAIN LU,LA=LRECL,A=WHERE,SP=001                             00048\n         NI     LRECL,X'00'                                             00049\n         L      R4,WHERE                R4->IOAREA                      00050\n         GENCB  BLK=RPL,ACB=(R3),AM=VSAM,AREA=(R4),                    X00051\n               AREALEN=LRECL,ARG=RBA,OPTCD=(ADR,DIR,UPD,MVE)            00052\n         LTR    R15,R15                                                 00053\n         BZ     GENRPLOK                                                00054\nABEND202 ABEND  202,DUMP                                                00055\nGENRPLOK EQU    *                                                       00056\n         LR     R5,R1                    R5->RPL                        00057\n*--------------------------------------------                           00058\n*        MAIN PROCESS                                                   00059\n*--------------------------------------------                           00060\nGETCARD  EQU    *                                                       00061\n         GET    SYSIN,CARD                                              00062\n         PUT    SYSPRINT,CARD                                           00063\n         CLC    CARD(3),=C'RBA'                                         00064\n         BE     SETRBA                                                  00065\n         CLC    CARD(3),=C'VER'                                         00066\n         BE     VERIFY                                                  00067\n         CLC    CARD(3),=C'REP'                                         00068\n         BE     REPLACE                                                 00069\n         CLI    CARD,C'*'                                               00070\n         BE     COMMENT                                                 00071\n         B      SYNERR                                                  00072\n*--------------------------------------------                           00073\n*        PROCESSING                                                     00074\n*--------------------------------------------                           00075\nSETRBA   EQU    *                                                       00076\n         LA     R6,CARD+4                R6->CC.                        00077\n         LA     R7,RBA                                                  00078\n         LA     R8,4                                                    00079\nRBALOOP  EQU    *                                                       00080\n         MVC    TWOBYTES,0(R6)                                          00081\n         CALL   CVX,(TWOBYTES,ONEBYTE)                                  00082\n         LTR    R15,R15                                                 00083\n         BNZ    SYNERR                                                  00084\n         MVC    0(1,R7),ONEBYTE                                         00085\n         LA     R7,1(R7)                                                00086\n         LA     R6,2(R6)                                                00087\n         BCT    R8,RBALOOP                                              00088\n         B      GETCARD                                                 00089\n*--------------------------------------------                           00090\nVERIFY   EQU    *                                                       00091\n         BAL    R11,OFFSET                                              00092\n         BAL    R11,DATA                                                00093\n         BAL    R11,GETVSAM                                             00094\nVER      EQU    *                                                       00095\n         LH     R9,VSOFFSET         BEWARE (-)                          00096\n         LTR    R9,R9                                                   00097\n         BM     SYNERR                                                  00098\n         LA     R9,0(R4,R9)        R9-> VERIFY LOCATION                 00099\n         CLC    0(4,R9),VSDATA                                          00100\n         BE     VERIFIED                                                00101\n         PUT    SYSPRINT,=CL80'VERIFY FAILED'                           00102\n         MVI    VERSW,X'00'                                             00103\n         OI     RETCODE+3,X'04'                                         00104\nVERIFIED EQU    *                                                       00105\n         B      GETCARD                                                 00106\n*--------------------------------------------                           00107\nREPLACE  EQU    *                                                       00108\n         BAL    R11,OFFSET                                              00109\n         BAL    R11,DATA                                                00110\n         BAL    R11,GETVSAM                                             00111\n         CLI    VERSW,X'00'                                             00112\n         BE     BYPASSED                                                00113\nZAP      EQU    *                                                       00114\n         LH     R9,VSOFFSET         BEWARE (-)                          00115\n         LTR    R9,R9                                                   00116\n         BM     SYNERR                                                  00117\n         LA     R9,0(R4,R9)        R9-> VERIFY LOCATION                 00118\n         MVC    0(4,R9),VSDATA                                          00119\n         PUT    RPL=(R5)                                                00120\n         LTR    R15,R15                                                 00121\n         BZ     REPLACED                                                00122\n         PUT    SYSPRINT,=CL80'REPLACE FAILED'                          00123\nABEND204 ABEND  204,DUMP                                                00124\nREPLACED EQU    *                                                       00125\nBYPASSED EQU    *                                                       00126\n         B      GETCARD                                                 00127\n*--------------------------------------------                           00128\nSYNERR   EQU    *                                                       00129\n         PUT    SYSPRINT,=CL80'SYNTAX ERROR'                            00130\n         MVI    VERSW,X'00'     SYNTAX ERROR PREVENTS REPLACES          00131\n         OI     RETCODE+3,X'08'                                         00132\n         B      GETCARD                                                 00133\n*--------------------------------------------                           00134\nCOMMENT  EQU    *                                                       00135\n         PUT    SYSPRINT,CARD                                           00136\n         B      GETCARD                                                 00137\n*--------------------------------------------                           00138\nTERM     EQU    *                                                       00139\n         CLOSE  ((R3))                                                  00140\n         CLOSE  (SYSIN,,SYSPRINT)                                       00141\n         L      R15,RETCODE                                             00142\n         L      R13,SAVE+4                                              00143\n         RETURN (14,12),RC=(15)                                         00144\n*--------------------------------------------                           00145\n*        SUBROUTINES                                                    00146\n*--------------------------------------------                           00147\nGETVSAM  EQU    *                                                       00148\n         GET    RPL=(R5)           R5->RPL                              00149\n         LTR    R15,R15                                                 00150\n         BZR    R11                RETURN-SUCCESSFUL                    00151\n         CLI    RPLERREG-IFGRPL(R5),X'08'                               00152\n         BNE    ABEND203                                                00153\n         CLC    RPLCNDCD-IFGRPL(2,R5),=X'0004'   DUMMY,AMP=AMORG        00154\n         BNE    ABEND203                                                00155\n         PUT    SYSPRINT,=CL80'ITS NOT NICE TO FOOL MOTHER VSAM'        00156\nABEND203 PUT    SYSPRINT,=CL80'VSAM READ FAILED'                        00157\n         ABEND  203,DUMP                                                00158\n*--------------------------------------------                           00159\nOFFSET   EQU    *                                                       00160\n         LA     R6,CARD+4                                               00161\n         LA     R7,VSOFFSET                                             00162\n         LA     R8,2                                                    00163\nOLOOP    EQU    *                                                       00164\n         MVC    TWOBYTES,0(R6)                                          00165\n         CALL   CVX,(TWOBYTES,ONEBYTE)                                  00166\n         LTR    R15,R15                                                 00167\n         BNZ    SYNERR                                                  00168\n         MVC    0(1,R7),ONEBYTE                                         00169\n         LA     R6,2(R6)                                                00170\n         LA     R7,1(R7)                                                00171\n         BCT    R8,OLOOP                                                00172\n         BR     R11                                                     00173\n*--------------------------------------------                           00174\nDATA     EQU    *                                                       00175\n         LA     R6,CARD+9                                               00176\n         LA     R7,VSDATA                                               00177\n         LA     R8,4                                                    00178\nDLOOP    EQU    *                                                       00179\n         MVC    TWOBYTES,0(R6)                                          00180\n         CALL   CVX,(TWOBYTES,ONEBYTE)                                  00181\n         LTR    R15,R15                                                 00182\n         BNZ    SYNERR                                                  00183\n         MVC    0(1,R7),ONEBYTE                                         00184\n         LA     R6,2(R6)                                                00185\n         LA     R7,1(R7)                                                00186\n         BCT    R8,DLOOP                                                00187\n         BR     R11                                                     00188\n*--------------------------------------------                           00189\nSYSIN    DCB   DDNAME=SYSIN,MACRF=(GM),DSORG=PS,RECFM=FB,              X00190\n               LRECL=80,EODAD=TERM                                      00191\nSYSPRINT DCB   DDNAME=SYSPRINT,MACRF=(PM),DSORG=PS,RECFM=FB,           X00192\n               LRECL=80,BLKSIZE=80,BUFNO=1                              00193\nSAVE     DC    9D'0'                                                    00194\nWHERE    DC    F'0'                                                     00195\nLRECL    DC    F'0'                                                     00196\nRBA      DC    F'0'                                                     00197\nVSDATA   DC    F'0'                                                     00198\nRETCODE  DC    F'0'                                                     00199\nVSOFFSET DC    H'0'                                                     00200\nCARD     DC    CL80' '                                                  00201\nTWOBYTES DC    CL2' '                                                   00202\nONEBYTE  DC    CL1' '                                                   00203\nVERSW    DC    X'FF'         DEFAULT IS VERIFIED.                       00204\n         IFGRPL  AM=VSAM,DSECT=YES                                      00205\n         END                                                            00206\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT315/FILE315.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT315", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}