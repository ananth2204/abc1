  /* REXX EXEX   -  COMPUTE CISZ AND RECORDSIZE OF NOSQLZ DATABASE */
  /*                                                               */
  /* OUTPUT FILE: NSQOUTP FOR NOSQLZ TABLE INIT PARAMETERS         */
  /* OUTPUT FILE: NSQOUTI FOR IDCAMS                               */
  /*                                                               */
  ARG KLDL  RECNB  VERSNB

  DATA_PFX = 18        /* NUMBER OF BYTES IN A DATA RECORD,
                          NOT COUNTING THE KEY AND DATA FIELDS     */
  MAX_CISZ = 18432     /* MAXIMUM CI SIZE SUPPORTED                */
  MIN_CISZ = 512       /* MINIMUM CI SIZE SUPPORTED                */
  MAX_RSZ  = 4096*18432   /* MAXIMUM SIZE OF A LOGICAL RECORD      */
  MIN_RSZ  = MIN_CISZ - DATA_PFX -7 /* MINIMUM SIZE OF LOGICAL RECORD */

  /* RULE : 1 CI CAN STORE A RECORD (OR RATHER SEGMENT) OF SIZE =
                 CISZ - DATA_PFX - 7                               */

  NUMERIC DIGITS 20
  IF KLDL='' THEN DO
    SAY 'ENTER KEYLEN+DATALEN (LENGTH OF KEY + LENGTH OF NON-KEY DATA)'
    SAY '(MAXIMUM RECORD SIZE ENVISIONED FOR RECORD)'
    PULL KLDL
    END
  SAY 'KEYLEN+DATALEN (LENGTH OF KEY + LENGTH OF NON-KEY DATA)='KLDL
  KLDL0 = KLDL + 0
  IF KLDL0 > MAX_RSZ   THEN DO
     SAY '** ERROR, RECORD SIZE CANNOT EXCEED' MAX_RSZ '**'
     EXIT(8)
     END

  IF RECNB='' THEN DO
    SAY 'ENTER MAXIMUM NUMBER OF LOGICAL RECORDS TO BE STORED'
    PULL RECNB
    END
  SAY 'MAXIMUM NUMBER OF LOGICAL RECORDS TO BE STORED='RECNB

  /* SINCE NOSQLZ PUTS ONE SEGMENT IN A CI, AND CISIZE>=512,
     THE SIZE OF A DATA RECORD HAS A MINIMUM VALUE */

  IF KLDL < MIN_RSZ THEN KLDL = MIN_RSZ
  SAY 'REQUESTED RECORD LENGTH='KLDL0
  IF KLDL0 <> KLDL THEN SAY '==> CHANGED TO 'KLDL

  /* SIZE OF NOSQLZ RECORD */
  NOSQLZ_REC_LENGTH = KLDL + DATA_PFX /* NOSQLZ ADDS PFX TO DATA REC */
  SAY 'NOSQLZ RECORD LENGTH='NOSQLZ_REC_LENGTH

  /* COMPUTED CISZ = SMALLEST MULTIPLE OF 512
     THAT IS LARGER THAN NOSQLZ_REC_LENGTH + 7
     (THE CI ADDS 7 BYTES TO THE DATA */

  CISZ = (7+NOSQLZ_REC_LENGTH) % 512
  IF 512 * CISZ <> 7+NOSQLZ_REC_LENGTH THEN CISZ = CISZ + 1
  CISZ = 512 * CISZ

  CIS_BY_REC = 1    /* USUALLY 1 CI NEEDED TO STORE 1 SEGMENT */
  IF KLDL + DATA_PFX + 7 > MAX_CISZ     THEN DO
                     CISZ = MAX_CISZ  /* ROOM FOR 32740 K+D BYTES */
                     CIS_BY_REC = KLDL % (MAX_CISZ-7-DATA_PFX)
                     IF   CIS_BY_REC*(MAX_CISZ-7-DATA_PFX)<>KLDL THEN ,
                          CIS_BY_REC = CIS_BY_REC + 1
                     END

  SAY 'CISZ AS MULTIPLE OF 512='CISZ

  /* VSAM RULE:
     FROM 512 TO 8192, CISZ IS MULTIPLE OF 512
     FROM 8192 TO 32768, CISZ IS MULTIPLE OF 2048 */

  IF  CISZ > 8192 THEN DO
      D  =   CISZ % 2048
      IF 2048*D <> CISZ THEN D = D + 1
      CISZ = 2048 * D
      SAY 'CISZ AS MULTIPLE OF 2048='CISZ
      END


  VSAMRS = CISZ - 7   /* MAXIMUM LENGTH OF DATA IN 1 RECORD  */
  SAY
  SAY 'CI SIZE = 'CISZ        ' - VSAM RECORD SIZE = 'VSAMRS
  SAY ' (THAT IS ' (VSAMRS-DATA_PFX)*CIS_BY_REC ,
      ' OF KEY_AND_DATA INSTEAD OF 'KLDL0')'

  IF CIS_BY_REC <> 1 THEN DO
     SAY '** NOTE THAT 'CIS_BY_REC' CIS ARE REQUIRED FOR 1 RECORD **'
     END

  /*                                                                 */
  /*  ROUND NUMBER OF RECORDS TO NEXT POWER OF 2                     */
  /*                                                                 */

  /* FIND POWER OF TWO JUST SUPERIOR TO NUMBER OF RECORDS */
  DO G = 1 TO 31
     IF 2**G >= RECNB    THEN LEAVE
     END

  /* MINIMUM NUMBER OF RECORDS MUST BE 16384 = 2**14          */
  /* MINIMUM NUMBER OF RECORDS MUST BE   128 = 2**7           */
  IF G < 7  THEN G = 7
  /* CHECK WHETHER MAXIMUM NUMBER OF RECORDS HAS BEEN REACHED */
  IF G >= 31 THEN DO
     IF RECNB    > 2**31 THEN DO
        SAY '   ** WARNING **'
        SAY '   ** CAN ALLOCATE ONLY' 2**31 'RECORDS'
        SAY '   ** INSTEAD OF 'RECNB' NORMALLY NEEDED'
        RECNB_ADJ= 2**31
        G = 31
        END
     END

  RECNB_ADJ =2**G       /* ADJUST NUMBER = NB OF KEYS                */
  SAY 'LOGICAL RECORD NUMBER ADJUSTED FROM' RECNB 'TO' RECNB_ADJ
  SAY '        (ROUNDED TO NEXT POWER OF 2)  '

  /*                                                                 */
  /*  COMPUTE NUMBER OF SEGMENTS                                     */
  /*                                                                 */

  /* COMPUTE NUMBER OF SEGMENTS= NUMBER OF CIS */
  TOT_SGMT = RECNB*CIS_BY_REC
  TOT_SGMT1= TOT_SGMT

  /* MULTIPLY BY 1.5 TO ACCOMODATE FOR COLLISIONS                */
 /*  TOT_SGMT = TOT_SGMT*(1+VERSNB)   */
     TOT_SGMT = TOT_SGMT*1.5        /* ALWAYS 2 VERSIONS OF RECORD */
     TOT_SGMT = TOT_SGMT % 1        /* ALWAYS 2 VERSIONS OF RECORD */
  SAY 'SEGMENT NUMBER SHOULD BE AT LEAST' TOT_SGMT
  SAY '** TO BE ROUNDED TO NEXT POWER OF 2 **'
  TOT_SGMT2= TOT_SGMT

  /* FIND POWER OF TWO JUST SUPERIOR TO NUMBER OF RECORDS */
  DO I = 1 TO 31
     IF 2**I >= TOT_SGMT THEN LEAVE
     END

  /* MINIMUM NUMBER OF RECORDS MUST BE 16384 = 2**14          */
  /* MINIMUM NUMBER OF RECORDS MUST BE   128 = 2**7           */
  IF I < 7  THEN I = 7
  /* CHECK WHETHER MAXIMUM NUMBER OF RECORDS HAS BEEN REACHED */
  IF I >= 31 THEN DO
     IF TOT_SGMT > 2**31 THEN DO
        SAY '   ** WARNING **'
        SAY '   ** CAN ALLOCATE ONLY' 2**31 'RECORDS'
        SAY '   ** INSTEAD OF 'TOT_SGMT' NORMALLY NEEDED'
        TOT_SGMT = 2**31
        I = 31
        END
     END

  TOT_SGMT = 2**I       /* ADJUST NUMBER = NB OF ADDRESSABLE RECORDS */
  SAY 'SIZE OF DATASPACE=' TOT_SGMT 'CIS OF' CISZ
  SAY
  SAY 'DATA HASH MASK=' D2X(2**I-1,8)

  /* COMPUTE SIZE OF KEY SPACE    */

  KEY_CELL_BY_SLOT = KCBS(CISZ)    /* NUMBER OF KEYS IN 1 KEY-RECORD*/
  K = REDUCT(CISZ)       /* REDUCTION FACTOR KEY / DATA      */
  SAY 'REDUCTION FACTOR FROM DATA SPACE TO KEY SPACE = ' K
  SAY 'NUMBER OF KEYS MANAGED BY 1 KEY-RECORD= ' KEY_CELL_BY_SLOT
  TOT_KSPC = RECNB_ADJ/K
  SAY 'SIZE OF KEY SPACE=' TOT_KSPC 'CIS OF' CISZ
  SAY
  IF TOT_KSPC < 2 THEN TOT_KSPC = 2
  SAY 'KEY  HASH MASK=' D2X(TOT_KSPC-1,8)

  /* NUMBER OF RECORDS                                             */
  TOTRECS = TOT_SGMT+TOT_KSPC+1
  NREC1   = TOTRECS
  NREC2   = 0
  COMMENT = ''
  IF  NREC1 > 16777215 THEN DO         /* (VSAM MAX IS 16,777,215) */
      NREC1 = 16777215
      NREC2 = TOTRECS - 16777215
      IF  NREC2 > 16777215 THEN NREC2 = 16777215
      COMMENT = '/* ('TOTRECS' RECORDS NEEDED) */'
      END

  /* DISPLAY RESULTING IDCAMS     */
  SAY
  SAY "DEF CL(NAME('DSNAME_OF_DATA_SET                        ') -"
  SAY "    NUMBERED    VOLUME(VVVVVV)  SHR(4 4)                  -"
  SAY "    RECORDS("NREC1  NREC2") "COMMENT" -"
  SAY "    RECORDSIZE("VSAMRS" "VSAMRS") CISZ("CISZ"))"

  SAY
  SAY '********* SUMMARY OF ROUNDINGS *********'
  SAY
  SAY '* RECORD NUMBER='RECNB 'ROUNDED TO' RECNB_ADJ
  SAY '   FROM THAT, WITH FACTOR='K ', NEEDED' TOT_KSPC 'SLOTS OF KSPC'
  SAY '              KEY  HASH MASK=' D2X(TOT_KSPC-1,8)
  SAY
  SAY '* SEGMENT NUMBER=        'TOT_SGMT1 '('RECNB'*'CIS_BY_REC')'
  SAY '  WITH VERSION + SLACK ='TOT_SGMT2
  SAY '  WITH ROUNDING TO 2**N='TOT_SGMT
  SAY '   FROM THAT, DATA HASH MASK=' D2X(TOT_SGMT-1,8)

  /* WRITE TO DD NSQOUTP */

  OUTP.1 = 'KEYHASHMASK='D2X(TOT_KSPC-1,8)
  OUTP.2 = 'DATAHASHMASK='D2X(TOT_SGMT-1,8)
  SAY OUTP.1
  SAY OUTP.2
  "EXECIO * DISKW NSQOUTP (STEM OUTP. FINIS "

  /* WRITE TO DD NSQOUTI */

  OUTP.1 = "    RECORDS("NREC1  NREC2") "COMMENT" -"
  OUTP.2 = "    RECORDSIZE("VSAMRS" "VSAMRS") CISZ("CISZ"))"
  "EXECIO * DISKW NSQOUTI (STEM OUTP. FINIS "

  EXIT
REDUCT: PROCEDURE
   ARG      CI         /* CI SIZE  */
   RES = 0
   IF CI = 512     THEN RES = 2
   IF CI = 1024    THEN RES = 4
   IF CI = 1536    THEN RES = 8
   IF CI = 2048    THEN RES = 16
   IF CI = 2560    THEN RES = 16
   IF CI = 3072    THEN RES = 32
   IF CI = 3584    THEN RES = 32
   IF CI = 4096    THEN RES = 64
   IF CI = 4608    THEN RES = 64
   IF CI = 5120    THEN RES = 64
   IF CI = 5632    THEN RES = 64
   IF CI = 6144    THEN RES = 64
   IF CI = 6656    THEN RES = 128
   IF CI = 7168    THEN RES = 128
   IF CI = 7680    THEN RES = 128
   IF CI = 8192    THEN RES = 128
   IF CI = 10240   THEN RES = 128
   IF CI = 12288   THEN RES = 256
   IF CI = 14336   THEN RES = 256
   IF CI = 16384   THEN RES = 256
   IF CI = 18432   THEN RES = 256
   RETURN RES

KCBS: PROCEDURE
   ARG      CI         /* RECORD NUMBER, CI SIZE  */
   RETURN 1+CI/32
