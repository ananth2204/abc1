{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012444000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 8, "INMDSNAM": "CBT.V500.FILE608.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE608.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x04'", "DS1TRBAL": "b'\\xa0\\n'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04p\\x00\\t\\x04p\\x00\\r\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x05\\x7f\\x01\\x06\\x05\\x7f#\\x11\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-02-26T00:00:00", "modifydate": "2006-02-26T23:11:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-471"}, "text": "REGULAR CBT TAPE - VERSION 471    FILE:  608\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT471.FILE608\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 12 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,228 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   02/26/06    23:11:03    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$LOADLIB": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x01\\x03\\x16?\\x01\\x03\\x16?\\x02\\x03\\x00G\\x00G\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-06-12T00:00:00", "modifydate": "2003-06-12T02:03:00", "lines": 71, "newlines": 71, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}, "#DOCINST": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x08\\x00$\\x01\\x025\\x7f\\x01\\x03\\x13o\\t\\x06\\x00\\x11\\x00\\x04\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.08", "flags": 0, "createdate": "2002-12-23T00:00:00", "modifydate": "2003-05-16T09:06:24", "lines": 17, "newlines": 4, "modlines": 0, "user": "TS0710"}, "text": "                       SPA - LIST DASD FREESPACE INFO\n\nTSO SPA INSTRUCTIONS\n====================\n1) THE PURPOSE OF SPA IS TO SEARCH AND LIST DASD FREE SPACE INFORMATION\n   BASED UPON A PARTIAL VOLSER, OR UCB ARGUMENT. CAN ALSO USE DEVICE TYPE.\n2) EDIT MEMBER ASMPARS AND SUBMIT TO ASMLK LMOD AMSPARSE.\n3) EDIT MEMBER ASMSPA AND SUBMIT TO ASMLK LMOD TSOSPA.\n4) EDIT MEMBER SPA AND SAVE IN YOUR REXX/CLIST DATASET.\n5) TO EXECUTE - OPTIONS ARE :\n                \"TSO SPA XXXXXX\"   WHERE XXXXXX=1 TO 6 PARTIAL OR WHOLE VOLID\n                \"TSO SPA V=XXXXXX\" WHERE XXXXXX=1 TO 6 PARTIAL OR WHOLE VOLID\n                \"TSO SPA V=*\"      WHERE *    = ALL ONLINE DASD (MAY BE L O N G)\n                \"TSO SPA *\"        WHERE *    = ALL ONLINE DASD (MAY BE L O N G)\n                \"TSO SPA U=UUUU\"   WHERE UUUU=1 TO 4 PARTIAL OR WHOLE UCB ADR\n                \"TSO SPA D=DDDD\"   WHERE DDDD = A DEVICE TYPE (IE; 3390)\n6) SAMPLE OUTPUT OF VOL & UCB DISPLAYS ARE IN MEMBERS SPAVOL & SPAUCB.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "#DOCMEM": {"ttr": 523, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x10\\x01\\x025\\x7f\\x01\\x025\\x7f\\x11\\x12\\x00\\x0b\\x00\\x0b\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2002-12-23T00:00:00", "modifydate": "2002-12-23T11:12:10", "lines": 11, "newlines": 11, "modlines": 0, "user": "TS0710"}, "text": "MEMBER LIST (9)\n===========\n#DOCMEM  = THIS MEMBER\n#DOCINST = INSTALL INSTRUCTIONS\nASMPARSE = PARSE SOURCE PGM\nTSOSPA   = MAIN CALLING PROGRAM\nASMSPARS = ASMLK ASMPARSE\nASMSPA   = ASMLK TSOSPA\nSPA      = REXX EXEC TO EXEUTE TSOSPA\nSPAVOL   = SAMPLE OF VOLID SEARCH OUTPUT\nSPAUCB   = SAMPLE OF UCB SEARCH OUTPUT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE608": {"ttr": 525, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04G\\x00\\x00\\x01\\x06\\x05\\x7f\\x01\\x06\\x05\\x7f#\\x10\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf7\\xf1@@@'", "ispf": {"version": "04.71", "flags": 0, "createdate": "2006-02-26T00:00:00", "modifydate": "2006-02-26T23:10:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT-471"}, "text": "//***FILE 608 is from Bob Glover, and contains a TSO command to     *   FILE 608\n//*           list space available on DASD.                         *   FILE 608\n//*                                                                 *   FILE 608\n//*       Syntax:                                                   *   FILE 608\n//*                                                                 *   FILE 608\n//*           SPA  xxxxxx  (partial volume name)          or        *   FILE 608\n//*           SPA  *       (lists all mounted volumes)              *   FILE 608\n//*           SPA  U=uuuu  (partial 4-digit unit name)              *   FILE 608\n//*                                                                 *   FILE 608\n//*           email:  Bob.Glover@fnf.com                            *   FILE 608\n//*                                                                 *   FILE 608\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "ASMPARS": {"ttr": 527, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x05\\x008\\x00\\x98\\x10\\x7f\\x01\\x025\\x7f\\x10S\\x002\\x009\\x00\\t\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.05", "flags": 0, "createdate": "1998-04-17T00:00:00", "modifydate": "2002-12-23T10:53:38", "lines": 50, "newlines": 57, "modlines": 9, "user": "TS0710"}, "text": "//-------------- JOB CARD HERE ---------------------------\n//*\n//* ASMLK PGM W/OUT SMPE (NAME=ASMPARSE)\n//*\n//* ASSEMBLE AND LINK USING PDS INPUT\n//ASMLK  PROC  AREGION=2M,\n//             LREGION=2M,\n//             UNIT='SYSDA',\n//             CLASS='*',\n//             SYSLIB1='SYS1.MODGEN',\n//             SYSLIB2='SYS1.AMODGEN',\n//             SYSLIB3='SYS1.MACLIB',\n//             SRCLIB=TEMPNAME,\n//             LODLIB=TEMPNAME,\n//             RENT='NO',  /* ENTER RENT=NO FOR NON REENTRANT */\n//             SRCMOD='TEMPNAME',\n//             LODMOD='TEMPNAME'\n//*\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT,&RENT.RENT',\n//             REGION=&AREGION\n//SYSLIB   DD  DSN=&SYSLIB1.,DISP=SHR\n//         DD  DSN=&SYSLIB2.,DISP=SHR\n//         DD  DSN=&SYSLIB3.,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB.(&SRCMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=(&UNIT.,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD SYSOUT=&CLASS.,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//*\n//LNK  EXEC  PGM=IEWL,\n//  PARM='MAP,LET,LIST,NCAL,&RENT.RENT,AMODE=24,RMODE=24',\n//             REGION=&LREGION.,COND=(0,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LODLIB.(&LODMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=&UNIT.,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(RECFM=FB,BLKSIZE=3509)\n// PEND\n//*\n//STEP1 EXEC ASMLK,CLASS='*',\n//           RENT='NO',   /* ''=RENT, 'NO'=NON-RENT */\n//           SRCLIB='YOUR.SORCLIB', <===CHANGE\n//           LODLIB='YOUR.LOADLIB', <===CHANGE\n//           SRCMOD=ASMPARSE,\n//           LODMOD=ASMPARSE\n//*-------------------------------------\n//LNK.SYSIN  DD *\n  NAME ASMPARSE(R)\n/*\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMPARSE": {"ttr": 529, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x13\\x00\\x98\\x10\\x7f\\x01\\x025/\\x17\\x05\\x01\\x05\\x01\\t\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1998-04-17T00:00:00", "modifydate": "2002-12-18T17:05:13", "lines": 261, "newlines": 265, "modlines": 0, "user": "TS0710"}, "text": "         TITLE 'ASMPARSE -- COMMAND PARSER'\n***********************************************************************\n*                                                                     *\n*     ASMPARSE - GENERAL-PURPOSE PARSER                               *\n*                                                                     *\n*     ATTRIBUTES: RE-ENTRANT, RE-USABLE                               *\n*                                                                     *\n*     USAGE: ANY PROGRAM NEEDING TO DISSECT PARM STRINGS              *\n*                                                                     *\n*     DESCRIPTION:  THIS SUBROUTINE RETURNS INDIVIDUAL PARAMETERS     *\n*     ONE AT A TIME FROM A PARM STRING.  STRING FORMAT IS FREE        *\n*     FORM, WITH PARAMETERS SEPERATED BY COMMAS OR SPACES.  EACH      *\n*     PARAMETER IS RETURNED AS A STRING.                              *\n*                                                                     *\n*     PARAMETERS MAY BE SIMPLE WORDS, LISTS IN PARENTHESES, OR        *\n*     QUOTED STRINGS.  UPON RETURN FROM THIS ROUTINE, THE LOW-ORDER   *\n*     BYTE OF REGISTER ZERO WILL CONTAIN:                             *\n*                                                                     *\n*     ' ' IF THE PARM WAS A WORD - DELIMITED BY SPACE, COMMA, OR (    *\n*     ',' IF THE PARM WAS A COMMA PRECEEDED BY SPACE OR COMMA         *\n*     '=' IF THE PARM WAS A WORD - DELIMITED BY '='                   *\n*     '(' IF THE PARM WAS A LIST                                      *\n*     '''' IF THE PARM WAS A STRING.                                  *\n*                                                                     *\n*     AS THE PARM IS ITSELF A STRING, SUBLISTS AND QUOTED STRINGS     *\n*     MAY BE FURTHER DISSECTED BY USING THEM AS INPUT TO THIS         *\n*     ROUTINE.                                                        *\n*                                                                     *\n*     CALLING SEQUENCE:                                               *\n*                                                                     *\n*     CALL ASMPARM,(PSTRING,PLOC,PVALUE<,PARMLEN>),VL                 *\n*                                                                     *\n*     PLOC IS A HALFWORD INITIALLY ZERO, UPDATED BY ASMPARSE SO       *\n*     THAT SUCCESSIVE CALLS RETURN SUCCESSIVE PARMS FROM PSTRING.     *\n*                                                                     *\n*                                                                     *\n*     PSTRING AND PVALUE ARE STRINGS ALA PASCAL AND PL/1 - I.E.       *\n*     A HALFWORD LENGTH FOLLOWED BY THE STRING ITSELF.  PSTRING       *\n*     IS NOT A STRING IF PARMLEN IS SPECIFIED, HOWEVER. PVALUE        *\n*     SHOULD BE AS LONG AS PSTRING TO ENSURE THAT THE WORST CASE      *\n*     PARAMETER WILL BE PROPERLY HANDLED.  IF IT IS MORE CONVENIENT,  *\n*     THE STRING PART OF PVALUE MAY BE INITIALIZED TO BLANKS, ZEROES, *\n*     ETC., SO THAT IT MAY BE TREATED AS A FIXED-LENGTH FIELD.        *\n*                                                                     *\n*     EXAMPLE:                                                        *\n*                                                                     *\n*     ZVALUE    DC    H'0'       ---- WILL BE SET BY ASMPARSE         *\n*     ZFILENM   DC    CL44' '    ---- WILL BE OVERLAID BY PARM,       *\n*                                     BUT APPEAR BLANK-PADDED TO      *\n*                                     44 BYTES.                       *\n*                                                                     *\n*     RETURN CODES:                                                   *\n*                                                                     *\n*     R15 = 0 PARSED OK, R0 WAS SET, AND VALUE STORED IN PVALUE       *\n*     R15 = 8 COULD NOT RETURN ANYTHING: AT OR PAST END OF PARM       *\n*     R15 =12 END OF PARM AND NO ENDING DELIMITER FOUND. (PARM ERROR) *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         EJECT\nASMPARSE CSECT\n         SAVE  (14,12),,ASMPARSE-&SYSDATE-&SYSTIME\n         LR    R12,R15\n         USING ASMPARSE,R12\n         LR    R8,R1               SAVE PARM POINTER\n         USING DSPARM,R8\n         L     R2,PARMPARM         INPUT STRING ADDRESS\n*\n         TM    PARMVAL,X'80'       PARMLEN PRESENT?\n         BNZ   ISSTRING\n         L     R3,PARMLEN          GET AN EXPLICIT LENGTH\n         LH    R3,0(R3)\n         LA    R3,0(R2,R3)         END OF FIELD ADDRESS\n         B     GOTSTRNG\n*\nISSTRING LH    R3,0(R2)            FIELD LENGTH\n         LA    R3,2(R3,R2)  ----   END OF STRING ADDRESS\n         LA    R2,2(R2)            POINT TO DATA PART\nGOTSTRNG EQU   *\n*\n         L     R4,PARMPTR          PARSE POINTER\n         AH    R2,0(R4)     ----   MAKE IT POINT TO NEXT PARSE POINT\n*\n         L     R7,PARMVAL   ----   VALUE FIELD ADDRESS\n         XR    R6,R6        ----   VALUE LENGTH\n         STH   R6,0(R7)            INITIALLY ZERO LENGTH\n         LA    R7,2(R7)            POINT TO VALUE PART\n*\n*        SKIP LEADING SPACES\n*\nSKIPSP   CR    R2,R3\n         BNL   RET8                NO MORE?\n         CLI   0(R2),C' '\n         BNE   SKIPSP1\n         LA    R2,1(R2)\n         B     SKIPSP\n*\nSKIPSP1  EQU   *\n         XR    R0,R0\n         IC    R0,0(R2)            SAVE DELIMITER\n         CLI   0(R2),C'('\n         BE    PAREN               PARENTHESIZED EXPRESSION\n         CLI   0(R2),C','          1ST NONBLANK WAS A COMMA...\n         BE    COMMA               OMITTED OPERAND - RETURN NULL VALUE\n         CLI   0(R2),C''''\n         BE    QUOTE               QUOTED EXPRESSION\n         LA    R0,C' '             NOTHING SPECIAL\n         SAVE  (0)                 SET RETURN DELIMITER\n         EJECT\n*---------------------------------------------------------------------*\n*        SIMPLE OPERAND                                               *\n*---------------------------------------------------------------------*\n         SPACE 1\nMVLOOP   EQU   *\n         CLI   0(R2),C'('          WORD(VALUE) FORMAT?\n         BE    RET0\n         CLI   0(R2),C'='          WORD = VALUE FORMAT?\n         BE    KWEQ\n         CLI   0(R2),C' '\n         BE    ENDPARM\n         CLI   0(R2),C','\n         BE    ENDPARM\n         MVC   0(1,R7),0(R2)       APPEND TO VALUE\n         LA    R6,1(R6)            INCREMENT LENGTH\n         LA    R7,1(R7)            INCREMENT POINTER\n         LA    R2,1(R2)            GO FOR NEXT\n         CR    R2,R3\n         BL    MVLOOP\n         B     RET0\n*\nKWEQ     EQU   *  STORE KEYWORD=\n         LA    R0,C'='\n         SAVE  (0)\n         LA    R2,1(R2)            GO FOR NEXT\n         B     RET0\n         EJECT\n*---------------------------------------------------------------------*\n*        PARENTHESIZED SUBLIST                                        *\n*---------------------------------------------------------------------*\n         SPACE 1\nPAREN    DS    0H\n         IC    R0,0(R2)            GET RETURN DELIMITER\n         SAVE  (0)\n         LA    R2,1(R2)            POINT PAST STARTING DELIMITER\n         LA    R5,1                SUBPAREN LEVEL\n*\nPARENLP  EQU   *\n         CR    R2,R3\n         BNL   RET12               NO ENDING DELIMITER FOUND\n         CLI   0(R2),C'('          SUBPAREN?\n         BNE   PAREN01\n         LA    R5,1(R5)\n*\nPAREN01  CLI   0(R2),C')'\n         BNE   PAREN02             ENDING DELIMITER FOUND\n         BCT   R5,PAREN02\n         B     PARMDLM             COUNTED TO ZERO, EXIT\n*\nPAREN02  MVC   0(1,R7),0(R2)       APPEND TO VALUE\n         LA    R6,1(R6)            INCREMENT LENGTH\n         LA    R7,1(R7)            INCREMENT POINTER\n         LA    R2,1(R2)            GO FOR NEXT\n         B     PARENLP\n         EJECT\n*---------------------------------------------------------------------*\n*        STRING IN SINGLE QUOTES                                      *\n*---------------------------------------------------------------------*\n         SPACE 1\nQUOTE    DS    0H                  QUOTED SUBPARM\n         IC    R0,0(R2)            GET RETURN DELIMITER\n         SAVE  (0)\n         LA    R2,1(R2)            POINT PAST STARTING DELIMITER\n*\nQUOTELP  EQU   *\n         CR    R2,R3\n         BNL   RET12               NO ENDING DELIMITER FOUND\n         CLI   0(R2),C''''         POSSIBLE DELIMITER\n         BNE   QUOTE1\n         LA    R2,1(R2)\n         CR    R2,R3               END OF PARM AND QUOTE\n         BNL   RET0\n         CLI   0(R2),C''''         DOUBLE QUOTE IS QUOTE\n         BNE   PARMDLM1\nQUOTE1   MVC   0(1,R7),0(R2)       APPEND TO VALUE\n         LA    R6,1(R6)            INCREMENT LENGTH\n         LA    R7,1(R7)            INCREMENT POINTER\n         LA    R2,1(R2)            GO FOR NEXT\n         B     QUOTELP\n         EJECT\n*---------------------------------------------------------------------*\n*        COME HERE IF HAVE DELIMITER TO DROP AND MAYBE ALSO COMMA     *\n*        OR SPACE                                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nPARMDLM  LA    R2,1(R2)            POINT PAST DELIMITER\n         CR    R2,R3\n         BNL   RET0                END OF EVERYTHING\n*---------------------------------------------------------------------*\n*        COME HERE IF DROPPED DELIMITER AND MAY HAVE COMMA OR SPACE   *\n*---------------------------------------------------------------------*\nPARMDLM1 CLI   0(R2),C','          COMMA?\n         BE    ENDPARM\n         CLI   0(R2),C' '          SPACE?\n         BNE   RET0\nENDPARM  LA    R2,1(R2)            DISCARD DELIMITER\n         SPACE 2\n*---------------------------------------------------------------------*\n*        WHEN A PARM STRING IS IN THE FORM:                           *\n*          VALUE1,,VALUE2                                             *\n*        SENSE THE SECOND COMMA AS AN OMITTED OPERAND.  RETURN ',' IN *\n*        REGISTER ZERO, AND RETURN VALUE AS A NULL STRING (LENGTH = 0)*\n*        NOTE THAT VALUE1 , VALUE2 WILL ALSO SEE THE COMMA, THOUGH    *\n*---------------------------------------------------------------------*\n         SPACE 1\nCOMMA    EQU   ENDPARM\n         SPACE 2\n*\nRET0     XR    R15,R15\n         B     RETALL\n*\nRET8     LA    R15,8\n         B     RETALL\n*\nRET12    LA    R15,12\n*\nRETALL   L     R1,PARMPARM         PARM START ADDRESS\n         TM    PARMVAL,X'80'       WAS PARMLEN PRESENT?\n         BZ    RETNBIAS            IF SO, NO BIAS\n         AH    R1,=H'2'            BIAS FOR LENGTH PART\n*\nRETNBIAS SR    R2,R1               FROM CURRENT ADDRESS\n         L     R3,PARMPTR\n         STH   R2,0(R3)            UPDATE PARM POINTER\n*\n         L     R7,PARMVAL\n         STH   R6,0(R7)            UPDATE OUTPUT LENGTH\n         RETURN   (14,12),T,RC=(15)\n         EJECT\nDSPARM   DSECT\nPARMPARM DS    F  A(PARM FIELD)  - A STRING UNLESS PARMLEN PRESENT\nPARMPTR  DS    F  A(PARM POINTER 1/2W)\nPARMVAL  DS    F  A(VALUE STRING)\nPARMLEN  DS    F  A(L'PARMPARM)   A HALFWORD.  IF PRESENT, PARMPARM\n*                 HAS NO LENGTH FIELD\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMSPA": {"ttr": 534, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0e\\x003\\x01\\x00\\x01?\\x01\\x025\\x7f\\x10T\\x004\\x008\\x00\\x11\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.14", "flags": 0, "createdate": "2000-01-13T00:00:00", "modifydate": "2002-12-23T10:54:33", "lines": 52, "newlines": 56, "modlines": 17, "user": "TS0710"}, "text": "//----------------- JOB CARD HERE ------------------------\n//*\n//* ASMLK PGM W/OUT SMPE (NAME=TSOSPA)\n//*\n//* ASSEMBLE AND LINK USING PDS INPUT\n//ASMLK  PROC  AREGION=2M,\n//             LREGION=2M,\n//             UNIT='SYSDA',\n//             CLASS='*',\n//             SYSLIB1='SYS1.MODGEN',\n//             SYSLIB2='SYS1.AMODGEN',\n//             SYSLIB3='SYS1.MACLIB',\n//             SRCLIB=TEMPNAME,\n//             LODLIB=TEMPNAME,\n//             RENT='NO',  /* ENTER RENT=NO FOR NON REENTRANT */\n//             SRCMOD='TEMPNAME',\n//             LODMOD='TEMPNAME'\n//*\n//ASM    EXEC  PGM=IEV90,PARM='NODECK,OBJECT,&RENT.RENT',\n//             REGION=&AREGION\n//SYSLIB   DD  DSN=&SYSLIB1.,DISP=SHR\n//         DD  DSN=&SYSLIB2.,DISP=SHR\n//         DD  DSN=&SYSLIB3.,DISP=SHR\n//SYSIN    DD  DSN=&SRCLIB.(&SRCMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=(&UNIT.,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=&SYSUT1\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD SYSOUT=&CLASS.,DCB=(BLKSIZE=3509),UNIT=(,SEP=(SYSUT1))\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),\n//             DCB=(BLKSIZE=400),DSN=&&LOADSET\n//*\n//LNK  EXEC  PGM=IEWL,\n//  PARM='MAP,LET,LIST,NCAL,&RENT.RENT,AMODE=24,RMODE=24',\n//             REGION=&LREGION.,COND=(0,LT,ASM)\n//SYSLIN   DD  DSN=&&LOADSET,DISP=(OLD,DELETE)\n//         DD  DDNAME=SYSIN\n//SYSLMOD  DD  DSN=&LODLIB.(&LODMOD.),DISP=SHR\n//SYSUT1   DD  UNIT=&UNIT.,SPACE=(CYL,(3,2)),DSN=&SYSUT1\n//SYSPRINT DD  SYSOUT=&CLASS.,DCB=(RECFM=FB,BLKSIZE=3509)\n// PEND\n//*\n//STEP1 EXEC ASMLK,CLASS='*',\n//           RENT='NO',   /* ''=RENT, 'NO'=NON-RENT */\n//           SRCLIB='YOUR.SORCLIB', <=== CHANGE\n//           LODLIB='YOUR.LOADLIB', <=== CHANGE\n//           SRCMOD=TSOSPA,\n//           LODMOD=TSOSPA\n//*-------------------------------------\n//LNK.SYSIN  DD *\n  INCLUDE PRODLIB(ASMPARSE)\n  NAME TSOSPA(R)\n/*\n//PRODLIB  DD DSN=YOUR.LOADLIB,DISP=SHR <=== CHANGE\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SPA": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x0b\\x00\\x15\\x01\\x00\\x00O\\x01\\x03\\x13o\\x17\\x14\\x00\\x19\\x00\\x19\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.11", "flags": 0, "createdate": "2000-01-04T00:00:00", "modifydate": "2003-05-16T17:14:15", "lines": 25, "newlines": 25, "modlines": 0, "user": "TS0710"}, "text": "/* REXX */\n/* Display SMS info for a DS - EXTENDED */\naddress ispexec\nparse upper arg volarg\nmsg_status = MSG('OFF')\nCVTSYSAD   = D2X(C2D(STORAGE(10,4)) + 48)   /* POINT TO CVTSYSAD */\nCVTECVT    = D2X(C2D(STORAGE(10,4)) + 140)  /* POINT TO CVTECVT  */\nCVTSNAME   = D2X(C2D(STORAGE(10,4)) + 340)  /* POINT TO CVTSNAME */\nSYSID      = strip(STORAGE(CVTSNAME,8))     /* SYSID             */\nUID = SYSVAR(SYSUID)                        /* USER ID           */\nADDRESS TSO\n\"DELETE ('\"UID\".\"SYSID\".SPA')\"\n\"FREE FI(PRT)\"\n\"ALLOC FI(PRT) DA('\"UID\".\"SYSID\".SPA') NEW CATALOG\n       SPACE(3,1) TRACKS RECFM(F B) LRECL(80) BLKSIZE(32720)\"\nif rc /= 0 then\n  do\n    say 'File PRT Allocation error,rc='rc\n    say 'Dataset name('\"UID\"'.'\"SYSID\"'.SPA)'\n    return\n  end\n/* >.. NOTE ..< CHANGE FOLLOWING STMNT TO CONFORM TO YOUR STANDARDS ! */\n\"CALL 'your.loadlib(TSOSPA)' '\"volarg\"'\"\n\"ISPEXEC EDIT DATASET('\"UID\".\"SYSID\".SPA')\"\nEXIT\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPAUCB": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x02\\x00G\\x01\\x025\\x7f\\x01\\x03\\x13_\\x13\\x13\\x00\\x18\\x00\\r\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.02", "flags": 0, "createdate": "2002-12-23T00:00:00", "modifydate": "2003-05-15T13:13:47", "lines": 24, "newlines": 13, "modlines": 0, "user": "TS0710"}, "text": "\"TSO SPA U=702\"\n===============\n\n\n UCB  VOLSER   +--- FREE ---+   MAX CONTIG    MOUNT    ALLOC/ AVAIL  SMS  FRAG\n               CYLS-TRKS-EXTS   CYLS-TRKS     ATTRIBS   OPN   CYLS        INDEX\n7020  AAAAAA    429,0161,0037    173,0000    PRIV/RSDNT  A    3,339  YES  0190\n7021  BBBBBB   1496,0029,0007   1476,0000    PRIV/RSDNT  A    3,339  YES  0009\n7022  CCCCCC   1229,0064,0014    613,0000    PRIV/RSDNT  A    3,339  YES  0131\n7024  DDDDDD   2216,0085,0021   1526,0000    PRIV/RSDNT  A    3,339  YES  0110\n7025  EEEEEE    424,0047,0031    160,0000    PRIV/RSDNT  A    3,339  YES  0219\n7026  FFFFFF   2234,0098,0026   1079,0000    PRIV/RSDNT  A    3,339  YES  0140\n7027  GGGGGG   3331,0000,0001   3331,0000    PRIV/RSDNT  O    3,338  YES  0000\n7029  HHHHHH    139,0066,0005     72,0013    PRIV/RSDNT  A    3,339  YES  0121\n702B  IIIIII    518,0127,0038     88,0000    PRIV/RSDNT  A    3,339  YES  0282\n702C  JJJJJJ   3331,0000,0001   3331,0000    PRIV/RSDNT  O    3,338  YES  0000\n702D  KKKKKK    484,0110,0092     62,0000    PRIV/RSDNT  A    3,339  YES  0442\n702E  LLLLLL   3147,0036,0010   2912,0000    PRIV/RSDNT  A    3,339  YES  0036\n702F  MMMMMM    284,0102,0036     64,0010    PRIV/RSDNT  A    3,339  YES  0359\n\n TOTAL CYLS AVAIL               43,405\n TOTAL CYLS USED                24,143\n TOTAL CYLS FREE                19,262\n (%)   CYLS FREE                  44.3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SPAVOL": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x03\\x00#\\x01\\x025\\x7f\\x01\\x03\\x13_\\x13\\x14\\x00\\x14\\x00\\x0e\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.03", "flags": 0, "createdate": "2002-12-23T00:00:00", "modifydate": "2003-05-15T13:14:23", "lines": 20, "newlines": 14, "modlines": 0, "user": "TS0710"}, "text": "\"TSO SPA M000\"\n    - OR -\n\"TSO SPA V=M000\"\n================\n\n\n UCB  VOLSER   +--- FREE ---+   MAX CONTIG    MOUNT    ALLOC/ AVAIL  SMS  FRAG\n\n               CYLS-TRKS-EXTS   CYLS-TRKS     ATTRIBS   OPN   CYLS        INDEX\n7035  M00001     08,0027,0009     06,0000    PRIV/RSDNT  A    3,339  NO   0346\n7037  M00002    530,0013,0003    245,0000    PRIV/RSDNT  O    3,339  NO   0133\n7283  M00003    573,0033,0011    556,0000    PRIV/RSDNT  O    3,339  NO   0022\n7481  M00004    269,0053,0010    105,0019    PRIV/RSDNT  O    3,339  NO   0220\n7707  M00005     79,0017,0003     74,0000    PRIV/RSDNT  O    3,339  NO   0046\n770C  M00006     13,0008,0005     08,0001    PRIV/RSDNT  O    3,339  NO   0230\n\n TOTAL CYLS AVAIL               20,034\n TOTAL CYLS USED                18,562\n TOTAL CYLS FREE                 1,472\n (%)   CYLS FREE                   7.3\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "TSOSPA": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x07\\x00%\\x00\\x944_\\x01\\x06\\x05/\\x120\\x02\\xa2\\x00\\x06\\x00\\x00\\xe3\\xe2\\xf0\\xf7\\xf1\\xf0@@@@'", "ispf": {"version": "01.07", "flags": 0, "createdate": "1994-12-11T00:00:00", "modifydate": "2006-02-21T12:30:25", "lines": 674, "newlines": 6, "modlines": 0, "user": "TS0710"}, "text": "         TITLE 'TSOSPA - TSO DASD SPACE MONITOR'\n*\n***********************************************************************\n*                                                                     *\n*    *** TSOSPA ***    (DYNAMIC DEVICE SUPPORT)                      *\n*                      (4 CHAR UCB SUPPORT)                          *\n*                                                                     *\n*   ROSCOE MONITOR ROUTINE CONVERTED TO RUN UNDER A TSO CLIST WHICH   *\n*   DISPLAYS DISK SPACE ON ALL OR SELECTED VOLUMES.                   *\n*                                                                     *\n*   02/21/06 (RGG) - CORRECT NO. CYLS IN A VOLUME (ALT CYLS)          *\n*   08/18/03 (RGG) - ENLARGE % USED CALC FIELDS DUE TO OVERFLOW       *\n*                                                                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nTSOSPA   CSECT\n         USING *,R15\n         B     AROUND\n         DC    AL1(23)\n         DC    CL9'&SYSDATE'\n         DC    CL5'&SYSTIME'\nAROUND   DS    0H\n         STM   R14,R12,12(R13)\n         ST    R13,SAVEAREA+4\n         LA    R7,SAVEAREA\n         ST    R7,8(R13)\n         LA    R13,SAVEAREA\n         DROP  R15\n         USING SAVEAREA,R13\n         B     BEGIN\nSAVEAREA DC    18F'0'\nBEGIN    DS    0H\n         EJECT\n         L     R2,0(R1)            OS PARM ADDR\n         LH    R1,0(R2)            PARM L'\n         STH   R1,INPARMLN         SAVE IT\n         LTR   R1,R1               ANYTHING ENTERED ?\n         BC    13,NOPARM           NOPE..FLAG/EXIT\n         LA    R1,2(R2)            R1=PARM ADDR\n         ST    R1,PARMADDR         SAVE IT\n         XC    PARMPTR,PARMPTR\n         BAL   R11,GETPARM         PROCESS 1ST PARM\n         CLI   PARMTYPE,C'='       KEYWORD= PARM?\n         BE    KEYPARM\n         CLI   PARMTYPE,C','       OMITTED PARMS\n         BE    KEYPARM             ARE IGNORED\n*\n         CLC   PARMLEN,=H'6'       THE ONLY POSITIONAL PARM IS\n         BH    BADVOL              EXPECTED TO BE A <GENERIC> VOLSER\n         BAL   R11,PARMVOL         PROCESS VOLSER\n         B     NEXTPARM\n         EJECT\nNEXTPARM DS    0H\n         BAL   R11,GETPARM         GET NEXT PARM\n         CLI   PARMTYPE,C'='       KEYWORD= PARM?\n         BNE   BADPARM             ANYTHING ELSE IS BAD\nKEYPARM  EQU   *\n         CLI   PARMTYPE,C','       EXCEPT OMITTED PARMS\n         BE    NEXTPARM            WHICH ARE IGNORED\n*\n         MVC   KEYWORD,PARMVAL     SAVE KEYWORD\n         BAL   R11,GETPARM         GET OPERAND\n*\n         CLI   KEYWORD,C'U'        U<CB>=U<C<B>>?\n         BNE   PNCHAN\n         BAL   R11,PARMCHAN        PROCESS UCB\n         B     NEXTPARM\n*\nPNCHAN   CLI   KEYWORD,C'D'        D<EVICE>=DEVTYPE?\n         BNE   PNDEV\n         BAL   R11,PARMDEV         PROCESS DEVICE\n         B     NEXTPARM\n*\nPNDEV    CLI   KEYWORD,C'V'        VOLSER=?\n         BNE   BADPARM\n         BAL   R11,PARMVOL         PROCESS VOLSER\n         B     NEXTPARM\n         EJECT\n*---------------------------------------------------------------------*\n*        HANDLE VOLSER, WHICH MAY BE GENERIC                          *\n*---------------------------------------------------------------------*\n         DC    CL8'PARMVOL',F'0'\nPARMVOL  ST    R11,*-4\n         LA    R0,5\n         LA    R1,VOLSERLN\n         BAL   R11,GENERIC\n         L     R11,PARMVOL-4\n         BALR  R11,R11\n         SPACE 2\n*---------------------------------------------------------------------*\n*        CHANNEL AND DEVICE PARMS                                     *\n*---------------------------------------------------------------------*\n         DC    CL8'PARMCHAN',F'0'\nPARMCHAN ST    R11,*-4\n         LA    R0,4                 ALLOW FOR 4-CHAR UCB\n         LA    R1,UNITLN\n         BAL   R11,GENERIC\n         L     R11,PARMCHAN-4\n         BALR  R11,R11\n         SPACE 2\n         DC    CL8'PARMDEV',F'0'\nPARMDEV  ST    R11,*-4\n         LA    R1,PARMVAL\n         BAL   R11,DEVTOC           CONVERT DEVICE NAME TO BYTE (CHAR)\n         MVC   DEVMASK,0(R1)\n         L     R11,PARMDEV-4\n         BALR  R11,R11\n         EJECT\n*---------------------------------------------------------------------*\n*        GET NEXT PARM, IF ANY                                        *\n*---------------------------------------------------------------------*\n         DC    CL8'GETPARM',F'0'\nGETPARM  ST    R11,*-4\n         DS    0H\n         MVC   PARMVAL(8),=CL8' '  PRETEND FIXED-LENGTH 8 BYTE PARM\n         L     R15,PARMADDR        GET A(PARMAREA)\n         ST    R15,APARMAD         SAVE IT IN LIST\n         LA    R1,LIST             POINT TO IT\n         CALL  ASMPARSE\n         STC   R0,PARMTYPE         SAVE TYPE RETURNED\n         B     *+4(R15)\n         B     GETPXX              GOT ONE\n         B     PARMERR             SHOULDN'T HAPPEN\n         B     PARMEND             NO MORE\n         B     PARMERR             SYNTAX ERROR IN PARM\nGETPXX   EQU   *\n         LH    R1,PARMLEN\n         LTR   R1,R1\n         BNP   PARMERR             NULL PARM\n         BCTR  R1,0\n         EX    R1,UPCASE\nGETPXX1  EQU   *\n         L     R11,GETPARM-4\n         BALR  R11,R11\n*\nUPCASE   TR    PARMVAL(0),UPPER    MAKE UPPER CASE\n         EJECT\n*---------------------------------------------------------------------*\n*        MAIN PROGRAM                                                 *\n*---------------------------------------------------------------------*\nPARMEND  DS    0H\nNOSTRING EQU   *\n         BAL   R11,SETUP\n         BAL   R11,UCBSCAN\n         CLI   HITS,TRUE\n         BE    RET0\n         B     DEVERR\n*\nRET8     EQU   *\n         LA    R15,8\n         B     EXIT\n         SPACE\nRET0     EQU   *\n         LA    R2,WORK\n         BAL   R11,PUT            BLANK LINE\n* WRITE TOTAL VOLS FOUND\n         MVC   WORK(18),=CL18' TOTAL VOLS FOUND '\n         L     R1,VOLSFND\n         CVD   R1,DOUB\n         MVC   WORK+18(L'MASKCYL),MASKCYL\n         ED    WORK+18(L'MASKCYL),DOUB\n         LA    R2,WORK\n         BAL   R11,PUT            WRITE LINE\n* WRITE TOTAL CYLS AVAILABLE\n         MVC   WORK(18),=CL18' TOTAL CYLS AVAIL '\n         L     R1,CYLAVAIL        R1=TOTAL CYLS AVAIL FOR ALL DASD\n         CVD   R1,DOUB\n         MVC   WORK+18(L'MASKCYL),MASKCYL\n         ED    WORK+18(L'MASKCYL),DOUB\n         LA    R2,WORK\n         BAL   R11,PUT            WRITE LINE\n* WRITE TOTAL CYLS USED\n         MVC   WORK(18),=CL18' TOTAL CYLS USED  '\n         L     R1,CYLAVAIL\n         L     R0,CYLFREE\n         SR    R1,R0              CALC #CYLS USED\n         ST    R1,CYLUSED\n         CVD   R1,DOUB\n         MVC   WORK+18(L'MASKCYL),MASKCYL\n         ED    WORK+18(L'MASKCYL),DOUB\n         LA    R2,WORK\n         BAL   R11,PUT            WRITE LINE\n* WRITE TOTAL CYLS FREE\n         MVC   WORK(18),=CL18' TOTAL CYLS FREE  '\n         L     R1,CYLFREE         R1=TOTAL CYLS FREE FOR ALL DASD\n         CVD   R1,DOUB\n         MVC   WORK+18(L'MASKCYL),MASKCYL\n         ED    WORK+18(L'MASKCYL),DOUB\n         LA    R2,WORK\n         BAL   R11,PUT            WRITE LINE\n* WRITE % FREE\n         SR    R0,R0              CLEAR HI-ORDER DIVIDE REG\n         L     R1,CYLFREE         R0-R1 HAS CYLS FREE\n         M     R0,=F'1000'        ENLARGE TO ALLOW %.X DISPLAY\n         L     R14,CYLAVAIL       R14 HAS CYLS AVAIL\n         DR    R0,R14             R1 HAS QUOTIENT, IGNORE REMAINDER\n         CVD   R1,DOUB1           DOUB1 HAS PACKED VERSION OF QUOT.\nNOT0     EQU   *\n         MVC   WORK(31),=CL31' (%)   CYLS FREE  '\n         MVC   WORK+31(L'MASKPCT),MASKPCT\n         ED    WORK+31(L'MASKPCT),DOUB1+5\n         LA    R2,WORK\n         BAL   R11,PUT            WRITE LINE\n         XR    R0,R0\n         SPACE\nEXIT     EQU   *\n         TM    PRT+48,X'10'       DCB OPEN ?\n         BZ    NEVER              NO...\n         CLOSE (PRT)              CLOSE IT\nNEVER    EQU   *\n         L     R13,SAVEAREA+4\n         RETURN (14,12),RC=(15)\n         TITLE 'ERROR ROUTINES'\n***********************************************************************\n*                    E R R O R   R O U T I N E S                      *\n***********************************************************************\n         SPACE\nNOPARM   EQU   *\n         MVC   WORK(L'ERR1),ERR1\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\nPARMERR  EQU   *\n         MVC   WORK(L'ERR2),ERR2\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\nDEVERR   EQU   *\n         MVC   WORK(L'ERR3),ERR3\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\nBADVOL   EQU   *\n         MVC   WORK(L'ERR4),ERR4\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\nBADPARM  EQU   *\n         MVC   WORK(L'ERR5),ERR5\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\nCTODNF   EQU   *\n         MVC   WORK(L'ERR6),ERR6\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\nDTOCNF   EQU   *\n         MVC   WORK(L'ERR7),ERR7\n         LA    R2,WORK\n         BAL   R11,PUT\n         B     RET8\n         SPACE\n         TITLE 'SUBROUTINES'\n         DC    CL8'GENERIC',F'0'\nGENERIC  ST    R11,*-4\n*---------------------------------------------------------------------*\n*       GENERIC OPERAND.  ENTER  WITH R0 = MAX LENGTH, R1 -> DEST     *\n*---------------------------------------------------------------------*\n         LA    R3,PARMVAL\n         AH    R3,PARMLEN              POINT TO LAST CHAR IN ARG\n         BCTR  R3,0                    -----\n         CLI   0(R3),C'+'              GENERIC NAME?\n         BNE   STRLPN1                 ALL THE SAME TO ME\n         BCTR  R3,0                    DISCOUNT '+'\nSTRLPN1  LA    R0,PARMVAL\n         SR    R3,R0\n         BM    GENRNULL                NULL OPERAND, IGNORE\n         EX    R3,GENRMOVE\n         LA    R3,1(R3)\n         STH   R3,0(R1)\nGENRNULL EQU   *\n         L     R11,GENERIC-4\n         BALR  R11,R11\n*\nGENRMOVE MVC   2(0,R1),PARMVAL\n         EJECT\n*---------------------------------------------------------------------*\n*      WRITE TO TSO SCREEN\n*---------------------------------------------------------------------*\n         SPACE\n         DC    CL8'PUT',F'0'\nPUT      ST    R11,*-4\n         TM    PRT+48,X'10'       DCB OPEN ?\n         BO    OPENED             YUP\n         OPEN  (PRT,(OUTPUT))\nOPENED   EQU   *\n         PUT   PRT,(2)            WRITE RECORD\n         MVC   WORK(80),=CL80' '  CLEAR WORK AREA\n         L     R11,PUT-4\n         BALR  R11,R11\n         EJECT\n*---------------------------------------------------------------------*\n*        DETERMINE WHETHER OUTPUT IS BOUND                            *\n*---------------------------------------------------------------------*\n         DC    CL8'SETUP',F'0'\nSETUP    ST    R11,*-4\n         LA    R2,MSGHELP\n         BAL   R11,PUT\n         LA    R2,MSGHELP2\n         BAL   R11,PUT\n         L     R11,SETUP-4\n         BALR  R11,R11\n         EJECT\n*---------------------------------------------------------------------*\n*        PREPARE FOR UCB SCAN                                         *\n*---------------------------------------------------------------------*\n         DC    CL8'UCBSCAN',F'0'\nUCBSCAN  ST    R11,*-4\nUCBLOOP  DS    0H\n         PUSH PRINT\n         PRINT GEN\n         UCBSCAN COPY,                                                 X\n               WORKAREA=UCBWORK,                                       X\n               UCBAREA=UCBAREA,                                        X\n               DEVN=0,                                                 X\n               DYNAMIC=YES,                                            X\n               RANGE=ALL,                                              X\n               DEVCLASS=DASD\n         POP   PRINT\n         LTR   R15,R15                 END OF DASD DEVICES ?\n         BNZ   UCBEND                  YES...EXIT RTN\n*\n*---------------------------------------------------------------------*\n*        FILTER OUT UNWANTED DEVICES/VOLUMES                          *\n*---------------------------------------------------------------------*\n*\n         LA    R7,UCBAREA\n         USING UCB,R7\n         TM    UCBSTAT,UCBONLI          IS DEVICE ONLINE\n         BZ    UCBLOOP\n         LH    R1,VOLSERLN\n         LTR   R1,R1                   LEN=-1?\n         BNP   FFUNIT                  NO GENERIC OPTION\n         CLI   VOLSER0,C'*'            REQUESTING ALL DASD ?\n         BE    FFUNIT                  Y\n         BCTR  R1,0                BIAS\n         EX    R1,COMPSTR              COMPARE\n         BNE   UCBLOOP                 NO MATCH, IGNORE\n*\nFFUNIT   EQU   *\n* BEGIN - 4 CHAR UCB\n         UNPK  UCBNAME4(5),UCBCHAN(3)  CUUU FROM UCB\n         MVZ   UCBNAME4(4),=4X'00'     CLEAR ZONES FOR TR\n         TR    UCBNAME4(4),TRTAB       MAKE CHAR PRINTABLE\n         MVC   MESSAGE(4),UCBNAME4     PUT UNIT IN MSG\n* END - 4 CHAR UCB\n         LH    R1,UNITLN               FILTER FOR UNIT\n         LTR   R1,R1                   LEN=-1?\n         BNP   DEVLOOK\n         BCTR  R1,0                    BIAS\n         EX    R1,COMPUNIT             COMPARE\n         BNE   UCBLOOP                 NO MATCH, IGNORE\n*\nDEVLOOK  CLI   DEVMASK,0               DEVICE=PARM FILTER?\n         BE    FREELOOK                NO\n         CLC   UCBUNTYP,DEVMASK        YES, FILTER IT\n         BNE   UCBLOOP\n*\nFREELOOK EQU   *\n         BAL   R11,FORMAT\n         B     UCBLOOP                 GO FOR NEXT\n*\nUCBEND   DS    0H\n         L     R11,UCBSCAN-4\n         BALR  R11,R11\n*\nCOMPSTR  CLC   VOLSER0(0),UCBVOLI      GENERIC COMPARE\nCOMPUNIT CLC   UNIT0(0),UCBNAME4       GENERIC COMPARE\n         TITLE 'LOOKUP VOLUME CAPACITIES'\n***********************************************************************\n*        LOOKUP AND DISPLAY VOLUME FREE SPACE                         *\n***********************************************************************\n         SPACE 1\n         DROP  R7\n         DC    CL8'FORMAT',F'0'\nFORMAT   ST    R11,*-4\n         L     R1,VOLSFND              ADD 1 TO #VOLS CTR\n         LA    R1,1(R1)\n         ST    R1,VOLSFND\n         USING UCB,R5              ... STILL ...\n         MVI   HITS,TRUE\n         LA    R5,UCBAREA\n         LSPACE UCB=(R5),                                              X\n               SMF=NONE,                                               X\n               DATA=SPACEWRK,                                          X\n               F4DSCB=F4DSCB,                                          X\n               MF=I\n         LTR   R15,R15                  NORMAL ?\n         BNZ   FORMXX                   NO CONTINUE\n         MVC   MSGVOLSE,UCBVOLI         PUT VOLSER IN MSG\nMOUNTS   DS    0H                       GET PRIMARY UCB AGAIN\n         ICM   R15,15,SPACEWRK+8        * FREE CYLS *\n         L     R0,CYLFREE                 > INCREMENT\n         AR    R0,R15                     > TOTAL\n         ST    R0,CYLFREE                 > FREE CYLS\n         CVD   R15,DOUB\n         MVC   MSGFREEC(L'MASK),MASK\n         ED    MSGFREEC(L'MASK),DOUB+5\n*\n         ICM   R15,15,SPACEWRK+12       * FREE TRKS *\n         CVD   R15,DOUB\n         UNPK  WORK5(5),DOUB+5(3)\n         OI    WORK5+4,240\n         MVC   MSGFREET(4),WORK5+1\n*\n         ICM   R15,15,SPACEWRK+4        * FREE EXTENTS *\n         CVD   R15,DOUB\n         UNPK  WORK5(5),DOUB+5(3)\n         OI    WORK5+4,240\n         MVC   MSGFREEX(4),WORK5+1\n*\n         ICM   R15,15,SPACEWRK+16       * MAX FREE - CYL *\n         CVD   R15,DOUB\n         MVC   MSGMAXC(L'MASK),MASK\n         ED    MSGMAXC(L'MASK),DOUB+5\n*\n         ICM   R15,15,SPACEWRK+20       * MAX FREE - TRK *\n         CVD   R15,DOUB\n         UNPK  WORK5(5),DOUB+5(3)\n         OI    WORK5+4,240\n         MVC   MSGMAXT(4),WORK5+1\n*\n         MVC   MSGMOUNT,=CL12'      /     '\n         TM    UCBSTAT,UCBRESV          IS IT RESERVED?\n         BNO   *+10\n         MVC   MSGMOUNT+7(5),=CL5'RSERV'\n         TM    UCBSTAT,UCBPRES          IS IT RESIDENT\n         BNO   *+10\n         MVC   MSGMOUNT+7(5),=CL5'RSDNT'\n         TM    UCBSTAB,UCBBPRV          IS IT PRIVATE\n         BNO   TRYPUB\n         MVC   MSGMOUNT(6),=CL6'  PRIV'\n         B     ALLOCATE\nTRYPUB   DS    0H\n         TM    UCBSTAB,UCBBPUB          IS IT PUBLIC\n         BNO   TRYSTOR\n         MVC   MSGMOUNT(6),=CL6'PUBLIC'\n         B     ALLOCATE\nTRYSTOR  DS    0H\n         TM    UCBSTAB,UCBBSTR          IS IT STORAGE\n         BNO   ALLOCATE\n         MVC   MSGMOUNT(6),=CL6'  STRG'\n         EJECT\nALLOCATE DS    0H\n         SPACE\n         TM    UCBSTAT,UCBALOC          IS UNIT ALLOCATED\n         MVI   MSGALLOC,C'O'            DEFAULT TO OPEN\n         BNO   SMS\n         MVI   MSGALLOC,C'A'            ASSUME JUST ALLOCATED\n         TM    UCBSTAT,UCBSYSR          TEST FOR SYSTEM UNIT\n         BNO   SMS\n         MVI   MSGALLOC,C'S'            MUST BE SYSTEM\nSMS      EQU   *\n         TM    DS4SMSFG,X'C0'           SMS CONTROL ?\n         BZ    NOSMS                    NOPE\n         MVC   MSGSMS(3),=C'YES'\n         B     FRAGINDX\nNOSMS    EQU   *\n         MVC   MSGSMS(3),=C'NO '\n*\nFRAGINDX EQU   *\n         ICM   R15,15,SPACEWRK+32       * FRAGMENTATION INDEX *\n         CVD   R15,DOUB\n         UNPK  WORK5(5),DOUB+5(3)\n         OI    WORK5+4,240\n         MVC   MSGFRAG(4),WORK5+1\n*\nWRITEMSG EQU   *\n         SR    R15,R15              CLEAR R15 FOR WORK\n         ICM   R15,3,DS4DEVSZ       R15=TOTAL CYLINDERS FOR THIS UCB\n         TM    DS4DEVFG,DS4DEVAV    #ALT CYLS VALID ?\n         BZ    NODEDUCT             NO..SKIP USING ALT CYLS\n         SR    R14,R14              CLEAR R14\n         IC    R14,DS4DEVAC         R14 => #ALT CYLS\n         SR    R15,R14              DEDUCT ALT FROM AVAIL\nNODEDUCT EQU   *\n         L     R0,CYLAVAIL            > INCREMENT\n         AR    R0,R15                 > TOTAL CYLS IN\n         ST    R0,CYLAVAIL            > SPA REQUEST\n         CVD   R15,DOUB\n         MVC   MSGUTYP(L'MASKMAX),MASKMAX\n         ED    MSGUTYP(L'MASKMAX),DOUB+5  MAX # CYLS\n         MVC   WORK(MSGLEN),MESSAGE\n         LA    R2,WORK\n         BAL   R11,PUT\n         SPACE 3\nFORMXX   EQU   *\n         L     R11,FORMAT-4\n         BALR  R11,R11\n         DROP  R5\n         EJECT\n*---------------------------------------------------------------------*\n*        LOOKUP CHARACTER DEVICE ID.                                  *\n*        ON ENTRY, R1-> UNIT TYPE BYTE (CHAR)                         *\n*        ON EXIT,  R1-> UNIT NAME                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\n         EJECT\n*---------------------------------------------------------------------*\n*        TRANSLATE HUMAN DEVICE ID TO UCB DEVICE ID                   *\n*        ON ENTRY  R1-> UNIT NAME                                     *\n*        ON EXIT   R1-> UNIT TYPE BYTE (CHAR)                         *\n*---------------------------------------------------------------------*\n         SPACE 1\n         DC    CL8'DEVTOC',F'0'\nDEVTOC   ST    R11,*-4\n         LA    R2,DEVICES\nDTOCLP   CLI   0(R2),X'FF'         END?\n         BE    DTOCNF              NOT FOUND, ERROR\n         CLC   1(8,R2),0(R1)       TRY NEXT\n         BE    DTOCFF\n         LA    R2,9(R2)\n         B     DTOCLP\nDTOCFF   LR    R1,R2               POINT TO UCB TYPE\n         L     R11,DEVTOC-4\n         BALR  R11,R11\n         EJECT\n*\nMSGHELP  DC    CL80' UCB  VOLSER   +--- FREE ---+   MAX CONTIG    MOUNTX\n                   ALLOC/ AVAIL  SMS  FRAG'\nMSGHELP2 DC    CL80'               CYLS-TRKS-EXTS   CYLS-TRKS     ATTRIX\n               BS   OPN   CYLS        INDEX'\n         SPACE 2\n*---------------------------------------------------------------------*\n*        DEVICE TYPE LOOKUP TABLE                                     *\n*---------------------------------------------------------------------*\n         SPACE 1\nDEVICES  DS    0F\n         DC    XL1'0E',CL8'3380'\n         DC    XL1'0F',CL8'3390'\n         DC    XL1'FF',XL8'FFFFFFFFFFFFFFFF'      END\n         SPACE 2\n*---------------------------------------------------------------------*\n*        LOWER-TO-UPPER CASE TRANSLATION TABLE                        *\n*---------------------------------------------------------------------*\n         SPACE 1\nUPPER    DC    X'000102030405060708090A0B0C0D0E0F'\n         DC    X'101112131415161718191A1B1C1D1E1F'\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         TITLE 'TSOSPACE -- WORKING STORAGE'\n         DC    C'PARMS'\n*===== PARSING AREAS =========\nPARMADDR DC    A(0)         ADDRESS OF STRING FROM TSO    (TEXT PART)\nPARMPTR  DC    H'0'         OFFSET INTO STRING WHERE NEXT PARM IS FOUND\nINPARMLN DC    H'0'         LENGTH OF STRING FROM TSO\nKEYWORD  DC    CL8' '                      KEYWORD PARM NAME\n*\nPARM     DS    0CL82\nPARMLEN  DC    H'0'\nPARMVAL  DC    CL80' '             MAXIMUM POSSIBLE PARM AND THEN SOME\nPARMTYPE DC    C' '\n*==== END OF PARSING AREAS ====\n         SPACE 2\nMSGPARMS DC    F'0'                    ADDR OF MESSAGE LINE\nMSGPREF  DC    XL1'0'                  MESSAGE LENGTH\n*==== DATA LINE WRITTEN OUT ====\nMESSAGE  DS    0C                    .\nMSGUCB   DC    CL4' ',CL2' '         . DEVICE ADDRESS (CUU)\nMSGVOLSE DC    CL6' ',CL1' '         . VOLSER\nMSGFREEC DC    CL6' ',C','           . SPACE FREE - CYL\nMSGFREET DC    CL4' ',C','           . SPACE FREE - TRK\nMSGFREEX DC    CL4' ',CL1' '         . SPACE FREE - EXTENTS\nMSGMAXC  DC    CL6' ',C','           . MAX FREE - CYL\nMSGMAXT  DC    CL4' ',CL2' '         . MAX FREE - TRK\nMSGMOUNT DC    CL12' ',CL2' '        . MOUNT ATTRIBUTES\nMSGALLOC DC    CL1' ',CL2' '         . ALLOC./OPEN\nMSGUTYP  DC    CL7' ',CL2' '         . DASD UNIT TYPE\nMSGSMS   DC    CL3' ',CL2' '         . SMS STATUS\nMSGFRAG  DC    CL4' '                . FRAGMENTATION INDEX\nMSGLEN   EQU   *-MESSAGE\n*==== END OF LINE WRITTEN OUT ===\n*\nSPACEWRK DC    CL36' '                LSPACE RETURNS SPACE INFO HERE\n*\nUCBWORK  DC    XL100'00'           UCB SCAN WORK\nUCBAREA  DS    CL48                UCB\n*\nMSGOUT   DC    H'0'                OUTPUT TO ONE OF THE FOLLOWING...\nAPENDAGE DC    X'00'\n         SPACE 2\nDEVMASK  DC    AL1(0)              0 UNLESS DEV= PARM, THEN UCB TYPE\nHITS     DC    AL1(0)              0 UNTIL 1ST VOLUME PASSES FILTER\nTRUE     EQU   X'FF'\nFALSE    EQU   0\n         SPACE 2\nVOLSERLN DC    Y(0)\nVOLSER0  DC    CL6' '\nUNITLN   DC    H'0'\nUNIT0    DC    CL4' '\n         SPACE\nWORK5    DS    CL5\nDOUB     DS    D\nDOUB1    DS    D\nDOUB2    DS    D\nMASK     DC    X'402020212020'\nMASKCYL  DC    X'402020206B2020206B2020206B2020206B202120'\nMASKPCT  DC    X'40202020214B20'\nMASKMAX  DC    X'4020206B202120'\nTRTAB    DC    C'0123456789ABCDEF'\nUCBNAME4 DS    CL5                    4 CHAR UCB NAME\nLIST     DS    0F\nAPARMAD  DC    A(0)\nAPTR     DC    A(PARMPTR)\nAPARM    DC    A(PARM)\n         DC    AL1(128)\nAPARMLN  DC    AL3(INPARMLN)\n         SPACE\nCYLAVAIL DC    F'0'\nCYLUSED  DC    F'0'\nCYLFREE  DC    F'0'\nVOLSFND  DC    F'0'\nQUOTIENT DC    PL15'0'\n         SPACE\nERR1     DC    C'SPA01 - OPERAND IS MISSING'\nERR2     DC    C'SPA02 - MISTYPED COMMAND'\nERR3     DC    C'SPA10 - NO VOLUMES MET SELECTION CRITERIA'\nERR4     DC    C'SPA04 - SUPPLIED VOLUMES SERIAL NUMBER WAS INVALID'\nERR5     DC    C'SPA03 - INVALID PARAMETER'\nERR6     DC    C'SPA06 - ENCOUNTERED AN UNKNOWN DEVICE TYPE. CALL T.S'\nERR7     DC    C'SPA07 - INVALID DEVICE NAME'\n         SPACE 3\nWORK     DC    CL80' '            PRT WORK AREA\nEXPMSG   DC    CL40' ' ****TEST\n         PRINT NOGEN\nF4DSCB   DS    0F\n         IECSDSL1 4\n         DS    0D\nPRT      DCB   DDNAME=PRT,DSORG=PS,MACRF=PM\n         PRINT GEN\n         LTORG\n         TITLE 'TSOSPACE - IBM DATA AREAS'\nCVT00    CVT   DSECT=YES\n         EJECT\nUCB      DSECT\n         IEFUCBOB\n         SPACE 3\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT608/FILE608.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT608", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}