{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011110000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE034.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE034.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x02'", "DS1TRBAL": "b'\\xd0\\xa6'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x00B\\x00\\x04\\x00B\\x00\\t\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00\\x06\\x01 )\\x0f\\x01 )\\x0f\\x110\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T11:30:06", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-500"}, "text": "REGULAR CBT TAPE - VERSION 500    FILE:  034\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT500.FILE034\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 2 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,823 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   10/16/20    11:30:05    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "@FILE034": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x05\\x00\\x00V\\x01 )\\x0f\\x01 )\\x0f\\x11)\\x00\\x18\\x00\\x18\\x00\\x00\\xc3\\xc2\\xe3`\\xf5\\xf0\\xf0@@@'", "ispf": {"version": "05.00", "flags": 0, "createdate": "2020-10-16T00:00:00", "modifydate": "2020-10-16T11:29:56", "lines": 24, "newlines": 24, "modlines": 0, "user": "CBT-500"}, "text": "//***FILE 034 IS FROM NORTHEAST LOUISIANA UNIVERSITY AND            *   FILE 034\n//*           CONTAINS A COPY OF THEIR PROGRAM CALLED RACFUSER.     *   FILE 034\n//*           THIS IS AN ASSEMBLER PROGRAM WHICH WILL READ THE      *   FILE 034\n//*           RACF MASTER DATA SET, PRINT THE PASSWORD              *   FILE 034\n//*           EXPIRATION DATE, AND CLASSIFY A USERID INTO ONE OF    *   FILE 034\n//*           THE FOLLOWING CATEGORIES :                            *   FILE 034\n//*                                                                 *   FILE 034\n//*             A. PASSWORD WILL EXPIRE BEFORE A SPECIFIED          *   FILE 034\n//*                THRUDATE (WHICH IS SPECIFIED ON A PARM OR        *   FILE 034\n//*                ALLOWED TO DEFAULT TO SEVEN DAYS FROM            *   FILE 034\n//*                TODAY).                                          *   FILE 034\n//*             B. PASSWORD WILL REMAIN ACTIVE AFTER THE            *   FILE 034\n//*                THRUDATE,                                        *   FILE 034\n//*             C. PASSWORD CURRENTLY EXPIRED,           OR         *   FILE 034\n//*             D. USERID HAS NEVER BEEN USED                       *   FILE 034\n//*                                                                 *   FILE 034\n//*           THIS INFORMATION CAN BE USED BY A SECURITY            *   FILE 034\n//*           ADMINISTRATOR TO CONTROL THE CONTENTS OF THE RACF     *   FILE 034\n//*           MASTER DATA SET WHICH INCLUDES ELIMINATING UNUSED     *   FILE 034\n//*           OR OBSOLETE USERIDS AND NOTIFYING DATA CONTROL        *   FILE 034\n//*           ABOUT UPCOMING PASSWORD EXPIRATIONS IN SELDOM RUN     *   FILE 034\n//*           BATCH JOBS.  THIS HELPS PREVENT JCL ERRORS DUE TO     *   FILE 034\n//*           AN EXPIRED PASSWORD.                                  *   FILE 034\n//*                                                                 *   FILE 034\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "RACFUSER": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x002\\x00\\x86\\x08_\\x00\\x86\\x08_\\x11&\\x07\\x07\\x07\\x07\\x00\\x00\\xc3\\xc4\\xc1\\xe5\\xc9\\xe2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1986-03-26T00:00:00", "modifydate": "1986-03-26T11:26:32", "lines": 1799, "newlines": 1799, "modlines": 0, "user": "CDAVIS"}, "text": "//UCCCEDR1 JOB (1310,0001),'CHUCK / ADM 1-101',\n//             CLASS=Z,\n//             NOTIFY=UCCCED,\n//             REGION=1024K,\n//             MSGCLASS=S\n/*JOBPARM   L=9999\n//********************************************************************\n//* BEFORE SUBMITTING THIS JOB, CHANGE THE DATA SET NAME FROM        *\n//*    MVS.SYSTEMS.LINKLIB                                           *\n//* TO AN APPROPRIATE LOAD MODULE LIBRARY.                           *\n//********************************************************************\n//PROC01    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN    DD *\nRACFUSER TITLE 'ROUTINE TO READ THE RACF MASTER FILE'\n***********************************************************************\n*                                                                     *\n*        MODULE NAME = RACFUSER                                       *\n*                                                                     *\n*        DESCRIPTIVE NAME = LISTS USERIDS IN THE RACF MASTER FILE     *\n*                                                                     *\n*        AUTHOR = CHUCK DAVIS         DATE = 03/21/86                 *\n*                                                                     *\n*        FUNCTION =                                                   *\n*                                                                     *\n*        RACFUSER IS AN ASSEMBER SOURCE PROGRAM WHICH WILL READ THE   *\n*        RACF MASTER DATA SET, PRINT THE PASSWORD EXPIRATION DATE,    *\n*        AND CLASSIFY A USERID INTO ONE OF THE FOLLOWING CATEGORIES:  *\n*          A. PASSWORD WILL EXPIRE BEFORE A SPECIFIED THRUDATE (WHICH *\n*             IS SPECIFIED ON A PARM OR ALLOWED TO DEFAULT TO SEVEN   *\n*             DAYS FROM TODAY).                                       *\n*          B. PASSWORD WILL REMAIN ACTIVE AFTER THE THRUDATE,         *\n*          C. PASSWORD CURRENTLY EXPIRED,           OR                *\n*          D. USERID HAS NEVER BEEN USED,                             *\n*        THIS INFORMATION CAN BE USED BY A SECURITY ADMINISTRATOR TO  *\n*        CONTROL THE CONTENTS OF THE RACF MASTER DATA SET WHICH       *\n*        INCLUDES ELIMINATING UNUSED OR OBSOLETE USERIDS AND NOTIFING *\n*        DATA CONTROL ABOUT UPCOMING PASSWORD EXPIRATIONS IN SELDOM   *\n*        RUN BATCH JOBS.  THIS HELP PREVENT JCL ERRORS DUE TO AN      *\n*        EXPIRED PASSWORD.                                            *\n*                                                                     *\n*        OPERATION =                                                  *\n*                                                                     *\n*           RACFUSER IS USES BSAM PROCESSING TO DIRECTLY ACCESS THE   *\n*        RACF MASTER DATA SET.  A POINT MACRO FOLLOWED BY A READ      *\n*        MACRO OBTAINS THE CORRECT PHYSICAL BLOCK.                    *\n*                                                                     *\n*        THE LOGIC OVERVIEW IS AS FOLLOWS:                            *\n*          1.  PROCESS THE PARM FIELD.                                *\n*          2.  PROCESS THE RACF MASTER DATA SET HEADER (ICB).         *\n*          3.  FROM THE ICB, DETERMINE THE RBA OF THE SEQUENCE SET    *\n*              INDEX.                                                 *\n*          4.  READ THE FIRST SEQUENCE SET INDEX BLOCK AND DETERMINE  *\n*              THE RBA OF THE ASSOCIATED PROFILE.                     *\n*          5.  READ THE PROFILE, DETERMINE THE EXPIRATION DATE AND    *\n*              OPTIONALLY PRINT THE INFORMATION.                      *\n*          6.  CONTINUE WITH THE NEXT ELEMENT IN THE INDEX BLOCKS     *\n*              SEQUENTIALLY UNTIL THE END.                            *\n*          7.  USE DATA IN COLUMNS 1-8 OF THE DATA SET SPECIFIED BY   *\n*              RACFEXCL TO EXCLUDE LISTING OF VARIOUS USERIDS.  THIS  *\n*              COULD BE USED TO PREVENT THE PRINTING OF TSO USERIDS.  *\n*          8.  FINALLY, STATISTICS INCLUDE THE NUMBER OF USERIDS      *\n*              IN THE RACF DATA SET.                                  *\n*                                                                     *\n*        THE EXTERNAL ROUTINE, XDATEDIT, IS USED TO CONVERT A JULIAN  *\n*        DATE TO MM/DD/YY FORMAT.                                     *\n*                                                                     *\n*        THE EXTERNAL ROUTINE, YDATEDIT, IS USED TO CONVERT A DATE IN *\n*        MM/DD/YY FORMAT TO JULIAN.                                   *\n*                                                                     *\n*       REGISTER ASSIGNMENTS                                          *\n*        R0  - WORK                                                   *\n*        R1  - WORK                                                   *\n*        R2  - WORK                                                   *\n*        R3  - WORK                                                   *\n*        R4  - WORK                                                   *\n*        R5  - WORK                                                   *\n*        R6  - FREE                                                   *\n*        R7  - ADDRESS OF THE CURRENT SEQ SET ITEM BEING PROCESSED    *\n*        R8  - ADDRESS OF THE CURRENT PROFILE BEING PROCESSED         *\n*        R9  - DCB ADDRESS FOR RACFMAST                               *\n*        R10 - REGISTER USED IN PROGRAM CONTROL (BAL)                 *\n*        R11 - PROGRAM BASE REGISTER                                  *\n*        R12 - PROGRAM BASE REGISTER                                  *\n*        R13 - WORK/SAVE AREA BASE REGISTER                           *\n*        R14 - WORK/RETURN ADDRESS                                    *\n*        R15 - WORK/RETURN CODE                                       *\n*                                                                     *\n*        PROGRAM TYPE = MAINLINE                                      *\n*                                                                     *\n*               PROCESSOR = ASM                                       *\n*                                                                     *\n*               MODULE SIZE = LESS THAN 8K BYTES                      *\n*                                                                     *\n*               ATTRIBUTES = PROBLEM PROGRAM STATE                    *\n*                                                                     *\n*        ENTRY POINTS = RACFUSER                                      *\n*                                                                     *\n*               LINKAGE FROM = JCL OR CALLABLE FROM TSO               *\n*                                                                     *\n*        INPUT =                                                      *\n*                                                                     *\n*               REGISTER 1 - ADDRESS OF AN OPTIONAL PARAMETER WHICH   *\n*                            DETERMINES WHICH USERIDS ARE TO BE       *\n*                            PRINTED.                                 *\n*                                                                     *\n*        OUTPUT =                                                     *\n*                                                                     *\n*               A LIST OF USERIDS ON DDNAME, SYSPRINT                 *\n*                                                                     *\n*        EXIT - NORMAL = RETURN                                       *\n*               OUTPUT = LIST OF USERIDS                              *\n*               RETURN CODE = RC = 0                                  *\n*                                                                     *\n*        EXIT - ERROR =  NONE                                         *\n*               OUTPUT = UNPREDICTABLE                                *\n*               RETURN CODE = RC = 16                                 *\n*                                                                     *\n*        EXTERNAL REFERENCES =                                        *\n*                                                                     *\n*               ROUTINES     A. XDATEDIT - CONVERT YYDDD TO MM/DD/YY  *\n*                            B. YDATEDIT - CONVERT MM/DD/YY TO YYDDD  *\n*               DATA AREAS   A. RACFMAST - THE RACF MASTER FILE       *\n*                            B. RACFEXCL - THE USERID EXCLUDE FILE    *\n*                            C. SYSPRINT - THE OUTPUT DATA SET        *\n*               CONTROL BLOCKS  NONE                                  *\n*               TABLES          EXCLUDE TABLE IS READ FROM RACFEXCL   *\n*                                                                     *\n*        MACROS USED =                                                *\n*                  MACRO           DSNAME                             *\n*                  --------        --------------------               *\n*                   SAVE            SYS1.MACLIB                       *\n*                   RETURN          SYS1.MACLIB                       *\n*                   GETMAIN         SYS1.MACLIB                       *\n*                   FREEMAIN        SYS1.MACLIB                       *\n*                   GET             SYS1.MACLIB                       *\n*                   PUT             SYS1.MACLIB                       *\n*                   READ            SYS1.MACLIB                       *\n*                   CHECK           SYS1.MACLIB                       *\n*                   POINT           SYS1.MACLIB                       *\n*                   OPEN            SYS1.MACLIB                       *\n*                   CLOSE           SYS1.MACLIB                       *\n*                   FREEPOOL        SYS1.MACLIB                       *\n*                   TIME            SYS1.MACLIB                       *\n*                   DCB             SYS1.MACLIB                       *\n*                   DCBD            SYS1.MACLIB                       *\n*                   REGISTER        IN STREAM                         *\n*                                                                     *\n*        CHANGE ACTIVITY =                                            *\n*   DATE    USERID              ACTIVITY                              *\n* 03/21/86 UCCCED   CUTOFF FROM THE DEVELOPMENT                       *\n* 04/03/86 UCCCED   ADD CODE TO PRINT THE THRU DATE BEGIN USED.       *\n*                                                                     *\n*        MESSAGES = SEE MESSAGES AT MSG1... AND ERR1...               *\n*                                                                     *\n*        ABEND CODES = NONE                                           *\n*                                                                     *\n*        EXAMPLE 1                                                    *\n*                                                                     *\n*    //UCCCEDR1 JOB (1310,0001),'CHUCK /  RM 1-101',                  *\n*    //             CLASS=A,                                          *\n*    //             NOTIFY=UCCCED,                                    *\n*    //             REGION=64K                                        *\n*    //             MSGCLASS=A                                        *\n*    //* REFER TO UCCCED.TEST.JCLLIB(RACFUSER)                        *\n*    /*JOBPARM  L=2                                                   *\n*    //EXAMPLE1 EXEC PGM=RACFUSER,PARM='F,THRU=04/30/86'              *\n*    //***********************************************************    *\n*    //* THE PARM FIELDS FOR RACFUSER ARE USED TO CONTROL THE    *    *\n*    //* OUTPUT AS FOLLOWS:                                      *    *\n*    //*  F - LIST USERIDS WHICH WILL EXPIRE BEFORE THE THRUDATE *    *\n*    //*  THRU= KEYWORD PARAMETER WHICH FOLLOWS THE LIST         *    *\n*    //*        PARAMETERS AND IS OF THE FORMAT MM/DD/YY.  IT    *    *\n*    //*        CORRESPONDS WITH THE \"F\" LIST PARAMETER.         *    *\n*    //*        IF THRU IS NOT SPECIFIED, IT DEFAULTS TO THE     *    *\n*    //*        CURRENT DATE + 7.                                *    *\n*    //* FOR EXAMPLE, ALL USERIDS WHICH EXPIRE BEFORE 04/30/86   *    *\n*    //*   WILL BE LISTED.                                       *    *\n*    //***********************************************************    *\n*    //STEPLIB  DD DSN=MVS.SYSTEMS.LINKLIB,DISP=SHR                   *\n*    //RACFMAST DD DSN=SYS1.RACF.MASTER,DISP=SHR                      *\n*    //RACFEXCL DD DUMMY                                              *\n*    //SYSPRINT DD SYSOUT=*                                           *\n*                                                                     *\n*        SAMPLE OUTPUT FROM EXAMPLE 1 - RUN DATE IS 04/04/86          *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n* LISTING OF USERIDS FROM THE RACF DATA SET            PAGE 001       *\n*     USERID    EXPDATE      PERTINENT INFORMATION                    *\n*                                                                     *\n* THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LISTED:          *\n* F (PASSWORD WILL EXPIRE BEFORE THE FUTURE THRU DATE)                *\n*                                                                     *\n* THE ACTUAL THRU DATE BEING USED IS     04/30/86     (86120)         *\n*                                                                     *\n* THE FOLLOWING USERIDS ARE BEING EXCLUDED:                           *\n*                                                                     *\n* NO USERIDS ARE BEING EXCLUDED                                       *\n*                                                                     *\n*   ** BIODWP    04/13/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*  +++ DBTBTCH   04/29/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*   ** ECOHLW    04/14/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*  +++ FRSBTCH   04/26/86   PASSWORD WILL EXPIRE BEFORE THE THRU DATE *\n*                                                                     *\n***********************************************************************\n*                                                                     *\n*                                                                     *\n*        EXAMPLE 2                                                    *\n*                                                                     *\n*                                                                     *\n*    //UCCCEDR2 JOB (1310,0001),'CHUCK /  RM 1-101',                  *\n*    //             CLASS=A,                                          *\n*    //             NOTIFY=UCCCED,                                    *\n*    //             REGION=64K                                        *\n*    //             MSGCLASS=A                                        *\n*    //* REFER TO UCCCED.TEST.JCLLIB(RACFUSER)                        *\n*    /*JOBPARM  L=2                                                   *\n*    //EXAMPLE2 EXEC PGM=RACFUSER,PARM='AEN'                          *\n*    //***********************************************************    *\n*    //* THE PARM FIELDS FOR RACFUSER ARE USED TO CONTROL THE    *    *\n*    //* OUTPUT AS FOLLOWS:                                      *    *\n*    //*  A - LIST ACTIVE USERS                                  *    *\n*    //*  E - LIST EXPIRED USERS                                 *    *\n*    //*  N - LIST USERIDS WHICH HAVE NEVER BEEN USED            *    *\n*    //***********************************************************    *\n*    //STEPLIB  DD DSN=MVS.SYSTEMS.LINKLIB,DISP=SHR                   *\n*    //RACFMAST DD DSN=SYS1.RACF.MASTER,DISP=SHR                      *\n*    //RACFEXCL DD DSN=MVS.SYSTEMS.PARMLIB(RACFEXCL),DISP=SHR  *****  *\n*    //SYSPRINT DD SYSOUT=*                                           *\n*    //                                                               *\n*                                                                     *\n*        CONTENTS OF MVS.SYSTEMS.PARMLIB(RACFEXCL)                    *\n*                                                                     *\n*    * THIS IS A COMMENT                                              *\n*    * THE FOLLOWING LOGONIDS WILL NOT BE LISTED                      *\n*    TSO001                                                           *\n*    TSO002                                                           *\n*    CSC099                                                           *\n*    CIS001                                                           *\n*    * END OF THE EXCLUDE LIST                                        *\n*                                                                     *\n*        SAMPLE OUTPUT FROM EXAMPLE 2 - DATE OF RUN IS 04/04/86       *\n*                                                                     *\n***********************************************************************\n* LISTING OF USERIDS FROM THE RACF DATA SET           PAGE 001        *\n*     USERID    EXPDATE      PERTINENT INFORMATION                    *\n*                                                                     *\n* THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LISTED:          *\n* A (CURRENTLY ACTIVE)                                                *\n* E (PASSWORD CURRENTLY EXPIRED)                                      *\n* N (NEVER USED AS A LOGON ID)                                        *\n*                                                                     *\n* *****                                                               *\n*                                                                     *\n* THE FOLLOWING USERIDS ARE BEING EXCLUDED:                           *\n* * THIS IS A COMMENT                                                 *\n* * THE FOLLOWING LOGONIDS WILL NOT BE LISTED                         *\n* TSO001                                                              *\n* TSO002                                                              *\n* CSC099                                                              *\n* CIS001                                                              *\n* * END OF THE EXCLUDE LIST                                           *\n*                                                                     *\n*    * ASFRRK    03/11/86   PASSWORD IS CURRENTLY EXPIRED.            *\n*      CISWHH    08/20/86   USERID WILL REMAIN ACTIVE AFTER THRUDATE. *\n*    * CIS002     - NA -    USERID HAS NEVER BEEN USED.               *\n*    * CIS003     - NA -    USERID HAS NEVER BEEN USED.               *\n***********************************************************************\n*                                                                     *\n***********************************************************************\n*   THE FOLLOWING COMMAND PROCEDURE MAY BE USED UNDER TSO TO LIST     *\n*   THE USERIDS WHOSE PASSWORD WILL EXPIRE BEFORE THE THRU DATE.      *\n*                                                                     *\n*        PROC 1 THRUDATE  DEBUG                                       *\n*        /* THRUDATE MUST BE SPECIFIED AS \"MM/DD/YY\".    */           *\n*        IF &DEBUG = DEBUG                  -                         *\n*             THEN DO                                                 *\n*                  CONTROL LIST   MSG                                 *\n*                  END                                                *\n*             ELSE DO                                                 *\n*                  CONTROL NOLIST NOMSG                               *\n*                  END                                                *\n*        FREE F(RACFMAST SYSPRINT RACFEXCL)                           *\n*        ALLOC F(RACFMAST) DS('SYS1.RACF.MASTER') SHR                 *\n*        ALLOC F(RACFEXCL) DUMMY                                      *\n*        ALLOC F(SYSPRINT) DS(*)                                      *\n*        CALL 'MVS.SYSTEMS.LINKLIB(RACFUSER)' 'F,THRU=&THRUDATE.'     *\n*                                                                     *\n***********************************************************************\n* END OF DOCUMENTATION SECTION.                                       *\n***********************************************************************\n         SPACE 3\n         MACRO\n         REGISTER\n         LCLA  &NUM\n&NUM     SETA  0\n         SPACE 2\n.LOOP    ANOP\nR&NUM    EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LE 15).LOOP\n         SPACE  2\n         MEND\n         TITLE 'HOUSEKEEPING'\n         PRINT GEN\nRACFUSER CSECT\n         SAVE  (14,12),,RACFUSER.&SYSDATE..&SYSTIME\n         LR    R11,R15            LOAD THE FIRST BASE REGISTER\n         USING RACFUSER,R11,R12   TELL ASM\n         LR    R3,R1              SAVE PARM ADDRESS\n         LR    R12,R11            SET UP THE SECOND BASE REGISTER\n         LA    R12,4095(R12)       REGISTER AT 4096 PAST THE\n         LA    R12,1(R12)          FIRST BASE REGISTER.\n         LA    R0,SAVEALEN        GET THE LENGTH FOR THE GETMAIN\n         GETMAIN R,LV=(R0)        GETMAIN THE WORK/SAVE AREA\n         USING SAVEAREA,R1        TEMPORARILY ADDRESS IT\n         ST    R13,REGSAVE+4      SET UP BACKWARD POINTER\n         LR    R2,R13             DUP OLD SAVEAREA\n         LA    R13,SAVEAREA       POINT TO NEW AREA\n         ST    R13,8(R2)          SET UP FORWARD POINTER IN OLD AREA\n         DROP  R1\n         USING SAVEAREA,R13       PERMANENT WORK/SAVE AREA\n         ST    R3,PARMADDR        STORE THE ADDRESS OF THE INPUT PARM\n* -ESTABLISH DSECT ADDRESSABILITY ----------------------------------*\n         USING IHADCB,R9          ADDRESS THE RACFMAST DSECT\n         TITLE 'MAIN PROGRAM BODY'\n        BAL   R10,PROLOGUE       INITIALIZE ROUTINE\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,OPENALL        OPEN THE FILES\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PRTHEAD        PRODUCE THE HEADER\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCPARM       PROCESS THE INPUT PARM\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCEXC1       PROCESS THE EXCLUDE TABLE\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,RACFINDX        ADDRESS OF THE RACF ICB BUFFER\n         LR    R3,R7              R3 IS USED BY READNEXT\n        BAL   R10,READNEXT       READ THE RACF HEADER BLOCK (ICB)\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCICB        PROCESS THE DATA IN THE ICB\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         MVC   RBA(6),CEDSSRBA    SET RBA FOR INDEX SEQUENCE SET\n         MVC   RBAINDEX(6),RBA    SAVE RBA OF INDEX SEQUENCE SET\n        BAL   R10,POINT          POINT TO AN RBA\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,RACFINDX        ADDRESS OF THE RACF INDEX BUFFER\n         LR    R3,R7              R3 IS USED BY READNEXT\n        BAL   R10,READNEXT       READ THE INDEX SEQUENCE SET\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCINDX       PROCESS THE DATA IN THE SEQ SET INDEX\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,PROCSTAT       TELL THE NUMBER OF USERS\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,CLOSEALL       CLOSE THE FILES\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n        BAL   R10,EPILOGUE       PREPARE FOR THE SHUTDOWN\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         XR    R15,R15            CLEAR THE RETURN CODE\n         B     ENDJOB             WE ARE FINISHED.\n         TITLE 'ERROR HANDLERS'\nERRGENRL DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR1L),ERR1   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nERRINDEX DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR2L),ERR2   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nERR3PROF DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR3L),ERR3   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nERR4PROF DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE OUTPUT LINE\n         MVC   LINE(ERR3L),ERR4   MOVE IN THE MESSAGE\n         BAL   R10,PRTLINE        PRINT IT\n         LA    R15,16             SET A NONZERO RETURN CODE\n         B     ENDJOB\nENDJOB   DS    0H\n         LA    R0,SAVEALEN        GET THE LENGTH FOR FREEMAIN\n         LR    R1,R13             GET THE ADDRESS FOR FREEMAIN\n         L     R13,REGSAVE+4      REESTABLISH PREVIOUS SAVE AREA\n         FREEMAIN R,LV=(R0),A=(R1)     FREE THE STORAGE\n         RETURN (14,12),,RC=(15)  RETURN TO YOUR SENDER\n         TITLE 'INITIALIZE KEY VARIABLES'\nPROLOGUE DS    0H                 INITIALIZE KEY VARIABLES\n         SPACE\n         LA    R0,0               LOAD BINARY ZEROES\n         ST    R0,DECB            INITIALIZE THE ECB FOR DASD READ\n         ST    R0,LINECNTR        INITIALIZE THE LINECNTR\n         ZAP   PAGECNTR(4),=PL3'+1'  INITIALIZE THE PAGE COUNTER\n         ZAP   USERCNTR(4),=PL3'+0'  INITIALIZE THE USER COUNTER\n         SPACE\n         LOAD  EPLOC=XDATEDIT     LOAD THE LOAD MODULE\n         ST    R0,XDATADDR        STORE THE ADDRESS OF THE MODULE\n         SPACE\n         TIME  DEC                GET 00YYDDDF DATE IN R1\n         MVC   CRNTPDAT(8),=XL8'0000000000000000'  ZERO FIELD OUT\n         ST    R1,CRNTPDAT+4      STORE IN LAST 4 BYTES\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         CVB   R3,CRNTPDAT        CONVERT FOR BINARY OPERATIONS\n         ST    R3,CRNTBDAT        SAVE AS BINARY\n         D     R2,=F'1000'        BREAK INTO DAY AND YEAR\n         ST    R3,CRNTYR          STORE THE QUOTIENT - THE CURRENT YEAR\n         ST    R2,CRNTDAY         STORE THE REMAINDER - THE CURRENT DAY\n* REGULAR LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 4 ?\n*  IF SO, IT IS A LEAP YEAR IN THAT YEAR.\nLPYR1    XR    R2,R2              CLEAR FOR THE DIVIDE\n         D     R2,=F'4'           DETERMINE IF THIS A LEAP YEAR\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LPYR1NO            A. NO\nLPYR1YES MVC   CRNTDPY(4),=F'366' SET DAYS PER YEAR AT 366\n         B     LPYR2\nLPYR1NO  MVC   CRNTDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LPYR2\n* CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 100 ?\n*  IF SO, OMIT THE LEAP YEAR IN THAT YEAR.\nLPYR2    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,CRNTYR          RELOAD THE CURRENT YEAR\n         D     R2,=F'100'         DETERMINE IF THIS A CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LPYR3              A. NO\nLPYR2NO  MVC   CRNTDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LPYR3\n* SPECIAL CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 400 ?\n*  IF SO, LEAVE THE LEAP YEAR IN THAT YEAR.\nLPYR3    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,CRNTYR          RELOAD THE CURRENT YEAR\n         D     R2,=F'400'         DETERMINE IF THIS A SPC CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   PTHRUDF1           A. NO\nLPYR3NO  MVC   CRNTDPY(4),=F'366' SET DAYS PER YEAR AT 366\nPTHRUDF1 L     R2,CRNTDAY         RELOAD THE CURRENT DAY\n         L     R3,CRNTYR          RELOAD THE CURRENT YR\n*      ADD 7 TO CURRENT DATE FOR DEFAULT TARGET DATE\n         LA    R2,7(R2)           FIND DAY+7\n         CL    R2,CRNTDPY         Q. DID WE OVERFLOW THE YEAR ?\n         BNH   PTHRUDF2           A. NO\n         S     R2,CRNTDPY         DETERMINE THE OVERFLOW\n         LA    R3,1(R3)           INCREMENT THE YEAR\nPTHRUDF2 ST    R3,TRGTYR          STORE THE QUOTIENT - THE TARGET YEAR\n         ST    R2,TRGTDAY         STORE THE REMAINDER - THE TARGET DAY\n         XR    R2,R2              CLEAR FOR THE MULTIPLY\n         M     R2,=F'1000'        MOVE THE YEAR OVER\n         A     R3,TRGTDAY         ADD THE DAYS BACK IN\n         CVD   R3,TRGTPDAT        STORE AS THE TARGET DATE\n         SPACE\n         OI    TRGTPDAT+7,X'0F'   MAKE TARGET     DATE UNSIGNED\n         OI    CRNTPDAT+7,X'0F'   MAKE CURRENT    DATE UNSIGNED\n         SPACE\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'OPEN ALL FILES'\nOPENALL  DS    0H                 OPEN THE PROCESSING FILES\n         LA    R9,RACFMAST        LOAD DCB ADDRESS\n         SPACE\n         OPEN  ((R9),INPUT)       OPEN RACF MASTER DATA SET\n         SPACE 3\n         OPEN  (RACFEXCL,INPUT)   OPEN EXCLUDE TABLE FILE\n         SPACE 3\n         OPEN  (SYSPRINT,OUTPUT)  OPEN OUTPUT TO THE PRINTER\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PROCESS THE PARM'\nPROCPARM DS    0H                 PROCESS THE PARM FIELDS\n         SPACE 1\n         ST    R10,SAVEPARM       SAVE R10\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG7L),MSG7   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         MVI   PARMFLAG,X'00'     INITIALIZE THE PARM FLAGS\n         L     R2,PARMADDR        LOAD ADDRESS PARM FIELD ADDRESS\n         L     R2,0(R2)           LOAD ADDRESS OF THE PARM FIELD\n         USING PARMREC,R2         ADDRESS THE PARM FIELD\n         LH    R3,PARMCNT         GET THE PARM COUNT\n         LTR   R3,R3              Q. DOES IT EXIST ?\n         BE    PPARMDFT           A. NO, SET THE DEFAULTS\n         LA    R4,PARMDATA        FIND THE PARM BEGINNING\nPPARML0  DS    0H\n         CLI   0(R4),C','         Q. DOES THIS START THE SECOND PART ?\n         BE    PTHRU              A. YES, PROCESS THE \",THRU=MM/DD/YY\"\n         CLC   0(5,R4),=C'THRU='  Q. DOES THIS START THE SECOND PART ?\n         BE    PTHRU1             A. YES, PROCESS THE \"THRU=MM/DD/YY\"\nPPARML1  DS    0H\n         CLI   0(R4),C'A'         Q. LIST ACTIVE USERS ?\n         BNE   PPARML2            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARMA     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG8L),MSG8   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML2  DS    0H\n         CLI   0(R4),C'E'         Q. LIST EXPIRED USERS ?\n         BNE   PPARML3            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARME     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG9L),MSG9   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML3  DS    0H\n         CLI   0(R4),C'F'         Q. LIST FUTURE EXPIREES ?\n         BNE   PPARML4            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARMF     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG10L),MSG10 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML4  DS    0H\n         CLI   0(R4),C'N'         Q. LIST NEVER ACTIVE ?\n         BNE   PPARML5            A. NO, SKIP NEXT COMMAND\n         OI    PARMFLAG,PARMN     SET THE FLAG\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG11L),MSG11 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARML5            JUMP TO END OF LOOP\nPPARML5  LA    R4,1(R4)           INCREMENT POINTER\n         BCT   R3,PPARML0         LOOP UNTIL NO MORE DATA\n         B     PPARMEND\n         SPACE\nPTHRU    DS    0H                 PROCESS THE \",THRU=MM/DD/YY\" KEYWORD\n         CL    R3,=F'14'          Q. ARE THERE ENOUGH CHARACTERS ?\n         BL    PTHRUDFT           A. NO, USE THE DEFAULT\n         LA    R4,1(R4)           INCREMENT PAST THE COMMA\n         B     PTHRU2             LET HIM THRU\nPTHRU1   DS    0H                 PROCESS THE \"THRU=MM/DD/YY\" KEYWORD\n         CL    R3,=F'13'          Q. ARE THERE ENOUGH CHARACTERS ?\n         BL    PTHRUDFT           A. NO, USE THE DEFAULT\nPTHRU2   CLC   0(5,R4),=C'THRU='  Q. DOES IT FIT THE SYNTAX ?\n         BNE   PTHRUDFT           A. NO, USE THE DEFAULT\n         CLI   7(R4),C'/'         Q. DOES IT FIT THE SYNTAX ?\n         BNE   PTHRUDFT           A. NO, USE THE DEFAULT\n         CLI   10(R4),C'/'        Q. DOES IT FIT THE SYNTAX ?\n         BNE   PTHRUDFT           A. NO, USE THE DEFAULT\n         MVC   YDATEWRK(8),5(R4)  MOVE IT TO THE WORK AREA\n* CONVERT THE PARM DATE TO JULIAN\n         LA    R1,YDATEWRK        ADDRESS OF THE YDATEDIT WORK AREA\n         ST    R1,YDATEPRM        STORE THE ADDRESS FOR THE PARM AREA\n         OI    YDATEPRM,X'80'     SET END OF PARMETER FLAG\n         LA    R1,YDATEPRM        LOAD ADDRESS OF THE PARMETER AREA\n         LINK  EP=YDATEDIT        LINK TO YDATEDIT\n         LTR   R15,R15            Q. WAS RETURN CODE GOOD?\n         BE    PTHRU01            A. YES, DATE WAS CONVERTED\n         B     PTHRUDFT           USE THRU DEFAULTS\n         SPACE\nPTHRU01  DS    0H                 SET UP THE RESULTS\n         MVC   TRGTPDAT(8),YDATEWRK MOVE IN RETURNED VALUE\n         TM    PARMFLAG,PARMF     Q. DID USER WANT THE FUTURE DATE ?\n         BO    PPARMEND           A. YES, CONTINUE\n         OI    PARMFLAG,PARMF     NO, BUT HE GOT IT ANYHOW\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG15L),MSG15 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARMEND\n         SPACE 2\nPPARMDFT MVI   PARMFLAG,PARMF     DEFAULT IS TO LIST FUTURE EXPIREES\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG10L),MSG10 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARMEND\n         SPACE\nPTHRUDFT DS    0H                 USE THRU DEFAULTS\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG16L),MSG16 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG17L),MSG17 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPARMEND\n         SPACE\nPPARMEND DS    0H\n         CLI   PARMFLAG,X'00'     Q. ANY PARM SET ?\n         BE    PPARMDFT           A. NO, FORCE THE DEFAULTS\n         TM    PARMFLAG,PARMF     Q. DID USER WANT THE FUTURE DATE ?\n         BNO   PPARMEN2           A. NO, SKIP THE CHECK\n         CLC   TRGTPDAT(8),=XL8'0000000000000000' Q. TRGTPDAT SET ?\n         BNE   PPARMEN1           A. YES, CONTINUE\n         B     PTHRUDFT           SET UP THE DEFAULT TRGTPDAT\nPPARMEN1 DS    0H               CONVERT THRU DATE AND TELL THE USER\n         MVC   XDATEWRK(8),TRGTPDAT  MOVE THE THRU DATE\n         LA    R1,XDATEWRK        LOAD ADDRESS OF THE WORK AREA\n         ST    R1,XDATEPRM        STORE THE ADDRESS FOR THE PARM AREA\n         OI    XDATEPRM,X'80'     SET END OF PARMETER FLAG\n         LA    R1,XDATEPRM        LOAD ADDRESS OF THE PARMETER AREA\n         L     R15,XDATADDR       LOAD ADDRESS OF THE LOAD MODULE\n         BALR  R14,R15            XDATEDIT WILL CONVERT TO MM/DD/YY\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         SPACE 1\n         MVC   DATA6(DATA6LEN),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA6MSG(MSG18L),MSG18    MOVE IN THE MESSAGE\n         MVC   DATA6MDY(8),XDATEWRK      MOVE IN THE MM/DD/YY\n         MVI   DATA6BP,C'('              MOVE BEGINNING PARENTHESIS\n         UNPK  DATA6JOU(5),TRGTPDAT+5(3) MOVE IN THE YYDDD\n         OI    DATA6JOU+4,X'F0'          MAKE IT EBCDIC\n         MVI   DATA6EP,C')'              MOVE ENDING PARENTHESIS\n         MVC   LINE(LINELEN),DATA6       MOVE IT TO THE PRINT RECORD\n         BAL   R10,PRTLINE               PRINT A BLANK LINE\n         SPACE 1\nPPARMEN2 DS    0H\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         XR    R15,R15            SET THE RETURN CODE\n         L     R10,SAVEPARM       RELOAD R10\n         BR    R10                RETURN\n         TITLE 'LOAD THE EXCLUDE TABLE'\nPROCEXC1 DS    0H                 LOAD THE EXCLUDE TABLE\n         SPACE 3\n         ST    R10,SAVEEXC1       SAVE R10\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG12L),MSG12 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         XR    R4,R4              CLEAR FOR A DIVIDE\n         LA    R5,EXCTABLN        GET TABLE SIZE\n         D     R4,=F'8'           FIND NUMBER OF ENTRIES\n         ST    R5,EXCTBMAX        STORE IT\n         LA    R2,8               LENGTH OF EACH TABLE ENTRY\n         LA    R3,EXCTABLE+EXCTABLN-8   END OF THE TABLE LESS 8\n         LA    R4,0               EXCLUDE TABLE ENTRY COUNTER\n         LA    R5,EXCTABLE        ADDRESS OF THE EXCLUDE TABLE\n         SPACE\nPEXC101  DS    0H\n         GET   RACFEXCL,DATA3     INPUT AN EXCLUDE RECORD\n         MVC   LINE+1(LINELEN-1),DATA3   MOVE TO AN OUTPUT BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         CLI   DATA4STR,C'*'      Q. IS THIS A COMMENT ?\n         BE    PEXC101            Q. YES, SKIP IT\n         MVC   0(8,R5),DATA3UID   MOVE IN THE USERID TO BE EXCLUDED\n         SPACE\nPEXC102  DS    0H                 ADD THE ENTRY\n         LA    R4,1(R4)           ENCREMENT THE COUNTER\n         CL    R4,EXCTBMAX        Q. HAS MAX SIZE BEEN EXCLUDED ?\n         BH    PEXC103            A. YES, TELL THE USER\n         BXLE  R5,R2,PEXC101      R3 IS THE COMPARE VALUE\n         B     PEXC104            THAT'S ALL FOLKS.\n         SPACE\nPEXC103  DS    0H                 ERROR ENDING\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT A BLANK LINE\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(ERR5L),ERR5   MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         L     R10,SAVEPARM       RESTORE IT\n         LA    R15,8              SET A BAD RETURN CODE\n         BR    R10                RETURN\n         SPACE\nPEXC104  DS    0H                 NORMAL RETURN\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         ST    R4,EXCTBCNT        STORE THE ENTRY COUNT\n         CL    R4,=F'0'           Q. ANY ENTRIES ?\n         BNE   PEXC105            A. AT LEAST ONE.\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         MVC   LINE(MSG13L),MSG13 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         MVC   LINE(LINELEN),=CL80' ' CLEAR THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\nPEXC105  DS    0H                 NORMAL RETURN\n         L     R10,SAVEEXC1       RESTORE IT\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE 3\n         TITLE 'SEARCH THE EXCLUDE TABLE'\n* THIS LOGIC SEARCHES THE EXCLUDE TABLE TO SEE IF THE USERID IS THERE.\n* IF USERID IS NOT TO BE EXCLUDED, RC=0 IS RETURNED.\n* IF USERID IS     TO BE EXCLUDED, RC=8 IS RETURNED.\nPROCEXC2 DS    0H                 SEARCH THE EXCLUDE TABLE\n         LA    R1,EXCTABLE        LOAD TABLE ADDRESS\n         L     R2,EXCTBCNT        GET THE NUMBER OF ENTRIES\n         LTR   R2,R2              Q. DO WE HAVE ZERO ENTRIES ?\n         BE    PEXC203            A. YES, BYPASS SEARCH\nPEXC201  DS    0H                 BEGIN LOOP\n         CLC   0(8,R1),PRFNAME    Q. IS USERID IN THE TABLE\n         BE    PEXC204            A. YES THIS IS IT\n         LA    R1,8(R1)           INCREMENT TO THE NEXT ENTRY\n         BCT   R2,PEXC201         CONTINUE SEARCH\n         SPACE\nPEXC203  DS    0H                 DO NOT EXCLUDE THE USERID\n         LA    R15,0              SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\nPEXC204  DS    0H                 DO     EXCLUDE THE USERID\n         LA    R15,8              SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'CODE TO READ THE NEXT RACF MASTER BLOCK'\nREADNEXT DS    0H\n         SPACE\n* R3 CONTAINS ADDRESS OF INPUT BUFFER\n* R9 CONTAINS ADDRESS OF DCB\n         SPACE\n         MVI   DECB,X'00'         CLEAR THE ECB\n         LA    R4,1024            LENGTH OF LOGICAL RECORD\n         SPACE\n         READ  DECB,SF,(R9),(R3),(R4)\n         SPACE 3\n         CHECK DECB\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PROCESS THE SEQUENCE SET INDEX'\nPROCINDX DS    0H\n         SPACE\n         ST    R10,SAVEINDX       SAVE R10\n* R7 POINTS TO THE BEGINNING OF THE PHYSICAL BLOCK\n         SPACE\n         USING INDXHREC,R7        ADDRESS THE INDEX HEADER FIELDS\nPINDX01  XR    R2,R2              CLEAR FOR THE DIVIDE\n         LH    R3,DCBLRECL        LOAD THE LRECL\n         MH    R3,RECNO+2         RECNO SHOULD BE ZERO, BUT...\n         AR    R7,R3              ADD THE OFFSET TO THE BEGINNING\n         A     R7,RBAOFF          ADD ANY OFFSET TO THE RBA BEGINNING\n         SPACE\n         CLI   INDXHID,HEX8A      Q. IS THIS  THE INDEX BLOCK ID\n         BNE   ERRINDEX           A. NO, PUNT\n         SPACE\n         CLI   INDXHI2,HEX4E      Q. IS THIS  THE INDEX BLOCK ID\n         BNE   ERRINDEX           A. NO, PUNT\n         SPACE\n         CLI   INDXHILN,HEX01     Q. IS THIS  INDEX LEVEL 1\n         BNE   ERRINDEX           A. NO, PUNT\n         SPACE\n         LA    R1,RACFINDX        LOAD ADDRESS OF INDEX BUFFER\n         AH    R1,INDXHO1         ADD OFFSET TO INDEX CHAIN\n         ST    R1,ENDADRIX        ADDRESS OF SEQ SET CHAIN POINTER\n         SPACE\n         LA    R7,10(R7)          INCREMENT PAST SEQ SET HEADER\n         DROP  R7\n         USING INDXEREC,R7        ADDRESS THE INDEX ENTRY FIELDS\n         SPACE\nPINDX02  DS    0H\n         CL    R7,ENDADRIX        Q. IS THIS  THE END OF THE INDEX?\n         BH    PINDX05            A. NO, CONTINUE AS BEFORE\n         SPACE\n         CLI   INDXEID,HEX21      Q. IS THIS  A X'21' ?\n         BE    PINDX03            A. YES, LET IT PASS\n         SPACE\n         CLI   INDXEID,HEX22      Q. IS THIS  A X'22' ?\n         BE    PINDX03            A. YES, LET IT PASS\n         SPACE\n         CLI   INDXEID,HEX20      Q. IS THIS  A X'20' (CHAIN POINTER) ?\n         BE    PINDX05            A. YES, TREAT AS THE INDEX END\n         B     ERRINDEX           A. NO, PUNT\n         SPACE\nPINDX03  DS    0H                 GET AND PROCESS PROFILE\n         XR    R1,R1              CLEAR FOR THE IC\n         IC    R1,INDXELN         GET THE INDEX NAME LENGTH+3\n         LA    R1,1(R1)           INCREMENT PAST THE POINTER ID\n         AR    R7,R1              ADJUST R7 PAST THE VARIABLE NAME\n         DROP  R7\n         SPACE\n         MVC   RBA(6),0(R7)       GET THE PROFILE RBA\n         CLC   RBA(6),=XL6'000000000000' Q. IS THIS THE END ?\n         BE    PINDX09                   A. YES, QUIT INDEX\n         SPACE\n        BAL   R10,POINT          POINT TO AN RBA\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         SPACE\n         LA    R8,RACFPROF        ADDRESS OF THE RACF PROFILE BUFFER\n         LR    R3,R8              R3 IS USED BY READNEXT\n        BAL   R10,READNEXT       READ THE PROFILE RECORD\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         SPACE\n        BAL   R10,PROCPROF       PROCESS THE PROFILE RECORD\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,6(R7)           INCREMENT PAST THE RBA\n         SPACE\n         B     PINDX02            RETURN TO THE TOP OF THE LOOP\n         SPACE\nPINDX05  DS    0H                 PROCESS INDEX CHAIN\n         USING INDXCREC,R7        ADDRESS THE INDEX CHAIN FIELDS\n         SPACE\n         CLI   INDXCPID,HEX20     Q. IS THIS  A X'20' ?\n         BNE   ERRINDEX           A. NO, WE ARE IN TROUBLE\n         SPACE\n         MVC   RBA(6),INDXCRBA    MOVE RBA OF NEXT LEVEL 1 INDX SEQ SET\n         CLC   RBA(6),=XL6'000000000000' Q. IS THIS THE END ?\n         BE    PINDX09                   A. YES, QUIT INDEX\n        BAL   R10,POINT          POINT TO AN RBA\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         LA    R7,RACFINDX        ADDRESS OF THE RACF INDEX BUFFER\n         LR    R3,R7              R3 IS USED BY READNEXT\n         CLC   RBA(6),RBAINDEX    Q. DO WE WANT THE CURRENT SEQ SET ?\n         BE    PINDX01            A. YES, LETS SAVE AN I/O\n        BAL   R10,READNEXT       READ THE INDEX SEQUENCE SET\n          LTR   R15,R15            TEST THE RETURN CODE\n          BNZ   ERRGENRL           GENERAL ERROR SECTION FOR NOW\n         MVC   RBAINDEX(6),RBA    SAVE RBA OF INDEX SEQUENCE SET\n         B     PINDX01\nPINDX09  DS    0H                 RETURN TO MASTER LOOP\n         SPACE\n         L     R10,SAVEINDX       RELOAD\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PROCESS THE PROFILE'\nPROCPROF DS    0H\n         SPACE\n         ST    R10,SAVEPROF       SAVEPROF IS USED BY PROFILE PROCESS\n* R8 POINTS TO THE BEGINNING OF THE PHYSICAL BLOCK\n         SPACE\n         USING PROFHREC,R8        ADDRESS THE PROFILE HEADER FIELDS\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         LH    R3,DCBLRECL        LOAD THE LRECL\n         MH    R3,RECNO+2         RECNO SHOULD BE ZERO, BUT...\n         AR    R8,R3              ADD THE OFFSET TO THE BEGINNING\n         A     R8,RBAOFF          ADD ANY OFFSET TO THE RBA BEGINNING\n         SPACE\n         CLI   PROFRID,HEX82      Q. IS THIS  THE PROFILE HEADER\n         BNE   ERR3PROF           A. NO, PUNT\n         SPACE\n         XR    R1,R1              CLEAR FOR THE IC\n         IC    R1,PROFNLEN        GET THE PROFILE NAME LENGTH\n         BCTR  R1,0               DECREMENT THE LENGTH FOR EX\n         LTR   R1,R1              Q. IS THE LENGTH POSITIVE ?\n         BNH   ERR4PROF           A. NO, PUNT\n         CL    R1,=F'8'           Q. IS THE LENGTH TOO LONG\n         BL    PPROF01            A. NO, CONTINUE\n         LA    R1,7               SET LENGTH TO (MAX-1)\nPPROF01  MVC   PRFNAME(8),=CL8' ' CLEAR THE RECEIVING FIELD\n         EX    R1,MOVEPFN         MOVE THE PROFILE NAME\n         SPACE\n         LA    R2,7(R1)           ADJUST PAST THE NAME - KEEP R1\n         AR    R8,R2              ADJUST THE BASE REGISTER\n         SPACE\n         USING PROFEREC,R8        USE GOOD CODING TECHNIQUES\n         CLI   PROFENT,HEX02      Q. IS THIS A USER ENTITY\n         BNE   PPROF10            A. NO, SKIP IT\n         SPACE 3\n         AP    USERCNTR(4),=PL3'+1'   INCREMENT NUMBER OF USERS\n         SPACE 3\n        BAL   R10,PROCEXC2        CHECK THE EXCLUSION TABLE\n          LTR   R15,R15           Q. IS THIS A USERID TO BE EXCLUDED ?\n          BNE   PPROF10           A. YES, SKIP IT\n         SPACE\n         ZAP   PSWDPDAT(8),PROFPDAT(3)  MOVE IN THE LAST CHANGED FIELD\n         CLC   PSWDPDAT+5(3),=XL3'00000C' Q. HAS PW EVER BEEN UPDATED ?\n         BE    PPROF09                    A. NO, TELL DATA CONTROL\n         CLC   PSWDPDAT+5(3),=XL3'00000F' Q. HAS PW EVER BEEN UPDATED ?\n         BE    PPROF09                    A. NO, TELL DATA CONTROL\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         CVB   R3,PSWDPDAT        CONVERT FOR BINARY OPERATIONS\n         ST    R3,PSWDBDAT        SAVE AS BINARY\n         D     R2,=F'1000'        BREAK INTO DAY AND YEAR\n         ST    R3,PSWDYR          STORE THE QUOTIENT - THE YEAR\n         ST    R2,PSWDDAY         STORE THE REMAINDER - THE DAY\n* REGULAR LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 4 ?\n*  IF SO, IT IS A LEAP YEAR IN THAT YEAR.\nLEAP1    XR    R2,R2              CLEAR FOR THE DIVIDE\n         D     R2,=F'4'           DETERMINE IF THIS A LEAP YEAR\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LEAP1NO            A. NO\nLEAP1YES MVC   PSWDDPY(4),=F'366' SET DAYS PER YEAR AT 366\n         B     LEAP2\nLEAP1NO  MVC   PSWDDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LEAP2\n* CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 100 ?\n*  IF SO, OMIT THE LEAP YEAR IN THAT YEAR.\nLEAP2    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,PSWDYR          RELOAD THE YEAR\n         D     R2,=F'100'         DETERMINE IF THIS A CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   LEAP3              A. NO\nLEAP2NO  MVC   PSWDDPY(4),=F'365' SET DAYS PER YEAR AT 365\n         B     LEAP3\n* SPECIAL CENTURY LEAP YEAR - IS THE YEAR EVENLY DIVISIBLE BY 400 ?\n*  IF SO, LEAVE THE LEAP YEAR IN THAT YEAR.\nLEAP3    DS    0H\n         XR    R2,R2              CLEAR FOR THE DIVIDE\n         L     R3,PSWDYR          RELOAD THE YEAR\n         D     R2,=F'400'         DETERMINE IF THIS A SPC CENTURY END\n         LTR   R2,R2              Q. IS THE REMAINDER 0 ?\n         BNE   PPROF02            A. NO\nLEAP3NO  MVC   PSWDDPY(4),=F'366' SET DAYS PER YEAR AT 366\n         B     PPROF02\nPPROF02  DS    0H\n* BEGIN DATE CALCULATIONS\n*   1. ADD PSWD INTERVAL TO DATE LAST CHANGED FOR EXPIRATION DATE\n*   2. CONVERT DATES BACK TO PACKED DECIMAL\n         SPACE\n         XR    R1,R1              CLEAR FOR IC\n         IC    R1,PROFPINT        LOAD THE PASSWORD INTERVAL\n         L     R2,PSWDDAY         FIND DAY  PSWD LAST CHANGED\n         L     R3,PSWDYR          FIND YEAR PSWD LAST CHANGED\n         AR    R2,R1              ADD THE PASSWORD INTERVAL\n         CL    R2,PSWDDPY         Q. DID WE OVERFLOW THE YEAR ?\n         BNH   EXPDOKAY           A. NO\n         S     R2,PSWDDPY         DETERMINE THE OVERFLOW\n         LA    R3,1(R3)           INCREMENT THE YEAR\nEXPDOKAY ST    R3,EXPDYR          STORE THE QUOTIENT - THE EXPIRED YEAR\n         ST    R2,EXPDDAY         STORE THE REMAINDER - THE EXPIRE  DAY\n         XR    R2,R2              CLEAR FOR THE MULTIPLY\n         M     R2,=F'1000'        MOVE THE YEAR OVER\n         A     R3,EXPDDAY         ADD THE DAYS BACK IN\n         CVD   R3,EXPDPDAT        STORE AS THE EXPIRED DATE\n* ENSURE THE SIGNS ARE ALL THE SAME\n         OI    EXPDPDAT+7,X'0F'   MAKE EXPIRATION DATE UNSIGNED\n* CONVERT THE DATES\n         MVC   XDATEWRK(8),EXPDPDAT  MOVE THE EXP DATE\n         LA    R1,XDATEWRK        LOAD ADDRESS OF THE WORK AREA\n         ST    R1,XDATEPRM        STORE THE ADDRESS FOR THE PARM AREA\n         OI    XDATEPRM,X'80'     SET END OF PARMETER FLAG\n         LA    R1,XDATEPRM        LOAD ADDRESS OF THE PARMETER AREA\n         L     R15,XDATADDR       LOAD ADDRESS OF THE LOAD MODULE\n         BALR  R14,R15            XDATEDIT WILL CONVERT TO MM/DD/YY\n         LTR   R15,R15            Q. WAS RETURN CODE GOOD?\n         BE    XDATGOOD           A. YES, DATE WAS CONVERTED\nXDATBAD  DS    0H         ACTUALLY THIS IS A BRANCH POINT FOR TEST\n* COMPARE THE DATES\nXDATGOOD CLC   EXPDPDAT(8),TRGTPDAT  Q. IS USER ALIVE AND ACTIVE\n         BH    PPROF06            A. LOOK LIKE IT - IGNORE IT\n         CLC   EXPDPDAT(8),CRNTPDAT  Q. WILL USER EXPIRE THIS WEEK ?\n         BH    PPROF07            A. LOOKS LIKE IT - TELL DATA CONTROL\n         B     PPROF08            USER ALREADY HAS EXPIRED\n         SPACE\nPPROF06  DS    0H                 ACTIVE USERS\n         TM    PARMFLAG,PARMA     Q. LIST ACTIVE USERS ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),IDGOOD    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG6L),MSG6   ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE\n         MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF07  DS    0H                 FUTURE EXPIREES\n         TM    PARMFLAG,PARMF     Q. LIST FUTURE EXPIREES ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),ID2EXP    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG5L),MSG5   ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE\n* AT NLU, ALL BATCH PRODUCTION JOBS HAVE A USER OF XXXBTCH WHERE\n* XXX IS THE SYSTEM CODE SUCH AS REG (REGISTRAR'S OFFICE) OR\n* PYR (FOR PAYROLL).  AS A SPECIAL FAVOR TO THE PRODUCTION\n* DATA CONTROL SECTION, I FLAG THEIR JOBS SEPARATELY.\n         CLC   DATA1USR+3(4),=CL4'BTCH'  Q. IS THIS NLU PRODUCTION ?\n         BNE   PPROF07A                  A. NO, NO SPECIAL FLAG\n         MVC   DATA1FLG(DATA1FLL),IDBTCH    SET EXPIRED FLAG\nPPROF07A MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF08  DS    0H                 CURRENTLY EXPIRED\n         TM    PARMFLAG,PARME     Q. LIST CURRENTLY EXPIRED ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),IDEXPD    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG4L),MSG4  ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),XDATEWRK   MOVE IN THE EXP DATE\n* AT NLU, ALL BATCH PRODUCTION JOBS HAVE A USER OF XXXBTCH WHERE\n* XXX IS THE SYSTEM CODE SUCH AS REG (REGISTRAR'S OFFICE) OR\n* PYR (FOR PAYROLL).  AS A SPECIAL FAVOR TO THE PRODUCTION\n* DATA CONTROL SECTION, I FLAG THEIR JOBS SEPARATELY.\n         CLC   DATA1USR+3(4),=CL4'BTCH'  Q. IS THIS NLU PRODUCTION ?\n         BNE   PPROF08A                  A. NO, NO SPECIAL FLAG\n         MVC   DATA1FLG(DATA1FLL),IDEBTCH   SET EXPIRED FLAG\nPPROF08A MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF09  DS    0H                 NEVER USED\n         TM    PARMFLAG,PARMN     Q. LIST NEVER USED ?\n         BNO   PPROF10            A. NO, SKIP\n         MVC   DATA1(DATA1LEN),=CL80' '    CLEAR THE I/O AREA\n         MVC   DATA1FLG(DATA1FLL),IDEXPD    SET EXPIRED FLAG\n         MVC   DATA1USR(DATA1USL),PRFNAME   SET THE USER ID\n         MVC   DATA1MSG(DATA1MSL),=CL80' '  CLEAR THE BUFFER\n         MVC   DATA1MSG(MSG3L),MSG3 ADD A MESSAGE\n         MVC   DATA1EXP(DATA1EXL),=CL8' - NA - ' MOVE IN NOT APPLICABLE\n         MVC   LINE(LINELEN),DATA1 MOVE TO PRINT RECORD\n         BAL   R10,PRTLINE        PRINT IT\n         B     PPROF10            GOBACK\n         SPACE\nPPROF10  DS    0H\n         L     R10,SAVEPROF       RELOAD R10\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\n         USING PROFHREC,R8\nMOVEPFN  MVC   PRFNAME(*-*),PROFNAME  MOVE THE PROFILE NAME IN\n         DROP  R8\n         TITLE 'PROCESS THE RACF DATA SET HEADER'\nPROCICB  DS    0H                 PROCESS THE ICB\n         SPACE\n* R7 CONTAINS FIRST THE ADDRESS OF THE ICB AND THEN THE SEQ SET ADDR\n         SPACE\n         USING ICBREC,R7          ADDRESS THE ICB FIELDS\n         MVC   CEDSSRBA(6),ICISSRBA  MOVE THE INDEX SEQ SET    RBA\n         SPACE\n         DROP  R7\n         SPACE\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'CLOSE ALL OPEN DATA SETS'\nCLOSEALL DS    0H                 CLOSE ALL FILES\n         SPACE\n         CLOSE ((R9))             CLOSE RACF MASTER DATA SET\n         SPACE 3\n         FREEPOOL  (R9)           FREE THE FILE BUFFERS\n         SPACE 3\n         CLOSE (RACFEXCL)         CLOSE EXCLUDE TABLE FIEL\n         SPACE 3\n         FREEPOOL  RACFEXCL       FREE THE EXCLUDE BUFFERS\n         SPACE 3\n         CLOSE (SYSPRINT)         CLOSE PRINT FILE\n         SPACE 3\n         FREEPOOL  SYSPRINT       FREE THE PRINTER BUFFERS\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PRINT RACF DATA SET STATISTICS'\nPROCSTAT DS    0H                 PRINT THE STATISTICS\n         ST    R10,SAVESTAT       SAVE RETURN ADDRESS\n         SPACE\n         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         SPACE\n         MVC   DATA5(DATA5LEN),=CL80' ' SPACE OUT THE BUFFER\n         MVC   DATA5MSG(MSG14L),MSG14    MOVE IN A MESSAGE\n         UNPK  DATA5CNT+1(4),USERCNTR+2(2) UNPK THE USER COUNTER\n         OI    DATA5CNT+4,X'F0'   MAKE IT EBCDIC\n         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER\n         MVC   LINE(LINELEN),DATA5 MOVE IN THE TEXT\n         BAL   R10,PRTLINE        PRINT IT\n         SPACE\n         MVC   LINE(LINELEN),=CL80' ' SPACE OUT THE BUFFER\n         BAL   R10,PRTLINE        PRINT IT\n         L     R10,SAVESTAT       RESTORE THE RETURN ADDRESS\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\n         TITLE 'PRINT THE CONTENTS OF LINE'\nPRTLINE  DS    0H                 WRITE A NEW DETAIL LINE\n         ST    R10,SAVEPRT        SAVE RETURN ADDRESS\n         SPACE\nPRTLINE1 L     R0,LINECNTR        LOAD THE LINE COUNTER\n         A     R0,=F'1'           INCREMENT\n         ST    R0,LINECNTR        STORE IT\n         CL    R0,LPP             Q. HAVE WE EXCEEDED LINES PER PAGE\n         BL    PRTLINE3           A. NO\nPRTLINE2 DS    0H\n         BAL   R10,PRTHEAD        PRODUCE THE HEADER\n         SPACE 3\nPRTLINE3 PUT   SYSPRINT,LINE      WRITE NEXT LINE\n         SPACE 3\n         L     R10,SAVEPRT        RESTORE THE RETURN ADDRESS\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PRINT A NEW HEADER'\nPRTHEAD  DS    0H                 WRITE THE PAGE HEADING\n         SPACE\n         LA    R0,2               LOAD A BINARY ZERO\n         ST    R0,LINECNTR        CLEAR THE LINE COUNTER\n         SPACE\n         MVC   DATA1(DATA1LEN),=CL80' ' CLEAR THE BUFFER\n         UNPK  DATA2PAG(3),PAGECNTR+2(2) UNPK THE PAGE COUNTER\n         OI    DATA2PAG+2,X'F0'   MAKE IT EBCDIC\n         MVC   DATA2TTL(6),=C' PAGE ' GIVE IT A HEADER\n         SPACE\n         MVC   DATA2MSG(MSG1L),MSG1  MOVE THE MESSAGE IN\n         PUT   SYSPRINT,DATA2     WRITE THE MESSAGE\n         SPACE\n         MVC   DATA1(DATA1LEN),=CL80' ' CLEAR THE BUFFER\n         MVC   DATA2MSG(MSG2L),MSG2  MOVE THE MESSAGE IN\n         PUT   SYSPRINT,DATA2     WRITE THE MESSAGE\n         SPACE 3\n         AP    PAGECNTR(4),=PL3'+1'   INCREMENT IT\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         TITLE 'PREPARE FOR THE SHUTDOWN'\nEPILOGUE DS    0H                 INITIALIZE KEY VARIABLES\n         SPACE\n         DELETE EPLOC=XDATEDIT    DELETE THE LOAD MODULE\n         SPACE\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE\n         TITLE 'LOGIC TO CONVERT AN RBA TO TTR AND ISSUE POINT'\nPOINT    DS    0H\n**********************************************************************\n* THIS ROUTINE IS A GENERAL PURPOSE ROUTINE WHICH HAS BEEN USED HERE *\n* IN THIS PROGRAM.  FOR INSTANCE, THE NEXT SECTION OF CODE COMPUTES  *\n* THE NUMBER OF LOGICAL RECORDS PER BLOCK; HOWEVER IN OUR READING OF *\n* THE RACF MASTER FILE, WE KNOW THE FILE IS BLOCKED 1 RECORD PER     *\n* BLOCK. STILL I FEEL THAT A GENERAL PURPOSE ROUTINE IS BETTER IN    *\n* THE LONG RUN.                                                      *\n**********************************************************************\n*--------------------------------------------------------------------*\n* ---------COMPUTE A= RECORDS PER BLOCK-------------------------------*\n*--------------------------------------------------------------------*\n         XR    R2,R2              CLEAR FOR DIVIDE\n         LH    R3,DCBBLKSI        LOAD THE BLOCKSIZE\n         LH    R4,DCBLRECL        LOAD THE LRECL\n         DR    R2,R4              GET NUM OF RECORDS PER BLOCK\n         LTR   R2,R2              WAS REMAINDER ZERO\n         BNE   ERRGENRL           IF NOT, TELL USER\n         ST    R3,RECBLK          STORE FOR LATER USE\n* ---------COMPUTE B = Q--RELATIVE BLOCK FROM BEGINNING OF DS---------*\n* ---------            R--RELATIVE RECORD WITHIN THAT BLOCK-----------*\n         LH    R2,RBA             R2 WILL CONTAIN THE FULL\n         L     R3,RBA+2             SIX BYTE RELATIVE BYTE ADDRESS\n         LH    R4,DCBLRECL        LOAD THE LRECL\n         DR    R2,R4              COMPUTE THE RELATIVE RECORD NUMBER\n         ST    R2,RBAOFF          SAVE OFFSET FROM BEGINNING OF RECORD\n         XR    R2,R2              CLEAR FOR DIVIDE\n         D     R2,RECBLK          COMPUTE WHICH BLOCK/RECORD\n         ST    R3,BLOCKNO         SAVE THE BLOCK NUMBER\n         ST    R2,RECNO           SAVE THE RECORD-1 NUMBER\n         TITLE 'THE DEVICE DEPENDENT BLOCK / TRACK CALCULATION'\n* ---------COMPUTE C = Q--BLOCKS PER TRACK ON THE DEVICE--------------*\n* ---------            R--NEGLIGIBLE----------------------------------*\n         SPACE 1\n         TM    DCBDEVT,DCBDV375   DEVICE=3375\n         BO    D3375              YEP\n         TM    DCBDEVT,DCBDV340   DEVICE=3340\n         BO    D3340              YEP\n         TM    DCBDEVT,DCBDV380   DEVICE=3380\n         BO    D3380              YEP\n         TM    DCBDEVT,DCBDV350   DEVICE=3350\n         BO    D3350              YEP\n         TM    DCBDEVT,DCBDV331   DEVICE=3330-1\n         BO    D3330              YEP\n         TM    DCBDEVT,DCBDV330   DEVICE=3330\n         BO    D3330              YEP\n         TM    DCBDEVT,DCBDV314   DEVICE=2314\n         BO    D2314              YEP\n         TM    DCBDEVT,DCBDV305   DEVICE=2305-2\n         BO    D23052             YEP\n         TM    DCBDEVT,DCBD1305   DEVICE=2305-1\n         BO    D23051             YEP\n         B     ERRGENRL           PROBABLY NOT FOR DASD\nD23051   XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'14568'       LOAD 2305-1 TRACK CAPACITY\n         L     R4,=F'432'         LOAD 2305-1 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD23052   XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'14858'       LOAD 2305-2 TRACK CAPACITY\n         L     R4,=F'198'         LOAD 2305-2 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD2314    XR    R2,R2              CLEAR FOR DIVIDE\n         LH    R3,DCBBLKSI        INITIALIZE W/ BLOCKSIZE\n         MH    R3,=H'534'         FIGURE SOME MULTIPLE\n         D     R2,=F'512'         FIGURE SOME QUOTIENT\n         LR    R4,R3              MOVE TO SECOND HALF\n         AH    R4,=H'101'         ADD IN SOME OVERHEAD BYTES\n         XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'7294'        LOAD THE TRACK CAPACITY\n         DR    R2,R4              COMPUTE BLOCKS/TRACK\n         ST    R3,BLKTRACK        SAVE FOR LATER USE\n         B     DEVEND             FINISH THE ROUTINE\nD3330    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'13165'       LOAD 3330 TRACK CAPACITY\n         L     R4,=F'135'         LOAD 3330 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3340    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'8535'        LOAD 3340 TRACK CAPACITY\n         L     R4,=F'167'         LOAD 3340 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3350    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'19254'       LOAD 3350 TRACK CAPACITY\n         L     R4,=F'185'         LOAD 3350 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3375    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'36000'       LOAD 3375 TRACK CAPACITY\n         L     R4,=F'415'         LOAD 3375 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nD3380    XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,=F'47968'       LOAD 3380 TRACK CAPACITY\n         L     R4,=F'523'         LOAD 3380 BLOCK OVERHEAD\n         AH    R4,DCBBLKSI        ADD THE BLOCK SIZE\n         DR    R2,R4              COMPUTE BLOCKS PER TRACK\n         ST    R3,BLKTRACK        SAVE BLOCKS/TRACK\n         B     DEVEND             FINISH THE ROUTINE\nDEVEND   DS    0H\n         TITLE 'COMPUTE THE TTR AND ISSUE THE POINT'\n* ---------COMPUTE D = Q--BLOCKS PER TRACK ON THE DEVICE--------------*\n* ---------            R--NEGLIGIBLE----------------------------------*\nCOMPTTR  XR    R2,R2              CLEAR FOR DIVIDE\n         L     R3,BLOCKNO         RELOAD BLOCK NUMBER\n         D     R2,BLKTRACK        COMPUTE WHICH TRACK\n         LR    R0,R3              SAVE RELATIVE TRACK(BASE 0)\n         A     R2,=F'1'           INCREMENT FOR BASE 1\n         LR    R1,R2              COPY THE RELATIVE RECORD(BASE 1)\n         SLL   R1,24              LEFT JUSTIFY IN R1\n         SLDL  R0,8               SHIFT THE BYTE IN\n         SLL   R0,8               LEFT JUSTIFY IN R0\n         ST    R0,POINTTTR        STORE FOR THE POINT\n         SPACE 3\n         POINT (R9),POINTTTR      ISSUE THE MACRO\n         SPACE 3\n         XR    R15,R15            SET THE RETURN CODE\n         BR    R10                RETURN\n         SPACE 3\n         TITLE 'CONSTANT AREA'\nMSG1     DC    C'1LISTING OF USERIDS FROM THE RACF DATA SET'\nMSG1L    EQU   *-MSG1\nMSG2     DC  C'     USERID    EXPDATE      PERTINENT INFORMATION'\nMSG2L    EQU   *-MSG2\nMSG3     DC  C' USERID HAS NEVER BEEN USED.'\nMSG3L    EQU   *-MSG3\nMSG4     DC  C' PASSWORD IS CURRENTLY EXPIRED.'\nMSG4L    EQU   *-MSG4\nMSG5     DC  C' PASSWORD WILL EXPIRE BEFORE THE THRU DATE'\nMSG5L    EQU   *-MSG5\nMSG6     DC    C' USERID WILL REMAIN ACTIVE AFTER THE THRU DATE.'\nMSG6L    EQU   *-MSG6\nMSG7     DC    C' THE FOLLOWING CLASSIFICATIONS OF USERIDS ARE BEING LIX\n               STED:'\nMSG7L    EQU   *-MSG7\nMSG8     DC    C' A (PASSWORD WILL REMAIN ACTIVE AFTER THE THRU DATE)'\nMSG8L    EQU   *-MSG8\nMSG9     DC    C' E (PASSWORD IS CURRENTLY EXPIRED)'\nMSG9L    EQU   *-MSG9\nMSG10    DC    C' F (PASSWORD WILL EXPIRE BEFORE THE FUTURE THRU DATE)'\nMSG10L   EQU   *-MSG10\nMSG11    DC    C' N (NEVER USED AS A LOGON ID)'\nMSG11L   EQU   *-MSG11\nMSG12    DC    C' THE FOLLOWING USERIDS ARE BEING EXCLUDED:'\nMSG12L   EQU   *-MSG12\nMSG13    DC    C' NO USERIDS ARE BEING EXCLUDED'\nMSG13L   EQU   *-MSG13\nMSG14    DC    C' THE TOTAL NUMBER OF RACF USERIDS READ WAS  '\nMSG14L   EQU   *-MSG14\nMSG15    DC    C' F (FUTURE EXPIRATIONS NOT REQUESTED BUT WAS FORCED)'\nMSG15L   EQU   *-MSG15\nMSG16    DC    C' AN ERROR WAS DETECTED IN THE SYNTAX OF THE THRU DATE'\nMSG16L   EQU   *-MSG16\nMSG17    DC    C' PROCESSING WILL CONTINUE WITH THE DEFAULT OF TODAY\"S X\n               DATE + 7'\nMSG17L   EQU   *-MSG17\nMSG18    DC    C' THE ACTUAL THRU DATE BEING USED IS '\nMSG18L   EQU   *-MSG18\n         SPACE\nERR1     DC    C' *** RACFUSER ABORTED - AN ERROR HAS BEEN DETECTED'\nERR1L    EQU   *-ERR1\nERR2     DC    C' *** AN ERROR OCCURRED IN THE INDEX RECORDS'\nERR2L    EQU   *-ERR2\nERR3     DC    C' *** AN INVALID PROFILE HEADER HAS BEEN DETECTED'\nERR3L    EQU   *-ERR3\nERR4     DC    C' *** AN INVALID PROFILE NAME LENGTH HAS BEEN DETECTED'\nERR4L    EQU   *-ERR4\nERR5     DC    C' *** EXCLUDE TABLE HAS BEEN EXCEEDED - PLEASE EXPAND'\nERR5L    EQU   *-ERR5\n         SPACE\nLPP      DC    F'60'              PRODUCE 60 LINES PER PAGE\nXDATEDIT DC    CL8'XDATEDIT'      CONSTANT FOR THE LOAD FOR XDATEDIT\n         SPACE\nIDGOOD   DC    CL3'   '           USERID IS CURRENTLY ACTIVE\nIDEXPD   DC    CL3'  *'           USERID IS CURRENTLY EXPIRED\nID2EXP   DC    CL3' **'           USERID WILL EXPIRE IN THE FUTURE\nIDBTCH   DC    CL3'+++'           USERID WILL EXPIRE AND IS PRODUCTION\nIDEBTCH  DC    CL3'  +'           USERID IS EXPIRED AND IS PRODUCTION\n         TITLE 'DCB FOR RACF MASTER FILE'\nRACFMAST DCB   BUFNO=1,MACRF=(RP),DSORG=PS,DEVD=DA,DDNAME=RACFMAST\n         TITLE 'DCB FOR EXCLUDE TABLE'\nRACFEXCL DCB   BUFNO=3,MACRF=(GM),DSORG=PS,DEVD=DA,DDNAME=RACFEXCL,    X\n               EODAD=PEXC104\n         TITLE 'DCB FOR LISTING OF USERS'\nSYSPRINT DCB   LRECL=80,BLKSIZE=17520,BUFNO=1,RECFM=FBA,MACRF=(PM),    X\n               DSORG=PS,DEVD=DA,DDNAME=SYSPRINT\n         TITLE 'WORK/SAVE AREA'\nSAVEAREA DSECT\nREGSAVE  DS    18F                AREA FOR REGS\nSAVEINDX DS    F                  AREA FOR R10 TEMPORARILY\nSAVEPROF DS    F                  AREA FOR R10 TEMPORARILY\nSAVEPRT  DS    F                  AREA FOR R10 TEMPORARILY\nSAVEPARM DS    F                  AREA FOR R10 TEMPORARILY\nSAVEEXC1 DS    F                  AREA FOR R10 TEMPORARILY\nSAVESTAT DS    F                  AREA FOR R10 TEMPORARILY\nPARMADDR DS    F                  ADDRESS OF PARM AREA\n         SPACE\nXDATADDR DS    F                  ADDRESS OF THE LOAD MODULE\nXDATEPRM DS    F                  ADDRESS OF THE XDATEDIT WORK AREA\nXDATEWRK DS    D                  WORK AREA FOR XDATEDIT\nYDATEPRM DS    F                  ADDRESS OF THE YDATEDIT WORK AREA\nYDATEWRK DS    D                  WORK AREA FOR YDATEDIT\n         SPACE\nPSWDPDAT DS    D                  DATE PASSWORD LAST CHANGED - PACKED\nEXPDPDAT DS    D                  DATE PASSWORD EXPIRED - PACKED\nCRNTPDAT DS    D                  CURRENT DATE - PACKED\nTRGTPDAT DS    D                  TARGET EXPIRATION DATE - PACKED\n         SPACE\nPSWDBDAT DS    F                  DATE PASSWORD LAST CHANGED - BINARY\nEXPDBDAT DS    F                  DATE PASSWORD EXPIRED - BINARY\nCRNTBDAT DS    F                  CURRENT DATE - BINARY\nTRGTBDAT DS    F                  TARGET EXPIRATION DATE - BINARY\n         SPACE\nPSWDDAY  DS    F                  DAY  PORTION IN BINARY OF PSWDBDAT\nEXPDDAY  DS    F                  DAY  PORTION IN BINARY OF EXPDBDAT\nCRNTDAY  DS    F                  DAY  PORTION IN BINARY OF CRNTBDAT\nTRGTDAY  DS    F                  DAY  PORTION IN BINARY OF TRGTBDAT\n         SPACE\nPSWDYR   DS    F                  YEAR PORTION IN BINARY OF PSWDBDAT\nEXPDYR   DS    F                  YEAR PORTION IN BINARY OF EXPDBDAT\nCRNTYR   DS    F                  YEAR PORTION IN BINARY OF CRNTBDAT\nTRGTYR   DS    F                  YEAR PORTION IN BINARY OF TRGTBDAT\n         SPACE\nCRNTDPY  DS    F                  DAYS PER YEAR IN CURRENT YEAR\nPSWDDPY  DS    F                  DAYS PER YEAR WHEN PASSWORD LAST SET\nCEDSSRBA DS    CL6                RBA OF INDEX SEQUENCE SET\n         CNOP  6,8\nRBA      DS    CL6                RBA FOR THE POINT MACRO\n         CNOP  6,8\nRBAINDEX DS    CL6                RBA FOR THE CURRENT INDEX\nRBAPROF  DS    CL6                RBA FOR THE CURRENT PROFILE\nENDADRIX DS    F                  ADDRESS OF THE END OF SEQ SET INDEX\nRBAOFF   DS    F                  OFFSET TO WHERE ACTUAL DATA BEGINS\nRECBLK   DS    F                  COMPUTED NUMBER OF RECORDS/BLOCK\nBLOCKNO  DS    F                  RELATIVE BLOCK WHICH CONTAINS RBA\nRECNO    DS    F                  RELATIVE REC IN BLOCK WITH DATA\nBLKTRACK DS    F                  DEVICE DEPENDENT BLOCKS/TRACK\nPOINTTTR DS    F                  CALCULATED TTR INFO FOR POINT\nPRFNAME  DS    CL8                NAME OF THE PROFILE\n         DS    CL8                FILLER\n         SPACE 2\n*-  SYSPRINT LOGICAL RECORD-----------------------------------------*\nLINE     DS    CL80               SYSPRINT LOGICAL RECORD\nLINELEN  EQU   *-LINE             LENGTH OF LOGICAL RECORD\nLINECNTR DS    F                  LINE COUNTER\nPAGECNTR DS    PL4                PAGE COUNTER\nUSERCNTR DS    PL4                USER COUNTER\n         SPACE 2\n*-  DATA RECORD 1---------------------------------------------------*\nDATA1    DS    0CL80\n         DS    CL2                FILLER\nDATA1FLG DS    CL3                FLAG\nDATA1FLL EQU   *-DATA1FLG         LENGTH OF DATA1FLG\n         DS    CL1                FILLER\nDATA1USR DS    CL8                USERID\nDATA1USL EQU   *-DATA1USR         LENGTH OF DATA1USR\n         DS    CL2                FILLER\nDATA1EXP DS    CL8                EXPIRATION DATE\nDATA1EXL EQU   *-DATA1EXP         LENGTH OF DATA1EXP\n         DS    CL2                FILLER\nDATA1MSG DS    CL54               INFORMATIVE MESSAGE\nDATA1MSL EQU   *-DATA1MSG         LENGTH OF DATA1MSG\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR A SECOND MESSAGE\nDATA2    DS    0CL80\nDATA2MSG DS    CL70               INFORMATIVE MESSAGE\nDATA2TTL DS    CL6                FIELD TITLE\nDATA2PAG DS    CL3                PAGE NUMBER\n         DS    CL1                FILLER\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE USERID\nDATA3    DS    0CL80\nDATA3UID DS    CL8                USERID\n         DS    CL72               FILLER\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE COMMENT\nDATA4    DS    0CL80\nDATA4STR DS    CL1                COMMENT\n         DS    CL79               FILLER\n         SPACE 2\n         ORG   DATA1    BEGIN THE REDEFINES FOR EXCLUDE TABLE COMMENT\nDATA5    DS    0CL80\nDATA5MSG DS    CL45               MESSAGE AREA\nDATA5CNT DS    CL5                NUMBER OF USERIDS\n         DS    CL30               FILLER\nDATA5LEN EQU   *-DATA5            LENGTH OF DATA1\n         ORG   DATA1    BEGIN THE REDEFINES FOR THRU DATE MESSAGE\nDATA6    DS    0CL80\nDATA6MSG DS    CL40               MESSAGE AREA\nDATA6MDY DS    CL8                DATE IN MM/DD/YY FORMAT\n         DS    CL5                FILLER\nDATA6BP  DS    CL1                BEGINNING PARENTHESIS\nDATA6JOU DS    CL5                DATE IN YYDDD    FORMAT\nDATA6EP  DS    CL1                ENDING PARENTHESIS\n         DS    CL30               FILLER\nDATA6LEN EQU   *-DATA6            LENGTH OF DATA1\nDATA1LEN EQU   *-DATA1            LENGTH OF DATA1\n         SPACE 3\nPARMFLAG DS    C                  FLAG FROM PARM INFO\nPARMA    EQU   X'01'              LIST THE USERS THAT ARE ACTIVE\nPARME    EQU   X'02'              LIST THE EXPIRED USERS\nPARMF    EQU   X'04'              LIST THE FUTURE EXPIRATIONS\nPARMN    EQU   X'08'              LIST THE NEVER USED USERS\n         SPACE 3\nRACFINDX DS    CL1024             I/O AREA FOR ICB/INDEX BLOCKS\n         SPACE\nRACFPROF DS    CL1024             I/O AREA FOR PROFILES\n         SPACE\nEXCTABLE DS    100CL8             TABLE OF EXCLUDED USERIDS\nEXCTABLN EQU   *-EXCTABLE         TABLE LENGTH\nEXCTBMAX DS    F                  MAXIMUM TABLE SIZE\nEXCTBCNT DS    F                  ACTUAL NUMBER OF TABLE ENTRIES\n         SPACE\nSAVEALEN EQU   *-SAVEAREA         LENGTH OF SAVE AREA\n         SPACE 3\n         REGISTER                 NAME THE REGISTERS\n         TITLE 'RACF ICB - LAYOUT OF KEY FIELDS'\nICBREC   DSECT                    LAYOUT OF KEY FIELDS IN THE ICB\n         DS    CL14               FILLER\nICISSRBA DS    CL6                RBA OF INDEX SEQUENCE SET\n         DS    CL1004             FILLER\n         TITLE 'RACF SEQUENCE SET RECORD - LAYOUT OF KEY FIELDS'\nHEX00    EQU   X'00'                X'00'\nHEX01    EQU   X'01'                X'01'\nHEX02    EQU   X'02'                X'02'\nHEX20    EQU   X'20'                X'20'\nHEX21    EQU   X'21'                X'21'\nHEX22    EQU   X'22'                X'22'\nHEX4E    EQU   X'4E'                X'4E'\nHEX62    EQU   X'62'                X'62'\nHEX66    EQU   X'66'                X'66'\nHEX82    EQU   X'82'                X'82'\nHEX8A    EQU   X'8A'                X'8A'\n         SPACE\nINDXHREC DSECT                    LAYOUT OF THE SEQUENCE SET HEADER\nINDXHDR  DS    0H              RECORD 1 - THE HEADER\nINDXHID  DS    C                  INDEX BLOCK IDENTIFIER (X'8A')\nINDXHLN  DS    AL2                INDEX BLOCK LENGTH     (X'0400')\nINDXHI2  DS    C                  INDEX BLOCK IDENTIFIER (X'4E')\nINDXHFI  DS    C                  FORMAT ID              (X'00')\nINDXHILN DS    C                  INDEX LEVEL NUMBER\nINDXHO1  DS    AL2                OFFSET TO SEQ SET CHAIN POINTER\nINDXHO2  DS    AL2                OFFSET TO FREE SPACE\n         SPACE\nINDXEREC DSECT                    LAYOUT OF THE INDEX ENTRY\nINDXENT  DS    0H              RECORD 2 - THE INDEX ENTRIES\nINDXEID  DS    C                  ENTRY IDENTIFIER\nINDXELN  DS    C                  ENTRY LENGTH + 3\nINDXECMP DS    C                  ENTRY FRONT-END COMPRESSION COUNT\nINDXENAM DS    CL8                ENTRY NAME - ***** VARIABLE *****\nINDXEPID DS    C                  ENTRY POINTER IDENTIFIER\nINDXERBA DS    CL6                RBA OF PROFILE\n         SPACE\nINDXCREC DSECT                    LAYOUT OF THE INDEX CHAIN POINTER\nINDXCHN  DS    0H              RECORD 3 - THE INDEX CHAIN\nINDXCPID DS    C                  CHAIN POINTER IDENTIFIER (X'20')\nINDXCPI  DS    C                  ENTRY POINTER IDENTIFIER (62 OR 66)\nINDXCRBA DS    CL6                RBA OF NEXT LEVEL 1 BLOCK\n         TITLE 'RACF PROFILE RECORD - LAYOUT OF KEY FIELDS'\nPROFHREC DSECT                    LAYOUT OF THE PROFILE HEADER\nPROFHDR  DS    0H              RECORD 1 - THE HEADER\nPROFRID  DS    C                  PROFILE RECORD IDENTIFIER\nPROFPLR  DS    AL2                PROFILE PHYSICAL RECORD LENGTH\nPROFLLR  DS    AL2                PROFILE LOGICAL  RECORD LENGTH\nPROFNLEN DS    C                  PROFILE NAME LENGTH\nPROFNAME DS    C                  PROFILE NAME\n         SPACE\nPROFEREC DSECT                    LAYOUT OF THE PROFILE ENTITY RECORD\nPROFUSER DS    0H              RECORD 2 - THE USER TEMPLATE\nPROFENT  DS    C                  PROFILE ENTYPE FOR USER (X'02')\n         DS    CL17               FILLER\nPROFPINT DS    C                  PASSWORD INTERVAL\n         DS    CL8                FILLER\nPROFPDAT DS    CL3                DATE PASSWORD LAST CHANGED\n         SPACE 3\nPARMREC  DSECT                    LAYOUT OF THE PARMETER RECORD\nPARMRECD DS    0H                 PARMETER RECORD\nPARMCNT  DS    H                  LENGTH OF THE PARM INFO\nPARMDATA DS    CL80               VERBAGE\n         SPACE 3\n         PRINT NOGEN\n         DCBD  DSORG=(BS),DEVD=DA\n         SPACE 3\n         END\n//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(RACFUSER),DISP=SHR,SPACE=\n//PROC02    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN    DD *\nXDATEDIT TITLE 'DATE CONVERSION SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* XDATEDIT                                                            *\n*                                                                     *\n* FUNCTION     CONVERT DATE FROM JULIAN DATE (YYDDD) IN PACKED        *\n*              DECIMAL FORM TO MM/DD/YY IN EBCDIC.                    *\n*                                                                     *\n* DESCRIPTION  XDATEDIT IS CALLED TO CONVERT THE DATE FROM            *\n*              A PACKED DECIMAL JULIAN DATE TO MONTH, DAY,            *\n*              YEAR FORM IN EBCDIC FOR PRINTING.                      *\n*                                                                     *\n*              IF THE DATE IS VALID, IT WILL BE CONVERTED TO          *\n*              MM/DD/YY FORM IN EBCDIC.  IF THE DATE IS INVALID       *\n*              IT WILL BE CONVERTED TO BYY.DDDB IN EBCDIC, WHERE      *\n*                      B    REPRESENTS A BLANK                        *\n*                      YY   REPRESENTS THE YEAR                       *\n*                      DDD  REPRESENTS THE DAY OF THE YEAR            *\n*                                                                     *\n* INPUT        REGISTER 1 POINTS TO THE WORK AREA, AN 8 BYTE          *\n*              FIELD.  THE FIELD CONTAINS THE PACKED DECIMAL          *\n*              JULIAN DATE IN THE LOW ORDER 3 BYTES OF THE FIELD.     *\n*                                                                     *\n* OUTPUT       THE WORK AREA CONTAINS THE DATE IN EBCDIC FORM.        *\n*                                                                     *\n*              REGISTER 15 WILL CONTAIN A RETURN CODE -               *\n*                      0 - VALID DATE - WORK AREA CONTAINS MM/DD/YY   *\n*                                       IN EBCDIC.                    *\n*                      4 - INVALID DATE - WORK AREA CONTAINS          *\n*                                       BYY.DDDB IN EBCDIC.           *\n*                                                                     *\n*          UPDATE HISTORY                                             *\n*                                                                     *\n*   DATE   USERID  FUNCTION PERFORMED                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         MACRO\n         REGISTER\n         LCLA  &NUM\n&NUM     SETA  0\n         SPACE 2\n.LOOP    ANOP\nR&NUM    EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LE 15).LOOP\n         SPACE  2\n         MEND\n         SPACE 3\nXDATEDIT CSECT\n         SAVE  (14,12),,XDATEDIT.&SYSDATE..&SYSTIME.\n         LR    R12,R15                 R15 MUST HAVE THE ENTRY POINT\n         USING XDATEDIT,R12\n         SPACE 2\n         L     R11,0(R1)               LOAD ADDR OF PARAMETER\n         MVI   0(R11),X'00'            ZERO FIRST BYTE\n         MVC   1(4,R11),0(R11)         ZERO 4 MORE BYTES\n         OI    7(R11),X'0F'            SET SIGN CODE OF LAST BYTE\n         SPACE\n         L     R2,4(0,R11)             LOAD PACKED JULIAN DATE\n         CVB   R5,0(0,R11)             CONVERT TO BINARY\n         SR    R4,R4                   CLEAR HIGH REGISTER\n         D     R4,F1000                DIVIDE BY 1000 TO GET YEAR\n         LA    R7,NORMALYR             LOAD NORMAL YEAR TABLE ADDRESS\n         LTR   R6,R5                   COPY QUOTIENT TO R6\n         BZ    CHECKDAY\n         N     R6,MASK                 SEE IF YEAR DIVISIBLE BY 4\n         BNZ   CHECKDAY\n         LA    R7,LEAPYEAR             LOAD LEAP YEAR TABLE ADDRESS\n         SPACE\nCHECKDAY LTR   R4,R4                   TEST DAY AGAINST MINIMUM\n         BZ    BADDAY\n         CH    R4,0(R7)                TEST DAY AGAINST MAXIMUM\n         BH    BADDAY\n         LA    R3,1                    INITIALIZE MONTH\n         SR    R6,R6                   CLEAR REGISTER 6\n         SPACE\nFINDMNTH IC    R6,1(R3,R7)             INSERT DAYS IN MONTH\n         CR    R4,R6                   COMPARE AGAINST DAYS LEFT\n         BNH   GOTMONTH\n         SR    R4,R6                   SUBTRACT FROM DAYS LEFT\n         LA    R3,1(R3)                INCREMENT MONTH\n         B     FINDMNTH                LOOP BACK\n         SPACE\nGOTMONTH MH    R3,H1000                MULTIPLY MONTH BY 1000      MM00\n         AR    R3,R4                   ADD DAY                     MMDD\n         MH    R3,H1000                MULTIPLY BY 1000          MMDD00\n         AR    R3,R5                   ADD YEAR                  MMDDYY\n         CVD   R3,0(0,R11)             CONVERT TO DECIMAL\n         MVC   0(5,R11),3(R11)         LEFT JUSTIFY\n         UNPK  0(8,R11),0(5,R11)       UNPACK\n         OI    7(R11),X'F0'            SET SIGN CODE\n         MVI   2(R11),C'/'             ADD /\n         MVI   5(R11),C'/'             ADD /\n         SPACE\n         XR    R15,R15                 CLEAR RETURN CODE\nRETURN   RETURN (14,12),,RC=(15)       RETURN\n         SPACE 3\nBADDAY   ST    R2,0(0,R11)             STORE ORIGINAL DATA\n         UNPK  2(5,R11),1(3,R11)       UNPACK\n         MVC   1(2,R11),2(R11)         SLIDE YR TO MAKE ROOM FOR .\n         MVI   0(R11),C' '             ADD BLANK\n         MVI   3(R11),C'.'             ADD .\n         MVI   7(R11),C' '             ADD BLANK\n         LA    R15,4                   SET RETURN CODE\n         B     RETURN                  RETURN\n         TITLE 'CONSTANTS AND LITERALS'\nNORMALYR DC    H'365'\n         DC    FL1'31,28,31,30,31,30,31,31,30,31,30,31'\n         SPACE\nLEAPYEAR DC    H'366'\n         DC    FL1'31,29,31,30,31,30,31,31,30,31,30,31'\n         SPACE\nF1000    DC    F'1000'\nH1000    EQU   F1000+2\n         DS    1F\nMASK     DC    X'00000003'\n         SPACE 3\n         LTORG\n         TITLE 'REGISTERS'\n         REGISTER\n         END\n//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(XDATEDIT),DISP=SHR,SPACE=\n//PROC03    EXEC ASMFCL,PARM.LKED='XREF,LET,LIST'\n//ASM.SYSLIB   DD DSN=SYS1.MACLIB,DISP=SHR\n//ASM.SYSPRINT DD SYSOUT=*\n//ASM.SYSIN    DD *\nYDATEDIT TITLE 'DATE CONVERSION SUBROUTINE'\n***********************************************************************\n*                                                                     *\n* YDATEDIT                                                            *\n*                                                                     *\n* FUNCTION     CONVERT DATE FROM MM/DD/YY IN EBCDIC TO JULIAN DATE    *\n*              (YYDDD) IN PACKED DECIMAL FORM.                        *\n*                                                                     *\n* DESCRIPTION  YDATEDIT IS CALLED TO CONVERT THE DATE FROM MONTH,     *\n*              DAY, YEAR FORM IN EBCDIC TO A PACKED DECIMAL JULIAN    *\n*              DATE.  THIS IS USEFUL WHEN THE DATE IS READ IN OR      *\n*              IS ENTERED VIA A PARM FIELD.                           *\n*                                                                     *\n*              IF THE DATE IS VALID, IT WILL BE CONVERTED TO          *\n*              YYDDDC FORM.  IF THE DATE IS INVALID, IT WILL NOT BE   *\n*              MODIFIED.                                              *\n*                                                                     *\n* INPUT        REGISTER 1 POINTS TO THE WORK AREA, AN 8 BYTE          *\n*              FIELD WHICH CONTAINS THE MM/DD/YY FORM OF THE DATE.    *\n*                                                                     *\n* OUTPUT       THE WORK AREA CONTAINS THE DATE IN PACKED DECIMAL      *\n*              JULIAN FORMAT WITH A POSITIVE SIGN.                    *\n*                                                                     *\n*              REGISTER 15 WILL CONTAIN A RETURN CODE -               *\n*                      0 - VALID DATE - WORK AREA CONTAINS YYDDDC     *\n*                      4 - INVALID DATE - WORK AREA WAS NOT MODIFIED  *\n*                                                                     *\n* PROGRAM COMMENTS - NONE                                             *\n*                                                                     *\n*          UPDATE HISTORY                                             *\n*                                                                     *\n*   DATE   USERID  FUNCTION PERFORMED                                 *\n*                                                                     *\n***********************************************************************\n         SPACE 3\n         MACRO\n         REGISTER\n         LCLA  &NUM\n&NUM     SETA  0\n         SPACE 2\n.LOOP    ANOP\nR&NUM    EQU   &NUM\n&NUM     SETA  &NUM+1\n         AIF   (&NUM LE 15).LOOP\n         SPACE  2\n         MEND\n         SPACE 3\nYDATEDIT CSECT\n         SAVE  (14,12),,YDATEDIT.&SYSDATE..&SYSTIME.\n         LR    R12,R15                 R15 MUST HAVE THE ENTRY POINT\n         USING YDATEDIT,R12\n         SPACE 2\n         L     R11,0(R1)               LOAD ADDR OF PARAMETER\n         SPACE\nCHKSLASH DS    0H                      CHECK DATE FORMAT\n         CLI   2(R11),C'/'             Q. IS THIS A VALID DATE FORMAT ?\n         BNE   BADDATE                 A. NO, MISSING '/'\n         CLI   5(R11),C'/'             Q. IS THIS A VALID DATE FORMAT ?\n         BNE   BADDATE                 A. NO, MISSING '/'\nMOVEDATE DS    0H                      MOVE TO REGISTERS\n         XR    R2,R2                   CLEAR THE REGISTER\n         XR    R3,R3                   CLEAR THE REGISTER\n         ICM   R2,3,0(R11)             PUT THE EBCDIC MONTH IN R2\n         ICM   R3,3,3(R11)             PUT THE EBCDIC DAY   IN R3\n*\n         MVC   0(4,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         PACK  0(2,R11),6(2,R11)       MAKE THE YEAR PACKED DECIMAL\n         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY\n         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         CVB   R4,0(R11)               GET THE BINARY YEAR IN R4\n*\n         MVC   0(8,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         ST    R3,4(R11)               RETURN THE EBCDIC DAY\n         PACK  0(2,R11),6(2,R11)       MAKE THE DAY  PACKED DECIMAL\n         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY\n         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         CVB   R5,0(R11)               GET THE BINARY DAY\n*\n         MVC   0(8,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         ST    R2,4(R11)               RETURN THE EBCDIC MONTH\n         PACK  0(2,R11),6(2,R11)       MAKE THE MONTH PACKED DECIMAL\n         MVC   6(2,R11),0(R11)         MOVE TO A DOUBLE WORD BOUNDARY\n         MVC   0(6,R11),=XL8'0000000000000000'   CLEAR THE WORK AREA\n         CVB   R6,0(R11)               GET THE BINARY MONTH\nLEAPCHK  DS    0H\n         XR    R8,R8                   CLEAR FOR THE DIVIDE\n         LR    R9,R4                   MOVE THE YEAR FOR THE DIVIDE\n         LA    R10,4                   LOAD A DIVISOR\n         DR    R8,R10                  DIVIDE BY 4\n         LTR   R8,R8                   Q. IS THE REMAINDER ZERO ?\n         BE    LEAPYES                 A. YES, PROBABLY A LEAP YEAR\nLEAPNO   DS    0H\n         LA    R3,NORMALYR             ADDRESS OF NORMAL YEAR TABLE\n         B     ADDMONTH\nLEAPYES  DS    0H\n         LA    R3,LEAPYEAR             ADDRESS OF LEAP YEAR TABLE\n         B     ADDMONTH\nADDMONTH DS    0H\n         LR    R2,R6                   USE THE MONTH TO INDEX TABLE\n         BCTR  R2,0                    DECREMENT FOR (MONTH-1)\n         XR    R9,R9                   CLEAR FOR ACCUMULATING DAYS\n         LTR   R2,R2                   Q. SHOULD I GO THRU THE LOOP\n         BE    ADDDAYS                 A. NO, JUST ADD THE DAYS\nADDMTHLP DS    0H\n         XR    R10,R10                 CLEAR THE REGISTER\n         IC    R10,0(R3)               INSERT DAYS PER MONTH\n         AR    R9,R10                  ADD THE DAYS PER MONTH\n         LA    R3,1(R3)                INCREMENT FOR THE NEXT MONTH\n         BCT   R2,ADDMTHLP             CONTINUE\nADDDAYS  DS    0H\n         AR    R9,R5                   ADD THE DAYS IN CURRENT MONTH\nRECONVRT DS    0H\n         CVD   R4,0(R11)               CONVERT YEAR TO PACKED DECIMAL\n         L     R8,4(R11)               MOVE TO R8\n         CVD   R9,0(R11)               CONVERT DAYS TO PACKED DECIMAL\n         L     R9,4(R11)               MOVE TO R9\nSTUFFIT  DS    0H\n         SRL   R8,4                    KILL THE SIGN ON THE YEAR\n         SLL   R9,16                   MOVE THE DAYS OVER\n         SLDL  R8,12                   MOVE DAYS IN R8\n         LA    R9,12                   LOAD THE SIGN\n         SLL   R9,28                   MOVE THE SIGN OVER\n         SLDL  R8,4                    MOVE THE SIGN INTO POSITION\n         MVC   0(8,R11),=XL8'0000000000000000' CLEAR THE WORK AREA\n         ST    R8,4(R11)               SAVE THE DATE\nGOODDATE DS    0H\n         XR    R15,R15                 CLEAR RETURN CODE\n         B     RETURN                  RETURN\n         SPACE 3\nBADDATE  DS    0H\n         LA    R15,4                   SET RETURN CODE\n         B     RETURN                  RETURN\n         SPACE 3\nRETURN   RETURN (14,12),,RC=(15)       RETURN\n         TITLE 'CONSTANTS AND LITERALS'\nNORMALYR DC    FL1'31,28,31,30,31,30,31,31,30,31,30,31'\n         SPACE\nLEAPYEAR DC    FL1'31,29,31,30,31,30,31,31,30,31,30,31'\n         SPACE 3\n         LTORG\n         TITLE 'REGISTERS'\n         REGISTER\n         END\n//LKED.SYSLMOD DD DSN=MVS.SYSTEMS.LINKLIB(YDATEDIT),DISP=SHR,SPACE=\n//\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT034/FILE034.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT034", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}