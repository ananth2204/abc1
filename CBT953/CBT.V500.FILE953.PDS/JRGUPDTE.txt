 TITLE 'JRGUPDTE - IEBUPDTE version for any LRECL'
*______________________________________________________________________
*
JRGUPDTE PRGDEF FSEG=MAIN_PART,RMODE=24,RENT=Y
*
*  This works like IEBUPDTE except it can handle fixed and variable
*  length records of any length up to 1000 bytes (arbitrary figure)
*  SYSIN should point to the input sequential file which contains
*  the './ ADD NAME=????????' control cards followed by the records
*  that make up the member.
*  JRGULOAD writes the HEX constant x'FACE' immediately after the
*  member name in the control card so this program checks for that
*  constant, if not there the control card is ignored. Done to
*  allow actual members to contain IEBUPDTE control cards.
*  To switch this processing of use PGM=JRGUPDTE,PARM=NOFACE
*
*  PDSOUT must point to an empty PDS.
*
*  A restriction is that the RECFM and LRECL of SYSIN and PDSOUT
*  must match. Also the PDS must be blocked.
*
END_BLOCK      DS    F                 address of end of output block
SAV_DCBLRECL   DS    H                 PDS record length
SAV_DCBBLKSI   DS    H                 PDS block size
SAV_DCBRECFM   DS    CL1               PDS record format
SAV_FIX_VAR    DS    CL1               fixed/variable indicator
RECORD_COUNT   DS    PL7               record count of this member
TOT_REC_COUNT  DS    PL7               record count of all members
MEMBER_COUNT   DS    PL7               count of members
PARM_LEN       DS    H
PARM_VALUE     DS    CL80
*
FACE_CHECK     DS    C                 x'FACE' check active
E_O_F          DS    C                 end of file SYSIN
SYSIN_REC      DS    CL1000            input record
               DS    0F
BIG_BLOCK      DS    32770CL1          bigger than maximum block size
*
IN       USING IHADCB,SYSIN            map DCBD over SYSIN
PDS      USING IHADCB,PDSOUT           map DCBD over PDSOUT
*
         PRGEDEF
*______________________________________________________________________
*
 SEGS MAIN_PART
*
   PRGPARM PARM_VALUE,LEN=PARM_LEN
   IF (CLC,=C'NOFACE ',EQ,PARM_VALUE)
     MVI   FACE_CHECK,C'N'             do not check for x'FACE'
   ENDIF
   SEGDO OPEN_SYSIN
   SEGDO OPEN_SYSOUT
*
   SEGDO OPEN_PDSOUT
*
   SEGDO CHECK_PDS_EMPTY               must be after OPEN to avoid
*                                      blocksize of 256
*
   LA    R6,BIG_BLOCK                  point to output block
   LH    R1,SAV_DCBBLKSI               get block size
   LA    R1,0(R6,R1)                   add to start of block
   ST    R1,END_BLOCK                  store end of block
   IF (CLI,SAV_FIX_VAR,EQ,C'V')        if variable length
     LA    R6,4(,R6)                   point after block descriptor
   ENDIF
   LR    R4,R6                         copy address to R4
*
   ZAP   RECORD_COUNT,=P'0'            initialise record count
   ZAP   TOT_REC_COUNT,=P'0'           initialise total record count
   ZAP   MEMBER_COUNT,=P'0'            initialise member count
   DO INF
     XC    SYSIN_REC(80),SYSIN_REC
     SEGDO GET_SYSIN
   DOEXIT (CLI,E_O_F,EQ,C'Y')          quit at end of file
     MVC   NEW_MEMBER,SPACES           say not a new member
     IF (TM,IN.DCBRECFM,DCBRECF,NZ)    fixed records
       IF (CLC,=C'./ ADD NAME=',EQ,SYSIN_REC)
         IF (CLC,=X'FACE',EQ,SYSIN_REC+20)
           MVC   NEW_MEMBER,SYSIN_REC+12 copy new member name
           MVI   NMEMC,0                 clear statistics
           XC    NMEMUSER,NMEMUSER
           IF (CLI,SYSIN_REC+22,NE,C' '),AND,                          /
               (CLI,SYSIN_REC+22,NE,X'00')
             MVC   NMEMC,SYSIN_REC+22
             MVC   NMEMUSER,SYSIN_REC+23
           ENDIF
         ELSEIF (CLI,FACE_CHECK,EQ,C'N')
           MVC   NEW_MEMBER,SYSIN_REC+12 copy new member name
           MVI   NMEMC,0                 clear statistics
           XC    NMEMUSER,NMEMUSER
         ENDIF
       ENDIF
     ELSE  *                           must be variable
       IF (CLC,=C'./ ADD NAME=',EQ,SYSIN_REC+4)
         IF (CLC,=X'FACE',EQ,SYSIN_REC+24)
           MVC   NEW_MEMBER,SYSIN_REC+16 copy new member name
           MVI   NMEMC,0                 clear statistics
           XC    NMEMUSER,NMEMUSER
           IF (CLC,IN.DCBLRECL,GT,=H'26')  stats available
             IF (CLI,SYSIN_REC+26,NE,C' '),AND,                        /
               (CLI,SYSIN_REC+26,NE,X'00')
               MVC   NMEMC,SYSIN_REC+26
               MVC   NMEMUSER,SYSIN_REC+27
             ENDIF
           ENDIF
         ELSEIF (CLI,FACE_CHECK,EQ,C'N')
           MVC   NEW_MEMBER,SYSIN_REC+16 copy new member name
           MVI   NMEMC,0                 clear statistics
           XC    NMEMUSER,NMEMUSER
         ENDIF
       ENDIF
     ENDIF
     IF (CLC,NEW_MEMBER,NE,SPACES)     it is a new member
       OC    NEW_MEMBER,SPACES         ensure uppercase
       IF (CLC,THIS_MEMBER,GT,SPACES)  previous in progress
         IF (CR,R6,GT,R4)              something in block
           SEGDO OUTPUT_PDS            write out current block
         ENDIF
         SEGDO STORE_MEMBER            finish previous member
       ENDIF
       MVC   THIS_MEMBER,NEW_MEMBER    copy new member name
       MVC   TMEMTTR,NMEMTTR
       MVC   TMEMC,NMEMC
       MVC   TMEMUSER,NMEMUSER
       LR    R6,R4                     effective start of block
     ELSE
       L     R1,END_BLOCK              point to end of block
       SH    R1,IN.DCBLRECL            subtract this record length
       IF (CR,R1,LT,R6)                not enough space for record
         SEGDO OUTPUT_PDS              write out current block
       ENDIF
       LH    R15,IN.DCBLRECL           get input record length
       BCTR  R15,0                     minus 1 for execute
       EX    R15,COPY_INREC            copy input to buffer
       LA    R6,1(R15,R6)              point after copied record
       AP    RECORD_COUNT,=P'1'        increment member record count
       AP    TOT_REC_COUNT,=P'1'       increment total record count
     ENDIF
   ENDDO
*
   IF (CLC,THIS_MEMBER,GT,SPACES)      previous in progress
     IF (CR,R6,GT,R4)                  something in block
       SEGDO OUTPUT_PDS                write out current block
     ENDIF
     SEGDO STORE_MEMBER                finish previous member
   ENDIF
*
   SEGDO PUT_SYSOUT
   MVC   SYSOUT_REC+1(L'EDPAT),EDPAT
   ED    SYSOUT_REC+1(L'EDPAT),MEMBER_COUNT
   MVC   SYSOUT_REC+1+L'EDPAT(8),=C' members'
   MVC   SYSOUT_REC+1+L'EDPAT+8(L'EDPAT),EDPAT
   ED    SYSOUT_REC+1+L'EDPAT+8(L'EDPAT),TOT_REC_COUNT
   MVC   SYSOUT_REC+1+L'EDPAT+8+L'EDPAT(14),=C' total records'
   SEGDO PUT_SYSOUT
*
   SEGDO CLOSE_SYSIN
   SEGDO CLOSE_SYSOUT
   CLOSE (PDSOUT)
*
 SEGE MAIN_PART
*______________________________________________________________________
*
 SEGS OUTPUT_PDS
*
*  Output a block to the PDS
*
   SR    R6,R4                         calculate actual block size
   IF (CLI,SAV_FIX_VAR,EQ,C'V')
     LA    R6,4(,R6)                   add block descriptor length
     STH   R6,BIG_BLOCK                set block length in BDW
   ENDIF
   STH   R6,PDS.DCBBLKSI               set block length in DCB
   LA    R6,BIG_BLOCK                  point to output block
   WRITE PDSDECB,SF,PDSOUT,(R6),'S'
   CHECK PDSDECB                       wait for I/O completion
   MVC   PDS.DCBBLKSI,SAV_DCBBLKSI     reset block size to max
   LR    R6,R4                         effective start of block
*
 SEGE OUTPUT_PDS
*______________________________________________________________________
*
 SEGS STORE_MEMBER
*
*  This adds the member name to the PDS directory
*
   STOW  PDSOUT,THIS_MEMBER,A
   IF (LTR,R15,R15,NZ)
     LR    R3,R15                      copy return code
     LR    R2,R0                       copy reason code
     CVD   R15,DOUB_WORD
     OI    DOUB_WORD+7,X'0F'
     MVC   STOW_MEM(8),THIS_MEMBER
     MVC   SYSOUT_REC(L'STOW_BAD),STOW_BAD
     UNPK  SYSOUT_REC+L'STOW_BAD(3),DOUB_WORD+6(2)
     CVD   R2,DOUB_WORD
     OI    DOUB_WORD+7,X'0F'
     MVC   SYSOUT_REC+L'STOW_BAD+4(3),=C'RS='
     UNPK  SYSOUT_REC+L'STOW_BAD+4+3(5),DOUB_WORD+5(3)
     SEGDO PUT_SYSOUT
     IF (CHI,R3,EQ,12)                 directory full
       MVC   SYSOUT_REC(L'NO_SPACE),NO_SPACE
       SEGDO PUT_SYSOUT
     ELSEIF (CHI,R3,EQ,16)             dataset is full
       MVC   SYSOUT_REC(L'IS_FULL),IS_FULL
       SEGDO PUT_SYSOUT
     ENDIF
     PRGQUIT RC=8
   ENDIF
   MVC   SYSOUT_REC(7),=C'Member '
   MVC   SYSOUT_REC+7(8),THIS_MEMBER
   MVC   SYSOUT_REC+7+8(8),=C' created'
   MVC   SYSOUT_REC+7+8+8(L'EDPAT),EDPAT
   ED    SYSOUT_REC+7+8+8(L'EDPAT),RECORD_COUNT
   MVC   SYSOUT_REC+7+8+8+L'EDPAT(8),=C' records'
   SEGDO PUT_SYSOUT
   ZAP   RECORD_COUNT,=P'0'            initialise record count
   AP    MEMBER_COUNT,=P'1'            increment member count
*
 SEGE STORE_MEMBER
*______________________________________________________________________
*
*  Ensure that the PDS is empty
*
 SEGS CHECK_PDS_EMPTY
*
   XR    R7,R7                         initialise member count
   OPEN  (PDSDIR,INPUT)                open the PDS directory
   IF (LTR,R15,R15,NZ)
     MVC   SYSOUT_REC(L'BAD_DIR),BAD_DIR could not read PDS directory
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
   DO INF
     GET   PDSDIR                      get directory block
     LH    R3,0(R1)                    get length of block
     LA    R3,0(R3,R1)                 point to end of block
     LA    R6,2(0,R1)                  point to first directory entry
     DO INF
     DOEXIT (CR,R6,GE,R3)              at end of block
     DOEXIT (CLC,0(8,R6),EQ,HIGHVALS)  no more details
     DOEXIT (CLC,0(8,R6),EQ,LOWVALS)   no more details
*      MVC   THIS_MEMBER,0(R6)         would be member name
       L     R1,8(R6)                  track num and length of this
*      STCM  R1,B'1110',TTR_ADDR       track address of member
       SLL   R1,27                     wipe out track address
       SRL   R1,26                     make length even
       LA    R6,12(R1,R6)              next directory entry
*      SEGDO CHECK_MEMBER_WANTED
       LA    R7,1(R7)                  increment member count
     ENDDO
   DOEXIT (CLC,0(8,R6),EQ,HIGHVALS)    end of directory
   ENDDO
DIREND   DS    0H
   CLOSE PDSDIR
*
   IF (LTR,R7,R7,NZ)                   any members in the PDS
     MVC   SYSOUT_REC(L'NOT_EMP),NOT_EMP
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
*
 SEGE CHECK_PDS_EMPTY
*______________________________________________________________________
*
 SEGS OPEN_PDSOUT
*
   MVC   PDS.DCBLRECL,IN.DCBLRECL
   MVC   PDS.DCBRECFM,IN.DCBRECFM
   XC    PDS.DCBBLKSI,PDS.DCBBLKSI
   OPEN  (PDSOUT,(OUTPUT))
   IF (LTR,R15,R15,NZ)
     MVC   SYSOUT_REC(L'PDS_MIS),PDS_MIS
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ELSEIF (TM,PDS.DCBDSRG1,DCBDSGPO,Z)
     MVC   SYSOUT_REC(L'PDS_NOT),PDS_NOT
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
   MVC   SAV_DCBLRECL,PDS.DCBLRECL     copy block size
   MVC   SAV_DCBBLKSI,PDS.DCBBLKSI          record format
   MVC   SAV_DCBRECFM,PDS.DCBRECFM          record length
   IF (TM,PDS.DCBRECFM,DCBRECF,NZ)
     MVI   SAV_FIX_VAR,C'F'
   ELSEIF (TM,PDS.DCBRECFM,DCBRECV,NZ)
     MVI   SAV_FIX_VAR,C'V'
   ELSE
     MVC   SYSOUT_REC(L'PDS_FV),PDS_FV must be fixed or variable
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
   IF (TM,PDS.DCBRECFM,DCBRECBR,NZ)    should be blocked records
*    this is what we want
   ELSEIF (TM,PDS.DCBRECFM,DCBRECSB,NZ)
     MVC   SYSOUT_REC(L'PDS_NSP),PDS_NSP cannot be spanned
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ELSE
     MVC   SYSOUT_REC(L'PDS_BLK),PDS_BLK must be blocked records
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
   IF (CLC,IN.DCBLRECL,NE,PDS.DCBLRECL),OR,                            /
               (CLC,IN.DCBRECFM,NE,PDS.DCBRECFM)
     MVC   SYSOUT_REC(L'MAT_CH),MAT_CH RECFM+LRECL must match
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
   IF (CLC,IN.DCBLRECL,GT,=H'1000')
     MVC   SYSOUT_REC(L'L_1000),L_1000 maximum record length is 1000
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
*
 SEGE OPEN_PDSOUT
*______________________________________________________________________
*
 SEGS OUTPUT_REQUIREMENTS
*
*  Output how to use this program
*
   SEGDO PUT_SYSOUT
   LA    R4,REQ_MNT                    point to output text
   LH    R3,REQ_CNT                    count of lines
   DO FROM=(R3)
     LH    R1,0(,R4)                   get length of message -1
     EX    R1,COPY_2_SYSOUT            copy message
     LA    R4,3(R1,R4)                 point to next message
     SEGDO PUT_SYSOUT
   ENDDO
*
 SEGE OUTPUT_REQUIREMENTS
*______________________________________________________________________
*
 PRGDCBI DCB=SYSIN,REC=SYSIN_REC,EOF=E_O_F
*
 PRGDCBO DCB=SYSOUT,REC=SYSOUT_REC
*______________________________________________________________________
*
         PRGSTAT
*
COPY_IN_TO_OUT MVC   SYSOUT_REC(0),SYSIN_REC
COPY_INREC     MVC   0(0,R6),SYSIN_REC   copy in=rec to output block
COPY_2_SYSOUT  MVC   SYSOUT_REC(0),2(R4) copy message text
EDPAT          DC    X'4020202020202020202020202120'
*
SYSOUT_REC     DC    CL80' '
SPACES         DC    CL80' '
LOWVALS        DC    8XL1'00'
HIGHVALS       DC    8XL1'FF'
*
BAD_DIR  DC    C'//PDSOUT   DD  ...     directory could not be read'
STOW_BAD DC    C'STOW of member xxxxxxxx failed RC='
         ORG   STOW_BAD+15      start of 'xxxxxxxx'
STOW_MEM DS    CL8
         ORG
NO_SPACE DC    C'No space left in the PDS directory'
IS_FULL  DC    C'The dataset is full'
NOT_EMP  DC    C'//PDSOUT   DD  ...     members already present'
PDS_MIS  DC    C'//PDSOUT   DD  ...         must be in JCL'
PDS_NOT  DC    C'//PDSOUT   DD  ...         must be a PDS'
PDS_FV   DC    C'//PDSOUT   DD  ...         must be RECFM= F or V'
PDS_NSP  DC    C'//PDSOUT   DD  ...         cannot be SPANNED'
PDS_BLK  DC    C'//PDSOUT   DD  ...         must be blocked'
MAT_CH   DC    C'SYSIN and PDSOUT must have matching RECFM and LRECL'
L_1000   DC    C'SYSIN must have LRECL <= 1000'
*
REQ_CNT  DC    H'5'                    count of instructions
REQ_MNT  EQU   *                       start of instructions
RQ_0     DC    AL2((RQ_1-RQ_0)-3)      length of message -1
         DC    C'   Instructions for use'
RQ_1     DC    AL2((RQ_2-RQ_1)-3)
         DC    C'//SYSIN    DD   input - control cards plus data'
RQ_2     DC    AL2((RQ_3-RQ_2)-3)
         DC    C'//SYSOUT   DD   SYSOUT=*   report'
RQ_3     DC    AL2((RQ_4-RQ_3)-3)
         DC    C'//PDSOUT   DD   DSN=  an empty PDS DISP=NEW'
RQ_4     DC    AL2((RQ_5-RQ_4)-3)
         DC    C'                      Do NOT set RECFM and LRECL'
RQ_5     EQU   *
*
SYSIN    DCB   DSORG=PS,DDNAME=SYSIN,MACRF=(GM),EODAD=END_SYSIN
SYSOUT   DCB   DSORG=PS,DDNAME=SYSOUT,MACRF=(PM),RECFM=FB,LRECL=80
PDSDIR   DCB   DSORG=PS,DDNAME=PDSOUT,MACRF=(GL),RECFM=FB,BLKSIZE=256, /
               LRECL=256,EODAD=DIREND,EROPT=SKP
PDSOUT   DCB   DSORG=PO,DDNAME=PDSOUT,MACRF=W
*
NEW_MEMBER     DS    CL8               new member name
NMEMTTR        DC    XL3'00'           empty TTR
NMEMC          DS    XL1               length/2 of use statistics
NMEMUSER       DS    CL40              SPF statistics
LEN_MEM        EQU   *-NEW_MEMBER
*
THIS_MEMBER    DS    CL8               member name
TMEMTTR        DC    XL3'00'           empty TTR
TMEMC          DS    XL1               length/2 of use statistics
TMEMUSER       DS    CL40              SPF statistics
         ORG   TMEMUSER                                           C0909
SPFVM    DS    XL2                 VERSION, LEVEL
SPFFLAGS DS    X                   FLAGS                          A0909
SPFSCLM  EQU   X'80'               SCLM-MANAGED                   A0909
SPFXSTAT EQU   X'20'               EXTENDED STATISTICS            A0909
SPFSECS  DS    X                   TIME LAST UPDATED (SS)         A0909
SPFCREDT DS    PL4                 DATE CREATED
SPFCHGDT DS    PL4                 DATE LAST UPDATED
SPFHHMM  DS    XL2                 TIME LAST UPDATED (HHMM)
SPFCCNT  DS    H                   CURRENT SIZE
SPFICNT  DS    H                   INITIAL SIZE
SPFMOD   DS    H                   MODS
SPFUSER  DS    CL8                 USERID                         C1701
SPFBLANK DS    CL2                 CLASSICALLY TWO BLANKS         C1701
         ORG   SPFBLANK                                           C1701
SPFXCCNT DS    F                   CURRENT SIZE                   A0909
SPFXICNT DS    F                   INITIAL SIZE                   A0909
SPFXMOD  DS    F                   MODS                           A0909
         ORG
*
         DCBD  DSORG=(QS,PO),DEVD=DA
*
         PRGESTAT
         PRGEND
         END
