 TITLE 'E35TABL - E35 SORT EXIT FOR TABLIN PROCESSING'
*______________________________________________________________________
*
*    THIS IS AN E35 EXIT FOR THE SORT. IT GETS CONTROL JUST BEFORE
*    THE OUTPUT RECORD IS WRITTEN TO THE SORTOUT DATASET I.E. AFTER
*    ANY CHANGES TO THE RECORD HAVE BEEN DONE.
*    N.B. AFTER OUTREC FIELDS=
*
*    IT CAN BE USED AS AN E15 EXIT AS WELL, IN WHICH CASE IT SEES
*    THE RECORD BEFORE THE INREC DOES, I.E. AS ON DISK (OR TAPE)
*
*    EXAMPLE OF HOW TO USE THIS.
*
*    //SYSIN    DD  *
*       INCLUDE COND=(9,4,CH,NE,C'DCUS',AND,9,4,CH,NE,C'    ')
*       INREC   FIELDS=(9,5,230,3)             *CTRL+MPED
*       SORT    FIELDS=(6,3,CH,A,1,5,PD,A)
*       MODS    E35=(E35TABL,1048576,,N)
*       END
*
*    //E35TABL  DD  *
*    00006,003,IN             POSITION IS AS FOR SORT I.E. WITH RDW
*                             USE ALL DIGITS IN POSITION AND LENGTH
*
*    //TABLIN   DD  *         THIS CAN BE A SEQUENTIAL DATASET
*    AWL
*    JDW
*    FW
*    OXO
*
*    //E35TABL    CONTAINS THE COMPARISON REQUIRED
*    IN THIS CASE POSITION 6 FOR 3 BYTES IS CHECKED TO SEE IF IT
*    MATCHES ANY OF THE RECORDS CONTAINED 'IN' THE TABLIN DATASET
*    ANY RECORDS THAT DO NOT MATCH ARE EXCLUDED FROM THE OUTPUT
*
*    IF THE THIRD PARAMETER HAD BEEN 'NI' THEN THOSE RECORDS
*    WHICH DO MATCH WOULD BE EXCLUDED.
*
E35TABL  START
         YREGS
         USING *,R12
E35TABL  AMODE 31
E35TABL  RMODE 24
         STM   14,12,12(R13)
         LR    R12,R15                   SET BASE REGISTER
         LA    R2,SAV_AREA
         ST    R13,4(R2)                 CHAIN SAVE AREAS
         ST    R2,8(R13)
         LR    R13,R2
         B     AFT_SAVE
SAV_AREA DS    18F
AFT_SAVE DS    0H
*
         LR    R3,R1                     COPY INPUT PARM LIST
         CLI   FIRST_TIME,C'Y'           FIRST TIME IN
         BE    IS_FIRST
*
AFT_INIT DS    0H
         L     R4,0(,R3)                 GET RECORD ADDRESS
         LTR   R4,R4                     IS THERE ONE
         BZ    NO_REC                    NO
         MVC   TEST_IT+1(1),LEN_GTH+1    SET LENGTH OF COMPARE
         L     R9,TABLE_ADDR
         LR    R6,R4
         AH    R6,DISP_LACE
DO_TEST  DS    0H
TEST_IT  CLC   0(1,R9),0(R6)
         BE    MAT_CHED
         AH    R9,REC_LEN_GTH
         C     R9,TABLE_ADDR_E           QUIT WHEN NO MORE VALUES
         BL    TEST_IT
*                                        DID NOT FIND THE VALUE
         CLC   TY_PE,=C'IN'              DID WE WANT TO FIND IT ?
         BE    NOT_WANT                  YES - SO DROP RECORD
         B     WAN_TED                   NO  - SO KEEP RECORD
*
MAT_CHED DS    0H                        WE FOUND THE VALUE
         CLC   TY_PE,=C'IN'              DID WE WANT TO FIND IT ?
         BE    WAN_TED                   YES - SO KEEP RECORD
         B     NOT_WANT                  NO  - SO DROP RECORD
*
WAN_TED  DS    0H
         L     R1,4(R13)                 POINT TO CALLERS SAVE AREA
         ST    R4,24(R1)                 STORE RECORD ADDRESS
         LA    R15,0                     INDICATES KEEP RECORD
         B     GOBACK
*
NOT_WANT DS    0H
         LA    R15,4                     INDICATES DROP RECORD
         B     GOBACK
*
NO_REC   DS    0H                        END OF FILE SO FREE STORAGE
         L     R2,TABLE_LENGTH
         L     R9,TABLE_ADDR
         FREEMAIN RU,LV=(R2),A=(R9)      RELEASE STORAGE
         LA    R15,8                     RC=8 DON'T CALL AGAIN
*
GOBACK   DS    0H                        R15 SHOULD CONTAIN RETURN CODE
         L     R13,4(R13)                POINT TO CALLERS SAVE AREA
         ST    R15,16(R13)               PUT IN CALLERS SAVE AREA
         LM    R14,R12,12(R13)           RESTORE REGISTERS AND RC
         BSM   0,R14                     RETURN TO CALLER
*______________________________________________________________________
*
*        THIS READS FROM DDNAME=E35TABL
*
IS_FIRST DS    0H
*
         MVI   FIRST_TIME,C'N'           SHOW NOT FIRST TIME
*
         OPEN  (E35TABLF,INPUT)
         LTR   R15,R15
         BZ    OPEN_OK
         LA    R15,16
         B     GOBACK
*
OPEN_OK  DS    0H
*
         GET   E35TABLF
         MVC   PARM_CARD,0(R1)                 COPY INPUT RECORD
         CLOSE E35TABLF
         TRT   PARM_CARD(5),NUM_TAB
         BNZ   INVALID_PARAMETER
         CLI   PARM_CARD+5,C','
         BNE   INVALID_PARAMETER
         TRT   PARM_CARD+6(3),NUM_TAB
         BNZ   INVALID_PARAMETER
         CLI   PARM_CARD+9,C','
         BNE   INVALID_PARAMETER
         CLC   PARM_CARD+10(2),=C'IN'
         BE    OK_10
         CLC   PARM_CARD+10(2),=C'NI'
         BNE   INVALID_PARAMETER
OK_10    DS    0H
         PACK  DOUB_WORD,PARM_CARD(5)
         CVB   R1,DOUB_WORD
         BCTR  R1,0
         STH   R1,DISP_LACE
         PACK  DOUB_WORD,PARM_CARD+6(3)
         CVB   R1,DOUB_WORD
         CHI   R1,256
         BH    INVALID_PARAMETER
         STH   R1,REC_LEN_GTH
         BCTR  R1,0
         STH   R1,LEN_GTH
         MVC   TY_PE,PARM_CARD+10
*
         BAS   R8,COUNT_TABLIN
*
         MH    R9,REC_LEN_GTH
         ST    R9,TABLE_LENGTH
         GETMAIN RU,LV=(R9),LOC=31       GET STORAGE TO HOLD ALL VALUES
         ST    R1,TABLE_ADDR
         LR    R9,R1
*
         BAS   R8,LOAD_TABLIN
*
         B     AFT_INIT
*______________________________________________________________________
*
COUNT_TABLIN   DS    0H
*
         OPEN  (TABLIN1,INPUT)
         LTR   R15,R15
         BZ    OP_CT_OK
         LA    R15,16
         B     GOBACK
*
OP_CT_OK DS    0H
         XR    R9,R9
NEXT_CT  DS    0H
         GET   TABLIN1
         LA    R9,1(,R9)
         B     NEXT_CT
END_TABLIN1  DS    0H
         CLOSE TABLIN1
*
         BR    R8
*______________________________________________________________________
*
LOAD_TABLIN    DS    0H
*
         OPEN  (TABLIN2,INPUT)
         LTR   R15,R15
         BZ    OP_LT_OK
         LA    R15,16
         B     GOBACK
*
OP_LT_OK DS    0H
         MVC   COP+1(1),LEN_GTH+1        SET THE LENGTH OF THE MOVE
NEXT_LT  DS    0H
         GET   TABLIN2
COP      MVC   0(1,R9),0(R1)             COPY VALUE
         AH    R9,REC_LEN_GTH            POINT TO NEXT SLOT
         B     NEXT_LT
END_TABLIN2  DS    0H
         CLOSE TABLIN2
         ST    R9,TABLE_ADDR_E           SAVE END OF TABLE ADDRESS
*
         BR    R8
*______________________________________________________________________
*
INVALID_PARAMETER  DS    0H
*
         MVC   MESS_TXT(L'INV_PARM_1),INV_PARM_1
         BAS   R8,WRITE_LOG
         MVC   MESS_TXT(72),PARM_CARD
         BAS   R8,WRITE_LOG
         MVC   MESS_TXT(L'INV_PARM_2),INV_PARM_2
         BAS   R8,WRITE_LOG
         MVC   MESS_TXT(L'INV_PARM_3),INV_PARM_3
         BAS   R8,WRITE_LOG
         MVC   MESS_TXT(L'INV_PARM_4),INV_PARM_4
         BAS   R8,WRITE_LOG
         LA    R15,16
         B     GOBACK
*______________________________________________________________________
*
WRITE_LOG  DS    0H
*
         LA    R2,MESS_LEN
         WTO   TEXT=(R2),ROUTCDE=11,MCSFLAG=HRDCPY
         MVI   MESS_TXT,C' '
         MVC   MESS_TXT+1(L'MESS_TXT-1),MESS_TXT
         BR    R8
*______________________________________________________________________
*
TABLE_ADDR     DC    F'0'
TABLE_ADDR_E   DC    F'0'
TABLE_LENGTH   DC    F'0'
REC_LEN_GTH    DC    H'0'
LEN_GTH        DC    H'0'
DISP_LACE      DC    H'0'
MESS_LEN       DC    H'80'
MESS_TXT       DC    CL80'  '
TY_PE          DC    C'  '
FIRST_TIME     DC    C'Y'
*
INV_PARM_1     DC    C'E35TABL - INVALID PARAMETER SPECIFIED'
INV_PARM_2     DC    C'00009,003,IN      WOULD BE VALID'
INV_PARM_3     DC    C'POSITION AND LENGTH IN RECORD'
INV_PARM_4     DC    C'LENGTH SPECIFIED MUST NOT EXCEED 256'
IN_THERE       DC    C'AFTER INIT'
GOT_ONE        DC    C'RECORD READ'
END_JOB        DC    C'END OF INPUT'
NEVER_H        DC    C'SHOULD NEVER HAPPEN'
*
END_E35TABL    DS    0H
               LA    R15,16
               B     GOBACK
*
DOUB_WORD      DS    D
PARM_CARD      DS    CL72
*
E35TABLF DCB   DSORG=PS,MACRF=(GL),DDNAME=E35TABL,EODAD=END_E35TABL
TABLIN1  DCB   DSORG=PS,MACRF=(GL),DDNAME=TABLIN,EODAD=END_TABLIN1
TABLIN2  DCB   DSORG=PS,MACRF=(GL),DDNAME=TABLIN,EODAD=END_TABLIN2
*
         LTORG
*
NUM_TAB  DC    256X'FF'
         ORG   NUM_TAB+C'0'
         DC    10X'00'
         ORG
*
         END
