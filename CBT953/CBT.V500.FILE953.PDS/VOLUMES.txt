 TITLE 'VOLUMES  - OBTAIN VTOC DETAILS OF VOLUMES MATCHING PATTERN'
*______________________________________________________________________
*
VOLUMES  PRGDEF FSEG=MAIN_PART,RMODE=24
*
PL_16          DS    PL16
WORK8          DS    CL8
VOL_PATTERN    DS    CL6
*
SYSOUT_REC     DS    CL80
*
         PRGEDEF
*
         USING VOL_DETS,U#F4DSCB
         USING UCB_DETS,U#COPY
*______________________________________________________________________
*
 SEGS MAIN_PART
*
   MVC   VOL_PATTERN,=C'******'
   L     R1,0(R1)
   IF (CLC,0(2,R1),NE,=H'0')
     IF (CLC,0(2,R1),GT,=H'6')
       MVC   MESS_TXT(L'PARM_ERR),PARM_ERR
       SEGDO WRITE_LOG
       PRGQUIT RC=8
     ENDIF
     LH    R2,0(R1)
     BCTR  R2,0
     EX    R2,COPY_VOL_PAT
   ENDIF
   MVI   SYSOUT_REC,C' '
   MVC   SYSOUT_REC+1(L'SYSOUT_REC-1),SYSOUT_REC
*
   SEGDO OPEN_SYSOUT
   SEGDO WRITE_HEADINGS
*
   XC    U#WORK,U#WORK
   DO INF
     UCBSCAN COPY,WORKAREA=U#WORK,UCBAREA=U#COPY,DEVCLASS=DASD,        /
               DYNAMIC=YES,DEVNCHAR=DEVNCHAR,RANGE=ALL
   DOEXIT (LTR,R15,R15,NZ)             QUIT IF NO MORE UCB
     IF (TM,UCBSTAT,UCBONLI,NZ)        IT'S ONLINE
       IF (CLC,UCBVOLI(1),EQ,VOL_PATTERN),OR,                          /
               (CLI,VOL_PATTERN,EQ,C'*'),ANDIF,                        /
               (CLC,UCBVOLI+1(1),EQ,VOL_PATTERN+1),OR,                 /
               (CLI,VOL_PATTERN+1,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+2(1),EQ,VOL_PATTERN+2),OR,                 /
               (CLI,VOL_PATTERN+2,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+3(1),EQ,VOL_PATTERN+3),OR,                 /
               (CLI,VOL_PATTERN+3,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+4(1),EQ,VOL_PATTERN+4),OR,                 /
               (CLI,VOL_PATTERN+4,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+5(1),EQ,VOL_PATTERN+5),OR,                 /
               (CLI,VOL_PATTERN+5,EQ,C'*')
         SEGDO MAIN_PROCESS
         AP    NUM_VOLS,=P'1'
         AP    TOTAL_FREE,VOLUME_FREE
         AP    TOTAL_TRACKS,VOLUME_TRACKS
       ENDIF
     ENDIF
   ENDDO
*
   SEGDO WRITE_SYSOUT
*
   MVC   SYSOUT_REC(L'ED_PL4),ED_PL4
   ED    SYSOUT_REC(L'ED_PL4),NUM_VOLS
   IF (CP,NUM_VOLS,GT,=P'0')
     MVC   SYSOUT_REC+10(L'ED_PL6),ED_PL6
     ED    SYSOUT_REC+10(L'ED_PL6),TOTAL_TRACKS+2    TOTAL TRACKS
     ZAP   DOUB_WORD,TOTAL_TRACKS
     SP    DOUB_WORD,TOTAL_FREE
     MVC   SYSOUT_REC+25(L'ED_PL6),ED_PL6
     ED    SYSOUT_REC+25(L'ED_PL6),DOUB_WORD+2       TOTAL USED
     MVC   SYSOUT_REC+40(L'ED_PL6),ED_PL6
     ED    SYSOUT_REC+40(L'ED_PL6),TOTAL_FREE+2      TOTAL FREE TRACKS
*
     IF (CP,TOTAL_TRACKS,GT,=P'0')
       ZAP   PL_16,TOTAL_FREE          TOTAL NUMBER OF FREE TRACKS
       MP    PL_16,=P'100000'
       DP    PL_16,TOTAL_TRACKS        TOTAL NUMBER OF AVAILABLE TRA
       SRP   PL_16(8),64-1,5
       MVC   SYSOUT_REC+55(L'ED_PL6D2),ED_PL6D2
       ED    SYSOUT_REC+55(L'ED_PL6D2),PL_16+2       % FREE SPACE
     ENDIF
   ENDIF
   SEGDO WRITE_SYSOUT
*
   SEGDO CLOSE_SYSOUT
*
 SEGE MAIN_PART
*______________________________________________________________________
*
 SEGS MAIN_PROCESS
*
   MVC   SYSOUT_REC+4(6),UCBVOLI
*
   LA    R3,U#COPY
   LSPACE UCB=(R3),EXPMSG=U#EXPMSG,F4DSCB=U#F4DSCB
*
   PACK  DOUB_WORD,U#EXPMSG+6(6)       NUMBER OF FREE CYLINDERS
   CVB   R1,DOUB_WORD                  CONVERT TO BINARY
   MH    R1,DS4DSTRK                   NUMBER OF TRACKS PER CYL
   CVD   R1,DOUB_WORD                  CONVERT TO DECIMAL
   PACK  FREE_TRKS,U#EXPMSG+13(6)      NUMBER OF EXTRA TRACKS
   AP    DOUB_WORD,FREE_TRKS           TOTAL FREE
   ZAP   VOLUME_FREE,DOUB_WORD
*
*
   LH    R1,DS4DSCYL                   TOTAL NUMBER OF CYLINDERS
   MH    R1,DS4DSTRK                   NUMBER OF TRACKS PER CYL
   CVD   R1,VOLUME_TRACKS              GIVE AVAILABLE TRACKS
   MVC   SYSOUT_REC+10(L'ED_PL6),ED_PL6
   ED    SYSOUT_REC+10(L'ED_PL6),VOLUME_TRACKS+2    TOTAL TRACKS
*
   ZAP   DOUB_WORD,VOLUME_TRACKS
   SP    DOUB_WORD,VOLUME_FREE
   MVC   SYSOUT_REC+25(L'ED_PL6),ED_PL6
   ED    SYSOUT_REC+25(L'ED_PL6),DOUB_WORD+2        USED TRACKS
   MVC   SYSOUT_REC+40(L'ED_PL6),ED_PL6
   ED    SYSOUT_REC+40(L'ED_PL6),VOLUME_FREE+2      FREE TRACKS
*
   IF (CP,VOLUME_TRACKS,GT,=P'0')
     ZAP   PL_16,VOLUME_FREE
     MP    PL_16,=P'100000'
     DP    PL_16,VOLUME_TRACKS
     SRP   PL_16(8),64-1,5
     MVC   SYSOUT_REC+55(L'ED_PL6D2),ED_PL6D2
     ED    SYSOUT_REC+55(L'ED_PL6D2),PL_16+2         % FREE SPACE
   ENDIF
   SEGDO WRITE_SYSOUT
*
 SEGE MAIN_PROCESS
*______________________________________________________________________
*
 SEGS WRITE_HEADINGS
*
   MVC   SYSOUT_REC(L'HEAD_L_1),HEAD_L_1
   MVC   SYSOUT_REC+L'HEAD_L_1-6(6),VOL_PATTERN
   SEGDO WRITE_SYSOUT
   SEGDO WRITE_SYSOUT
   MVC   SYSOUT_REC(L'HEAD_L_2),HEAD_L_2
   SEGDO WRITE_SYSOUT
   MVC   SYSOUT_REC(L'HEAD_L_3),HEAD_L_3
   SEGDO WRITE_SYSOUT
   SEGDO WRITE_SYSOUT
*
 SEGE WRITE_HEADINGS
*______________________________________________________________________
*
 SEGS WRITE_SYSOUT
*
   SAM24
   PUT   SYSOUT,SYSOUT_REC
   SAM31
*
   MVI   SYSOUT_REC,C' '
   MVC   SYSOUT_REC+1(L'SYSOUT_REC-1),SYSOUT_REC
*
 SEGE WRITE_SYSOUT
*______________________________________________________________________
*
 SEGS OPEN_SYSOUT
*
   OPEN  (SYSOUT,OUTPUT),MODE=31
   IF (LTR,R15,R15,NZ)
     MVC   MESS_TXT(L'OPEN_ERR),OPEN_ERR
     SEGDO WRITE_LOG
     PRGQUIT RC=8
   ENDIF
*
 SEGE OPEN_SYSOUT
*______________________________________________________________________
*
 SEGS CLOSE_SYSOUT
*
   CLOSE (SYSOUT),MODE=31
   IF (LTR,R15,R15,NZ)
     MVC   MESS_TXT(L'CLOSE_ERR),CLOSE_ERR
     SEGDO WRITE_LOG
     PRGQUIT RC=8
   ENDIF
*
 SEGE CLOSE_SYSOUT
*______________________________________________________________________
*
 SEGS WRITE_LOG
*
   WTOX
*
 SEGE WRITE_LOG
*______________________________________________________________________
*
               PRGSTAT
*
COPY_VOL_PAT   MVC   VOL_PATTERN(1),2(R1)
*
SYSOUT   DCB   DDNAME=SYSOUT,MACRF=(PM),DSORG=PS,RECFM=FB,LRECL=80
*
DEVNCHAR       DC    CL4' '
*
L#VOL          DS    CL6
U#COPY         DS    XL48
U#WORK         DS    XL100
U#EXPMSG       DS    XL40
U#F4DSCB       DS    XL96
*
FREE_TRKS      DC    PL3'0'
VOLUME_FREE    DC    PL8'0'
VOLUME_TRACKS  DC    PL8'0'
TOTAL_FREE     DC    PL8'0'
TOTAL_TRACKS   DC    PL8'0'
NUM_VOLS       DC    PL4'0'
*
PARM_ERR       DC    C'Parm error - length > 6'
OPEN_ERR       DC    C'Error opening SYSOUT'
CLOSE_ERR      DC    C'Error closing SYSOUT'
*
HEAD_L_1 DC  C'Show online dasd volumes matching pattern=XXXXXX'
HEAD_L_2 DC  C'    volume          total           used           free /
                        %free'
HEAD_L_3 DC  C'    ------          -----           ----           ---- /
                        -----'
ED_PL4         DC    X'40206B2020206B20212060'
ED_PL6         DC    X'4020206B2020206B2020206B20212060'
ED_PL6D2       DC    X'402020206B2020206B2021204B202060'
*______________________________________________________________________
*
SSOB_PTR       DS    A(SSOB+X'80000000')
SSOB_WRK       DS    XL(SSOBHSIZ)            SSOB
SSSA_WRK       DS    XL(SSSALN+SSSA1LN+L'SSSA1NMS)
*______________________________________________________________________
*
               LTORG
*______________________________________________________________________
*
VOL_DETS       DSECT
               IECSDSL1 (4)            GEN FMT 4 DSCB LABELS
UCB_DETS       DSECT
               IEFUCBOB
VOLUMES        CSECT
               CVT   DSECT=YES         CVT
               IEFJESCT                JES CVT
               IEFJSSOB ,              SSOB HEADER DSECT
               IEFSSSA                 SSOB EXTENSION FOR SMS
*              IGDVLD                  VOLUME DEFINITION
               IGDSGD                  STORAGE GROUP DEFINITION
*______________________________________________________________________
*
               PRGESTAT
               PRGEND
               END
