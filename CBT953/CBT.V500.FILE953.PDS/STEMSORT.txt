 TITLE 'STEMSORT - REXX function to sort a STEM. variable'
*
STEMSORT PRGDEF FSEG=MAIN_BIT,REXX=Y,RENT=YES
*______________________________________________________________________
*
* Written by John Gateley - use at your own risk
*
* This program acts as a REXX function to sort a stem. variable
* either ascending or descending.
*
*    Note that the SYSOUT from SORT will be sent to SORTPRT
*    this can be allocated to DUMMY.
*
*    INPUT
*         Name       of STEM variable (e.g. WANG or WANG.BANG)
*         SORT       parameter A or D (ascending/descending)
*
*    OUTPUT
*         IF   successfull
*              RC=0
*              and the STEM is sorted
*         ELSE
*              RC=Error message
*         ENDIF
*
*  Alternatively you can suply the full SORT statement yourself.
*    SORT FIELDS=(1,7,CH,A,8,4,CH,D)
*  If you want to include a SUM statement then put that first
*  as the function will add ',FILSZ=nnnnnn' at the end of the
*  sort statement.
*______________________________________________________________________
*
* EXAMPLE USAGE
*
* /*REXX*/
*   "ALLOC FI(SORTPRT)  DUMMY"
*   "ISPEXEC LIBDEF ISPLLIB DATASET ID ('MY.LOAD.LIBRARY')"
*
*   WANG.0    = "6"
*   WANG.1    = "ZAK"
*   WANG.2    = "JOHN"
*   WANG.3    = "YANGTANGBANG"
*   WANG.4    = "ADAM"
*   WANG.5    = "CHARLES"
*   WANG.6    = "JOHN GATELEY WROTE THIS"
*
*   DO LO_OP_R = 1 TO WANG.0
*      SAY  ':' || WANG.LO_OP_R || ':'
*   END
*
*   SAY ' '
*
*   R_C = STEMSORT(WANG,'A')
*   IF  R_C      /= 0 THEN SAY R_C
*   ELSE
*      DO LO_OP_R = 1 TO WANG.0
*         SAY  ':' || WANG.LO_OP_R || ':'
*      END
*
*   DROP WANG.
*
*   "ISPEXEC LIBDEF ISPLLIB "
*   "FREE FILE(SORTPRT)"
*   EXIT
*______________________________________________________________________
*
*  REENTRANT STORAGE
*
ARG_SORT_STMT_ADR    DS    F
ARG_SORT_STMT_LEN    DS    F
*
STORE_LENGTH         DS    F
STORE_ADDR           DS    F
ARG_A_OR_D           DS    CL1
ERR_NO               DS    CL1
DUMMY_VAR_TEXT       DS    CL10
CHAR_SRT_LEN         DS    CL5
CHAR_REC_LEN         DS    CL5
CHAR_REC_COUNT       DS    CL11
IS_NOMSG             DS    CL5
*
DODYNPRC_PARM        DS    0D          parameter area for DODYNPRC
DODYNPRC_ACTION      DS    CL1
DODYNPRC_DDNAME      DS    CL8
DODYNPRC_DATASET     DS    CL44
DODYNPRC_MEMBER      DS    CL8
                     DS    0H
THE_SORT_STATEMENT   DS    CL500
*
        PRGEDEF
*______________________________________________________________________
*
 SEGS MAIN_BIT
*
   MVC   RX_#SAV_REX(4*4),#SAV_REX     copy rexx routine addresses
   SEGDO GET_ARGUMENTS
*
   LA    R1,DUMMY_VAR_TEXT             point to variable area
   ST    R1,THE_STEM_TEXT_ADR          save address
   LA    R1,L'DUMMY_VAR_TEXT           length of variable area
   ST    R1,THE_STEM_MAX_LEN           save length
*
   MVI   THE_STEM_TRIM_VAR,C'N'        do not strip spaces
*
   MVHHI THE_STEM_FUNCTION,21          get STEM max length + count
   SEGDO CALL_PROCSTEM
*
   ZAP   RX_TOT_RECS,THE_STEM_ZERO_COUNT   copy stem count for E15
   LA    R1,THE_STEM_AREA              point to PRGSTEM area
   ST    R1,RX_THE_STEM                stem area for E15/E35 exit
   L     R1,THE_STEM_MAX_LEN           get maximum variable length
   ST    R1,RX_REC_LEN                 length for E15 and E35 exits
   CVD   R1,DOUB_WORD
   OI    DOUB_WORD+7,X'0F'
   UNPK  CHAR_SRT_LEN,DOUB_WORD
   LA    R1,4(,R1)                     add 4 for original var length
   ST    R1,STORE_LENGTH               save length of getmain
   CVD   R1,DOUB_WORD
   OI    DOUB_WORD+7,X'0F'
   UNPK  CHAR_REC_LEN,DOUB_WORD
   OI    THE_STEM_ZERO_COUNT+L'THE_STEM_ZERO_COUNT-1,X'0F'
   UNPK  CHAR_REC_COUNT,THE_STEM_ZERO_COUNT  set sort record count
*
   L     R2,STORE_LENGTH               keep length of getmain
   STORAGE OBTAIN,LENGTH=(R2),LOC=31
   ST    R1,STORE_ADDR                 save getmain address
   ST    R1,RX_REC_ADR                 record for E15 and E35 exits
   ST    R1,THE_STEM_TEXT_ADR          used to read/write values
   A     R1,THE_STEM_MAX_LEN           add base length to address
   ST    R1,RX_VAR_LEN_ADR             position for length of variable
*
   SEGDO BUILD_SORT_STATEMENT
*
   IF (CLC,IS_NOMSG,EQ,=C'NOMSG')
     SEGDO DYNALLOC_A
   ENDIF
*
   ZAP   THE_STEM_ZERO_COUNT,=P'0'     tell E15 to start at beginning
*
   LA    R1,THE_SORT_STATEMENT
   ST    R1,MY_P_1
   L     R1,=V(STEMSR15)               E15 EXIT
   ST    R1,MY_P_2
   OI    MY_P_2,X'80'
   L     R1,=V(STEMSR35)               E35 EXIT
   ST    R1,MY_P_3
   OI    MY_P_3,X'80'
   MVC   MY_P_4,=X'FFFFFFFF'
   LA    R1,MY_PARM
   LINK  EP=SORT
   LR    R3,R15
   SEGDO RELEASE_STORAGE               free the storage
   IF (CLC,IS_NOMSG,EQ,=C'NOMSG')
     SEGDO DYNALLOC_D
   ENDIF
   IF (LTR,R3,R3,NZ)
     MVC   MESS_TXT(L'SORT_FAIL_MES),SORT_FAIL_MES
     XUNPK (R3),4,MESS_TXT+16
     MVC   EVALBLOCK_EVDATA(80),MESS_TXT
     SEGDO SAY_MESSAGE
     PRGQUIT RC=16
   ENDIF
*
   IF (CP,THE_STEM_ZERO_COUNT,LT,RX_TOT_RECS)  fewer records after sort
     LA    R1,DUMMY_VAR_TEXT           point to variable area
     ST    R1,THE_STEM_TEXT_ADR        save address
     LA    R1,L'DUMMY_VAR_TEXT         length of variable area
     ST    R1,THE_STEM_MAX_LEN         save length
     ZAP   THE_STEM_ZERO_COUNT,RX_TOT_RECS   copy original count
     MVHHI THE_STEM_FUNCTION,31        drop all > RX_TOT_RECS
     SEGDO CALL_PROCSTEM
   ENDIF
*
   MVI   EVALBLOCK_EVDATA,C' '
   MVC   EVALBLOCK_EVDATA+1(80),EVALBLOCK_EVDATA
   MVI   EVALBLOCK_EVDATA,C'0'         set result value
   LA    R1,1
   ST    R1,EVALBLOCK_EVLEN            set result length
*
 SEGE MAIN_BIT
*______________________________________________________________________
*
 SEGS DYNALLOC_A
*
   MVI   DODYNPRC_ACTION,C'A'        dynamically allocate
   MVC   DODYNPRC_DDNAME,=CL8'SORTPRT'
   MVC   DODYNPRC_DATASET,SPACES
   MVC   DODYNPRC_DATASET(5),=C'DUMMY'
   XC    DODYNPRC_MEMBER,DODYNPRC_MEMBER
   LA    R1,DODYNPRC_PARM
   ST    R1,MY_P_1
   LA    R1,MY_PARM
   L     R15,=V(DODYNPRC)
   BASR  R14,R15
   IF (CFI,R15,NE,0)
     ST    R15,R_C
     PRGQUIT
   ENDIF
*
 SEGE DYNALLOC_A
*______________________________________________________________________
*
 SEGS DYNALLOC_D
*
   MVI   DODYNPRC_ACTION,C'D'        dynamically de-allocate
   LA    R1,DODYNPRC_PARM
   ST    R1,MY_P_1
   LA    R1,MY_PARM
   L     R15,=V(DODYNPRC)
   BASR  R14,R15
*
 SEGE DYNALLOC_D
*______________________________________________________________________
*
 SEGS BUILD_SORT_STATEMENT
*
   LA    R14,THE_SORT_STATEMENT+2
   IF (CLI,ARG_A_OR_D,GT,C' ')         automatic sort
     MVC   0(16,R14),=C' SORT FIELDS=(1,'
     MVC   16(5,R14),CHAR_SRT_LEN
     MVC   21(6,R14),=C',BI, )'
     MVC   25(1,R14),ARG_A_OR_D
     LA    R14,27(,R14)
     LA    R15,27
   ELSE
     MVI   THE_SORT_STATEMENT+2,C' '
     LA    R14,THE_SORT_STATEMENT+3
     L     R0,ARG_SORT_STMT_ADR
     L     R1,ARG_SORT_STMT_LEN
     LR    R15,R1
     MVCL  R14,R0
     LA    R14,THE_SORT_STATEMENT+3
     L     R15,ARG_SORT_STMT_LEN
     LA    R14,0(R15,R14)              point to end of statement
     LA    R15,1(,R15)                 plus 1 for leading space
   ENDIF
   MVC   0(7,R14),=C',FILSZ='
   MVC   7(11,R14),CHAR_REC_COUNT
   MVC   18(L'OPT_IONS,R14),OPT_IONS
   LA    R14,L'OPT_IONS+18(,R14)
   LA    R15,L'OPT_IONS+18(,R15)
   MVC   0(5,R14),CHAR_REC_LEN
   MVC   5(2,R14),=C') '
   LA    R14,7(,R14)
   LA    R15,7(,R15)
   STH   R15,THE_SORT_STATEMENT        set length of sort statement
*
 SEGE BUILD_SORT_STATEMENT
*______________________________________________________________________
*
 SEGS GET_ARGUMENTS
*
   IF (CLC,ARGTABLE_ARGSTRING_PTR,EQ,=8X'FF')
     MVI   ERR_NO,1
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'0')
     MVI   ERR_NO,2
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,GT,=F'20')
     MVI   ERR_NO,3
     SEGDO NOT_VALID
   ENDIF
   MVC   THE_STEM_NAME_ADR,ARGTABLE_ARGSTRING_PTR
   MVC   THE_STEM_NAME_LEN,ARGTABLE_ARGSTRING_LENGTH
*
   LA    ARG_POINT,ARGTABLE_NEXT       check for second argument
   IF (CLC,ARGTABLE_ARGSTRING_PTR,EQ,=8X'FF')
     MVI   ERR_NO,4
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'0')
     MVI   ERR_NO,5
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'1')
     L     R15,ARGTABLE_ARGSTRING_PTR
     MVC   ARG_A_OR_D,0(R15)
     OI    ARG_A_OR_D,C' '             make uppercase
     IF (CLI,ARG_A_OR_D,NE,C'A'),AND,(CLI,ARG_A_OR_D,NE,C'D')
       MVI   ERR_NO,7
       SEGDO NOT_VALID
     ENDIF
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,GT,=F'400') arbitary limit
     MVI   ERR_NO,6
     SEGDO NOT_VALID
   ELSE
     L     R14,ARGTABLE_ARGSTRING_PTR
     L     R15,ARGTABLE_ARGSTRING_LENGTH
     DO FROM=(R15)
     DOEXIT (CLI,0(R14),GT,C' ')
       LA    R14,1(,R14)
     ENDDO
     IF (LTR,R15,R15,Z)
       MVI   ERR_NO,9
       SEGDO NOT_VALID
     ENDIF
     LA    R1,0(R15,R14)
     BCTR  R1,0
     DO FROM=(R15)
     DOEXIT (CLI,0(R1),GT,C' ')
       BCTR  R1,0
     ENDDO
     IF (LTR,R15,R15,Z)
       MVI   ERR_NO,9
       SEGDO NOT_VALID
     ENDIF
     IF (CLI,0(R1),NE,C')')
       MVI   ERR_NO,10
       SEGDO NOT_VALID
     ENDIF
     ST    R14,ARG_SORT_STMT_ADR
     ST    R15,ARG_SORT_STMT_LEN
   ENDIF
*
   LA    ARG_POINT,ARGTABLE_NEXT       check for third argument
   IF (CLC,ARGTABLE_ARGSTRING_PTR,NE,=8X'FF')
     IF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'5')
       L     R15,ARGTABLE_ARGSTRING_PTR
       MVC   IS_NOMSG,0(R15)
       OC    IS_NOMSG,SPACES             make uppercase
       IF (CLC,IS_NOMSG,NE,=C'NOMSG')
         MVI   ERR_NO,11
         SEGDO NOT_VALID
       ENDIF
     ELSE
       MVI   ERR_NO,11
       SEGDO NOT_VALID
     ENDIF
     LA    ARG_POINT,ARGTABLE_NEXT       check for fourth argument
     IF (CLC,ARGTABLE_ARGSTRING_PTR,NE,=8X'FF')
       MVI   ERR_NO,8
       SEGDO NOT_VALID
     ENDIF
   ENDIF
*
 SEGE GET_ARGUMENTS
*______________________________________________________________________
*
 SEGS CALL_PROCSTEM
*
   LA    R1,THE_STEM_AREA              point to PRGSTEM area INPUT
   ST    R1,MY_P_1                     save as first parm
   LA    R1,MY_PARM                    point to parameter list
   L     R15,=V(PROCSTEM)              get program address
   BASR  R14,R15                       go and set stem value
   IF (LTR,R15,R15,NZ)                 error ?
     ST    R15,R_C                     set return code
     SEGDO RELEASE_STORAGE             free the storage
     PRGQUIT                           QUIT
   ENDIF
*
 SEGE CALL_PROCSTEM
*______________________________________________________________________
*
 SEGS RELEASE_STORAGE
*
   L     R2,STORE_LENGTH
   IF (LTR,R2,R2,NZ)
     L     R1,STORE_ADDR
     STORAGE RELEASE,LENGTH=(R2),ADDR=(R1)
     XC    STORE_LENGTH,STORE_LENGTH
   ENDIF
*
 SEGE RELEASE_STORAGE
*______________________________________________________________________
*
 SEGS NOT_VALID
*
   MVC   EVALBLOCK_EVLEN,=F'30'
   IF (CLI,ERR_NO,EQ,1)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 not entered'
   ELSEIF (CLI,ERR_NO,EQ,2)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 was zero length'
   ELSEIF (CLI,ERR_NO,EQ,3)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 > 20 bytes'
   ELSEIF (CLI,ERR_NO,EQ,4)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 not entered'
   ELSEIF (CLI,ERR_NO,EQ,5)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 was zero length'
   ELSEIF (CLI,ERR_NO,EQ,6)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 > 1 byte'
   ELSEIF (CLI,ERR_NO,EQ,7)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 not A or D'
   ELSEIF (CLI,ERR_NO,EQ,8)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Fourth argument supplied'
   ELSEIF (CLI,ERR_NO,EQ,9)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Sort statement was blank'
   ELSEIF (CLI,ERR_NO,EQ,10)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Sort statement must end with )'
   ELSEIF (CLI,ERR_NO,EQ,11)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Third argument must be NOMSG'
   ELSE
     MVC   EVALBLOCK_EVDATA(30),=CL30'Unknown error, rc='
     XR    R1,R1
     IC    R1,ERR_NO                   take error number
     CVD   R1,DOUB_WORD
     OI    DOUB_WORD+7,X'0F'
     UNPK  EVALBLOCK_EVDATA+18(4),DOUB_WORD    put in output message
     XC    R_C,R_C
   ENDIF
*
   PRGQUIT
*
 SEGE NOT_VALID
*______________________________________________________________________
*
 SEGS SAY_MESSAGE
*
   LA    R1,=CL8'WRITE'
   ST    R1,MY_P_1
   LA    R1,MESS_TXT
   ST    R1,MY_P_8
   LA    R1,MY_P_8
   ST    R1,MY_P_2
   LA    R1,L'MESS_TXT
   ST    R1,MY_P_9
   LA    R1,MY_P_9
   ST    R1,MY_P_3
   OI    MY_P_3,X'80'
   L     R0,#SAV_REX+12                rexx environment block addr
   LA    R1,MY_PARM
   USING IRXEXTE,15
   L     15,ENVBLOCK_IRXEXTE
   L     15,IRXSAY
   DROP  15
   BASR  14,15
   IF (LTR,R15,R15,NZ)
     ST    R15,R_C
     SEGDO WRITE_LOG
     MVC   MESS_TXT(19),=C'Return code on SAY='
     XUNPK R_C,4,MESS_TXT+19
     SEGDO WRITE_LOG
   ENDIF
   MVI   MESS_TXT,C' '
   MVC   MESS_TXT+1(L'MESS_TXT-1),MESS_TXT
*
 SEGE SAY_MESSAGE
*______________________________________________________________________
*
 SEGS WRITE_LOG
*
   WTOX
*
 SEGE WRITE_LOG
*______________________________________________________________________
*
         PRGSTAT
*
                     PRGSTEM PREF=THE_STEM
*
COPY_ARGUMENT        MVC   0(1,R1),0(R15)
DO_MOVE              MVC   0(1,R3),0(R1)
*
OPT_IONS       DC    C' OPTION MSGDDN=SORTPRT RECORD TYPE=F,LENGTH=('
SORT_FAIL_MES  DC    C'SORT  failed RC=xxxxxxxx'
*
SPACES         DC    CL80' '
*
         LTORG
*______________________________________________________________________
*
               ENTRY STMSRTLN
STMSRTLN       DS    0F
RX_REC_LEN     DS    F
RX_REC_ADR     DS    F
RX_THE_STEM    DS    F
RX_VAR_LEN_ADR DS    F
RX_#SAV_REX    DS    4F
RX_TOT_RECS    DS    PL4
LEN_STMSRTLN   EQU   *-STMSRTLN
*______________________________________________________________________
*
         PRGESTAT
         PRGEND
         END
