 TITLE 'JRGULOAD - UNLOAD A PDS TO A SEQUENTIAL FILE'
*______________________________________________________________________
*
JRGULOAD PRGDEF  FSEG=MAIN_PART,RMODE=24
*
*  This unloads selected members of a PDS in IEBUPDTE format.
*
*  Use PGM=JRGULOAD,PARM=NOSTATS if statistics are not required.
*
*  This reads parameters to get get member names to select and then
*  outputs the contents of the members preceeded by
*  './ ADD NAME=????????'
*
*  PDSIN is the PDS and OUTPUT is the sequential file.
*
*  A restriction is that the RECFM and LRECL of PDSIN and OUTPUT
*  must match.
*
*  SYSIN should contain a list of member names in column 1 (as many
*  as required) or a pattern such as '********' or 'AB123***'
*
TTR_ADDR       DS    F
TAB_SYSIN_L          DS    F
TAB_SYSIN_A          DS    F
TAB_SYSIN_A_END      DS    F
LEN_STATS      DS    H
PARM_LEN       DS    H
PARM_VALUE     DS    CL80
SYSIN_REC      DS    CL80              input record
SYSOUT_REC     DS    CL80
EOF_SYSIN      DS    CL1
MATCH_ED       DS    CL1
DO_STATS       DS    CL1
END_OF_MEMBER  DS    CL1
TEST_MEMBER    DS    CL8
MEMBER_COUNT   DS    PL7
TOT_REC_COUNT  DS    PL7
*
PDS      USING IHADCB,PDSIN            map DCBD over PDSIN
OUT      USING IHADCB,OUTPUT           map DCBD over OUTPUT
*
MAP_THEM DSECT
         DS    0D
M_NAME   DS    CL8
M_NAME2  DS    CL8
M_NEXT   EQU   *
M_LEN    EQU   *-M_NAME
*
         PRGEDEF
*______________________________________________________________________
*
 SEGS MAIN_PART
*
   MVI   DO_STATS,C'Y'                 default to preserve statistics
   PRGPARM PARM_VALUE,LEN=PARM_LEN
   IF (CLC,=C'NOSTATS ',EQ,PARM_VALUE)
     MVI   DO_STATS,C'N'               statistics not wanted
   ENDIF
   MVI   SYSOUT_REC,C' '
   MVC   SYSOUT_REC+1(L'SYSOUT_REC-1),SYSOUT_REC
   ZAP   MEMBER_COUNT,=P'0'
   ZAP   TOT_REC_COUNT,=P'0'
   SEGDO OPEN_SYSOUT
*
   SEGDO OPEN_PDSIN
*
   SEGDO LOAD_SYSIN
*
   SEGDO PROCESS_MEMBERS
*
   SEGDO CLOSE_PDSIN
*
   SEGDO PUT_SYSOUT
   MVC   SYSOUT_REC+1(L'EDPAT),EDPAT
   ED    SYSOUT_REC+1(L'EDPAT),MEMBER_COUNT
   MVC   SYSOUT_REC+1+L'EDPAT(8),=C' members'
   MVC   SYSOUT_REC+1+L'EDPAT+8(L'EDPAT),EDPAT
   ED    SYSOUT_REC+1+L'EDPAT+8(L'EDPAT),TOT_REC_COUNT
   MVC   SYSOUT_REC+1+L'EDPAT+8+L'EDPAT(14),=C' total records'
   SEGDO PUT_SYSOUT
*
   SEGDO CLOSE_SYSOUT
*
   L     R2,TAB_SYSIN_L
   L     R1,TAB_SYSIN_A
   IF (LTR,R1,R1,NZ)
     FREEMAIN RU,LV=(R2),A=(R1)
   ENDIF
*
 SEGE MAIN_PART
*______________________________________________________________________
*
 SEGS LOAD_SYSIN
*
   ZAP   DOUB_WORD,=P'0'
   SEGDO OPEN_SYSIN
   DO INF
     SEGDO GET_SYSIN
   DOEXIT (CLI,EOF_SYSIN,EQ,C'Y')       exit on end of file
     AP    DOUB_WORD,=P'1'              increment record count
   ENDDO
   SEGDO CLOSE_SYSIN
*
   IF (CP,DOUB_WORD,EQ,=P'0')           no input so quit
     MVC   SYSOUT_REC(32),=C'SYSIN contained no control cards'
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
*
   CVB   R2,DOUB_WORD
   MH    R2,=AL2(M_LEN)
   ST    R2,TAB_SYSIN_L                 length of table
   GETMAIN RU,LV=(R2),LOC=31
   ST    R1,TAB_SYSIN_A                 save address of table
   AR    R1,R2
   ST    R1,TAB_SYSIN_A_END             set end of table
*
   PUSH  USING
   USING MAP_THEM,R4
*
   L     R4,TAB_SYSIN_A                 address of input
   SEGDO OPEN_SYSIN
   DO INF
     SEGDO GET_SYSIN
   DOEXIT (CLI,EOF_SYSIN,EQ,C'Y')
   DOEXIT (CLC,SYSIN_REC(2),EQ,=C'/*')
     MVC   M_NAME,SYSIN_REC
     TR    M_NAME,TRTAB                 translate member to skeletal
     MVC   M_NAME2,M_NAME               forms 1 and 2 in M_NAME
     TR    M_NAME2,TRTAB1               and M_NAME2
     LA    R4,M_NEXT
     MVC   SYSOUT_REC(72),SYSIN_REC     copy record to output
     SEGDO PUT_SYSOUT
   ENDDO
   SEGDO CLOSE_SYSIN                    close the SYSIN file
   SEGDO PUT_SYSOUT                     output blank line
*
   POP   USING
*
 SEGE LOAD_SYSIN
*______________________________________________________________________
*
 SEGS PROCESS_MEMBERS
*
   OPEN  (MEMLIST,INPUT)
   IF (LTR,R15,R15,NZ)
     PRGQUIT RC=16
   ENDIF
*
   DO INF
     GET   MEMLIST
     LH    R3,0(R1)                    number of active bytes in block
     LA    R3,0(R3,R1)                 point to end of block
     LA    R9,2(0,R1)                  jump past length
     DO INF
     DOEXIT (CR,R9,GE,R3)              at end of the block
     DOEXIT (CLC,0(8,R9),EQ,HIGHVALS)  end of directory
     DOEXIT (CLC,0(8,R9),EQ,LOWVALS)   not wanted
       L     R1,8(R9)
       STCM  R1,B'1110',TTR_ADDR       track address of member
       SLL   R1,27                     last byte contains length of
       SRL   R1,26                     ..user data in halfwords so dump
       STH   R1,LEN_STATS              ..the rest and make it bytes
       SEGDO CHECK_MEMBER_WANTED
       LA    R9,12(,R9)                add standard length
       AH    R9,LEN_STATS              plus length of user stats
     ENDDO
   DOEXIT (CLC,0(8,R9),EQ,HIGHVALS)    thats all
   ENDDO
*
ERR      DS    0H
DIREND   DS    0H
*
   CLOSE MEMLIST
*
 SEGE PROCESS_MEMBERS
*______________________________________________________________________
*
 SEGS CHECK_MEMBER_WANTED
*
   PUSH  USING
   USING MAP_THEM,R14
*
   L     R14,TAB_SYSIN_A                address of required members
   DO INF
   DOEXIT (C,R14,GE,TAB_SYSIN_A_END)
     MVC   TEST_MEMBER,0(R9)            copy member name
     OC    TEST_MEMBER,M_NAME2          transform to test
     IF (CLC,TEST_MEMBER(8),EQ,M_NAME)  do we want this ?
       IF (TM,11(R9),X'80',NZ)          member is an alias
         MVC   SYSOUT_REC(8),0(R9)
         MVC   SYSOUT_REC+12(L'NOT_SEL_ALIAS),NOT_SEL_ALIAS
         SEGDO PUT_SYSOUT
       ELSEIF (TM,11(R9),X'60',NZ)      TTR's in user data
         MVC   SYSOUT_REC(8),0(R9)
         MVC   SYSOUT_REC+12(L'NOT_SEL_TTR),NOT_SEL_TTR
         SEGDO PUT_SYSOUT
       ELSE
         SEGDO OUTPUT_MEMBER
       ENDIF
       L     R14,TAB_SYSIN_A_END
     ENDIF
     LA    R14,M_NEXT
   ENDDO
*
   POP   USING
*
 SEGE CHECK_MEMBER_WANTED
*______________________________________________________________________
*
 SEGS OUTPUT_MEMBER
*
   MVC   SYSOUT_REC(8),0(R9)
   MVC   SYSOUT_REC+12(16),=CL16'member selected'
   SEGDO PUT_SYSOUT
   AP    MEMBER_COUNT,=P'1'
*
   IF (TM,OUT.DCBRECFM,DCBRECF,NZ)     fixed records
     LA    R6,IEB_CARD+4
   ELSE
     LA    R6,IEB_CARD                 else variable
   ENDIF
   MVC   IEB_CARD+4+12(8),0(R9)        copy member name
   MVC   IEB_CARD+4+12+8(2),=X'FACE'   set indicator bytes
*
   IF (CLI,DO_STATS,EQ,C'Y')
     LH   R1,LEN_STATS
     IF (LTR,R1,R1,P)                  if something there
       EX    R1,COPY_STATS             copy length byte + stats
       IF (TM,OUT.DCBRECFM,DCBRECV,NZ) variable records
         LHI   R15,26                  normal length
         LA    R15,1(R1,R15)           add stats length
         STH   R15,IEB_CARD            save new length
       ENDIF
     ELSE
       MVC   IEB_CARD(2),=H'26'        set record length (variable)
     ENDIF
   ENDIF
   SEGDO PUT_OUTPUT
   MVI   IEB_CARD+4+12,C' '            wipe to blanks
   MVC   IEB_CARD+4+13(60),IEB_CARD+4+12
*
   FIND  PDSIN,TTR_ADDR,C
   IF (LTR,R15,R15,NZ)
     PRGQUIT RC=100
   ENDIF
   MVI   END_OF_MEMBER,C'N'
   XR    R6,R6
   XR    R7,R7
   XR    R8,R8
*
   DO INF
     SEGDO GET_NEXT_RECORD
   DOEXIT (CLI,END_OF_MEMBER,EQ,C'Y')
   ENDDO
*
 SEGE OUTPUT_MEMBER
*______________________________________________________________________
*
 SEGS GET_NEXT_RECORD
*
   IF (CR,R6,GE,R8)
     SEGDO READ_PDSIN
   ENDIF
*
   IF (CLI,END_OF_MEMBER,EQ,C'N')
     SEGDO PUT_OUTPUT
     AP    TOT_REC_COUNT,=P'1'
   ENDIF
*
   IF (TM,PDS.DCBRECFM,DCBRECV,NZ)     variable records
     AH    R6,0(R6)
   ELSE
     LA    R6,0(R7,R6)                 point to next record in block
   ENDIF
*
 SEGE GET_NEXT_RECORD
*______________________________________________________________________
*
 SEGS READ_PDSIN
*
   MVI   END_OF_MEMBER,C'N'
   READ  DECB1,SF,PDSIN,REC_AREA,'S'
   CHECK DECB1
   B     *+8                           branch after the MVI
END_PDSIN  DS    0H
   MVI   END_OF_MEMBER,C'Y'
*
   IF (CLI,END_OF_MEMBER,EQ,C'N')
     LA    R6,REC_AREA
     LH    R7,PDSIN+82                 get record length
     L     R1,DECB1+16                 point to status area
     LH    R8,PDSIN+62                 get blocksize
     SH    R8,14(,R1)                  subtract residual count to
     LA    R8,0(R6,R8)                 point past block
     IF (TM,PDS.DCBRECFM,DCBRECV,NZ)   if variable records
       LA    R6,4(,R6)                 point after block length
     ENDIF
   ENDIF
*
 SEGE READ_PDSIN
*______________________________________________________________________
*
 SEGS OPEN_PDSIN
*
   OPEN  (PDSIN,INPUT)
   IF (LTR,R15,R15,NZ)
     PRGQUIT RC=35
   ELSEIF (TM,PDS.DCBDSRG1,DCBDSGPO,Z)
     MVC   SYSOUT_REC(L'PDS_NOT),PDS_NOT
     SEGDO PUT_SYSOUT
     SEGDO OUTPUT_REQUIREMENTS
     PRGQUIT RC=8
   ENDIF
*
   MVC   OUT.DCBLRECL,PDS.DCBLRECL     copy block size
   MVC   OUT.DCBBLKSI,PDS.DCBBLKSI          record format
   MVC   OUT.DCBRECFM,PDS.DCBRECFM          record length
   XC    IEB_CARD(4),IEB_CARD          allow for cariable record
   MVC   IEB_CARD(2),=H'26'            set record length (variable)
   MVC   IEB_CARD+4(12),=CL12'./ ADD NAME='    IEBUPDTE card
*
   SEGDO OPEN_OUTPUT
*
 SEGE OPEN_PDSIN
*______________________________________________________________________
*
 SEGS CLOSE_PDSIN
*
   SEGDO CLOSE_OUTPUT
*
   CLOSE PDSIN
   IF (LTR,R15,R15,NZ)
     PRGQUIT RC=38
   ENDIF
*
 SEGE CLOSE_PDSIN
*______________________________________________________________________
*
 SEGS OUTPUT_REQUIREMENTS
*
*  Output how to use this program
*
   SEGDO PUT_SYSOUT
   LA    R4,REQ_MNT                    point to output text
   LH    R3,REQ_CNT                    count of lines
   DO FROM=(R3)
     LH    R1,0(,R4)                   get length of message -1
     EX    R1,COPY_2_SYSOUT            copy message
     LA    R4,3(R1,R4)                 point to next message
     SEGDO PUT_SYSOUT
   ENDDO
*
 SEGE OUTPUT_REQUIREMENTS
*______________________________________________________________________
*
 PRGDCBI DCB=SYSIN,REC=SYSIN_REC,EOF=EOF_SYSIN
*
 PRGDCBO DCB=OUTPUT,REC=0(R6),CLEAR=N
*
 PRGDCBO DCB=SYSOUT,REC=SYSOUT_REC
*______________________________________________________________________
*
         PRGSTAT
*
COPY_STATS     MVC   IEB_CARD+4+12+10(0),11(R9)
COPY_2_SYSOUT  MVC   SYSOUT_REC(0),2(R4) copy message text
LOWVALS        DC    8XL1'00'
HIGHVALS       DC    8XL1'FF'
*
EDPAT          DC    X'4020202020202020202020202120'
IEB_CARD       DC    CL84' '
EOF_MEMLIST    DC    C'N'
*
NOT_SEL_ALIAS  DC    C'not selected - it is an alias'
NOT_SEL_TTR    DC    C'not selected - user TTR present'
*
PDS_NOT  DC    C'//PDSIN    DD  ...         must be a PDS'
*
REQ_CNT  DC    H'6'                    count of instructions
REQ_MNT  EQU   *                       start of instructions
RQ_0     DC    AL2((RQ_1-RQ_0)-3)      length of message -1
         DC    C'   Instructions for use'
RQ_1     DC    AL2((RQ_2-RQ_1)-3)
         DC    C'//SYSIN    DD   input - control cards - list of '
         DC    C'members or pattern ********'
RQ_2     DC    AL2((RQ_3-RQ_2)-3)
         DC    C'//SYSOUT   DD   SYSOUT=*   report'
RQ_3     DC    AL2((RQ_4-RQ_3)-3)
         DC    C'//PDSIN    DD   DSN=  the PDS to unload'
RQ_4     DC    AL2((RQ_5-RQ_4)-3)
         DC    C'//OUTPUT   DD   DSN=  file to unload into - DISP=NEW'
RQ_5     DC    AL2((RQ_6-RQ_5)-3)
         DC    C'                      Do NOT set RECFM and LRECL'
RQ_6     EQU   *
*
SYSIN    DCB   DSORG=PS,DDNAME=SYSIN,MACRF=(GM),EODAD=END_SYSIN
*
MEMLIST  DCB   DDNAME=PDS,MACRF=(GL),DSORG=PS,EODAD=DIREND,            /
               LRECL=256,BLKSIZE=256,RECFM=FB
*
PDSIN    DCB   DDNAME=PDS,DSORG=PO,MACRF=R,EODAD=END_PDSIN
*
OUTPUT   DCB   DDNAME=OUTPUT,MACRF=(PM),DSORG=PS
*
SYSOUT   DCB   DDNAME=SYSOUT,MACRF=(PM),DSORG=PS,RECFM=FB,LRECL=80
*
HIGH_VALUES    DC    8XL1'FF'
*
TRTAB    DC   256AL1(*-TRTAB)
         ORG  TRTAB+C'*'
         DC   X'FF'
         ORG
TRTAB1   DC   256X'00'
         ORG  TRTAB1+X'FF'
         DC   X'FF'
         ORG
*______________________________________________________________________
*
         LTORG
*______________________________________________________________________
*
REC_AREA DS    CL32760
*______________________________________________________________________
*
         DCBD  DSORG=(QS,PO),DEVD=DA
*
         PRGESTAT
         PRGEND
         END
