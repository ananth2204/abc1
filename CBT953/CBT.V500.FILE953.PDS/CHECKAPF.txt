/* rexx       CHECKAPF     written by John Gateley

   This will read a list of load libraries from SYSIN to check if
   they are in the APF authorised list.
   First it populates a stem variable containing all APF
   authorised libraries. NOTE that only the dynamic list
   has been tested because I do not have access to a system
   with static list.
   Then it reads the SYSIN list and checks if the dataset is in the
   APF list. All dataset names are output to SYSTSPRT with the volume
   name and are flagged if they are not authorised.
   Note that the volume the dataset is on must match the volume of the
   APF authorised dataset. This is to catch those cases where there
   are two versions of a dataset, one in the catalogue and another
   in the APF list.

   This program uses some code from Mark Zelden's IPLINFO rexx exec
   to access undocumented control blocks. IPLINFO does not build
   a stem when the static list is used which is why I do not know
   if it will work correctly, it should but my error if it does not.
       http://mzelden.com/mvsutil.html

   Example use

   //STEP1   EXEC PGM=IKJEFT01,DYNAMNBR=20
   //SYSTSIN  DD  *
     EXEC 'a.b.c.d.FILE953(CHECKAPF)'
   //SYSIN    DD  *
     IGY410.SIGYCOMP
     EQA810.SEQABMOD
     EQA810.SEQAAUTH
     GIM.SGIMLMD0
     MAD.COW.SICKNESS
     FAN140.SEAGLPA
     DIT130.SDITMOD1
     IOE.SIOELMOD
     NORMAL.LOADLIB
     AUTH.LOADLIB
   //SYSTSPRT DD  SYSOUT=*

*/
Numeric digits 20                           /* dflt of 9 not enough  */
                                            /* 20 can handle 64-bit  */
line_break = substr('-',1,50,'-')           /* 50 bytes of '-'       */
say line_break

CVT      = C2d(Storage(10,4))
CVTAUTHL = C2d(Storage(D2x(CVT + 484),4))
If CVTAUTHL <> C2d('7FFFF001'x) then do      /* dynamic list ?       */
  NUMAPF   = C2d(Storage(D2x(CVTAUTHL),2))   /* # APF libs in table  */
  Say   'APF Library List  ('NUMAPF' libraries):'
  APFOFF   = 2                               /* first ent in APF tbl */
  VOL.0    = NUMAPF                          /* set the stem head    */
  DSN.0    = NUMAPF                          /* set the stem head    */
  Do I = 1 to NUMAPF                         /* for all datasets     */
    LEN = C2d(Storage(D2x(CVTAUTHL+APFOFF),1)) /* length of entry    */
    VOL.I = Storage(D2x(CVTAUTHL+APFOFF+1),6)  /* VOLSER of APF LIB  */
    DSN.I = Storage(D2x(CVTAUTHL+APFOFF+1+6),LEN-6) /* DSN of apflib */
    APFOFF = APFOFF + LEN +1
    APFPOS   = Right(I,4)                      /*position in APF list*/
  End
End
Else Do
  ECVT     = C2d(Storage(D2x(CVT + 140),4))    /* point to CVTECVT   */
  ECVTCSVT = C2d(Storage(D2x(ECVT + 228),4))   /* point to CSV table */
  APFA = C2d(Storage(D2x(ECVTCSVT + 12),4))    /* APFA               */
  AFIRST = C2d(Storage(D2x(APFA + 8),4))       /* First entry        */
  ALAST  = C2d(Storage(D2x(APFA + 12),4))      /* Last  entry        */
  LASTONE = 0   /* flag for end of list     */
  NUMAPF = 1    /* tot # of entries in list */
  Do forever
    DSN.NUMAPF = Storage(D2x(AFIRST+24),44)    /* DSN of APF library */
    DSN.NUMAPF = Strip(DSN.NUMAPF,'T')         /* remove blanks      */
    CKSMS = Storage(D2x(AFIRST+4),1)           /* DSN of APF library */
    if  bitand(CKSMS,'80'x)  = '80'x           /*  SMS data set?     */
      then VOL.NUMAPF = '*SMS* '               /* SMS control dsn    */
    else VOL.NUMAPF = Storage(D2x(AFIRST+68),6)    /* VOL of APF lib */
    If Substr(DSN.NUMAPF,1,1) <> X2c('00')     /* check for deleted  */
      then NUMAPF = NUMAPF + 1                 /*   APF entry        */
    AFIRST = C2d(Storage(D2x(AFIRST + 8),4))   /* next  entry        */
    if LASTONE = 1 then leave
    If  AFIRST = ALAST then LASTONE = 1
  End
  Say   'APF Library List  - Dynamic ('NUMAPF - 1' libraries):'
End

Say   'VOLUME     DSNAME'
Say   '======     ======'
Do I = 1 to NUMAPF-1
  APFPOS   = Right(I,4)                      /*position in APF list*/
  Say   VOL.I '   ' DSN.I
End

/*  Now read the list of datasets from SYSIN, get the volume name from
    the catalogue and see if they are authorised.
    If the dataset does not exist warn the user.               */

Say   '   '
Say   'Input library list'
Say   'VOLUME     DSNAME'
Say   '======     ======'
"EXECIO * DISKR SYSIN (FINIS STEM IN_LIN."   /* populate stem        */
Do I = 1 to IN_LIN.0                         /* for each input DSN   */
  DSN_NAM = Strip(IN_LIN.I)                  /* strip any spaces     */
  VAR_NAM = "'" || DSN_NAM || "'"            /* prepare for LISTDSI  */
  DSINFO  = LISTDSI(VAR_NAM)                 /* get dataset details  */
  IF DSINFO /= 0 then                        /* not catalogued       */
    say '          ' SUBSTR(DSN_NAM,1,44) 'not catalogued'
  else do
    DSN_VOL = SYSVOLUME                      /* copy dataset volume  */
    got_it  = 0                              /* flag not matched     */
    Do J = 1 to NUMAPF-1                     /* for all APF datasets */
      IF  VOL.J    = DSN_VOL then do         /* matching volume      */
         IF DSN.J  = DSN_NAM THEN            /* matching dataset     */
            got_it = 1                       /* flag matched         */
      End
    End
    IF got_it = 1 then                       /* if matched           */
       say DSN_VOL '   ' DSN_NAM
    else
       say DSN_VOL '   ' SUBSTR(DSN_NAM,1,44) 'not authorised'
  End
End
say line_break
