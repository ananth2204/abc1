 TITLE 'VOLUMESR  - Obtain vtoc details of VOLUMES matching pattern'
*______________________________________________________________________
*
VOLUMESR PRGDEF FSEG=MAIN_PART,RMODE=24,REXX=Y
*
*  Created by John Gateley
*
*  This is a REXX enabled version of volumes which, instead of writing
*  to SYSOUT populates a REXX stem variable with the results.
*______________________________________________________________________
*
* This program acts as a REXX function
*
*    Input
*         6 bytes containing a pattern for the volume name
*         the name of a stem variable to populate
*
*    Output
*         stem_name.0                  count of stem variable
*         stem_name.?                  volume details
*______________________________________________________________________
*
PL_16          DS    PL16
WORK8          DS    CL8
VOL_PATTERN    DS    CL6
*
ATIOT          DS    F                 address of TIOT
*
SYSOUT_REC     DS    CL80
ERR_NO         DS    C
*
         PRGSTEM
*
         PRGEDEF
*
         USING VOL_DETS,U#F4DSCB
         USING UCB_DETS,U#COPY
*______________________________________________________________________
*
 SEGS MAIN_PART
*
   SEGDO GET_ARGUMENTS
*
   XC    U#WORK,U#WORK
   DO INF
     UCBSCAN COPY,WORKAREA=U#WORK,UCBAREA=U#COPY,DEVCLASS=DASD,        /
               DYNAMIC=YES,DEVNCHAR=DEVNCHAR,RANGE=ALL
   DOEXIT (LTR,R15,R15,NZ)             quit if no more UCB
     IF (TM,UCBSTAT,UCBONLI,NZ)        is it online
       IF (CLC,UCBVOLI(1),EQ,VOL_PATTERN),OR,                          /
               (CLI,VOL_PATTERN,EQ,C'*'),ANDIF,                        /
               (CLC,UCBVOLI+1(1),EQ,VOL_PATTERN+1),OR,                 /
               (CLI,VOL_PATTERN+1,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+2(1),EQ,VOL_PATTERN+2),OR,                 /
               (CLI,VOL_PATTERN+2,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+3(1),EQ,VOL_PATTERN+3),OR,                 /
               (CLI,VOL_PATTERN+3,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+4(1),EQ,VOL_PATTERN+4),OR,                 /
               (CLI,VOL_PATTERN+4,EQ,C'*'),ANDIF,                      /
               (CLC,UCBVOLI+5(1),EQ,VOL_PATTERN+5),OR,                 /
               (CLI,VOL_PATTERN+5,EQ,C'*')
         SEGDO PROCESS_UCB
         AP    NUM_VOLS,=P'1'
         AP    TOTAL_FREE,VOLUME_FREE
         AP    TOTAL_TRACKS,VOLUME_TRACKS
       ENDIF
     ENDIF
   ENDDO
*
   MVC   SYSOUT_REC(L'ED_PL4),ED_PL4
   ED    SYSOUT_REC(L'ED_PL4),NUM_VOLS
   IF (CP,NUM_VOLS,GT,=P'0')
     MVC   SYSOUT_REC+10(L'ED_PL6),ED_PL6
     ED    SYSOUT_REC+10(L'ED_PL6),TOTAL_TRACKS+2    total tracks
     ZAP   DOUB_WORD,TOTAL_TRACKS
     SP    DOUB_WORD,TOTAL_FREE
     MVC   SYSOUT_REC+25(L'ED_PL6),ED_PL6
     ED    SYSOUT_REC+25(L'ED_PL6),DOUB_WORD+2       total used
     MVC   SYSOUT_REC+40(L'ED_PL6),ED_PL6
     ED    SYSOUT_REC+40(L'ED_PL6),TOTAL_FREE+2      total free tracks
*
     IF (CP,TOTAL_TRACKS,GT,=P'0')
       ZAP   PL_16,TOTAL_FREE          total number of free tracks
       MP    PL_16,=P'100000'
       DP    PL_16,TOTAL_TRACKS        total number of available tra
       SRP   PL_16(8),64-1,5           shift right, normal rounding
       MVC   SYSOUT_REC+55(L'ED_PL6D2),ED_PL6D2
       ED    SYSOUT_REC+55(L'ED_PL6D2),PL_16+2       % free space
     ENDIF
     SEGDO WRITE_STEM
   ENDIF
*
   MVHHI STEM_FUNCTION,3               set STEM.0 to total lines
   SEGDO CALL_PROCSTEM
*
 SEGE MAIN_PART
*______________________________________________________________________
*
 SEGS PROCESS_UCB
*
   MVC   SYSOUT_REC+4(6),UCBVOLI
*
   LA    R3,U#COPY
   LSPACE UCB=(R3),EXPMSG=U#EXPMSG,F4DSCB=U#F4DSCB
*
   PACK  DOUB_WORD,U#EXPMSG+6(6)       number of free cylinders
   CVB   R1,DOUB_WORD                  convert to binary
   MH    R1,DS4DSTRK                   number of tracks per cyl
   CVD   R1,DOUB_WORD                  convert to decimal
   PACK  FREE_TRKS,U#EXPMSG+13(6)      number of extra tracks
   AP    DOUB_WORD,FREE_TRKS           total free
   ZAP   VOLUME_FREE,DOUB_WORD
*
*
   LH    R1,DS4DSCYL                   total number of cylinders
*  BCTR  R1,0                          minus 1 for vtoc
   MH    R1,DS4DSTRK                   number of tracks per cyl
   CVD   R1,VOLUME_TRACKS              give available tracks
   MVC   SYSOUT_REC+10(L'ED_PL6),ED_PL6
   ED    SYSOUT_REC+10(L'ED_PL6),VOLUME_TRACKS+2     total tracks
*
   ZAP   DOUB_WORD,VOLUME_TRACKS
   SP    DOUB_WORD,VOLUME_FREE
   MVC   SYSOUT_REC+25(L'ED_PL6),ED_PL6
   ED    SYSOUT_REC+25(L'ED_PL6),DOUB_WORD+2         used tracks
   MVC   SYSOUT_REC+40(L'ED_PL6),ED_PL6
   ED    SYSOUT_REC+40(L'ED_PL6),VOLUME_FREE+2       free tracks
*
   IF (CP,VOLUME_TRACKS,GT,=P'0')
     ZAP   PL_16,VOLUME_FREE
     MP    PL_16,=P'100000'
     DP    PL_16,VOLUME_TRACKS
     SRP   PL_16(8),64-1,5
     MVC   SYSOUT_REC+55(L'ED_PL6D2),ED_PL6D2
     ED    SYSOUT_REC+55(L'ED_PL6D2),PL_16+2         % free space
   ENDIF
   SEGDO WRITE_STEM
*
 SEGE PROCESS_UCB
*______________________________________________________________________
*
 SEGS WRITE_STEM
*
   LA    R1,SYSOUT_REC
   ST    R1,STEM_TEXT_ADR
   LA    R1,70                       just output 70 bytes
   ST    R1,STEM_TEXT_LEN
   MVHHI STEM_FUNCTION,2             set STEM value
   SEGDO CALL_PROCSTEM
*
 SEGE WRITE_STEM
*______________________________________________________________________
*
 SEGS GET_ARGUMENTS
*
   IF (CLC,ARGTABLE_ARGSTRING_PTR,EQ,=8X'FF')    no arguments
     MVI   ERR_NO,1
     SEGDO NOT_VALID
   ENDIF
   IF (CLC,ARGTABLE_ARGSTRING_LENGTH,NE,=F'6')   length not 6
     MVI   ERR_NO,2
     SEGDO NOT_VALID
   ENDIF
   L     R15,ARGTABLE_ARGSTRING_PTR              get address
   MVC   VOL_PATTERN,0(R15)                      copy volume pattern
   OC    VOL_PATTERN,=C'      '                  ensure uppercase
*
   LA    ARG_POINT,ARGTABLE_NEXT       point to second argument
   IF (CLC,ARGTABLE_ARGSTRING_PTR,EQ,=8X'FF')
     MVI   ERR_NO,3
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'0')
     MVI   ERR_NO,4
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,GT,=F'20')
     MVI   ERR_NO,5
     SEGDO NOT_VALID
   ENDIF
   MVC   STEM_NAME_ADR,ARGTABLE_ARGSTRING_PTR
   MVC   STEM_NAME_LEN,ARGTABLE_ARGSTRING_LENGTH
*
   MVI   STEM_TRIM_VAR,C'N'            do not trim spaces from var
   MVHHI STEM_FUNCTION,1               init STEM.0
   SEGDO CALL_PROCSTEM
*
 SEGE GET_ARGUMENTS
*______________________________________________________________________
*
 SEGS CALL_PROCSTEM
*
   LA    R1,STEM_AREA                  point to PRGSTEM area
   ST    R1,MY_P_1                     save as first parm
   LA    R1,MY_PARM                    point to parameter list
   L     R15,=V(PROCSTEM)              get program address
   BASR  R14,R15                       go and set stem value
   IF (LTR,R15,R15,NZ)                 error ?
     ST    R15,R_C                     set return code
     PRGQUIT                           QUIT
   ENDIF
*
 SEGE CALL_PROCSTEM
*______________________________________________________________________
*
 SEGS NOT_VALID
*
   IF (CLI,ERR_NO,EQ,1)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 not entered'
   ELSEIF (CLI,ERR_NO,EQ,2)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 was not 6'
   ELSEIF (CLI,ERR_NO,EQ,3)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 not entered'
   ELSEIF (CLI,ERR_NO,EQ,4)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 was zero length'
   ELSEIF (CLI,ERR_NO,EQ,5)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 was > 20'
   ELSE
     MVC   EVALBLOCK_EVDATA(30),=CL30'Unknown error, rc='
     XR    R1,R1
     IC    R1,ERR_NO
     CVD   R1,DOUB_WORD
     OI    DOUB_WORD+7,X'0F'
     UNPK  EVALBLOCK_EVDATA+18(4),DOUB_WORD
     XC    R_C,R_C
   ENDIF
   MVC   EVALBLOCK_EVLEN,=F'30'
*
   PRGQUIT
*
 SEGE NOT_VALID
*______________________________________________________________________
*
               PRGSTAT
*
DEVNCHAR       DC    CL4' '
*
L#VOL          DS    CL6
U#COPY         DS    XL48
U#WORK         DS    XL100
U#EXPMSG       DS    XL40
U#F4DSCB       DS    XL96
*
FREE_TRKS      DC    PL3'0'
VOLUME_FREE    DC    PL8'0'
VOLUME_TRACKS  DC    PL8'0'
TOTAL_FREE     DC    PL8'0'
TOTAL_TRACKS   DC    PL8'0'
NUM_VOLS       DC    PL4'0'
*
ED_PL4         DC    X'40206B2020206B20212060'
ED_PL6         DC    X'4020206B2020206B2020206B20212060'
ED_PL6D2       DC    X'402020206B2020206B2021204B202060'
*______________________________________________________________________
*
SSOB_PTR DS    A(SSOB+X'80000000')
SSOB_WRK DS    XL(SSOBHSIZ)            SSOB
SSSA_WRK DS    XL(SSSALN+SSSA1LN+L'SSSA1NMS)
*______________________________________________________________________
*
         LTORG
*______________________________________________________________________
*
VOL_DETS DSECT
         IECSDSL1 (4)                  GEN FMT 4 DSCB LABELS
UCB_DETS DSECT
         IEFUCBOB
VOLUMESR CSECT
         CVT   DSECT=YES               CVT
         IEFJESCT                      JES CVT
         IEFJSSOB ,                    SSOB HEADER DSECT
         IEFSSSA                       SSOB EXTENSION FOR SMS
*        IGDVLD                        VOLUME DEFINITION
         IGDSGD                        STORAGE GROUP DEFINITION
*______________________________________________________________________
*
         PRGESTAT
         PRGEND
         END
