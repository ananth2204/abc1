 TITLE 'GETDSNAM - REXX function to get DSNAME(S) for DDNAME'
 PRINT GEN
*
GETDSNAM PRGDEF FSEG=MAIN_BIT,RMODE=24,REXX=Y
*______________________________________________________________________
*
* This program acts as a REXX function
*
*    INPUT
*         DDNAME to look for
*         Name of a STEM variable
*
*    OUTPUT
*         IF   successfull
*              RC=0
*              STEM variable contains DSNAMES on the DDNAME
*         ELSE
*              RC=Error message
*         ENDIF
*______________________________________________________________________
*
* EXAMPLE USAGE
*
* /*REXX*/
*   "ISPEXEC LIBDEF ISPLLIB DATASET ID ('MY.LOAD.LIBRARY')"
*   MY_DDN  = "ISPSLIB"
*   MY_STEM = "WANG"
*
*   DROP WANG.
*
*   RE_SPONSE = GETDSNAM(MY_DDN,MY_STEM)
*   IF  RE_SPONSE = 0 THEN DO
*      DO LO_OP_R = 1 TO WANG.0
*         SAY  WANG.LO_OP_R
*      END
*   END
*   DROP WANG.
*   "ISPEXEC LIBDEF ISPLLIB "
*   EXIT
*______________________________________________________________________
*
*                        PARAMETERS
*______________________________________________________________________
*
*
*  PARAMETER 1    -    DDNAME
*  PARAMETER 2    -    STEM VARIABLE NAME
*
*______________________________________________________________________
*
*  REENTRANT STORAGE
*
USE_DDNAME           DS    CL8
*
                     PRGSTEM
*
ATIOT                DS    F
THE_VALUE            DS    CL54
                     ORG   THE_VALUE
THE_DSNAME           DS    CL44
OPEN_PARENTHESES     DS    CL1
THE_MEMNAME          DS    CL8
CLOSE_PARENTHESES    DS    CL1
                     ORG
*
ERR_NO               DS    CL1
*
        PRGEDEF
*______________________________________________________________________
*
 SEGS MAIN_BIT
*
   USING ARA,R4
   USING IHADCB,TESTDCB
*
   MVI   THE_VALUE,C' '
   MVC   THE_VALUE+1(L'THE_VALUE-1),THE_VALUE
*
   SEGDO GET_ARGUMENTS
*
   SEGDO CHECK_FOR_DDNAME
*
   SEGDO GET_DSNAME
*
   MVI   EVALBLOCK_EVDATA,C' '
   MVC   EVALBLOCK_EVDATA+1(80),EVALBLOCK_EVDATA
   MVI   EVALBLOCK_EVDATA,C'0'
   LA    R1,1
   ST    R1,EVALBLOCK_EVLEN
*
 SEGE MAIN_BIT
*______________________________________________________________________
*
 SEGS GET_ARGUMENTS
*
   MVC   USE_DDNAME,SPACES
*
   IF (CLC,ARGTABLE_ARGSTRING_PTR,EQ,=8X'FF')
     MVI   ERR_NO,1
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'0')
     MVI   ERR_NO,2
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,GT,=F'8')
     MVI   ERR_NO,3
     SEGDO NOT_VALID
   ENDIF
   L     R15,ARGTABLE_ARGSTRING_PTR
   L     R14,ARGTABLE_ARGSTRING_LENGTH
   BCTR  R14,0
   LA    R1,USE_DDNAME
   EX    R14,COPY_ARGUMENT
   OC    USE_DDNAME,SPACES             ensure uppercase
*
   LA    ARG_POINT,ARGTABLE_NEXT       check for second argument
   IF (CLC,ARGTABLE_ARGSTRING_PTR,EQ,=8X'FF')
     MVI   ERR_NO,4
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,EQ,=F'0')
     MVI   ERR_NO,5
     SEGDO NOT_VALID
   ELSEIF (CLC,ARGTABLE_ARGSTRING_LENGTH,GT,=F'8')
     MVI   ERR_NO,6
     SEGDO NOT_VALID
   ENDIF
   MVC   STEM_NAME_ADR,ARGTABLE_ARGSTRING_PTR
   MVC   STEM_NAME_LEN,ARGTABLE_ARGSTRING_LENGTH
*
   LA    ARG_POINT,ARGTABLE_NEXT       check for third argument
   IF (CLC,ARGTABLE_ARGSTRING_PTR,NE,=8X'FF')
     MVI   ERR_NO,7
     SEGDO NOT_VALID
   ENDIF
*
   MVI   STEM_TRIM_VAR,C'Y'            say trim all spaces from var
   MVHHI STEM_FUNCTION,1               init STEM.0
   SEGDO CALL_PROCSTEM
*
 SEGE GET_ARGUMENTS
*______________________________________________________________________
*
 SEGS CHECK_FOR_DDNAME
*
   SEGDO GET_TIOT_ADDRESS
*
   L     R2,ATIOT
   USING TIOT1,R2
*
   LA    R4,TIOENTRY
   DROP  R2
   USING TIOENTRYD,R4
   XR    R2,R2                         length register
   DO INF
     ICM   R2,1,TIOELNGH               get entry length
   DOEXIT (LTR,R2,R2,Z)                zero length, DDNAME not found
   DOEXIT (CLC,TIOEDDNM,EQ,USE_DDNAME)
     AR   R4,R2                        next entry
   ENDDO
*
   IF (LTR,R2,R2,Z)                    could not find DDNAME
     MVI   ERR_NO,8
     SEGDO NOT_VALID
   ENDIF
*
 SEGE CHECK_FOR_DDNAME
*______________________________________________________________________
*
 SEGS GET_DSNAME
*
   LA    R8,TESTDCB                    point to test DCB
   MVC   DCBDDNAM,USE_DDNAME           copy DDNAME
   OI    ARLOPT1,ARLUSS                get USS path name
   RDJFCB  ((R8))                      get list of allocated files
   IF (LTR,R15,R15,NZ)
     MVI   ERR_NO,9
     SEGDO NOT_VALID
   ENDIF
*  if there is only 1 dataset allocated then the details are in
*  INFMJFCB otherwise all the details are placed in a getmained
*  area of storage and the code needs to look at them in turn
   L     R4,ARLAREA
   USING ARA,R4
   LH    R5,ARLRTRVD
   IF (LTR,R5,R5,NZ)                   anything here
     DO FROM=(R5)
       MVC   INFMJFCB(JFCBLGTH),ARAJFCB  copy next dataset details
       SEGDO PROC_DATASET_DETS
       AH    R4,ARALEN                 point to next
     ENDDO
*    having processed all the datasets free the storage
     L     R2,ARLAREA
     XR    R5,R5
     ICM   R5,B'0111',ARLRLEN
     XR    R15,R15
     IC    R15,ARLPOOL
     FREEMAIN RU,LV=(R5),A=(R2),SP=(R15)
   ELSE
     SEGDO PROC_DATASET_DETS
   ENDIF
*
   MVHHI STEM_FUNCTION,3               set STEM.0 to total lines
   SEGDO CALL_PROCSTEM
*
 SEGE GET_DSNAME
*______________________________________________________________________
*
 SEGS PROC_DATASET_DETS
*
   IF (CLC,=C'...PATH=.SPECIFIED...',EQ,JFCBDSNM)
     IF (TM,ARAFLG,ARAXINF,NZ)         is the extended info there ?
       XR    R3,R3
       IC    R3,ARAXINOF               get length in double words
       SLL   R3,3                      multiply by 8
       AR    R3,R4                     point to extended info
       IF (CLC,2(2,R3),NE,=H'0')       is pathname there
         AH    R3,2(,R3)               offset to pathname
         LH    R1,0(R3)                get length of pathname
         ST    R1,STEM_TEXT_LEN        and put in STEM length
         LA    R1,2(,R3)               address of pathname
         ST    R1,STEM_TEXT_ADR        and put in STEM address
         MVHHI STEM_FUNCTION,2         set STEM value
         SEGDO CALL_PROCSTEM
       ENDIF
     ENDIF
   ELSE
     MVC   THE_DSNAME,JFCBDSNM         copy dataset name
     MVC   THE_MEMNAME,JFCBELNM        and member name (if there)
     IF (CLC,THE_MEMNAME,GT,SPACES)    if member name present
       MVI   OPEN_PARENTHESES,C'('     put in the brackets
       MVI   CLOSE_PARENTHESES,C')'
     ELSE
       MVI   OPEN_PARENTHESES,C' '     remove the brackets
       MVI   CLOSE_PARENTHESES,C' '
     ENDIF
     LA    R1,THE_VALUE
     ST    R1,STEM_TEXT_ADR
     LA    R1,L'THE_VALUE
     ST    R1,STEM_TEXT_LEN
     MVHHI STEM_FUNCTION,2             set STEM value
     SEGDO CALL_PROCSTEM
   ENDIF
*
 SEGE PROC_DATASET_DETS
*______________________________________________________________________
*
 SEGS CALL_PROCSTEM
*
   LA    R1,STEM_AREA                  point to PRGSTEM area
   ST    R1,MY_P_1                     save as first parm
   LA    R1,MY_PARM                    point to parameter list
   L     R15,=V(PROCSTEM)              get program address
   BASR  R14,R15                       go and set stem value
   IF (LTR,R15,R15,NZ)                 error ?
     ST    R15,R_C                     set return code
     PRGQUIT                           QUIT
   ENDIF
*
 SEGE CALL_PROCSTEM
*______________________________________________________________________
*
 SEGS NOT_VALID
*
   IF (CLI,ERR_NO,EQ,1)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 not entered'
   ELSEIF (CLI,ERR_NO,EQ,2)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 was zero length'
   ELSEIF (CLI,ERR_NO,EQ,3)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 1 > 8 bytes'
   ELSEIF (CLI,ERR_NO,EQ,4)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 not entered'
   ELSEIF (CLI,ERR_NO,EQ,5)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 was zero length'
   ELSEIF (CLI,ERR_NO,EQ,6)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Argument 2 > 8 bytes'
   ELSEIF (CLI,ERR_NO,EQ,7)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Third argument supplied'
   ELSEIF (CLI,ERR_NO,EQ,8)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Could not find DDNAME'
   ELSEIF (CLI,ERR_NO,EQ,9)
     MVC   EVALBLOCK_EVDATA(30),=CL30'Error in RDJFCB'
   ELSE
     MVC   EVALBLOCK_EVDATA(30),=CL30'Unknown error, rc='
     XR    R1,R1
     IC    R1,ERR_NO
     CVD   R1,DOUB_WORD
     OI    DOUB_WORD+7,X'0F'
     UNPK  EVALBLOCK_EVDATA+18(4),DOUB_WORD
     XC    R_C,R_C
   ENDIF
   MVC   EVALBLOCK_EVLEN,=F'30'
*
   PRGQUIT
*
 SEGE NOT_VALID
*______________________________________________________________________
*
 SEGS GET_TIOT_ADDRESS
*
   L      R1,CVTPTR                    get CVT address
   L      R1,CVTASVT-CVT(R1)           get ASVT table @
   LA     R1,ASVTENTY-ASVT(R1)         get @ of ASCB entry table
*
   XR     R2,R2                        clear R2 prior to access
   EPAR   R2                           go get ASID
   BCTR   R2,0                         subtract  1
   MH     R2,=H'4'                     multiply by  4
   L      R1,0(R2,R1)                  get @ from offset in table
   L      R1,ASCBASXB-ASCB(R1)         get address space extension
   TM     ASCBCS1-ASCB(R1),ASCBXMPA
   L      R1,ASXBITCB-ASXB(R1)         get TCB
   L      R1,TCBTIO-TCB(R1)            get TIOT
   ST     R1,ATIOT                     save address
*
 SEGE GET_TIOT_ADDRESS
*______________________________________________________________________
*
 SEGS WRITE_LOG
*
   WTOX
*
 SEGE WRITE_LOG
*______________________________________________________________________
*
           PRGSTAT
*
COPY_ARGUMENT  MVC   0(1,R1),0(R15)
DO_MOVE        MVC   0(1,R3),0(R1)
*
SPACES     DC    80CL1' '
*
           LTORG
*______________________________________________________________________
*
TESTDCB    DCB   DDNAME=XXXXXXXX,MACRF=(GL),DSORG=PS,EXLST=LIST1
LIST1      DS    0F
           DC    X'13',AL3(MY_JFCB_13)
           DC    X'87',AL3(MY_JFCB_07)
*______________________________________________________________________
*
MY_JFCB_07     DS    0F
               PUSH  PRINT,NOPRINT
               PRINT GEN
               IEFJFCBN
               POP   PRINT,NOPRINT
LEN_MY_JFCB_07 EQU   *-MY_JFCB_07
*______________________________________________________________________
*
         PUSH  PRINT,NOPRINT
         PRINT GEN
         DCBD  DSORG=QS,DEVD=DA
         POP   PRINT,NOPRINT
         JRGTIOT
*
GETDSNAM CSECT
*
           PUSH  PRINT,NOPRINT
           PRINT GEN
MY_JFCB_13 IHAARL DSECT=NO
           IHAARA
           POP   PRINT,NOPRINT
*
GETDSNAM CSECT
*______________________________________________________________________
*
         CVT   DSECT=YES,LIST=NO
         IHAASCB LIST=NO
         IHAASXB LIST=NO
         IHAASVT LIST=NO
         IKJTCB  LIST=NO
*______________________________________________________________________
*
         PRGESTAT
         PRGEND
         END
