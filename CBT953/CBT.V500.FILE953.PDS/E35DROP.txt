 TITLE 'E35DROP - E35 SORT EXIT TO DROP DUPLICATES'
*______________________________________________________________________
*
*    THIS IS AN E35 EXIT FOR THE SORT. IT GETS CONTROL JUST BEFORE
*    THE OUTPUT RECORD IS WRITTEN TO THE SORTOUT DATASET I.E. AFTER
*    ANY CHANGES TO THE RECORD HAVE BEEN DONE.
*    N.B. AFTER OUTREC FIELDS=
*
*    IT CAN BE USED AS AN E15 EXIT AS WELL, IN WHICH CASE IT SEES
*    THE RECORD BEFORE THE INREC DOES, I.E. AS ON DISK (OR TAPE)
*
*    ITS PURPOSE IS TO FILTER OUTPUT RECORDS BY SPECIFYING A POSITION
*    AND LENGTH IN THE E35DROP DATASET, IF THE DATA IN THE RECORD
*    AT THE GIVEN POSITION AND LENGTH IS THE SAME AS THE PREVIOUS
*    RECORD OUTPUT THEN THIS RECORD IS DROPPED.
*    USED WHEN SORTING DATA WHICH INCLUDES A DATE/TIME AND YOU ONLY
*    WANT THE MOST RECENT RECORD.
*
*    EXAMPLE OF HOW TO USE THIS.
*
*    //SYSIN    DD  *
*       INREC   FIELDS=(1,10,                  *A KEY
*                       100,20)                *CHANGABLE DATA
*                       273,26)                *A TIMESTAMP
*       SORT    FIELDS=(1,10,BI,A              *SORT ON SOME DATA ASC
*                       31,26,BI,D)            *AND TIMESTAMP DESC
*       MODS    E35=(E35DROP,2000,,N)          *PROGRAM AND WORK AREA
*       END
*
*    //E35DROP  DD  *
*    00001,030                POSITION IS AS FOR SORT I.E. WITH RDW
*                             USE ALL DIGITS IN POSITION AND LENGTH
*
*    AT THE END OF THE RUN THE OUTPUT WOULD CONTAIN THE LATEST DATA
*    FOR A GIVEN KEY + CHANGABLE DATA
*
E35DROP  START
         YREGS
         USING *,R12
E35DROP  AMODE 31
E35DROP  RMODE 24
         STM   14,12,12(R13)
         LR    R12,R15                   SET BASE REGISTER
         LA    R2,SAV_AREA
         ST    R13,4(R2)                 CHAIN SAVE AREAS
         ST    R2,8(R13)
         LR    R13,R2
         B     AFT_SAVE
SAV_AREA DS    18F
AFT_SAVE DS    0H
*
         LR    R3,R1                     COPY INPUT PARM LIST
         CLI   FIRST_TIME,C'Y'           FIRST TIME IN
         BE    IS_FIRST
*
AFT_INIT DS    0H
*
         L     R4,0(,R3)                 GET RECORD ADDRESS
         LTR   R4,R4                     IS THERE ONE
         BZ    NO_REC                    NO
         LR    R8,R4                     COPY RECORD ADDRESS
         AH    R8,DISP_LACE              MOVE ALONG RECORD
TEST_IT  CLC   0(1,R8),SAVE_RECORD
         BE    MATCHED
SAVE_IT  MVC   SAVE_RECORD,0(R8)         COPY THIS RECORD
         L     R1,4(R13)                 POINT TO CALLERS SAVE AREA
         ST    R4,24(R1)                 STORE RECORD ADDRESS
         LA    R15,0                     SET RETURN CODE
         B     GOBACK
*
MATCHED  LA    R15,4                     SET RETURN CODE
         B     GOBACK
NO_REC   LA    R15,8                     RC=8 DON'T CALL AGAIN
*
GOBACK   DS    0H                        R15 SHOULD CONTAIN RETURN CODE
         L     R13,4(R13)                POINT TO CALLERS SAVE AREA
         ST    R15,16(R13)               PUT IN CALLERS SAVE AREA
         LM    R14,R12,12(R13)           RESTORE REGISTERS AND RC
         BSM   0,R14                     RETURN TO CALLER
*______________________________________________________________________
*
*        THIS READS FROM DDNAME=E35DROP
*
IS_FIRST DS    0H
*
         MVI   FIRST_TIME,C'N'                 SHOW NOT FIRST TIME
*
         OPEN  (E35DROPF,INPUT)
         LTR   R15,R15
         BZ    OPEN_OK
         LA    R15,16
         B     GOBACK
*
OPEN_OK  DS    0H
*
         GET   E35DROPF
         MVC   PARM_CARD,0(R1)                 COPY INPUT RECORD
         CLOSE E35DROPF
         TRT   PARM_CARD(5),NUM_TAB
         BNZ   INVALID_PARAMETER
         CLI   PARM_CARD+5,C','
         BNE   INVALID_PARAMETER
         TRT   PARM_CARD+6(3),NUM_TAB
         BNZ   INVALID_PARAMETER
         PACK  DOUB_WORD,PARM_CARD(5)
         CVB   R1,DOUB_WORD
         BCTR  R1,0
         STH   R1,DISP_LACE
         PACK  DOUB_WORD,PARM_CARD+6(3)
         CVB   R1,DOUB_WORD
         CHI   R1,256
         BH    INVALID_PARAMETER
         BCTR  R1,0
         STH   R1,LEN_GTH
         MVC   TEST_IT+1(1),LEN_GTH+1          MODIFY TEST
         MVC   SAVE_IT+1(1),LEN_GTH+1          MODIFY SAVE
         B     AFT_INIT
*______________________________________________________________________
*
INVALID_PARAMETER  DS    0H
*
         MVC   MESS_TXT(L'INV_PARM_1),INV_PARM_1
         BAL   R8,WRITE_LOG
         MVC   MESS_TXT(72),PARM_CARD
         BAL   R8,WRITE_LOG
         MVC   MESS_TXT(L'INV_PARM_2),INV_PARM_2
         BAL   R8,WRITE_LOG
         MVC   MESS_TXT(L'INV_PARM_3),INV_PARM_3
         BAL   R8,WRITE_LOG
         MVC   MESS_TXT(L'INV_PARM_4),INV_PARM_4
         BAL   R8,WRITE_LOG
         LA    R15,16
         B     GOBACK
*______________________________________________________________________
*
WRITE_LOG  DS    0H
*
         LA    R2,MESS_LEN
         WTO   TEXT=(R2),ROUTCDE=11,MCSFLAG=HRDCPY
         MVI   MESS_TXT,C' '
         MVC   MESS_TXT+1(L'MESS_TXT-1),MESS_TXT
         BR    R8
*______________________________________________________________________
*
LEN_GTH        DC    H'0'
DISP_LACE      DC    H'0'
MESS_LEN       DC    H'80'
MESS_TXT       DC    CL80'  '
FIRST_TIME     DC    C'Y'
*
INV_PARM_1     DC    C'E35DROP - INVALID PARAMETER SPECIFIED'
INV_PARM_2     DC    C'00009,003         WOULD BE VALID'
INV_PARM_3     DC    C'POSITION AND LENGTH IN RECORD'
INV_PARM_4     DC    C'LENGTH SPECIFIED MUST NOT EXCEED 256'
*
END_E35DROP    DS    0H
               LA    R15,16
               B     GOBACK
*
DOUB_WORD      DS    D
PARM_CARD      DS    CL72
SAVE_RECORD    DS    CL256               SAVE IMPORTANT PART OF RECORD
*
E35DROPF DCB   DSORG=PS,MACRF=(GL),DDNAME=E35DROP,EODAD=END_E35DROP
*
         LTORG
*
NUM_TAB  DC    256X'FF'
         ORG   NUM_TAB+C'0'
         DC    10X'00'
         ORG
*
         END
