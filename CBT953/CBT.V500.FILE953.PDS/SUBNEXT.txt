/*REXX*/
/*                                                                 */
/*  The purpose of this is to create a VERY basic schedule system  */
/*  so that putting a list of JCL members in a 'schedule' and      */
/*  then executing it using this EXEC, will cause the list of      */
/*  jobs to be copied into a stem variable. This stem is examined  */
/*  and any lines that do NOT begin with '*' are copied to a       */
/*  second stem and this is used to build the jobs.                */
/*                                                                 */
/*  The first job is then read into another stem and an extra      */
/*  step added which will cause the next job to be submitted       */
/*  if the first job ends with RC=0.                               */
/*                                                                 */
/*  In this example an additional step is also added to output     */
/*  job statistics. This is done by the PROC FLOWER.               */
/*  The job is then submitted.                                     */
/*                                                                 */
/*  If the job is successful then the extra step will submit       */
/*  the next job in the schedule.                                  */
/*                                                                 */
/*  This is repeated until the full schedule has completed.        */
/*                                                                 */
/*  If a job fails then correct the error and re-submit, the       */
/*  schedule will then continue.                                   */
/*  ##                                                             */
/*  Re-submit from the output queue using SJ command !!            */
/*  ##                                                             */
/*                                                                 */
/*  Run it like this                                               */
/*      TSO EXEC 'MY.EXEC(SUBNEXT)' 'TEST.JCL(#SCHD01)'            */
/*                                                                 */
/*  e.g. TEST.JCL(#SCHD01) contains                                */
/*            TEST.JCL(MEMB06)                                     */
/*            TEST.JCL(MEMB02)                                     */
/*            TEST.JCL(MEMB01)                                     */
/*        *   TEST.JCL(MEMB03)      not executed                   */
/*            TEST.JCL(MEMB05)                                     */
/*            TEST.JCL(MEMB04)                                     */
/*                                                                 */

  ARG  sched_name
  if sched_name = '' then pull sched_name
  sched_name = strip(sched_name)

  say  'input schedule is' sched_name

  /* check the current setting of PROFILE PREFIX                   */
  /* if a prefix exists then save it and switch to NOPREFIX        */
  pro_file = ''
  X = OUTTRAP('ML.')
  "PROFILE"
  X = OUTTRAP('OFF')
  DO I = 1 TO ML.0
     pro_file = pro_file || ML.I
  END
  pro_pos = POS('PREFIX(',pro_file)
  if pro_pos > 0 then do
     pre_fix = substr(pro_file,pro_pos+7)
     pro_pos = POS(')',pre_fix)
     pre_fix = substr(pre_fix,1,pro_pos-1)
     "PROFILE NOPREFIX"
     say 'profile changed'
  end

  /* read the schedule into a stem variable                        */
  "ALLOC FILE(INFILE) DSN("sched_name") SHR"
  al_o = rc
  if al_o /= 0 then do
     say 'allocation INFILE to' sched_name
     say 'failed rc = ' al_o
     exit 12
  end
  "EXECIO * DISKR INFILE (STEM SCHED. FINIS"
  "FREE  FILE(INFILE)"

  /* examine each line in the schedule and copy the first word of  */
  /* those that do NOT start with an asterix.                      */
  cou_nt = 0
  DO I = 1 TO SCHED.0
     test_comment = word(SCHED.I,1)
     if substr(test_comment,1,1) \= '*' then do
        cou_nt = cou_nt + 1
        sched2.cou_nt = test_comment
     end
  END
  sched2.0 =  cou_nt

  first_job = sched2.1                     /* copy first jobname   */
  say  'first job is     ' first_job

  /* read the first job into a stem variable                       */
  "ALLOC FILE(INFILE) DSN("first_job") SHR"
  al_o = rc
  if al_o /= 0 then do
     say 'allocation INFILE to' first_job
     say 'failed rc = ' al_o
     exit 12
  end
  "EXECIO * DISKR INFILE (STEM THEJOB. FINIS"
  "FREE  FILE(INFILE)"

  /* QUEUE each line of JCL until no more in stem                  */
  /* quit if a line contains just '//' in columns 1 and 2 as this  */
  /* is treated as end of file by SUBMIT.                          */
  DO I = 1 TO THEJOB.0
     test_end = strip(thejob.i)
     if length(test_end) = 2 then
        if test_end = "//" then leave
     QUEUE thejob.i
  END

  /* if there are more jobs in the schedule then include an        */
  /* additional step which will submit the subsequent jobs         */
  if sched2.0 > 1 then do
     Queue "//****************************                   "
     Queue "//CHECKRC EXEC PGM=IKJEFT01,DYNAMNBR=20,COND=(0,NE)   "
     Queue "//SYSTSIN  DD  *                                 "
     Queue "  PROFILE NOPREFIX                               "
     Queue "  EXEC 'MY.EXEC(SUBNEXT1)'                       "
     DO I = 2 TO SCHED2.0         /* output rest of schedule       */
        th_is = strip(sched2.i)
        Queue "   " th_is   "                                "
     END
     Queue "//SYSTSPRT DD  SYSOUT=*                          "
  end

  /* finally add a step to output job statistics                   */
  Queue "//****************************                      "
  Queue "//STATS   EXEC FLOWER                               "
  Queue "ZZ"
  "SUBMIT * END(ZZ)"

  /* if a prefix existed before then put it back                   */
  if pro_pos > 0 then do
     "PROFILE PREFIX("pre_fix")"
     say 'profile reset'
  end

  EXIT
