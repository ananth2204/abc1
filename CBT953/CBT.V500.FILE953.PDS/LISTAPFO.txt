 TITLE 'LISTAPF - List all APF datasets'
 PRINT GEN
*______________________________________________________________________
*
*  Written by John Gateley in February 2017.
*  March 2017 John Gateley output volume information as well.
*
*    D I S C L A I M E R
*    -------------------
*
*  This program is FREEWARE. Use at your own risk.  Neither John
*  Gateley, nor other contributing organizations or individuals
*  accept any liability of any kind howsoever arising out of the use
*  of this program. You are free to use and modify this program as
*  you desire, however, the author does ask that you leave his name
*  in the source and give credit to him as the original programmer.
*______________________________________________________________________
*
*  This program uses some code from Mark Zelden's IPLINFO rexx exec
*  to access undocumented control blocks.
*
*      http://mzelden.com/mvsutil.html
*
*  Mark's warning is reproduced below and it is now tested on 2.2.
*
*  NOTE: The dynamic APF and dynamic LNKLST code in this exec
*        use undocumented IBM control blocks and may break at
*        any time!
*      ... tested on MVS ESA V4.3 up through z/OS 2.1.
*______________________________________________________________________
*
*  This program gets a list of dynamic APF authorised libraries and
*  outputs them to SYSOUT.
*
*  It then gets all the dataset names concatenated to STEPLIB and
*  checks if they are in the APF authorised list, if not it lists them.
*
*  Finally it does the same for JOBLIB.
*
LISTAPF PRGDEF FSEG=MAIN_BIT,RMODE=24,RENT=Y
*
* RENT=Y means the storage up to PRGEDEF is dynamically allocated at
* run time but program is not re-entrant due to SYSOUT DCB.
*
               DS    0D
DSN_COUNT      DS    PL8
USE_LIB        DS    CL8
*
KEEP_ARLAREA   DC    F'0'
KEEP_ARLRLEN   DC    F'0'
KEEP_ARLPOOL   DC    H'0'
KEEP_ARLRTRVD  DC    H'0'
THIS_ARL_REQ   DC    H'0'
*
TEST_IT        DS    CL50
*
               LCLA  &MAX_APF
&MAX_APF       SETA  2000              should be enough names
ALL_APF        DS    (&MAX_APF)CL50    allow for MAX_APF datasets
LEN_APF        EQU   50                set length of slot
*
         PRGEDEF
*______________________________________________________________________
*
 SEGS MAIN_BIT
*
   SEGDO OPEN_SYSOUT                   open output file
*
   SEGDO BUILD_APF_LIST
*
   IF (CP,DSN_COUNT,GT,=P'&MAX_APF')
     MVC   MESS_TXT(L'ERR_MESS_1),ERR_MESS_1
     SEGDO PUT_SYSOUT
     SETRC RC=4                        set return code to 4
   ELSE
     MVC   USE_LIB,=CL8'STEPLIB'       first try STEPLIB
     SEGDO CHECK_CONCAT
     MVC   USE_LIB,=CL8'JOBLIB'        then try JOBLIB
     SEGDO CHECK_CONCAT
   ENDIF
*
   SEGDO CLOSE_SYSOUT
*
 SEGE MAIN_BIT
*______________________________________________________________________
*
 SEGS BUILD_APF_LIST
*
   L     R1,16                         point to CVT
   L     R1,140(,R1)                   point to CVTECVT
   L     R1,228(,R1)                   point to CSV table
   L     R1,12(,R1)                    point to APFA
   L     R4,8(,R1)                     point to first name
   L     R5,12(,R1)                    point to last name
   LA    R6,ALL_APF                    point to my list
*
   MVC   MESS_TXT+17(L'APF_HEADING),APF_HEADING
   SEGDO PUT_SYSOUT                    output concatenation name
   MVI   MESS_TXT+17,C'-'
   MVC   MESS_TXT+18(L'APF_HEADING-1),MESS_TXT+17
   SEGDO PUT_SYSOUT                    underline it
*
   ZAP   DSN_COUNT,=P'0'               initialise
   DO INF
     IF (CLI,24(R4),NE,X'00')          if not deleted
       AP    DSN_COUNT,=P'1'           increment count
       MVC   MESS_TXT(L'ED_PAT),ED_PAT         set edit mask
       ED    MESS_TXT(L'ED_PAT),DSN_COUNT      edit name count
       MVC   MESS_TXT+L'ED_PAT+1(6),24+44(R4)  copy volume
       MVC   MESS_TXT+L'ED_PAT+8(44),24(R4)    copy dataset name
       SEGDO PUT_SYSOUT
       IF (CP,DSN_COUNT,LE,=P'&MAX_APF')       still space for name
         MVC   0(6,R6),24+44(R4)       copy volume name        list
         MVC   6(44,R6),24(R4)         copy dataset name
         LA    R6,LEN_APF(,R6)         point to next slot
       ENDIF
     ENDIF
   DOEXIT (CR,R4,EQ,R5)                exit when processed last
     L     R4,8(,R4)                   point to next name
   ENDDO
*
 SEGE BUILD_APF_LIST
*______________________________________________________________________
*
 SEGS CHECK_CONCAT
*
   LA    R8,TESTDCB                    point to TESTDCB
   USING IHADCB,R8                     map DCBD
   MVC   DCBDDNAM,USE_LIB              copy required DDNAME
   RDJFCB  ((R8))                      read details of DDNAME
   IF (LTR,R15,R15,NZ)                 not available
     SEGQUIT                           get out of segment
   ENDIF
*
   MVC   KEEP_ARLAREA,ARLAREA          save ARLA details
   MVC   KEEP_ARLRTRVD,ARLRTRVD
   XC    KEEP_ARLRLEN,KEEP_ARLRLEN
   MVC   KEEP_ARLRLEN+1(3),ARLRLEN
   XC    KEEP_ARLPOOL,KEEP_ARLPOOL
   MVC   KEEP_ARLPOOL+1(1),ARLPOOL
   MVC   THIS_ARL_REQ,=H'1'
*
   SEGDO PUT_SYSOUT                    output blank line
   MVC   MESS_TXT+8(8),USE_LIB
   MVC   MESS_TXT+16(L'CON_CAT),CON_CAT
   SEGDO PUT_SYSOUT                    output concatenation name
   MVI   MESS_TXT+8,C'-'
   MVC   MESS_TXT+9(L'CON_CAT+7),MESS_TXT+8
   SEGDO PUT_SYSOUT                    underline it
*
   DO INF
     MVC   TEST_IT(6),JFCBVOLS         copy first volume of DSN
     MVC   TEST_IT+6(L'JFCBDSNM),JFCBDSNM  and dataset name
     MVC   MESS_TXT(6),JFCBVOLS        output first volume of DSN
     MVC   MESS_TXT+8(L'JFCBDSNM),JFCBDSNM
     LA    R14,ALL_APF                 point to list of APF datasets
     CVB   R15,DSN_COUNT               get count
     DO FROM=(R15)
     DOEXIT (CLC,TEST_IT,EQ,0(R14))    matching volume+dataset name
       LA    R14,LEN_APF(,R14)         point to next
     ENDDO
     IF (LTR,R15,R15,Z)                not found in list
       MVC   MESS_TXT+10+L'JFCBDSNM(L'MISS_ING),MISS_ING
     ENDIF
     SEGDO PUT_SYSOUT                  output dataset name
   DOEXIT (CLC,KEEP_ARLRTRVD,LE,THIS_ARL_REQ)  exit at end of list
     SEGDO GET_NEXT_CONCATENATED_DETAILS
   ENDDO
*
   L     R2,KEEP_ARLAREA               release RDJFCB storage
   L     R3,KEEP_ARLRLEN
   LH    R15,KEEP_ARLPOOL
   FREEMAIN RU,LV=(R3),A=(R2),SP=(R15)
*
   DROP  R8
*
 SEGE CHECK_CONCAT
*______________________________________________________________________
*
 SEGS GET_NEXT_CONCATENATED_DETAILS
*
   L     R1,KEEP_ARLAREA               point to start
   IF (LTR,R1,R1,NZ)                   something there
     PUSH  USING
     USING ARA,R1
     IF (CLC,THIS_ARL_REQ,LT,KEEP_ARLRTRVD)  not at last dataset
       LH    R15,THIS_ARL_REQ                get dataset number
       MH    R15,ARALEN                      multiply by length
       LA    R1,0(R15,R1)                    point at details
       MVC   INFMJFCB(JFCBLGTH),ARAJFCB      and copy
       LH    R15,THIS_ARL_REQ                increment count
       LA    R15,1(,R15)
       STH   R15,THIS_ARL_REQ
     ENDIF
     POP   USING
   ENDIF
*
 SEGE GET_NEXT_CONCATENATED_DETAILS
*______________________________________________________________________
*
 SEGS WRITE_LOG
*
   WTOX
*
 SEGE WRITE_LOG
*______________________________________________________________________
*
 PRGDCBO DCB=SYSOUT,REC=MESS_TXT,CLEAR=Y
*______________________________________________________________________
*
               PRGSTAT
*
ED_PAT         DC    X'40202020202020202020202020202020'
APF_HEADING    DC    C'APF libraries'
CON_CAT        DC    C' concatenation'
MISS_ING       DC    C' not APF authorised'
ERR_MESS_0     DC    C'//SYSOUT DD SYSOUT=* is required in the JCL'
ERR_MESS_1     DC    C'More than &MAX_APF APF authorised libraries'
*
SYSOUT   DCB   DSORG=PS,DDNAME=SYSOUT,LRECL=80,MACRF=(PM),RECFM=FB
*
*        A DCB used to get list of concatanated datasets
TESTDCB  DCB   DDNAME=XXXXXXXX,MACRF=(GL),DSORG=PS,EXLST=LIST1
LIST1    DS    0F
         DC    X'13',AL3(MY_JFCB_13)
         DC    X'87',AL3(MY_JFCB_07)
*
               LTORG
*
               PUSH  PRINT,NOPRINT
               PRINT NOGEN
MY_JFCB_07     DS    0F
               IEFJFCBN
LEN_MY_JFCB_07 EQU   *-MY_JFCB_07
MY_JFCB_13     IHAARL DSECT=NO
               IHAARA
               DCBD  DSORG=QS,DEVD=DA
               POP   PRINT,NOPRINT
*
               PRGESTAT
               PRGEND
               END
