{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011719000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 1116934, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 12, "INMDSNAM": "CBT.V500.FILE310.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 1116934, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE310.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x13\\x07'", "DS1TRBAL": "b'O\\x8e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02+\\x00\\n\\x02,\\x00\\x0e\\x00\\x14'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"IHIERM": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\xd3\\x00\\xd3\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 211, "newlines": 211, "modlines": 0, "user": "O360-19"}, "text": "         TITLE 'IHIERMSG, OBJECT TIME ERROR MESSAGES'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*STATUS:  CHANGE LEVEL=000                                            *\n*                                                                     *\n*FUNCTION/OPERATION:  THIS CONTROL SECTION CONTAINS ALL THE MESSAGES  *\n*   USED BY THE ERROR ROUTINE.                                        *\n*                                                                     *\n*ENTRY POINTS:  N/A                                                   *\n*                                                                     *\n*OUTPUT:  N/A                                                         *\n*                                                                     *\n*EXTERNAL ROUTINES:  N/A                                              *\n*                                                                     *\n*EXITS:  N/A                                                          *\n*                                                                     *\n*TABLES/WORK AREAS:  THIS CONTROL SECTION IS MADE UP OF TABLES.       *\n*                                                                     *\n*ATTRIBUTES:  NOT REUSABLE.                                           *\n*                                                                     *\n*NOTES:  NONE.                                                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nIHIERMSG CSECT\n         ENTRY IHIERM01,IHIERM02,IHIERM03,IHIERM04,IHIERM05,IHIERM06\n         ENTRY IHIERM07\n         USING *,6\n         DC    A(MESS0)            MESSAGE NUMBER 0-43 MUST BE KEPT\n         DC    A(MESS1)                 TOGETHER\n         DC    A(MESS2)\n         DC    A(MESS3)\n         DC    A(MESS4)\n         DC    A(MESS5)\n         DC    A(MESS6)\n         DC    A(MESS7)\n         DC    A(MESS8)\n         DC    A(MESS9)\n         DC    A(MESS10)\n         DC    A(MESS11)\n         DC    A(MESS12)\n         DC    A(MESS13)\n         DC    A(MESS14)\n         DC    A(MESS15)\n         DC    A(MESS16)\n         DC    A(MESS17)\n         DC    A(MESS18)\n         DC    A(MESS19)\n         DC    A(MESS20)\n         DC    A(MESS21)\n         DC    A(MESS22)\n         DC    A(MESS23)\n         DC    A(MESS24)\n         DC    A(MESS25)\n         DC    A(MESS26)\n         DC    A(MESS27)\n         DC    A(MESS28)\n         DC    A(MESS29)\n         DC    A(MESS30)\n         DC    A(MESS31)\n         DC    A(MESS32)\n         DC    A(MESS33)\n         DC    A(MESS34)\n         DC    A(MESS35)\n         DC    A(MESS36)\n         DC    A(MESS37)\n         DC    A(MESS38)\n         DC    A(MESS39)\n         DC    A(MESS40)\n         DC    A(MESS41)\n         DC    A(MESS42)\n         DC    A(MESS43)\nIDENTERR DC    C'IHI0  I  SC=        '\n         DC    C'SYSUT2'\n         DC    C'SYSUT1'\nMESS0    DC    X'1C00'\n         DC    C'DATA SET NUMBER OUT OF RANGE'\nMESS1    DC    X'3B03'\n         DC    C'DSN=       REAL NUMBER TO BE CONVERTED OUT OF INTEGER X\n               RANGE'\nMESS2    DC    X'2B03'\n         DC    C'DSN=       INCOMPATIBLE ACTIONS ON DATA SET'\nMESS3    DC    X'2303'\n         DC    C'DSN=       INPUT BEYOND LAST OUTPUT'\nMESS4    DC    X'3700'\n         DC    C'TOO MANY REPOSITIONINGS IN DATA SETS. INTERNAL OVERFLOX\n               W'\nMESS5    DC    X'2F03'\n         DC    C'DSN=       INPUT REQUEST BEYOND END OF DATA SET'\nMESS6    DC    X'3E07'\n         DC    C'DSN=       EXPONENT PART OF INPUT NUMBER CONSISTS OF MX\n               ORE THAN'\n         DC    X'1600'\n         DC    C'TWO SIGNIFICANT DIGITS'\nMESS7    DC    X'4407'\n         DC    C'DSN=       **NO CONTROL CHARACTER SPECIFIED IN RECORD C\n               FORMAT OF DATA'\n         DC    X'2700'\n         DC    C'SET. SPLITTING INTO SECTIONS IMPOSSIBLE'\nMESS8    DC    X'3E03'\n         DC    C'DSN=       SOURCE IN PROCEDURE OUTSYMBOL DOES NOT MATCX\n               H STRING'\nMESS9    DC    X'3803'\n         DC    C'DSN=       UNDEFINED FUNCTION NUMBER IN SYSACT PROCEDUX\n               RE'\nMESS10   DC    X'1A03'\n         DC    C'DSN=       DATA SET CLOSED'\nMESS11   DC    X'1803'\n         DC    C'DSN=       DATA SET OPEN'\nMESS12   DC    X'3A03'\n         DC    C'DSN=       QUANTITY IN SYSACT PROCEDURE MUST BE A VARIX\n               ABLE'\nMESS13   DC    X'3403'\n         DC    C'DSN=       QUANTITY IN SYSACT PROCEDURE OUT OF RANGE'\nMESS14   DC    X'2D03'\n         DC    C'DSN=       BACKWARD REPOSITIONING NOT DEFINED'\nMESS15   DC    X'3600'\n         DC    C'UPPER BOUND LESS THAN LOWER BOUND IN ARRAY DECLARATIONX\n               '\nMESS16   DC    X'3800'\n         DC    C'VALUE OF SUBSCRIPT EXPRESSION NOT WITHIN DECLARED BOUNX\n               DS'\nMESS17   DC    X'1D00'\n         DC    C'ENDLESS LOOP IN FOR STATEMENT'\nMESS18   DC    X'2700'\n         DC    C'STORAGE REQUEST FOR ARRAY EXCEEDS LIMIT'\nMESS19   DC    X'3C00'\n         DC    C'UNEQUAL NUMBER OF DIMENSIONS FOR ACTUAL AND FORMAL PARC\n               AMETER'\nMESS20   DC    X'4300'\n         DC    C'ACTUAL AND CORRESPONDING FORMAL PARAMETER OF DIFFERENTX\n                TYPE OR KIND'\nMESS21   DC    X'4304'\n         DC    C'UNEQUAL NUMBER OF PARAMETERS IN PROCEDURE DECLARATION X\n               AND PROCEDURE'\n         DC    X'1D00'\n         DC    C'STATEMENT/FUNCTION DESIGNATOR'\nMESS22   DC    X'2B00'\n         DC    C'ASSIGNMENT TO FORMAL PARAMETER NOT POSSIBLE'\nMESS23   DC    X'1F00'\n         DC    C'ARGUMENT OF SQRT LESS THAN ZERO'\nMESS24   DC    X'2400'\n         DC    C'ARGUMENT OF EXP GREATER THAN 174.673'\nMESS25   DC    X'2400'\n         DC    C'ARGUMENT OF LN NOT GREATER THAN ZERO'\nMESS26   DC    X'3A00'\n         DC    C'ABS VALUE OF ARGUMENT OF SIN OR COS NOT LESS THAN PI*2X\n               **18'\nMESS27   DC    X'3A00'\n         DC    C'ABS VALUE OF ARGUMENT OF SIN OR COS NOT LESS THAN PI*2X\n               **50'\nMESS28   DC    X'3801'\n         DC    C'PSW=                      FIXED POINT OVERFLOW INTERRUX\n               PT'\nMESS29   DC    X'4401'\n         DC    C'PSW=                      FLOATING POINT EXPONENT OVERX\n               FLOW INTERRUPT'\nMESS30   DC    X'3701'\n         DC    C'PSW=                      DIVISION BY ZERO ,FIXED POINX\n               T'\nMESS31   DC    X'3A01'\n         DC    C'PSW=                      DIVISION BY ZERO ,FLOATING PX\n               OINT'\nMESS32   DC    X'2203'\n         DC    C'DSN=       UNRECOVERABLE I/O ERROR'\nMESS33   DC    X'2C01'\n         DC    C'PSW=                     PROGRAM INTERRUPT'\nMESS34   DC    X'3F00'\n         DC    C'VALUE OF SWITCH DESIGNATOR NOT DEFINED IN DECLARATION X\n               OF SWITCH'\nMESS35   DC    X'1A00'\n         DC    C'BASE NOT GREATER THAN ZERO'\nMESS36   DC    X'3804'\n         DC    C'TOO MANY NESTED BLOCKS AND CALLS OF PROCEDURES, SWITCHC\n               ES'\n         DC    X'2200'\n         DC    C'AND PARAMETERS. INTERNAL OVERFLOW.'\nMESS37   DC    X'3E03'\n         DC    C'DSN=       **BLOCKSIZE NOT A MULTIPLE OF LOGICAL RECORX\n               D LENGTH'\nMESS38   DC    X'1C03'\n         DC    C'DSN=       TOO LONG RECORD'\nMESS39   DC    X'2300'\n         DC    C'GET/PUT IDENTIFICATION OUT OF RANGE'\nMESS40   DC    X'3000'\n         DC    C'REAL NUMBER TO BE CONVERTED OUT OF INTEGER RANGE'\nMESS41   DC    X'2703'\n         DC    C'DSN=       DD CARD INCORRECT OR MISSING'\nMESS42   DC    X'1800'\n         DC    C'INVALID OPTION PARAMETER'\nMESS43   DC    X'2900'\n         DC    C'ILLEGAL CALL OF GET/PUT OR LIST PROCEDURE'\n         SPACE\nHEADLINE DC    C'MODULE =           PROGRAM BLOCK NUMBER =         (   C\n                            '\nBETHA    DC    C'BLOCK)          '      THESE THREE MESSAGES\nPI       DC    C'PROCEDURE)      '      MUST BE TOGETHER AND\nFI       DC    C'TYPE PROCEDURE) '      THEIR LENGTH MUST BE 16C\nRUBR1    DC    C'FORMAL PARAMETERS'\nRUBR2    DC    C'DECLARED IDENTIFIERS AND OBJECT TIME STACK'\nRUBR3    DC    C'SMF DISPLACEMENT IN DSA =                DECLARED ARRAC\n               Y'\nRUBR4    DC    C'SMF DISPLACEMENT IN DSA =                ARRAY CALLED C\n               BY VALUE'\nIHIERM01 EQU   IDENTERR\nIHIERM02 EQU   HEADLINE\nIHIERM03 EQU   BETHA\nIHIERM04 EQU   RUBR1\nIHIERM05 EQU   RUBR2\nIHIERM06 EQU   RUBR3\nIHIERM07 EQU   RUBR4\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIERR": {"ttr": 521, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x01\\xee\\x01\\xee\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 494, "newlines": 494, "modlines": 0, "user": "O360-19"}, "text": "         TITLE 'IHIERROR, OBJECT TIME ERROR ROUTINE'\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*STATUS:  CHANGE LEVEL=000                                            *\n*                                                                     *\n*FUNCTION/OPERATION:  IF AN ERROR OCCURS DURING EXECUTION OF AN ALGOL *\n*   PROGRAM THIS ROUTINE IS CALLED INTO MAIN STORAGE FROM LINKLIB. A\n*   MESSAGE IS GIVEN SPECIFYING THE ERROR. IF DUMP IS SPECIFIED THE   *\n*   ROUTINE EDITS AND PRINTS THE DATA STORAGE AREAS CONTAINING THE    *\n*   VALUES OF THE IDENTIFIERS.                                        *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHIERROR                                                     *\n*                                                                     *\n*OUTPUT:  ERROR MESSAGES AND ALGOL DUMPS ARE PRINTED ON THE PRINTER   *\n*   AS 90 CHARACTER RECORDS WITH CONTROL CHARACTER. IN SOME CASES A   *\n*    MESSAGE IS GIVEN ON THE CONSOLE TYPEWRITER.                      *\n*                                                                     *\n*EXTERNAL ROUTINES:                                                   *\n*        IHIIORCL            FOR CLOSING DATA SET NUMBER 1 (PRINTER)  *\n*        IHIIOROP            FOR OPENING DATA SET NUMBER 1            *\n*        FRDSA               ROUTINE IN IHIFSARA WHICH ISSUES FREEMAIN*\n*   FOR THE CURRENT DATA STORAGE AREAS.                               *\n*                                                                     *\n*EXIT-NORMAL:  TO TERMINATION ROUTINE IN IHIFSARA                     *\n*EXIT-ERROR:  N/A                                                     *\n*                                                                     *\n*TABLES/WORK AREAS:  THE CONTROL SECTION NAMED IHIGERMSG CONTAINS ALL *\n*   MESSAGES TO BE PRINTED.                                           *\n*                                                                     *\n*ATTRIBUTES:  NOT REUSABLE                                            *\n*                                                                     *\n*NOTES:  CHARACTER CODE DEPENDENSE. THE OUTPUT OF CORE STORAGE        *\n*   INFORMATION IN HEXADECIMAL FORM IS DEPENDENT UPON A               *\n*   TRANSLATION BY MEANS OF THE TABLE 'TABLE' DEFINED IN CHARACTERS.  *\n*   THE OUTPUT OF MESSAGES IS DEPENDENT UPON AN INTERNAL              *\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS             *\n*   EQUIVALENT TO THE ONE USED AT ASSAMBLY TIME.                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 2\nIHIERROR CSECT\n*0310011260,012200,012600                                          0050\n         SAVE  (14,12)\n         BALR  BASADD,0\n         USING *,BASADD\n         MVC   AFRDSA(20),0(1)          MOVE EXTERNAL ADDRESSES\n         LR    FSA,SAVE                 ADDRESS OF FIX STORAGE AREA\n         LA    SAVE,SAVEAR              ADDRES OF SAVE AREA TO REG 13\n         SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        TEST IF ERROR MESSAGE NUMBER IS 32 OR 41 FOR DATA SET 1      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         BCT   DSNR,B1\n         TM    DS+1(TAB),X'10'          DS1=0                      0050\n         BZ    B1                       YES                        0219\n         CLI   FSAERCOD(FSA),X'80'      TEST IF I/O ERROR (32)\n         BE    IOERR                    YES, EXECUTE WTO INSTRUCTION\n         CLI   FSAERCOD(FSA),X'A4'      TEST IF DD CARD... (41)\n         BNE   B1                       YES, EXECUTE WTO INSTRUCTION\n         WTO   'IHI041I SYSPRINT DD CARD INCORRECT OR MISSING',        *\n               ROUTCDE=11,DESC=7                                   0050\n         B     SETOPTSW\nIOERR    WTO   'IHI032I   SYSPRINT  UNRECOVERABLE I/O ERROR',          *\n               ROUTCDE=11,DESC=7                                   0050\nSETOPTSW OI    OPTSW(FSA),X'02'         SET SWITCH IN FSA\n         NI    DTSW(FSA),X'7F'          REMOVE DUMP SWITCH\n         B     SPDAFREE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        EDIT AND PRINT ERROR MESSAGE                                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\nB1       LA    BUFF,1(DSNR)             SAVE DSNR FOR EDITING IF NEEDED\n         L     TAB,ADSTAB(FSA)           GET ADDRESS OF DATA SET NO ONE\n         LA    TAB,40(TAB)              IN DSTAB\n         LA    DSNR,1\n         OI    DS+1(TAB),X'01'   FLAG CLOSE FROM IHIERR            0219\n         L     ENTRY,ACLOSE    CLOSE ALL DATA SETS                 0219\n         BALR  RETURN,ENTRY\nSETDS11  OI    DS+1(TAB),X'10'          DS11=1 TO INDICATE IHIERR-ROUT\n         OI    DS(TAB),X'32'            DS2=DS3=DS6=1\n         NI    DS(TAB),X'3F'            DS0=DS1=0\n         L     ENTRY,AOPEN              OPEN SYSPRINT\n         BALR  RETURN,ENTRY\n         MVI   BUFFER,C' '              PRINT ONE BLANK LINE TO PREVENT\n         MVC   BUFFER+1(89),BUFFER      OVERPRINTING\n         BAL   GOBACK,OUTPUT\n         SR    DISP,DISP\n         IC    DISP,FSAERCOD(FSA)       GET ADDRESS OF ERROR MESSAGE\n         L     AML,ADRTAB\n         L     AML,0(DISP,AML)\n         SPACE\n         SRL   DISP,2                   CONVERT MESSAGE NUMBER TO\n         CVD   DISP,WORKAR              DECIMAL FOR PRINTING\n         L     TEXT,IDENTERR\n         UNPK  4(2,TEXT),WORKAR(8)\n         MVZ   5(1,TEXT),4(TEXT)\n         SPACE\n         LH    DISP,SCRCS(FSA)          CONVERT SEMI-COLON COUNTER TO\n         CVD   DISP,WORKAR              DECIMAL FOR PRINTING\n         UNPK  12(5,TEXT),WORKAR(8)\n         MVZ   16(1,TEXT),15(TEXT)\n         SPACE\n         TM    1(AML),X'03'        EDIT ERROR MESSAGE IF\n         BC    14,NOT1617+8        SYSUT1 OR SYSUT2\n         STC   BUFF,DSN1617\n         CLI   DSN1617,X'10'\n         BNE   DSN17\n         L     DISP,IDENTERR\n         MVC   2(6,AML),20(DISP)        SYSUT2\n         B     PSWDSN\nDSN17    BL    NOT1617\n         L     DISP,IDENTERR\n         MVC   2(6,AML),26(DISP)        SYSUT1\n         B      PSWDSN\n         EJECT\nTAKEDSN  CVD   BUFF,WORKAR              CONVERT DATA SET NUMBER TO\n         UNPK  6(2,AML),WORKAR(8)       DECIMAL FOR PRINTING\n         MVZ   7(1,AML),6(AML)\n         B     PSWDSN\nTAKEPSW  UNPK  7(9,AML),PGOPSW(5,FSA)   UNPACK OLD PSW FOR PRINTING\n         MVI   15(AML),X'EF'\n         UNPK  16(9,AML),PGOPSW+4(5,FSA)\n         MVI   24(AML),X'EF'\n         TR    7(18,AML),TABLE-X'EF'\n         B     PSWDSN\nNOT1617  TM    1(AML),X'03'             EDIT ERROR MESSAGE WITH\n         BO    TAKEDSN                  VARIABLE INFORMATION\n         BM    TAKEPSW\n          SPACE\nPSWDSN   MVC   BUFFER(19),0(TEXT)       MOVE MESSAGE INTO BUFFER\n         SR    DISP,DISP\nLINE2    IC    DISP,0(AML)\n         BCTR  DISP,0\n         STC   DISP,MOVE+1              LENGTH OF MESSAGE INTO MOVE\nMOVE     MVC   BUFFER+19(0),2(AML)\n         TM    1(AML),X'04'             TEST IF END OF MESSAGE\n         BZ    ENDLINE\n         BAL   GOBACK,OUTPUT\n         LA    AML,3(DISP,AML)          ADDRESS OF NEXT LINE OF MESSAGE\n         B     LINE2\nENDLINE  OI    FLAG,X'04'\n         BAL   GOBACK,OUTPUT\n         MVI   SPACE,C'0'               SET SKIP CHARACTER\n         MVI   SCOUNT+3,X'01'           INSERT NEW STEPLENGTH FOR S\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        THIS PART GOES THROUGH THE RETURN ADDRESS STACK. IF A BLOCK  *\n*        OR PROCEDURE ENTRY IS FOUND THE DATA STORAGE AREAS ARE       *\n*        EDITED AND FSA IS CALLED FOR ISSUEING FREEMAIN               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nSPDAFREE L     INDEX,ASPDAP        FREEMAIN FOR SPDA AREAS\n         L     DISP,0(INDEX)\nMORESPDA LTR   INDEX,DISP\n         BZ    MORERAS\n         L     DISP,0(INDEX)\n         FREEMAIN R,LV=64,A=(INDEX)\n         B     MORESPDA\n          SPACE\nMORERAS  L     RAS,RASPT(FSA)           TEST IF MORE ENTRIES IN RAS\n         C     RAS,RASSTART(FSA)\n         BNH   ENDOFR\n         CLI   0(RAS),X'00'              PROCEDURE OR BLOCK ENTRY?\n         BE    PRENTRY\n          SPACE\n         TM    DTSW(FSA),X'80'          CHECK IF DUMP IS SPECIFIED\n         BZ    RELDSA\n         B     EDIT\n         SPACE\nPRENTRY  LA    DISP,8                   GET PRECEDING ENTRY IN RAS\n         SR    RAS,DISP\n         ST    RAS,RASPT(FSA)           NEW ADDRESS TO RASTP IN FSA\n         B     MORERAS+4\n         SPACE\nRELDSA   LR    SAVE,FSA            RELEASE CURRENT DATA STORAGE AREA\n         L     CDSA,0(RAS)\n         L     PBT,16(CDSA)\n         L     VFRDSA,AFRDSA\n         BALR  ENTRY,VFRDSA\n         LR    FSA,SAVE\n         LA    SAVE,SAVEAR\n         B     MORERAS\n         SPACE\nENDOFR   LR    SAVE,FSA\n         RETURN (14,12)                 TO TERMINATION ROUTINE IN FSA\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        THE FOLLOWING PART OF THE ERROR ROUTINE EDITS CURRENT       *\n*        DATA STORAGE AREAS IF DUMP IS SPECIFIED                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        BLOCK NUMBER AND TYPE OF BLOCK MOVED INTO TEXT               *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\nEDIT     L     CDSA,0(RAS)              POINTER TO CURRENT DSA\n         L     PBT,16(CDSA)             ADDRESS OF PBTAB\n         L     TEXT,HEADLINE            MOVE BLOCK HEADLINE\n         MVC   BUFFER(63),0(TEXT)       INTO BUFFER\n          SPACE\n         MVC   BUFFER+9(4),4(PBT)       NAME OF LOAD MODULE\n         SPACE\n         AH    PBT,8(CDSA)         INSERT TYPE OF BLOCK INTO HEADLINE\n         SR    DISP,DISP\n         IC    DISP,6(PBT)\n         SLL   DISP,2\n         L     AML,BETHA\n         AR    AML,DISP\n         MVC   BUFFER+51(16),0(AML)\n         SPACE\n         LH    DISP,8(CDSA)             CONVERT BLOCK NUMBER TO DECIMAL\n         SRL   DISP,3                   FOR PRINTING\n         CVD   DISP,WORKAR\n         UNPK  BUFFER+42(3),WORKAR(8)\n         MVZ   BUFFER+44(1),BUFFER+43\n         OI    FLAG,X'04'               SET SKIP FLAG\n         BAL   GOBACK,OUTPUT\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        EDIT THE FORMAL PARAMETERS IF PROCEDURE BLOCK                *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         SR    INDEX,INDEX\n         TM    6(PBT),X'FF'             TEST FOR FORMAL PARAMETERS\n         LA    START,24(CDSA)           FIRST BYTE TO BE EDITED\n         BZ    NOFPARAM\n         L     TEXT,RUBR1               GET HEADLINE FOR\n         MVC   BUFFER+9(17),0(TEXT)     HANDLING FORMAL PARAMETERS\n         SR    END,END\n         IC    END,7(PBT)               PARAMETERS BY EIGHT\n         SLL   END,3                    MULTIPLY NUMBER OF FORMAL\n         TM    6(PBT),X'08'\n         BZ    NOTYPE\n         LA    END,8(END)               ADD EIGHT IF TYPE PROCEDURE\nNOTYPE   AR    END,START                END OF FORMAL PARAMETERS IN END\n         BAL   BACK,TRANSDAT            PRINT FORMAL PARAMETERS\nNFPARM   OI    FLAG,X'04'               SET SKIP FLAG\n         BAL   GOBACK,OUTPUT            LAST PARAMETERS\nNOFPARAM LH    DISP,4(PBT)              GET END OF OBJECT TIME STACK\n         LA    END,0(DISP,CDSA)\n         CR    START,END\n         BNL   ARRAYS\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        EDIT OBJECT TIME STACK                                       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE\n         L     TEXT,RUBR2               PRINT OBJECT TIME STACK\n         MVC   BUFFER+9(42),0(TEXT)     HEADLINE\n         NI    FLAG,X'7D'               BUFFER AND ARRAY FLAG\n         LTR   INDEX,INDEX              ANY FORMAL PARAMETER PRINTED\n         BNZ   NOTZERO\n         B     *+8\nMULT32   SRDL  TEST,27\n         OI    FLAG,X'80'               BUFFER FLAG\n         LA    BACK,NFPARM\n         B     TRANSDAT\nNOTZERO  SLDL  TEST,27                  TEST IF END OF LINE\n         LTR   INDEX,INDEX\n         BZ    MULT32                   YES, BRANCH TO MULT32\n         SRDL  TEST,27\n         CR    START,END                TEST IF ANY DATA TO BE PRINTED\n         BC    11,NFPARM\n         BAL   GOBACK,OUTPUT            YES, PRINT HEADLINE\n         STC   INDEX,IF16               TEST IF TIME FOR ONE STEP\n         NI    IF16,X'0F'\n         BNZ   *+8\n         LA    BUFF,1(BUFF)\n         BAL   BACK,INSETD-4\n         B     NFPARM\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        CONVERSION OF DATA FOR PRINTING AND EDITING OF THE OUTPUT    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nTRANSDAT CR    START,END                TEST IF MORE DATA IS TO BE\n         BCR   11,BACK                  EDITED\n         SLDL  TEST,27\n         LTR   INDEX,INDEX              PRINT BUFFER IF END OF LINE\n         BZ    SETDISP\n         SLDL  TEST,1\n         LTR   INDEX,INDEX              IF INDEX MULTIPLE OF 16 THEN\n         BNZ   SHIFTB                   MAKE ONE EXTRA SPACE\n         LA    BUFF,1(BUFF)\nSHIFTB   SRDL  TEST,28\nTRANS    UNPK  0(9,BUFF),0(5,START)     UNPACK HEXADECIMAL DATA FOR\n         MVI   8(BUFF),X'EF'            PRINTING\n         TR    0(9,BUFF),TABLE-X'EF'\n         LA    INDEX,4(INDEX)\n         LA    BUFF,10(BUFF)\n         LA    START,4(START)\n         B     TRANSDAT\n          SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        DISPLACEMENT FOR DATA EDITED                                 *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nSETDISP  SRDL  TEST,27\n         BAL   GOBACK,OUTPUT\n         TM    FLAG,X'02'               CHECK IF EDITING ARRAYS TO GET\n         BO    ADDR                     RIGHT DISPLACEMENT\n         LA    GOBACK,24(INDEX)\nINSETD   ST    GOBACK,WORKAR            UNPACK HEXADECIMAL ADDRESS FOR\n         UNPK  BUFFER(7),WORKAR+1(4)    PRINTING\n         MVI   BUFFER+6,X'EF'\n         TR    BUFFER(7),TABLE-X'EF'\n         TM    FLAG,X'80'               TEST IF PRINTING IS TO BE\n         BZ    *+8                      CONTINUED AND NOT START AT THE\n         LA    BUFF,BUFFER+9            BEGINNING OF A NEW LINE\n         OI    FLAG,X'80'\n         B     TRANS\n          SPACE\nADDR     LR    GOBACK,INDEX             DISPLACEMENT FOR ARRAY\n         B     INSETD\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        EDITING OF DECLARED ARRAYS                                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nARRAYS   L     DISP,12(CDSA)            TEST IF ANY DECLARED ARRAYS\n         LTR   DISP,DISP\n         BZ    VALUE\nMOREARRY OI    FLAG,X'02'               MOVE ARRAY HEADLINE TO BUFFER\n         L     TEXT,RUBR3\n         MVC   BUFFER+9(55),0(TEXT)\nVARRSMF  L     START,8(DISP,CDSA)       STARTING ADDRESS OF ARRAY\n         ST    DISP,WORKAR              UNPACK HEXADECIMAL DISPLACEMENT\n         UNPK  BUFFER+36(7),WORKAR+1(4) OF SMF FOR PRINTING\n         MVI   BUFFER+42,X'EF'\n         TR    BUFFER+36(7),TABLE-X'EF'\n         L     END,12(DISP,CDSA)        END ADDRESS OF ARRAY\n         SR    INDEX,INDEX\n         BAL   BACK,TRANSDAT\n         L     DISP,0(DISP,CDSA)        GET CHAINING ADDRESS\n         LA    DISP,0(0,DISP)\n         OI    FLAG,X'04'               SET SKIP FLAG\n         BAL   GOBACK,OUTPUT            PRINT LAST LINE\n         LTR   DISP,DISP\n         BNZ   MOREARRY\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        EDITING OF VALUE ARRAYS                                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nVALUE    LH    DISP,10(CDSA)            TEST FOR VALUE ARRAYS\n         LTR   DISP,DISP\n         BZ    ENDVALAR\nVALARRAY OI    FLAG,X'02'\n         L     TEXT,RUBR4               MOVE TEXT FOR VALUE ARRAY\n         MVC   BUFFER+9(62),0(TEXT)     TO BUFFER\n         ST    DISP,WORKAR              UNPACK HEXADECIMAL DISPLACEMENT\n         UNPK  BUFFER+36(7),WORKAR+1(4) OF SMF FOR PRINTING\n         MVI   BUFFER+42,X'EF'\n         TR    BUFFER+36(7),TABLE-X'EF'\n         L     START,0(DISP,CDSA)       ADDRESS OF SMF\n         L     END,12(START)            END OF ARRAY\n         L     START,8(START)           BEGINNING OF ARRAY\n         SR    INDEX,INDEX\n         BAL   BACK,TRANSDAT            PRINT DATA\n         OI    FLAG,X'04'\n         BAL   GOBACK,OUTPUT            PRINT LAST LINE\n         L     START,0(DISP,CDSA)       GET CHAINING DISPLACEMENT\n         LH    DISP,2(START)\n         LTR   DISP,DISP\n         BZ    ENDVALAR\n         B     VALARRAY\nENDVALAR BAL   GOBACK,OUTPUT            PRINT ONE EXTRA BLANK LINE\n         OI    FLAG,X'04'\n         NI    FLAG,X'FD'               RESET ARRAY FLAG\n         B     RELDSA\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        THIS ROUTINE PRINTS THE INFORMATION BY USING THE IHIIORNX    *\n*        ROUTINE                                                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nOUTPUT   STM   END,BUFF,40(FSA)\n         LA    DSNR,1\n         L     TAB,ADSTAB(FSA)          ENTRY OF DSN=1 IN DSTAB\n         LA    TAB,40(TAB)\n         L     CURREC,R(TAB)\n         OI    DS(TAB),X'10'            SET DS3=1 IN DSTAB\n         MVC   0(90,CURREC),BUFFER\n         LR    TEST,RAS                 SAVE ADDRESS OF RASTP\n         L     ENTRY,ANEXTREC           BRANCH TO NEXTREC ROUTINE\n         BALR  RETURN,ENTRY             FOR PRINTING THE INFORMATION\n         TM    FLAG,X'04'\n         BZ    NOFLAG\n         LH    DSNR,S(TAB)              INCREASE S-COUNTER IN DSTAB\nSCOUNT   LA    DSNR,2(DSNR)\n         STH   DSNR,S(TAB)\n         L     TAB,R(TAB)               SKIP LINES IF SKIP FLAG IS SET\n         BCTR  TAB,0                    AND NOT TIME FOR NEW PAGE\n         CLI   0(TAB),C'1'\n         BE    RESFLAG\n         MVC   0(1,TAB),SPACE\nRESFLAG  NI    FLAG,X'FB'               RESET SKIP FLAG\nNOFLAG   LR    RAS,TEST\n         SR    TEST,TEST\n         MVI   BUFFER,C' '              BLANK BUFFER AFTER PRINTING\n         MVC   BUFFER+1(89),BUFFER\n         LM    END,BUFF,40(FSA)\n         BR    GOBACK\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        REGISTER NAMES AND DSTAB NAMES  AND CONSTANTS USED           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nTEST     EQU   0\nINDEX    EQU   1\nVFRDSA   EQU   1\nBACK     EQU   4\nTEXT     EQU   3\nGOBACK   EQU   3\nDISP     EQU   2\nTAB      EQU   5\nDSNR     EQU   6\nAML      EQU   6                        ADDRESS OF MESSAGE\nEND      EQU   5\nCURREC   EQU   8\nBUFF     EQU   8\nSTART    EQU   9\nCDSA     EQU   10                       ADDRESS OF CURRENT DSA\nPBT      EQU   11\nBASADD   EQU   7                        BASE REGISTER\nFSA      EQU   12                       ADDRESS OF FIXED STORAGE AREA\nRETURN   EQU   14\nRAS      EQU   14                       RETURN ADDRESS STACK PIONTER\nSAVE     EQU   13\nENTRY    EQU   15\n          SPACE\nR        EQU   4                        CHARACTER PIONTER\nS        EQU   20                       RECORD NUMBER\nDS       EQU   26                       FLAGBITS\n          SPACE\nSAVEAR   DS    18F\nWORKAR   DS    D\nTABLE    DC    C' 0123456789ABCDEF'     TRANSLATION TABLE\nFLAG     DC    X'84'\nSPACE    DC    C'-'\nIF16     DS    0C\nDSN1617  DS    C\nBUFFER   DC    90C' '                   MESSAGE TO BE PRINTED\n         DS    0F\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        EXTERNAL ADDRESSES                                           *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n          SPACE\nAFRDSA   DS F  V(FRDSA)                 EXTERNAL ONE\nASPDAP   DS F  V(SPDAP)                 TWO\nAOPEN    DS F  V(IHIIOROP)              THREE\nACLOSE   DS  F V(IHIIORCP)            FOUR                         0219\nANEXTREC DS F  V(IHIIORNX)              FIVE\nADRTAB   DC    V(IHIERMSG)              GES IN ADDRESS TABLE\nIDENTERR DC    V(IHIERM01)\nHEADLINE DC    V(IHIERM02)\nBETHA    DC    V(IHIERM03)\nRUBR1    DC    V(IHIERM04)\nRUBR2    DC    V(IHIERM05)\nRUBR3    DC    V(IHIERM06)\nRUBR4    DC    V(IHIERM07)\n         EJECT\nFSARE    DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIFDD": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00]\\x00]\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIFDD, POWER ROUTINE, REAL**REAL, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: SEE CODE.                                        *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHIFDD - POWER FUNCTION, REAL**REAL, LONG LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES:                                                   *\n*        IHILLO - LOGARITHM FUNCTION, LONG PRECISION                  *\n*        IHILEX - EXPONENTIAL FUNCTION, LONG PRECISION                *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *\n*   ROUTINE VIA     B     FSAERR+35*4(13)                             *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHIFDDXP CSECT\n       EXTRN   IHILLO\n       EXTRN   IHILEX\n       ENTRY   IHIFDD\n       DC      CL7'IHIFDD'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG\nIHIFDD STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS\n           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG\n           LD    BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG\n           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG\n           LD    EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG\n           BALR  BASADD,0          ESTABLISH LINKAGE TO BASADD REG\n           USING *,BASADD          MAKE BASADD REG NEW BASE ADDRESS REG\n           LTDR  BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR\n         BC    4,ERROR+6     BRANCH TO ERROR IF NEGATIVE UNDEFINED\n           LTDR  EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1\n           LR    ADDR,SAVE         LOAD SAVE AREA ADDRESS INTO ADDR REG\n           LA    SAVE,SAVREG       LOAD NEW SAVE AREA ADDR IN SAVE REG\n           ST    ADDR,4(SAVE)      STORE FORMER SAVE REG AREA ADDRESS\n           ST    SAVE,8(ADDR)      STORE NEW SAVE REGISTER AREA ADDRESS\n           STD   EXPN,PARAM        STORE EXPONENT FOR LATER USE IN RTN\n           L     LINK,ACDLOG       LOAD ADCON OF DLOG RTN IN LINK REG\n           BALR  RTN,LINK          BRANCH TO DLOG RTN FOR LOG OF BASE\n           LD    EXPN,PARAM        RELOAD EXPN REG WITH EXPONENT\n           MDR   BASE,EXPN         MULTIPLY LOG OF BASE NO BY EXPONENT\n           STD   BASE,PARAM        STORE RESULT AS EXP RTN PARAMETER\n           LA    PLIST,ADCPAR      MOD PLIST TO POINT TO EXP RTN PARAM\n           L     LINK,ACDEXP       LOAD ADCON OF DEXP RTN IN LINK REG\n           BALR  RTN,LINK          BRANCH TO DEXP RTN TO COMPUTE RESULT\n           L     SAVE,4(SAVE)      RESTORE THIS RTNS SAVE REG AREA ADDR\n           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)\nLOAD1      LD    BASE,ONE          LOAD PLUS 1 AS RESULT IN BASE NO REG\nEXIT       LM    RTN,ADDR,12(SAVE) RELOAD FORMER VALUES OF GP REG 14 -3\n           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4\n           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN\nERROR      LTDR  EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT\n         B     FSAERR+35*4(13)     BASENO EQUAL ZERO AND EXPONENT      X\n                                   NO GREATER THAN ZERO, UNDERFINED\n*                FLOATING POINT REGISTERS\nBASE       EQU   0                 REGISTER FOR BASE NO, PASSING RESULT\nEXPN       EQU   2                 REGISTER FOR EXPONENT IN COMPUTATION\n*                GENERAL PURPOSE REGISTERS\nSAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR\nRTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN\nLINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN\nPLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF\nBASADD     EQU   2                 REGISTER USED FOR SECOND BASE ADDR\nADDR       EQU   3                 REGISTER FOR INDEXING PARAMETER ADDR\n*                CONSTANTS AND ADCON AREAS\nSAVREG     DS    10F                    SAVE AREA FOR GP REG 13 THRU 4\nPARAM      DS    D                      PARAM FOR DATA IN DEXP MATH RTN\nONE        DC    X'4110000000000000'    CONSTANT ONE IN DOUBLE PREC F P\nADCPAR     DC    AL4(PARAM)             ADCON OF PARAMETER FOR EXP RTN\nACDLOG DC      AL4(IHILLO)             ADCON OF LOG MATH LIBRARY ROUTIN\nACDEXP DC      AL4(IHILEX)             ADCON OF EXP MATH LIBRARY ROUTIN\nFSAERR   EQU   X'1CC'\n           END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIFDI": {"ttr": 776, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00X\\x00X\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIFDI, POWER ROUTINE, REAL**INTEGER, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: SEE CODE.                                        *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHIFDI - POWER FUNCTION, REAL**INT, LONG  LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *\n*   ROUTINE VIA     B     FSAERR+35*4(13)                             *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHIFDIXP CSECT\n       ENTRY   IHIFDI\n       DC      CL7'IHIFDI'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG\nIHIFDI STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS\n           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG\n           LD    BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG\n           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG\n           L     EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG\n           LTDR  BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR\n           SR    EXPSW,EXPSW       SET NEGATIVE EXPN SWITCH REG TO ZERO\n           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,PLUS            IF EXPN IS POSITIVE, BRANCH TO PLUS\n           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1\n           LCR   EXPN,EXPN         EXPN MINUS, CONVERT TO 2S COMPLIMENT\n           LA    EXPSW,1(EXPSW)    SET EXP SW REG TO ONE FOR MINUS EXPN\nPLUS       LD    FACTOR,ONE        LOAD FACTOR OF ONE IN FACTOR REG\nLOOP       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG\n           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT\n           BC    10,JUMP           IF SIGN BIT NOT MINUS,BRANCH TO JUMP\n           MDR   FACTOR,BASE       MULTIPLY FACTOR REG BY BASE NO REG\nJUMP       LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    8,NEXT            IF EXPONENT NOW ZERO, BRANCH TO NEXT\n           MDR   BASE,BASE         MULTIPLY BASE NO BY DOUBLING ITSELF\n           BC    15,LOOP           BRANCH TO LOOP TO TEST NEXT EXPN BIT\nNEXT       LTR   EXPSW,EXPSW       TEST IF EXPSW REG PLUS,MINUS,OR ZERO\n           BC    8,SWAP            IF EXPN IS NOT MINUS, BRANCH TO SWAP\n           LD    BASE,ONE          LOAD ONE IN BASE NO REG AS DIVIDEND\n           DDR   BASE,FACTOR       DIV BASE REG BY FACTOR REG (RESULT)\n           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)\nSWAP       LDR   BASE,FACTOR       LOAD FACTOR REG INTO BASE NO REG\n           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)\nLOAD1      LD    BASE,ONE          LOAD PLUS 1 AS RESULT IN BASE NO REG\nEXIT       LM    RTN,ADDR,12(SAVE) RELOAD FORMER VALUES OF GP REG 14-3\n           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4\n           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN\nERROR      LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT\n         B     FSAERR+35*4(13)     BASE NO EQUAL ZERO AND EXPONENT     X\n                                  NOT GREATER THAN ZERO ,UNDEFINED\n*                FLOATING POINT REGISTERS\nBASE       EQU   0                 REGISTER FOR BASE NO, PASSING RESULT\nFACTOR     EQU   2                 REGISTER FOR FACTOR,COMPUTING RESULT\n*                GENERAL PURPOSE REGISTERS\nSAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR\nRTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN\nLINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN\nEXPSW      EQU   0                 REGISTER FOR TESTING FOR MINUS EXPN\nPLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF\nEXPN       EQU   2                 REGISTER FOR EXPONENT IN COMPUTATION\nADDR       EQU   3                 REGISTER FOR INDEXING PARAMETER ADDR\n*                ADCONS AND CONSTANTS AREA\n           DS    0D                  FORCE TO NEXT DOUBLE WORD BOUNDARY\nONE        DC    X'4110000000000000'    CONSTANT ONE IN DOUBLE PREC F P\nFSAERR   EQU   X'1CC'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIFII": {"ttr": 779, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00b\\x00b\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIFII, POWER ROUTINE, INTEGER**INTEGER'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: SEE CODE.                                        *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHIFII - POWER FUNCTION, INT**INT         LA   1,PARMLIST    *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *\n*   ROUTINE VIA     B     FSAERR+35*4(13)                             *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHIFIIXP CSECT\n       ENTRY   IHIFII\n       DC      CL7'IHIFII'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG\nIHIFII STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS\n           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG\n           L     BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG\n           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG\n           L     EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG\n           LR    RESULT,BASE       LOAD BASE NO INTO RESULT REG\n           LTR   BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR\n           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1\n           BCTR  BASE,0            DECREMENT BY ONE VALUE OF BASE NO\n           LTR   BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,EXIT            IF BASE NO NOW ZERO, BRANCH TO EXIT\n           LA    BASE,2(BASE)      INCREMENT BY TWO VALUE OF BASE NO\n           LTR   BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,TEST            IF BASE NO NOW ZERO, BRANCH TO TEST\n           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,PLUS            IF EXPN IS POSITIVE, BRANCH TO PLUS\n           SR    RESULT,RESULT     EXPN MINUS,MAKE VALUE OF RESULT ZERO\n           BC    15,EXIT           BRANCH TO EXIT TO LEAVE THIS ROUTINE\nPLUS       LR    BASE,RESULT       RELOAD ORG BASE NO FROM RESULT REG\n           L     FACTOR,ONE        LOAD FACTOR OF ONE IN FACTOR REG\nLOOP       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG\n           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT\n           BC    10,JUMP           IF SIGN BIT NOT MINUS,BRANCH TO JUMP\n           MR    FACT,BASE         MULTIPLY FACTOR REGS BY BASE NO REGS\n         SLDA  FACT,32            CHECK  OVERFLOW\n         SRDA  FACT,32\nJUMP       LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    8,NEXT            IF EXPONENT NOW ZERO, BRANCH TO NEXT\n           MR    BASE1,BASE        MULTIPLY BASE NO BY DOUBLING ITSELF\n         SLDA  BASE1,32\n         SRDA  BASE1,32\n           BC    15,LOOP           BRANCH TO LOOP TO TEST NEXT EXPN BIT\nNEXT     LR    RESULT,FACTOR      LOAD FFACTOR INTO RESULT REGISTER\n           BC    15,EXIT           BRANCH TO EXIT TO LEAVE THIS ROUTINE\nTEST       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG\n           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT\n           BC    4,EXIT            IF SIGN MINUS (EXPN ODD), GO TO EXIT\nLOAD1      L     RESULT,ONE        LOAD RESULT REG WITH VALUE OF PLUS 1\nEXIT       LM    RTN,LINK,12(SAVE) RELOAD FORMER VALUES OF GP REG 14-15\n           LM   FACT,ADDR,28(SAVE) RELOAD FORMER VALUES OF GP REG 2-7\n           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4\n           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN\nERROR      LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT\n         B     FSAERR+35*4(SAVE)\n*                GENERAL PURPOSE REGISTERS\nSAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR\nRTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN\nLINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN\nRESULT     EQU   0                 REGISTER FOR PASSING ON FINAL RESULT\nPLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF\nFACT       EQU   2                 REGISTER USED AS MPY REG FOR FACTOR\nFACTOR     EQU   3                 REGISTER USED FOR FACTOR AND ANSWER\nBASE1      EQU   4                 REGISTER USED AS MPY REG FOR BASE NO\nBASE       EQU   5                 REGISTER FOR BASE NO IN COMPUTATION\nEXPN       EQU   6                 REGISTER FOR EXPONENT IN COMPUTATION\nADDR       EQU   7                 REGISTER FOR INDEXING PARAMETER ADDR\n*                ADCONS AND CONSTANTS AREA\nONE        DC    F'1'              INTERGER CONSTANT OF ONE\nFSAERR   EQU   X'1CC'\n           END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIFRI": {"ttr": 782, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00X\\x00X\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 88, "newlines": 88, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIFRI, POWER ROUTINE, REAL**INTEGER, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: SEE CODE.                                        *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHIFRI - POWER FUNCTION, REAL**INT, SHORT LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *\n*   ROUTINE VIA     B     FSAERR+35*4(13)                             *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHIFRIXP CSECT\n       ENTRY   IHIFRI\n       DC      CL7'IHIFRI'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG\nIHIFRI STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS\n           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG\n           LE    BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG\n           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG\n           L     EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG\n           LTER  BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR\n           SR    EXPSW,EXPSW       SET NEGATIVE EXPN SWITCH REG TO ZERO\n           LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,PLUS            IF EXPN IS POSITIVE, BRANCH TO PLUS\n           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1\n           LCR   EXPN,EXPN         EXPN MINUS, CONVERT TO 2S COMPLIMENT\n           LA    EXPSW,1(EXPSW)    SET EXP SW REG TO ONE FOR MINUS EXPN\nPLUS       LE    FACTOR,ONE        LOAD FACTOR OF ONE IN FACTOR REG\nLOOP       SRDL  EXPN,1            SHIFT LOW BIT EXPN REG INTO ADDR REG\n           LTR   ADDR,ADDR         TEST SIGN POS ADDR REG FOR MINUS BIT\n           BC    10,JUMP           IF SIGN BIT NOT MINUS,BRANCH TO JUMP\n           MER   FACTOR,BASE       MULTIPLY FACTOR REG BY BASE NO REG\nJUMP       LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    8,NEXT            IF EXPONENT NOW ZERO, BRANCH TO NEXT\n           MER   BASE,BASE         MULTIPLY BASE NO BY DOUBLING ITSELF\n           BC    15,LOOP           BRANCH TO LOOP TO TEST NEXT EXPN BIT\nNEXT       LTR   EXPSW,EXPSW       TEST IF EXPSW REG PLUS,MINUS,OR ZERO\n           BC    8,SWAP            IF EXPN IS NOT MINUS, BRANCH TO SWAP\n           LE    BASE,ONE          LOAD ONE IN BASE NO REG AS DIVIDEND\n           DER   BASE,FACTOR       DIV BASE REG BY FACTOR REG (RESULT)\n           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)\nSWAP       LER   BASE,FACTOR       LOAD FACTOR REG INTO BASE NO REG\n           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)\nLOAD1      LE    BASE,ONE          LOAD PLUS 1 AS RESULT IN BASE NO REG\nEXIT       LM    RTN,ADDR,12(SAVE) RELOAD FORMER VALUES OF GP REG 14-3\n           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4\n           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN\nERROR      LTR   EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT\n         B     FSAERR+35*4(13)     BASE NO EQUAL ZERO AND EXPONENT     X\n                                  NOT GREATER THAN ZERO ,UNDEFINED\n*                FLOATING POINT REGISTERS\nBASE       EQU   0                 REGISTER FOR BASE NO, PASSING RESULT\nFACTOR     EQU   2                 REGISTER FOR FACTOR,COMPUTING RESULT\n*                GENERAL PURPOSE REGISTERS\nSAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR\nRTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN\nLINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN\nEXPSW      EQU   0                 REGISTER FOR TESTING FOR MINUS EXPN\nPLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF\nEXPN       EQU   2                 REGISTER FOR EXPONENT IN COMPUTATION\nADDR       EQU   3                 REGISTER FOR INDEXING PARAMETER ADDR\n*                ADCONS AND CONSTANTS AREA\n           DS    0F                    FORCE TO NEXT FULL WORD BOUNDARY\nONE        DC    X'41100000'            CONSTANT ONE IN SINGLE PREC F P\nFSAERR   EQU   X'1CC'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIFRR": {"ttr": 1025, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00]\\x00]\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 93, "newlines": 93, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIFRR, POWER ROUTINE, REAL**REAL, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: SEE CODE.                                        *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHIFRR - POWER FUNCTION, REAL**REAL, SHRT LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES:                                                   *\n*        IHISLO - LOGARITHM FUNCTION, SHORT PRECISION                 *\n*        IHISEX - EXPONENTIAL FUNCTION, SHORT PRECISION               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF BASE IS ZERO AND EXPONENT NOT POSITIVE GO TO ERROR    *\n*   ROUTINE VIA     B     FSAERR+35*4(13)                             *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHIFRRXP CSECT\n       EXTRN   IHISLO\n       EXTRN   IHISEX\n       ENTRY   IHIFRR\n       DC      CL7'IHIFRR'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n           USING *,LINK            MAKE LINK REG THE BASE ADDRESS REG\nIHIFRR STM     RTN,ADDR,12(SAVE)       SAVE REGISTERS\n           L     ADDR,0(0,PLIST)   LOAD PLIST OF BASE NO IN ADDR REG\n           LE    BASE,0(0,ADDR)    LOAD BASE NO INTO BASE NO REG\n           L     ADDR,4(0,PLIST)   LOAD PLIST OF EXPONENT IN ADDR REG\n           LE    EXPN,0(0,ADDR)    LOAD EXPONENT INTO EXPN REG\n           BALR  BASADD,0          ESTABLISH LINKAGE TO BASADD REG\n           USING *,BASADD          MAKE BASADD REG NEW BASE ADDRESS REG\n           LTER  BASE,BASE         CHECK IF BASE NO PLUS, MINUS,OR ZERO\n           BC    8,ERROR           IF BASE NO IS ZERO, BRANCH TO ERROR\n         BC    4,ERROR+6     BRANCH TO ERROR IF NEGATIVE UNDEFINED\n           LTER  EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    8,LOAD1           IF EXPONENT IS ZERO, BRANCH TO LOAD1\n           LR    ADDR,SAVE         LOAD SAVE AREA ADDRESS INTO ADDR REG\n           LA    SAVE,SAVREG       LOAD NEW SAVE AREA ADDR IN SAVE REG\n           ST    ADDR,4(SAVE)      STORE FORMER SAVE REG AREA ADDRESS\n           ST    SAVE,8(ADDR)      STORE NEW SAVE REGISTER AREA ADDRESS\n           STE   EXPN,PARAM        STORE EXPONENT FOR LATER USE IN RTN\n           L     LINK,ADCLOG       LOAD ADCON OF ALOG RTN IN LINK REG\n           BALR  RTN,LINK          BRANCH TO ALOG RTN FOR LOG OF BASE\n           LE    EXPN,PARAM        RELOAD EXPN REG WITH EXPONENT\n           MER   BASE,EXPN         MULTIPLY LOG OF BASE NO BY EXPONENT\n           STE   BASE,PARAM        STORE RESULT AS EXP RTN PARAMETER\n           LA    PLIST,ADCPAR      MOD PLIST TO POINT TO EXP RTN PARAM\n           L     LINK,ADCEXP       LOAD ADCON OF  EXP RTN IN LINK REG\n           BALR  RTN,LINK          BRANCH TO  EXP RTN TO COMPUTE RESULT\n           L     SAVE,4(SAVE)      RESTORE THIS RTNS SAVE REG AREA ADDR\n           BC    15,EXIT           BRANCH TO EXIT (RESULT IN BASE REG)\nLOAD1      LE    BASE,ONE          LOAD PLUS 1 AS RESULT IN BASE NO REG\nEXIT       LM    RTN,ADDR,12(SAVE) RELOAD FORMER VALUES OF GP REG 14 -3\n           MVI   12(SAVE),X'FF'    STORE ALL 1 BITS IN SAVE AREA WORD 4\n           BCR   15,RTN            BRANCH TO ADDRESS IN RETURN REG RTN\nERROR      LTER  EXPN,EXPN         CHECK IF EXPONENT PLUS,MINUS,OR ZERO\n           BC    2,EXIT            IF EXPN IS POSITIVE, BRANCH TO EXIT\n         B     FSAERR+35*4(13)     BASE NO EQUAL ZERO AND EXPONENT     X\n                                   NOT GREATER THAN ZERO, UNDEFINED\n*                FLOATING POINT REGISTERS\nBASE       EQU   0                 REGISTER FOR BASE NO, PASSING RESULT\nEXPN       EQU   2                 REGISTER FOR EXPONENT IN COMPUTATION\n*                GENERAL PURPOSE REGISTERS\nSAVE       EQU   13                REGISTER CONTAINS SAVE REG AREA ADDR\nRTN        EQU   14                REGISTER FOR RETURN TO PREVIOUS RTN\nLINK       EQU   15                REGISTER FOR LINKAGE TO ANOTHER RTN\nPLIST      EQU   1                 REGISTER USED FOR PARAMETER LIST REF\nBASADD     EQU   2                 REGISTER USED FOR SECOND BASE ADDR\nADDR       EQU   3                 REGISTER FOR INDEXING PARAMETER ADDR\n*                CONSTANTS AND ADCON AREAS\nSAVREG     DS    14F                    SAVE AREA FOR GP REG 13 THRU 8\nPARAM      DS    F                      PARAM FOR DATA IN EXP MATH RTN\nONE        DC    X'41100000'            CONSTANT ONE IN SINGLE PREC F P\nADCPAR     DC    AL4(PARAM)             ADCON OF PARAMETER FOR EXP RTN\nADCLOG DC      AL4(IHISLO)             ADCON OF LOG MATH LIBRARY ROUTIN\nADCEXP DC      AL4(IHISEX)             ADCON OF EXP MATH LIBRARY ROUTIN\nFSAERR   EQU   X'1CC'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIFSA": {"ttr": 1028, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x08\\x8e\\x08\\x8e\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 2190, "newlines": 2190, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIFSA - OS/360 ALGOL FIXED STORAGE AREA'\n*STATUS.. CHANGE LEVEL 0\n*FUNCTION/OPERATION..\n*   THIS MODULE (KNOWN AS THE FSA) IS A COLLECTION OF ABOUT 20\n*   ROUTINES WHICH ARE REQUIRED FOR THE EXECUTION OF ALMOST ANY ALGOL\n*   PROGRAM. THE ENTRY POINT AND PURPOSE OF EACH ROUTINE IS LISTED\n*   UNDER 'ENTRY POINTS' BELOW. DETAILED INFORMATION ON THE FUNCTION,\n*   CALLING SEQUENCE, TRANSMISSION OF PARAMETERS ETC. CAN BE FOUND\n*   IN THE COMMENTARY WHICH PRECEDES THE PROGRAM LISTING FOR EACH\n*   ROUTINE.\n*\n*   THE MODULE CONSISTS OF TWO CONTROL SECTIONS, IHIFSARA AND IHIFSARB.\n*   IHIFSARA CONTAINS THE ROUTINES, TABLES AND OTHER INFORMATION USED\n*   DURING THE EXECUTION OF THE ALGOL OBJECT PROGRAM.\n*   IHIFSARB CONTAINS MAINLY THE INITIALIZATION AND TERMINATION\n*   ROUTINES WITH THEIR ASSOCIATED TABLES AND WORK AREAS.\n*\n*   REG. 13(FSA) IS THE BASE REGISTER FOR IHIFSARA.\n*   REG. 7(GRF) IS THE BASE REGISTER FOR IHIFSARB.\n*\n*ENTRY POINTS..MOST OF THE ENTRY POINTS LISTED HERE ARE COLLECTED IN\n*   A BRANCH LIST LOCATED AT BRLIST. THE ENTRY POINTS CONTAINED IN THIS\n*   BRANCH LIST ARE MARKED WITH AN ASTERISK AFTER THE NAME IN THE\n*   LISTING BELOW.\n*\n*        CAP1*- CALL ACTUAL PARAMETER, PART 1. ENTER THUNK ROUTINE\n*   FROM A PROCEDURE.\n*        CAP2*- CALL ACTUAL PARAMETER, PART 2. RETURN FROM THE THUNK\n*   ROUTINE TO THE PROCEDURE.\n*        PROLOGP*- ENTER A PROCEDURE WHEN IT IS CALLED VIA AN ACTUAL\n*   PARAMETER.\n*        PROLOG*- ENTER A BLOCK OR A PROCEDURE.\n*        RETPROG*- LEAVE A BLOCK OR PROCEDURE VIA A 'GO TO' STATEMENT.\n*        EPILOGP*- RETURN FROM A PROCEDURE VIA THE 'END' STATEMENT.\n*        EPILOGB*- LEAVE A BLOCK VIA THE 'END' STATEMENT.\n*        FRDSA - FREE STORAGE FOR DSA AND ARRAYS. SYNONYM FOR EPILOGB\n*   WHEN USED AS A SUBROUTINE BY THE ERROR ROUTINE IHGERROR.\n*        CSWE1*- CALL SWITCH ELEMENT, PART 1.\n*        CSWE2*- CALL SWITCH ELEMENT, PART 2.\n*        LOADPP*- LOAD A PRECOMPILED PROCEDURE.\n*        SPDECL - STANDARD PROCEDURE DECLARATION ROUTINE. (ENTERED VIA\n*   THE PROLOG ROUTINE).\n*        VALUCALL*- HANDLE FORMAL PARAMETERS CALLED BY VALUE.\n*        GETMSTO*- GET MAIN STORAGE FOR ARRAYS.\n*        CNVIRD - CONVERT INTEGER TO REAL.\n*        CNVRDI - CONVERT REAL TO INTEGER.\n*        ENTIER - EXECUTE ALGOL ENTIER FUNCTION.\n*        TRACE*- STORE THE CURRENT SEMICOLON NUMBER.\n*        IHGFSAIN - INITIALIZE FOR PROGRAM EXECUTION AND GIVE CONTROL\n*   TO THE OBJECT MODULE.\n*        TERMNTE*- TERMINATE THE EXECUTION.\n*        PIEROUT - PROGRAM INTERRUPT ROUTINE.\n*        FSAERR - STORE ERROR NUMBER AND LINK TO THE ERROR ROUTINE\n*   IHIERROR.\n*\n*INPUT.. IF THE TRACE OPTION IS USED, THE TERMINATION ROUTINE MAY READ\n*   A TABLE OF SEMICOLON NUMBERS, WHICH HAS BEEN WRITTEN ON SYSUT1 BY\n*   THE TRACE ROUTINE.\n*\n*OUTPUT.. IF THE TRACE OPTION IS USED, THE TRACE ROUTINE MAY WRITE A\n*   TABLE OF SEMICOLON NUMBERS ON SYSUT1. THIS TABLE IS READ AND THEN\n*   WRITTEN ON SYSPRINT IN EDITED FORMAT BY THE TERMINATION ROUTINE.\n*   THE MESSAGE 'END OF ALGOL PROGRAM EXECUTION' IS WRITTEN ON SYSPRINT\n*   AS THE FINAL OUTPUT FROM THE EXECUTION.\n*\n*EXTERNAL ROUTINES..\n*\n*        IHIIOROP - OPEN A DATA SET (USED ONLY FOR SYSPRINT).\n*        IHIIORCL - CLOSE A DATA SET (USED ONLY FOR SYSPRINT).\n*        IHIIORCP - CLOSE ALL OPEN DATA SETS (EXCEPT SYSUT1).\n*        IHIIORNX - HANDLE THE NEXT I/O RECORD.\n*        IHIERROR - EDIT AND PRINT AN ERROR MESSAGE AND, IF REQUESTED,\n*   AN ALGOL STORAGE DUMP. (ENTERED BY LINK).\n*\n*   THE FOLLOWING TWO EXTERNAL TABLES ARE IN THE OBJECT MODULE.\n*\n*        IHIENTIF - INFORMATION NEEDED FOR ENTERING THE OBJECT MODULE.\n*   FORMAT.. IHIENTIF DC A(PBTAB)  ADDRESS OF PROGRAM BLOCK TABLE\n*                     DC A(LATAB)  ADDRESS OF LABEL ADDRESS TABLE\n*                     DC X'SL'     X'02' OR X'00' FOR SHORT/LONG PREC.\n*                     DC AL3(ENTRYPOINT)  ADDRESS OF FIRST INSTRUCTION\n*\n*        IHIDSTAB - INFORMATION ABOUT THE STATUS OF EACH DATA SET USED.\n*   FORMAT AND USE.. SEE THE DUMMY SECTION DDSTAB AND THE LISTING OF\n*   THE I/O SUBROUTINE MODULE IHIIORTN.\n*\n*EXITS - NORMAL.. THE TERMINATION ROUTINE IS ENTERED BY A BRANCH TO\n*   TERMNTE, AND A FINAL RETURN IS BY A RETURN MACRO WITH THE RETURN\n*   CODE ZERO IN REG. 15.\n*\n*EXITS - ERRORS.. ON RETURN FROM THE ERROR ROUTINE IHIERROR, THE\n*   TERMINATION ROUTINE IS ENTERED BY A BRANCH TO ALGTRMA, AND A FINAL\n*   RETURN IS MADE BY A RETURN MACRO WITH THE RETURN CODE 4 IN REG. 15.\n*\n*TABLES/WORK AREAS..\n*   THE LOWER PART OF IHIFSARA CONTAINS A BLOCK OF WORK AREAS AND\n*   CONSTANTS WHICH ARE USED IN COMMON BY SEVERAL ROUTINES. THE MOST\n*   IMPORTANT ARE..\n*\n*        SAVE - STANDARD SAVE AREA USED BY ALL FIRST-LEVEL SUBROUTINES\n*   EXCEPT THOSE CONTAINED IN THIS MODULE.\n*        ASAVE - SAVE AREA USED BY SOME ROUTINES IN THIS MODULE.\n*        FCTVALST - STORAGE FOR THE RESULT OF AN ALGOL FUNCTION.\n*        PROLPBN - PROGRAM BLOCK NUMBER OF A BLOCK OR PROCEDURE TO BE\n*   ENTERED VIA THE PROLOG ROUTINE.\n*        PGOPSW - THE OLD PSW IN CASE OF A PROGRAM INTERRUPT.\n*        SCRCS - THE CURRENT SEMICOLON NUMBER.\n*        OPTSW - FLAG BITS REPRESENTING EXECUTION TIME OPTIONS AND\n*   SWITCHES FOR CONTROLLING THE PROGRAM FLOW.\n*        FSAERCOD - ERROR NUMBER IDENTIFYING AN EXECUTION ERROR.\n*        IHIFSARS - FOUR POINTERS FOR CONTROLLING THE RETURN ADDRESS\n*   STACK.\n*        BRLIST - A LIST OF ENTRY POINTS TO MOST OF THE ROUTINES\n*   MENTIONED UNDER 'ENTRY POINTS'. THE LIST CONSISTS MAINLY OF\n*   BRANCH INSTRUCTIONS.\n*        IHIFSAER - A LIST OF BAL INSTRUCTIONS, EACH CORRESPONDING TO\n*   ONE TYPE OF ERROR, THE NUMBER OF WHICH IS DETERMINED BY ITS\n*   POSITION IN THE LIST.\n*\n*   OTHER WORK AREAS AND CONSTANTS OF GENERAL INTEREST ARE..\n*        PARMLIST - A LIST OF THE VALID EXECUTION OPTION PARAMETERS.\n*        TRBUF - BUFFER POINTERS AND RECORD COUNTER FOR CONTROLLING\n*   THE OUTPUT OF TRACING INFORMATION ON SYSUT1.\n*        PIETAB - A LIST OF 16 ADDRESS CONSTANTS EACH POINTING TO AN\n*   ENTRY IN IHIFSAER, WHICH CORRESPONDS TO A TYPE OF PROGRAM INTERRUPT\n*        FPINST - A LIST OF FLOATING POINT INSTRUCTIONS USED BY THE\n*   VALUCALL AND SPDECL ROUTINES.\n*        CNVINSTE - INSTRUCTIONS TO BE INSERTED INTO THE CONVERT\n*   ROUTINE FOR SHORT PRECISION.\n*        CNVINSTD - INSTRUCTIONS TO BE INSERTED INTO THE CONVERT\n*   ROUTINE FOR LONG PRECISION.\n*\n*ATTRIBUTES.. THIS MODULE IS SERIALLY REUSABLE.\n*\n*NOTES..THIS MODULE IS ONLY INTENDED TO BE USED WHEN LINKAGE EDITED\n*   TOGETHER WITH AN OS/360 ALGOL OBJECT MODULE AND WITH THE OS/360\n*   ALGOL I/O ROUTINES. FOR REASONS OF EFFICIENCY CERTAIN LOCAL\n*   CONVENTIONS ARE OBEYED IN THE COMMUNICATION BETWEEN THESE MODULES.\n*\n*   REGISTER SAVING AND RESTORING IS ONLY DONE WHEN REQUIRED AND THEN\n*   GENERALLY IN A NON-STANDARD FASHION.\n*\n*   USE OF GENERAL REGISTERS WHEN COMMUNICATING WITH THE OBJECT MODULE.\n*\n*   REG. 8 (ADR) IS SOMETIMES USED  AS RETURN REGISTER AND PARAMETER\n*   POINTER.\n*   REG. 10 (CDSA) POINTS AT THE CURRENT ACTIVE DATA STORAGE AREA.\n*   REG. 11(PBT) POINTS AT THE PROGRAM BLOCK TABLE IN THE OBJECT MODULE\n*   REG. 12(LAT) POINTS AT THE LABEL ADDRESS TABLE IN THE OBJECT MODULE\n*   REG. 13(FSA) SERVES BOTH AS THE STANDARD SAVE AREA REGISTER AND\n*   AS BASE REGISTER FOR THE CONTROL SECTION IHIFSARA.\n*   REG. 14(STH) IS USED TO TRANSMIT INTEGER VALUES TO OR FROM THE\n*   CONVERT ROUTINES.\n*   REG. 15(BRR) IS NORMALLY USED AS RETURN REGISTER AND PARAMETER\n*   POINTER.\n*   F.P. REG. 0 IS USED TO TRANSMIT REAL VALUES TO OR FROM THE CONVERT\n*   ROUTINES.\n*\n*   USE OF GENERAL REGISTERS WHEN COMMUNICATING WITH THE I/O ROUTINES..\n*\n*   REG. 5(DSN) POINTS AT THE RELEVANT ENTRY IN THE DATA SET TABLE.\n*   REG. 6(DSNR) CONTAINS THE DATA SET NUMBER.\n*   REG. 12(FSAA) CONTAINS THE BASE ADDRESS OF IHIFSARA.\n*   REGISTERS 13, 14 AND 15 ARE USED AS STANDARD SAVE, RETURN AND ENTRY\n*   REGISTERS.\n*\n*   PARAMETER VALUES AND OTHER INFORMATION ARE OFTEN TRANSMITTED\n*   IMPLICITLY VIA THE COMMONLY ACCESSIBLE WORKING STORAGE IN THE\n*   LOWER PART OF IHIFSARA AND (FOR I/O ROUTINES) VIA THE DATA SET\n*   TABLE IN THE OBJECT MODULE.\n*\n*   THE MODULE WORKS FOR EITHER SINGLE OR DOUBLE FLOATING POINT\n*   PRECISION. IT SENSES THE PRECISION FOR WHICH THE OBJECT MODULE WAS\n*   COMPILED AND INITIALIZES ITSELF ACCORDINGLY. THE AREAS AFFECTED\n*   ARE THE LIST OF FLOATING POINT INSTRUCTIONS AT FPINST AND THE\n*   BLOCK OF INSTRUCTIONS STARTING AT CNVINST IN THE CONVERT ROUTINES.\n*\n*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME.\n*   THE MODULE ALSO DEPENDS UPON DECIMAL NUMBERS TO BE CODED SO THAT\n*   THE LOW ORDER FOUR BITS, WHEN CONSIDERED AS A BINARY INTEGER,\n*   IDENTIFY THE VALUE OF THE DIGIT. THE MVI INSTRUCTION AT ALGTRMZ\n*   IS USED FOR INSERTING THE PROPER ZONE BITS FOR UNPACKED DECIMAL\n*   NUMBERS.\n         EJECT\nIHIFSARA START 0\n* RELEASE 19 CHANGES\n* 352400-352600                                                  A22570\n* 128000,132200,138000                                           A28225\n*                                                                A28226\n*C138512,A138516,A143300                                         A39600\n         SPACE 3\n*  USE OF GENERAL REGISTERS\n         SPACE 3\n*              COMMON WORK REGISTERS\nR0       EQU   0\nGR0      EQU   0\nR1       EQU   1\nGR1      EQU   1\nGP1      EQU   1\nR2       EQU   2\nGR2      EQU   2\nGP2      EQU   2\nR3       EQU   3\nGR3      EQU   3\nGP3      EQU   3\nR4       EQU   4\nGR4      EQU   4\nR5       EQU   5\nGRA      EQU   2\nGRB      EQU   3\nGRC      EQU   4\nGRD      EQU   5\nGRE      EQU   6\nGRF      EQU   7                        (ALSO IHIFSARB BASE REGISTER)\nGRG      EQU   8\nGRH      EQU   9\nGRI      EQU   10\n         SPACE\n*              REGISTERS FOR COMMUNICATION WITH THE OBJECT MODULE\nADR      EQU   8                        ADDRESSING REGISTER\nGDSA     EQU   9                        GLOBAL DSA\nCDSA     EQU   10                       CURRENT DSA\nPBT      EQU   11                       PROGRAM BLOCK TABLE\nLAT      EQU   12                       LABEL ADDRESS TABLE\nFSA      EQU   13                       IHIFSARA BASE REGISTER\nSTH      EQU   14                       TEMPORARY STORAGE\nBRR      EQU   15                       BRANCH REGISTER\n         SPACE\n*              REGISTERS FOR COMMUNICATION WITH I/O SUBROUTINES\nDSN      EQU   5                        DATA SET TABLE POINTER\nDSNR     EQU   6                        DATA SET NUMBER\nFSAA     EQU   12                       ALTERNATE FSA BASE REGISTER\nRETURN   EQU   14\nENTRY    EQU   15\n         SPACE\n*              REGISTERS USED BY TRACE AND TERMINATION ROUTINES\nRBUFP    EQU   4                        BYTE POINTER IN TRACE BUFFER\nRSC      EQU   5                        SEMICOLON NUMBER\nRBEG     EQU   6                        LOWER TRACE LIMIT\nREND     EQU   7                        UPPER TRACE LIMIT\nRBUF     EQU   8                        TRACE BUFFER ADDRESS\nRBUFA    EQU   9                        ALTERNATE TRACE BUFFER ADDR.\nRBUFL    EQU   10                       LENGTH OF TRACE BUFFER\nRBUFC    EQU   11                       NUMBER OF TRACE RECORDS\n         SPACE\n*              REGISTER USED BY SPDECL ROUTINE\nSPDABASE EQU   5\n         SPACE\n*              FLOATING POINT REGISTER\n         SPACE\nFPR0     EQU   0\n         SPACE\n*  BIT PATTERNS\n         SPACE\nBETABM   EQU   X'0C'                    MASK FOR BETA BLOCK FLAG IN PBT\nCODEPRM  EQU   X'10'                    MASK FOR CODE PROCEDURE IN PBT\nPIMASK   EQU   X'04'                    MASK FOR PI-PROCEDURE IN PBT\nRASLOADM EQU   X'FE'                    LOAD PROCEDURE ENTRY IN RAS\nRASPARMM EQU   X'00'                    CAP OR CSWE ENTRY IN RAS\nSHORTBIT EQU   X'10'                    F.P. OPCODE MODIFIER\nDS0      EQU   X'80'                    ***\nDS15     EQU   X'01'                                               0219\nDS3      EQU   X'10'                      * FLAGS IN\nDS236    EQU   X'32'                      *  DATA SET TABLE\nDS11     EQU   X'10'                    ***\n         SPACE\n*  SWITCHES IN OPTSW\n         SPACE\nDPSW     EQU   X'80'                    DUMP  OPTION SWITCH\nTRSW     EQU   X'40'                    TRACE OPTION SWITCH\nSHSW     EQU   X'20'                    SHORT PRECISION OPTION SWITCH\nTERMSW   EQU   X'10'                    TERMINATION ROUTINE ENTERED\nERROR    EQU   X'08'                    ERROR ROUTINE ENTERED\nUT1ERR   EQU   X'04'                    ERROR ON SYSUT1\nPRNTERR  EQU   X'02'                    ERROR ON SYSPRINT\nUCTRSW   EQU   X'41'                    UNCONDITIONAL TRACE OPTION\nPPTRSW   EQU   X'01'                    TRACE PRECOMP. PROCEDURES\n         SPACE\n*  ESD SYMBOLS\n         SPACE\n         ENTRY IHIFSAIN\n         SPACE\n         EXTRN IHIDSTAB\n         EXTRN IHIENTIF\n         EXTRN IHIIOROP,IHIIORCL,IHIIORNX,IHIIORCI,IHIIOREV        0226\n         EXTRN IHIIOROQ,IHIIOREN,IHIIORGP,IHIIORCP,IHIIORER        0226\n         EJECT\n         COPY  FSAREA\n         EJECT\n         COPY  FSACONV\n         SPACE\n         ORG   FSAREA+ADSTAB\n         DC    A(IHIDSTAB)\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        INSTRUCTIONS INSERTED INTO THE BRANCH LIST AT BRLIST         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         ORG   BRLIST\n         USING IHIFSARA,FSA\n         SPACE\n          B    CAP1A                    CAP1\n         B     CAP2A                    CAP2\n         B     PROLP                    PROLOGP\n         B     PROL                     PROLOG\n         B     RETPROGA                 RETPROG\n         B     EPILP                    EPILOGP\n         B     EPILB                    EPILOGB\n         B     EPIL3                    EPILPR3\n         B     CSWE1A                   CSWE1\n         B     CSWE2A                   CSWE2\n         B     LOADPPA                  LOADPP\n*                                  TRACE\n         MVC   SCRCS(2,FSA),0(BRR)      INSERT SEMICOLON NUMBER\n         B     2(BRR)                   MODIFIED TO NOP IF TRACE\n         B     TRACEA\n*\n         B     TERMN                    TERMNTE\n         BCR   0,BRR                    BCR\n         B     GETMAIN                  GETMSTO\n         B     VALUCAL                  VALUCALL\n         DC    A(ADRLST)                                           0226\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        E X I T S  F O R  E X E C U T I O N  E R R O R S             *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE CONTAINS ENTRY POINTS FOR ALL TYPES OF EXECUTION\n*  ERRORS. IT STORES THE ERROR NUMBER AND LINKS TO THE ERROR ROUTINE\n*  IHIFSAER.\n*        THE NUMBER OF EACH ERROR IS DETERMINED BY ITS POSITION IN\n*  THE BRANCH LIST.\n         SPACE\n*  CALLING SEQUENCE\n*        BC    ERRORCONDITION,FSAERR+4*ERRORNUMBER(FSA)\n         SPACE\n         ORG   FSAERR+FSAREA\nIHIFSAER EQU   *\n         BAL   GR1,FSAERRL               0\n         BAL   GR1,FSAERRL               1\n         BAL   GR1,FSAERRL               2\n         BAL   GR1,FSAERRL               3\n         BAL   GR1,FSAERRL               4\n         BAL   GR1,FSAERRL               5\n         BAL   GR1,FSAERRL               6\n         BAL   GR1,FSAERRL               7\n         BAL   GR1,FSAERRL               8\n         BAL   GR1,FSAERRL               9\n         BAL   GR1,FSAERRL              10\n         BAL   GR1,FSAERRL              11\n         BAL   GR1,FSAERRL              12\n         BAL   GR1,FSAERRL              13\n         BAL   GR1,FSAERRL              14\n         BAL   GR1,FSAERRL              15\n         BAL   GR1,FSAERRL              16\n         BAL   GR1,FSAERRL              17\nNOMAIN   EQU   *-FSAREA\n         BAL   GR1,FSAERRL              18\n         BAL   GR1,FSAERRL              19\nERROR20  EQU   *\nOERR20   EQU   *-FSAREA\nPARERR   EQU   *-FSAREA\n         BAL   GR1,FSAERRL              20\nERROR21  EQU   *\n         BAL   GR1,FSAERRL              21\n         BAL   GR1,FSAERRL              22\n         BAL   GR1,FSAERRL              23\n         BAL   GR1,FSAERRL              24\n         BAL   GR1,FSAERRL              25\n         BAL   GR1,FSAERRL              26\nERROR27  EQU   *\n         BAL   GR1,FSAERRL              27\nERROR28  EQU   *\n         BAL   GR1,FSAERRL              28\nERROR29  EQU   *\n         BAL   GR1,FSAERRL              29\nERROR30  EQU   *\n         BAL   GR1,FSAERRL              30\nERROR31  EQU   *\n         BAL   GR1,FSAERRL              31\nERROR32  EQU   *\n         BAL   GR1,FSAERRL              32\nERROR33  EQU   *\n         BAL   GR1,FSAERRL              33\nERROR34  EQU   *\nSWDMERR  EQU   *-FSAREA\n         BAL   GR1,FSAERRL              34\nERROR35  EQU   *\n         BAL   GR1,FSAERRL              35\nERROR36  EQU   *\nRASOVERF EQU   *-FSAREA\n         BAL   GR1,FSAERRL              36\n         BAL   GR1,FSAERRL              37\n         BAL   GR1,FSAERRL              38\n         BAL   GR1,FSAERRL              39\n         BAL   GR1,FSAERRL              40\nDDERROR  EQU   *-FSAREA\n         BAL   GR1,FSAERRL              41\nINVOPT   EQU   *-FSAREA\n         BAL   GR1,FSAERRL              42\n         BAL   GR1,FSAERRL              43\n         SPACE\nFSAERRL  EQU   *                   LINK TO ERROR ROUTINE IHIFSAERR\n          N     GR1,=X'00FFFFFF'\n         S     GR1,=A(IHIFSAER+4)       (ERRORNUMBER*4) IN GR1\n         STC   GR1,FSAERCOD(FSA)\n         TM    OPTSW(FSA),ERROR         TO PREVENT ENTERING\n         BO    TERMAA                    ERROR ROUTINE\n         OI    OPTSW(FSA),ERROR           MORE THAN ONCE\n LINK EP=IHIERROR,PARAM=(FRDSA,SPDAP,IHIIOROP,IHIIORCP,IHIIORNX)   0219\n         SPACE\n         USING IHIFSARB,GRF\nTERMA    EQU   *                   ABNORMAL TERMINATION\n         L     GRF,=A(IHIFSARB)\n         TM    OPTSW(FSA),TERMSW\n         BO    ALGTRMAA                 IF ERROR IN TERM. ROUTINE\n         B     ALGTRMA\n         SPACE\nTERMAA   EQU   *                   VERY ABNORMAL TERMINATION\n         L     GRF,=A(IHIFSARB)\n         B     ALGTRMAA\n         SPACE\nTERMN    EQU   *                   NORMAL TERMINATION\n         L     GRF,=A(IHIFSARB)\n         B     ALGTRMN\n         DROP  GRF\n         ORG\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*    INSTRUCTIONS FOR SHORT OR LONG FLOATING POINT PRECISION          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*  THE FOLLOWING INSTRUCTIONS ARE MODIFIED BY THE INITIALIZATION\n*  ROUTINEFOR SHORT OR LONG PRECISION AS REQUIRED.\n         SPACE\nFPINST   EQU   *\n*                                       USED BY VALUCALL\nVALLD    LE    0,0(R1)\nVALST    STE   0,0(R2)\n          SPACE\n*                                       USED BY SPDECL\nLINSTR   LE    0,0(GR2)\nSTINSTR  STE   0,FCTVALST(FSA)\nLTRINSTR LTER  0,0\n         NOPR  0\nFPINSTE  EQU   *\nLPRINSTR LPER  0,0\n         SPACE\nFPINSTAD DC    A(FPINST,4,FPINSTE)\n         SPACE\n*  ONE OF THE FOLLOWING SETS OF INSTRUCTIONS IS INSERTED INTO THE\n*  CONVERT ROUTINE BY THE INITIALIZATION ROUTINE IN ORDER TO SET UP\n*  FOR LONG OR SHORT PRECISION AS REQUIRED.\n         SPACE\nCNVINSTE EQU   *                   SHORT PRECISION\n         STD   FPR0,CNVBUF2\n         MVC   CNVBUF2+1(3),CNVCNST1+1\n         AD    FPR0,CNVBUF2\n         BR    ADR\n         STE   FPR0,CNVBUF3\n         LD    FPR0,CNVBUF3\n         B     ENTIER1\n         STE   FPR0,CNVBUF3\n         LD    FPR0,CNVBUF3\n         SPACE\nCNVINSTD EQU   *                   LONG PRECISION\n         BR    ADR\n         DC    14X'FF'\n         B     ENTIER1\n         DC    8X'FF'\n         AD    FPR0,CNVCNST2\n         B     ENTIER1\nCNVINSTL EQU   *-CNVINSTD\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              G E T M A I N   R O U T I N E                          *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE ISSUES A CONDITIONAL GETMAIN IN RESPONSE TO A\n*  REQUEST BY THE OBJECT MODULE FOR STORAGE FOR AN ARRAY. IF STORAGE\n*  IS NOT AVAILABLE, AN ERROR EXIT IS TAKEN.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        BAL   ADR,GETMSTO(FSA)         LENGTH OF AREA IN GR0\n*        ---                            RETURN WITH ADDRESS IN GR1\n         SPACE\nGETMAIN  LR    GR2,GR0                  LENGTH VALUE\n         GETMAIN EC,LV=(GR2),A=GETMAINA\n         LTR   ENTRY,ENTRY\n         BNZ   NOMAIN(FSA)\n         L     GR1,GETMAINA\n          BR    ADR                     RETURN TO CALLING PROG\nGETMAINA DC    A(0)                     ADDRESS OF THE AREA\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        C A L L  A C T U A L  P A R A M E T E R  R O U T I N E       *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nCAP1A    EQU   *\nCAPA     EQU   *\n         SPACE\n*        THIS ROUTINE IS AN INTERMEDIATE LINK BETWEEN A PROCEDURE\n*  AND THE THUNK FOR AN ACTUAL PARAMETER TO THE PROCEDURE. IT SEARCHES\n*  THE DSA CHAIN FOR THE DSA OF THE PROCEDURE DECLARATION. THEN IT\n*  LOADS THE THUNK ADDRESS FROM THIS DSA, LOADS CDSA WITH THE DSA\n*  ADRESS OF THE ENCLOSING BLOCK AND BRANCHES TO THE THUNK.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        BAL    BRR,CAP1(FSA)\n*        DC    H'PBN1'                  PBN OF PROCEDURE\n*        DS    H\n*        L     ADR,DISPL(CDSA)          LOAD ADDRESS OF THUNK\n*        ---                            RETURN FROM THUNK VIA CAP2\n*                                       WITH PARAM ADDRESS IN ADR\n         SPACE\n         L     STH,RASPT(FSA)           RAS POINTER FROM TOP\n         ST    BRR,12(STH)             SAVE RETURN ADDRESS IN RAS  0050\n         LH    GP1,0(BRR)              PBN OF PROCEDURE            0050\n         LA    GP1,0(GP1,PBT)          PROCEDURE ENTRY IN PBT      0050\nCAPI1    LA    STH,8(STH)               RESERVE ONE ENTRY IN RAS\n         C     STH,RASPB(FSA)           CHECK FOR STACK\n         BNL   RASOVERF(FSA)            *OVERFLOW\n         ST    CDSA,0(0,STH)            SAVE DSA-POINTER IN RAS\n         AH    PBT,8(CDSA)             ADDR OF CURRENT PBT ENTRY   0050\n         L     GP2,0(CDSA)              LAST GENERATION DSA-POINTER IS\n         ST    GP2,0(PBT)              *STORED IN PBT ENTRY        0050\n         CR    GP1,PBT                 RIGHT PROCEDURE REACHED     0050\n         EX    0,4(0,BRR)               LOAD ADDRESS OF THUNK\n         L     CDSA,4(0,CDSA)           LOAD DYNAMICALLY ENCLOSING DSA\n         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT\n         ST    STH,RASPT(FSA)           SAVE RAS TOP POINTER\n         BCR   8,ADR                   TO THUNK OF ACTUAL PARAM    0050\n*                                           IF RIGHT BLOCK REACHED 0050\n         SR    GP2,GP2                 ZERO TO RETURN ENTRY IN     0050\n         ST    GP2,12(STH)             *RAS INSTEAD OF BRR         0050\n         B     CAPI1                                               0050\n         SPACE 3\nCAP2A    EQU   *\nCAPB     EQU   *\n         SPACE\n*        THIS ROUTINE HANDLES THE TRANSFER FROM THE THUNK BACK TO THE\n*  PROCEDURE. IT RELOADS CDSA WITH THE ADDRESS OF THE DSA THAT WAS\n*  ACTIVE WHEN CAP1 WAS ENTERED.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n         SPACE\n*        B     CAP2(FSA)\n         SPACE\n         L     STH,RASPT(FSA)           RAS POINTER FROM TOP\nCAPI3    L     CDSA,0(0,STH)            DSA-POINTER FROM RAS\n         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT\n         L     BRR,4(STH)               RETURN ADDRESS FROM RAS\n         SH    STH,EIGHT(FSA)           RELEASE ONE ENTRY IN RAS\n         LH    GP1,8(CDSA)              PROGRAM BLOCK NUMBER TO REG\n         ST    CDSA,0(GP1,PBT)          CURRENT DSA POINTER TO PBT\n         LTR   BRR,BRR                  CALLING BLOCK REACHED\n         BZ    CAPI3                    NO CONTINUE\nCAPI4    ST    STH,RASPT(FSA)           SAVE RAS TOP POINTER\n         B     8(0,BRR)                 RETURN TO CALLING SEQUENCE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              P R O L O G U E   P R O G R A M                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE IS EXECUTED WHENEVER A BLOCK OR PROCEDURE IS TO\n*  BE ENTERED. IT CREATES AND INITIALIZES A NEW DSA. FOR A PROCEDURE\n*  WITH PARAMETERS IT MOVES THE PARAMETER LIST TO THE DSA AND CHECKS IT\n*  AGAINST THE FORMAL PARAMETER LIST IN THE PROCEDURE DECLARATION.\n*  THEN IT ENTERS THE BLOCK OR PROCEDURE.\n*        THE ENTRY POINT PROLOGP IS USED ONLY WHEN THE PROCEDURE IS\n*  CALLED VIA AN ACTUAL PARAMETER TO ANOTHER PROCEDURE.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        BAL   BRR,PROLOG(FSA)\n*        MVI   PROLPBN(FSA),PBN         PBN OF BLOCK TO BE ENTERED\n*                                  PARAMETER LIST FOR PROCEDURE\n*        DC    A(THUNK1)                ADDR. OF THUNK FOR 1ST PARAM\n*        DC    H'CH'                    CHARACTERISTICS OF 1ST PARAM\n*        DC    H'N'                     NUMBER OF PARAMETERS\n*         .\n*         .\n*         .\n*        DC    A(THUNKN)                ADDR OF THUNK FOR LAST PARAM\n*        DC    H'CH'\n*        DC    H'0'\n         SPACE\nPROLP    EQU   *\n         MVI   PROLPBN-1(FSA),X'00'                              A28226\n*  SET OFF SW SET BY GENERATE PROG TO DETECT ERR, SEE BELOW.     A28226\n         LM    PBT,LAT,PROLREG(FSA)     UPDATE PBT AND LAT\n         SPACE\nPROL     EQU   *\n         SPACE\n         LH    R3,PROLPBN-1(FSA)        CALLED PROGRAM BLOCK NUMBER\n         SLL   R3,3                     CALCULATE PBT-DISPLACEMENT\n         LTR   R2,R3                    STANDARD PROCEDURE CALLED\n         BZ    SPDECL(0,FSA)            BRANCH IF YES\n         BM    OERR21(FSA)             ERROR, ACTUAL PROCEDURE   A28226\n*  PARAMETER IS PARAMETERLESS WHILE FORMAL PROCEDURE IS CALLED   A28226\n*  WITH PARAMETERS. PROLPBN-1 WAS SET TO X'FF' BY GENERATED PROG A28226\n*  BEFORE CAP1 WAS CALLED.                                       A28226\n         AR    R3,PBT                   ADDRESS OF PBT-ENTRY\n         TM    6(R3),BETABM             PROCEDURE CALLED\n         BZ    PROLOG1                  NO\n         C     ADR,ASTLOC(0,FSA)        COMP.CONT.OF ADR.WITH ADDR.OF\n*                                       *FUNCTIONVALUESTORAGE\n         BE    OERR21(0,FSA)            BRANCH IF EQUAL\n         TM    6(R3),CODEPRM            CODE PROCDURE CALLED\n         BO    PROLOG2                  YES\nPROLOG1  LH    R0,4(R3)                 LENGTH OF DSA TO REG 0\n         LR    R4,BRR                   SAVE BRR DURING GETMAIN\n         GETMAIN R,LV=(0)               GETMAIN FOR DSA\n         LR    BRR,R4\n         L     R0,0(R2,PBT)             LOAD POINTER OF LAST GENERATION\n         ST    R0,0(0,R1)               AND STORE IT IN DSA\n         ST    CDSA,4(0,R1)             STORE POINTER OF EMBRACING PB.\n         STH   R2,8(0,R1)               STORE PBT DISPLACEMENT\n         MVI   10(R1),X'00'             ZEROS TO VALUE ARRAY AND\n         MVC   11(5,R1),10(R1)          *ARRAY POINTERS\n         ST    R1,0(R2,PBT)             STORE CURR.DSA POINTER IN PBT\n         LR    CDSA,R1                  SET CDSA POINTER\n         STM   PBT,LAT,16(CDSA)\n         L     STH,RASPT(FSA)           RAS-POINTER TOP\n         LA    STH,8(STH)               RESERVE ONE ENTRY\n         C     STH,RASPB(FSA)           COMPARE WITH RAS-POINTER BOTTOM\n         BNL   RASOVERF(FSA)            STACK OVERFLOW\n         ST    CDSA,0(0,STH)           *\n         MVI   0(STH),X'FF'            *\n         ST    STH,RASPT(FSA)           SAVE POINTER\n         TM    6(R3),BETABM             PROCEDURE CALLED\n         BCR   8,BRR                    NO,USUAL BLOCK RETURN,EXIT 1\n         SPACE 2\nA4       CLI   7(R3),X'00'              ANY FORMAL PARAMETERS\n         BE    F4                       BRANCH IF ZERO\n         CLC   7(1,R3),7(BRR)           COMP.NR.OF FORM AND ACT.PARAM.\n         BNE   OERR21(0,FSA)            BRANCH IF NOT EQUAL\n         SR    R2,R2\n         IC    R2,7(R3)                 FETCH NUMBER OF PARAMETERS\n         LR    R4,R2                    SAVE NUMBER IN REG 4\n         SLL   R2,3                     CALCULATE LENGTH OF PARAMETER\n         BCTR  R2,0                     *ENTRY-1\n         LA    R1,24(CDSA)             START OF PARAM. IF PROC.  A28225\n         TM    6(R3),PIMASK             FUNCTION PROCEDURE CALLED\n         BZ    PROLOG3                 YES                       A28225\n         EX    R2,PIMOVE\n         B     LOOP\nPIMOVE   MVC   24(1,CDSA),0(BRR)        MOVE PROCEDURE PARAMETERS\nPHIMOVE  MVC   32(1,CDSA),0(BRR)        MOVE FUNCTION PARAMETERS\nPROLOG3  EX    R2,PHIMOVE\n         LA    R1,8(R1)                START OF PARAM. IF TYPE   A28225\nLOOP     TM    0(ADR),X'01'             IS FORM.PAR.'STRING'\n         BO    STRTST                   IF YES GO TO STRINGTEST\n         CLI   1(ADR),X'D0'             IS FORM.PAR.'PROC.' WITHOUT TYP\n         BE    PROTST                   IF YES GO TO PROCEDURETEST\n         CLI   1(ADR),X'1C'             IS FORM.PAR.'SWITCH'\n         BE    SWTTST                   IF YES GO TO SWITCHTEST\n         TM    1(ADR),X'08'             IS FORM.PAR. 'LABEL'\n         BO    LBLTST                   IF YES GO TO LABELTEST\n         TM    1(ADR),X'04'             IS FORM.PAR. 'ARRAY'\n         BO    ARRTST                   IF YES GO TO ARRAYTEST\n         TM    1(ADR),X'C0'             IS FORM.PAR.A TYPPROCEDURE\n         BO    TPRTST                   IF YES GO TO TYPPROCEDURETEST\n         TM    5(BRR),X'04'             IS ACT.PAR. 'ARRAY'        5605\n         BO    OERR20(0,FSA)            IF YES ERR.20              5605\nTYPTST   TM    1(ADR),X'03'             TEST TYP\n         BM    ARITST                   IF ARITHM.TYP GO TO ARITH.TEST\n         TM    5(BRR),X'03'             TEST IF ACT.PAR.IS BOOL\n         BO    ASSFLAG                 YES, SPECIAL ASGNMENT TST A28225\n         B     OERR20(0,FSA)            IF NOT GO TO ERR.20\nSTRTST   TM    4(BRR),X'01'             TEST IF ACT.PAR.IS 'STRING'\n         BO    EXIT                     IF YES TEST NEXT PAR.\n         B     OERR20(0,FSA)            IF NOT BRANCH TO OBJ.T.ERR.20\nPROTST   TM    5(BRR),X'C0'             TEST IF ACT.PAR.IS 'PROCEDURE'\n         BZ    OERR20(0,FSA)            IF NOT ERR.20\n         B     EXIT                     IF YES TEST NEXT PAR.\nSWTTST   TM    5(BRR),X'0C'             TEST IF ACT.PAR.IS 'SWITCH'\n         B     STRTST+4  IF YES TEST NEXT PAR.IF NOT GO TO ERR.20\nLBLTST   TM    5(BRR),X'08'             TEST IF ACT.PAR.IS 'LABEL'\n         BZ    OERR20(0,FSA)            IF NOT ERR.20\n         TM    5(BRR),X'04'             TEST IF ACT.PAR.IS 'SWITCH'\n         BO    OERR20(0,FSA)            IF YES ERR.20\n         B     EXIT                     TEST NEXT PAR.\nARRTST   TM    5(BRR),X'04'             TEST IF ACT.PAR.IS 'ARRAY'\n         BZ    OERR20(0,FSA)            IF NOT ERR.20\n         B     TYPTST                   IF YES GO TO TYPTEST\nTPRTST   TM    5(BRR),X'C0'             TEST IF ACT.PAR.IS 'PROCEDURE'\n         BZ    OERR20(0,FSA)            IF NOT ERR.20\n         B     TYPTST                   IF YES GO TO TYPTEST\nARITST   TM    5(BRR),X'03'             ACTUAL PAR. ARITHMETIC\n         BC    9,OERR20(FSA)            NO\n         TM    1(ADR),X'10'             FORMAL PARAMETER CALLED BY NAME\n         BZ    PARAMPR                  NO\n         TM    1(ADR),X'02'             FORMAL PARAMETER REAL TYPE\n         BZ    INTTST                   NO INTEGER TYPE\n         TM    5(BRR),X'02'             ACTUAL PARAMETER REAL\n         BZ    OERR20(FSA)              NO ERROR\n         B     ASSFLAG2                SPECIAL ASGNMENT TST      A28225\nINTTST   TM    5(BRR),X'01'        ACTUAL PARAMETER INTEGER\n         BZ    OERR20(FSA)              NO ERROR\n         SPACE\n*  SPECIAL TST IF ACT PARAMETER IS FORMAL BY NAME AND THEN MOVE  A28225\n*  THE ASGNMENT FLAG FR ACT PARAMETER ENT IN DSA TO THE NEW      A28225\n*  PARAMETER ENT IN DSA OF BLK TO BE ENTERED.                    A28225\n         SPACE\n*  NOTE: THIS CODE IS EXTREMELY DEPENDENT ON CODE GENERATED FOR  A28225\n*        FORMAL PARAMETERS CALLED BY NAME.                       A28225\n         SPACE\nASSFLAG  TM    1(ADR),X'10'            FORMAL PARM. BY NAME      A28225\n         BZ    PARAMPR                 NO                        A28225\nASSFLAG2 TM    5(BRR),X'10'            CHK IF ACT IS TYPE        A28225\n         BZ    PARAMPR                      CALLED BY NAME       A28225\n         TM    5(BRR),X'20'            IF NOT GO TO SPECIAL      A28225\n         BO    PARAMPR                      PARAMETERLESS PR TST A28225\n         L     R2,4(CDSA)              DSA OF CALLING SEQUENSE   A28225\n         L     R2,16(R2)               PBT ADDR OF CALLING SEQ.  A28225\n         L     R3,0(R1)                ADDR OF THUNK OF ACT PARM A28225\n*                                           WHICH IS FORMAL      A28225\n         MVC   ORI+5(1),11(R3)         MOVE DISPL OF PARAM FOUND A28225\n*                                       IN THUNK CODE TO OR INST A28225\n         IC    R3,4(R3)            DISPLACEMENT OF               A39600\n         N     R3,MASKFF           PROCEDURE IN PBT              A39600\n         L     R3,0(R3,R2)             ADDR OF DSA OF PROCEDURE  A28225\n         LA    R3,4(R3)                ADDR CHARACTERISTIC PART  A28225\n*                                           OF PARAMETER ENTRY   A28225\nORI      OC    4(1,R1),0(R3)           MOVE ASGNMENT BIT FROM    A28225\n*                                       CALLING PARAMETER ENT IN A28225\n*                                       DSA TO NEW DSA ENT       A28225\nPARAMPR  EQU   *                   TEST IF ACTUAL PARAMETER IS\n*                                  PARAMETERLESS PROCEDURE\n         TM    5(BRR),X'C0'             ACTUAL PARAMETER PROCEDURE\n         BZ    EXIT                     NO\n         TM    5(BRR),X'30'                                        0050\n         BM    EXIT                                                0050\n         TM    1(ADR),X'D0'             FORMAL PROC. CALLED BY NAME\n         BO    EXIT                     YES EXIT\n         TM    4(BRR),X'C0'        PROCEDURE CALLED\n         BO    OERR20(FSA)                                         0050\nEXIT     LA    BRR,8(0,BRR)             GET NEXT ACT.PAR.ADDR.\n         LA    ADR,2(0,ADR)             GET NEXT FORM.PAR.ADDR.\n         LA    R1,8(R1)                NEXT PARAMETER IN DSA     A28225\n         BCT   R4,LOOP                  IF A NEXT PAR.OCCURS GO TO LOOP\nF4       ST    BRR,4(0,STH)             STORE RETURN ADDRESS IN RAS\n         BR    ADR                      EXIT 2\n         SPACE 2\nPROLOG2  EQU   *                   PRECOMPILED PROCEDURE CALLED\n         L     R1,0(R3)                 ADDRESS OF PRECOMP PR CONST\n         LM    PBT,LAT,0(R1)            LOAD NEW PBT AND LAT ADDRESSES\n         CLC   7(1,R3),15(PBT)          PARAMETER DEFINITION IN CODE\n*                                       *PROCEDURE SAME AS IN LOADED\n*                                       *PRECOMPILED PROCEDURE\n         BNE   OERR21(FSA)              NO,ERROR 21\n         L     ADR,8(R1)                PROCEDURE DECLAR.ENTRY POINT\n         MVI   PROLPBN(FSA),1           PBN OF PROCEDURE IS 1\n         B     PROLOG(FSA)              CALL PRECOMPILED PROCEDURE\nMASKFF   DC    X'000000FF'         MASK TO CLEAR 3 BYTES OF REG  A39600\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              V A L U E  C A L L  R O U T I N E                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*               SUBROUTINE FOR HANDLING FORMAL PARAMETERS\n*              CALLED BY VALUE\n* USED FOR FORMAL PARAMETERS OF TYPE REAL,INTEGER OR BOOLEAN,INCLUDING\n* ARRAYS.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        CALL ACTUAL PA{AMETER\n*        BAL   BRR,VALUCALL(FSA)\n*        DC    H'DISPL'                 FORMAL PARAMETER DISPLACEMENT\n*        DC    XL2'  '                  CHARACTERISTIC OF PARAMETER\n*        ---                            RETURN FROM VALUCALL\n*  DISPL(CDSA) CONTAINS IF PARAMETER IS AN ARRAY ADDRESS OF SMF\n*  OTHERWISE VALUE OF THE ACTUAL PARAMETER,CONVERTED IF NECESSARY\n*\n         SPACE\nVALUCAL  EQU   *\n         MVI   CONVFL,X'00'        ZERO TO CONVERSION FLAG\n         ST    BRR,BRRSAVE         SAVE BRR,ADR\n         ST    ADR,ADRSAVE\n         LH    R1,0(BRR)\nVALUC10  LA    STH,0(R1,CDSA)\n*\n*              INSERT COMPONENT SIZE OF ORIGINAL\n*\n         MVI   CSIZORIG+1,X'01'    ONE TO COMP SIZE INCASE BOOLEAN\n         TM    5(STH),X'03'        TEST ACTUAL PARAMETER TYPE\n         BO    VALUC12             BR IF BOOLEAN\n         MVI   CSIZORIG+1,X'04'    FOUR TO COMPONENT SIZE\n         TM    5(STH),X'01'        TEST IF ACTUAL PAR 'INTEGER'\n         BO     VALUC00            BR IF INTEGER\n         TM     OPTSW(FSA),X'20'   TEST PRECISION\n          BO    VALUC00            BR IF SHORT PRECISION\n          MVI  CSIZORIG+1,X'08'    EIGHT TO COMPONENT SIZE\n*\nVALUC00  EQU   *\n         TM    5(STH),X'02'        TEST IF ACTUAL PARAMETER 'REAL'\n         BO    VALUC11             BR IF YES\n*        ACTUAL PARAMETER INTEGER\n*\n         TM    3(BRR),X'01'        TEST IF FORMAL PAR 'INTEGER'\n         BO    VALUC12                  BRANCH IF YES\n*\n         MVI   CONVFL,X'01'        1 (= INTEGER TO REAL) TO FLAG\n         B     VALUC12\n*\n*        ACTUAL PARAMETER REAL\nVALUC11  EQU   *\n         TM    3(BRR),X'02'        TEST IF FORMAL PAR 'REAL'\n         BO    VALUC12                  BRANCH IF YES\n         MVI   CONVFL,X'03'        3 (=REAL TO INTEGER) TO FLG\n*\nVALUC12  EQU   *\n         MVC   CSIZCOPY+1(1),CSIZORIG+1      COPY COMPONENT SIZE\n         TM    3(BRR),X'04'\n         BO    VALUC21             BR IF ARRAY\n*\nVALUC13  EQU   *\n         MVC   0(8,STH),0(ADR)     MOVE CONT OF 'ADR' TO CDSA\n*\n         LR    R1,STH                   ADDRESS OF FORMAL PARAM ENTRY\n         LR    R2,R1                    STORE BACK AFTER CONVERSION\n         LA    R5,4(BRR)           RETURN ADDRESS\nVALUC14  TM    CONVFL,X'03'             CONVERSION NECESSARY\n         BCR   8,R5                     NO RETURN\n         BO    VALUC15                  REALL-INTEGER\n*  CALL INTEGER REAL CONVERSION ROUTINE\n         L     STH,0(R1)\n         BAL   ADR,CNVIRD(FSA)\n         EX    0,VALST\n         BR    R5                       RETURN\n*CALL REAL-INTEGER CONVERSION ROUTINE\nVALUC15  EX    0,VALLD\n         BAL   ADR,CNVRDI(FSA)\n         ST    STH,0(R2)\n         BR    R5                       RETURN\n*\n*\n*              HANDLE VALUE CALL OF ARRAY\n*\nVALUC21  EQU   *\n         MVC   SIZEARR(4),16(ADR)         SIZE OF ORIGINAL ARRAY\n         L     BRR,8(ADR)\n         S     BRR,4(ADR)          DIFF (ADDRLOWCOMP - ADRZEROCOMP)\n         ST    BRR,DIFFLZ\n*\n         MVI   SMFFL,X'00'          ZERO TO SMF-FLAG\n*\n         TM    OPTSW(FSA),X'20'    TEST PRECISION\n         BO    VALUC31             BR IF SHORT PRECISION\n         TM    CONVFL,X'03'        TEST CONV FLAG\n         BZ    VALUC31             BR IF NO CONV NECESS\n         MVC   SMFFL(1),CONVFL     CONV FLAG TO SMF-FLAG\n*\n         L     BRR,SIZEARR\n         L     STH,DIFFLZ\n         LH    R1,CSIZCOPY\n         BO    VALUC25\n*\n*              INCREM 'SIZEOFARRAY', DIFF AND COMPONENT SIZE\n*\n         SLA   BRR,1\n         SLA   STH,1\n         SLA   R1,1\n         B     VALUC26\n*\n*              DECREMENT 'SIZE OF ARRAY', DIFF AND COMPONENT SIZE\n*\nVALUC25  EQU   *\n         SRA   BRR,1\n         SRA   STH,1\n         SRA   R1,1\nVALUC26  EQU   *\n         ST    BRR,SIZEARR\n         ST    STH,DIFFLZ\n         STH   R1,CSIZCOPY\n*\n*              EXECUTE SUBROUTINE WITH 'GETMAIN'\n*\nVALUC31  EQU   *\n         SR    BRR,BRR\n         IC    BRR,0(ADR)          NUMBER OF SUBSCRIPTS\n         LA    BRR,5(BRR)\n         SLA   BRR,2\n         CLI   CSIZCOPY+1,X'08'         REAL ARRAY LONG\n         BNE   VALUC32                  NO\n         TM    0(ADR),X'01'             SMF LENGTH DOUBLE WORDS\n         BO     VALUC32                 YES\n         LA    BRR,4(BRR)               FOURCE ARRAY TO DOUBLE WORD\nVALUC32  EQU   *\n         STC   BRR,SIZESMF+1       INSERT SIZE OF SMF\n         LH    0,SIZESMF\n         A     0,SIZEARR           NUMBER OF BYTES REQUESTED\n         BAL   ADR,GETMSTO(FSA)\n*\n*              COPY SMF\n*\n         L     ADR,ADRSAVE\nVALUC33  MVC   0(1,R1),0(ADR)\n*\n*              INSERT FIRST FOUR WORDS INTO SMF-COPY\n*\n         MVC   2(2,R1),10(CDSA)         CHAIN DISPL FROM DSA\n         L     BRR,BRRSAVE\n         LH    R2,0(BRR)                DISPL OF OF FORMAL PARAM. ENTRY\n         STH   R2,10(CDSA)              CHAIN DISPL\n         ST    R1,0(R2,CDSA)            ADDRESS OF VALUE ARRAY\n*                                       TO FORMAL PARAMETER ENTRY\n         LR     BRR,R1\n         AH     BRR,SIZESMF\n         ST    BRR,8(R1)\n         S     BRR,DIFFLZ\n         ST    BRR,4(R1)\n         A     BRR,DIFFLZ\n         A     BRR,SIZEARR\n         ST    BRR,12(R1)\n*\n*      COPY,   DOUBLE OR HALF P-VALUES INTO NEW SMF\n*\n         LA    BRR,16(R1)\n         LA    R2,16(ADR)\n*\nVALUC35  L     STH,0(R2)\n         TM    SMFFL,X'03'         TEST IF P-VALUES MUST CHANGE\n         BZ    VALUC36\n         SLL   STH,1\n         BM    VALUC36             BR IF FLAG=1 (INCREM IS OK)\n         SRL   STH,2               DECREMENT INSTEAD\nVALUC36  ST    STH,0(BRR)\n         LA    BRR,4(BRR)\n         LA    R2,4(R2)\n         C     BRR,8(R1)\n         BL    VALUC35\n*\n*              COPY ARRAY\n*\nVALUC41  EQU   *\n*\n*              INITIALIZE COPYING\n*\n         L     R3,SIZEARR               SIZE OF ARRAY\n         L     R2,8(R1)                 ADDRESS OF COPY ARRAY\n         L     R1,8(ADR)                ADDRESS OF ORIGINAL ARRAY\n         TM    CONVFL,X'03'             CONVERSION NESSESARRY\n         BZ    VALUC61                  NO MOVE ARRAY\nVALUC51  BAL   R5,VALUC14          CONVERT ONE ELEMENT ,STORE IT\n         AH    R1,CSIZORIG              NEXT ELEMENT FROM ORIGINAL\n         AH    R2,CSIZCOPY              NEXT ELEMENT FROM \"OPY\n         SH    R3,CSIZCOPY\n         BP    VALUC51                  CONTINUE IF ELEMENTS LEFT\nVALUC52  L     BRR,BRRSAVE\n         B     4(BRR)              RETURN\nVALUC61  LA    R4,255                   MAX IN ONE MOVE\n         BCTR  R3,0                     SIZE-1\n         CR    R3,R4\n         BNH   VALUC62                  NOT MORE THAN 256 BYTES\n         EX    R4,VALUC63               MOVE 256 BYTES\n         SR    R3,R4                    REDUCE SIZE\n         LA    R1,256(R1)\n         LA    R2,256(R2)\n         B     VALUC61+4                CONTINUE\nVALUC62  EX    R3,VALUC63          MOVE LAST PART OF ARRAY\n         B     VALUC52                  RETURN\nVALUC63  MVC   0(0,R2),0(R1)            ORIGINAL ARRAY TO COPY\n*              WORK AREA\n*\nBRRSAVE  DC    F'0'                STORAGE OF BRR\nADRSAVE  DC    F'0'                STORAGE AF 'ADR'\nDIFFLZ   DC    F'0'                DIFF BETW LOW AND ZERO COMPONENTS\nSIZEARR  DC    F'0'                     SIZE OF ARRAY\nSIZESMF  DC    H'0'                SIZE OF SMF\nCSIZORIG DC    H'0'                COMPON SIZE, ORIGINAL\nCSIZCOPY DC    H'0'                COMPON SIZE, COPY\nCONVFL   DC    X'00'               CONVERSION FLAG\nSMFFL    DC    X'00'                ARRAY SIZE FLAG\n*\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              R E T U R N   P R O G R A M                            *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE IS ENTERED WHEN A BRANCH IS MADE OUT OF A BLOCK\n*  OR PROCEDURE BY MEANS OF A 'GO TO' STATEMENT. IT SEARCHES RAS FOR AN\n*  ENTRY POINTING TO THE DSA OF THE TARGET BLOCK. FOR EACH BLOACK THAT\n*  IS BYPASSED, THE FREEDSA ROUTINE IS INVOKED TO RELEASE STORAGE FOR\n*  DSA AND ARRAYS.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        B     RETPROG(FSA)\n         SPACE\nRETPROGA EQU   *\n         BALR  BRR,0                    SET RETURN REGISTER\n         L     STH,RASPT(FSA)           FETCH RAS TOP POINTER\nRETPR1   CLI   0(STH),RASPARMM          RAS PARAMETER ENTRY\n         BNE   PBNENTRY                 NO\n         SH    STH,EIGHT(0,FSA)    CLEAR PARAMETERENTRY\n         B     RETPR1                   TEST NEXT ENTRY\nPBNENTRY IC    R1,0(STH)                SAVE FLAG\n         MVI   0(STH),X'00'             CLEAR FLAG\n         L     CDSA,0(STH)             UPDATE DSA REG              1512\n         C     GDSA,0(0,STH)       COMPARE DSA-ADDRESS\n         STC   R1,0(STH)                RESTORE FLAG\n         ST    STH,RASPT(FSA)           SAVE RAS POINTER\n         BCR   8,ADR                    IF EQUAL EXIT TO ADDRESS IN ADR\n         B     FREEDSA(FSA)             FREE DSA SUBROUTINE IN EPILOG\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              E P I L O G U E   P R O G R A M                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE IS EXECUTED WHENEVER AN EXIT IS MADE FROM A\n*  PROCEDURE (ENTRY POINT EPILOGP) OR BLOCK (ENTRY POINT EPILOGB) VIA\n*  THE 'END' STATEMENT. IT CLEARS THE CORRESPONDING ENTRY FROM RAS AND\n*  FREES THE STORAGE FOR DSA AND ARRAYS. IF THE EXIT WAS FROM A\n*  PRECOMPILED PROCEDURE, THE PROCEDURE IS DELETED.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        B     EPILOGP(FSA)\n         SPACE\nEPILP    EQU   *\n         MVC   FCTVALST(8,FSA),24(CDSA)     FUNCTION BALUE TO FSA\n         LA    ADR,FCTVALST(FSA)        FUNCTION VALUE ADDRESS TO ADR\n         BAL   BRR,FREEDSA(FSA)         LEAVE BLOCK AND UPDATE REG.\n         L     STH,RASPT(FSA)\n         L     BRR,12(STH)              RETURN ADDRESS FROM RAS\n         BR    BRR                      RETURN\n         SPACE 3\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        B     EPILOGB(FSA)\n         SPACE\nEPILB    EQU   *\nFREEDSA  EQU   EPILOGB             LEAVE A BLOCK,FREEMAIN UPDATE REG\nFRDSA    EQU   *\n         ST    BRR,BRRST(FSA)           SAVE RETURN ADDRESS\n         L     STH,RASPT(FSA)           FETCH RAS-POINTER\n         SH    STH,EIGHT(FSA)           REDUCE RETURN ADDRESS STACK\n         ST    STH,RASPT(FSA)           SAVE RAS-POINTER\n         CLI   8(STH),RASLOADM          LOAD PROCEDURE ENTRY\n         BNE   VTEST                    NO\n         L     R1,RASPB(FSA)            FETCH ADDRESS OF NAME OF\n         LR    R0,R1                    *PROCEDURE TO BE DELETED\n         LA    R1,8(R1)                 CLEAR PRECOMPILED PROCEDURE\n         ST    R1,RASPB(FSA)            *NAME FROM RAS\n         DELETE  EPLOC=(0)\n         B     FRDSA+4                  CONTINUE\n         SPACE 3\n********       V A L U E   A R R A Y   H A N D L I N G\n         SPACE 3\nEPIL3    EQU   *\nVTEST    SR    0,0                 CLEAR A WORKREGISTER\n         CH    0,10(0,CDSA)        TEST VALUE ARRAY FIELD\n         BE    ATEST               IF ZERO GO TO NEXT TEST\n         LH    R2,10(0,CDSA)       LOAD LAST VALUE ARRAY DISPLACEMENT\n         L     R1,0(R2,CDSA)       LOAD ADDRESS OF STOR.MAP.FCT.\n         L     R0,16(0,R1)         LOAD LENGTH OF ARRAY\n         LH    R2,2(0,R1)          LOAD BEFORE LAST VALUE ARRAY DISPL.\n         STH   R2,10(0,CDSA)       STORE BEFORELAST VALUE ARRAY DISPL.\n         SR    R2,R2               CLEAR A WORKREGISTER\n         IC    R2,0(0,R1)       ***\n         LA    R2,1(0,R2)         *CALCULATE LENGTH OF STORAGE\n         SLL   R2,2(0)            *   MAPPING FUNCTION\n         LA    R2,16(0,R2)      ***\n         AR    R0,R2               ADD ST.MAP.FUCT.LENGTH AND ARR.LGTH.\n         FREEMAIN R,LV=(0),A=(1)   FREEMAIN FOR VAL.ARR.INCL.ST.MAP.FCT\n         B     VTEST               RETURN TO VALUE ARRAY TEST\n         SPACE 3\n********       A R R A Y   H A N D L I N G\n         SPACE 3\nATEST    SR    R0,R0               CLEAR A WORKREGISTER\n         CH    R0,14(0,CDSA)       TEST ARRAY FIELD\n         BE    DSAHDL              IF ZERO GO TO DSAHDL\n         LH    R2,14(0,CDSA)       LOAD LAST ARRAY DISPL.\n         LH    R3,2(R2,CDSA)       LOAD BEFORE LAST ARRAY DISPL.\n         STH   R3,14(0,CDSA)       STORE BEFORELAST ARRAY DISPL\n         L     R1,8(R2,CDSA)       LOAD ADDRESS OF LOWEST COMPON.\n         L     R0,16(R2,CDSA)      LOAD LENGTH OF ARRAY\n         FREEMAIN R,LV=(0),A=(1)   FREEMAIN FOR ARRAY\n         B     ATEST               RETURN TO ARRAY TEST\n         SPACE 3\n********       D S A   H A N D L I N G\n         SPACE 3\nDSAHDL   LR    R1,CDSA             LOAD DSA-ADDRESS\n         LH    R2,8(CDSA)               LOAD PBT-DISPL.\n         L     R3,0(CDSA)               UPDATE DSA-ADDRESS\n         ST    R3,0(R2,PBT)             *IN PBT\n         LH    R0,4(R2,PBT)             LENGTH OF DSA TO REG 0\n         L     CDSA,4(0,CDSA)      RESET CDSA-POINTER\n         LM    PBT,LAT,16(CDSA)         UPDATE PBT AND LAT REGISTERS\n         FREEMAIN R,LV=(0),A=(1)   FREEMAIN FOR DSA\n         L     BRR,BRRST(FSA)           RESTORE RETURN ADDRESS\n         BR    BRR                 BRANCH\n         EJECT\n         SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        STANDARD PROCEDURE DECLARATION RUTINE                        *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        ENTERED FROM THE PROLOG ROUTINE IF PBN IS ZERO, I. E. A\n*  STANDARD PROCEDURE IS CALLED VIA AN ACTUAL PARAMETER TO AN ANOTHER\n*  PROCEDURE.\n*        ON ENTRY, BRR CONTAINS THE ADDRESS OF THE PARAMETER LIST,\n*  WHILE ADR CONTAINS THE INTERNAL NAME OF THE STANDARD PROCEDURE.\n*        THE ROUTINE BUILDS THE PARAMETER LIST AND EXECUTES THE CALL\n*  IN THE SAME WAY AS WOULD NORMALLY BE DONE BY THE GENERATED OBJECT\n*  CODE. SINCE THE ROUTINE MAY BE ENTERED REPEATEDLY DURING THE\n*  EVALUATION OF THE ACTUAL PARAMETERS, THE PARAMETER LIST AND OTHER\n*  INFORMATION IS STORED IN A DYNAMIC AREA CALLED SPDA.\n         SPACE 3\n         DS    0H\nSPDECL   EQU   *-FSAREA\n         SPACE 3\n*  TEST FOR AUXILIARY ROUTINE INPUT OR OUTPUT\n         SPACE\n         LTR   ADR,ADR\n         BCR   2,ADR                    TO ROUTINE INPUT OR OUTPUT\n         SPACE\n*  GET DYNAMIC STORAGE AREA\n         SPACE\nSPDECL00 EQU   *\n         LR    GR2,BRR                  SAVE BRR DURING GETMAIN\n         GETMAIN R,LV=SPDALG\n         LR    BRR,GR2\n         MVC   0(4,GR1),SPDAP           INSERT CHAIN ADDRESS\n         ST    GR1,SPDAP                STORE CURRENT AREA POINTER\n         LR    SPDABASE,GR1\n         USING SPDA,SPDABASE\n         SPACE\n         ST    ADR,PRID\n         LR    GR4,LAT                  GR4 IS NOW LAT POINTER\n         LR    GR0,ADR\n         LR    GR2,GR0\n         SRL   GR2,12\n         N     GR0,=F'3'                NUMBER OF FORMAL PARAMETERS\n         BNZ   *+8                      ZERO MEANS ONE PARAMETER\n         LA    GR0,1\n         CH    GR0,6(BRR)               COMPARE NUMBER OF ACTUAL PARAM.\n         BNE   ERROR21\n         SPACE\n*  INITIALIZE FOR CREATING PARAMETER LIST\n         SPACE\n         LA    GR1,PARLIST\n         LA    GR3,PARAMS\n         MVI   0(GR1),0\n         MVC   1(11,GR1),0(GR1)         RESET PARAMETER LIST\nSPDECL02 STC   GR2,FPTYPA\n         STC   GR2,FPTYP\n         XC    FPTYP,5(BRR)             COMPARE WITH ACTUAL PAR. CHAR.\n         TM    FPTYP,X'07'\n         BZ    SPDECL15                 IDENTICAL TYPES\n         BO    PARERR(FSA)              NOT COMPATIBLE TYPES\n         SPACE\n*  TYPES ARE NOT IDENTICAL BUT MAY BE COMPATIBLE\n         SPACE\n         TM    FPTYPA,X'08'        TEST FOR VALUE OR NAME\n         BO    PARERR(FSA)              CALL BY NAME AND NOT SAME TYPE\n         TM    FPTYP,X'03'              TEST IF REAL-INTEGER COMPATIBLE\n         BNO   PARERR(FSA)\n         TM    5(BRR),X'03'             TEST ACTUAL PARAMETER\n         BNM   PARERR(FSA)              IF NOT REAL OR INTEGER\n         OI    0(GR1),X'80'             SET TYPE CONVERSION FLAG\n         SPACE\n*  ACTIVATE THUNK TO GET ADDRESS OF ACTUAL PARAMETER\n         SPACE\nSPDECL15 STM   BRR,GR4,SPSAVE\n         MVC   SPTHAD(4),0(BRR)         THUNK ADDR TO FULLWORD LOC.\n         L     GR3,RASPT(FSA)\n         LA    GR3,8(GR3)               NEXT ENTRY IN RAS\n         C     GR3,RASPB(FSA)\n         BNL   RASOVERF(FSA)            IF RAS FULL\n         ST    GR3,RASPT(FSA)\n         ST    CDSA,0(GR3)              DSA POINTER TO RAS\n         LM    PBT,LAT,16(CDSA)\n          LA   GR2,SPDECL17-8\n         ST    GR2,4(GR3)               ADDRESS USED BY CAP2\n         L     BRR,SPTHAD               ADDRESS OF THUNK\n         BR    BRR                      BRANCH TO THUNK\n         SPACE\n*  RETURN HERE VIA CAP2\n*  REG ADR CONTAINS ADDRESS OF ACTUAL PARAM\n         SPACE\nSPDECL17 EQU   *\n         L     SPDABASE,SPDAP           RESTORE SPDA POINTER\n         LM    BRR,GR4,SPSAVE           RESTORE REGISTERS\n         C     ADR,ASTLOC(FSA)\n         BNE   SPDECL19\n         MVC   0(8,GR3),0(ADR)          SAVE PARAM VALUE IN SPDA\n         LR    ADR,GR3\nSPDECL19 O     ADR,0(GR1)               COMBINE FLAGS AND PARAM ADDR\n         ST    ADR,0(GR1)               STORE PARAM ADDR IN PARLIST\n         TM    PRID,X'03'               TEST IF I/O PROCEDURE\n         BNZ   SPDECL01                 BR. IF OTHER\n         SPACE\n*  I/O PROCEDURE\n         SPACE\n         TM    PRID+2,X'02'             TEST IF SYSACT\n         BZ    SPDECL01                 BR IF NO\n         CH    GR0,=H'1'                TEST IF THIRD PARAM\n         BNE   SPDECL01                 BR IF NO\n         TM    4(BRR),X'08'             TEST IF ASSIGNMENT POSSIBLE\n         BZ    SPDECL01                 BR IF YES\n         OI    0(GR1),X'40'             SET NO ASSIGNMENT FLAG\n         SPACE\nSPDECL01 LA    GR1,4(0,GR1)             STEP PARLIST POINTER\n         LA    GR3,8(0,GR3)             STEP PARAMETER POINTER\n         LA    BRR,8(0,BRR)             STEP ACTUAL PARAMETER POINTER\n         SRL   GR2,4\n         BCT   GR0,SPDECL02             BR IF MORE PARAMETERS\n         SPACE\n*  PARAMETER LIST COMPLETE - ACTIVATE THE PROCEDURE\n         SPACE\n         ST    BRR,SPSAVE               SAVE RETURN ADDRESS\n         LA    GR1,PARLIST\n         TM    PRID+3,X'80'             TEST IF ABS/SIGN/LENGTH/ENTIER\n         BO    SPDECL03                 BR IF YES\n         IC    GR2,PRID+3\n         N     GR2,=X'000000FC'         GET DISPLACEMENT IN LAT\n         L     ENTRY,0(GR2,GR4)         LOAD ADDRESS OF PROCEDURE\n         TM    PRID,X'03'               TEST IF I/O PROCEDURE\n         BNZ   SPDECL04                 BR IF NO\n         SPACE\n*  I/O PROCEDURE EXIT\n         SPACE\n         BALR  RETURN,ENTRY\n         B     SPDECL18\n         SPACE\nSPDECL03 TM    PRID+3,X'50'\n         BNM   SPDECL04                 BR IF ABS OR ENTIER FUNCTION\n         TM    PRID+3,X'20'\n         BZ    SPDECL05                 BR IF SIGN FUNCTION\n         SPACE\n*  LENGTH FUNCTION\n         SPACE\n         L     GR1,0(GR1)\n         MVC   HW(2,FSA),0(GR1)\n         LH    GR0,HW(FSA)              LENGTH OF ENTIRE STRING FIELD\n         BCTR  GR0,0                    REDUCE BY TWO TO GET\n         BCTR  GR0,0                      ACTUAL STRING LENGTH\n         ST    GR0,FCTVALST(FSA)\n         B     SPDECL13\n         SPACE\n*  SIGN FUNCTION\n         SPACE\nSPDECL05 L     GR2,0(GR1)               LOAD PARAMETER ADDRESS\n         SR    GR0,GR0                  INITIALIZE OUTPUT VALUE\n         TM    0(GR1),X'80'             TEST FOR TYPE CONVERSION\n         BO    SPDECL06                 BRANCH IF YES\n         EX    0,LINSTR                 VALUE TO F.P. REG. 0\n         EX    0,LTRINSTR               TEST SIGN\n         B     SPDECL07\nSPDECL06 L     GR0,0(GR2)               VALUE TO G.P. REG. 0\n         LTR   GR0,GR0                  TEST SIGN\nSPDECL07 BZ    SPDECL08\n         LA    GR0,1                    FUNCTION VALUE=1\n         BP    SPDECL08\n         LCR   GR0,GR0                  FUNCTION VALUE=-1\nSPDECL08 ST    GR0,FCTVALST(0,FSA)\n         B     SPDECL13\n         SPACE\n*  MATHEMATICAL FUNCTIONS (INCLUDING ABS, ENTIER)\n         SPACE\nSPDECL04 L     GR2,0(GR1)\n         TM    0(GR1),X'80'             TEST IF TYPE CONVERSION\n         BZ    SPDECL09\n         L     STH,0(GR2)               LOAD PARAMETER VALUE\n         BAL   ADR,CNVIRD(FSA)\n         EX    0,STINSTR\n         MVC   0(4,GR1),ASTLOC(FSA)     CHANGE PARAMETER ADDRESS\n         B     SPDECL10\nSPDECL09 EX    0,LINSTR\nSPDECL10 CLI   PRID+3,X'80'             TEST IF ABS\n         BNE   SPDECL11                 BR IF NO\n         SPACE\n*  ABS FUNCTION\n         SPACE\n         EX    0,LPRINSTR               ABS VALUE TO F.P. REG 0\n         B     SPDECL14\n         SPACE\nSPDECL11 CLI   PRID+3,X'F0'             TEST IF ENTIER\n         BNE   SPDECL12\n         SPACE\n*  ENTIER FUNCTION\n         SPACE\n         BAL   ADR,ENTIER(FSA)\n         ST    STH,FCTVALST(FSA)\n         B     SPDECL13\n         SPACE\n*  ALL OTHER FUNCTIONS\n         SPACE\nSPDECL12 BALR  RETURN,ENTRY             BR TO SUBROUTINE\nSPDECL14 EX    0,STINSTR\nSPDECL13 L     ADR,ASTLOC(FSA)          ADDRESS OF FUNCTION VALUE\n         SPACE\nSPDECL18 EQU   *                   COMMON EXIT\n         SPACE\n         LR    GR1,SPDABASE\n         MVC   SPDAP(4),0(GR1)          RESTORE PREV. D.A. POINTER\n         L     GR2,SPSAVE               LOAD RETURN ADDR. (PREV. BRR)\n         FREEMAIN R,A=(1),LV=SPDALG\n         LM    PBT,LAT,16(CDSA)\n         BR    GR2                      RETURN TO CALLING PROGRAM\n         DROP  SPDABASE\n         SPACE\n*  CONSTANTS AND WORK AREAS\n         SPACE\nSPTHAD   DC    F'0'                     TEMP. STORAGE FOR THUNK ADDR.\nSPDAP    DC    F'0'                     POINTER TO CURRENT DYNAMIC AREA\nFPTYP    DS    C                        TYPE OF FORMAL PARAMETER\nFPTYPA   DS    C                        SAVE AREA FOR FPTYP\n         SPACE\n*  DYNAMIC STORAGE AREA\n         SPACE\nSPDA     DSECT\n         DS    F                        LINK TO LOWER D.A.\nSPSAVE   DS    6F                       REGS BRR,GR0,GR1,GR2,GR3,GR4\nPRID     DS    F                        PROCEDURE IDENTIFICATION\nPARLIST  DS    3F                       PARAMETER LIST\nPARAMS   DS    3D                       PARAMETER VALUES\nSPDALG   EQU   *-SPDA\n         SPACE\nIHIFSARA CSECT\n         EJECT\n         SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              CALL SWITCH ELEMENT SUBROUTINE                         *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*  THIS ROUTINE IS AN INTERMEDIATE LINK BETWEEN A SWITCH DESIGNATOR\n*  ANDA SWITCH LIST.IT SEARCHES THE DSA CHAIN FOR THE DSA OF THE\n*  SWITCH LIST AND BRANCHES TO THE CALLED SWITCH LIST ENTRY\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n* ADDRESS OF SWITCH LIST IN REG ADR,ADDRESS OF DSA FOR BLOCK IN WHICH\n* SWITCH IS DECLARED IN REG GDSA AND THE SWITCH ELEMENT NUMBER IN BRR\n         SPACE\n*        BAL   STH,CSWE1(FSA)\n*         ---                           RETURN VIA CSWE2 WITH BRANCH\n*                                       ADDRESS IN ADR AND ADDRESS OF\n*                                       DSA IN GDSA\n         SPACE\nCSWE1A   EQU   *\n         SPACE 3\n         LTR   BRR,BRR                  ELEMENT NUMBER POSITIV\n         BNH   SWDMERR(FSA)             NO,DIMENSION ERROR\n         CH    BRR,2(ADR)               COMPARE NR WITH SWITCH LIST NR\n         BH    SWDMERR(FSA)             DIMENSION ERROR\n         SLL   BRR,2\n         SPACE\n         L     GP3,RASPT(FSA)           RAS POINTER FROM TOP\nCSWEI1   LA    GP3,8(GP3)               RESERVE ONE ENTRY IN RAS\n         C     GP3,RASPB(FSA)           CHECK FOR STACK\n         BNL   RASOVERF(FSA)            *OVERFLOW\n         ST    CDSA,0(GP3)              STORE CDSA IN RAS\n         ST    STH,4(GP3)               SAVE RETURN ADDRESS IN STACK\n         SR    STH,STH                  NOT CALLING BLOCK INDICATION\n         CR    CDSA,GDSA                SWITCH BLOCK REACHED\n         BNE   CSWEI2                   NO\n         ST    GP3,RASPT(FSA)           SAVE RAS TOP POINTER\n         L     BRR,0(BRR,ADR)           ADDRESS OF SWITCH ELEMENT\n         BR    BRR\n         SPACE\nCSWEI2   LH    GP1,8(CDSA)              PROGRAM BLOCK DISPL.TO REG\n         L     GP2,0(CDSA)              LAST GENERATION DSA-POINTER IS\n         ST    GP2,0(GP1,PBT)           *STORED IN PROGRAM BLOCK TABLE\n         L     CDSA,4(CDSA)             LOAD DYNAMICALLY ENCLOSING DSA\n         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT\n         B     CSWEI1                   CONTINUE\n         SPACE 3\n         SPACE 3\n*  THIS ROUTINE HANDLES THE TRANSFER FROM THE SWITCH LIST BACK TO THE\n*  SWITCH DESIGNATOR . IT RELOADS CDSA WITH THE ADDRESS OF THE DSA THAT\n*  WAS ACTIVE WHEN CSWEU WAS ENTERED\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        B     CSWE2(FSA)\n         SPACE 3\nCSWE2A   EQU   *\n         SPACE\n         L     GP3,RASPT(FSA)           RAS POINTER FROM TOP\nCSWEI3   L     STH,4(GP3)               RETURN ADDRESS FROM STACK\n         SH    GP3,EIGHT(FSA)           RELEASE ONE ENTRY IN RAS\n         ST    GP3,RASPT(FSA)           SAVE RAS TOP POINTER\n         LTR   STH,STH                  RETURN ADDRESS FOUND\n         BCR   7,STH                    YES RETURN\n         L     CDSA,0(GP3)             NEW DSA-POINTER FROM RAS    0050\n         LH    GP1,8(CDSA)              PROGRAM BLOCK DISPL. TO REG\n         ST    CDSA,0(GP1,PBT)          CURRENT DSA-POINTER TO PBT\n         LM    PBT,LAT,16(CDSA)         PBT AND LAT CAN BE DIFFERENT\n         B     CSWEI3                   CONTINUE\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        L O A D  P R E C O M P I L E D  P R O C E D U R E            *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE IS ENTERED FROM THE DECLARATION OF A 'CODE'\n*  PROCEDURE. IT SEARCHES THE BOTTOM PART OF RAS FOR THE NAME OF THE\n*  PROCEDURE. IF IT IS NOT FOUND, THE PRECOMPILED PROCEDURE WITH THE\n*  SAME NAME IS LOADED AND ENTRIES ARE MADE IN RAS FOR THE NAME AND\n*  FOR THE ENTRY POINT.\n*        THE ENTRY POINT ADDRESS IS ALSO STORED IN THE PROGRAM\n*  BLOCK TABLE.\n         SPACE\n*  CALLING SEQUENCE                (ENTRY VIA BRLIST)\n*        BAL   ADR,LOADPP(FSA)\n*        DC    CL8(PPNAME)              NAME OF PRECOMP. PROCEDURE\n*        DC    H'PBN'                   PROG BLOCK NUMBER\n         SPACE\nLOADPPA  EQU   *\n         LM    R3,R4,RASEND(FSA)        RASEND AND RASPB TO REG.\n         LA    R2,8                     INCREMENT 8\nLOADPP2  CR    R3,R4\n         BNH   LOADPP1                  BRANCH IF STACK EMPTY\n         CLC   0(8,R4),0(ADR)           PROCEDURE ALREADY LOADED\n         LA    R4,8(R4)                 STEP TO NEXT PP NAME\n         BNE   LOADPP2                  NO,NAME NOT FOUND\n         L     R3,RASPT(FSA)            RAS POINTER FROM TOP\n         S     R4,RASPB(FSA)\n         SRL   R4,3                     NAME FOUND IN ENTRY NR R4\nLOADPP3  SR    R3,R2\n         CLI   8(R3),RASLOADM           LOAD PROCEDURE ENTRY\n         BNE   LOADPP3                  NO,CONTINUE SEARCH\n         BCT   R4,LOADPP3               BRANCH IF NOT RIGH ENTRY\n         L     R0,12(R3)                FETCH ADDRESS OF CONSTANTS\n         B     LOADPP4\nLOADPP1  EQU   *                   PROCEDURE MUST BE LOADED\n         L     R3,RASPT(FSA)\n         L     R4,RASPB(FSA)\n         AR    R3,R2                    RESERVE ONE ENTRY FROM TOP\n         SR    R4,R2                    RESERVE ONE ENTRY FROM BOTTOM\n         CR    R3,R4                    CHECK FOR\n         BNL   RASOVERF(FSA)            *STACK OVERFLOW\n         ST    R4,RASPB(FSA)            STORE UPDATED STACK POINTER\n         ST    R3,RASPT(FSA)\n         MVC   0(8,R4),0(ADR)           ENTER NAME IN STACK\n         LR    R0,R4                    R0 POINT TO NAME\n         LOAD  EPLOC=(0)\n         ST    CDSA,0(R3)               SAVE CDSA IN RAS-ENTRY\n         MVI   0(R3),RASLOADM           INSERT LOAD PROCEDURE FLAG\n         ST    R0,4(R3)                 STORE ADDRESS TO ENTRY CONSTANT\nLOADPP4  LH    R3,8(ADR)                FETCH PBN CODE PROCEDURE\n         ST    R0,0(R3,PBT)             ADDR.OF PRECOMPILED PROCEDURE\n*                                       CONSTANT TO CODE PROC.PBT ENTRY\n*                                       CONSTANT A(PBT),A(LAT),A(ENTRY)\n         B     10(ADR)                  RETURN TO DECLARATION END\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*                       T R A C E  R O U T I N E                      *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*        THIS ROUTINE IS EXECUTED WHENEVER THE END OF AN ALGOL\n*  STATEMENT IS REACHED, IF ANY OF THE PARAMETERS TRACE, TRBEG OR\n*  TREND WAS SPECIFIED. IT CHECKS IF THE SEMICOLON NUMBER IS\n*  WITHIN A TRACE AREA AND, IF THIS IS THE CASE, STORES IT IN A BUFFER\n*  FOR OUTPUT ON SYSUT1 WHEN THE BUFFER OVERFLOWS.\n*        WHEN A DISCONTINUITY IS ENCOUNTERED (TRANSFER INTO A TRACE\n*  AREA OR BETWEEN THE MAIN PROGRAM AND A PRECOMPILED PROCEDURE),\n*  THE NAME OF THE ACTIVE MODULE IS ALSO STORED IN THE BUFFER.\n*        THE FORMAT OF THE INFORMATION IN THE BUFFER IS\n*        DC    H'LENGTH'                POINTER TO NEXT FREE PLACE\n*        DS    H                        NOT USED\n*        DC    H'SC'                    SEMICOLON NUMBER\n*         .\n*         .\n*        DC    H'0'                     FLAG FOR MODULE NAME\n*         DC    CL4'NAME'               MODULE NAME (FIRST 4 CHAR)\n*        DC    H'SC'                    SEMICOLON NUMBER\n*         .\n*         .\n*\n*        THE ROUTINE IS ENTERED VIA INSTRUCTIONS IN THE BRANCH LIST\n*  AT BRLIST. THESE INSTRUCTIONS STORE THE SEMICOLON NUMBER AND THEN\n*  EXECUTE A BRANCH EITHER TO THIS ROUTINE OR, IF TRACE WAS NOT\n*  REQUESTED, DIRECTLY BACK TO THE ALGOL PROGRAM.\n         SPACE\n         SPACE\n*  CALLING SEQUENCE\n*        BAL   BRR,TRACE(FSA)\n*        DC    H'SC'                    SEMICOLON NUMBER\n*        ---                       (RETURN POINT)\n         SPACE 3\nTRACEA   STM   14,12,TRSAVE\n         L     GR3,=A(IHIFSARB)\n         USING IHIFSARB,GR3\n         LR    GR1,PBT\n         LM    RBEG,REND,TRBEG          LOAD TRACE LIMITS\n         LM    RBUF,RBUFC,TRBUF         LOAD BUFFER PARAMETERS\n         LH    RBUFP,0(0,RBUF)          LOAD BYTE POINTER\n         LH    GR2,TRL1                 LENGTH OF NORMAL TRACE ITEM\n         SPACE\n         CLC   4(4,GR1),TRMPNAME        TEST IF MAINP OR PRECOMP PROC\n         BE    TRACE10                  MAINP\n         TM    OPTSW(FSA),PPTRSW        TEST FOR TRACE IN PRECOMP. PR.\n         BZ    TRACE6                   NO P.P. TRACE              0207\n         TM    TRFLAG,X'03'             P.P.CALLED FROM TRACE AREA 0207\n         BM    TRACE0                   YES TRACE REQUIRED         0207\n         B     TRACE6                   CONDITIONAL - NO P.P. TRACE\nTRACE10  LH    RSC,SCRCS(FSA)           LOAD CURRENT SEMICOLON NR\n         CR    REND,RBEG                TEST INTERVAL LIMITS\n         BNH   TRACE13                  SINGLE INTERVAL\n         CR    RSC,RBEG                 CHECK SC AGAINST LIMITS\n         BL    TRACE15                  OUTSIDE INTERVAL\n         CR    RSC,REND\n         BH    TRACE15                  OUTSIDE INTERVAL\n         B     TRACE16                  INSIDE INTERVAL\nTRACE13  CR    RSC,REND                 DOUBLE INTERVAL\n         BH    TRACE14\nTRACE16  MVI   TRFLAG1,1                INSIDE LOWRE INTERVAL\n         B     TRACE18\nTRACE14  CR    RSC,RBEG\n         BL    TRACE15                  OUTSIDE BOTH INTERVALS\n         MVI   TRFLAG1,2                INSIDE HIGHER INTERVAL\nTRACE18  CLC   TRFLAG1,TRFLAG           HAS BORDER BEEN CROSSED\n         BE    TRACE0                   BR IF SAME INTERV. AS BEFORE\n         MVC   TRFLAG,TRFLAG1\n         B     TRACE5\nTRACE15  MVI   TRFLAG,0                 NO TRACE THIS TIME\n         B     TRACE6\n         SPACE\nTRACE0   CLC   4(4,GR1),TRPGID+2        HAS PROGID CHANGED\n         BE    TRACE1\nTRACE5   MVC   TRPGID+2(4),4(GR1)       STORE NEW PROGID\n         LH    GR2,TRL2                 LENGTH OF ITEM WITH PROGID\nTRACE1   LR    GR0,GR2                  IS BUFFER FILLED\n         AR    GR0,RBUFP\n         CR    GR0,RBUFL\n         BL    TRACE2                   BR IF STILL ROOM\n*\n         LTR   RBUFC,RBUFC              IF NO RECORDS WRITTEN,\n         BZ    TRACE4                     BYPASS CHECK\n         CHECK TRCHECK\nTRACE4   WRITE TRCHECK,SF,,(RBUF),MF=E\n         LR    GR0,RBUF                 ***\n         LR    RBUF,RBUFA                 *  SWITCH BUFFERS\n         LR    RBUFA,GR0                  *\n         LA    RBUFP,4                  ***  AND RESET POINTER\n         LA    RBUFC,1(0,RBUFC)         STEP RECORD COUNTER\n*\nTRACE2   CH    GR2,TRL1                 TEST FOR NEW PROGID\n         BE    TRACE3\n*\n         LR    GR1,RBUF\n         AR    GR1,RBUFP\n         MVC   0(6,GR1),TRPGID          PROGID TO BUFFER\n         LA    RBUFP,6(0,RBUFP)\n*\nTRACE3   LR    GR1,RBUF\n         AR    GR1,RBUFP\n         MVC   0(2,GR1),SCRCS(FSA)      SEMICOLON COUNTER TO BUFFER\n         LA    RBUFP,2(0,RBUFP)\n         STH   RBUFP,0(0,RBUF)\n         STM   RBUF,RBUFC,TRBUF\nTRACE6   LM    14,12,TRSAVE\n         B     2(BRR)                   RETURN TO ALGOL PROGRAM\n*\nTRL1     DC    H'2'                     LENGTH OF SEMICOLON FIELD\nTRL2     DC    H'8'                     LENGTH OF NEW NAME + SEMICOLON\nTRPGID   DC    H'0'                     FLAG FOR PROGID\n         DC    2H'0'                    FIRST FOUR BYTES OF PROGR. NAME\n         DC    X'FFFF'                  INITIAL VALUE FOR TREND\nTRBEG    DC    F'0'                     BEGINNING OF TRACE AREA\nTREND     DC   F'0'                     END OF TRACE AREA\nTRFLAG   DC    X'00'                    STATUS INDICATOR\n*                                         00 - OUTSIDE BOTH TRACE AREAS\n*                                         01 - INSIDE LOWER AREA\n*                                         02 - INSIDE HIGHER AREA\nTRFLAG1  DC    X'00'                    PREVIOUS VALUE OF TRFLAG\nTRMPNAME DC    CL4' '                   NAME OF MAIN PROGRAM\n         SPACE\nTRSAVE   EQU   FSAREA+ASAVE+12\n         DROP  GR3\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*        P R O G R A M  I N T E R R U P T  R O U T I N E              *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\nPIEROUT  EQU   *\n         USING PIEROUT,ENTRY\n         L     FSA,=A(IHIFSARA)\n         MVC   PGOPSW(8,FSA),4(GR1)\n         LH    GR2,PGOPSW+2(0,FSA)      LOAD INTERRUPTION CODE\n         N     GR2,PGCMASK              REMOVE IMPRECISE CODES (M/91)\n         SLA   GR2,2\n         LA    GR2,PIETAB(GR2)          GET ENTRY IN ERROR TABLE\nPIEROUT2 MVC   9(3,GR1),1(GR2)          CHANGE RETURN ADDR IN OPSW\n         BR    RETURN\n         DROP  ENTRY\n         SPACE\n         DS    0A\nPGCMASK  DC    X'0000000F'              MASK FOR INTERRUPT CODE\nPIETAB   EQU   *\n         DC    A(ERROR33)               PSW CODE 0 - ONLY WITH MOD/91\n         DC    A(ERROR33)     ***\n         DC    A(ERROR33)       *\n         DC    A(ERROR33)       *\n         DC    A(ERROR33)       *  PSW CODES 1-7\n         DC    A(ERROR33)       *\n         DC    A(ERROR33)       *\n         DC    A(ERROR33)     ***\n         DC    A(ERROR28)     FIXED PT OVFL     PSW CODE  8\n         DC    A(ERROR30)     FIXED PT DIVIDE   PSW CODE  9\n         DC    A(ERROR33)    (DECIMAL OVERFLOW  PSW CODE 10 CANT OCCUR)\n         DC    A(ERROR33)    (DECIMAL DIVIDE    PSW CODE 11 - MASKED)\n         DC    A(ERROR29)     EXPONENT OVERFLOW PSW CODE 12\n         DC    A(ERROR33)    (EXPONENT UNDERFL  PSW CODE 13 - MASKED)\n         DC    A(ERROR33)    (FLOAT PT SIGNIF.  PSW CODE 14 - MASKED)\n         DC    A(ERROR31)     FLOAT PT DIVIDE   PSW CODE 15\n         EJECT                                                     0226\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  0226\n*                                                               *  0226\n*   ADDRESSLIST OF ENTRYPOINTS IN IHIIOR USED BY I/O ROUTINES   *  0226\n*                                                               *  0226\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  0226\n         SPACE 3                                                   0226\nADRLST   DC    A(IHIIORCI)                                         0226\n         DC    A(IHIIORCL)                                         0226\n         DC    A(IHIIOREV)                                         0226\n         DC    A(IHIIORNX)                                         0226\n         DC    A(IHIIOROP)                                         0226\n         DC    A(IHIIOROQ)                                         0226\n         DC    A(IHIIOREN)                                         0226\n         DC    A(IHIIORGP)                                         0226\n         DC    A(IHIIORER)                                         0226\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              I N I T I A L  E N T R Y  P O I N T                    *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n         DROP  FSA\n         DS    0H\nIHIFSAIN EQU   *\n         USING IHIFSAIN,ENTRY\n         SAVE  (14,12)\n         L     FSAA,=A(IHIFSARA)\n         ST    FSA,4(0,FSAA)            LINK SAVE AREAS TOGETHER\n         ST    FSAA,8(0,FSA)\n         LR    FSA,FSAA\n         L     GRF,=A(IHIFSARB)\n         USING IHIFSARB,GRF\n         B     ALGIN                    TO INITIALIZATION ROUTINE\n         DROP  ENTRY\n         DROP  GRF\n         EJECT\nIHIFSARB CSECT\n         SPACE\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*         I N I T I A L I Z A T I O N  R O U T I N E                  *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*    THIS IS THE FIRST ROUTINE EXECUTED WHEN AN ALGOL PROGRAM IS\n*  CALLED FROM THE O.S. OR FROM A CALLING PROGRAM.\n*    IT PERFORMS CERTAIN INITIALIZING FUNCTIONS AND THEN TRANSFERS\n*  CONTROL TO THE ALGOL OBJECT PROGRAM.\n*\n         USING IHIFSARA,FSA\n         USING IHIFSARB,GRF\n         SPACE 3\nALGIN    EQU   *\n*\n         SPIE  PIEROUT,((1,9),12,15)    EXIT FOR RELEVANT PROG. CHECKS\n         ST    GR1,FSAPICA(0,FSA)\n         SPACE\n*  GET STORAGE FOR RETURN ADDRESS STACK AND INITIALIZE RAS POINTERS\n         SPACE\n         GETMAIN R,LV=2048\n         SH    GR1,EIGHT(0,FSA)\n         ST    GR1,RASPT(0,FSA)\n         ST    GR1,RASSTART(0,FSA)\n         LA    GR1,2056(0,GR1)\n         ST    GR1,RASPB(0,FSA)\n         ST    GR1,RASEND(0,FSA)\n         SPACE\n         SR    CDSA,CDSA                                           0173\n         L     DSN,ADSTAB(FSA)         INITILIZE DSENTRIES FOR     0214\n         L     GRA,0(0,DSN)            S P K Q                     0214\n         LA    DSN,4(0,DSN)                                        0214\n         LTR   GRA,GRA                 Q. IS THERE A PGCF          0214\n         BM    ALGIN01-4                                           0214\n         LA    GR1,2048                YES                         0214\n         ST    GR1,16(0,GRA)           INSERT BE LENGTH            0214\n         ST    CDSA,24(0,GRA)          INITILIZE S, TYP IN PGCF    0214\n         N     GRA,=X'00FFFFFF'                                    0214\nALGIN01  CR    GRA,DSN                                             0214\n         BE    ALGIN02                                             0214\n         MVC   20(6,DSN),DSINIT                                    0214\n         LA    DSN,LTH(0,DSN)                                      0214\n         B     ALGIN01                                             0214\nALGIN02  STH   CDSA,TRPGID             INITILIZE TRACE COUNTERS    0214\n         ST    CDSA,TRPGID+2                                       0214\n         STC   CDSA,TRFLAG                                         0214\n         MVI   TRPGID+6,X'FF'                                      0214\n         MVI   TRPGID+7,X'FF'                                      0214\n         STH   CDSA,SCRCS(FSA)          INITIALIZE SEMICOLON COUNT 0173\n         ST    CDSA,ANOTTAB(FSA)        RESET NOTE TABLE ADDRESS   0173\n         ST    CDSA,SPDAP               RESET SPECIAL DECL.POINTER 0173\n*  TEST EXECUTION TIME OPTIONS AND SET SWITCHES\n         SPACE\n*  TEST FOR SHORT/LONG PRECISION\n         SPACE\n         L     GRA,=A(IHIENTIF)         GET S/L SWITCH\n         MVC   OPTSW(1,FSA),8(GRA)        FROM THE OBJECT MODULE\n         MVC   CNVINST(CNVINSTL),CNVINSTE  ASSUME SHORT\n         LA    GRA,SETSHORT\n         TM    OPTSW(FSA),SHSW\n         BO    ALGIN4              IF SHORT\n          MVC  CNVINST(CNVINSTL),CNVINSTD    MODIFY CONVERT ROUTINE\n         LA    GRA,4(0,GRA)\nALGIN4   EQU   *\n         LM    GRB,GRD,FPINSTAD         MODIFY FLOATING POINT\n         EX    0,0(GRA)                  INSTRUCTIONS\n         BXLE  GRB,GRC,*-4\n         SPACE\n*  CHECK EXECUTION PARAMETERS DUMP AND TRACE\n         SPACE\nALGIN0   EQU   *\n         OI    TRACE+7(FSA),X'F0'       DEACTIVATE BRANCH TO TRACE RT.\n         MVC   TRPGID+2(4),TRPGID+1     RESET PROGID FOR TRACE\n         MVC   TRBEG(8),TRPGID          INITIALIZE TRACE LIMITS\n         L     GRA,4(0,FSA)\n         L     GRA,24(0,GRA)            ADDR OF PARAMETER LIST\n         LTR   GRA,GRA\n         BZ    ALGIN1                   BRANCH IF NO PARAMETERS\n         L     GRA,0(0,GRA)        ADDR OF PARAMETER FIELD\n         LA    GRA,0(0,GRA)             RESET HIGH ORDER BYTE\n         LH    GRB,0(0,GRA)\n         LTR   GRB,GRB                  LENGTH OF PARAMETER FIELD\n         BZ    ALGIN1                   NO PARAMETERS\n         AR    GRB,GRA                  END OF PARAMETER FIELD\n         LA    GRD,LASTPARM             END OF PARAMETER LIST\n         SR    GRE,GRE\nFNDCOMMA CLI   2(GRA),C','\n         BNE   FNDPAR\nSTEP1    LA    GRA,1(0,GRA)\nCOMP1    CR    GRA,GRB\n         BL    FNDCOMMA\n         B     ALGIN2                   WHOLE PARM FIELD SCANNED\nFNDPAR   LA    GRC,PARMLIST\n         USING PARMLIST,GRC\nNXTPAR   IC    GRE,PARMLG               LENGTH OF PARAMETER\n         EX    GRE,COMPINST             COMPARE WITH ENTRY IN LIST\n         BNE   NOTFOUND\n         LA    GR1,1(GRA,GRE)\n         EX    0,PABRANCH\nCHKCOMMA CLI   2(GR1),C','              CHECK FOR COMMA AFTER PARAM\n         BE    SETBIT\n         CR    GR1,GRB                  IF NO COMMA CHECK FOR END OF\n         BL    STEP1                      PARAMETER FIELD\nSETBIT   LR    GRA,GR1\n         EX    0,PARMSET\n         B     COMP1\nNOTFOUND CR    GRC,GRD                  CHECK FOR END OF LIST\n         LA    GRC,PARLG(0,GRC)\n         BL    NXTPAR                   NEXT ENTRY IN LIST\n         B     INVOPT(FSA)              OPTION NOT FOUND IN LIST\n         SPACE\nCOMPINST CLC   2(0,GRA),PARM\n         DROP  GRC\n         SPACE\n*  EVALUATE TRBEG OR TREND PARAMETER\n         SPACE\nTRLIM1   LA    GRG,TRBEG\n         B     TRLIM2+4\nTRLIM2   LA    GRG,TREND\n         CLI   2(GR1),C'='\n         BNE   INVOPT(FSA)\n         LA    GRH,5(0,GR1)             END OF NUMBER FIELD\n         SR    GRI,GRI                  RESET NUMBER ACCUMULATOR\nTRLIM4   LA    GR1,1(0,GR1)             STEP TO NEXT DIGIT\n         CR    GR1,GRB\n         BNL   TRLIM3                   BR IF END OF WHOLE PARAM FIELD\n         CLI   2(GR1),C','\n         BE    TRLIM3                   BR IF END OF THIS PARAMETER\n         CR    GR1,GRH\n         BH    INVOPT(FSA)              BR IF TOO MANY DIGITS\n         CLI   2(GR1),C'0'              CHECK FOR VALID DIGIT\n         BL    INVOPT(FSA)\n         CLI   2(GR1),C'9'\n         BH    INVOPT(FSA)\n         MVN   TRLDIG+1(1),2(GR1)       EXTRACT NEW DIGIT\n         MH    GRI,=H'10'\n         AH    GRI,TRLDIG               ACCUMULATE SUM\n         B     TRLIM4\nTRLIM3   ST    GRI,0(GRG)               STORE AS TRBEG OR TREND\n         B     SETBIT\n         SPACE\nTRLDIG   DC    H'0'                     TEMP. STORAGE FOR DIGIT\n         SPACE\n*  PREPARE FOR PROGRAM TRACING\n         SPACE\nALGIN2   EQU   *\n         TM    DTSW(FSA),TRSW           IS TRACE REQUESTED\n         BZ    ALGIN1\n         OPEN  (DCBUT1,(OUTIN))         OPEN SYSUT1 FOR USE BY TRACE\n         LA    GRB,DCBUT1\n         USING IHADCB,GRB\n         TM    DCBOFLGS,X'10'           CHECK IF SYSUT1 OPENED\n         BO    ALGIN3\n         NI    DTSW(FSA),255-TRSW       TRACE SWITCH OFF\n         LA    DSNR,17\n         B     DDERROR(FSA)\nALGIN3   EQU   *\n         NI    TRACE+7(FSA),X'0F'       ACTIVATE BRANCH TO TRACE ROUT\n         LH    GR0,DCBBLKSI             GET BLOCK SIZE FROM DCB\n         DROP  GRB\n         ST    GR0,TRBUFL               STORE AS BUFFER LENGTH\n         SLA   GR0,1\n         GETMAIN R,LV=(0)               GET TWO BUFFERS FOR SYSUT1\n         ST    GR1,TRBUF                ADDRESS OF FIRST BUFFER\n         SR    GR0,GR0\n         ST    GR0,TRCNT                RESET RECORD COUNTER\n         LA    GR0,4                    SET BYTE POINTER\n         STH   GR0,0(0,GR1)\n         A     GR1,TRBUFL\n         ST    GR1,TRBUFA               ALTERNATE BUFFER\n         SPACE\n*  INITIALIZE REGISTERS AND ENTER OBJECT MODULE\n         SPACE\nALGIN1   EQU   *\n         SR    CDSA,CDSA\n         L     ENTRY,=A(IHIENTIF)\n         LM    PBT,LAT,0(ENTRY)\n         L     GRA,16\n         L     GRA,0(GRA)\n         L     GRA,4(GRA)               GET TCB ADDRESS\n         L     GRA,0(GRA)               GET REQUEST BLOCK ADDRESS\n         L     GRA,12(0,GRA)           INSERT MODULE             A22570\n         MVC   4(4,PBT),8(GRA)              NAME INTO            A22570\n         MVC   TRMPNAME,8(GRA)                   PBTAB           A22570\n         L     ENTRY,8(0,ENTRY)\n         BR    ENTRY                    ENTER ALGOL PROGRAM\n         SPACE\n*  DCB EXIT ROUTINE FOR SYSUT1\n         SPACE\n         USING IHADCB,GR1\n         DS    0F\nDCBEXIT  DC    X'85',AL3(DCBEXIT+4)\n         LH    GRA,DCBBLKSI\n         LTR   GRA,GRA                  CHECK IF BLOCKSIZE SPECIFIED\n         BNZ   DCBEXIT1                 BR. IF YES\nDCBEXIT2 LA    GRA,TRBUFST              OTHERWISE USE STANDARD SIZE\n         STH   GRA,DCBBLKSI\nDCBEXIT3 RETURN\nDCBEXIT1 CH    GRA,TRBUFMIN             CHECK BLOCKSIZE\n         BL    DCBEXIT2                 (IF TOO LOW OR TOO HIGH,\n         CH    GRA,TRBUFMAX              USE STANDARD SIZE)\n         BH    DCBEXIT2\n         B     DCBEXIT3\n         DROP  GR1\n         SPACE\nTRBUFMIN DC    H'14'                    MINIMUM TRACE BUFFER SIZE\nTRBUFMAX DC    H'32760'                 MAXIMUM TRACE BUFFER SIZE\nTRBUFST  EQU   2048                     STANDARD TRACE BUFFER SIZE\nDSINIT   DC    X'000100500200'         INITILIZE DSTAB             0214\nLTH      EQU   X'24'                                               0214\n*\n         SPACE\nSETSHORT OI    0(GRB),SHORTBIT          MODIFY F.P. INSTR FOR SHORT\n         NI    0(GRB),255-SHORTBIT                         OR LONG PR.\n         SPACE 3\n********       TABLE FOR DECODING OPTION PARAMETERS            ********\n         SPACE 3\nPARMLIST DS    0H\nPARMLG   DC    AL1(3)                   (LENGTH - 1) OF KEYWORD\nPARM     DC    CL5'DUMP'                OPTION KEYWORD\nPABRANCH B     CHKCOMMA                 EXIT TO EVALUATION ROUTINE\nPARMSET  OI    DTSW(FSA),DPSW           SET FLAG BIT\nPARLG    EQU   *-PARMLG\n         DC    AL1(4)\n         DC    CL5'TRACE'\n         B     CHKCOMMA\n         OI    DTSW(FSA),UCTRSW\n         SPACE\n         DC    AL1(4)\n         DC    CL5'TRBEG'\n         B     TRLIM1\n         OI    DTSW(FSA),TRSW\nLASTPARM EQU   *\n         DC    AL1(4)\n         DC    CL5'TREND'\n         B     TRLIM2\n         OI    DTSW(FSA),TRSW\n         EJECT\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*                                                                     *\n*              T E R M I N A T I O N  R O U T I N E                   *\n*                                                                     *\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n         SPACE 3\n*    THIS ROUTINE IS ENTERED EITHER FROM THE ALGOL PROGRAM UPON PASSING\n*  THE FINAL 'END' STATEMENT (NORMAL TERMINATION) OR FROM THE ERROR\n*  ROUTINE (ABNORMAL TERMINATION).  IN EITHER CASE IT EDITS AND PRINTS\n*  THE TRACE INFORMATION IF ANY, CLOSES ALL DATA SETS AND RESTORES THE\n*  REGISTERS AS THEY WERE AT THE TIME OF ENTRY TO THE ALGOL PROGRAM.\n*  THEN IT RETURNS TO OS OR THE CALLING PROGRAM. THE COMPLETION CODE\n*  IS SET TO ZERO (NORMAL) OR FOUR (ABNORMAL TERMINATION).\n         SPACE\nALGTRMA  MVI   COMPCODE+3,4             ENTRY IN CASE OF ERROR\n         B     ALGTRM0\n         SPACE\nALGTRMN  EQU   *                   NORMAL ENTRY\n         MVI   COMPCODE+3,0\nALGTRM0  EQU   *\n         LR    FSAA,FSA                 PREPARE FOR\n         L     DSN,ADSTAB(0,FSA)         OUTPUT TO SYSPRINT\n         LA    DSN,DSTLG+4(0,DSN)         BY MEANS OF I/O ROUTINES\n         LA    DSNR,1\n         USING DDSTAB,DSN\n         TM    COMPCODE+3,X'04'                                    0219\n         BO    ALGTRM00                                            0219\n         OI    DS+1,DS15            FLAG CLOSE FROM IHIFSA         0219\n         L     ENTRY,=V(IHIIORCP)       CLOSE ALL DATA SETS USED\n         BALR  RETURN,ENTRY\nALGTRM00 OI    OPTSW(FSA),TERMSW    FLAG TERM. ROUTINE ENTERED     0219\n         TM    OPTSW(FSA),PRNTERR\n         BZ    ALGTRM16                 IF SYSPRINT OK\n         SPACE\n         WTO   MF=(E,WTOTRM)            WRITE END EXEC MESSAGE\n         B     ALGTRM10\n         SPACE\nALGTRM16 OI    DS+1,DS11                RE-OPEN SYSPRINT FOR\n         OI    DS,DS236                   TRACE AND TERM. OUTPUT\n         TM    COMPCODE+3,X'04'                                    0219\n         BO    ALGTRM1A                                            0219\n         L     ENTRY,=V(IHIIOROP)\n         BALR  RETURN,ENTRY\n         B     ALGTRM1B                                            0219\nALGTRM1A MVI   S+1,X'32'                                           0219\nALGTRM1B BAL   RETURN,BLANK                                        0219\n         OI    DS,DS3\n         L     ENTRY,=V(IHIIORNX)\n         BALR  RETURN,ENTRY\nALGTRM1  TM    DTSW(FSA),TRSW\n         BZ    ALGTRM11                 BR. IF NO TRACE OPTION\n         TM    OPTSW(FSA),UT1ERR\n         BO    ALGTRM18                 IF SYSUT1 ERROR\n         LM    RBUF,RBUFC,TRBUF         LOAD BUFFER PARAMETERS\n         LTR   RBUFC,RBUFC\n         BZ    ALGTRM2                  BR. IF NO RECORDS WRITTEN\n         CHECK TRCHECK                  CHECK LAST RECORD WRITTEN\n         LH    RBUFP,0(0,RBUF)\n         CH    RBUFP,=H'4'\n         BNH   ALGTRM3                  BR. IF CURRENT BUFFER EMPTY\n         WRITE TRCHECK,SF,,(RBUF),MF=E  WRITE LAST RECORD\n         CHECK TRCHECK\n         LA    RBUFC,1(0,RBUFC)\nALGTRM3  CLOSE (DCBUT1,REREAD),TYPE=T   CLOSE TEMPORARY\n         READ  TRCHECK,SF,,(RBUF),MF=E  READ FIRST RECORD\nALGTRM2  EQU   *\n         BAL   RETURN,TRHEAD            PRINT TRACE HEADLINES\nALGTRM4  LTR   RBUFC,RBUFC\n         BNZ   ALGTRM9                  IF RECORDS ON SYSUT1\n         LR    RBUFA,RBUF\n         B     ALGTRM5\nALGTRM9  CHECK TRCHECK                  CHECK PREVIOUS READ\n         LM    RBUF,RBUFA,TRBUF\n         LR    GR1,RBUF                 SWITCH BUFFERS\n         LR    RBUF,RBUFA\n         LR    RBUFA,GR1\n         STM   RBUF,RBUFA,TRBUF\n         BCT   RBUFC,ALGTRM6            DECR. RECORD COUNTER\n         B     ALGTRM5                  BR. IF NO MORE RECORDS\nALGTRM6  READ  TRCHECK,SF,,(RBUF),MF=E\nALGTRM5  LH    RBUFP,0(0,RBUFA)         LOAD BYTE COUNT\n         AR    RBUFP,RBUFA              ADDRESS OF LAST BYTE PLUS ONE\n         LA    RBUFA,4(0,RBUFA)         RBUFA IS NOW BYTE POINTER\n         L     GRA,R                    SYSPRINT BYTE POINTER\n         B     ALGTRM7\n*\nALGTRM8  CLC   0(2,RBUFA),TRPGID        IS NEXT ITEM A PROGID\n         BNE   ALGTRM12                 BR IF NO\n         MVC   PROGID(4),2(RBUFA)       STORE PROGID\n         LA    RBUFA,6(0,RBUFA)\n         B     ALGTRM15\nALGTRM12 LA    GRB,6(0,GRA)             CHECK IF ROOM FOR\n         C     GRB,RE                     ONE MORE OUTPUT ITEM\n         BL    ALGTRM13                 BR IF YES\nALGTRM15 OI    DS,DS3\n         L     ENTRY,=V(IHIIORNX)\n         BALR  RETURN,ENTRY\n         CLC   S(2),=H'1'               TEST IF NEW PAGE\n         BNE   ALGTRM14                 BR IF NO\n         BAL   RETURN,TRHEAD            PRINT PAGE HEADINGS\n         B     ALGTRM15\nALGTRM14 L     GRA,R\n         BAL   RETURN,BLANK             INITIALIZE WITH BLANKS\n         MVC   0(10,GRA),PIDFIELD       PROGID AT START OF NEW LINE\n         MVC   PROGID(4),PROGID-1       BLANKS TO RPOGID\n         LA    GRA,PIDLGTH(0,GRA)\nALGTRM13 MVC   CONVBUF(2),0(RBUFA)      ***\n         LA    RBUFA,2(0,RBUFA)           *  CONVERT SEMICOLON COUNTER\n         LH    GRB,CONVBUF                *  VALUE AND STORE IN\n         CVD   GRB,CONVBUF                *  PRINT AREA\nALGTRMZ  OI    CONVBUF+7,X'0F'            *\n         UNPK  1(5,GRA),CONVBUF(8)      ***\n         LA    GRA,6(0,GRA)             STEP OUTPUT BUFFER POINTER\n         ST    GRA,R\nALGTRM7  CR    RBUFA,RBUFP\n         BL    ALGTRM8                  BR. IF NOT END OF SYSUT1 RECPRD\n         LTR   RBUFC,RBUFC\n         BNZ   ALGTRM9                  BR. IF MORE RECORDS TO READ\n         OI    DS,DS3                   PRINT LAST LINE\n         L     ENTRY,=V(IHIIORNX)\n         BALR  RETURN,ENTRY\n         SPACE\n*  CLOSE SYSUT1 AND FREE BUFFER AREA\n         SPACE\nALGTRM18 CLOSE (DCBUT1)\n         LM    RBUF,RBUFA,TRBUF         GET LOWER\n         LR    GR1,RBUF                   BUFFER ADDRESS\n         CR    RBUF,RBUFA\n         BL    *+6\n         LR    GR1,RBUFA\n         L     GR0,TRBUFL\n         SLA   GR0,1\n         FREEMAIN R,LV=(0),A=(1)        FREE SYSUT1 BUFFER\n         SPACE\n*  PRINT EXECUTION END MESSAGE\n         SPACE\nALGTRM11 EQU   *\n         L     GRA,R                    BYTE POINTER\n         MVC   0(TML,GRA),TRMSG         MOVE TERMINATION MESSAGE\n         LA    GRA,TML(0,GRA)\n         ST    GRA,R                    UPDATE BYTE POINTER\n         LA    GRA,2                    LOOP COUNTER FOR BLANK LINES\nALGTRM19 EQU   *\n         BAL   RETURN,BLANK\n         OI    DS,DS3\n         L     ENTRY,=V(IHIIORNX)\n         BALR  RETURN,ENTRY\n         BCT   GRA,ALGTRM19            ONE EXTRA BLANK LINE\n         OI    DS+1,DS15          FLAG CLOSE FROM IHIFSA           0219\n         L     ENTRY,=V(IHIIORCL)       CLOSE SYSPRINT\n         BALR  RETURN,ENTRY\n         SPACE\n*  FINAL CLEAN-UP\n         SPACE\nALGTRM10 EQU   *\n         SPACE\n         L     GR1,RASSTART(FSA)        FREE RETURN ADDRESS STACK\n         LA    GR1,8(0,GR1)\n         FREEMAIN R,LV=2048,A=(1)\nALGTRM17 L     GRA,FSAPICA(0,FSA)\n          SPIE MF=(E,(GRA))              RESTORE PICA\n         SPACE\nALGTRMAA EQU   *\n         SPACE\n         L     FSA,4(0,FSA)             RESTORE REGISTERS AND RETURN\n         MVC   16(4,FSA),COMPCODE       TO REGISTER 15\n         RETURN (14,12)                   TO OS OR THE CALLING PROGRAM\n         SPACE 3\n********   ROUTINE FOR FILLING A SYSPRINT RECORD WITH BLANKS\n         SPACE 3\nBLANK    STM   GRA,GRB,BLANKS\n         L     GRA,R                    CURRENT BYTE POINTER\n         L     GRB,RE                   RECORD END POINTER\nBLANKA   CR    GRA,GRB\n         BNL   BLANKB                   BRANCH IF RECORD END\n         MVI   0(GRA),C' '              INSERT ONE BLANK\n         LA    GRA,1(0,GRA)             STEP TO NEXT BYTE\n         B     BLANKA\nBLANKB   ST    GRA,R               UPDATED BYTE POINTER\n         LM    GRA,GRB,BLANKS\n         BR    RETURN\nBLANKS   DS    2F\n         SPACE 3\n********       ROUTINE FOR PRINTING TRACE OUTPUT HEADING\n         SPACE 3\nTRHEAD   STM   14,12,TRHEADS\n         LM    GRA,GRA+2,TRHADR         COUNTER FOR HEADLINES\nTRHEAD1  EQU   *\n         L     GR1,R\n         BAL   RETURN,BLANK             INITIALIZE WITH BLANKS\n         EX    0,0(GRA+2)               MOVE TEXT, OR NOP\n         OI    DS,DS3\n         L     ENTRY,=V(IHIIORNX)\n         BALR  RETURN,ENTRY\n         BXLE  GRA+2,GRA,TRHEAD1\n         BAL   RETURN,BLANK              BLANK LINE AFTER HEADING\n         LM    14,12,TRHEADS\n         BR    RETURN\n         SPACE\nTRHADR   DC    A(6,TRHEND,TRHLIST)\nTRHLIST  EQU   *\n         NOP   0                        BLANK LINE\n         NOPR  0\n         MVC   0(TRHLA,GR1),TRHEADA\n         NOP   0                        BLANK LINE\n         NOPR  0\nTRHEND   EQU   *\n         MVC   0(TRHLB,GR1),TRHEADB\n         SPACE\nTRHEADA  DC    C'  ALGOL PROGRAM TRACE' FIRST HEADLINE\nTRHLA    EQU   *-TRHEADA\nTRHEADB  DC    C'MODULE     SEMICOLON NUMBERS'  SECOND HEADLINE\nTRHLB    EQU   *-TRHEADB\n         SPACE\nTRHEADS  EQU   FSAREA+ASAVE+12\n         SPACE\nWTOTRM   WTO   'END OF ALGOL PROGRAM EXECUTION',MF=L\nTRMSG    EQU    WTOTRM+4\nTML      EQU   *-TRMSG\n         SPACE 3\n********       ERROR AND END OF DATA ROUTINE FOR SYSUT1\n         SPACE 3\nERRUT1   EQU   *\nENDUT1   EQU   *\n         OI    OPTSW(FSA),UT1ERR        SYSUT1 ERROR SWITCH ON\n         LA    DSNR,17                  DUMMY DS NUMBER FOR SYSUT1\n         B     ERROR32\n         SPACE\n*  PARAMETER LIST USED BY BOTH READ AND WRITE MACROS FOR SYSUT1\n         SPACE\n         WRITE TRCHECK,SF,DCBUT1,MF=L\n         SPACE\n*  PARAMETERS FOR TRACE BUFFER\n         SPACE\nTRBUF    DS    F                        ADDRESS OF CURRENT BUFFER\nTRBUFA   DS    F                        ADDRESS OF ALTERNATE BUFFER\nTRBUFL   DS    F                        LENGTH OF BUFFER\nTRCNT    DS    F                        RECORD COUNTER\n*  THE BYTE POINTER IS CONTAINED IN THE FIRST TWO BYTES OF THE\n*  RECORD AND SERVES AS RECORD LENGTH FIELD\n         SPACE\nCOMPCODE DC    F'0'                     COMPLETION CODE (0 OR 4)\n         SPACE\n*        WORK STORAGE FOR EDITING THE TRACE LISTING\n         SPACE\nPIDFIELD DC    CL2' '\nPROGID   DC    CL4' '                   MODULE NAME\n         DC    CL4' '\nPIDLGTH  EQU   *-PIDFIELD\nCONVBUF  DS    D                        FOR CONVERTING SEMICOLON NR\n         EJECT\n         SPACE\n*  DCB FOR SYSUT1\n         SPACE\nDCBUT1   DCB   DSORG=PS,MACRF=(R,W),DDNAME=SYSUT1,RECFM=F,NCP=1,       X\n               EODAD=ENDUT1,EXLST=DCBEXIT,SYNAD=ERRUT1\n         EJECT\n         SPACE 3\n********            FORMAT OF THE DATA SET TABLE\n         SPACE 3\nDDSTAB   DSECT\n         SPACE\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    HL1\nQ        DS    HL1\nDS       DS    2C\nNOTEADR  DS    A\nBL       DS    H\n         DS     H\nDSTLG    EQU   *-ADCB\n         EJECT\n         DCBD  DSORG=(BS),DEVD=(DA,TA)\n         END\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "IHIGPR": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x03g\\x03g\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 871, "newlines": 871, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIGPR,PUT/GET'\n*\n*STATUS: CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:ACTION OF PUT:TRANSFER DATA INDICATED BY A LIST\n*   PROCEDURE,WHICH\n*   IS SECOND PARAMETER IN PUT,TO AN I/O BUFFER IN BINARY FORM WRITE\n*   A RECORD,V-FORM,TO A DIRECT ACCESS DEVICE DDNAME=SYSUT2.ENTER\n*   REPOSITIONING INFORMATION IN NOTTAB\n*   ACTION OF GET:RETRIEVE INFORMATION AFTER REPOSITIONING OF DATA SET\n*   STORED BY PUT AND ASSIGN DATA TO IDENTIFIER IN LIST PROCEDURE\n*\n*ENTRY POINTS:\n*        IHIGPRPT-FROM GENERATED OBJECT MODULE    LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*        IHIGPROT -FROM IHIFSA;PROCEDURE IS ACTUAL PARAMETER OF LIST\n*   DATA PASSED BY NAME REG.15 POINTS TO A THUNK FIELD\n*\n*        IHIGPRGT -FROM GENERATED OBJECT MODULE   LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*        IHIGPRIT -FROM IHIFSA;PROCEDURE IS ACTUAL PARAMETER OF LIST\n*   DATA PASSED BY NAME REG.15 POINTS TO A THUNK FIELD\n*\n*        IHIGPRCL -FROM IHIIOR-CLOSE DATA SET\n*   NO DATA PASSED                           BALR 14,15\n*\n*INPUT:GET READS A RECORD STORED PREVIOUSLY BY PUT,DATA IN BINARY FORM\n*\n*OUTPUT:STORES A RECORD DATA IN BINARY FORM\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-CONVERT REAL TO INTEGER-ENTRY NOTTAB- SYNAD\n*\n*EXITS-NORMAL: FOR ROUTINE PUT AND GET RELOAD REGISTERS AND BR14\n*   FOR PROCEDURE OUTPUT AND INPUT SEE BELOW\n*      -ERROR: DATA SET CLOSED                                 NO.10\n*   BACK WARD REPOSITIONING NOT DEFINED                        NO.14\n*   ACTUAL AND FORMAL PARAMETER OF DIFFERENT TYPE              NO.20\n*   NUMBER OF PARAMETERS DOES NOT CORRESPOND                   NO.21\n*   TOO MANY NESTED BLOCKS PROCEDURES AND PARAMETERS           NO.36\n*   GET/PUT BUFFER OVERFLOW                                    NO.38\n*   GET/PUT IDENTIFICATION OUT OF RANGE                        NO.39\n*   DD-CARD INCORRECT OR MISSING                               NO.41\n*   RECURSIVELY TRY OF PUT/GET OR OUTPUT/INPUT                 NO.43\n*\n*   ACTION:BRANCH TO IHIFSA   LA  13,IHIFSA\n*                             B  FSAERR+XX*4(13)  XX ERROR NO.\n*\n*TABLES/WORKAREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE LIST PROCEDURE HAS ONE FORMAL PARAMETER WHICH IS A PROCEDURE\n*   AND WHICH ONLY IS DECLARED AND HAS NO PROCEDURE BODY IN THE\n*   ALGOL PROGRAM,AT ACTUAL POSITION THIS IS OUTPUT RESP.INPUT\n*   ADDRESS OF PUT/GET-FIELD IN DSTAB LOADED TO REG5  DSNR=16 TO REG6\n*   IS KEEPT THROUGH THE MODULE IN ORDER TO ADDRESS THIS FIELD\n*   CHARACTER DEPENDENCE:\n*      THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n         SPACE 4\n*\n*\n*\nIHIGPRTN CSECT\n*0018027400,033200,088600,091800,133400,151800,152800,153000       0226\n*0018153400-153800                                                 0226\nENTRY    EQU   15                  ADDRESS OF ENTRYPOINT\nRETURN   EQU   14                  RETURN ADDRESS\nSAVE     EQU   13                  ADDRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADDRESS OF PARAMETER LIST\n*\n*\n*\nBRR      EQU   15                       ADDRESS OF PUT5\n*\n*  OTHER GENERAL REGISTER USED WITHIN PUT\n*\nGR0      EQU   0\nGR1      EQU   1\nGRA      EQU   2\nGRBB     EQU   3\nGRR      EQU   4\nDSN      EQU   5\nDSNR     EQU   6\nBASE     EQU   7\nDCB      EQU   8\nGRB      EQU   9\nFSA      EQU   12\n*\n*\n*  REGISTER USED BY CALLED PROLOG PROGRAM\n*\nADR      EQU   8\n* FLOATING POINT REGISTER\n*\nFR0      EQU   0\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\nEN       EQU   24                              IHIIOREN            0226\nGP       EQU   28                              IHIIORGP            0226\nER       EQU   32                              IHIIORER            0226\n*\n*   PUT/GET FLAGS\n*\nPG0      EQU   X'80'\nPG1      EQU   X'40'\n*\n*\n         ENTRY IHIGPRPT\n         USING *,ENTRY\nIHIGPRPT ST    SAVE,SAVEPG+4            SAVE REGISTER INTERN\n         LA    SAVE,SAVEPG\n         SAVE  (14,12)\n         DROP  ENTRY\n         LR    BASE,ENTRY\n         USING IHIGPRPT,BASE\n         ST    SAVE,SAVEPUT+4\n         L     FSA,SAVEPG+4            ADDRESS OF FSA\n         LA    SAVE,SAVEPUT\n         L     DSN,ADSTAB(FSA)     FIRST ENTRY IN DSTAB IS APGCF\n         L     DSN,0(0,DSN)        ADDRESS OF PGCF IN REGISTER DSN\n         LA    DSNR,16\n         USING PGCF,DSN\n         TM    RECPG,X'01'             TEST IF RECURSIVELY\n         BO    ERROR43                 YES\n         OI    RECPG,X'01'             SET FLAG BIT\n         SPACE 2\n         TM    PG,PG0              TEST IF DATA SET OPEN\n         BZ    PUT1                DATA SET NOT OPEN\n*                                  DATA SET WAS OPEN\n         L     DCB,ADCB            LOAD REGISTER FOR ADDRESSING DCB AND\n         USING IHADCB,DCB          DECB\n*\n         TM    PG,PG1              TEST LAST PROCEDURE\n         BO    PUT2                LAST PROCEDURE WAS GET\n*\n         CHECK DECB                CHECK THE PREVIOS WRITE\n         NOTE  (DCB)\n         LA    DSN,4(0,DSN)\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EN(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SH    DSN,=H'4'\n         B     PUT3\n         SPACE 3\nPUT2     L     GRA,NOTEADR         LAST PROCEDURE WAS GET\n         LA    GRA,1(0,GRA)        INCREASE NOTEADR BY ONE\n         ST    GRA,NOTEADR\n         LR    GR1,DCB\n         POINT (1),NOTEADR         REPOSITION DATA SET FOR WRITE\n         NI    PG,X'BF'            PG1=0 INDICATE PUT IS EXECUTED\n         B     PUT3\n         SPACE 3\nPUT1     L     ENTRY,AOPENPG       CALL FOR ROUTINE OPEN DATA SET\n         BALR  RETURN,ENTRY\n         L     DCB,ADCB\n         SPACE 3\n*\n*  EVALUATE IDENTIFICATION NUMBER  FIRST PARAMETER\n*\nPUT3     L     PARAM,SAVEPG+24\n         L     GRA,0(0,PARAM)\n         LTR   GRA,GRA                  TEST IF CONVERSION IS NECS.\n         BP    PUT4                     NO CONVERSION\n         TM    OPTSW(FSA),X'20'         CONVERSION TO INTEGER NECS\n         BO    PUT31                    SHORT PRECSISION\n         LD    FR0,0(0,GRA)             PARAMETER TO GR0\n         B     PUT31+4                  PARAMETER TO FR0\nPUT31    LE    FR0,0(0,GRA)\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CI(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     *+8\nPUT4     L     GR0,0(0,GRA)             PARAMETER TO GR0\n         LTR   GR0,GR0\n         BM    ERROR39\n         C     GR0,TWOP16               TWOP16= 2**16\n         BNL   ERROR39\n*                                       GET/PUT IDENTIFICATION WITHIN\n*                                       RANGE\n         STH   GR0,S                    STORE IDENTIFICATION IN PGCF\n*\n*              TEST IF S ALREADY USED AS IDENTIFICATION NO.\n         L     NOT,ANOTTAB(FSA)\n         LR    NTE,NOT\nPUTNOT   LA    NTE,8(0,NTE)\n         C     NTE,0(0,NOT)\n         BE    PUT41               NO ENTRY WITH S FOUND\n         LR    GRA,DSNR\n         CH    GRA,0(0,NTE)\n         BNE   PUTNOT\n         CLC   S(2),2(NTE)\n         BNE   PUTNOT\n         MVI   0(NTE),X'80'        AN ENTRY FOR  S IN NOTTAB\n*                                  INSERT INVALID FLAG\nPUT41    L     GRR,BB\n         LA    GRR,12(0,GRR)            INSERT CORRECT CHAR POINTER\n         ST    GRR,R\n         MVI   TYP,X'00'                CLEAR  TYP\n*\n         SAVE  (14,12)                  PUT'S REGISTER SAVED IN SAVEPUT\n*\n*\n         L     SAVE,SAVEPUT+4           RESTORE PROGRAMS REGISTER\n         LM    14,12,12(SAVE)\n         L     ADR,4(0,PARAM)           ADDRESS           TO LIST\n*                                       PROCEDURE IN REGISTER ADR\n         USING IHIGPRPT,ENTRY\n         L     SAVE,SAVEPG+4\n         DROP  ENTRY\n         CNOP  0,4\n         BAL   BRR,PROLOG(SAVE)\n         DC    A(THUNKOUT)\n         DC    X'8880'                  TYPE INFORMATION FORSTAND PROC\n         DC    H'1'\n         USING *,BRR\nPUT5     LA    SAVE,SAVEPUT\n         DROP  BRR\n         LM    14,12,12(SAVE)           RELOAD PUT'S REGISTER\n         B     SAVEPUT+72\nSAVEPUT  DS    18F\n         L     GRR,R                    RECORD POINTER TO REGISTER GRR\n         S     GRR,BB                   R-BB\n         L     GRBB,BB                  BUFFER BEGIN\n         STH   GRR,0(0,GRBB)            BLOCK LENGTH TO BUFFER\n         SH    GRR,=H'4'                R-BB-4\n         LA    GRBB,4(0,GRBB)\n         STH   GRR,0(0,GRBB)            RECORD LENGTH OT RECORD IN BUFF\n         MVC   4(2,GRBB),S              STORE S IN RECORD\n         MVC   6(1,GRBB),TYP\n         L     GRBB,BB                  BUFFER BEGIN\n         MVI   RECPG,X'00'             CLEAR FLAG BIT\n         SPACE 3\n         WRITE DECB,SF,(DCB),(GRBB),MF=E     WRITE BUFFER\n         L     SAVE,SAVEPUT+4\n         LM    14,12,12(SAVE)\n         USING IHIGPRPT,ENTRY\n         L     SAVE,SAVEPG+4\n         BR    RETURN\n         DROP  ENTRY\n         EJECT\n* *   *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*   ROUTINE OUTPUT IS ACTUAL PROCEDURE TO LIST,EVALUATED BY\n*   THUNKOUT\n*                                                                    *\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*\n*  REGISTER CONTENTS ON ENTRY POINT IHIGPROT\n*\n*SAVE    EQU   13                  ADDRESS OF FIEXED STORAGE AREA\n*BRR     EQU   15                  ADDRESS OF A THUNKFIELD\n*ADR     EQU   8                        ADDRESS OF ENTRY POINT\n*\n*  REGISTER CONTENTS ON ENTRY POINT OUTPUTTH\n*\n*                                  OUTPUT BUFFER\n*BRR     EQU   15                  ADDRESS OUTPUTTH\n*ADR     EQU   8                   ADDRESS OF VALUE TO BE TRANSFERED TO\n*  OTHER GENERAL REGISTER\nGRLTH    EQU   9\n         SPACE 4\n         ENTRY IHIGPROT\n         CNOP  0,8\n         USING IHIGPROT,ADR\nIHIGPROT ST    SAVE,SAVEOI+4\n         LA    SAVE,SAVEOI\n         SAVE  (14,12)\n         ST    SAVE,SAVOUTP+4\n         DROP  ADR\n         LR    BASE,ADR                 FIXED STORAGE AREA ON ENTRY\n         USING IHIGPROT,BASE\n         ST    SAVE,SAVOUTP+4\n         L     FSA,SAVEOI+4             ADDRESS OF FSA TO REG FSA=12\n         LA    SAVE,SAVOUTP\n         L     DSN,ADSTAB(FSA)\n         L     DSN,0(0,DSN)            ADDRESS OF PGCF TO REGISTER DSN\n         LA    DSNR,16\n         USING PGCF,DSN                 FOR ADDRESSING PUT/GET CONTR. F\n         TM    RECOI,X'01'             TEST IF RECURSIVELY\n         BO    ERROR43                 YES\n         OI    RECOI,X'01'             SET FLAG BIT\n         SPACE 3\n         CLI   7(BRR),X'01'        TEST NUMBER OF PARAMETER\n         BNE   ERROR21\n         SPACE 2\n         TM    5(BRR),X'03'        TEST TYP INFORMATION ABOUT FIRST\n         BZ    ERROR20             PARAMETER\n         TM    5(BRR),X'04'            TEST IF ARRAY\n         BO    ERROR20                   ARRAY\n         TM    5(BRR),X'C0'\n         BZ    OUTPUT01                  NO\n         TM    5(BRR),X'40'\n         BZ    ERROR20                  STANDAARD PROC IDENTIFIER\n         TM    4(BRR),X'C0'\n         BM    OUTPUT01\n         BZ    OUTPUT01\n         MVI   PARTST,X'01'             SET BIT FOR LATER TEST\nOUTPUT01 TM     TYP,X'FF'               TEST TYP FIELD IN PGCF\n         SPACE 2\n         BZ    OUTPUT1             NO TYPINFORMATION IN PGCF\n         MVC   TYPC(1),5(BRR)           PGCF CONTAIN TYP INFORMATION\n         NI    TYPC,X'03'\n         CLC   TYP(1),TYPC\n         BNE   ERROR20\n         B     OUTPUT2\nOUTPUT1  MVC   TYP(1),5(BRR)\n         NI    TYP,X'03'\n         SPACE 3\nOUTPUT2  MVC   ADRTHUNK(4),0(BRR)\n         SAVE  (14,12)             SAVE OUTPUT'S REGISTER IN SAVEOUTP\n         L     SAVE,SAVOUTP+4      RESTORE CALLING ROUTINES REGISTER\n         LM    14,12,12(SAVE)\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*  LINKING TO ROUTINE CALLING ACTUAL PARAMETER                       *\n*                                                                    *\n         USING IHIGPROT,ADR\n         L     SAVE,SAVEOI+4\n         CNOP  2,4\n         MVC   *+12(2),8(CDSA)     MOVE PROGRAM BLOCK NUMBER\n         BAL   BRR,CAP1GP\n         DROP  ADR\n         USING *,BRR\n         DC    H'0'\n         DC    H'0'\n         NOP   0\nOUTPUTTH LA    SAVE,SAVOUTP\n         DROP  BRR\n         LM    14,7,12(SAVE)            RESTORE OUTPUT'S REGISTER\n         LM    9,12,56(SAVE)            EXCEPT REG8=ADR\n         B     SAVOUTP+72\nSAVOUTP  DS    18F\n*                                                                    *\n*                                                                    *\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n         TM    PARTST,X'01'\n         BZ    OUTPUT25\n         LA    GRA,FCTVALST(FSA)\n         CR     GRA,ADR\n         BNE   ERROR20\n         MVI    PARTST,X'00'\nOUTPUT25 SR    GRLTH,GRLTH\n         TM    TYP,X'03'\n         BM    OUTPUT3\n         LA    GRLTH,1(0,GRLTH)         BOOLEAN VALUE\n         B     OUTPUT5\nOUTPUT3  TM    TYP,X'01'\n         BZ    OUTPUT4\n         LA    GRLTH,4(0,GRLTH)         INTEGER VALUE\n         B     OUTPUT5\nOUTPUT4  TM    OPTSW(FSA),X'20'         REAL VALUE TEST IF LONG/SHORT\n         BO    OUTPUT3+8                SHORT\n         LA    GRLTH,8(0,GRLTH)         LONG\n         SPACE 3\nOUTPUT5  L     GRR,R                    INSERT VALUE TO RECORD BUFFER\n         LR    GRA,GRR\n         AR    GRA,GRLTH\n         C     GRA,BE\n         BH    ERROR38\nOUTPUT51 BCTR  GRLTH,0\n         EX    GRLTH,OUTINMOV\n         LA    GRLTH,1(0,GRLTH)\n         AR    GRR,GRLTH                INCREASE CHARACTER POINTER\n         ST    GRR,R\n         MVI   RECOI,X'00'             CLEAR FLAG BIT\n         SPACE 3\n         L     SAVE,SAVOUTP+4           RESTORE CALLING ROUTINES REGIS-\n         LM    14,12,12(SAVE)           TER\n         USING IHIGPROT,ADR\n         L     SAVE,SAVEOI+4\n         DROP  ADR\n         B     8(0,BRR)\n         EJECT\n*\n*\n*   THUNK OUT\n*   LIST PROCEDURE INVOKE  CALL ACTUAL PARAMETER IN IHIFSA AND THIS\n*   CALL THUNKOUT,WHICH ASSIGN OUTPUT AS ACTUAL PROCEDURE TO LIST\n*\n*\nPBT      EQU   11                  REGISTER\nLAT      EQU   12\nFSB      EQU   13                  ADDRESS OF FIXED STORAGE AREA\n         SPACE 3\n*\n*  DISPLACEMENT  IN FSA\n*\n         SPACE 3\n         CNOP  2,4\nTHUNKOUT BALR  BRR,0\n         L     ADR,8(0,BRR)\n         B     12(BRR)\n         DC    A(IHIGPROT)              INFORMATION CHARACTERIZE OUTPUT\n         MVI   PROLPBN(FSB),X'00'\n         STM   PBT,LAT,PROLREG(FSB)\n         B     CAP2(0,FSB)\n         EJECT\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*                     ROUTINE GET                                    *\n*                                                                    *\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n         SPACE 4\n*\n*  REGISTER CONTENTS ON ENTRY POINT IHIGPRGT\n*\n*ENTRY   EQU   15                  ADDRESS OF ENTRYPOINT\n*RETURN  EQU   14                  RETURN ADDRESS\n*SAVE    EQU   13                  ADDRESS OF SAVE AREA IN FSA\n*PARAM   EQU   1                   ADDRESS OF PARAMETER LIST\n*\n*\n*  OTHER GENERAL REGISTER\nNOT      EQU   9\nNTE      EQU   10\n         ENTRY IHIGPRGT\n         USING *,ENTRY\nIHIGPRGT ST    SAVE,SAVEPG+4\n         LA    SAVE,SAVEPG\n         SAVE  (14,12)\n         DROP  ENTRY\n         LR    BASE,ENTRY\n         USING IHIGPRGT,BASE\n         L     FSA,SAVEPG+4             ADDRESS OF FIXED ST AREA\n         ST    SAVE,SAVEGET+4\n         LA    SAVE,SAVEGET\n         L     DSN,ADSTAB(FSA)     FIRST ENTRY IN DSTAB IS APGCF\n         L     DSN,0(0,DSN)        ADDRESS OF PGCF TO REGISTER DSN\n         LA    DSNR,16             DATA SET NUMBER TO REGISTER DSNR\n         USING PGCF,DSN\n         TM    RECPG,X'01'             TEST IF RECURSIVELY\n         BO    ERROR43                 YES\n         OI    RECPG,X'01'             SET FLAG BIT\n         SPACE 2\n         TM    PG,PG0              TEST IF DATA SET OPEN\n         BZ    ERROR10             DATA SET NOT OPEN\n         SPACE 2\n         L     DCB,ADCB            LOAD REGISTER FOR ADDRESSING DCB AND\n         USING IHADCB,DCB          DECB\n*\n         TM    PG,PG1              TEST LAST PROCEDURE\n         BO    GET1                LAST PROCEDURE WAS GET\n         CHECK DECB                CHECK THE PREVIOUS WRITE\n         NOTE  (DCB)\n         ST    GR1,NOTEADR         INFORMATION ABOUT THE LAST RECORD\n*                                  WRITTEN TO PGCF TO HAVE FOR A LATER\n*                                  PUT  WHERE TO CONTINUE DATA SET\n         OI    PG,PG1              PG1=1  INDICATING GET IS EXECUTED\n         LA    DSN,4(0,DSN)\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EN(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SH    DSN,=H'4'           FOR CORRECT ADDRESSING OF PGCF IN\n*\n*  EVALUATE IDENTIFICATION NUMBER FIRST PARAMETER\n*\n*\nGET1     L     PARAM,SAVEPG+24\n         L     GRA,0(0,PARAM)      ADDRESS OF PARAMETER TO GRA\n         LTR   GRA,GRA             TEST TF CONVERSION\n         BP    GET2                NO CONVERSION\n         TM    OPTSW(FSA),X'20'         CONVERSION TO INTEGER NECS\n         BO    GET11                    SHORT PROCSISION\n         LD    FR0,0(0,GRA)             LONG\n         B     GET11+4                  PARAMETER TO FR0\nGET11    LE    FR0,0(0,GRA)\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CI(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     *+8\nGET2     L     GR0,0(0,GRA)\n         SPACE 2\n*\n         LTR   GR0,GR0             IDENTIFICATION NUMBER S IN GR0\n         BM    ERROR39\n         C     GR0,TWOP16\n         BNL   ERROR39\n         STH   GR0,S               GET/PUT IDENTIFICATION WITH IN RANGE\n*\n         L     GRR,BB\n         LA    GRR,12(0,GRR)       INSERT CORRECT CHARACT  POINTER\n         ST    GRR,R\n*                                  EXAMINE NOTTAB TO FIND AN ENTRY\n*                                  FOR S\nGET12    L     NOT,ANOTTAB(FSA)    ADDRESS OF NOTTAB IN REGISTER NOT\n         LR    NTE,NOT             ADDRESS OF NOTTAB IN REGISTER NTE\nGET3     LA    NTE,8(0,NTE)        INCREASE ADDRESS BY RIGHT\n         C     NTE,0(0,NOT)        COMPARE WITH NXE\n         BE    ERROR14             NO ENTRY FOR S FIND IN NOTTAB\n         LR    GRA,DSNR            DATA SET NUMBER TO GRA\n         CH    GRA,0(0,NTE)        TEST IF DATA SET NUMBER=16\n         BNE   GET3                DATA SET NUMBER NOT =16 EXAMINE NEXT\n         CLC   S(2),2(NTE)         TEST IF S IS EQUAL IN NOTTABENTRY\n         BNE   GET3                NO  EXAMINE NEXT ENTRY IN NOTTAB\n*                                  AN ANTRY FOR S FIND IN NOTTAB\n         LA    GR0,4(0,NTE)             ADDRESS OF NOTINFORMATION\n         LR    GR1,DCB             DCB ADDRESS TO REG1\n         SPACE 3\n         POINT (1),(0)\n         SPACE 3\n         L     GRBB,BB\n         READ  DECB,SF,(DCB),(GRBB),MF=E     READ A BLOCK TO BUFFER\n         CHECK DECB                          CHECK THIS READ\n         SPACE 2\n         CLC   8(2,GRBB),S              TEST IDENTIFICATION NUMBER\n         BNE   ERROR14\n         MVC   TYP(1),10(GRBB)          TYP INFORMATION TO PGCF\n         AH    GRBB,0(0,GRBB)      BB+BL\n         ST    GRBB,RE                  EFFECTIV END OF RECORD CURRENT X\n               *\n*\n         L     PARAM,SAVEPG+24\n         L     SAVE,SAVEGET+4           RESTORE PROGRAMS REGISTER\n         LM    14,12,12(SAVE)\n         L     ADR,4(0,PARAM)           ADDRESS OF LIST PROCEDUR\n         USING IHIGPRGT,ENTRY\n         L     SAVE,SAVEPG+4\n         DROP  ENTRY\n         CNOP  0,4\n         BAL   BRR,PROLOG(SAVE)\n         DC    A(THUNKIN)\n         DC    X'8880'                 TYP INFORMATION FOR STANDARD\n*                                       PROCEDUR\n         DC    H'1'\n*\n         USING *,BRR\n         LA    SAVE,SAVEPG\n         LM    14,12,12(SAVE)\n         USING IHIGPRGT,ENTRY\n         L     SAVE,SAVEPG+4\n         MVI   RECPG,X'00'             CLEAR FLAG BIT\n         BR    RETURN\nSAVEGET  DS    18F\n         DROP  BRR\n         EJECT\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*   ROUTINE INPUT IS ACTUAL PROCEDURE TO LIST,EVALUATED BY\n*   THUNKIN\n*                                                                    *\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*\n*  REGISTER CONTENTS ON ENTRY POINT IHIGPRIT\n*\n*SAVE    EQU   13                  ADDRESS OF FIXED STORAGE AREA\n*ADR     EQU   8                        ADDRESS OF ENTRYPOINT IHIGPRIT\n*BRR     EQU   15                  ADDRESS OF A THUNKFIELD\n*\n*  REGISTER CONTENTS ON ENTRY POINT INPUTTH\n*\n*BRR     EQU   15                  ADDRESS INPUTTH\n*ADR     EQU   8                   ADDRESS OF PARAMETER WHERE TO STORE\n*                                  VALUE FROM BUFFER\n         SPACE 4\n         ENTRY IHIGPRIT\n         USING IHIGPRIT,ADR\nIHIGPRIT ST    SAVE,SAVEOI+4\n         LA    SAVE,SAVEOI\n         SAVE  (14,12)\n         ST    SAVE,SAVEIN+4\n         LR    BASE,ADR                 FIXED STORAGE AREA ON ENTRY\n         DROP  ADR\n         USING IHIGPRIT,BASE\n         L     FSA,SAVEOI+4\n         LA    SAVE,SAVEIN\n         L     DSN,ADSTAB(FSA)\n         L     DSN,0(0,DSN)             ADDRESS OF PGCF TO REGISTER DSN\n         LA    DSNR,16\n         USING PGCF,DSN                 FOR ADDRESSING PUT/GET CONTR F\n         TM    RECOI,X'01'             TEST IF RECURSIVELY\n         BO    ERROR43                 YES\n         OI    RECOI,X'01'             SET FLAG BIT\n         SPACE 3\n         CLI   7(BRR),X'01'        TEST NUMBER OF PARAMETERS\n         BNE   ERROR21                  NUMBER DOES NOT CORRESPOND     X\n                                        BETWEEN DECLARATION AND CALL\n          TM    4(BRR),X'08'            TEST IF ASSIGNMENT POSSIBLE\n          BO    ERROR20\n         MVC   TYPC(1),5(BRR)\n         NI    TYPC,X'03'\n         CLC   TYP(1),TYPC\n         BNE   ERROR20             PGCF\n         SPACE 2\n*\n*\n* *LINKING TO ROUTINE CALLING ACTUAL PARAMETER *  *  *  *  * *  *  *  *\n*\n         SPACE 2\n         SAVE  (14,12)                  SAVE REGISTER IN SAVEIN\n         L     SAVE,SAVEIN+4\n         MVC   ADRTHUNK(4),0(BRR)\n         LM    14,12,12(SAVE)           RESTORE PROGRAMS REGISTER\n          USING IHIGPRIT,ADR\n         L     SAVE,SAVEOI+4\n         CNOP  2,4\n         MVC   *+12(2),8(CDSA)     MOVE PROGRAM BLOCK NUMBER\n         BAL   BRR,CAP1GP\n         DROP  ADR\n         USING *,BRR\n         DC    H'0'\n         DC    H'0'\n         NOP    0\nINPUTTH  LA    SAVE,SAVEIN\n         DROP  BRR\n         LM    14,7,12(SAVE)            RESTORE INPUT'S REGISTER EXCEPT\n         LM    9,12,56(SAVE)            REG8=ADR\n         B     SAVEIN+72\nSAVEIN   DS    18F\n*                                                                    *\n*                                                                    *\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n         L     GRBB,BB\n         AH    GRBB,0(0,GRBB)\n         C     GRBB,R\n         BNH   ERROR38                  BUFFER OVERFLOW\n         SR    GRLTH,GRLTH\n         TM    TYP,X'03'\n         BM    INPUT1\n         LA    GRLTH,1(0,GRLTH)         BOOLEAN VALUE\n         B     INPUT3\nINPUT1   TM    TYP,X'01'\n         BZ    INPUT2\n         LA    GRLTH,4(0,GRLTH)         INTEGER VALUE\n         B     INPUT3\nINPUT2   TM    OPTSW(FSA),X'20'         REAL VALUE TEST IF LONG/SHORT\n         BO    INPUT1+8                 SHORT\n         LA    GRLTH,8(0,GRLTH)         LONG\n         SPACE 2\nINPUT3   L     GRR,R\nINPUT31  BCTR  GRLTH,0\n         EX    GRLTH,INOUTMOV\n         LA    GRLTH,1(0,GRLTH)\n         AR    GRR,GRLTH                INCREASE CHARACTER POINTER\n         ST    GRR,R\n         MVI   RECOI,X'00'             CLEAR FLAG BIT\n*\n         SPACE 2\n         L     SAVE,SAVEIN+4\n         LM    14,12,12(SAVE)\n         USING IHIGPRIT,ADR\n         L     SAVE,SAVEOI+4\n         DROP  ADR\n         B     8(0,BRR)\n         EJECT\n*\n*\n*   THUNK IN\n*   LIST PROCEDURE INVOKE  CALL ACTUAL PARAMETER IN IHGFSA AND THIS\n*   CALL THUNKIN,WHICH ASSIGN INPUT AS ACTUAL PROCEDURE TO LIST\n*\n*\n         CNOP  2,4\nTHUNKIN  BALR  BRR,0\n         L     ADR,8(0,BRR)\n         B     12(BRR)\n         DC    A(IHIGPRIT)         INFORMATION CHARACTERIZE OUTPUT\n         MVI   PROLPBN(FSB),X'00'\n         STM   PBT,LAT,PROLREG(FSB)\n         B     CAP2(0,FSB)\n         EJECT\n*\n*\n*\n*   OPEN DATA SET SYSUT2\n*   RESERVE MAIN FOR ONE DCB AND ONE DEC,ONE I/O BUFFER AND FOR NOTTAB\n*   IF NOT CREATED BEFORE\n*\n*\n         ENTRY IHIGPROP\nIHIGPROP SAVE  (14,12)                  SAVE REGISTERS\n         LR    BASE,ENTRY\n         USING IHIGPROP,BASE\n         USING IHADCB,DCB\n         ST    SAVE,SAVEOP+4\n         LA    SAVE,SAVEOP\n         LA    GRA,IHIGPRCL\n         L     GRB,IORLST(FSA)                                     0226\n         L     GRB,GP(GRB)                                         0226\n         ST    GRA,0(0,GRB)\n         L     GRA,ANOTTAB(FSA)\n         LTR   GRA,GRA\n         BP    OPGP1\n         GETMAIN R,LV=1024              GET AREA FOR NOTTAB\n         ST    1,ANOTTAB(FSA)\n         LR    GRA,GR1                  ANOTTAB TO GRA\n         LR    GRB,GR1                  ANOTTAB TO GRB\n         LA    GRB,8(0,GRB)\n         ST    GRB,0(0,GRA)             STORE POINTER NXE IN NOTTAB\n         LA    GRB,1016(0,GRB)\n         ST    GRB,4(0,GRA)             STORE POINTER NXEF IN NOTTAB\n         SPACE 2\nOPGP1    GETMAIN R,LV=116          GET AREA FOR ONE DCB AND ONE DECB\n         ST    GR1,ADCB\n         LR    DCB,GR1\n*  TRANSFER DCBMODEL\n*\n         MVC   0(88,DCB),DCBMODEL\n         L     GR1,IORLST(FSA)          INSERT SYNAD               0226\n         L     GR1,ER(GR1)              ADDRESS TO                 0226\n         ST    GR1,DCBSYNAD             IHIIORER                   0226\n*\n*\n         OPEN  ((DCB),(OUTIN))          OPEN DATA SET\n         TM    DCBOFLGS,X'10'           TEST DDCARD\n         BO    OPGP2                    DDCARD CORRECT\n         LR    13,FSA                   DD CARD INCORRECT OR MISSING\n         B     FSAERR+41*4(FSA)\nOPGP2    L     GR0,BE                   BE=BUFFER LENGTH\n         GETMAIN R,LV=(0)               GET AREA FOR RECORDBUFFER\n         ST    GR1,BB\n         A     GR1,BE                   BB+BE TO BE\n         ST    GR1,BE                   BE DEFINE BUFFER END\n         OI    PG,PG0                   PG0=1 DATA SET OPEN\n         L     SAVE,SAVEOP+4\n         RETURN (14,12)\n         SPACE 3\n*  *  * OPEN EXIT ROUTINE * * * *\nIHIGPRDX LH    GRA,DCBBLKSI             TEST DCBBLOCKSIZE\n         LTR   GRA,GRA\n         BZ    EXIT1                    BLOCKSIZE=0\n         ST    GRA,BE                   BLOCKSIZE NOT ZERO\n         B     EXIT1+8\nEXIT1    L     GRA,BE                   BE=2048 TO BLOCKSIZE\n         STH   GRA,DCBBLKSI\n         RETURN\n         EJECT\n*\n*\n*\n*   CLOSE DATA SET SYSUT2\n*   RELEASE DCB,DECB AND I/O BUFFER,IS CALLED FROM IHGIOR-CLOSEPE\n*\n*\n*\n         SPACE 3\n         ENTRY IHIGPRCL\nIHIGPRCL SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIGPRCL,BASE\n         ST    SAVE,SAVEOP+4\n         LA    SAVE,SAVEOP\n         L     DSN,ADSTAB(FSA)\n         L     DSN,0(0,DSN)\n         LA    DSNR,16\n         L     DCB,ADCB\n         SPACE 3\n         SPACE 3\n         CLOSE ((DCB))\n         SPACE 3\n         L     GR1,BB                   BUFFER BEGIN ADDRESS TO GR1\n         L     GR0,BE\n         SR    GR0,GR1                  BUFFER LENGTH TO GR0\n*\n*        FREEMAIN FOR RECORD BUFFER\n*\n         FREEMAIN  R,LV=(0),A=(1)\n*\n*        FREEMAIN FOR DCB AND DECB\n*\n         FREEMAIN  R,LV=116,A=ADCB\n         SPACE 2\n         L     SAVE,SAVEOP+4\n         RETURN (14,12)\n         EJECT\nRECPG    DC    X'00'\nRECOI    DC    X'00'\nTYPC     DS    C\nPARTST   DC    X'00'\nSAVEPG   DS    18F\nSAVEOI   DS    18F\nSAVEOP   DS    18F\nDCBMODEL DCB   DSORG=PS,MACRF=(RP,WP),DDNAME=SYSUT2,RECFM=V,NCP=1,     X\n               EXLST=ADCBEXIT                                      0226\nADCBEXIT DC    X'85'\n         DC    AL3(IHIGPRDX)\n*\n* EXTERNAL  ADDRESSES\nAOPENPG  DC    A(IHIGPROP)\n         SPACE 3\n         EJECT\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n*                                                                    *\n*      THIS ROUTINE IS USED INSTEAD OF CAP1 IN FSA                   *\n*                                                                    *\n*  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *\n         SPACE 3\nGR3       EQU  3\nCDSA      EQU  10\nCAP1GP   BALR  ADR,0\n         USING *,ADR\n         L     GR3,RASPT(FSB)\n         LA    GR3,8(GR3)\n         C     GR3,RASPB(FSB)\n         BNL   ERROR36             RASOVERFLOW\n         ST    CDSA,0(GR3)\n         ST    BRR,4(GR3)\n         ST    GR3,RASPT(FSB)\n         L     ADR,ADRTHUNK\n         DROP  ADR\n         BR    ADR                 TO THUNK ROUTINE\n         SPACE 2\nTWOP16   DC    F'65536'                 2**16\nADRTHUNK DS    F\n         LTORG\n         SPACE 3\n         CNOP  0,8\nOUTINMOV MVC   0(1,GRR),0(ADR)\n         CNOP  0,8\nINOUTMOV MVC   0(1,ADR),0(GRR)\n         SPACE 3\n*                                       DATA SET CLOSED\nERROR10  LR    13,FSA                   ADDRESS OF FSA TO REG13\n         B     FSAERR+10*4(FSA)\n         SPACE 3\nERROR14  LR    13,FSA                   ADDRESS OF FSA TO REG13\n*                                       NO ENTRY IN NOTTAB I.E. BACK-\n         B     FSAERR+14*4(FSA)         WARD REPOSITIONING NOT DEFINED\n         SPACE 3\nERROR20  LR    13,FSA                   ADDRESS OF FSA TO REG13\n*                                       DIFFERENT TYPE OR KIND OF\n         B     FSAERR+20*4(FSA)         PARAMETER AT ACTUAL AND FORMAL\n         SPACE 3                        POSITION\nERROR21  LR    13,FSA                   ADDRESS OF FSA TO REG13\n*                                       NUMBER OF PARAMETERS DOES NOT\n         B     FSAERR+21*4(FSA)         CORRESPOND BETWEEN DECLARATION X\n                                        AND CALL\n         SPACE 3\n*                                  TOO MANY NESTED BLOCKS,PROCEDURES\nERROR36   LR   13,FSA              AND PARAMETER CALLS. INTERNAL\n         B     FSAERR+36*4(FSA)    (RETURN ADDRESS STACK) OVERFLOW\n         SPACE 2\nERROR38  LR    13,FSA                   ADDRESS OF FSA TO REG13\n         B     FSAERR+38*4(FSA)         GET/PUT BUFFER OVERFLOW\n         SPACE 3\nERROR39  LR    13,FSA                   ADDRESS OF FSA TO REG13\n*                                       GET/PUT IDENTIFICATION OUT OF\n         B     FSAERR+39*4(FSA)         RANGE\n*\n*\nERROR43  LR    13,FSA                  RECURSIVELY USE OF PUT/GET\n         B     FSAERR+43*4(FSA)        OUTPUT/INPUT\n         EJECT\n*\n*\nPGCF     DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nBB       DS    A\nBE       DS    A\nNOTEADR  DS    A\nS        DS    H\nTYP      DS    C\nPG       DS    C\n*\n*  PROVIDEING SYMBOLIC NAMES FOR DCB\n*\n         DCBD  DSORG=BS\n*\n*  PROVIDEING ONE DECB\n*\n         READ  DECB,SF,MF=L\nFSAAREA  DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIIAR": {"ttr": 2308, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00d\\x00d\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 100, "newlines": 100, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIIAR,INARRAY AND INTARRAY'\n*\n*STATUS:CHANGE LEVEL 000\n**\n*FUNCTION/OPERATION:ASSIGN NUMBERS TO ARRAY INDICATED BY SECOND\n*   ACTUAL PARAMETER BY CALLING INREAL OR ININTEGER REPEATEDLY\n*\n*ENTRY POINTS:\n*        IHIIARRY-FROM GENERATED OBJECT MODULE;INARRAY  LA 1,PARMLIST\n*        IHIIARRT-FROM GENERATED OBJECT MODULE;INTARRAY BALR 14,15\n*   DATA PASSED BY NAME\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR -EVALUATE DATA SET NUMBER\n*        IHIIDE -INREAL OR ININTEGER\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\nIHIIARTN CSECT\nDSN      EQU   5                        RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                        DATA SET NUMBER\nGRA      EQU   7                        REGISTER FOR TRANSFER DESTADR\nGRB      EQU   8                        SCRATCH REGISTER\nBASE     EQU   9                        BASE REGISTER\nFKTR     EQU   10                       REGISTER FOR TRANSFER FLAGBYTE\nFIXSTA   EQU   12                       ADDRESS OF FSA DURING EXECUSION\n         SPACE 4\nENTRY    EQU   15                       ENTRY ADDRESS\nRETURN   EQU   14                       RETURN ADDRESS\nSAVER    EQU   13                       ADDRESS OF 1:ST SAVEAREA IN FSA\nPARAM    EQU   1                        ADDRESS OF PARAMETER LIST\n         ENTRY IHIIARRT\n         ENTRY IHIIARRY\nIHIIARRT STM   14,12,12(SAVER)          SAVE REGISTERS IN FSA\n         LR    FIXSTA,SAVER             ADDRESS OF FSA IN REGISTER 12\n         LA    BASE,22(0,ENTRY)         BASE=ADDRESS OF IHGIARRY\n         USING IHIIARRY,BASE\n         LA    SAVER,72(0,SAVER)        ADDRESS OF 2:D SAVEAREA IN FSA\n         LH    FKTR,FOUR                FLAGBYTE INTARRAY\n         B     INAR1\nIHIIARRY STM   14,12,12(SAVER)\n         LR    FIXSTA,SAVER             ADDRESS OF FSA TO REGISTER 12\n         LR    BASE,ENTRY\n         LA    SAVER,72(0,SAVER)        ADDRESS OF 2:D SAVEAREA IN FSA\n         SR    FKTR,FKTR                FLAGBYTE INARRAY\n         SPACE 2\n*        EVALUATE DATA SET NUMBER\n         SPACE 2\nINAR1    L     ENTRY,AEVDSNY\n         BALR  RETURN,ENTRY\n         SPACE 2\n* EVALUATE DEST ADDRESSES\n         SPACE 2\n         L     PARAM,4(0,PARAM)\n         L     GRB,12(0,PARAM)          ADDRESS OF DESTEND+1 TO GRB\n         L     GRA,8(0,PARAM)           ADDRESS OF STARTDEST TO GRA\n*\n*  CALL ROUTINE INREAL-ININTEGER\n*\n*\nINAR2    L     ENTRY,EARRINN\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n         LTR   FKTR,FKTR\n         BP    INAR3\n         TM    OPTSW(FIXSTA),X'20'      TEST LONG OR SHORT PRECS.\n         BO    INAR3\n         LA    GRA,8(0,GRA)             INCREASE  DESTADDRESS INARRAY\n         B     *+8\nINAR3    LA    GRA,4(0,GRA)             INCREASE  DESTADDRESS INTARRAY\n         CR    GRA,GRB\n         BL    INAR2\n         LR    SAVER,FIXSTA\n         RETURN (14,12)\n         SPACE 4\nFOUR     DC    H'4'\n         SPACE\n         SPACE\n         SPACE\n*  EXTERNAL ADDRESSES\n         SPACE\nAEVDSNY  DC    V(IHIIOREV)\nEARRINN  DC    V(IHIIDEAI)\n         EJECT\nFAS      DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIIBA": {"ttr": 2311, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00h\\x00h\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 104, "newlines": 104, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIIBA,INBARRAY'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:ASSIGN BOOLEAN VALUE TO ARRAY INDICATED BY SECOND\n*   ACTUAL PARAMETER BY CALLING INBOOLEAN REPEATEDLY\n*\n*ENTRY POINT:\n*        IHIIBARR-FROM GENERATED OBJECT MODULE    LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER\n*        IHIIBO-INBOOLEAN\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n         SPACE\n         SPACE\nIHIIBARR CSECT\n         SPACE\nENTRY    EQU   15                  ADRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADDRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA  IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\nFSA      EQU   12                       ADRESS OF FIXED STORAGE AREA\n         SPACE\n         SPACE\n*\n*  OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                   ADRESS OF RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER\nBASE     EQU   7                   BASE REGISTER FOR THIS ROUTINE\nGRA      EQU   2\nGRE      EQU   3\n         SPACE\n         SPACE\n         SPACE\n         SPACE\n         SPACE\n*\n*\n*  DATA SET FLAGS (DSF AND DSF+1 IN DSTAB)\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS2      EQU   X'20'\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS6      EQU   X'02'\nDS7      EQU   X'01'\nDS8      EQU   X'80'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\n         EJECT\n         SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIIBARR,BASE\n         LR    FSA,SAVE                 ADRESS OF FIXED ST AREA TO FSA\n         LA    SAVE,72(0,SAVE)\n*  EVALUTE DATA SET NUMBER\n*\n         L     ENTRY,AEVDSNY\n         BALR  RETURN,ENTRY\n*\n*  EVALUTE DESTINATION ADRESSES\n*\n         L     PARAM,4(0,PARAM)\n         L     GRE,12(0,PARAM)          ADRESS OF DESTEND+1 TO GRE\n         L     GRA,8(0,PARAM)           ADRESS OF START DEST TO GRA\n*\n*  CALL  FOR ROUTINE INBOOLEAN\nINBARRY1 L     ENTRY,EARRINB\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n         SPACE\n         LA    GRA,1(0,GRA)             INCREASE ADEST BY ONE\n         CR    GRA,GRE\n         BL    INBARRY1                 MORE VALUE TO BE READ\n         LR    SAVE,FSA\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE\n         SPACE\n*\n* EXTERNAL ADRESSES\n*\n*\nAEVDSNY  DC    V(IHIIOREV)        ADRESS OF ROUT EVALUATE DATA SET NR\nEARRINB  DC V(IHIIBOAR)           ADRESS OF ROUTIN INBOOLEAN\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIIBO": {"ttr": 2314, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x01'\\x01'\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@\"", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 295, "newlines": 295, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIIBO,INBOOLEAN'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:SCAN INPUT BUFFER UNTIL A BOOLEAN VALUE IS FOUND\n*   TRANSFER IF 'TRUE' 1 IF 'FALSE' 0  TO BOOLEAN IDENTIFIER,SECOND\n*   ACTUAL PARAMETER\n*\n*ENTRY POINTS:\n*        IHIIBOOL-FROM GENERATED OBJECT MODULE    LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*        IHIIBOAR-FROM ARRAY MODULE IHIIBA        L 2, A(DESTINATION)\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR -EVALUATE DATA SET NUMBER-OPEN DATA SET-\n*   CHANGE TO NEXT INPUT RECORD\n*\n*EXITS-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :INPUT REQUEST BEYOND END OF DATA SET NO.5\n*   BRANCH TO IHIFSA         L 13,IHIFSA\n*                  B  FSAERR+XX*4(13)    XX ERROR NO.\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*NOTES:LINKING TO IHIIBOAR DEVIATE FROM STANDARD\n*   CHARACTER DEPENDENCE:\n*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n         SPACE\n         SPACE\nIHIIBOOL CSECT\n*2200023800,024000,048000-048400                                   0221\n*2200016400,017000,018400,022800,027400,046600,050200-051400       0226\n         SPACE\nENTRY    EQU   15                  ADRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADDRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA  IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\n*\nFSA      EQU   12                       ADRESS OF FIXED STORAGE AREA\n         SPACE\n         SPACE\n*\n*  OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                   ADRESS OF RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER\nBASE     EQU   7                   BASE REGISTER FOR THIS ROUTINE\nGRA      EQU   2\nGRE      EQU   3\nGRK      EQU   4\nGRR      EQU   8\nCB       EQU   9\nMP       EQU   10\nEMB      EQU   11\nKD       EQU   1\n         SPACE\n         SPACE\n         SPACE\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n         SPACE\n         SPACE\n*\n*\n*  DATA SET FLAGS (DSF AND DSF+1 IN DSTAB)\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS2      EQU   X'20'\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS6      EQU   X'02'\nDS7      EQU   X'01'\nDS8      EQU   X'80'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\n         ENTRY IHIIBOAR\n         SAVE  (14,12)\n         LA    BASE,56(0,ENTRY)                                    0226\n         LR    FSA,SAVE                 ADRESS OF FIXED STORAGE AREA\n         USING SAVAR,BASE              INTO REGISTER FSA\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\n*  EVALUATE DATA SET NUMBER\n*\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     INBOOL1\n         SPACE\n         SPACE\nIHIIBOAR STM   14,12,12(SAVE)          ENTRY POINT FOR CALLING INBARRY\n         LA    BASE,24(0,ENTRY)                                    0206\n         USING SAVAR,BASE\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\n         USING DSTABLE,DSN\n         ST    GRA,ADEST                STORE DESTINATION ADRESS\n         B     INBOOLOP\nSAVAR    DS    18F                      SAVE REGISTER\n         SPACE\nINBOOL1  L     PARAM,4(0,PARAM)\n         ST    PARAM,ADEST\nINBOOLOP NI    DSF+1,X'DF'         DS10=0                          0221\n         TM    Q,X'FF'                                             0221\n         BZ    *+8                                                 0206\n         B     ERROR2              INCOMPATIBLE ACTION ON DATA SET 0206\n         LR    GRR,DSNR            IS DATA SET NR = 1              0206\n         BCT   GRR,*+8                                             0206\n         B     ERROR2              INCOMPATIBLE ACTION ON DATA SET 0206\n         TM    DSF,DS0             IS DATA SET OPEN                0206\n         BO    INBOOL2                  DATA SET IS OPEN\n         NI    DSF,X'FD'                DS6 IS SET TO 0\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         BALR  RETURN,ENTRY             CALL FOR OPEN\n         B     INBOOL3\nINBOOL2  TM    DSF,DS2             WAS LAST I/O OUTPUT             0206\n         BO    ERROR3              INPUT BEYOND LAST OUTPUT        0206\n         TM    DSF,DS6           IS D.S. OPEN FOR OUTPUT OR E.O.D. 0206\n         BZ    INBOOL3                                             0206\n         TM    DSF,DS7             IS E.O.D. REACHED               0206\n         BO    ERROR5                                              0206\n         B     ERROR2                                              0221\nINBOOL3  L     GRR,R                    CHARACTER POINTER IN REGISTER\n         BCTR  GRR,0                    GRR\n         ST    GRR,R\nINBOOL4  MVI   F,X'00'                  CLEAR FLAGBYTE\nINBOOL5  LA    MP,MB                    MANTISSA BUFFER POINTER\n         SR    CB,CB                    BLANK COUNTER CLEARED\n         TM    DSF,DS7\n         BO    ERROR5                   INPUT REQUEST BEYOND END OF DAT\n         SPACE\nINBOOL6  L     GRE,RE\n         BCTR  GRE,0\n         L     GRR,R\n         CR    GRR,GRE\n         BNE   INBOOL7\n         SPACE\n         SPACE\n         L     ENTRY,IORLST(FSA)      RECORD END IS REACHED        0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY             CALL FOR ROUTINE NEXTREC\n         B     INBOOL3\n         SPACE\n         SPACE\nINBOOL7  LA    GRR,1(0,GRR)             INCREASE R BY ONE\n         ST    GRR,R\n         CLI   0(GRR),C''''\n         BE    INBOOL9                  CHARACTER JUST READ IS APOSTR\n         SPACE\n         SPACE\n         TM    F,X'FF'\n         BZ    INBOOL6                  NO APOSTR READ  NEXT CHARACTER\n         SPACE\n         SPACE\n         SPACE\n         CLI   0(GRR),C' '              APOSTR READ ALREADY\n         BNE   INBOOL8                  CHARACTER IS NOT BLANK\n         LA    CB,1(0,CB)               CHARACTER IS BLANK INCR COUNTER\n         SR    GRK,GRK\n         IC    GRK,K                    TEST IF BLANK DELIMITERS DENOTE\n         CR    GRK,CB                   BY K IS ALREADY FOUND\n         BE    INBOOL4                  NEW SCAN LOOP K DELIMT FOUND\n         BNE   INBOOL6                  K DELIMITERS NOT FOUND\n         SPACE\n         SPACE\nINBOOL8  SR    CB,CB               CLEAR BLANK COUNTER\n         LA    EMB,MB+5            END OF BUFFER ADDRESS\n         CR    MP,EMB\n         BNL   INBOOL4                  NO VALID BOOLEAN VALUE FOUND   X\n                                        NEW SCAN LOOP\n         SPACE\n         SPACE\n         MVC   0(1,MP),0(GRR)           INSERT FOUND CHAR TO BUFFER\n         LA    MP,1(0,MP)               INCREASE MP BY ONE\n         B     INBOOL6                  EXAMINE NEXT CHARACTER\n         SPACE\n         SPACE\n         SPACE\nINBOOL9  SR    CB,CB\n         TM    F,X'FF'\n         BC    5,INBOOL10               APOSTR ALREADY FOUND\n         OI    F,X'01'                  FIRST APOSTR  SET FLAG F\n         B     INBOOL6\n         SPACE\n         SPACE\nINBOOL10 LA    EMB,MB+4                 TEST IF FOUR CHARACTERCS READ\n         CR    MP,EMB\n         BL    INBOOL5\n         BH    INBOOL11\n         CLC   MB(4),ATRUE\n         BNE   INBOOL5                  NO VALID BOOLEAN VALUE FOUND\n         L     GRA,ADEST                BOOLEAN VALUE TRUE FOUND\n         MVI   0(GRA),X'01'             CHARACTER TO DESTINATION\n         B     INBOOL12\n         SPACE\n         SPACE\n         SPACE\nINBOOL11 CLC   MB(5),AFALSE\n         BNE   INBOOL5                  NO VALID BOOLEAN VALUE FOUND\n         L     GRA,ADEST                BOOLEAN VALUE FALSE FOUND\n         MVI   0(GRA),X'00'             CHARACTER TO DESTINATION\n         SPACE\n         SPACE\n         SPACE\n*\n*  RECOGNITION OF THE LAST DELIMITING CHARACTER\n*\n*\nINBOOL12 SR    CB,CB\n         SR    KD,KD\nINBOOL13 LA    GRR,1(0,GRR)             INCREASE CHARACTER POINTER\n         C     GRR,RE\n         BNL   INBOOLNX                 NEXT RECORD\n         CLI   0(GRR),C' '\n         BNE   INBOOL14                 CHARACTER IS NOT BLANK\n         LA    CB,1(0,CB)               CHARACTER IS BLANK  INCREASE CB\n         SR    GRK,GRK                  TEST IF BLANK DELIMITERS DENOTE\n         IC    GRK,K                    BY K IS ALREADY FOUND\n         CR    GRK,CB\n         BNE   INBOOL13                 NOT K BLANK DELIMITERS READ\n         LA    KD,1(0,KD)               K BLANK DELIMITERS READ\n         B     INBOOL13\n         SPACE\n         SPACE\nINBOOL14 LTR   KD,KD                    CHARACTER NOT EQUAL BLANK FOUND\n         BP    *+8                      K OR MORE BLANKS FOUND\n         LA    GRR,1(0,GRR)             LESS THAN K BLANKS FOUND\n         C     GRR,RE\n         BE    INBOOLNX                 RECORD END REACHED\n         ST    GRR,R                    STORE R TO DSTAB\nINBOOLEX L     SAVE,SAVAR+4             RELOAD REGISTER\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE\n         SPACE\nINBOOLNX L     ENTRY,IORLST(FSA)      CALL FOR ROUTINE NEXTREC     0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     INBOOLEX\n         SPACE\n         SPACE\nERROR2   LR    13,FSA                                              0206\n         B     FSAERR+2*4(FSA)     INCOMP. ACTION ON DATA SET      0206\n         SPACE 2                                                   0206\nERROR3   LR    13,FSA                                              0206\n         B     FSAERR+3*4(FSA)     INPUT BEYOND LAST OUTPUT        0206\n         SPACE 2                                                   0206\nERROR5   LR    13,FSA              INPUT REQUEST BEYOND END OF\n         B     FSAERR+5*4(FSA)     DATA SET\n         SPACE\n         SPACE\n         SPACE\nF        DS    C                        FLAG BYTE FOR  APOSTROPHE\nMB       DS    6C                       BUFFER\nADEST    DS    A                        DESTINATION ADRESS\nATRUE    DC    C'TRUE'                  BOOLEAN VALUE TRUE\nAFALSE   DC    C'FALSE'                 BOOLEAN VALUE FALSE\n         LTORG\n*\n*\n*\n*\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3                                                   0226\nFAS      DSECT                                                     0226\n         COPY  FSAREA                                              0226\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIIDE": {"ttr": 2562, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x02\\x1a\\x02\\x1a\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 538, "newlines": 538, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIIDE INREAL,ININTEGER'\n*\n*STATUS: CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:SCAN INPUT BUFFER UNTIL A VALID NUMBER IS FOUND\n*   TRANSFER TO BINARY AND LOAD TO SECOND ACTUAL PARAMETER\n*\n*ENTRY POINTS:\n*        IHIIDEIR - FROM -   GENERATED OBJECT MODULE;INREAL\n*        IHIIDEII - FROM -   GENERATED OBJECT MODULE;ININTEGER\n*   DATA PASSED BY NAME                              LA 1,PARMLIST\n*                                                    BALR 14,15\n*\n*        IHIIDEAI - FROM -   ARRAY MODULE IHIIAR     L 7,A(DESTINATION)\n*   DATA PASSED BY NAME                              L 10,FLAG\n*                                                    BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR - EVALUATE DATA SET NUMBER - OPEN DATA SET -\n*   CHANGE TO NEXT INPUT RECORD - CONVERT REAL TO INTEGER\n*\n*        IHIFSA - CNVIRD,INTEGER TO REAL\n*\n*        IHIPTT - POWER OF TEN TABLE\n*TABLE/WORK AREAS: IPTAB-TO EVALUATE CHARACTER FROM INPUT BUFFER WHEN\n*   SCANNING AND TO BRANCH TO CORRESPONDING SUBPROGRAM\n*   MB-MANTISSA BUFFER FOR INTERMEDIATE STORING OF VALID DIGITS\n*\n*EXITS-NORMAL:RELOAD REGISTERS AND BR14\n*    -ERROR : INPUT REQUEST BEYOND END OF DATA SET   NO.5\n*   EXP PART OF INPUT NUMBER CONSISTS OF MORE THAN 2 DIGITS  NO.6\n*   BRANCH TO FSA; LA 13,IHIFSA\n*                  B  FSAERR+XX*4(13)    XX CORRESPONDING ERROR NUMBER\n*\n*ATTRIBUTES: SERIALLY REUSABLE\n*\n*NOTES: LINKING TO IHIIDEAI DEVIATE FROM STANDARD SEE ABOVE\n*   CHARACTER DEPENDENCE;THE OPERATION OF THIS MODULE IS DEPENDENT\n*   UPON A TRANSLATION OF EXTERNAL CHARACTERS BY MEANS OF THE\n*   HEXADECIMAL TABLE IPTAB.\n*   PACKED DECIMAL NUMBERS ARE SIGNED USING THE HEXADECIMAL BYTES\n*   X'0F' AND X'0D'.\n*   THE OPERATION OF THIS MODULE IS ALSO DEPENDENT UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n*\n*\nIHIIDECM CSECT\n*2200027800                                                        0221\n*2200024800,026800,027000,032400,059400,059600,085400              0226\n*2200089800-090600                                                 0226\n         SPACE\nENTRY    EQU   15                  ADDRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADDRES\nSAVE     EQU   13                  ADDRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADDRESS OF PARAMETER LIST\n         SPACE 2\n*        REGISTER CONETNTS ON ENTRY POINT IHGIDEAI\n         SPACE\n*GRA     EQU   7                   DESTINATION ADDRESS\n*SAVE    EQU   13                  ADDRESS OF SAVE AREA IN ARRINN\nFSA      EQU   12                  ADDRESS OF FIXED STORAGE AREA\nGRFKT    EQU   10                  FLAG BYTE\n         SPACE 3\n*        OTHER GENERAL REGISTERS\n         SPACE\nDSN      EQU   5                   RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER BINARY\nBASE     EQU   13                  BASE REGISTER FOR THIS ROUTINE\nGRA      EQU   7                   DESTINATION ADDRESS\nGRR      EQU   4                   CHARACTER POINTER\nFR0      EQU   0                   FLOATING-POINT NUMBER\nGR0      EQU   0                   INTEGER NUMBER\nGRMP     EQU   8                   MANTISSA BUFFER POINTER\nGREP     EQU   9                   EXPONENT BUFFER POINTER\nGR2      EQU   2                   USED TO EVALUATE A CHARACTER\nGRCB     EQU   3                   BLANKCOUNTER\nGRDP     EQU   10                  DECIMAL POINT POINTER\nFR1      EQU   1                   FLOATING-POINT REGISTER FOR STORAGE\nGRDP1    EQU   11                  EXPONENT LESS EIGHT\nPOWTEN   EQU   15                  ADDRESS OF POWERTENTABLE LESS EIGHT\n         SPACE 3\n*        DATA SET FLAGS\nDS0      EQU   X'80'\nDS2      EQU   X'20'                                               0206\nDS6      EQU   X'02'                                               0206\nDS7      EQU   X'01'\nDS9      EQU   X'40'                                               0206\n         SPACE 3\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n         SPACE 3                                                   0226\n         ENTRY IHIIDEIR\n         ENTRY IHIIDEII\n         ENTRY IHIIDEAI\nIHIIDEAI STM   14,12,12(SAVE)      REGISTERS STORED IN INARRAY SAVEAR\n         USING IHIIDEAI,ENTRY\n         ST    SAVE,SAVREG+4       SAVREG=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREG         BASE=SAVE=ADDRESS OF SAVREG\n         USING SAVREG,BASE\n         STC   GRFKT,FKT           STORE FLAG BYTE\n         B     LADDR+4\n         SPACE 3\nIHIIDEII STM   14,12,12(SAVE)      REGISTERS IN FIXED STORAGE AREA\n         LR    FSA,SAVE\n         DROP  BASE\n         USING IHIIDEII,ENTRY\n         ST    SAVE,SAVREG+4       SAVREG=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREG         BASE=SAVE=ADDRESS OF SAVREG\n         USING SAVREG,BASE\n         MVI   FKT,X'04'           FLAG BYTE: ININTEGER\n         B     SAVREG+72\n         SPACE 3\nIHIIDEIR STM   14,12,12(SAVE)      REGISTERS IN FIXED STORAGE AREA\n         LR    FSA,SAVE\n         DROP  BASE\n         USING IHIIDEIR,ENTRY\n         MVI   FKT,X'00'           FLAG BYTE: INREAL\n         ST    SAVE,SAVREG+4       SAVREG=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREG         BASE=SAVE=ADDRESS OF SAVREG\n         USING SAVREG,BASE\n         B     SAVREG+72\n         SPACE 2\nSAVREG   DS    18F\n         SPACE 3\n*        EVALUATE DATA SET NUMBER (EVDSN)\n         SPACE\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\nLADDR    L     GRA,4(0,PARAM)      DESTINATION ADDRESS\n         USING DSTABLE,DSN\n         NI    DSF+1,X'DF'         DS10=0                          0221\n         TM    Q,X'FF'             IS DATA SET SECTIONED           0206\n         BZ    *+8                                                 0206\n         B     ERROR2              YES  INCOMPATIBLE ACTION        0206\n         LR    GRR,DSNR                                            0206\n         BCT   GRR,*+8             IS DATA SET NO=1                0206\n         B     ERROR2              YES  INCOMPATIBLE ACTION        0206\n         SPACE 3\n*        TEST IF DATA SET IS OPEN\n         SPACE\n         TM    DSF,DS0\n         BO    *+16                                                0226\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         B     SCAN-6              DCB IS CLOSED\n         TM    DSF,DS2             WAS LAST I/O OUTPUT             0206\n         BZ    *+8                                                 0206\n         B     ERROR3              INPUT BEYOND LAST OUTPUT        0206\n         TM    DSF,DS6                                             0206\n         BZ    SCAN                                                0206\n         TM    DSF,DS7                                             0206\n         BO    ERROR5              END OF DATA REACHED             0206\n         B     ERROR2                                              0221\n         NI    DSF,X'FD'           DS6.=0\n         BALR  RETURN,ENTRY\n         SPACE 3\nSCAN     L     GRR,R               CHARACTER POINTER\n         LA    GRMP,MB+1           MANTISSA BUFFER POINTER\n         LA    GREP,MB+19          EXPONENT BUFFER POINTER\n         MVC   MB+1(20),MB         CLEAR BUFFER\n         SPACE 2\nSCAN1    BCTR  GRR,0               DECREASE CHARACTER POINTER      0206\n         SPACE 2\nSCAN2    MVI   SM,C'+'             MANTISSA SIGN INITIALLY PLUS\n         MVI   F,X'00'             CLEAR FLAG BYTE F\n         MVI   SE,C'+'             EXPONENT SIGN INITIALLY PLUS\n         SPACE 2\nSCAN3    LA    GRR,1(0,GRR)\n         C     GRR,RE\n         BNE   SCAN5               R IS NOT EQUAL RECORD END(RE)\n         SPACE 2\nSCAN4    TM    F,X'82'             RECORD END IS REACHED (R=RE)\n         BC    5,DELIMIT           A VALID NUMBER HAS BEEN READ\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY        RECORD CHANGE IS PERFORMED\n         L     GRR,R\n         TM    DSF,DS7                                             0206\n         BO    ERROR5              END OF DATA REACHED             0206\n         B     SCAN1               NEXT RECORD IS TO BE SCANNED\n         SPACE 2\nSCAN5    SR    GR2,GR2\n         TRT   0(256,GRR),IPTAB    EVALUATE NEXT CHARACTER\n         SR    GRCB,GRCB           CLEAR BLANKCOUNTER (CB)\n         B     BRANCH-4(2)\n         SPACE 3\nBRANCH   B     BLANK\n         B     OTHERS\n         B     DIGIT\n         B     SIGN\n         B     DECPT\n         B     APOSTR\n         SPACE 3\nBLANK    LA    GRCB,1(0,GRCB)      INCREASE CB\n         LA    GRR,1(0,GRR)        INCREASE R\n         C     GRR,RE\n         BE    SCAN4               RECORD END IS REACHED\n         CLI   0(GRR),C' '\n         BE    BLANK               NEXT CHARACTER ALSO BLANK\n         SR    GR2,GR2\n         IC    GR2,K\n         CR    GRCB,GR2\n         BL    SCAN5               LESS K BLANKS: EVAL.NEXT CHARACTER\n         BCTR  GRR,0               K BLANKS READ: DECREASE R\n         SPACE 2\nOTHERS   TM    F,X'82'\n         BZ    SCAN2               NO VALID NUMBER READ: NEW SCAN\n         B     DELIMIT             A VALID NUMBER AND K BLANKS READ\n         SPACE 2\nDIGIT    TM    F,X'08'\n         BO    DIGIT1              EXPONENT DIGIT\n         TM    F,X'40'             MANTISSA DIGIT\n         BZ    DIGIT2              FIRST MANTISSA DIGIT\n         CR    GRMP,GREP\n         BL    DIGIT3              LESS 19 MANTISSA DIGITS\n         B     *+10\n         SPACE\nDIGIT3   MVC   0(1,GRMP),0(GRR)    DIGIT INTO MANTISSA BUFFER (MB)\n         LA    GRMP,1(0,GRMP)      INCREASE MANTISSA POINTER\n         TM    F,X'20'\n         BZ    SCAN3               NO DEC POINT IS READ: NEXT CHARACTER\n         OI    F,X'10'             F3.=1 DIGIT BEHIND DEC POINT READ\n         B     SCAN3\n         SPACE\nDIGIT2   CLI   0(GRR),C'0'\n         BE    *+12\n         OI    F,X'C0'             F0.=F1.=1 MANTISSA DIGIT NOT 0\n         B     DIGIT3\n         OI    F,X'80'             F0.=1 LEADING ZERO\n         TM    F,X'20'\n         BZ    SCAN3\n         BCTR  GRDP,0              DECREASE DECIMAL POINT POINTER\n         OI    F,X'10'             F3.=1 DIGIT BEH. DEC POINT READ\n         B     SCAN3\n         SPACE\nDIGIT1   TM    F,X'01'\n         BZ    DIGIT4              NO EXP DIGIT NOT 0 WAS READ\n         LA    GR2,MB+21           END OF EXPONENT BUFFER\n         CR    GREP,GR2\n         BNL   ERROR6              MORE THAN 2 EXP DIGITS WERE READ\n         SPACE\nDIGIT5   MVC   0(1,GREP),0(GRR)    DIGIT INTO EXPONENT BUFFER\n         LA    GREP,1(0,GREP)      INCREASE EXPONENT POINTER\n         B     SCAN3               EVALUATE NEXT CHARACTER\n         SPACE\nDIGIT4   OI    F,X'02'             F6.=1 ANY EXPONENT DIGIT READ\n         CLI   0(GRR),C'0'\n         BE    SCAN3               EVALUATE NEXT CHARACTER\n         OI    F,X'01'             F7.=1 EXPONENT DIGIT NOT 0 READ\n         B     DIGIT5\n         SPACE 2\nSIGN     TM    F,X'08'\n         BO    SIGN1               SIGN FOLLOWED AN APOSTROPHE\n         TM    F,X'80'\n         BO    DELIMIT             SIGN FOLLOWED A MANTISSA DIGIT\n         B     SIGN2\n         SPACE\nSIGN1    TM    F,X'06'\n         BZ    SIGN2+10            EXPONENT SIGN\n         TM    F,X'82'\n         BC    5,DELIMIT           SIGN FOLLOWED A VALID NUMBER\n         SPACE\nSIGN2    MVC   SM(1),0(GRR)        MANTISSA SIGN\n         B     SCAN2+4             NEW SCAN\n         MVC   SE(1),0(GRR)        EXPONENT SIGN\n         OI    F,X'04'             F5.=1 EXPONENT SIGN READ\n         B     SCAN3               EVALUATE NEXT CHARACTER\n         SPACE 2\nDECPT    TM    F,X'28'\n         BZ    DECPT1              NO DEC POINT OR APOSTROPHE BEFORE\n         TM    F,X'82'\n         BC    5,DELIMIT           DEC POINT FOLLOWED A VALID NUMBER\n         TM    F,X'08'\n         BO    *+12                DEC POINT FOLLOWED APOSTROPHE\n         MVI   SM,C'+'             MANTISSA SIGN INITIALLY PLUS\n         B     SCAN3               NEW SCAN\n         MVC   SM(1),SE            EXP SIGN IS ASSIGNED TO MANTSIGN\n         MVI   SE,C'+'             EXPONENT SIGN INITIALLY PLUS\n         MVI   F,X'00'             CLEAR FLAG BYTE F\n         SPACE\nDECPT1   OI    F,X'20'             F2.=1 DEC POINT WAS READ\n         LR    GRDP,GRMP           STATE OF MANT POINTER INTO GRDP\n         ST    GRR,DPI             STATE OF CHAR POINTER INTO DPI\n         B     SCAN3               NEXT CHARACTER\n         SPACE 2\nAPOSTR   TM    F,X'08'\n         BO    *+12                AN APOSTROPHE WAS ALREADY READ\n         TM    F,X'30'\n         BC    9,APOSTR1           A VALID NUMBER WAS READ\n         TM    F,X'82'             APOSTROPHE FOLLOWED DEC POINT\n         BC    5,DELIMIT           NUMBER BEFORE DEC POINT IS VALID\n         MVC   SM(1),SE            EXP SIGN IS ASSIGNED TO MANT SIGN\n         MVI   SE,C'+'             EXPONENT SIGN INITIALLY PLUS\n         MVI   F,X'00'             CLEAR FLAG BYTE F\n         SPACE\nAPOSTR1  OI    F,X'08'             APOSTROPHE WAS READ F4.=1\n         ST    GRR,API             STATE OF CHAR POINTER INTO API\n         B     SCAN3               EVALUATE NEXT CHARACTER\n         SPACE 2\nDELIMIT  TM    F,X'30'\n         BC    9,DELIMIT1          MANTISSA PART IS VALID\n         L     GRR,DPI             CHAR POINTER OF DEC POINT INTO R\n         NI    F,X'DF'             F2.=0 NO DEC POINT WAS READ\n         B     DELIMIT2\n         SPACE\nDELIMIT1 TM    F,X'0A'\n         BC    9,DELIMIT2          EXPONENT PART IS VALID\n         L     GRR,API             CHAR POINTER OF APOSTROPHE INTO R\n         NI    F,X'F3'\n         SPACE\nDELIMIT2 C     GRR,RE\n         BNE   *+18                                                0226\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY        RECORD CHANGE IS PERFORMED\n         B     DELIMIT3\n         LA    GRR,1(0,GRR)        INCREASE CHARACTER POINTER\n         C     GRR,RE\n         BE    DELIMIT2+8\n         ST    GRR,R               STORE CHAR POINTER TO DSTABLE\nDELIMIT3 TM    F,X'28'             TEST TYPE OF NUMBER\n         BC    5,TRREAL            REAL TYPE NUMBER\n         TM    F,X'40'\n         BO    *+10                NUMBER IS NOT EQUAL ZERO\n         SR    GR0,GR0\n         B     TRINT1              NUMBER IS EQUAL ZERO\n         LA    GR2,MB+11(0)\n         CR    GRMP,GR2\n         BH    TRREAL              MORE THAN 10 DIGITS READ: REAL\n         BL    *+14                LESS THAN 10 DIGITS READ: INTEGER\n         CLC   MB+1(10),DMINT      10 DIGITS WERE READ\n         BNL   TRREAL              NUMBER GREATER (2**31)-1: REAL\n         LA    GR2,MB+2\n         SR    GRMP,GR2            NUMBER OF DIGITS DIMINSHED BY ONE\n         EX    GRMP,PACK           PACK NUMBER\n         CLI   SM,C'+'             TEST SIGN OF THE NUMBER\n         BNE   *+12\n         OI    MB+17,X'0F'\n         B     *+12\n         OI    MB+17,X'0D'\n         NI    MB+17,X'FD'\n         CVB   GR0,MB+10\n         SPACE 3\nTRINT1   LA    GR2,4\n         CLI   FKT,X'04'\n         BE    FIN3                CONVERSION NOT NECESSARY:FKT=INTEGER\n         SPACE 3\n*        CALL CONVERSION ROUTINE (LOADED IN FSA)\n         SPACE\n         STM   14,13,8(SAVE)       ALL REGISTERS INTO SAVREG\n         LR    GR2,SAVE            ADDRESS OF SAVREG TO REG2\n         LA    7,ACNVIRD(FSA)\n         LR    14,GR0              INTEGER INTO REG.14\n         LR    13,FSA              ADDRESS OF FSA TO REG.13\n         BALR  8,7\n         LM    14,13,8(GR2)        ALL REGISTERS RESET\n         SR    GR2,GR2\n         USING FSAAREA,FSA\n         TM    OPTSW(FSA),X'20'    TEST IF LONG OR SHORT PRECISION\n         BZ    FIN3                LONG PRECISION STATED\n         LA    GR2,8\n         B     FIN3\n         SPACE 3\nTRREAL   SWR   FR0,FR0\n         TM    F,X'C0'\n         BO    *+18\n         BM    FIN                 MANTISSA IS ZERO\n         SR    GRDP,GRDP\n         LD    FR0,ONEFL           MANTISSA IS 1.0\n         B     TRREAL1\n         TM    F,X'20'\n         BO    *+6                 A DECIMAL WAS READ\n         LR    GRDP,GRMP           DECPT IS ACCEPTED BEH LAST DIGIT\n         LA    GR2,MB+10\n         SR    GRDP,GR2            POSITION OF DECPT: BEHIND 9. DIGIT\n         SPACE 2\nTRREAL2  PACK  MB+2(8),MB+1(9)     PACK UPPER 9 DIGITS\n         OI    MB+9,X'0F'\n         CVB   GR0,MB+2            CONVERT UPPER 9 DIGITS TO BINARY\n         ST    GR0,MASK+4          MASK: FLOATING ZERO WITH EXPON 78\n         AD    FR0,MASK            TRANSFORM NUMBER TO FLOATING TYPE\n         CR    GRMP,GR2\n         BNH   TRREAL1\n         MD    FR0,TPNINE\n         S     GRDP,NINE           SHIFT DECPT 9 POSITIONS TO RIGHT\n         SR    GRMP,GRMP\n         PACK  MB+2(8),MB+10(9)    PACK LOWER 9 DIGITS\n         B     TRREAL2+6           REPEAT ACTION FOR LOWER 9 DIGITS\n         SPACE 2\nTRREAL1  CLI   SM,C'+'\n         BE    *+6                 NUMBER IS POSITIV\n         LCDR  FR0,FR0             INSERT MINUS\n         SR    GR0,GR0\n         TM    F,X'01'\n         BZ    TRREAL3             SCALEFACTOR\n         NI    MB+19,X'0F'         CLEAR ZONE OF ONE EXPONENT DIGIT\n         IC    GR0,MB+19\n         TM    MB+20,X'FF'         2. EXPONENT DIGIT IS TESTED\n         BZ    TRREAL3-10          NO 2. EXPONENT\n         MH    GR0,TEN             FIRST EXPONENT DIGIT MULTIPLIED 10\n         LR    GR2,GR0\n         NI    MB+20,X'0F'         CLEAR ZONE OF 2. EXPONENT DIGIT\n         IC    GR0,MB+20\n         AR    GR0,GR2             TOTAL PRELIMINARY EXPONENT\n         CLI   SE,C'+'\n         BE    *+6                 EXPONENT IS POSITIV\n         LCR   GR0,GR0             INSERT MINUS\n         SPACE 2\nTRREAL3  AR    GRDP,GR0            CORR.EXP BY DEC POINT POSITION\n         BZ    FIN                 CORRECTED EXPONENT IS ZERO\n         L     POWTEN,APTTAB       ADDRESS OF POWERTENTABLE\n         BP    *+8\n         LA    POWTEN,128(POWTEN)  ADDRESS OF 10**(-1) DIMIN BY EIGHT\n         LPR   GRDP,GRDP           ABS(CORRECTED EXPONENT)\n         SR    GRDP1,GRDP1         CLEAR REGISTER\n         SRDA  GRDP,3\n         SLA   GRDP,3\n         SPACE 2\nTRREAL5  BZ    TRREAL4+4           CORRECTED EXPONENT LESS 8\n         C     GRDP,SEVTWO\n         BNH   TRREAL4             CORRECTED EXPONENT LESS 73\n         MD    FR0,128(0,POWTEN)   MULTIPLY OR DIVIDE BY 10**72\n         S     GRDP,SEVTWO         DECREASE CORRECTED EXP BY 72\n         B     TRREAL5             REPEAT MULTIPLICATION OR DIVISION\n         SPACE 2\nTRREAL4  MD    FR0,56(GRDP,POWTEN)\n         SRL   GRDP1,26\n         LTR   GRDP1,GRDP1\n         BZ    FIN\n         MD    FR0,0(GRDP1,POWTEN) * OR / 10**(EXP-(ENTIER(EXP/8)*8))\n         SPACE 3\nFIN      SR    GR2,GR2             REG2=TYPE: REALLONG\n         TM    OPTSW(FSA),X'20'    TEST IF LONG OR SHORT PRECISION\n         BZ    FIN1                LONG PRECISION STATED\n         STD   FR0,BUFF            SHORT PRECISION STATED\n         MVC   ROUND(1),BUFF       EXPONENT TO ROUND\n         AD    FR0,ROUND           LONG PRECISION ROUNDED TO SHORT\n         LA    GR2,8               REG2=TYPE: REALSHORT\n         SPACE 2\nFIN1     CLI   FKT,X'00'\n         BE    FIN3                CONVERSION NOT NECESSARY\n         LA    GR2,4               REG2=TYPE: INTEGER\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CI(ENTRY)                                     0226\n         BALR  RETURN,ENTRY        NUMBER CONVERTED TO INTEGER\n         SPACE 2\nFIN3     EX    0,STORE(GR2)\n         L     SAVE,SAVREG+4\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE 3\nPACK     PACK  MB+10(8),MB+1(0)\n         SPACE\nSTORE    STD   FR0,0(0,GRA)\n         ST    GR0,0(0,GRA)\n         STE   FR0,0(0,GRA)\n         SPACE 3\nERROR2   LR    13,FSA                                              0206\n         B     FSAERR+2*4(FSA)     INCOMP. ACTION ON DATA SET      0206\n         SPACE 2                                                   0206\nERROR3   LR    13,FSA                                              0206\n         B     FSAERR+3*4(FSA)     INPUT BEYOND LAST OUTPUT        0206\n         SPACE 2                                                   0206\nERROR5   LR    13,FSA              INPUT REQUEST BEYOND END OF DATASET\n         B     FSAERR+5*4(FSA)\n         SPACE 2\nERROR6   LR    13,FSA              EXP PART CONSIST OF MORE TH.2DIGITS\n         B     FSAERR+6*4(FSA)\n         SPACE 3\n*        EXTERNAL ADDRESSES\n         SPACE\nAPTTAB   DC    V(IHIPTTAB)\nACNVIRD  EQU   X'120'\n         SPACE 2\n*        INTERNAL CONSTANTS AND STORAGE\n         SPACE\nNINE     DC    F'9'                FOR SHIFT OF DECIMAL POINT\nSEVTWO   DC    F'72'               FOR EXPONENT TREATMENT\nAPI      DS    F                   CHARACTER POINTER OF APOSTROPHE\nDPI      DS    F                   CHARACTER POINTER OF DEC POINT\nBUFF     DS    1D                  FOR CONVERSION OF NUMBER\nONEFL    DC    D'1.0'\nTPNINE   DC    DE9'1'              10**9\nMASK     DC    FL8S56'78'          FLOAT 0 WITH EXPONENT 78\nROUND    DC    X'0000000080000000' FOR CONVERSION OF NUMBER\nTEN      DC    H'10'               FOR EXPONENT TREATMENT\nFKT      DS    C                   FLAG BYTE\nF        DC    X'00'               FLAG BYTE\nSM       DS    C\nSE       DS    C\nMB       DC    X'00'               TO CLEAR MANTISSA BUFFER\n         DS    20C                 MANTISSA BUFFER\nDMINT    DC    C'2147483648'             2**31\n         SPACE\nIPTAB    DC    64X'08'             OTHERS\n         DC    X'04'               BLANK\n         DC    10X'08'             OTHERS\n         DC    X'14'               DECIMAL POINT\n         DC    2X'08'              OTHERS\n         DC    X'10'               SIGN +\n         DC    17X'08'             OTHERS\n         DC    X'10'               SIGN -\n         DC    28X'08'             OTHERS\n         DC    X'18'               APOSTROPHE\n         DC    114X'08'            OTHERS\n         DC    10X'0C'             DIGITS 0 TO 9\n         DC    6X'08'              OTHERS\n         LTORG\n         SPACE 3\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3\nFSAAREA  DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIIOR": {"ttr": 2571, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x04\\x1b\\x04\\x1b\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 1051, "newlines": 1051, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIIOR'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:THIS MODULE CONTAINS A SET OF SERVICE ROUTINES\n*   USED BY OTHER I/O MODULES AS SUBROUTINES. THEY PERFORM:\n*   OPEN DATA SET - CHANGE TO NEXT RECORD - CLOSE DATA SET - CLOSE ALL\n*   DATA SETS - CLEAR NOTTAB - ENTRY NOTTAB - EVALUATE DATA SET NUMBER\n*   - END OF DATA HANDLING - SYNCHRONOUS ERROR HANDLING - CONVERT REAL\n*   TO INTEGER .MORE DETAILED BEFORE EACH ROUTINE\n*\n*ENTRY POINTS:\n*        IHIIOROP\n*        IHIIOROQ\n*        IHIIORNX\n*        IHIIORCL\n*        IHIIORCP\n*        IHIIORCN\n*        IHIIOREN\n*        IHIIOREV\n*        IHIIORCI\n*        IHIIORED\n*        IHIIORER\n*   CALLED  BY BALR 14,15  DIFFERENCE EXPLAINED BEFORE EACH ROUTINE\n*\n*INPUT:SEE EACH ROUTINE\n*\n*OUTPUT:SEE EACH ROUTINE\n*\n*EXTERNAL ROUTINES:IHIGPR-CLOSE DATA SET FOR PUT/GET\n*\n*EXITS-NORMAL:ALL ROUTINES EXCEPT END OF DATA AND SYNAD RELOAD\n*   REGISTERS AND BR14\n*     -ERROR :DATA SET NUMBER OUT OF RANGE           NO.0\n*   REAL NUMBER TO BE CONVERTED OUT OF INTEGER RANGE NO.1\n*   INCOMPATIBLE ACTIONS ON SAME DATA SET            NO.2\n*   INPUT BEYOND LAST OUTPUT                         NO.3\n*   OVERFLOW OF NOTTAB                               NO.4\n*   INPUT REQUEST BEYOND END OF DATA SET             NO.5\n*   DATA SECTIONED AND NO CTRL-CHARACTER SPECIFIED   NO.7\n*   UNRECOVERABLE I/O ERROR                          NO.32\n*   BLOCKSIZE NOT A MULTIPLE OF RECORD LENGTH        NO.37\n*   DD-CARD INCORRECT OR MISSING                     NO.41\n*   ACTION BRANCH TO IHGFSA   LA 13,IHGFSA\n*                              B  FSAERR+XX*4(13)  XX ERROR NO.\n*\n*\n*TABLES/WORK AREAS:NOTTAB,FOR STORING OF RECORD IDENTIFICATION\n*   USING WHEN REPOSITIONING,IS CREATED DYNAMICALLY WHEN OPEN A DATA\n*   SET WITH UNBLOCKED RECORD FORMAT  SIZE 1024 BYTES\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n*\n*\nIHIIORTN CSECT\n* RELEASE 19 CHANGES\n*                                                                A22569\n*\n*\nENTRY    EQU   15             ADDRESS OF ROUTINE\nRETURN   EQU   14             RETURN ADDRESS\nSAVE     EQU   13             ADDRESS OF SAVE AREA\nFSA      EQU   12             ADDRESS OF FSA\nDSN      EQU   5              ADDRESS OF THE RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6              DATA SET NUMBER\n*\n*  OTHER GENERAL REGISTERS\n*\nBASE     EQU   7              PROGRAM BASE REGISTER\nDCB      EQU   8              BASE REGISTER FOR DCB AND DECB'S\nGR0      EQU   0\nGR1      EQU   1\nGRA      EQU   2\nGRB      EQU   3\n*\n*  DATA SET FLAGS (DSF AND DSF+1 IN DSTAB)\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS6      EQU   X'02'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\nDS11     EQU   X'10'\nDS14     EQU   X'02'                                               0221\nDS15     EQU   X'01'                                               0219\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS7      EQU   X'01'\nDS2      EQU   X'20'\nDS8      EQU   X'80'\n* DISPLACEMENT IN FSA\n*\nADSTAB   EQU   X'AC'\nANOTTAB  EQU   X'B0'\nOPTSW    EQU   X'C2'\nFSAERR   EQU   X'1CC'\n         ENTRY IHIIOROP\n         ENTRY IHIIOROQ\n         EJECT\n*\n*\n*\n*   OPEN A DATA SET\n*\n*FUNCTION/OPERATION:RESERVE STORAGE FOR AND COMPLETE A DATA CONTROL\n*   BLOCK AND FOR TWO  I/O BUFFERS COMPLETE DSTAB IN GENERATED OBJECT\n*   MODULEDSTAB HAS AN ENTRY AND INDICATE STATUS FOR EVERY DATA SET\n*   USED IN ONE JOB\n*\n*INPUT:IF DATA SET SHOULD PERFORM ONLY INPUT OR OUTPUT BLOCKED RECORD\n*   FORMAT IS USED  ELSE  UNBLOCKED FORMAT ;ACCESS METHOD BSAM.\n*   IN CASE OF INPUT TWO RECORDS OR BLOCKS    READ TO I/O BUFFERS\n* BLOCKED RECORD FORMAT IS USED ONLY WHEN BLOCKING FACTOR > 1      0206\n*\n*OUTPUT:N/A\n*\n*NOTES:ADDRESS OF THE DATA CONTROL BLOCK IS LOADED IN REG8 AND KEEPT\n*   TROUGH ALL I/O MODULES IN ORDER TO ADDRESS DCB\n*\n         SPACE 3\n* THIS ROUTINE IHIIOROQ IS ENTERED FROM SYSACT 12                  0221\nIHIIOROQ SAVE  (14,12)\n         LR    4,ENTRY                                             0221\n         USING IHIIOROQ,4                                          0221\n         LA    BASE,IHIIOROP\n         USING IHIIOROP,BASE\n         ST    SAVE,SAVAR+4\n         USING DSTABLE,DSN              DSN RELEVANT ENTRY IN DSTAB\n         LA    SAVE,SAVAR\n         CH    DSNR,=H'1'        IS DATA SET NUMBER 0 OR 1         0221\n         BC    12,OPEN00         YES BRANCH TO IHIIOROP            0221\n         NI    DSF,X'FD'                                           0221\n         TM    DSF+1,DS14        HAS DATA SET BEEN OPEN BEFORE     0221\n         BO    OPEN00             YES                              0221\n* OPEN DATA SET FOR THE FIRST TIME.                                0221\n* EXAMINE THE DISP PARAMETER IN JFCB                               0221\n* IF NEW OPEN THE DATA SET FOR OUTIN OTHERWISE FOR INOUT           0221\n         GETMAIN R,LV=288        GET AREA FOR DCB,DECB AND JFCB    0221\n         ST    GR1,ADCB                                            0221\n         LR    DCB,GR1                                             0221\n         USING IHADCB,DCB\n         MVC   0(104,DCB),DCBMODEL                                 0221\n         CVD   DSNR,DBWORD                                         0221\n         UNPK  DBWORD+2(2),DBWORD+6(2)                             0221\n         L     GRA,DBWORD                                          0221\n         STH   GRA,DCBDDNAM+6                                      0221\n         OI    DCBDDNAM+7,X'F0'                                    0221\n         MVC   DCBMACR(2),=X'2424'                                 0221\n         LA    GRB,JFCB                                            0221\n         ST    GRB,ADCBEXIT+4                                      0221\n         MVI   ADCBEXIT+4,X'87'                                    0221\n         RDJFCB ((DCB))                                            0221\n         TM    JFCB+87,X'80'                                       0221\n         BZ    OQEN1                                               0221\n         OI    DSF,DS6                                             0221\nOQEN1    LA    GR1,JFCB                                            0221\n         FREEMAIN R,LV=176,A=(1)                                   0221\n         B     OPEN20                                              0221\n*\n         SPACE 3\n*\nIHIIOROP SAVE  (14,12)\n         LR    BASE,ENTRY\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\nOPEN00   CH    DSNR,=H'1'                                          0219\n         BNE   OPEN01                                              0219\n* DATA SET NUMBER = 1                                              0219\n* IF DATA SET HAS BEEN OPENED BEFORE (DS14=1)                      0219\n* SET DS0=1 AND GO BACK . IF NOT OPEN THE DATA SET                 0219\n         TM    DSF+1,DS14                                          0219\n         BZ    OPEN01                                              0219\n         OI    DSF,DS0                                             0219\n         B     OPEN51                                              0219\nOPEN01   GETMAIN R,LV=112        GET AREA FOR DCB AND DECB         0221\n         ST    GR1,ADCB\n         LR    DCB,GR1\n         MVC   0(104,DCB),DCBMODEL\n         CH    DSNR,=H'1'\n         BL    DSIN\n         BE    DSPRINT\n         CVD   DSNR,DBWORD         DATA SET NUMBER TO\n         L     GRA,DBWORD+4               DDNAME\n         SRL   GRA,4\n         STC   GRA,DCBDDNAM+7\n         OI    DCBDDNAM+7,X'F0'\n         SRL   GRA,4\nDSLOW    STC   GRA,DCBDDNAM+6\n         OI    DCBDDNAM+6,X'F0'\n         B     OPEN2                                               0206\nDSIN     MVC   DCBDDNAM(8),=C'SYSIN   '                            0206\n         MVC   DCBMACR(2),=X'2400'                                 0206\n         B     OPEN3                                               0206\nDSPRINT  TM    DSF+1,DS11                                          0219\n* IF DS11=0 OPEN DATA SET SYSPRINT                                 0219\n* IF DS11=1 OPEN DATA SET ALGLDD01                                 0219\n         BO    DSPR2                                               0219\n         MVC   DCBDDNAM+6(2),=X'F0F1'                              0219\n         OI    DSF+1,DS14                                          0219\n         B     DSPR2+6                                             0219\nDSPR2    MVC   DCBDDNAM(8),=C'SYSPRINT'                            0219\n         MVC   DCBMACR(2),=X'0024'                                 0206\n         B     OPEN3                                               0206\nOPEN2    MVC   DCBMACR(2),=X'2424'      MACRF=(RP,WP)\nOPEN20   EQU   *                                                   0221\n         L     GRA,ANOTTAB(FSA)\n         LTR   GRA,GRA\n         BP    OPEN3\n         GETMAIN R,LV=1024    GET AREA FOR NOTE TABLE\n         ST    1,ANOTTAB(FSA)\n         LR    GRA,GR1                 ANOTTAB TO GRA\n         LR    GRB,GRA                 ANOTTAB TO GRB\n         LA    GRB,8(0,GRB)\n         ST    GRB,0(0,GRA)            STORE POINTER NXE IN NOTTAB\n         LA    GRB,1016(0,GRB)\n          ST    GRB,4(0,GRA)           STORE POINTER NEXEF IN NOTTAB\nOPEN3    TM    DSF,DS6                  OUTPUT POSSIBLE            1728\n         BO    OPEN30                   YES                        1728\n         OPEN  ((DCB),(INOUT))                                     1728\nOPEN300  EQU   *                        CONTINUE AFTER OPEN        1728\n         TM    DCBOFLGS,X'10'          TEST DDCARD\n         BO    OPEN355                 DD-CARD CORRECT\n         NI    DSF+1,X'FD'              DS14=0                     0219\n         LR    13,FSA                   DDCARD INCORRECT OR MISSING\n         B     FSAERR+41*4(FSA)\nOPEN30   OPEN  ((DCB),(OUTIN))                                     1728\n         TM    DCBDEVT,X'40'            UNIT RECORD DEVICE         5875\n         BZ    OPEN6                    NO                         5875\n         MVC   DCBBLKSI(2),DCBLRECL     BLKSI=LRECL                5875\n         MVC   BL(2),DCBLRECL                                      5875\nOPEN6    B     OPEN300                  CONTINUE                   5875\nOPEN355  TM    EXERFLAG,X'11'          TEST IF ERROR IN DCBEXIT\n         BZ    OPEN301\n*        CLOSE DATA SET AND FREEMAIN FOR DCB AND DECB\n*\n         CLOSE ((DCB),REREAD)\n         FREEMAIN R,LV=112,A=ADCB                                  0221\n         LR    13,FSA\n         TM    EXERFLAG,X'01'           TEST IF ERROR 7 IN DCBEXIT\n         MVI   EXERFLAG,X'00'           CLEAR FLAG\n         BZ    OPEN350\n         B     FSAERR+7*4(FSA)          ERROR7\nOPEN350  B     FSAERR+37*4(FSA)        ERROR37\nOPEN301  OI    DSF,DS0\n         CH    DSNR,=H'1'        IS DATA SET NUMBER = 0 OR 1       0221\n         BNH   *+8                                                 0221\n         OI    BL+3,DS14                                           0221\n         LH    GR0,BL\n         SLA   GR0,1          DOUBLE BUFFER LENGTH\n         GETMAIN R,LV=(0)     GET AREA FOR TWO BUFFERS\n         ST    GR1,BB         BUFFER BEGIN\n         LR    GRA,GR1\n         AH    GR1,BL\n         ST    GR1,NBB        ALTERNATE BUFFER BEGIN\n         TM    DSF,DS6\n         BO    OPEN4\nOPEN31   OI    DSF+1,X'08'             SET MARK FOR END OF DATA    0206\n         LA    GRE,DECB\n         L     GRB,8(0,GRE)\n         CR    GRB,DCB\n         BNE   OPEN311\n         CHECK DECB\nOPEN311  READ  DECB,SF,(DCB),(GRA),MF=E      READ FIRST BLOCK\n         CHECK DECB\n         NI    DSF+1,X'F7'              RESET\n         LH    1,DCBBLKSI                                          0050\n         L     GRE,DCBIOBA                                         0050\n         SH    1,22(GRE)                                           0050\n         STH   1,BL                                                0050\n         NOTE  (DCB)\n         ST    GR1,NOTEADR\nOPEN41   L     GRB,NBB\n         READ   DECB,SF,(DCB),(GRB),MF=E     READ SECOND BLOCK\n         B     OPEN5                                               0206\nOPEN4    TM    DSF+1,DS9\n         BZ    OPEN5\n         MVC   0(1,GRA),=C'1'          INSERT FIRST CONTROL CHAR.\n         LA    GRA,1(0,GRA)   PROVIDE SPACE FOR CONTROL CHARACTER\nOPEN5    ST    GRA,R\n         AH    GRA,P\n         ST    GRA,RE\nOPEN51   L     SAVE,SAVAR+4                                        0219\n         RETURN (14,12)\n         EJECT\n*        ROUTINE DCBEXIT\n*\nLREC     EQU   4\n*\nIHIIORDX TM    DSF+1,DS11\n         BZ    EXIT3                                               0206\n*\n*  EXIT ROUTINE FOR PRINTING ERROR MESSAGE\n*\n         MVC   Q(1),=X'32'              RECORD IS SECTIONED  Q=50\n         MVC   P(2),=X'005A'            RECORD LENGTH P=90\n         MVC   DCBRECFM(1),=X'94'       INSERT RECORD FORMAT=FBA\n         OI    DSF+1,DS9               INSERT FLAG REC CONT CONTR CHAR\n         LH    LREC,P\n         LA    LREC,1(0,LREC)           P+1 TO LRECL\n         STH   LREC,DCBLRECL\n*\n*  BLKSI EXAMINE\n*\n         LH    GRB,DCBBLKSI             ENTIER(BLKSI/LRECL) TO REG GRB\n         SR    GRA,GRA\n         DR    GRA,LREC\n         LTR   GRB,GRB\n         BZ    EXITA                    BLKSI LESS LRECL  BLKSI=0\n         BCT   GRB,EXITB                                           0206\nEXITA    STH   LREC,DCBBLKSI                                       0206\n         OI    DSF,DS1                                             0206\nEXITC    MVC   BL(2),DCBBLKSI                                      0206\n         B     RETEX                                               0206\nEXITB    LA    GRB,1(GRB)                                          0206\n         MH    GRB,DCBLRECL                                        0206\n         STH   GRB,DCBBLKSI                                        0206\n         NI    DSF,X'BF'                                           0206\n         B     EXITC                                               0206\n*\n* ALGOL USER'S EXIT ROUTINE\n*\n*\nEXIT0    TM    DCBRECFM,X'FF'\n         BZ    EXIT1                   RECFM=0\n         TM    DCBRECFM,X'94'\n         BO    EXIT4                                               0206\n         TM    DCBRECFM,X'84'\n         BO    EXIT4                                               0206\n         TM    Q,X'FF'\n         BZ    RETEX                                               0206\n         OI    EXERFLAG,X'01'           DATA SET SPLIT INTO SECTIONS\n         B     RETEX                    AND NO CTLCHARACTER  ERROR NO.7\nEXIT1    OI    DCBRECFM,X'80'                                      0206\n         TM    DSF,DS1                                             0206\n         BO    EXIT12                                              0206\n         OI    DCBRECFM,X'10'                                      0206\nEXIT12   TM    DSF+1,DS9                                           0206\n         BZ    RETEX                                               0206\n         OI    DCBRECFM,X'04'                                      0206\n         B     RETEX                                               0206\nEXIT4    OI    DSF+1,DS9                                           0206\n         B     RETEX                                               0206\n*      LRECL  EXAMINE\nEXIT3    OI    DSF,DS1                                             0206\n         TM    Q,X'FF'                                             0206\n         BZ    *+8                                                 0206\n         OI    DSF+1,DS9                                           0206\n         LH    LREC,DCBLRECL                                       0206\n         LTR   LREC,LREC\n         BZ    EXIT2\n         TM    DSF+1,DS9\n         BO    EXIT5               DS9=1  RECORDS CONTAIN CONTROL CHAR\n         STH   LREC,P              LRECL  TO  P\n         B     EXIT6\nEXIT5    BCTR  LREC,0\n         STH   LREC,P              LRECL-1 TO P\n         LA    LREC,1(0,LREC)\n         B     EXIT6\nEXIT2    TM    DSF+1,DS9\n         BO    EXIT7               DS9=1\n         LH    LREC,P\n         STH   LREC,DCBLRECL       P TO LRECL\n         B     EXIT6\nEXIT7    LH    LREC,P\n         LA    LREC,1(0,LREC)      P+1 TO LRECL\n         STH   LREC,DCBLRECL\n*\n*     BLKSI  EXAMINE\n*\nEXIT6    LH    GRA,DCBBLKSI\n         LTR   GRA,GRA\n         BZ    EXIT8               BLKSI=0\n         CH    LREC,DCBBLKSI\n         BE    EXIT61+4\n         LH    GRB,DCBBLKSI\n         SR    GRA,GRA\n         DR    GRA,LREC\n         LTR   GRA,GRA\n         BZ    EXIT61\n         OI    EXERFLAG,X'10'           BLOCKSIZE NOT A MULTIPLE OF\n         B     RETEX                    LOGICAL RECORD LENGTH ERR NO.37\nEXIT61   NI    DSF,X'BF'          0 TO DS1 UNBLOCKED FORMAT NESC.\n         MVC   BL(2),DCBBLKSI      BLKSI TO BL\n         B     EXIT0                                               0206\nEXIT8    STH   LREC,DCBBLKSI\n         STH   LREC,BL\n         B     EXIT0                                               0206\nRETEX    RETURN\n         EJECT\n*\n*\n*\n*\n*   NEXTREC CHANGE TO NEXT RECORD\n*\n*INPUT:IN CASE OF AN IN-MODULE CALLING NEXTREC,LAST I/O OPERATION IS\n*   CHECKED FOR COMPLETION AND ONE BLOCK OR RECORD IS READ TO THE\n*   OTHER I/O BUFFER\n*\n*OUTPUT:IN CASE OF AN OUT-MODULE CALLING NEXTREC,LAST I/O OPERATION IS\n*   CHECKED FOR COMPLETION AND ONE BLOCK OR RECORD IS WRITTEN TO THE\n*   DATA SET\n*\n*\n*\n*\n*\n*\n*\n*\n*\nGRE      EQU   4\n         ENTRY IHIIORNX\nIHIIORNX SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIIORNX,BASE\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\n         SPACE\n         L     DCB,ADCB\n         SPACE\n*\n*        FLOW CHAR PROGRAM BEGIN\n*\n         TM    DSF,X'22'                                           0206\n         BZ    NXIN1                                               0206\n         BO    NXUT1                                               0206\n*  DS6=0 DS2=1 CURRENT BLOCK WAS READ AND SHOULD BE WRITTEN BACK   0206\n         CHECK DECB                                                0206\n         MVC   BL(2),DCBBLKSI                                      0050\n         LR    GR1,DCB                                             0206\n         POINT (1),NOTEADR                                         0206\n         OI    DSF,DS6                                             0206\n* DS6=1  DS2=1   WRITE BLOCK IF LAST RECORD                        0206\nNXUT1    TM    DSF,DS1                                             0206\n         BZ    NXUT2                                               0206\n*  CHANGE BUFFERS                                                  0206\nNXUT3    L     GRA,BB                                              0206\n         L     GRE,NBB                                             0206\n         ST    GRE,BB                                              0206\n         ST    GRA,NBB                                             0206\n         ST    GRE,R                                               0206\n         AH    GRE,P                                               0206\n         ST    GRE,RE                                              0206\n         NI    DSF,X'EF'                                           0206\nNXUT4    L     GRE,DECB+8                                          0206\n         CR    GRE,DCB                                             0206\n         BNE   NXUT41                                              0206\n         CHECK DECB                                                0206\nNXUT41   WRITE DECB,SF,(DCB),(GRA),MF=E                            0206\n*  CLEAR NOTTAB IF BACKWARD REPOSITIONING HAS OCCURED              0206\nNXUT5    TM    DSF,DS5                                             0206\n         BZ    NXUT6                                               0206\n         L     ENTRY,ACLNOTB                                       0206\n         BALR  RETURN,ENTRY                                        0206\n         NI    DSF,X'FB'                                           0206\n* INSERT NOTTAB ENTRY IF REQUESTED                                 0206\nNXUT6    TM    DSF,DS4                                             0206\n         BZ    NXUT7                                               0206\n         CHECK DECB                                                0206\n         NOTE  (DCB)                                               0206\n         ST    GR1,NOTEADR                                         0206\n         L     ENTRY,AENNOTB                                       0206\n         BALR  RETURN,ENTRY                                        0206\n         NI    DSF,X'F7'                                           0206\n*  INSERT CONTROL CHARACTER IF SECTIONED                           0206\nNXUT7    TM    DSF+1,DS9                                           0206\n         BZ    NXRET                                               0206\n         L     GRE,R                                               0206\n         CLC   S+1(1),Q                                            0206\n         BL    NXUT8                                               0206\n         SR    GRA,GRA                                             0206\n         STH   GRA,S                                               0206\n         MVI   0(GRE),C'1'                                         0206\n         B     NXUT9                                               0206\nNXUT8    MVI   0(GRE),C' '                                         0206\nNXUT9    LA    GRE,1(GRE)                                          0206\n         ST    GRE,R                                               0206\n         AH    GRE,P                                               0206\n         ST    GRE,RE                                              0206\n* INCREASE RECORD POINTER AND RETURN                               0206\nNXRET    L     GRA,S                                               0206\n         SPACE\n         SRL   GRA,16                                              0206\n         LA    GRA,1(GRA)                                          0206\n         STH   GRA,S                                               0206\n         L     SAVE,SAVAR+4                                        0206\n         RETURN (14,12)                                            0206\n*  BLOCKED FORMAT  CHECK IF LAST RECORD IND IF NOTTAB ENTRY REQ.   0206\nNXUT2    L     GRA,BB                                              0206\n         AH    GRA,BL                                              0206\n         C     GRA,RE                                              0206\n         BE    NXUT3                                               0206\n         L     GRE,RE                                              0206\n         ST    GRE,R                                               0206\n         AH    GRE,P                                               0206\n         ST    GRE,RE                                              0206\n         TM    DSF,DS4                                             0206\n         BZ    NXUT7                                               0206\n         NI    DSF,X'FD'                                           0206\n         L     GRA,BB                                              0206\n         B     NXUT4                                               0206\n*  DS6=0 DS2=0 CHECK IF NOTTAB ENTRY REQ. STORE ADDRESS OF LAST    0206\n*  BLOCK IN NOTEADR AND READ NEXT BLOCK                            0206\nNXIN1    TM    DSF,DS4                                             0206\n         BZ    NXIN2                                               0206\n         SPACE\n         SPACE\n         L     GR1,NOTEADR                                         0206\n         L     ENTRY,AENNOTB                                       0206\n         BALR  RETURN,ENTRY                                        0206\n         NI    DSF,X'F7'                                           0206\nNXIN2    TM    DSF,DS1                                             0206\n         BZ    NXIN5                                               0206\nNXIN3    CHECK DECB                                                0206\n         TM    DSF,DS7                                             0222\n         BZ    NXIN7                                               0222\n         OI    DSF,DS6                                             0222\n         MVC   BL(2),DCBBLKSI                                      0050\n         B     NXIN6                                               0222\nNXIN7    LH    1,DCBBLKSI                                          0050\n         L     GRE,DCBIOBA                                         0050\n         SH    1,22(GRE)                                           0050\n         STH   1,BL                                                0050\n         NOTE  (DCB)                                               0050\n         ST    GR1,NOTEADR                                         0206\n         L     GRA,BB                                              0206\n         READ  DECB,SF,(DCB),(GRA),MF=E                            0206\n*  CHANGE BUFFERS                                                  0206\nNXIN6    L     GRA,BB                                              0206\n         L     GRE,NBB                                             0206\n         ST    GRE,BB                                              0206\n         ST    GRE,R                                               0206\n         AH    GRE,P                                               0206\n         ST    GRE,RE                                              0206\n         ST    GRA,NBB                                             0206\n         B     NXRET                                               0206\n*  BLOCKED FORMAT                                                  0206\nNXIN5    L     GRA,BB                                              0206\n         AH    GRA,BL                                              0206\n         C     GRA,RE                                              0206\n         BE    NXIN3                                               0206\n         L     GRE,RE                                              0206\n         ST    GRE,R                                               0206\n         AH    GRE,P                                               0206\n         ST    GRE,RE                                              0206\n         B     NXRET                                               0206\n         EJECT\n*\n*\n*\n*\n*   CLOSE DATA SET\n*\n*FUNCTION/OPERATION:CLOSE A DATA SET,RELEASE STORAGE FOR I/O BUFFERS\n*   AND DCB CALL FOR ROUTINE CLEAR NOTTAB\n*\n*OUTPUT:IN CASE OF OUTPUT WRITE LAST BLOCK TO DATA SET\n*\n*\n*\n*\n         SPACE 2\nGRNL     EQU   9\nGRAA     EQU   10\n         SPACE 2\n*\n         ENTRY IHIIORCL\nIHIIORCL SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIIORCL,BASE\n         ST    SAVE,SAVAR+4             SAVE REGISTER\n         LA    SAVE,SAVAR\n         L     DCB,ADCB\n         CH    DSNR,=H'1'                                          0219\n* DATA SET 1 IS TO BE CLOSED ONLY IF DS15=1.                       0219\n* IF DS15=0 FILL CURRENT BLOCK WITH BLANKS AND BRANCH TO ROUTINE   0219\n* IHIIORNX TO WRITE THE BLOCK AND RETURN                           0219\n         BNE   CLOSE01                                             0219\n         TM    DSF+1,DS15                                          0219\n         BO    CLOSE01                                             0219\n         OI    DSF,X'22'                                         A22569\n         NI    DSF,X'7F'       DS0=0                               0219\n         LH    GRA,BL                                              0219\n         A     GRA,BB                                              0219\n         L     GRB,R                                               0219\n         ST    GRA,R                                               0219\n         SR    GRA,GRB                                             0219\n         BZ    CLOSE02                                             0219\nCLOSE03  MVI   0(GRB),X'40'                                        0219\n         LA    GRB,1(GRB)                                          0219\n         BCT   GRA,CLOSE03                                         0219\nCLOSE02  NI    S,X'00'                                             0219\n         MVC   S+1(1),Q                                            0219\n         L     BASE,ANXREC                                         0219\n         B     14(BASE)                                            0219\nCLOSE01  TM    DSF,DS7                                             0219\n         BO    CLOSE1                  END OF DATA REACHED\n         TM    DSF+1,X'04'             TEST IF I/O ERROR\n         BO    CLOSE1                  CLOSE DCB\n         SPACE\n         LA    GRE,DECB                TEST IF READ OR WRITE BEFORE\n         L     GRA,8(0,GRE)            PICK UP DCB ADDRESS\n         CR    GRA,DCB\n         BNE   CLOSE2\n         OI    DSF+1,DS8               SET DS8=1 FOR END OF DATA\nCLOSE0   CHECK DECB                    LAST I/O FINISHED\nCLOSE2   TM    DSF,DS2             WAS LAST I/O OUTPUT             0213\n         BZ    CLOSE1                                              0213\n         TM    DSF,DS6             HAS BLOCK BEEN READ             0213\n         BO    WRITE2                                              0213\n         LR    GR1,DCB                  OUTPUT OCCUR WRITE BACK RECORD\n         POINT (1),NOTEADR              NO BLANKS\n         B     WRITE1                                              0213\nWRITE2   TM    DSF,DS3             OUTPUT IN BLOCK                 0213\n         BZ    CLOSE1              NO CLOSE                        0213\n*\n*        OUTPUT HAS OCCURED  FILL BUFFER WITH BLANKS AND WRITE\n*\nWRITE1   LH    GRA,BL\n         L     GRB,R\n         S     GRA,R\n         A     GRA,BB\n         BZ    CLOSE21\nCLOSE22  MVI   0(GRB),X'40'\n         LA    GRB,1(0,GRB)\n         BCT   GRA,CLOSE22\n*\n*        WRITE BUFFER\n*\nCLOSE21  L     GRA,BB\nCLOSE211 WRITE DECB,SF,(DCB),(GRA),MF=E\n         CHECK DECB\n*\n*        CLOSE DATASET\n*\nCLOSE1   CLOSE ((DCB),REREAD)\n*\n         L     GR1,BB\n         C     GR1,NBB\n         BL    *+8                      THE LOWEST ADRESS TO GR1\n         L     GR1,NBB\n         LH    GR0,BL                   BUFFERLTH TO GR0\n         SLA   GR0,1\n*\n*        FREEMAIN FOR RECORDBUFFERS\n*\n         FREEMAIN  R,LV=(0),A=(1)\n*\n*        FREEMAIN FOR DCB AND DECB\n*\n         FREEMAIN R,LV=112,A=ADCB                                  0221\n*\n*\n         SR    GRA,GRA\n         LA    GRA,1(0,GRA)\n         STH   GRA,S\n         LA    GRA,1(0,GRA)\n         MVC   P(2),=X'0050'            P=80\n         LTR   GRA,DSNR                                            0206\n         BZ    CLOSE3                                              0206\n         BCT   GRA,CLOSE4                                          0206\n         B     CLOSE3                                              0206\nCLOSE4   L     ENTRY,ACLNOTB                                       0206\n         BALR  RETURN,ENTRY             CLEAR NOTTAB FOR DATA SET\nCLOSE3   LH    GRA,BL+2                                            0206\n         STH   GRA,DSF\n         L     SAVE,SAVAR+4\n         RETURN (14,12)\n         EJECT\n*\n*\n*\n*\n*   CLOSEPE CLOSE ALL DATA SETS\n*\n*FUNCTION/OPERATION:CALL ROUTINE CLOSE FOR ALL OPEN DATA SET\n*   AND ROUTINE CLOSEGP IN  IHIGPR-MODULE\n*\n* THIS ROUTINE IS CALLED FROM IHIFSA AND IHIERR. IN BOTH CASES     0219\n* REG DSN CONTAINS THE ADDRASS OF THE ENTRY IN DSTAB FOR DATA SET  0219\n* ONE I.E. DSTAB+40                                                0219\n*\n*\n*\nLTH      EQU   36\n         ENTRY IHIIORCP\n         ENTRY IHIIORGP\nIHIIORCP SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIIORCP,BASE            SAVE REGISTER\n         ST    SAVE,SAVCLO+4\n         LA    SAVE,SAVCLO\n         SR    DSNR,DSNR\n         SH    DSN,=H'40'               DSN TO DSTAB START         0219\n         L     GRA,0(0,DSN)             TEST APGCF\n         LTR   GRA,GRA\n         BP    CLOSEPE4                 PUT/GET ENTRY IN DSTAB\n         N     GRA,=X'00FFFFFF'\n         LA    DSN,4(0,DSN)            FIRST ENTRY IN DSTAB\nCLOSEPE2 CR    GRA,DSN\n         BE    CLOSEPE3                 ALL DATA SETS ARE CLOSED\n         NI    BL+3,X'FD'                                          0221\n         CH    DSNR,=H'1'                                          0219\n         BE    CLOSEPE5                                            0219\nCLOSEPE7 TM    DSF,DS0                                             0219\n         BZ    CLOSEPE1\n*\n*   CALL FOR ROUTINE CLOSE\nCLOSEPE6 L     DCB,ADCB                                            0219\n         L     ENTRY,ACLOSE\n         BALR  RETURN,ENTRY\nCLOSEPE1 LA    DSN,LTH(0,DSN)           NEXT ENTRY IN DSTAB\n         LA    DSNR,1(0,DSNR)           INCREASE DATA SET NUMBER\n         B     CLOSEPE2\nCLOSEPE5 TM    DSF+1,DS14                                          0219\n         BZ    CLOSEPE7                                            0219\n         B     CLOSEPE6                                            0219\n         SPACE 3\nCLOSEPE4 TM    27(GRA),X'80'            TEST IF PUT/GET DATA SET OPEN\n         BZ    CLOSEPE2-4               DATA SET CLOSED\n         L     ENTRY,IHIIORGP\n         BALR  RETURN,ENTRY             CLOSE PUT/GET DATA SET\n         B     CLOSEPE2-4\n*\n*        ALL DATA SETS ARE CLOSED\n*\n*\n*\nCLOSEPE3 L     GR1,ANOTTAB(FSA)\n         LTR   GR1,GR1\n         BZ    RETCLOSP\n         FREEMAIN R,LV=1024,A=(1)       NOTTAB FREE\nRETCLOSP L     SAVE,SAVCLO+4\n         RETURN (14,12)\n*\n*\nSAVCLO   DS    18F\n*\n*        EXTERNAL ADRESS\n*\n*\nACLOSE   DC    A(IHIIORCL)\nIHIIORGP DC    F'0'\n         EJECT\n*\n*\n*   CLEAR NOTTAB\n*\n*FUNCTION/OPERATION:ALL ENTRIES IN NOTTAB FOR RECORDS EQUAL OR GREATER\n*   THAN ACTUAL RECORD COUNTERS ARE CLEARED BY INSERTING INVALID FLAG\n*\n*\n*\nNTE      EQU   4\nNOT      EQU   9\n         SPACE\n         ENTRY IHIIORCN\nIHIIORCN SAVE  (14,12)\n         LR    BASE,ENTRY               DEFINE BASEREGISTER\n         USING IHIIORCN,BASE\n         L     NOT,ANOTTAB(FSA)\n         LR    NTE,NOT\nCLNOTB1  LA    NTE,8(0,NTE)             STARTENTRYADRESS TO NTE\n         C     NTE,0(0,NOT)\n         BE    RETCLEAR                 NOTTAB CLEARED\n         LR    GRA,DSNR                 DATA SETNUMBER TO GRA\n         CH    GRA,0(0,NTE)\n         BNE   CLNOTB1                  CURRENT DSN NOT EQUAL\n         CLC   S(2),2(NTE)\n         BH    *+8\n         MVI   0(NTE),X'80'        INSERT INVALID FLAG TO NOTTAB\n         B     CLNOTB1\nRETCLEAR RETURN (14,12)\n         EJECT\n*\n*\n*\n*\n*   ENTRY NOTTAB\n*\n*FUNCTION/OPERATION:AN ENTRY FOR RECORD JUST HANDLED IS MADE IN NOTTAB\n*\n*NOTES:ON ENTRY GR1=NOTEADR FROM DSTAB\n*\n*\n*\n         ENTRY IHIIOREN\nIHIIOREN SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIIOREN,BASE\n         L     NOT,ANOTTAB(FSA)\n         LR    NTE,NOT\nENNOTB1  LA    NTE,8(0,NTE)            START ENTRY ADDRESS\n         C     NTE,0(0,NOT)\n         BNE   ENNOTB3\n         L     GRA,0(0,NOT)             NXE TO GRA\n         LA    GRA,8(0,GRA)             INCREASE NXE BY EIGHT\n         ST    GRA,0(0,NOT)\n         C     GRA,4(0,NOT)\n         BE    ENNERR4                  OVERFLOW NOTTAB\nENNOTB2  LR    GRA,DSNR\n         SLA   GRA,16\n         ST    GRA,0(0,NTE)             NEW ENTRY  DSN AND S TO NOTTAB\n         MVC   2(2,NTE),S\n         ST    GR1,4(0,NTE)             NOTEADR\n         RETURN (14,12)\nENNOTB3  TM    0(NTE),X'80'             TEST IF NOTTABENTRY IS INVALID\n         BO    ENNOTB2\n         B     ENNOTB1\nENNERR4  LR    13,FSA                   OVERFLOW OF RECORD IDENTIFICA-\n         B     FSAERR+4*4(FSA)          TION AREA\n         EJECT\n*\n*\n*\n*   EVALUATE DATA SET NUMBER\n*\n*FUNCTION/OPERATION:ADDRESS OF DSTAB IN GENERATED OBJECT MODUL\n*   IS PICKED UP FROM FSA   L 4,ADSTAB(FSA),ACTUAL DATA SET NUMBER\n*   LOADED IN BINARY FORM TO REG6,ADDRESS OF ACTUAL ENTRY IN DSTAB\n*   TO REG5, THIS REGISTERS ARE KEEPT THROUGH ALL I/O MODULES IN ORDER\n*   TO ADDRESS POINTERS AND FLAGS IN DSTAB\n*\n*ENTRY POINT:DATA IS PASSED VIA NAME   LA 1,PARMLIST\n*                                      BALR 14,15\n*\n*\n*\n*\n*\nGRX      EQU   4\nPARAM    EQU   1\nFR0      EQU   0\n         ENTRY IHIIOREV\nIHIIOREV SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIIOREV,BASE\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\n*\n*        PARAMETER LIST ADRESS IN REGISTER PARAM\n*\n         L     DSN,0(0,PARAM)\n         LTR   DSN,DSN\n         BP    DSNINT\n         TM    OPTSW(FSA),X'20'        TEST IF  LONG OR SHORT PRESC.\n         BO    EVD1                    SHORT\n         LD    FR0,0(0,DSN)            LONG\n         B     EVD1+4\nEVD1     LE    FR0,0(0,DSN)            SHORT\n         L     ENTRY,ACNVRI\n         BALR  RETURN,ENTRY\n         B     *+8\nDSNINT   L     GR0,0(0,DSN)             DATA SET NUMBER IN GR0\n         LR    DSN,GR0\n         N     GR0,RANGEDSN             DATA SET NUMBER OUT OF RANGE\n         BM    EVDERR0\n         LR    DSNR,DSN\n         M     GRX,DSTABLTH\n         L     GRX,ADSTAB(FSA)\n*                                       ENTRY TO DSTAB IN REG DSN\n         LA    DSN,4(DSN,GRX)\n         SPACE\n         L     SAVE,SAVAR+4\n         LM    14,4,12(13)\n         LM    7,12,48(13)              KEEP REGISTER DSN AND DSNR\n         BR    RETURN\nEVDERR0  LR    13,FSA                   DATA SET NUMBER OUT OF RANGE\n         B     FSAERR(FSA)\n*\n*\n*\nDSTABLTH DC    F'36'                    LENGHT OF A DSTAB ENTRY\nRANGEDSN DC    F'-16'                   SCOPE OUTSIDE RANGE OF DSNR\n*\nACNVRI   DC    V(IHIIORCI)             ADDRESSS OF CONVERSION ROUTINE\n         EJECT\n*\n*\n*\n*   END OF DATA\n*\n*FUNCTION/OPERATION:INVOKED VIA CHECK MACRO\n*\n*EXITS-NORMAL:CHECK FROM SYSACT4 OR CLOSE RELOAD REGISTERS AND RETURN\n*   TO CALLING PROGRAM VIA BR14\n*   CHECK FROM NEXTREC;BLOCKED FORMAT SET FLAG DS7 IN DSTAB AND BRANCH\n*   TO END OF NEXTREC ;UNBLOCKED FORMAT OUTPUT RETURN TO NEXTREC TO\n*   WRITE BACK CURRENT RECORD\n*   ;UNBLOCKED FORMAT INPUT  SET FLAG DS7 IN DSTAB AND RETURN TO NEXT-\n*   REC TO UPDATE POINTER IN DSTAB\n*     -ERROR :CHECK FROM OPEN;INPUT REQUEST BEYOND END OF DATA SET\n*\n*\n*\n         ENTRY IHIIORED\nIHIIORED SAVE  (14,12)\n         BALR  BASE,0\n         USING *,BASE\n         ST    SAVE,SAVEOD+4\n         LA    SAVE,SAVEOD\n         L     DCB,ADCB\n         TM    DSF+1,X'08'              TEST IF CHECK FROM OPEN\n         BZ    END00                                               0206\n         NI    DSF,X'CD'                SET FLAGS FOR A CORRECT CLOSE\n         LR    13,FSA\n         B     FSAERR+5*4(FSA)          INPUT REQUEST BEYOND END\nEND00    CLOSE ((DCB),LEAVE),TYPE=T\n         TM    DSF+1,DS8                IS CHECK FROM CLOSE OR SYSACT4\n         BZ    END02\nEND11    L     SAVE,SAVEOD+4\n         LM    14,12,12(SAVE)\n         BR    RETURN                   RETURN TO CALLING SYSACT4 OR   X\n                                        CLOSE ROUTINE\n         SPACE\nEND02    TM    DSF,DS2                                             0206\n         BZ    END03                                               0206\n         B     END11                                               0206\nEND03    OI    DSF,X'01'                                           0222\n         MVI   DECB+8,X'FF'            FLAG DCB ADDRESS IN DECB\n         L     SAVE,SAVEOD+4            RETURN TO CALLING NEXTREC\n         LM    14,12,12(SAVE)                                      0222\n         BR    RETURN                   RETURN TO CALLING NEXTREC\n*\n*        INTERNAL ADDRESSES\n*\n*\nSAVEOD   DS    18F\n         EJECT\n*\n*\n*   CONVERSION TO INTEGER\n*\n*FUNCTION/OPERATION: CONVERT REAL LONG OR SHORT TO INTEGER\n*\n*\n*NOTES: CALLED BY  BALR 14,15\n*   DATA PASSED BY VALUE  IN FLOATING POINT REGISTER 0\n*   RESULT IN GENERAL REGISTER 0\n*\n*\n*\n         SPACE 3\n         ENTRY IHIIORCI\nIHIIORCI TM    OPTSW(FSA),X'20'    TEST IF LONG OR SHORT PRECISION\n         USING IHIIORCI,ENTRY\n         BZ    LONG\n         STE   FR0,BUFF3\n         LD    FR0,BUFF3\n         SPACE 3\nLONG     AD    FR0,CONST2\n         STD   FR0,BUFF4\n         CE    FR0,CONST3\n         BNL   ERROR1\n         AW    FR0,CONST1\n         BP    LABEL\n         CLC   BUFF4(8),CONST4\n         BH    ERROR1\nLABEL    STD   FR0,BUFF2\n         L     GR0,BUFF2+4\n         X     GR0,CONST1+4\n         SD    FR0,CONST1\n         CD    FR0,BUFF4\n         BCR   13,RETURN\n         BCTR  GR0,RETURN\n         SPACE 3\nERROR1   LR    13,FSA\n         B     FSAERR+1*4(FSA)\n         SPACE\n         SPACE 2\n*        INTERNAL CONSTANTS AND STORAGE\n         SPACE\n         CNOP  0,8\nCONST1   DC    X'4E00000080000000'\nCONST2   DC    X'4080000000000000'\nBUFF2    DS    1D\nBUFF3    DC    8X'0'\nCONST4   DC    X'C880000000000000'\nBUFF4    DS    1D\nCONST3   DC    X'48800000'\n         EJECT\n*\n*\n*\n*\n*   SYNAD\n*\n*EXIT-NORMAL:BRANCH ERROR UNRECOVERABLE I/O ERROR\n*\n*\n*\n         ENTRY IHIIORER\nIHIIORER LR    BASE,ENTRY\n         USING IHIIORER,BASE\n         OI    DSF+1,X'04'             SET MARK FOR CORRECT CLOSEPE\n         LR    13,FSA\n         B     FSAERR+32*4(FSA)         I/O ERROR\n*\n*\nDCBMODEL DCB   DSORG=PS,MACRF=(RP,WP),DDNAME=ALGLDD,NCP=1,             X\n               EODAD=IHIIORED,EXLST=ADCBEXIT,SYNAD=IHIIORER\nADCBEXIT DC    X'05'                                               0221\n         DC    AL3(IHIIORDX)\n         DC    X'87000000'                                         0221\nDBWORD   DS    D              WORK AREA FOR DSN\nSCOUNT   DC    F'0'\nSAVAR    DS    18F\nEXERFLAG DC    X'00'\nNEXTERR2 NI    DSF,X'DD'               SET FLAGS FOR CLOSE;INPUT\n         LR    13,FSA                   INCOMPATIBLE ACTIONS ON THE\n         B     FSAERR+2*4(FSA)          SAME DATA SET\nNEXTERR3 NI    DSF,X'CD'               SET FLAGS FOR ARIGHT CLOSEPE\n         LR    13,FSA\n         B     FSAERR+3*4(FSA)\n         LTORG\n*\n*        INTERNAL ADDRESSES\n*\nACLNOTB  DC    A(IHIIORCN)\nAENNOTB  DC    A(IHIIOREN)\nANXREC   DC    A(IHIIORNX)                                         0219\n*\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n*\n*        PROVIDEING SYMBOLIC NAMES FOR DCB\n*\n         DCBD  DSORG=BS\n*\n*        PROVIDING ONE DECB\n*\n         READ DECB,SF,MF=L\nJFCB     DS    22D                                                 0221\n         EJECT\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIISY": {"ttr": 3080, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\xaa\\x00\\xaa\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 170, "newlines": 170, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIISY,INSYMBOL'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:COMPARE ONE CHARACTER FROM AN INPUT BUFFER WITH\n*   AN INTERNAL STRING AND ASSIGN WHEN CORRESPONDENCE POSITION NUMBER\n*   IN STRING TO THIRD ACTUAL PARAMETER\n*\n*ENTRY POINT:\n*        IHIISYMB - FROM GENERATED OBJECT MODULE  LA  1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR - EVALUATE DATA SET NUMBER - OPEN DATA SET -\n*   CHANGE TO NEXT INPUT RECORD\n*\n*EXITS-NORMAL:RELOAD REGISTERS AND BR14\n*    -ERROR :INPUT REQUEST BEYOND END OF DATA SET NO.5\n*   BRANCH TO FSA; LA 13,IHIFSA\n*                  B FSAERR+XX*4(13)      XX ERROR NO.\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n*\n*\n*\nIHIISYMB CSECT\n*2200017400                                                        0221\n*2200012000,014000,016400,016600,024000,025000-025800              0226\n         SPACE\nENTRY    EQU   15                  ADRESS OF ROUTINE INSYMBOL\nRETURN   EQU   14                  RETURN ADRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\n         SPACE 2\n*        OTHER GENERAL REGISTERS\n         SPACE\nDSN      EQU   5                   RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER BINARY\nBASE     EQU   7                   BASE REGISTER FOR THIS ROUTINE\nDEST     EQU   3                   DESTINATION ADRESS\nGRAS     EQU   4                   ADRESS OF STRING SYMBOL\nGRES     EQU   9                   ADRESS OF END OF STRING\nGRR      EQU   10                  CHARACTER POINTER\nGRINCR   EQU   8                   INCREMENT FOR LOOP\nFSA      EQU   12                  ADRESS OF FIXED STORAGE AREA\n         SPACE 3\n*        DATA SET FLAGS\nDS0      EQU   X'80'\nDS6      EQU   X'02'                                               0206\nDS2      EQU   X'20'                                               0206\nDS7      EQU   X'01'\nDS10     EQU   X'20'\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n         SPACE 3\n         STM   14,12,12(SAVE)\n         LR    BASE,ENTRY\n         USING IHIISYMB,BASE\n         ST    SAVE,SAVEISYM+4     SAVEISYM=SAVE AREA\n         LR    FSA,SAVE            ADRESS OF FIXED STORAGE AREA TO FSA\n         LA    SAVE,SAVEISYM\n         SPACE 2\n*        EVALUATE DATA SET NUMBER (EVDSN)\n         SPACE\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 2\n         L     GRAS,4(0,PARAM)     ADRESS OF STRING\n         L     DEST,8(0,PARAM)     ADRESS OF DESTINATION\n         LA    GRINCR,1            INCREMENT\n         SPACE 3\n*        TEST  IF DATA SET IS OPEN\n         SPACE\n         USING DSTABLE,DSN\n         NI    DSF+1,X'DF'         DS10=0                          0221\n         TM    Q,X'FF'             IS DATA SET SECTIONED           0206\n         BZ    *+8                                                 0206\n         B     ERROR2              INCOMPATIBLE ACTION             0206\n         LR    GRR,DSNR            IS DATA SET NR = 1              0206\n         BCT   GRR,*+8                                             0206\n         B     ERROR2              INCOMPATIBLE ACTION             0206\n         TM    DSF,DS0\n         BO    *+16                                                0226\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         B     EVSYMB-6            DCB IS CLOSED\n         TM    DSF,DS2             WAS LAST I/O OUTPUT             0206\n         BZ    *+8                                                 0206\n         B     ERROR3              INPUT BEYOND LAST OUTPUT        0206\n         TM    DSF,DS6             D.S.OPEN FOR OUTPUT OR E.O.D.   0206\n         BZ    EVSYMB                                              0206\n         TM    DSF,DS7             HAS END OF DATA BEEN REACHED    0206\n         BO    ERROR5              INPUT RQUEST BEYOND END OF DATA 0206\n         B     ERROR2                                              0221\n         NI    DSF,X'FD'           DS6.=0\n         BALR  RETURN,ENTRY\n         SPACE 3\nEVSYMB   MVC   HALFW(2),0(GRAS)    LENGTH OF STRING\n         LH    GRES,HALFW\n         BCTR  GRES,0\n         AR    GRES,GRAS           STRING-END LESS 1\n         LA    GRAS,2(0,GRAS)      STARTING POINT FOR STRING-SYMBOL\n         L     GRR,R               CHARACTERPOINTER\n         SPACE 3\nSYMBLOOP CLC   0(1,GRR),0(GRAS)\n         BE    TERMIN-10\n         BXLE  GRAS,GRINCR,SYMBLOOP\n         SR    GRAS,GRAS           ZERO INSERTED GRAS\n         B     TERMIN-4\n         SPACE 3\n         S     GRAS,4(0,PARAM)\n         BCTR  GRAS,0\n         ST    GRAS,0(DEST)        NUMBER OF SYMBOL INSERTED DESTNATION\n         SPACE\nTERMIN   LA    GRR,1(0,GRR)\n         C     GRR,RE\n         BNL   NEXTREC\n         ST    GRR,R\n         LR    SAVE,FSA\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE 3\nNEXTREC  L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     NEXTREC-8\nERROR2   LR    13,FSA                                              0206\n         B     FSAERR+2*4(FSA)     INCOMPATIBLE ACTION ON DATA SET 0206\nERROR3   LR    13,FSA                                              0206\n         B     FSAERR+3*4(FSA)     INPUT BEYOND LAST OUTPUT        0206\nERROR5   LR    13,FSA                                              0206\n         B     FSAERR+5*4(FSA)     INPUT REQUEST BEYOND END OF DATA0206\nSAVEISYM DS 18F                    SAVE AREA\n         SPACE 3\nHALFW    DS    1H\n         LTORG\n         SPACE 3\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3                                                   0226\nFAS      DSECT                                                     0226\n         COPY  FSAREA                                              0226\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHILAT": {"ttr": 3084, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x83\\x00\\x83\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 131, "newlines": 131, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHILAT, ATAN ROUTINE, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: 1. REDUCE THE CASE TO THE 1ST OCTANT BY USING    *\n*                       ATAN(-X)=-ATAN(X), ATAN(1/X)=PI/2-ATAN(X)     *\n*                    2. REDUCE FURTHER TO THE CASE /X/ LESS THAN      *\n*                       TAN(PI/2) BY                                  *\n*                       ATAN(X)=PI/6+ATAN((X*SQRT3-1)/(X+SQRT3)       *\n*                    3. FOR THE BASIC RANGE (X LESS THAN TAN(PI/12)), *\n*                       USE A FRACTIONAL APPROXIMATION.               *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHILAT - ATAN FUNCTION, LONG              LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: N/A                                                      *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHILATAN CSECT\n       ENTRY   IHILAT\n       SPACE\nGR1    EQU     1\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGR0    EQU     0               SCRATCH REGISTERS\nGRR    EQU     14              RETURN REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTERS\nFR4    EQU     4\nGRL    EQU     15              LINK REGISTER\nFR6    EQU     6\n         EJECT\n       DC      CL7'IHILAT'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\nIHILAT STM     GRR,GRL,12(GRS)         SAVE REGISTERS\n       L       GR1,0(GRA)\n       LD      FR0,0(GR1)      OBTAIN ARGUMENT\n       STE     FR0,SIGN          SAVE ARG FOR SIGN CONTROL\n       LPER    FR0,FR0             AND SET SIGN POSITIVE\n       SR      GR1,GR1         GR1 FOR DISTINGUISHING CASES\n       CE      FR0,ONE\n       BC      4,SKIP1\n       LD      FR2,ONE         IF X GREATER THAN 1, TAKE INVERSE\n       DDR     FR2,FR0           AND INCREMEMENT GR1 BY 16\n       LDR     FR0,FR2\n       LA      GR1,16\n       SPACE\nSKIP1  CE      FR0,TAN15\n       BC      12,SKIP2\n       LDR     FR2,FR0         IF X GREATER THAN TAN(PI/12),\n       MD      FR0,RT3M1         REDUCE X TO (X*SQRT3-1)/(X+SQRT3)\n       SD      FR0,HALF\n       SD      FR0,HALF          COMPUTE X*SQRT3-1 AS\n       ADR     FR0,FR2             X*(SQRT3-1)-0.5-0.5+X\n       AD      FR2,RT3               TO GAIN ACCURACY\n       DDR     FR0,FR2\n       LA      GR1,8(GR1)        INCREMENT GR1 BY 8\n       SPACE\nSKIP2  LDR     FR6,FR0         COMPUTE ATAN OF REDUCED ARGUMENT BY\n       MDR     FR0,FR0\n       LDR     FR2,FR0           ATAN(X) = X(1+F*XSQ)\n       AD      FR2,BETA4\n       LD      FR4,ALPHA4         F = A1/(B1+XSQ+A2/(B2+XSQ+A3\n       DDR     FR4,FR2                      /(B3+XSQ+A4/(B4+XSQ))..)\n       ADR     FR4,FR0\n       AD      FR4,BETA3\n       LD      FR2,ALPHA3\n       DDR     FR2,FR4\n       ADR     FR2,FR0\n       AD      FR2,BETA2\n       LD      FR4,ALPHA2\n       DDR     FR4,FR2\n       ADR     FR4,FR0\n       AD      FR4,BETA1\n       LD      FR2,ALPHA1\n       DDR     FR2,FR4\n       MDR     FR0,FR2\n       MDR     FR0,FR6\n       ADR     FR0,FR6\n       SPACE\n       C       GR1,SXTEN       DEPENDING ON THE CASE EITHER ADD\n       BC      4,*+10            0 OR PI/6 OR SUBTRACT FROM PI/3 OR\n       LCER    FR0,FR0             PI/2.   DO LATTER IN 2 STEPS\n       AD      FR0,PO2M1-16(GR1)\n       AD      FR0,ZERO(GR1)\n       TM      SIGN,X'80'      IF SIGN WAS NEGATIVE,\n       BC      8,*+6             ANSWER IS NEGATIVE\n       LCER    FR0,FR0\n       SPACE\n       MVI     12(GRS),X'FF'   RETURN\n       BCR     15,GRR\n       SPACE\nSIGN   DS      F\n       DS      0D\nRT3M1  DC      X'40BB67AE8584CAA8'      SQRT(3)-1\nRT3    DC      X'411BB67AE8584CAB'      SQRT(3)\nALPHA1 DC      X'C0D5F788DF6CB457'       -0.8358083291502266\nBETA1  DC      X'414D42F041242098'        4.828842405755528\nALPHA2 DC      X'C1DD6E91F2AD24DF'      -13.839494655565710\nBETA2  DC      X'4168C2DCB9C0437F'        6.547573781576119\nALPHA3 DC      X'C1138256FCDD5CB6'       -1.219321239235610\nBETA3  DC      X'41224D09A3EFF7AC'        2.143808021908152\nALPHA4 DC      X'C0145A9C5C07FB43'       -0.07950761076788829\nBETA4  DC      X'4114451896975D03'        1.266869152304765\nPO2M1  DC      X'40921FB54442D184'       90 DEGREES MINUS ONE\n       DC      X'408C152382D73658'       60 DEGREES MINUS HALF\nZERO   DC      D'0'                     0\n       DC      X'40860A91C16B9B2D'      30 DEGREES\nONE    DC      X'4110000000000000'\nHALF   DC      X'4080000000000000'\nTAN15  DC      X'40449851'\nSXTEN  DC      F'16'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHILEX": {"ttr": 3331, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x9d\\x00\\x9d\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 157, "newlines": 157, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHILEX, EXPONENTIAL ROUTINE, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: Y = X*LOG2(E) = 4A-B-C/16-D, WHERE A, B, AND C   *\n*   ARE INTEGERS, B BETWEEN0 AND 3, C BETWEEN 0 AND 15. D IS A        *\n*   FRACTION BETWEEN 0 AND 1/16. THEN                                 *\n*   E**X = 2**Y = (16**A)(2**-B)N2**-C/16)(2**-D)                     *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHILEX - EXP FUNCTION, LONG               LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ARGUMENT GREATER THAN 174673 GO TO ERROR ROUTINE VIA  *\n*        B     FSAERR+24*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHILEXPT CSECT\n*C024600,024700                                                  A32993\n       ENTRY   IHILEX\n       SPACE\nGR0    EQU     0               SCRATCH REGISTER\nGR2    EQU     2\nGR3    EQU     3\nGRA    EQU     1               ARGUMENT POINTER\nGR1    EQU     1\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTER\n         EJECT\n       DC      CL7'IHILEX'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\nIHILEX STM     GRR,GR3,12(GRS)         SAVE REGISTERS\n       L       GR1,0(GRA)      OBTAIN ARGUMENT\n       LD      FR0,0(GR1)\n       CE      FR0,MAX         MAX = 63*LOG16 = 174.67309\n       BC      2,ERROR           IF ARG GREATER THAN THIS, ERROR\n       CE      FR0,MIN         MIN = -65*LOG16 = -180.21867\n       BC      12,SMALL          IF ARG LESS THAN THIS, GIVE ANS=0\n       SPACE\n       DD      FR0,LOGE2       Y = X*LOG2(E) BY ACCURATE DIVISION\n       STE     FR0,SIGN        SAVE SIGN OF Y\n       LER     FR2,FR0         DECOMPOSE Y = (-4A'-B'-C'/16)-D'\n       AU      FR2,SCALER        BY FORCING CHARACTERISTIC OF X'45'\n       STE     FR2,FIELDS      -4A'-B'-C'/16 IN FIELDS, UNNORMALIZED\n       SDR     FR2,FR2\n       AE      FR2,FIELDS      NORMALIZE THIS AND SUBTRACT IT\n       SDR     FR0,FR2           FROM Y TO OBTAIN -D' IN FR0\n       L       GR2,FIELDS\n       SPACE\n       TM      SIGN,X'80'      IF Y NEGATIVE, SKIP\n       BC      1,READY         IF Y NON-NEGATIVE,\n       SD      FR0,ONO16         -D = /D'/-1/16\n       LA      GR2,1(GR2)        -4A-B-C/16 = -(-4A'-B'-(C'+1)/16)\n       LCR     GR2,GR2         NOW IN ANY CASE, B, C, AND D ARE +\n       SPACE\nREADY  SR      GR3,GR3\n       SRDL    GR2,4           C IN HIGH GR3\n       SRL     GR3,25\n       SRDL    GR2,2           B IN HIGH GR3, C IN LOW GR3\n       SLL     GR2,24\n       LCR     GR0,GR2         A (IN SCALE B7) IN GR0, CHAR MODIFIER\n       SR      GR2,GR2\n       SLDL    GR2,2           B IN GR2, 8*C IN GR3\n       SPACE\n       LDR     FR2,FR0         COMPUTE 2**-D BY USE OF\n       ME      FR0,C6            CHEBYSHEV INTERPOLATION\n       AD      FR0,C5              POLYNOMIAL OF DEGREE 6\n       MDR     FR0,FR2\n       AD      FR0,C4\n       MDR     FR0,FR2\n         AD    FR0,C3\n         MDR   FR0,FR2\n         AD    FR0,C2\n         MDR   FR0,FR2\n       AD      FR0,C1\n       MDR     FR0,FR2\n       AD      FR0,C0A         ADD C0 = 1. IN 2 STEPS\n       AD      FR0,C0A           TO PROTECT LAST DIGIT\n       SPACE\n       LTR     GR3,GR3         MULTIPLY 2**(-C/16)\n       BC      8,SKIP2           IN DOING SO, AVOID\n       CE      FR0,ONE             MULTIPLICATION BY 1.\n       BC      4,SKIP1\n       LD      FR0,MCONST-8(GR3)\n       BC      15,SKIP2\nSKIP1  MD      FR0,MCONST-8(GR3)\nSKIP2  LTR     GR2,GR2         MULTIPLY 2**(-B)\n       BC      8,SKIP3           BY HALVING B TIMES\n       HDR     FR0,FR0\n       BCT     GR2,*-2\nSKIP3  STD     FR0,SIGN        ADD A TO CHARACTERISTIC\n       A       GR0,SIGN\n       ST      GR0,SIGN\n       SDR     FR0,FR0         NORMALIZE THE ANSWER JUST IN CASE\n       AD      FR0,SIGN\n       SPACE\nEXIT   LM      GR2,GR3,28(GRS) RETURN\n       MVI     12(GRS),X'FF'\n       BCR     15,GRR\n       SPACE\nSMALL  SDR     FR0,FR0         IF X IS VERY LARGE NEGATIVE,\n       BC      15,EXIT           GIVE 0 AS ANSWER\n       SPACE\nERROR    L     GRS,4(GRS)               RESTORE FSA ADDRESS      A32992\n         B     FSAERR+24*4(GRS)         PARAM GREATER 174.673    A32992\nFSAERR   EQU   X'1CC'\nSIGN   DS      D\nFIELDS EQU     SIGN+4\nLOGE2  DC      X'40B17217F7D1CF79'       LOG 2 (BE) TRUNCATED\nONO16  DC      X'4010000000000000'\nONE    DC      X'41100000'\nC6     DC      X'3D9E0F1E'               .1507368551403575E-3\nC5     DC      X'3E575D42BB7276D4'       .1333073417706260E-2\nC4     DC      X'3F276553A5F9BC94'       .9618117095313700E-2\nC3     DC      X'3FE35846A61AEE7A'       .5550410840231345E-1\nC2     DC      X'403D7F7BFF0289DE'       .2402265069563678\nC1     DC      X'40B17217F7D1CC79'       .6931471805599346\nC0A    DC      X'4080000000000000'       .5    C0/2\nMCONST DC      X'40F5257D152486CC'           2**(-1/16)\n       DC      X'40EAC0C6E7DD2439'           2**(-2/16)\n       DC      X'40E0CCDEEC2A94E1'           2**(-3/16)\n       DC      X'40D744FCCAD69D6B'           2**(-4/16)\n       DC      X'40CE248C151F8481'           2**(-5/16)\n       DC      X'40C5672A115506DB'           2**(-6/16)\n       DC      X'40BD08A39F580C37'           2**(-7/16)\n       DC      X'40B504F333F9DE65'           2**(-8/16)\n       DC      X'40AD583EEA42A14B'           2**(-9/16)\n       DC      X'40A5FED6A9B15139'           2**(-10/16)\n       DC      X'409EF5326091A112'           2**(-11/16)\n       DC      X'409837F0518DB8A9'           2**(-12/16)\n       DC      X'4091C3D373AB11C3'           2**(-13/16)\n       DC      X'408B95C1E3EA8BD7'           2**(-14/16)\n       DC      X'4085AAC367CC487B'           2**(-15/16)\nSCALER DC      X'45000000'\nMAX    DC      X'42AEAC4E'         174.6731\nMIN    DC      X'C2B437DF'         -180.2187\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHILLO": {"ttr": 3335, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x84\\x00\\x84\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 132, "newlines": 132, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHILLO, LOGARITHMIC FUNCTION, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: WRITE X = (16**P)*(2**-Q)*M, Q BETWEEN 0 AND 3,  *\n*   AND M BETWEEN 1/2 AND 1. DEFINE A=1, B=0 IF M IS GREATER THAN     *\n*   SQRT2/2, OTHERWISE A=1/2, B=1.                                    *\n*   WRITE Z = (M-A)/(M+A), THEN                                       *\n*   LOG(X) = (4P-Q-B)*LOG(2) + LOG((1+Z)/(1-Z))                       *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHILLO - LOG FUNCTION, LONG               LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ARGUMENT ZERO OR NEGATIVE GO TO ERROR ROUTINE VIA     *\n*        B     FSAERR+25*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHILLOGM CSECT\n       ENTRY   IHILLO\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGR2    EQU     2\nGR3    EQU     3\nGRS    EQU     13              SAVE AREA POINTER\nGRA    EQU     1               ARGUMENT POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTER\n         EJECT\n       DC      CL7'IHILLO'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\n       SPACE\nIHILLO STM     GRR,GR3,12(GRS)         NATURAL LOG ENTRY\n       L       GR1,0(GRA)              OPTAIN ARGUMENT IN GR0,GR1\n       LM      GR0,GR1,0(GR1)\n       LTR     GR2,GR0\n       BC      12,ERROR        IF 0 OR NEGATIVE, ERROR\n       SRDL    GR2,24          CHAR IN LOW GR2, 1ST DIGIT IN HIGH GR3\n       SLL     GR2,2\n       STH     GR2,IPART+2     FLOAT 4*CHAR AND SAVE IT\n       SR      GR2,GR2\n       SLDL    GR2,4           1ST DIGIT IN GR2\n       IC      GR2,TABLE(GR2)  NUMBER OF LEADING ZEROS (=Q) IN GR2\n       SLDL    GR0,0(GR2)\n       STM     GR0,GR1,BUFF\n       MVI     BUFF,X'40'      M = FRACTION*2**Q  IN CELL BUFF\n       SPACE\n       LA      GR1,8\n       LD      FR0,BUFF        PICK UP M IN FR0\n       CE      FR0,LIMIT       IF M GREATER THAN SQRT2/2, GR1=8.\n       BC      2,READY\n       SR      GR1,GR1         IF M LESS THAN SQRT2/2, GR1=0,\n       LA      GR2,1(GR2)        AND CRANK GR2 BY 1.   Q+B IN GR2\n       SPACE\nREADY  LDR     FR2,FR0         COMPUTE Z = (M-A)/(M+A),  A = 1 OR 1/2\n       SD      FR0,HALF          SUBTRACT A IN 2 STEPS TO PROTECT\n       SD      FR0,ZERO(GR1)       THE LAST DIGIT.\n       AD      FR2,HALF(GR1)     M+A HAS ONLY 53BITS.  NOT SERIOUS\n       DDR     FR0,FR2\n       STD     FR0,BUFF\n       SPACE\n       MDR     FR0,FR0         COMPUTE LOG((1+Z)/(1-Z))\n       LDR     FR2,FR0           BY CHEBYSHEV INTERPOLATION\n       MD      FR2,C7              POLYNOMIAL (IN ZSQ) OF DEGREE 7\n       AD      FR2,C6\n       MDR     FR2,FR0\n       AD      FR2,C5\n       MDR     FR2,FR0\n       AD      FR2,C4\n       MDR     FR2,FR0\n       AD      FR2,C3\n       MDR     FR2,FR0\n       AD      FR2,C2\n       MDR     FR2,FR0\n       AD      FR2,C1\n       MDR     FR2,FR0           F = ZSQ*(C1+ZSQ*(C2+...+ZSQ*C7)..)\n       LD      FR0,BUFF          LOG((1+Z)/(1-Z)) = Z*(2+F)\n       MDR     FR2,FR0                            = Z+Z+Z*F\n       ADR     FR2,FR0             TO GAIN ACCURACY\n       ADR     FR2,FR0\n       SPACE\n       LD      FR0,IPART       4*CHARACTERISTIC IN FR0\n       LA      GR2,256(GR2)    ADD 4*(BASE CHARAC=64) TO Q+B,\n       STH     GR2,IPART+2       FLOAT THIS AND SUBTRACT FROM FR0\n       SE      FR0,IPART           TO OBTAIN 4P-Q-B\n       MD      FR0,LOGE2       MULTIPLY LOG(2) BASE E\n       ADR     FR0,FR2           AND ADD TO LOG((1+Z)/(1-Z))\n       SPACE\n       LM      GR2,GR3,28(GRS)\n       MVI     12(GRS),X'FF'\n       BCR     15,GRR          RETURN\n       SPACE\n*\nERROR    B     FSAERR+25*4(13)     PARAMETER NOT GREATER THAN ZERO\n       SPACE\nBUFF   DS      D\nIPART  DC      X'4600000000000000'\nTABLE  DC      X'0303020201010101'     THESE 4\nZERO   DC      X'0000000000000000'       CONSTANTS\nHALF   DC      X'4080000000000000'         MUST BE\n       DC      X'4110000000000000'           TOGETHER\nC7     DC      X'4025E9B17CA9B973'       .1480971268990510\nC6     DC      X'40273337E26DBA7F'       .1531252792171731\nC5     DC      X'402E8CD32A425C06'       .1818363168880382\nC4     DC      X'4038E38A00083F6B'       .2222219705656678\nC3     DC      X'4049249251450212'       .2857142876064318\nC2     DC      X'40666666665EBAA3'       .3999999999930233\nC1     DC      X'40AAAAAAAAAAAD6C'       .666666666666764\nLOGE2  DC      X'40B17217F7D1CF7B'       LOG 2 (BE) + 1 IN LAST DGT\nLIMIT  DC      X'40B504F3'               1/SQRT 2\nFSAERR   EQU   X'1CC'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHILOR": {"ttr": 3338, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x010\\x010\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 304, "newlines": 304, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHILOR,OUTREAL LONG'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:CONVERT BINARY ARITHMETIC VALUE,FROM SECOND\n*    ACTUAL PARAMETER,TO ZONED DECIMAL FORM AND TRANSFER TO AN OUTPUT\n*    BUFFER\n*\n*ENTRY POINTS:\n*        IHILOREL - FROM GENERATED OBJECT MODULE LA 1,PARMLIST\n*   DATA PASSED BY NAME                          BALR 14,15\n*\n*        IHILORAR -FROM ARRAY MODULE IHIOAR      LA 7,DATA\n*                                                BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR - EVALUATE DATA SET NUMBER -OPEN DATA SET-\n*   CHANGE TO NEXT OUTPUT RECORD\n*        IHIFSA - CNVIRD- CONVERT INTEGER TO REAL LONG\n*        IHIPTT - POWER OF TEN TABLE LONG PREC\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*   -ERROR: TOO LONG RECORD                 NO.38\n*   BRANCH TO IHIFSA         L 13,IHIFSA\n*                            B FSAERR+XX*4(13)   XX ERROR NO.\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:LINKING TO IHILORAR DEVIATE FROM STANDARD\n*   CHARACTER DEPENDENCE:\n*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n*\nIHILOREA CSECT\n*0019013200,018800,024400,027000,048600,051600-052400,052800       0226\n         SPACE\nENTRY    EQU   15                  ADDRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADDRESS\nSAVE     EQU   13                  ADDRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADDRESS OF PARAMETER LIST\n         SPACE 2\n         SPACE\nFSA      EQU   12                  ADDRESS OF FIXED STORAGE AREA\n         SPACE 2\n*        OTHER GENERAL REGISTERS\n         SPACE\nDSN      EQU   5                   RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER BINARY\nBASE     EQU   13                  BASE REGISTER FOR THIS ROUTINE\nGRA      EQU   7                   SOURCE ADDRESS\nGRR      EQU   4                   CHARACTER POINTER\nFR0      EQU   0                   FLOATINGPOINT NUMBER\nGRK      EQU   8                   BLANKCOUNTER\nGREXP    EQU   2                   EXPONENT GREATER EIGHT\nGRE      EQU   3                   EXPONENT LESS EIGHT\nGRDE     EQU   9                   DECIMAL EXPONENT\nEXEC     EQU   8                   BLANKCOUNTER\nPOWTEN   EQU   15                  REGISTER FOR ADRESSING POWERTWNTABLE\n         SPACE 3\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n*        DATA SET FLAGS\nDS0      EQU   X'80'\nDS6      EQU   X'02'\nDS3      EQU   X'10'\n         SPACE 3\n         ENTRY IHILOREL\n         ENTRY IHILORAR\nIHILORAR STM   14,12,12(SAVE)      REGISTERS STORED IN OUTARRAY SAVEAR\n         USING IHILORAR,ENTRY\n         ST    SAVE,SAVREGOR+4     SAVEREGOR=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREGOR       BASE=SAVE=ADDRESS OF SAVREGOR\n         USING SAVREGOR,BASE\n         B     SOUFLP+4\n         SPACE 3\nIHILOREL STM   14,12,12(SAVE)      REGISTERS IN FIXED STORAGE AREA\n         LR    FSA,SAVE\n         DROP  BASE\n         USING IHILOREL,ENTRY\n         ST    SAVE,SAVREGOR+4     SAVREGOR=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREGOR       BASE=SAVE=ADDRESS OF SAVREGOR\n         USING SAVREGOR,BASE\n         B     SAVREGOR+72\n         SPACE 2\nSAVREGOR DS    18F\n         SPACE 3\n*        EVALUATE DATA SET NUMBER (EVDSN)\n         SPACE\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\nSOUFLP   L     GRA,4(0,PARAM)      ADDRESS OF SOURCE\n         USING DSTABLE,DSN\n         OI    DSF,X'30'           DS2.=DS3.=1\n         NI    DSF,X'FE'           DS7.=0\n         LTR   GRA,GRA\n         BP    REAL1\n         SPACE 3\n*        CALL CONVERSION ROUTINE(LOADED IN FSA)\n         SPACE\n         STM   14,13,8(SAVE)       ALL REGISTERS INTO SAVREGOR\n         LR    2,SAVE              ADDRESS OF SAVREGOR TO REG2\n         L     14,0(0,GRA)         INTEGER INTO REG.14\n         LA    7,ACNVIRD(FSA)\n         LR    13,FSA              ADDRESS OF FSA TO REG. 13\n         BALR  8,7\n         LM    14,13,8(2)          ALL REGISTERS RESET\n         B     *+8                 NUMBER IN FRO AFTER CONVERSION\n         SPACE 3\nREAL1    LD    FR0,0(0,GRA)        NUMBER IN FR0\n         SPACE 2\n*        TEST IF DATA SET IS OPEN\n         SPACE\n         TM    DSF,DS0\n          BO    NOCLO              DCB IS OPEN\n         OI    DSF,DS6             DS6.=1\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n          BALR RETURN,ENTRY\n         SPACE 3\nNOCLO    L     GRR,R               CHARACTER POINTER\n         LA    EXEC,22(0,GRR)\n         C     EXEC,RE\n         BNH   NONEXREC            BUFFER CAN ACCEPT 22 DIGITS\n         L     EXEC,RE\n         SR    EXEC,GRR\n         BC    12,*+16\nBLANKS   MVI   0(GRR),C' '         BLANK IN BUFFER\n         LA    GRR,1(0,GRR)        INCREASE R\n         BCT   EXEC,BLANKS\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         L     GRR,R\n         LA    EXEC,22(0,GRR)\n         C     EXEC,RE\n         BH    ORLERR                   TOO SHORT RECORD LENGTH\n         OI    DSF,DS3\n         SPACE 3\nNONEXREC LA    GRDE,16\n         LTDR  FR0,FR0\n         BC    6,NOT0\n         MVI   0(GRR),C' '         NUMBER IS ZERO\n         MVC   1(21,GRR),0(GRR)\n         MVI   1(GRR),C'0'\n         B     TERMIN\n         SPACE 3\nNOT0     MVI   0(GRR),C'+'         ZONE IS INSERTED\n         BP    *+10\n         MVI   0(GRR),C'-'\n         LCDR  FR0,FR0\n         SPACE 3\nEXPLOOP  STD   FR0,CHAR\n         SR    GRE,GRE\n         IC    GRE,CHAR\n         MVI   SE,X'00'\n         S     GRE,SEV8\n         BP    *+14\n         BZ    EXP0                EXPONENT.=78\n         MVI   SE,X'80'\n         LCR   GRE,GRE\n         MH    GRE,LOG2\n         AH    GRE,ROUND\n         SRL   GRE,14\n         C     GRE,SEV8\n         BNH   *+8\n         L     GRE,SEV8            EXPONENT.=78\n         TM    SE,X'80'\n         L     POWTEN,APTTAB       ADDRESS OF POWERTENTABLE\n         BZ    *+10\n         SR    GRDE,GRE\n         B     *+10\n         LA    POWTEN,128(0,POWTEN)\n         AR    GRDE,GRE\n         LR    GREXP,GRE\n         SR    GRE,GRE             CLEAR REGISTER\n         SRDA  GREXP,3\n         SLA   GREXP,3\n         SPACE 3\nTESTEXP1 BZ    EXP1LS8\n         C     GREXP,SEVTWO\n         BL    EXP1LS8-4           EXPONENT NEGATIV\n         MD    FR0,128(0,POWTEN)\n         S     GREXP,SEVTWO\n         B     TESTEXP1\n         SPACE 3\n         MD    FR0,56(GREXP,POWTEN)\nEXP1LS8  SRL   GRE,26              EXPONENT MULTIPLIED EIGHT\n         LTR   GRE,GRE\n         BC    8,EXPLOOP\n         MD    FR0,0(GRE,POWTEN)\n         B     EXPLOOP\n         SPACE 3\nEXP0     CD    FR0,TENP16\n         BNL   DIG17               NUMBER GE 10**16\n         MVI   CHAR,X'00'\n         LM    GREXP,GRE,CHAR\n         D     GREXP,TENP9I\n*   TRANSFORM NUMBER TO DECIMAL FORM AND EDIT OUTPUT NUMBER IN\n*   I/O BUFFER\n         CVD   GRE,BUFF            QUOTE CONVERTED\n         UNPK  1(9,GRR),BUFF+3(5)\n         OI    9(GRR),X'F0'\n         CVD   GREXP,BUFF\n         UNPK  10(9,GRR),BUFF+3(5)\n         OI    18(GRR),X'F0'\n          CLI  2(GRR),C'0'         LEADING ZERO\n         BNE   *+12\n         BCTR  GRDE,0\n         MVC   2(16,GRR),3(GRR)\n         MVC   1(1,GRR),2(GRR)\n         MVI   2(GRR),C'.'         DECIMAL POINT INSERTED\n         MVI   18(GRR),C''''       APOSTROPHE INSERTED\n         SPACE 3\nDECEXP   CVD   GRDE,BUFF\n         UNPK  19(3,GRR),BUFF+6(2)\n         LTR   GRDE,GRDE\n         BC    10,*+12\n         MVI   19(GRR),C'-'        EXPONENT SIGN IS NEGATIV\n         B     *+8\n         MVI   19(GRR),C'+'\n         OI    21(GRR),X'F0'       ZONE INSERTED EXPONENT\n         SPACE 3\n*   TERMINATION ROUTINE INSERT BLANKS AND IF RECORD END CALL NEXTREC\nTERMIN   LA    GRR,22(0,GRR)\n         SR    GRK,GRK\n         IC    GRK,K\n         C     GRR,RE\n         BE    RECEND\n         MVI   0(GRR),C' '\n         LA    GRR,1(0,GRR)\n         BCT   GRK,TERMIN+10\n         C     GRR,RE\n         BE    RECEND\n         ST    GRR,R\n         L     SAVE,SAVREGOR+4\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE 3\nRECEND   L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     RECEND-10\n*   NUMBER GREATER OR EQUAL 10**16\n         SPACE 3\nDIG17    AW     FR0,FIVE\n         STD   FR0,CHAR\n         CD    FR0,TWOP56B\n          BL   EXP0+8\n          MVC  1(18,GRR),TWOP56    NUMBER GR 16**14\n         B     DECEXP\n*\nORLERR   LR    13,FSA\n         B     FSAERR+38*4(FSA)\n         SPACE 3\nAPTTAB   DC    V(IHIPTTAB)\nACNVIRD  EQU   X'120'\n         SPACE 3\n*        INTERNAL CONSTANTS AND STORAGE\n         SPACE\nSEVTWO   DC    F'72'\nSEV8     DC    F'78'\nLOG2     DC    H'19728'\nROUND    DC    H'8192'\nTENP9I   DC    F'1000000000'\nBUFF     DS    1D\nCHAR     DS    1D\nFIVE     DC    X'4E00000000000005'\nTWOP56B  DC    X'4F10000000000000'\nTENP16   DC    DE16'1'\nSE       DS    1C\nTWOP56   DC    C'7.205759403792794'''\n         LTORG\n         SPACE 3\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS     A\nBL       DS    H\n         SPACE 3                                                   0226\nFAS      DSECT                                                     0226\n         COPY  FSAREA                                              0226\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHILSC": {"ttr": 3588, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x96\\x00\\x96\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 150, "newlines": 150, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHILSC, SINE/COSINE ROUTINE, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: 1. DIVIDE MAGNITUDE OF ARG BY PI/4 TO FIND       *\n*                       OCTANT AND FRACTION.                          *\n*                    2. IF COSINE ADD 2 TO OCTANT NUMBER, IF SINE     *\n*                       FOR NEGATIVE ARG, ADD 4 TO OCTANT NUMBER.     *\n*                    3. COMPUTE SINE OR COSINE OF FRACTION*PI/4       *\n*                       DEPENDING ON THE OCTANT.                      *\n*                    4. IF OCTANT NUMBER IS FOR LOWER PLANE MAKE      *\n*                       SIGN MINUS.                                   *\n*                                                                     *\n*ENTRY POINTS:                                                        *\n*        IHILSCC - COSINE FUNCTION, LONG           LA  1,PARMLIST     *\n*        IHILSCS - SINE FUNCTION, LONG             BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ABS(ARG) NOTLESS THAN PI*2**50 GO TO ERROR ROUTINE VIA*\n*        B     FSAERR+27*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHILSCSN CSECT\n       ENTRY   IHILSCC\n       ENTRY   IHILSCS\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTERS\nFR4    EQU     4\n         EJECT\n       DC      CL7'IHILSCC'            ENTRY-POINT IDENTIFIER\n       DC      X'07'\n       USING   *,GRL\nIHILSCC  STM   GRR,GRL,12(GRS)         COSINE ENTRY , SAVE REGISTERS\n       LA      GR0,2             OCTANT CRANK OF 2 TO GR0\n       L       GR1,0(GRA)        ARGUMENT ADDRESS TO GR1\n       LA      GRL,IHILSCS-IHILSCC(GRL)  ADJUST BASE REGISTER\n       USING   IHILSCS,GRL             AND JOIN MAIN CIRCUIT\n       BC      15,MERGE\n       SPACE\n       DC      CL7'IHILSCS'            ENTRY-POINT IDENTIFIER\n       DC      X'07'\nIHILSCS  STM   GRR,GRL,12(GRS)         SINE ENTRY , SAVE REGISTERS\n       SR      GR0,GR0           ARGUMENT ADDRESS TO GR1\n       L       GR1,0(GRA)        IF ARG IS +, CRANK OF 0 TO GR0\n       TM      0(GR1),X'80'      IF ARG IS -, CRANK OF 4 TO GR0\n       BC      8,*+8\n       LA      GR0,4\n       SPACE\nMERGE  LD      FR0,0(GR1)      PICK UP THE ARGUMENT\n       LPER    FR0,FR0         FORCE SIGN OF ARG TO +\n       CE      FR0,MAX\n       BC      10,ERROR        ERROR IF /X/ GRT THAN OR = PI*2**50\n       SPACE\n       DD      FR0,PIOV4       DIVIDE BY PI/4 AND SEPARATE INTEGER\n       LDR     FR2,FR0           PART AND FRACTION PART OF QUOTIENT\n       AW      FR2,SCALER        FORCE CHARACTERISTIC X'4E'\n       STD     FR2,ARG           INTEGER PART UNNORMALIZED = OCTANT\n       SDR     FR2,FR2\n       AD      FR2,ARG           INTEGER PART NORMALIZED\n       SDR     FR0,FR2           FRACTION PART TO FR0\n       AL      GR0,ARG+4       ADJUST OCTANT NUMBER WITH CRANK\n       ST      GR0,OCTNT         AND SAVE IT\n       SPACE\n       TM      OCTNT+3,X'01'   IF ODD OCTANT, TAKE COMPLEMENT\n       BC      8,EVEN            OF FRACTION TO OBTAIN MODIFIED ARG\n       SD      FR0,HALF\n       SD      FR0,HALF          SUBTRACT 1 IN 2 STEPS\n       SPACE\nEVEN   LPDR    FR4,FR0\n       SR      GR1,GR1         GR1 = 0 FOR COSINE POLYNOMIAL\n       TM      OCTNT+3,X'03'     THIS IS FOR OCTANT 2,3,6, OR 7\n       BC      4,*+8           IF OCTANT 1,4,5, OR 8, USE SINE\n       LA      GR1,8             POLYNOMIAL.   GR1 = 8\n       SPACE\n       MDR     FR0,FR0         COMPUTE SIN OR COS OF MODIFIED ARG\n       LDR     FR2,FR0           USING PROPER CHEBYSHEV INTERPOLATION\n       MD      FR0,C7(GR1)         POLYNOMIAL\n       AD      FR0,C6(GR1)\n       MDR     FR0,FR2           SIN(X)/X POLYN OF DEGREE 6 IN XSQ\n       AD      FR0,C5(GR1)       COS(X)   POLYN OF DEGREE 7 IN XSQ\n       MDR     FR0,FR2\n       AD      FR0,C4(GR1)\n       MDR     FR0,FR2\n       AD      FR0,C3(GR1)\n       MDR     FR0,FR2\n       AD      FR0,C2(GR1)\n       MDR     FR0,FR2\n       AD      FR0,C1(GR1)\n       SPACE\n       LTR     GR1,GR1\n       BC      8,COSF\n       MDR     FR0,FR4         COMPLETE SIN POLYNOMIAL BY\n       BC      15,SIGN           MULTIPLYING BY X\n       SPACE\nCOSF   MDR     FR0,FR2         COMPLETE COS POLYNOMIAL\n       AD      FR0,HALF          (ONE MORE DEGREE)\n       AD      FR0,HALF          ADD 1 IN 2 STEPS\n       SPACE\nSIGN   TM      OCTNT+3,X'04'   IF MODIFIED OCTANT IS IN\n       BC      8,*+6             LOWER PLANE, SIGN IS NEGATIVE\n       LNER    FR0,FR0\n       SPACE\n       MVI     12(GRS),X'FF'   RETURN\n       BCR     15,GRR\n       SPACE\nERROR    B     FSAERR+27*4(13)    PARAMETER NOT LESS THAN PI*2**50\n       SPACE\nARG    DS      D\nSCALER DC      X'4E00000000000000'\nC7     DC      X'B66C992E84B6AA37'\n       DC      X'3778FCE0E5AD1685'       S6\nC6     DC      X'387E731045017594'\n       DC      X'B978C01C6BEF8CB3'       S5\nC5     DC      X'BA69B47B1E41AEF6'\n       DC      X'3B541E0BF684B527'       S4\nC4     DC      X'3C3C3EA0D06ABC29'\n       DC      X'BD265A599C5CB632'       S3\nC3     DC      X'BE155D3C7E3C90F8'\n       DC      X'3EA335E33BAC3FBD'       S2\nC2     DC      X'3F40F07C206D6AB1'\n       DC      X'C014ABBCE625BE41'       S1\nC1     DC      X'C04EF4F326F91777'         LAST DGT REDUCED BY 2\nPIOV4  DC      X'40C90FDAA22168C2'       S0\nHALF   DC      X'4080000000000000'       1/2 = C0/2\nMAX    DC      X'4DC90FDA'\nOCTNT  DS      F\nFSAERR   EQU   X'1CC'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHILSQ": {"ttr": 3592, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00`\\x00`\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 96, "newlines": 96, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHILSQ, SQUARE ROOT ROUTINE, LONG PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: WRITE X = M*16**(2P-Q), M MANTISSA, Q=0 OR 1,    *\n*   THEN SQRT(X) = SQRT(M)*(4**-Q)*(16**P)                            *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHILSQ - SQRT FUNCTION, LONG              LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ARGUMENT NEGATIVE GO TO ERROR ROUTINE VIA             *\n*        B     FSAERR+23*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHILSQRT CSECT\n       ENTRY   IHILSQ\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTERS\nFR4    EQU     4\n         EJECT\n       DC      CL7'IHILSQ'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\nIHILSQ STM     GRR,GRL,12(GRS)         SAVE REGISTERS\n       L       GR1,0(GRA)\n       LD      FR0,0(GR1)      OBTAIN ARGUMENT\n       LTDR    FR4,FR0\n       BC      8,FIN           IF ARG=0, ANS=0.   RETURN\n       BC      4,ERROR         IF NEGATIVE ARG, ERROR\n       STE     FR0,BUFF        CONSTRUCT  Y = M*16**P AS FOLLOWS\n       SR      GR0,GR0\n       IC      GR0,BUFF          P+64 = INT PART OF (CHAR+65)/2\n       AH      GR0,BIAS\n       SRDL    GR0,1             P+64 IN GR0.   GR1 IS - IF EVEN CHAR\n       STC     GR0,BUFF        Y IS READY IN BUFF\n       STC     GR0,B           CONSTRUCT (2/9)*16**P IN B\n       LE      FR0,BUFF        COMPUTE ((2/9+(8/9)*M)*16**P\n       ME      FR0,A\n       AE      FR0,B\n       LTR     GR1,GR1\n       BC      4,OK            IF EVEN CHAR, 1ST APPROX IS READY\n       HER     FR0,FR0         IF ODD CHAR, DIVIDE BY 4 TO OBTAIN\n       HER     FR0,FR0           1ST APPROXIMATION\n       SPACE\nOK     LER     FR2,FR4         NEWTON RAPHSON ITERATIONS\n       DER     FR2,FR0            Y(N+1) = (Y(N)+ARG/Y(N))/2\n       AER     FR0,FR2           2 PASSES IN SHORT FORM\n       HER     FR0,FR0\n       LER     FR2,FR4\n       DER     FR2,FR0\n       AER     FR0,FR2\n       HER     FR0,FR0\n       LDR     FR2,FR4           2 PASSES IN LONG FORM\n       DDR     FR2,FR0\n       HDR     FR2,FR2\n       HDR     FR0,FR0\n       ADR     FR0,FR2\n       DDR     FR4,FR0\n       SWR     FR4,FR0\n       HDR     FR4,FR4\n       ADR     FR0,FR4\nFIN    MVI     12(GRS),X'FF'   RETURN\n       BCR     15,GRR\nERROR    B     FSAERR+23*4(13)     NEGATIVE PARAMETER\n       SPACE\nBUFF   DS      F\nFSAERR   EQU   X'1CC'\nA      DC      X'40E38E39'\nB      DC      X'4038E38E'\n       DS      0H\nBIAS   DC      X'0041'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOAR": {"ttr": 3595, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00l\\x00l\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 108, "newlines": 108, "modlines": 0, "user": "O360-19"}, "text": "    TITLE 'IHIOAR,OUTARRAY'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:TRANSFER NUMBERS FROM ARRAY INDICATED BY SECOND\n*   ACTUAL PARAMETER TO OUTPUT BUFFER BY CALLING OUTREAL LONG OR\n*   SHORT REPEATEDLY\n*\n*ENTRY POINT:IHIOARRY-FROM GENERATED OBJECT MODULE  LA 1,PARMLIST\n*   DATA PASSED BY NAME                             BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER\n*        IHISOR-OUTREAL SHORT\n*        IHILOR-OUTREAL LONG\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\nIHIOARRY CSECT\n*0019                                                              5608\n*D016450-016600,A01645-016700                                    A39570\n         SPACE 3\nENTRY    EQU   15                       ENTRY ADDRESS\nRETURN   EQU   14                       RETURN ADDRESS\nSAVE     EQU   13                       ADDRESS OF SAVEAREA IN FSA\nPARAM    EQU   1                        ADDRESS OF PARAMETERLIST\n         SPACE 3\n*\n*  OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                        RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                        DATA SET NUMBER\nBASE     EQU   8                        BASE REGISTER\nCONV     EQU   3                        CONVERSION FLAG\nGRA      EQU   7                        REGISTER FOR TRANSFER DESTADDR\nGRB      EQU   2                        SCRATCH REGISTER\nRLSH     EQU   4                        HANDLING LONG OR SHORT PRECS.\nFSA      EQU   12                       ADDRESS OF FSA DURING EXECUTION\n         SPACE 3\n         SAVE  (14,12)\n         LR    BASE,ENTRY               IN FSA\n         USING IHIOARRY,BASE\n         LR    FSA,SAVE                 FSA=ADDRESS OF FSA\n         LA    SAVE,72(0,SAVE)          ADDRESS OF 2:D SAVEAREA IN FSA\n*\n         SR    CONV,CONV\n*                                  EVALUATE DATA SET NUMBER\n*\n         L     ENTRY,AEVDSN\n         BALR  RETURN,ENTRY\n         SPACE 2\n*\n*                                  EVALUATE SOURCE ADDRESS\n*\n         L     PARAM,4(0,PARAM)\n         LTR   PARAM,PARAM              TEST 2:D PARAMETER\n         BC    10,OTARY1                BRANCH GREATER OR EQUAL 0\n         O     CONV,=X'80000000'\n         N     PARAM,=X'00FFFFFF'\nOTARY1   L     GRB,12(0,PARAM)          ADDRESS OF DESTEND+1 TO GRB\n         L     GRA,8(0,PARAM)           ADDRESS OF STARTDEST TO GRA\n         AR    GRA,CONV\n         AR    GRB,CONV\n*  CALL ROUTINE OUREAL LONG OR SHORT\n*\n*\n         LH    RLSH,=H'4'               SHORT\n         TM    OPTSW(FSA),X'20'         TEST LONG OR SHORT PRECISION\n         BO    *+8                      SHORT\n         LH    RLSH,=H'8'               LONG\nOTARY2   L     ENTRY,ARROUTR(RLSH)\n         BALR  RETURN,ENTRY\n         TM    OPTSW(FSA),X'20'        LONG OR SHORT             A39570\n         BO    OTARY3                  SHORT                     A39570\n         LTR   GRA,GRA                 LONG                      A39570\n         BP    OTARY3                                            A39570\n         SH    GRA,=H'4'                                         A39570\nOTARY3   AR    GRA,RLSH                INCREASE DEST ADDR        A39570\n         CR    GRA,GRB\n         BL    OTARY2                   DESTEND NOT REACHED\n         SPACE 2\n*\n         LR    SAVE,FSA\n         RETURN (14,12)\n         SPACE 3\n*\n*  EXTERNAL ADDRESSES\n*\nAEVDSN   DC    V(IHIIOREV)\nARROUTR  DS    A\n         DC    V(IHISORAR)\n         DC    V(IHILORAR)\n         LTORG\nFAS      DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOBA": {"ttr": 3598, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00o\\x00o\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 111, "newlines": 111, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIOBA,OUTBARRAY'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:TRANSFER BOOLEAN VALUES FROM ARRAY DEFINED BY\n*   SECOND ACTUAL PARAMETER TO AN OUTPUT BUFFER BY CALLING OUTBOOLEAN\n*   REPEATEDLY\n*\n*ENTRY POINTS:\n*        IHIOBARR-FROM GENERATED OBJECT MODULE   LA 1,PARMLIST\n*   DATA PASSED BY NAME                          BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER\n*        IHIOBO-INBOOLEAN\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n         SPACE\n         SPACE\nIHIOBARR CSECT\n         SPACE\n*\n*\nENTRY    EQU   15                  ADRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\n*\n*GRA     EQU   2                   ADRESS OF SOURCE\n*SAVE    EQU   13                  ADRESS OF SAVE AREA IN OUTBARRY\nFSA      EQU   12                  ADRESS OF FIXED STORAGE AREA\n         SPACE\n         SPACE\n*\n*  OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                   ADRESS OF RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER\nBASY     EQU   7                   BASE REGISTER\nGRA      EQU   2\nGRE      EQU   4\n         SPACE\n*\n*  DATA SET FLAGS  (DSF AND DSF+1 IN DSTAB)\n*\n*\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS2      EQU   X'20'\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS6      EQU   X'02'\nDS7      EQU   X'01'\nDS8      EQU   X'80'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\n         EJECT\n*\n         SAVE  (14,12)\n         LR    BASY,ENTRY\n         USING IHIOBARR,BASY\n         LR    FSA,SAVE                 ADRESS OF FIXED STORAGE AREA TO\n         LA    SAVE,72(0,SAVE)          REGISTER FSA\n*\n* EVALUATE DATA SET NUMBER\n*\n         L     ENTRY,AEVDSNY\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n*\n* STORE SOURCE ADRESS IN REGISTER GRA\n*\n         L     PARAM,4(0,PARAM)         ADRESS OF SOURCEEND+1 TO GRE\n         L     GRE,12(0,PARAM)\n         L     GRA,8(0,PARAM)           ADRESS OF SOURCE TO GRA\n*\n*  CALL FOR ROUTINE OUTBOOLEAN\n*\nOUTBY1   L     ENTRY,EARROUTB\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n         LA    GRA,1(0,GRA)             INCREASE ASOURCE BY ONE\n         CR    GRA,GRE\n         BL    OUTBY1                   MORE VALUE TO WRITE\n         LR    SAVE,FSA\n         LM    14,12,12(SAVE)           RELOAD REGISTER\n         BR    RETURN\n         SPACE\n*\n* EXTERNAL ADRESSES\n*\n*\nAEVDSNY  DC    V(IHIIOREV)\nEARROUTB DC    V(IHIOBOAR)\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOBO": {"ttr": 3841, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\xea\\x00\\xea\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 234, "newlines": 234, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIOBO,OUTBOOLEAN'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:TRANSFER BOOLEAN VALUE FROM SECOND ACTUAL PARAMETE{\n*   TO AN OUTPUT BUFFER WITH CHARACTERSTRING  'TRUE'  OR  'FALSE'\n*\n*ENTRY POINTS:\n*        IHIOBOOL-FROM GENERATED OBJECT MODULE    LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR  14,15\n*\n*        IHIOBOAR-FROM ARRAY MODULE IHIOBA       LA  2,DATA\n*   DATA PASSED BY NAME                          BALR   14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER-OPEN DATA SET-CHANGE TO NEXT\n*   RECORD\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*   -ERROR: TOO LONG RECORD                 NO.38\n*   BRANCH TO IHIFSA         L 13,IHIFSA\n*                            B FSAERR+XX*4(13)   XX ERROR NO.\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:LINKING TO IHIBOOAR DEVIATES FROM STANDARD\n*   CHARACTER DEPENDENCE:\n*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n*\n         SPACE\nIHIOBOOL CSECT\n*0019015800,016800,018600,024600,028800,039800-041000              0226\n         SPACE\n         SPACE\n*\nENTRY    EQU   15                  ADRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\nFSA      EQU   12                  ADRESS OF FIXED STORAGE AREA\n         SPACE\n         SPACE\n*\n*  OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                   ADRESS OF RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER\nBASE     EQU   7                   BASE REGISTER\nGRA      EQU   2\nGRR      EQU   3\nGRE      EQU   4\nGRK      EQU   8\nGRB      EQU   9\n         SPACE\n*\n*  DATA SET FLAGS  (DSF AND DSF+1 IN DSTAB)\n*\n*\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS2      EQU   X'20'\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS6      EQU   X'02'\nDS7      EQU   X'01'\nDS8      EQU   X'80'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\n*\n*\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n*\n*\n         ENTRY IHIOBOAR\n         SAVE  (14,12)\n         LA    ENTRY,68(0,ENTRY)        BASE=ADRESS OF SAVE AREA   0226\n         LR    BASE,ENTRY\n         LR    FSA,SAVE                 ADRESS OF FIXED STORAGE AREA\n         USING SAVAR,BASE               INTO REGISTER FSA\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\n*\n*  EVALUATE DATA SET NUMBER\n*\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n*\n*  STORE SOURCE ADRESS\n*\n         L     PARAM,4(0,PARAM)\n         ST    PARAM,ASOURCE\n         B     SAVAR+72\n         SPACE\n         SPACE\nIHIOBOAR STM   14,12,12(SAVE)           ENTRY POINT FOR OUTBARRY\n         LA    BASE,26(0,ENTRY)        BASE=ADDRESS OF SAVE AREA\n         USING SAVAR,BASE\n         ST    GRA,ASOURCE\n         ST    SAVE,SAVAR+4\n         LA    SAVE,SAVAR\n         B     SAVAR+72\nSAVAR    DS    18F\n         USING DSTABLE,DSN              DSTABLE DUMMY SECTION FOR ADRES\n         OI    DSF,DS2                  SING IN DSTAB\n         OI    DSF,DS3                  DS2 AND DS3 IS SET TO ONE\n         NI    DSF,X'FE'                DS7 IS SET TO 0\n         SPACE\n         SPACE\n         SPACE\n         TM    DSF,DS0                  TEST IF DATA SET IS OPEN\n         BO    OTBOOL1                  DATA SET IS OPEN\n         OI    DSF,DS6                  DATA SET IS NOT OPEN\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         BALR  RETURN,ENTRY             CALL FOR ROUTINE OPEN\nOTBOOL1  L     GRE,RE\n         L     GRR,R\n         LA    GRR,7(0,GRR)\n         CR    GRE,GRR\n         BNL   OTBOOL2                  SEVEN CHARACTER FREE IN RECORD\n*\n*  NOT PLACE ENOUGH TO STORE BOOLEAN VALUE IN RECORD  FILL CURRENT\n*  RECORD BY BLANKS AND CALL FOR ROUTINE NEXTREC\n*\n          L    GRR,R\n         L     GRE,RE\n         SR    GRE,GRR\n         BZ    OTBOOL7\n         MVI   0(GRR),C' '\n         BCTR  GRE,0\n         BCTR  GRE,0\n         LTR   GRE,GRE\n         BM    OTBOOL7\n         EX    GRE,BLANKS\nOTBOOL7  L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         L     GRR,R\n         LA    GRR,7(0,GRR)\n         C     GRR,RE\n         BH    OERROR                   TOO SHORT RECORD LENGTH\n         OI    DSF,DS3\n         B     OTBOOL2\n         CNOP  0,4\nBLANKS   MVC   1(0,GRR),0(GRR)\n         SPACE\n         SPACE\n         SPACE\nOTBOOL2  L     GRA,ASOURCE\n         SR    GRB,GRB\n         IC    GRB,0(0,GRA)\n         L     GRR,R\n         LTR   GRB,GRB\n         BZ    OTBOOL3\n         MVC   0(7,GRR),TRUE            BOOLEAN VALUE TRUE OR FALSE\n         B     *+10                    TO RECORD WHICH ONE DEPENDING\nOTBOOL3  MVC   0(7,GRR),FALSE           ON VALUE OF SOURCE\n         LA    GRR,7(0,GRR)\n         ST    GRR,R                    UPDATE CHARACTER POINTER\n         SPACE\n*\n*     ROUTINE BLADEL\n*\n         SR    GRK,GRK\n         IC    GRK,K                    NUMBER OF DELIMITERS\nOTBOOL4  C     GRR,RE\n         BE    OTBOOL5                  RECORD END REACHED\n         MVI   0(GRR),C' '              FILL WITH BLANK\n         LA    GRR,1(0,GRR)\n         BCT   GRK,OTBOOL4\n         ST    GRR,R                    UPDATE CHARACTER POINTER\n         B     OTBOOL6\n*\n*       CALL NEXTREC\n*\nOTBOOL5  L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n         SPACE\nOTBOOL6  L     SAVE,SAVAR+4\n         LM    14,12,12(SAVE)\n         BR    RETURN\n*\nOERROR   LR    13,FSA\n         B     FSAERR+38*4(FSA)\n         CNOP  0,4\nASOURCE  DS    A\nTRUE     DC    C'''TRUE'' '\nFALSE    DC    C'''FALSE'''\n         LTORG\n         SPACE\n         SPACE\n         SPACE\n*\n*  PROVIDING A DUMMY SECTION FOR ADRESSING DSTAB\n*\n*\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3                                                   0226\nFAS      DSECT                                                     0226\n         COPY  FSAREA                                              0226\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOIN": {"ttr": 3846, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\xdf\\x00\\xdf\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 223, "newlines": 223, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIOIN,OUTINTEGER'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:TRANSFER NUMBER FROM INTEGER INDICATED BY SECOND\n*   ACTUAL PARAMETER TO OUTPUT BUFFER IN ZONED DECIMAL FORM\n*\n*ENTRY POINTS:\n*        IHIOINTG-FROM GENERATED OBJECT MODULE  LA 1,PARMLIST\n*   DATA PASSED BY NAME                         BALR 14,15\n*\n*        IHIOINAR-FROM ARRAY MODULE IHIOTA      LA 7,DATA\n*   DATA PASSED BY NAME                         BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER-OPEN DATA SET-CHANGE TO NEXT\n*   OUTPUT RECORD -CNVRI,CONVERT REAL TO INTEGER\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*   -ERROR: TOO LONG RECORD                 NO.38\n*   BRANCH TO IHIFSA         L 13,IHIFSA\n*                            B FSAERR+XX*4(13)   XX ERROR NO.\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:LINKING TO IHIOINAR DEVIATES FROM STANDARD\n*   CHARACTER DEPENDENCE:\n*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n*\nIHIOINTE CSECT\n*0019012600,017400,021200,023400,026600,036600,038200-039200       0226\n         SPACE\nENTRY    EQU   15                  ADRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\n         SPACE 2\nFSA      EQU   12                  ADRESS OF FIXED STORAGE AREA\n         SPACE 2\n*        OTHER GENERAL REGISTERS\n         SPACE\nDSN      EQU   5                   RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER\nBASE     EQU   13                  BASE REGISTER FOR THIS ROUTINE\nGRA      EQU   7                   SOURCE ADRESS\nGRR      EQU   2                   CHARACTER POINTER\nGR0      EQU   0                   INTEGER NUMBER\nFR0      EQU   0                   FLOATING POINT NUMBER FOR CONVERSION\nGRRN     EQU   3\nGRK      EQU   4\nEXEC1    EQU   9\n         SPACE 3\n*        DATA SET FLAGS\nDS0      EQU   X'80'\nDS6      EQU   X'02'\nDS3      EQU   X'10'\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n         SPACE 3\n         ENTRY IHIOINTG\n         ENTRY IHIOINAR\nIHIOINAR STM   14,12,12(SAVE)      REGISTERS STORED IN OUTARRAY SAVEAR\n         USING IHIOINAR,ENTRY\n         ST    SAVE,SAVREGOI+4     SAVREGOI=SAVE AREA FOR THIS ROUTINE\n         LA    BASE,SAVREGOI       BASE=SAVE=ADRESS OF SAVREGOI\n         USING SAVREGOI,BASE\n         B     SOUINT+4\n         SPACE 3\nIHIOINTG STM   14,12,12(SAVE)      REGISTERS IN FIXED STORAGE AREA\n         LR    FSA,SAVE            ADRESS OF FIXED STORAGE AREA TO FSA\n         DROP  BASE\n         USING IHIOINTG,ENTRY\n         ST    SAVE,SAVREGOI+4     SAVREGOI=SAVE AREA FOR THIS ROUTINE\n         LA    BASE,SAVREGOI       BASE=SAVE=ADRESS OF SAVREGOI\n         USING SAVREGOI,BASE\n         B     SAVREGOI+72\n         SPACE 2\nSAVREGOI DS    18F\n         SPACE 3\n*        EVALUATE DATA SET NUMBER (EVDSN)\n         SPACE\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\n*        EVALUATE ADRESS OF SOURCE\n*        TEST IF SOURCE NUMBER IS REAL\nSOUINT   L     GRA,4(0,PARAM)      ADRESS OF SOURCE\n         USING DSTABLE,DSN\n         OI    DSF,X'30'           DS2.=DS3.=1\n         NI    DSF,X'FE'           DS7.=0\n         LTR   GRA,GRA\n         BP    INT1\n         SPACE 3\n*        CALL CONVERSION ROUTINE\n         SPACE\n         LE    FR0,0(0,GRA)\n         USING FSAAREA,FSA\n         TM    OPTSW(FSA),X'20'    TEST IF LONG OR SHORT PRECISION\n         BO    *+8                 SHORT PRECISION STATED\n         LD    FR0,0(0,GRA)        LONG PRECISION STATED\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CI(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     *+8\n         SPACE 3\nINT1     L     GR0,0(0,GRA)        NUMBER IN REG0\n         SPACE 2\n*        TEST IF DATA SET IS OPEN\n         SPACE\n         TM    DSF,DS0\n         BO    NOCLO1              DCB IS OPEN\n         OI    DSF,DS6             DS6.=1\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\n*        TEST IF RECORD CAN ACCEPT 11 DIGITS,IF NOT FILL RECORD\n*        WITH BLANKS AND CALL NEXTREC\n*\nNOCLO1   L     GRR,4(0,DSN)        CHARACTER POINTER\n         LA    GRRN,11(0,GRR)\n         C     GRRN,8(0,DSN)\n         BNH   NONR1               BUFFER CAN ACCEPT 11. DIGITS\n         L     EXEC1,RE\n         SR    EXEC1,GRR\n         BC    12,*+16\nBLANKS   MVI   0(GRR),C' '         BLANK IN BUFFER\n         LA    GRR,1(0,GRR)        INCREASE R\n         BCT   EXEC1,BLANKS\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         L     GRR,4(0,DSN)\n         LA    GRRN,11(0,GRR)\n         C     GRRN,8(0,DSN)\n         BH    OINERR                   TOO SHORT RECORD LENGTH\n         OI    DSF,DS3\n         SPACE 3\n*\n*        TEST SOURCE NUMBER AND CONVERT TO DECIMAL\n*\nNONR1    LTR   GR0,GR0\n         BZ    OUTINT0             NUMBER IS ZERO\n         CVD   GR0,BUFF\n         UNPK  1(10,GRR),BUFF+2(6)\n         OI    10(GRR),X'F0'       ZONE INSERTED\n         SPACE 3\nLEAD0    CLI   1(GRR),C'0'\n         BNE   TERMIN0\n         MVI   0(GRR),C' '         LEADING ZERO IS BLANKED\n         LA    GRR,1(0,GRR)\n         B     LEAD0\n         SPACE 3\nTERMIN0  LTR   GR0,GR0\n         BP    *+12\n         MVI   0(GRR),C'-'         SIGN INSERTED\n         B     *+8\n         MVI   0(GRR),C'+'\n         SPACE 3\nTERMIN1  SR    GRK,GRK\n         IC    GRK,K               VALUE OF K IN REGISTER\n         C     GRRN,8(0,DSN)\n         BE    RECEND              RECORD END IS REACHED\n         MVI   0(GRRN),C' '        FILL WITH BLANKS\n         LA    GRRN,1(0,GRRN)\n         BCT   GRK,TERMIN1+6\n         C     GRRN,8(0,DSN)\n         BE    RECEND\n         ST    GRRN,4(0,DSN)\n         L     SAVE,SAVREGOI+4      STORAGE ADRESS\n         LM    14,12,12(SAVE)      RELOAD REGISTERS\n         BR    RETURN\n         SPACE 3\n*        OUTINTEGER NUMBER IS 0\n*\nOUTINT0  MVI   0(GRR),C' '\n         MVC   1(9,GRR),0(GRR)     BLANKS IN BUFFER\n         MVI   10(GRR),C'0'        0. IN BUFFER\n         B     TERMIN1\n         SPACE 3\nRECEND   L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     OUTINT0-10\n*\n*        RECORD LENGTH LESS THAN 11\nOINERR   LR    13,FSA\n         B     FSAERR+38*4(FSA)\n         SPACE 3\nBUFF     DS    1D\n         LTORG\n         SPACE 3\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3\nFSAAREA  DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOST": {"ttr": 3851, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\xaf\\x00\\xaf\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 175, "newlines": 175, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIOST,OUTSTRING'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:TRANSFER STRING DEFINED BY SECOND ACTUAL PARAMETER\n*   TO AN OUTPUT BUFFER\n*\n*ENTRY POINT:\n*        IHIOSTRG-FROM GENERATED OBJECT MODULE    LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER-OPEN DATA SET-CHANGE TO NEXT\n*   OUTPUT RECORD\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n*\n         SPACE 4\nIHIOSTRG CSECT\n*0019015200,018400,023400,026600,028600-029800                     0226\n*\nENTRY    EQU   15                       ADDRESS OF ROUTINE\nRETURN   EQU   14                       RETURN ADDRESS\nSAVE     EQU   13                       ADDRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                        ADDRESS OF PARAMETER LIST\n         SPACE 3\n*\n*  OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                        ADDRESS OF RELEV ENTRY IN DSTAB\nDSNR     EQU   6                       DATA SET NUMBER\nBASE     EQU   8                        BASE REGISTER\nGRA      EQU   2\nGRB      EQU   3\nGRN      EQU   4\nGRR      EQU   9\nGRX      EQU   7\nFSA      EQU   12                       ADDRESS OF FSA\n         SPACE 2\n*\n*  DATA SET  FLAGS  DSF AND DSF+1 IN DSTAB\n*\n*\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS2      EQU   X'20'\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS6      EQU   X'02'\nDS7      EQU   X'01'\nDS8      EQU   X'80'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\n         SPACE 2                                                   0226\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n         SPACE 2                                                   0226\n         SAVE  (14,12)\n         LR    BASE,ENTRY\n         USING IHIOSTRG,BASE\n         ST    SAVE,SAVAR+4\n         LR    FSA,SAVE\n         LA    SAVE,SAVAR\n*\n*  EVALUATE DATA SET NUMBER\n*\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\n*\n*  STORE SOURCE ADDRESS\n*\n         L     PARAM,4(0,PARAM)\n         ST    PARAM,ASTRING\n         USING DSTABLE,DSN\n         OI    DSF,DS2                  DS2=DS3=1  OUTPUT\n         OI    DSF,DS3\n         NI    DSF,X'FE'                DS7=0   NO END OF DATA\n         SPACE 3\n         TM    DSF,DS0                  TEST IF DATA SET IS OPEN\n         BO    OUTSTR1                  DATA SET IS OPEN\n         OI    DSF,DS6                  DATA SET IS NOT OPEN\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         BALR  RETURN,ENTRY             CALL FOR ROUTINE OPEN\n         SPACE 2\nOUTSTR1  L     GRA,ASTRING\n         MVC   STRLTH(2),0(GRA)\n         LH    GRN,STRLTH\n         BCTR  GRN,0\n         BCTR  GRN,0                    REAL STRING LENGTH TO REGISTER\n         LTR   GRN,GRN\n         BZ    OUTSTR3\n         LA    GRA,2(0,GRA)\nOUTSTR4  LR    GRB,GRN\n         OI    DSF,DS3\n         A     GRN,R\n         C     GRN,RE\n         BH    OUTSTR2                  OVERFLOW IN CURRENT RECORD\n         SPACE 3\n         BCTR  GRB,0\n         L     GRR,R\n         EX    GRB,OUTMOV               CONTENT OF STRING TO BUFFER\n         LA    GRB,1(0,GRB)\n         ST    GRN,R\n         C     GRN,RE\n         BNE   OUTSTR3\n         SPACE 2\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY             CURRENT RECORD FILLED\n         SPACE 2\nOUTSTR3  L     SAVE,SAVAR+4\n         RETURN (14,12)\n         SPACE 3\nOUTSTR2  L     GRX,RE               RE-R  AVALIABLE  PLACE IN\n         S     GRX,R                CURRENT RECORD\n         L     GRR,R\n         BCTR  GRX,0\n         EX    GRX,OUTMOV\n         LA    GRX,1(0,GRX)\n         LR    GRN,GRB\n         SR    GRN,GRX\n         AR    GRA,GRX\n         SPACE 2\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 2\n         B     OUTSTR4\n         CNOP  0,8\nOUTMOV   MVC   0(1,GRR),0(GRA)\n         SPACE 4\nSAVAR    DS    18F\nASTRING  DS    A\nSTRLTH   DS    H\n         LTORG\n*\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3                                                   0226\nFAS      DSECT                                                     0226\n         COPY  FSAREA                                              0226\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOSY": {"ttr": 4099, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x9d\\x00\\x9d\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 157, "newlines": 157, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIOSY,OUTSYMBOL'\n*\n*STATUS: CHANGE LEVEL 000\n*FUNCTION/OPERATION:COMPARE NUMBER    ASSIGNED TO THIRD ACTUAL\n*   PARAMETER WITH AN INTERNAL STRING AND TRANSFER CHARACTER\n*   IN CORRESPONDING POSITION TO AN OUTPUT BUFFER\n*\n*ENTRY POINT:\n*        IHIOSYMB - FROM GENERATED OBJECT MODULE   LA 1,PARMLIST\n*   DATA PASSED BY NAME\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR - EVALUATE DATA SET NUMBER - OPEN DATA SET -\n*   CHANGE TO NEXT OUTPUT RECORD\n*\n*EXITS-NORMAL: RELOAD REGISTERS AND BR14\n*    -ERROR : SOURCE DOES NOT MATCH STRING  NO.8\n*   BRANCH TO FSA; LA 13,IHIFSA\n*                  B  FSAERR+XX*4(13)    XX ERROR NO.\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE ASSUME THAT INTERNAL REPRESEN-\n*   TATION OF THE EXTERNAL CHARACTER SET IS EQUIVALENT TO THE ONE\n*   USED AT ALGOL COMPILE TIME\n*\n*\nIHIOSYMB CSECT\n*0010013400,015800,017800,023600,025400-026200                     0226\n         SPACE\nENTRY    EQU   15                  ADRESS OF ROUTINE OUTSYMBOL\nRETURN   EQU   14                  RETURN ADRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\n         SPACE 2\n*        OTHER GENERAL REGISTERS\n         SPACE\nGR0      EQU   0\nFR0      EQU   0\nDSN      EQU   5                   RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER BINARY\nFSA      EQU   12                  ADRESS OF FIXED STORAGE AREA\nSOURCE   EQU   3                   ADRESS OF SOURCE\nGRAS     EQU   4                   ADRESS OF START OF STRING\nBASE     EQU   7                   BASE REGISTER FOR THIS ROUTINE\nGRINT    EQU   8                   INTEGER NUMBER FROM SOURCE\nGRES     EQU   9                   LENGTH OF SOURCE STRING\nGRR      EQU   10                  CHARACTER POINTER\n         SPACE 3\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n*        DATA SET FLAGS\nDS0      EQU   X'80'\n         SPACE 3\n         STM   14,12,12(SAVE)\n         LR    BASE,ENTRY\n         USING IHIOSYMB,BASE\n         ST    SAVE,SAVEOSYM+4     SAVEOSYM=SAVE AREA\n         LR    FSA,SAVE            ADRESS OF FIXED STORAGE AREA TO FSA\n         LA    SAVE,SAVEOSYM\n         SPACE 2\n*        EVALUATE DATA SET NUMBER (EVDSN)\n         SPACE\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         L     GRAS,4(0,PARAM)     ADRESS OF STRING\n         SPACE 2\n*        TEST IF DATA SET IS OPEN\n         SPACE\n         USING DSTABLE,DSN\n         NI    DSF,X'FE'           DS7.=0\n         OI    DSF,X'30'           DS2.=DS3.=1\n         TM    DSF,DS0\n         BO    SOURCE0\n         OI    DSF,X'02'           DS6.=1\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         BALR  RETURN,ENTRY        DCB IS CLOSED\nSOURCE0  L     SOURCE,8(0,PARAM)       ADRESS OF SOURCE\n         LTR   SOURCE,SOURCE           TEST IF CONVERSION\n         BP    EVSOURCE                 NO CONVERSION\n         TM    OPTSW(FSA),X'20'         TEST IF LONG OR SHORT PREC.\n         BO    SOURCE1                  SHORT\n         LD    FR0,0(0,SOURCE)\n         B     SOURCE1+4\nSOURCE1  LE    FR0,0(0,SOURCE)\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CI(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         LR    GRINT,GR0\n         B     EVSOURCE+4\n         SPACE 2\nEVSOURCE L     GRINT,0(0,SOURCE)   SOURCE INTEGER LOADED\n         LTR   GRINT,GRINT\n         BM    ERR8                INTEGER NEGATIV\n         L     GRR,R               CHARACTER POINTER\n         BP    *+12                INTEGER POSITIV\n         MVI   0(GRR),C' '         INTEGER EQUAL ZERO\n         B     TERMIN\n         MVC   HALFW(2),0(GRAS)    LENGTH OF STRING\n         LH    GRES,HALFW\n         LA    GRINT,1(0,GRINT)    INTEGER INCREASED BY ONE\n         BCTR  GRES,0              LENGTH DIMINISHED BY ONE\n         CR    GRINT,GRES\n         BH    ERR8\n         AR    GRINT,GRAS\n         MVC   0(1,GRR),0(GRINT)\n         SPACE 3\nTERMIN   LA    GRR,1(0,GRR)\n         C     GRR,RE\n         BNL   NEXTREC\n         ST    GRR,R\n         LR    SAVE,FSA\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE 3\nNEXTREC  L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     NEXTREC-8\n         SPACE 3\nERR8     LR    13,FSA\n         B     FSAERR+8*4(FSA)          SOURCE DOES NOT MATCH STRING\n         SPACE 3\nSAVEOSYM DS    18F                 SAVE AREA\n         SPACE\nHALFW    DS    1H\n         LTORG\n         SPACE 3\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\nFSAAREA  DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIOTA": {"ttr": 4103, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00b\\x00b\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 98, "newlines": 98, "modlines": 0, "user": "O360-19"}, "text": "    TITLE 'IHIOTA,OUTTARRAY'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:TRANSFER NUMBERS FROM ARRAY INDICATED BY SECOND\n*   ACTUAL PARAMETER TO OUTPUT BUFFER BY CALLING OUTINTEGER REPEATEDLY\n*\n*ENTRY POINT:\n*        IHIOTARR-FROM GENERATED OBJECT MODULE   LA 1,PARMLIST\n*   DATA PASSED BY NAME                          BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER\n*        IHIOIN-OUTINTEGER\n*\n*EXIT-NORMAL:RELOAD REGISTERS AND BR14\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:N/A\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\nIHIOTARR CSECT\nENTRY    EQU   15                       ENTRY ADDRESS\nRETURN   EQU   14                       RETURN ADDRESS\nSAVE     EQU   13                       ADDRESS OF SAVEAREA IN FSA\nPARAM    EQU   1                        ADDRESS OF PARAMETERLIST\n         SPACE 3\n*\n* OTHER GENERAL REGISTERS\n*\nDSN      EQU   5                        RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                        DATA SET NUMBER\nBASE     EQU   8                        BASE REGISTER\nCONV     EQU   3                        CONVERSION FLAG\nGRA      EQU   7                        REGISTER FOR TRANSFER DESTADDR\nGRB      EQU   2                        SCRATCH REGISTER\nFSA      EQU   12                       ADDRESS OF FSA DURING EXECUTION\n         SAVE  (14,12)\n         LR    BASE,ENTRY               IN FSA\n         USING IHIOTARR,BASE\n         LR    FSA,SAVE                 ADDRESS OF FSA\n         LA    SAVE,72(0,SAVE)          ADDRESS OF 2:ND SAVEAREA IN FSA\n*\n         SR    CONV,CONV\n*                                  EVALUATION DATA SET NUMBER\n*\n         L     ENTRY,AEVDSN\n         BALR  RETURN,ENTRY\n         SPACE 2\n*\n*                                  EVALUATE SOURCE ADDRESS\n*\n         L     PARAM,4(0,PARAM)\n         LTR   PARAM,PARAM              TEST 2:ND PARAMETER\n         BC    10,OUTT1                 BRANCH GREATER OR EQUAL 0\n         O     CONV,=X'80000000'        INSERT FLAG BYTE\n         N     PARAM,=X'00FFFFFF'\nOUTT1    L     GRB,12(0,PARAM)          ADDRESS OF DESTEND+1 TO GRB\n         L     GRA,8(0,PARAM)           ADDRESS OF STARTDEST TO GRA\n         AR    GRA,CONV\n         AR    GRB,CONV\n*\n*                                  CALL ROUTINE OUTINTEGER\n*\nOUTT2    L     ENTRY,ARROUTI\n         BALR  RETURN,ENTRY\n         AH    GRA,=H'4'\n         BP    *+16\n         TM    OPTSW(FSA),X'20'\n         BO    *+8\n         AH    GRA,=H'4'\n         CR    GRA,GRB                  INCREASE DESTADDRESS\n         BL    OUTT2                    DESTEND NOT REACHED\n         SPACE 2\n         LR    SAVE,FSA\n         RETURN (14,12)\n*\n*\n*\n         SPACE 3\n*  EXTERNAL ADDRESSES\n*\nAEVDSN   DC    V(IHIIOREV)\nARROUTI  DC    V(IHIOINAR)\n         LTORG\n         EJECT\nFAS      DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHIPTT": {"ttr": 4106, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00M\\x00M\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 77, "newlines": 77, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHIPTT POWER OF TEN TABLE'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:CONSISTS ONLY OF FLOATING POINT CONSTANTS\n*\n*ENTRY POINT:\n*        IHIPTTAB -USED TO ADDRESS DESIRED CONSTANT FROM INREAL AND\n*   OUTREAL LONG\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL ROUTINES:N/A\n*\n*EXITS-NORMAL:N/A\n*     -ERROR :N/A\n*\n*TABLES/WORK AREAS:N/A\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES:CONSTANT IS ADDRESSED IN FOLLOWING WAY   LA 15,IHIPTTAB\n*   DATA PASSED BY VALUE                        MD R1,D2(R2,15)\n*   CHARACTER DEPENDENCE:\n*      THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n         SPACE\n         SPACE\n         SPACE 3\nIHIPTTAB CSECT\n         SPACE\nENTRY    EQU   15                  ADDRESS OF ROUTINE\n         SPACE 2\n*        OTHER GENERAL REGISTERS\n         SPACE\nGREXP    EQU   2                   INDEXREGISTER\nGRE      EQU   3                   INDEXREGISTER\n         SPACE 3\n         DS    1D\n         DC    DE1'1'\n         DC    DE2'1'\n         DC    DE3'1'\n         DC    DE4'1'\n         DC    DE5'1'\n         DC    DE6'1'\n         DC    DE7'1'\n         DC    DE8'1'\n         DC    DE16'1'\n         DC    DE24'1'\n         DC    DE32'1'\n         DC    DE40'1'\n         DC    DE48'1'\n         DC    DE56'1'\n         DC    DE64'1'\n         DC    DE72'1'\n         SPACE 2\n         DC    DE-1'1'\n         DC    DE-2'1'\n         DC    DE-3'1'\n         DC    DE-4'1'\n         DC    DE-5'1'\n         DC    DE-6'1'\n         DC    DE-7'1'\n         DC    DE-8'1'\n         DC    DE-16'1'\n         DC    DE-24'1'\n         DC    DE-32'1'\n         DC    DE-40'1'\n         DC    DE-48'1'\n         DC    DE-56'1'\n         DC    DE-64'1'\n         DC    DE-72'1'\n         LTORG\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISAT": {"ttr": 4109, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00q\\x00q\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 113, "newlines": 113, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISAT, ATAN ROUTINE, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: 1. REDUCE THE CASE TO THE 1ST OCTANT BY USING    *\n*                       ATAN(-X)=-ATAN(X), ATAN(1/X)=PI/2-ATAN(X)     *\n*                    2. REDUCE FURTHER TO THE CASE /X/ LESS THAN      *\n*                       TAN(PI/2) BY                                  *\n*                       ATAN(X)=PI/6+ATAN((X*SQRT3-1)/(X+SQRT3)       *\n*                    3. FOR THE BASIC RANGE (X LESS THAN TAN(PI/12)), *\n*                       USE A FRACTIONAL APPROXIMATION.               *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHISAT - ATAN FUNCTION, SHORT             LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: N/A                                                      *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHISATAN CSECT\n       ENTRY   IHISAT                  ENTRY-POINT IDENTIFIER\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTERS\nFR4    EQU     4\nFR6    EQU     6\n         EJECT\n       DC      CL7'IHISAT'             ENTRY POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\nIHISAT STM     GRR,GRL,12(GRS)         SAVE REGISTERS\n       L       GR1,0(GRA)\n       LE      FR0,0(GR1)      OBTAIN ARGUMENT\n       STE     FR0,SIGN          SAVE ARG FOR SIGN CONTROL\n       LPER    FR0,FR0             AND SET SIGN POSITIVE\n       SR      GR1,GR1         GR1 TO DENOTE THE SECTION TO WHICH\n       CE      FR0,ONE           ANSWER BELONGS.   BREAK POINTS ARE\n       BC      12,REDUC            TAN(PI/12), TAN(PI/4), TAN(5PI/12)\n       LE      FR2,ONE         IF ARG GREATER THAN 1, TAKE INVERSE\n       DER     FR2,FR0           AND CRANK GR1 BY 8\n       LER     FR0,FR2\n       LA      GR1,8\n       SPACE\nREDUC  CE      FR0,TAN15       IF ARG GREATER THAN TAN(PI/12), REDUCE\n       BC      12,OK             THE ARG BY USING\n       LER     FR2,FR0\n       ME      FR0,RT3M1         ATAN(X) = PI/6+ATAN(Y)\n       SE      FR0,ONE             WHERE Y = (X*SQRT3-1)/(X+SQRT3)\n       AER     FR0,FR2\n       AE      FR2,RT3           COMPUTE X*SQRT3-1 AS X(SQRT3-1)-1+X\n       DER     FR0,FR2             TO PROTECT SIGNIFICANT DIGITS\n       LA      GR1,4(GR1)        CRANK GR1 BY 4\n       SPACE\nOK     LER     FR4,FR0         NOW MAGNITUDE OF REDUCED ARG IS\n       MER     FR0,FR0           LESS THAN TAN(PI/12)=0.26795\n       LER     FR2,FR0\n       ME      FR0,C           COMPUTE ANGLE BY\n       LER     FR6,FR0\n       AE      FR2,A             ATAN(X)/X = D-C*XSQ+B/(XSQ+A)\n       LE      FR0,B\n       DER     FR0,FR2\n       SER     FR0,FR6\n       AE      FR0,D\n       MER     FR0,FR4\n       SPACE\n       C       GR1,EIGHT       DEPENDING ON THE SECTION TO WHICH\n       BC      4,*+6             THE ANSWER BELONGS, ADD OR SUBTRACT\n       LCER    FR0,FR0             REDUCED ANSWER FROM A BASE ANGLE\n       AE      FR0,ZERO(GR1)\n       TM      SIGN,X'80'      SIGN OF ANS SHOULD AGREE WITH SIGN\n       BC      8,*+6             OF ARG\n       LCER    FR0,FR0\n       SPACE\n       MVI     12(GRS),X'FF'   RETURN\n       BCR     15,GRR\n       SPACE\nSIGN   DS      F\nONE    DC      X'41100000'\nTAN15  DC      X'40449851'     TAN 15 DEGREES\nRT3M1  DC      X'40BB67AF'     SQRT3-1\nRT3    DC      X'411BB67B'     SQRT3\nEIGHT  DC      F'8'\nA      DC      X'41168A5E'     1.4087812\nB      DC      X'408F239C'     0.55913709\nC      DC      X'3FD35F49'     0.051604543\nD      DC      X'409A6524'     0.60310579\nZERO   DC      F'0'\n       DC      X'40860A92'     PI/6\n       DC      X'411921FB'     PI/2\n       DC      X'4110C152'     PI/3\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISEX": {"ttr": 4112, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x8a\\x00\\x8a\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 138, "newlines": 138, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISEX, EXPONENTIAL FUNCTION, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: Y = X*LOG2(E) = 4R-S-T, WHERE R AND S ARE        *\n*   INTEGERS, T FRACTION AND BOTH S AND T ARE NON-NEGATIVE. THEN      *\n*   E**X = 2**Y = (16**R)(2**-S)N2**-T)                               *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHISEX - EXP FUNCTION, SHORT              LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ARGUMENT NOT POSITIVE GO TO ERROR OUTINE VIA          *\n*        B     FSAERR+25*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHISEXPT CSECT\n*C023600,023700                                                  A39993\n       ENTRY   IHISEX\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGR2    EQU     2\nGR3    EQU     3\nGR4    EQU     4\nGR5    EQU     5\nGR6    EQU     6\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\n         EJECT\n       DC      CL7'IHISEX'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\nIHISEX STM     GRR,GR6,12(GRS)         SAVE REGISTERS\n       L       GR1,0(GRA)\n       LE      FR0,0(GR1)      OBTAIN ARGUMENT\n       CE      FR0,MAX\n       BC      2,ERROR         IF TOO BIG, ERROR\n       CE      FR0,MIN\n       BC      2,OK1\n       SER     FR0,FR0         IF VERY SMALL, GIVE 0 AS ANSWER\n       BC      15,EXIT\n       SPACE\nOK1    L       GR1,0(GR1)      PICK UP ARGUMENT AGAIN\n       SLDL    GR0,8\n       N       GR0,MASK        =X'0000007F' CHARACTERISTIC OF X\n       CH      GR0,SMALL       =X'0039'\n       BC      2,OK2\n       LE      FR0,ONE         IF ABS. VALUE OF X LESS THAN 2**-28 GIVE\n       BC      15,EXIT           1 AS ANSW.  THIS AVOIDS SHIFT TROUBLE\n       SPACE\nOK2    SRL     GR1,1           NORMAL CASE  MANTISSA OF X IN GR1, B0\n       SLL     GR0,2\n       LCR     GR2,GR0         -4*CHARACTERISTIC\n       M       GR0,LOG2E       LOG E BASE 2 IN B1.  PRODUCT IN B2\n       SRDL    GR0,287(GR2)    B33  /R/ IN GR0, /S+T/ IN GR1\n       LTER    FR0,FR0\n       BC      12,OK3          IF X NON-POSITIVE, JUMP\n       X       GR0,ALLF        IF X POSITIVE, -R = -R(R'+1) IN GR0,\n       X       GR1,ALLF          S+T = 4-(S'+T') IN GR1\n       SPACE\nOK3    SLL     GR0,24\n       LR      GR2,GR0         SAVE -R IN GR2  B7.  CHAR MODIFIER\n       SLDL    GR0,2           S IN GR0 LOW, T IN GR1 HIGH\n       LR      GR3,GR0         SAVE S IN GR3, FOR SHIFT COUNT\n       SRL     GR1,4           T                    (B3)\n       LR      GR6,GR1         SAVE T       IN GR6  (B3)\n       MR      GR0,GR1         T*T                  (B7)\n       LR      GR5,GR0\n       M       GR4,C           C*T*T        IN GR4  (B4)\n       A       GR0,A\n       LR      GR5,GR0         A+T*T        IN GR5  (B7)\n       L       GR0,B\n       DR      GR0,GR5         B/(A+T*T)    IN GR1  (B3)\n       SR      GR1,GR6\n       SRL     GR1,1           -T+B/(A+T*T) IN GR1  (B4)\n       A       GR1,D\n       AR      GR1,GR4         C*T*T+D-T+B/(A+T*T)  (B4)\n       LR      GR4,GR6\n       SRL     GR4,2           2*T                  (B6)\n       DR      GR4,GR1         2*T/(C*T*T+D-T+B/(A+T*T))   (B1)\n       A       GR5,FXONE       2**(-T) NOW READY IN  B1\n       SRL     GR5,0(GR3)      (2**-S)(2**-T) READY (B1)\n       A       GR5,FUDGE       ROUND AND\n       C       GR5,FXONE         FLOAT THIS NUMBER\n       BC      4,OK4\n       L       GR5,ONE\n       BC      15,JOIN\n       SPACE\nOK4    SRL     GR5,6\n       O       GR5,FXONE       BASE CHARACTERISTIC\nJOIN   SR      GR5,GR2         ADJUST CHARACTERISTIC WITH -R\n       ST      GR5,BUFF\n       LE      FR0,BUFF\n       SPACE\nEXIT   LM      GR2,GR6,28(GRS) RETURN\n       MVI     12(GRS),X'FF'\n       BCR     15,GRR\n       SPACE\nERROR    L     GRS,4(GRS)               RESTORE FSA ADDRESS      A32992\n         B     FSAERR+24*4(GRS)         PARAM GREATER 174.673    A32992\n       SPACE\nFSAERR   EQU   X'1CC'\nMAX    DC      X'42AEAC4F'     174.673\nMIN    DC      X'C2B437E0'    -180.218\nONE    DC      X'41100000'\nMASK   DC      X'0000007F'\nLOG2E  DC      X'5C551D95'     LOG E BASE 2    B1\nALLF   DC      X'FFFFFFFF'\nA      DC      X'576AE119'     87.4174972      B7\nB      DC      X'269F8E6B'     617.972269      B11\nC      DC      X'B9059003'     -0.034657359    B-4\nD      DC      X'B05CFCE3'     -9.95459578     B4\nFXONE  DC      X'40000000'     1. B1  ALSO BASE CHARACTERISTIC\nFUDGE  DC      X'00000020'\nBUFF   DS      F\n       DS      0H\nSMALL  DC      X'0039'\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISLO": {"ttr": 4355, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00m\\x00m\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 109, "newlines": 109, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISLO, LOGARITHMIC FUNCTION, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: WRITE X = M*16**P, M MANTISSA. PICK A BASE VALUE *\n*   A DEPENDING ON SIZE OF M, WRITE Z = (M-A)/(M+A). THEN             *\n*   LOG(X) = P*LOG(16) + LOG(A) + LOG((1+Z)/(1-Z))                    *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHISLO - LOG FUNCTION, SHORT              LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ARGUMENT NOT POSITIVE GO TO ERROR OUTINE VIA          *\n*        B     FSAERR+25*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHISLOGM CSECT\n       ENTRY   IHISLO\n       SPACE\nGR0    EQU     0             SCRATCH REGISTERS\nGR1    EQU     1\nGRA    EQU     1             ARGUMENT POINTER\nGR14   EQU     14\nGRS    EQU     13            SAVE AREA POINTER\nGRR    EQU     14            RETURN REGISTER\nGRL    EQU     15            LINK REGISTER\nFR0    EQU     0             ANSWER REGISTER\nFR2    EQU     2             SCRATCH REGISTER\n         EJECT\n       DC      CL7'IHISLO'             ENTRY-POINT IDENTIFIER\n       DC      X'06'\n       USING   *,GRL\n       SPACE\nIHISLO STM     GRR,GRL,12(GRS)         NATURAL LOG ENTRY\n       L       GR1,0(GRA)\n       L       GR0,0(GR1)      OBTAIN ARGUMENT\n       LTR     GR0,GR0\n       BC      12,ERROR        IF ARG 0 OR NEGATIVE, ERROR\n       SRDL    GR0,24\n       SRL     GR1,8\n       ST      GR1,ARG         STORE MANTISSA M ALONE\n       OI      ARG,X'40'           AND FLOAT IT\n       SLL     GR0,2           4*CHAR IN GR0\n       STH     GR0,IPART+2       SAVE THIS IN FLOAT FORM\n       SR      GR14,GR14               SET GR14 TO O,4 OR 8 AND DEFINE\n       SRL     GR1,21            A TO BE 1, 1/4, OR 1/16, IF M IS IN\n       IC      GR14,TABLE(GR1)      (1/2,1),(2/8,1/2),OR  IN (J/16,1/8)\n       LE      FR0,ARG         OBTAIN  Z = (M-A)/(M+A)\n       LER     FR2,FR0\n       SE      FR0,ONE(GR14)\n       AE      FR2,ONE(GR14)          POSSIBLY ONLY 21 SIGNIF BPTS HERE\n       DER     FR0,FR2\n       STE     FR0,ARG         Z READY.   STORE IT AT ARG\n       MER     FR0,FR0         Z**2\n       LE      FR2,C4          COMPUTE LOG((1+Z)/(1-Z)) USING\n       MER     FR2,FR0           CHEBYSHEV INTERPOLATION POLYNOMIAL\n       AE      FR2,C3\n       MER     FR2,FR0\n       AE      FR2,C2\n       MER     FR2,FR0\n       AE      FR2,C1\n       MER     FR2,FR0\n       LE      FR0,ARG\n       MER     FR2,FR0\n       AER     FR2,FR0\n       AER     FR2,FR0\n       LE      FR0,IPART       4*(P+64)\n       SRL     GR14,1                  0,2 OR 4 = - LOG(A) BASE 2\n       LA      GR14,256(GR14)          4*64-LOG2(A)\n       STH     GR14,IPART+2            STORE THIS AND FLOAT IT\n       SE      FR0,IPART       4*P+LOG2(A)\n       ME      FR0,LOGE2\n       ADR     FR0,FR2         NATURAL LOG READY\n       SPACE\n       L       GR14,12(GRS)    RETURN\n       MVI     12(GRS),X'FF'\n       BCR     15,GRR\n       SPACE\n       SPACE\nERROR    B     FSAERR+25*4(13)     PARAMETER ZERO OR NEGATIVE\nFSAERR   EQU   X'1CC'\nARG    DS      F\nIPART  DC      X'46000000'\nTABLE  DC      X'0804040400000000'\nONE    DC      X'41100000'   1     FOLLOWING 3 CONSTANTS MUST\n       DC      X'40400000'   1/4       BE CONSECUTIVE\n       DC      X'40100000'   1/16\nLOGE2  DC      X'40B17219'   LOG(2) BASE E + FUDGE 1\nC4     DC      X'4048157B'   0.28157778\nC3     DC      X'4047973F'   0.27965158\nC2     DC      X'40667685'   0.40024595\nC1     DC      X'40AAAA71'   0.66666322\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISOR": {"ttr": 4358, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x01I\\x01I\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 329, "newlines": 329, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISOR,OUTREAL SHORT'\n*\n*STATUS:CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:CONVERT BINARY ARITHMETIC VALUE,FROM SECOND\n*   ACTUAL PARAMETER,TO ZONED DECIMAL FORM AND TRANSFER TO AN OUTPUT\n*   BUFFER\n*\n*ENTRY POINTS:\n*        IHISOREL-FROM GENERATED OBJECT MODULE  LA 1,PARMLIST\n*   DATA PASSED BY NAME                         BALR 14,15\n*\n*        IHISORAR-FROM ARRAY MODUL IHIOAR       LA 7,DATA\n*   DATA PASSED BY NAME                         BALR 14,15\n*\n*INPUT:N/A\n*\n*OUTPUT:N/A\n*\n*EXTERNAL -ROUTINES:\n*        IHIIOR-EVALUATE DATA SET NUMBER - OPEN DATA SET -\n*   CHANGE TO NEXT OUTPUT RECORD\n*        IHIFSA-CNVIR-CONVERT INTEGER TO REAL SHORT\n*\n*EXITS-NORMAL:RELOAD REGISTERS AND BR14\n*   -ERROR: TOO LONG RECORD                 NO.38\n*   BRANCH TO IHIFSA         L 13,IHIFSA\n*                            B FSAERR+XX*4(13)   XX ERROR NO.\n*\n*TABLES:PTTAB-POWER OF TEN TABLE,SHORT PREC\n*\n*\n*ATTRIBUTES:SERIALLY REUSABLE\n*\n*NOTES: LINKING TO IHISORAR DEVIATE FROM STANDARD\n*   CHARACTER DEPENDENCE:\n*   THE OPERATION OF THIS MODULE DEPENDS UPON AN INTERNAL\n*   REPRESENTATION OF THE EXTERNAL CHARACTER SET WHICH IS EQUIVALENT\n*   TO THE ONE USED AT ASSEMBLY TIME\n*\n         SPACE 3\nIHISOREA CSECT\n*0010013400,019200,024800,027400,047800,050400-051400              0226\n         SPACE\nENTRY    EQU   15                  ADRESS OF ROUTINE\nRETURN   EQU   14                  RETURN ADRESS\nSAVE     EQU   13                  ADRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                   ADRESS OF PARAMETER LIST\n         SPACE 2\n         SPACE\nFSA      EQU   12                  ADRESS OF FIXED STORAAGE AREA\n         SPACE 2\n*        OTHER GENERAL REGISTERS\n         SPACE\nDSN      EQU   5                   RELEVANT ENTRY IN DSTAB\nDSNR     EQU   6                   DATA SET NUMBER BINARY\nBASE     EQU   13                  BASE REGISTER FOR THIS ROUTINE\nGRA      EQU   7                   SOURCE ADRESS\nGRR      EQU   4                   CHARACTER POINTER\nFR0      EQU   0                   FLOATING-POINT NUMBER\nGRK      EQU   8                   BLANKCOUNTER\nGREXP    EQU   2                   EXPONENT GREATER EIGHT\nGRE      EQU   3                   EXPONENT LESS EIGHT\nGRDE     EQU   9                   DECIMAL EXPONENT\nEXEC     EQU   8                   BLANKCOUNTER\nPOWTEN   EQU   10                  REGISTER FOR ADRESSING POWERTENTABLE\n*\n*   DISPLACEMENTS IN ADRLST IN IHIFSA                              0226\nCI       EQU   0             DISPLACEMENT FOR: IHIIORCI            0226\nCL       EQU   4                               IHIIORCL            0226\nEV       EQU   8                               IHIIOREV            0226\nNX       EQU   12                              IHIIORNX            0226\nOP       EQU   16                              IHIIOROP            0226\nOQ       EQU   20                              IHIIOROQ            0226\n         SPACE 3\n*        DATA SET FLAGS\nDS0      EQU   X'80'\nDS6      EQU   X'02'\nDS3      EQU   X'10'\n         SPACE 3\n         ENTRY IHISOREL\n         ENTRY IHISORAR\nIHISORAR STM   14,12,12(SAVE)      REGISTERS STORED IN OUTARRAY SAVEAR\n         USING IHISORAR,ENTRY\n         ST    SAVE,SAVREGOR+4     SAVREGOR=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREGOR       BASE=SAVE=ADRESS OF SAVREGOR\n         USING SAVREGOR,BASE\n         B     SOUFLP+4\n         SPACE 3\nIHISOREL STM   14,12,12(SAVE)      REGISTERS IN FIXED STORAGE AREA\n         LR    FSA,SAVE            ADRESS OF FIXED STORAGE AREA TO FSA\n         DROP  BASE\n         USING IHISOREL,ENTRY\n         ST    SAVE,SAVREGOR+4     SAVREGOR=SAVE AREA THIS ROUTINE\n         LA    BASE,SAVREGOR       BASE=SAVE=ADRESS OF SAVREGOR\n         USING SAVREGOR,BASE\n         B     SAVREGOR+72\n         SPACE 2\nSAVREGOR DS    18F\n         SPACE 3\n*        EVALUATE DATA SET NUMBER (EVDSN)\n         SPACE\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\nSOUFLP   L     GRA,4(0,PARAM)      ADRESS OF SOURCE\n         USING DSTABLE,DSN\n         OI    DSF,X'30'           DS2.=DS3.=1\n         NI    DSF,X'FE'           DS7.=0\n         LTR   GRA,GRA\n         BP    REAL1\n         SPACE 3\n*        CALL CONVERSION ROUTINE (LOADED IN FSA)\n         SPACE\n         STM   14,13,8(SAVE)       ALL REGISTERS INTO SAVREGOR\n         LR    2,SAVE              ADDRESS OF SAVREGOR TO REG2\n         L     14,0(0,GRA)         INTEGER INTO REGISTER 14\n         LA    7,ACNVIRD(FSA)\n         LR    13,FSA              ADRESS OF FSA TO REG 13\n         BALR  8,7\n         LM    14,13,8(2)          ALL REGISTERS RESET\n         B     *+8                 NUMBER IN FR0 AFTER CONVERSION\n         SPACE 3\nREAL1    LE    FR0,0(0,GRA)        NUMBER IN FR0\n         SPACE 2\n*        TEST IF DATA SET IS OPEN\n         SPACE\n         TM    DSF,DS0\n         BO    NOCLO               DCB IS OPEN\n         OI    DSF,DS6             DS6.=1\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OP(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         SPACE 3\nNOCLO    L     GRR,R               CHARACTER POINTER\n         LA    EXEC,13(0,GRR)\n         C     EXEC,RE\n         BNH   NONEXREC            BUFFER CAN ACCEPT 13. DIGITS\n         L     EXEC,RE\n         SR    EXEC,GRR\n         BC    12,*+16\nBLANKS   MVI   0(GRR),C' '         BLANK IN BUFFER\n         LA    GRR,1(0,GRR)        INCREASE R\n         BCT   EXEC,BLANKS\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         L     GRR,R\n         LA    EXEC,13(0,GRR)\n         C     EXEC,RE\n         BH    ORSERR\n         OI    DSF,DS3\n         SPACE 3\nNONEXREC LA    GRDE,7\n         LTER  FR0,FR0\n         BC    6,NOT0\n         MVI   0(GRR),C' '         NUMBER IS ZERO\n         MVC   1(12,GRR),0(GRR)\n         MVI   1(GRR),C'0'\n         B     TERMIN\n         SPACE 3\nNOT0     MVI   0(GRR),C'+'         ZONE IS INSERTED\n         BP    *+10\n         MVI   0(GRR),C'-'\n         LCER  FR0,FR0\n         SPACE 3\nEXPLOOP  STE   FR0,CHAR\n         SR    GRE,GRE\n         IC    GRE,CHAR\n         MVI   SE,X'00'\n         S     GRE,SEV0\n         BP    *+14\n         BZ    EXP0                EXPONENT.=70\n         MVI   SE,X'80'\n         LCR   GRE,GRE\n         MH    GRE,LOG2\n         AH    GRE,ROUND\n         SRL   GRE,14\n         C     GRE,SEV0\n         BNH   *+8\n         L     GRE,SEV0            EXPONENT.=70\n         TM    SE,X'80'\n         LA    POWTEN,PTTAB-4      ADRESS OF POWTEN\n         BZ    *+10\n         SR    GRDE,GRE\n         B     *+10\n         LA    POWTEN,64(0,POWTEN)\n         AR    GRDE,GRE\n         LR    GREXP,GRE\n         SR    GRE,GRE             CLEAR REGISTER\n         SRDA  GREXP,3\n         SLA   GREXP,3\n         SPACE 3\nTESTEXP1 BZ    EXP1LS8\n         C     GREXP,SEVTWO\n         BL    EXP1LS8-8           EXPONENT NEGATIV\n         ME    FR0,64(0,POWTEN)\n         S     GREXP,SEVTWO\n         B     TESTEXP1\n         SPACE 3\n         SRL   GREXP,1\n         ME    FR0,28(GREXP,POWTEN)\nEXP1LS8  SRL   GRE,27              EXPONENT MULTIPLIED FOUR\n         LTR   GRE,GRE\n         BC    8,EXPLOOP\n         ME    FR0,0(GRE,POWTEN)\n         B     EXPLOOP\n         SPACE 3\nEXP0     CE    FR0,TENP7\n         BNL   DIG8                NUMBER GE 10**7\n         MVI   CHAR,X'00'\n         L     GRE,CHAR\n         CVD   GRE,BUFF            INTEGER CONVERTED\n         UNPK  1(9,GRR),BUFF+3(5)\n         OI    9(GRR),X'F0'\n         CLI   2(GRR),C'0'         LEADING ZERO\n         BNE   *+12\n         BCTR  GRDE,0\n         MVC   2(7,GRR),3(GRR)\n         MVC   1(1,GRR),2(GRR)\n         MVI   2(GRR),C'.'         DECIMAL POINT INSERTED\n         MVI   9(GRR),C''''        APOSTROPHE INSERTED\n         SPACE 3\nDECEXP   CVD   GRDE,BUFF\n         UNPK  10(3,GRR),BUFF+6(2)\n         LTR   GRDE,GRDE\n         BC    10,*+12\n         MVI   10(GRR),C'-'        EXPONENT SIGN IS NEGATIV\n         B     *+8\n         MVI   10(GRR),C'+'\n         OI    12(GRR),X'F0'       ZONE INSERTED EXPONENT\n         SPACE 3\nTERMIN   LA    GRR,13(0,GRR)\n         SR    GRK,GRK\n         IC    GRK,K\n         C     GRR,RE\n         BE    RECEND\n         MVI   0(GRR),C' '\n         LA    GRR,1(0,GRR)\n         BCT   GRK,TERMIN+10\n         C     GRR,RE\n         BE    RECEND\n         ST    GRR,R\n         L     SAVE,SAVREGOR+4\n         LM    14,12,12(SAVE)\n         BR    RETURN\n         SPACE 3\nRECEND   L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     RECEND-10\n         SPACE 3\nDIG8     AU    FR0,FIVE\n         STE   FR0,CHAR\n         CE    FR0,TWOP24B\n         BL    EXP0+8\n         MVC   1(9,GRR),TWOP24     NUMBER GE 10**7\n         B     DECEXP\n*\nORSERR   LR    13,FSA\n         B     FSAERR+38*4(FSA)\nACNVIRD  EQU   X'120'\n         SPACE 3\n*        INTERNAL CONSTANTS AND STORAGE\n         SPACE 2\nSEVTWO   DC    F'72'\nSEV0     DC    F'70'\nLOG2     DC    H'19728'\nROUND    DC    H'8192'\nTENP7    DC    X'46989680'\nFIVE     DC    X'46000005'\nTWOP24B  DC    X'47100000'\nTWOP24   DC    C'1.677722'''\nSE       DS    1C\nCHAR     DS    1E\nBUFF     DS    1D\n         SPACE 3\nPTTAB    DC    EE1'1'\n         DC    EE2'1'\n         DC    EE3'1'\n         DC    EE4'1'\n         DC    EE5'1'\n         DC    EE6'1'\n         DC    EE7'1'\n         DC    EE8'1'\n          DC   EE16'1'\n         DC    EE24'1'\n         DC    EE32'1'\n         DC    EE40'1'\n         DC    EE48'1'\n         DC    EE56'1'\n         DC    EE64'1'\n         DC    EE72'1'\n         DC    EE-1'1'\n         DC    EE-2'1'\n         DC    EE-3'1'\n         DC    EE-4'1'\n         DC    EE-5'1'\n         DC    EE-6'1'\n         DC    EE-7'1'\n         DC    EE-8'1'\n         DC    EE-16'1'\n         DC    EE-24'1'\n         DC    EE-32'1'\n         DC    EE-40'1'\n         DC    EE-48'1'\n         DC    EE-56'1'\n         DC    EE-64'1'\n         DC    EE-72'1'\n         LTORG\n         SPACE 3\nDSTABLE  DSECT\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n         SPACE 3                                                   0226\nFAS      DSECT                                                     0226\n         COPY  FSAREA                                              0226\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISSC": {"ttr": 4364, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00\\x80\\x00\\x80\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 128, "newlines": 128, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISSC, SINE/COSINE ROUTINE, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: 1. DIVIDE MAGNITUDE OF ARG BY PI/4 TO FIND       *\n*                       OCTANT AND FRACTION.                          *\n*                    2. IF COSINE ADD 2 TO OCTANT NUMBER, IF SINE     *\n*                       FOR NEGATIVE ARG, ADD 4 TO OCTANT NUMBER.     *\n*                    3. COMPUTE SINE OR COSINE OF FRACTION*PI/4       *\n*                       DEPENDING ON THE OCTANT.                      *\n*                    4. IF OCTANT NUMBER IS FOR LOWER PLANE MAKE      *\n*                       SIGN MINUS.                                   *\n*                                                                     *\n*ENTRY POINTS:                                                        *\n*        IHISSCC - COSINE FUNCTION, SHORT          LA  1,PARMLIST     *\n*        IHISSCS - SINE FUNCTION, SHORT            BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ABS(ARG) NOTLESS THAN PI*2**18 GO TO ERROR ROUTINE VIA*\n*        B     FSAERR+26*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHISSCSN CSECT\n       ENTRY   IHISSCC\n       ENTRY   IHISSCS\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTERS\nFR4    EQU     4\n         EJECT\n       DC      CL7'IHISSCC'            ENTRY-POINT IDENTIFIER\n       DC      X'07'\n       USING   *,GRL\nIHISSCC  STM   GRR,GRL,12(GRS)         COSINE ENTRY ,SAVE REGISTERS\n       MVI     CRANK+3,X'02'     FOR COSINE, OCTANT CRANK IS 2\n       L       GR1,0(GRA)          COS(X) = SIN(PI/2+X)\n       LA      GRL,IHISSCS-IHISSCC(GRL)  ADJUST BASE REGISTER\n       USING   IHISSCS,GRL             AND JOIN MAIN CIRCUIT\n       BC      15,MERGE\n       SPACE\n       DC      CL7'IHISSCS'            ENTRY-POINT IDENTIFIER\n       DC      X'07'\nIHISSCS  STM   GRR,GRL,12(GRS)         SINE ENTRY , SAVE REGISTERS\n       MVI     CRANK+3,X'00'     FOR SINE, OCTANT CRANK IS 0 IF +ARG\n       L       GR1,0(GRA)                  OCTANT CRANK IS 4 IF -ARG\n       TM      0(GR1),X'80'        SIN(-X) = SIN(PI+X)\n       BC      8,*+8\n       MVI     CRANK+3,X'04'\nMERGE  SDR     FR0,FR0         CLEAR FR0 DOUBLE\n       SDR     FR2,FR2         CLEAR FR2 DOUBLE\n       LE      FR0,0(GR1)      OBTAIN ARGUMENT\n       LPER    FR0,FR0         CONSIDER ARGUMENT TO BE POSITIVE\n       CE      FR0,MAX\n       BC      10,ERROR        ERROR IF /X/ GRT THAN OR = PI*2**18\n       MD      FR0,FOVPI       MULTIPLY BY 4/PI (LONG FORM)\n       CE      FR0,ONE\n       BC      4,SMALL         IF PRODUCT LESS THAN 1, JUMP\n       AW      FR0,CH46        GIVE PROD CHAR OF 46, UNNORMALIZED\n       LER     FR2,FR0         INTEGER PART OF PROD TO FR2, UNNORM.\n       SDR     FR0,FR2         FRACTION PART OF PROD TO FR0, NORM.\nSMALL  AU      FR2,CRANK       ADD OCTANT CRANK TO FR2, UNNORM.\n       STE     FR2,OCTNT       SAVE IT.   LAST 3BITS ARE MODIF. OCTANT\n       TM      OCTNT+3,X'01'   IF ODD OCTANT, TAKE COMPLEMENT\n       BC      8,EVEN            OF FRACTION TO OBTAIN THE MODIFIED\n       SE      FR0,ONE             FRACTION R\n       LPER    FR0,FR0\nEVEN   SR      GR1,GR1         GR1 = 0 FOR COSINE POLYNOMIAL\n       TM      OCTNT+3,X'03'     THIS IS FOR OCTANT 2,3,6, OR 7\n       BC      4,*+8           IF OCTANT 1,4,5, OR 8, USE SINE\n       LA      GR1,4             POLYNOMIAL.   GR1 = 4\n       LER     FR4,FR0\n       MER     FR0,FR0         COMPUTE SIN OR COS OF MODIFIED\n       LER     FR2,FR0           FRACTION USING PROPER CHEBYSHEV\n       ME      FR0,C3(GR1)         INTERPOLATION POLYNOMIAL\n       AE      FR0,C2(GR1)\n       MER     FR0,FR2\n       AE      FR0,C1(GR1)\n       MER     FR0,FR2\n       AE      FR0,C0(GR1)     SIN(R)/R  OR COS(R) READY\n       LTR     GR1,GR1\n       BC      8,*+6\n       MER     FR0,FR4         IF SINE POLYNOMIAL, MULTIPLY R\n       TM      OCTNT+3,X'04'\n       BC      8,*+6           IF MODIFIED OCTANT IS IN\n       LNER    FR0,FR0           LOWER PLANE, SIGN IS NEGATIVE\n       MVI     12(GRS),X'FF'   RETURN\n       BCR     15,GRR\n       SPACE\nERROR    B     FSAERR+26*4(13)\n       SPACE\nFSAERR   EQU   X'1CC'\n       DS      0D\nFOVPI  DC      X'41145F306DC9C830'\nCH46   DC      X'4600000000000000'\nCRANK  DC      X'46000000'\nMAX    DC      X'45C90FDB'\nC3     DC      X'BE14E5E0'   -0.00031888   C3\n       DC      X'BD25B368'   -0.00003595   S3\nC2     DC      X'3F40EBD6'    0.01584991   C2\n       DC      X'3EA32F62'    0.00249001   S2\nC1     DC      X'C04EF4E5'   -0.30842425   C1 + FUDGE 1\n       DC      X'C014ABBC'   -0.08074543   S1\nC0     DC      X'41100000'    1.0          C0\n       DC      X'40C90FDB'    0.78539816   S0\nONE    EQU     C0\nOCTNT  DS      F\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISSQ": {"ttr": 4611, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x00f\\x00f\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 102, "newlines": 102, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISSQ, SQUARE ROOT ROUTINE, SHORT PRECISION'\n*STATUS: CHANGE LEVEL 000                                             *\n*                                                                     *\n*FUNCTION/OPERATION: WRITE X = M*16**(2P-Q), M MANTISSA, Q=0 OR 1,    *\n*   THEN SQRT(X) = SQRT(M*16**-Q)*16**P                               *\n*                                                                     *\n*ENTRY POINT:                                                         *\n*        IHISSQ - SQRT FUNCTION, SHORT             LA  1,PARMLIST     *\n*                                                  BALR 14,15         *\n*                                                  DATA PASSED BY NAME*\n*   THE MODULE IS ENTERED FROM THE GENERATED OBJECT MODULE.           *\n*                                                                     *\n*INPUT: N/A                                                           *\n*                                                                     *\n*OUTPUT: N/A                                                          *\n*                                                                     *\n*EXTERNAL ROUTINES: N/A                                               *\n*                                                                     *\n*EXIT-NORMAL: RETURN BY MEANS OF   BR  14.  RESULT IN FPR0.           *\n*                                                                     *\n*EXIT-ERROR: IF ARGUMENT NEGATIVE GO TO ERROR ROUTINE VIA             *\n*        B     FSAERR+23*4(13)                                        *\n*                                                                     *\n*TABLES/WORKAREAS: N/A                                                *\n*                                                                     *\n*ATTRIBUTES: THE MODULE IS SERIALLY REUSABLE.                         *\n*                                                                     *\n*NOTES: CHARACTER CODE DEPENDENCE                                     *\n*   THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL       *\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET.            *\n       SPACE\nIHISSQRT CSECT\n       ENTRY   IHISSQ\n       SPACE\nGR0    EQU     0               SCRATCH REGISTERS\nGR1    EQU     1\nGR2    EQU     14\nGRA    EQU     1               ARGUMENT POINTER\nGRS    EQU     13              SAVE AREA POINTER\nGRR    EQU     14              RETURN REGISTER\nGRL    EQU     15              LINK REGISTER\n       SPACE\nFR0    EQU     0               ANSWER REGISTER\nFR2    EQU     2               SCRATCH REGISTERS\nFR4    EQU     4\n         EJECT\n       DC      CL7'IHISSQ'             ENTRY-POINT IOENTIFIER\n       DC      X'06'\n       USING   *,GRL\nIHISSQ STM     GRR,GRL,12(GRS)         SAVE REGISTERS\n       L       GR1,0(GRA)\n       L       GR0,0(GR1)      OBTAIN ARGUMENT\n       LE      FR4,0(GR1)\n       LTR     GR0,GR0\n       BC      8,ZRANS         IF ARG IS 0, ANSWER IS 0\n       BC      4,ERROR         IF NEGATIVE ARG, ERROR\n       AL      GR0,BIAS        ADD X'41' TO CHAR\n       SRDL    GR0,25\n       SLL     GR0,24          CHAR OF ANSWER IS READY\n       LR      GR2,GR0           KEEP IT IN GR2\n       LTR     GR1,GR1         SIGN BIT OF GR1 = 1-Q\n       BC      4,*+8\n       A       GR2,FOUR        IF Q=1, ADD 4 (B31) TO GR2 FOR INDEXING\n       SRL     GR1,3           SCALE 1+M (Q=0) OR M (Q=1) TO B3\n       A       GR1,C(GR2)      OBTAIN 1ST APPROXIMATION BY A HYPERBOLIC\n       L       GR0,B(GR2)        FIT OF THE RESPECTIVE INTERVAL.\n       DR      GR0,GR1           IF Q=1, INTERPRET M AS M/16 (B-1)\n       A       GR1,A(GR2)\n       AR      GR1,GR2         ADD ON CHAR TO COMPLETE 1ST APPROX\n       ST      GR1,BUFF\n       SPACE\n       LER     FR0,FR4         GIVE 2 PASSES OF NEWTON-RAPHSON\n       DE      FR0,BUFF          ITERATION\n       AE      FR0,BUFF\n       HER     FR0,FR0\n       DER     FR4,FR0\n       SER     FR4,FR0          Y2 =(Y1+X/Y1)/2 = (X/Y1-Y1)/2+Y1\n       HER     FR4,FR4            USE THE LATTER TO PROTECT LAST DIGIT\n       AER     FR0,FR4\nFIN    L       GR2,12(GRS)\n       MVI     12(GRS),X'FF'\n       BCR     15,GRR          RETURN\n       SPACE\nZRANS  SER     FR0,FR0\n       BC      15,FIN\n       SPACE\nERROR    SLL   GR0,1\n         LTR   GR0,GR0            TEST IF NEGATIV ZERO\n         BZ    ZRANS\n         B     FSAERR+23*4(13)     NEGATIV PARAMETER\n       SPACE\nFSAERR   EQU   X'1CC'\nBUFF   DS      F\nBIAS   DC      X'41000000'\nFOUR   DC      F'4'\nA      DC      X'01CE9FE0'    1.8071270   A0 (B7)\n       DC      X'006DC57C'    0.4287950   A1 (B7) MINUS 4 (B31)\nB      DC      X'FFE6C37D'   -1.5772732   B0 (B11)\n       DC      X'FFFA82EB'   -0.0214398   B1 (B7)\nC      DC      X'FF44546F'    0.95418214  C0 (B3) MINUS 1 (B3)\n       DC      X'0E0A7419'    0.0548470   C1 (B-1)\n       END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "IHISYS": {"ttr": 4614, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x01/\\x00\\x98\\x01/\\x16\\x19\\x03>\\x03>\\x00\\x00\\xd6\\xf3\\xf6\\xf0`\\xf1\\xf9@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-01-12T00:00:00", "modifydate": "1998-01-12T16:19:00", "lines": 830, "newlines": 830, "modlines": 0, "user": "O360-19"}, "text": " TITLE 'IHISYS,SYSACT'\n*\n*STATUS: CHANGE LEVEL 000\n*\n*FUNCTION/OPERATION:CONSISTS OF 15 ROUTINES WITH DIFFERENT ACTIONS\n*   ON DATA SET WHICH DEPENDING ON SECOND PARAMETER IN SYSACT\n*\n*ENTRY POINTS:\n*        IHISYSCT-FROM GENERATED OBJECT MODULE    LA 1,PARMLIST\n*   DATA PASSED BY NAME                           BALR 14,15\n*\n*INPUT:SYSACT4  READS TWO RECORDS AFTER REPOSITIONING\n*\n*OUTPUT: N/A\n*\n*EXTERNAL ROUTINES:\n*        IHIIOR -EVALUATE DATA SET NUMBER-OPEN DATA SET -CHANGE TO NEXT\n*   RECORD-CLOSE DATA SET-CONVERT REAL TO INTEGER\n*\n*EXITS-NORMAL: RELOAD REGISTERS AND BR14\n*     -ERROR :DATA SET NUMBER OUT OF RANGE             NO.0\n*   INCOMPATIBLE ACTIONS ON SAME DATA SET              NO.2\n* INPUT REQUEST BEYOND END OF DATA SET            NO.5\n*   UNDEFINED FUNCTION NUMBER                          NO.9\n*   DATA SET CLOSED                                    NO.10\n*   DATA SET OPEN                                      NO.11\n*   QUANTITY IN SYSACT PROCEDURE MUST BE A VARIABLE    NO.12\n*   QUANTITY IN SYSACT PROCEDURE OUT OF RANGE          NO.13\n*   BACKWARD REPOSITIONING NOT DEFINED                 NO.14\n*   BRANCH TO IHIFSA      L 13,IHIFSA\n*                         B FSAERR+XX*4(13)       XX  ERROR NO.\n*\n*TABLES/WORK AREAS: N/A\n*\n*ATTRIBUTES: SERIALLY REUSABLE\n*\n*NOTES:THE OPERATION OF THIS MODULE DOES NOT DEPEND UPON A SPECIAL\n*   INTERNAL REPRESENTATION OF THE EXTERNAL CHARACTER SET\n*\n*\n*\n*\nIHISYSCT CSECT\n*2210039660-039730,041030-041090,049400,050410-050520,060020       0221\n*2210060030-060035,105900,124000,125500-125750                     0221\n*2210103400                                                        0222\n*2210018600,022400,039800,040000,043000,043200,060100,060110       0226\n*2210060290,060320,061600,061650,062760,062800,063320,063500       0226\n*2210065200,065300,106000,107800,119200,119400,122200,122400       0226\n*2210125000,125200,132600,132800,141200-142600                     0226\n*CH091400                                                        A32998\n*\n*\n*\nENTRY    EQU   15                       ADDRESS OF ROUTINE SYSACT\nRETURN   EQU   14                       ADDRESS OF CALLING ROUTINE\nSAVE     EQU   13                       ADDRESS OF SAVE AREA IN FSA\nPARAM    EQU   1                        ADDRESS OF PARAMETER LIST\n*\n*        OTHER GENERAL REGISTER\n*\nDCB      EQU   8                        ADDRESS OF DATA CONTROL BLOCK\nFSA      EQU   12                       ADDRESS OF FIXED STORAGE AREA\nDSN      EQU   5                       ENTRY IN DSTAB\nDSNR     EQU   6                        DATA SET NUMBER\nBASE     EQU   7\nGR0      EQU   0\nGR1      EQU   1\nGRA      EQU   2\nGRB      EQU   3\nQUAN     EQU   4\nVARQ     EQU   9\nNTE      EQU   10\nGRNL     EQU   10\nGR       EQU   11\n*\n*        FLOATING POINT REGISTER\n*\nFR0      EQU   0\n*                                                                  0226\n*  DISPLACEMENTS IN ADRLST IN IHIFSA                               0226\n*                                                                  0226\nCI       EQU   0            DISPLACEMENT FOR :  IHIIORCI           0226\nCL       EQU   4                                IHIIORCL           0226\nEV       EQU   8                                IHIIOREV           0226\nNX       EQU   12                               IHIIORNX           0226\nOP       EQU   16                               IHIIOROP           0226\nOQ       EQU   20                               IHIIOROQ           0226\n*\n*\n*   DATA SET FLAGS DSF IN DSTAB\n*\nDS0      EQU   X'80'\nDS1      EQU   X'40'\nDS2      EQU   X'20'\nDS3      EQU   X'10'\nDS4      EQU   X'08'\nDS5      EQU   X'04'\nDS6      EQU   X'02'\nDS7      EQU   X'01'\nDS8      EQU   X'80'\nDS9      EQU   X'40'\nDS10     EQU   X'20'\n         SAVE  (14,12)\n         LR    FSA,SAVE                 ADRESS OF FIXED STORAGE AREA   X\n                                        TO REGISTER FSA\n         LR    BASE,ENTRY               DEFINE AND LOAD BASEREGISTER\n         USING IHISYSCT,BASE\n         ST    SAVE,SAVEAR+4\n         LA    SAVE,SAVEAR\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,EV(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n*\n*  EVALUATE DATA SET NUMBER IN REGISTER DSNR, ENTRY TO DSTAB IN\n*  REGISTER DSN\n*\n         USING DSTABLE,DSN\n*\n*  EVALUATE SECOND PARAMETER FUNCTION\n*\n*\n         L     GRA,4(0,PARAM)\n         LTR   GRA,GRA\n         BC    10,SYS1\n         TM    OPTSW(FSA),X'20'         CONVERSION TO INTEGER TEST PRE.\n         BO    SYS11                    SHORT\n         LD    FR0,0(0,GRA)             LONG\n         B     SYS11+4\nSYS11    LE    FR0,0(0,GRA)\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CI(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\n         B     *+8\nSYS1     L     GR0,0(0,GRA)\n         LR    GRA,GR0\n         N     GR0,RANGEFUN\n         BC    4,SYSERR9                FUNCTION OUT OF RANGE\n         LTR   GRA,GRA\n         BZ    SYSERR9                  FUNCTION OUT OF RANGE\n         SLA   GRA,2\n         L     GRB,SYS(GRA)\n*\n*  EVALUATE THIRD PARAMETER QUANTITY\n*\n*\n         SR    VARQ,VARQ\n         L     GRA,8(0,PARAM)\n         SLL   GRA,1\n         LTR   GRA,GRA\n         BM    *+8\n         LA    VARQ,1(0,VARQ)           QUANTITY IS A VARIABLE\n         SRL   GRA,1\n         N     GRA,=X'00FFFFFF'\n         L     QUAN,0(0,GRA)\n*\n*  ADRESS TO ACTUAL SYSACT ROUTINE IN REGISTER GRB\n*\n*  ADRESS TO QUANTITY IN REGISTER GRA QUANTITY IN REG QUAN\n*\n*  REGISTER VARQ EQUAL ONE IF QUANTITY IS A VARIABLE ZERO ELSE\n*\n*\n         BR    GRB\n         SPACE\nRETSYS   L     SAVE,SAVEAR+4\n         RETURN (14,12)\n         SPACE\nSYSERR9  LR    13,FSA                   UNDEFINED FUNCTION NUMBER ERR9\n         B     FSAERR+9*4(FSA)\n*                                                                  0226\n*        BRANCH TO NEXTREC IN IHIIOR                               0226\n*                                                                  0226\nNXREC    L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,NX(ENTRY)                                     0226\n         BR    ENTRY                                               0226\n         EJECT                                                     0226\n*\n*  ROUTINE SYSACT1    QUANTITY.=R\n*\n*\n         SPACE\n         SPACE\n         SPACE\nSYSACT1  TM    DSF,DS0\n         BO    SYS1T1\nSYSCLOSD LR    13,FSA                   DATA SET IS CLOSED ERROR 10\n         B     FSAERR+10*4(FSA)\nSYS1T1   LTR   VARQ,VARQ\n         BP    SYS1T2\nSYSCONST LR    13,FSA                   QUANTITY SHOULD BE A VARIABLE\n         B     FSAERR+12*4(FSA)         ERROR12\nSYS1T2   L     QUAN,R\n         S     QUAN,RE\n         AH    QUAN,P\n         LA    QUAN,1(0,QUAN)\n         ST    QUAN,0(0,GRA)\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT2     R.=QUANTITY\n*\n*\nSYSACT2  LTR   QUAN,QUAN\n         BP    *+8\n         B     SYS2T1\n         CH    QUAN,P\n         BNH   SYS2T1+6\nSYS2T1   LR    13,FSA\n         B     FSAERR+13*4(FSA)         QUANTITY OUT OF RANGE ERROR13\n         SPACE\n         SPACE\n         TM    DSF,DS0\n         BZ    SYSCLOSD                 DATA SET IS CLOSED\n         LR    GRB,QUAN\n         A     GRB,RE\n         SH    GRB,P\n         BCTR  GRB,0\n         S     GRB,R\n         BP    SYS2T2\n*\n*  NEW CHARACTER POINTER LESS OR EQUAL R\n*\n         TM    DSF,DS2\n         BO    SYS2T3\n         TM    DSF+1,DS10          IS D.S. OPENED BY SYSACT 12     0221\n         BO    SYS2T30                                             0221\n         TM    DSF,DS7             HAS EOD BEEN REACHED            0221\n         BO    SYSEOD                                              0221\n         BAL   RETURN,NXREC    LAST I/O PROCEDURE WAS INPUT        0226\n         TM    DSF,DS7             IS END OF DATA REACHED          0213\n         BZ    *+10                                                0213\n         LR    GRB,QUAN            IS QUANTITY = 1                 0213\n         BCT   GRB,SYSEOD          NO INPUT REQUEST BEYOND E.O.D.  0213\n         A     QUAN,RE\n         SH    QUAN,P              ASSIGN A NEW VALUE TO CHARACTER\n         BCTR  QUAN,0\n         ST    QUAN,R\n         B     RETSYS\nSYS2T30  LTR   DSNR,DSNR           IS DATA SET NR = 0              0221\n         BZ    SYSINCOM                                            0213\n         OI    DSF,DS2                                             0213\n*\n*  LAST I/O PROCEDURE WAS OUTPUT\n*\nSYS2T3   L     GRB,RE\n         S     GRB,R\n         BZ    SYS2T31\n         LA    ENTRY,SYBLANK            FILL RECORD WITH BLANKS\n         BALR  RETURN,ENTRY\nSYS2T31  BAL   RETURN,NXREC                                        0226\n         SPACE\n         SPACE\n         SPACE\n         LR    GRB,QUAN\n         BCTR  GRB,0\n         LTR   GRB,GRB\n         BZ    SYS2T32\n         OI    DSF,DS3                                             0213\n         LA    ENTRY,SYBLANK            FILL RECORD WITH BLANKS\n         BALR  RETURN,ENTRY\nSYS2T32  L     GR,R\n         AR    QUAN,GR\n         BCTR  QUAN,0                   CHARACTER POINTER\n         ST    QUAN,R                   QUANTITY+R-1 ASSIGN TO R\n         B     RETSYS\n*\n*  NEW CHARACTER POINTER GREATER THAN R\n*\n*\nSYS2T2   TM    DSF,DS2\n         BO    SYS2T20                                             0221\n         TM    DSF+1,DS10          HAS DS BEEN OPENED BY SYSACT 12 0221\n         BZ    SYS2T5                                              0213\n         LTR   DSNR,DSNR           IS DATA SET NR = 0              0221\n         BZ    SYSINCOM                                            0221\n         OI    DSF,DS2                                             0221\nSYS2T20  LR    GRB,QUAN                 LAST I/O WAS OUTPUT        0221\n         A     GRB,RE\n         S     GRB,R\n         OI    DSF,DS3                                             0213\n         SH    GRB,P\n         BCTR  GRB,0\n         LA    ENTRY,SYBLANK            FILL RECORD WITH BLANKS\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\nSYS2T5   TM    DSF,DS7             HAS EOD BEEN REACHED            0221\n         BO    SYSEOD                                              0221\nSYS2T4   A     QUAN,RE                                             0221\n         SH    QUAN,P              ASSIGN NEW VALUE TO CHAR POINTER\n         BCTR  QUAN,0\n         ST    QUAN,R\n         B     RETSYS\n         SPACE\n         SPACE\n         SPACE\n         EJECT\n*\n*  ROUTINE SYSACT3        QUANTITY.=S\n*\n*\nSYSACT3  TM    DSF,DS0\n         BZ    SYSCLOSD                 DATA SET CLOSED ERROR10\n         SPACE\n         SPACE\n         LTR   VARQ,VARQ\n         BZ    SYSCONST                 QUANTITY IS NOT A VARIABLE     X\n                                        ERROR12\n         LH    QUAN,S\n         ST    QUAN,0(0,GRA)\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT4  UNDEFINED IF DATA SET SPLIT INTO SECTION BY SYSACT8\n*  OR IF THE DATA SET IS 0 OR 1                                    0206\n*\n*  ACTION AFTER INPUT:  S.=QUANTITY R.=1\n*  ACTION AFTER OUTPUT: S.=QUANTITY R.=1  IF FORWARD SKIPPING FILL\n*\n*  SKIPPED RECORDS BY BLANKS\n*\nSYSACT4  L     DCB,ADCB                                            0206\n         LTR   QUAN,QUAN           TEST QUANTITY                   0206\n         BP    SYS4T01                                             0206\n         LR    13,FSA                                              0206\n         B     FSAERR+13*4(FSA)    QUANTITY OUT OF RANGE           0206\nSYS4T01  TM    DSF+1,DS9           IS DATA SET SECTIONED           0206\n         BO    SYSINCOM                                            0206\n         LTR   GRA,DSNR            IS DATA SET NO = 1 OR 0         0206\n         BZ    SYSINCOM                                            0206\n         BCT   GRA,SYS4T0                                          0206\n         B     SYSINCOM                                            0206\nSYS4T0   TM    DSF,DS0             IS DATA SET OPEN                0206\n         BZ    SYSCLOSD                                            0206\n         CH    QUAN,S              IS QUANTITY  > S                0206\n         BL    SYS4T2              NO LESS                         0206\n         BE    SYS4T3              NO EQUAL                        0206\nSYS4T1   TM    DSF,DS2             WAS LAST I/O OUTPUT             0206\n         BO    SYS4T15             YES BRANCH TO SYS4T15           0206\n         SPACE\n*  LAST I/O INPUT AND QUANTITY > S                                 0206\n         TM    DSF+1,DS10          HAS DS BEEN OPENED BY SYSACT 12 0221\n         BZ    SYS4T12                                             0206\n         OI    DSF,DS2             DATA SET OPEN FOR OUTPUT        0206\n         B     SYS4T15                                             0206\nSYS4T12  LA    ENTRY,SYSNOT        IS QUANTITY IN NOTTAB           0206\n         BALR  RETURN,ENTRY                                        0206\n         TM    DSF,DS7             HAS EOD BEEN REACHED            0221\n         BO    SYSEOD                                              0221\n         LTR   GRB,GRB                                             0206\n         BP    SYS4T21             YES BRANCH TO SYS4T21           0206\nSYS4T13  TM    DSF,DS7             HAS END OF DATA BEEM REACHED    0206\n         BO    SYSEOD                                              0206\n         BAL   RETURN,NXREC        GET NEXT RECORD                 0226\n         CH    QUAN,S              IS QUANTITY = S                 0206\n         BNE   SYS4T13                                             0206\n         B     RETSYS                                              0206\n         SPACE                                                     0206\n* LAST I/O OUTPUT AND QUANTITY > S                                 0206\nSYS4T15  L     GRB,RE              FILL RECORD WITH BLANKS         0206\n         S     GRB,R                                               0206\n         BZ    SYS4T14                                             0206\n         LA    ENTRY,SYBLANK                                       0206\n         BALR  RETURN,ENTRY                                        0206\nSYS4T14  BAL   RETURN,NXREC                                        0226\n         CH    QUAN,S              IS QUANTITY = S                 0206\n         BNE   SYS4T15                                             0206\n         B     RETSYS                                              0206\nSYS4T2   LA    ENTRY,SYSNOT        IS QUANTITY IN NOTTAB           0206\n         BALR  RETURN,ENTRY                                        0206\n         LTR   GRB,GRB                                             0206\n         BZ    SYSERR14            NO BACKWARD REP. NOT DEFINED    0206\n         TM    DSF,DS2             WAS LAST I/O OUTPUT             0206\n         BO    SYS4T24                                             0206\n         SPACE                                                     0206\n* LAST I/O INPUT AND QUANTITY < S                                  0206\n         OI    DSF,DS5             DS5=1                           0206\n         NI    DSF,X'FC'           DS6=DS7=0                       0206\nSYS4T21  OI    DSF+1,DS8           DS8=1                           0206\n         USING SYSD,DCB                                            0206\n         CHECK SYDECB                                              0206\n         NI    DSF+1,X'7F'         DS8=0                           0206\nSYS4T22  LR    GR0,NTE                                             0206\n         LR    1,DCB                                               0206\n         POINT (1),(0)                                             0206\n         L     GRA,NBB                                             0206\n         READ  SYDECB,SF,(DCB),(GRA),MF=E                          0206\n         L     GRA,BB                                              0206\n         AH    GRA,BL                                              0206\n         ST    GRA,RE                                              0206\n         LR    GRA,QUAN                                            0206\n         BCTR  GRA,0                                               0206\n         STH   GRA,S               S = QUANTITY - 1                0206\n         BAL   RETURN,NXREC                                        0226\n         TM    DSF,DS1             IS DATA SET BLOCKED             0206\n         BO    RETSYS                                              0206\n         SR    GRA,GRA             YES EVALUATE NUMBER OF FIRST    0206\n         L     GRB,BL              RECORD IN THE BLOCK=            0206\n         SRL   GRB,16              ENTIER((QUANTITY-1)/(BLKLTH/    0206\n         L     GR1,S               RECLNTH))*(BLKLNTH/RECLNTH)+1   0206\n         SLL   GR1,16                                              0206\n         SRL   GR1,16                                              0206\n         DR    GRA,GR1                                             0206\n         LR    GR1,GRB                                             0206\n         SR    GRA,GRA                                             0206\n         LR    GRB,QUAN                                            0206\n         BCTR  GRB,0                                               0206\n         DR    GRA,GR1                                             0206\n         MR    GRA,GR1                                             0206\n         LA    GRB,1(GRB)                                          0206\n         STH   GRB,S                                               0206\nSYS4T23  CH    QUAN,S              IS QUANTITY = S                 0206\n         BE    RETSYS                                              0206\n         BAL   RETURN,NXREC                                        0226\n         B     SYS4T23                                             0206\n         SPACE                                                     0206\n* LAST I/O WAS OUTPUT AND QUANTITY < S                             0206\nSYS4T24  TM    DSF,DS1             IS DATA SET BLOCKED             0206\n         BO    SYS4T25                                             0206\n         L     GRB,BB                                              0206\n         AH    GRB,BL                                              0206\n         ST    GRB,RE                                              0206\nSYS4T25  L     GRB,RE              FILL BLOCK WITH BLANKS          0206\n         S     GRB,R                                               0206\n         BZ    SYS4T26                                             0206\n         LA    ENTRY,SYBLANK                                       0206\n         BALR  RETURN,ENTRY                                        0206\nSYS4T26  BAL   RETURN,NXREC                                        0226\nSYS4T27  CHECK SYDECB                                              0206\n         CLOSE ((DCB),LEAVE),TYPE=T  SET END OF DATA MARK          0206\n         OI    DSF,DS5                                             0206\n         NI    DSF,X'DD'           DS2=DS6=0                       0206\n         B     SYS4T22             WAS LAST I/O OUTPUT             0206\nSYS4T3   TM    DSF,DS2                                             0206\n         BZ    SYS4T31                                             0206\n         SPACE                                                     0206\n*  LAST I/O OUTPUT AND QUANTITY = S                                0206\n         OI    DSF,DS4                                             0206\n         L     GRB,BB                                              0206\n         AH    GRB,BL                                              0206\n         ST    GRB,RE                                              0206\n         S     GRB,R               FILL BLOCK WITH BLANKS          0206\n         BZ    SYS4T33                                             0206\n         LA    ENTRY,SYBLANK                                       0206\n         BALR  RETURN,ENTRY                                        0206\nSYS4T33  BAL   RETURN,NXREC        WRITE BLOCK                     0226\n         LA    ENTRY,SYSNOT        MAKE NOTTAB ENTRY               0206\n         BALR  RETURN,ENTRY                                        0206\n         B     SYS4T27                                             0206\n         SPACE                                                     0206\n* LAST I/O INPUT AND QUANTITY = S                                  0206\nSYS4T31  L     GRA,RE                                              0206\n         SH    GRA,P                                               0206\n         ST    GRA,R               RESET CHARACTER POINTER         0206\n         B     RETSYS                                              0206\nSYSEOD   LR    13,FSA                                              0206\n         B     FSAERR+5*4(FSA)                                     0206\n*\n*  SCAN NOTTAB IN ORDER TO FIND OUT IF AN ENTRY HAS BEEN MADE FOR\n*  QUANTITY  IF YES GRB IS SET TO ONE,ADRESS OF NOTEADR IN REG NTE\n*\nSYSNOT   L     GRB,ANOTTAB(FSA)\n         LR    NTE,GRB\nSYSNOT1  C     NTE,0(0,GRB)\n         BE    SYSNOT2\n         LA    NTE,8(0,NTE)\n         LR    GRA,DSNR\n         CH    GRA,0(0,NTE)\n         BNE   SYSNOT1\n         CH    QUAN,2(0,NTE)\n         BNE   SYSNOT1\n         SR    GRB,GRB\n         LA    GRB,1(0,GRB)\n         LA    NTE,4(0,NTE)\n         BR    RETURN\nSYSNOT2  SR    GRB,GRB\n         BR    RETURN\n         SPACE\n         SPACE\nSYSERR14 LR    13,FSA                   BACKWARD REPOSITIONING NOT\n         B     FSAERR+14*4(FSA)         DEFINED\n         EJECT\n*\n*  ROUTINE SYSACT5   QUANTITY.=P\n*\n*\nSYSACT5  TM    DSF,DS0\n         BZ    SYSCLOSD                 DATA SET CLOSED ERROR10\n         SPACE\n         SPACE\n         LTR   VARQ,VARQ\n         BZ    SYSCONST                 QUANTITY IS NOT A VARIABLE     X\n                                        ERROR12\n         LH    QUAN,P\n         ST    QUAN,0(0,GRA)\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT6    P.=QUANTITY  DATA SET HAS TO BE CLOSED\n*\n*\nSYSACT6  TM    DSF,DS0\n         BO    SYSOPEN\n         LTR   QUAN,QUAN                TEST QUANTITY\n         BC    12,SYSQOUTR              MINUS OR ZERO\n         C     QUAN,=F'32760'\n         BH    SYSQOUTR                 TOO GREAT\n         STH   QUAN,P\n         B     RETSYS\n         SPACE\n         SPACE\nSYSOPEN  LR    13,FSA                   DATA SET IS OPEN ERROR 11\n         B     FSAERR+11*4(FSA)\n         EJECT\n*\n*  ROUTINE SYSACT7    QUANTITY.=Q\n*\n*\nSYSACT7  LTR   VARQ,VARQ\n         BZ    SYSCONST            QUANTITY IS NOT A VARIABLE ERROR12\n         SPACE\n         SR    QUAN,QUAN\n         IC    QUAN,Q\n         ST    QUAN,0(0,GRA)\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT8     Q.=QUANTITY DATA SET HAS TO BE CLOSED\n*  ASSIGNING A VALUE TO Q\n*\nSYSACT8  TM    DSF,DS0\n         BO    SYSOPEN                  DATA SET IS OPEN ERROR11\n         LTR   DSNR,DSNR                IS IT DATA SET 0         A32998\n         BZ    SYSINCOM            YES INCOMPATIBLE ACTION         0206\n         LTR GRB,QUAN                   TEST QUANTITY\n         BC    12,SYSQOUTR              MINUS OR ZERO\n         S     GRB,TWO56\n         BP    SYSQOUTR\n         BZ    SYSQOUTR\n         SPACE\n         STC   QUAN,Q\n         OI    DSF+1,DS9                RECORD CONTAIN CTLCHARACTER\n         B     RETSYS\n         SPACE\nSYSDSN0  LR    13,FSA                   DATA SET NUMBER OUT OF RENGE\n         B     FSAERR(FSA)\n         SPACE\n         SPACE\nSYSQOUTR LR    13,FSA                   QUANTITY OUT OF RANGE ERROR 13\n         B     FSAERR+13*4(FSA)\n         SPACE\n         SPACE\nTWO56    DC    F'256'\n         EJECT\n*\n*  ROUTINE  SYSACT9     QUANTITY.=K\n*\n*\nSYSACT9  LTR   VARQ,VARQ\n         BZ    SYSCONST            QUANTITY IS NOT A VARIABLE ERROR12\n         SR    QUAN,QUAN\n         IC    QUAN,K\n         ST    QUAN,0(0,GRA)\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT10   K.=QUANTITY  I.E ASSIGN NUMBER OF BLANK DELIMTERS\n*\n*\nSYSACT10 LTR   QUAN,QUAN                TEST QUANTITY\n         BC    12,SYSQOUTR              MINUS OR ZERO\n         C     QUAN,TWO56\n         BNL   SYSQOUTR                 TOO GREAT\n         STC   QUAN,K\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT11  ASSIGN VALUE TO QUANTITY FOR DEFINING IF\n*  DATA SET OPEN OR CLOSED\n*\nSYSACT11 LTR   VARQ,VARQ\n         BZ    SYSCONST            QUANTITY IS NOT A VARIABLE ERROR12\n         SPACE\n         SR    QUAN,QUAN\n         TM    DSF,DS0\n         BZ    SYS11T1             DATA SET IS CLOSED\n         SPACE\n         LA    QUAN,1(0,QUAN)\n         TM    DSF,DS7\n         BO    SYS11T2                 DS7 EQUAL 1                 0222\n         TM    DSF,DS2                                             0222\n         BO    SYS11T1                 OUTPUT                      0222\n         TM    DSF,DS1                                             0222\n         BO    SYS11T1                 UNBLOCKED                   0222\n         L     GR,R                                                0222\n         L     GR1,RE                                              0222\n         SH     GR1,P                                              0222\n         CR    GR1,GR                                              0222\n         BNE   SYS11T1                 R NOT EQUAL RE MINUS P      0222\n         L     GR1,BB                                              0222\n         AH    GR1,BL                                              0222\n         SR    GR1,GR                                              0222\nSYS11T3  CLI   0(GR),C' '                                          0222\n         BNE   SYS11T1                 CHARACTER NOT BLANK         0222\n         LA    GR,1(GR)                                            0222\n         BCT   GR1,SYS11T3                                         0222\n         L     DCB,ADCB                                            0222\n         CHECK SYDECB                                              0222\n         TM    DSF,DS7                                             0222\n         BZ    SYS11T1             NO END OF DATA\nSYS11T2  LNR   QUAN,QUAN                                           0222\nSYS11T1  ST    QUAN,0(0,GRA)\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT12  OPEN  OR CLOSE DATA SET\n*\n*\nSYSACT12 LTR   QUAN,QUAN\n         BZ    SYS12T1\n         BCT   QUAN,SYSQOUTR            QUANTITY OUT OF RANGE\n         TM    DSF,DS0             ROUTINE SHOULD PERFORM OPEN\n         BO    SYS12T2                  DATA SET WAS OPEN ALREADY\n         OI    DSF+1,DS10          DS10=1 DS OPENED BY SYSACT 12   0221\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,OQ(ENTRY)     OPEN DATA SET                   0221\n         BALR  RETURN,ENTRY\n         B     RETSYS                                              0206\n         SPACE\nSYS12T1  TM    DSF,DS0             ROUTINE SHOULD PERFORM CLOSE\n         BZ    SYS12T2                  DATA SET WAS CLOSED ALREADY\n         L     ENTRY,IORLST(FSA)                                   0226\n         L     ENTRY,CL(ENTRY)                                     0226\n         BALR  RETURN,ENTRY\nSYS12T2  B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT 13  QUANTITY.=S  AND SETTING DS4 FLAG USED BY A LATER\n*  SYSACT4 FOR AN ENTRY TO NOTTAB\n*\nSYSACT13 TM    DSF,DS0\n         BZ    SYSCLOSD                 DATA SET IS CLOSED ERROR10\n         TM    DSF+1,DS9           IS DATA SET SECTIONED           0206\n         BO    SYSINCOM            YES INCOMPATIBLE ACTION         0206\n         LTR   GRB,DSNR            IS DATA SET NO = 1 OR 0         0206\n         BZ    SYSINCOM                                            0206\n         BCT   GRB,SYS13T1                                         0206\n         SPACE\n         SPACE\nSYSINCOM LR    13,FSA                   INCOMPATIBLE ACTION ON THE SAME\n         B     FSAERR+2*4(FSA)     DATA SET                        0206\n         SPACE\n         SPACE\nSYS13T1  LTR   VARQ,VARQ\n         BZ    SYSCONST                 QUANTITY IS NOT A VARIABL      X\n                                        ERROR12\n         LH    QUAN,S\n         ST    QUAN,0(0,GRA)\n         SPACE\n         SPACE\n         OI    DSF,DS4                  SET FLAG DS4\n         B     RETSYS\n         EJECT\n*\n*  ROUTINE SYSACT14  SKIPS RECORDS OR FILLS THEM BY BLANKS,DEPENDING\n*  ON THE LAST I/O PROCEDURE\n*\nSYSACT14 LTR   QUAN,QUAN\n         BC    12,SYSQOUTR        QUANTITY OUT OF RANGE ERROR13\n         TM    DSF,DS0\n         BZ    SYSCLOSD\nSYS14T1  AH    QUAN,S\n         TM    Q,X'FF'\n         BZ    SYS14T2\n*  SECTIONED FORMAT ONLY OUTPUT POSSIBLE\n*\n         SR    GRA,GRA\n         IC    GRA,Q\n         CR    QUAN,GRA\n         BNH   SYS14T2\n         L     GRB,RE\n         S     GRB,R               NUMBER OF BLANKS IN GRB\n         BZ    SYS14T11\n         LA    ENTRY,SYBLANK            FILL RECORD WITH BLANKS\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\nSYS14T11 MVC   S+1(1),Q\n         SPACE\n         OI    DSF,DS2             OUTPUT                          0206\n         SPACE\n         SPACE\n         BAL   RETURN,NXREC    SKIP TO BEGIN OF NEXT SECTION       0226\n         B     RETSYS\n*\n*   NOT SECTIONED FORMAT OR QUANTITY LESS OR EQUAL Q\n*\n*\nSYS14T2  TM    DSF,DS2\n         BZ    SYS14T4                  LAST I/O WAS INPUT\nSYS14T3  L     GRB,RE                                              0206\n         S     GRB,R\n         BZ    SYS14T5\n         LA    ENTRY,SYBLANK            FILL RECORD WITH BLANKS\n         BALR  RETURN,ENTRY\nSYS14T5  BAL   RETURN,NXREC                                        0226\n         CH    QUAN,S\n         BNE   SYS14T3\n         B     RETSYS\n*\n*  INPUT\n*\nSYS14T4  TM    DSF+1,DS10          HAS DS BEEN OPENED BY SYSACT 12 0221\n         BO    SYS14T7                                             0213\n*\n*  ONLY INPUT READ THE FOLLWING UNTIL RECORD POINTER S EQUALS QUANTITY\n*\nSYS14T6  TM    DSF,DS7             HAS EOD BEEN REACHED            0221\n         BO    SYSEOD                                              0221\n         BAL   RETURN,NXREC                                        0221\n         CH    QUAN,S\n         BE    RETSYS                                              0213\n         B     SYS14T6                                             0221\nSYS14T7  LTR   DSNR,DSNR           IS DATA SET NR = 0              0221\n         BZ    SYSINCOM                                            0213\n         OI    DSF,DS2             OUTPUT                          0213\n         B     SYS14T3                                             0213\n         EJECT\n*\n*  ROUTINE SYSACT15 SKIP TO RECORD EQUAL QUANTITY IN NEXT SECTION\n*  IF DATA IS NOT SECTIONED SYSACT14 IS INVOKED\n*\n*\nSYSACT15 LTR   QUAN,QUAN\n         BC    13,SYSQOUTR              QUANTITY OUT OF RANGE ERROR13\n         TM    DSF,DS0\n         BZ    SYSCLOSD\n         SPACE\n         TM    Q,X'FF'\n         BZ    SYS14T1                  DATA IS NOT SECTIONED SYSACT14 X\n                                        IS INVOKED\n         SPACE\n         SPACE\n         SR    GRB,GRB\n         IC    GRB,Q\n         CR    QUAN,GRB\n         BH    SYSQOUTR\n         SPACE\n         SPACE\n         L     GRB,RE\n         S     GRB,R                    FILL RECORD WITH BLANKS\n         BZ    SYS15T0\n         LA    ENTRY,SYBLANK            FILL RECORD WITH BLANKS\n         BALR  RETURN,ENTRY\n         SPACE\n         SPACE\n         SPACE\n         SPACE\nSYS15T0  MVC   S+1(1),Q\n         OI    DSF,DS2             OUTPUT                          0206\n         BAL   RETURN,NXREC                                        0226\n         SPACE\n         SPACE\n         LR    GRB,QUAN\n         BCT   GRB,SYS14T3\n         SPACE\nSYS15T1  B     RETSYS                   QUANTITY EQUALS ONE            X\n                                        FIRST RECORD IN NEXT SECTION\n         EJECT\n*\n*  SYBLANK FILL RECORD WITH BLANKS\n*\n*\nSYBLANK  L     GR,R\nSYBLANK1 MVI   0(GR),X'40'\n         LA    GR,1(0,GR)\n         BCT   GRB,SYBLANK1\n         BR    RETURN\n         EJECT\n         CNOP  0,4\nSAVEAR   DS    18F                      SAVEAREA\nRANGEFUN DC    F'-16'                   SCOPE OUTSIDE RANGE OF FUNCTION\n         LTORG\n         SPACE\n         SPACE\n         SPACE\nSYS      DS    A\n         DC    A(SYSACT1)\n         DC    A(SYSACT2)\n         DC    A(SYSACT3)\n         DC    A(SYSACT4)\n         DC    A(SYSACT5)\n         DC    A(SYSACT6)\n         DC    A(SYSACT7)\n         DC    A(SYSACT8)\n         DC    A(SYSACT9)\n         DC    A(SYSACT10)\n         DC    A(SYSACT11)\n         DC    A(SYSACT12)\n         DC    A(SYSACT13)\n         DC    A(SYSACT14)\n         DC    A(SYSACT15)\n*\n*\n*\n*\nDSTABLE  DSECT                          DUMMY SECTION FOR DSTAB\nADCB     DS    A\nR        DS    A\nRE       DS    A\nNBB      DS    A\nBB       DS    A\nS        DS    H\nP        DS    H\nK        DS    C\nQ        DS    C\nDSF      DS    H\nNOTEADR  DS    A\nBL       DS    H\n*\n*\n*\n         SPACE\nSYSD     DSECT                          DUMMY SECTION FOR ADRESSING\n         DS    22F                      DECB\n         READ  SYDECB,SF,MF=L\nFAS      DSECT\n         COPY  FSAREA\n         END\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT310/FILE310.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT310", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}