{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012530000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE650.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE650.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x03'", "DS1TRBAL": "b'\\xc3^'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\x9c\\x00\\x0b\\x04\\x9d\\x00\\x00\\x00\\x05'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\x15\\x07\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T15:07:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  650\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE650\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,224 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   09/16/03    15:07:23    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$DOC": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00B\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\x15\\x06\\x02,\\x02(\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T15:06:42", "lines": 556, "newlines": 552, "modlines": 0, "user": "SBGOLOB"}, "text": "Note:  This doc is a text transcription of a PDF conversion from the\n       Powerpoint presentation.  All responsibility for errors is\n       mine.  (Sam Golob)\n\n\n\n                 Who Did What to Whom in CSA?\n\n                       Session 2851\n\n                   Speaker:   Mike Reeves\n\n                    mike.reeves@fmr.com\n\n\n    Fidelity Investments\n\n    One Destiny Way\n\n    West Lake, Texas 76262          Thursday, Feb 27,2003\n\n\n\n\n    Overview.\n\n    We will discuss some common CSA problems and how to\n    determine when we may be experiencing a CSA\n    problem. How to capture documentation for the\n    problems. And finally, how we can use CSA tracker\n    data and VSMLIST to proactively take control of\n    understanding how our CSA is utilized.\n\n\n    Who Did What to Whom in CSA?        Summary of Topics\n\n      What's the problem anyway?\n      IBM CSA Tracker, what it does and does not do.\n      How do we fill in the gaps?\n      CSA Tracker Data Structure.\n      VSMLIST Data Structure.\n      Merging CSA Tracker and VSMLIST Data.\n      Understanding and Reporting on the Results.\n      Operational Considerations.\n      References.\n      Questions and maybe answers?\n\n\n    What's the problem anyway?\n\n    Answers - Always know the general condition of your\n    CSA. Be proactive, Use the IBM CSA Tracker data.\n    When you decide there is a problem - Gather docs, SAD,\n    SVC Dumps. Open IBM PMR.\n    Most Common Problems -\n      Creep that chips away at the largest free block of CSA.\n      Sudden changes that gobble up CSA.\n      SQA overflow into CSA.\n\n --------------------------------------------------------------------\n\n    IBM CSA Tracker -\n    What it does and does not do!\n\n    The IBM CSA Tracker provides a data store of allocated\n    CSA, captured at the time the storage is acquired and\n    cleared at the time the storage is released.\n    Information collected by the IBM CSA Tracker\n      Time, address, and length of the allocation\n      Owner Jobname, jobnumber, asid, and status\n    Information the IBM CSA Tracker does not collect\n      Subpool\n      Storage protect key\n\n --------------------------------------------------------------------\n\n    How Do We Fill the Gaps?\n\n    Completing the Picture.\n    The primary missing pieces in the CSA Tracker data are\n    Subpool and Storage Protect Key.\n    Where do we get the missing information?\n      Run the RSM control block chains manually? L\n      IBM VSM level 2 can figure it out. Right? L\n      Use VSMLIST macro to pull the CSA and SQA VSM map?\n\n    Ultimately, merging the CSA Tracker data and VSMLIST\n    data will provide the best solution. Allowing us to get the\n    complete picture of the  Who did What to Who? .\n\n --------------------------------------------------------------------\n\n    CSA Tracker Data Structure\n\n    CSA tracker data is based on a two table lookup.\n    The table must be able to represent the largest allocation of CSA,\n    or 2 gigabytes. There are 256 GQAT index entries, each\n    representing 8meg of storage.\n    Each GQAT index entry points to a table of GQATs each\n    representing a 8Meg of storage. There are 128 entries in each\n    GQAT. Each entry points to a queue of GQEs which describe the\n    CSA allocations. There are a maximum of 8192 GQE entries in\n    the GQE table in LIFO order. Each GQE points to a CAUB which\n    describes the of the address space that allocated the storage.\n    Mathematically, this would be;\n    2Gig/256 (GQAT_index entries) = 8Meg/128 (GQAT entries) =\n    64k/8 = 8192 (GQE entries).\n    GQAT = GQE Queue Anchor Table - GQE = GETMAINed Queue Element\n    CAUB = Common Area User Block\n\n --------------------------------------------------------------------\n\n    CSA Tracker Data Structure - Diagram\n\n                           How the Address is used to hash\n                           into the tables.\n\n                           (left to right starting with\n     Common                the bit to the right of the\n     Storage               high order bit)\n     0-2Gig\n             \\             1111111111111111 ..1\n               \\\n                 \\         A       B          C\n                   \\\n                    >>\n                        GQAT_index\n                        Pointer 1\n\n                          256  \\\n                                 >>\n                                   GQAT\n                                   Pointer 1\n\n                                     128   \\\n                                             >>\n                                                GQE\n                                                Pointer 1\n\n                                                 8192 max\n                                                       \\\n                                                        >>\n                                                         CAUB\n\n\n    A   Bits 1-8 may be used to derive the\n    correct GQAT_index entry.\n    B   Bits 9-15 may be used to derive the\n    correct GQAT entry.\n    C   The GQE entry can be found by\n    scanning the GQE entries for a match.\n\n\n --------------------------------------------------------------------\n\n\n    CSA Tracker Data Structure - GQE\n\n      Pointer to next GQE\n      TOD Clock (Date & Time) of allocation\n      Pointer to the CAUB for this GQE\n      Start address of the allocated area\n      Length of the allocated area\n      Getmain that obtained the storage (debugging aid for\n    identification of the module that did the getmain.)\n      GQE Return address. Last bit used to mark SQA or\n    CSA.\n    Mapping macro - IGVGQE\n    Information in the GQE\n\n\n --------------------------------------------------------------------\n\n\n    CSA Tracker Data Structure - CAUB\n\n      Jobname of the job or started task that allocated the\n    storage.\n      Jobid of the job or started task that allocated the storage.\n      ASID of the job or started task that allocated the storage.\n      Whether or not that address space is still active or in\n     Owner Gone  status.\n      Other information, like unowned time and date, above\n    and below the line getmain amounts, system storage\n    indicators.\n    Mapping Macro - IGVCAUB\n    Information in the CAUB\n\n\n --------------------------------------------------------------------\n\n\n    VSMLIST SQA/CSA Map Structure\n\n    The VSMLIST macro can be used to complement the data\n    collected by the CSA Tracker, producing a complete\n    picture of allocated CSA. VSLLIST provides :\n      An allocation map of SQA/CSA allocated, free, and\n    unallocated storage.\n      Identity of the storage subpool and storage protect key\n    of allocated SQA/CSA.\n    The merging process should be from VSMLIST data to\n    CSA Tracker because the data from VSM list in is\n    address order and the GQEs in CSA Tracker are in\n    LIFO order.\n\n\n --------------------------------------------------------------------\n\n\n    VSMLIST SQA/CSA Map Structure  (Cont.)\n\n    VSMLIST builds a map of virtual storage and sends that map back\n    in the form of tables describing storage allocated in each subpool.\n    The contents of each field is 4 or 8 bytes. Fields are:\n      Number of Subpools\n      Subpool Descriptor\n      Number of Allocated Blocks\n      Allocated Block Descriptor\n      Free Space Descriptor\n    The  Number of Subpools is the first field in the data area and\n    is a count of the subpools included in the data area. Each\n    Subpool Descriptor  describes the sub that contains the\n    Allocated Blocks  and likely will contain multiple allocated\n    blocks as indicated in the  Number of Allocated Blocks  field.\n\n --------------------------------------------------------------------\n\n\n    VSMLIST SQA/CSA Structure  -  Picture\n\n    Area Returned by VSMLIST  (fields listed in order below)\n\n    First Subpool Block\n\n    Number of Subpools\n    Subpool Descriptor\n    Number of allocated blocks\n    Allocated block descriptor  -  alternate 2 fullwords\n    Free Block descriptor       -  next alternate 2 fullwords\n\n    Another Subpool block\n    Last  allocated block descriptor\n    Last  free block descriptor\n    .. ..\n\n    Last Subpool block\n\n       First Fullword in Subpool Block - Fullword containing\n                                         count of subpools\n\n       Second Fullword in Subpool Block -\n\n            Byte Meaning\n            0  X'00' to identify a subpool descriptor\n            1  Length of subpool descriptor\n            2  Subpool ID\n            3  Misc. flags and storage key as follows:\n\n                 Bit Meaning When Set\n                 0-3   Storage key\n                 4-31  N/A for CSA\n\n            4-7   Zero for CSA.\n\n       Third Fullword - Fullword containing count of blocks\n\n       Fourth Fullword\n\n            Byte Content\n            0-3    Address of block\n\n                    Bit Meaning\n                    0    REAL below\n                    1    REAL above\n\n            4-7 Length of block\n\n       This is followed by fullwords - Free Block Descriptors\n\n\n --------------------------------------------------------------------\n\n      Merging VSMLIST and CSA Tracker Data\n\n      Obtaining GQAT Address  -  Picture\n\n\n      CVT  --->  CVTGDA  --->  GDAGQAT_INDEX\n\n\n         Then from subpool descriptor block,\n         the block address (fourth fullword)\n         use bits 1-8, ignoring bit 0,\n         and multiply the results by 4.\n\n\n         Add the GQAT_Index base to the result of this multiply\n         to get the GQAT address.\n\n     Mapping macros - IHAPSA, CVT DSECT=YES, IHAGDA, IGVCAUB, IGVGQE\n\n\n --------------------------------------------------------------------\n\n\n      Merging VSMLIST & CSA Tracker Data\n\n      Finding the GQE entry  -  Picture\n\n      CVT  --->  CVTGDA  --->  GDAGQAT_INDEX  --->   Get GQAT Address\n\n            --->  Get GQE Queue  --->  Compare Block Address\n                                       to GQE Entry Address\n\n            --->  |  Not it, then load GQE_NEXT and compare again\n                  |\n                  |  Address match, so go process GQE\n\n\n     Mapping macros - IHAPSA, CVT DSECT=YES, IHAGDA, IGVCAUB, IGVGQE\n\n\n --------------------------------------------------------------------\n\n\n     Understanding and Reporting on the Results\n\n     The output from the VSMLIST/CSA Tracker data merge\n     gives a complete picture of CSA utilization by:\n       Identity of allocator - Job name, number and ASID\n       Status of allocator - active or owner gone\n       Date and Time of allocation\n       Size and location of the allocation\n       Subpool of allocation\n       Storage protect key of allocation\n     The resulting data store requires processing to generate\n     statistical analysis of data.\n\n\n --------------------------------------------------------------------\n\n\n     Understanding and Reporting on the Results (cont.)\n\n       Times are in GMT if that is your default timer method.\n       Pay attention to allocations that are OG (Owner Gone).\n       Look for patterns and eye catchers in the data.\n\n     Recommended reporting:\n       Subpool <-<-\n       Job name/Number/ASID\n       Storage Protect Key\n       Owner Gone \u00df\n       Location of storage, above or below the line\n\n     SAS is the most flexible tool for producing quick accurate\n     reports of what the data represents.\n\n\n --------------------------------------------------------------------\n\n\n     CSA Tracker Reporting Example CSA Tracker Reporting Example\n\n     By Subpool\n\n     CSA SUBPOOL ALLOCATION BY DATE:CPU\n     -----------DATE-----------\n     CPU AREA SUBPOOL 03-02-09 03-02-10 03-02-11 TOTAL\n     ---- ----- ------- -------- -------- -------- ------\n     CPUx ABOVE 0227        6.1M     1.3M   207.8K   7.7M\n                0228       17.6M   820.7K   647.8K  19.0M\n                0231       29.0M     6.1M     9.6M  44.8M\n                0241       72.2M    24.6M    13.4M 110.3M\n     ---- -----         -------- -------- -------- ------\n     CPUx ABOVE           125.0M    33.0M    23.9M 181.9M\n\n     SQA SUBPOOL ALLOCATION BY DATE:CPU\n     -----------DATE-----------\n     CPU AREA SUBPOOL 03-02-09 03-02-10 03-02-11 TOTAL\n     ---- ----- ------- -------- -------- -------- ------\n     CPU1 ABOVE 0239        4.8M    86.8K   386.9K   5.3M\n                0245      143.5M     6.4M     6.0M 155.9M\n                0247        3.7M   924.1K        .   4.7M\n                0248       18.8M     1.3M    91.0K  20.2M\n     ---- -----         -------- -------- -------- ------\n     CPU1 ABOVE           170.9M     8.7M     6.4M 186.2M\n\n\n\n --------------------------------------------------------------------\n\n\n     CSA Tracker Reporting Example  -  Real CSA Problem\n\n     We recently experienced a sudden spike in CSA utilization.\n     Upon further investigation we determined the root cause of\n     this problem. IBM APAR UA00149 (PDSE SPE).\n\n ------------------------SUBPOOL------------------------\n HOUR    0227   0228   0231   0239   0241   0245   0247   0248   TOTAL\n --------- SPK ------ ------ ------ ------ ------ ------ ------  -----\n 16 0       .    1.2K   5.3K   5.6K 362.3K   2.1M 240.0K 324.4K   3.0M\n    1       .       .      .      .  10.9K      .      .      .  10.9K\n    3       .       .      .      .  40.0K      .      .      .  40.0K\n    4       .       .      .  43.5K      .      .      .      .  43.5K\n    5       .       .  37.7M      . 836.0K      .      .      .  38.5M\n    6  201.5K       . 393.0K      .   1.0M      .      .      .   1.6M\n    7       .       .   4.5M      . 468.0K      .      .      .   5.0M\n    8       .    4.0K      .      .  13.1K      .      .      .  17.1K\n\n\n --------------------------------------------------------------------\n\n\n     CSA Tracker\n\n     Operational Considerations\n\n       What is the default? SYS1.IBM.PARMLIB(DIAG00)\n\n     Specified in IEASYS00 at IPL time or through MVS command\n     SET DIAG=xx. The IBM default is DIAG00 which contains:\n     VSM TRACK CSA(ON) SQA(ON)\n     VSM TRACE GETFREE(OFF)\n       How do I turn it on?    - SET DIAG=xx\n       How do I turn it off?   - SET DIAG=xx\n       How do I know it is on? - IPCS\n     From TSO get into IPCS and change default to  ACTIVE .\n     From option 6 enter command:\n      VERBX VSMDATA 'OWNCOMM DETAIL ALL   .\n     The CSA Tracker does incur overhead, but the benefit is well worth\n     the small penalty in CPU consumption.\n\n\n --------------------------------------------------------------------\n\n\n     IPCS CSA Tracker Data IPCS CSA Tracker Data\n\n     Set Source to Active Set Source to Active\n\n     ------------------------- IPCS Default Values ---------------------\n     Command ===>\n     You may change any of the defaults listed below. The defaults\n     shown before any changes are LOCAL. Change scope to GLOBAL to\n     display global defaults.\n\n     Scope    ==>  LOCAL     (LOCAL, GLOBAL, or BOTH)\n\n     If you change the Source default, IPCS will display the\n     current default Address Space for the new source and will\n     ignore any data entered in the Address Space field.\n\n     Source   ==>  ACTIVE\n\n     Address Space   ==> ASID(X'0403')\n     Message Routing ==> NOPRINT TERMINAL\n     Message Control ==> NOCONFIRM VERIFY FLAG(ERROR)\n     Display Content ==> NOMACHINE REMARK REQUEST NOSTORAGE SYMBOL\n\n\n --------------------------------------------------------------------\n\n\n   IPCS CSA Tracker Data\n\n   Option 6            Issue verbx vsmdata\n\n   ------------------------- IPCS Subcommand Entry ---------------------\n   Enter a free-form IPCS subcommand or a CLIST or REXX exec invocation\n   ===> verbx vsmdata 'owncomm detail contents(no)'\n   ----------------------- IPCS Subcommands and Abbreviations ----------\n   ADDDUMP         | DROPDUMP, DROPD  | LISTMAP, LMAP  | RUNCHAIN, RUNC\n   ANALYZE         | DROPMAP, DROPM   | LISTSYM, LSYM  | SCAN\n   ARCHECK         | DROPSYM, DROPS   | LISTUCB, LISTU | SELECT\n   ASCBEXIT, ASCBX | EQUATE, EQU, EQ  | LITERAL        | SETDEF, SETD\n   ASMCHECK, ASMK  | FIND, F          | LPAMAP         | STACK\n   CBFORMAT, CBF   | FINDMOD, FMOD    | MERGE          | STATUS, ST\n   CBSTAT          | FINDUCB, FINDU   | NAME           | SUMMARY, SUMM\n   CLOSE           | GTFTRACE, GTF    | NAMETOKN       | SYSTRACE\n\n\n --------------------------------------------------------------------\n\n\n    IPCS CSA Tracker Data\n\n    Option 6   Issue verbx vsmdata\n\nIPCS OUTPUT STREAM ---------------------------------------------------\nCommand ===>\n\nVIRTUAL STORAGE MANAGEMENT DUMP FORMAT ROUTINE\nTHE FOLLOWING KEYWORDS ARE IN EFFECT:\nOWNCOMM\nDETAIL\nALL\nSORTBY(ASIDADDR)\nCONTENTS(NO)\nDate Time\n\nASID Job Name       Id St T  Address   Length Ret Addr MM/DD/YYYY HH:MM:SS\n---- -------- -------- -- - -------- -------- -------- ---------- --------\n0000 *SYSTEM* ........ Ac S 00A85180 00000180 012379F2 02/25/2003 21:24:39\n0000 *SYSTEM* ........ Ac S 00A85300 00000180 012379F2 02/25/2003 15:18:36\n0000 *SYSTEM* ........ Ac S 00A85E80 00000180 012379F2 02/25/2003 12:08:10\n0000 *SYSTEM* ........ Ac S 00A9C000 00001000 01383062 02/25/2003 13:20:06\n0000 *SYSTEM* ........ Ac S 00AA1880 00000180 012379F2 02/25/2003 17:11:15\n0000 *SYSTEM* ........ Ac S 00AA2A00 00000180 012379F2 02/25/2003 10:32:56\n0000 *SYSTEM* ........ Ac S 00AA8A00 00000180 012379F2 02/25/2003 10:33:55\n0000 *SYSTEM* ........ Ac S 00AABA00 00000180 012379F2 02/24/2003 13:36:44\n\n\n --------------------------------------------------------------------\n\n\nCSA Tracker/VSMLIST CSA Tracker/VSMLIST\nRaw Data Sample Raw Data Sample\n0000 *SYSTEM* ........ Ac S 00EBF000 00001000 K-0-0226 02/25/2003 11:00:57\n0000 *SYSTEM* ........ Ac S 00ED1000 00001000 K-0-0226 02/25/2003 11:13:50\n0000 *SYSTEM* ........ Ac S 00ED0000 00001000 K-0-0226 02/24/2003 12:01:16\n0000 *SYSTEM* ........ Ac S 00ED4000 00001000 K-0-0226 02/25/2003 11:13:50\n0000 *SYSTEM* ........ Ac S 00EE9000 00001000 K-0-0226 02/23/2003 16:00:08\n0000 *SYSTEM* ........ Ac S 00F70000 00001000 K-0-0226 02/23/2003 03:44:22\n0000 *SYSTEM* ........ Ac S 00F71000 00001000 K-0-0226 02/23/2003 03:44:21\n0000 *SYSTEM* ........ Ac S 00F72000 00001000 K-0-0226 02/23/2003 03:44:21\n0052 ENF      STC23468 Ac S 00F93640 00000030 K-0-0226 02/23/2003 03:49:25\n0052 ENF      STC23468 Ac S 00F93670 00000030 K-0-0226 02/23/2003 03:49:25\n000A CONSOLE  ........ Ac S 00F936A0 00000060 K-0-0226 02/23/2003 03:44:02\n0001 *MASTER* ........ Ac S 00F93700 00000100 K-0-0226 02/22/2003 22:44:22\n0000 *SYSTEM* ........ Ac S 00FB6000 00001000 K-0-0226 02/22/2003 22:44:22\n0000 *SYSTEM* ........ Ac S 00FB8000 00001000 K-0-0226 02/22/2003 22:44:22\n\n\n --------------------------------------------------------------------\n\n\n    References References\n      SY28-1164-11 OS/390 V2R10.0 MVS Data Areas, Vol 1\n          (ABEP-DALT)\n      SY28-1165-11 OS/390 V2R10.0 MVS Data Areas, Vol 2\n          (DCCB-ITZYRETC)\n      SC28-1751-09 OS/390 V2R10.0 MVS Initialization and\n          Tuning Guide\n      SC28-1752-13 OS/390 V2R10.0 MVS Initialization and\n          Tuning Reference\n\n\n --------------------------------------------------------------------\n\n\n    Questions.....\n\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE1": {"ttr": 769, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00%\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\x12\\x15\\x00\\x0e\\x00\\x0e\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T12:15:25", "lines": 14, "newlines": 14, "modlines": 0, "user": "SBGOLOB"}, "text": "Hi,\n\nHere is 2851 Who Did What to Whom in CSA?\nfrom Mike Reeves.\n\nI converted the PowerPoint to .PDF  There are 3 files (1 .PDF and\n2 plain text files .TXT with source)  The should be included if\nthey can be included raw they would not convert well to PDF\nformat.\n\nThanks!\n\n        Sam Knutson\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "@FILE650": {"ttr": 771, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\x15\\x07\\x00\\x0b\\x00\\x0b\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T15:07:00", "lines": 11, "newlines": 11, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 650 is from Mike Reeves and contains a CSA reporting      *   FILE 650\n//*           tool.  The data gathering portion is written in       *   FILE 650\n//*           Assembler, and the reporting program is written in    *   FILE 650\n//*           SAS.  A text version of Mike's SHARE presentation     *   FILE 650\n//*           on the subject is presented here, because the PDF     *   FILE 650\n//*           version was too big to include on the tape.           *   FILE 650\n//*                                                                 *   FILE 650\n//*           Responsibilities for errors in the doc:  Sam Golob    *   FILE 650\n//*                                                                 *   FILE 650\n//*           email:  mike.reeves@fmr.com                           *   FILE 650\n//*                                                                 *   FILE 650\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CSAREPTS": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\x11@\\x00;\\x00;\\x00\\x00\\xc3\\xe2\\xc1\\xd9\\xc5\\xd7\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T11:40:00", "lines": 59, "newlines": 59, "modlines": 0, "user": "CSAREPT"}, "text": "//CSATRAKR JOB (3853,MVS),'RUN CSA REPORT',MSGCLASS=U,\n//         CLASS=8,REGION=0M\n/*JOBPARM S=*\n//*\n//SAS      EXEC SAS,COND=(4,LT),REGION=0M\n//*\n//WORK     DD SPACE=(CYL,250),UNIT=WORK\n//SASLIST  DD SYSOUT=*\n//SYSIN    DD *\nOPTIONS CENTER LINESIZE=80 PAGESIZE=58;\n\nFILENAME VSMLIST ('YOUR.CSATRACKER.OUTPUT'BUFNO=20 DISP=SHR;\n\nPROC FORMAT; PICTURE DOTV 0-1024='000000'\n                    1024-1024000='000.0K' (MULT=.009765625)\n                           OTHER='000.0M' (MULT=.000009765625);\nDATA CSA;\n INFILE VSMLIST;\n   INPUT @03 ASID       $CHAR4.       /* ASID                   */\n         @08 JOBNAME    $CHAR8.       /* JOBNAME                */\n         @17 JOBID      $CHAR8.       /* JOBID                  */\n         @26 STATUS     $CHAR2.       /* STATUS                 */\n         @29 STRG_TYP   $CHAR1.       /* CSA OR SQA             */\n         @31 CSA_AREA   HEX8.         /* GETMAINTED AREA        */\n         @40 CSA_LEN    HEX8.         /* GETMAINTED AREA LENGTH */\n         @51 STRG_KEY   $CHAR1.       /* STORAGE PROTECT KEY    */\n         @53 SUBPOOL    $CHAR4.       /* STORAGE SUBPOOL        */\n         @58 ALOCDATE   MMDDYY11.     /* STORAGE SUBPOOL        */\n         @69 ALOCTIME   TIME8.        /* STORAGE SUBPOOL        */\n         @96 SMFID      $CHAR4.;      /* SYSTEM ID              */\n    IF CSA_AREA > 16777215 THEN AREA=' >16MEG '; ELSE AREA=' <16MEG ';\n    IF STRG_TYP = 'S' THEN CSA_TYPE = 'SQA'; ELSE CSA_TYPE = 'CSA';\n*   IF STATUS = 'OG' THEN JOBNAME = '*ORPHAN*';\nPROC SUMMARY NWAY;\n  CLASS SMFID JOBNAME JOBID CSA_TYPE SUBPOOL AREA;\n  VAR CSA_LEN;\n  OUTPUT OUT=CSAOUT SUM= N=NUMREC;\nRUN;\nTITLE 'CSA SUBPOOL ALLOCATION BY CPU';\nPROC REPORT SPACING=1 DATA=CSAOUT;\nCOLUMN SMFID CSA_TYPE SUBPOOL AREA,CSA_LEN;\nDEFINE SMFID    / GROUP  WIDTH=4         '-SID/--';\nDEFINE CSA_TYPE / GROUP  WIDTH=4                  ;\nDEFINE SUBPOOL  / GROUP  WIDTH=7         'SUBPOOL/--';\nDEFINE AREA     / ACROSS                 '-LOCATION-';\nDEFINE CSA_LEN  / SUM    FORMAT=DOTV8.   '--';\n BREAK AFTER CSA_TYPE / SUMMARIZE OL SKIP;\n BREAK AFTER SMFID    / SUMMARIZE OL SKIP;\nRUN;\nTITLE 'CSA SUBPOOL ALLOCATION BY CPU:JOBNAME';\nPROC REPORT SPACING=1 DATA=CSAOUT;\nCOLUMN SMFID JOBNAME CSA_TYPE,(AREA,CSA_LEN) NUMREC;\nDEFINE SMFID    / GROUP  WIDTH=4         '-SID/--';\nDEFINE JOBNAME  / GROUP  WIDTH=8         'JOBNAME-/--';\nDEFINE CSA_TYPE / ACROSS                 '-COMMON STORAGE-';\nDEFINE AREA     / ACROSS                 '--';\nDEFINE CSA_LEN  / SUM    FORMAT=DOTV8.   '--';\n BREAK AFTER SMFID    / SUMMARIZE OL SKIP;\nRUN;\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "VSMLIST": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x03%\\x9f\\x01\\x03%\\x9f\\x11@\\x02<\\x02<\\x00\\x00\\xc3\\xe2\\xc1\\xd9\\xc5\\xd7\\xe3@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-09-16T00:00:00", "modifydate": "2003-09-16T11:40:00", "lines": 572, "newlines": 572, "modlines": 0, "user": "CSAREPT"}, "text": "//FIDVSMLS JOB (3853,MVS),'ASSEM FIDVSMLS',\n// NOTIFY=&SYSUID,CLASS=8,MSGCLASS=U\n/*JOBPARM S=*\n//ASM PROC\n//*\n//COMPILE EXEC  PGM=ASMA90,\n// PARM=(LIST,OBJECT,NODECK)\n//SYSPRINT DD  SYSOUT=*\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.MODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(4,2))\n//SYSUT2   DD  UNIT=SYSDA,SPACE=(CYL,(4,2))\n//SYSUT3   DD  UNIT=SYSDA,SPACE=(CYL,(4,2))\n//SYSLIN   DD  DSN=&&OBJECT,DISP=(MOD,PASS),UNIT=SYSDA,\n//             SPACE=(CYL,(5,5))\n//*--------------------------------------------------------------------\n//LINK    EXEC PGM=IEWL,COND=(4,LT),\n// PARM='LET,LIST,MAP'\n//SYSPRINT DD  SYSOUT=*\n//OBJECT   DD DSN=&&OBJECT,DISP=(OLD,DELETE)\n//SYSLIB   DD DSN=your.load.library,DISP=SHR\n//SYSUT1   DD UNIT=SYSDA,DISP=NEW,SPACE=(CYL,(2,2))\n//SYSLMOD  DD DSN=your.load.library,DISP=SHR\n// PEND\n//FIDVSMLS EXEC ASM\n//COMPILE.SYSIN DD *\nFIDVSMLS TITLE 'PROGRAM TO EXTRACT TIOT ENTRIES AND REPORT'\nFIDVSMLS CSECT\nFIDVSMLS AMODE 31\nFIDVSMLS RMODE 24\n***********************************************************************\n*                                                                     *\n* DESCRIPTION - THIS PROGRAM USES THE VSMLIST MACRO TO OBTAIN A MAP   *\n*               OF ALLOCATED CSA AND SQA STORAGE WITH FREE SPACE FOR  *\n*               EACH SUBPOOL. THE VSMLIST DATA IS PARSED AND FREE     *\n*               BLOCKS ARE REMOVED. EACH ALLOCATED BLOCK IS THEN      *\n*               USED TO INDEX INTO THE GDA GQAT_INDEX TO LOCATE THE   *\n*               CORRECT GQAT. ONCE THE CORRECT GQAT HAS BEEN LOCATED  *\n*               THE VSMLIST ADDRESS IS USED TO LOCATE THE CORRECT GQE *\n*               TABLE. THE GQE TABLE IS THEN SCANNED AND ALL MATCHING *\n*               ENTRIES ARE PROCESSED. IF A GQE ALLOCATION TOD ENTRY  *\n*               IS BLANK, THE IPL TIME/DATE TIME FROM THE SMCA IS     *\n*               USED.                                                 *\n*                                                                     *\n*               THE PURPOSE OF USING THIS TECHNIQUE IS TO OBTAIN NOT  *\n*               THE INFORMATION FROM THE CSA TRACKER, BUT ALSO THE    *\n*               SUBPOOL NUMBER AND STORAGE KEY OF THE REQUEST.        *\n*                                                                     *\n* GQA/GQE INDEX FORMULA -                                             *\n*                                                                     *\n*     THE STORAGE ADDRESS FROM THE VSMLIST MAP IS USED TO INDEX       *\n*     INTO THE GQAT_INDEX TABLE AS FOLLOWS:                           *\n*                                                                     *\n*     BITS 1-8 ARE THE GQAT_INDEX TABLE ENTRY NUMBER. THIS NUMBER IS  *\n*     MULTIPLIED BY FOUR AND ADDED TO THE GQAT_INDEX ADDRESS FROM     *\n*     THE  GDA TO OBTAIN THE ADDRESS OF THE GQE TABLE.                *\n*                                                                     *\n*     BITS 9-15 ARE THE GQAT TABLE ENTRY NUMBER. THIS NUMBER IS       *\n*     MULTIPLIED BY FOUR AND ADDED TO THE GQE ADDRESS FROM THE GQE    *\n*     TABLE +4(TO BUMP PAST THE EYECATCHER).                          *\n*                                                                     *\n*     HERE IS AN EXAMPLE USING 00CC5000 AS THE VSMLIST AREA ADDRESS:  *\n*                                                                     *\n*     R9 IS CLEARED                                                   *\n*     R8 IS LOADED WITH ADDRESS 00CC5000. IT IS THEN SHIFTED RIGHT    *\n*        DOUBLE LOGICAL 23 BITS LEAVING 1 IN R8 AND 98000000X IN R9.  *\n*        R8 IS THEN SHIFTED LEFT 2 BITS(X4) AND ADDED TO THE ADDRESS  *\n*        OF THE GQAT_INDEX FROM THE GDA. THE RESULT IS THE ADDRESS OF *\n*        THE GQAT IN WHICH THE GQE TABLE RESIDES.                     *\n*                                                                     *\n*     R8 IS THE CLEARED AND A SHIFT LEFT DOUBLE LOGICAL OF 7 BITS IS  *\n*        DONE RESULTING IN 4C IN R8. R8 IS THEN SHIFTED LEFT 2 BITS   *\n*        (X4) AND ADDED TO THE GQAT ADDRESS +4 TO INDEX PAST THE      *\n*        EYECATCHER('GQAT') TO OBTAIN THE ADDRES OF THE GQE TABLE.    *\n*                                                                     *\n*     THE GQE TABLE IS THEN SCANNED FOR ANY ENTRY WITHIN THE RANGE OF *\n*     CSA STORAGE FROM THE VSMLIST MAP.                               *\n*                                                                     *\n*     OUTPUT RECORD LAYOUT:                                           *\n*                                                                     *\n*         ASID ......... 3-6 ... ADDRESS SPACE ID                     *\n*         JOBNAME ...... 8-15 .. NAME OF THE JOB/TSU/STC              *\n*         JOBID ........ 17-24 . JOB NUMBER                           *\n*         STATUS ....... 26-27 . OG=OWNER GONE OR AC=ACTIVE           *\n*         STORAGE TYPE . 29 .... S=SQA OR C=CSA                       *\n*         AREA ADDRESS . 31-38 . ADDRESS OF STORAGE AREA              *\n*         AREA LENGTH .. 40 47 . LENGTH OF STORAGE AREA               *\n*         STORAGE KEY .. 51 .... STORAGE KEY OF REQUEST               *\n*         SUBPOOL ...... 53-56 . SUBPOOL NUMBER OF REQUEST            *\n*         DATE ......... 58-67 . DATE OF REQUEST OR IPL DATE          *\n*         TIME ......... 69-76 . TIME OF REQUEST OR IPL TIME          *\n*         GQE ADDRESS .. 78-85 . ADDRESS OF GQE ENTRY                 *\n*         CAUB ADDRESS . 87-94 . ADDRESS OF CAUB FOR GQE              *\n*         SMFID ........ 96-99 . SMFID OF THE SYSTEM                  *\n*                                                                     *\n* REGISTER USAGE -----------------------------------------------------*\n* R0-R1 --- GENERAL PURPOSE REGISTERS                                 *\n* R2 ------ ADDRESS OF THE CURRENT VSMLIST AREA                       *\n* R3 ------ COUNT OF SUBPOOLS IN VSMLIST AREA                         *\n* R4 ------ COUNT OF SEGMENTS IN SUBPOOL                              *\n* R5 ------ VSM SUBPOOL SEGMENT AREA ADDRESS                          *\n* R6 ------ VSM SUBPOOL SEGMENT AREA LENGTH                           *\n* R7 ------ COUNT OF FREE AREA SEGMENTS                               *\n* R8-R9 --- GENERAL PURPOSE REGISTERS                                 *\n* R10 ----- ADDRESS OF OUTPUT DCB                                     *\n* R11 ----- GENERAL PURPOSE REGISTER                                  *\n* R12 ----- PRIMARY BASE REGISTER                                     *\n* R13 ----- WORK AREA POINTER/SAVEAREA REGISTER                       *\n* R14-R15 - GENERAL PURPOSE REGISTERS                                 *\n*                                                                     *\n* MACROS USED BY FIDVSMLS --------------------------------------------*\n* SYS1.MACLIB                                                         *\n* ABEND    CLOSE    CONVTOD  CVT      DCB      DCBD     DCBE          *\n* IEESMCA  IGVCAUB  IGVGQE   IHAPSA   IHBINNRA IHBINNRR               *\n* IHB01    OPEN     PUT      STCKCONV STORAGE  SYSSTATE               *\n* VSMLIST  WTO                                                        *\n*                                                                     *\n* SYS1.MODGEN                                                         *\n* IEZBITS  IEZWPL   IHAGDA                                            *\n*                                                                     *\n*CHANGE LOG-----------------------------------------------------------*\n*-----NAME-------\u00a6--DATE--\u00a6--CHANGES----------------------------------*\n*MIKE REEVES     \u00a607/29/99\u00a6INITIAL CODING                             *\n***********************************************************************\n         BAKR R14,0\n         LAE   R12,0(R15,0)            SET UP PROGRAM BASE REGISTER\n         USING FIDVSMLS,R12            INFORM THE ASSEMBLER\n         B     STARTPGM                BRANCH AROUND CONSTANTS\n         DC    AL1(STARTPGM-*),C'('    * ID LENGTH\n         DC    CL8'FIDVSMLS',C'_'      * MODULE ID\n         DC    C'R1.0',C'_'            * RELEASE LEVEL            R1.0\n         DC    C'USE AT YOUR OWN RISK!!!!',C'_' * GENERATED BY\n         DC    CL8'&SYSDATE'           * ASSEMBLY DATE\n         DC    C'@'                    *\n         DC    CL8'&SYSTIME',C')'      * ASSEMBLY TIME\nSTARTPGM LR    R9,R1                   SAVE PARAMETER LIST\n         STORAGE OBTAIN,LENGTH=WORKALEN,SP=0,KEY=8,                    X\n               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         LTR   R15,R15                 CHECK RC\n         BZ    STARTUP                 GOT ZERO, OK\n         BAL   R14,ABEND               DI DI DI DAAAAA!\nSTARTUP  LAE   R13,0(R1,0)             @ THE WORKAREA\n         USING WORKAREA,R13            INFORM THE ASSEMBLER\n         LAE   R13,SAVEAREA            @ THE SAVEAREA\n         MVC   PREVSA,=C'F1SA'         PUT ACRONYM INTO SAVEAREA\n*                                      TO INDICATE STATUS SAVED ON\n*                                      THE LINKAGE STACK.\n         LA    R0,INITWA               INITIALIZE FROM HERE\n         LA    R1,INITWAE              LENGTH\n         LA    R2,WAINIT@              INITIALIZE TO HERE\n         LA    R3,INITWAE              LENGTH\n         MVCL  R2,R0                   INITIALIZE WORKAREA\nOPEN     EQU   *\n         SR    R10,R10                 CLEAR IT\n         LA    R10,SOUTDCB             ADDRESS SOUT DCB\n         USING IHADCB,R10              INFORM THE ASSEMBLER\n         LA    R1,SOUTDCBE             LOAD ADDRESS OF DCBE\n         STCM  R1,B'1111',DCBDCBE      STORE IN DCB\n         OI    DCBBFALN,DCBH0          TELL EM DCBE EXISTS\nOPENSOUT OPEN  ((R10),(OUTPUT)),MF=(E,SOUTOPEN),MODE=31\n         TM    DCBOFLGS,X'10'          OPEN OKAY?\n         BO    OPENOK                  YES-\n         BAL   R14,ABEND\nOPENOK   EQU   *\n         ICM   R3,B'1111',=F'32768'    START WITH 32K\n         MVC   RTRNADDR,RTRN@CSA       SAVE FUNKY RETURN ADDRESS\n         MVC   SUBPTYPE,=C'SQA-'       WE'RE GONNA DO 'SQA' FIRST\nGETSQA@  STORAGE OBTAIN,LENGTH=(3),SP=0,KEY=8,                         X\n               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         LTR   R15,R15    *----------->DID IT WORK\n         BNZ   SQABEND    *----------->NOT! GO ABEND\n         LR    R2,R1      *----------->SAVE ADDRESS OF STORAGE\n         VSMLIST SP=SQA,SPACE=FREE,WKAREA=((2),(3)) GO GET THE SQA MAP\n         LTR   R15,R15    *----------->DID IT WORK\n         BZ    GETCALC    *----------->YEP! GO PROCESS THE MAP\n         CH    R15,=H'4'  *----------->TOOO BIG!\n         BE    REL@SQA    *----------->GO GET A BIGGER BLOCK\n         BAL   R14,ABEND  *----------->BOO! HISS! ABEND RIGHT NOW\nREL@SQA  STORAGE RELEASE,LENGTH=(3),ADDR=(2),                          X\n               COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         SLL   R3,1       *----------->FREED OLD VALUE NOW DOUBLE\n         BE    GETSQA@    *----------->GO BACK AND GET DOUBLED VALUE\nSQABEND  BAL   R14,ABEND  *----------->YUKI DOO! ABEND RIGHT NOW\nGET@CSA  LM    R2,R3,SAVEADDR          WE ALREADY GOT SOME STORAGE\n         L     R14,SAVEADDR            LOAD ADDRESS\n         SR    R15,R15                 CLEAR REG15\n         MVCL  R2,R14                  CLEAR AREA\n         LM    R2,R3,SAVEADDR          RELOAD ADDRESS OF CLEARED STG\n         MVC   RTRNADDR,RTRN@END       SAVE THE FUNK RETURN ADDRESS\n         MVC   SUBPTYPE,=C'CSA-'       TELL EM IT'S 'CSA' NOW\n         B     VSMLSCSA                GO GET THE CSA MAP\nGETCSA@  STORAGE OBTAIN,LENGTH=(3),SP=0,KEY=8,                         X\n               LOC=BELOW,COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         LTR   R15,R15    *----------->DID IT WORK\n         BNZ   CSABEND    *----------->NOT! GO ABEND\n         LR    R2,R1      *----------->SAVE ADDRESS OF STORAGE\nVSMLSCSA VSMLIST SP=CSA,SPACE=FREE,WKAREA=((2),(3)) GO GET THE SQA MAP\n         LTR   R15,R15    *----------->DID IT WORK\n         BZ    GETCALC    *----------->YEP! GO PROCESS THE MAP\n         CH    R15,=H'4'  *----------->TOOO BIG!\n         BE    REL@CSA    *----------->GO GET A BIGGER BLOCK\nCSABEND  BAL   R14,ABEND  *----------->YUKI! DOO! ABEND RIGHT NOW\nREL@CSA  STORAGE RELEASE,LENGTH=(3),ADDR=(2),                          X\n               COND=NO,RELATED=(FREEWORK,'FREE WORK AREA')\n         SLL   R3,1       *----------->FREED OLD VALUE NOW DOUBLE\n         BE    GETCSA@    *----------->GO BACK AND GET DOUBLED VALUE\n         BAL   R14,ABEND  *----------->BOO! HISS! ABEND RIGHT NOW\n*\nGETCALC  EQU   *\n         SR    R1,R1                       SET TO ADDRESS OF PSA\n         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT\n         ICM   R1,B'1111',CVTGDA-CVT(R1)   ADDRESS OF CURRENT GDA\n         MVC   CSASTRT,GDACSA-GDA(R1)      GET BOTTOM OF CSA\n         STM   R2,R3,SAVEADDR          SAVE STORAGE ADDRESS & LENGTH\n         L     R2,4(,R2)               GET ADDRESS OF VSMLIST\n         L     R3,0(,R2)               GET NUMBER OF SUBPOOLS\n         LA    R2,4(,R2)               BUMP TO FIRST ENTRY\nSUBPCVT  L     R4,8(,R2)               GET NUMBER OF SEGMENTS\n         SR    R5,R5                   CLEAR\n         IC    R5,2(R2)                LOAD SUBPOOL\n         CVD   R5,DWORK                CONVERT TO DECIMAL\n         UNPK  SUBPOOL#(4),DWORK+6(2)  UNPACK TO MESSAGE\n         OC    SUBPOOL#(4),=C'0000'    TRANSLATE TO CHAR\n         MVC   SUBPOOL@,SUBPTYPE       MOVE IN TYPE 'CSA' OR 'SQA'\n         IC    R5,3(,R2)               GET STORAGE PROTECT\n         SRL   R5,4                      KEY IN R5\n         STC   R5,SUBPOOL@+2               SAVE IT AND\n         NI    SUBPOOL@+2,X'0F'\n         TR    SUBPOOL@+2(1),HEXTOCHR     TRANSLATE TO CHAR 0-F\n         MVC   SUBPOOL@(2),=C'K-'      INDICATE KEY\n         LA    R2,12(,R2)              BUMP TO FIRST ENTRY\nSUBPLOOP EQU   *\n         LM    R5,R7,0(R2)             LOAD ADDRESS AND LENGTH\n         LA    R2,12(,R2)              BUMP PAST ENTRY\n         LTR   R7,R7                   GOT FREE SEGMENTS\n         BNZ   RECALC                  YEP! GO GET EM\n         STM   R5,R6,SAVECUR@          NOT SO SAVE IT\n         BAL   R14,GET_CSATKR            AND PROCESS GQE/CUAB CHAIN\n         B     CALCBUMP                NEXT ENTRY\nRECALC   EQU   *                  GO HERE TO CALCULATE ALLOCATED AREAS\n         LM    R8,R9,0(R2)             LOAD UP FREE AREA AND LENGTH\n         CLR   R5,R8                   COMPARE TO START OF AREA\n         BE    CALCCONT                EQUAL SO BUMP PAST FREE SPACE\nCALCNEXT EQU   *                  GO HERE TO CALCULATE NEXT AREA\n         SLR   R8,R5                   GET THE LENGTH IN R8\n         ST    R5,SAVECUR@             SAVE IT\n         ST    R8,SAVECUR#               AND CALL\n         SLR   R6,R8                   DECREMENT LENGTH VALUE\n         ALR   R5,R8                   BUMP PAST FREE AREA\n         BAL   R14,GET_CSATKR              THE GQE/CAUB CHAIN ROUTINE\n         B     RECALC                  LOAD UP ADDRESS\nCALCCONT SLR   R6,R9                   DECREMENT LENGTH VALUE\n         ALR   R5,R9                   BUMP PAST FREE AREA\n         LA    R2,8(,R2)               POINT TO NEXT ENTRY/EXTENT\n         BCT   R7,RECALC          FREE EXTENT SO LOOP BACK TO RECALC\n         LTR   R6,R6\n         BZ    CALCBUMP\n         STM   R5,R6,SAVECUR@          NOT SO GO PROCEXX\n         BAL   R14,GET_CSATKR            THE GQE/CAUB CHAIN\nCALCBUMP BCT   R4,SUBPLOOP             STILL IN THIS SUBPOOL\n         BCT   R3,SUBPCVT              STILL IN 'CSA' OR 'SQA'\n         B     RTRNADDR                DONE SO DO THE FUNKY RETURN\n*\nGET_CSATKR EQU *\n         BAKR  R14,0                       SAVE THE STUFF\n         LM    R5,R6,SAVECUR@              LOAD UP ADDRESS/LENGTH\n         BCTR  R6,0                        DECREMENT R6\n         ALR   R6,R5\n         LR    R14,R6\n         LR    R15,R5\n         SRL   R14,16\n         SRL   R15,16\n         STM   R14,R15,GQE_BDY\n*                                          R5 HOLDS LOW BOUNDRY\n         SR    R1,R1                       SET TO ADDRESS OF PSA\n         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT\n         ICM   R1,B'1111',CVTGDA-CVT(R1)   ADDRESS OF CURRENT GDA\n         ICM   R1,B'1111',GDAGQAT_INDEX-GDA(R1) GQAT INDEX\n         LR    R8,R5                       PRIME ADDRESS\n         SRDL  R8,23                       HIGH 9 BITS\n         SLL   R8,2                        INDEX ADDRESS\n         L     R1,0(R8,R1)                 LOAD ADDRES OF GQAT\n         SR    R8,R8                       CLEAR R8\n         SLDL  R8,7                        GET GQE INDEX\n         SLL   R8,2                        INDEX ADDRESS\n         L     R7,4(R8,R1)                 GQE TABLE\n         LTR   R7,R7                       IS IT THE LAST ENTRY?\n         BNZ   LOOP_GQE                    NOT! GO PROCESS GQE/CAUB\n         B     EXIT_GQE                    GO BACK FOR MORE\n         USING GQE,R7\nLOOP_GQE EQU   *\n         CL    R5,GQE_AREA                 IS THE AREA TOO SMALL?\n         BH    NEXT_GQE                      UH HUH! NEXT\n         CL    R6,GQE_AREA                 IS THE AREA TO BIG?\n         BL    NEXT_GQE                      UH HUH! NEXT\n         BAL   R14,UNPK_GQE                GO PRINT GQE/CAUB\nNEXT_GQE L     R7,GQE_NEXT                 GET NEXT GQE\n         LTR   R7,R7                       IS IT LAST GQE\n         BNZ   LOOP_GQE                    NOT SO LOOP\nHBDY_GQE EQU   *\n         LM    R14,R15,GQE_BDY\n         CLR   R14,R15\n         BE    EXIT_GQE\n         LA    R15,1(,R15)\n         STM   R14,R15,GQE_BDY\n         SRL   R5,16\n         LA    R5,1(,R5)\n         SLL   R5,16\n         SR    R1,R1                       SET TO ADDRESS OF PSA\n         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT\n         ICM   R1,B'1111',CVTGDA-CVT(R1)   ADDRESS OF CURRENT GDA\n         ICM   R1,B'1111',GDAGQAT_INDEX-GDA(R1) GQAT INDEX\n         LR    R8,R5                       PRIME ADDRESS\n         SRDL  R8,23                       HIGH 9 BITS\n         SLL   R8,2                        INDEX ADDRESS\n         L     R1,0(R8,R1)                 LOAD ADDRES OF GQAT\n         SR    R8,R8                       CLEAR R8\n         SLDL  R8,7                        GET GQE INDEX\n         SLL   R8,2                        INDEX ADDRESS\n         L     R7,4(R8,R1)                 GQE TABLE\n         LTR   R7,R7\n         BNZ   LOOP_GQE\nEXIT_GQE PR\n*\nUNPK_GQE EQU   *\n         BAKR  R14,0\n         ST    R7,GQE_SAVE                 SAVE GQE ADDRESS\n         UNPK  GQEADDR(9),GQE_SAVE(5)      UNPACK TO MESSAGE\n         NC    GQEADDR(8),=X'0F0F0F0F0F0F0F0F'\n         TR    GQEADDR(8),HEXTOCHR         TRANSLATE TO CHAR\n         MVI   GQEADDR+8,C' '              BLANK TRASH BYTE\n         UNPK  CAUBADDR(9),GQE_CAUB(5)     UNPACK TO MESSAGE\n         NC    CAUBADDR(8),=X'0F0F0F0F0F0F0F0F'\n         TR    CAUBADDR(8),HEXTOCHR        TRANSLATE TO CHAR\n         MVI   CAUBADDR+8,C' '             BLANK TRASH BYTE\n         MVI   CSA_IND,C'S'\n         TM    GQE_RETADDR_BYTE3,GQE_CSA   CSA\n         BNO   LDCAUB@\n         MVI   CSA_IND,C'C'\nLDCAUB@  L     R1,GQE_CAUB                 ADDRESS OF CAUB\n         USING CAUB,R1\n         MVC   JOBNAME,CAUB_JOBNAME        MOVE IN JOBNAME\n         MVC   JOBID,CAUB_JOBID            JOB NUMBER\n         CLC   JOBID,=XL8'0000000000000000'\n         BNE   UNPKASID\n         MVC   JOBID,=C'........'\nUNPKASID UNPK  JOBASID(5),CAUB_ASN(3)      UNPACK TO MESSAGE\n         NC    JOBASID(4),=X'0F0F0F0F0F0F0F0F'\n         TR    JOBASID(4),HEXTOCHR         TRANSLATE TO CHAR\n         MVI   JOBASID+4,C' '              BLANK TRASH BYTE\n         MVC   OWNERACT,=X'C183'\n         CLC   CAUB_UNOWNED_DATE,=F'0'\n         BE    UNPK_AR@\n         MVC   OWNERACT,=C'OG'\n         DROP  R1\nUNPK_AR@ UNPK  AREADDR@(9),GQE_AREA(5)     UNPACK TO MESSAGE\n         NC    AREADDR@(8),=X'0F0F0F0F0F0F0F0F'\n         TR    AREADDR@(8),HEXTOCHR        TRANSLATE TO CHAR\n         MVI   AREADDR@+8,C' '             BLANK TRASH BYTE\n         UNPK  AREALEN#(9),GQE_SIZE(5)     UNPACK TO MESSAGE\n         NC    AREALEN#(8),=X'0F0F0F0F0F0F0F0F'\n         TR    AREALEN#(8),HEXTOCHR        TRANSLATE TO CHAR\n         MVI   AREALEN#+8,C' '             BLANK TRASH BYTE\n         XC    TODSTAMP,TODSTAMP\n         MVC   TODSTAMP(4),GQE_GMTIME\n         CLC   TODSTAMP(4),=F'0'           CHECK FOR 0S\n         BE    UNPK_IPL\n         STCKCONV STCKVAL=TODSTAMP,CONVVAL=OUTAREA,TIMETYPE=DEC,       X\n               DATETYPE=MMDDYYYY\n         B     UNPK_CVD\n* PUT IN THE IPL DATE/TIME FOR *SYSTEM* STUFF WITH 0S IN GQE_GMTIME\nUNPK_IPL SR    R1,R1                       SET TO ADDRESS OF PSA\n         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT\n         ICM   R1,B'1111',CVTSMCA-CVT(R1)  ADDRESS OF CURRENT GDA\n         MVC   INBINTME,SMCAITME-SMCABASE(R1) GET SYSTEM ID\n         MVC   INDATE,SMCAIDTE-SMCABASE(R1) MOVE IN IPL DATE\n         CONVTOD CONVVAL=INTOD,            CONVERT TO TOD VALUE        X\n               TODVAL=TODSTAMP,                                        X\n               TIMETYPE=BIN,               SMCAITME IS IN BINARY       X\n               DATETYPE=YYDDD              SMCAIDTE IS JULIAN\n         STCKCONV STCKVAL=TODSTAMP,        CONVERT TO DEC TIME         X\n               CONVVAL=OUTAREA,                                        X\n               TIMETYPE=DEC,               DECIMAL TIME VALUE          X\n               DATETYPE=MMDDYYYY           READABLE DATE FORMAT\n* MOVE THE DATE AND TIME INTO FIELDS FOR PRINTING\nUNPK_CVD MVC   ALLOCDAT,DATEPTRN           SET UP FOR EDITING\n         ED    ALLOCDAT(11),TODDATE        MAKE IT LOOK LIKE DATE\n         MVI   ALLOCDAT,C' '               CLEAR FIRST BYTE\n         MVC   ALLOCTIM,TIMEPTRN           SET UP FOR EDITING\n         ED    ALLOCTIM(9),TODTIME         MAKE IT LOOK LIKE TIME\n         MVI   ALLOCTIM,C' '               CLEAR FIRST BYTE\n         SR    R1,R1                       SET TO ADDRESS OF PSA\n         ICM   R1,B'1111',FLCCVT-PSA(R1)   ADDRESS OF CURRENT CVT\n         ICM   R1,B'1111',CVTSMCA-CVT(R1)  ADDRESS OF CURRENT GDA\n         MVC   SMFID,SMCASID-SMCABASE(R1)  GET SYSTEM ID\n         PUT   SOUTDCB,RECAREA             WRITE THE RECORD\n         PR                                RETURN FOR MORE\n         DROP  R7\n*\nRETURN   EQU   *\n         CLOSE ((R10)),MF=(E,SOUTCLOS),MODE=31\n         LAE   R10,0(R13,0)            ADDRESS TO FREE\n         STORAGE RELEASE,LENGTH=WORKALEN,ADDR=(R10),SP=0,KEY=8,        X\n               COND=NO,RELATED=(GETWORK,'OBTAIN WORK AREA')\n         LTR   R15,R15                 CHECK RC\n         BZ    SETRC                   GOT ZERO, OK\n         BAL   R14,ABEND               THIS STUFF JUST WON'T CUT IT!\nSETRC    EQU   *\n         SLR   R15,R15                 SET RC TO ZERO\n         PR\nRTRN@CSA B     GET@CSA\nRTRN@END B     RETURN\nABEND    LA    R1,FIDVSMLS              GET THE BASE ADDRESS\n         SLR   R14,R1                   GET THE OFFSET\n         ST    R14,RTRNADDR             SAVE IT\n         LA    R1,VSMLISTA              LOAD WTO PARAMETER LIST\n         USING WPLLGH,R1                ADDRESSABILITY\n         UNPK  WPLTXT+41(5),RTRNADDR+2(3) TRANSLATE THIS BUBBA\n         TR    WPLTXT+41(5),HEXTOCHR    TRANSLATE TO CHAR\n         MVI   WPLTXT+45,C' '           OFFSET PLEASE\n         ST    R15,RTRNADDR\n         UNPK  WPLTXT+50(9),RTRNADDR(5) TRANSLATE THIS BUBBA\n         TR    WPLTXT+50(8),HEXTOCHR    TRANSLATE TO CHAR\n         MVI   WPLTXT+58,C' '           OFFSET PLEASE\n         WTO   MF=(E,(1))               WTO THE MESSAGE\n         ABEND 1000,DUMP                ABEND USER 1000\n         LTORG\nTIMEPTRN DC    X'F021217A21217A2121'\nDATEPTRN DC    X'F021216121216121212121'\n*EXTOCHR EQU   *-C'0'\nHEXTOCHR DC    C'0123456789ABCDEF'\n         DS    0D\nINITWA   EQU   *\n         WTO   'FIDVSMLS - VSMLIST HAS FAILED @ FIDVSMLS+XXXX R15=XXXXX-\n               XXX ',MF=L\n         OPEN  (,),MF=L,MODE=31\n         CLOSE (,),MF=L,MODE=31\n         DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=VSMLIST,             X\n               RECFM=FB,LRECL=132\n         DCBE  RMODE31=BUFF            DCB EXTENSION\n         DS    0D\nRECAREA@ DC    CL2' '\nCLR@AREA DC    CL5'.... '\n         DC    CL9'VSMLIST* '\n         DC    CL9'........ '\n         DC    CL5'.. . '\n         DC    CL9' '\n         DC    CL9' '\n         DC    CL8' '\n         DC    CL11' '\n         DC    CL10'         .'\n         DC    CL9' '\n         DC    CL9' '\n         DC    CL4' '\nCLR@AREL EQU   *-CLR@AREA\n         DC    CL(132-(*-RECAREA@))' '\nINITWAE  EQU   *-INITWA\nWORKAREA DSECT\nSAVEAREA DS    18F                     REGISTER SAVEAREA\nPREVSA   EQU   SAVEAREA+4,4            PREVIOUS SAVEAREA\nRTRNADDR DS    F                       RETURN ADDRESS\nSUBPTYPE DS    CL4\nSUBPOOL# DS    CL4\nSAVEADDR DS    D\nINTOD    DS    0F                      TIME CONVERSION VARS\nINBINTME DS    F                       *\n         DC    F'0'                    *\nINDATE   DS    F                       *\n         DS    F                       *\nTODSTAMP DS    D                       TOD  CLOCK  VALUE\nOUTCONV  DS    2D                      *\nOUTAREA  DS    3F                      CONVERTED  VALUE\n         ORG   OUTAREA\nTODTIME  DS    F\n         DS    F\nTODDATE  DS    F\nHIGHBDY  DS    F\nREQ_LENG DS    F\nSAVECUR@ DS    F\nSAVECUR# DS    F\nSAVENEW@ DS    F\nSAVENEW# DS    F\nDWORK    DS    D\nWAINIT@  EQU   *\nVSMLISTA WTO   'FIDVSMLS - VSMLIST HAS FAILED @ FIDVSMLS+XXXX R15=XXXXX-\n               XXX ',MF=L\nSOUTOPEN OPEN  (,),MF=L,MODE=31\nSOUTCLOS CLOSE (,),MF=L,MODE=31\nSOUTDCB  DCB   DSORG=PS,DEVD=DA,MACRF=(PM),DDNAME=VSMLIST,             X\n               RECFM=FB,LRECL=132\nSOUTDCBE DCBE  RMODE31=BUFF            DCB EXTENSION\n         DS    0D\nRECAREA  DC    CL2' '\nJOBASID  DC    CL4' ',C' '\nJOBNAME  DC    CL8' ',C' '\nJOBID    DC    CL8' ',C' '\nOWNERACT DC    CL2' ',C' '\nCSA_IND  DC    CL1' ',C' '\nAREADDR@ DC    CL8' ',C' '\nAREALEN# DC    CL8' ',C' '\nSUBPOOL@ DC    CL8' '\nALLOCDAT DC    CL11' '\nALLOCTIM DC    CL9' ',C'.'\nCAUBADDR DC    CL8' ',C' '\nGQEADDR  DC    CL8' ',C' '\nSMFID    DC    CL4' '\nRECAREAL EQU   *-RECAREA\n         DC    CL(132-RECAREAL)' '\nINITWA@  EQU   *-WAINIT@\nWORKALEN EQU   *-WORKAREA              WORK AREA LENGTH\nGQE_BDY  DS    0D\nGQE_HIGH DS    F\nGQE_LOW  DS    F\nGQE_SAVE DS    F\nCSASTRT  DS    F\nCSALOW   DS    F\nNEXTSA   EQU   8                       POINTER TO PREVIOUS SAVEAREA\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nOFF@R0   EQU   4*0\nOFF@R1   EQU   4*1\nOFF@R2   EQU   4*2\nOFF@R3   EQU   4*3\nOFF@R4   EQU   4*4\nOFF@R5   EQU   4*5\nOFF@R6   EQU   4*6\nOFF@R7   EQU   4*7\nOFF@R8   EQU   4*8\nOFF@R9   EQU   4*9\nOFF@R10  EQU   4*10\nOFF@R11  EQU   4*11\nOFF@R12  EQU   4*12\nOFF@R13  EQU   4*13\nOFF@R14  EQU   4*14\nOFF@R15  EQU   4*15\n         IEZWPL\n         DCBD  DSORG=(QS),DEVD=DA\n         CVT   DSECT=YES\n         IHAGDA\n         IHAPSA\n         IGVCAUB\n         IGVGQE\n         IEESMCA\n         END   FIDVSMLS\n/*\n//LINK.SYSLIN DD *\n INCLUDE OBJECT\n ENTRY FIDVSMLS\n NAME FIDVSMLS(R)\n/*\n//*\n//VSMLIST EXEC PGM=FIDVSMLS,COND=(4,LT)\n//STEPLIB  DD DSN=your.load.library,DISP=SHR\n//*\n//* PUT YOUR OUTPUT DATASET IN VSMLIST DD BELOW\n//* FOR SAS REPORTING\n//VSMLIST  DD SYSOUT=*\n//SYSUDUMP DD SYSOUT=*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT650/FILE650.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT650", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}