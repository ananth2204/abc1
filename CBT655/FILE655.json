{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220012534000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE655.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE655.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x05'", "DS1TRBAL": "b'\\x92\\xc2'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x04\\xa0\\x00\\x08\\x04\\xa0\\x00\\r\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00Q\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:51:00", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-463"}, "text": "REGULAR CBT TAPE - VERSION 463    FILE:  655\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT463.FILE655\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 6 MEMBERS COUNTED; CUMULATIVE SIZE IS 1,991 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   11/09/03    00:51:34    GMT-5:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE1": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x15\\x01\\x031?\\x01\\x031?\\x00H\\x00&\\x00&\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:48:15", "lines": 38, "newlines": 38, "modlines": 0, "user": "SBGOLOB"}, "text": "The JCL to start the process is CATCLRJC.txt\n   You'll have to change the EXEC libraries in the JCL, the\n   output file name, and supply your master catalog name in the\n   MASTCAT symbolic.  Review for \"??\" to customize for your site.\n\nREXX EXEC CATCLJCL is the first EXEC.\n   This EXEC scans your master catalog looking for every user\n   catalog in it.  It builds a JCL file that will build a PDS\n   that includes a PROC and a JOB for every user catalog found in\n   your master catalog.  Review for \"??\" to customize for your\n   site.\n\nREXX EXEC CATCLR3 is the second EXEC.\n   This EXEC scans a specific user catalog looking for disk file\n   catalog entries that do not exist on disk.  The EXEC builds a\n   file of IDCAMS DELETE ???  NOSCRATCH statements to be input\n   into an IDCAMS step.\n\n   No deletes are done internally in this process.  It basically\n   identifies the files fitting the profile (cataloged but do not\n   exist) and generates IDCAMS statements that you can choose to\n   run or not run at your discretion.\n\n   Customize the JOB in member CATCLRJC.txt and run it.  The\n   output file is an IEBUPDTE JOB.  Review this JOB.  As long as\n   you adequately customized the CATCLJCL EXEC, this should be\n   ready to run.  The PDS built will contain a member for each\n   user catalog found in your master catalog.  The member names\n   are based on the last node of your usercat names.  If you have\n   any catalogs whose last node is identical, you should edit the\n   IEBUPDTE JOB to make any duplicate unique.\n\n   That's about it.  Let me know if you have any problems using\n   it.\n\n   Thanks,\n       Dave K.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE655": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04?\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00Q\\x00\\x05\\x00\\x05\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf6\\xf3@@@'", "ispf": {"version": "04.63", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:51:00", "lines": 5, "newlines": 5, "modlines": 0, "user": "CBT-463"}, "text": "//***FILE 655 is from David Kopischke and contains REXX execs to    *   FILE 655\n//*           help you clean up your MVS catalogs.                  *   FILE 655\n//*                                                                 *   FILE 655\n//*           email:  dgkopischke@oppenheimerfunds.com              *   FILE 655\n//*                                                                 *   FILE 655\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CATCLJCL": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00B\\x03-\\x03-\\x00\\x00\\xc4\\xc1\\xe5\\xc9\\xc4\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:42:00", "lines": 813, "newlines": 813, "modlines": 0, "user": "DAVIDK"}, "text": "/* --------------------------------- REXX ---------------------------------- */\n/*  CATCLJCL Exec      THIS IS A UTILITY EXEC                                */\n/* ------------------------------------------------------------------------- */\n/* Author: David G. Kopischke                                                */\n/* Notes:  Catalog Scan REXX EXEC.                                           */\n/* Usage:  This software may be distributed freely to anyone. You may not    */\n/*         sell this software nor package it with software that is sold for  */\n/*         profit.                                                           */\n/* ------------------------------------------------------------------------- */\n/* REXX EXEC to create JCL to run the catalog clear process.                 */\n/*                                                                           */\n/* ------------------------------------------------------------------------- */\n/* Function: Collect names of every user catalog attached to the master      */\n/*           catalog. Create JCL to run the catalog clear process on each    */\n/*           of the individual user catalogs.                                */\n/*                                                                           */\n/* ------------------------------------------------------------------------- */\n/* *************************** REVISION HISTORY **************************** */\n/* ACID  +   DATE   + Change Description                                     */\n/* ------+----------+------------------------------------------------------- */\n/* TSDGK +05/22/2000+ Initial Version                                        */\n/* ------+----------+------------------------------------------------------- */\n/*       +          +                                                        */\n/* ------+----------+------------------------------------------------------- */\n\nPARSE UPPER ARG MastrCat Trace .\n\nIF Trace=\"Y\" THEN DO\n   SAY \" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \"\n   SAY \" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \"\n   SAY \" \"\n   SAY \"                            TRACING IS ON \"\n   SAY \" \"\n   SAY \" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \"\n   SAY \" !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! \"\n   SAY \" \"\n   TRACE ?I                                  /* Turn Tracing ON              */\n /*TRACE ?R */                               /* Turn Tracing ON              */\nEND  /* IF */\n\nSAY \"Master Catalog Name=\"MastrCat\nSAY \" \"\nMaxRC=0\n\n/* ------------------------------------------------------------------------- */\n/* Collect the name of every User Catalog attached to the Master Catalog.    */\n/* ------------------------------------------------------------------------- */\n\"PROFILE NOPREFIX\"\nZ=OUTTRAP('CatList.')\n\"LISTCAT CATALOG('\"MastrCat\"') USERCATALOG ALL\" /* Collect the names of all   */\n                                                /* User Catalogs.             */\nRetCode=rc\nZ=OUTTRAP('OFF')\nIF RetCode \\= 0 THEN DO\n   SAY \"************************************************************\"\n   SAY \"An ERROR was detected performing LISTCAT on the Master Catalog\"\n   SAY \"   The return code from LISTCAT is: \" RetCode\n   SAY \"************************************************************\"\n   SAY \"   The number of entries in the CatList STEM is: \"CatList.0\n   SAY \"   The entries in the CatList STEM are:\"\n   SAY \" \"\n   DO i=1 TO CatList.0\n      SAY \"STEM Entry: \"i \"      Data: \"CatList.i\n      IF i>10000 THEN DO\n         i=CatList.0\n      END  /* IF */\n   END  /* DO */\n   SAY \"************************************************************\"\n   MaxRC=12\n   SIGNAL EXIT\nEND  /* IF */\nIF CatList.0 <= 0 THEN DO\n   SAY \"************************************************************\"\n   SAY \"No User Catalogs were extracted by LISTCAT\"\n   SAY \"   The number of entries in the Catalog STEM is: \" CatList.0\n   SAY \"************************************************************\"\n   MaxRC=12\n   SIGNAL EXIT\nEND  /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Get more information about the master catalog.                            */\n/* ------------------------------------------------------------------------- */\nRetCode=File_LISTDSI(MastrCat)\nIF RetCode /= 0 THEN DO\n   SAY \"************************************************************\"\n   SAY \"An Error was encountered in LISTDSI processing on the \"MastrCat\n   SAY \"   file. The return code from the function call is: \"RetCode\n   SAY \"************************************************************\"\n   MaxRC=12\n   SIGNAL EXIT\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Extract necessary lines from the STEM and save in a new STEM.             */\n/* ------------------------------------------------------------------------- */\nUserCatList.1=MastrCat SYSVOLUME\nj=1\nDO i=1 TO CatList.0\n   PARSE VAR CatList.i p1 p2 p3 .\n   SELECT\n     WHEN p1 = \"USERCATALOG\" THEN DO          /* Save the User Catalog Name  */\n          UserCatName=p3\n     END  /* WHEN */\n     WHEN SUBSTR(p1,1,6) = \"VOLSER\" THEN DO\n          j=j+1\n          UserCatList.j=UserCatName,          /* Store cat name and volser   */\n                        SUBSTR(p1,19,6)\n     END  /* WHEN */\n     OTHERWISE\n          ITERATE\n   END  /* SELECT */\nEND  /* DO */\nUserCatList.0=j\n\n/* ------------------------------------------------------------------------- */\n/* DROP CatList STEM to free up some storage.                                */\n/* ------------------------------------------------------------------------- */\nDROP CatList.\n\n/* ------------------------------------------------------------------------- */\n/* Display information about the catalog processing done so far.             */\n/* ------------------------------------------------------------------------- */\nSAY \" \"\nSAY \"There are \"UserCatList.0\" entries in the User Catalog STEM\"\nSAY \" \"\nSAY \"These are all of the catalogs found:\"\nSAY \"==================================================================\"\nDO i=1 TO UserCatList.0\n   PARSE VAR UserCatList.i UserCatName UserCatVol\n   SAY \"STEM Entry: \"RIGHT(i,3,\" \"),\n       \"   Catalog Name: \"LEFT(UserCatName,20,\" \"),\n       \"   Catalog Vol Ser: \"UserCatVol\nEND  /* DO */\nSAY \"==================================================================\"\nSAY \" \"\n\n/* ------------------------------------------------------------------------- */\n/* Build JCL to Execute CATCLR EXEC on each of the individual User Catalogs. */\n/* ------------------------------------------------------------------------- */\nJCL.=\"\"\nx=0\nx=x+1;JCL.x=\"//???????? JOB (00000),'CATALOG CLEAR JOBS',\"\nx=x+1;JCL.x=\"//             MSGCLASS=R,\"\nx=x+1;JCL.x=\"//             CLASS=K,\"\nx=x+1;JCL.x=\"//             REGION=5M,\"\nx=x+1;JCL.x=\"//             NOTIFY=&SYSUID\"\nx=x+1;JCL.x=\"//*\"\nx=x+1;JCL.x=\"//*****************************************************//\"\nx=x+1;JCL.x=\"//* Author: David G. Kopischke                        *//\"\nx=x+1;JCL.x=\"//* Notes: JCL to run catalog clear REXX EXEC.        *//\"\nx=x+1;JCL.x=\"//* Usage: This JOB and all related software may be   *//\"\nx=x+1;JCL.x=\"//*        distributed freely to anyone. You may not  *//\"\nx=x+1;JCL.x=\"//*        sell this software nor package it with     *//\"\nx=x+1;JCL.x=\"//*        software that is sold for profit.          *//\"\nx=x+1;JCL.x=\"//* PROPERTY OF OPPENHEIMRFUNDS, INC.                 *//\"\nx=x+1;JCL.x=\"//* COPYRIGHT OPPENHEIMERFUNDS, INC. 2003             *//\"\nx=x+1;JCL.x=\"//*****************************************************//\"\nx=x+1;JCL.x=\"//*\"\nx=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\nx=x+1;JCL.x=\"//* CREATE THE JCL LIBRARY                            *//\"\nx=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n/* ------------------------------------------------------------------------- */\n/* Create the JCL Library                                                    */\n/* ------------------------------------------------------------------------- */\nx=x+1;JCL.x=\"//CREATE  EXEC PGM=IEBGENER\"\nx=x+1;JCL.x=\"//SYSPRINT DD  SYSOUT=*\"\nx=x+1;JCL.x=\"//SYSIN    DD  DUMMY\"\nx=x+1;JCL.x=\"//SYSUT1   DD  DUMMY,DCB=(DSORG=PO,LRECL=80,BLKSIZE=480)\"\nx=x+1;JCL.x=\"//SYSUT2   DD  DSN=???.?????.JCL.CATCLEAR($DUMMY),\"\nx=x+1;JCL.x=\"//             DISP=(,CATLG,DELETE),\"\nx=x+1;JCL.x=\"//             UNIT=SYSDA,\"\nx=x+1;JCL.x=\"//             SPACE=(TRK,(15,15,45))\"\nx=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n/* ------------------------------------------------------------------------- */\n/* Create the JCL Library and load it.                                       */\n/* ------------------------------------------------------------------------- */\nx=x+1;JCL.x=\"//ADDEMALL EXEC PGM=IEBUPDTE,PARM=MOD\"\nx=x+1;JCL.x=\"//SYSPRINT DD  SYSOUT=*\"\nx=x+1;JCL.x=\"//SYSUT1   DD  DSNAME=???.?????.JCL.CATCLEAR,\"\nx=x+1;JCL.x=\"//             DISP=OLD\"\nx=x+1;JCL.x=\"//SYSUT2   DD  DSNAME=???.?????.JCL.CATCLEAR,\"\nx=x+1;JCL.x=\"//             DISP=OLD\"\nx=x+1;JCL.x=\"//SYSIN    DD  DATA\"\n/* ------------------------------------------------------------------------- */\n/*  Create CATCLR1 PROC for scanning and building IDCAMS DELETE Statements   */\n/*  for files that are cataloged but not present on the volume it is         */\n/*  cataloged to.                                                            */\n/* ------------------------------------------------------------------------- */\nx=x+1;JCL.x=\"./        ADD   LIST=ALL,NAME=CATCLR1,LEVEL=01,SOURCE=0\"\nx=x+1;JCL.x=\"./     NUMBER   NEW1=10,INCR=10\"\nx=x+1;JCL.x=\"//CATCLR1 PROC TYPE=,\"\nx=x+1;JCL.x=\"//             USERCAT=,\"\nx=x+1;JCL.x=\"//             VOL=,\"\nx=x+1;JCL.x=\"//             DETAILS='N',\"\nx=x+1;JCL.x=\"//             TRACE='N',\"\nx=x+1;JCL.x=\"//*            USERID=,\"\nx=x+1;JCL.x=\"//             SOUT='R,HOLD=YES'\"\nx=x+1;JCL.x=\"//*\"\nx=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\nx=x+1;JCL.x=\"//* EXECUTE CATCLEAR REXX EXEC TO IDENTIFY FILES THAT *//\"\nx=x+1;JCL.x=\"//* ARE CATALOGED BUT NOT ON THE VOLUME.              *//\"\nx=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\nx=x+1;JCL.x=\"//TSOBATCH EXEC PGM=IKJEFT01,DYNAMNBR=99,\"\nx=x+1;JCL.x=\"// PARM='%CATCLR3 &TYPE &USERCAT &VOL &DETAILS &TRACE'\"\nx=x+1;JCL.x=\"//ISPLOG   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\"\nx=x+1;JCL.x=\"//SYSPROC  DD  DSN=????.ISPF.ISPCLIB,DISP=SHR\"\nx=x+1;JCL.x=\"//         DD  DSN=????.LCLMODS.ISPCLIB,DISP=SHR\"\nx=x+1;JCL.x=\"//ISPLLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\"\nx=x+1;JCL.x=\"//SYSLBC   DD  DSN=SYS1.BRODCAST,DISP=SHR\"\nx=x+1;JCL.x=\"//SYSUADS  DD  DSN=SYS1.UADS,DISP=SHR\"\nx=x+1;JCL.x=\"//SYSTERM  DD  TERM=TS,SYSOUT=&SOUT\"\nx=x+1;JCL.x=\"//SYSIN    DD  TERM=TS,SYSOUT=&SOUT\"\nx=x+1;JCL.x=\"//SYSTSPRT DD  SYSOUT=&SOUT\"\nx=x+1;JCL.x=\"//SYSTSIN  DD  DUMMY\"\nx=x+1;JCL.x=\"//*\"\n\n/* ------------------------------------------------------------------------- */\n/* Step through the User Catalog STEM and build JCL to execute the Catalog   */\n/* Clear REXX Exec against each user catalog found (including the master).   */\n/* ------------------------------------------------------------------------- */\nDO i=1 TO UserCatList.0\n   PARSE VAR UserCatList.i UserCatName UserCatVol\n   StartPos=LASTPOS('.',UserCatName)+1\n   Len=LENGTH(UserCatName)-StartPos+1\n   CatShortName=SUBSTR(UserCatName,StartPos,Len)\n   x=x+1;JCL.x=\"./        ADD   LIST=ALL,NAME=\"||,\n               CatShortName\",\"||,\n               \"LEVEL=01,SOURCE=0\"\n   x=x+1;JCL.x=\"./     NUMBER   NEW1=10,INCR=10\"\n   x=x+1;JCL.x=\"//?????\"RIGHT(i,3,\"0\")\" JOB (070000),'CAT CLR - \"||,\n               CatShortName\"',\"\n   x=x+1;JCL.x=\"//             MSGCLASS=R,\"\n   x=x+1;JCL.x=\"//             CLASS=K,\"\n   x=x+1;JCL.x=\"//             REGION=5M,\"\n   x=x+1;JCL.x=\"//             NOTIFY=&SYSUID\"\n   x=x+1;JCL.x=\"//*\"\n   x=x+1;JCL.x=\"//PROCLIB JCLLIB ORDER=???.?????.JCL.CATCLEAR\"\n   x=x+1;JCL.x=\"//*\"\n   x=x+1;JCL.x=\"//CATCLEAR EXEC CATCLR1,\"\n   x=x+1;JCL.x=\"//         TYPE=T,             <== D = DELETES, T = LISTCATS\"\n   x=x+1;JCL.x=\"//*        USERCAT='????'      <== CATALOG NAME\"\n   x=x+1;JCL.x=\"//         USERCAT='\"UserCatName\"',\"\n   x=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n   x=x+1;JCL.x=\"//* THE VOL PARAMETER IS INTENDED TO ALLOW YOU TO     *//\"\n   x=x+1;JCL.x=\"//* TARGET SPECIFIC VOLUMES TO DELETE FILES FROM.     *//\"\n   x=x+1;JCL.x=\"//* THIS DOES NOT WORK YET.                           *//\"\n   x=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n   x=x+1;JCL.x=\"//         VOL='WRK',          <== VOLUME(S) TO TARGET\"\n   x=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n   x=x+1;JCL.x=\"//* IF YOU CHANGE DETAILS TO Y, YOU WILL GET INFO ON  *//\"\n   x=x+1;JCL.x=\"//* EVERY FILE FOUND IN THE CATALOG. COULD BE LOTS OF *//\"\n   x=x+1;JCL.x=\"//* OUTPUT.                                           *//\"\n   x=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n   x=x+1;JCL.x=\"//         DETAILS='N',        <== REPORT DISPLAYS DETAILS\"\n   x=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n   x=x+1;JCL.x=\"//* IF YOU CHANGE TRACE TO Y, YOU WILL INVOKE AN      *//\"\n   x=x+1;JCL.x=\"//* INTERMEDIATE TRACE AT THE START OF THE EXEC.      *//\"\n   x=x+1;JCL.x=\"//* COULD BE LOTS OF OUTPUT.                          *//\"\n   x=x+1;JCL.x=\"//* ------------------------------------------------- *//\"\n   x=x+1;JCL.x=\"//         TRACE='N',          <== TRACE THE EXEC\"\n   x=x+1;JCL.x=\"//         SOUT='R,FREE=CLOSE' <== REPORT OUTPUT PARMS\"\n   x=x+1;JCL.x=\"//*\"\nEND  /* DO */\n\n/* ------------------------------------------------------------------------- */\n/*  Add the IEBUPDTE Delimiter as the last item in the JCL STEM.             */\n/* ------------------------------------------------------------------------- */\nx=x+1;JCL.x=\"/*\"\n\n/* ------------------------------------------------------------------------- */\n/*  Dump the STEM to a Dataset that contains the JCL to do it all.           */\n/* ------------------------------------------------------------------------- */\n\n\"EXECIO * DISKW JCLOUT(FINIS STEM JCL.\"\nMaxRC=MAX(rc,MaxRC)\n\nEXIT:\nIF MaxRC > 4 THEN rc=MaxRC\nELSE rc=0\nEXIT rc\n\n/* ------------------------------------------------------------------------- */\n/* File_LISTDSI function                                                     */\n/* This function receives a file name in the call and displays information   */\n/* about that file.                                                          */\n/* ------------------------------------------------------------------------- */\nFile_LISTDSI:\nARG LISTDSIFile\n\n/* ------------------------------------------------------------------------- */\n/* Determine if the file name passed includes a PDS member in the name.      */\n/* ------------------------------------------------------------------------- */\nPDSIndicator=INDEX(LISTDSIFile,\"(\",1)\nIF PDSIndicator > 0 THEN DO\n   LISTDSIFile=SUBSTR(LISTDSIFile,1,PDSIndicator-1)\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Determine if the file name passed includes a PDS member in the name.      */\n/* ------------------------------------------------------------------------- */\nLISTDSIFile=\"'\" || LISTDSIFile || \"'\"\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"The LISTDSI File Name Parsed is: \" LISTDSIFile\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* If the file was determined to be a PDS, include directory information.    */\n/* ------------------------------------------------------------------------- */\nIF PDSIndicator > 0 THEN DO\n   RetCode=LISTDSI(LISTDSIFile \"DIRECTORY\")\nEND    /* IF */\nELSE DO\n   RetCode=LISTDSI(LISTDSIFile)\nEND    /* ELSE */\n\n/* ------------------------------------------------------------------------- */\n/* Associate meaningful text to the SYSREASON code returned from LISTDSI.    */\n/* ------------------------------------------------------------------------- */\nSELECT\n   WHEN SYSREASON=0000 THEN DO\n        SYSREASONTXT=\"\"\n   END    /* WHEN */\n   WHEN SYSREASON=\"\" THEN DO\n        SYSREASONTXT=\"\"\n   END    /* WHEN */\n   WHEN SYSREASON=0001 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Parsing the Function\"\n   END    /* WHEN */\n   WHEN SYSREASON=0002 THEN DO\n        SYSREASONTXT=SYSREASON\" - Dynamic Allocation Processing Error\"\n   END    /* WHEN */\n   WHEN SYSREASON=0003 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet is a Type That Cannot Be Processed\"\n   END    /* WHEN */\n   WHEN SYSREASON=0004 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Determining UNIT Name\"\n   END    /* WHEN */\n   WHEN SYSREASON=0005 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Not Cataloged\"\n   END    /* WHEN */\n   WHEN SYSREASON=0006 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Obtaining the DataSet Name\"\n   END    /* WHEN */\n   WHEN SYSREASON=0007 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Finding the Device Type\"\n   END    /* WHEN */\n   WHEN SYSREASON=0008 THEN DO\n        SYSREASONTXT=SYSREASON\" - The Dataset Does Not Reside on DASD\"\n   END    /* WHEN */\n   WHEN SYSREASON=0009 THEN DO\n        SYSREASONTXT=SYSREASON\" - DFHSM Migrated the DataSet - NORECALL\"\n   END    /* WHEN */\n   WHEN SYSREASON=0011 THEN DO\n        SYSREASONTXT=SYSREASON\" - Directory Information requested - Denied\"\n   END    /* WHEN */\n   WHEN SYSREASON=0012 THEN DO\n        SYSREASONTXT=SYSREASON\" - VSAM DataSets are Not Supported\"\n   END    /* WHEN */\n   WHEN SYSREASON=0013 THEN DO\n        SYSREASONTXT=SYSREASON\" - The DataSet Could Not Be Opened\"\n   END    /* WHEN */\n   WHEN SYSREASON=0014 THEN DO\n        SYSREASONTXT=SYSREASON\" - Device Type Not Found in UCB Tables\"\n   END    /* WHEN */\n   WHEN SYSREASON=0017 THEN DO\n        SYSREASONTXT=SYSREASON\" - System or User Abend Occurred\"\n   END    /* WHEN */\n   WHEN SYSREASON=0018 THEN DO\n        SYSREASONTXT=SYSREASON\" - Partial DataSet Information Obtained\"\n   END    /* WHEN */\n   WHEN SYSREASON=0019 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Resides on Multiple Volumes\"\n   END    /* WHEN */\n   WHEN SYSREASON=0020 THEN DO\n        SYSREASONTXT=SYSREASON\" - Device Type Not Found in Eligible Dev Tab\"\n   END    /* WHEN */\n   WHEN SYSREASON=0021 THEN DO\n        SYSREASONTXT=SYSREASON\" - Catalog Error Trying to Locate DataSet\"\n   END    /* WHEN */\n   WHEN SYSREASON=0022 THEN DO\n        SYSREASONTXT=SYSREASON\" - Volume Not Mounted\"\n   END    /* WHEN */\n   WHEN SYSREASON=0023 THEN DO\n        SYSREASONTXT=SYSREASON\" - Permanent I/O Error on Volume\"\n   END    /* WHEN */\n   WHEN SYSREASON=0024 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Not Found\"\n   END    /* WHEN */\n   WHEN SYSREASON=0025 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Migrated to Non-DASD Device\"\n   END    /* WHEN */\n   WHEN SYSREASON=0026 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet On Mass Storage Device (MSS)\"\n   END    /* WHEN */\n   WHEN SYSREASON=0027 THEN DO\n        SYSREASONTXT=SYSREASON\" - No Volume Serial is Allocated to the DataSet\"\n   END    /* WHEN */\n   WHEN SYSREASON=0028 THEN DO\n        SYSREASONTXT=SYSREASON\" - The DDName Must be 1-8 Characters\"\n   END    /* WHEN */\n   WHEN SYSREASON=0029 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Name or DDName Must be Specified\"\n   END    /* WHEN */\n   WHEN SYSREASON=0030 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet is not SMS Managed\"\n   END    /* WHEN */\n   WHEN SYSREASON=0031 THEN DO\n        SYSREASONTXT=SYSREASON\" - ISITMGD Macro Problem - See SYSMSGLVL2\"\n   END    /* WHEN */\n   WHEN SYSREASON=0032 THEN DO\n        SYSREASONTXT=SYSREASON\" - Unable to Retrieve SMS Info - SMS/MVS LEVEL\"\n   END    /* WHEN */\n   WHEN SYSREASON=0033 THEN DO\n        SYSREASONTXT=SYSREASON\" - Unable to Retrieve SMS Info - SMS INACTIVE\"\n   END    /* WHEN */\n   WHEN SYSREASON=0034 THEN DO\n        SYSREASONTXT=SYSREASON\" - Unable to Retrieve SMS Info - OPEN ERROR\"\n   END    /* WHEN */\n   WHEN SYSREASON=0035 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error from SMS Internal Service - IGWFAMS\"\n   END    /* WHEN */\n   WHEN SYSREASON=0036 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error from SMS Service Module\"\n   END    /* WHEN */\n   OTHERWISE\n        SYSREASONTXT=SYSREASON\" - Unknown SYSREASON\"\nEND    /* SELECT */\n\nIF RetCode > 4,\n & SYSREASON /= \"0008\",\n & SYSREASON /= \"0025\" THEN DO\n   SAY \"************************************************************\"\n   SAY \"An ERROR was detected in the LISTDSI function for file\" LISTDSIFile\n   SAY \"   The return code from LISTDSI is: \" RetCode\n   SAY \"   The 1st message returned from LISTDSI is: \" SYSMSGLVL1\n   SAY \"   The 2nd message returned from LISTDSI is: \" SYSMSGLVL2\n   SAY \"   The text available for SYSREASON(\"SYSREASON\") is:\"\n   SAY \"      \"SYSREASONTXT\n   SAY \"************************************************************\"\n   SYSMSGLVL1=\"\"\n   SYSMSGLVL2=\"\"\n   RETURN RetCode\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Display all of the available information about the file.                  */\n/* ------------------------------------------------------------------------- */\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"  LISTDSI Information for file:\"LISTDSIFile\n   SAY \" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n   SAY \"       SYSDSNAME     =\" SYSDSNAME\n   SAY \"       SYSVOLUME     =\" SYSVOLUME\n   SAY \"       SYSUNIT       =\" SYSUNIT\n   SAY \"       SYSDSORG      =\" SYSDSORG\n   SAY \"       SYSRECFM      =\" SYSRECFM\n   SAY \"       SYSLRECL      =\" SYSLRECL\n   SAY \"       SYSBLKSIZE    =\" SYSBLKSIZE\n   SAY \"       SYSKEYLEN     =\" SYSKEYLEN\n   SAY \"       SYSALLOC      =\" SYSALLOC\n   SAY \"       SYSUSED       =\" SYSUSED\n   SAY \"       SYSUSEDPAGES  =\" SYSUSEDPAGES\n   SAY \"       SYSPRIMARY    =\" SYSPRIMARY\n   SAY \"       SYSSECONDS    =\" SYSSECONDS\n   SAY \"       SYSUNITS      =\" SYSUNITS\n   SAY \"       SYSEXTENTS    =\" SYSEXTENTS\n   SAY \"       SYSCREATE     =\" SYSCREATE\n   SAY \"       SYSREFDATE    =\" SYSREFDATE\n   SAY \"       SYSEXDATE     =\" SYSEXDATE\n   SAY \"       SYSPASSWORD   =\" SYSPASSWORD\n   SAY \"       SYSRACFA      =\" SYSRACFA\n   SAY \"       SYSUPDATED    =\" SYSUPDATED\n   SAY \"       SYSTRKSCYL    =\" SYSTRKSCYL\n   SAY \"       SYSBLKSTRK    =\" SYSBLKSTRK\n   SAY \"       SYSADIRBLK    =\" SYSADIRBLK\n   SAY \"       SYSUDIRBLK    =\" SYSUDIRBLK\n   SAY \"       SYSMEMBERS    =\" SYSMEMBERS\n   SAY \"       SYSREASON     =\" SYSREASON\n   SAY \"       SYSREASON TEXT=\" SYSREASONTXT\n   SAY \"       SYSMSGLVL1    =\" SYSMSGLVL1\n   SAY \"       SYSMSGLVL2    =\" SYSMSGLVL2\n   SAY \"       SYSDSSMS      =\" SYSDSSMS\n   SAY \"       SYSDATACLASS  =\" SYSDATACLASS\n   SAY \"       SYSSTORCLASS  =\" SYSSTORCLASS\n   SAY \"       SYSMGMTCLASS  =\" SYSMGMTCLASS\n   SAY \" \"\n   SAY \" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n   SAY \" \"\nEND    /* IF */\n\nIF SYSDSORG=VS THEN DO\n   IF DisplayDetails = \"Y\" THEN DO\n      SAY \"The \"LISTDSIFile\" File is VSAM. Doing LISTCAT\"\n   END    /* IF */\n   Z=OUTTRAP('ListCat.')\n   \"LISTCAT ENTRY(\"LISTDSIFile\") ALL\"\n   RetCode=rc\n   Z=OUTTRAP('OFF')\n   IF RetCode /= 0 THEN DO\n      SAY \"************************************************************\"\n      SAY \"An ERROR was detected performing LISTCAT for file: \"LISTDSIFile\n      SAY \"   The return code from LISTCAT is: \" RetCode\n      SAY \"************************************************************\"\n   END    /* IF */\n   IF ListCat.0 <= 0 THEN DO\n      SAY \"************************************************************\"\n      SAY \"No data in the ListCat STEM\"\n      SAY \"   The number of entries in the ListCat STEM is: \" ListCat.0\n      SAY \"************************************************************\"\n   END    /* IF */\nEND    /* IF */\nELSE DO\n   RETURN RetCode\nEND    /* ELSE */\n\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"   The number of entries in the ListCat STEM is: \" ListCat.0\nEND    /* IF */\n\nClusterFlag=\"N\";DataFlag=\"N\";IndexFlag=\"N\";z=1;AssocStem.0=0\nSYSDataVols=\"\";SYSIndexVols=\"\"\n/* ------------------------------------------------------------------------- */\n/* Collect all of the available information about the file.                  */\n/* ------------------------------------------------------------------------- */\nIF RetCode=0 & ListCat.0 > 0 THEN\n   DO y=1 TO ListCat.0\n      PARSE VAR ListCat.y p1 p2 p3 p4 .\n            SELECT\n              WHEN p1 = \"CLUSTER\" THEN DO\n                   ClusterFlag=\"Y\"\n                   DataFlag=\"N\"\n                   IndexFlag=\"N\"\n                   AssocFlag=\"N\"\n                   SYSClusterName=p3\n              END    /* WHEN */\n              WHEN p1 = \"DATA\" THEN DO\n                   ClusterFlag=\"N\"\n                   DataFlag=\"Y\"\n                   IndexFlag=\"N\"\n                   AssocFlag=\"N\"\n                   SYSDataName=p3\n              END    /* WHEN */\n              WHEN p1 = \"INDEX\" THEN DO\n                   ClusterFlag=\"N\"\n                   DataFlag=\"N\"\n                   IndexFlag=\"Y\"\n                   AssocFlag=\"N\"\n                   SYSIndexName=p3\n              END    /* WHEN */\n              WHEN ClusterFlag=\"Y\",\n                 & p1=\"ASSOCIATIONS\" THEN DO\n                   ClusterFlag=\"N\"\n                   DataFlag=\"N\"\n                   IndexFlag=\"N\"\n                   AssocFlag=\"Y\"\n              END    /* WHEN */\n              WHEN ClusterFlag=\"Y\",\n                 & p1=\"IN-CAT\" THEN DO\n                   SYSCatName=p3\n              END    /* WHEN */\n              WHEN ClusterFlag=\"Y\",\n                 & SUBSTR(p1,1,13)=\"DATASET-OWNER\" THEN DO\n                   SYSCreateDate=SUBSTR(p2,17,8)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & p1=\"IN-CAT\" THEN DO\n                   SYSDataCat=p3\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"KEYLEN\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataKeyLen=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataAvgLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSDataCISize=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,3)=\"RKP\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataKeyStrt=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataMaxLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSDataCIPerCA=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"REC-TOTAL\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataRecTotal=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCISplits=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-DELETED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCASplits=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p3)+1\n                   Len=LENGTH(p3)-LASTPOS('-',p3)\n                   SYSDataExtents=SUBSTR(p3,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,12)=\"REC-INSERTED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCIFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-UPDATED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCAFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,10)=\"SPACE-TYPE\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataAllocType=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-PRI\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataAllocPri=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-SEC\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataAllocSec=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"VOLSER\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   IF SYSDataVols=\"\" THEN DO\n                      SYSDataVols= SUBSTR(p1,StartPos,Len)\n                   END    /* IF */\n                   ELSE DO\n                      SYSDataVols=SYSDataVols || \",\" || SUBSTR(p1,StartPos,Len)\n                   END    /* ELSE */\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & p1=\"IN-CAT\" THEN DO\n                   SYSIndexCat=p3\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"KEYLEN\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexKeyLen=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexAvgLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSIndexCISize=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,3)=\"RKP\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexKeyStrt=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexMaxLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSIndexCIPerCA=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"REC-TOTAL\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexRecTotal=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCISplits=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-DELETED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCASplits=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p3)+1\n                   Len=LENGTH(p3)-LASTPOS('-',p3)\n                   SYSIndexExtents=SUBSTR(p3,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSIndexLevels=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,12)=\"REC-INSERTED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCIFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-UPDATED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCAFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,10)=\"SPACE-TYPE\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexAllocType=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-PRI\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexAllocPri=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-SEC\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexAllocSec=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"VOLSER\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   IF SYSIndexVols=\"\" THEN DO\n                      SYSIndexVols= SUBSTR(p1,StartPos,Len)\n                   END    /* IF */\n                   ELSE DO\n                      SYSIndexVols=SYSIndexVols || \",\",\n                                  || SUBSTR(p1,StartPos,Len)\n                   END    /* ELSE */\n              END    /* WHEN */\n              WHEN AssocFlag=\"Y\" THEN DO\n                   AssocStem.z=p1\n                   AssocStem.0=z\n                   z=z+1\n              END    /* WHEN */\n              OTHERWISE\n                   ITERATE\n   END    /* SELECT */\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Display all of the available information about the VSAM File.             */\n/* ------------------------------------------------------------------------- */\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"  LISTCAT Information for file:\"LISTDSIFile\n   SAY \" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n   SAY \"       Cluster Name             =\" SYSClusterName\n   SAY \"       Cluster Catalog          =\" SYSCatName\n   SAY \"       Cluster Create Date      =\" SYSCreateDate\n   SAY \"       Cluster Associations:\"\n   IF AssocStem.0 <=0 THEN DO\n      AssocStem.1=\"No Associations Found\"\n      AssocStem.0=1\n   END    /* IF */\n   DO z=1 TO AssocStem.0\n      SAY \"                                  \"AssocStem.z\n   END    /* DO */\n   SAY \" \"\n   SAY \"       Data Segment Name        =\" SYSDataName\n   SAY \"       Data Segment Catalog     =\" SYSDataCat\n   SAY \"       Data Segment Volume      =\" SYSDataVols\n   SAY \"       Data Segment Key Length  =\" SYSDataKeyLen\n   SAY \"       Data Segment Key Pos     =\" SYSDataKeyStrt\n   SAY \"       Data Segment Avg LRECL   =\" SYSDataAvgLrecl\n   SAY \"       Data Segment Max Lrecl   =\" SYSDataMaxLrecl\n   SAY \"       Data Segment CI Size     =\" SYSDataCISize\n   SAY \"       Data Segment CI per CA   =\" SYSDataCIPerCA\n   SAY \"       Data Segment Total Recs  =\" SYSDataRecTotal\n   SAY \"       Data Segment CI Splits   =\" SYSDataCISplits\n   SAY \"       Data Segment CI FreeSP   =\" SYSDataCIFreeSP\"%\"\n   SAY \"       Data Segment CA Splits   =\" SYSDataCASplits\n   SAY \"       Data Segment CA FreeSP   =\" SYSDataCAFreeSP\"%\"\n   SAY \"       Data Segment Extents     =\" SYSDataExtents\n   SAY \"       Data Segment Alloc Units =\" SYSDataAllocType\n   SAY \"       Data Segment Primary     =\" SYSDataAllocPri\n   SAY \"       Data Segment Secondary   =\" SYSDataAllocSec\n   SAY \" \"\n   SAY \"       Index Segment Name       =\" SYSIndexName\n   SAY \"       Index Segment Catalog    =\" SYSIndexCat\n   SAY \"       Index Segment Volume     =\" SYSIndexVols\n   SAY \"       Index Segment Key Length =\" SYSIndexKeyLen\n   SAY \"       Index Segment Key Pos    =\" SYSIndexKeyStrt\n   SAY \"       Index Segment Avg LRECL  =\" SYSIndexAvgLrecl\n   SAY \"       Index Segment Max Lrecl  =\" SYSIndexMaxLrecl\n   SAY \"       Index Segment CI Size    =\" SYSIndexCISize\n   SAY \"       Index Segment CI per CA  =\" SYSIndexCIPerCA\n   SAY \"       Index Segment Total Recs =\" SYSIndexRecTotal\n   SAY \"       Index Segment CI Splits  =\" SYSIndexCISplits\n   SAY \"       Index Segment CI FreeSP  =\" SYSIndexCIFreeSP\"%\"\n   SAY \"       Index Segment CA Splits  =\" SYSIndexCASplits\n   SAY \"       Index Segment CA FreeSP  =\" SYSIndexCAFreeSP\"%\"\n   SAY \"       Index Segment Extents    =\" SYSIndexExtents\n   SAY \"       Index Segment Levels     =\" SYSIndexLevels\n   SAY \"       Index Segment Alloc Units=\" SYSIndexAllocType\n   SAY \"       Index Segment Primary    =\" SYSIndexAllocPri\n   SAY \"       Index Segment Secondary  =\" SYSIndexAllocSec\n   SAY \" \"\nEND    /* IF */\n\nRETURN RetCode\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "CATCLRJC": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00B\\x00B\\x00B\\x00\\x00\\xc4\\xc1\\xe5\\xc9\\xc4\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:42:00", "lines": 66, "newlines": 66, "modlines": 0, "user": "DAVIDK"}, "text": "//TSDGKCAT JOB (70000),'BUILD CAT CLEAR JCL',\n//             MSGCLASS=R,\n//             CLASS=K,\n//             REGION=5M,\n//             NOTIFY=&SYSUID\n//*\n//*************************************************************************/\n//* Author: David G. Kopischke                                            */\n//* Notes: JCL to run catalog clear REXX EXEC.                            */\n//* Usage: This JOB and all related software may be distributed freely to */\n//*        anyone. You may not sell this software nor package it with     */\n//*        software that is sold for profit.                              */\n//*************************************************************************/\n//*                              CHANGE LOG                               */\n//**********|********|*******|*********************************************/\n//* PROJECT |  DATE  | INTLS |                  DESCRIPTION               */\n//**********|********|*******|*********************************************/\n//*         |06/18/87| TSDGK | INITIAL RELEASE.                           */\n//**********|********|*******|*********************************************/\n//*         |        |       |                                            */\n//**********|********|*******|*********************************************/\n//*\n//DRPCATJC PROC MASTCAT=,\n//             TRACE='N',\n//             SOUT='R,HOLD=YES'\n//*\n//* --------------------------------------------------------------- *//\n//SCRATCH1 EXEC PGM=IEFBR14\n//* --------------------------------------------------------------- *//\n//SYSPRINT DD  SYSOUT=*\n//SYSIN    DD  DUMMY\n//SYSUT1   DD  DSN=???.?????.CATCLEAR.JCL,\n//             DISP=(MOD,DELETE,DELETE),\n//             UNIT=(SYSDA,,DEFER),\n//             SPACE=(TRK,(0,0),RLSE)\n//*\n//* --------------------------------------------------------------- *//\n//*                     TSO BATCH PROCEDURE                         *//\n//* --------------------------------------------------------------- *//\n//TSOBATCH EXEC PGM=IKJEFT01,DYNAMNBR=99,\n// PARM='%CATCLJCL &MASTCAT &TRACE'\n//ISPLOG   DD  UNIT=SYSDA,SPACE=(CYL,(1,1))\n//SYSPROC  DD  DSN=????.ISPF.ISPCLIB,DISP=SHR\n//         DD  DSN=????.LCLMODS.ISPCLIB,DISP=SHR\n//ISPLLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n//SYSLBC   DD  DSN=SYS1.BRODCAST,DISP=SHR\n//SYSUADS  DD  DSN=SYS1.UADS,DISP=SHR\n//SYSTERM  DD  TERM=TS,SYSOUT=&SOUT\n//SYSIN    DD  TERM=TS,SYSOUT=&SOUT\n//SYSTSPRT DD  SYSOUT=&SOUT\n//JCLOUT   DD  DSN=???.?????.CATCLEAR.JCL,\n//             DISP=(,CATLG,DELETE),\n//             UNIT=SYSDA,\n//             SPACE=(TRK,(15,15),RLSE),\n//             DCB=(RECFM=FB,LRECL=80,BLKSIZE=27920)\n//SYSTSIN  DD  DUMMY\n//* --------------------------------------------------------------- *//\n//*\n//ENDPROC PEND\n//*\n//* --------------------------------------------------------------- *//\n//CATCLJCL EXEC DRPCATJC,\n//         MASTCAT='CATALOG.???????',  <== MASTER CATALOG\n//         TRACE='N',                  <== ENABLE TRACING IN THE EXEC\n//         SOUT='R,FREE=CLOSE'         <== REPORT SYSOUT CLASS\n//*\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "CATCLR3": {"ttr": 777, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x01\\x031?\\x01\\x031?\\x00B\\x04!\\x04!\\x00\\x00\\xc4\\xc1\\xe5\\xc9\\xc4\\xd2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2003-11-09T00:00:00", "modifydate": "2003-11-09T00:42:00", "lines": 1057, "newlines": 1057, "modlines": 0, "user": "DAVIDK"}, "text": "/* --------------------------------- REXX ---------------------------------- */\n/*  CATCLR3 Exec       THIS IS A UTILITY EXEC                                */\n/* ------------------------------------------------------------------------- */\n/* Author: David G. Kopischke                                                */\n/* Notes:  Catalog Scan REXX EXEC.                                           */\n/* Usage:  This software may be distributed freely to anyone. You may not    */\n/*         sell this software nor package it with software that is sold for  */\n/*         profit.                                                           */\n/* ------------------------------------------------------------------------- */\n/* REXX EXEC to clear all catalogs of all datasets cataloged but not present */\n/* on the volume it is cataloged to.                                         */\n/*                                                                           */\n/* ------------------------------------------------------------------------- */\n/* Function: List every file cataloged in the supplied catalog. Find every   */\n/*           file cataloged to a specified volume or volume mask. Verify     */\n/*           the existence of every file cataloged to the volume specified.  */\n/*           If the file does not exist, generate an IDCAMS DELETE NOSCRATCH */\n/*           statement for the file and write to a dataset for subsequent    */\n/*           execution.                                                      */\n/*                                                                           */\n/* ------------------------------------------------------------------------- */\n/* *************************** REVISION HISTORY **************************** */\n/* ACID  +   DATE   + Change Description                                     */\n/* ------+----------+------------------------------------------------------- */\n/* TSDGK +01/12/2000+ Initial Version.                                       */\n/* ------+----------+------------------------------------------------------- */\n/*       +          +                                                        */\n/* ------+----------+------------------------------------------------------- */\n\nPARSE UPPER ARG RunType CatToScan Vols DisplayDetails Trace .\n\nIF Trace=\"Y\" THEN DO\n   TRACE ?I                                  /* Turn Tracing ON              */\n /*TRACE ?R */                               /* Turn Tracing ON              */\nEND  /* IF */\n\nSAY \"Run Type=\"RunType\nSAY \"Catalog Name=\"CatToScan\nSAY \"Volumes to clean up=\"Vols\"   <== This is not functional at this time\"\n\n/* ------------------------------------------------------------------------- */\n/* Collect all of the objects cataloged in the specified catalog.            */\n/* ------------------------------------------------------------------------- */\nVSAMFilesFound=0;SEQFilesFound=0;CATFilesFound=0;FilestoUncatalog=0\nFilename=\"\";SkippedRecs=0;DisplayLimit=\"N\";VolRefFound=\"N\";VolRefCount=0\nX=1;k=0;End_of_File=\"N\";Done=\"N\"\n/* IF CatToScan = \"USERCAT.????????\" THEN DO */\n/*    TRACE ?i */                           /* Turn Tracing ON               */\n/*    TRACE ?R */                           /* Turn Tracing ON               */\n/* END*//* DO */\n\nCntlFileName=USERID()||\".\"||CatToScan||\".CNTL\"\nListFileName=USERID()||\".\"||CatToScan||\".SYSPRINT\"\nSAY \"************************************************************\"\nSAY \"The files to support processing of catalog \"CatToScan\" are:\"\nSAY \"   The IDCAMS Output File name is :\" ListFileName\nSAY \"   The DELETE Control File name is:\" CntlFileName\nSAY \"************************************************************\"\nSAY \" \"\n\"PROFILE NOPREFIX\"\nMsgStat = MSG('OFF')\n\"FREE F(CTLOUT LISTFILE)\"\n\"DELETE '\"CntlFileName\"' PURGE\"\n\"DELETE '\"ListFileName\"' PURGE\"\nMsgStat = MSG('ON')\n\"ALLOC DA('\"CntlFileName\"') F(CTLOUT) NEW REUSE\",\n       \"CYLINDER SPACE(10 10) RECFM(F B) LRECL(80) BLKSIZE(27920)\"\nRetCode=rc\nIF RetCode /= 0 THEN DO\n   SAY \"************************************************************\"\n   SAY \"An ERROR was detected ALLOCating the IDCAMS Control file for\",\n       \"Catalog: \"CatToScan\n   SAY \"   The return code from ALLOC is: \" RetCode\n   SAY \"************************************************************\"\n   MaxRC=12\n   SIGNAL EXIT\nEND    /* IF */\n\"ALLOC DA('\"ListFileName\"') F(LISTFILE) NEW REUSE\",\n       \"CYLINDER SPACE(10 10) RECFM(V B A) LRECL(133) BLKSIZE(27930)\"\nRetCode=rc\nIF RetCode /= 0 THEN DO\n   SAY \"************************************************************\"\n   SAY \"An ERROR was detected ALLOCating the LISTFILE file for\",\n       \"Catalog: \"CatToScan\n   SAY \"   The file name being ALLOCated is:\" ListFileName\n   SAY \"   The return code from ALLOC is: \" RetCode\n   SAY \"************************************************************\"\n   MaxRC=12\n   SIGNAL EXIT\nEND    /* IF */\n/* ------------------------------------------------------------------------- */\n/* Removed VOL sub-parameter because of catalog issues that kept the         */\n/* LISTCAT from getting a complete list of files.                            */\n/* ------------------------------------------------------------------------- */\n/* \"LISTCAT CATALOG('\"CatToScan\"') VOL\" */      /* Collect the names of all  */\n\"LISTCAT CATALOG('\"CatToScan\"')\"||,             /* Collect the names of all  */\n\"        OUTFILE(LISTFILE)\"                     /* files in the User Catalog */\n\nRetCode=rc\nIF RetCode \\= 0 THEN DO\n   SAY \"************************************************************\"\n   IF RetCode > 8 THEN DO\n      SAY \"***                                                      ***\"\n      SAY \"***  !!!!!!  SERIOUS CATALOG ERROR ENCOUNTERED  !!!!!!!  ***\"\n      SAY \"***                                                      ***\"\n      SAY \"************************************************************\"\n      SAY \"***                                                      ***\"\n      SAY \"***  !!!!!!  SERIOUS CATALOG ERROR ENCOUNTERED  !!!!!!!  ***\"\n      SAY \"***                                                      ***\"\n      SAY \"************************************************************\"\n      SAY \"***                                                      ***\"\n      SAY \"***                                                      ***\"\n   END  /* IF */\n   SAY \"An ERROR was detected performing LISTCAT for User Catalog:\",\n        CatToScan\n   SAY \"   The return code from LISTCAT is: \" RetCode\n   SAY \"************************************************************\"\n   SAY \"   The file containing the LISTCAT information is: \" ListFileName\n   SAY \"   Error messages may be in this file or in SYSPRINT.\"\n   SAY \" \"\n   IF RetCode > 4 THEN DO UNTIL End_of_File=\"Y\"\n      \"EXECIO 1 DISKR LISTFILE\"\n      RetCode=rc\n      IF RetCode = \"2\" THEN DO\n         End_of_File=\"Y\"\n         \"EXECIO 0 DISKR LISTFILE (FINIS\"\n         \"EXECIO 0 DISKW CTLOUT (FINIS\"\n         SAY \"************************************************************\"\n         SAY \"*** End of File reached for data from catalog: \" CatToScan\n         SAY \"************************************************************\"\n      END  /* IF */\n      PULL FileData\n      k=k+1\n      SAY \"FileList Entry: \"RIGHT(k,4,\" \") \"    Data: \"FileData\n      IF k > 10000 & DisplayLimit=\"N\" THEN DO\n         DisplayLimit=\"Y\"\n         End_of_File=\"Y\"\n         \"EXECIO 0 DISKR LISTFILE (FINIS\"\n         \"EXECIO 0 DISKW CTLOUT (FINIS\"\n      END  /* IF */\n   END  /* IF */\n   SAY \"************************************************************\"\n   IF RetCode > 8 THEN DO\n      MaxRC=12\n      SIGNAL EXIT\n   END  /* IF */\nEND  /* IF */\n\nCntl = \" /\"||\"* FILES TO UNCATALOG IN CATALOG ==>\"CatToScan\"<==  *\"||\"/\"\nPUSH Cntl\n\"EXECIO 1 DISKW CTLOUT\"\nSAY \"IDCAMS Control Entry:\"RIGHT(X,4,\" \")\"  is:\" Cntl\nCntl=\"\"\n/* ------------------------------------------------------------------------- */\n/* Find the files you want.                                                  */\n/* ------------------------------------------------------------------------- */\n\"EXECIO 1 DISKR LISTFILE\"\nRetCode=rc\nIF RetCode = \"2\" THEN DO\n   End_of_File=\"Y\"\n   FileData=\"\"\n   \"EXECIO 0 DISKR LISTFILE (FINIS\"\n   \"EXECIO 0 DISKW CTLOUT (FINIS\"\n   SAY \"************************************************************\"\n   SAY \"***              EMPTY DATASET DETECTED                  ***\"\n   SAY \"*** End of File reached on first read of file: \" ListFileName\n   SAY \"***     For Catalog: \" CatToScan\n   SAY \"***     Return Code from EXECIO is: \"RetCode\n   SAY \"************************************************************\"\n   MaxRC=12\n   SIGNAL EXIT\nEND  /* IF */\nPULL FileData\nPARSE VAR FileData p1 p2 p3 p4 p5 .\nDO UNTIL End_of_File=\"Y\"\n   CALL Process_List\nEND  /* DO */\n\nIF X = 1 THEN DO\n   SAY \"************************************************************\"\n   SAY \"***            No Catalog Entries to Delete              ***\"\n   SAY \"*** The EXEC found no catalog entries to delete for      ***\"\n   SAY \"***     Catalog: \" CatToScan\n   SAY \"************************************************************\"\nEND  /* IF */\nELSE DO\n   UncatCount = X - 1\n   SAY \"************************************************************\"\n   SAY \"*** The EXEC found \"UncatCount\" Catalog entries to delete***\"\n   SAY \"*** for Catalog: \" CatToScan\n   SAY \"************************************************************\"\nEND  /* ELSE */\n\"FREE F(CTLOUT LISTFILE)\"\nSAY \"==================================================================\"\nSAY \"***                 Processing Statistics                      ***\"\nSAY \"***\"\nSAY \"*** The EXEC found \"CATFilesFound\" User Catalogs files in the catalogs\"\nSAY \"***\"\nSAY \"*** The EXEC found \"VSAMFilesFound\" VSAM files in the catalogs\"\nSAY \"***\"\nSAY \"*** The EXEC found \"SEQFilesFound\" Sequential files in the catalogs\"\nSAY \"***\"\nSAY \"***\"\nSAY \"*** The EXEC found \"FilestoUncatalog\" files to uncatalog\"\nSAY \"***\"\nSAY \"==================================================================\"\n\nEXIT:\nIF MaxRC > 4 THEN rc=MaxRC\nELSE rc=0\nEXIT rc\n\n/* ------------------------------------------------------------------------- */\n/* Process_List Procedure                                                    */\n/* This Procedure processes the LISTCAT results looking for cataloged files  */\n/* that are not on the volume the catalog says its on.                       */\n/* ------------------------------------------------------------------------- */\nProcess_List:\n\nDone=\"N\"\n\nSELECT\n   /* ---------------------------------------------------------------------- */\n   /* Ignore the Catalog Cluster information.                                */\n   /* ---------------------------------------------------------------------- */\n   WHEN ((p1 = \"CLUSTER\",\n      | p1 = \"0CLUSTER\"),\n      & SUBSTR(p3,1,10) = \"0000000000\") THEN DO\n        CATFilesFound = CATFilesFound + 1\n        DO UNTIL Done=\"Y\"\n           \"EXECIO 1 DISKR LISTFILE\"\n           RetCode=rc\n           IF RetCode = \"2\" THEN DO\n              End_of_File=\"Y\";Done=\"Y\"\n              FileData=\"\"\n              \"EXECIO 0 DISKR LISTFILE (FINIS\"\n              \"EXECIO 0 DISKW CTLOUT (FINIS\"\n              IF X = 1 THEN DO\n                 SAY \"****************************************************\"||,\n                     \"********\"\n                 SAY \"***               No Files to Uncatalog             \"||,\n                     \"    ***\"\n                 SAY \"*** The EXEC found no catalog entries to delete for\"||,\n                     \"      ***\"\n                 SAY \"***     Catalog: \" CatToScan\n                 SAY \"****************************************************\"||,\n                     \"********\"\n              END  /* IF */\n              ELSE DO\n                 UncatCount = X - 1\n                 SAY \"****************************************************\"||,\n                     \"********\"\n                 SAY \"*** The EXEC found \"UncatCount\" Catalog entries to \"||,\n                     \"delete for      ***\"\n                 SAY \"***     Catalog: \" CatToScan\n                 SAY \"****************************************************\"||,\n                     \"********\"\n              END  /* ELSE */\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              SAY \"*** End of File reached on file: \" ListFileName\n              SAY \"***     For Catalog: \" CatToScan\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              ITERATE\n           END  /* IF */\n           ELSE DO\n              PULL FileData\n              PARSE VAR FileData p1 p2 p3 p4 p5 .\n              IF (p1 = \"CLUSTER\",\n               | p1 = \"0CLUSTER\",\n               | p1 = \"NONVSAM\",\n               | p1 = \"0NONVSAM\",\n               | p1 = \"ALIAS\",\n               | p1 = \"0ALIAS\",\n               | p1 = \"PAGESPACE\",\n               | p1 = \"0PAGESPACE\",\n               | p1 = \"USERCATALOG\",\n               | p1 = \"0USERCATALOG\",\n               | (p1 = \"GDG\" & p2 = \"BASE\"),\n               | (p1 = \"0GDG\" & p2 = \"BASE\"),\n               | End_of_File=\"Y\") THEN DO\n                 Done=\"Y\"\n                 ITERATE\n              END  /* IF */\n           END  /* ELSE */\n           ITERATE\n      END  /* DO */\n   END  /* WHEN */\n   /* ---------------------------------------------------------------------- */\n   /* Collect information about VSAM Clusters.                               */\n   /* ---------------------------------------------------------------------- */\n   WHEN p1 = \"CLUSTER\",\n      | p1 = \"0CLUSTER\" THEN DO\n        FileName=p3\n        VSAMFilesFound = VSAMFilesFound + 1\n        DO UNTIL Done=\"Y\"\n           \"EXECIO 1 DISKR LISTFILE\"\n           RetCode=rc\n           IF RetCode = \"2\" THEN DO\n              End_of_File=\"Y\";Done=\"Y\"\n              FileData=\"\"\n              \"EXECIO 0 DISKR LISTFILE (FINIS\"\n              \"EXECIO 0 DISKW CTLOUT (FINIS\"\n              IF X = 1 THEN DO\n                 SAY \"****************************************************\"||,\n                     \"********\"\n                 SAY \"***               No Files to Uncatalog             \"||,\n                     \"        ***\"\n                 SAY \"*** The EXEC found no catalog entries to delete for\"||,\n                     \"      ***\"\n                 SAY \"***     Catalog: \" CatToScan\n                 SAY \"****************************************************\"||,\n                     \"********\"\n              END  /* IF */\n              ELSE DO\n                 UncatCount = X - 1\n                 SAY \"****************************************************\"||,\n                     \"********\"\n                 SAY \"*** The EXEC found \"UncatCount\" Catalog \"||,\n                     \"entries to delete for      ***\"\n                 SAY \"***     Catalog: \" CatToScan\n                 SAY \"****************************************************\"||,\n                     \"********\"\n              END  /* ELSE */\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              SAY \"*** End of File reached on file: \" ListFileName\n              SAY \"***     For Catalog: \" CatToScan\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              ITERATE\n           END  /* IF */\n           PULL FileData\n           PARSE VAR FileData p1 p2 p3 p4 p5 .\n           IF (p1 = \"CLUSTER\",\n            | p1 = \"0CLUSTER\",\n            | p1 = \"NONVSAM\",\n            | p1 = \"0NONVSAM\",\n            | p1 = \"ALIAS\",\n            | p1 = \"0ALIAS\",\n            | p1 = \"PAGESPACE\",\n            | p1 = \"0PAGESPACE\",\n            | p1 = \"USERCATALOG\",\n            | p1 = \"0USERCATALOG\",\n            | (p1 = \"GDG\" & p2 = \"BASE\"),\n            | (p1 = \"0GDG\" & p2 = \"BASE\"),\n            | End_of_File=\"Y\") THEN DO\n              IF SUBSTR(FileName,1,1) = \"R\" THEN DO\n                 VolRefFound = \"Y\"\n                 VolRefCount = VolRefCount + 1\n              END  /* IF */\n              RetCode=File_LISTDSI(FileName)\n              IF RetCode /= 0,\n               & (SYSREASON = \"0022\",\n               | SYSREASON = \"0024\") THEN DO\n                 X=X+1\n                 FilestoUncatalog = FilestoUncatalog + 1\n                 IF RunType=\"T\" THEN DO\n                    Cntl = \" LISTCAT ENTRY(\"FileName\") ALL\"\n                    IF DisplayDetails = \"Y\" THEN\n                       SAY \"IDCAMS Control Entry:\"RIGHT(X,4,\" \")\" is:\" Cntl\n                    PUSH Cntl\n                    \"EXECIO 1 DISKW CTLOUT\"\n                    Cntl=\"\";FileName=\"\"\n                 END  /* IF */\n                 ELSE DO\n                    IF VolRefFound = \"Y\" THEN DO\n                       Cntl = \" /* VOLREF \"LEFT(fileName,44,\" \")\" VOLREF */\"\n                    END  /* IF */\n                    ELSE DO\n                       Cntl = \" DELETE \"LEFT(fileName,44,\" \")\" NOSCRATCH\"\n                    END  /* ELSE */\n                    IF DisplayDetails = \"Y\" THEN\n                       SAY \"IDCAMS Control Entry:\"RIGHT(X,4,\" \")\" is:\" Cntl\n                    PUSH Cntl\n                    \"EXECIO 1 DISKW CTLOUT\"\n                    Cntl=\"\";FileName=\"\"\n                 END  /* ELSE */\n              END    /* IF */\n              Done=\"Y\";VolRefFound=\"N\"\n              ITERATE\n           END  /* IF */\n        END  /* DO */\n   END  /* WHEN */\n   /* ---------------------------------------------------------------------- */\n   /* Collect information about NONVSAM Files.                               */\n   /* ---------------------------------------------------------------------- */\n   WHEN p1 = \"NONVSAM\",\n      | p1 = \"0NONVSAM\" THEN DO\n        FileName=p3\n        SEQFilesFound = SEQFilesFound + 1\n        DO UNTIL Done=\"Y\"\n           \"EXECIO 1 DISKR LISTFILE\"\n           RetCode=rc\n           IF RetCode = \"2\" THEN DO\n              End_of_File=\"Y\";Done=\"Y\"\n              FileData=\"\"\n              \"EXECIO 0 DISKR LISTFILE (FINIS\"\n              \"EXECIO 0 DISKW CTLOUT (FINIS\"\n              IF X = 1 THEN DO\n                 SAY \"****************************************************\"||,\n                     \"********\"\n                 SAY \"***            No Catalog Entries to Delete         \"||,\n                     \"     ***\"\n                 SAY \"*** The EXEC found no catalog entries to delete for\"||,\n                     \"      ***\"\n                 SAY \"***     Catalog: \" CatToScan\n                 SAY \"****************************************************\"||,\n                     \"********\"\n              END  /* IF */\n              ELSE DO\n                 UncatCount = X - 1\n                 SAY \"****************************************************\"||,\n                     \"********\"\n                 SAY \"*** The EXEC found \"UncatCount\" Catalog entries to \"||,\n                     \"delete for      ***\"\n                 SAY \"***     Catalog: \" CatToScan\n                 SAY \"****************************************************\"||,\n                     \"********\"\n              END  /* ELSE */\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              SAY \"*** End of File reached on file: \" ListFileName\n              SAY \"***     For Catalog: \" CatToScan\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              ITERATE\n           END  /* IF */\n           PULL FileData\n           PARSE VAR FileData p1 p2 p3 p4 p5 .\n           IF (p1 = \"CLUSTER\",\n            | p1 = \"0CLUSTER\",\n            | p1 = \"NONVSAM\",\n            | p1 = \"0NONVSAM\",\n            | p1 = \"ALIAS\",\n            | p1 = \"0ALIAS\",\n            | p1 = \"PAGESPACE\",\n            | p1 = \"0PAGESPACE\",\n            | p1 = \"USERCATALOG\",\n            | p1 = \"0USERCATALOG\",\n            | (p1 = \"GDG\" & p2 = \"BASE\"),\n            | (p1 = \"0GDG\" & p2 = \"BASE\"),\n            | End_of_File=\"Y\") THEN DO\n              IF SUBSTR(FileName,1,1) = \"R\" THEN DO\n                 VolRefFound = \"Y\"\n                 VolRefCount = VolRefCount + 1\n              END  /* IF */\n              RetCode=File_LISTDSI(FileName)\n              IF RetCode /= 0,\n               & (SYSREASON = \"0022\",\n               | SYSREASON = \"0024\") THEN DO\n                 X=X+1\n                 FilestoUncatalog = FilestoUncatalog + 1\n                 IF RunType=\"T\" THEN DO\n                    Cntl = \" LISTCAT ENTRY(\"FileName\") ALL\"\n                    IF DisplayDetails = \"Y\" THEN\n                       SAY \"IDCAMS Control Entry:\"RIGHT(X,4,\" \")\" is:\" Cntl\n                    PUSH Cntl\n                    \"EXECIO 1 DISKW CTLOUT\"\n                    Cntl=\"\";FileName=\"\"\n                 END  /* IF */\n                 ELSE DO\n                    IF VolRefFound = \"Y\" THEN DO\n                       Cntl = \" /* VOLREF \"LEFT(fileName,44,\" \")\" VOLREF */\"\n                    END  /* IF */\n                    ELSE DO\n                       Cntl = \" DELETE \"LEFT(fileName,44,\" \")\" NOSCRATCH\"\n                    END  /* ELSE */\n                    IF DisplayDetails = \"Y\" THEN\n                       SAY \"IDCAMS Control Entry:\"RIGHT(X,4,\" \")\" is:\" Cntl\n                    PUSH Cntl\n                    \"EXECIO 1 DISKW CTLOUT\"\n                    Cntl=\"\";FileName=\"\"\n                 END  /* ELSE */\n              END    /* IF */\n              Done=\"Y\";VolRefFound=\"N\"\n              ITERATE\n           END  /* IF */\n        END  /* DO */\n   END  /* WHEN */\n   OTHERWISE\n        \"EXECIO 1 DISKR LISTFILE\"\n        RetCode=rc\n        IF RetCode = \"2\" THEN DO\n           End_of_File=\"Y\";Done=\"Y\"\n           FileData=\"\"\n           \"EXECIO 0 DISKR LISTFILE (FINIS\"\n           \"EXECIO 0 DISKW CTLOUT (FINIS\"\n           IF X = 1 THEN DO\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              SAY \"***            No Catalog Entries to Delete            \"||,\n                  \"  ***\"\n              SAY \"*** The EXEC found no catalog entries to delete for    \"||,\n                  \"  ***\"\n              SAY \"***     Catalog: \" CatToScan\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n           END  /* IF */\n           ELSE DO\n              UncatCount = X - 1\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n              SAY \"*** The EXEC found \"UncatCount\" Catalog entries to \"||,\n                  \"delete for      ***\"\n              SAY \"***     Catalog: \" CatToScan\n              SAY \"*******************************************************\"||,\n                  \"*****\"\n           END  /* ELSE */\n           SAY \"**********************************************************\"||,\n               \"**\"\n           SAY \"*** End of File reached on file: \" ListFileName\n           SAY \"***     For Catalog: \" CatToScan\n           SAY \"**********************************************************\"||,\n               \"**\"\n        END  /* IF */\n        ELSE DO\n           PULL FileData\n           PARSE VAR FileData p1 p2 p3 p4 p5 .\n        END  /* ELSE */\nEND  /* SELECT */\n\nRETURN\n\n/* ------------------------------------------------------------------------- */\n/* File_LISTDSI function                                                     */\n/* This function receives a file name in the call and displays information   */\n/* about that file.                                                          */\n/* ------------------------------------------------------------------------- */\nFile_LISTDSI:\nARG LISTDSIFile\n\n/* ------------------------------------------------------------------------- */\n/* Determine if the file name passed includes a PDS member in the name.      */\n/* ------------------------------------------------------------------------- */\nPDSIndicator=INDEX(LISTDSIFile,\"(\",1)\nIF PDSIndicator > 0 THEN DO\n   LISTDSIFile=SUBSTR(LISTDSIFile,1,PDSIndicator-1)\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Determine if the file name passed includes a PDS member in the name.      */\n/* ------------------------------------------------------------------------- */\nLISTDSIFile=\"'\" || LISTDSIFile || \"'\"\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"The LISTDSI File Name Parsed is: \" LISTDSIFile\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* If the file was determined to be a PDS, include directory information.    */\n/* ------------------------------------------------------------------------- */\nIF PDSIndicator > 0 THEN DO\n   RetCode=LISTDSI(LISTDSIFile \"DIRECTORY\")\nEND    /* IF */\nELSE DO\n   RetCode=LISTDSI(LISTDSIFile)\nEND    /* ELSE */\n\n/* ------------------------------------------------------------------------- */\n/* Associate meaningful text to the SYSREASON code returned from LISTDSI.    */\n/* ------------------------------------------------------------------------- */\nSELECT\n   WHEN SYSREASON=0000 THEN DO\n        SYSREASONTXT=\"\"\n   END    /* WHEN */\n   WHEN SYSREASON=\"\" THEN DO\n        SYSREASONTXT=\"\"\n   END    /* WHEN */\n   WHEN SYSREASON=0001 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Parsing the Function\"\n   END    /* WHEN */\n   WHEN SYSREASON=0002 THEN DO\n        SYSREASONTXT=SYSREASON\" - Dynamic Allocation Processing Error\"\n   END    /* WHEN */\n   WHEN SYSREASON=0003 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet is a Type That Cannot Be Processed\"\n   END    /* WHEN */\n   WHEN SYSREASON=0004 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Determining UNIT Name\"\n   END    /* WHEN */\n   WHEN SYSREASON=0005 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Not Cataloged\"\n   END    /* WHEN */\n   WHEN SYSREASON=0006 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Obtaining the DataSet Name\"\n   END    /* WHEN */\n   WHEN SYSREASON=0007 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error Finding the Device Type\"\n   END    /* WHEN */\n   WHEN SYSREASON=0008 THEN DO\n        SYSREASONTXT=SYSREASON\" - The Dataset Does Not Reside on DASD\"\n   END    /* WHEN */\n   WHEN SYSREASON=0009 THEN DO\n        SYSREASONTXT=SYSREASON\" - DFHSM Migrated the DataSet - NORECALL\"\n   END    /* WHEN */\n   WHEN SYSREASON=0011 THEN DO\n        SYSREASONTXT=SYSREASON\" - Directory Information requested - Denied\"\n   END    /* WHEN */\n   WHEN SYSREASON=0012 THEN DO\n        SYSREASONTXT=SYSREASON\" - VSAM DataSets are Not Supported\"\n   END    /* WHEN */\n   WHEN SYSREASON=0013 THEN DO\n        SYSREASONTXT=SYSREASON\" - The DataSet Could Not Be Opened\"\n   END    /* WHEN */\n   WHEN SYSREASON=0014 THEN DO\n        SYSREASONTXT=SYSREASON\" - Device Type Not Found in UCB Tables\"\n   END    /* WHEN */\n   WHEN SYSREASON=0017 THEN DO\n        SYSREASONTXT=SYSREASON\" - System or User Abend Occurred\"\n   END    /* WHEN */\n   WHEN SYSREASON=0018 THEN DO\n        SYSREASONTXT=SYSREASON\" - Partial DataSet Information Obtained\"\n   END    /* WHEN */\n   WHEN SYSREASON=0019 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Resides on Multiple Volumes\"\n   END    /* WHEN */\n   WHEN SYSREASON=0020 THEN DO\n        SYSREASONTXT=SYSREASON\" - Device Type Not Found in Eligible Dev Tab\"\n   END    /* WHEN */\n   WHEN SYSREASON=0021 THEN DO\n        SYSREASONTXT=SYSREASON\" - Catalog Error Trying to Locate DataSet\"\n   END    /* WHEN */\n   WHEN SYSREASON=0022 THEN DO\n        SYSREASONTXT=SYSREASON\" - Volume Not Mounted\"\n   END    /* WHEN */\n   WHEN SYSREASON=0023 THEN DO\n        SYSREASONTXT=SYSREASON\" - Permanent I/O Error on Volume\"\n   END    /* WHEN */\n   WHEN SYSREASON=0024 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Not Found\"\n   END    /* WHEN */\n   WHEN SYSREASON=0025 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Migrated to Non-DASD Device\"\n   END    /* WHEN */\n   WHEN SYSREASON=0026 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet On Mass Storage Device (MSS)\"\n   END    /* WHEN */\n   WHEN SYSREASON=0027 THEN DO\n        SYSREASONTXT=SYSREASON\" - No Volume Serial is Allocated to the DataSet\"\n   END    /* WHEN */\n   WHEN SYSREASON=0028 THEN DO\n        SYSREASONTXT=SYSREASON\" - The DDName Must be 1-8 Characters\"\n   END    /* WHEN */\n   WHEN SYSREASON=0029 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet Name or DDName Must be Specified\"\n   END    /* WHEN */\n   WHEN SYSREASON=0030 THEN DO\n        SYSREASONTXT=SYSREASON\" - DataSet is not SMS Managed\"\n   END    /* WHEN */\n   WHEN SYSREASON=0031 THEN DO\n        SYSREASONTXT=SYSREASON\" - ISITMGD Macro Problem - See SYSMSGLVL2\"\n   END    /* WHEN */\n   WHEN SYSREASON=0032 THEN DO\n        SYSREASONTXT=SYSREASON\" - Unable to Retrieve SMS Info - SMS/MVS LEVEL\"\n   END    /* WHEN */\n   WHEN SYSREASON=0033 THEN DO\n        SYSREASONTXT=SYSREASON\" - Unable to Retrieve SMS Info - SMS INACTIVE\"\n   END    /* WHEN */\n   WHEN SYSREASON=0034 THEN DO\n        SYSREASONTXT=SYSREASON\" - Unable to Retrieve SMS Info - OPEN ERROR\"\n   END    /* WHEN */\n   WHEN SYSREASON=0035 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error from SMS Internal Service - IGWFAMS\"\n   END    /* WHEN */\n   WHEN SYSREASON=0036 THEN DO\n        SYSREASONTXT=SYSREASON\" - Error from SMS Service Module\"\n   END    /* WHEN */\n   OTHERWISE\n        SYSREASONTXT=SYSREASON\" - Unknown SYSREASON\"\nEND    /* SELECT */\n\nIF RetCode > 4,\n & SYSREASON /= \"0008\",          /* The Dataset Does Not Reside on DASD */\n & SYSREASON /= \"0019\",          /* DataSet Resides on Multiple Volumes */\n & SYSREASON /= \"0025\" THEN DO   /* DataSet Migrated to Non-DASD Device */\n   SAY \"************************************************************\"\n   SAY \"An ERROR was detected in the LISTDSI function for file\" LISTDSIFile\n   SAY \"   The return code from LISTDSI is: \" RetCode\n   SAY \"   The 1st message returned from LISTDSI is: \" SYSMSGLVL1\n   SAY \"   The 2nd message returned from LISTDSI is: \" SYSMSGLVL2\n   SAY \"   The text available for SYSREASON(\"SYSREASON\") is:\"\n   SAY \"      \"SYSREASONTXT\n   SAY \"************************************************************\"\n   SYSMSGLVL1=\"\"\n   SYSMSGLVL2=\"\"\n   RETURN RetCode\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Display all of the available information about the file.                  */\n/* ------------------------------------------------------------------------- */\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"  LISTDSI Information for file:\"LISTDSIFile\n   SAY \" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n   SAY \"       SYSDSNAME     =\" SYSDSNAME\n   SAY \"       SYSVOLUME     =\" SYSVOLUME\n   SAY \"       SYSUNIT       =\" SYSUNIT\n   SAY \"       SYSDSORG      =\" SYSDSORG\n   SAY \"       SYSRECFM      =\" SYSRECFM\n   SAY \"       SYSLRECL      =\" SYSLRECL\n   SAY \"       SYSBLKSIZE    =\" SYSBLKSIZE\n   SAY \"       SYSKEYLEN     =\" SYSKEYLEN\n   SAY \"       SYSALLOC      =\" SYSALLOC\n   SAY \"       SYSUSED       =\" SYSUSED\n   SAY \"       SYSUSEDPAGES  =\" SYSUSEDPAGES\n   SAY \"       SYSPRIMARY    =\" SYSPRIMARY\n   SAY \"       SYSSECONDS    =\" SYSSECONDS\n   SAY \"       SYSUNITS      =\" SYSUNITS\n   SAY \"       SYSEXTENTS    =\" SYSEXTENTS\n   SAY \"       SYSCREATE     =\" SYSCREATE\n   SAY \"       SYSREFDATE    =\" SYSREFDATE\n   SAY \"       SYSEXDATE     =\" SYSEXDATE\n   SAY \"       SYSPASSWORD   =\" SYSPASSWORD\n   SAY \"       SYSRACFA      =\" SYSRACFA\n   SAY \"       SYSUPDATED    =\" SYSUPDATED\n   SAY \"       SYSTRKSCYL    =\" SYSTRKSCYL\n   SAY \"       SYSBLKSTRK    =\" SYSBLKSTRK\n   SAY \"       SYSADIRBLK    =\" SYSADIRBLK\n   SAY \"       SYSUDIRBLK    =\" SYSUDIRBLK\n   SAY \"       SYSMEMBERS    =\" SYSMEMBERS\n   SAY \"       SYSREASON     =\" SYSREASON\n   SAY \"       SYSREASON TEXT=\" SYSREASONTXT\n   SAY \"       SYSMSGLVL1    =\" SYSMSGLVL1\n   SAY \"       SYSMSGLVL2    =\" SYSMSGLVL2\n   SAY \"       SYSDSSMS      =\" SYSDSSMS\n   SAY \"       SYSDATACLASS  =\" SYSDATACLASS\n   SAY \"       SYSSTORCLASS  =\" SYSSTORCLASS\n   SAY \"       SYSMGMTCLASS  =\" SYSMGMTCLASS\n   SAY \" \"\n   SAY \" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n   SAY \" \"\nEND    /* IF */\n\nIF SYSDSORG=VS THEN DO\n   IF DisplayDetails = \"Y\" THEN DO\n      SAY \"The \"LISTDSIFile\" File is VSAM. Doing LISTCAT\"\n   END    /* IF */\n   Z=OUTTRAP('ListCat.')\n   \"LISTCAT ENTRY(\"LISTDSIFile\") ALL\"\n   RetCode=rc\n   Z=OUTTRAP('OFF')\n   IF RetCode /= 0 THEN DO\n      SAY \"************************************************************\"\n      SAY \"An ERROR was detected performing LISTCAT for file: \"LISTDSIFile\n      SAY \"   The return code from LISTCAT is: \" RetCode\n      SAY \"************************************************************\"\n   END    /* IF */\n   IF ListCat.0 <= 0 THEN DO\n      SAY \"************************************************************\"\n      SAY \"No data in the ListCat STEM\"\n      SAY \"   The number of entries in the ListCat STEM is: \" ListCat.0\n      SAY \"************************************************************\"\n   END    /* IF */\nEND    /* IF */\nELSE DO\n   RETURN RetCode\nEND    /* ELSE */\n\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"   The number of entries in the ListCat STEM is: \" ListCat.0\nEND    /* IF */\n\nClusterFlag=\"N\";DataFlag=\"N\";IndexFlag=\"N\";z=1;AssocStem.0=0\nSYSDataVols=\"\";SYSIndexVols=\"\"\n/* ------------------------------------------------------------------------- */\n/* Collect all of the available information about the file.                  */\n/* ------------------------------------------------------------------------- */\nIF RetCode=0 & ListCat.0 > 0 THEN\n   DO y=1 TO ListCat.0\n      PARSE VAR ListCat.y p1 p2 p3 p4 .\n            SELECT\n              WHEN p1 = \"CLUSTER\" THEN DO\n                   ClusterFlag=\"Y\"\n                   DataFlag=\"N\"\n                   IndexFlag=\"N\"\n                   AssocFlag=\"N\"\n                   SYSClusterName=p3\n              END    /* WHEN */\n              WHEN p1 = \"DATA\" THEN DO\n                   ClusterFlag=\"N\"\n                   DataFlag=\"Y\"\n                   IndexFlag=\"N\"\n                   AssocFlag=\"N\"\n                   SYSDataName=p3\n              END    /* WHEN */\n              WHEN p1 = \"INDEX\" THEN DO\n                   ClusterFlag=\"N\"\n                   DataFlag=\"N\"\n                   IndexFlag=\"Y\"\n                   AssocFlag=\"N\"\n                   SYSIndexName=p3\n              END    /* WHEN */\n              WHEN ClusterFlag=\"Y\",\n                 & p1=\"ASSOCIATIONS\" THEN DO\n                   ClusterFlag=\"N\"\n                   DataFlag=\"N\"\n                   IndexFlag=\"N\"\n                   AssocFlag=\"Y\"\n              END    /* WHEN */\n              WHEN ClusterFlag=\"Y\",\n                 & p1=\"IN-CAT\" THEN DO\n                   SYSCatName=p3\n              END    /* WHEN */\n              WHEN ClusterFlag=\"Y\",\n                 & SUBSTR(p1,1,13)=\"DATASET-OWNER\" THEN DO\n                   SYSCreateDate=SUBSTR(p2,17,8)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & p1=\"IN-CAT\" THEN DO\n                   SYSDataCat=p3\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"KEYLEN\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataKeyLen=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataAvgLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSDataCISize=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,3)=\"RKP\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataKeyStrt=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataMaxLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSDataCIPerCA=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"REC-TOTAL\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataRecTotal=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCISplits=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-DELETED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCASplits=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p3)+1\n                   Len=LENGTH(p3)-LASTPOS('-',p3)\n                   SYSDataExtents=SUBSTR(p3,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,12)=\"REC-INSERTED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCIFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-UPDATED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSDataCAFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,10)=\"SPACE-TYPE\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataAllocType=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-PRI\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataAllocPri=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-SEC\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSDataAllocSec=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN DataFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"VOLSER\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   IF SYSDataVols=\"\" THEN DO\n                      SYSDataVols= SUBSTR(p1,StartPos,Len)\n                   END    /* IF */\n                   ELSE DO\n                      SYSDataVols=SYSDataVols || \",\" || SUBSTR(p1,StartPos,Len)\n                   END    /* ELSE */\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & p1=\"IN-CAT\" THEN DO\n                   SYSIndexCat=p3\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"KEYLEN\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexKeyLen=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexAvgLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSIndexCISize=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,3)=\"RKP\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexKeyStrt=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexMaxLrecl=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSIndexCIPerCA=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"REC-TOTAL\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexRecTotal=SUBSTR(p1,StartPos,Len)\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCISplits=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-DELETED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCASplits=SUBSTR(p2,StartPos,Len)\n                   StartPos=LASTPOS('-',p3)+1\n                   Len=LENGTH(p3)-LASTPOS('-',p3)\n                   SYSIndexExtents=SUBSTR(p3,StartPos,Len)\n                   StartPos=LASTPOS('-',p4)+1\n                   Len=LENGTH(p4)-LASTPOS('-',p4)\n                   SYSIndexLevels=SUBSTR(p4,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,12)=\"REC-INSERTED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCIFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,11)=\"REC-UPDATED\" THEN DO\n                   StartPos=LASTPOS('-',p2)+1\n                   Len=LENGTH(p2)-LASTPOS('-',p2)\n                   SYSIndexCAFreeSP=SUBSTR(p2,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,10)=\"SPACE-TYPE\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexAllocType=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-PRI\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexAllocPri=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,9)=\"SPACE-SEC\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   SYSIndexAllocSec=SUBSTR(p1,StartPos,Len)\n              END    /* WHEN */\n              WHEN IndexFlag=\"Y\",\n                 & SUBSTR(p1,1,6)=\"VOLSER\" THEN DO\n                   StartPos=LASTPOS('-',p1)+1\n                   Len=LENGTH(p1)-LASTPOS('-',p1)\n                   IF SYSIndexVols=\"\" THEN DO\n                      SYSIndexVols= SUBSTR(p1,StartPos,Len)\n                   END    /* IF */\n                   ELSE DO\n                      SYSIndexVols=SYSIndexVols || \",\",\n                                  || SUBSTR(p1,StartPos,Len)\n                   END    /* ELSE */\n              END    /* WHEN */\n              WHEN AssocFlag=\"Y\" THEN DO\n                   AssocStem.z=p1\n                   AssocStem.0=z\n                   z=z+1\n              END    /* WHEN */\n              OTHERWISE\n                   ITERATE\n   END    /* SELECT */\nEND    /* IF */\n\n/* ------------------------------------------------------------------------- */\n/* Display all of the available information about the VSAM File.             */\n/* ------------------------------------------------------------------------- */\nIF DisplayDetails = \"Y\" THEN DO\n   SAY \"  LISTCAT Information for file:\"LISTDSIFile\n   SAY \" +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\"\n   SAY \"       Cluster Name             =\" SYSClusterName\n   SAY \"       Cluster Catalog          =\" SYSCatName\n   SAY \"       Cluster Create Date      =\" SYSCreateDate\n   SAY \"       Cluster Associations:\"\n   IF AssocStem.0 <=0 THEN DO\n      AssocStem.1=\"No Associations Found\"\n      AssocStem.0=1\n   END    /* IF */\n   DO z=1 TO AssocStem.0\n      SAY \"                                  \"AssocStem.z\n   END    /* DO */\n   SAY \" \"\n   SAY \"       Data Segment Name        =\" SYSDataName\n   SAY \"       Data Segment Catalog     =\" SYSDataCat\n   SAY \"       Data Segment Volume      =\" SYSDataVols\n   SAY \"       Data Segment Key Length  =\" SYSDataKeyLen\n   SAY \"       Data Segment Key Pos     =\" SYSDataKeyStrt\n   SAY \"       Data Segment Avg LRECL   =\" SYSDataAvgLrecl\n   SAY \"       Data Segment Max Lrecl   =\" SYSDataMaxLrecl\n   SAY \"       Data Segment CI Size     =\" SYSDataCISize\n   SAY \"       Data Segment CI per CA   =\" SYSDataCIPerCA\n   SAY \"       Data Segment Total Recs  =\" SYSDataRecTotal\n   SAY \"       Data Segment CI Splits   =\" SYSDataCISplits\n   SAY \"       Data Segment CI FreeSP   =\" SYSDataCIFreeSP\"%\"\n   SAY \"       Data Segment CA Splits   =\" SYSDataCASplits\n   SAY \"       Data Segment CA FreeSP   =\" SYSDataCAFreeSP\"%\"\n   SAY \"       Data Segment Extents     =\" SYSDataExtents\n   SAY \"       Data Segment Alloc Units =\" SYSDataAllocType\n   SAY \"       Data Segment Primary     =\" SYSDataAllocPri\n   SAY \"       Data Segment Secondary   =\" SYSDataAllocSec\n   SAY \" \"\n   SAY \"       Index Segment Name       =\" SYSIndexName\n   SAY \"       Index Segment Catalog    =\" SYSIndexCat\n   SAY \"       Index Segment Volume     =\" SYSIndexVols\n   SAY \"       Index Segment Key Length =\" SYSIndexKeyLen\n   SAY \"       Index Segment Key Pos    =\" SYSIndexKeyStrt\n   SAY \"       Index Segment Avg LRECL  =\" SYSIndexAvgLrecl\n   SAY \"       Index Segment Max Lrecl  =\" SYSIndexMaxLrecl\n   SAY \"       Index Segment CI Size    =\" SYSIndexCISize\n   SAY \"       Index Segment CI per CA  =\" SYSIndexCIPerCA\n   SAY \"       Index Segment Total Recs =\" SYSIndexRecTotal\n   SAY \"       Index Segment CI Splits  =\" SYSIndexCISplits\n   SAY \"       Index Segment CI FreeSP  =\" SYSIndexCIFreeSP\"%\"\n   SAY \"       Index Segment CA Splits  =\" SYSIndexCASplits\n   SAY \"       Index Segment CA FreeSP  =\" SYSIndexCAFreeSP\"%\"\n   SAY \"       Index Segment Extents    =\" SYSIndexExtents\n   SAY \"       Index Segment Levels     =\" SYSIndexLevels\n   SAY \"       Index Segment Alloc Units=\" SYSIndexAllocType\n   SAY \"       Index Segment Primary    =\" SYSIndexAllocPri\n   SAY \"       Index Segment Secondary  =\" SYSIndexAllocSec\n   SAY \" \"\nEND    /* IF */\n\nRETURN RetCode\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT655/FILE655.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT655", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}