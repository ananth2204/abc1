{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011711000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 176358, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE303.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 176358, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE303.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x04\\x06'", "DS1TRBAL": "b'x\\x10'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\x90\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\x02'\\x00\\x06\\x02'\\x00\\n\\x00\\x05\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$NOTES": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00\\x00\\x00\\x972/\\x00\\x972/\\x17\"\\x00\\x10\\x00\\x10\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T17:22:00", "lines": 16, "newlines": 16, "modlines": 0, "user": "BRODSKY"}, "text": "This is a bunch of files to create a program to connect to VTAM\napplications from TSO.\n\nAPPLTAB       - CSECT with applids (gets loaded by XIMTERM)\nASMAPPL       - JCL to asm/lked APPLTAB\nASMXIM        - JCL to asm/lked XIMTERM\nSIMTERM@      - Original code from CBT tape\nVTAMLIST      - Vtam stuff to be activated.\nXIMTERM       - TSO command processor. Call it as follows:\n                XIMTERM APPL(whatever).  Default appl is ROSCOE.\n\nA few mods were made to original application, the most important in\nSCIP exit. I tested this thing under OS/390 1.3.0 with VTAM 4.4 and\nwas able to connect to CICS, IBMLINK, ROSCOE and TSO.\n\nAlex Brodsky.        abrodsky@ato.com\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "APPLTAB": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972/\\x00\\x972/\\x10C\\x002\\x002\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T10:43:00", "lines": 50, "newlines": 50, "modlines": 0, "user": "BRODSKY"}, "text": "***********************************************************************\n*             ELLIS HOLMAN --                                         *\n*                                                                     *\n*             MODULE NAME IS APPLTAB                                  *\n*                                                                     *\n*             FUNCTION:                                               *\n*                DESCRIBES THE ACB NAMES USED BY SIMTERM.             *\n*                                                                     *\n*                                                                     *\n*  NOTES:                                                             *\n*    1) THE FIRST MACRO IN THIS ASSEMBLY DESCRIBES THE NUMBER OF      *\n*       ENTRIES THAT FOLLOW.  THE NUMBER OF ENTRIES MUST MATCH.       *\n*                                                                     *\n*   MODIFICATION HISTORY:                                             *\n*                                                                     *\n* 05/96 AXB  - ACB NAMES FOR ATOCHEM ARE 4 CHAR LONG NOT 8.           *\n*            - INCLUDE THE LENGTH AND MAKE ENTRY 9 BYTES LONG         *\n*                                                                     *\n***********************************************************************\n         MACRO\n         SIZE  &SIZ\nTABSIZE  DC    F'&SIZ'\n         MNOTE 0,'THIS SIZE MUST MATCH NUMBER OF ENTRIES THAT FOLLOW'\n         MEND\n         MACRO\n         APPL   &FLD\n&LEN     SETA  K'&FLD\n         AIF   (&LEN GT 8).APLONG\n         AIF   (&LEN LT 3).APSHORT\n         DC    AL1(&LEN),CL8'&FLD'                                *AXB*\n         AGO   .ENDMAC\n.APLONG  ANOP\n         MNOTE 8,'APPL NAME MUST BE 8 CHAR LONG OR LESS'\n         AGO   .ENDMAC\n.APSHORT ANOP\n         MNOTE 8,'APPL NAME MUST BE MORE THAN 3 CHARS LONG'\n         AGO   .ENDMAC\n.ENDMAC  ANOP\n         MEND\n         MACRO\n         ENDAPPL\n.ANOTE   ANOP\n         MNOTE 0,'APPLS MUST BE DEFINED TO VTAM'\n         END\n         MEND\n         SIZE 2\n*        APPL AXB0\n         APPL AXB1\n         APPL AXB2\n         ENDAPPL\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMAPPL": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972/\\x00\\x972/\\x10C\\x00#\\x00#\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T10:43:00", "lines": 35, "newlines": 35, "modlines": 0, "user": "BRODSKY"}, "text": "//FB435EAA    JOB (90100910),'SSE ALEX BRODSKY ',\n//             MSGCLASS=3,\n//             CLASS=A,\n//             NOTIFY=FB435EA,\n//             REGION=4096K\n//*\n//* ASM/LKED APPLTAB CSECT LOADED BY SIMTERM PROGRAM\n//*\n//ASM      PROC AMEMB=,SRCDSN=FB435EA.SIMTERM.NEW\n//A        EXEC PGM=IEV90,PARM='NODECK,OBJECT,TERM',REGION=2M\n//SYSLIB   DD   DSN=FB435EA.SIMTERM.NEW,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD   SYSOUT=*,DCB=(LRECL=80,BLKSIZE=23440)\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DCB=(LRECL=80,BLKSIZE=400),DSN=&&LOADSET\n//SYSIN    DD   DSN=&SRCDSN(&AMEMB),DISP=SHR\n//L        EXEC PGM=IEWL,\n//             PARM='XREF,LET,LIST,NCAL',REGION=2M,COND=(8,LT,A)\n//OBJECT   DD   DSN=&&LOADSET,DISP=(OLD,DELETE)\n//SYSLIB   DD   DSN=SYS1.CSSLIB,DISP=SHR\n//SYSLMOD  DD   DSN=FB435EA.AXB.LOAD,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(3,2))\n//SYSPRINT DD   SYSOUT=*,DCB=(RECFM=FB,BLKSIZE=3509)\n//         PEND\n//*----------------------------------------------------------\n//USAPPL   EXEC ASM,AMEMB=APPLTAB\n//L.SYSLIN DD   *\n INCLUDE OBJECT\n NAME APPLTAB(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "ASMXIM": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972/\\x00\\x972/\\x10C\\x00$\\x00$\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T10:43:00", "lines": 36, "newlines": 36, "modlines": 0, "user": "BRODSKY"}, "text": "//FB435EAA    JOB (90100910),'SSE BILL MORGAN ',\n//             MSGCLASS=3,\n//             CLASS=A,\n//             NOTIFY=FB435EA\n//*\n//* ASM/LKED SIMTERM PROGRAM\n//*\n//ASM      PROC AMEMB=,SRCDSN=FB435EA.SIMTERM.NEW\n//A        EXEC PGM=IEV90,PARM='NODECK,OBJECT,TERM',REGION=2M\n//SYSLIB   DD   DSN=FB435EA.SIMTERM.NEW,DISP=SHR\n//         DD   DSN=SYS1.MACLIB,DISP=SHR\n//         DD   DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(10,5))\n//SYSPUNCH DD   SYSOUT=*,DCB=(LRECL=80,BLKSIZE=23440)\n//SYSTERM  DD   SYSOUT=*\n//SYSPRINT DD   SYSOUT=*\n//SYSLIN   DD   DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5)),\n//             DCB=(LRECL=80,BLKSIZE=400),DSN=&&LOADSET\n//SYSIN    DD   DSN=&SRCDSN(&AMEMB),DISP=SHR\n//L        EXEC PGM=IEWL,\n//             PARM='XREF,LET,LIST,NCAL',REGION=2M,COND=(8,LT,A)\n//OBJECT   DD   DSN=&&LOADSET,DISP=(OLD,DELETE)\n//SYSLIB   DD   DSN=SYS1.CSSLIB,DISP=SHR\n//SYSLMOD  DD   DSN=FB435EA.AXB.LOAD,DISP=SHR\n//* SYSLMOD  DD   DSN=SYS1.TEMPLIB,DISP=SHR\n//SYSUT1   DD   UNIT=SYSDA,SPACE=(CYL,(3,2))\n//SYSPRINT DD   SYSOUT=*,DCB=(RECFM=FB,BLKSIZE=3509)\n//         PEND\n//*----------------------------------------------------------\n//USISPF   EXEC ASM,AMEMB=XIMTERM\n//L.SYSLIN DD   *\n INCLUDE OBJECT\n ENTRY SIMTERM\n NAME XIMTERM(R)\n/*\n//\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "SIMTERM@": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972/\\x00\\x972/\\x10C\\x02v\\x02v\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T10:43:00", "lines": 630, "newlines": 630, "modlines": 0, "user": "BRODSKY"}, "text": "//EAHSIMTE  JOB (B002,ESD-OSSB,20,SCHED,X3383,HDSK-G),\n// 'ELLIS HOLMAN - IBM',CLASS=S,MSGCLASS=H,MSGLEVEL=(1,1),\n// NOTIFY=ROSCEAH,REGION=4096K\n//*\n//* LIB: BIEAH.PDS.TSODATA(SIMTERM)\n//* DOC: THIS MODULE ALLOWS ACCESS TO OTHER\n//*      VTAM APPLICATIONS WITHOUT HAVING\n//*      TO LOG OFF TSO.\n//*\n//ASM      EXEC PGM=IEV90,PARM='TERM,XREF(SHORT),OBJECT,NODECK'\n//SYSTERM  DD   SYSOUT=*\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1700,(600,100))\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=VIO,SPACE=(80,(200,50)),\n//         DISP=(MOD,PASS)\n//SYSIN    DD   *\n*                                      SIMULATED TERMINALS\n         TITLE  'ACCESS VTAM APPLS WITHOUT LOGGING OFF TSO'\n***********************************************************************\n*             ELLIS HOLMAN --                                         *\n*                                                                     *\n*             MODULE NAME IS SIMTERM                                  *\n*                                                                     *\n*             FUNCTION:                                               *\n*                ALLOWS ACCESS TO OTHER VTAM APPLICATIONS             *\n*                WITHOUT HAVING TO LOG OFF TSO.                       *\n*  DEPENDANCIES:                                                      *\n*    1) BASE REGISTER IS 12.                                          *\n*    2) TABLE AT OF ACBS CALLED APPLTAB IS LOADED AND SCANNED.        *\n*    3) FIRST FOUR BYTES OF APPLTAB INDICATE THE NUMBER OF ENTRIES    *\n*       (AVAILABLE ACB'S).  THIS MUST MATCH THE NUMBER OF ACB NAMES   *\n*       IN THE ACB NAME TABLE.                                        *\n*    4) PARMS PASSED TO THE PROGRAMMING IN THE FORM OF:               *\n*          SIMTERM APPL(APPLNAME)                                     *\n*       SPECIFY THE APPL TO WHICH A SESSION WILL ATTEMPT              *\n*       TO BIND TO.  THIS NAME IS MOVED INTO STORAGE AT               *\n*       LABEL ECHO1.                                                  *\n*                                                                     *\n*   MODIFICATION HISTORY:                                             *\n*                                                                     *\n***********************************************************************\nSIMTERM  CSECT\n         DC    C'SIMTERM ALLOWS ACCESS TO '\n         DC    C'VTAM APPLICATIONS WITHOUT '\n         DC    C'LOGGING OFF TSO  '\n         DC    C'DATE ASSEMBLED='\n         DC    C'&SYSDATE'\n         DC    C'  '\n         DC    C'TIME ASSEMBLED='\n         DC    C'&SYSTIME'\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\nBEGIN    SAVE  (14,12)                      SAVE REGISTERS\n         BALR  R12,0                        SET BASE REG\nBASE     DS    0H                           IDENT FOR REST. BASE\n         USING *,R12\n*---------------------------------------------------------------------*\n*  THE FOLLOWING CODE DOES THE STANDARD SAVE AREA                     *\n*  ADDRESSING SETUP, INITIALIZES THE ECB ADDRESSES                    *\n*  THE TSO COMMAND BUFFER AREA, AND THEN SCANS                        *\n*  THE COMMAND BUFFER FOR THE EXPECTED PARMS.                         *\n*  IF THE EXPECTED PARMS ARE NOT FOUND (SEE                           *\n*  DEPENDANCIES ABOVE FOR COMMAND FORMAT),                            *\n*  A DEFAULT APPLICATION OF 'ROSCOE' IS REQUESTED                     *\n*  FOR SESSION INITIATION.                                            *\n*---------------------------------------------------------------------*\n         ST    R12,BASESAVE                 SAVE BASE REG\n         ST    R13,SAVEAREA+4               SAVE OLD SAVE AREA\n         LA    R13,SAVEAREA                 SET NEW SAVE AREA\n         MVC   WAITECB,=F'0'                CLEAR WAIT ECB\n         USING CPPL,R1                      ESTAB. CPPL MAP\n         L     R4,CPPLCBUF                  PICKUP CBUF ADDRESS\n         LH    R1,=H'80'                    LOAD LINE LENGTH TO SCAN\n         TR    4(76,R4),UPCASE              XLATE CBUF TO UPPER CASE\nAPPLSCAN DS    0H\n         CLC   0(4,R4),=C'APPL'             SEARCH FOR KEY WORD\n         BE    SETAPL                       WHEN FOUND SET UP APPLID\n         LA    R4,1(R4)                     INDEX FOR NEXT BYTE\n         BCT   R1,APPLSCAN                  CHECK NEXT POSSIBLE\n         B     DEFAPPL                      IF NO APPL KEYWRD=DEFAULT\nSETAPL   DS    0H\n         MVC   APPLID(8),5(R4)              IF CORRECT LENGTH DEFAULT\n         B     CHGNIB                       MODIFY NIB AS NEEDED\nDEFAPPL  DS    0H\n         MVC   APPLID,=C'ROSCOE  '          OR USE DEFAULT\n*---------------------------------------------------------------------*\n*  CHANGE THE NIB TO ACCESS THE REQUESTED APPLICATION                 *\n*---------------------------------------------------------------------*\nCHGNIB   DS    0H\n         MODCB NIB=SIMNIB,                                             X\n               AM=VTAM,                                                X\n               NAME=(*,APPLID)\n         USING IFGRPL,R4                         SET RPL DSECT\n*---------------------------------------------------------------------*\n*  TURN ON TSO FULL SCREEN MODE AND ACTIVATE TSO ATTENTION EXIT       *\n*---------------------------------------------------------------------*\n         STTMPMD ON,KEYS=ALL                     SET TERMINAL MOD ON\n         STFSMODE ON,                                                  X\n               INITIAL=YES,                                            X\n               NOEDIT=YES\n         LA    R3,STAXLIST                       LOAD ADDR OF STAX PARM\n         STAX  ATTNEXIT,MF=(E,(3))               ISSUE STAX MACRO\n*---------------------------------------------------------------------*\n*  DO INITIAL CLEAR OF SCREEN AND ATTEMPT OPEN OF ACB                 *\n*---------------------------------------------------------------------*\n         TPUT  CLEAR,16,NOEDIT                   CLEAR SCREEN\n         LOAD  EP=APPLTAB                        LOAD ACB NAME TABLE\n         LR    R9,R0                             PICK UP ADDR OF TABLE\n         L     R9,0(0,R9)                        LOAD IN SIZE OF TABLE\n         LR    R10,R0                            LOAD ADDR OF ACB NAMES\n         LA    R10,4(R10)                        BYPASS TABLE SIZE\n         LA    R5,SIMACB\n         USING IFGACB,R5\n*---------------------------------------------------------------------*\n*  SCAN ACB TABLE TO FIND AN ACB NOT IN USE, IF UNABLE TO FIND ONE    *\n*  THAT IS NOT IN USE SEND A MESSAGE TO THE TERMINAL THAT THE         *\n*  REQUESTED SESSION COULD NOT BE ACTIVATED.                          *\n*---------------------------------------------------------------------*\nFINDACB  DS    0H\n         MVC   ECHO1+1(8),0(R10)                 MOVE IN FIRST ACB NAME\n         OPEN  SIMACB                            OPEN VTAM ACB\n         LTR   R15,R15                           RC = 0\n         BZ    ACBOK                             IF NOT EXIT\n         CLI   ACBERFLG,X'58'                    OPEN ALREADY ??\n         BNE   BADACB                            IF NOT LEAVE\n         LA    R10,8(R10)                        INDEX TO NEXT NAME\n         BCT   R9,FINDACB                        LOOP FOR ACB\nBADACB   DS    0H\n         STFSMODE OFF                            SET FULL SCRN OFF\n         TPUT  ACBMSG,30                           SEND ERROR MSG\n         B     GETOUT                            TERMINATE AND EXIT\nACBOK    DS    0H\n*---------------------------------------------------------------------*\n*  UPON SUCCESSFULLY OPENING AN ACB OBTAIN INPUT BUFFER AREA VIA      *\n*  GETMAIN, EXIT IF UNABLE TO GET STORAGE.  OTHERWISE, ISSUE VTAM     *\n*  REQUEST SESSION MACRO TO START A SESSION BETWEEN THE REQUESTED     *\n*  APPLICATION AND THIS PROGRAM'S ACB                                 *\n*---------------------------------------------------------------------*\n         GETMAIN RC,LV=3000                      GET INPUT AREA\n         ST    R1,INAREA                         STORE ADDRESS OF AREA\n         GETMAIN RC,LV=3000                      GET MORE INPUT AREA\n         ST    R1,OUTAREA                        STORE THIS ADR TOO\n         SETLOGON RPL=SIMRPL1,                                         X\n               OPTCD=(START,SYN)\n         LTR   R15,R15                           RC = 0\n         BNZ   GETOUT                            NO TERMINATE\n         LA    R5,DATAAREA                       GET DATA ADDRESS\n         L     R4,=F'8'                          GET LENGTH\n         CLC   DATAAREA,=CL8' '                  ANY DATA\n         BE    NORMREQ                           NO, CLEAR LENGTH\n         B     HCFREQ                            YES, LEAVE LENGTH\nNORMREQ  DS    0H                                    *\n         SR    R4,R4                             CLEAR AREA LENGTH\nHCFREQ   DS    0H                                    *\n         REQSESS RPL=SIMRPL1,NIB=SIMNIB,                               X\n               OPTCD=(SYN,NQ),                                         X\n               RECLEN=(4),                                             X\n               AREA=(5)\n         LTR   R15,R15                           R C = 0\n         BNZ   ERROR                             TERMINATE AND EXIT\n         LTR   R0,R0                             REASON CODE = 0\n         BZ    DORECV                            TERMINATE AND EXIT\nERROR    DS    0H\n         STFSMODE OFF                            SET FULL SCRN OFF\n         TPUT  EMSG,45                           SEND ERROR MSG\n         B     GETOUT                            TERMINATE AND EXIT\nDORECV   DS    0H\n*---------------------------------------------------------------------*\n* NOW THAT THE SESSION BETWEEN THIS PROGRAM AND THE REQUESTED         *\n* APPLICATION IS BOUND, SEND A REQUEST TO THE APPLICATION TO          *\n* RECEIVE DATA FROM IT.                                               *\n*---------------------------------------------------------------------*\n         L     R7,INAREA\n         RECEIVE RPL=SIMRPL2,                                          X\n               EXIT=RECVEX,                                            X\n               AREA=(7),                                               X\n               AREALEN=3000,                                           X\n               OPTCD=(ASY,ANY,Q,CA)\n         WAIT  ECB=WAITECB                       WAIT FOR ECB TO POST\nRESET    DS    0H\n         MVI   RESETCNT,C'N'                     CLEAR RESET SWITCH\n         LA    R8,LOOPVAL1                       WAIT FOR 14 MINS\n         MVC   WAITINT,HALFSEC                   IN 1/2 SEC INTERVALS\nLOOP     DS    0H\n         STIMER WAIT,DINTVL=WAITINT              STIMER WAIT\n         CLI   EXIT,C'Y'                         DO WE EXIT\n         BE    GETOUT                            YES\n         CLI   RESETCNT,C'Y'                     RESET COUNT\n         BE    RESET                             YES GO RESET\n         L     R7,OUTAREA                        GET IOAREA ADDRESS\n*---------------------------------------------------------------------*\n*  ATTEMPT TO RECEIVE INPUT FROM THE TERMINAL. RESET WAIT COUNTERS    *\n*  IF NO DATA RECEIVED AND CONTINUE TO WAIT FOR TERMINAL INPUT        *\n*---------------------------------------------------------------------*\n         TGET  (7),3000,ASIS,NOWAIT              GET INPUT FROM TERM\n         C     R15,=F'4'                         ANY INPUT\n         BNE   GOODIN                            PROCESS INPUT\n         BCT   8,LOOP                            DECRIMENT AND LOOP\n         CLC   WAITINT,TWOSEC                    IN 2ND INTERVAL\n         BE    GETOUT                            YES, TIMED OUT\n         LA    8,LOOPVAL2                        LOOP FOR 2 SEC\n         MVC   WAITINT,TWOSEC                    IN TWO SEC INTERVAL\n         B     LOOP                              GO LOOP\nGOODIN   DS    0H\n         ST    R1,SLENGTH                        GET INPUT LENGTH\n         L     R6,CID                            LOAD CID\n         L     R5,SLENGTH                        LOAD LENGTH\n         L     R7,OUTAREA                        LOAD I/O AREA ADDR\n*---------------------------------------------------------------------*\n*  AFTER GETTING INPUT FROM THE TERMINAL, FORWARD IT TO THE           *\n*  APPLICATION                                                        *\n*---------------------------------------------------------------------*\n         CLI   BBSW,C'Y'                         BETWEEN BRACKET ?\n         BE    BBSEND                            YES - START BRACKET\n         SEND  RPL=SIMRPL3,                                            X\n               AREA=(7),                                               X\n               RECLEN=(5),                                             X\n               ARG=(6),                                                X\n               OPTCD=SYN,                                              X\n               BRACKET=(NBB,NEB),                                      X\n               CHNGDIR=(CMD),                                          X\n               STYPE=REQ,                                              X\n               CONTROL=DATA,                                           X\n               RESPOND=(NEX,NFME,NRRN,NQRESP)\n         B     LOOP\nBBSEND   DS    0H\n         SEND  RPL=SIMRPL3,                                            X\n               AREA=(7),                                               X\n               RECLEN=(5),                                             X\n               ARG=(6),                                                X\n               OPTCD=SYN,                                              X\n               BRACKET=(BB,NEB),                                       X\n               STYPE=REQ,                                              X\n               CONTROL=DATA,                                           X\n               RESPOND=(NEX,NFME,NRRN,NQRESP)\n         MVI   BBSW,C'N'                         INDICATE IN BRACKET\n         B     LOOP                                  *\nGETOUT   DS    0H\n         CLOSE SIMACB                            CLOSE VTAM ACB\n         STTMPMD OFF                             SET TERM MODE OFF\n         STFSMODE OFF                            SET FULLSCREEN OFF\n         L     R13,SAVEAREA+4                    LOAD OLD SAVEAREA\n         RETURN (14,12)                          RETURN TO CALLER\nSCIPEXIT DS    0H\n         USING *,R15                             ESTAB. BASE REG\n         L     R12,BASESAVE                      LOAD OLD BASE REG\n         DROP  R15                               DROP REG 15\n         USING BASE,R12                          SET REG 12\n         LR    R3,R14                            LOAD RETURN ADDR\n         LA    R13,SAVE2                         LOAD NEW SAVEAREA\n         L     R4,4(,1)                          LOAD CID VALUE\n         L     R5,16(,1)                         LOAD RPL ADDRESS\n         USING IFGRPL,R5                         MAP RPL\n         CLI   RPLCNTDC,RPLTBIND                 IS BIND REQUEST\n         BE    BIND                              YES BIND SESSION\n         CLI   RPLCNTDC,RPLTUNBD                 IS UNBIND REQUEST\n         BE    UNBIND                            YES DROP SESSION\n         CLI   RPLCNTSC,RPLCLEAR                 IS CLEAR REQUEST\n         BE    DOCLEAR                           YES CLEAR\n         CLI   RPLCNTSC,RPLSDT                   IS SDT REQUEST\n         BE    DOSDT                             YES DO SDT\n         ABEND 2,DUMP                            UNKOWN REQUEST - DUMP\nUNBIND   DS    0H\n         L     R6,RPLAREA                        GET RU AREA ADDR\n         CLC   0(2,R6),=X'3202'                  RETAIN RESOURSES\n         BE    HANGON                            YES KEEP THEM\n         MVI   EXIT,C'Y'                         SET EXIT SWITCH ON\n         TERMSESS  RPL=SIMRPL4,                                        X\n               ARG=(4),                                                X\n               OPTCD=(SYN,COND)\nHANGON   DS    0H\n         LR    R14,R3                            GET RETURN ADDR\n         BR    R14                               RETURN TO VTAM\nBIND     DS    0H\n         ST    R4,CID                            SAVE CID VALUE\n         ST    R4,SIMNIB+4                       SAVE CID IN NIB\n         OPNSEC RPL=SIMRPL4,                                           X\n               OPTCD=(SYN,CA),                                         X\n               NIB=SIMNIB\n         C     R15,=F'32'                        SYNAD DETECTED\n         BE    SDTEX                             GET OUT WAIT FOR BIND\n         LTR   R15,R15                           R C = 0\n         BNZ   GETOUT                            TERMINATE AND EXIT\n         POST  WAITECB                           POST ECB\n         LR    R14,R3                            RESTORE RETURN ADDR\n         BR    R14                               RETURN TO VTAM\nDOCLEAR  DS    0H\n         MVI   BBSW,C'Y'                         CLEAR BRACKET SWITCH\nDOSDT    DS    0H\nSDTEX    DS    0H\nCLEAREX  DS    0H\n         LR    R14,R3                            GET RETURN ADDRESS\n         BR    R14                               RETURN TO VTAM\nLEREXIT  DS    0H                                VTAM LERAD EXIT\n         USING *,R15                             ESTABLISH BASE REG\n         L     R12,BASESAVE                      LOAD BASE VALUE\n         ST    R14,SAVE3                         SAVE RETURN ADDR.\n         DROP  R15                               DROP R15 AS BASE\n         USING BASE,12                           ESTAB ADDRESS\n         LR    R5,R1                             LOAD RPL ADDR\n         LR    R3,R14                            LOAD RTN ADDR\n         USING IFGRPL,R5                         MAP RPL\n         CLI   RPLFDB2,X'13'                     INVALID CID\n         BER   R14                               YES IGNORE ERROR\n         ABEND 4095,DUMP                         ABEND OTHERWISE\n         BR    R14                               RETURN TO VTAM\nSYNEXIT  DS    0H                                SYNAD EXIT\n         USING *,R15                             EST. ADDR\n         L     R12,BASESAVE                      LOAD OLD BASE\n         DROP  R15                               DROP REG 15\n         ST    R0,SAVER0\n         LR    R5,R1                             GET RPL ADDR\n         LR    R3,R14                            LOAD RETURN ADR\n         USING IFGRPL,R5                         MAP RPL DSECT\nSYNTEST1 DS    0H                                LU NOT ACTIVE\n         MVI   EXIT,C'Y'                         SET XIT SWITCH\n         CLC   RPLRTNCD(2),=X'1000'\n         BNE   SYNTEST2\n         L     R15,=F'10'                        SET RC\n         BR    R14                               RETURN TO VTAM\nSYNTEST2 DS    0H                                SESSION TERMINATED\n         CLC   RPLRTNCD(2),=X'100D'              SESS TERM\n         BER   R14                               RETURN TO VTAM\n         CLC   RPLRTNCD(2),=X'081E'              SESSION REF ERR\n         BER   R14                               RETURN TO VTAM\n         CLC   RPLRTNCD(2),=X'0C0B'              SESSION TERM\n         BNE   SYNDUMP                           RETURN TO VTAM\n         BR    R14                               RETURN TO VTAM\nSYNDUMP  DS    0H                                DUMP PGM SYN ERR.\n         CLC   SAVER0,=F'16'                     CHECK IF R0 SHOWS APPL\n*                                                NOT AVAILABLE\n         BNE   SYNERR                            IF R0 EQ X'10' THEN\n         STFSMODE OFF                            SET FULL SCRN OFF\n         TPUT  EMSG,45                           SEND ERROR MSG\n         MVI   EXIT,C'Y'                         SET XIT SWITCH\n         BR    R14                               RETURN TO VTAM\nSYNERR   DS    0H\n         ABEND 4094,DUMP\n         BR    R14\nRECVEX   DS    0H                                VTAM RECEIVE EXIT\n         USING *,R15                             EST. BASE REG\n         L     R12,BASESAVE                      EST. OLD BASE\n         DROP  R15                               DROP R15 BASE\n         USING BASE,R12                          BASE R12 FOR GLOBAL\n         ST    R14,SAVE3                         SAVE RETURN ADDR\n         LA    R13,SAVE3A                        LOAD SAVE AREA ADDR\n         MVI   BBSW,C'N'                         SET BRACKET SW OFF\n         MVI   RESPSW,C'N'                       SET RESP SW OFF\n         CHECK RPL=(1)                           CHECK RECV\n         LTR   R15,R15                           CHECK OK\n         BE    RECOK                             THEN PROCESS\n         MVI   EXIT,C'Y'                         SET XIT SWITCH\n         B     EXITRECV                          EXIT OUT\nRECOK    DS    0H\n         LA    R5,0(,R1)                         LOAD RPL ADDRESS\n         TM    20(R5),X'02'                      TYPE 1 RESP\n         BO    NORESP                            NOT TYPE 1\n         TM    20(R5),X'04'                      DEF TYPE 1 RESP\n         BO    NORESP                            NOT DEF TYPE 1 RESP\n         MVI   RESPSW,C'Y'                       INDICATE RESP NEEDED\nNORESP   DS    0H\n         TESTCB RPL=(5),                                               X\n               AM=VTAM,                                                X\n               BRACKET=(BB,EB)\n         BNE   BBTEST2                           NO TRY END BRACKET\n         MVI   BBSW,C'Y'                         SET BETWEEN BRACKET ??\n         B     NOBB                              AND BYPASS\nBBTEST2  DS    0H\n         TESTCB RPL=(5),                                               X\n               AM=VTAM,                                                X\n               BRACKET=(NBB,EB)\n         BNE   NOBB                              IN BRACKET STATE\n         MVI   BBSW,C'Y'                         BETWEEN BRACKETS\nNOBB     DS    0H\n         L     R7,INAREA                         GET I/O AREA ADDR\n         CLI   0(R7),X'F3'                       STRUCTURED FIELD CMDS\n         BE    COMMREJ                           NO CAN DO THAT\n         SHOWCB RPL=(5),                                               X\n               AM=VTAM,                                                X\n               FIELDS=(RECLEN),                                        X\n               AREA=SLENGTH,                                           X\n               LENGTH=4\n         L     R2,SLENGTH                        STORE LENGTH\n         STH   R2,SCROUT+6                       STORE IN TPUT\n         L     R7,INAREA                         GET I/O AREA ADDR\n         CNOP  0,4                               ALIGN FULL WORD\n*---------------------------------------------------------------------*\n*  THIS CODE IS THE \"HEART\" OF THIS PROGRAM IT TPUTS DATA TO          *\n*  THE TERMINAL, TGET'S ANY RESPONSE, THEN SENDS IT TO THE            *\n*  APPLICATION.                                                       *\n*---------------------------------------------------------------------*\nSCROUT   TPUT  (7),1,NOEDIT                      TPUT TO TERMINAL\n         L     R7,INAREA                         GET I/O AREA ADDR\n         TGET  (7),3000,ASIS,NOWAIT              GET TO UNLOCK KYBD\n         CLI   RESPSW,C'Y'                       RESPONSE NEEDED\n         BNE   SKIPRESP                          NO SKIP IT\n         L     R6,CID                            LOAD CID\n         SEND  RPL=(5),                                                X\n               ARG=(6),                                                X\n               STYPE=RESP,                                             X\n               CONTROL=DATA,                                           X\n               BRACKET=(NBB,NEB),                                      X\n               RESPOND=(NEX,FME,NRRN,NQRESP),                          X\n               OPTCD=(SYN,CA)\n         B     SKIPRESP\nCOMMREJ  DS    0H\n         L     R6,CID\n         SEND  RPL=(5),                                                X\n               ARG=(6),                                                X\n               STYPE=RESP,                                             X\n               CONTROL=DATA,                                           X\n               BRACKET=(NBB,NEB),                                      X\n               SSENSEO=FI,                                             X\n               SSENSMO=03,                                             X\n               RESPOND=(EX,FME,NRRN,NQRESP),                           X\n               OPTCD=(SYN,CA)\nSKIPRESP DS    0H\n         L     R6,CID                             LOAD CID\n         L     R7,INAREA                          GET I/O AREA ADDR\n         RECEIVE RPL=(5),                                              X\n               EXIT=RECVEX,                                            X\n               AREA=(7),                                               X\n               AREALEN=3000,                                           X\n               OPTCD=(ASY,ANY,CA,Q)\n         MVI   RESETCNT,C'Y'                      RESET COUNTS\nEXITRECV DS    0H\n         L     R14,SAVE3                          LOAD RETURN ADDR\n         BR    R14\nATTNEXIT DS    0H                                 TSO ATTN EXIT\n         USING *,R15                              EST ADDR\n         L     R12,BASESAVE                       LOAD OLD BASE REG\n         DROP  R15                                DROP R15\n         USING BASE,R12                           USE R12 AS BASE REG\n         STFSMODE ON,,NOEDIT=YES                  RESTORE FULLSCR MODE\n         BR    R14                                RETURN TO TSO\n         DS    0F\nBEGADDR  DS    F\nENDADDR  DS    F\nSAVER0   DS    F\nSNAP1    DS    0H                                 START SNAP ADDRES\nLOOPVAL1 EQU   1680                               14 MIN OF HALF SEC\nLOOPVAL2 EQU   1                                  2 SEC OF 2 SEC INTV\nRESETCNT DC    C'N'                               RESET LOOP CTRS\n         DS    0D                                 ALIGN DBL WORD\nWAITINT  DS    CL8                                WAIT INTVL FOR STIMER\nHALFSEC  DC    C'00000050'                        WAIT A .5 SEC.\nTWOSEC   DC    C'00000200'                        WAIT 2 SECONDS\nINAREA   DS    F                                  ADDR OF I/O AREA\nOUTAREA  DS    F                                  ADDR OF I/O AREA\nDATAAREA DC    CL8' '                             AREA FOR REQSESS\nSLENGTH  DS    F                                  MSG LENGTH\nSADDR    DS    F                                  MSG ADDR\nBASESAVE DS    F                                  SAVE INIT BASE ADDR\nCID      DS    F                                  CID VALUE\nWAITECB  DS    F'0'                               ECB FOR WAIT/POST\nSAVEAREA DS    18F                                PGM SAVE AREA\nSAVE2    DS    18F                                SAVEAREA FOR SCIP\nSAVE3    DS    F\nSAVE31   DS    F\nSAVE3A   DS    18F\nEXIT     DC    CL1'N'                           EXIT SWITCH\nBBSW     DC    CL1'N'                           BRACKET SWITCH\nRESPSW   DC    CL1'N'                           RESP SWITCH\nFULLSCR  DC    X'07'                            TPUT FULL VALUE\nACBMSG   DC    C'ACB FOR SIMTERM FAILED TO OPEN' NO SESSION ERR MSG\nEMSG     DC    C'SESSION NOT AVAILABLE'         NO SESSION ERR MSG\n         DS    0D                               DBL WORD ALIGN\nAPPLID   DC    C'12345678'                      APPLID FOR PLU\nECHO1    DC    X'08',CL8'12345678'              APPLID FOR SIMTERM\nCLEAR    DC    X'F5'                            3270 CLEAR CMD\n         DC    X'C1'                            WCC FOR CLEAR\n         DC    X'115D7E'\n         DC    X'114040'\n         DC    X'3C404000'\n         DC    X'114040'\n         DC    X'13'\nSTAXLIST STAX  ATTNEXIT,MF=L                     STAX MACRO LIST FORM\n         DC    C'REQSESS RPL FOLLOWS:'\nSIMRPL1  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMRPL2  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMRPL3  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMRPL4  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMACB   ACB   AM=VTAM,                                                X\n               APPLID=ECHO1,                                           X\n               MACRF=LOGON,                                            X\n               EXLST=SIMEXT\nSIMNIB   NIB   NAME=XXXXXXXX,                                          X\n               MODE=RECORD,                                            X\n               LISTEND=YES\nSIMEXT   EXLST AM=VTAM,                                                X\n               SCIP=SCIPEXIT,                                          X\n               SYNAD=SYNEXIT,                                          X\n               LERAD=LEREXIT\nUPCASE   DC    X'000102030440060708090A0B0C0D0E0F'  TRANSLATE TABLE\n         DC    X'101112131415161718191A1B1C1D1E1F'  FOR INPUT RESPONSE\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n         LTORG\n         IFGRPL AM=VTAM\n         IFGACB AM=VTAM\n         IKJCPPL                                 COMMAND PROCESSOR LIST\n         END   BEGIN\n//SETSSI EXEC  PGM=SETSSI,COND=(4,LT,ASM)\n//STEPLIB  DD   DSN=SYS1.LINKLIB,DISP=SHR\n//SETSSI   DD   DSN=&&OBJSET,DISP=(MOD,PASS),\n//         UNIT=VIO,SPACE=(80,(200,50))\n//LKED     EXEC PGM=IEWL,PARM=(XREF,LIST),REGION=128K,\n//         COND=(4,LT,ASM)\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=USERMODS.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DSN=USERMODS.LINKLIB,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSIN    DD   *\n    NAME SIMTERM(R)\n//EAHAPLMC  JOB (B002,ESD-OSSB,20,SCHED,X3383,HDSK-G),\n// 'ELLIS HOLMAN - IBM',CLASS=S,MSGCLASS=H,MSGLEVEL=(1,1),\n// NOTIFY=ROSCEAH,REGION=4096K\n//*\n//* LIB: BIEAH.PDS.TSODATA(APPLTAB)\n//* DOC: THIS MODULE DEFINES THE NAMES OF THE\n//*      VTAM ACBS USED BY SIMTERM, AND THE\n//*      NUMBER OF ACBS USED.\n//*\n//ASM      EXEC PGM=IEV90,PARM='TERM,XREF(SHORT),OBJECT,NODECK'\n//SYSTERM  DD   SYSOUT=*\n//SYSLIB   DD   DSN=SYS1.MACLIB,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1700,(600,100))\n//SYSPRINT DD   SYSOUT=*\n//SYSPUNCH DD   DUMMY\n//SYSLIN   DD   DSN=&&OBJSET,UNIT=VIO,SPACE=(80,(200,50)),\n//         DISP=(MOD,PASS)\n//SYSIN    DD   *\n***********************************************************************\n*             ELLIS HOLMAN --                                         *\n*                                                                     *\n*             MODULE NAME IS APPLTAB                                  *\n*                                                                     *\n*             FUNCTION:                                               *\n*                DESCRIBES THE ACB NAMES USED BY SIMTERM.             *\n*                                                                     *\n*                                                                     *\n*  NOTES:                                                             *\n*    1) THE FIRST MACRO IN THIS ASSEMBLY DESCRIBES THE NUMBER OF      *\n*       ENTRIES THAT FOLLOW.  THE NUMBER OF ENTRIES MUST MATCH.       *\n*                                                                     *\n*   MODIFICATION HISTORY:                                             *\n*                                                                     *\n***********************************************************************\n         MACRO\n         SIZE  &SIZ\nTABSIZE  DC    F'&SIZ'\n         MNOTE 0,'THIS SIZE MUST MATCH NUMBER OF ENTRIES THAT FOLLOW'\n         MEND\n         MACRO\n         APPL   &FLD\n&LEN     SETA  K'&FLD\n         AIF   (&LEN GT 8).APPL\n         AIF   (&LEN LT 8).APPL\n         DC    CL8'&FLD'\n         AGO   .ENDMAC\n.APPL    ANOP\n         MNOTE 8,'APPL NAME MUST BE 8 CHARACTERS IN LENGTH'\n.ENDMAC  ANOP\n         MEND\n         MACRO\n         ENDAPPL\n.ANOTE   ANOP\n         MNOTE 0,'APPLS MUST BE DEFINED TO VTAM'\n         END\n         MEND\n         SIZE 10\n         APPL SIMTERM0\n         APPL SIMTERM1\n         APPL SIMTERM2\n         APPL SIMTERM3\n         APPL SIMTERM4\n         APPL SIMTERM5\n         APPL SIMTERM6\n         APPL SIMTERM7\n         APPL SIMTERM8\n         APPL SIMTERM9\n         ENDAPPL\n//LKED     EXEC PGM=IEWL,PARM=(XREF,LIST),REGION=128K,\n//         COND=(4,LT,ASM)\n//SYSLIN   DD   DSN=&&OBJSET,DISP=(OLD,DELETE)\n//         DD   DDNAME=SYSIN\n//SYSLIB   DD   DSN=USERMODS.LINKLIB,DISP=SHR\n//SYSLMOD  DD   DSN=USAFAC.USERMODS.LINKLIB,DISP=SHR\n//SYSUT1   DD   DSN=&&SYSUT1,UNIT=SYSDA,SPACE=(1024,(50,20))\n//SYSPRINT DD   SYSOUT=*,DCB=(RECFM=FB,LRECL=121,BLKSIZE=1210)\n//SYSIN    DD   *\n    NAME APPLTAB(R)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "VTAMLIST": {"ttr": 773, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972/\\x00\\x972/\\x10C\\x00\\x1a\\x00\\x1a\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T10:43:00", "lines": 26, "newlines": 26, "modlines": 0, "user": "BRODSKY"}, "text": "* MISC TEST APPLS.\n*---------------------------------------------------------------------*\n*    APPL NODE FOR TESTING SIMTERM                                    *\n*---------------------------------------------------------------------*\n*\nAAXB     VBUILD TYPE=APPL\nNAXB     APPL  EAS=1,                                                  +\n               MODETAB=GBMT\nAXB0     APPL  EAS=1,                                                  +\n               AUTH=(ACQ,                                              +\n               NOCNM,                                                  +\n               SPO,                                                    +\n               NOTSO),                                                 +\n               MODETAB=GBMT\nAXB1     APPL  EAS=1,                                                  +\n               AUTH=(ACQ,                                              +\n               NOCNM,                                                  +\n               SPO,                                                    +\n               TSO),                                                   +\n               MODETAB=GBMT\nAXB2     APPL  EAS=1,                                                  +\n               AUTH=(ACQ,                                              +\n               NOCNM,                                                  +\n               SPO,                                                    +\n               NOTSO),                                                 +\n               MODETAB=GBMT\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "XIMTERM": {"ttr": 775, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x972/\\x00\\x972/\\x10C\\x02\\x82\\x02\\x82\\x00\\x00\\xc2\\xd9\\xd6\\xc4\\xe2\\xd2\\xe8@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1997-11-18T00:00:00", "modifydate": "1997-11-18T10:43:00", "lines": 642, "newlines": 642, "modlines": 0, "user": "BRODSKY"}, "text": "         TITLE  'ACCESS VTAM APPLS WITHOUT LOGGING OFF TSO'\n***********************************************************************\n*             ELLIS HOLMAN --                                         *\n*                                                                     *\n*             MODULE NAME IS SIMTERM                                  *\n*                                                                     *\n*             FUNCTION:                                               *\n*                ALLOWS ACCESS TO OTHER VTAM APPLICATIONS             *\n*                WITHOUT HAVING TO LOG OFF TSO.                       *\n*  DEPENDANCIES:                                                      *\n*    1) BASE REGISTER IS 12 AND R11                                   *\n*    2) TABLE AT OF ACBS CALLED APPLTAB IS LOADED AND SCANNED.        *\n*    3) FIRST FOUR BYTES OF APPLTAB INDICATE THE NUMBER OF ENTRIES    *\n*       (AVAILABLE ACB'S).  THIS MUST MATCH THE NUMBER OF ACB NAMES   *\n*       IN THE ACB NAME TABLE.                                        *\n*    4) PARMS PASSED TO THE PROGRAMMING IN THE FORM OF:               *\n*          SIMTERM APPL(APPLNAME)                                *AXB*\n*       SPECIFY THE APPL TO WHICH A SESSION WILL ATTEMPT              *\n*       TO BIND TO.  THIS NAME IS MOVED INTO STORAGE AT               *\n*       LABEL ECHO1.                                                  *\n*                                                                     *\n*   MODIFICATION HISTORY:                                             *\n*                                                                     *\n* 05/96 AXB ATOCHEM CHANGES:                                          *\n*      - DEFAULT APPL = ROSCOE                                        *\n*      - REARRANGE ENTRY CODE A LITTLE.                               *\n*      - ENTRY IN APPLTAB IS 9 BYTES LONG, WITH 1ST BYTE AS LENGTH    *\n*      - ADDED TRACE CODE FOR DEBUGGING.                              *\n* 09/96 - WTM CHANGES. SKIP EXIT IS UPDATED.     ( -WTM- )            *\n* 11/97 - AXB CLEANUP FOR TALKLINK.              ( *AXB* )            *\n*                                                                     *\n***********************************************************************\nSIMTERM  CSECT\n         SAVE  (14,12)                      SAVE REGISTERS\n         USING SIMTERM,R12,R11\n         LR    R12,R15\n         LA    R11,4095(,R12)\n         LA    R11,1(,R11)\n         B     AROUND\n         DC    C'SIMTERM ALLOWS ACCESS TO '\n         DC    C'VTAM APPLICATIONS WITHOUT '\n         DC    C'LOGGING OFF TSO  '\n         DC    C'DATE ASSEMBLED='\n         DC    C'&SYSDATE'\n         DC    C'  '\n         DC    C'TIME ASSEMBLED='\n         DC    C'&SYSTIME'\nAROUND   DS    0H\n*---------------------------------------------------------------------*\n*  THE FOLLOWING CODE DOES THE STANDARD SAVE AREA                     *\n*  ADDRESSING SETUP, INITIALIZES THE ECB ADDRESSES                    *\n*  THE TSO COMMAND BUFFER AREA, AND THEN SCANS                        *\n*  THE COMMAND BUFFER FOR THE EXPECTED PARMS.                         *\n*  IF THE EXPECTED PARMS ARE NOT FOUND (SEE                           *\n*  DEPENDANCIES ABOVE FOR COMMAND FORMAT),                            *\n*  A DEFAULT APPLICATION OF 'ROSCOE' IS REQUESTED                     *\n*  FOR SESSION INITIATION.                                            *\n*---------------------------------------------------------------------*\n         STM   R11,R12,BASESAVE             SAVE BASE REGS\n         ST    R13,SAVEAREA+4               SAVE OLD SAVE AREA\n         LA    R13,SAVEAREA                 SET NEW SAVE AREA\n         MVC   WAITECB,=F'0'                CLEAR WAIT ECB\n         USING CPPL,R1                      ESTAB. CPPL MAP       *AXB*\n         L     R2,CPPLCBUF        COMMAND BUFFER                  *AXB*\n*                                                                 *AXB*\n         LH    R4,0(R2)           ; COMMAND BUFFER SIZE           *AXB*\n         LH    R3,2(R2)           ; OFFSET TO PARMS START         *AXB*\n         SH    R4,=H'4'           ; SUBTRACT 2 HALFWORDS SIZE     *AXB*\n         SR    R4,R3              ; SEE WHAT'S LEFT               *AXB*\n         BNP   DEFAPPL            ; NOT MUCH...                   *AXB*\n* NOW THE PARM SIZE IS IN R4.                                     *AXB*\n         SH    R4,PFXSZ           ; SEE IF BAD PARM               *AXB*\n         BNP   DEFAPPL            ; WELL...                       *AXB*\n         LA    R3,4(R2,R3)        ; POSITION AT PARM START        *AXB*\n         AH    R3,PFXSZ           ; ...                           *AXB*\n         MVC   APPLID(8),=CL8' '  ; PREPARE                       *AXB*\n         LA    R2,0(R3,R4)        ; LAST BYTE OF PARM             *AXB*\n         BCTR  R2,0               ; ...                           *AXB*\n         CLI   0(R2),C')'         ; ???                           *AXB*\n         BNE   DEFAPPL            ; BAD SYNTAX. USE DEFAULT       *AXB*\n         BCTR  R4,0               ; ACCOUNT FOR \")\"               *AXB*\n         CH    R4,=H'8'           ; SEE IF TOO BIG                *AXB*\n         BH    DEFAPPL            ; BAD PARAMETER.                *AXB*\n         BCT   R4,*+10                                            *AXB*\n         MVC   APPLID(0),0(R3)    ; *** EXECUTED                  *AXB*\n         EX    R4,*-6             ; COPY APPLID                   *AXB*\n         TR    APPLID(8),UPCASE   ; XLATE CBUF TO UPPER CASE      *AXB*\n         B     CHGNIB             ; CONTINUE                      *AXB*\nDEFAPPL  DS    0H                                                 *AXB*\n*        MVC   APPLID(8),=CL8'TSOPENW'        OR USE DEFAULT      *AXB*\n*        MVC   APPLID(8),=CL8'IBM0MON2'       OR USE DEFAULT      *AXB*\n         MVC   APPLID(8),=CL8'ROSCOE'       OR USE DEFAULT        *AXB*\n         DROP  R1                                                 *AXB*\n*---------------------------------------------------------------------*\n*  CHANGE THE NIB TO ACCESS THE REQUESTED APPLICATION                 *\n*---------------------------------------------------------------------*\nCHGNIB   DS    0H\n         MODCB NIB=SIMNIB,                                             X\n               AM=VTAM,                                                X\n               NAME=(*,APPLID)\n         USING IFGRPL,R4                         SET RPL DSECT\n*---------------------------------------------------------------------*\n*  TURN ON TSO FULL SCREEN MODE AND ACTIVATE TSO ATTENTION EXIT       *\n*---------------------------------------------------------------------*\n         STTMPMD ON,KEYS=ALL                     SET TERMINAL MOD ON\n         STFSMODE ON,                                                  X\n               INITIAL=YES,                                            X\n               NOEDIT=YES\n         LA    R3,STAXLIST                       LOAD ADDR OF STAX PARM\n         STAX  ATTNEXIT,MF=(E,(3))               ISSUE STAX MACRO\n*---------------------------------------------------------------------*\n*  DO INITIAL CLEAR OF SCREEN AND ATTEMPT OPEN OF ACB                 *\n*---------------------------------------------------------------------*\n         TPUT  CLEAR,16,NOEDIT                   CLEAR SCREEN\n         LOAD  EP=APPLTAB                        LOAD ACB NAME TABLE\n         LR    R9,R0                             PICK UP ADDR OF TABLE\n         L     R9,0(0,R9)                        LOAD IN SIZE OF TABLE\n         LR    R10,R0                            LOAD ADDR OF ACB NAMES\n         LA    R10,4(R10)                        BYPASS TABLE SIZE\n         LA    R5,SIMACB\n         USING IFGACB,R5\n*---------------------------------------------------------------------*\n*  SCAN ACB TABLE TO FIND AN ACB NOT IN USE, IF UNABLE TO FIND ONE    *\n*  THAT IS NOT IN USE SEND A MESSAGE TO THE TERMINAL THAT THE         *\n*  REQUESTED SESSION COULD NOT BE ACTIVATED.                          *\n*---------------------------------------------------------------------*\nFINDACB  DS    0H\n         MVC   ECHO1(9),0(R10)           MOVE IN FIRST ACB NAME   *AXB\n         LA    R0,1\n         BAL   R15,@TRACE                                         *AXB*\n         OPEN  SIMACB                            OPEN VTAM ACB\n         LTR   R15,R15                           RC = 0\n         BZ    ACBOK                             IF NOT EXIT\n         CLI   ACBERFLG,X'58'                    OPEN ALREADY ??\n         BNE   BADACB                            IF NOT LEAVE\n         LA    R10,9(R10)                        INDEX TO NEXT NAME\n         BCT   R9,FINDACB                        LOOP FOR ACB\nBADACB   DS    0H\n         STFSMODE OFF                            SET FULL SCRN OFF\n         MVC   ACBMSG(8),ECHO1+1\n         TPUT  ACBMSG,30                           SEND ERROR MSG\n         B     GETOUT                            TERMINATE AND EXIT\nACBOK    DS    0H\n         LA    R0,2\n         BAL   R15,@TRACE                                         *AXB*\n*---------------------------------------------------------------------*\n*  UPON SUCCESSFULLY OPENING AN ACB OBTAIN INPUT BUFFER AREA VIA      *\n*  GETMAIN, EXIT IF UNABLE TO GET STORAGE.  OTHERWISE, ISSUE VTAM     *\n*  REQUEST SESSION MACRO TO START A SESSION BETWEEN THE REQUESTED     *\n*  APPLICATION AND THIS PROGRAM'S ACB                                 *\n*---------------------------------------------------------------------*\n         GETMAIN RC,LV=3000                      GET INPUT AREA\n         ST    R1,INAREA                         STORE ADDRESS OF AREA\n         GETMAIN RC,LV=3000                      GET MORE INPUT AREA\n         ST    R1,OUTAREA                        STORE THIS ADR TOO\n         SETLOGON RPL=SIMRPL1,                                         X\n               OPTCD=(START,SYN)\n         LTR   R15,R15                           RC = 0\n         BNZ   GETOUT                            NO TERMINATE\n         LA    R0,3\n         BAL   R15,@TRACE                                         *AXB*\n         LA    R5,DATAAREA                       GET DATA ADDRESS\n         L     R4,=F'8'                          GET LENGTH\n         CLC   DATAAREA,=CL8' '                  ANY DATA\n         BE    NORMREQ                           NO, CLEAR LENGTH\n         B     HCFREQ                            YES, LEAVE LENGTH\nNORMREQ  DS    0H                                    *\n         SR    R4,R4                             CLEAR AREA LENGTH\nHCFREQ   DS    0H                                    *\n         REQSESS RPL=SIMRPL1,NIB=SIMNIB,                               X\n               OPTCD=(SYN,NQ),                                         X\n               RECLEN=(4),                                             X\n               AREA=(5)\n         LTR   R15,R15                           R C = 0\n         BNZ   ERROR                             TERMINATE AND EXIT\n         LTR   R0,R0                             REASON CODE = 0\n         BZ    DORECV                            TERMINATE AND EXIT\nERROR    DS    0H\n         STFSMODE OFF                            SET FULL SCRN OFF\n         TPUT  EMSG,45                           SEND ERROR MSG\n         B     GETOUT                            TERMINATE AND EXIT\nDORECV   DS    0H\n*---------------------------------------------------------------------*\n* NOW THAT THE SESSION BETWEEN THIS PROGRAM AND THE REQUESTED         *\n* APPLICATION IS BOUND, SEND A REQUEST TO THE APPLICATION TO          *\n* RECEIVE DATA FROM IT.                                               *\n*---------------------------------------------------------------------*\n         WAIT  ECB=WAITECB               WAIT FOR ECB TO POST      -AXB\n         LA    R0,4\n         BAL   R15,@TRACE                                         *AXB*\n         L     R7,INAREA\n         RECEIVE RPL=SIMRPL2,                                          X\n               EXIT=RECVEX,                                            X\n               AREA=(7),                                               X\n               AREALEN=3000,                                           X\n               OPTCD=(ASY,ANY,Q,CA)\n*        WAIT  ECB=WAITECB                       WAIT FOR ECB TO POST\nRESET    DS    0H\n         MVI   RESETCNT,C'N'                     CLEAR RESET SWITCH\n         LA    R8,LOOPVAL1                       WAIT FOR 14 MINS\n         MVC   WAITINT,HALFSEC                   IN 1/2 SEC INTERVALS\nLOOP     DS    0H\n         STIMER WAIT,DINTVL=WAITINT              STIMER WAIT\n         CLI   EXIT,C'Y'                         DO WE EXIT\n         BE    GETOUT                            YES\n         CLI   RESETCNT,C'Y'                     RESET COUNT\n         BE    RESET                             YES GO RESET\n         L     R7,OUTAREA                        GET IOAREA ADDRESS\n*---------------------------------------------------------------------*\n*  ATTEMPT TO RECEIVE INPUT FROM THE TERMINAL. RESET WAIT COUNTERS    *\n*  IF NO DATA RECEIVED AND CONTINUE TO WAIT FOR TERMINAL INPUT        *\n*---------------------------------------------------------------------*\n         TGET  (7),3000,ASIS,NOWAIT              GET INPUT FROM TERM\n         C     R15,=F'4'                         ANY INPUT\n         BNE   GOODIN                            PROCESS INPUT\n         BCT   8,LOOP                            DECRIMENT AND LOOP\n         CLC   WAITINT,TWOSEC                    IN 2ND INTERVAL\n         BE    GETOUT                            YES, TIMED OUT\n         LA    8,LOOPVAL2                        LOOP FOR 2 SEC\n         MVC   WAITINT,TWOSEC                    IN TWO SEC INTERVAL\n         B     LOOP                              GO LOOP\nGOODIN   DS    0H\n         CLI   0(R7),X'6C'                       INTERRUPT?       -WTM\n         BE    GETOUT                            YES              -WTM\n         ST    R1,SLENGTH                        GET INPUT LENGTH\n         L     R6,CID                            LOAD CID\n         L     R5,SLENGTH                        LOAD LENGTH\n         L     R7,OUTAREA                        LOAD I/O AREA ADDR\n*---------------------------------------------------------------------*\n*  AFTER GETTING INPUT FROM THE TERMINAL, FORWARD IT TO THE           *\n*  APPLICATION                                                        *\n*---------------------------------------------------------------------*\n         CLI   BBSW,C'Y'                         BETWEEN BRACKET ?\n         BE    BBSEND                            YES - START BRACKET\n         SEND  RPL=SIMRPL3,                                            X\n               AREA=(7),                                               X\n               RECLEN=(5),                                             X\n               ARG=(6),                                                X\n               OPTCD=SYN,                                              X\n               BRACKET=(NBB,NEB),                                      X\n               CHNGDIR=(CMD),                                          X\n               STYPE=REQ,                                              X\n               CONTROL=DATA,                                           X\n               RESPOND=(NEX,NFME,NRRN,NQRESP)\n         LA    R0,5\n         BAL   R15,@TRACE                                         *AXB*\n         B     LOOP\nBBSEND   DS    0H\n         SEND  RPL=SIMRPL3,                                            X\n               AREA=(7),                                               X\n               RECLEN=(5),                                             X\n               ARG=(6),                                                X\n               OPTCD=SYN,                                              X\n               BRACKET=(BB,NEB),                                       X\n               STYPE=REQ,                                              X\n               CONTROL=DATA,                                           X\n               RESPOND=(NEX,NFME,NRRN,NQRESP)\n         MVI   BBSW,C'N'                         INDICATE IN BRACKET\n         LA    R0,6\n         BAL   R15,@TRACE                                         *AXB*\n         B     LOOP                                  *\nGETOUT   DS    0H\n         CLOSE SIMACB                            CLOSE VTAM ACB\n         STTMPMD OFF                             SET TERM MODE OFF\n         STFSMODE OFF                            SET FULLSCREEN OFF\n         L     R13,SAVEAREA+4                    LOAD OLD SAVEAREA\n         RETURN (14,12)                          RETURN TO CALLER\n         EJECT ,\n*---------------------------------------------------------------\n* SKIP EXIT\n*---------------------------------------------------------------\nSCIPEXIT DS    0H\n         USING *,R15                             ESTAB. BASE REG\n         LM    R11,R12,BASESAVE                  LOAD OLD BASE REG\n         DROP  R15                               DROP REG 15\n         USING SIMTERM,R12,R11                   SET REG 12\n         LR    R3,R14                            LOAD RETURN ADDR\n         LA    R13,SAVE2                         LOAD NEW SAVEAREA\n         L     R4,4(,1)                          LOAD CID VALUE\n         L     R7,12(,1)                    SESSION PARMS POINTER  -WTM\n         L     R5,16(,1)                         LOAD RPL ADDRESS\n         LA    R0,7\n         BAL   R15,@TRACE                                         *AXB*\n         USING IFGRPL,R5                         MAP RPL\n         CLI   RPLCNTDC,RPLTBIND                 IS BIND REQUEST\n         BE    BIND                              YES BIND SESSION\n         CLI   RPLCNTDC,RPLTUNBD                 IS UNBIND REQUEST\n         BE    UNBIND                            YES DROP SESSION\n         CLI   RPLCNTSC,RPLCLEAR                 IS CLEAR REQUEST\n         BE    DOCLEAR                           YES CLEAR\n         CLI   RPLCNTSC,RPLSDT                   IS SDT REQUEST\n         BE    DOSDT                             YES DO SDT\n         ABEND 2,DUMP                            UNKOWN REQUEST - DUMP\nUNBIND   DS    0H\n         L     R6,RPLAREA                        GET RU AREA ADDR\n         CLC   0(2,R6),=X'3202'                  RETAIN RESOURSES\n         BE    HANGON                            YES KEEP THEM\n         MVI   EXIT,C'Y'                         SET EXIT SWITCH ON\n         TERMSESS  RPL=SIMRPL4,                                        X\n               ARG=(4),                                                X\n               OPTCD=(SYN,COND)\nHANGON   DS    0H\n         LR    R14,R3                            GET RETURN ADDR\n         BR    R14                               RETURN TO VTAM\nBIND     DS    0H\n         USING ISTDBIND,R7             MAP BIND (SESSION PARMS)    -WTM\n         LA    R15,SIMNIB              POINT TO NIB                -WTM\n         USING ISTDNIB,R15             MAP NIB TOO                 -WTM\n         MVC   NIBSYM,BINPRIMN         SET PLU NAME IN NIB         -WTM\n         DROP  R7,R15                                              -WTM\n         ST    R4,CID                            SAVE CID VALUE\n         ST    R4,SIMNIB+4                       SAVE CID IN NIB\n         LA    R0,8\n         BAL   R15,@TRACE                                         *AXB*\n         OPNSEC RPL=SIMRPL4,                                           X\n               OPTCD=(SYN,CA),                                         X\n               NIB=SIMNIB\n         C     R15,=F'32'                        SYNAD DETECTED\n         BE    SDTEX                             GET OUT WAIT FOR BIND\n         LTR   R15,R15                           R C = 0\n         BNZ   GETOUT                            TERMINATE AND EXIT\n         POST  WAITECB                           POST ECB\n         LR    R14,R3                            RESTORE RETURN ADDR\n         BR    R14                               RETURN TO VTAM\nDOCLEAR  DS    0H\n         MVI   BBSW,C'Y'                         CLEAR BRACKET SWITCH\nDOSDT    DS    0H\nSDTEX    DS    0H\nCLEAREX  DS    0H\n         LR    R14,R3                            GET RETURN ADDRESS\n         BR    R14                               RETURN TO VTAM\n         EJECT ,\n*---------------------------------------------------------------\n* VTAM LERAD EXIT\n*---------------------------------------------------------------\nLEREXIT  DS    0H                                VTAM LERAD EXIT\n         USING *,R15                             ESTABLISH BASE REG\n         STM   R0,R15,LERSAVE\n         LM    R11,R12,BASESAVE                  LOAD BASE VALUE\n         ST    R14,SAVE3                         SAVE RETURN ADDR.\n         DROP  R15                               DROP R15 AS BASE\n         USING SIMTERM,R12,R11                 ESTAB ADDRESS\n         LR    R5,R1                             LOAD RPL ADDR\n         LR    R3,R14                            LOAD RTN ADDR\n         USING IFGRPL,R5                         MAP RPL\n         CLI   RPLFDB2,X'13'                     INVALID CID\n         BER   R14                               YES IGNORE ERROR\n         LA    R0,9\n         BAL   R15,@TRACE                                         *AXB*\n         ABEND 4095,DUMP                         ABEND OTHERWISE\n         BR    R14                               RETURN TO VTAM\nLERSAVE  DS    16F\n         EJECT ,\n*---------------------------------------------------------------\n* VTAM SYNAD EXIT\n*---------------------------------------------------------------\nSYNEXIT  DS    0H                                SYNAD EXIT\n         USING *,R15                             EST. ADDR\n         LM    R11,R12,BASESAVE                  LOAD OLD BASE\n         USING SIMTERM,R12,R11\n         DROP  R15                               DROP REG 15\n         ST    R0,SAVER0\n         LR    R5,R1                             GET RPL ADDR\n         LR    R3,R14                            LOAD RETURN ADR\n         USING IFGRPL,R5                         MAP RPL DSECT\nSYNTEST1 DS    0H                                LU NOT ACTIVE\n         MVI   EXIT,C'Y'                         SET XIT SWITCH\n         CLC   RPLRTNCD(2),=X'1000'\n         BNE   SYNTEST2\n         L     R15,=F'10'                        SET RC\n         BR    R14                               RETURN TO VTAM\nSYNTEST2 DS    0H                                SESSION TERMINATED\n         CLC   RPLRTNCD(2),=X'100D'              SESS TERM\n         BER   R14                               RETURN TO VTAM\n         CLC   RPLRTNCD(2),=X'081E'              SESSION REF ERR\n         BER   R14                               RETURN TO VTAM\n         CLC   RPLRTNCD(2),=X'0C0B'              SESSION TERM\n         BNE   SYNDUMP                           RETURN TO VTAM\n         BR    R14                               RETURN TO VTAM\nSYNDUMP  DS    0H                                DUMP PGM SYN ERR.\n         CLC   SAVER0,=F'16'                     CHECK IF R0 SHOWS APPL\n*                                                NOT AVAILABLE\n         BNE   SYNERR                            IF R0 EQ X'10' THEN\n         STFSMODE OFF                            SET FULL SCRN OFF\n         TPUT  EMSG,45                           SEND ERROR MSG\n         MVI   EXIT,C'Y'                         SET XIT SWITCH\n         BR    R14                               RETURN TO VTAM\nSYNERR   DS    0H\n         LA    R0,10\n         BAL   R15,@TRACE                                         *AXB*\n         ABEND 4094,DUMP\n         BR    R14\n         EJECT ,\n*---------------------------------------------------------------\n* VTAM RECEIVE EXIT\n*---------------------------------------------------------------\nRECVEX   DS    0H                                VTAM RECEIVE EXIT\n         USING *,R15                             EST. BASE REG\n         LM    R11,R12,BASESAVE                  EST. OLD BASE\n         DROP  R15                               DROP R15 BASE\n         USING SIMTERM,R12,R11                   BASE R12 FOR GLOBAL\n         ST    R14,SAVE3                         SAVE RETURN ADDR\n         LA    R13,SAVE3A                        LOAD SAVE AREA ADDR\n         MVI   BBSW,C'N'                         SET BRACKET SW OFF\n         MVI   RESPSW,C'N'                       SET RESP SW OFF\n         CHECK RPL=(1)                           CHECK RECV\n         LTR   R15,R15                           CHECK OK\n         BE    RECOK                             THEN PROCESS\n         MVI   EXIT,C'Y'                         SET XIT SWITCH\n         B     EXITRECV                          EXIT OUT\nRECOK    DS    0H\n         LA    R5,0(,R1)                         LOAD RPL ADDRESS\n         TM    20(R5),X'02'                      TYPE 1 RESP\n         BO    NORESP                            NOT TYPE 1\n         TM    20(R5),X'04'                      DEF TYPE 1 RESP\n         BO    NORESP                            NOT DEF TYPE 1 RESP\n         MVI   RESPSW,C'Y'                       INDICATE RESP NEEDED\nNORESP   DS    0H\n         TESTCB RPL=(5),                                               X\n               AM=VTAM,                                                X\n               BRACKET=(BB,EB)\n         BNE   BBTEST2                           NO TRY END BRACKET\n         MVI   BBSW,C'Y'                         SET BETWEEN BRACKET ??\n         B     NOBB                              AND BYPASS\nBBTEST2  DS    0H\n         TESTCB RPL=(5),                                               X\n               AM=VTAM,                                                X\n               BRACKET=(NBB,EB)\n         BNE   NOBB                              IN BRACKET STATE\n         MVI   BBSW,C'Y'                         BETWEEN BRACKETS\nNOBB     DS    0H\n         L     R7,INAREA                         GET I/O AREA ADDR\n         CLI   0(R7),X'F3'                       STRUCTURED FIELD CMDS\n         BE    COMMREJ                           NO CAN DO THAT\n         SHOWCB RPL=(5),                                               X\n               AM=VTAM,                                                X\n               FIELDS=(RECLEN),                                        X\n               AREA=SLENGTH,                                           X\n               LENGTH=4\n         L     R2,SLENGTH                        STORE LENGTH\n         STH   R2,SCROUT+6                       STORE IN TPUT\n         L     R7,INAREA                         GET I/O AREA ADDR\n         CNOP  0,4                               ALIGN FULL WORD\n*---------------------------------------------------------------------*\n*  THIS CODE IS THE \"HEART\" OF THIS PROGRAM IT TPUTS DATA TO          *\n*  THE TERMINAL, TGET'S ANY RESPONSE, THEN SENDS IT TO THE            *\n*  APPLICATION.                                                       *\n*---------------------------------------------------------------------*\nSCROUT   TPUT  (7),1,NOEDIT                      TPUT TO TERMINAL\n         L     R7,INAREA                         GET I/O AREA ADDR\n         TGET  (7),3000,ASIS,NOWAIT              GET TO UNLOCK KYBD\n         CLI   RESPSW,C'Y'                       RESPONSE NEEDED\n         BNE   SKIPRESP                          NO SKIP IT\n         L     R6,CID                            LOAD CID\n         SEND  RPL=(5),                                                X\n               ARG=(6),                                                X\n               STYPE=RESP,                                             X\n               CONTROL=DATA,                                           X\n               BRACKET=(NBB,NEB),                                      X\n               RESPOND=(NEX,FME,NRRN,NQRESP),                          X\n               OPTCD=(SYN,CA)\n         B     SKIPRESP\nCOMMREJ  DS    0H\n         L     R6,CID\n         SEND  RPL=(5),                                                X\n               ARG=(6),                                                X\n               STYPE=RESP,                                             X\n               CONTROL=DATA,                                           X\n               BRACKET=(NBB,NEB),                                      X\n               SSENSEO=FI,                                             X\n               SSENSMO=03,                                             X\n               RESPOND=(EX,FME,NRRN,NQRESP),                           X\n               OPTCD=(SYN,CA)\nSKIPRESP DS    0H\n         L     R6,CID                             LOAD CID\n         L     R7,INAREA                          GET I/O AREA ADDR\n         RECEIVE RPL=(5),                                              X\n               EXIT=RECVEX,                                            X\n               AREA=(7),                                               X\n               AREALEN=3000,                                           X\n               OPTCD=(ASY,ANY,CA,Q)\n         MVI   RESETCNT,C'Y'                      RESET COUNTS\nEXITRECV DS    0H\n         LA    R0,11\n         BAL   R15,@TRACE                                         *AXB*\n         L     R14,SAVE3                          LOAD RETURN ADDR\n         BR    R14\n         EJECT ,\n*---------------------------------------\n* TSO ATTENTION EXIT FOR STAX\n*---------------------------------------\nATTNEXIT DS    0H                                 TSO ATTN EXIT\n         USING *,R15                              EST ADDR\n         LM    R11,R12,BASESAVE                   LOAD OLD BASE REG\n         DROP  R15                                DROP R15\n         USING SIMTERM,R12,R11                    USE R12 AS BASE REG\n         STFSMODE ON,,NOEDIT=YES                  RESTORE FULLSCR MODE\n         BR    R14                                RETURN TO TSO\n         EJECT ,\n*------------------------------------------------------------------\n* MISC DATA AREA\n*------------------------------------------------------------------\n         DS    0F\nBEGADDR  DS    F\nENDADDR  DS    F\nSAVER0   DS    F\nSNAP1    DS    0H                                 START SNAP ADDRES\nLOOPVAL1 EQU   1680                               14 MIN OF HALF SEC\nLOOPVAL2 EQU   1                                  2 SEC OF 2 SEC INTV\nRESETCNT DC    C'N'                               RESET LOOP CTRS\n         DS    0D                                 ALIGN DBL WORD\nWAITINT  DS    CL8                                WAIT INTVL FOR STIMER\nHALFSEC  DC    C'00000050'                        WAIT A .5 SEC.\nTWOSEC   DC    C'00000200'                        WAIT 2 SECONDS\nINAREA   DS    F                                  ADDR OF I/O AREA\nOUTAREA  DS    F                                  ADDR OF I/O AREA\nDATAAREA DC    CL8' '                             AREA FOR REQSESS\nSLENGTH  DS    F                                  MSG LENGTH\nSADDR    DS    F                                  MSG ADDR\nBASESAVE DS    2F                SAVE PROGRAM BASE REGISTERS\nCID      DS    F                                  CID VALUE\nWAITECB  DS    F'0'                               ECB FOR WAIT/POST\nSAVEAREA DS    18F                                PGM SAVE AREA\nSAVE2    DS    18F                                SAVEAREA FOR SCIP\nSAVE3    DS    F\nSAVE31   DS    F\nSAVE3A   DS    18F\nEXIT     DC    CL1'N'                           EXIT SWITCH\nBBSW     DC    CL1'N'                           BRACKET SWITCH\nRESPSW   DC    CL1'N'                           RESP SWITCH\nFULLSCR  DC    X'07'                            TPUT FULL VALUE\nACBMSG   DC    C'XXXXXXXX FOR SIMTERM FAILED TO OPEN'\nEMSG     DC    C'SESSION NOT AVAILABLE'         NO SESSION ERR MSG\n         DS    0D                               DBL WORD ALIGN\nAPPLID   DC    C'12345678'                      APPLID FOR PLU\n         DS    0H                                                 *AXB*\nPFXSZ    DC    AL2(L'PFX)          ; SIZE OF PARM PFX             *AXB*\nPFX      DC    CL5'APPL('          ; APPL(ZZZZZZZZ)               *AXB*\nECHO1    DC    X'08',CL8'12345678'              APPLID FOR SIMTERM\nCLEAR    DC    X'F5'                            3270 CLEAR CMD\n         DC    X'C1'                            WCC FOR CLEAR\n         DC    X'115D7E'\n         DC    X'114040'\n         DC    X'3C404000'\n         DC    X'114040'\n         DC    X'13'\nSTAXLIST STAX  ATTNEXIT,MF=L                     STAX MACRO LIST FORM\n         DC    C'REQSESS RPL FOLLOWS:'\nSIMRPL1  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMRPL2  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMRPL3  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMRPL4  RPL   ACB=SIMACB,                                             X\n               AM=VTAM,                                                X\n               NIB=SIMNIB\nSIMACB   ACB   AM=VTAM,                                                X\n               APPLID=ECHO1,                                           X\n               MACRF=LOGON,                                            X\n               EXLST=SIMEXT\nSIMNIB   NIB   NAME=XXXXXXXX,                                          X\n               MODE=RECORD,                                            X\n               LISTEND=YES\nSIMEXT   EXLST AM=VTAM,                                                X\n               SCIP=SCIPEXIT,                                          X\n               SYNAD=SYNEXIT,                                          X\n               LERAD=LEREXIT\nUPCASE   DC    X'000102030440060708090A0B0C0D0E0F'  TRANSLATE TABLE\n         DC    X'101112131415161718191A1B1C1D1E1F'  FOR INPUT RESPONSE\n         DC    X'202122232425262728292A2B2C2D2E2F'\n         DC    X'303132333435363738393A3B3C3D3E3F'\n         DC    X'404142434445464748494A4B4C4D4E4F'\n         DC    X'505152535455565758595A5B5C5D5E5F'\n         DC    X'606162636465666768696A6B6C6D6E6F'\n         DC    X'707172737475767778797A7B7C7D7E7F'\n         DC    X'80C1C2C3C4C5C6C7C8C98A8B8C8D8E8F'\n         DC    X'90D1D2D3D4D5D6D7D8D99A9B9C9D9E9F'\n         DC    X'A0A1E2E3E4E5E6E7E8E9AAABACADAEAF'\n         DC    X'B0B1B2B3B4B5B6B7B8B9BABBBCBDBEBF'\n         DC    X'C0C1C2C3C4C5C6C7C8C9CACBCCCDCECF'\n         DC    X'D0D1D2D3D4D5D6D7D8D9DADBDCDDDEDF'\n         DC    X'E0E1E2E3E4E5E6E7E8E9EAEBECEDEEEF'\n         DC    X'F0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF'\n*-------------------------------------------------------------------\n* AXB = TRACE ROUTINE                                             *AXB*\n*-------------------------------------------------------------------\n@TRACE   DS    0H                                                 *AXB*\n         L     R1,CTRACE            ; CURRENT ELEMENT             *AXB*\n         LA    R1,4(,R1)            ; NEXT ELEMENT ADDRESS        *AXB*\n         C     R1,ETRACE            ; AT THE END?                 *AXB*\n         BL    ADDTRACE             ; STILL OK                    *AXB*\n* WRAP AROUND                                                     *AXB*\n         MVI   0(R1),X'00'          ; DELETE \"<\"                  *AXB*\n         MVC   CTRACE(4),PTRACE     ; RE-INIT                     *AXB*\n         B     @TRACE               ; RESTART                     *AXB*\n*AXB     MVC   0(4,R1),ENDTRACE                                   *AXB*\n         BR    R15                                                *AXB*\n*                                                                 *AXB*\nADDTRACE DS    0H                                                 *AXB*\n         ST    R0,0(,R1)            ; SAVE CURRENT ELEMENT        *AXB*\n         ST    R1,CTRACE            ; AND ADDRESS AS WELL         *AXB*\n         MVI   4(R1),C'<'           ; LAST ELEMENT                *AXB*\n         BR    R15                  ; BACK TO CALLER              *AXB*\n         LTORG                                                    *AXB*\n         DS    0D                                                 *AXB*\nENDTRACE DC    CL4'?++?'                                          *AXB*\n         DC    CL8'TRACE=>'                                       *AXB*\nPTRACE   DC    AL4(TRACEBUF-4)     ; BUFFER START                 *AXB*\nCTRACE   DC    AL4(TRACEBUF-4)     ; CURRENT ELEMENT ADDRESS      *AXB*\nETRACE   DC    AL4(LTRACE)          ; BUFFER END                  *AXB*\nTRACEBUF DC    256AL4(0)                                          *AXB*\nLTRACE   EQU *-4                                                  *AXB*\n         EJECT ,\n*--------------------------------------------------------------\n* MISC MACROS\n*--------------------------------------------------------------\n         IFGRPL AM=VTAM\n         ISTDNIB ,                                                 -WTM\n         ISTDBIND ,                                                -WTM\n         IFGACB AM=VTAM\n         IKJCPPL                                 COMMAND PROCESSOR LIST\nR0       EQU   0\nR1       EQU   1\nR2       EQU   2\nR3       EQU   3\nR4       EQU   4\nR5       EQU   5\nR6       EQU   6\nR7       EQU   7\nR8       EQU   8\nR9       EQU   9\nR10      EQU   10\nR11      EQU   11\nR12      EQU   12\nR13      EQU   13\nR14      EQU   14\nR15      EQU   15\n         END   SIMTERM\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT303/FILE303.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT303", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}