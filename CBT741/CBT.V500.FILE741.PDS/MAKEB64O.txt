         TITLE '   M A K E B 6 4   '
* WRITTEN FEBRUARY 7 2002
* UPDATED APRIL 14 2006
* ENCODE A FILE TO A BASE64 FILE,
* OR IF PARM=D, REVERSE THE PROCESS AND DECODE IT.
*
* DDNAMES: SYSUT1 (INPUT) AND SYSUT2 (OUTPUT)
*
* IF PARM CONTAINS 'R' THEN RDW'S WILL BE ENCODED IF INPUT IS V.
* THERE IS NO ASCII CONVERSION.
* RECORD BOUNDARIES ARE NOT MARKED.
*
* DECODING WRITES A FIXED-LENGTH 80-BYTE RECORD FILE,
* SO IF THE ORIGINAL FILE WAS THAT TYPE THEN IT SHOULD WORK.
* A FILE PRODUCED BY THE TSO TRANSMIT COMMAND, FOR EXAMPLE.
* IF THE ORIGINAL FILE RECORD FORMAT WAS FIXED-LENGTH, AND THE
* DECODER OUTPUT FILE IS FIXED-LENGTH WITH THE SAME RECORD LENGTH
* AS THE ORIGINAL, THEN THE DECODED FILE SHOULD MATCH THE ORIGINAL.
*
* RECFM V AND U FILES CAN BE ENCODED, BUT DECODING THEM WITH THIS
* PROGRAM WILL NOT KEEP THE ORIGINAL FILE FORMAT.
* EVEN IF THE FILE WAS ENCODED WITH RDW'S INCLUDED,
* THE DECODE LOGIC DOES NOT USE THEM.
*
* BASE64 ENCODING, IN A NUTSHELL.
*  FOR EVERY 3 BYTES READ, THE 24 BITS ARE SPREAD OUT INTO A
*  32-BIT OUTPUT GROUP 00XXXXXX 00XXXXXX 00XXXXXX 00XXXXXX.
*  THAT MAKES 4 BYTES, EACH WITH A VALUE IN THE RANGE 0 TO 63.
*  THEN TRANSLATE VALUES 0 THRU 25 TO CAPITAL 'A' THRU 'Z',
*  VALUES 26 THRU 51 TO LOWERCASE 'A' THRU 'Z',
*  VALUES 52 THRU 63 TO '0' THRU '9', '+' AND '/'.
*  IF AT FILE-END THE LAST GROUP OF 3 HAD ONLY 1 BYTE, THE 4-BYTE
*  OUTPUT GROUP IS 00XXXXXX 00XX0000 TRANSLATED, PLUS "==".
*  IF AT FILE-END THE LAST GROUP OF 3 HAD ONLY 2 BYTES, THE 4-BYTE
*  OUTPUT GROUP IS 00XXXXXX 00XXXXXX 00XXXX00 TRANSLATED, PLUS "=".
*  EACH OUTPUT LINE SHOULD BE NO LONGER THAN 76 BYTES (19 GROUPS OF 4)
*  WHICH IS WHAT YOU WOULD GET FROM 57 INPUT BYTES (19 GROUPS OF 3).
*
* DISCLAIMER: NO GUARANTEE; NO WARRANTY; INSTALL/USE AT YOUR OWN RISK.
*
* LOG OF CHANGES:
*  APR 14 2006 - FIX BUGS IN PUT57, WAS USING INPUT DCB RECFM LRECL ETC
*  DEC 18 2006 - FIX OUTPUT LOOPING WHEN FILE SIZE IS MULTIPLE OF 57
         SPACE
MAKEB64  CSECT
         USING *,R10
         B     @PROLOG-*(,R15)
         DC    AL1(7),CL7'MAKEB64'
         DC    CL16' &SYSDATE &SYSTIME '
@SIZE    DC    0F'0',AL1(0),AL3(@DATAL)
@PROLOG  STM   14,12,12(13)
         LR    R10,R15
         LR    R2,R1               POINT R2 TO PARM ADDRESS
         L     R0,@SIZE
         GETMAIN R,LV=(0)
         LR    R9,R1               POINT R9 TO GETMAINED AREA
         XC    0(@CLEARL,R9),0(R9)
         USING @DATA,R9
         ST    R13,4(,R9)          OLD ADDRESS IN NEW SAVE AREA
         ST    R9,8(,R13)          NEW ADDRESS IN OLD SAVE AREA
         LR    R13,R9              POINT R13 TOP NEW SAVE AREA
         SPACE
         L     R1,0(,R2)           POINT TO PARM
         LH    R14,0(,R1)          LENGTH OF PARM
         LTR   R14,R14
         BZ    PARMX
         LA    R15,2(,R1)
PARMLOOP CLI   0(R15),C'D'         IF PARM CONTAINS D
         BNE   *+8                   THEN
         MVI   OPTD,1                TURN ON DECODE OPTION
         CLI   0(R15),C'R'         IF PARM CONTAINS R
         BNE   *+8                   THEN
         MVI   OPTR,1                TURN ON RDW OPTION
         LA    R15,1(,R15)
         BCT   R14,PARMLOOP
PARMX    EQU   *
         SPACE
         LA    R15,12
         ST    R15,RETCODE
         SPACE
         LA    R3,UT1DCBW
         LA    R4,UT2DCBW
         MVC   0(UT1DCBL,R3),UT1DCB
         MVC   0(UT2DCBL,R4),UT2DCB
         MVI   OPEN,X'80'
         OPEN  ((R3),INPUT),MF=(E,OPEN)
         TM    OFLGS(R3),X'10'
         BNO   EXIT
         OPEN  ((R4),OUTPUT),MF=(E,OPEN)
         TM    OFLGS(R4),X'10'
         BNO   EXITC1
         XC    GETREGS(8),GETREGS
         XC    PUTREGS(8),PUTREGS
         SR    R6,R6
         SR    R8,R8
         CLI   OPTD,0
         BNE   DEKO
         XC    ORDW(4),ORDW CLEAR RDW
EGET     BAL   R14,GET57           READ 57 INTO IBUF
         LR    R7,R0               GET LENGTH TO ENCODE
         BAL   R14,ENCODE
         LR    R6,R0               GET LENGTH TO PUT
         BAL   R14,PUT76
         CLI   GOTEOD,0            IF NO EOF YET    .DEC-18-2006.
         BE    EGET                   THEN LOOP
         B     EXITN
DEKO     EQU   *
DGET     BAL   R14,GET76           READ 76 INTO IBUF
         A     R8,=F'1'
         LTR   R7,R0               GET LENGTH TO DECODE
         BZ    DFLUSH              BRANCH IF EOF (OR EMPTY LINE)
         BAL   R14,DECODE
         LR    R6,R0               GET LENGTH TO PUT
         BAL   R14,PUT57
         CLI   GOTEQL,0            IF WE FOUND '='
         BNE   DFLUSH                 THEN STOP
         B     DGET                GO READ NEXT LINE
DFLUSH   BAL   R14,PUT57Q          WRITE REMAINING OBUF
         B     EXITN
         SPACE
*         ENCODE - ENCODE IBUF TO OBUF, R7 HAS IBUF LENGTH
*          RETURNS OUTPUT LENGTH IN R0
         SPACE
ENCODE   LA    R5,IBUF
         LA    R15,OBUF
         MVI   0(R15),C' '         FILL
         MVC   1(79,R15),0(R15)     WITH BLANKS
         SR    R0,R0               PREPARE FOR DIVIDE
         LR    R1,R7               PREPARE FOR DIVIDE
         D     R0,=F'3'            COMPUTE NUMBER OF 3-BYTE GROUPS
         LTR   R1,R1
         BZ    EREST
ELOOP    MVC   ALIGN(3),0(R5)      COPY A 3-BYTE GROUP
         L     R7,ALIGN
         SR    R6,R6
         SLDL  R6,6
         STC   R6,0(R15)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,1(R15)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,2(R15)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,3(R15)
         TR    0(4,R15),TABE64
         LA    R15,4(,R15)
         LA    R5,3(,R5)
         BCT   R1,ELOOP
EREST    LTR   R0,R0
         BZ    EDONE
         BCT   R0,ERES2            FALL THRU IF R0 = 1
         IC    R7,0(,R5)
         SLL   R7,24               ICM R7,8,0(R5)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,0(R15)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,1(R15)
         TR    0(2,R15),TABE64
         MVI   2(R15),C'='
         MVI   3(R15),C'='
         LA    R15,4(,R15)
*        LA    R5,1(,R5)
         B     EDONE
         SPACE
ERES2    MVC   ALIGN(2),0(R5)
         LH    R7,ALIGN
         SLL   R7,16               ICM R7,12,0(R5)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,0(R15)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,1(R15)
         SR    R6,R6
         SLDL  R6,6
         STC   R6,2(R15)
         TR    0(3,R15),TABE64
         MVI   3(R15),C'='
         LA    R15,4(,R15)
*        LA    R5,2(,R5)
EDONE    LA    R1,OBUF
         LR    R0,R15
         SR    R0,R1               COMPUTE LENGTH
         BR    R14
         SPACE
*         DECODE - DECODE IBUF TO DBUF, R7 HAS IBUF LENGTH
*          RETURNS OUTPUT LENGTH IN R0
         SPACE
DECODE   LA    R5,IBUF
         LA    R15,DBUF
         SR    R0,R0               PREPARE FOR DIVIDE
         LR    R1,R7               PREPARE FOR DIVIDE
         D     R0,=F'4'            COMPUTE NUMBER OF 4-BYTE GROUPS
         LTR   R1,R1
         BZ    DREST
DLOOP    CLI   0(R5),C'='          SHOULD NOT HAVE '=' AS 1ST CHAR
         BE    DLASX
         CLI   1(R5),C'='          SHOULD NOT HAVE '=' AS 2ND CHAR
         BE    DLASX
         CLI   2(R5),C'='          CHECK FOR '=' AS 3RD CHAR
         BE    DLAST
         CLI   3(R5),C'='          CHECK FOR '=' AS 4TH CHAR
         BE    DLAST
         MVC   ALIGN(4),0(R5)
         TR    ALIGN(4),TABD64
         L     R7,ALIGN
         SR    R6,R6
         SLDL  R6,8
         SLL   R7,2
         SLDL  R6,2
         STC   R6,0(R15)
         SLDL  R6,4
         SLL   R7,2
         SLDL  R6,4
         STC   R6,1(R15)
         SLDL  R6,2
         SLL   R7,2
         SLDL  R6,6
         STC   R6,2(R15)
         LA    R15,3(,R15)
         LA    R5,4(,R5)
         BCT   R1,DLOOP
DREST    LTR   R0,R0
         BZ    DDONE
         NOPR  0                   PLACE FOR BREAKPOINT
         B     DLASE
DLASX    NOPR  0                   PLACE FOR BREAKPOINT
DLASE    MVI   RETCODE+3,8         THERE SHOULD BE NO REMAINDER
         MVI   GOTEQL,1
         B     DDONE
DLAST    CLI   2(R5),C'='          IF '=' IS 3RD CHAR
         BE    DLAS1                 DECODE 2 TO 1
         MVC   ALIGN(3),0(R5)      COPY XXX TO DECODE 3 TO 2
         TR    ALIGN(3),TABD64
         L     R7,ALIGN
         SR    R6,R6
         SLDL  R6,8
         SLL   R7,2
         SLDL  R6,2
         STC   R6,0(R15)
         SLDL  R6,4
         SLL   R7,2
         SLDL  R6,4
         STC   R6,1(R15)
         LA    R15,2(,R15)
*        LA    R5,4(,R5)
         MVI   GOTEQL,1
         B     DDONE
DLAS1    MVC   ALIGN(2),0(R5)      COPY XX FROM XX==
         TR    ALIGN(2),TABD64
         L     R7,ALIGN
         SR    R6,R6
         SLDL  R6,8
         SLL   R7,2
         SLDL  R6,2
         STC   R6,0(R15)
         LA    R15,1(,R15)
         MVI   GOTEQL,1
DDONE    LA    R1,DBUF
         LR    R0,R15
         SR    R0,R1               COMPUTE LENGTH
         BR    R14
         SPACE
*         GET57 - READ UP TO 57 BYTES INTO IBUF, SET R0 TO COUNT
         SPACE
GET57    LM    R5,R6,GETREGS
         LA    R15,IBUF
         LA    R0,57
GET5A    CR    R5,R6               IF END OF RECORD
         BNL   GET5R                 THEN READ NEXT RECORD
         MVC   0(1,R15),0(R5)      COPY ONE BYTE TO OBUF
         LA    R15,1(,R15)         NEXT OBUF BYTE
         LA    R5,1(,R5)           NEXT IBUF BYTE
         BCT   R0,GET5A            DECREMENT R0 AND LOOP
         LA    R0,57               SET RETURNED LENGTH
         STM   R5,R6,GETREGS
         BR    R14
GET5R    STM   R14,R0,GETREGS+8
         CLI   GOTEOD,0            IF WE ALREADY HIT EODAD
         BNE   UT1EOD                GO THERE AGAIN
         GET   (R3)
         LR    R5,R1
         TM    RECFM(R3),X'C0'     RECFM U
         BO    GET5U
         TM    RECFM(R3),X'80'     RECFM F
         BO    GET5F
GET5V    LA    R0,4
         LH    R6,0(,R5)           LENGTH+4 FROM RDW
         CLI   OPTR,0              IF R IN PARM
         BNE   GET5W                  INCLUDE RDW
         AR    R5,R0               POINT PAST RDW
         SR    R6,R0               REDUCE LENGTH
GET5W    AR    R6,R5               POINT TO END OF RECORD
         B     GET5X
GET5U    LH    R6,LRECL(,R3)
         AR    R6,R5               POINT TO END OF RECORD
         B     GET5X
GET5F    LH    R6,LRECL(,R3)       GET LENGTH FROM LRECL
         TM    RECFM(R3),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,BLKSI(,R3)         USE BLKSIZE AS LENGTH
         AR    R6,R5               POINT TO END OF RECORD
GET5X    LM    R14,R0,GETREGS+8
         B     GET5A
GET5E    LA    R0,57
         S     R0,GETREGS+16       COMPUTE HOW MANY BYTES IN IBUF
         XC    GETREGS(8),GETREGS                   .DEC-18-2006.
         L     R14,GETREGS+8
         BR    R14
         SPACE
*         GET76 - READ NEXT RECORD AND COPY UP TO 76 NONBLANKS TO IBUF
*                 SET R0 TO COUNT
         SPACE
GET76    ST    14,GETREGS
         GET   (R3)
         LR    R5,R1
         TM    RECFM(R3),X'C0'     RECFM U
         BO    GET7U
         TM    RECFM(R3),X'80'     RECFM F
         BO    GET7F
GET7V    LA    R0,4
         LH    R6,0(,R5)           LENGTH+4 FROM RDW
         AR    R5,R0               POINT PAST RDW
         SR    R6,R0               REDUCE LENGTH
         AR    R6,R5               POINT TO END OF RECORD
         B     GET7M
GET7U    LH    R6,LRECL(,R3)
         AR    R6,R5               POINT TO END OF RECORD
         B     GET7M
GET7F    LH    R6,LRECL(,R3)       GET LENGTH FROM LRECL
         TM    RECFM(R3),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,BLKSI(,R3)         USE BLKSIZE AS LENGTH
         AR    R6,R5               POINT TO END OF RECORD
GET7M    SR    R1,R1               CLEAR COUNTER
         LA    R15,IBUF
         LA    R0,76
GET7N    CR    R1,R0               IF WE HAVE DONE 76
         BNL   GET7W                  STOP NOW
         CR    R5,R6               IF END OF RECORD
         BNL   GET7W                  STOP NOW
         CLI   0(R5),C' '          IF BLANK
         BE    GET7S                  IGNORE
         MVC   0(1,R15),0(R5)      COPY ONE BYTE TO IBUF
         LA    R15,1(,R15)         NEXT IBUF BYTE
         LA    R1,1(,R1)           COUNT BYTES
GET7S    LA    R5,1(,R5)           NEXT INPUT BYTE
         B     GET7N
GET7W    LR    R0,R1
GET7X    L     R14,GETREGS
         BR    R14
GET7E    SR    R0,R0
         B     GET7X
         SPACE
UT1EOD   MVI   GOTEOD,1
         CLI   OPTD,0              IF ENCODING
         BE    GET5E                  RETURN TO ENCODE LOGIC
         B     GET7E               ELSE RETURN TO DECODE LOGIC
         SPACE
*         PUT76 - WRITE OBUF (LENGTH IN R6)
         SPACE
PUT76    LTR   R6,R6
         BZR   R14
         ST    R14,PUTREGS
         TM    RECFM(R4),X'C0'
         BO    PUT7U
         TM    RECFM(R4),X'80'
         BO    PUT7F
PUT7V    LA    R6,4(,R6)
         CH    R6,LRECL(,R4)       IF RECORD TOO LONG
         BNH   PUT7V2                 THEN
         LH    R6,LRECL(,R4)          TRUNCATE IT
         MVI   RETCODE+3,4            SET PROGRAM RETURN CODE TO 4
PUT7V2   STH   R6,ORDW             SET LENGTH IN RDW
         PUT   (R4),ORDW
         LA    R0,4
         SR    R6,R0
         L     R14,PUTREGS
         BR    R14
PUT7U    STH   R6,LRECL(,R4)
PUT7F    PUT   (R4),OBUF
         L     R14,PUTREGS
         BR    R14
         SPACE
*         PUT57 - WRITE NEXT COUNT=R6 BYTES FROM DBUF TO OBUF
*                 WRITE A RECORD WHENEVER OBUF FILLS UP.
*                 SHOULD CALL PUT57Q BEFORE CLOSING
         SPACE
PUT57    LTR   R6,R6
         BZR   R14
         ST    R6,PUTREGS+20
         LR    R0,R6
         LM    R5,R6,PUTREGS
         LA    R15,DBUF
         LTR   R5,R5               IF FIRST TIME
         BNZ   PUT5A                  FALL THRU
PUT5I    LA    R5,OBUF
         XC    OBUF(256),OBUF
         TM    RECFM(R4),X'C0'
         BO    PUT5IU
         TM    RECFM(R4),X'80'
         BO    PUT5IF
         LH    R6,LRECL(,R4)       GET LENGTH FROM LRECL
         TM    RECFM(R4),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,BLKSI(,R4)         USE BLKSIZE AS LENGTH
         LA    R0,4
         SR    R6,R0
         B     PUT5IL
PUT5IU   LH    R6,BLKSI(,R4)       GET LENGTH FROM BLKSI
         B     PUT5IL
PUT5IF   LH    R6,LRECL(,R4)       GET LENGTH FROM LRECL
         TM    RECFM(R4),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,BLKSI(,R4)         USE BLKSIZE AS LENGTH
PUT5IL   AR    R6,R5
PUT5A    CR    R5,R6               IF END OF RECORD
         BNL   PUT5W                 THEN WRITE THE RECORD
         MVC   0(1,R5),0(R15)      COPY ONE BYTE TO OBUF
         LA    R5,1(,R5)           NEXT OBUF BYTE
         LA    R15,1(,R15)         NEXT DBUF BYTE
         BCT   R0,PUT5A            DECREMENT R0 AND LOOP
         L     R0,PUTREGS+20       SET RETURNED LENGTH
         STM   R5,R6,PUTREGS       SAVE FOR NEXT TIME
         BR    R14                 RETURN
PUT57Q   L     R5,PUTREGS
         LTR   R5,R5               IF PUT57 WAS NEVER CALLED
         BZR   R14                    RETURN
         LA    R0,OBUF             IF OBUF CURSOR AT COLUMN 1
         CR    R5,R0                  THEN
         BER   R14                    RETURN
         ST    R14,PUTREGS+24
         BAL   R14,PUT5P
         STM   R5,R6,PUTREGS
         L     R14,PUTREGS+24
         BR    R14
PUT5W    ST    R14,PUTREGS+28
         BAL   R14,PUT5P
         L     R14,PUTREGS+28
         B     PUT5A
PUT5P    STM   R14,R0,PUTREGS+8
         TM    RECFM(R4),X'C0'
         BO    PUT5U
         TM    RECFM(R4),X'80'
         BO    PUT5F
PUT5V    LR    R1,R5
         LA    R0,ORDW
         SR    R1,R0               COMPUTE LENGTH
         CH    R1,LRECL(,R4)       IF RECORD TOO LONG
         BNH   PUT5V2                 THEN
         LH    R1,LRECL(,R4)          TRUNCATE IT
         MVI   RETCODE+3,4            SET PROGRAM RETURN CODE TO 4
PUT5V2   STH   R1,ORDW             SET LENGTH IN RDW
         PUT   (R4),ORDW
         LA    R5,OBUF
         LH    R6,LRECL(,R4)       GET LENGTH FROM LRECL
         TM    RECFM(R4),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,BLKSI(,R4)         USE BLKSIZE AS LENGTH
         LA    R0,4
         SR    R6,R0
         B     PUT5L
PUT5U    LR    R1,R5
         LA    R0,OBUF
         SR    R1,R0               COMPUTE LENGTH
         STH   R1,LRECL(,R4)
         PUT   (R4),OBUF
         LA    R5,OBUF
         LH    R6,BLKSI(,R4)
         B     PUT5L
PUT5F    PUT   (R4),OBUF
         LA    R5,OBUF
         LH    R6,LRECL(,R4)       GET LENGTH FROM LRECL
         TM    RECFM(R4),X'10'     IF NOT BLOCKED
         BO    *+8                   THEN
         LH    R6,BLKSI(,R4)         USE BLKSIZE AS LENGTH
PUT5L    AR    R6,R5               POINT TO END OF RECORD
         XC    OBUF(256),OBUF
         LM    R14,R0,PUTREGS+8
         BR    R14
         SPACE
EXITN    CLI   RETCODE+3,12        IF AN ERROR OCCURRED
         BNE   EXITC2                DON'T SET RC 0
EXIT0    MVI   RETCODE+3,0
EXITC2   MVI   CLOSE,X'80'
         CLOSE ((R4)),MF=(E,CLOSE)
         LR    R6,R4
         BAL   R2,FREEPOOL
EXITC1   MVI   CLOSE,X'80'
         CLOSE ((R3)),MF=(E,CLOSE)
         LR    R6,R3
         BAL   R2,FREEPOOL
         B     EXIT
FREEPOOL FREEPOOL (R6)
         BR    R2
EXIT     L     R2,RETCODE
         LR    R1,R13
         L     R0,@SIZE
         L     R13,4(,R13)
         FREEMAIN R,A=(1),LV=(0)
         DROP  R9
         LR    R15,R2
         LM    0,12,20(R13)
         L     R14,12(,R13)
         BR    R14
         SPACE
UT2EXIT  CLI   RECFM(R1),0         IF NO RECFM
         BNE   UT2EXI2                THEN
         MVI   RECFM(R1),X'90'        USE FB
UT2EXI2  TM    RECFM(R1),X'10'     IF BLOCKED
         BZ    UT2EXI3                AND
         CLC   LRECL(2,R1),=H'0'      NO LRECL
         BNE   UT2EXI3                THEN
         MVC   LRECL(2,R1),=H'80'     USE 80
UT2EXI3  CLC   BLKSI(2,R1),=H'0'   IF NO BLKSIZE
         BNE   UT2EXI4                THEN
         MVC   BLKSI(2,R1),=H'10720'  USE 5 PER 3390 TRACK
UT2EXI4  BR    R14
         SPACE
         LTORG
         DC    0D'0'
         PRINT NOGEN
UT1DCB   DCB   DDNAME=SYSUT1,DSORG=PS,MACRF=(GL),EODAD=UT1EOD
UT1DCBL  EQU   *-UT1DCB
UT2DCB   DCB   DDNAME=SYSUT2,DSORG=PS,MACRF=(PM),EXLST=UT2EXL
UT2DCBL  EQU   *-UT2DCB
UT2EXL   DC    0F'0',X'85',AL3(UT2EXIT)
         DC    0D'0'
TABE64   DC    C'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
         DC    X'818283848586878889'
         DC    X'919293949596979899'
         DC    X'A2A3A4A5A6A7A8A9'
         DC    C'0123456789'
         DC    C'+/'
         DC    192X'00'
TABD64   DC    78X'FF'     00 - 4D
         DC    AL1(62) '+' 4E
         DC    18X'FF'     4F - 60
         DC    AL1(63) '/' 61
         DC    28X'FF'     62 - 7D
         DC    X'7E'   '=' 7E
         DC    2X'FF'      7F - 80
         DC    X'1A1B1C1D1E1F202122' 81 - 89 (26 - 34)
         DC    7X'FF'      8A - 90
         DC    X'232425262728292A2B' 91 - 99 (35 - 43)
         DC    8X'FF'      9A - A1
         DC    X'2C2D2E2F30313233'   A2 - A9 (44 - 51)
         DC    23X'FF'     AA - C0
         DC    X'000102030405060708' C1 - C9 (00 - 08)
         DC    7X'FF'      CA - D0
         DC    X'090A0B0C0D0E0F1011' D1 - D9 (09 - 17)
         DC    8X'FF'      DA - E1
         DC    X'1213141516171819'   E2 - E9 (18 - 25)
         DC    6X'FF'      EA - EF
         DC    X'3435363738393A3B3C3D'       (52 - 61)
         DC    6X'FF'      FA - FF
         DC    0D'0'
         SPACE
@DATA    DSECT
         DS    18F
RETCODE  DS    F
OPEN     DS    F
CLOSE    DS    F
OPTD     DS    C
OPTR     DS    C
GOTEOD   DS    C
GOTEQL   DS    C
GETREGS  DS    5F
PUTREGS  DS    8F
@CLEARL  EQU   *-@DATA
DOUBLE   DS    D
UT1DCBW  DS    0F,(UT1DCBL)X
UT2DCBW  DS    0F,(UT2DCBL)X
ALIGN    DS    F
IBUF     DS    CL80
DBUF     DS    CL80
TBUF     DS    CL80
         DS    0D,F
ORDW     DS    F
OBUF     DS    32768C
         DS    0D
@DATAL   EQU   *-@DATA
         SPACE
*         EQUATES FOR DCB FIELD OFFSETS
RECFM    EQU   36
OFLGS    EQU   48
BLKSI    EQU   62
LRECL    EQU   82
         SPACE
R0       EQU   0
R1       EQU   1
R2       EQU   2
R3       EQU   3
R4       EQU   4
R5       EQU   5
R6       EQU   6
R7       EQU   7
R8       EQU   8
R9       EQU   9
R10      EQU   10
R11      EQU   11
R12      EQU   12
R13      EQU   13
R14      EQU   14
R15      EQU   15
         END
