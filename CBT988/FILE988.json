{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220013710000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 2410226, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 7, "INMDSNAM": "CBT.V500.FILE988.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 2410226, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 2410226, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE988.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00&\\x03'", "DS1TRBAL": "b'\\xc0\\xd8'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xd0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xd0\\x00\\x04\\x9a\\xc0\\xd8'", "b\"X\\xf4\\xfd\\xd0\\x00\\x00\\n}\\x00\\x03\\n\\x7f\\x00\\x0b\\x00'\"", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"$$$#DATE": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x04b\\x00\\x16\\x01\\x19\\x18O\\x01\\x19\\x18O\\x14\\x13\\x00\\x0c\\x00\\x0c\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@'", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-07-03T00:00:00", "modifydate": "2019-07-03T14:13:16", "lines": 12, "newlines": 12, "modlines": 0, "user": "CBT-498"}, "text": "REGULAR CBT TAPE - VERSION 498    FILE:  988\n\n    ORIGINAL DSNAME:  SBGOLOB.CBT498.FILE988\n    ---------------\n                    --RECFM-LRECL-BLKSIZE-DSORG\n                      FB    80    5600    PO\n\n   PDS117I 8 MEMBERS COUNTED; CUMULATIVE SIZE IS 22,538 RECORDS\n\n\nTIME THIS PDS WAS SHIPPED:   07/03/19    14:13:15    UTC-4:00\n\n", "mimetype": "text/plain", "datatype": "iso-8859-1", "extension": ".txt"}, "$$NOTE01": {"ttr": 518, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x00U\\x01\\x19\\x10o\\x01\\x19\\x10\\x7f\\x10\"\\x00#\\x00\\x1f\\x00\\x00\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-17T10:22:55", "lines": 35, "newlines": 31, "modlines": 0, "user": "SBGOLOB"}, "text": "On 4/16/2019 1:55 PM, Seymour J Metz wrote some thoughts as to\n             how to modernize this program.\n\n  Off the top of my head:\n\n  The documentation should be usable with Waterloo Script.\n\n  Remove the code for detecting whether use is authorized. Keep\nthat version for OS/360, OS/VS1 and SVS.\n\n  For MVS, fork the code and remove the irrelevant conditional\nassembly stuff. Add code to deal with:\n\n  The lookup of Nucleus csects will need changes.\n\n  MVS treats disabled page faults as errors, so the SSM locking\nmechanism used for SVS will need to be replaced\n\n  The 3270 support will probably need to be tweaked.\n\n  The console support may need to be tweaked.\n\n  The 2260 support can go.\n\n  MVS support will require use of CSA and SRB code\nand support of later systems should include SAF\nrather than my ad hoc authentication.\n\n  For more current systems, support for looking up csects in\nprogram objects would be nice. Also, the console support could\ntake advantage of new facilities.\n\nShmuel (Seymour J) Metz\nhttp://mason.gmu.edu/~smetz3\n\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "$$NOTE02": {"ttr": 520, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x01\\x007\\x01\\x19\\x11O\\x01\\x19\\x11_\\x14\\x18\\x00\\x1b\\x00\\x19\\x00\\x02\\xe2\\xc2\\xc7\\xd6\\xd3\\xd6\\xc2@@@'", "ispf": {"version": "01.01", "flags": 0, "createdate": "2019-04-24T00:00:00", "modifydate": "2019-04-25T14:18:37", "lines": 27, "newlines": 25, "modlines": 2, "user": "SBGOLOB"}, "text": "Subject:  Suggested text for file 998\nFrom:     Seymour J Metz <smetz3@gmu.edu>\nDate:     4/24/2019, 11:37 AM\nTo:       Sam Golob <sbgolob@CBTTAPE.ORG>\n\nFile # 988 OS/360 Storage Zap - original program from S. Metz * NEW\n\n\"MOREZAP (MZAP) is a replacement for COREZAP0 that can locate\ncsects by name in the jobpack, linkpack and nucleus. It can be\nassembled for OS/360 or for OS/VS2 R1 (SVS); it may require\nchanges for OS/VS1. It can locate various system control blocks\nand can display storage either as raw hex+EBCDIC or with opcode\ndeciphering for, e.g., S/360, S/370 and compatibility features.\nThere is a COPY file that must be tailored prior to assembly.\nMZAP process all VER statements prior to any ZAP statements,\nrelying on SSM for serialization.\n\nMZAP can also follow pointer chains.\n\nThe code would need significant changes to support MVS; feel free\nto contact Shmuel (Seymour J.) Metz <smetz3@gmu.edu> if you wish\nguidance.\"\n\n--\nShmuel (Seymour J.) Metz\nhttp://mason.gmu.edu/~smetz3\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "@FILE988": {"ttr": 522, "alias": false, "halfwords": 30, "notes": 0, "parms": "b\"\\x04b\\x00\\x10\\x01\\x19\\x18O\\x01\\x19\\x18O\\x14\\x13\\x00'\\x00'\\x00\\x00\\xc3\\xc2\\xe3`\\xf4\\xf9\\xf8@@@\"", "ispf": {"version": "04.98", "flags": 0, "createdate": "2019-07-03T00:00:00", "modifydate": "2019-07-03T14:13:10", "lines": 39, "newlines": 39, "modlines": 0, "user": "CBT-498"}, "text": "//***FILE 988 is from Shmuel (Seymour) Metz and contains his        *   FILE 988\n//*           OS/360 Storage ZAP program called MZAP.               *   FILE 988\n//*           I realize that not too many people run OS/360         *   FILE 988\n//*           or SVS nowadays, although some people do run          *   FILE 988\n//*           a OS/360 Turnkey system under Hercules.               *   FILE 988\n//*                                                                 *   FILE 988\n//*       \"MOREZAP (MZAP) is a replacement for COREZAP0 that can    *   FILE 988\n//*       locate csects by name in the jobpack, linkpack and        *   FILE 988\n//*       nucleus. It can be assembled for OS/360 or for OS/VS2     *   FILE 988\n//*       R1 (SVS); it may require changes for OS/VS1. It can       *   FILE 988\n//*       locate various system control blocks and can display      *   FILE 988\n//*       storage either as raw hex+EBCDIC or with opcode           *   FILE 988\n//*       deciphering for, e.g., S/360, S/370 and compatibility     *   FILE 988\n//*       features.  There is a COPY file that must be tailored     *   FILE 988\n//*       prior to assembly.  MZAP process all VER statements       *   FILE 988\n//*       prior to any ZAP statements, relying on SSM for           *   FILE 988\n//*       serialization.                                            *   FILE 988\n//*                                                                 *   FILE 988\n//*       MZAP can also follow pointer chains.                      *   FILE 988\n//*                                                                 *   FILE 988\n//*       The code would need significant changes to support MVS;   *   FILE 988\n//*       feel free to contact Shmuel (Seymour J.) Metz             *   FILE 988\n//*       <smetz3@gmu.edu> if you wish guidance.\"                   *   FILE 988\n//*                                                                 *   FILE 988\n//*       Member MZAPMVS supplies some notes from Shmuel Metz       *   FILE 988\n//*       advising some of the things needed to adapt the code      *   FILE 988\n//*       either to MVS 3.8 or to z/OS.                             *   FILE 988\n//*                                                                 *   FILE 988\n//*       The material is being placed here in the hope that:       *   FILE 988\n//*                                                                 *   FILE 988\n//*       1.  A few of the OS/360 buffs might find it useful.       *   FILE 988\n//*                                                                 *   FILE 988\n//*       2.  Someone might modernize it, perhaps to the MVS 3.8    *   FILE 988\n//*           level, or even to z/OS.  See member $$NOTE01.         *   FILE 988\n//*                                                                 *   FILE 988\n//*       email:  Shmuel (Seymour J.) Metz<smetz3@gmu.edu>          *   FILE 988\n//*                                                                 *   FILE 988\n//*       web  :  http://mason.gmu.edu/~smetz3                      *   FILE 988\n//*                                                                 *   FILE 988\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MZAPASM": {"ttr": 524, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x19\\x10o\\x01\\x19\\x10o\"G;\\x1d;\\x1d\\x00\\x00\\xd4\\xe9\\xc1\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:47:35", "lines": 15133, "newlines": 15133, "modlines": 0, "user": "MZAP"}, "text": "./ ADD NAME=CVT      0100-19106-19106-1238-01304-01304-00000-MZAP78  17\n*\n*        %GOTO CVTL1;       /* BILINGUAL MAPPING\n         MACRO\n&CVTNAME CVT   &SYS=AOS2,&OPTIONS=(NOSLICE,INTERVAL,0),&TSO=NO,        *\n               &PREFIX=NO,&FLAG=00,&FLAGB=00,&PATCH=NO,&REAL=0,        *\n               &DSECT=NO,&RPS=NO,&CVTTZ=0,&CTLFLGS=00,&LIST=NO,        *\n               &LOADBAL=NO       */\n*%CVTL1 : ;\n*/*                                                                  */\n*/*      COMMUNICATION VECTOR TABLE                                  */\n*/*                                                                  */\n*/*      OS/VS2 RELEASE 1.6, 01/30/73, LEVEL=31                      */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      PL/S - DCL CVTPTR PTR                                       */\n*/*      BAL  - DSECT=YES SHOULD BE SPECIFIED ON MACRO CALL EXCEPT   */\n*/*             WHEN CALLED DURING SYSGEN TO CREATE CSECT.  CVT FOR  */\n*/*             AOS/2 IS MAPPED UNLESS SYS=AOS1 IS SPECIFIED.  THE   */\n*/*             PREFIX IS NOT MAPPED UNLESS PREFIX=YES IS SPECIFIED. */\n*/*             A USING ON CVTMAP OR DSECT NAME WILL ESTABLISH       */\n*/*             ADDRESSABILITY FOR ALL SYMBOLS EXCEPT IN THE 2       */\n*/*             EXTENSIONS.  TO ESTABLISH ADDRESSABILITY FOR THE     */\n*/*             OS - AOS COMMON EXTENSION, YOU SHOULD CODE           */\n*/*                                                                  */\n*/*             L     REG,CVTEXT1                                    */\n*/*             USING CVTXTNT1,REG                                   */\n*/*                                                                  */\n*/*             TO ESTABLISH ADDRESSABILITY FOR THE AOS/1 - AOS/2    */\n*/*             COMMON EXTENSION, YOU SHOULD CODE                    */\n*/*                                                                  */\n*/*             L     REG,CVTEXT2                                    */\n*/*             USING CVTXTNT2,REG                                   */\n*/*                                                                  */\n*/*             WHERE REG IN EITHER CASE IS ANY REGISTER OTHER       */\n*/*             THAN ZERO.                                           */\n*/*                                                                  */\n*/*             WHEN LISTING IS SUPPRESSED, YOU CAN DETERMINE WHICH  */\n*/*             DSECT A SYMBOL IS IN BY USING THE STATEMENT NUMBER   */\n*/*             IN THE DEFN COLUMN IN THE CROSS REFERENCE LISTING.   */\n*/*             FOR EXAMPLE, ANY SYMBOL DEFINED BETWEEN THE          */\n*/*             STATEMENT NUMBERS FOR CVTXTNT1 AND CVTXTNT2 IS IN    */\n*/*             THE OS - AOS COMMON EXTENSION.                       */\n*/*                                                                  */\n*/*  F.E.'S                                                          */\n*/*      MICROFICHE LISTING - CVT                                    */\n*/*                                                                  */\n*/*  DEVELOPERS                                                      */\n*/*      BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL               */\n*/*      PL/S LISTING - SPECIFY %IHALIST='YES' BEFORE INCLUDE        */\n*/*                                                                  */\n*/*      FOR INTEGRATION, A LISTING MUST NOT BE REQUESTED UNLESS     */\n*/*      YOUR MODULE CREATES THE CSECT.                              */\n*\n*%GOTO CVTL2;   /*\n.*       CALLED DURING AOS/1 SYSGEN STAGE I BY SGIEA2CV\n.*       CALLED DURING AOS/2 SYSGEN STAGE II BY IEAQBK\n.*\n.*             OPERATING SYSTEM OPTIONS\n         LCLB  &CVTAOS1,&CVTAOS2\n.*\n.*             MULTIPROGRAMMING WITH A FIXED NUMBER OF PARTITION TASKS\n&CVTAOS1 SETB  ('&SYS' EQ 'AOS1' OR '&SYS' EQ 'MFT' OR '&SYS' EQ 'INT')\n.*\n.*             MULTIPROGRAMMING WITH A VARIABLE NUMBER OF REGION TASKS\n&CVTAOS2 SETB  ('&SYS' EQ 'AOS2' OR '&SYS' EQ 'MVT' OR '&SYS' EQ 'VMS')\n.*\n         PUSH  PRINT\n         AIF   ('&LIST' EQ 'YES').CVT1A\n         PRINT OFF\n.CVT1A   ANOP\nCVTPTR   EQU   16 -          ABSOLUTE ADDRESS OF POINTER TO CVT\n         AIF   ('&PREFIX' EQ 'NO').CVT15\n*\n*              BEGINNING OF CVT PREFIX\n*\n         AIF   ('&DSECT' EQ 'NO').CVT10\nCVTFIX   DSECT -             CVTMAP-256 - PREFIX\n         DS    0F\n         DS    CL248 -       RESERVED\n         AGO   .CVT12\n.CVT10   ANOP\n         DS    0F\nCVTFIX   EQU   *-248 -       CVTMAP-256\n.CVT12   ANOP\n         DS    H -           RESERVED\nCVTMDL   DS    CL2 -         CPU MODEL NUMBER IN SIGNLESS PACKED\n*                            DECIMAL, I.E., A MODEL 50 WOULD BE\n*                            REPRESENTED AS 0050 HEX\n         AIF   ('&DSECT' EQ 'NO').CVT13                          YM2188\nCVTRELNO DS    0CL4 -        OS RELEASE NUMBER (CHAR)\nCVTNUMB  DS    CL2 -         RELEASE NUMBER                      YM2188\nCVTLEVL  DS    CL2 -         RELEASE LEVEL                       YM2188\n         AGO   .CVT14                                            YM2188\n.CVT13   ANOP\n         IHBRELNO , -                                            YM2188\n.CVT14   ANOP\n*\n*              END OF CVT PREFIX\n*\n         AGO   .CVT16\n.CVT15   ANOP\n*\n*              BEGINNING OF CVT PROPER\n*\n         AIF   ('&DSECT' EQ 'NO').CVT16\nCVT      DSECT , -\n         AGO   .CVT18\n.CVT16   ANOP\n         DS    0F\n.CVT18   ANOP\n         AIF   ('&CVTNAME' EQ '').CVT01\n&CVTNAME EQU   * -           CVTPTR CONTENT POINTS HERE\n         AGO   .CVT02\n.CVT01   ANOP\nCVTMAP   EQU   * -           CVTPTR CONTENT POINTS HERE\n.CVT02   ANOP\n*\nCVTTCBP  DC    V(IEATCBP) -  ADDR OF NEXT AND CURRENT TCB POINTER LIST\nCVT0EF00 DC    V(IEA0EF00) - ADDR OF ROUTINE TO SCHEDULE\n*                              ASYNCHRONOUS EXITS\nCVTLINK  DC    V(IEFLINK) -  ADDR OF SYS1.LINKLIB DCB\nCVTJOB   DC    V(IEFJOB) -   ADDR OF SYS1.JOBQE DCB\nCVTBUF   DC    A(0) -        ADDR OF BUFFER FOR RESIDENT\n*                              CONSOLE INTERRUPTION ROUTINE\nCVTXAPG  DC    V(IECXAPG) -  ADDR OF IOS APPENDAGE VECTOR TABLE\nCVT0VL00 DC    V(IEA0VL00) - ENTRY POINT ADDR OF ADDR VALIDITY CHECKING\n*                              ROUTINE FOR SUPERVISOR\nCVTPCNVT DC    V(IECPCNVT) - ENTRY POINT ADDR OF ROUTINE FOR CONVERTING\n*                              RELATIVE TRACK ADDR TO ABSOLUTE\nCVTPRLTV DC    V(IECPRLTV) - ENTRY POINT ADDR OF ROUTINE FOR CONVERTING\n*                              ABSOLUTE TRACK ADDR TO RELATIVE\nCVTILK1  DC    V(IECILK1) -  ADDR OF CHANNEL AND CONTROL UNIT SECTION\n*                              IN UCB LOOKUP TABLE\nCVTILK2  DC    V(IECILK2) -  ADDR OF UCB HALFWORD ADDR LIST SECTION\n*                              IN UCB LOOKUP TABLE\nCVTXTLER DC    V(IECXTLER) - ENTRY POINT ADDR TO XCTL ROUTINE\n*                              FOR SYSTEM ERROR TRANSIENT AREA ROUTINES\nCVTSYSAD DC    A(0) -        ADDR OF SYSTEM RESIDENCE VOLUME ENTRY\n*                              IN UCB LOOKUP TABLE\nCVTBTERM DC    V(IEA0AB00) - ENTRY POINT ADDR OF ABTERM ROUTINE\nCVTDATE  DC    F'0' -        LOCAL DATE IN PACKED DECIMAL\nCVTMSLT  DC    V(IEEMSER) -  ADDR OF MASTER COMMON AREA\n*                              PLEASE USE CVTMSER INSTEAD TO ADDRESS\n*                              MASTER SCHEDULER RESIDENT DATA AREA\nCVTZDTAB DC    V(IECZDTAB) - ADDR OF I/O DEVICE CHARACTERISTIC TABLE\nCVTXITP  DC    V(IECXITP) -  ADDR OF ERROR INTERPRETER ROUTINE\nCVTDAR   DS    0A -          SAME AS CVTDARA BELOW               ICB370\nCVTFLGS1 DC    B'0' -        FLAG BYTE                           ICB370\nCVTDMPLK EQU   X'80' -       SVC DUMP IS IN PROGRESS             ICB370\nCVTRSV01 EQU   X'40',,C'X' - RESERVED\nCVTRSV02 EQU   X'20',,C'X' - RESERVED\nCVTRSV03 EQU   X'10',,C'X' - RESERVED\nCVTRSV04 EQU   X'08',,C'X' - RESERVED\nCVTRSV05 EQU   X'04',,C'X' - RESERVED\nCVTRSV06 EQU   X'02',,C'X' - RESERVED\nCVTRSV07 EQU   X'01',,C'X' - RESERVED\nCVTDARA  DC    AL3(0) -      ADDR OF SYS1.DUMP I/O CONTROL BLOCKS\n*                            FOR DAMAGE ASSESSMENT ROUTINES (AOS/1)\n*                            ADDRESS OF DCB FOR SYS1.DUMP DATA\n*                            SET  (AOS/2)                        ICB370\n.*\n.*             CVT0FN00: AOS/1, AOS/2\n.*\n         AIF   (&CVTAOS2).CVT21\nCVT0FN00 DC    V(IEA0FN00) - ENTRY POINT ADDR TO FINCH (AOS/1)\n         AGO   .CVT22\n.CVT21   ANOP\nCVT0FN00 DC    A(0) -        RESERVED (AOS/2)\n.CVT22   ANOP\n.*\nCVTEXIT  SVC   3 -           EXIT TO DISPATCHER\nCVTBRET  BR    14 -          RETURN TO CALLER\nCVTSVDCB DC    V(IEASVDCB) - ADDR OF SYS1.SVCLIB DCB\nCVTTPC   DC    V(IEATPC) -   ADDR OF TIMER SUPERVISOR WORK AREA\nCVTPBLDL DC    V(IECPBLDL) - BALR ENTRY POINT ADDR OF BLDL\n.*\n.*             CVTSJQ: AOS/1, AOS/2\n.*\n         AIF   (&CVTAOS2).CVT41\nCVTSJQ   DC    V(IEESJQ) -   ADDR OF SELECTED JOB QUEUE (AOS/1)\n         AGO   .CVT42\n.CVT41   ANOP\nCVTSJQ   DC    A(0) -        RESERVED (AOS/2)\n.CVT42   ANOP\n.*\nCVTCUCB  DC    V(IEECUCB) -  ADDR OF TABLE CONTAINING CONSOLE UCB ADDR\n.*\n.*             CVTQTE00, CVTQTD00: INTERVAL TIMING, NONE\n.*\n         AIF   ('&OPTIONS(2)' EQ 'INTERVAL').CVT51\nCVTQTE00 DC    A(0) -        RESERVED (NO INTERVAL TIMER)\nCVTQTD00 DC    A(0) -        RESERVED (NO INTERVAL TIMER)\n         AGO   .CVT52\n.CVT51   ANOP\nCVTQTE00 DC    V(IEAQTE00) - ADDR OF TIMER ENQUEUE ROUTINE\n*                              FOR INTERVAL TIMER\nCVTQTD00 DC    V(IEAQTD00) - ADDR OF TIMER DEQUEUE ROUTINE\n*                              FOR INTERVAL TIMER\n.CVT52   ANOP\n.*\nCVTSTB   DC    V(IECSTB) -   ADDR OF I/O DEVICE STATISTIC TABLE\n.*\n.*             CVTDCB, CVTDCBA: AOS/1, AOS/2\n.*\n         AIF   (NOT &CVTAOS1).CVT62\nCVTDCB   DC    XL1'22' -     OPERATING SYSTEM\nCVTRSV08 EQU   X'80',,C'X' - RESERVED\nCVT1SSS  EQU   X'40' -       OPTION 1 (PCP) SSS\nCVT2SPS  EQU   X'20' -       OPTION 2 (MFT) SPS, AOS/1\nCVT4MS1  EQU   X'10' -       OPTION 4 (MVT) MS1, AOS/2\nCVTRSV09 EQU   X'08',,C'X' - RESERVED\nCVT4MPS  EQU   X'04' -       MODEL 65 MULTIPROCESSING\nCVT6DAT  EQU   X'02' -       DYNAMIC ADDRESS TRANSLATION BY CPU\n*                            (AOS/1, AOS/2)\nCVTRSV10 EQU   X'01',,C'X' - RESERVED\nCVTDCBA  DC    VL3(IFBDCB) - ADDR OF DCB FOR SER SYS1.LOGREC\n         AGO   .CVT64\n.CVT62   ANOP\nCVTDCB   DC    XL1'12' -     OPERATING SYSTEM\nCVTRSV08 EQU   X'80',,C'X' - RESERVED\nCVT1SSS  EQU   X'40' -       OPTION 1 (PCP) SSS\nCVT2SPS  EQU   X'20' -       OPTION 2 (MFT) SPS, AOS/1\nCVT4MS1  EQU   X'10' -       OPTION 4 (MVT) MS1, AOS/2\nCVTRSV09 EQU   X'08',,C'X' - RESERVED\nCVT4MPS  EQU   X'04' -       MODEL 65 MULTIPROCESSING\nCVT6DAT  EQU   X'02' -       DYNAMIC ADDRESS TRANSLATION BY CPU\n*                            (AOS/1, AOS/2)\nCVTRSV10 EQU   X'01',,C'X' - RESERVED\nCVT8AOS2 EQU   CVT4MS1+CVT6DAT - AOS/2 SYSTEM\nCVTDCBA  DC    VL3(IFBDCB) - ADDR OF DCB FOR SER SYS1.LOGREC\n.CVT64   ANOP\n.*\nCVTIOQET DC    V(IECIOQET) - ADDR OF I/O QUEUE ELEMENT TABLE\nCVTIXAVL DC    V(IECIXAVL) - ADDR OF I/O SUPERVISOR FREELIST POINTER\nCVTNUCB  DC    A(0) -        LOWEST ADDRESS NOT IN NUCLEUS. ON PAGE BDY\nCVTFBOSV DC    V(IEWFBOSV) - ADDR OF PROGRAM FETCH ROUTINE\nCVT0DS   DC    V(IEA0DS) -   ENTRY POINT ADDR OF DISPATCHER\nCVTILCH  DC    V(IECILCH) -  ADDR OF LOGICAL CHANNEL WORD TABLE\nCVTIERLC DC    V(IECIERLC) - ADDR OF ASYNCHRONOUS EXIT QUEUE\nCVTMSER  DC    V(IEEMSER) -  ADDR OF MASTER SCHEDULER RESIDENT\n*                              DATA AREA\nCVT0PT01 DC    V(IEA0PT01) - BRANCH ENTRY POINT ADDR OF POST ROUTINE\nCVTRSV11 DS    A -           ** CVTTRMTB FIELD UNUSED IN AOS **\nCVTHEAD  DC    V(IEAHEAD) -  ADDR OF FIRST TCB ON READY QUEUE\n         AIF   (&CVTAOS2).CVT72\nCVTMZ00  DC    A(0) -        HIGHEST ADDRESS IN VIRTUAL STORAGE\n         AGO   .CVT73\n.CVT72   ANOP\nCVTMZ00  DC    X'00FFFFFF' - HIGHEST ADDRESS IN VIRTUAL STORAGE\n.CVT73   ANOP\nCVT1EF00 DC    A(0) -        ADDRESS OF ROUTINE WHICH CREATES IRB'S\n*                            FOR EXITS\n         AIF   (NOT &CVTAOS1).CVT83\nCVTQOCR  DC    V(IEAQOCR) -  ADDR OF SEVENTH GFX PARM LIST WORD\n*                              (0 IF GFX INACTIVE) AOS/1\n         AGO   .CVT84\n.CVT83   ANOP\nCVTQOCR  DC    A(0) -        ADDR OF SEVENTH GFX PARM LIST WORD\n*                              (0 IF GFX INACTIVE) AOS/2\n.CVT84   ANOP\nCVTQMWR  DC    V(IEFQMWR) -  ADDR OF QMGR COMMUNICATION DATA AREA\nCVTSNCTR DC    H'0' -        SERIAL DATA SET SEQUENCE NUMBER COUNTER\nCVTOPTA  DC    AL1(&FLAG) -  MISCELLANEOUS FLAGS\nCVTCCH   EQU   X'80' -       CCH OPTION PRESENT                PTM 4686\nCVTAPR   EQU   X'40' -       AUTOMATIC PATH RETRY --\n*                              I/O RECOVERY MANAGEMENT\nCVTDDR   EQU   X'20' -       DYNAMIC DEVICE RECONFIGURATION --\n*                              I/O RECOVERY MANAGEMENT         PTM 4686\nCVTNIP   EQU   X'10' -       NIP RUNNING\nCVTRSV12 EQU   X'08',,C'X' - RESERVED\nCVTRSV13 EQU   X'04',,C'X' - RESERVED\nCVTASCII EQU   X'02' -       USAS(CI)I OPTION PRESENT\nCVTXPFP  EQU   X'01' -       CPU HAS EXTENDED PRECISION FLOATING POINT\nCVTOPTB  DC    AL1(&FLAGB) - MISCELLANEOUS FLAGS\nCVTPROT  EQU   X'80' -       STORE PROTECTION SYSGENED (AOS/1)\nCVTRSV14 EQU   X'40',,C'X' - RESERVED\nCVTTOD   EQU   X'20' -       CPU HAS TIME OF DAY CLOCK\nCVTNLOG  EQU   X'10' -       SYS1.LOGREC UNAVAILABLE FOR ERROR\n*                            RECORDING                           ICB382\nCVTAPTHR EQU   X'08' -       NIP SETS TO 1 WHEN DEVICE TESTING IS\n*                            COMPLETE.  IF 1, IOS WILL USE AN ALTERNATE\n*                            PATH TO A DEVICE ON CONDITION CODE 3.\n*                            THIS IS RESET BY NIP WHEN THE LPA IS\n*                            INITIALIZED.                        YM2670\nCVTFP    EQU   X'04' -       FETCH PROTECT IS ACTIVE (AOS/1)     ICB427\nCVTRSV16 EQU   X'02',,C'X' - RESERVED\nCVTRSV17 EQU   X'01',,C'X' - RESERVED\n.*\n.*             CVTQCDSR, CVTQLPAQ: AOS/1, AOS/2\n.*\n         AIF   (&CVTAOS1).CVT91\nCVTQCDSR DC    V(IEAQCDSR) - CDE SEARCH ROUTINE ADDR\nCVTQLPAQ DC    V(IEAQLPAQ) - ADDRESS OF POINTER TO MOST RECENT ENTRY\n*                            ON LPA CDE QUEUE\n         AGO   .CVT92\n.CVT91   ANOP\nCVTQCDSR DC    A(0) -        CDE SEARCH ROUTINE ADDR\nCVTQLPAQ DC    A(0) -        ADDRESS OF POINTER TO MOST RECENT ENTRY\n*                            ON LPA CDE QUEUE\n.CVT92   ANOP\nCVTRSV18 DC    A(0) -        ** CVTMPCVT FIELD UNUSED IN AOS **\nCVTSMCA  DC    A(0) -        ADDR OF SYSTEM MGT CONTROL AREA\n.*\n.*             CVTABEND: AOS/1, AOS/2\n.*\n         AIF   (NOT &CVTAOS2).CVTB1\nCVTABEND DC    V(IEABEND) -  ADDR OF SECONDARY CVT FOR ABEND IN EOT\n*                            (AOS/2)\n         AGO   .CVTB2\n.CVTB1   ANOP\nCVTABEND DC    A(0) -        USED BY AN INTERNAL ABEND TRACE ROUTINE\n*                            FOR DEBUG PURPOSES (OS/VS1)         XM0615\n.CVTB2   ANOP\n.*\nCVTUSER  DC    A(0) -        A WORD TO THE USER\nCVTMDLDS DC    A(0) -        RESERVED FOR MODEL-DEPENDENT SUPPORT\nCVTQABST SVC   13 -          AN ABEND INSTRUCTION (AOS/2)\nCVTLNKSC SVC   6 -           A LINK INSTRUCTION                  ICB369\n.*\n.*             CVTTSCE: TIME SLICING, NONE\n.*\n         AIF   (&CVTAOS2).CVTC1\n         AIF   ('&OPTIONS(1)' NE 'TSLICE').CVTC1\nCVTTSCE  DC    V(IEATSCE) -  ADDR OF FIRST TIME SLICE CONTROL ELEMENT\n         AGO   .CVTC2\n.CVTC1   ANOP\nCVTTSCE  DC    A(0) -        ADDR OF FIRST TIME SLICE CONTROL ELEMENT\n.CVTC2   ANOP\n.*\n.*             CVTPATCH: PATCH AREA, NONE\n.*\n         AIF   (&CVTAOS2).CVTC5\n         AIF   ('&PATCH' NE 'YES').CVTC3\n.CVTC5   ANOP\nCVTPATCH DC    V(IEAPATCH) - ADDR OF FE PATCH AREA\n         AGO   .CVTC4\n.CVTC3   ANOP\nCVTPATCH DC    A(0) -        ADDR OF FE PATCH AREA\n.CVTC4   ANOP\n.*\nCVTRMS   DC    V(IGFRVT) -   ADDR OF RMS VECTOR TABLE\nCVTTSCVT DS    0A -          ADDR OF TIME SHARING CVT (TSO)\nCVTTSFLG DC    B'0' -        TIME SHARING FLAGS (TSO)\nCVTTSRDY EQU   X'80' -       TIME SHARING READY\nCVTRSV19 EQU   X'40',,C'X' - RESERVED\nCVTRSV20 EQU   X'20',,C'X' - RESERVED\nCVTRSV21 EQU   X'10',,C'X' - RESERVED\nCVTRSV22 EQU   X'08',,C'X' - RESERVED\nCVTRSV23 EQU   X'04',,C'X' - RESERVED\nCVTRSV24 EQU   X'02',,C'X' - RESERVED\nCVTRSV25 EQU   X'01',,C'X' - RESERVED\nCVTTSCVB DC    AL3(0) -      ADDR OF TIME SHARING CVT (TSO)\n         AIF   ('&RPS' EQ 'NO').CVTC6\nCVT0SCR1 DC    V(IEC0SCR1) - ADDR OF RPS SECTOR CONVERTER\n         AGO   .CVTC7\n.CVTC6   ANOP\nCVT0SCR1 DC    A(0) -        ADDR OF RPS SECTOR CONVERTER\n.CVTC7   ANOP\nCVTGTF   DS    0A -          GTF CONTROL WORD                    ICB312\nCVTGTFST DC    AL1(0) -      GTF FLAG BYTES                      ICB312\nCVTGTFS  EQU   X'C0' -       GTF STATUS                          ICB312\nCVTGTFIN EQU   X'00' -       GTF NOT ACTIVE                      ICB312\nCVTGTFSP EQU   X'80' -       GTF STOPPING                        ICB312\nCVTGTFSR EQU   X'40' -       GTF STARTING                        ICB312\nCVTGTFAC EQU   X'C0' -       GTF ACTIVE                          ICB312\nCVTSTATE EQU   X'20' -       GTF IN CONTROL PROCESSING A HOOK    ICB312\nCVTTMODE EQU   X'10' -       IF 0 - MODE=INT\n*                            IF 1 - MODE=EXT                     ICB312\nCVTFORM  EQU   X'08' -       FORMAT TRACE TABLE AT ABEND         ICB312\nCVTUSR   EQU   X'04' -       TRACE=USR SPECIFIED                 ICB312\nCVTRSV26 EQU   X'02',,C'X' - RESERVED\nCVTRSV27 EQU   X'01',,C'X' - RESERVED\n         AIF   (&CVTAOS2).CVTG1\nCVTGTFA  DC    VL3(HHLHCTQ) -ADDRESS OF MONITOR CALL VECTOR\n*                            TABLE                             PTM 2828\n         AGO   .CVTG2\n.CVTG1   ANOP\nCVTGTFA  DC    VL3(AHLHCTQ) -ADDRESS OF MONITOR CALL VECTOR\n*                            TABLE                               ICB458\n.CVTG2   ANOP\nCVTAQAVT DS    0A -          PTR TO WORD CONTAINING ADDR OF\n*                            TCAM ADDRESS VECTOR TABLE\nCVTTCMFG DC    X'00' -       TCAM FLAGS\nCVTTCRDY EQU   X'80' -       TCAM RUNNING (AOS/2)\nCVTRSV28 EQU   X'40',,C'X' - RESERVED\nCVTRSV29 EQU   X'20',,C'X' - RESERVED\nCVTRSV30 EQU   X'10',,C'X' - RESERVED\nCVTRSV31 EQU   X'08',,C'X' - RESERVED\nCVTRSV32 EQU   X'04',,C'X' - RESERVED\nCVTRSV33 EQU   X'02',,C'X' - RESERVED\nCVTRSV34 EQU   X'01',,C'X' - RESERVED\nCVTAQAVB DC    AL3(0) -      SAME AS CVTAQVT ABOVE\nCVTTATA  DS    0A -          ADDR OF TCB ADDR TAB (P0 TCB POINTER)\nCVTTSKS  DC    FL1'0' -      MAXIMAL NUMBER OF TCB ADDR TAB ENTRIES\nCVTTAT   DC    AL3(0) -      ADDR OF TCB ADDR TAB (P0 TCB POINTER)\n         AIF   (NOT &CVTAOS1).CVTP1\nCVTATER  DS    0A -          SAME AS CVTATERA BELOW              ICB346\n.CVTP1   ANOP\n.*\n.*             CVTSYST: OPTIONS(3)\n.*\n         AIF   ('&OPTIONS(3)' EQ '').CVT85\nCVTSYST  DC    AL1(&OPTIONS(3)) NUMBER OF SYSGENED TCB ADDR TAB ENTRIES\n         AGO   .CVT86\n.CVT85   ANOP\nCVTSYST  DC    FL1'0' -       NUMBER OF SYSGENED TCB ADDR TAB ENTRIES\n.CVT86   ANOP\n.*\n         AIF   (NOT &CVTAOS1).CVTP2\nCVTATERA DC    VL3(IEASETCB) ADDRESS OF SYSTEM ERROR TCB         ICB346\n         AGO   .CVTP3\n.CVTP2   ANOP\n         DC    AL3(0) -      RESERVED\n.CVTP3   ANOP\nCVTEXT1  DC    A(CVTXTNT1) - ADDRESS OF OS-AOS COMMON EXTENSION  ICB421\nCVTCBSP  DC    A(0) -        ADDRESS OF ACCESS METHOD CONTROL BLOCK\n*                            STRUCTURE.  IF ZERO, IT INDICATES THAT\n*                            THE ACCESS METHOD MASTER CATALOG IS NOT\n*                            OPEN'ED AND AVAILABLE               ICB436\nCVTPURG  DS    0A -          POINTER TO SUBSYSTEM PURGE ROUTINE  ICB330\nCVTRSV35 DS    XL1 -         RESERVED                            ICB330\nCVTPURGA DC    AL3(0) -      ADDRESS OF SUBSYSTEM PURGE ROUTINE  ICB330\nCVTAMFF  DC    XL4'00' -     RESERVED FOR ACCESS METHOD FLAGS    ICB436\nCVTQMSG  DS    0A -          POINTER TO INFORMATION TO BE PRINTED\n*                            BY ABEND                            ICB307\nCVTRSV36 DS    XL1 -         RESERVED                            ICB307\nCVTQMSGA DC    VL3(IEAQMSGS) ADDRESS OF INFORMATION TO BE PRINTED\n*                            BY ABEND                            ICB449\nCVTDMSR  DS    0A -          SAME AS CVTDMSRA BELOW              ICB346\nCVTRSV37 DS    X -           RESERVED                            ICB346\n         AIF   (&CVTAOS2).CVTP4\nCVTDMSRA DC    VL3(IFG019RA) ADDRESS OF OPEN/CLOSE/EOV SUPERVISORY\n*                            ROUTINE                             ICB346\n         AGO   .CVTP5\n.CVTP4   ANOP\nCVTDMSRA DC    AL3(0) -      ADDRESS OF OPEN/CLOSE/EOV SUPERVISORY\n*                            ROUTINE                             YM2707\n.CVTP5   ANOP\nCVTRSV38 DS    F -           RESERVED\nCVTRSV39 DS    F -           RESERVED\n*\n*              AOS/1 - AOS/2 COMMON SECTION\n*\nCVTREAL  DC    A(&REAL) -    ADDRESS OF THE VIRTUAL STORAGE BYTE\n*                            FOLLOWING THE HIGHEST VIRTUAL=REAL\n*                            STORAGE ADDRESS                     ICB368\nCVTPTRV  DC    V(IEAPTRV) -  ADDRESS OF PAGING SUPERVISOR GENERAL\n*                            ROUTINE TO TRANSLATE REAL ADDRESSES TO\n*                            VIRTUAL\nCVTMODE  DC    V(IEAMODBR) - ADDRESS OF ROUTINE TO CHANGE SYSTEM MASK\n         AIF   (&CVTAOS2).CVTJ1\nCVTJESCT DS    A -           ADDRESS OF JES CONTROL TABLE\nCVTJEPS  DC    V(IEAJPTCB) - ADDRESS OF JEPS MONITOR TCB (OS/VS1)YM2702\n         AGO   .CVTJ2\n.CVTJ1   ANOP\nCVTJESCT DC    V(IEFJESCT) - ADDRESS OF JES CONTROL TABLE        ICB342\n         DS    A -           RESERVED (WAS CVTJEPS) (OS/VS2)     YM2702\n.CVTJ2   ANOP\nCVTTZ    DC    F'&CVTTZ' -   DIFFERENCE BETWEEN LOCAL TIME AND\n*                            GREENWICH MEAN TIME\n*                            (BIT 31 = 1.048576 SEC)\nCVTMCHPR DS    A -           ADDRESS OF MACHINE CHECK PARAMETER LIST\nCVTEORM  DS    A -           HIGHEST REAL ADDRESS IN MAIN STORAGE\nCVTERPV  DC    V(IEAERPV) -  POINTER TO SUBROUTINE IN IOS TO CONVERT\n*                            CCW DATA ADDRESSES TO VIRTUAL\n*                            ADDRESSES                           ICB367\n         AIF   (&CVTAOS2).CVTJ3\n         AIF   ('&LOADBAL' EQ 'YES').CVTJ3\nCVTINTLA DC    A(0) -        ADDRESS OF AREA CONTAINING INTERVAL LENGTH\n*                            AT WHICH I/O LOAD BALANCING EXCP COUNTS\n*                            AND RATES ARE COMPUTED              XM0277\n         AGO   .CVTJ4\n.CVTJ3   ANOP\nCVTINTLA DC    V(IEAEXINT) - ADDRESS OF AREA CONTAINING INTERVAL LENGTH\n*                            AT WHICH I/O LOAD BALANCING EXCP COUNTS\n*                            AND RATES ARE COMPUTED              ICB341\n.CVTJ4   ANOP\nCVTAPF   DS    0A -          SAME AS CVTAPFA BELOW               ICB360\nCVTRSV40 DS    X -           RESERVED                            ICB360\nCVTAPFA  DC    VL3(IEAVTEST) ADDRESS OF BRANCH ENTRY POINT IN APF\n*                            ROUTINE\nCVTEXT2  DS    0A -          ADDRESS OF AOS/1 - AOS/2 COMMON\n*                            EXTENSION                           ICB330\nCVTRSV41 DS    XL1 -         RESERVED                            ICB330\nCVTEXT2A DC    AL3(CVTXTNT2) SAME AS CVTEXT2 ABOVE               ICB330\nCVTHJES  DS    0A -          SAME AS CVTHJESA BELOW              ICB454\nCVTRSV42 DS    X -           RESERVED                            ICB454\nCVTHJESA DC    AL3(0) -      ADDRESS OF OPTIONAL JOB ENTRY SYSTEM\n*                            COMMUNICATION VECTOR TABLE          ICB454\nCVTRSV43 DS    H -           RESERVED\nCVTRSV44 DS    H -           RESERVED\nCVTRSV45 DS    F -           RESERVED\nCVTRSV46 DS    F -           RESERVED\n         AIF   (&CVTAOS2).CVTV2\n*\n*              AOS/1 OVERLAY\n*\nCVTPGSIA DC    V(IHAPGSIA) - ADDRESS OF PAGING SUPERVISOR INFORMATION\n*                            AREA\nCVTPCVT  DC    V(IEAPCVT) -  ADDRESS OF PAGED CVT EXTENSION\nCVTA1F1  DS    B -           PAGE FAULT FLAGS\nCVTPFSW  EQU   X'80' -       ONLY PAGING TASK MAY BE DISPATCHED\nCVTSRSW  EQU   X'40' -       NO TASK EXCEPT PAGING TASK MAY EXECUTE\n*                            DISABLED CODE\nCVTRSV47 EQU   X'20',,C'X' - RESERVED\nCVTRSV48 EQU   X'10',,C'X' - RESERVED\nCVTRSV49 EQU   X'08',,C'X' - RESERVED\nCVTRSV50 EQU   X'04',,C'X' - RESERVED\nCVTRSV51 EQU   X'02',,C'X' - RESERVED\nCVTRSV52 EQU   X'01',,C'X' - RESERVED\nCVTSYSK  DS    B -           SYSTEM LOCK.  IF NOT ZERO, ONLY PAGING\n*                            TASK MAY BE DISPATCHED\nCVTRSV53 EQU   X'80',,C'X' - RESERVED\nCVTRSV54 EQU   X'40',,C'X' - RESERVED\nCVTRSV55 EQU   X'20',,C'X' - RESERVED\nCVTRSV56 EQU   X'10',,C'X' - RESERVED\nCVTSLKR  EQU   X'08' -       MACHINE CHECK HANDLING IS IN\n*                            PROGRESS                            ICB320\nCVTSLKQ  EQU   X'04' -       SQA EXHAUSTED\nCVTSLKP  EQU   X'02' -       LAST PCB USED\nCVTSLKO  EQU   X'01' -       A DISABLED ROUTINE HAS PRODUCED A PAGE\n*                            FAULT\nCVTSULK  DS    H -           SUPERVISOR LOCK.  NUMBER OF TASKS\n*                            ATTEMPTING TO EXECUTE DISABLED CODE.  IF\n*                            NOT ZERO, ONLY ENABLED TASKS MAY RUN.\nCVTSMF   DC    V(SMFTCBIT) - ADDRESS OF SMF TCB                  ICB395\nCVTPNWFR DC    V(IEAFNPAN) - ADDRESS OF ROUTINE WHICH FREES THE\n*                            'EMERGENCY' WORK AREA (ICB413)    PTM 2452\nCVTDDCE  DC    V(IEADDCE) -  ADDRESS OF DYNAMIC DISPATCHER CONTROL\n*                            ELEMENT                             ICB466\nCVTRSV57 DS    H -           RESERVED\nCVTRSV58 DS    H -           RESERVED\nCVTSTOA  DS    F -           SAVE AREA FOR THE REAL STORAGE ADDRESS OF\n*                            THE SEGMENT TABLE ORIGIN            ICB496\nCVTRSV60 DS    F -           RESERVED\nCVTRSV61 DS    F -           RESERVED\nCVTRSV62 DS    F -           RESERVED\n         AGO   .CVTV4\n.CVTV2   ANOP\n*\n*              AOS/2 OVERLAY\n*\nCVTRSVA2 DS    A -           RESERVED                            ICB339\nCVTLPDSR DC    V(IEAVVMSR) - ADDRESS OF LPA DIRECTORY SEARCH ROUTINE\nCVTPVTP  DC    V(CSECPVT) -  ADDRESS OF PAGE VECTOR TABLE\nCVTLPDIA DS    0A -          ADDRESS OF LPA DIRECTORY.  ON PAGE BDY\nCVTDIRST DS    B -           FLAG BYTE\nCVTDICOM EQU   X'80' -       LPA DIRECTORY HAS BEEN INITIALIZED BY NIP\nCVTRSV63 EQU   X'40',,C'X' - RESERVED\nCVTRSV64 EQU   X'20',,C'X' - RESERVED\nCVTRSV65 EQU   X'10',,C'X' - RESERVED\nCVTRSV66 EQU   X'08',,C'X' - RESERVED\nCVTRSV67 EQU   X'04',,C'X' - RESERVED\nCVTRSV68 EQU   X'02',,C'X' - RESERVED\nCVTRSV69 EQU   X'01',,C'X' - RESERVED\nCVTLPDIR DS    AL3 -         ADDRESS OF LPA DIRECTORY.  ON PAGE BDY\nCVTPAGE1 DS    A -           ADDRESS OF DCB FOR PRIMARY PAGING DATA SET\nCVTPGSUP DC    V(IHAPGTCB) - ADDRESS OF TCB FOR PAGING SUPERVISOR\nCVTSLIDA DS    0CL4 -        IDENTITY OF TCB CAUSING SUPERVISOR LOCK\n*                            BYTE (CVTSYLK) TO BE SET OR IDENTITY OF\n*                            TCB THAT SECOND EXIT PROCESSING IS FOR\n*                            WHEN CVTSEIC=1\nCVTSYLK  DS    C -           SUPERVISOR LOCK.  ONLY ENABLED TASKS MAY\n*                            BE DISPATCHED\nCVTSYLKS EQU   X'FF' -       SET LOCK BYTE\nCVTSYLKR EQU   X'00' -       RESET LOCK BYTE\nCVTSLID  DS    CL3 -         SAME AS CVTSLIDA ABOVE\nCVTSER   DS    0A -          SAME AS CVTSERA BELOW\nCVTSEFLG DS    B -           SECOND EXIT FLAGS\nCVTSEIC  EQU   X'80' -       INDICATES THAT PAGING SUPERVISOR HAS\n*                            BRANCHED TO A SECOND EXIT ROUTINE\nCVTRSV70 EQU   X'40',,C'X' - RESERVED\nCVTRSV71 EQU   X'20',,C'X' - RESERVED\nCVTRSV72 EQU   X'10',,C'X' - RESERVED\nCVTRSV73 EQU   X'08',,C'X' - RESERVED\nCVTRSV74 EQU   X'04',,C'X' - RESERVED\nCVTRSV75 EQU   X'02',,C'X' - RESERVED\nCVTRSV76 EQU   X'01',,C'X' - RESERVED\nCVTSERA  DS    AL3 -         SECOND EXIT ROUTINE ADDRESS THAT WILL BE\n*                            BRANCHED TO BY ABTERM PROLOGUE SHOULD\n*                            THE SECOND EXIT ROUTINE PROGRAM CHECK\nCVTSEG   DS    0CL16 -       SEGMENT TABLE INFORMATION\nCVTSEGA  DS    A -           VIRTUAL ADDRESS OF USER SEGMENT TABLE\nCVTSEGB  DS    A -           VIRTUAL ADDRESS OF SYSTEM SEGMENT TABLE\nCVTSEGC  DS    0A -          REAL ADDRESS OF USER SEGMENT TABLE\nCVTSEGLC DC    X'10' -       LENGTH IN 64-BYTE UNITS OF USER SEGMENT\n*                            TABLE\nCVTSEGCA DS    AL3 -         REAL ADDRESS OF USER SEGMENT TABLE\nCVTSEGD  DS    0A -          REAL ADDRESS OF SYSTEM SEGMENT TABLE\nCVTSEGLD DS    FL1 -         LENGTH IN 64-BYTE UNITS OF SYSTEM SEGMENT\n*                            TABLE\nCVTSEGDA DS    AL3 -         REAL ADDRESS OF SYSTEM SEGMENT TABLE\nCVTRSV77 DS    X -           RESERVED\nCVTSPVLK DS    FL1 -         NUMBER OF TASKS WHICH HAVE TERMINATED\n*                            WHILE OWNING SUPERVISOR LOCK WITHOUT\n*                            OPERATOR HAVING YET BEEN NOTIFIED\nCVTCTLFG DC    AL1(&CTLFLGS) SYSTEM CONTROL FLAGS\nCVTPSIC  EQU   X'80' -       PAGING SUPERVISOR IN CONTROL\nCVTAPGB  EQU   X'40' -       APG IS ACTIVE                       ICB339\nCVTT1DSP EQU   X'20' -       DISABLED PAGE FAULT OCCURRED DURING\n*                            TYPE 1 SVC                         YA01802\nCVTDSTAT EQU   X'10' -       DEVSTAT OPTION IN EFFECT.  DEVICE ADDRESS\n*                            FOR 2319-3330-2314 CAN VARY ACROSS SYSTEMS\nCVTRSV79 EQU   X'08',,C'X' - RESERVED\nCVTRSV80 EQU   X'04',,C'X' - RESERVED\nCVTGTRCE EQU   X'02' -       GTF HAS SUPPRESSED SUPERVISOR TRACE ICB446\nCVTSDTRC EQU   X'01' -       SVC DUMP HAS SUPPRESSED SUPERVISOR TRACE\n*                                                                ICB446\nCVTAPG   DS    FL1 -         DISPATCHING PRIORITY OF APG.        ICB339\nCVTTRACE BR    11 -          BRANCH ON REGISTER INSTRUCTION.  SET BY\n*                            NIP.  REGISTER TEN FOR TRACE.  REGISTER\n*                            ELEVEN FOR NO TRACE\nCVTTRAC2 BR    11 -          THIS ALLOWS FOR SUPPRESSING TRACE\n*                            DYNAMICALLY BY SETTING CONDITION CODE\n*                            MASK TO ZERO IN FIRST INSTRUCTION\n*                            (CVTTRACE)\nCVTRSCN  DC    V(IEATRSCN) - ADDRESS OF ROUTINE TO SCAN TCB TREE\nCVTTAS   DC    A(0) -        ADDRESS OF ROUTINE TO TRANSFER ADDRESS\n*                            SPACE                               YM2706\nCVTPVALD DC    V(IEA0VL02) - ADDRESS OF ROUTINE TO CHECK ADDRESSES AS\n*                            BEING IN A REGION\nCVTSHRVM DS    A -           LOWEST ADDRESS OF SHARED VIRTUAL STORAGE\n*                            AREA.  THIS ADDRESS WILL BE EITHER THE\n*                            BEGINNING OF LPA DIRECTORY OR THE\n*                            BEGINNING OF LPA UPDATE AREA IF 'MLPA'\n*                            OPTION WAS USED AT SUPERVISOR\n*                            INITIALIZATION\nCVT0VL01 DC    V(IEA0VL01) - ENTRY POINT ADDRESS OF VALIDITY CHECK\n*                            ROUTINE (IEA0VL01) USED TO COMPARE\n*                            PROTECT KEY OF AN ADDRESS WITH TCB\n*                            PROTECT KEY\nCVTPFIXQ DC    V(IEAPFIXQ) - BRANCH ENTRY TO IEAPFIXQ, THE FIX-QUIESCE\n*                            ROUTINE USED BY TSO BEFORE SWAP TO FREE\n*                            ALL SVC FIXES                       ICB412\nCVTPFIXR DC    V(IEAPFIXR) - BRANCH ENTRY TO IEAPFIXR, THE FIX-RESTORE\n*                            ROUTINE USED BY TSO AFTER SWAP (INVERSE OF\n*                            FIX-QUIESCE)                        ICB412\nCVTPFIXP DC    V(IEAPFIXP) - BRANCH ENTRY TO IEAPFIXP, THE FIX-PURGE\n*                            ROUTINE USED BY STAE, ABEND, ETC., TO GET\n*                            RID OF OUTSTANDING FIX REQUESTS     ICB412\nCVTPTCD  DC    V(IEAPTCD) -  BRANCH ENTRY TO IEAPTCD, THE PAGE-TABLE-\n*                            CREATE-DESTROY ROUTINE USED BY TSO\n*                            LOGOFF IN DOING A PSEUDO-FREEPART   ICB412\nCVTSYSWT DC    V(SYSWSAVE) - ADDRESS OF THE SMF SYSTEM WAIT TIME\n*                            COLLECTION AREA                     ICB469\nCVTRSV81 DS    H -           RESERVED\nCVTRSV82 DS    H -           RESERVED\nCVTRSV83 DS    F -           RESERVED\nCVTRSV84 DS    F -           RESERVED\nCVTRSV85 DS    F -           RESERVED\nCVTRSV86 DS    F -           RESERVED\n.CVTV4   ANOP\n*\n*              OS - AOS COMMON EXTENSION\n*              ADDRESS OF EXTENSION IS IN CVTEXT1\n*\n         AIF   ('&DSECT' EQ 'NO').CVTW1\nCVTXTNT1 DSECT\n         AGO   .CVTW2\n.CVTW1   ANOP\nCVTXTNT1 EQU   * -           START OF OS - AOS EXTENSION         ICB421\n.CVTW2   ANOP\nCVTFACHN DC    A(0) -        ADDRESS OF CHAIN OF DCB FIELD AREAS\n*                            (ISAM)                              ICB421\nCVTRSV87 DS    F -           RESERVED\nCVTRSV88 DS    F -           RESERVED\n*\n*              AOS/1 - AOS/2 COMMON EXTENSION\n*              ADDRESS OF EXTENSION IS IN CVTEXT2\n*\n         AIF   ('&DSECT' EQ 'NO').CVTW3\nCVTXTNT2 DSECT\n         AGO   .CVTW4\n.CVTW3   ANOP\nCVTXTNT2 EQU   * -           START OF AOS/1 - AOS/2 EXTENSION    ICB330\n.CVTW4   ANOP\nCVTDSSV  DS    0A -          ADDRESS OF THE DSS VECTOR TABLE     ICB313\nCVTRSV89 DS    XL1 -         RESERVED                            ICB313\nCVTDSSVA DC    VL3(IQADSV00) ADDRESS OF THE DSS VECTOR TABLE     ICB393\nCVTNUCLS DS    C -           USED TO IDENTIFY THE NUCLEUS MEMBER\n*                            NAME                                ICB322\nCVTRSV90 DS    B -           RESERVED\nCVTRSV9A EQU   X'80',,C'X' - RESERVED\nCVTRSV9B EQU   X'40',,C'X' - RESERVED\nCVTRSV9C EQU   X'20',,C'X' - RESERVED\nCVTRSV9D EQU   X'10',,C'X' - RESERVED\nCVTRSV9E EQU   X'08',,C'X' - RESERVED\nCVTRSV9F EQU   X'04',,C'X' - RESERVED\nCVTRSV9G EQU   X'02',,C'X' - RESERVED\nCVTRSV9H EQU   X'01',,C'X' - RESERVED\nCVTRSV91 DS    H -           RESERVED\nCVTDEBVR DC    V(IFGDEBVR) - ADDRESS OF BRANCH ENTRY POINT OF DEBCHK\n*                            VERIFY ROUTINE (ICB380)             XM9028\nCVTRSV92 DS    F -           RESERVED\nCVTRSV93 DS    F -           RESERVED\nCVTRSV94 DS    F -           RESERVED\nCVTQID   DS    0A -          SAME AS CVTQIDA BELOW               ICB381\nCVTRSV95 DC    XL1'00' -     RESERVED                            ICB381\nCVTQIDA  DC    AL3(0) -      ADDRESS OF QID TABLE PREFIX         ICB381\nCVTOLTEP DS    A -           POINTER TO CONTROL BLOCK CREATED BY SVC 59\n*                            TO POINT TO PSEUDO-DEB'S            ICB423\nCVTRSV96 DS    H -           RESERVED\nCVTRSV97 DS    H -           RESERVED\nCVTRSV98 DS    F -           RESERVED\nCVTRSV99 DS    F -           RESERVED\nCVTRSVA0 DS    F -           RESERVED\nCVTRSVA1 DS    F -           RESERVED\n*\n*              END OF CVT\n         POP   PRINT\n         MEND  , */\n* %CVTL2  :  ;\n*%IF IKEPLS=''  %THEN\n*    %GOTO CVTL3;\n*% DEACTIVATE PUSH,POP,OFF;\n*%IHALPUSH='@LIST PUSH';\n*%IHALPOP='@LIST POP';\n*%IHALOFF='@LIST OFF';\n*IHALPUSH;\n*%IF IHALIST='YES'  %THEN\n*    %GOTO CVTL3;\n*IHALOFF;\n*%CVTL3:;\n* /*                   CVT PROPER                                    */\n*\n* DECLARE\n*   1 CVTMAP   BASED(CVTPTR) BDY(WORD),\n*    2 CVTTCBP  PTR(31),             /* PTR TO ADDRESSES FOR NEXT\n*                                       AND CURRENT TCB              */\n*    2 CVT0EF00 PTR(31),             /* ADDR OF ROUTINE TO SCHEDULE\n*                                       ASYNCHRONOUS EXITS           */\n*    2 CVTLINK  PTR(31),             /* ADDR OF DCB FOR SYS1.LINKLIB */\n*    2 CVTJOB   PTR(31),             /* ADDR OF WORK QUEUE CONTROL\n*                                       BLOCKS                       */\n*    2 CVTBUF   PTR(31),             /* ADDR OF BUFFER FOR RESIDENT\n*                                       CONSOLE INTERRUPTION ROUTINE */\n*    2 CVTXAPG  PTR(31),             /* ADDR OF IOS APPENDAGE TABLE  */\n*    2 CVT0VL00 PTR(31),             /* ENTRY POINT ADDR OF ADDR\n*                                       VALIDITY CHECKING ROUTINE    */\n*    2 CVTPCNVT PTR(31),             /* ENTRY POINT ADDR OF ROUTINE\n*                                       FOR CONVERTING RELATIVE\n*                                       TRACK ADDR TO ABSOLUTE       */\n*    2 CVTPRLTV PTR(31),             /* ENTRY POINT ADDR OF ROUTINE\n*                                       FOR CONVERTING ABSOLUTE\n*                                       TRACK ADDR TO RELATIVE       */\n*    2 CVTILK1  PTR(31),             /* ADDR OF CHANNEL AND CONTROL\n*                                       UNIT SECTION IN UCB LOOKUP\n*                                       TABLE                        */\n*    2 CVTILK2  PTR(31),             /* ADDR OF UCB ADDR LIST\n*                                       SECTION IN UCB LOOKUP TABLE  */\n*    2 CVTXTLER PTR(31),             /* ENTRY POINT ADDR TO XCTL\n*                                       ROUTINE FOR SYSTEM ERROR\n*                                       ROUTINES                     */\n*    2 CVTSYSAD PTR(31),             /* ADDR OF SYSTEM RESIDENCE\n*                                       VOLUME ENTRY IN UCB TABLE    */\n*    2 CVTBTERM PTR(31),             /* ENTRY POINT ADDR OF ABTERM\n*                                       ROUTINE                      */\n*    2 CVTDATE  CHAR(4) BDY(WORD),   /* LOCAL DATE IN PACKED DECIMAL */\n*    2 CVTMSLT  PTR(31),             /* ADDR OF MASTER COMMON AREA\n*                                       PLEASE USE CVTMSER INSTEAD\n*                                       TO ADDRESS MASTER SCHEDULER\n*                                       RESIDENT DATA AREA           */\n*    2 CVTZDTAB PTR(31),             /* ADDR OF I/O DEVICE\n*                                       CHARACTERISTIC TABLE         */\n*    2 CVTXITP  PTR(31),             /* ADDR OF ERROR INTERPRETER\n*                                       ROUTINE                      */\n*    2 CVTDAR   PTR(31),             /* SAME AS CVTDARA BELOW  ICB370*/\n*     3 CVTFLGS1 BIT(8),             /* FLAG BYTE              ICB370*/\n*      4 CVTDMPLK BIT(1),            /* SVC DUMP IS IN PROGRESS\n*                                                              ICB370*/\n*      4 CVTRSV01 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV02 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV03 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV04 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV05 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV06 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV07 BIT(1),            /* RESERVED                     */\n*     3 CVTDARA  PTR(24),            /* ADDRESS OF SYS1.DUMP I/O\n*                                       CONTROL BLOCKS FOR DAMAGE\n*                                       ASSESSMENT ROUTINES  (AOS/1)\n*                                       ADDRESS OF DCB FOR SYS1.DUMP\n*                                       DATA SET  (AOS/2)      ICB370*/\n*    2 CVT0FN00 PTR(31),             /* ENTRY POINT ADDR TO FINCH    */\n*    2 CVTEXIT  CHAR(2) BDY(WORD),   /* AN SVC 3 INSTRUCTION         */\n*    2 CVTBRET  CHAR(2) BDY(WORD,3), /* A BCR 15,14 INSTRUCTION      */\n*    2 CVTSVDCB PTR(31),             /* ADDR OF DCB FOR SYS1.SVCLIB  */\n*    2 CVTTPC   PTR(31),             /* ADDR OF TIMER SUPERVISOR\n*                                       WORK AREA                    */\n*    2 CVTPBLDL PTR(31),             /* BRANCH AND LINK ENTRY POINT\n*                                       TO BLDL ROUTINE              */\n*    2 CVTSJQ   PTR(31),             /* ADDR OF SELECTED JOB QUEUE   */\n*    2 CVTCUCB  PTR(31),             /* ADDR OF TABLE WITH CONSOLE\n*                                       UCB ADDR                     */\n*    2 CVTQTE00 PTR(31),             /* ADDR OF TIMER ENQUEUE\n*                                       ROUTINE                      */\n*    2 CVTQTD00 PTR(31),             /* ADDR OF TIMER DEQUEUE\n*                                       ROUTINE                      */\n*    2 CVTSTB   PTR(31),             /* ADDR OF I/O DEVICE STATISTIC\n*                                       TABLE                        */\n*    2 CVTDCB   CHAR(1) BDY(WORD),   /* OPERATING SYSTEM\n*                                       CONFIGURATION                */\n*      4 CVTRSV08 BIT(1),            /* RESERVED                     */\n*      4 CVT1SSS  BIT(1),            /* - PCP                        */\n*      4 CVT2SPS  BIT(1),            /* - MFT, AOS/1                 */\n*      4 CVT4MS1  BIT(1),            /* - MVT, AOS/2                 */\n*      4 CVTRSV09 BIT(1),            /* RESERVED                     */\n*      4 CVT4MPS  BIT(1),            /* - MULTIPROCESSING            */\n*      4 CVT6DAT  BIT(1),            /* DYNAMIC ADDRESS TRANSLATION\n*                                       BY CPU (AOS/1, AOS/2)        */\n*      4 CVTRSV10 BIT(1),            /* RESERVED                     */\n*%DCL CVT8AOS2 CHAR;\n*%CVT8AOS2='''12''X';                /* AOS/2 SYSTEM                 */\n*    2 CVTDCBA  PTR(24),             /* ADDR OF DCB FOR SYS1.LOGREC  */\n*    2 CVTIOQET PTR(31),             /* ADDR OF REQUEST ELEMENT\n*                                       TABLE                        */\n*    2 CVTIXAVL PTR(31),             /* ADDR OF I/O SUPERVISOR'S\n*                                       FREELIST POINTER             */\n*    2 CVTNUCB  PTR(31),             /* LOWEST ADDRESS NOT IN\n*                                       NUCLEUS.  ON PAGE BDY        */\n*    2 CVTFBOSV PTR(31),             /* ADDR OF PROGRAM FETCH\n*                                       ROUTINE                      */\n*    2 CVT0DS   PTR(31),             /* ADDR OF ENTRY POINT OF\n*                                       DISPATCHER                   */\n*    2 CVTILCH  PTR(31),             /* ADDR OF LOGICAL CHANNEL WORD\n*                                       TABLE                        */\n*    2 CVTIERLC PTR(31),             /* ADDR OF ASYNCHRONOUS EXIT\n*                                       QUEUE                        */\n*    2 CVTMSER  PTR(31),             /* ADDR OF MASTER SCHEDULER\n*                                       RESIDENT DATA AREA           */\n*    2 CVT0PT01 PTR(31),             /* ADDR OF BRANCH ENTRY POINT\n*                                       OF POST ROUTINE              */\n*    2 CVTRSV11 PTR(31),             /* ** CVTTRMTB FIELD UNUSED\n*                                       IN AOS **                    */\n*    2 CVTHEAD  PTR(31),             /* ADDR OF HIGHEST PRIORITY TCB\n*                                       IN READY QUEUE               */\n*    2 CVTMZ00  PTR(31),             /* HIGHEST ADDRESS IN VIRTUAL\n*                                       STORAGE                      */\n*    2 CVT1EF00 PTR(31),             /* ADDR OF ROUTINE WHICH\n*                                       CREATES IRBS FOR EXITS       */\n*    2 CVTQOCR  PTR(31),             /* ADDR OF A GFX PARM LIST\n*                                       WORD, OR ZERO                */\n*    2 CVTQMWR  PTR(31),             /* ADDR OF QMGR COMMUNICATION\n*                                       DATA AREA                    */\n*    2 CVTSNCTR FIXED(15),           /* SERIAL DATA SET SEQUENCE\n*                                       NUMBER COUNTER               */\n*    2 CVTOPTA  CHAR(1),             /* FLAGS                        */\n*     3 CVTCCH   BIT(1),             /* CCH OPTION PRESENT   PTM 4686*/\n*     3 CVTAPR   BIT(1),             /* AUTOMATIC PATH RETRY --\n*                                       I/O RECOVERY MGT             */\n*     3 CVTDDR   BIT(1),             /* DYNAMIC DEVICE\n*                                       RECONFIGURATION --\n*                                       I/O RECOVERY MGT     PTM 4686*/\n*     3 CVTNIP   BIT(1),             /* - NIP PROCESSING             */\n*     3 CVTRSV12 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV13 BIT(1),             /* RESERVED                     */\n*     3 CVTASCII BIT(1),             /* USAS(CI)I OPTION PRESENT     */\n*     3 CVTXPFP  BIT(1),             /* CPU HAS EXTENDED PRECISION\n*                                       FLOATING POINT               */\n*    2 CVTOPTB  CHAR(1),             /* RESERVED                     */\n*     3 CVTPROT  BIT(1),             /* STORE PROTECTION SYSGENED    */\n*     3 CVTRSV14 BIT(1),             /* RESERVED                     */\n*     3 CVTTOD   BIT(1),             /* CPU HAS TIME OF DAY CLOCK    */\n*     3 CVTNLOG  BIT(1),             /* SYS1.LOGREC UNAVAILABLE FOR\n*                                       ERROR RECORDING        ICB382*/\n*     3 CVTAPTHR BIT(1),             /* NIP SETS TO 1 WHEN DEVICE\n*                                       TESTING IS COMPLETE.  IF 1,\n*                                       IOS WILL USE AN ALTERNATE\n*                                       PATH TO A DEVICE ON CONDITION\n*                                       CODE 3.  THIS IS RESET BY NIP\n*                                       WHEN THE LPA IS INITIALIZED.\n*                                                              YM2670*/\n*     3 CVTFP    BIT(1),             /* FETCH PROTECT IS ACTIVE\n*                                       (AOS/1)                ICB427*/\n*     3 CVTRSV16 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV17 BIT(1),             /* RESERVED                     */\n*    2 CVTQCDSR PTR(31),             /* CDE SEARCH ROUTINE ADDRESS   */\n*    2 CVTQLPAQ PTR(31),             /* ADDRESS OF POINTER TO MOST\n*                                       RECENT ENTRY ON LPA CDE QUEUE*/\n*    2 CVTRSV18 PTR(31),             /* ** CVTMPCVT FIELD UNUSED IN\n*                                       AOS **                       */\n*    2 CVTSMCA  PTR(31),             /* ADDR OF SMCA                 */\n*    2 CVTABEND PTR(31),             /* OS/VS2 - ADDRESS OF SECONDARY\n*                                       CVT --  OS/VS1 - USED BY AN\n*                                       INTERNAL ABEND TRACE ROUTINE\n*                                       FOR DEBUG PURPOSES     XM0615*/\n*    2 CVTUSER  PTR(31),             /* FIELD AVAILABLE TO USER      */\n*    2 CVTMDLDS PTR(31),             /* RESERVED FOR MODEL-DEPENDENT\n*                                       SUPPORT                      */\n*    2 CVTQABST CHAR(2) BDY(WORD),   /* AOS/2 - AN SVC 13 INSTRUCTION\n*                                       --  AOS/1 - RESERVED         */\n*    2 CVTLNKSC CHAR(2) BDY(WORD,3), /* AN SVC 6 (LINK) INSTRUCTION\n*                                                              ICB369*/\n*    2 CVTTSCE  PTR(31),             /* ADDR OF FIRST TSCE           */\n*    2 CVTPATCH PTR(31),             /* ADDR OF FE PATCH AREA        */\n*    2 CVTRMS   PTR(31),             /* ADDRESS OF RMS VECTOR TABLE  */\n*    2 CVTTSCVT PTR(31),             /* ADDR OF TIME SHARING CVT     */\n*     3 CVTTSFLG CHAR(1),            /* TIME SHARING OPTION FLAGS    */\n*      4 CVTTSRDY BIT(1),            /* TSO READY AND INIT           */\n*      4 CVTRSV19 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV20 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV21 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV22 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV23 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV24 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV25 BIT(1),            /* RESERVED                     */\n*     3 CVTTSCVB PTR(24),            /* ADDR OF TIME SHARING CVT     */\n*    2 CVT0SCR1 PTR(31),             /* ADDRESS OF RPS SECTOR\n*                                       CONVERTER                    */\n*    2 CVTGTF   PTR(31),             /* GTF CONTROL WORD       ICB312*/\n*     3 CVTGTFST BIT(8),             /* GTF FLAG BYTE          ICB312*/\n*      4 CVTGTFS  BIT(2),            /* GTF STATUS             ICB312*/\n*%CVTGTFIN = '''00''B';              /* INACTIVE               ICB312*/\n*%CVTGTFSR = '''01''B';              /* STARTING               ICB312*/\n*%CVTGTFSP = '''10''B';              /* STOPPING               ICB312*/\n*%CVTGTFAC = '''11''B';              /* ACTIVE                 ICB312*/\n*      4 CVTSTATE BIT(1),            /* GTF IN CONTROL PROCESSING\n*                                       A HOOK                 ICB312*/\n*      4 CVTTMODE BIT(1),            /* IF 0 - MODE=INT\n*                                       IF 1 - MODE=EXT        ICB312*/\n*      4 CVTFORM  BIT(1),            /* FORMAT TRACE TABLE AT\n*                                       ABEND                  ICB312*/\n*      4 CVTUSR   BIT(1),            /* TRACE=USR SPECIFIED    ICB312*/\n*      4 CVTRSV26 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV27 BIT(1),            /* RESERVED                     */\n*     3 CVTGTFA  PTR(24),            /* ADDR OF MONITOR CALL\n*                                       VECTOR TABLE           ICB312*/\n*    2 CVTAQAVT PTR(31),             /* POINTER TO WORD CONTAINING\n*                                       ADDR OF TCAM VECTOR TABLE    */\n*     3 CVTTCMFG CHAR(1),            /* TCAM FLAGS                   */\n*      4 CVTTCRDY BIT(1),            /* TCAM RUNNING                 */\n*      4 CVTRSV28 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV29 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV30 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV31 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV32 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV33 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV34 BIT(1),            /* RESERVED                     */\n*     3 CVTAQAVB PTR(24),            /* POINTER TO WORD CONTAINING\n*                                       ADDR OF TCAM VECTOR TABLE    */\n*    2 CVTTATA  PTR(31),             /* ADDR OF P0 TCB POINTER       */\n*     3 CVTTSKS  PTR(8),             /* MAXIMAL NUMBER OF TCB ADDR\n*                                       TAB ENTRIES                  */\n*     3 CVTTAT   PTR(24),            /* ADDR OF P0 TCB POINTER       */\n*    2 CVTATER  PTR(31),             /* POINTER TO SYSTEM ERROR\n*                                       TCB  (AOS/1)           ICB346*/\n*     3 CVTSYST  PTR(8),             /* NUMBER OF SYSGEN'D TCB'S     */\n*     3 CVTATERA PTR(24),            /* POINTER TO SYSTEM ERROR\n*                                       TCB  (AOS/1)           ICB346*/\n*    2 CVTEXT1  PTR(31),             /* ADDRESS OF OS-AOS COMMON\n*                                       EXTENSION              ICB421*/\n*    2 CVTCBSP  PTR(31),             /* ADDRESS OF ACCESS METHOD\n*                                       CONTROL BLOCK STRUCTURE.  IF\n*                                       ZERO, IT INDICATES THAT THE\n*                                       ACCESS METHOD MASTER CATALOG\n*                                       IS NOT OPEN'ED AND AVAILABLE\n*                                                              ICB436*/\n*    2 CVTPURG  PTR(31),             /* POINTER TO SUBSYSTEM PURGE\n*                                       ROUTINE                ICB330*/\n*     3 CVTRSV35 PTR(8),             /* RESERVED               ICB330*/\n*     3 CVTPURGA PTR(24),            /* ADDRESS OF SUBSYSTEM PURGE\n*                                       ROUTINE                ICB330*/\n*    2 CVTAMFF  CHAR(4),             /* RESERVED FOR ACCESS METHOD\n*                                       FLAGS                  ICB436*/\n*    2 CVTQMSG  PTR(31),             /* POINTER TO INFORMATION TO BE\n*                                       PRINTED BY ABEND       ICB307*/\n*     3 CVTRSV36 PTR(8),             /* RESERVED               ICB307*/\n*     3 CVTQMSGA PTR(24),            /* ADDRESS OF INFORMATION TO BE\n*                                       PRINTED BY ABEND       ICB307*/\n*    2 CVTDMSR  PTR(31),             /* SAME AS CVTDMSRA BELOW ICB346*/\n*     3 CVTRSV37 PTR(8),             /* RESERVED               ICB346*/\n*     3 CVTDMSRA PTR(24),            /* ADDRESS OF OPEN/CLOSE/EOV\n*                                       SUPERVISORY ROUTINE    ICB346*/\n*    2 CVTRSV38 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV39 PTR(31),             /* RESERVED                     */\n*\n* /*           AOS/1 - AOS/2 COMMON SECTION                          */\n*\n*    2 CVTREAL  PTR(31),             /* ADDRESS OF THE VIRTUAL\n*                                       STORAGE BYTE FOLLOWING THE\n*                                       HIGHEST VIRTUAL=REAL STORAGE\n*                                       ADDRESS                ICB368*/\n*    2 CVTPTRV  PTR(31),             /* ADDRESS OF PAGING SUPERVISOR\n*                                       GENERAL ROUTINE TO TRANSLATE\n*                                       REAL ADDRESSES TO VIRTUAL    */\n*    2 CVTMODE  PTR(31),             /* ADDRESS OF ROUTINE TO CHANGE\n*                                       SYSTEM MASK                  */\n*    2 CVTJESCT PTR(31),             /* ADDRESS OF JES CONTROL TABLE */\n*    2 CVTJEPS  PTR(31),             /* ADDRESS OF JEPS MONITOR TCB\n*                                       (OS/VS1)               YM2702*/\n*    2 CVTTZ    FIXED(31),           /* DIFFERENCE BETWEEN LOCAL TIME\n*                                       AND GREENWICH MEAN TIME\n*                                       (BIT 31 = 1.048576 SEC)      */\n*    2 CVTMCHPR PTR(31),             /* ADDRESS OF MACHINE CHECK\n*                                       PARAMETER LIST               */\n*    2 CVTEORM  PTR(31),             /* HIGHEST REAL ADDRESS IN MAIN\n*                                       STORAGE                      */\n*    2 CVTERPV  PTR(31),             /* POINTER TO SUBROUTINE IN IOS\n*                                       TO CONVERT CCW DATA ADDRESSES\n*                                       TO VIRTUAL ADDRESSES   ICB367*/\n*    2 CVTINTLA PTR(31),             /* ADDRESS OF AREA CONTAINING\n*                                       INTERVAL LENGTH AT WHICH I/O\n*                                       LOAD BALANCING EXCP COUNTS\n*                                       AND RATES ARE COMPUTED ICB341*/\n*    2 CVTAPF   PTR(31),             /* SAME AS CVTAPFA BELOW  ICB360*/\n*     3 CVTRSV40 PTR(8),             /* RESERVED               ICB360*/\n*     3 CVTAPFA  PTR(24),            /* ADDRESS OF BRANCH ENTRY POINT\n*                                       IN APF ROUTINE               */\n*    2 CVTEXT2  PTR(31),             /* ADDRESS OF AOS/1 - AOS/2\n*                                       COMMON EXTENSION       ICB330*/\n*     3 CVTRSV41 PTR(8),             /* RESERVED               ICB330*/\n*     3 CVTEXT2A PTR(24),            /* SAME AS CVTEXT2 ABOVE  ICB330*/\n*    2 CVTHJES  PTR(31),             /* SAME AS CVTHJESA BELOW ICB454*/\n*     3 CVTRSV42 PTR(8),             /* RESERVED               ICB454*/\n*     3 CVTHJESA PTR(24),            /* ADDRESS OF OPTIONAL JOB ENTRY\n*                                       SYSTEM COMMUNICATION VECTOR\n*                                       TABLE                  ICB454*/\n*    2 CVTRSV43 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV44 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV45 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV46 PTR(31),             /* RESERVED                     */\n*\n* /*           AOS/1 OVERLAY                                         */\n*\n*    2 CVTPGSIA PTR(31),             /* ADDRESS OF PAGING SUPERVISOR\n*                                       INFORMATION AREA             */\n*    2 CVTPCVT  PTR(31),             /* ADDRESS OF PAGED CVT\n*                                       EXTENSION                    */\n*    2 CVTA1F1  CHAR(1),             /* PAGE FAULT FLAGS             */\n*     3 CVTPFSW  BIT(1),             /* ONLY PAGING TASK MAY BE\n*                                       DISPATCHABLE                 */\n*     3 CVTSRSW  BIT(1),             /* NO TASK EXCEPT PAGING TASK\n*                                       MAY EXECUTE DISABLED CODE    */\n*     3 CVTRSV47 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV48 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV49 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV50 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV51 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV52 BIT(1),             /* RESERVED                     */\n*    2 CVTSYSK  CHAR(1),             /* SYSTEM LOCK.  IF NOT ZERO,\n*                                       ONLY PAGING TASK MAY BE\n*                                       DISPATCHED                   */\n*     3 CVTRSV53 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV54 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV55 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV56 BIT(1),             /* RESERVED                     */\n*     3 CVTSLKR  BIT(1),             /* MACHINE CHECK HANDLING IS IN\n*                                       PROGRESS               ICB320*/\n*     3 CVTSLKQ  BIT(1),             /* SQA EXHAUSTED                */\n*     3 CVTSLKP  BIT(1),             /* LAST PCB USED                */\n*     3 CVTSLKO  BIT(1),             /* A DISABLED ROUTINE HAS\n*                                       PRODUCED A PAGE FAULT        */\n*    2 CVTSULK  FIXED(15),           /* SUPERVISOR LOCK.  NUMBER OF\n*                                       TASKS ATTEMPTING TO EXECUTE\n*                                       DISABLED CODE.  IF NOT ZERO,\n*                                       ONLY ENABLED TASKS MAY RUN   */\n*    2 CVTSMF   PTR(31),             /* ADDRESS OF SMF TCB     ICB395*/\n*    2 CVTPNWFR PTR(31),             /* ADDRESS OF ROUTINE WHICH\n*                                       FREES THE 'EMERGENCY' WORK\n*                                       AREA (ICB413)        PTM 2452*/\n*    2 CVTDDCE  PTR(31),             /* ADDRESS OF DYNAMIC DISPATCHER\n*                                       CONTROL ELEMENT        ICB466*/\n*    2 CVTRSV57 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV58 FIXED(15),           /* RESERVED                     */\n*    2 CVTSTOA  FIXED(31),           /* SAVE AREA FOR THE REAL\n*                                       STORAGE ADDRESS OF THE\n*                                       SEGMENT TABLE ORIGIN   ICB496*/\n*    2 CVTRSV60 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV61 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV62 PTR(31);             /* RESERVED                     */\n*\n* /*           AOS/2 OVERLAY                                         */\n*\n* DECLARE\n*%IF IKEPLS='2'  %THEN\n*    %GOTO CVTP1;\n*   1 CVTS01   BASED(ADDR(CVTPGSIA)) BDY(WORD),\n*%GOTO CVTP2;\n*%CVTP1 : ;\n*   1 CVTS01   DEF(CVTPGSIA) BDY(WORD),\n*%CVTP2:;\n*    2 CVTRSVA2 PTR(31),             /* RESERVED               ICB339*/\n*    2 CVTLPDSR PTR(31),             /* ADDRESS OF LPA DIRECTORY\n*                                       SEARCH ROUTINE               */\n*    2 CVTPVTP  PTR(31),             /* ADDRESS OF PAGE VECTOR TABLE */\n*    2 CVTLPDIA PTR(31),             /* ADDRESS OF LPA DIRECTORY.\n*                                       ON PAGE BOUNDARY             */\n*     3 CVTDIRST CHAR(1),            /* FLAG BYTE                    */\n*      4 CVTDICOM BIT(1),            /* LPA DIRECTORY HAS BEEN\n*                                       INITIALIZED BY NIP           */\n*      4 CVTRSV63 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV64 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV65 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV66 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV67 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV68 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV69 BIT(1),            /* RESERVED                     */\n*     3 CVTLPDIR PTR(24),            /* ADDRESS OF LPA DIRECTORY.\n*                                       ON PAGE BOUNDARY             */\n*    2 CVTPAGE1 PTR(31),             /* ADDRESS OF DCB FOR PRIMARY\n*                                       PAGING DATA SET              */\n*    2 CVTPGSUP PTR(31),             /* ADDRESS OF TCB FOR PAGING\n*                                       SUPERVISOR                   */\n*    2 CVTSLIDA CHAR(4) BDY(WORD),   /* IDENTITY OF TCB CAUSING\n*                                       SUPERVISOR LOCK BYTE (CVTSYLK)\n*                                       TO BE SET OR IDENTITY OF TCB\n*                                       THAT SECOND EXIT PROCESSING\n*                                       IS FOR WHEN CVTSEIC=1        */\n*     3 CVTSYLK  CHAR(1),            /* SUPERVISOR LOCK.  ONLY\n*                                       ENABLED TASKS MAY BE\n*                                       DISPATCHED                   */\n*%DCL CVTSYLKS CHAR;\n*%CVTSYLKS='''FF''X';                /* SET LOCK BYTE                */\n*%DCL CVTSYLKR CHAR;\n*%CVTSYLKR='''00''X';                /* RESET LOCK BYTE              */\n*     3 CVTSLID  CHAR(3),            /* SAME AS CVTSLIDA ABOVE       */\n*    2 CVTSER   PTR(31),             /* SAME AS CVTSERA BELOW        */\n*     3 CVTSEFLG CHAR(1),            /* SECOND EXIT FLAGS            */\n*      4 CVTSEIC  BIT(1),            /* INDICATES THAT PAGING\n*                                       SUPERVISOR HAS BRANCHED TO A\n*                                       SECOND EXIT ROUTINE          */\n*      4 CVTRSV70 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV71 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV72 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV73 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV74 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV75 BIT(1),            /* RESERVED                     */\n*      4 CVTRSV76 BIT(1),            /* RESERVED                     */\n*     3 CVTSERA  PTR(24),            /* SECOND EXIT ROUTINE ADDRESS\n*                                       THAT WILL BE BRANCHED TO BY\n*                                       ABTERM PROLOGUE SHOULD THE\n*                                       SECOND EXIT ROUTINE PROGRAM\n*                                       CHECK                        */\n*    2 CVTSEG   CHAR(16) BDY(WORD),  /* SEGMENT TABLE INFORMATION    */\n*     3 CVTSEGA  PTR(31),            /* VIRTUAL ADDRESS OF USER\n*                                       SEGMENT TABLE                */\n*     3 CVTSEGB  PTR(31),            /* VIRTUAL ADDRESS OF SYSTEM\n*                                       SEGMENT TABLE                */\n*     3 CVTSEGC  PTR(31),            /* REAL ADDRESS OF USER SEGMENT\n*                                       TABLE                        */\n*      4 CVTSEGLC PTR(8),            /* LENGTH IN 64-BYTE UNITS OF\n*                                       USER SEGMENT TABLE           */\n*      4 CVTSEGCA PTR(24),           /* REAL ADDRESS OF USER SEGMENT\n*                                       TABLE                        */\n*     3 CVTSEGD  PTR(31),            /* REAL ADDRESS OF SYSTEM\n*                                       SEGMENT TABLE                */\n*      4 CVTSEGLD PTR(8),            /* LENGTH IN 64-BYTE UNITS OF\n*                                       SYSTEM SEGMENT TABLE         */\n*      4 CVTSEGDA PTR(24),           /* REAL ADDRESS OF SYSTEM\n*                                       SEGMENT TABLE                */\n*    2 CVTRSV77 PTR(8),              /* RESERVED                     */\n*    2 CVTSPVLK PTR(8),              /* NUMBER OF TASKS WHICH HAVE\n*                                       TERMINATED WHILE OWNING\n*                                       SUPERVISOR LOCK WITHOUT\n*                                       OPERATOR HAVING YET BEEN\n*                                       NOTIFIED                     */\n*    2 CVTCTLFG CHAR(1),             /* SYSTEM CONTROL FLAGS         */\n*     3 CVTPSIC  BIT(1),             /* PAGING SUPERVISOR IN CONTROL */\n*     3 CVTAPGB  BIT(1),             /* APG IS ACTIVE          ICB339*/\n*     3 CVTT1DSP BIT(1),             /* DISABLED PAGE FAULT OCCURRED\n*                                       DURING TYPE 1 SVC     YA01802*/\n*     3 CVTDSTAT BIT(1),             /* DEVSTAT OPTION IN EFFECT.\n*                                       DEVICE ADDRESS FOR 2319-3330-\n*                                       2314 CAN VARY ACROSS SYSTEMS */\n*     3 CVTRSV79 BIT(1),             /* RESERVED                     */\n*     3 CVTRSV80 BIT(1),             /* RESERVED                     */\n*     3 CVTGTRCE BIT(1),             /* GTF HAS SUPPRESSED SUPERVISOR\n*                                       TRACE                  ICB446*/\n*     3 CVTSDTRC BIT(1),             /* SVC DUMP HAS SUPPRESSED\n*                                       SUPERVISOR TRACE       ICB446*/\n*    2 CVTAPG   CHAR(1),             /* DISPATCHING PRIORITY OF\n*                                       APG                    ICB339*/\n*    2 CVTTRACE CHAR(2) BDY(WORD),   /* BRANCH ON REGISTER\n*                                       INSTRUCTION.  SET BY NIP.\n*                                       REGISTER TEN FOR TRACE.\n*                                       REGISTER ELEVEN FOR NO TRACE.*/\n*    2 CVTTRAC2 CHAR(2) BDY(WORD,3), /* BRANCH ON REGISTER 11\n*                                       INSTRUCTION.  THIS ALLOWS FOR\n*                                       SUPPRESSING TRACE DYNAMICALLY\n*                                       BY SETTING CONDITION CODE\n*                                       MASK TO ZERO IN FIRST\n*                                       INSTRUCTION  (CVTTRACE)      */\n*    2 CVTRSCN  PTR(31),             /* ADDRESS OF ROUTINE TO SCAN\n*                                       TCB TREE                     */\n*    2 CVTTAS   PTR(31),             /* ADDRESS OF ROUTINE TO\n*                                       TRANSFER ADDRESS SPACE       */\n*    2 CVTPVALD PTR(31),             /* ADDRESS OF ROUTINE TO CHECK\n*                                       ADDRESSES AS BEING IN A\n*                                       REGION                       */\n*    2 CVTSHRVM PTR(31),             /* LOWEST ADDRESS OF SHARED\n*                                       VIRTUAL STORAGE AREA.  THIS\n*                                       ADDRESS WILL BE EITHER THE\n*                                       BEGINNING OF LPA DIRECTORY OR\n*                                       THE BEGINNING OF LPA UPDATE\n*                                       AREA IF 'MLPA' OPTION WAS\n*                                       USED AT SUPERVISOR\n*                                       INITIALIZATION.              */\n*    2 CVT0VL01 PTR(31),             /* ENTRY POINT ADDRESS OF\n*                                       VALIDITY CHECK ROUTINE\n*                                       (IEA0VL01) USED TO COMPARE\n*                                       PROTECT KEY OF AN ADDRESS\n*                                       WITH TCB PROTECT KEY.        */\n*    2 CVTPFIXQ PTR(31),             /* BRANCH ENTRY TO IEAPFIXQ, THE\n*                                       FIX-QUIESCE ROUTINE USED BY\n*                                       TSO BEFORE SWAP TO FREE ALL\n*                                       SVC FIXES              ICB412*/\n*    2 CVTPFIXR PTR(31),             /* BRANCH ENTRY TO IEAPFIXR, THE\n*                                       FIX-RESTORE ROUTINE USED BY\n*                                       TSO AFTER SWAP (INVERSE OF\n*                                       FIX-QUIESCE)           ICB412*/\n*    2 CVTPFIXP PTR(31),             /* BRANCH ENTRY TO IEAPFIXP, THE\n*                                       FIX-PURGE ROUTINE USED BY\n*                                       STAE, ABEND, ETC., TO GET RID\n*                                       OF OUTSTANDING FIX REQUESTS\n*                                                              ICB412*/\n*    2 CVTPTCD  PTR(31),             /* BRANCH ENTRY TO IEAPTCD, THE\n*                                       PAGE-TABLE-CREATE-DESTROY\n*                                       ROUTINE USED BY TSO LOGOFF IN\n*                                       DOING A PSEUDO-FREEPART\n*                                                              ICB412*/\n*    2 CVTSYSWT PTR(31),             /* ADDRESS OF THE SMF SYSTEM\n*                                       WAIT TIME COLLECTION AREA\n*                                                              ICB469*/\n*    2 CVTRSV81 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV82 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV83 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV84 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV85 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV86 PTR(31);             /* RESERVED                     */\n*\n* /*                                                                 */\n* /*           OS - AOS COMMON EXTENSION                             */\n* /*                                                                 */\n*\n* DECLARE\n*   1 CVTXTNT1 BASED(CVTEXT1),       /* START OF OS-AOS COMMON\n*                                       EXTENSION              ICB421*/\n*    2 CVTFACHN PTR(31),             /* ADDRESS OF CHAIN OF DCB FIELD\n*                                       AREAS (ISAM)           ICB421*/\n*    2 CVTRSV87 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV88 PTR(31);             /* RESERVED                     */\n*\n* /*                                                                 */\n* /*           AOS/1 - AOS/2 COMMON EXTENSION                        */\n* /*                                                                 */\n*\n* DECLARE\n*   1 CVTXTNT2 BASED(CVTEXT2),       /* START OF AOS/1-AOS/2 EXT     */\n*    2 CVTDSSV  PTR(31),             /* ADDRESS OF THE DSS VECTOR\n*                                       TABLE                  ICB313*/\n*     3 CVTRSV89 PTR(8),             /* RESERVED               ICB313*/\n*     3 CVTDSSVA PTR(24),            /* ADDRESS OF THE DSS VECTOR\n*                                       TABLE                  ICB313*/\n*    2 CVTNUCLS CHAR(1),             /* USED TO IDENTIFY THE NUCLEUS\n*                                       MEMBER NAME            ICB322*/\n*    2 CVTRSV90 BIT(8),              /* RESERVED                     */\n*     3 CVTRSV9A BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9B BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9C BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9D BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9E BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9F BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9G BIT(1),             /* RESERVED                     */\n*     3 CVTRSV9H BIT(1),             /* RESERVED                     */\n*    2 CVTRSV91 FIXED(15),           /* RESERVED                     */\n*    2 CVTDEBVR PTR(31),             /* ADDRESS OF BRANCH ENTRY POINT\n*                                       OF DEBCHK VERIFY ROUTINE\n*                                       (ICB380)               XM9028*/\n*    2 CVTRSV92 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV93 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV94 PTR(31),             /* RESERVED                     */\n*    2 CVTQID   PTR(31),             /* SAVE AS CVTQIDA BELOW  ICB381*/\n*     3 CVTRSV95 PTR(8),             /* RESERVED               ICB381*/\n*     3 CVTQIDA  PTR(24),            /* ADDRESS OF QID TABLE\n*                                       PREFIX                 ICB381*/\n*    2 CVTOLTEP PTR(31),             /* POINTER TO CONTROL BLOCK\n*                                       CREATED BY SVC 59 TO POINT TO\n*                                       PSEUDO-DEB'S           ICB423*/\n*    2 CVTRSV96 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV97 FIXED(15),           /* RESERVED                     */\n*    2 CVTRSV98 PTR(31),             /* RESERVED                     */\n*    2 CVTRSV99 PTR(31),             /* RESERVED                     */\n*    2 CVTRSVA0 PTR(31),             /* RESERVED                     */\n*    2 CVTRSVA1 PTR(31);             /* RESERVED                     */\n*\n* /*                      CVT PREFIX                                 */\n*\n*    DCL 1 CVTFIX BASED(CVTPTR-256) BDY(WORD),\n*    2 *        CHAR(248) BDY(WORD), /* RESERVED                     */\n*    2 *        CHAR(2) BDY(WORD),   /* RESERVED                     */\n*    2 CVTMDL   CHAR(2) BDY(WORD,3), /* CPU MODEL NUMBER IN SIGNLESS\n*                                       PACKED DECIMAL, I.E., A\n*                                       MODEL 50 WOULD BE REPRESENTED\n*                                       AS 0050 HEX                  */\n*    2 CVTRELNO CHAR(4) BDY(WORD),   /* OS RELEASE NUMBER (EBCDIC)   */\n*     3 CVTNUMB  CHAR(2) BDY(WORD),  /* RELEASE NUMBER               */\n*     3 CVTLEVL  CHAR(2) BDY(WORD,3);/* RELEASE LEVEL                */\n*\n* /*                   END OF CVT MACRO                              */\n*\n*%IF IKEPLS=''  %THEN\n*    %GOTO CVTL4;\n*IHALPOP;\n*% ACTIVATE PUSH,POP,OFF;\n*%CVTL4 : ;\n./ ADD NAME=DCBEXIT  0100-19106-19106-1238-00042-00042-00000-MZAP78  17\nDCBX     TITLE 'GENERAL PURPOSE DCB EXIT'\n         PUNCH '         ALIAS DCBXLIST'\nDCBEXIT  CSECT\n         ENTRY DCBXLIST\n         USING *,15\n         USING IHADCB,1\n         STM   14,12,12(13)\n         LH    2,DCBBLKSI               DID USER SUPPLY BLKSIZE?\n         LTR   2,2\n         BNZ   BLKOK                     YES - ACCEPT IT\n         LH    2,DCBLRECL               START WITH RECORD LENGTH\n         TM    DCBRECFM,DCBRECU         RECFM=U?\n         BO    NOTV                      YES - USE BLKSIZE=LRECL\n         TM    DCBDEVT,X'40'            IS DEVICE UNIT RECORD?\n         BO    *+12                      YES - USE BLKSIZE=LRECL\n         MH    2,=H'5'                   NO - BLOCK 5 TO 1\n         OI    DCBRECFM,DCBRECBR        FORCE IT BLOCKED\n         TM    DCBRECFM,DCBRECF         IS IT FB?\n         BO    NOTV                      YES\n         LA    2,4(2)                   ADD BDW FOR V OR D RECORD\nNOTV     STH   2,DCBBLKSI               STORE CALCULATED BLKSIZE\nBLKOK    CLI   DCBBUFNO,0               DID USER SUPPLY # OF BUFFERS?\n         BNE   SARTRE                    YES - EXIT\n         LA    5,1                      DCBBUFNO=1 IF DA(*) (TERM=TS)\n         CLI   DCBDEVT,DCBDVTRM          IS IT TSO TERMINAL?\n         BE    SETBUFNO                   YES - BUFNO=1\n         SR    4,4                      DCBBUFNO=MAX(2,2048/DCBBLKSI)\n         LA    5,2048\n         DR    4,2\n         CH    5,TWO\n         BH    *+8\n         LA    5,2\nTWO      EQU   *-2\nSETBUFNO STC   5,DCBBUFNO\nSARTRE   LM    14,12,12(13)\n         BR    14\n         LTORG\n         SPACE 2\nDCBXLIST DC    0F'0',X'85',AL3(DCBEXIT)\n         PRINT NOGEN\n         DCBD  DSORG=PS,DEVD=DA\n         END\n./ ADD NAME=FULLSCR  0100-19106-19106-1238-00214-00214-00000-MZAP78  17\n//UPSTAGE2 JOB (CCSMASHM,CNT7,F2301,T20,L20),HAGAON.HATSANUA,\n//             MSGLEVEL=(1,1),NOTIFY=ZCCSMAS\n//       EXEC  SYSTUCL,UPPGM=EDITOR,REGION.UP=128K,\n//             LIB='SYS2.GEN.ASM',LCT=33,\n//             MCALL=N,U1P=1500,U1S=500,\n//             LOPT=,NCAL=,OLIB='SYS2.LINKLIB',\n//             MOD='SYS1.TELCMLIB'\n//SCRATCH  DD  UNIT=3330-1,SPACE=(CYL,(1,1),,CONTIG)\n><       SET   LEA LIS EDI\n><       USE   TCM75122\n><       INS   0 BY 100\nMCPSTG2  TITLE 'TCAM 5F GENERATION - STAGE 2'                     *IIH*\n         MTITL 'TCAM 5F GENERATION (WITH FULLSCR) - STAGE 2',LEN=45\n*********************************************************************\n*              TECHNION 11 SEPT 1975                              *IIH*\n*                                                                 *IIH*\n*              THE SOURCE GENERATED BY TCAM STAGE 1 MUST BE       *IIH*\n*              MODIFIED TO INCORPORATE USER CODE,                 *IIH*\n*              AS WELL AS TO CORRECT VARIOUS IBM ERRORS.          *IIH*\n*                                                                 *IIH*\n*              TECHNION CODE IS GENERALLY INDICATED BY A SLASH    *IIH*\n*              ('/') IN THE COMMENTS FIELD, OR BY *IIH* OR *TSM*  *IIH*\n*              IN COLUMNS 67/71.                                  *IIH*\n*                                                                 *IIH*\n*              THE CHANGES ARE:                                   *IIH*\n*                                                                 *IIH*\n*              FOR 3277 AND 3275 DCBS, BUFMAX,BUFIN,BUFOUT=10;    *IIH*\n*                                      BUFSIZE=232.               *IIH*\n*              FOR 3277 AND 3275 TERMINALS, BUFSIZE=2150:         *IIH*\n*                                (FOR A FULL SCREEN TGET, 1968, THE\n*                                 DEFAULT , IS NOT ENOUGH. YOU NEED\n*                                 24*82+AID+CURSOR ADDRESS+SF+ATTRIB\n*              PCI=(N,N)         (A,A) DOESN'T WORK               *IIH*\n*              CODE TO TERMINATE FULL SCREEN MODE UPON LOGON      *IIH*\n*              HAS BEEN ADDED TO THE INHDR GROUP, AFTER LOGON.    *IIH*\n*                                                                 *IIH*\n*              THE ORDER OF MSGGENS IN THE INMSG GROUP HAS        *IIH*\n*              BEEN ALTERED; THIS IS INTENDED TO CORRECT THE      *IIH*\n*              ERROR WHICH OCCURS WHEN TSO ISN'T UP,              *IIH*\n*              THE USER PRESSES ENTER (CARRIAGE RETURN),          *IIH*\n*              HE RECEIVES A \"ENTER LOGON\" MESSAGE,               *IIH*\n*              ATTEMPTS TO LOGON, AND ONLY AT THAT POINT          *IIH*\n*              RECEIVES A \"TSO NOT ACTIVE\" MESSAGE.               *IIH*\n*                                                                 *IIH*\n*     FOR 2260 REMOTE, ALTER '+' TO '-' IN INVITATION LIST. THIS\n*   PREVENTS POLLING AND THUS AVOIDS NEED FOR OPERATOR TO VARY\n*   OFFTP WHEN THEN LINE IS NOT IN USE. DITTO FOR 2741 CORRESPONDENCE\n*  (TEKTRONIX) AND TTY LINES. NONE OF THESE HAVE MODEMS.\n*\n*   EVERY 'TERMINAL' MACRO HAS AT LEAST ONE OPTION FIELD. FOR 3277\n*   AND 3275 TERMINALS THERE ARE TWO OPTION FIELD.\n*   ACCORDINGLY THE OPDATA OPERAND MUST BE CODED AS FOLLOWS:-\n*   FOR 3270    OPDATA=(2,0)\n*   NON 3270    OPDATA=1\n*\n         STITL 'INITIALIZE(OPEN) AND TERMINATE(CLOSE) LINES'      *IIH*\n><       DEL   94000\n><       INS   92000 BY 1000\n         STITL 'OPTION MACROS (OPDATA)'                           *TSM*\n*               REPLACE IEDQFSCR OPTION GENERATED BY STAGE 1.     *TSM*\nIF3270   OPTION XL1                     /FOR CUTOFF SELECTION     *IIH*\nSWFSMODE EQU   4                                                  *TSM*\nSW3270   EQU   2                                                  *TSM*\nSWNO3270 EQU   1                                                  *TSM*\nIEDQFSCR OPTION XL1                     /FOR FULL SCREEN TRIGGER  *IIH*\n><       INS   96000 BY 100\n         STITL 'TERMINAL DEFINITIONS'                             *TSM*\n*              THE 2741 AT THE IBM SCIENTIFIC CENTER              *IIH*\n*              DOESN'T HAVE THE BREAK FEATURE.                    *IIH*\n*              MAKE SURE THAT IT IS THE FIRST IN THE LINE GROUP.  *IIH*\n         SPACE 1                                                  *TSM*\n*              CHANGE \"OPDATA=0\" TO \"OPDATA=(2,0)\" IN EVERY       *TSM*\n*              TERMINAL MACRO FOR WHICH FULL SCREEN SUPPORT       *TSM*\n*              IS REQUIRED (PRESUMABLY 3277 AND 3275).            *TSM*\n         SPACE 1                                                  *TSM*\n*              ADD \"OPDATA=1\" TO ALL REMAINING TERMINAL MACROS.   *TSM*\n         SPACE 1                                                  *TSM*\n*              CHANGE BUFFER SIZE FOR FULL SCREEN TERMINALS FROM  *TSM*\n*              1968 (GENERATED BY STAGE 1) TO 2150.               *TSM*\n         SPACE 1                                                  *TSM*\n><       INS   'UTERM' IN 98000/324000\n               OPDATA=1,                /NO FULL SCREEN SUPPORT   *TSM**\n><       CHA   'BREAK' TO 'NOBREAK' IN 102000\n><       REP   'OPDATA' IN 326000/682000\n               OPDATA=(2,0),            /FULL SCREEN SUPPORT      *TSM**\n><       CHA   '1968'   TO '2150'                IN 326000/682000\n><       INS   'UTERM' IN 686000/744000\n               OPDATA=1,                /NO FULL SCREEN SUPPORT   *TSM**\n><       INS   746000 BY 100\n         STITL 'DCB S'                                            *TSM*\n*              REMOVE PCI=(A,A) FOR 3277 AND 3275:                *TSM*\n*              TCAM WILL BOMB IF PCI IS SPECIFIED FOR 3270S.      *TSM*\n         SPACE 1                                                  *TSM*\n*              CHANGE 3270 DCBS FROM BUFIN=02,BUFOUT=02,BUFMAX=03 *TSM*\n*                               TO   BUFIN=10,BUFOUT=10,BUFMAX=10 *TSM*\n*                               FROM BUFSIZE=116 (1 LUNIT)        *TSM*\n*                               TO   BUFSIZE=232 (2 LUNITS)       *TSM*\n*                               FROM 03*116=348                   *TSM*\n*                               TO   10*232=2320                  *TSM*\n><       CHA   '2' TO '10' IN 848000,922000\n><       CHA   '116' TO '232' IN 850000,924000\n><       CHA   '=3'  TO '=10' IN 850000,924000\n><       CHA   'A,A' TO 'N,N' IN 850000,924000\n><       INS   960000 BY 100\n         STITL 'INVITATION LISTS'                                 *TSM*\n*              MARK 2260 REMOTE (D-112) AND TTY INVITATION LISTS  *TSM*\n*              AS INITIALLY INACTIVE.                             *TSM*\n         SPACE 1                                                  *TSM*\n><       CHA   '+' TO '-' IN 1110000/1128000\n><       CHA   41/53 TO '/226R (D-112)' IN 1110000/1124000\n><       CHA   50/53 TO '/TTY' IN 1126000/1128000\n><       INS   1130000 BY 100\n         STITL 'TSO MESSAGE HANDLER'                              *TSM*\n><       INS   1132000 BY 100\n         SPACE 1                                                  *TSM*\n*              CHECK FOR THE EXISTENCE OF THE IEDQFSCR OPTION FIELD.\n*              IF ABSENT, THIS IS NOT A 3270, SO BYPASS PROCESSING;\n*              ELSE, CHECK IF WE ARE IN THE MIDDLE OF A LOGON.\n*              IF LOGON, REMOVE RESIDUAL FULL SCREEN MODE THAT\n*              MAY BE LEFT OVER FROM THE PREVIOUS SESSION.\n         SPACE 1                                                  *TSM*\n><       INS   1138000 BY 100\n         SPACE 1                                                  *TSM*\n*              THE STAGE 1 GENERATED MACROS INBUF THROUGH SIMATTN *TSM*\n*              ARE REPLACED BY THE FOLLOWING:                     *TSM*\n         SPACE 1                                                  *TSM*\n         LOCOPT IEDQFSCR       /VALID ONLY FOR 3270               *IIH*\n         LTR    R15,R15        /ZERO IF NOT 3270                  *IIH*\n         BZ     NOT3270        /SO BYPASS                         *IIH*\n         L      R1,IEDADBUF    /BUFFER ADDRESS                    *IIH*\n         L      R1,PRFSUNIT-PRFRCB(R1) /LCB ADDRESS               *IIH*\n         L      R1,LCBNTXT-LCBRCB(R1)  /SCB ADDRESS               *IIH*\n         USING  IEDQSCB,R1                                        *IIH*\n         TM     SCBERR1,SCBNOLOG   /LOGON IN PROGRESS?            *IIH*\n         DROP   R1                                                *IIH*\n         BZ     MH3270         /DON'T TOUCH OPTION FIELD          *IIH*\n         MVI    0(R15),0       /R15 STILL POINTS TO IEDQFSCR      *IIH*\n         B      MH3270                                            *IIH*\n         SPACE 1                                                  *IIH*\nNOT3270  INBUF  PATH=(IF3270,1)  /EXECUTE FOR NON 3270            *IIH*\n         CUTOFF 300                                               *IIH*\n         CARRIAGE                                                 *IIH*\n         B      COMMON                                            *IIH*\n         SPACE 1                                                  *IIH*\nMH3270   INBUF  ,                  /EXECUTE FOR 3270 ONLY         *IIH*\n         CUTOFF 4096                                              *IIH*\n         CARRIAGE                                                 *IIH*\nIEDQFS   FULLSCR TRIGGER=X'6E'    /PA2 KEY IS TRIGGER             *IIH*\n         L     R2,IEDADBUF        /BUFFER ADDRESS                 *TSM*\n         USING IEDQPRF,R2         /ADDRESS BUFFER PREFIX          *TSM*\n         TM    PRFSTAT1,PRFTSMSG  /TSO MESSAGE ?                  *TSM*\n         BZ    NOTTSO1            /NO, BYPASS                     *TSM*\n         L     R1,PRFLCB-1        /LINE CONTROL BLOCK ADDRESS     *TSM*\n         LH    R1,LCBTTCIN-IEDQLCB(,R1)   /INDEX OF TERMINAL      *TSM*\n         LTR   R1,R1              /TTCIN ZERO?                    *TSM*\n         BZ    NOTTSO1            /IF SO, NOT TSO                 *TSM*\n         L     R15,IEDRNMPT       /CONVERT TO OFFSET IN TERM TABLE*TSM*\n         BALR  R14,R15            /GO DO IT                       *TSM*\n         LR    R3,R1              /SAVE ON RETURN                 *TSM*\n         USING IEDQTRM,R3                                         *TSM*\n         L     R4,TRMDESTQ-1      /ADDRESS OF QCB                 *TSM*\n         USING IEDQQCB,R4                                         *TSM*\n         LOCOPT IF3270            /GET ADDRESS OF OPTION FIELD    *TSM*\n         TM    0(R15),SWFSMODE    /ALREADY IN FS MODE?            *TSM*\n         BZ    *+12               /NO, BYPASS                     *TSM*\n         MVI   QCBSATCT,0         /ZERO SIM ATTN LINE COUNT       *TSM*\n         MVI   QCBCARCT,0         /ZERO CARRIAGE COUNT            *TSM*\n         DROP  R2,R3,R4                                           *TSM*\nNOTTSO1  EQU   *                                                  *TSM*\nCOMMON   SIMATTN                                                  *TSM*\n><       DEL   1140000/1148000\n><       MOV   1172000/1174000 TO 1154000\n><       INS   1198000 BY 100\n         SPACE 1                                                  *TSM*\n*              THE FOLLOWING CODE IS ADDED AFTER OUTBUF:          *TSM*\n         SPACE 1                                                  *TSM*\n         L     R2,IEDADBUF       /BUFFER ADDRESS                  *TSM*\n         USING IEDQPRF,R2        /ADDRESS BUFFER PREFIX           *TSM*\n         TM    PRFSTAT1,PRFTSMSG /TSO MESSAGE ?                   *TSM*\n         BZ    NOTTSO2           /NO,BYPASS                       *TSM*\n         LOCOPT IF3270           /GET ADDRESS OF OPTION BYTE      *TSM*\n         LTR   R15,R15           /IF NONE, NOT 3270               *TSM*\n         BZ    NOTTSO2                                            *TSM*\n         OI    0(R15),SWFSMODE   /TENTATIVELY SET TO FS MODE      *TSM*\n         SPACE 1                                                  *TSM*\n*              NOTE THAT THIS CODE IS DEPENDENT ON THE FACT THAT  *TSM*\n*              MODULE IEDAYE USES AVTSAVE4 (IEDSAVE4+24) AS       *TSM*\n*              A WORK AREA FOR THE TYPE OF TPUT.                  *TSM*\n         TM    IEDSAVE4+24,X'60' /TPUT WITH FS ?                  *TSM*\n         BO    NOTTSO2           /YES, FINISHED                   *TSM*\n         SPACE 1                                                  *TSM*\n         NI    0(R15),255-SWFSMODE /NO, CANCEL FS MODE            *TSM*\nNOTTSO2  EQU   *                                                  *TSM*\n><       INS   1218000 BY 100\n         STITL '- DCB MAPPING'\n><       INS   1220000 BY 100\n         STITL '- QUEUE CONTROL BLOCK'\n         TQCBD\n         STITL '- LINE CONTROL BLOCK'\n         TLCBD\n         STITL '- STATION CONTROL BLOCK'\n         TSCBD\n         STITL '- TERMINAL TABLE ENTRY'\n         TTRMD\n         STITL '- BUFFER PREFIX'\n         TPRFD\n        REGEQU\n//ASM.SYSIN DD *\n%OFF\nTCM75122\n      INCLUDE  PARM(ORDER)\n         NAME  IEDQTCAM(R)\n//LKED.PARM DD DSN=SYS2.PARMLIB,DISP=SHR\n/*EOF\n./ ADD NAME=IEZCIB   0100-19106-19106-1238-00078-00078-00000-MZAP78  17\n*        %GOTO CIBBSL;  /* BILINGUAL MAPPING                         /*\n         MACRO\n&CIBNAME IEZCIB\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n*        COMMAND INPUT BUFFER MAPPING MACRO\n*\n*    AOS/1 RELEASE 1, 10/19/71, LEVEL=1\n*\n&CIBNAME DS    0D -     CIBPTR\n*\nCIBNEXT  DS    A -      ADDRESS OF NEXT CIB IN QUEUE (ZERO FOR LAST)\nCIBVERB  DS    C -      COMMAND VERB CODE\nCIBSTART EQU   X'04' -  COMMAND CODE FOR START\nCIBMODFY EQU   X'44' -  COMMAND CODE FOR MODIFY\nCIBSTOP  EQU   X'40' -  COMMAND CODE FOR STOP\nCIBMOUNT EQU   X'0C' -  COMMAND CODE FOR MOUNT\nCIBLEN   DS    FL1 -    LENGTH IN DOUBLEWORDS OF CIB INCLUDING CIBDATA\n         DS    XL4 -    RESERVED FOR CSCB COMPATIBILITY\nCIBTJID  DS    CL2 -    TSO TERMINAL JOB IDENTIFIER\nCIBCONID DS    C -      IDENTIFIER OF CONSOLE ISSUING COMMAND\n         DS    X -      RESERVED\nCIBDATLN DS    H -      LENGTH IN BYTES OF DATA IN CIBDATA\nCIBDATA  DS    CL8 -    DATA FROM COMMAND OPERAND\n*        (LENGTH OF CIBDATA IS A MULTIPLE OF EIGHT BYTES\n*        DEPENDING ON THE VALUE CONTAINED IN CIBLEN)\n*              START -  FOURTH POSITIONAL PARAMETER (PARMVALUE)\n*              MODIFY - RESIDUAL OPERAND IMAGE FOLLOWING COMMA\n*                       TERMINATING FIRST POSITIONAL PARAMETER\n*              STOP -   NONE (CIB GENERATED ONLY TO GIVE CONSOLE ID)\n*\n* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n*\n         MEND  , */\n* %CIBBSL  :  ;\n* /*                                                                 */\n* /*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */\n* /*                                                                 */\n* /*     COMMAND INPUT BUFFER MAPPING MACRO                          */\n*\n* /* AOS/1 RELEASE 1, 10/19/71, LEVEL=1                              */\n* /*                                                                 */\n* DECLARE\n*   1 CIBNAME  BASED(CIBPTR),\n*\n*    2 CIBNEXT  PTR(31),             /* ADDRESS OF NEXT CIB IN QUEUE\n*                                       (ZERO FOR LAST)              */\n*    2 CIBVERB  CHAR(1),             /* COMMAND VERB CODE            */\n* %DCL CIBSTART CHAR;\n* %CIBSTART='''04''X';               /* COMMAND CODE FOR START       */\n* %DCL CIBMODFY CHAR;\n* %CIBMODFY='''44''X';               /* COMMAND CODE FOR MODIFY      */\n* %DCL CIBSTOP  CHAR;\n* %CIBSTOP ='''40''X';               /* COMMAND CODE FOR STOP        */\n* %DCL CIBMOUNT CHAR;\n* %CIBMOUNT='''0C''X';               /* COMMAND CODE FOR MOUNT       */\n*    2 CIBLEN   PTR(8),              /* LENGTH IN DOUBLEWORDS OF CIB\n*                                       INCLUDING CIBDATA            */\n*    2 *        CHAR(4),             /* RESERVED FOR CSCB\n*                                       COMPATIBILITY                */\n*    2 CIBTJID  CHAR(2),             /* TSO TERMINAL JOB IDENTIFIER  */\n*    2 CIBCONID CHAR(1),             /* IDENTIFIER OF CONSOLE\n*                                       ISSUING COMMAND              */\n*    2 *        CHAR(1),             /* RESERVED                     */\n*    2 CIBDATLN FIXED(15),           /* LENGTH IN BYTES OF DATA IN\n*                                       CIBDATA                      */\n*    2 CIBDATA  CHAR(8);\n*                                    /* DATA FROM COMMAND OPERAND    */\n* /*     (LENGTH OF CIBDATA IS A MULTIPLE OF EIGHT BYTES             */\n* /*     DEPENDING ON THE VALUE CONTAINED IN CIBLEN)                 */\n* /*           START -  FOURTH POSITIONAL PARAMETER (PARMVALUE)      */\n* /*           MODIFY - RESIDUAL OPERAND IMAGE FOLLOWING COMMA       */\n* /*                    TERMINATING FIRST POSITIONAL PARAMETER       */\n* /*           STOP -   NONE (CIB GENERATED ONLY TO GIVE CONSOLE ID) */\n*\n* /*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */\n*\n./ ADD NAME=IEZIOB   0100-19106-19106-1238-00914-00914-00000-MZAP78  17\n*\n*        %GOTO  IOBL1;      /*\n         MACRO\n         IEZIOB &DSECT=YES   */\n*%IOBL1 : ;\n*\n*/*            INPUT/OUTPUT BLOCK                                    */\n*/*                                                                  */\n*/*  OS/VS2 RELEASE 1, OS/VS1 RELEASE 2, 05/25/72, LEVEL=5           */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */\n*/*             USING ON IOB GIVES ADDRESSABILITY FOR ALL SYMBOLS.   */\n*/*      PL/S - DCL (IOBPRPTR,IOBSTPTR) PTR                          */\n*/*                                                                  */\n*%GOTO IOBL2;  /*\n         SPACE 1\n         AIF   ('&DSECT' EQ 'NO').NODSCT\nIOB      DSECT\n         AGO   .CONT\n.NODSCT  ANOP\n         DS    0D\nIOB      EQU   *\n.CONT    ANOP\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*                    PREFIX SECTIONS OF THE IOB                       *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nIOBPREFX DS    0D\n         SPACE 1\n*                            ******************************************\n*                            *                                        *\nIOBQSAMC DS    0D *          *        QSAM,BSAM,BPAM PREFIX           *\nIOBBSAMC DS    0D *          *     CHAINED SCHEDULING ** 16 BYTES     *\nIOBBPAMC DS    0D *          *                                        *\n*                            ******************************************\n         SPACE 1\nIOBCFLG1 DS    B -       FLAG BYTE\nIOBRSV01 EQU   X'80',,C'X' RESERVED\nIOBRSV02 EQU   X'40',,C'X' RESERVED\nIOBRSV03 EQU   X'20',,C'X' RESERVED\nIOBRSV04 EQU   X'10',,C'X' RESERVED\nIOBPTST  EQU   X'08' --- NOTE OR POINT OPERATION IS IN PROCESS\nIOBABAPP EQU   X'04' --- ERROR PROCESSED ONCE BY ABMORMAL-END APPENDAGE\nIOBRSTCH EQU   X'02' --- RESTART CHANNEL\nIOBPCI   EQU   X'01' --- PCI INTERRUPT HAS OCCURRED\nIOBRSV05 DS    XL1 ----- RESERVED\nIOBCINOP DS    CL1 ----- OFFSET OF LAST I/O COMMAND FOR  INPUT\n*                        OPERATION(NOP CCW) FROM THE ICB ORIGIN\nIOBCONOP DS    CL1 ----- OFFSET OF LAST I/O COMMAND FOR  OUTPUT\n*                        OPERATION(NOP CCW) FROM THE ICB ORIGIN\nIOBCECB  DS    F ------- EVENT CONTROL BLOCK\nIOBCICB  DS    A ------- ADDR.OF FIRST ICB ON QUEUE\nIOBCNOPA DS    A ------- ADDR.OF NOP COMMAND AT END OF QUEUE\n         SPACE 2\n         ORG   IOBPREFX+8\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\nIOBQSAMN DS    0D *          *        QSAM,BSAM,BPAM PREFIX           *\nIOBBSAMN DS    0D *          *    NORMAL SCHEDULING *** 8 BYTES       *\nIOBBPAMN DS    0D *          *                                        *\n*                            ******************************************\n         SPACE 1\nIOBNIOBA DS    0A ------ ADDR.NEXT IOB ON CHAIN\nIOBNFLG1 DS    B -       FLAG BYTE\nIOBPRTOV EQU   X'80' --- 'PRTOV' HAS OCCURRED\nIOBWRITE EQU   X'40' --- 'WRITE' OPERATION IN PROCESS\nIOBREAD  EQU   X'20' --- 'READ' OPERATION IN PROCESS\nIOBUPDAT EQU   X'10' --- BLOCK IS TO BE UPDATED\nIOBBKSPC EQU   X'08' --- IOB BEING USED FOR BACKSPACE,CONTROL,NOTE/PT.\nIOBSPAN  EQU   X'04' --- THIS RECORD IS A SPANNED RECORD\nIOBRSV06 EQU   X'02',,C'X' RESERVED\nIOBFIRST EQU   X'01' --- THIS IS FIRST IOB ON CHAIN\nIOBNIOBB DS    AL3 ----- ADDR.NEXT IOB ON CHAIN\nIOBNECB  DS    F ------- EVENT CONTROL BLOCK\n         SPACE 2\n         ORG   IOBPREFX+8\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\nIOBBDAM  DS    0D *          *       BDAM PREFIX *** 8 BYTES          *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBDQADA DS    0A ------ ADDR.OF IOB WAITING TO DEQUEUE TRACKS\n*                        OCCUPIED BY SPANNED RECORDS\nIOBDEQIN DS    B ------- DEQUEUE LOOP INDICATOR\nIOBDEQ   EQU   X'80' --- TASK WITH SPANNED RECORD BEING DEQUEUED\nIOBRSV07 EQU   X'40',,C'X' RESERVED\nIOBRSV08 EQU   X'20',,C'X' RESERVED\nIOBRSV09 EQU   X'10',,C'X' RESERVED\nIOBRSV10 EQU   X'08',,C'X' RESERVED\nIOBRSV11 EQU   X'04',,C'X' RESERVED\nIOBRSV12 EQU   X'02',,C'X' RESERVED\nIOBRSV13 EQU   X'01',,C'X' RESERVED\nIOBDQADB DS    AL3 ----- ADDR.OF IOB WAITING TO DEQUEUE TRACKS\n*                        OCCUPIED BY SPANNED RECORDS\nIOBSWAP  DS    A ------- ADDR.OF SPANNED WORK AREA\n         SPACE 2\n         ORG   IOBPREFX+12\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\nIOBGAM   EQU   * *           *                                        *\nIOBQISAM EQU   * *           *       GAM,QISAM PREFIX *** 4 BYTES     *\n*                            ******************************************\n*\nIOBGQECB DS    F --- EVENT CONTROL BLOCK\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                    STANDARD SECTION OF THE IOB                      *\n*                                                                     *\n***********************************************************************\n         SPACE 3\nIOBSTDRD DS    0D\n         SPACE 1\nIOBFLAG1 DS    B -       FLAG BYTE\nIOBDATCH EQU   X'80' --- DATA CHAINING USED IN CHANNEL PROGRAM\nIOBCMDCH EQU   X'40' --- COMMAND CHAINING USED IN CHANNEL PROGRAM\nIOBERRTN EQU   X'20' --- ERROR ROUTINE IS IN CONTROL\nIOBRPSTN EQU   X'10' --- DEVICE IS TO BE REPOSITIONED\nIOBCYCCK EQU   X'08' --- CYCLIC REDUNDANCY CHECK NEEDED(TAPE ONLY)\nIOBFCREX EQU   X'08' --- FETCH COMMAND RETRY EXIT (DIRECT ACCESS ONLY)\nIOBIOERR EQU   X'04' --- I/O ERROR HAS OCCURRED\nIOBUNREL EQU   X'02' --- THIS I/O REQUEST IS UNRELATED(NON-SEQUENTIAL)\nIOBRSTRT EQU   X'01' --- RESTART ADDR.IN IOB TO BE USED\nIOBFLAG2 DS    B -       FLAG BYTE\nIOBHALT  EQU   X'80' --- HALT I/O HAS BEEN ISSUED BY SVC PURGE ROUTINE\nIOBSENSE EQU   X'40' --- ISSUE SENSE COMMAND AFTER DEVICE END OCCURS\nIOBPURGE EQU   X'20' --- IOB HAS BEEN PURGED *ALLOW I/O TO QUIESCE\nIOBRDHA0 EQU   X'10' --- HOME ADDRESS TO BE READ * NO SEEK NEEDED\nIOBALTTR EQU   X'08' --- NO TEST FOR OUT-OF-EXTENT * AN ALTERNATE TRACK\n*                        IS IN USE\nIOBSKUPD EQU   X'04' --- SEEK ADDRESS IS BEING UPDATED -CYLINDER END\n*                        OR FILE MASK VIOLATION HAS OCCURRED\nIOBSTATO EQU   X'02' --- DEVICE END STATUS HAS BEEN ORED WITH\n*                        CHANNEL END STATUS - GRAPHICS DEVICE\nIOBPNCH  EQU   X'01' --- TURNED ON BY QSAM WHEN ERROR RECOVERY IS TO\n*                        BE PROVIDED FOR THE 2540 CARD PUNCH\nIOBSENS0 DS    B ------- FIRST SENSE BYTE\nIOBS0B0  EQU   X'80' --- BIT 0 (DEVICE DEPENDENT)\nIOBS0B1  EQU   X'40' --- BIT 1 (DEVICE DEPENDENT)\nIOBS0B2  EQU   X'20' --- BIT 2 (DEVICE DEPENDENT)\nIOBS0B3  EQU   X'10' --- BIT 3 (DEVICE DEPENDENT)\nIOBS0B4  EQU   X'08' --- BIT 4 (DEVICE DEPENDENT)\nIOBS0B5  EQU   X'04' --- BIT 5 (DEVICE DEPENDENT)\nIOBS0B6  EQU   X'02' --- BIT 6 (DEVICE DEPENDENT)\nIOBS0B7  EQU   X'01' --- BIT 7 (DEVICE DEPENDENT)\nIOBSNSC9 EQU   X'01' --- CHANNEL 9 SENSED IN CARRIAGE TAPE\nIOBSENS1 DS    B ------- SECOND SENSE BYTE\nIOBS1B0  EQU   X'80' --- BIT 0 (DEVICE DEPENDENT)\nIOBS1B1  EQU   X'40' --- BIT 1 (DEVICE DEPENDENT)\nIOBS1B2  EQU   X'20' --- BIT 2 (DEVICE DEPENDENT)\nIOBS1B3  EQU   X'10' --- BIT 3 (DEVICE DEPENDENT)\nIOBS1B4  EQU   X'08' --- BIT 4 (DEVICE DEPENDENT)\nIOBS1B5  EQU   X'04' --- BIT 5 (DEVICE DEPENDENT)\nIOBS1B6  EQU   X'02' --- BIT 6 (DEVICE DEPENDENT)\nIOBS1B7  EQU   X'01' --- BIT 7 (DEVICE DEPENDENT)\nIOBECBPT DS    0A ------ ADDRESS OF ECB TO BE POSTED ON I/O COMPLETION\nIOBECBCC DS    CL1 ---- COMPLETION CODE FOR THIS I/O REQUEST\nIOBECBPB DS    AL3 ----- ADDRESS OF ECB TO BE POSTED ON I/O COMPLETION\nIOBFLAG3 DS    B ------- ERROR ROUTINE FLAG BYTE\nIOBCSW   DS    CL7 ----- LOW ORDER 7 BYTES OF CSW AT CHANNEL END\nIOBSTART DS    0A ------ ADDRESS OF CHANNEL PROGRAM\nIOBSIOCC DS    B ------- BITS 2 AND 3 = C.C. FROM SIO\nIOBSTRTB DS    AL3 ----- ADDRESS OF CHANNEL PROGRAM\nIOBDCBPT DS    0A ------ ADDRESS OF DATA CONTROL BLOCK FOR THIS IOB\nIOBRSV36 DS    XL1 ----- RESERVED\nIOBDCBPB DS    AL3 ----- ADDRESS OF DATA CONTROL BLOCK FOR THIS IOB\nIOBRESTR DS    0A ------ RESTART ADDRESS FOR ERROR RETRY\nIOBREPOS DS    CL1 ----- CODE USED TO REPOSITION DEVICE\nIOBRSTRB DS    AL3 ----- RESTART ADDRESS FOR ERROR RETRY\nIOBINCAM DS    0H ------ VALUE USED TO INCREMENT BLOCK COUNT ON TAPE\nIOBBTAMF DS    B ------- FLAG BYTE FOR BTAM\nIOBPRMER EQU   X'80' --- 'SAD','ENABLE' ISSUED BY OPEN CAUSED I/O ERROR\nIOBINUSE EQU   X'40' --- IOB IS IN USE\nIOBRSV14 EQU   X'20',,C'X' RESERVED\nIOBRSV15 EQU   X'10',,C'X' RESERVED\nIOBRSV16 EQU   X'08',,C'X' RESERVED\nIOBRSV17 EQU   X'04',,C'X' RESERVED\nIOBRFTMG EQU   X'02' --- INDICATES A REQUEST-FOR-TEST MESSAGE FROM A\n*                        REMOTE 3270                             ICB478\nIOBOLTST EQU   X'01' --- LINE IS UNDER ON-LINE TEST OPERATION\nIOBRSV19 DS    XL1 ----- RESERVED\n         SPACE 1\n         ORG   IOBINCAM\nIOBCRDCC DS    CL1 ----- OPTICAL READER: DATA CHECK ERROR COUNT\nIOBCRILC DS    CL1 ----- OPTICAL READER: INCORRECT LENGTH ERROR COUNT\n         SPACE 2\nIOBERRCT DS    H ------- NUMBER OF ERROR RETRIES\n         SPACE 3\n***********************************************************************\n*                                                                     *\n*                   EXTENSION SECTIONS OF THE IOB                     *\n*                                                                     *\n***********************************************************************\n         SPACE 1\nIOBEXTEN DS    0D\n         SPACE 1\n*                            ******************************************\n*                            *                                        *\n*                            *  DIRECT ACCESS EXTENSION *** 8 BYTES   *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBSEEK  DS    0CL8 ----\nIOBM     DS    CL1 ----- RELATIVE EXTENT NUMBER FOR THIS REQUEST(0-15)\nIOBBB    DS    0CL2 ---- BIN NUMBER(DATA CELL)\nIOBBB1   DS    CL1\nIOBBB2   DS    CL1\nIOBCC    DS    0CL2 ---- CYLINDER NUMBER\nIOBCC1   DS    CL1\nIOBCC2   DS    CL1\nIOBHH    DS    0CL2 ---- TRACK NUMBER\nIOBHH1   DS    CL1\nIOBHH2   DS    CL1\nIOBR     DS    CL1 ----- RECORD NUMBER\n         SPACE 1\n*                            ******************************************\n*                            *                                        *\n         ORG   IOBEXTEN *    * BTAM EXTENSION ** 40 BYTES + CHNL.PGM  *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBUCBX  DS    CL1 ----- LINE NUMBER IS USED TO LOCATE THE\n*                        PROPER UCB ADDRESS IN THE DEB.\nIOBWORK  DS    CL5 ----- WORK AREA USED BY ERROR ROUTINES AND\n*                        ON-LINE TERMINAL ROUTINES\nIOBRCVPT DS    CL1 ----- RECEIVED ACK (ACK-0 OR ACK-1)\nIOBSNDPT DS    CL1 ----- SENT ACK (ACK-0 OR ACK-1)\nIOBERCCW DS    CL8 ----- CCW AREA USED BY BTAM ERROR ROUTINES\nIOBERINF DS    CL16 ---- ERROR INFORMATION FIELD USED BY BTAM ERROR RTN\nIOBCPA   DS    0D ------ AREA FOR CHANNEL PROGRAMS.  LENGTH VARIES\n*                        ACCORDING TO TERMINAL AND OPTIONS\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\n         ORG   IOBSEEK+8 *   *        BISAM EXTENSION *** 16 BYTES    *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBCCWAD DS    A ------- FOR FIXED LENGTH RCRDS:PTR.TO FIRST CCW\n*                        FOR VARIABLE RECORDS:PTR.TO BUFFER(DYNAMIC\n*                        BUFFERING SPECIFIED)AFTER COMPLETION OF\n*                        READ FOR UPDATE(READ KU)\nIOBINDCT DS    B -       FLAG BYTE\nIOBDEQCP EQU   X'80' --- DEQUEUE CHANNEL PROGRAM FROM QUEUE\nIOBUNSCH EQU   X'40' --- UNSCHEDULER QUEUE\nIOBOVPTR EQU   X'20' --- PTR.TO OVERFLOW RECORD INDICATOR:\n*                        BIT = 0 MEANS 'DECBAREA' + 6 POINTS TO\n*                         OVERFLOW RECORD DATA\n*                        BIT = 1 MEANS 'DCBMSWA' POINTS TO OVERFLOW\n*                         RECORD KEY FOLLOWED BY DATA\nIOBKEYAD EQU   X'10' --- PTR.TO OVERFLOW RECORD KEY INDICATOR:\n*                        BIT = 0 MEANS 'DECBKEY' POINTS TO OVERFLOW\n*                         RECORD KEY\n*                        BIT = 1 MEANS 'DCBMSWA' + 8 POINTS TO\n*                         OVERFLOW RECORD KEY\nIOBRSV27 EQU   X'08',,C'X' RESERVED\nIOBRSV28 EQU   X'04',,C'X' RESERVED\nIOBRSV29 EQU   X'02',,C'X' RESERVED\nIOBCHNNL EQU   X'01' --- CHANNEL END STATUS INDICATOR:\n*                        BIT = 0 MEANS NORMAL CHANNEL END OCCURRED\n*                        BIT = 1 MEANS ABNORMAL END OCCURRED\nIOBUNSQR DS    B ------- REASON FOR UNSCHEDULED QUEUE\nIOBCPBSY EQU   X'80' --- CHANNEL PROGRAM CP1  OR CP2 BUSY\nIOBNTAV1 EQU   X'40' --- NO CP4,CP5 OR CP6 AVAILABLE\nIOBNTAV2 EQU   X'20' --- NO CP7 AVAILABLE\nIOBKNWR  EQU   X'10' --- WRITE KN IS IN EFFECT(UNSCHEDULED IOB IS FOR\n*                        WRITE KN)\nIOBKNRWR EQU   X'08' --- WRITE KN IS IN EFFECT(UNSCHEDULED IOB IS FOR\n*                        READ OR WRITE KN)\nIOBRSV30 EQU   X'04',,C'X' RESERVED\nIOBRSV31 EQU   X'02',,C'X' RESERVED\nIOBRSV32 EQU   X'01',,C'X' RESERVED\nIOBAPP   DS    CL1 ----- APPENDAGE CODE -(CONSULT SYSTEM CONTROL BLOCKS\n*                        MANUAL FOR CODE DEFINITIONS)\nIOBASYN  DS    CL1 ----- ASYNCHRONOUS ROUTINE CODE -(CONSULT SYSTEM\n*                        CONTROL BLOCKS MANUAL FOR CODE DEFINITIONS)\nIOBFCHAD DS    0A ------ FORWARD CHAIN ADDRESS\nIOBCOUNT DS    CL1 ----- WRITE CHECK COUNTER\nIOBFCHNB DS    AL3 ----- FORWARD CHAIN ADDRESS\nIOBBCHAD DS    A ------  BACKWARD CHAIN ADDRESS\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\n         ORG   IOBEXTEN *    *      GAM EXTENSION *** 40 BYTES        *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBUCBXG DS    CL1 ----- UCB INDEX\nIOBRSV37 DS    XL3 ----- RESERVED\nIOBNXTPT DS    0A ------ PTR.TO NEXT AVAILABLE IOB\n*                        ZERO IF LAST IOB\nIOBSTATA DS    B ------- STATUS SWITCH\nIOBAVLFL EQU   X'80' --- IF BIT IS 0,IOB IS AVAILABLE\n*                        IF BIT IS 1,IOB IS NOT AVAILABLE\nIOBRSV20 EQU   X'40',,C'X' RESERVED\nIOBRSV21 EQU   X'20',,C'X' RESERVED\nIOBRSV22 EQU   X'10',,C'X' RESERVED\nIOBRSV23 EQU   X'08',,C'X' RESERVED\nIOBRSV24 EQU   X'04',,C'X' RESERVED\nIOBRSV25 EQU   X'02',,C'X' RESERVED\nIOBRSV26 EQU   X'01',,C'X' RESERVED\nIOBNXTPB DS    AL3 ----- PTR.TO NEXT AVAILABLE IOB\n*                        ZERO IF LAST IOB\nIOBCCW   DS    CL32 ---- CHANNEL COMMAND WORDS USED TO TRANSFER DATA\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\n         ORG   IOBSEEK+8 *   *     QISAM EXTENSION *** 2 BYTES        *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nW1IEXTEN DS    0CL2 ---- APPENDAGE\nW1OEXTEN DS    CL2 -----  CODES\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\n         ORG   IOBSEEK+8 *   * BDAM EXTENSION ** 40 BYTES + CHNL.PGM  *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBDBYTR DS    H ------- NUMBER OF UNUSED BYTES ON TRACK\nIOBDIOBS DS    H ------- OVERALL SIZE OF THE IOB\nIOBDPLAD DS    0A ------ ADDRESS OF NEXT IOB IN POOL OF IOB'S\nIOBDAYLI DS    B ------- ALL BITS ZERO INDICATE AVAILABILITY OF IOB\nIOBDPLB  DS    AL3 ----- ADDRESS OF NEXT IOB IN POOL OF IOB'S\nIOBDTYPE DS    B ------- TYPE OF REQUEST AND SPECIFIED OPTIONS\nIOBVERFY EQU   X'80' --- VERIFY\nIOBOVFLO EQU   X'40' --- OVERFLOW\nIOBEXTSC EQU   X'20' --- EXTENDED SEARCH\nIOBFDBCK EQU   X'10' --- FEEDBACK\nIOBACTAD EQU   X'08' --- ACTUAL ADDRESSING\nIOBDYNBF EQU   X'04' --- DYNAMIC BUFFERING\nIOBRDEXC EQU   X'02' --- READ EXCLUSIVE\nIOBRELBL EQU   X'01' --- RELATIVE BLOCK ADDRESSING\nIOBDTYP2 DS    B ------- SECOND BYTE OF OPTIONS AND REQUESTS\nIOBSKEY  EQU   X'80' --- KEY ADDRESS CODED AS 'S'\nIOBSBLKL EQU   X'40' --- BLOCK LENGTH CODED AS 'S'\nIOBSUFFX EQU   X'30' --- INDICATES TYPE OF SUFFIX('R' OR 'RU')\nIOBRQUST EQU   X'08' --- BIT = 1 MEANS READ; BIT = 0 MEANS WRITE;\nIOBTYPE  EQU   X'04' --- BIT = 1 MEANS KEY TYPE\n*                        BIT = 0 MEANS ID TYPE\nIOBADDTY EQU   X'02' --- ADD TYPE\nIOBRELEX EQU   X'01' --- RELEX MACRO ISSUED\nIOBDSTAT DS    0CL2  --- STATUS OF THE REQUEST\nIOBSTAT1 DS    B -       FLAG BYTE\nIOBABNRM EQU   X'80' --- ABNORMAL COMPLETION\nIOBNEWVL EQU   X'40' --- ON EXTENDED SEARCH,THE NEXT EXTENT IS ON A NEW\n*                        VOLUME.THE ASI ROUTINE MUST ISSUE THE EXCP\n*                        MACRO;END OF EXTENT APPENDAGE CANNOT.\nIOBRSV33 EQU   X'20',,C'X' RESERVED\nIOBPASS2 EQU   X'10' --- ON EXTENDED SEARCH,INDICATES TO RELATIVE BLOCK\n*                        CONVERSION ROUTINE THAT SECOND PASS OF A\n*                        TWO-PASS CONV.ROUTINE HAS COMPLETED\nIOBENQUE EQU   X'08' --- RECORD ENQUEUED(EXCLUSIVE CONTROL REQUEST)\nIOBBUFF  EQU   X'04' --- BUFFER ASSIGNED TO THIS IOB\nIOBADDVU EQU   X'02' --- V OR U TYPE RECORD BEING ADDED TO DATA SET\nIOBSIORT EQU   X'01' --- INDICATES TO DYNAMIC BUFFERING ROUTINE THAT\n*                        IT WAS ENTERED FROM,AND IS TO RETURN TO,THE\n*                        START I/O APPENDAGE MODULE\nIOBSTAT2 DS    CL1 ----- ERROR CODE FOR ABNORMAL COMPLETION USED AS\n*                        POST CODE IN ECB\nIOBDCPND DS    A ------- ADDRESS OF LOCATION WHERE CHANNEL END PROGRAM\n*                        SHOULD END\nIOBDBYTN DS    H ------- NUMBER OF BYTES NEEDED ON A TRACK TO WRITE A\n*                        NEW BLOCK\nIOBRSV34 DS    XL2 ----- RESERVED\nIOBDQPTR DS    A ------- PTR.TO IOB FOR NEXT I/O OPERATION TO EXECUTE\nIOBRSV35 DS    XL8 ----- RESERVED\nIOBDNCRF DS    CL8 ----- COUNT FIELD FOR NEW BLOCK\nIOBCHNPR DS    0D ------ CHANNEL PROGRAM\n         SPACE 2\n*                            ******************************************\n*                            *                                        *\n         ORG   IOBSEEK+8 *   * NEW ACCESS METHOD EXTENSION - 24 BYTES *\n*                            *                                        *\n*                            ******************************************\n         SPACE 1\nIOBSEEK2 DS    0CL8 -    SEEK FIELD 2                            ICB435\nIOBSK2M  DS    C -       EXTENT NUMBER                           ICB435\nIOBSK2BB DS    CL2 -     BIN NUMBER                              ICB435\nIOBSK2CC DS    CL2 -     CYLINDER NUMBER                         ICB435\nIOBSK2HH DS    CL2 -     HEAD NUMBER                             ICB435\nIOBSK2R  DS    C -       RECORD NUMBER                           ICB435\nIOBBUFC  DS    A -       ADDRESS OF ASSOCIATED BUFFER CONTROL BLOCK\n*                                                                ICB435\nIOBREADA DS    A -       ADDRESS OF FIRST UNDONE READ CHANNEL PROGRAM\n*                        SEGMENT                                 ICB435\nIOBNEXTA DS    A -       ADDRESS OF NEXT ACTIVE IOB              ICB435\nIOBRDCHP DS    A -       ADDRESS OF READ CHANNEL PROGRAM         ICB435\n         MEND  , */\n* %IOBL2 : ;\n*\n* DECLARE\n*   1 IOBPREFX BASED(IOBPRPTR) BDY(WORD),\n*\n* /* *************************************************************** */\n* /*                                                                 */\n* /*                 PREFIX SECTIONS OF THE IOB                      */\n* /*                                                                 */\n* /* *************************************************************** */\n*\n*                        /* **************************************** */\n*                        /*    QSAM,BSAM,BPAM PREFIX                 */\n*                        /*    CHAINED SCHEDULING *** 16 BYTES       */\n*                        /* **************************************** */\n*\n*    2 IOBCFLG1 CHAR(1),\n*     3 IOBRSV01 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV02 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV03 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV04 BIT(1),             /* RESERVED                     */\n*     3 IOBPTST  BIT(1),             /* NOTE OR POINT OPERATION IS\n*                                       IN PROCESS                   */\n*     3 IOBABAPP BIT(1),             /* ERROR PROCESSED ONCE BY\n*                                       ABMORMAL-END APPENDAGE       */\n*     3 IOBRSTCH BIT(1),             /* RESTART CHANNEL              */\n*     3 IOBPCI   BIT(1),             /* PCI INTERRUPT HAS OCCURRED   */\n*    2 IOBRSV05 CHAR(1),             /* RESERVED                     */\n*    2 IOBCINOP CHAR(1),             /* OFFSET OF LAST I/O COMMAND\n*                                       FOR OPERATION(NOP CCW) FROM\n*                                       THE ICB ORIGIN               */\n*    2 IOBCONOP CHAR(1),             /* OFFSET OF LAST I/O COMMAND\n*                                       FOR OPERATION(NOP CCW) FROM\n*                                       THE ICB ORIGIN               */\n*    2 IOBCECB  FIXED(31),           /* EVENT CONTROL BLOCK          */\n*    2 IOBCICB  PTR(31),             /* ADDR.OF FIRST ICB ON QUEUE   */\n*    2 IOBCNOPA PTR(31);             /* ADDR.OF NOP COMMAND AT END\n*                                       OF QUEUE                     */\n*\n*                        /* **************************************** */\n*                        /*    QSAM,BSAM,BPAM PREFIX                 */\n*                        /*    NORMAL SCHEDULING *** 8 BYTES         */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG01\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA1;\n*       BASED(ADDR(IOBPREFX)+8) BDY(WORD),\n*%GOTO IOBA2;\n*%IOBA1 : ;\n*       DEF(IOBPREFX) POS(9) BDY(WORD),\n*%IOBA2 : ;\n*    2 IOBNIOBA PTR(31),             /* ADDR.NEXT IOB ON CHAIN       */\n*     3 IOBNFLG1 CHAR(1),            /* FLAG BYTE                    */\n*      4 IOBPRTOV BIT(1),            /* 'PRTOV' HAS OCCURRED         */\n*      4 IOBWRITE BIT(1),            /* 'WRITE' OPERATION IN PROCESS */\n*      4 IOBREAD  BIT(1),            /* 'READ' OPERATION IN PROCESS  */\n*      4 IOBUPDAT BIT(1),            /* BLOCK IS TO BE UPDATED       */\n*      4 IOBBKSPC BIT(1),            /* IOB BEING USED FOR\n*                                       BACKSPACE,CONTROL,NOTE/PT.   */\n*      4 IOBSPAN  BIT(1),            /* THIS RECORD IS A SPANNED\n*                                       RECORD                       */\n*      4 IOBRSV06 BIT(1),            /* RESERVED                     */\n*      4 IOBFIRST BIT(1),            /* THIS IS FIRST IOB ON CHAIN   */\n*     3 IOBNIOBB PTR(24),            /* ADDR.NEXT IOB ON CHAIN       */\n*    2 IOBNECB  FIXED(31);           /* EVENT CONTROL BLOCK          */\n*\n*                        /* **************************************** */\n*                        /*    BDAM PREFIX *** 8 BYTES               */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG02\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA3;\n*       BASED(ADDR(IOBPREFX)+8) BDY(WORD),\n*%GOTO IOBA4;\n*%IOBA3 : ;\n*       DEF(IOBPREFX) POS(9) BDY(WORD),\n*%IOBA4 : ;\n*    2 IOBDQADA PTR(31),             /* ADDR.OF IOB WAITING TO\n*                                       DEQUEUE TRACKS OCCUPIED BY\n*                                       SPANNED RECORDS              */\n*     3 IOBDEQIN CHAR(1),            /* DEQUEUE LOOP INDICATOR       */\n*      4 IOBDEQ   BIT(1),            /* TASK WITH SPANNED RECORD\n*                                       BEING DEQUEUED               */\n*      4 IOBRSV07 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV08 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV09 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV10 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV11 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV12 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV13 BIT(1),            /* RESERVED                     */\n*     3 IOBDQADB PTR(24),            /* ADDR.OF IOB WAITING TO\n*                                       DEQUEUE TRACKS OCCUPIED BY\n*                                       SPANNED RECORDS              */\n*    2 IOBSWAP  PTR(31);             /* ADDR.OF SPANNED WORK AREA    */\n*\n*                        /* **************************************** */\n*                        /*    GAM,QISAM PREFIX *** 4 BYTES          */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG03\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA5;\n*       BASED(ADDR(IOBPREFX)+12) BDY(WORD),\n*%GOTO IOBA6;\n*%IOBA5 : ;\n*       DEF(IOBPREFX) POS(13) BDY(WORD),\n*%IOBA6 : ;\n*    2 IOBGQECB FIXED(31);           /* EVENT CONTROL BLOCK          */\n*\n* /* *************************************************************** */\n* /*                                                                 */\n* /*                 STANDARD SECTION OF THE IOB                     */\n* /*                                                                 */\n* /* *************************************************************** */\n*\n* DECLARE\n*   1 IOBSTDRD BASED(IOBSTPTR) BDY(WORD),\n*    2 IOBFLAG1 CHAR(1),             /* FLAG BYTE                    */\n*     3 IOBDATCH BIT(1),             /* DATA CHAINING USED IN\n*                                       CHANNEL PROGRAM              */\n*     3 IOBCMDCH BIT(1),             /* COMMAND CHAINING USED IN\n*                                       CHANNEL PROGRAM              */\n*     3 IOBERRTN BIT(1),             /* ERROR ROUTINE IS IN CONTROL  */\n*     3 IOBRPSTN BIT(1),             /* DEVICE IS TO BE REPOSITIONED */\n*     3 IOBCYCCK BIT(1),             /* CYCLIC REDUNDANCY CHECK\n*                                       NEEDED(TAPE ONLY)            */\n*      4 IOBFCREX BIT(1),            /* FETCH COMMAND RETRY EXIT\n*                                       (DIRECT ACCESS ONLY)         */\n*     3 IOBIOERR BIT(1),             /* I/O ERROR HAS OCCURRED       */\n*     3 IOBUNREL BIT(1),             /* THIS I/O REQUEST IS\n*                                       UNRELATED(NON-SEQUENTIAL)    */\n*     3 IOBRSTRT BIT(1),             /* RESTART ADDR.IN IOB TO BE\n*                                       USED                         */\n*    2 IOBFLAG2 CHAR(1),             /* FLAG BYTE                    */\n*     3 IOBHALT  BIT(1),             /* HALT I/O HAS BEEN ISSUED BY\n*                                       SVC PURGE ROUTINE            */\n*     3 IOBSENSE BIT(1),             /* ISSUE SENSE COMMAND AFTER\n*                                       DEVICE END OCCURS            */\n*     3 IOBPURGE BIT(1),             /* IOB HAS BEEN PURGED *ALLOW\n*                                       I/O TO QUIESCE               */\n*     3 IOBRDHA0 BIT(1),             /* HOME ADDRESS TO BE READ * NO\n*                                       SEEK NEEDED                  */\n*     3 IOBALTTR BIT(1),             /* NO TEST FOR OUT-OF-EXTENT *\n*                                       AN ALTERNATE TRACKIS IN USE  */\n*     3 IOBSKUPD BIT(1),             /* SEEK ADDRESS IS BEING\n*                                       UPDATED -CYLINDER END OR\n*                                       FILE MASK VIOLATION HAS\n*                                       OCCURRED                     */\n*     3 IOBSTATO BIT(1),             /* DEVICE END STATUS HAS BEEN\n*                                       ORED WITH CHANNEL END STATUS\n*                                       - GRAPHICS DEVICE            */\n*     3 IOBPNCH  BIT(1),             /* TURNED ON BY QSAM WHEN ERROR\n*                                       RECOVERY IS TO BE PROVIDED\n*                                       FOR THE 2540 CARD PUNCH      */\n*    2 IOBSENS0 CHAR(1),             /* FIRST SENSE BYTE             */\n*     3 IOBS0B0  BIT(1),             /* BIT 0 (DEVICE DEPENDENT)     */\n*     3 IOBS0B1  BIT(1),             /* BIT 1 (DEVICE DEPENDENT)     */\n*     3 IOBS0B2  BIT(1),             /* BIT 2 (DEVICE DEPENDENT)     */\n*     3 IOBS0B3  BIT(1),             /* BIT 3 (DEVICE DEPENDENT)     */\n*     3 IOBS0B4  BIT(1),             /* BIT 4 (DEVICE DEPENDENT)     */\n*     3 IOBS0B5  BIT(1),             /* BIT 5 (DEVICE DEPENDENT)     */\n*     3 IOBS0B6  BIT(1),             /* BIT 6 (DEVICE DEPENDENT)     */\n*     3 IOBS0B7  BIT(1),             /* BIT 7 (DEVICE DEPENDENT)     */\n*      4 IOBSNSC9 BIT(1),            /* CHANNEL 9 SENSED IN\n*                                       CARRIAGE TAPE                */\n*    2 IOBSENS1 CHAR(1),             /* SECOND SENSE BYTE            */\n*     3 IOBS1B0  BIT(1),             /* BIT 0 (DEVICE DEPENDENT)     */\n*     3 IOBS1B1  BIT(1),             /* BIT 1 (DEVICE DEPENDENT)     */\n*     3 IOBS1B2  BIT(1),             /* BIT 2 (DEVICE DEPENDENT)     */\n*     3 IOBS1B3  BIT(1),             /* BIT 3 (DEVICE DEPENDENT)     */\n*     3 IOBS1B4  BIT(1),             /* BIT 4 (DEVICE DEPENDENT)     */\n*     3 IOBS1B5  BIT(1),             /* BIT 5 (DEVICE DEPENDENT)     */\n*     3 IOBS1B6  BIT(1),             /* BIT 6 (DEVICE DEPENDENT)     */\n*     3 IOBS1B7  BIT(1),             /* BIT 7 (DEVICE DEPENDENT)     */\n*    2 IOBECBPT PTR(31),             /* ADDRESS OF ECB TO BE POSTED\n*                                       ON I/O COMPLETION            */\n*     3 IOBECBCC CHAR(1),            /* COMPLETION CODE FOR THIS I/O\n*                                       REQUEST                      */\n*     3 IOBECBPB PTR(24),            /* ADDRESS OF ECB TO BE POSTED\n*                                       ON I/O COMPLETION            */\n*    2 IOBFLAG3 CHAR(1),             /* ERROR ROUTINE FLAG BYTE      */\n*    2 IOBCSW   CHAR(7),             /* LOW ORDER 7 BYTES OF CSW AT\n*                                       CHANNEL END                  */\n*    2 IOBSTART PTR(31),             /* ADDRESS OF CHANNEL PROGRAM   */\n*     3 IOBSIOCC CHAR(1),            /* BITS 2 AND 3 = C.C. FROM SIO */\n*     3 IOBSTRTB PTR(24),            /* ADDRESS OF CHANNEL PROGRAM   */\n*    2 IOBDCBPT PTR(31),             /* ADDRESS OF DATA CONTROL\n*                                       BLOCK FOR THIS IOB           */\n*     3 IOBRSV36 CHAR(1),            /* RESERVED                     */\n*     3 IOBDCBPB PTR(24),            /* ADDRESS OF DATA CONTROL\n*                                       BLOCK FOR THIS IOB           */\n*    2 IOBRESTR PTR(31),             /* RESTART ADDRESS FOR ERROR\n*                                       RETRY                        */\n*     3 IOBREPOS CHAR(1),            /* CODE USED TO REPOSITION\n*                                       DEVICE                       */\n*     3 IOBRSTRB PTR(24),            /* RESTART ADDRESS FOR ERROR\n*                                       RETRY                        */\n*    2 IOBINCAM FIXED(15) BDY(WORD), /* VALUE USED TO INCREMENT\n*                                       BLOCK COUNT ON TAPE          */\n*     3 IOBBTAMF CHAR(1),            /* FLAG BYTE FOR BTAM           */\n*      4 IOBPRMER BIT(1),            /* 'SAD','ENABLE' ISSUED BY\n*                                       OPEN CAUSED I/O ERROR        */\n*      4 IOBINUSE BIT(1),            /* IOB IS IN USE                */\n*      4 IOBRSV14 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV15 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV16 BIT(1),            /* RESERVED                     */\n*      4 IOBRSV17 BIT(1),            /* RESERVED                     */\n*      4 IOBRFTMG BIT(1),            /* INDICATES A REQUEST-FOR-TEST\n*                                       MESSAGE FROM A REMOTE 3270\n*                                                              ICB478*/\n*      4 IOBOLTST BIT(1),            /* LINE IS UNDER ON-LINE TEST\n*                                       OPERATION                    */\n*     3 IOBRSV19 CHAR(1),            /* RESERVED                     */\n*    2 IOBERRCT FIXED(15);           /* NUMBER OF ERROR RETRIES      */\n*\n* DECLARE 1 IOBORG04\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA7;\n*       BASED(ADDR(IOBINCAM)) BDY(WORD),\n*%GOTO IOBA8;\n*%IOBA7 : ;\n*       DEF(IOBINCAM) BDY(WORD),\n*%IOBA8 : ;\n*    2 IOBCRDCC CHAR(1),    /* OPTICAL READER:DATA CHECK ERROR COUNT */\n*    2 IOBCRILC CHAR(1);    /* OPTICAL RDR:INCORRECT LENGTH ERROR CT.*/\n*\n*\n* /* *************************************************************** */\n* /*                                                                 */\n* /*                EXTENSION SECTIONS OF THE IOB                    */\n* /*                                                                 */\n* /* *************************************************************** */\n*\n*                        /* **************************************** */\n*                        /*    DIRECT ACCESS EXTENSION *** 8 BYTES   */\n*                        /* **************************************** */\n*\n* DECLARE\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA9;\n*   1 IOBEXTEN BASED(ADDR(IOBSTDRD)+32) BDY(WORD),\n*%GOTO IOBA10;\n*%IOBA9 : ;\n*   1 IOBEXTEN DEF(IOBSTDRD) POS(33) BDY(WORD),\n*%IOBA10 : ;\n*    2 IOBSEEK  CHAR(8) BDY(WORD),\n*     3 IOBM     CHAR(1),            /* RELATIVE EXTENT NUMBER FOR\n*                                       THIS REQUEST(0-15)           */\n*     3 IOBBB    CHAR(2),            /* BIN NUMBER(DATA CELL)        */\n*      4 IOBBB1   CHAR(1),\n*      4 IOBBB2   CHAR(1),\n*     3 IOBCC    CHAR(2),            /* CYLINDER NUMBER              */\n*      4 IOBCC1   CHAR(1),\n*      4 IOBCC2   CHAR(1),\n*     3 IOBHH    CHAR(2),            /* TRACK NUMBER                 */\n*      4 IOBHH1   CHAR(1),\n*      4 IOBHH2   CHAR(1),\n*     3 IOBR     CHAR(1);            /* RECORD NUMBER                */\n*\n*                        /* **************************************** */\n*                        /*    BTAM EXTENSION *** 40 BYTES +         */\n*                        /*                   CHANNEL PROGRAM        */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG05\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA11;\n*       BASED(ADDR(IOBEXTEN)) BDY(WORD),\n*%GOTO IOBA12;\n*%IOBA11 : ;\n*       DEF(IOBEXTEN) BDY(WORD),\n*%IOBA12 : ;\n*    2 IOBUCBX  CHAR(1),             /* LINE NUMBER IS USED TO\n*                                       LOCATE THE PROPER UCB\n*                                       ADDRESS IN THE DEB.          */\n*    2 IOBWORK  CHAR(5),             /* WORK AREA USED BY ERROR\n*                                       ROUTINES AND ON-LINE\n*                                       TERMINAL ROUTINES            */\n*    2 IOBRCVPT CHAR(1),             /* RECEIVED ACK (ACK-0 OR ACK-1)*/\n*    2 IOBSNDPT CHAR(1),             /* SENT ACK (ACK-0 OR ACK-1) */\n*    2 IOBERCCW CHAR(8) BDY(WORD),   /* CCW AREA USED BY BTAM ERROR\n*                                       ROUTINES                     */\n*    2 IOBERINF CHAR(16) BDY(WORD),  /* ERROR INFORMATION FIELD USED\n*                                       BY BTAM ERROR RTN            */\n*    2 IOBCPA   CHAR(8) BDY(WORD);   /* AREA FOR CHANNEL PROGRAMS.\n*                                       LENGTH VARIES ACCORDING TO\n*                                       TERMINAL AND OPTIONS         */\n*\n*                        /* **************************************** */\n*                        /*    GAM EXTENSION *** 40 BYTES            */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG06\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA13;\n*       BASED(ADDR(IOBEXTEN)) BDY(WORD),\n*%GOTO IOBA14;\n*%IOBA13 : ;\n*       DEF(IOBEXTEN) BDY(WORD),\n*%IOBA14 : ;\n*     3 IOBUCBXG CHAR(1),            /* UCB INDEX                    */\n*     3 IOBRSV37 CHAR(3),            /* RESERVED                     */\n*     3 IOBNXTPT PTR(31),            /* PTR.TO NEXT AVAILABLE IOB\n*                                       ZERO IF LAST IOB             */\n*      4 IOBSTATA CHAR(1),           /* STATUS SWITCH                */\n*       5 IOBAVLFL BIT(1),           /* IF BIT IS 0,IOB IS AVAILABLE\n*                                       IF BIT IS 1,IOB IS NOT\n*                                       AVAILABLE                    */\n*       5 IOBRSV20 BIT(1),           /* RESERVED                     */\n*       5 IOBRSV21 BIT(1),           /* RESERVED                     */\n*       5 IOBRSV22 BIT(1),           /* RESERVED                     */\n*       5 IOBRSV23 BIT(1),           /* RESERVED                     */\n*       5 IOBRSV24 BIT(1),           /* RESERVED                     */\n*       5 IOBRSV25 BIT(1),           /* RESERVED                     */\n*       5 IOBRSV26 BIT(1),           /* RESERVED                     */\n*      4 IOBNXTPB PTR(24),           /* PTR.TO NEXT AVAILABLE IOB\n*                                       ZERO IF LAST IOB             */\n*     3 IOBCCW   CHAR(32) BDY(WORD); /* CHANNEL COMMAND WORDS USED\n*                                       TO TRANSFER DATA             */\n*\n*                        /* **************************************** */\n*                        /*    QISAM EXTENSION *** 2 BYTES           */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG07\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA15;\n*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),\n*%GOTO IOBA16;\n*%IOBA15 : ;\n*       DEF(IOBEXTEN) POS(9) BDY(WORD),\n*%IOBA16 : ;\n*    2 W1OEXTEN CHAR(2),             /* CODES                        */\n*     3 W1IEXTEN CHAR(2);            /* APPENDAGE                    */\n*\n*                        /* **************************************** */\n*                        /*    BISAM EXTENSION *** 16 BYTES          */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG08\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA17;\n*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),\n*%GOTO IOBA18;\n*%IOBA17 : ;\n*       DEF(IOBEXTEN) POS(9) BDY(WORD),\n*%IOBA18 : ;\n*    2 IOBCCWAD PTR(31),             /* FOR FIXED LENGTH\n*                                       RCRDS:PTR.TO FIRST CCW FOR\n*                                       VARIABLE RECORDS:PTR.TO\n*                                       BUFFER(DYNAMIC BUFFERING\n*                                       SPECIFIED)AFTER COMPLETION\n*                                       OF  READ FOR UPDATE(READ KU) */\n*    2 IOBINDCT CHAR(1),             /* FLAG BYTE                    */\n*     3 IOBDEQCP BIT(1),             /* DEQUEUE CHANNEL PROGRAM FROM\n*                                       QUEUE                        */\n*     3 IOBUNSCH BIT(1),             /* UNSCHEDULER QUEUE            */\n*     3 IOBOVPTR BIT(1),             /* PTR.TO OVERFLOW RECORD\n*                                       INDICATOR: BIT = 0 MEANS\n*                                       'DECBAREA' + 6 POINTS TO\n*                                       OVERFLOW RECORD DATA BIT = 1\n*                                       MEANS 'DCBMSWA' POINTS TO\n*                                       OVERFLOW RECORD KEY FOLLOWED\n*                                       BY DATA                      */\n*     3 IOBKEYAD BIT(1),             /* PTR.TO OVERFLOW RECORD KEY\n*                                       INDICATOR: BIT = 0 MEANS\n*                                       'DECBKEY' POINTS TO OVERFLOW\n*                                       RECORD KEY BIT = 1 MEANS\n*                                       'DCBMSWA' + 8 POINTS TO\n*                                       OVERFLOW RECORD KEY          */\n*     3 IOBRSV27 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV28 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV29 BIT(1),             /* RESERVED                     */\n*     3 IOBCHNNL BIT(1),             /* CHANNEL END STATUS\n*                                       INDICATOR:  BIT = 0 MEANS\n*                                       NORMAL CHANNEL END OCCURRED\n*                                       BIT = 1 MEANS ABNORMAL END\n*                                       OCCURRED                     */\n*    2 IOBUNSQR CHAR(1),             /* REASON FOR UNSCHEDULED QUEUE */\n*     3 IOBCPBSY BIT(1),             /* CHANNEL PROGRAM CP1          */\n*     3 IOBNTAV1 BIT(1),             /* NO CP4,CP5 OR CP6 AVAILABLE  */\n*     3 IOBNTAV2 BIT(1),             /* NO CP7 AVAILABLE             */\n*     3 IOBKNWR  BIT(1),             /* WRITE KN IS IN\n*                                       EFFECT(UNSCHEDULED IOB IS\n*                                       FOR  WRITE KN)               */\n*     3 IOBKNRWR BIT(1),             /* WRITE KN IS IN\n*                                       EFFECT(UNSCHEDULED IOB IS\n*                                       FOR  READ OR WRITE KN)       */\n*     3 IOBRSV30 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV31 BIT(1),             /* RESERVED                     */\n*     3 IOBRSV32 BIT(1),             /* RESERVED                     */\n*    2 IOBAPP   CHAR(1),             /* APPENDAGE CODE -(CONSULT\n*                                       SYSTEM CONTROL BLOCKSMANUAL\n*                                       FOR CODE DEFINITIONS)        */\n*    2 IOBASYN  CHAR(1),             /* ASYNCHRONOUS ROUTINE CODE\n*                                       -(CONSULT SYSTEM CONTROL\n*                                       BLOCKS MANUAL FOR CODE\n*                                       DEFINITIONS)                 */\n*    2 IOBFCHAD PTR(31),             /* FORWARD CHAIN ADDRESS        */\n*     3 IOBCOUNT CHAR(1),            /* WRITE CHECK COUNTER          */\n*     3 IOBFCHNB PTR(24),            /* FORWARD CHAIN ADDRESS        */\n*    2 IOBBCHAD PTR(31);             /* BACKWARD CHAIN ADDRESS       */\n*\n*                        /* **************************************** */\n*                        /*    BDAM EXTENSION *** 40 BYTES +         */\n*                        /*                   CHANNEL PROGRAM        */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG09\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA19;\n*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),\n*%GOTO IOBA20;\n*%IOBA19 : ;\n*       DEF(IOBEXTEN) POS(9) BDY(WORD),\n*%IOBA20 : ;\n*    2 IOBDBYTR FIXED(15),           /* NUMBER OF UNUSED BYTES ON\n*                                       TRACK                        */\n*    2 IOBDIOBS FIXED(15),           /* OVERALL SIZE OF THE IOB      */\n*    2 IOBDPLAD PTR(31),             /* ADDRESS OF NEXT IOB IN POOL\n*                                       OF IOB'S                     */\n*     3 IOBDAYLI CHAR(1),            /* ALL BITS ZERO INDICATE\n*                                       AVAILABILITY OF IOB          */\n*     3 IOBDPLB  PTR(24),            /* ADDRESS OF NEXT IOB IN POOL\n*                                       OF IOB'S                     */\n*    2 IOBDTYPE CHAR(1),             /* TYPE OF REQUEST AND\n*                                       SPECIFIED OPTIONS            */\n*     3 IOBVERFY BIT(1),             /* VERIFY                       */\n*     3 IOBOVFLO BIT(1),             /* OVERFLOW                     */\n*     3 IOBEXTSC BIT(1),             /* EXTENDED SEARCH              */\n*     3 IOBFDBCK BIT(1),             /* FEEDBACK                     */\n*     3 IOBACTAD BIT(1),             /* ACTUAL ADDRESSING            */\n*     3 IOBDYNBF BIT(1),             /* DYNAMIC BUFFERING            */\n*     3 IOBRDEXC BIT(1),             /* READ EXCLUSIVE               */\n*     3 IOBRELBL BIT(1),             /* RELATIVE BLOCK ADDRESSING    */\n*    2 IOBDTYP2 CHAR(1),             /* SECOND BYTE OF OPTIONS AND\n*                                       REQUESTS                     */\n*     3 IOBSKEY  BIT(1),             /* KEY ADDRESS CODED AS 'S'     */\n*     3 IOBSBLKL BIT(1),             /* BLOCK LENGTH CODED AS 'S'    */\n*     3 IOBSUFFX BIT(2),             /* INDICATES TYPE OF SUFFIX('R'\n*                                       OR 'RU')                     */\n*     3 IOBRQUST BIT(1),             /* BIT = 1 MEANS READ, BIT = 0\n*                                       MEANS WRITE.                 */\n*     3 IOBTYPE  BIT(1),             /* BIT = 1 MEANS KEY TYPE BIT =\n*                                       0 MEANS ID TYPE              */\n*     3 IOBADDTY BIT(1),             /* ADD TYPE                     */\n*     3 IOBRELEX BIT(1),             /* RELEX MACRO ISSUED           */\n*    2 IOBDSTAT CHAR(2),             /* STATUS OF THE REQUEST        */\n*     3 IOBSTAT1 CHAR(1),            /* FLAG BYTE                    */\n*      4 IOBABNRM BIT(1),            /* ABNORMAL COMPLETION          */\n*      4 IOBNEWVL BIT(1),            /* ON EXTENDED SEARCH,THE NEXT\n*                                       EXTENT IS ON A NEWVOLUME.THE\n*                                       ASI ROUTINE MUST ISSUE THE\n*                                       EXCP MACRO-END OF EXTENT\n*                                       APPENDAGE CANNOT.            */\n*      4 IOBRSV33 BIT(1),            /* RESERVED                     */\n*      4 IOBPASS2 BIT(1),            /* ON EXTENDED SEARCH,INDICATES\n*                                       TO RELATIVE BLOCKCONVERSION\n*                                       ROUTINE THAT SECOND PASS OF\n*                                       A  TWO-PASS CONV.ROUTINE HAS\n*                                       COMPLETED                    */\n*      4 IOBENQUE BIT(1),            /* RECORD ENQUEUED(EXCLUSIVE\n*                                       CONTROL REQUEST)             */\n*      4 IOBBUFF  BIT(1),            /* BUFFER ASSIGNED TO THIS IOB  */\n*      4 IOBADDVU BIT(1),            /* V OR U TYPE RECORD BEING\n*                                       ADDED TO DATA SET            */\n*      4 IOBSIORT BIT(1),            /* INDICATES TO DYNAMIC\n*                                       BUFFERING ROUTINE THAT IT\n*                                       WAS ENTERED FROM,AND IS TO\n*                                       RETURN TO,THE START I/O\n*                                       APPENDAGE MODULE             */\n*     3 IOBSTAT2 CHAR(1),            /* ERROR CODE FOR ABNORMAL\n*                                       COMPLETION USED AS POST CODE\n*                                       IN ECB                       */\n*    2 IOBDCPND PTR(31),             /* ADDRESS OF LOCATION WHERE\n*                                       CHANNEL END PROGRAM SHOULD\n*                                       END                          */\n*    2 IOBDBYTN FIXED(15),           /* NUMBER OF BYTES NEEDED ON A\n*                                       TRACK TO WRITE A NEW BLOCK   */\n*    2 IOBRSV34 CHAR(2),             /* RESERVED                     */\n*    2 IOBDQPTR PTR(31),             /* PTR.TO IOB FOR NEXT I/O\n*                                       OPERATION TO EXECUTE         */\n*    2 IOBRSV35 CHAR(8) BDY(WORD),   /* RESERVED                     */\n*    2 IOBDNCRF CHAR(8) BDY(WORD),   /* COUNT FIELD FOR NEW BLOCK    */\n*    2 IOBCHNPR CHAR(0) BDY(WORD);   /* CHANNEL PROGRAM STARTS HERE  */\n*\n*                        /* **************************************** */\n*                        /*    NEW ACCESS METHOD EXTENSION           */\n*                        /*        *** 24 BYTES                      */\n*                        /* **************************************** */\n*\n* DECLARE 1 IOBORG10\n*%IF IKEPLS='2'  %THEN\n*    %GOTO IOBA21;\n*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),\n*%GOTO IOBA22;\n*%IOBA21 : ;\n*       DEF(IOBEXTEN) POS(9) BDY(WORD),\n*%IOBA22 : ;\n*    2 IOBSEEK2 CHAR(8) BDY(WORD),   /* SEEK FIELD 2           ICB435*/\n*     3 IOBSK2M  CHAR(1),            /* EXTENT NUMBER          ICB435*/\n*     3 IOBSK2BB CHAR(2),            /* BIN NUMBER             ICB435*/\n*     3 IOBSK2CC CHAR(2),            /* CYLINDER NUMBER        ICB435*/\n*     3 IOBSK2HH CHAR(2),            /* HEAD NUMBER            ICB435*/\n*     3 IOBSK2R  CHAR(1),            /* RECORD NUMBER          ICB435*/\n*    2 IOBBUFC  PTR(31),             /* ADDRESS OF ASSOCIATED BUFFER\n*                                       CONTROL BLOCK          ICB435*/\n*    2 IOBREADA PTR(31),             /* ADDRESS OF FIRST UNDONE READ\n*                                       CHANNEL PROGRAM SEGMENT\n*                                                              ICB435*/\n*    2 IOBNEXTA PTR(31),             /* ADDRESS OF NEXT ACTIVE IOB\n*                                                              ICB435*/\n*    2 IOBRDCHP PTR(31);             /* ADDRESS OF READ CHANNEL\n*                                       PROGRAM                ICB435*/\n./ ADD NAME=IHACDE   0100-19106-19106-1238-00148-00148-00000-MZAP78  17\n*\n*        %GOTO CDEL1;       /*\n         MACRO\n         IHACDE\nCDENTRY  DSECT  ,  */\n*%CDEL1 : ;\n*\n*/* **************************************************************** */\n*/*             CONTENTS DIRECTORY ENTRY                             */\n*/*                                                                  */\n*/*  AOS/2 RELEASE 1, 03/15/72, LEVEL=5                              */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - A DSECT IS PRODUCED AND A USING ON CDENTRY GIVES     */\n*/*             ADDRESSABILITY FOR ALL SYMBOLS.                      */\n*/*      PL/S - DCL CDENTPTR PTR                                     */\n*/* **************************************************************** */\n*%GOTO CDEL2;  /*\n         SPACE 1\nCDCHAIN  DS    0A -           SAME AS CDCHAINA BELOW\nCDATTR   DS    B -            ATTRIBUTE FLAGS\nCDNIP    EQU   X'80' -        MODULE LOADED BY NIP OR FIXED/MODIFIED\n*                             LPA MODULE\nCDNIC    EQU   X'40' -        MODULE IS IN PROCESS OF BEING LOADED\nCDREN    EQU   X'20' -        MODULE IS REENTERABLE\nCDSER    EQU   X'10' -        MODULE IS SERIALLY REUSABLE\nCDNFN    EQU   X'08' -        MODULE IS NOT REUSABLE (NON-FUNCTIONAL)\nCDMIN    EQU   X'04' -        THIS IS A MINOR CDE\nCDJPA    EQU   X'02' -        MODULE IS IN JOB PACK AREA\nCDNLR    EQU   X'01' -        MODULE IS NOT LOADABLE-ONLY\nCDCHAINA DS    AL3 -          ADDRESS OF NEXT CDE IN QUEUE (EITHER JPAQ\n*                             OR LPAQ)\nCDRRBP   DS    0A -           SAME AS CDRRBPA BELOW\nCDROLL   DS    FL1 -          BITS 4-7 ARE USED TO EXTEND THE USE\n*                             COUNT OF A MODULE TO 4095.  THE VALUE\n*                             IN THIS FIELD INDICATES THE NUMBER OF\n*                             OVERFLOWS IN FIELD CDUSE.\nCDRRBPA  DS    AL3 -          IF THE MODULE IS REENTERABLE, THIS FIELD\n*                             CONTAINS THE ADDRESS OF THE LAST RB THAT\n*                             CONTROLLED THE MODULE.  IF THE MODULE IS\n*                             SERIALLY REUSABLE, THIS FIELD CONTAINS\n*                             THE ADDRESS OF THE RB AT THE TOP OF THE\n*                             WAITING (RBPGMQ) QUEUE.  IF THE MODULE\n*                             WAS REQUESTED ONLY THROUGH LOAD MACRO\n*                             INSTRUCTIONS, CONTAINS ZERO.\nCDNAME   DS    CL8 -          8-BYTE NAME\nCDENTPT  DS    0A -           SAME AS CDENTPTA BELOW\nCDUSE    DS    FL1 -          VALUE CONTAINS THE MODULE USE COUNT AND\n*                             MUST BE USED IN CONJUNCTION WITH BITS\n*                             4-7 OF CDROLL\nCDENTPTA DS    AL3 -          MODULE'S RELOCATED ENTRY POINT ADDRESS\nCDXLMJP  DS    0A -           SAME AS CDXLMJPA BELOW\nCDATTR2  DS    B -            SECOND ATTRIBUTE FIELD\nCDSPZ    EQU   X'80' -        MODULE IS IN SUBPOOL ZERO\nCDREL    EQU   X'40' -        MODULE IS INACTIVE AND MAY BE RELEASED\n*                             BY THE GETMAIN ROUTINE (CDPURGE)\nCDXLE    EQU   X'20' -        EXTENT LIST HAS BEEN BUILT FOR MODULE.\n*                             MAIN STORAGE OCCUPIED BY MODULE IS\n*                             DESCRIBED THEREIN.\nCDRLC    EQU   X'10' -        THIS CDE CONTAINS A MINOR ENTRY POINT\n*                             ADDRESS THAT HAS BEEN RELOCATED BY THE\n*                             PROGRAM FETCH ROUTINE\nCDTSO    EQU   X'08' -        THIS IS A TSLPA CDE                ICB476\nCDOLY    EQU   X'04' -        MODULE IS IN OVERLAY FORMAT        A27026\nCDERSV02 EQU   X'02',,C'X' -  RESERVED\nCDAUTH   EQU   X'01' -        PROGRAM AUTHORIZATION FLAG         ICB360\nCDXLMJPA DS    AL3 -          EXTENT LIST ADDRESS OR MAJOR CDE ADDRESS\n*                             IF THIS CDE IS A MINOR\n         MEND  , */\n*%CDEL2  :  ;\n*\n*DECLARE\n*  1 CDENTRY  BASED(CDENTPTR),\n*   2 CDCHAIN     PTR(31),               /* SAME AS CDCHAINA BELOW   */\n*    3 CDATTR      CHAR(1),              /* ATTRIBUTE FLAGS          */\n*     4 CDNIP    BIT(1),                 /* MODULE LOAD BY NIP OR\n*                                           FIXED/MODIFIED LPA\n*                                           MODULE                   */\n*     4 CDNIC    BIT(1),                 /* MODULE IS IN PROCESS OF\n*                                           BEING LOADED             */\n*     4 CDREN    BIT(1),                 /* MODULE IS REENTRABLE     */\n*     4 CDSER    BIT(1),                 /* MODULE IS SERIALLY\n*                                           REUSABLE                 */\n*     4 CDNFN    BIT(1),                 /* MODULE IS NOT REUSABLE\n*                                           (NON-FUNCTIONAL)         */\n*     4 CDMIN    BIT(1),                 /* THIS IS A MINOR CDE      */\n*     4 CDJPA    BIT(1),                 /* MODULE IS IN JOB PACK\n*                                           AREA                     */\n*     4 CDNLR    BIT(1),                 /* MODULE IS NOT\n*                                           LOADABLE-ONLY            */\n*    3 CDCHAINA    PTR(24),              /* ADDRESS OF NEXT CDE IN\n*                                           QUEUE (EITHER JPAQ OR\n*                                           LPAQ)                    */\n*   2 CDRRBP      PTR(31),               /* SAME AS CDRRBPA BELOW    */\n*    3 CDROLL      PTR(8),               /* BITS 4-7 ARE USED TO\n*                                           EXTEND THE USE COUNT OF A\n*                                           MODULE TO 4095.  THE\n*                                           VALUE IN THIS FIELD\n*                                           INDICATES THE NUMBER OF\n*                                           OVERFLOWS IN FIELD CDUSE */\n*    3 CDRRBPA     PTR(24),              /* IF THE MODULE IS\n*                                           REENTERABLE, THIS FIELD\n*                                           CONTAINS THE ADDRESS OF\n*                                           THE LAST RB THAT\n*                                           CONTROLLED THE MODULE.\n*                                           IF THE MODULE IS SERIALLY\n*                                           REUSABLE, THIS FIELD\n*                                           CONTAINS THE ADDRESS OF\n*                                           THE RB AT THE TOP OF THE\n*                                           WAITING (RBPGMQ) QUEUE.\n*                                           IF THE MODULE WAS\n*                                           REQUESTED ONLY THROUGH\n*                                           LOAD MACRO INSTRUCTIONS,\n*                                           CONTAINS ZERO.           */\n*   2 CDNAME      CHAR(8),               /* 8 BYTE NAME              */\n*   2 CDENTPT     PTR(31),               /* SAME AS CDENTPTA BELOW   */\n*    3 CDUSE       PTR(8),               /* VALUE CONTAINS THE MODULE\n*                                           USE COUNT AND MUST BE\n*                                           USED IN CONJUNCTION WITH\n*                                           BITS 4-7 OF CDROLL       */\n*    3 CDENTPTA    PTR(24),              /* MODULE'S RELOCATED ENTRY\n*                                           POINT ADDRESS            */\n*   2 CDXLMJP     PTR(31),               /* SAME AS CDXLMJPA BELOW   */\n*    3 CDATTR2     CHAR(1),              /* SECOND ATTRIBUTE FIELD   */\n*     4 CDSPZ    BIT(1),                 /* MODULE IS IN SUBPOOL ZERO*/\n*     4 CDREL    BIT(1),                 /* MODULE IS INACTIVE AND\n*                                           MAY BE RELEASED BY THE\n*                                           GETMAIN ROUTINE (CDPURGE)*/\n*     4 CDXLE    BIT(1),                 /* EXTENT LIST HAS BEEN\n*                                           BUILT FOR MODULE.\n*                                           MAIN STORAGE  OCCUPIED\n*                                           BY MODULE IS DESCRIBED\n*                                           THEREIN                  */\n*     4 CDRLC    BIT(1),                 /* THIS CDE CONTAINS A\n*                                           MINOR ENTRY POINT ADDRESS\n*                                           THAT HAS BEEN RELOCATED\n*                                           BY THE PROGRAM FETCH\n*                                           ROUTINE                  */\n*     4 CDTSO    BIT(1),                 /* THIS IS A TSLPA CDE\n*                                                              ICB476*/\n*     4 CDOLY    BIT(1),                 /* MODULE IS IN OVERLAY\n*                                           FORMAT             A27026*/\n*     4 CDERSV02 BIT(1),                 /* RESERVED                 */\n*     4 CDAUTH   BIT(1),                 /* PROGRAM AUTHORIZATION\n*                                           FLAG               ICB360*/\n*    3 CDXLMJPA    PTR(24);              /* EXTENT LIST ADDRESS OR\n*                                           MAJOR CDE ADDRESS IF THIS\n*                                           CDE IS A MINOR.          */\n./ ADD NAME=IHALPDE  0100-19106-19106-1238-00115-00115-00000-MZAP78  17\n*\n*        %GOTO LPDEL1;      /*\n         MACRO\n         IHALPDE\nLPDE     DSECT  ,  */\n*%LPDEL1 : ;\n*\n*/* **************************************************************** */\n*/*            LINK PACK DIRECTORY ENTRY                             */\n*/*                                                                  */\n*/*  AOS/2 RELEASE 1, 03/01/72, LEVEL=4                              */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - A DSECT IS PRODUCED AND A USING ON LPDE GIVES        */\n*/*             ADDRESSABILITY FOR ALL SYMBOLS.                      */\n*/*      PL/S - DCL LPDEPTR PTR                                      */\n*/* **************************************************************** */\n*%GOTO LPDEL2;  /*\n         SPACE 1\nLPDECHN  DS    0A -           SAME AS LPDECHNA BELOW\nLPDEATTR DS    B -            ATTRIBUTE FLAGS\nLPDENIP  EQU   X'80' -        MODULE LOADED BY NIP\nLPDERS01 EQU   X'40',,C'X' -  RESERVED\nLPDEREN  EQU   X'20' -        MODULE IS REENTERABLE\nLPDESER  EQU   X'10' -        MODULE IS SERIALLY REUSABLE\nLPDERS02 EQU   X'08',,C'X' -  RESERVED\nLPDEMIN  EQU   X'04' -        THIS IS A MINOR LPDE\nLPDERS03 EQU   X'02',,C'X' -  RESERVED\nLPDENLR  EQU   X'01' -        NOT LOADABLE ONLY\nLPDECHNA DS    AL3 -          ADDRESS OF NEXT LPDE IN CHAIN OF LPDE\n*                             SYNONYMS\nLPDERBP  DS    0A -           SAME AS LPDERBPA BELOW\nLPDEROLL DS    FL1 -          COUNT FIELD - BITS 0-3 RESERVED,\n*                             BITS 4-7 ZERO\nLPDERBPA DS    AL3 -          RESERVED\nLPDENAME DS    CL8 -          EITHER MODULE NAME OR ALIAS NAME\nLPDENTP  DS    0A -           SAME AS LPDENTPA BELOW\nLPDEUSE  DS    FL1 -          COUNT FIELD - BITS 0-7 ARE 0\nLPDENTPA DS    AL3 -          RELOCATED ENTRY POINT ADDRESS\nLPDEXLP  DS    0A -           SAME AS LPDEXLPA BELOW\nLPDEATT2 DS    B -            SECOND ATTRIBUTE FLAG BYTE\nLPDEAUTH EQU   X'80' -        PROGRAM AUTHORIZATION FLAG         ICB360\nLPDERS04 EQU   X'40',,C'X' -  RESERVED\nLPDEXLE  EQU   X'20' -        EXTENT LIST BUILT - MAIN STORAGE\n*                             OCCUPIED BY MODULE IS DESCRIBED THEREIN\nLPDERLC  EQU   X'10' -        LPDE CONTAINS A RELOCATED ALIAS ENTRY\n*                             POINT ADDRESS\nLPDERS05 EQU   X'08',,C'X' -  RESERVED\nLPDERS06 EQU   X'04',,C'X' -  RESERVED\nLPDERS07 EQU   X'02',,C'X' -  RESERVED\nLPDERS08 EQU   X'01',,C'X' -  RESERVED\nLPDEXLPA DS    AL3 -          RESERVED\nLPDEMJNM DS    0CL8 -         MAJOR LPDE ENTRY POINT NAME WHEN\n*                             LPDEMIN=1 OR 8-BYTE EXTENT LIST IF\n*                             LPDEMIN=0\nLPDEXTLN DS    F -            LENGTH OF MAIN STORAGE BLOCK IN WHICH\n*                             MODULE RESIDES\nLPDEXTAD DS    A -            ADDRESS OF MAIN STORAGE BLOCK IN WHICH\n*                             MODULE RESIDES\n         MEND  , */\n*%LPDEL2 :  ;\n*\n*DECLARE\n*  1 LPDE     BASED(LPDEPTR),\n*   2 LPDECHN     PTR(31),               /* SAME AS LPDECHNA BELOW   */\n*    3 LPDEATTR    CHAR(1),              /* ATTRIBUTE FLAGS          */\n*     4 LPDENIP  BIT(1),                 /* MODULE LOADED BY NIP     */\n*     4 LPDERS01 BIT(1),                 /* RESERVED                 */\n*     4 LPDEREN  BIT(1),                 /* MODULE IS REENTERABLE    */\n*     4 LPDESER  BIT(1),                 /* MODULE IS SERIALLY\n*                                           REUSABLE                 */\n*     4 LPDERS02 BIT(1),                 /* RESERVED                 */\n*     4 LPDEMIN  BIT(1),                 /* THIS IS A MINOR LPDE     */\n*     4 LPDERS03 BIT(1),                 /* RESERVED                 */\n*     4 LPDENLR  BIT(1),                 /* NOT LOADABLE ONLY        */\n*    3 LPDECHNA    PTR(24),              /* ADDRESS OF NEXT LPDE IN\n*                                           CHAIN OF LPDE SYNONYMS   */\n*   2 LPDERBP     PTR(31),               /* SAME AS LPDERBPA BELOW   */\n*    3 LPDEROLL    PTR(8),               /* COUNT FIELD - BITS 0-3\n*                                           RESERVED, BITS 4-7 ZERO  */\n*    3 LPDERBPA    PTR(24),              /* RESERVED                 */\n*   2 LPDENAME    CHAR(8),               /* EITHER MODULE NAME OR\n*                                           ALIAS NAME               */\n*   2 LPDENTP     PTR(31),               /* SAME AS LPDENTPA BELOW   */\n*    3 LPDEUSE     PTR(8),               /* COUNT FIELD - BITS 0-7\n*                                           ARE 0                    */\n*    3 LPDENTPA    PTR(24),              /* RELOCATED ENTRY POINT\n*                                           ADDRESS                  */\n*   2 LPDEXLP     PTR(31),               /* SAME AS LPDEXLPA BELOW   */\n*    3 LPDEATT2    CHAR(1),              /* SECOND ATTRIBUTE FLAG\n*                                           BYTE                     */\n*     4 LPDEAUTH BIT(1),                 /* PROGRAM AUTHORIZATION\n*                                           FLAG               ICB360*/\n*     4 LPDERS04 BIT(1),                 /* RESERVED                 */\n*     4 LPDEXLE  BIT(1),                 /* EXTENT LIST BUILT -\n*                                           MAIN STORAGE OCCUPIED\n*                                           BY MODULE IS DESCRIBED\n*                                           THEREIN                  */\n*     4 LPDERLC  BIT(1),                 /* LPDE CONTAINS A RELOCATED\n*                                           ALIAS ENTRY POINT ADDRESS*/\n*     4 LPDERS05 BIT(1),                 /* RESERVED                 */\n*     4 LPDERS06 BIT(1),                 /* RESERVED                 */\n*     4 LPDERS07 BIT(1),                 /* RESERVED                 */\n*     4 LPDERS08 BIT(1),                 /* RESERVED                 */\n*    3 LPDEXLPA    PTR(24),              /* RESERVED                 */\n*   2 LPDEMJNM    CHAR(8)  BDY(WORD),    /* MAJOR LPDE ENTRY POINT\n*                                           NAME WHEN LPDEMIN=1 OR\n*                                           8-BYTE EXTENT LIST IF\n*                                           LPDEMIN=0                */\n*    3 LPDEXTLN    FIXED(31),            /* LENGTH OF MAIN STORAGE\n*                                           BLOCK IN WHICH MODULE\n*                                           RESIDES                  */\n*    3 LPDEXTAD    PTR(31);              /* ADDRESS OF MAIN STORAGE\n*                                           BLOCK IN WHICH MODULE\n*                                           RESIDES                  */\n./ ADD NAME=IHAPDS   0100-19106-19106-1238-00436-00436-00000-MZAP78  17\n*        %GOTO PDSBSL;                                               /*\n         MACRO\n         IHAPDS &PDSBLDL=YES,&DSECT=YES\n         SPACE 1\n***********************************************************************\n*                                                                     *\n*              PARTITIONED DATA SET (PDS) DIRECTORY ENTRY             *\n*                                                                     *\n*    RELEASE 2 AOS (AOS/1 REL 2, AOS/2 REL 1), 11/03/71, LEVEL=2      *\n*                                                                     *\n*        THE MACRO EXPANSION WILL INCLUDE THE TWO BYTES INSERTED      *\n*        BY BLDL UNLESS PDSBLDL=NO IS SPECIFIED.                      *\n*                                                                     *\n*        THIS MACRO WILL PRODUCE A DSECT CARD UNLESS DSECT=NO IS      *\n*        SPECIFIED.                                                   *\n*                                                                     *\n*        THE PDS DIRECTORY ENTRY MAY HAVE ANY OR ALL OF THE           *\n*        FOLLOWING FIVE SECTIONS IN THIS ORDER --                     *\n*        1.    BASIC (MAY OR MAY NOT CONTAIN 2 BLDL BYTES)            *\n*        2.    SCATTER LOAD   - OPTIONAL                              *\n*        3.    ALIAS          - OPTIONAL                              *\n*        4.    SSI            - OPTIONAL                              *\n*        5.    APF            - OPTIONAL                              *\n***********************************************************************\n         IEZBITS , -          SYMBOLIC BIT DEFINITIONS\n         SPACE 1\n         AIF   ('&DSECT' EQ 'NO').NODSCT2\nPDS2     DSECT ,              PDS2PTR\n         AGO   .CONT2\n.NODSCT2 ANOP\n         DS    0D\nPDS2     EQU   * -            PDS2PTR\n.CONT2   ANOP\nPDS2NAME DS    CL8 -          LOAD MODULE MEMBER NAME OR ALIAS\nPDS2TTRP DS    CL3 -          TTR OF FIRST BLOCK OF NAMED MEMBER\n         AIF   ('&PDSBLDL' EQ 'NO').PDSX2\nPDS2CNCT DS    FL1 -          CONCATENATION NUMBER OF THE DATA SET\nPDS2LIBF DS    C -            LIBRARY FLAG FIELD\nPDS2LNRM EQU   X'00' -        NORMAL CASE\nPDS2LLNK EQU   X'01' -        IF DCB OPERAND IN BLDL MACRO INTRUCTION\n*                             WAS SPECIFIED AS ZERO, NAME WAS FOUND IN\n*                             LINK LIBRARY\nPDS2LJOB EQU   X'02' -        IF DCB OPERAND IN BLDL MACRO INTRUCTION\n*                             WAS SPECIFIED AS ZERO, NAME WAS FOUND IN\n*                             JOB LIBRARY\nDEZBYTE  EQU   PDS2LIBF --- ALIAS\n.PDSX2   ANOP\nPDS2INDC DS    B -            INDICATOR BYTE\nPDS2ALIS EQU   BIT0 -         NAME IN THE FIRST FIELD IS AN ALIAS\nDEALIAS  EQU   BIT0 --- ALIAS FOR PDS2ALIS\nPDS2NTTR EQU   BIT1+BIT2 -    NUMBER OF TTR'S IN THE USER DATA FIELD\nPDS2LUSR EQU   BIT3+BIT4+BIT5+BIT6+BIT7 - LENGTH OF USER DATA FIELD\n*                             IN HALF WORDS\nPDS2USRD DS    0C -           START OF VARIABLE LENGTH USER DATA FIELD\nPDS2TTRT DS    CL3 -          TTR OF FIRST BLOCK OF TEXT\nPDS2ZERO DS    C -            ZERO\nPDS2TTRN DS    CL3 -          TTR OF NOTE LIST OR SCATTER/TRANSLATION\n*                             TABLE.  USED FOR MODULES IN SCATTER LOAD\n*                             FORMAT OR OVERLAY STRUCTURE ONLY.\nPDS2NL   DS    FL1 -          NUMBER OF ENTRIES IN NOTE LIST FOR\n*                             MODULES IN OVERLAY STRUCTURE,\n*                             OTHERWISE ZERO\nPDS2ATR  DS    0BL2 -         TWO-BYTE MODULE ATTRIBUTE FIELD\nPDS2ATR1 DS    B -            FIRST BYTE OF MODULE ATTRIBUTE FIELD\nPDS2RENT EQU   BIT0 -         REENTERABLE\nDEREEN   EQU   BIT0 --- ALIAS FOR PDS2RENT\nPDS2REUS EQU   BIT1 -         REUSABLE\nPDS2OVLY EQU   BIT2 -         IN OVERLAY STRUCTURE\nDEOVLY   EQU   BIT2 --- ALIAS FOR PDS2OVLY\nPDS2TEST EQU   BIT3 -         MODULE TO BE TESTED - TESTRAN\nPDS2LOAD EQU   BIT4 -         ONLY LOADABLE\nDELODY   EQU   BIT4 --- ALIAS FOR PDS2LOAD\nPDS2SCTR EQU   BIT5 -         SCATTER FORMAT\nDESCAT   EQU   BIT5 --- ALIAS FOR PDS2SCTR\nPDS2EXEC EQU   BIT6 -         EXECUTABLE\nDEXCUT   EQU   BIT6 --- ALIAS FOR PDS2EXEC\nPDS21BLK EQU   BIT7 -         IF ZERO, MODULE CONTAINS MULTIPLE RECORDS\n*                             WITH AT LEAST ONE BLOCK OF TEXT.  ---\n*                             IF ONE, MODULE CONTAINS NO RLD ITEMS AND\n*                             ONLY ONE BLOCK OF TEXT.\nPDS2ATR2 DS    B -            SECOND BYTE OF MODULE ATTRIBUTE FIELD\nPDS2FLVL EQU   BIT0 -         IF ZERO, MODULE CAN BE PROCESSED BY ALL\n*                             LEVELS OF LINKAGE EDITOR.  ---\n*                             IF ONE, MODULE CAN BE PROCESSED ONLY BY\n*                             F LEVEL OF LINKAGE EDITOR.\nPDS2ORG0 EQU   BIT1 -         LINKAGE EDITOR ASSIGNED ORIGIN OF FIRST\n*                             BLOCK OF TEXT IS ZERO.\nPDS2EP0  EQU   BIT2 -         ENTRY POINT ASSIGNED BY LINKAGE EDITOR\n*                             IS ZERO\nPDS2NRLD EQU   BIT3 -         MODULE CONTAINS NO RLD ITEMS\nPDS2NREP EQU   BIT4 -         MODULE CANNOT BE REPROCESSED BY LINKAGE\n*                             EDITOR\nPDS2TSTN EQU   BIT5 -         MODULE CONTAINS TESTRAN SYMBOL CARDS\nPDS2LEF  EQU   BIT6 -         MODULE CREATED BY LINKAGE EDITOR F\nPDS2REFR EQU   BIT7 -         REFRESHABLE MODULE\nPDS2STOR DS    FL3 -          TOTAL CONTIGUOUS MAIN STORAGE REQUIREMENT\n*                             OF MODULE\nPDS2FTBL DS    FL2 -          LENGTH OF FIRST BLOCK OF TEXT\nPDS2EPA  DS    AL3 -          ENTRY POINT ADDRESS ASSOCIATED WITH\n*                             MEMBER NAME OR WITH ALIAS NAME IF ALIAS\n*                             INDICATOR IS ONE\n         DS    0AL3 -         LINKAGE EDITOR ASSIGNED ORIGIN OF FIRST\n*                             BLOCK OF TEXT (OS USE OF FIELD)\nPDS2FTBO DS    0BL3 -         FLAG BYTES (AOS USE OF FIELD)      ICB269\nPDS2FTB1 DS    B -            BYTE 1 OF PDS2FTBO                 ICB269\nPDSAOSLE EQU   BIT0 -         MODULE HAS BEEN PROCESSED BY AOS LINKAGE\n*                             EDITOR                             ICB410\n*        BIT1 IS RESERVED TO INDICATE ANOTHER EXPANSION WHEN IT\n*        BECOMES NECESSARY                                       ICB410\nPDS2PAGA EQU   BIT2 -         PAGE ALIGNMENT REQUIRED FOR LOAD\n*                             MODULE                             ICB410\nPDS2SSI  EQU   BIT3 -         SSI INFORMATION PRESENT            ICB410\nPDSAPFLG EQU   BIT4 -         INFORMATION IN PDSAPF IS VALID     ICB360\nPDS2FTB2 DS    B -            BYTE 2 OF PDS2FTBO                 ICB269\nPDS2FTB3 DS    B -            BYTE 3 OF PDS2FTBO                 ICB269\nPDSBCEND EQU   * -            END OF BASIC SECTION\nPDSBCLN  EQU   PDSBCEND-PDS2 - LENGTH OF BASIC SECTION\n         SPACE 2\n*        THE FOLLOWING SECTION IS FOR LOAD MODULES WITH SCATTER LOAD\n         SPACE 1\nPDSS01   EQU   * -            START OF SCATTER LOAD SECTION\nPDS2SLSZ DS    FL2 -          NUMBER OF BYTES IN SCATTER LIST\nPDS2TTSZ DS    FL2 -          NUMBER OF BYTES IN TRANSLATION TABLE\nPDS2ESDT DS    CL2 -          IDENTIFICATION OF ESD ITEM (ESDID) OF\n*                             CONTROL SECTION TO WHICH FIRST BLOCK OF\n*                             TEXT BELONGS\nPDS2ESDC DS    CL2 -          IDENTIFICATION OF ESD ITEM (ESDID) OF\n*                             CONTROL SECTION CONTAINING ENTRY POINT\nPDSS01ND EQU   * -            END OF SCATTER LOAD SECTION\nPDSS01LN EQU   PDSS01ND-PDSS01 - LENGTH OF SCATTER LOAD SECTION\n         SPACE 2\n*        THE FOLLOWING SECTION IS FOR LOAD MODULES WITH ALIAS NAMES\n         SPACE 1\nPDSS02   EQU   * -            START OF ALIAS SECTION\nPDS2EPM  DS    AL3 -          ENTRY POINT FOR MEMBER NAME\nDEENTBK  EQU   PDS2EPM --- ALIAS\nPDS2MNM  DS    CL8 -          MEMBER NAME OF LOAD MODULE\nPDSS02ND EQU   * -            END OF ALIAS SECTION\nPDSS02LN EQU   PDSS02ND-PDSS02 - LENGTH OF ALIAS SECTION\n         SPACE 2\n*        THE FOLLOWING SECTION IS FOR SSI INFORMATION AND IS ON\n*        A HALF-WORD BOUNDARY\n         SPACE 1\nPDSS03   DS    0H -           FORCE HALF-WORD ALIGNMENT FOR SSI\n*                             SECTION\nPDSSSIWD DS    0CL4 -         SSI INFORMATION WORD\nPDSCHLVL DS    FL1 -          CHANGE LEVEL OF MEMBER\nPDSSSIFB DS    B -            SSI FLAG BYTE\nPDSFORCE EQU   BIT1 -         A FORCE CONTROL CARD WAS USED WHEN\n*                             EXECUTING THE IHGUAP PROGRAM\nPDSUSRCH EQU   BIT2 -         A CHANGE WAS MADE TO MEMBER BY THE\n*                             INSTALLATION, AS OPPOSED TO AN\n*                             IBM-DISTRIBUTED CHANGE\nPDSEMFIX EQU   BIT3 -         SET WHEN AN EMERGENCY IBM-AUTHORIZED\n*                             PROGRAM 'FIX' IS MADE, AS OPPOSED TO\n*                             CHANGES THAT ARE INCLUDED IN AN\n*                             IBM-DISTRIBUTED MAINTENANCE PACKAGE\nPDSDEPCH EQU   BIT4 -         A CHANGE MADE TO THE MEMBER IS DEPENDENT\n*                             UPON A CHANGE MADE TO SOME OTHER MEMBER\n*                             IN THE SYSTEM\nPDSSYSGN EQU   BIT5+BIT6 -    FLAGS THAT INDICATE WHETHER OR NOT A\n*                             CHANGE TO THE MEMBER WILL NECESSITATE A\n*                             PARTIAL OR COMPLETE REGENERATION OF THE\n*                             SYSTEM\nPDSNOSGN EQU   X'00' -        NOT CRITICAL FOR SYSTEM GENERATION\nPDSCMSGN EQU   BIT6 -         MAY REQUIRE COMPLETE REGENERATION\nPDSPTSGN EQU   BIT5 -         MAY REQUIRE PARTIAL REGENERATION\nPDSIBMMB EQU   BIT7 -         MEMBER IS SUPPLIED BY IBM\nPDSMBRSN DS    CL2 -          MEMBER SERIAL NUMBER\nPDSS03ND EQU   * -            END OF SSI SECTION\nPDSS03LN EQU   PDSS03ND-PDSS03 - LENGTH OF SSI SECTION\n         SPACE 2\n*        THE FOLLOWING SECTION IS FOR APF INFORMATION          ICB360 *\n         SPACE 1\nPDSS04   EQU   * -            START OF APF SECTION               ICB360\nPDSAPF   DS    0CL2 -         PROGRAM AUTHORIZATION FACILITY (APF)\n*                             FIELD                              ICB360\nPDSAPFCT DS    FL1 -          LENGTH OF PROGRAM AUTHORIZATION CODE\n*                             (PDSAPFAC) IN BYTES                ICB360\nPDSAPFAC DS    C -            PROGRAM AUTHORIZATION CODE         ICB360\nPDSS04ND EQU   * -            END OF APF SECTION                 ICB360\nPDSS04LN EQU   PDSS04ND-PDSS04 - LENGTH OF APF SECTION           ICB360\n         MEND  , */\n*%PDSBSL  :  ;\n*\n* /* *************************************************************** */\n* /*                                                                 */\n* /*           PARTITIONED DATA SET (PDS) DIRECTORY ENTRY            */\n* /*                                                                 */\n* /*  RELEASE 2 AOS (AOS/1 REL 2, AOS/2 REL 1), 11/03/71, LEVEL=2    */\n* /*                                                                 */\n* /*     THE MACRO EXPANSION WILL INCLUDE THE TWO BYTES INSERTED     */\n* /*     BY BLDL UNLESS %PDSBLDL IS SET TO 'NO'.                     */\n* /*                                                                 */\n* /*     THE PDS DIRECTORY ENTRY MAY HAVE ANY OR ALL OF THE          */\n* /*     FOLLOWING FIVE SECTIONS IN THIS ORDER --                    */\n* /*     1.    BASIC (MAY OR MAY NOT CONTAIN 2 BLDL BYTES)           */\n* /*     2.    SCATTER LOAD   - OPTIONAL                             */\n* /*     3.    ALIAS          - OPTIONAL                             */\n* /*     4.    SSI            - OPTIONAL                             */\n* /*     5.    APF            - OPTIONAL                             */\n* /*                                                                 */\n* /*     THE FOLLOWING 4 BSL STATEMENTS SHOW HOW THE STARTING        */\n* /*     ADDRESS OF ANY OF THE FOUR OPTIONAL SECTIONS OF USER        */\n* /*     DATA MAY BE OBTAINED.                                       */\n* /*                                                                 */\n* /*     (1)   PDSPTRV=ADDR(PDSBCEND)                                */\n* /*     (2)   IF PDS2SCTR='1'B THEN PDSPTRV=PDSPTRV + LENGTH(PDSS01)*/\n* /*     (3)   IF PDS2ALIS='1'B THEN PDSPTRV=PDSPTRV + LENGTH(PDSS02)*/\n* /*     (4)   IF PDS2SSI='1'B THEN PDSPTRV=PDSPTRV + LENGTH(PDSS03) */\n* /*                                                                 */\n* /*     STATEMENT (1) GETS THE ADDRESS FOR THE START OF THE         */\n* /*     OPTIONAL SECTIONS.  TO GET THE STARTING ADDRESS OF THE      */\n* /*     SCATTER LOAD SECTION, USE STATEMENT (1).  FOR THE ALIAS     */\n* /*     SECTION, USE STATEMENTS (1) AND (2).  FOR THE SSI SECTION,  */\n* /*     USE STATEMENTS (1), (2) AND (3) AND ADD ONE TO ADDRESS IN   */\n* /*     PDSPTRV IF ADDRESS IS NOT ON A HALF-WORD BOUNDARY.  FOR     */\n* /*     THE APF SECTION, USE ALL 4 STATEMENTS.                      */\n* /*                                                                 */\n* /* *************************************************************** */\n*\n*DECLARE\n*  1 PDS2     BASED(PDS2PTR),\n*\n*   2 PDS2NAME    CHAR(8),               /* LOAD MODULE MEMBER NAME\n*                                           OR ALIAS                 */\n*   2 PDS2TTRP    CHAR(3),               /* TTR OF FIRST BLOCK OF\n*                                           NAMED MEMBER             */\n*%IF PDSBLDL='NO'  %THEN\n*   %GOTO PDSX2;\n*   2 PDS2CNCT    PTR(8),                /* CONCATENATION NUMBER OF\n*                                           THE DATA SET             */\n*   2 PDS2LIBF    CHAR(1),               /* LIBRARY FLAG FIELD       */\n*%DCL PDS2LNRM CHAR;\n*%PDS2LNRM='''00''X';                    /* NORMAL CASE              */\n*%DCL PDS2LLNK CHAR;\n*%PDS2LLNK='''01''X';                    /* IF DCB OPERAND IN BLDL\n*                                           MACRO INTRUCTION  WAS\n*                                           SPECIFIED AS ZERO, NAME\n*                                           WAS FOUND IN  LINK\n*                                           LIBRARY                  */\n*%DCL PDS2LJOB CHAR;\n*%PDS2LJOB='''02''X';                    /* IF DCB OPERAND IN BLDL\n*                                           MACRO INTRUCTION  WAS\n*                                           SPECIFIED AS ZERO, NAME\n*                                           WAS FOUND IN  JOB\n*                                           LIBRARY                  */\n*%PDSX2 : ;\n*   2 PDS2INDC    CHAR(1),               /* INDICATOR BYTE           */\n*    3 PDS2ALIS BIT(1),                  /* NAME IN THE FIRST FIELD\n*                                           IS AN ALIAS              */\n*    3 PDS2NTTR BIT(2),                  /* NUMBER OF TTR'S IN THE\n*                                           USER DATA FIELD          */\n*    3 PDS2LUSR BIT(5),                  /* LENGTH OF USER DATA\n*                                           FIELD IN HALF WORDS      */\n*   2 PDS2TTRT    CHAR(3),               /* TTR OF FIRST BLOCK OF\n*                                           TEXT                     */\n*    3 PDS2USRD    CHAR(1),              /* START OF VARIABLE LENGTH\n*                                           USER DATA FIELD          */\n*   2 PDS2ZERO    CHAR(1),               /* ZERO                     */\n*   2 PDS2TTRN    CHAR(3),               /* TTR OF NOTE LIST OR\n*                                           SCATTER/TRANSLATION\n*                                           TABLE. USED FOR MODULES\n*                                           IN SCATTER LOAD  FORMAT\n*                                           OR OVERLAY STRUCTURE\n*                                           ONLY.                    */\n*   2 PDS2NL      PTR(8),                /* NUMBER OF ENTRIES IN\n*                                           NOTE LIST FOR  MODULES\n*                                           IN OVERLAY STRUCTURE,\n*                                           OTHERWISE ZERO           */\n*   2 PDS2ATR     CHAR(2),               /* TWO-BYTE MODULE\n*                                           ATTRIBUTE FIELD          */\n*    3 PDS2ATR1    BIT(8),               /* FIRST BYTE OF MODULE\n*                                           ATTRIBUTE FIELD          */\n*     4 PDS2RENT BIT(1),                 /* REENTERABLE              */\n*     4 PDS2REUS BIT(1),                 /* REUSABLE                 */\n*     4 PDS2OVLY BIT(1),                 /* IN OVERLAY STRUCTURE     */\n*     4 PDS2TEST BIT(1),                 /* MODULE TO BE TESTED -\n*                                           TESTRAN                  */\n*     4 PDS2LOAD BIT(1),                 /* ONLY LOADABLE            */\n*     4 PDS2SCTR BIT(1),                 /* SCATTER FORMAT           */\n*     4 PDS2EXEC BIT(1),                 /* EXECUTABLE               */\n*     4 PDS21BLK BIT(1),                 /* IF ZERO, MODULE CONTAINS\n*                                           MULTIPLE RECORDS WITH AT\n*                                           LEAST ONE BLOCK OF TEXT.\n*                                           ---  IF ONE, MODULE\n*                                           CONTAINS NO RLD ITEMS\n*                                           AND  ONLY ONE BLOCK OF\n*                                           TEXT.                    */\n*    3 PDS2ATR2    BIT(8),               /* SECOND BYTE OF MODULE\n*                                           ATTRIBUTE FIELD          */\n*     4 PDS2FLVL BIT(1),                 /* IF ZERO, MODULE CAN BE\n*                                           PROCESSED BY ALL  LEVELS\n*                                           OF LINKAGE EDITOR. ---\n*                                           IF ONE, MODULE CAN BE\n*                                           PROCESSED ONLY BY  F\n*                                           LEVEL OF LINKAGE EDITOR. */\n*     4 PDS2ORG0 BIT(1),                 /* LINKAGE EDITOR ASSIGNED\n*                                           ORIGIN OF FIRST  BLOCK\n*                                           OF TEXT IS ZERO.         */\n*     4 PDS2EP0  BIT(1),                 /* ENTRY POINT ASSIGNED BY\n*                                           LINKAGE EDITOR  IS ZERO  */\n*     4 PDS2NRLD BIT(1),                 /* MODULE CONTAINS NO RLD\n*                                           ITEMS                    */\n*     4 PDS2NREP BIT(1),                 /* MODULE CANNOT BE\n*                                           REPROCESSED BY LINKAGE\n*                                           EDITOR                   */\n*     4 PDS2TSTN BIT(1),                 /* MODULE CONTAINS TESTRAN\n*                                           SYMBOL CARDS             */\n*     4 PDS2LEF  BIT(1),                 /* MODULE CREATED BY\n*                                           LINKAGE EDITOR F         */\n*     4 PDS2REFR BIT(1),                 /* REFRESHABLE MODULE       */\n*   2 PDS2STOR    PTR(24)  BDY(BYTE),    /* TOTAL CONTIGUOUS MAIN\n*                                           STORAGE REQUIREMENT OF\n*                                           MODULE                   */\n*   2 PDS2FTBL    FIXED(15) BDY(BYTE),   /* LENGTH OF FIRST BLOCK OF\n*                                           TEXT                     */\n*   2 PDS2EPA     PTR(24)  BDY(BYTE),    /* ENTRY POINT ADDRESS\n*                                           ASSOCIATED WITH  MEMBER\n*                                           NAME OR WITH ALIAS NAME\n*                                           IF ALIAS  INDICATOR IS\n*                                           ONE                      */\n*   2 *           PTR(24)  BDY(BYTE),    /* LINKAGE EDITOR ASSIGNED\n*                                           ORIGIN OF FIRST BLOCK OF\n*                                           TEXT (OS USE OF FIELD)   */\n*    3 PDS2FTBO    CHAR(3),              /* FLAG BYTES (AOS USE OF\n*                                           FIELD)             ICB269*/\n*     4 PDS2FTB1    BIT(8),              /* BYTE 1 OF PDS2FTBO ICB269*/\n*      5 PDSAOSLE BIT(1),                /* MODULE HAS BEEN PROCESSED\n*                                           BY AOS LINKAGE EDITOR\n*                                                              ICB410*/\n*      5 *        BIT(1),                /* RESERVED TO INDICATE\n*                                           ANOTHER EXPANSION WHEN IT\n*                                           BECOMES NECESSARY  ICB410*/\n*      5 PDS2PAGA BIT(1),                /* PAGE ALIGNMENT REQUIRED\n*                                           FOR LOAD MODULE    ICB410*/\n*      5 PDS2SSI  BIT(1),                /* SSI INFORMATION PRESENT\n*                                                              ICB410*/\n*      5 PDSAPFLG BIT(1),                /* INFORMATION IN PDSAPF IS\n*                                           VALID              ICB360*/\n*      5 *        BIT(3),                /* RESERVED                 */\n*     4 PDS2FTB2    CHAR(1),             /* BYTE 2 OF PDS2FTBO ICB269*/\n*     4 PDS2FTB3    CHAR(1),             /* BYTE 3 OF PDS2FTBO ICB269*/\n*   2 PDSBCEND    CHAR(0);               /* END OF BASIC SECTION     */\n*\n*\n* /*     THE FOLLOWING SECTION IS FOR LOAD MODULES WITH SCATTER LOAD */\n*\n*DECLARE\n*  1 PDSS01   BASED(PDSPTRV)  BDY(BYTE),\n*   2 PDS2SLSZ    FIXED(15) BDY(BYTE),   /* NUMBER OF BYTES IN\n*                                           SCATTER LIST             */\n*   2 PDS2TTSZ    FIXED(15) BDY(BYTE),   /* NUMBER OF BYTES IN\n*                                           TRANSLATION TABLE        */\n*   2 PDS2ESDT    CHAR(2),               /* IDENTIFICATION OF ESD\n*                                           ITEM (ESDID) OF  CONTROL\n*                                           SECTION TO WHICH FIRST\n*                                           BLOCK OF  TEXT BELONGS   */\n*   2 PDS2ESDC    CHAR(2),               /* IDENTIFICATION OF ESD\n*                                           ITEM (ESDID) OF  CONTROL\n*                                           SECTION CONTAINING ENTRY\n*                                           POINT                    */\n*   2 PDSS01ND    CHAR(0);               /* END OF SCATTER LOAD\n*                                           SECTION                  */\n*\n*\n* /*     THE FOLLOWING SECTION IS FOR LOAD MODULES WITH ALIAS NAMES  */\n*\n*DECLARE\n*  1 PDSS02   BASED(PDSPTRV)  BDY(BYTE),\n*   2 PDS2EPM     PTR(24)  BDY(BYTE),    /* ENTRY POINT FOR MEMBER\n*                                           NAME                     */\n*   2 PDS2MNM     CHAR(8),               /* MEMBER NAME OF LOAD\n*                                           MODULE                   */\n*   2 PDSS02ND    CHAR(0);               /* END OF ALIAS SECTION     */\n*\n*\n* /*     THE FOLLOWING SECTION IS FOR SSI INFORMATION AND IS ON      */\n* /*     A HALF-WORD BOUNDARY                                        */\n*\n*DECLARE\n*  1 PDSS03   BASED(PDSPTRV)  BDY(HWORD),\n*   2 PDSSSIWD    CHAR(4),               /* SSI INFORMATION WORD     */\n*    3 PDSCHLVL    PTR(8),               /* CHANGE LEVEL OF MEMBER   */\n*    3 PDSSSIFB    BIT(8),               /* SSI FLAG BYTE            */\n*     4 *        BIT(1),                 /* RESERVED                 */\n*     4 PDSFORCE BIT(1),                 /* A FORCE CONTROL CARD WAS\n*                                           USED WHEN EXECUTING THE\n*                                           IHGUAP PROGRAM           */\n*     4 PDSUSRCH BIT(1),                 /* A CHANGE WAS MADE TO\n*                                           MEMBER BY THE\n*                                           INSTALLATION, AS OPPOSED\n*                                           TO AN IBM-DISTRIBUTED\n*                                           CHANGE                   */\n*     4 PDSEMFIX BIT(1),                 /* SET WHEN AN EMERGENCY\n*                                           IBM-AUTHORIZED PROGRAM\n*                                           'FIX' IS MADE, AS OPPOSED\n*                                           TO CHANGES THAT ARE\n*                                           INCLUDED IN AN IBM-\n*                                           DISTRIBUTED MAINTENANCE\n*                                           PACKAGE                  */\n*     4 PDSDEPCH BIT(1),                 /* A CHANGE MADE TO THE\n*                                           MEMBER IS DEPENDENT UPON\n*                                           A CHANGE MADE TO SOME\n*                                           OTHER MEMBER IN SYSTEM   */\n*     4 PDSSYSGN BIT(2),                 /* FLAGS THAT INDICATE\n*                                           WHETHER OR NOT A CHANGE\n*                                           TO THE MEMBER WILL\n*                                           NECESSITATE A PARTIAL OR\n*                                           COMPLETE REGENERATION OF\n*                                           THE SYSTEM               */\n*%PDSNOSGN='''00''B';                    /* NOT CRITICAL FOR SYSTEM\n*                                           GENERATION               */\n*%PDSCMSGN='''01''B';                    /* MAY REQUIRE COMPLETE\n*                                           REGENERATION             */\n*%PDSPTSGN='''10''B';                    /* MAY REQUIRE PARTIAL\n*                                           REGENERATION             */\n*     4 PDSIBMMB BIT(1),                 /* MEMBER IS SUPPLIED BY IBM*/\n*    3 PDSMBRSN    CHAR(2),              /* MEMBER SERIAL NUMBER     */\n*   2 PDSS03ND    CHAR(0);               /* END OF SSI SECTION       */\n*\n*\n* /*     THE FOLLOWING SECTION IS FOR APF INFORMATION          ICB360*/\n*\n*DECLARE\n*  1 PDSS04   BASED(PDSPTRV)  BDY(BYTE),\n*   2 PDSAPF      CHAR(2),               /* PROGRAM AUTHORIZATION\n*                                           FACILITY (APF) FIELD\n*                                                              ICB360*/\n*    3 PDSAPFCT    PTR(8),               /* LENGTH OF PROGRAM\n*                                           AUTHORIZATION CODE\n*                                           (PDSAPFAC) IN BYTES\n*                                                              ICB360*/\n*    3 PDSAPFAC    CHAR(1),              /* PROGRAM AUTHORIZATION\n*                                           CODE               ICB360*/\n*   2 PDSS04ND    CHAR(0);               /* END OF APF SECTION ICB360*/\n./ ADD NAME=IHARB    0100-19106-19106-1238-00563-00563-00000-MZAP78  17\n*\n*        %GOTO RBL1;        /*\n         MACRO\n         IHARB &DSECT=YES    */\n*%RBL1 : ;\n*\n*/* **************************************************************** */\n*/*                                                                  */\n*/*      THIS MACRO MAPS AOS/2 REQUEST BLOCKS                        */\n*/*                                                                  */\n*/*      SVRB - SUPERVISOR REQUEST BLOCK FOR TRANSIENT SVC ROUTINES  */\n*/*      SVRB - SUPERVISOR REQUEST BLOCK FOR RESIDENT SVC ROUTINES   */\n*/*      IRB  - INTERRUPTION REQUEST BLOCK                           */\n*/*      SIRB - SYSTEM INTERRUPT REQUEST BLOCK                       */\n*/*      PRB  - PROGRAM REQUEST BLOCK                                */\n*/*      TIRB - TASK INTERRUPTION REQUEST BLOCK                      */\n*/*                                                                  */\n*/*  AOS/2 RELEASE 1, 05/31/72, LEVEL=8                              */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */\n*/*             USING ON RBPREFIX GIVES ADDRESSABILITY FOR ALL       */\n*/*             SYMBOLS.                                             */\n*/*      PL/S - DCL RBSECPTR PTR                                     */\n*/* **************************************************************** */\n*%GOTO RBL2;  /*\n         SPACE 1\n         IEZBITS , -          SYMBOLIC BIT DEFINITIONS\n         SPACE 1\n         MNOTE 0,'REPLACE IHARB WITH VS2 IKJRB'\n         AIF   ('&DSECT' EQ 'NO').NODSCT1\nRBPREFIX DSECT , -            RBSECPTR-64\n         AGO   .CONT1\n.NODSCT1 ANOP\n         DS    0D\nRBPREFIX EQU   * -            RBSECPTR-64\n.CONT1   ANOP\n         DS    7D -           RESERVED FOR FUTURE EXPANSION\nRBPRFXST DS    0D -           START OF ASSIGNED FIELDS IN RB PREFIX\nRBFLAGS1 DS    B -            FLAG BYTE\nRBSLOCK  EQU   BIT0 -         INDICATES THAT THIS RB IS\n*                             NON-DISPATCHABLE UNTIL THE SUPERVISOR\n*                             LOCK (CVTSYLK) IS RESET  (ALL RB'S)\nRBXWAIT  EQU   BIT1 -         INDICATES THAT THE PROGRAM OPERATING\n*                             UNDER THIS RB HAS ISSUED AN EXPLICIT\n*                             (SVC) WAIT  (ALL RB'S)\nRBABEND  EQU   BIT2 -         ABEND SVRB  (SVRB-BOTH)\nRBUPR    EQU   BIT3 -         INDICATES THAT ADDRESS OF A PIE HAS BEEN\n*                             PLACED IN FIRST WORD OF RBEXSAVE AND A\n*                             SUPERVISOR SPIE EXIT CAN BE SCHEDULED IF\n*                             AN INVALID PAGE REFERENCE OCCURS\n*                             (SVRB-BOTH)\nRBASIR   EQU   BIT4 -         ASIR IS RUNNING UNDER THIS RB      ICB444\nRBRSV001 EQU   BIT5,,C'X' -   RESERVED\nRBRSV002 EQU   BIT6,,C'X' -   RESERVED\nRBRSV003 EQU   BIT7,,C'X' -   RESERVED\nRBRSV004 DS    XL3 -          RESERVED\nRBWCSA   DS    FL1 -          NUMBER OF REQUESTS WAITING AT TIME OF\n*                             TERMINATION (WAIT COUNT SAVE AREA)\n*                             (ALL RB'S)\nRBINTCDA DS    0CL3 -         INTERRUPT CODE  (ALL RB'S)\nRBINLNTH DS    CL1 -          INSTRUCTION LENGTH CODE - 4 HIGH-ORDER\n*                             BITS MUST BE ZERO  (ALL RB'S)\nRBINTCOD DS    CL2 -          INTERRUPT CODE  (ALL RB'S)\nRBPRFXND DS    0C -           END OF RB PREFIX\n         SPACE 2\n         DS    0D -\nRBSECT   EQU   * -            RBSECPTR - THIS IS THE START OF THE\n*                             BASIC SECTION OF THE RB\nRBPPSAV  DS    0A -           ADDRESS OF PROBLEM PROGRAM REGISTER SAVE\n*                             AREA (IRB)\nRBTMFLD  DS    B -            INDICATORS FOR TIMER ROUTINES.  WHEN\n*                             THERE ARE NO TIMER ROUTINES, THIS FIELD\n*                             IS ZERO.  (IRB)\nRBTMQUE  EQU   BIT0 -         TIMER ELEMENT NOT ON QUEUE\nRBTMTOD  EQU   BIT1 -         LOCAL TIME-OF-DAY OPTION IS USED\nRBRSV005 EQU   BIT2,,C'X' -   RESERVED\nRBRSV006 EQU   BIT3,,C'X' -   RESERVED\nRBTMCMP  EQU   BIT4 -         INTERVAL HAS EXPIRED\nRBTMIND2 EQU   BIT5 -         EXIT SPECIFIED WITH TASK OR REAL REQUEST\nRBTMIND3 EQU   BIT6+BIT7 -    TYPE OF REQUEST\nRBTREQ   EQU   X'00' -        TASK REQUEST\nRBWREQ   EQU   BIT7 -         WAIT REQUEST\nRBRREQ   EQU   BIT6+BIT7 -    REAL REQUEST\nRBPPSAV1 DS    AL3 -          ADDRESS OF PROBLEM PROGRAM REGISTER SAVE\n*                             AREA (IRB)\nRBABOPSW DS    CL4 -          AFTER EXECUTION OF TRANSIENT AREA HANDLER\n*                             ROUTINE - FOUR LOW-ORDER BYTES OF NAME OF\n*                             REQUESTED ROUTINE  (SVRB-TRANS)\n*                             AFTER EXECUTION OF ABTERM ROUTINE -\n*                             RIGHT HALF OF USER'S OLD PSW ---\n*                             OTHERWISE - ZERO\n*                             (SVRB-BOTH, IRB, PRB, TIRB)\nRBSIZE   DS    H -            SIZE OF THIS RB IN DOUBLEWORDS (ALL RB'S)\nRBSTAB   DS    0BL2 -         STATUS AND ATTRIBUTE BITS  (ALL RB'S)\nRBSTAB1  DS    B -            FIRST BYTE OF STATUS AND ATTRIBUTE BITS\nRBFTP    EQU   BIT0+BIT1+BIT2 TYPE OF RB\nRBFTPRB  EQU   X'00' -        PRB\nRBFTTIRB EQU   BIT1+BIT2 -    TIRB                               ICB417\nRBFTIRB  EQU   BIT1 -         IRB\nRBFTSIRB EQU   BIT0 -         SIRB\nRBFTSVRB EQU   BIT0+BIT1 -    SVRB\nRBTRSVRB EQU   BIT3 -         IF RBTRSVRB=0 AND RBCDE=0, THEN TYPE 2\n*                             SVC IN NUCLEUS.  IF RBTRSVRB=0 AND\n*                             RBCDE1 NOT 0, THEN SECOND OR SUBSEQUENT\n*                             LOAD OF TYPE 4 SVC IN FIXED OR MODIFIED\n*                             LPA (RBCDE1 = ADDRESS OF CDE).  IF\n*                             RBTRSVRB=1 AND RBCDE1=0, THEN TYPE 3 OR\n*                             FIRST LOAD OF TYPE 4 SVC IN PAGED, FIXED\n*                             OR MODIFIED LPA.  IF RBTRSVRB=1 AND\n*                             RBCDE1 NOT 0, THEN SECOND OR SUBSEQUENT\n*                             LOAD OF TYPE 4 SVC IN PAGED LPA (RBCDE1\n*                             = ADDRESS OF LPDE).\nRBFNSVRB EQU   BIT3 -         ALIAS FOR RBTRSVRB\nRBWAITP  EQU   BIT4 -         INDICATES THAT AN ECB IS POINTING AT THE\n*                             RB.                                ICB416\nRBFTCKPT EQU   BIT5 -         A CHECKPOINT MAY BE TAKEN IN A USER EXIT\n*                             FROM THIS SVC ROUTINE (SVRB-BOTH)\nRBATNXIT EQU   BIT6 -         THIS IRB IS AN ATTENTION IRB       ICB444\nRBRSV007 EQU   BIT7,,C'X' -   RESERVED\nRBSTAB2  DS    B -            SECOND BYTE OF STATUS AND ATTRIBUTE BITS\nRBTCBNXT EQU   BIT0 -         RBLINK FIELD POINTS TO TCB (ALL RB'S)\nRBFACTV  EQU   BIT1 -         IRB OR SIRB IS QUEUED TO TCB - PROGRAM IS\n*                             ACTIVE\nRBATTN   EQU   BIT2 -         EXITING PROGRAM IS AN ATTENTION EXIT\n*                             (IRB)\nRBETXR   EQU   BIT3 -         IRB IS FOR AN ETXR EXIT ROUTINE\nRBUSIQE  EQU   BIT3 -         SAME AS RBETXR                     ICB444\nRBIQETP  EQU   BIT4+BIT5 -\nRBRQENR  EQU   X'00' -        REQUEST QUEUE ELEMENT IS NOT TO BE\n*                             RETURNED\nRBIRBAER EQU   BIT5 -         IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY\n*                             EXECUTED ROUTINES THAT ARE RQE'S\nRBIQENR  EQU   BIT4 -         IQE IS NOT TO BE RETURNED AT EXIT\nRBIRBAIQ EQU   BIT4+BIT5 -    IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY\n*                             EXECUTED ROUTINES THAT ARE IQE'S\nRBFDYN   EQU   BIT6 -         RB STORAGE CAN BE FREED AT EXIT\nRBECBWT  EQU   BIT7 -         IF ZERO, WAIT FOR A SINGLE EVENT OR ALL\n*                             OF A NUMBER OF EVENTS ---\n*                             IF ONE, WAIT FOR A NUMBER OF EVENTS THAT\n*                             IS LESS THAN THE TOTAL NUMBER OF EVENTS\n*                             WAITING\nRBEP     DS    A -            ENTRY POINT ADDRESS OF ASYNCHRONOUSLY\n*                             EXECUTED ROUTINE (IRB, SIRB)\nRBOPSW   DS    CL8 -          USER'S OLD PSW (ALL RB'S)\nRBPGMQ   DS    0A -           SAME AS RBPGMQ1 BELOW\n         DS    X -            ZERO\nRBPGMQ1  DS    AL3 -          ADDRESS OF RB INDICATING A REQUEST TO USE\n*                             SAME SERIALLY REUSABLE PROGRAM\n*                             (SVRB-RES, PRB)\nRBLINK   DS    0A -           SAME AS FOR RBLINKB BELOW\nRBWCF    DS    FL1 -          NUMBER OF REQUESTS WAITING (WAIT COUNT)\n*                             (ALL RB'S)\nRBLINKB  DS    AL3 -          ADDRESS OF PREVIOUS RB, OR ADDRESS OF TCB\n*                             WHEN THIS IS FIRST RB ON THE QUEUE\n*                             (ALL RB'S)\nPRBEND   DS    0F -           END OF PRB\nSIRBEND  DS    0F -           END OF SIRB\nRBGRSAVE DS    0CL64 -        GENERAL REGISTER SAVE AREA\n*                             (SVRB-BOTH, IRB, TIRB)\nRBGRS0   DS    F -            SAVE AREA FOR GENERAL REGISTER 0\nRBGRS1   DS    F -            SAVE AREA FOR GENERAL REGISTER 1\nRBGRS2   DS    F -            SAVE AREA FOR GENERAL REGISTER 2\nRBGRS3   DS    F -            SAVE AREA FOR GENERAL REGISTER 3\nRBGRS4   DS    F -            SAVE AREA FOR GENERAL REGISTER 4\nRBGRS5   DS    F -            SAVE AREA FOR GENERAL REGISTER 5\nRBGRS6   DS    F -            SAVE AREA FOR GENERAL REGISTER 6\nRBGRS7   DS    F -            SAVE AREA FOR GENERAL REGISTER 7\nRBGRS8   DS    F -            SAVE AREA FOR GENERAL REGISTER 8\nRBGRS9   DS    F -            SAVE AREA FOR GENERAL REGISTER 9\nRBGRS10  DS    F -            SAVE AREA FOR GENERAL REGISTER 10\nRBGRS11  DS    F -            SAVE AREA FOR GENERAL REGISTER 11\nRBGRS12  DS    F -            SAVE AREA FOR GENERAL REGISTER 12\nRBGRS13  DS    F -            SAVE AREA FOR GENERAL REGISTER 13\nRBGRS14  DS    F -            SAVE AREA FOR GENERAL REGISTER 14\nRBGRS15  DS    F -            SAVE AREA FOR GENERAL REGISTER 15\nTIRBEND  DS    0F -           END OF TIRB\nIRBEND   DS    0F -           END OF IRB UNLESS OPTIONAL FIELDS\n*                             RBNEXAV AND RBIQEWRK ARE PRESENT\nRBEXSAVE DS    12F -          EXTENDED SAVE AREA FOR SVC ROUTINES\n*                             (SVRB-BOTH)\nSVRBEND  DS    0F -           END OF SVRB (BOTH)\n         SPACE 2\n         ORG   RBPPSAV -      FOR SIRB\nRBEXRTNM DS    CL8 -          EIGHT-CHARACTER NAME OF ERROR EXIT\n*                             ROUTINE (SIRB)\n         SPACE 2\n         ORG   RBEP -         FOR SVRB-BOTH AND PRB\nRBCDE    DS    0A -           SAME AS RBCDE1 BELOW\nRBCDFLGS DS    B -            CONTROL FLAGS\nRBRSV008 EQU   BIT0,,C'X' -   RESERVED\nRBRSV009 EQU   BIT1,,C'X' -   RESERVED\nRBCDATCH EQU   BIT2 -         CONTENTS SUPERVISION HAS BEEN ENTERED\n*                             VIA ATTACH                         ICB444\nRBRSV010 EQU   BIT3,,C'X' -   RESERVED\nRBCDNODE EQU   BIT4 -         NO DE SAVE AREA REQUIRED           ICB444\nRBCDSYNC EQU   BIT5 -         SYNCH MACRO INSTRUCTION REQUESTED\nRBCDXCTL EQU   BIT6 -         XCTL MACRO INSTRUCTION REQUESTED\nRBCDLOAD EQU   BIT7 -         LOAD MACRO INSTRUCTION REQUESTED\nRBCDE1   DS    AL3 -          ADDRESS OF CDE, ADDRESS OF LPDE OR ZERO\n*                             (SEE COMMENTS FOR BIT RBTRSVRB)\n         SPACE 2\n         ORG   RBPGMQ -       FOR TIRB\nRBSQE    DS    0A -           SAME AS RBSQEA BELOW\n         DS    FL1 -          RBUSE - CONTAINS ZEROS\nRBSQEA   DS    AL3 -          CHAIN OF SUPERVISOR QUEUE ELEMENTS\n*                             (SQE'S) WHICH REPRESENT ASYNCHRONOUS\n*                             SUPERVISOR SERVICE REQUESTS RELATED TO\n*                             TCB UNDER WHICH TIRB IS PRESENTLY\n*                             OPERATING  (TIRB)\n         SPACE 2\n         ORG   RBPGMQ -       FOR IRB (3-BYTE LINK FIELD SEGMENT)\nRBIQE    DS    0A -           LIST ORIGIN FOR IQE (IRB)\nRBUSE    DS    FL1 -          USE COUNT USED BY ATTACH (IRB)\nRBIQE1   DS    AL3 -          LIST ORIGIN FOR IQE (IRB)\n         SPACE 2\n         ORG   RBPGMQ -       FOR IRB (2-BYTE LINK FIELD SEGMENT), SIRB\nRBIQE2   DS    0F -\nRBRSV011 DS    XL2 -          RESERVED\nRBIQEA   DS    H -            LIST ORIGIN FOR RQE (IRB WITH 2-BYTE LINK\n*                             FIELD SEGMENT, SIRB)\n         SPACE 2\n         ORG   RBEXSAVE -     FOR IRB--FIELDS PRESENT ONLY IF REQUESTED\nRBNEXAV  DS    A -            ADDRESS OF NEXT AVAILABLE IQE (IRB)\nRBIQEWRK DS    F -            IQE WORK SPACE, VARIABLE LENGTH,\n*                             MAXIMUM SIZE IS 1984 BYTES (IRB)\n         SPACE 2\nRBPRFXLN EQU   RBPRFXND-RBPREFIX - TOTAL PREFIX LENGTH INCLUDING\n*                                  AREA RESERVED FOR FUTURE EXPANSION\nRBPRFLNA EQU   RBPRFXND-RBPRFXST - ASSIGNED PREFIX LENGTH\nPRBLEN   EQU   PRBEND-RBPRFXST -   REAL PRB LENGTH FOR GETMAIN\nSIRBLEN  EQU   SIRBEND-RBPRFXST -  REAL SIRB LENGTH FOR GETMAIN\nTIRBLEN  EQU   TIRBEND-RBPRFXST -  REAL TIRB LENGTH FOR GETMAIN\nIRBLEN   EQU   IRBEND-RBPRFXST -   REAL IRB LENGTH FOR GETMAIN UNLESS\n*                                  OPTIONAL FIELDS ARE ALSO PRESENT\nSVRBLEN  EQU   SVRBEND-RBPRFXST -  REAL SVRB LENGTH FOR GETMAIN\n         MEND  , */\n*%RBL2   :  ;\n*\n*DECLARE\n*  1 RBPREFIX BASED (RBSECPTR-64),\n*   2 *           CHAR(56),              /* RESERVED FOR FUTURE\n*                                           EXPANSION                */\n*   2 RBPRFXST    CHAR(0),               /* START OF ASSIGNED FIELDS\n*                                           IN RB PREFIX             */\n*   2 RBFLAGS1    CHAR(1),               /* FLAG BYTE                */\n*    3 RBSLOCK  BIT(1),                  /* INDICATES THAT THIS RB\n*                                           IS NON-DISPATCHABLE UNTIL\n*                                           THE SUPERVISOR LOCK\n*                                           (CVTSYLK) IS RESET\n*                                           (ALL RB'S)               */\n*    3 RBXWAIT  BIT(1),                  /* INDICATES THAT THE\n*                                           PROGRAM OPERATING UNDER\n*                                           THIS RB HAS ISSUED AN\n*                                           EXPLICIT (SVC) WAIT\n*                                           (ALL RB'S)               */\n*    3 RBABEND  BIT(1),                  /* ABEND SVRB  (SVRB-BOTH)  */\n*    3 RBUPR    BIT(1),                  /* INDICATES THAT ADDRESS OF\n*                                           A PIE HAS BEEN PLACED IN\n*                                           FIRST WORD OF RBEXSAVE\n*                                           AND A SUPERVISOR SPIE\n*                                           EXIT CAN BE SCHEDULED IF\n*                                           AN INVALID PAGE REFERENCE\n*                                           OCCURS  (SVRB-BOTH)      */\n*    3 RBASIR   BIT(1),                  /* ASIR IS RUNNING UNDER\n*                                           THIS RB            ICB444*/\n*    3 RBRSV001 BIT(1),                  /* RESERVED                 */\n*    3 RBRSV002 BIT(1),                  /* RESERVED                 */\n*    3 RBRSV003 BIT(1),                  /* RESERVED                 */\n*   2 RBRSV004    PTR(24),               /* RESERVED                 */\n*   2 RBWCSA      PTR(8),                /* NUMBER OF REQUESTS\n*                                           WAITING AT TIME OF\n*                                           TERMINATION (WAIT COUNT\n*                                           SAVE AREA)  (ALL RB'S)   */\n*   2 RBINTCDA    CHAR(3),               /* INTERRUPT CODE (ALL RB'S)*/\n*    3 RBINLNTH    CHAR(1),              /* INSTRUCTION LENGTH CODE\n*                                           - 4 HIGH-ORDER BITS MUST\n*                                           BE ZERO  (ALL RB'S)      */\n*    3 RBINTCOD    CHAR(2),              /* INTERRUPT CODE (ALL RB'S)*/\n*   2 RBPRFXND    CHAR(0);               /* END OF RB PREFIX         */\n*\n*\n*DECLARE\n*  1 RBSECT   BASED(RBSECPTR),\n*   2 RBPPSAV     PTR(31),               /* ADDRESS OF PROBLEM\n*                                           PROGRAM REGISTER SAVE\n*                                           AREA (IRB)               */\n*    3 RBTMFLD     CHAR(1),              /* INDICATORS FOR TIMER\n*                                           ROUTINES. WHEN  THERE\n*                                           ARE NO TIMER ROUTINES,\n*                                           THIS FIELD  IS ZERO.\n*                                           (IRB)                    */\n*     4 RBTMQUE  BIT(1),                 /* TIMER ELEMENT NOT ON\n*                                           QUEUE                    */\n*     4 RBTMTOD  BIT(1),                 /* LOCAL TIME-OF-DAY OPTION\n*                                           IS USED                  */\n*     4 RBRSV005 BIT(1),                 /* RESERVED                 */\n*     4 RBRSV006 BIT(1),                 /* RESERVED                 */\n*     4 RBTMCMP  BIT(1),                 /* INTERVAL HAS EXPIRED     */\n*     4 RBTMIND2 BIT(1),                 /* EXIT SPECIFIED WITH TASK\n*                                           OR REAL REQUEST          */\n*     4 RBTMIND3 BIT(2),                 /* TYPE OF REQUEST          */\n*%DCL RBTREQ   CHAR;\n*%RBTREQ  ='''00''B';                    /* TASK REQUEST             */\n*%DCL RBWREQ   CHAR;\n*%RBWREQ  ='''01''B';                    /* WAIT REQUEST             */\n*%DCL RBRREQ   CHAR;\n*%RBRREQ  ='''11''B';                    /* REAL REQUEST             */\n*    3 RBPPSAV1    PTR(24),              /* ADDRESS OF PROBLEM\n*                                           PROGRAM REGISTER SAVE\n*                                           AREA (IRB)               */\n*   2 RBABOPSW    CHAR(4),               /* AFTER EXECUTION OF\n*                                           TRANSIENT AREA HANDLER\n*                                           ROUTINE - FOUR LOW-ORDER\n*                                           BYTES OF NAME OF\n*                                           REQUESTED ROUTINE\n*                                           (SVRB-TRANS)  AFTER\n*                                           EXECUTION OF ABTERM\n*                                           ROUTINE -  RIGHT HALF OF\n*                                           USER'S OLD PSW ---\n*                                           OTHERWISE - ZERO\n*                                           (SVRB-BOTH, IRB,PRB,TIRB)*/\n*   2 RBSIZE      FIXED(15),             /* SIZE OF THIS RB IN\n*                                           DOUBLEWORDS (ALL RB'S)   */\n*   2 RBSTAB      CHAR(2),               /* STATUS AND ATTRIBUTE\n*                                           BITS  (ALL RB'S)         */\n*    3 RBSTAB1     CHAR(1),              /* FIRST BYTE OF STATUS AND\n*                                           ATTRIBUTE BITS           */\n*     4 RBFTP    BIT(3),                 /* TYPE OF RB               */\n*%DCL RBFTPRB  CHAR;\n*%RBFTPRB ='''000''B';                   /* PRB                      */\n*%DCL RBFTTIRB CHAR;\n*%RBFTTIRB='''011''B';                   /* TIRB               ICB417*/\n*%DCL RBFTIRB  CHAR;\n*%RBFTIRB ='''010''B';                   /* IRB                      */\n*%DCL RBFTSIRB CHAR;\n*%RBFTSIRB='''100''B';                   /* SIRB                     */\n*%DCL RBFTSVRB CHAR;\n*%RBFTSVRB='''110''B';                   /* SVRB                     */\n*     4 RBTRSVRB BIT(1),                 /* IF RBTRSVRB=0 AND\n*                                           RBCDE1=0, THEN TYPE 2 SVC\n*                                           IN NUCLEUS.  IF RBTRSVRB=0\n*                                           AND RBCDE1 NOT 0, THEN\n*                                           SECOND OR SUBSEQUENT LOAD\n*                                           OF TYPE 4 SVC IN FIXED OR\n*                                           MODIFIED LPA (RBCDE1 =\n*                                           ADDRESS OF CDE).  IF\n*                                           RBTRSVRB=1 AND RBCDE1=0,\n*                                           THEN TYPE 3 OR FIRST LOAD\n*                                           OF TYPE 4 SVC IN PAGED,\n*                                           FIXED OR MODIFIED LPA.\n*                                           IF RBTRSVRB=1 AND RBCDE1\n*                                           NOT 0, THEN SECOND OR\n*                                           SUBSEQUENT LOAD OF TYPE 4\n*                                           SVC IN PAGED LPA (RBCDE1\n*                                           = ADDRESS OF LPDE).      */\n*      5 RBFNSVRB BIT(1),                /* ALIAS FOR RBTRSVRB       */\n*     4 RBWAITP  BIT(1),                 /* INDICATES THAT AN ECB IS\n*                                           POINTING AT THE RB ICB416*/\n*     4 RBFTCKPT BIT(1),                 /* A CHECKPOINT MAY BE\n*                                           TAKEN IN A USER EXIT\n*                                           FROM THIS SVC ROUTINE\n*                                           (SVRB-BOTH)              */\n*     4 RBATNXIT BIT(1),                 /* THIS IRB IS AN ATTENTION\n*                                           IRB                ICB444*/\n*     4 RBRSV007 BIT(1),                 /* RESERVED                 */\n*    3 RBSTAB2     CHAR(1),              /* SECOND BYTE OF STATUS\n*                                           AND ATTRIBUTE BITS       */\n*     4 RBTCBNXT BIT(1),                 /* RBLINK FIELD POINTS TO\n*                                           TCB (ALL RB'S)           */\n*     4 RBFACTV  BIT(1),                 /* IRB OR SIRB IS QUEUED TO\n*                                           TCB - PROGRAM IS ACTIVE  */\n*     4 RBATTN   BIT(1),                 /* EXITING PROGRAM IS AN\n*                                           ATTENTION EXIT  (IRB)    */\n*     4 RBETXR   BIT(1),                 /* IRB IS FOR AN ETXR EXIT\n*                                           ROUTINE                  */\n*      5 RBUSIQE  BIT(1),                /* SAME AS RBETXR     ICB444*/\n*     4 RBIQETP  BIT(2),\n*%DCL RBRQENR  CHAR;\n*%RBRQENR ='''00''B';                    /* REQUEST QUEUE ELEMENT IS\n*                                           NOT TO BE RETURNED       */\n*%DCL RBIRBAER CHAR;\n*%RBIRBAER='''01''B';                    /* IRB HAS QUEUE ELEMENTS\n*                                           FOR ASYNCHRONOUSLY\n*                                           EXECUTED ROUTINES THAT\n*                                           ARE RQE'S                */\n*%DCL RBIQENR  CHAR;\n*%RBIQENR ='''10''B';                    /* IQE IS NOT TO BE\n*                                           RETURNED AT EXIT         */\n*%DCL RBIRBAIQ CHAR;\n*%RBIRBAIQ='''11''B';                    /* IRB HAS QUEUE ELEMENTS\n*                                           FOR ASYNCHRONOUSLY\n*                                           EXECUTED ROUTINES THAT\n*                                           ARE IQE'S                */\n*     4 RBFDYN   BIT(1),                 /* RB STORAGE CAN BE FREED\n*                                           AT EXIT                  */\n*     4 RBECBWT  BIT(1),                 /* IF ZERO, WAIT FOR A\n*                                           SINGLE EVENT OR ALL  OF\n*                                           A NUMBER OF EVENTS ---\n*                                           IF ONE, WAIT FOR A\n*                                           NUMBER OF EVENTS THAT\n*                                           IS LESS THAN THE TOTAL\n*                                           NUMBER OF EVENTS\n*                                           WAITING                  */\n*   2 RBEP        PTR(31),               /* ENTRY POINT ADDRESS OF\n*                                           ASYNCHRONOUSLY  EXECUTED\n*                                           ROUTINE (IRB, SIRB)      */\n*   2 RBOPSW      CHAR(8)  BDY(WORD),    /* USER'S OLD PSW (ALL\n*                                           RB'S)                    */\n*   2 RBPGMQ      PTR(31),               /* SAME AS RBPGMQ1 BELOW    */\n*    3 *           CHAR(1),              /* ZERO                     */\n*    3 RBPGMQ1     PTR(24),              /* ADDRESS OF RB INDICATING\n*                                           A REQUEST TO USE SAME\n*                                           SERIALLY REUSABLE\n*                                           PROGRAM   (SVRB-RES,\n*                                           PRB)                     */\n*   2 RBLINK      PTR(31),               /* SAME AS FOR RBLINKB\n*                                           BELOW                    */\n*    3 RBWCF       PTR(8),               /* NUMBER OF REQUESTS\n*                                           WAITING (WAIT COUNT)\n*                                           (ALL RB'S)               */\n*    3 RBLINKB     PTR(24),              /* ADDRESS OF PREVIOUS RB,\n*                                           OR ADDRESS OF TCB WHEN\n*                                           THIS IS FIRST RB ON THE\n*                                           QUEUE  (ALL RB'S)        */\n*   2 PRBEND   CHAR(0)  BDY(WORD),       /* END OF PRB               */\n*   2 SIRBEND  CHAR(0)  BDY(WORD),       /* END OF SIRB              */\n*   2 RBGRSAVE    CHAR(64)  BDY(WORD),   /* GENERAL REGISTER SAVE\n*                                           AREA  (SVRB-BOTH, IRB,\n*                                           TIRB)                    */\n*    3 RBGRS0      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 0               */\n*    3 RBGRS1      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 1               */\n*    3 RBGRS2      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 2               */\n*    3 RBGRS3      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 3               */\n*    3 RBGRS4      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 4               */\n*    3 RBGRS5      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 5               */\n*    3 RBGRS6      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 6               */\n*    3 RBGRS7      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 7               */\n*    3 RBGRS8      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 8               */\n*    3 RBGRS9      FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 9               */\n*    3 RBGRS10     FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 10              */\n*    3 RBGRS11     FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 11              */\n*    3 RBGRS12     FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 12              */\n*    3 RBGRS13     FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 13              */\n*    3 RBGRS14     FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 14              */\n*    3 RBGRS15     FIXED(31),            /* SAVE AREA FOR GENERAL\n*                                           REGISTER 15              */\n*   2 TIRBEND     CHAR(0)  BDY(WORD),    /* END OF TIRB              */\n*   2 IRBEND      CHAR(0)  BDY(WORD),    /* END OF IRB UNLESS\n*                                           OPTIONAL FIELDS RBNEXAV\n*                                           AND RBIQEWRK ARE PRESENT */\n*   2 RBEXSAVE (12) FIXED(31),           /* EXTENDED SAVE AREA FOR\n*                                           SVC ROUTINES\n*                                           (SVRB-BOTH)              */\n*   2 SVRBEND  CHAR(0)  BDY(WORD);       /* END OF SVRB (BOTH)       */\n*\n*\n*DECLARE 1 RBSECS01\n*      BASED(ADDR(RBPPSAV)),             /* FOR SIRB                 */\n*   2 RBEXRTNM    CHAR(8)  BDY(WORD);    /* EIGHT-CHARACTER NAME OF\n*                                           ERROR EXIT  ROUTINE\n*                                           (SIRB)                   */\n*\n*\n*DECLARE 1 RBSECS03\n*      BASED(ADDR(RBEP)),                /* FOR SVRB-BOTH AND PRB    */\n*   2 RBCDE       PTR(31),               /* SAME AS RBCDE1 BELOW     */\n*    3 RBCDFLGS    CHAR(1),              /* CONTROL FLAGS            */\n*     4 RBRSV008 BIT(1),                 /* RESERVED                 */\n*     4 RBRSV009 BIT(1),                 /* RESERVED                 */\n*     4 RBCDATCH BIT(1),                 /* CONTENTS SUPERVISION HAS\n*                                           BEEN ENTERED VIA ATTACH\n*                                                              ICB444*/\n*     4 RBRSV010 BIT(1),                 /* RESERVED                 */\n*     4 RBCDNODE BIT(1),                 /* NO DE SAVE AREA\n*                                           REQUIRED           ICB444*/\n*     4 RBCDSYNC BIT(1),                 /* SYNCH MACRO INSTRUCTION\n*                                           REQUESTED                */\n*     4 RBCDXCTL BIT(1),                 /* XCTL MACRO INSTRUCTION\n*                                           REQUESTED                */\n*     4 RBCDLOAD BIT(1),                 /* LOAD MACRO INSTRUCTION\n*                                           REQUESTED                */\n*    3 RBCDE1      PTR(24);              /* ADDRESS OF CDE, ADDRESS\n*                                           OF LPDE OR ZERO (SEE\n*                                           COMMENTS FOR BIT\n*                                           RBTRSVRB)                */\n*\n*\n*DECLARE 1 RBSECS05\n*      BASED(ADDR(RBPGMQ)),              /* FOR TIRB AND PRB         */\n*   2 RBSQE       PTR(31),               /* SAME AS RBSQEA BELOW     */\n*    3 *           PTR(8),               /* RBUSE - CONTAINS ZEROS   */\n*    3 RBSQEA      PTR(24);              /* CHAIN OF SUPERVISOR QUEUE\n*                                           ELEMENTS (SQE'S) WHICH\n*                                           REPRESENT ASYNCHRONOUS\n*                                           SUPERVISOR SERVICE\n*                                           REQUESTS RELATED TO TCB\n*                                           UNDER WHICH TIRB IS\n*                                           PRESENTLY OPERATING\n*                                           (TIRB)                   */\n*\n*\n*DECLARE 1 RBSECS06\n*      BASED(ADDR(RBPGMQ)),              /* FOR IRB (3-BYTE LINK\n*                                           FIELD SEGMENT)           */\n*   2 RBIQE       PTR(31),               /* LIST ORIGIN FOR IQE\n*                                           (IRB)                    */\n*    3 RBUSE       PTR(8),               /* USE COUNT USED BY ATTACH\n*                                           (IRB)                    */\n*    3 RBIQE1      PTR(24);              /* LIST ORIGIN FOR IQE\n*                                           (IRB)                    */\n*\n*\n*DECLARE 1 RBSECS07\n*      BASED(ADDR(RBPGMQ)),              /* FOR IRB (2-BYTE LINK\n*                                           FIELD SEGMENT), SIRB     */\n*   2 RBIQE2      FIXED(31),\n*    3 RBRSV011    FIXED(15),            /* RESERVED                 */\n*    3 RBIQEA      FIXED(15);            /* LIST ORIGIN FOR RQE (IRB\n*                                           WITH 2-BYTE LINK FIELD\n*                                           SEGMENT, SIRB)           */\n*\n*\n*DECLARE 1 RBSECS08\n*      BASED(ADDR(RBEXSAVE)),            /* FOR IRB--FIELDS PRESENT\n*                                           ONLY IF REQUESTED        */\n*   2 RBNEXAV     PTR(31),               /* ADDRESS OF NEXT\n*                                           AVAILABLE IQE (IRB)      */\n*   2 RBIQEWRK    FIXED(31);             /* IQE WORK SPACE, VARIABLE\n*                                           LENGTH,  MAXIMUM SIZE IS\n*                                           1984 BYTES (IRB)         */\n*\n*\n*RBPRFXLN:  GEN  (EQU 64);               /* TOTAL PREFIX LENGTH\n*                                           INCLUDING AREA RESERVED\n*                                           FOR FUTURE EXPANSION     */\n*RBPRFLNA:  GEN  (EQU 8);                /* ASSIGNED PREFIX LENGTH   */\n*PRBLEN:    GEN  (EQU 40);               /* REAL PRB LENGTH FOR\n*                                           GETMAIN                  */\n*SIRBLEN:   GEN  (EQU 40);               /* REAL SIRB LENGTH FOR\n*                                           GETMAIN                  */\n*TIRBLEN:   GEN  (EQU 104);              /* REAL TIRB LENGTH FOR\n*                                           GETMAIN                  */\n*IRBLEN:    GEN  (EQU 104);              /* REAL IRB LENGTH FOR\n*                                           GETMAIN UNLESS OPTIONAL\n*                                           FIELDS ARE ALSO PRESENT  */\n*SVRBLEN:   GEN  (EQU 152);              /* REAL SVRB LENGTH FOR\n*                                           GETMAIN                  */\n./ ADD NAME=IHATCB   0100-19106-19106-1238-02115-02115-00000-MZAP78  17\n*\n*        %GOTO TCBL1; /*\n         MACRO\n         IHATCB &SYS=AOS2,&DSECT=YES     */\n*%TCBL1 : ;\n*/*                                                                  */\n*/*            TASK CONTROL BLOCK                                    */\n*/*                                                                  */\n*/*  OS/VS2 REL 1.6, 12/08/72, LEVEL=19                              */\n*/*                                                                  */\n*/*  METHOD OF ACCESS                                                */\n*/*      BAL  - A DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.    */\n*/*             USING ON TCBFIX GIVES ADDRESSABILITY FOR ALL SYMBOLS */\n*/*             IN PREFIX AND TCB PROPER.  TO GET ADDRESSABILITY FOR */\n*/*             THE AOS/1 - AOS/2 COMMON EXTENSION, YOU SHOULD CODE  */\n*/*                                                                  */\n*/*             L     REG,TCBEXT2                                    */\n*/*             USING TCBXTNT2,REG                                   */\n*/*             WHERE REG IS ANY REGISTER OTHER THAN ZERO.           */\n*/*                                                                  */\n*/*             THIS MACRO ASSUMES A DEFAULT OF SYS=AOS2 WHICH MEANS */\n*/*             A MAPPING OF AN AOS/2 TCB IS DESIRED.  IF A MAPPING  */\n*/*             OF AN AOS/1 TCB IS DESIRED, PUT SYS=AOS1 AS A        */\n*/*             PARAMETER ON THE MACRO CALL.  IF A MAPPING OF THE    */\n*/*             TCB FOR BOTH AOS/1 AND AOS/2 IS DESIRED, PUT         */\n*/*             SYS=BOTH AS A PARAMETER.                             */\n*/*                                                                  */\n*/*      PL/S - DCL TCBPTR PTR                                       */\n*/*                                                                  */\n*/*             THIS MACRO ASSUMES IT IS MAPPING AN AOS/2 TCB.  IF   */\n*/*             AN AOS/1 TCB MAPPING IS DESIRED, SPECIFY             */\n*/*             %TCBSYSTM='AOS1' OR IF A MAPPING OF THE TCB FOR BOTH */\n*/*             AOS/1 AND AOS/2 IS DESIRED, SPECIFY %TCBSYSTM='BOTH' */\n*/*             BEFORE THE INCLUDE FOR THIS MACRO.  DO NOT SET       */\n*/*             TCBSYSTM TO 'AOS2' BECAUSE NULL MEANS AOS/2.         */\n*/*                                                                  */\n*/*             MACRO VARIABLE TCBLEN IS SET TO THE LENGTH OF THE    */\n*/*             TCB INCLUDING THE PREFIX.  TCBLEN IS VALID IF        */\n*/*             TCBSYSTM IS 'AOS1' OR '' (AOS/2), BUT IT IS NOT      */\n*/*             VALID IF TCBSYSTM='BOTH'.                            */\n*\n*%GOTO TCBL2;  /*\n*\n**             TCB PREFIX\n**\n         MNOTE 0,'REPLACE IHATCB WITH VS IKJTCB'\n         AIF   ('&DSECT' EQ 'NO').NODSCT\nTCBFIX   DSECT , -     TCBPTR-32\n         AGO   .CONT\n.NODSCT  ANOP\n         DS    0D\nTCBFIX   EQU   * -     TCBPTR-32\n.CONT    ANOP\n**\nTCBFRS   DS    0CL32 - FLOATING POINT REGISTER SAVE AREA\nTCBFRS0  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 0\nTCBFRS2  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 2\nTCBFRS4  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 4\nTCBFRS6  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 6\nTCBPXLEN EQU   *-TCBFIX LENGTH OF PREFIX SECTION\n**\n**             TCB PROPER\n**\n         DS    0D\nTCB      EQU   * -     TCBPTR\n**\nTCBRBP   DS    A -     PTR TO TOP RB ON RB CHAIN\nTCBPIE   DS    0A -    ADDR OF PROGRAM INTERRUPT ELEMENT (PIE)\nTCBPMASK DS    B -     SPIE BITS\nTCBPM    EQU   X'0F' - PROGRAM MASK AT TIME OF SPIE INITIATION.  MASK\n*                      RESTORED AT TIME OF SPIE NULLIFICATION.\nTCBPIEA  DS    AL3 -   ADDRESS OF PROGRAM INTERRUPT ELEMENT (PIE)\nTCBDEB   DS    A -     ADDR OF THE DEB QUEUE\nTCBTIO   DS    A -     ADDR OF THE TASK I/O TABLE (TIOT)\nTCBCMP   DS    0BL4 -  TASK COMPLETION CODE\nTCBCMPF  DS    B -     COMPLETION FLAGS\nTCBCREQ  EQU   X'80' - A DUMP HAS BEEN REQUESTED\nTCBCSTEP EQU   X'40' - A STEP ABEND HAS BEEN REQUESTED\nTCBCPP   EQU   X'20' - SECOND ABEND LOAD OVERLAID PP STORAGE\n*                      (AOS/1)\n*                      FOR FIRST LOAD OVERLAY SEE TCBFLGS\nTCBSTCC  EQU   X'10' - COMPLETION CODE IS NOT TO BE STORED IN TCBCMPC\n*                      SHOULD AN ABEND BE ENCOUNTERED.  THIS PREVENTS\n*                      AN OVERLAY OF ORIGINAL COMPLETION CODE.\nTCBCDBL  EQU   X'08' - A DOUBLE ABEND HAS OCCURRED\nTCBCWTO  EQU   X'04' - DUMP MSG TO BE ISSUED TO OPR\nTCBCIND  EQU   X'02' - SCHEDULER TO PRINT INDICATIVE DUMP\nTCBCMSG  EQU   X'01' - ABEND MSG PROVIDED TO BE PRINTED BY ABDUMP\nTCBCMPC  DS    BL3 -   SYSTEM (FIRST 12 BITS) AND USER (SECOND 12)\n*                      COMPLETION CODES\nTCBTRN   DS    0A -    ADDR OF CONTROL CORE TABLE\nTCBABF   DS    B -     FLAG BYTE\nTCBMOD91 EQU   X'80' - BOTH TESTRAN AND DECIMAL SIMULATOR ON A MOD 91\nTCBNOCHK EQU   X'40' - SUPPRESS TAKING CHECKPOINTS FOR THIS STEP\n*                      (JOB STEP TCB)\nTCBGRPH  EQU   X'20' - GRAPHICS FOREGROUND JOB OR GRAPHIC JOB PROCESSOR\nTCBRSV01 EQU   X'10',,C'X' - RESERVED\nTCBTCPP  EQU   X'08' - TCAM POST-PENDING  (RORI)\nTCBTCP   EQU   X'04' - TEST TASK - USED BY TEST SVC\nTCBOLTEP EQU   X'02' - OLTEP FUNCTIONS REQUIRE CLEAN-UP BEFORE ABNORMAL\n*                      TERMINATION CAN BE INVOKED\nTCBRSV02 EQU   X'01',,C'X' - RESERVED\nTCBTRNB  DS    AL3 -   ADDR OF CONTROL CORE TABLE\nTCBMSS   DS    0A -    ADDR OF THE BOUNDARY BOX (AOS/1)\n*                      ADDR OF LAST SPQE ON MSS QUEUE (AOS/2)\nTCBRSV03 DS    X -     ** TCBNROC  FIELD UNUSED IN AOS **\nTCBMSSB  DS    AL3 -   ADDR OF THE BOUNDARY BOX (AOS/1)\n*                      ADDR OF LAST SPQE ON MSS QUEUE (AOS/2)\nTCBPKF   DS    B -     STORAGE PROTECTION KEY\nTCBFLAG  EQU   X'F0' - PROTECTION KEY\nTCBZERO  EQU   X'0F' - ZERO\nTCBFLGS  DS    0BL5 -  FLAGS\nTCBFLGS1 DS    B -     FIRST TCB FLAG BYTE\nTCBFA    EQU   X'80' - ABNORMAL TERMINATION IN PROGRESS\nTCBFE    EQU   X'40' - NORMAL TERMINATION IN PROGRESS\n         AIF   ('&SYS' EQ 'AOS2').A1\n         AIF   ('&SYS' EQ 'BOTH').A1A\nTCBABTRM EQU   X'20' - ABEND INITIATED BY RESIDENT ABTERM  (AOS/1)\nTCBRSV04 EQU   X'10',,C'X' - RESERVED\n         AGO   .A1B\n.A1A     ANOP\n*        FOLLOWING AOS/1 EQU IS SHOWN AS A COMMENT BECAUSE\n*        AOS/2 USES THIS LABEL ON ANOTHER BIT\n*TCBABTRM EQU  X'20' - ABEND INITIATED BY RESIDENT ABTERM  (AOS/1)\n.A1B     ANOP\nTCBDMPA  EQU   X'08' - BIT ON INDICATES THIS TASK IS USING THE DUMP\n*                      AREA.  FREEMAIN VALIDITY CHECK ALLOWS TASK TO\n*                      FREEMAIN PROBLEM PROGRAM STORAGE INTO DUMP AREA\n*                      THUS ALLOWING A JOBSTEP TO OBTAIN A DUMP IF\n*                      REQUESTED EVEN IF NOT ENOUGH STORAGE IS IN THE\n*                      PARTITION  (AOS/1)                        ICB440\nTCBPOOL  EQU   X'04' - ABEND SVRB POOL HAS BEEN ASSIGNED TO THIS TASK\n*                      (AOS/1)  (ICBI # 383)                      35198\n.A1      AIF   ('&SYS' EQ 'AOS1').A2\nTCBFERA  EQU   X'20' - ENTER ABEND ERASE ROUTINE WHEN IN CONTROL AGAIN\n*                      (AOS/2)\nTCBRSV04 EQU   X'10',,C'X' - RESERVED\nTCBPDUMP EQU   X'08' - PREVENT DUMP INDICATOR  (AOS/2)\nTCBFT    EQU   X'04' - TOP TASK IN TREE BEING ABTERMED (AOS/2)\n.A2      ANOP\nTCBFS    EQU   X'02' - ABTERM DUMP COMPLETED (AOS/2)\n*                      ABEND OVERLAID PROBLEM PROGRAM STORAGE (AOS/1)\nTCBFX    EQU   X'01' - PROHIBIT ASYNCHRONOUS EXIT QUEUEING\nTCBFLGS2 DS    B -     SECOND FLAG BYTE\n         AIF   ('&SYS' EQ 'AOS2').A3\nTCBSYSTK EQU   X'80' - ABEND PROHIBITED FOR THIS SYSTEM TASK  (AOS/1)\n.A3      AIF   ('&SYS' EQ 'AOS1').A4\nTCBFOINP EQU   X'80' - A VALUE OF 1 INDICATES THAT THE TASK IS ABENDING\n*                      AND IS IN THE PROCESS OF (1) OPEN FOR DUMP\n*                      DATA SET PROCESSING, (2) CLOSE FOR USER DATA\n*                      SET OR (3) PURGE FOR ENQ'ED RESOURCES.  THIS\n*                      BIT IS USED IN CONJUNCTION WITH TCBSTACK.\n*                      (AOS/2)                                   ICB374\n.A4      ANOP\nTCBFSTI  EQU   X'40' - SECOND JOB STEP INTERVAL HAS EXPIRED\n*                      (AOS/2 INITIATOR TCB)\nTCBFABOP EQU   X'20' - A VALUE OF 1 INDICATES THAT THE SYSABEND DUMP\n*                      DATA SET HAS BEEN OPENED FOR ABEND.  A VALUE OF\n*                      0 INDICATES THAT THE SYSUDUMP DUMP DATA SET WAS\n*                      OPENED.  THIS BIT IS ONLY USED FOR THE JOB STEP\n*                      TCB AND IS USED IN CONJUNCTION WITH TCBFDSOP\n*                      BIT.  (OS/VS2)  (ICB482)                  YM0651\nTCBFSMC  EQU   X'10' - TASK HAS ISSUED SYSTEM MUST COMPLETE AND SET\n*                      ALL OTHER TASKS IN THE SYSTEM NONDISPATCHABLE\nTCBFJMC  EQU   X'08' - TASK HAS ISSUED STEP MUST COMPLETE AND TURNED\n*                      OFF ALL OTHER TASKS IN THE STEP\n         AIF   ('&SYS' EQ 'AOS1').A6\nTCBFDSOP EQU   X'04' - SYSABEND OPEN FOR JOBSTEP  (AOS/2)\n.A6      ANOP\n         AIF   ('&SYS' EQ 'AOS2').A6A\nTCBRSV50 EQU   X'04',,C'X' - RESERVED (AOS/1)\n.A6A     ANOP\nTCBFETXR EQU   X'02' - ETXR TO BE SCHEDULED\nTCBFTS   EQU   X'01' - MEMBER OF TIME-SLICING GROUP\nTCBFLGS3 DS    B -     THIRD FLAG BYTE\nTCBFSM   EQU   X'80' - ALL PSW'S IN SUPERVISOR STATE  (AOS/2)\n         AIF   ('&SYS' EQ 'AOS2').A7\nTCBRSV51 EQU   X'40',,C'X' - RESERVED (AOS/1)\nTCBSYSER EQU   X'20' - EXIT EFFECTOR--SYSTEM ERROR ROUTINES OPERATING\n*                      (AOS/1)\nTCBRSV52 EQU   X'10',,C'X' - RESERVED (AOS/1)\nTCBFLREG EQU   X'08' - FLOATING POINT REGISTERS EXIST  (AOS/1)\nTCBSCHAB EQU   X'04' - BIT ON INDICATES SCHEDULER HAS ABENDED, ABEND\n*                      PROCESSING HAS COMPLETED AND THE SCHEDULER\n*                      HAS BEEN RE-ENTERED  (AOS/1)  (ICB465)    XM4931\nTCBPKCHG EQU   X'02' - XCTL IS CHANGING PROTECT KEY IN PSW FROM ZERO\n*                      TO THAT USED BY PROBLEM PROGRAM  (AOS/1)\nTCBRSV53 EQU   X'01',,C'X' - RESERVED (AOS/1)\n.A7      AIF   ('&SYS' EQ 'AOS1').A8\nTCBADINP EQU   X'40' - USED IN CONJUNCTION WITH TCBONDSP.  FLAG\n*                      INDICATING THAT ABDUMP IS CURRENTLY PROCESSING\n*                      FOR SOME TASK IN JOB STEP.  A HIGHER LEVEL TASK\n*                      IS NOT ALLOWED TO ENTER MAINLINE ABEND\n*                      PROCESSING IF THIS BIT IS SET IN JOB STEP TCB\n*                      UNLESS JOB STEP TASK IS FAILING.  BIT SET ONLY\n*                      IN JOB STEP TCB AND TASK INVOKING ABDUMP.\nTCBABTRM EQU   X'20' - ABTERM BIT TO PREVENT MULTIPLE ABENDS  (AOS/2)\nTCBABGM  EQU   X'10' - GETMAIN IS TO DEFAULT LSQA REQUESTS TO SQA\n*                      REQUESTS WHEN REQUEST CANNOT BE SATISFIED FROM\n*                      LSQA\nTCBRSV06 EQU   X'08',,C'X' - RESERVED (AOS/2)\nTCBRSV07 EQU   X'04',,C'X' - RESERVED (AOS/2)\nTCBRSV08 EQU   X'02',,C'X' - RESERVED (AOS/2)\nTCBDWSTA EQU   X'01' - THIS TASK WAS DETACHED WITH STAE=YES OPTION\n*                      (AOS/2)                                   ICB315\n.A8      ANOP\nTCBFLGS4 DS    B -     NONDISPATCHABILITY FLAGS\n*                      (AOS/2)\nTCBNDUMP EQU   X'80' - ABDUMP NON-DISP. INDICATOR\nTCBSER   EQU   X'40' - SER1 NON-DISP. INDICATOR\nTCBRQENA EQU   X'20' - I/O RQE'S EXHAUSTED\nTCBHNDSP EQU   X'10' - TASK OR JOB STEP IS MOMENTARILY 'FROZEN' UNTIL\n*                      THE REQUIRED RESOURCES ARE AVAILABLE.  THE BIT\n*                      IS SET THROUGH THE USE OF THE 'STATUS' SVC\n*                                                                ICB453\nTCBUXNDV EQU   X'08' - TASK IS TEMPORARILY NON-DISPATCHABLE BECAUSE\n*                      SMF TIME LIMIT OR SYSOUT LIMIT USER EXIT\n*                      ROUTINE IS BEING EXECUTED FOR THIS STEP (AOS/2)\nTCBMPCVQ EQU   X'04' - VARY OR QUIESCE IN MULTIPROCESSING SYSTEM\nTCBMPCND EQU   X'02' - M65 MULTIPROCESSING NON-DISP. INDICATOR FOR ALL\n*                      CPU'S\nTCBONDSP EQU   X'01' - TASK TERMINATING AND NONDISPATCHABLE BECAUSE\n*                      EITHER OPEN FOR DUMP DATA SET IS IN PROCESS OR\n*                      CLOSE BY ABEND IS IN PROCESS\nTCBFLGS5 DS    B -     MORE NONDISPATCHABILITY FLAGS\nTCBFC    EQU   X'80' - TASK TERMINATED  (AOS/2)\nTCBABWF  EQU   X'40' - ABNORMAL WAIT   (AOS/2)\nTCBUXNDF EQU   X'40' - TASK IS TEMPORARILY NONDISPATCHABLE BECAUSE\n*                      SMF TIME LIMIT OR SYSOUT LIMIT USER EXIT ROUTINE\n*                      IS BEING EXECUTED FOR THIS STEP.  BIT IS ONE IN\n*                      ALL TCB'S EXCEPT JOB STEP TCB.  (AOS/1)   ICB263\nTCBPAGE  EQU   X'20' - TASK NONDISPATCHABLE DUE TO EXCESSIVE PAGING\n*                      RATE\nTCBANDSP EQU   X'10' - TASK NONDISPATCHABLE TEMPORARILY BECAUSE\n*                      ATTACHED WITH DISP=NO OPERAND\nTCBSYS   EQU   X'08' - ANOTHER TASK IS IN SYSTEM MUST COMPLETE STATUS\n*                      OR A SUMMARY BIT FOR FIELD TCBSYSCT  (AOS/2)\nTCBSTP   EQU   X'04' - ANOTHER TASK IN JS IS IN STEP MUST COMPLETE\n*                      STATUS  (AOS/2)\nTCBFCD1  EQU   X'02' - INITIATOR WAITING FOR REGION   (AOS/2)\nTCBPNDSP EQU   X'01' - PRIMARY NONDISPATCHABILITY FLAG\n*                      (SECONDARY NDSP FLAG TCBNDSP2 SET)\nTCBLMP   DS    FL1 -   TASK LIMIT PRIORITY  (AOS/2)\n*                      ENQUEUE COUNT  (AOS/1)\nTCBDSP   DS    FL1 -   DISPATCHING PRIORITY\nTCBLLS   DS    A -     ADDR OF LAST LLE IN LOAD LIST  (AOS/2)\n*                      ADDR OF LAST RB FOR PROGRAM LOADED VIA LOAD\n*                      (AOS/1)\nTCBJLB   DS    A -     ADDR OF JOBLIB DCB\n         AIF   ('&SYS' EQ 'AOS2').B1\nTCBFTJST DS    0A -    ADDRESS OF FIRST TCB FOR JOBSTEP  (AOS/1)\n.B1      AIF   ('&SYS' EQ 'AOS1').B2\nTCBJPQ   DS    0A -    ADDR OF LAST CDE FOR JPA CONTROL QUEUE  (AOS/2)\n.B2      ANOP\nTCBPURGE DS    B -     PURGE FLAGS  (AOS/2)\nTCBJPQF  EQU   X'80' - JPQ PURGE FLAG\nTCBRSV09 EQU   X'40',,C'X' - RESERVED\nTCBRSV10 EQU   X'20',,C'X' - RESERVED\nTCBRSV11 EQU   X'10',,C'X' - RESERVED\nTCBRSV12 EQU   X'08',,C'X' - RESERVED\nTCBRSV13 EQU   X'04',,C'X' - RESERVED\nTCBRSV14 EQU   X'02',,C'X' - RESERVED\nTCBRSV15 EQU   X'01',,C'X' - RESERVED\n         AIF   ('&SYS' EQ 'AOS2').B3\n         AIF   ('&SYS' EQ 'BOTH').B3A\nTCBFTJSA DS    AL3 -   ADDRESS OF FIRST TCB FOR JOBSTEP  (AOS/1)\n         AGO   .B4\n.B3A     ANOP\nTCBFTJSA DS    0AL3 -  ADDRESS OF FIRST TCB FOR JOBSTEP  (AOS/1)\n.B3      ANOP\nTCBJPQB  DS    AL3 -   ADDR OF LAST CDE FOR JPA CONTROL QUEUE  (AOS/2)\n.B4      ANOP\nTCBGRS   DS    0CL64 - GENERAL REGISTER SAVE AREA\n         AIF   ('&SYS' EQ 'AOS1').B4B\n         AIF   ('&SYS' EQ 'AOS2').B4A\n*    THE FOLLOWING REGISTER MAPPING APPLIES TO AOS/2.\n*    AOS/1 SAVES REGISTERS IN THE ORDER TCBGRS10-TCBGRS9.\n.B4A     ANOP\nTCBGRS0  DS    F -     SAVE AREA FOR GENERAL REGISTER 0\nTCBGRS1  DS    F -     SAVE AREA FOR GENERAL REGISTER 1\nTCBGRS2  DS    F -     SAVE AREA FOR GENERAL REGISTER 2\nTCBGRS3  DS    F -     SAVE AREA FOR GENERAL REGISTER 3\nTCBGRS4  DS    F -     SAVE AREA FOR GENERAL REGISTER 4\nTCBGRS5  DS    F -     SAVE AREA FOR GENERAL REGISTER 5\nTCBGRS6  DS    F -     SAVE AREA FOR GENERAL REGISTER 6\nTCBGRS7  DS    F -     SAVE AREA FOR GENERAL REGISTER 7\nTCBGRS8  DS    F -     SAVE AREA FOR GENERAL REGISTER 8\nTCBGRS9  DS    F -     SAVE AREA FOR GENERAL REGISTER 9\nTCBGRS10 DS    F -     SAVE AREA FOR GENERAL REGISTER 10\nTCBGRS11 DS    F -     SAVE AREA FOR GENERAL REGISTER 11\nTCBGRS12 DS    F -     SAVE AREA FOR GENERAL REGISTER 12\nTCBGRS13 DS    F -     SAVE AREA FOR GENERAL REGISTER 13\nTCBGRS14 DS    F -     SAVE AREA FOR GENERAL REGISTER 14\nTCBGRS15 DS    F -     SAVE AREA FOR GENERAL REGISTER 15\n         AGO   .B4C\n.B4B     ANOP\nTCBGRS10 DS    F -     SAVE AREA FOR GENERAL REGISTER 10\nTCBGRS11 DS    F -     SAVE AREA FOR GENERAL REGISTER 11\nTCBGRS12 DS    F -     SAVE AREA FOR GENERAL REGISTER 12\nTCBGRS13 DS    F -     SAVE AREA FOR GENERAL REGISTER 13\nTCBGRS14 DS    F -     SAVE AREA FOR GENERAL REGISTER 14\nTCBGRS15 DS    F -     SAVE AREA FOR GENERAL REGISTER 15\nTCBGRS0  DS    F -     SAVE AREA FOR GENERAL REGISTER 0\nTCBGRS1  DS    F -     SAVE AREA FOR GENERAL REGISTER 1\nTCBGRS2  DS    F -     SAVE AREA FOR GENERAL REGISTER 2\nTCBGRS3  DS    F -     SAVE AREA FOR GENERAL REGISTER 3\nTCBGRS4  DS    F -     SAVE AREA FOR GENERAL REGISTER 4\nTCBGRS5  DS    F -     SAVE AREA FOR GENERAL REGISTER 5\nTCBGRS6  DS    F -     SAVE AREA FOR GENERAL REGISTER 6\nTCBGRS7  DS    F -     SAVE AREA FOR GENERAL REGISTER 7\nTCBGRS8  DS    F -     SAVE AREA FOR GENERAL REGISTER 8\nTCBGRS9  DS    F -     SAVE AREA FOR GENERAL REGISTER 9\n.B4C     ANOP\nTCBFSA   DS    0A -    ADDR OF FIRST PROBLEM PROGRAM SAVE AREA\n         AIF   ('&SYS' EQ 'AOS2').B5\n         AIF   ('&SYS' EQ 'BOTH').B5A\nTCBIDF   DS    C -     TCB IDENTIFIER FIELD  (AOS/1)\n         AGO   .B6\n.B5A     ANOP\nTCBIDF   DS    0C -    TCB IDENTIFIER FIELD  (AOS/1)\n.B5      ANOP\nTCBQEL   DS    FL1 -   ENQUEUE COUNT  (AOS/2)\n.B6      ANOP\nTCBFSAB  DS    AL3 -   ADDR OF FIRST PROBLEM PROGRAM SAVE AREA\nTCBTCB   DS    A -     ADDR OF NEXT LOWER PRIRTITY TCB ON READY QUEUE\nTCBTME   DS    A -     ADDRESS OF TIMER QUEUE ELEMENT\n         AIF   ('&SYS' EQ 'AOS2').B7\nTCBPIB   DS    0A -    ADDRESS OF PARTITION INFORMATION BLOCK\nTCBPIBT  DS    B -     PARTITION TYPE  (AOS/1)\nTCBPART  EQU   X'C0' - PARTITION FLAG BITS\n*                      (AOS/1)\nTCBPP    EQU   X'C0' - PROCESSING PROGRAM PARTITION\nTCBSYSP  EQU   X'00' - SYSTEM TASK PARTITION\nTCBSIZE  EQU   X'20' - LARGE PARTITION (1)--SMALL PARTITION (0)\nTCBSTOP  EQU   X'10' - CPU TIMING STOPPED BY FINCH\n*                      UNTIL TRANSIENT LOADED\nTCBRSV54 EQU   X'08',,C'X' - RESERVED\nTCBSCHTI EQU   X'04' - BIT ON INDICATES THAT THE SCHEDULER HAS SET THE\n*                      TCBTIO FIELD TO POINT TO THE INITIATOR'S TIOT.\n*                      IT ONLY HAS MEANING WHEN BIT TCBSCHED IS ON.\n*                      (ICB489)                                  XM8572\nTCBWRITE EQU   X'02' - INDICATES TO ABEND THAT THIS IS A READER OR\n*                      WRITER TASK                               ICB422\nTCBSCHED EQU   X'01' - SCHEDULER IN CONTROL - USED BY ABEND -\n*                      TURNED OFF WHEN TIOT WRITTEN TO JOB QUEUE\nTCBPIBA  DS    AL3 -   ADDRESS OF PARTITION INFORMATION BLOCK\n         AIF   ('&SYS' EQ 'AOS1').B8\n         ORG   TCBPIB\n.B7      ANOP\nTCBJSTCB DS    0A -    ADDRESS OF FIRST JOBSTEP TCB\n*                      OR OF THIS TCB IF KEY ZERO  (AOS/2)\nTCBRSV16 DS    X -     RESERVED\nTCBJSTCA DS    AL3 -   ADDRESS OF FIRST JOBSTEP TCB\n*                      OR OF THIS TCB IF KEY ZERO  (AOS/2)\n.B8      ANOP\nTCBNTC   DS    A -     ADDR OF NEXT SISTER TCB (ZERO IF THIS IS LAST\n*                      SUBTASK)\nTCBOTC   DS    A -     ADDR OF MOTHER TCB\nTCBLTC   DS    A -     ADDR OF LAST DAUGHTER TCB ( ZERO IF THIS IS IT )\nTCBIQE   DS    A -     ADDR OF IQE FOR EXTR SCHEDULING\nTCBECB   DS    A -     ADDR OF ECB TO BE POSTED UPON TERMINATION\nTCBTSFLG DS    B -     TIME SHARING FLAGS\nTCBTSTSK EQU   X'80' - SWAPPED TS TASK\nTCBSTPPR EQU   X'40' - TASK SHOULD BE MADE NDSP VIA TCBSTPP\n*                      WHEN IT IS NO LONGER RUNNING A PRIVILEGED PGM\nTCBATT   EQU   X'20' - TASK SHOULD NOT HAVE ATTENTION EXITS\n*                      SCHEDULED ON IT BY EXIT EFFECTOR\nTCBTIOTG EQU   X'10' - PURGE TGET/TPUT AFTER ATTENTION\nTCBRSV17 EQU   X'08',,C'X' - RESERVED\nTCBRSV18 EQU   X'04',,C'X' - RESERVED\nTCBDYDSP EQU   X'02' - M195 TASK IS MEMBER OF DYNAMIC DISPATCHING\n*                      GROUP                                     ICB262\nTCBCPUBN EQU   X'01' - FOR M195, ZERO MEANS I/O BOUND AND ONE MEANS\n*                      CPU BOUND                                 ICB262\nTCBSTPCT DS    FL1 -   NUMBER OF SETTASK STARTS WHICH MUST BE\n*                      ISSUED BEFORE TASK IS MADE DISPATCHABLE -\n*                      FIELD NOT RESTRICTED TO TSO\nTCBTSLP  DS    FL1 -   LIMIT PRIORITY OF TS TASK\nTCBTSDP  DS    B -     DISPATCHING PRIORITY OF TS TASK\n         AIF   ('&SYS' EQ 'AOS1').C1\n         AIF   ('&SYS' EQ 'BOTH').C1A\nTCBPQE   DS    A -     POINTER TO DPQE MINUS 8 FOR THE JOB STEP (AOS/2)\n         AGO   .C2\n.C1A     ANOP\nTCBPQE   DS    0A -    POINTER TO DPQE MINUS 8 FOR THE JOB STEP (AOS/2)\n.C1      ANOP\nTCBFTLMP DS    FL1 -   TASK LIMIT PRIORITY (AOS/1)\nTCBFTFLG DS    0BL3 -  ABEND FLAGS (AOS/1)\nTCBFTFL1 DS    B -     ABEND FLAGS (AOS/1)\nTCBRSV56 EQU   X'80',,C'X' - RESERVED\nTCBRSV57 EQU   X'40',,C'X' - RESERVED\nTCBRSV58 EQU   X'20',,C'X' - RESERVED\nTCBRSV59 EQU   X'10',,C'X' - RESERVED\nTCBRSV60 EQU   X'08',,C'X' - RESERVED\nTCBFTTOP EQU   X'04' - THIS IS TOP TASK IN TREE BEING ABTERMED   ICB422\nTCBFTCOM EQU   X'02' - ABTERM DUMP SUCCESSFULLY COMPLETED\nTCBENQ   EQU   X'01' - INDICATES TO ABEND THAT TASK IS ENQUEUED ON\n*                      DUMP DATA SET                             ICB422\nTCBFTFL2 DS    B -     ABEND FLAGS (AOS/1)\nTCBRSV61 EQU   X'80',,C'X' - RESERVED\nTCBRSV62 EQU   X'40',,C'X' - RESERVED\nTCBRSV63 EQU   X'20',,C'X' - RESERVED\nTCBRSV64 EQU   X'10',,C'X' - RESERVED\nTCBRSV65 EQU   X'08',,C'X' - RESERVED\n         AIF   ('&SYS' EQ 'BOTH').C2X\nTCBFDSOP EQU   X'04' - INDICATES TO ABEND THAT DUMP DATA SET IS OPEN\n*                      FOR JOB STEP                              ICB422\n         AGO   .C2Y\n.C2X     ANOP\n*        FOLLOWING AOS/1 EQU IS SHOWN AS A COMMENT BECAUSE\n*        AOS/2 USES THIS LABEL ON ANOTHER BIT\n*TCBFDSOP EQU  X'04' - INDICATES TO ABEND THAT DUMP DATA SET IS OPEN\n*                      FOR JOB STEP                              ICB422\n.C2Y     ANOP\nTCBSYSAB EQU   X'02' - INDICATES TO ABEND THAT EITHER THE SYSABEND DATA\n*                      SET (BIT=1) OR THE SYSUDUMP DATA SET (BIT=0) IS\n*                      BEING USED                                ICB422\nTCBRSV66 EQU   X'01',,C'X' - RESERVED\nTCBFTFL3 DS    B -     ABEND FLAGS (AOS/1)\nTCBRSV67 EQU   X'80',,C'X' - RESERVED\nTCBRSV68 EQU   X'40',,C'X' - RESERVED\nTCBRSV69 EQU   X'20',,C'X' - RESERVED\nTCBRSV70 EQU   X'10',,C'X' - RESERVED\nTCBRSV71 EQU   X'08',,C'X' - RESERVED\nTCBFTDUM EQU   X'04' - NO ABTERM DUMPS MAY BE PROVIDED IN THIS STEP\nTCBRSV72 EQU   X'02',,C'X' - RESERVED\nTCBRSV73 EQU   X'01',,C'X' - RESERVED\n.C2      ANOP\n         AIF   ('&SYS' EQ 'BOTH').C2E\n         AIF   ('&SYS' EQ 'AOS1').C2F\nTCBAQE   DS    A -     LIST ORIGIN OF AQE(S) FOR THIS TASK (AOS/2)\n         AGO   .C2G\n.C2E     ANOP\nTCBAQE   DS    0A -    LIST ORIGIN OF AQE(S) FOR THIS TASK (AOS/2)\n.C2F     ANOP\nTCBDDRTI DS    F -     AMOUNT OF TIME REMAINING IN TASK'S DYNAMIC\n*                      DISPATCH TIME SLICE  (AOS/1)              ICB465\n.C2G     ANOP\nTCBSTAB  DS    0A -    ADDR OF STAE CONTROL BLOCK\nTCBNSTAE DS    B -     STAE FLAGS\nTCBSTABE EQU   X'80' - ABEND ENTERED BECAUSE OF ERROR IN STAE PROC\nTCBQUIES EQU   X'40' - STAE INVOKED PURGE I/O ROUTINE WITH QUIESCE I/O\n*                      OPTION\n         AIF   ('&SYS' EQ 'AOS1').C2A\nTCB33E   EQU   X'20' - A 33E ABEND HAS OCCURRED FOR TASK  (AOS/2)\nTCBRSV19 EQU   X'10',,C'X' - RESERVED  (AOS/2)\n.C2A     AIF   ('&SYS' EQ 'AOS2').C2B\nTCBXCTL  EQU   X'20' - CURRENT SCB HAS XCTL=YES OPTION  (AOS/1)\nTCBSCAT  EQU   X'10' - SCB WAS CREATED BY A PROGRAM THAT IS SCATTER\n*                      LOADED  (AOS/1)\n.C2B     ANOP\nTCBHALT  EQU   X'08' - PURGE I/O ROUTINE DID NOT SUCCESSFULLY QUIESCE\n*                      I/O BUT I/O WAS HALTED\n         AIF   ('&SYS' EQ 'AOS1').C2C\nTCBSYNCH EQU   X'04' - SYNCH ISSUED BY ASIR TO SCHEDULE EXIT ROUTINE\n*                      (AOS/2)\nTCBNPURG EQU   X'02' - VALID RETRY WITHOUT AN RB PURGE  (AOS/2)\nTCBSTCUR EQU   X'01' - STAE RECURSION VALID  (AOS/2)             ICB443\n.C2C     AIF   ('&SYS' EQ 'AOS2').C2D\nTCBSUPER EQU   X'04' - PROGRAM USING STAE IS IN SUPERVISOR MODE (AOS/1)\nTCBRETRY EQU   X'02' - STAE USER REQUESTED THAT A RETRY ROUTINE BE\n*                      SCHEDULED BUT THAT THE RB CHAIN NOT BE PURGED\n*                      (AOS/1)\nTCBVALID EQU   X'01' - RETRY ROUTINE AND PARAMETER LIST ADDRESSES ARE\n*                      VALID  (AOS/1)\n.C2D     ANOP\nTCBSTABB DS    AL3 -   ADDR OF STAE CONTROL BLOCK\nTCBTCT   DS    0A -    ADDR OF TCT\nTCBTCTGF DS    B -     FLAG BYTE FOR TIMING CONTROL TABEL        ICB318\nTCBSMFGF EQU   X'80' - IF ZERO, THE TCT CORE TABLE IS NOT TO BE\n*                      UPDATED BY GETMAIN/FREEMAIN.\n*                      IF ONE, THE TCT CORE TABLE IS TO BE UPDATED BY\n*                      GETMAIN/FREEMAIN.                         ICB318\nTCBRSV20 EQU   X'40',,C'X' - RESERVED\nTCBRSV97 EQU   X'20',,C'X' - RESERVED\nTCBRSV98 EQU   X'10',,C'X' - RESERVED\nTCBRSV99 EQU   X'08',,C'X' - RESERVED\nTCBRSV9A EQU   X'04',,C'X' - RESERVED\nTCBRSV9B EQU   X'02',,C'X' - RESERVED\nTCBRSV9C EQU   X'01',,C'X' - RESERVED\nTCBTCTB  DS    AL3 -   ADDR OF TCT\nTCBUSER  DS    A -     FIELD AVAILABLE TO THE USER\nTCBSCNDY DS    0BL4 -  SECONDARY NONDISPATCHABILITY FLAGS -\n*                      (IF ANY BIT IN THESE BYTES IS ON,\n*                      THEN SO IS THE PRIMARY NDSP FLAG)\nTCBNDSP  DS    0BL4 -  SAME AS TCBSCNDY\nTCBNDSP0 DS    B -     BYTE 0\nTCBNDSP1 DS    B - -   BYTE 1\nTCBDARTN EQU   X'80' - TASK TEMPORARILY NONDISPATCHABLE -\n*                      (DAR)\nTNONDISP EQU   TCBDARTN * ALIAS *\nTCBDARPN EQU   X'40' - TASK PERMANENTLY NONDISPATCHABLE -\n*                      (DAR)\nPNONDISP EQU   TCBDARPN * ALIAS *\nTCBRSTND EQU   X'20' - TASK TEMPORARILY NONDISPATCHABLE -\n*                      (RMS/SER)\nTCBRSPND EQU   X'10' - TASK PERMANENTLY NONDISPATCHABLE -\n*                      (RMS/SER)\n*                      (IF THIS FLAG IS ON THEN THE PREVIOUS\n*                      ONE MUST BE TOO)\nTCBDDRND EQU   X'08' - TASK IS IN DEVICE ALLOCATION AND DYNAMIC DEVICE\n*                      RECONFIGURATION (DDR) HAS MADE IT\n*                      NONDISPATCHABLE\nTCBTPSP  EQU   X'04' - DISPATCHING OF TCAM TASK MUST BE DELAYED\n*                      UNTIL TCAM I/O APPENDAGE OR SVC ROUTINE HAS\n*                      COMPLETED EXECUTION  (TCAM IN\n*                      MULTIPROCESSING ENVIRONMENT)\nTCBRSV21 EQU   X'02',,C'X' - RESERVED\nTCBDPFND EQU   X'01' - TASK IS TEMPORARILY SET NON-DISPATCHABLE TO\n*                      FACILITATE DISPATCHING THE OWNER OF THE SYSTEM\n*                      LOCK.  SET TO 1 BY PAGING SUPERVISOR.\n*                      (OS/VS2)                                 YA00832\nTCBNDSP2 DS    B - -   BYTE 2\nTCBABD   EQU   X'80' - SET BY ABDUMP - (AOS/1)\nTCBSTPP  EQU   X'40' - TASK NDSP BECAUSE STOPPED BY SETTASK\nTCBNDSVC EQU   X'20' - TASK NDSP BECAUSE SVC DUMP IS EXECUTING FOR\n*                      ANOTHER TASK\nTCBNDTS  EQU   X'10' - TASK NDSP BECAUSE BEING SWAPPED OUT\nTCBIWAIT EQU   X'08' - TASK NDSP DUE TO INPUT WAIT\nTCBOWAIT EQU   X'04' - TASK NDSP DUE TO OUTPUT WAIT\nTCBDSS   EQU   X'02' - DSS HAS SET THE TASK NON-DISPATCHABLE     ICB313\nTCBABE   EQU   X'01' - ABEND ENTERED FOR THIS TASK -\n*                      WHILE SYSABEND DCB OPEN FOR ANOTHER TASK (AOS/1)\nTCBNDSP3 DS    B -     BYTE 3\n         AIF   ('&SYS' EQ 'AOS2').C3\nTCBTERM  EQU   X'80' - TERMINATED - (AOS/1)\nTCBABTER EQU   X'40' - TO BE TERMINATED BY ABEND -  (AOS/1)\nTCBNDSDA EQU   X'20' - TEMPORARILY NONDISPATCHABLE, PARTITION IS\n*                      DEACTIVATED  (AOS/1)                      ICB357\n.C3      AIF   ('&SYS' EQ 'AOS1').C4\nTCBLJSND EQU   X'80' - TASK IS ABENDING AND NONDISPATCHABLE BECAUSE IT\n*                      HAS A JOB STEP SUBTASK.  TCBONDSP MUST ALSO BE\n*                      ON.\nTCBSTAND EQU   X'40' - TASK HAS BEEN SET NONDISPATCHABLE WHILE ASIR\n*                      IS SCHEDULING AN EXIT ROUTINE FOR SOME OTHER\n*                      TASK IN JOB STEP\nTCBRSV23 EQU   X'20',,C'X' - RESERVED  (AOS/2)\n.C4      ANOP\nTCBRSV24 EQU   X'10',,C'X' - RESERVED\nTCBRSV25 EQU   X'08',,C'X' - RESERVED\nTCBRSV26 EQU   X'04',,C'X' - RESERVED\nTCBRSV27 EQU   X'02',,C'X' - RESERVED\nTCBRSV28 EQU   X'01',,C'X' - RESERVED\nTCBMDIDS DS    F - -   RESERVED FOR MODEL-DEPENDENT SUPPORT AND FOR\n*                      IBM PROPRIETARY PROGRAMMING SUPPORT       ICBXXX\nTCBJSCB  DS    0A -    ADDR OF JOB STEP CONTROL BLOCK\nTCBRECDE DS    B -     ABEND RECURSION BYTE                      ICB456\nTCBREC   EQU   X'80' - VALID REENTRY TO ABEND INDICATED IF NON-ZERO\n*                      VALUE IN FOLLOWING 7 BITS                 ICB456\nTCBOPEN  EQU   X'01' - OPEN DUMP DATA SET                        ICB456\nTCBCLOSD EQU   X'02' - CLOSE DIRECT SYSOUT ON TAPE               ICB456\nTCBCLOSE EQU   X'03' - CLOSE OPEN DATA SETS                      ICB456\nTCBCLOSF EQU   X'04' - RESERVED                                  ICB456\nTCBGREC  EQU   X'05' - GRAPHICS                                  ICB456\nTCBADUMP EQU   X'07' - ABDUMP                                    ICB456\nTCBPTAXE EQU   X'08' - PURGE TAXE                                ICB456\nTCBMESG  EQU   X'09' - MESSAGE RECURSION                         ICB456\nTCBDYNAM EQU   X'0A' - DD-DYNAM TIOT CLEANUP                     ICB456\nTCBQTIP  EQU   X'0C' - PURGE TSO INTERPARTITION POSTS            ICB456\nTCBTCAMP EQU   X'0D' - PURGE TCAM INTERPARTITION POSTS           ICB456\nTCBSAVCD EQU   X'0F' - ASIR RECURSION.  SAVE OLD COMP CODE       ICB456\nTCBTYP1W EQU   X'10' - TYPE 1 MESSAGE WRITE TO PROGRAMMER        ICB456\nTCBNOSTA EQU   X'30' - STAE/STAI NOT TO BE HONORED               ICB456\nTCBSTRET EQU   X'31' - RETURN FROM STEAL CORE                    ICB456\nTCBCONVR EQU   X'32' - CONVERT TO STEP ABEND                     ICB456\nTCBDARET EQU   X'33' - RETURN FROM DAR                           ICB456\nTCBTYP1R EQU   X'34' - RETURN FROM TYPE 1 MESSAGE MODULE         ICB456\nTCBNEWRB EQU   X'35' - ABEND ISSUED SVC 13 TO XCTL TO A NON-ABEND\n*                      MODULE                                    ICB456\nTCBMCCNS EQU   X'40' - INDICATES THAT A MUST COMPLETE TASK HAS ABENDED\n*                      WITHOUT ENOUGH STORAGE FOR 2 RB'S FOR A WTOR\n*                      ASKING WHETHER THE TASK'S RESOURCES ARE CRITICAL\n*                      OR NOT.  THE RESOURCES ARE ASSUMED TO BE\n*                      CRITICAL, WHICH WILL CAUSE THE PARTITION TO BE\n*                      MARKED PERMANENTLY NON-DISPATCHABLE.\n*                      (OS/VS1)                                  ICB492\nTCBJSCBB DS    AL3 -   ADDR OF JOB STEP CONTROL BLOCK\nTCBDDEXC DS    H -     COUNT OF THE NUMBER OF TIMES A DYNAMIC\n*                      DISPATCHING TASK HAS ITS TIME SLICE EXPIRE\n*                      (AOS/1)                                   ICB465\nTCBDDWTC DS    H -     COUNT OF THE NUMBER OF TIMES A DYNAMIC\n*                      DISPATCHING TASK IS NOT INTERRUPTED BY TIME\n*                      SLICE BETWEEN WAITS  (AOS/1)              ICB465\nTCBIOBRC DS    A -     ADDRESS OF IOB RESTORE CHAIN FOR I/O QUIESCED\n*                      BY EOT                                    YM2840\nTCBRSV30 DS    F -     RESERVED\nTCBEXT1  DS    0A -    ADDRESS OF OS-AOS COMMON TCB EXTENSION    ICB311\nTCBRSV32 DS    X -     RESERVED                                  ICB311\nTCBEXT1A DS    AL3 -   ADDRESS OF OS-AOS COMMON TCB EXTENSION    ICB311\n*\n*              AOS/1 - AOS/2 COMMON SECTION\n*\nTCBBITS  DS    0BL4 -  FLAG BYTES\nTCBNDSP4 DS    B -     SECONDARY NONDISPATCHABILITY FLAGS COMMON TO\n*                      AOS/1 AND AOS/2.  COORDINATED WITH PRIMARY\n*                      NONDISPATCHABILITY FLAG TCBPNDSP.\nTCBRSV86 EQU   X'80',,C'X' - RESERVED\nTCBRSV87 EQU   X'40',,C'X' - RESERVED\nTCBRSV88 EQU   X'20',,C'X' - RESERVED\nTCBRSV89 EQU   X'10',,C'X' - RESERVED\nTCBRSV90 EQU   X'08',,C'X' - RESERVED\nTCBRSV91 EQU   X'04',,C'X' - RESERVED\nTCBRSV92 EQU   X'02',,C'X' - RESERVED\nTCBRSV93 EQU   X'01',,C'X' - RESERVED\nTCBNDSP5 DS    B -     SECONDARY NONDISPATCHABILITY FLAGS UNIQUE TO\n*                      AOS/1 OR AOS/2.  COORDINATED WITH PRIMARY\n*                      NONDISPATCHABILITY FLAG TCBPNDSP.\n         AIF   ('&SYS' EQ 'AOS2').C5\nTCBNDSPL EQU   X'80' - NONDISPATCHABLE BECAUSE SUPERVISOR LOCK SET.\n*                      SET BY PAGING SERVICE INTERFACE ROUTINE WHEN\n*                      DISABLED CODE PRODUCES A PAGE FAULT OR REQUESTS\n*                      A PAGE FIX.  (AOS/1)\nTCBNDGTF EQU   X'40' - TASK NONDISPATCHABLE WHILE WAITING FOR A TIRB\n*                      ROUTINE TO PROCESS A DISABLED PAGE FAULT WHICH\n*                      WAS PRODUCED BY GTF.  SET AND RESET BY STAGE\n*                      THREE EXIT EFFECTOR.  SET WHEN TIRB POOL EMPTY\n*                      AND REQUESTING TASK HAS AN SQE QUEUED AT\n*                      REQUEST OF GTF.  (AOS/1)\n         AGO   .C5D\n.C5      ANOP\nTCBRSV94 EQU   X'80',,C'X' - RESERVED\nTCBRSV95 EQU   X'40',,C'X' - RESERVED\n.C5D     ANOP\nTCBRSV74 EQU   X'20',,C'X' - RESERVED\nTCBRSV75 EQU   X'10',,C'X' - RESERVED\nTCBRSV76 EQU   X'08',,C'X' - RESERVED\nTCBRSV77 EQU   X'04',,C'X' - RESERVED\nTCBRSV78 EQU   X'02',,C'X' - RESERVED\nTCBRSV79 EQU   X'01',,C'X' - RESERVED\nTCBFLGS6 DS    B -     TASK-RELATED FLAGS\nTCBRV    EQU   X'80' - PARTITION IS FIXED.  VIRTUAL ADDRESSES IN\n*                      PARTITION ARE REAL.\n         AIF   ('&SYS' EQ 'AOS2').C5A\n         AIF   ('&SYS' EQ 'BOTH').C5B\nTCBPIE17 EQU   X'40' - TASK REQUESTS SPIE ON PAGE FAULTS (AOS/1) ICB339\n.C5E     ANOP\nTCBPANIC EQU   X'20' - TASK HAS OR IS WAITING FOR 'PANIC' (AOS/1)ICB457\nTCBRSV80 EQU   X'10',,C'X' - RESERVED  (AOS/1)\nTCBRUNPN EQU   X'08' - IF ZERO, PARTITION CAN BE DEACTIVATED.\n*                      IF ONE, PARTITION IS INELIGIBLE TO BE\n*                      DEACTIVATED.  (AOS/1)                     ICB465\nTCBRUNJB EQU   X'04' - IF ZERO, CURRENT JOB CAN BE DEACTIVATED.\n*                      IF ONE, PARTITION IS INELIGIBLE TO BE\n*                      DEACTIVATED WHILE CURRENT JOB IS RUNNING.\n*                      (AOS/1)                                   ICB465\nTCBDSINQ EQU   X'02' - IF ZERO, DSI LOGIC IS NOT BEING EXECUTED.\n*                      IF ONE, SCHEDULER IS USING (ENQUEUED) DATA SET\n*                      INTEGRITY (DSI) LOGIC AT JOB START TIME.\n*                      PARTITION IS INELIGIBLE FOR DEACTIVATION.\n*                      (AOS/1)                                   ICB465\nTCBRSV81 EQU   X'01',,C'X' - RESERVED  (AOS/1)\n         AGO   .C7\n.C5A     ANOP\nTCBPIE17 EQU   X'40' - PAGE FAULT INTERRUPT IS TO BE PASSED TO THE\n*                      TASK'S INTERRUPT EXIT AND AN 8-BYTE PICA IS IN\n*                      EFFECT FOR THIS TASK  (AOS/2)             ICB339\n         AGO   .C5C\n.C5B     ANOP\nTCBPIE17 EQU   X'40' - TASK REQUESTS SPIE ON PAGE FAULTS (AOS/1)\n*                      PAGE FAULT INTERRUPT IS TO BE PASSED TO THE\n*                      TASK'S INTERRUPT EXIT AND AN 8-BYTE PICA IS IN\n*                      EFFECT FOR THIS TASK  (AOS/2)             ICB339\n.C5C     ANOP\nTCBCPU   EQU   X'20' - TASK IS CPU-BOUND MEMBER OF APG  (AOS/2)\nTCBSPVLK EQU   X'10' - TASK SCHEDULED FOR ABTERM WHILE OWNING\n*                      SUPERVISOR LOCK  (AOS/2)\nTCBOLSQA EQU   X'08' - TASK OWNS SPQE FOR LSQA  (AOS/2)\nTCBMIGR  EQU   X'04' - REGION SELECTED FOR MIGRATION FROM PRIMARY\n*                      PAGING DEVICE  (AOS/2)\nTCBAPG   EQU   X'02' - TASK IS IN APG  (AOS/2)\nTCBNTJS  EQU   X'01' - JOB STEP TASK BUT NOT HIGHEST IN FAILING TREE\n*                      (AOS/2)\n         AIF   ('&SYS' EQ 'BOTH').C5E\n.C7      ANOP\nTCBFLGS7 DS    B -     TASK-RELATED FLAGS\n         AIF   ('&SYS' EQ 'AOS1').C9\nTCBGPECB EQU   X'80' - TASK IS IN AN ECB WAIT FOR A GETPART\n*                      (AOS/2)                                   ICB339\nTCBRSV33 EQU   X'40',,C'X' - RESERVED  (AOS/2)\nTCBRSV34 EQU   X'20',,C'X' - RESERVED  (AOS/2)\nTCBSTACK EQU   X'10' - SET IN JOB STEP TCB TO INDICATE THAT A TASK IN\n*                      THE JOB STEP IS IN SERIAL ABEND PROCESSING.\n*                      USED IN CONJUNCTION WITH TCBFOINP. (AOS/2)ICB374\nTCBRSV35 EQU   X'08',,C'X' - RESERVED\nTCBRSTSK EQU   X'04' - RESIDENT SYSTEM TASK  (AOS/2)\nTCBADMP  EQU   X'02' - ALL OTHER TASKS IN JOB STEP HAVE BEEN SET\n*                      NONDISPATCHABLE BY ABDUMP.  THIS BIT IS SET TO\n*                      CONTROL JOB STEP DURING THE DUMPING PROCESS.\n*                      (AOS/2)\n         AIF   ('&SYS' EQ 'AOS2').C9A\n.C9      ANOP\nTCBFDD   EQU   X'80' - IF ONE, THIS TCB IS A MEMBER OF THE DYNAMIC\n*                      DISPATCHING GROUP  (AOS/1)                ICB465\nTCBFDDT  EQU   X'40' - USED BY DYNAMIC DISPATCHING - 0 = CPU BOUND,\n*                      1 = I/O BOUND  (AOS/1)                    ICB465\nTCBFDDEI EQU   X'20' - USED BY DYNAMIC DISPATCHING - 0 = INTERVAL HAS\n*                      NOT EXPIRED, 1 = TIME SLICE INTERVAL HAS EXPIRED\n*                      FOR THIS TASK SINCE IT LAST ISSUED A WAIT.\n*                      (AOS/1)                                   ICB465\nTCBFWDD  EQU   X'10' - IF ONE, THIS TCB WAS A MEMBER OF DYNAMIC\n*                      DISPATCHING GROUP BUT IS NOT CURRENTLY A\n*                      MEMBER  (OS/VS1)                          XM9175\n         AIF   ('&SYS' EQ 'BOTH').C9C\nTCBRSV35 EQU   X'08',,C'X' - RESERVED\n.C9C     ANOP\nTCBRSV83 EQU   X'04',,C'X' - RESERVED  (AOS/1)\nTCBRSV84 EQU   X'02',,C'X' - RESERVED  (AOS/1)\n.C9A     ANOP\nTCBGTOFM EQU   X'01' - GTF TRACING TEMPORARILY DISABLED          ICB402\nTCBDAR   DS    B - -   DAMAGE ASSESSMENT ROUTINE FLAGS\nTCBDARP  EQU   X'80' - PRIMARY DAR RECURSION - -\n*                      DAR FAILURE WHILE WRITING CORE IMAGE\nTCBDARS  EQU   X'40' - SECONDARY DAR RECURSION -\n*                      DAR FAILURE WHILE ATTEMPTING\n*                      TO REINSTATE FAILING REGION/PARTITION\nTCBDARD  EQU   X'20' - A DUMP HAS BEEN REQUESTED FOR A WRITER OR\n*                      SCHEDULER ABEND AND THE USER HAS PROVIDED NO\n*                      SYSABEND DD CARD (AOS/1)\nTCBDARC  EQU   X'10' - RECURSION PERMITTED IN CLOSE -\n*                      AFTER DAR PROCESSING COMPLETED (PCP)\nTCBDARMC EQU   X'10' - DAR HAS BEEN ENTERED TO HANDLE A VALID RECURSION\n*                      IN MUST COMPLETE STATUS THROUGH ABEND     ICB264\nTCBDARO  EQU   X'08' - SYSTEM ERROR TASK IS FAILING.  DAR DUMP SHOULD\n*                      NOT REQUEST ANY ERP PROCESSING\nTCBDARWT EQU   X'04' - WTO IN PROCESS FOR DAR                    ICB264\nTCBRSV36 EQU   X'02',,C'X' - RESERVED\nTCBEXSVC EQU   X'01' - SVC DUMP IS EXECUTING FOR THIS TASK\nTCBRSV37 DS    X -     RESERVED\nTCBSYSCT DS    FL1 -   COUNT FOR THE OUTSTANDING NUMBER OF 'SYSTEM\n*                      MUST COMPLETE' REQUESTS (ICB497)          YM3883\nTCBSTMCT DS    FL1 -   COUNT FOR OUTSTANDING NUMBER OF 'STEP MUST\n*                      COMPLETE' REQUESTS (ICB497)               YM3883\nTCBEXT2  DS    0A -    SAME AS TCBEXT2A                          ICB311\nTCBRSV39 DS    X -     RESERVED                                  ICB311\nTCBEXT2A DS    AL3 -   ADDRESS OF AOS/1 - AOS/2 COMMON EXTENSION ICB311\n         AIF   ('&SYS' EQ 'AOS2').D1\n*\n*              AOS/1 TCB OVERLAY\n*\nTCBPCB   DS    A -     ADDRESS OF PAGE CONTROL BLOCK FOR TASK\nTCBGQE   DS    A -     ADDRESS OF FIRST GQE FOR TASK\nTCBARB   DS    0A -    ADDRESS OF AVAILABLE SVRB                 ICB344\nTCBRSV85 DS    XL1 -   RESERVED                                  ICB344\nTCBARBA  DS    AL3 -   ADDRESS OF AVAILABLE SVRB                 ICB344\n         AIF   ('&SYS' EQ 'AOS1').D2\n         SPACE 1\n         ORG   TCBPCB\n.D1      ANOP\n*\n*              AOS/2 TCB OVERLAY\n*\nTCBXTENT DS    0CL4 -  REGION SEGMENT INFORMATION\nTCBRSV40 DS    XL1 -   RESERVED\nTCBSTI   DS    FL1 -   SEGMENT INDEX TO FIRST SEGMENT IN REGION.  ZERO\n*                      IF VIRTUAL ADDRESSES IN REGION ARE REAL.\nTCBSCT   DS    FL1 -   COUNT FIELD INDICATING THE NUMBER OF SEGMENTS\n*                      FOR THIS TASK'S REGION.  ZERO IF VIRTUAL\n*                      ADDRESSES IN REGION ARE REAL.\nTCBLSQA  DS    FL1 -   SEGMENT INDEX TO FIRST LSQA SEGMENT FOR THE\n*                      TASK'S REGION                             ICB339\nTCBTIRB  DS    A -     ADDRESS OF TIRB FOR TASK\nTCBBACK  DS    A -     ADDRESS OF PREVIOUS TCB ON READY QUEUE.  ZERO\n*                      IN TOP TCB.\nTCBLSQAP DS    A -     ADDRESS OF SPQE FOR LSQA\nTCBIOTIM DS    F -     TIME IN 16-MICROSECOND UNITS BETWEEN TIME\n*                      ORIGINAL TIME SLICE INTERVAL WAS ASSIGNED AND\n*                      TIME APG TASK WENT INTO VOLUNTARY WAIT\nTCBTMSAV DS    F -     TIME IN 16-MICROSECOND UNITS REMAINING FROM\n*                      ORIGINAL TIME SLICE INTERVAL WHEN APG TASK WAS\n*                      LAST DISPATCHED\nTCBABCUR DS    C -     ABEND RECURSION BYTE\nTCBRSVAA DS    FL1 -   RESERVED (ICB497)                         YM3883\nTCBTID   DS    C -     TASK ID NUMBER                            ICB374\nTCBPAGID EQU   255 -   ID FOR PAGING SUPERVISOR TASK             ICB403\nTCBSYERR EQU   254 -   ID FOR SYSTEM ERROR TASK                  ICB403\nTCBCOMM  EQU   253 -   ID FOR COMMUNCIATIONS TASK                ICB403\nTCBIORMS EQU   252 -   ID FOR I/O RMS TASK                       ICB403\nTCBMASTR EQU   251 -   ID FOR MASTER SCHEDULER TASK              ICB403\nTCBJES   EQU   250 -   ID FOR JES MONITOR TASK                   ICB403\nTCBDSSID EQU   249 -   ID FOR DSS TASK                           ICB403\nTCBRSV41 DS    X -     RESERVED                                  ICB374\nTCBQECB  DS    0A -    SAME AS TCBQECBA BELOW                    ICB339\nTCBNQCT  DS    FL1 -   COUNT OF ALL RESOURCES UNAVAILABLE DUE TO ENQ\n*                      OR RESERVE REQUESTED WITH ECB             ICB339\nTCBQECBA DS    AL3 -   ADDR OF ECB TO BE POSTED WHEN TCBNQCT=0   ICB339\nTCBFOE   DS    0A -    SAME AS TCBFOEA BELOW                     ICB339\nTCBRSV42 DS    X -     RESERVED                                  ICB339\nTCBFOEA  DS    AL3 -   ADDRESS OF FIRST FIX OWNERSHIP ELEMENT (FOE)\n*                      IN LIST FOR THIS TASK                     ICB339\nTCBSWA   DS    A -     ADDRESS OF FIRST SCHEDULER WORK AREA (SWA)\n*                      HEADER IN A CHAIN OF SWA BLOCKS FOR THIS\n*                      TASK                                      ICB374\nTCBRSV96 DS    F -     RESERVED\n.D2      ANOP\n         DS    0D\nTCBMNLEN EQU   *-TCB - LENGTH OF MAIN SECTION OF TCB\n*\n*              AOS/1 - AOS/2 COMMON EXTENSION\n*              ADDRESS OF EXTENSION IS IN TCBEXT2\n*\n         AIF   ('&DSECT' EQ 'NO').D3\nTCBXTNT2 DSECT , -     START OF EXTENSION\n         AGO   .D4\n.D3      ANOP\nTCBXTNT2 EQU   * -     START OF EXTENSION                        ICB311\n.D4      ANOP\nTCBGTF   DS    0A -    SAME AS TCBGTFA BELOW                     ICB312\nTCBTFLG  DS    B -     GTF FLAG BYTE                             ICB312\nTCBASYNC EQU   X'80' - GTF ASYNCHRONOUS GATHER RTNE IN CONTROL   ICB312\nTCBERRTN EQU   X'40' - GTF ASYNCHRONOUS GATHER ERROR ROUTINE IN\n*                      CONTROL                                   ICB312\nTCBDSPIT EQU   X'20' - MCIH SHOULD UNCONDITIONALLY BRANCH TO THE\n*                      DISPATCHER                                ICB312\nTCBRSV43 EQU   X'10',,C'X' - RESERVED\nTCBRSV44 EQU   X'08',,C'X' - RESERVED\nTCBRSV45 EQU   X'04',,C'X' - RESERVED\nTCBRSV46 EQU   X'02',,C'X' - RESERVED\nTCBRSV47 EQU   X'01',,C'X' - RESERVED\nTCBGTFA  DS    AL3 -   ADDRESS OF TEMPORARY TRACE BUFFER         ICB312\nTCBRSVAB DS    FL1 -   RESERVED (ICB497)                         YM3883\nTCBRCMP  DS    BL3 -   COMMON INTERFACE BETWEEN AOS/1 AND AOS/2 TO KEEP\n*                      ABTERM COMPLETION CODE DUE TO A VALID RECURSION\n*                      IN STAE                                   ICB411\nTCBRSV48 DS    F -     RESERVED\nTCBRSV49 DS    F -     RESERVED\n         SPACE 1\n         DS    0D -    FORCE LENGTH EQUATE TO DOUBLE WORD        ICB362\nTCBX2LEN EQU   *-TCBXTNT2 LENGTH OF COMMON EXTENSION\n         SPACE 2\nTCBLEN   EQU   TCBPXLEN+TCBMNLEN+TCBX2LEN - TCB LENGTH INCLUDING\n*                      PREFIX  (VALID IF SYS=AOS1 OR SYS=AOS2, BUT\n*                      NOT VALID IF SYS=BOTH)\n*\n*                      END OF TCB\n         MEND  , */\n* %TCBL2  :  ;\n* /*           TCB PREFIX                                            */\n*\n* DECLARE\n*   1 TCBFIX   BASED(TCBPTR-32)  BDY(DWORD),\n*\n*    2 TCBFRS   CHAR(32) BDY(DWORD), /* FLOATING POINT REGISTER SAVE\n*                                       AREA                         */\n*     3 TCBFRS0 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING\n*                                       POINT REGISTER 0             */\n*     3 TCBFRS2 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING\n*                                       POINT REGISTER 2             */\n*     3 TCBFRS4 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING\n*                                       POINT REGISTER 4             */\n*     3 TCBFRS6 CHAR(8)  BDY(DWORD); /* SAVE AREA FOR FLOATING\n*                                       POINT REGISTER 6             */\n*\n* /*           TCB PROPER                                            */\n*\n* DECLARE\n*   1 TCB      BASED(TCBPTR)  BDY(DWORD),\n*\n*    2 TCBRBP   PTR(31),             /* PTR TO TOP RB ON RB CHAIN    */\n*    2 TCBPIE   PTR(31),             /* ADDR OF PROGRAM INTERRUPT\n*                                       ELEMENT (PIE)                */\n*     3 TCBPMASK CHAR(1),            /* SPIE BITS                    */\n*      4 *        BIT(4),            /* RESERVED                     */\n*      4 TCBPM    BIT(4),            /* PROGRAM MASK AT TIME OF SPIE\n*                                       INITIATION.  MASK RESTORED AT\n*                                       TIME OF SPIE NULLIFICATION.  */\n*     3 TCBPIEA  PTR(24),            /* ADDRESS OF PIE               */\n*    2 TCBDEB   PTR(31),             /* ADDR OF THE DEB QUEUE        */\n*    2 TCBTIO   PTR(31),             /* ADDR OF THE TASK I/O TABLE\n*                                       (TIOT)                       */\n*    2 TCBCMP   CHAR(4) BDY(WORD),   /* TASK COMPLETION CODE         */\n*     3 TCBCMPF  CHAR(1),            /* COMPLETION FLAGS             */\n*      4 TCBCREQ  BIT(1),            /* - A DUMP HAS BEEN REQUESTED  */\n*      4 TCBCSTEP BIT(1),            /* - A STEP ABEND HAS BEEN\n*                                       REQUESTED                    */\n*      4 TCBCPP   BIT(1),            /* - SECOND ABEND LOAD OVERLAID\n*                                       PP STORAGE (AOS/1) FOR FIRST\n*                                       LOAD OVERLAY SEE TCBFLGS     */\n*      4 TCBSTCC  BIT(1),            /* COMPLETION CODE IS NOT TO\n*                                       BE STORED IN TCBCMPC SHOULD\n*                                       AN ABEND BE ENCOUNTERED.\n*                                       THIS PREVENTS AN OVERLAY OF\n*                                       ORIGINAL COMPLETION CODE.    */\n*      4 TCBCDBL  BIT(1),            /* - A DOUBLE ABEND HAS\n*                                       OCCURRED                     */\n*      4 TCBCWTO  BIT(1),            /* - DUMP MSG TO BE ISSUED TO\n*                                       OPR                          */\n*      4 TCBCIND  BIT(1),            /* - SCHEDULER TO PRINT\n*                                       INDICATIVE DUMP              */\n*      4 TCBCMSG  BIT(1),            /* - ABEND MSG PROVIDED TO BE\n*                                       PRINTED BY ABDUMP            */\n*     3 TCBCMPC  CHAR(3),            /* SYSTEM (FIRST 12 BITS) AND\n*                                       USER (SECOND 12) COMPLETION\n*                                       CODES                        */\n*    2 TCBTRN   PTR(31),             /* ADDR OF CONTROL CORE TABLE   */\n*     3 TCBABF   CHAR(1),            /* FLAG BYTE                    */\n*      4 TCBMOD91 BIT(1),            /* - BOTH TESTRAN AND DECIMAL\n*                                       SIMULATOR ON A MOD 91        */\n*      4 TCBNOCHK BIT(1),            /* - SUPPRESS TAKING\n*                                       CHECKPOINTS FOR THIS STEP\n*                                       (JOB STEP TCB)               */\n*      4 TCBGRPH  BIT(1),            /* - GRAPHICS FOREGROUND JOB OR\n*                                       GRAPHIC JOB PROCESSOR        */\n*      4 TCBRSV01 BIT(1),            /* RESERVED                     */\n*      4 TCBTCPP  BIT(1),            /* - TCAM POST-PENDING  (RORI)  */\n*      4 TCBTCP   BIT(1),            /* - TEST TASK - USED BY TEST\n*                                       SVC                          */\n*      4 TCBOLTEP BIT(1),            /* OLTEP FUNCTIONS REQUIRE\n*                                       CLEAN-UP BEFORE ABNORMAL\n*                                       TERMINATION CAN BE INVOKED   */\n*      4 TCBRSV02 BIT(1),            /* RESERVED                     */\n*     3 TCBTRNB  PTR(24),            /* ADDR OF CONTROL CORE TABLE   */\n*    2 TCBMSS   PTR(31),             /* ADDR OF THE BOUNDARY BOX\n*                                       (AOS/1) ADDR OF LAST SPQE\n*                                       ON MSS QUEUE (AOS/2)         */\n*     3 TCBRSV03 PTR(8),             /* ** TCBNROC  FIELD UNUSED\n*                                       IN AOS **                    */\n*     3 TCBMSSB  PTR(24),            /* ADDR OF THE BOUNDARY BOX\n*                                       (AOS/1) ADDR OF LAST SPQE\n*                                       ON MSS QUEUE (AOS/2)         */\n*    2 TCBPKF   CHAR(1),             /* STORAGE PROTECTION KEY       */\n*     3 TCBFLAG  BIT(4),             /* - PROTECTION KEY             */\n*     3 TCBZERO  BIT(4),             /* - ZERO                       */\n*    2 TCBFLGS  CHAR(5),             /* FLAGS                        */\n*     3 TCBFLGS1 CHAR(1),            /* FIRST TCB FLAG BYTE          */\n*      4 TCBFA    BIT(1),            /* - ABNORMAL TERMINATION IN\n*                                       PROGRESS                     */\n*      4 TCBFE    BIT(1),            /* - NORMAL TERMINATION IN\n*                                       PROGRESS                     */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBA1;\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBA1A;\n*      4 TCBABTRM BIT(1),            /* ABEND INITIATED BY RESIDENT\n*                                       ABTERM  (AOS/1)              */\n*      4 TCBRSV04 BIT(1),            /* RESERVED                     */\n*      4 TCBDMPA  BIT(1),            /* BIT ON INDICATES THIS TASK IS\n*                                       USING THE DUMP AREA.  FREEMAIN\n*                                       VALIDITY CHECK ALLOWS TASK TO\n*                                       FREEMAIN PROBLEM PROGRAM\n*                                       STORAGE INTO DUMP AREA, THUS\n*                                       ALLOWING A JOBSTEP TO OBTAIN\n*                                       A DUMP IF REQUESTED EVEN IF\n*                                       NOT ENOUGH STORAGE IS IN THE\n*                                       PARTITION.  (AOS/1)    ICB440*/\n*      4 TCBPOOL  BIT(1),            /* ABEND SVRB POOL HAS BEEN\n*                                       ASSIGNED TO THIS TASK (AOS/1)\n*                                       (ICBI # 383)            35198*/\n*%GOTO TCBA2;\n*%TCBA1A : ;\n*      4 TCBFERA  BIT(1),            /* ENTER ABEND ERASE ROUTINE\n*                                       WHEN IN CONTROL AGAIN (AOS/2)*/\n*       5 *        BIT(1),           /* TCBABTRM - ABEND INITIATED BY\n*                                       RESIDENT ABTERM (AOS/1)      */\n*      4 TCBRSV04 BIT(1),            /* RESERVED                     */\n*      4 TCBPDUMP BIT(1),            /* PREVENT DUMP INDICATOR\n*                                       (AOS/2)                      */\n*       5 TCBDMPA  BIT(1),           /* BIT ON INDICATES THIS TASK IS\n*                                       USING THE DUMP AREA.  FREEMAIN\n*                                       VALIDITY CHECK ALLOWS TASK TO\n*                                       FREEMAIN PROBLEM PROGRAM\n*                                       STORAGE INTO DUMP AREA, THUS\n*                                       ALLOWING A JOBSTEP TO OBTAIN\n*                                       A DUMP IF REQUESTED EVEN IF\n*                                       NOT ENOUGH STORAGE IS IN THE\n*                                       PARTITION.  (AOS/1)    ICB440*/\n*      4 TCBFT    BIT(1),            /* TOP TASK IN TREE BEING\n*                                       ABTERMED  (AOS/2)            */\n*       5 TCBPOOL  BIT(1),           /* ABEND SVRB POOL HAS BEEN\n*                                       ASSIGNED TO THIS TASK (AOS/1)\n*                                       (ICBI # 383)            35198*/\n*%GOTO TCBA2;\n*%TCBA1 : ;\n*      4 TCBFERA  BIT(1),            /* ENTER ABEND ERASE ROUTINE\n*                                       WHEN IN CONTROL AGAIN (AOS/2)*/\n*      4 TCBRSV04 BIT(1),            /* RESERVED               ICB402*/\n*      4 TCBPDUMP BIT(1),            /* PREVENT DUMP INDICATOR\n*                                       (AOS/2)                      */\n*      4 TCBFT    BIT(1),            /* TOP TASK IN TREE BEING\n*                                       ABTERMED  (AOS/2)            */\n*%TCBA2 : ;\n*      4 TCBFS    BIT(1),            /* - ABTERM DUMP COMPLETED\n*                                       (AOS/2)  ABEND OVERLAID\n*                                       PROBLEM PROGRAM STORAGE\n*                                       (AOS/1)                      */\n*      4 TCBFX    BIT(1),            /* - PROHIBIT ASYNCHRONOUS EXIT\n*                                       QUEUEING                     */\n*     3 TCBFLGS2 CHAR(1),            /* SECOND FLAG BYTE             */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBA3;\n*      4 TCBSYSTK BIT(1),            /* ABEND PROHIBITED FOR THIS\n*                                       SYSTEM TASK  (AOS/1)         */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBA4;\n*       5 TCBFOINP BIT(1),           /* A VALUE OF 1 INDICATES THAT\n*                                       THE TASK IS ABENDING AND IS\n*                                       IN THE PROCESS OF (1) OPEN\n*                                       FOR DUMP DATA SET PROCESSING,\n*                                       (2) CLOSE FOR USER DATA SET\n*                                       OR (3) PURGE FOR ENQ'ED\n*                                       RESOURCES.  THIS BIT IS USED\n*                                       IN CONJUNCTION WITH TCBSTACK.\n*                                       (AOS/2)                ICB374*/\n*%GOTO TCBA4;\n*%TCBA3 : ;\n*      4 TCBFOINP BIT(1),            /* A VALUE OF 1 INDICATES THAT\n*                                       THE TASK IS ABENDING AND IS\n*                                       IN THE PROCESS OF (1) OPEN\n*                                       FOR DUMP DATA SET PROCESSING,\n*                                       (2) CLOSE FOR USER DATA SET\n*                                       OR (3) PURGE FOR ENQ'ED\n*                                       RESOURCES.  THIS BIT IS USED\n*                                       IN CONJUNCTION WITH TCBSTACK.\n*                                       (AOS/2)                ICB374*/\n*%TCBA4 : ;\n*      4 TCBFSTI  BIT(1),            /* - SECOND JOB STEP INTERVAL\n*                                       HAS EXPIRED (AOS/2 INITIATOR\n*                                       TCB)                         */\n*      4 TCBFABOP BIT(1),            /* A VALUE OF 1 INDICATES THAT\n*                                       THE SYSABEND DUMP DATA SET\n*                                       HAS BEEN OPENED FOR ABEND.\n*                                       A VALUE OF 0 INDICATES THAT\n*                                       THE SYSUDUMP DUMP DATA SET\n*                                       WAS OPENED.  THIS BIT IS ONLY\n*                                       USED FOR THE JOB STEP TCB AND\n*                                       IS USED IN CONJUNCTION WITH\n*                                       TCBFDSOP BIT.  (OS/VS2)\n*                                       (ICB482)               YM0651*/\n*      4 TCBFSMC  BIT(1),            /* - TASK HAS ISSUED SYSTEM\n*                                       MUST COMPLETE AND SET ALL\n*                                       OTHER TASKS IN THE SYSTEM\n*                                       NONDISPATCHABLE              */\n*      4 TCBFJMC  BIT(1),            /* - TASK HAS ISSUED STEP MUST\n*                                       COMPLETE AND TURNED OFF ALL\n*                                       OTHER TASKS IN THE STEP      */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBA5;\n*      4 TCBFDSOP BIT(1),            /* SYSABEND OPEN FOR JOBSTEP\n*                                       (AOS/2)                      */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBA6;\n*       5 TCBRSV50 BIT(1),           /* RESERVED  (AOS/1)      ICB456*/\n*%GOTO TCBA6;\n*%TCBA5 : ;\n*      4 TCBRSV50 BIT(1),            /* RESERVED  (AOS/1)      ICB456*/\n*%TCBA6 : ;\n*      4 TCBFETXR BIT(1),            /* - ETXR TO BE SCHEDULED       */\n*      4 TCBFTS   BIT(1),            /* - MEMBER OF TIME-SLICING\n*                                       GROUP                        */\n*     3 TCBFLGS3 CHAR(1),            /* THIRD FLAG BYTE              */\n*      4 TCBFSM   BIT(1),            /* - ALL PSW'S IN SUPERVISOR\n*                                       STATE (AOS/2)                */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBA7;\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBA7A;\n*      4 TCBRSV51 BIT(1),            /* RESERVED (AOS/1)             */\n*      4 TCBSYSER BIT(1),            /* EXIT EFFECTOR--SYSTEM ERROR\n*                                       ROUTINES OPERATING FOR THIS\n*                                       TASK  (AOS/1)                */\n*      4 TCBRSV52 BIT(1),            /* RESERVED  (AOS/1)            */\n*      4 TCBFLREG BIT(1),            /* FLOATING POINT REGISTERS\n*                                       EXIST  (AOS/1)               */\n*      4 TCBSCHAB BIT(1),            /* BIT ON INDICATES SCHEDULER\n*                                       HAS ABENDED,  ABEND\n*                                       PROCESSING HAS COMPLETED\n*                                       AND THE SCHEDULER HAS BEEN\n*                                       RE-ENTERED  (AOS/1)\n*                                       (ICB465)               XM4931*/\n*      4 TCBPKCHG BIT(1),            /* XCTL IS CHANGING PROTECT KEY\n*                                       IN PSW FROM ZERO TO THAT\n*                                       USED BY PROBLEM PROGRAM\n*                                       (AOS/1)                      */\n*      4 TCBRSV53 BIT(1),            /* RESERVED  (AOS/1)      ICB456*/\n*%GOTO TCBA8;\n*%TCBA7A : ;\n*      4 TCBADINP BIT(1),            /* USED IN CONJUNCTION WITH\n*                                       TCBONDSP.  FLAG INDICATING\n*                                       THAT ABDUMP IS CURRENTLY\n*                                       PROCESSING FOR SOME TASK IN\n*                                       JOB STEP.  A HIGHER LEVEL\n*                                       TASK IS NOT ALLOWED TO ENTER\n*                                       MAINLINE ABEND PROCESSING IF\n*                                       THIS BIT IS SET IN JOB STEP\n*                                       TCB UNLESS JOB STEP TASK IS\n*                                       FAILING.  BIT SET ONLY IN JOB\n*                                       STEP TCB AND TASK INVOKING\n*                                       ABDUMP.  (AOS/2)             */\n*       5 TCBRSV51 BIT(1),           /* RESERVED (AOS/1)             */\n*      4 TCBABTRM BIT(1),            /* - ABTERM BIT TO PREVENT\n*                                       MULTIPLE ABENDS  (AOS/2)     */\n*       5 TCBSYSER BIT(1),           /* EXIT EFFECTOR--SYSTEM ERROR\n*                                       ROUTINES OPERATING FOR THIS\n*                                       TASK  (AOS/1)                */\n*      4 TCBABGM  BIT(1),            /* GETMAIN IS TO DEFAULT LSQA\n*                                       REQUESTS TO SQA REQUESTS WHEN\n*                                       REQUEST CANNOT BE SATISFIED\n*                                       FROM LSQA  (AOS/2)           */\n*       5 TCBRSV52 BIT(1),           /* RESERVED (AOS/1)             */\n*      4 TCBRSV06 BIT(1),            /* RESERVED  (AOS/2)            */\n*       5 TCBFLREG BIT(1),           /* FLOATING POINT REGISTERS\n*                                       EXIST  (AOS/1)               */\n*      4 TCBRSV07 BIT(1),            /* RESERVED  (AOS/2)            */\n*       5 TCBSCHAB BIT(1),           /* BIT ON INDICATES SCHEDULER\n*                                       HAS ABENDED,  ABEND\n*                                       PROCESSING HAS COMPLETED\n*                                       AND THE SCHEDULER HAS BEEN\n*                                       RE-ENTERED  (AOS/1)\n*                                       (ICB465)               XM4931*/\n*      4 TCBRSV08 BIT(1),            /* RESERVED  (AOS/2)            */\n*       5 TCBPKCHG BIT(1),           /* XCTL IS CHANGING PROTECT KEY\n*                                       IN PSW FROM ZERO TO THAT\n*                                       USED BY PROBLEM PROGRAM\n*                                       (AOS/1)                      */\n*      4 TCBDWSTA BIT(1),            /* TASK WAS DETATCHED WITH\n*                                       STAE=YES OPTION (AOS/2)ICB315*/\n*       5 TCBRSV53 BIT(1),           /* RESERVED (AOS/1)       ICB456*/\n*%GOTO TCBA8;\n*%TCBA7 : ;\n*      4 TCBADINP BIT(1),            /* USED IN CONJUNCTION WITH\n*                                       TCBONDSP.  FLAG INDICATING\n*                                       THAT ABDUMP IS CURRENTLY\n*                                       PROCESSING FOR SOME TASK IN\n*                                       JOB STEP.  A HIGHER LEVEL\n*                                       TASK IS NOT ALLOWED TO ENTER\n*                                       MAINLINE ABEND PROCESSING IF\n*                                       THIS BIT IS SET IN JOB STEP\n*                                       TCB UNLESS JOB STEP TASK IS\n*                                       FAILING.  BIT SET ONLY IN JOB\n*                                       STEP TCB AND TASK INVOKING\n*                                       ABDUMP.  (AOS/2)             */\n*      4 TCBABTRM BIT(1),            /* - ABTERM BIT TO PREVENT\n*                                       MULTIPLE ABENDS  (AOS/2)     */\n*      4 TCBABGM  BIT(1),            /* GETMAIN IS TO DEFAULT LSQA\n*                                       REQUESTS TO SQA REQUESTS WHEN\n*                                       REQUEST CANNOT BE SATISFIED\n*                                       FROM LSQA  (AOS/2)           */\n*      4 TCBRSV06 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBRSV07 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBRSV08 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBDWSTA BIT(1),            /* TASK WAS DETATCHED WITH\n*                                       STAE=YES OPTION (AOS/2)ICB315*/\n*%TCBA8 : ;\n*     3 TCBFLGS4 CHAR(1),            /* NONDISPATCHABILITY FLAGS\n*                                       (AOS/2)                      */\n*      4 TCBNDUMP BIT(1),            /* - ABDUMP NON-DISP. INDICATOR */\n*      4 TCBSER   BIT(1),            /* - SER1 NON-DISP. INDICATOR   */\n*      4 TCBRQENA BIT(1),            /* - I/O RQE'S EXHAUSTED        */\n*      4 TCBHNDSP BIT(1),            /* TASK OR JOB STEP IS\n*                                       MOMENTARILY 'FROZEN' UNTIL\n*                                       THE REQUIRED RESOURCES ARE\n*                                       AVAILABLE.  THE BIT IS SET\n*                                       THROUGH THE USE OF THE\n*                                       'STATUS' SVC.          ICB453*/\n*      4 TCBUXNDV BIT(1),            /* - TASK IS TEMPORARILY\n*                                       NON-DISPATCHABLE BECAUSE SMF\n*                                       TIME LIMIT OR SYSOUT LIMIT\n*                                       USER EXIT ROUTINE IS BEING\n*                                       EXECUTED FOR THIS STEP       */\n*      4 TCBMPCVQ BIT(1),            /* - VARY OR QUIESCE IN\n*                                       MULTIPROCESSING SYSTEM       */\n*      4 TCBMPCND BIT(1),            /* - M65 MULTIPROCESSING\n*                                       NON-DISP. INDICATOR FOR ALL\n*                                       CPU'S                        */\n*      4 TCBONDSP BIT(1),            /* TASK TERMINATING AND\n*                                       NONDISPATCHABLE BECAUSE\n*                                       EITHER OPEN FOR DUMP DATA\n*                                       SET IS IN PROCESS OR CLOSE\n*                                       BY ABEND IS IN PROCESS       */\n*     3 TCBFLGS5 CHAR(1),            /* MORE NONDISPATCHABILITY\n*                                       FLAGS                        */\n*      4 TCBFC    BIT(1),            /* - TASK TERMINATED (AOS/2)    */\n*      4 TCBABWF  BIT(1),            /* - ABNORMAL WAIT  (AOS/2)     */\n*       5 TCBUXNDF BIT(1),           /* TASK IS TEMPORARILY\n*                                       NONDISPATCHABLE BECAUSE SMF\n*                                       TIME LIMIT OR SYSOUT LIMIT\n*                                       USER EXIT ROUTINE IS BEING\n*                                       EXECUTED FOR THIS STEP.  THIS\n*                                       BIT IS ONE IN ALL TCB'S FOR\n*                                       STEP EXCEPT JOB STEP TCB.\n*                                       (AOS/1)                ICB263*/\n*      4 TCBPAGE  BIT(1),            /* TASK NONDISPATCHABLE DUE TO\n*                                       EXCESSIVE PAGING RATE        */\n*      4 TCBANDSP BIT(1),            /* TASK NONDISPATCHABLE\n*                                       TEMPORARILY BECAUSE ATTACHED\n*                                       WITH DISP=NO OPERAND         */\n*      4 TCBSYS   BIT(1),            /* - ANOTHER TASK IS IN SYSTEM\n*                                       MUST COMPLETE STATUS OR A\n*                                       SUMMARY BIT FOR FIELD\n*                                       TCBSYSCT  (AOS/2)            */\n*      4 TCBSTP   BIT(1),            /* - ANOTHER TASK IN JS IS IN\n*                                       STEP MUST COMPLETE STATUS\n*                                       (AOS/2)                      */\n*      4 TCBFCD1  BIT(1),            /* - INITIATOR WAITING FOR\n*                                       REGION   (AOS/2)             */\n*      4 TCBPNDSP BIT(1),            /* - PRIMARY NONDISPATCHABILITY\n*                                       FLAG                         */\n*    2 TCBLMP   PTR(8),              /* TASK LIMIT PRIORITY (AOS/2)\n*                                       ENQUEUE COUNT (AOS/1)        */\n*    2 TCBDSP   PTR(8),              /* DISPATCHING PRIORITY         */\n*    2 TCBLLS   PTR(31),             /* ADDR OF LAST LLE IN LOAD\n*                                       LIST (AOS/2) ADDR OF LAST RB\n*                                       FOR PROGRAM LOADED VIA LOAD\n*                                       (AOS/1)                      */\n*    2 TCBJLB   PTR(31),             /* ADDR OF JOBLIB DCB           */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBB1;\n*    2 TCBFTJST PTR(31),             /* ADDRESS OF FIRST TCB FOR\n*                                       JOBSTEP  (AOS/1)             */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBB2;\n*     3 TCBJPQ   PTR(31),            /* ADDR OF LAST CDE FOR JPA\n*                                       CONTROL QUEUE  (AOS/2)       */\n*%GOTO TCBB2;\n*%TCBB1 : ;\n*    2 TCBJPQ   PTR(31),             /* ADDR OF LAST CDE FOR JPA\n*                                       CONTROL QUEUE  (AOS/2)       */\n*%TCBB2 : ;\n*      4 TCBPURGE CHAR(1),           /* PURGE FLAGS (AOS/2)          */\n*       5 TCBJPQF  BIT(1),           /* - JPQ PURGE FLAG             */\n*       5 TCBRSV09 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV10 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV11 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV12 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV13 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV14 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV15 BIT(1),           /* RESERVED                     */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBB3;\n*      4 TCBFTJSA PTR(24),           /* ADDRESS OF FIRST TCB FOR\n*                                       JOBSTEP  (AOS/1)             */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBB4;\n*       5 TCBJPQB  PTR(24),          /* ADDRESS OF LAST CDE FOR JPA\n*                                       CONTROL QUEUE  (AOS/2)       */\n*%GOTO TCBB4;\n*%TCBB3 : ;\n*      4 TCBJPQB  PTR(24),           /* ADDRESS OF LAST CDE FOR JPA\n*                                       CONTROL QUEUE  (AOS/2)       */\n*%TCBB4 : ;\n*    2 TCBGRS   CHAR(64)  BDY(WORD), /* GENERAL REGISTER SAVE AREA   */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBB4B;\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBB4A;\n* /* THE FOLLOWING REGISTER MAPPING APPLIES TO AOS/2.                */\n* /* AOS/1 SAVES REGISTERS IN THE ORDER TCBGRS10-TCBGRS9.            */\n*%TCBB4A : ;\n*     3 TCBGRS0  PTR(31),            /* SAVE AREA FOR REGISTER 0     */\n*     3 TCBGRS1  PTR(31),            /* SAVE AREA FOR REGISTER 1     */\n*     3 TCBGRS2  PTR(31),            /* SAVE AREA FOR REGISTER 2     */\n*     3 TCBGRS3  PTR(31),            /* SAVE AREA FOR REGISTER 3     */\n*     3 TCBGRS4  PTR(31),            /* SAVE AREA FOR REGISTER 4     */\n*     3 TCBGRS5  PTR(31),            /* SAVE AREA FOR REGISTER 5     */\n*     3 TCBGRS6  PTR(31),            /* SAVE AREA FOR REGISTER 6     */\n*     3 TCBGRS7  PTR(31),            /* SAVE AREA FOR REGISTER 7     */\n*     3 TCBGRS8  PTR(31),            /* SAVE AREA FOR REGISTER 8     */\n*     3 TCBGRS9  PTR(31),            /* SAVE AREA FOR REGISTER 9     */\n*     3 TCBGRS10 PTR(31),            /* SAVE AREA FOR REGISTER 10    */\n*     3 TCBGRS11 PTR(31),            /* SAVE AREA FOR REGISTER 11    */\n*     3 TCBGRS12 PTR(31),            /* SAVE AREA FOR REGISTER 12    */\n*     3 TCBGRS13 PTR(31),            /* SAVE AREA FOR REGISTER 13    */\n*     3 TCBGRS14 PTR(31),            /* SAVE AREA FOR REGISTER 14    */\n*     3 TCBGRS15 PTR(31),            /* SAVE AREA FOR REGISTER 15    */\n*%GOTO TCBB4C;\n*%TCBB4B : ;\n*     3 TCBGRS10 PTR(31),            /* SAVE AREA FOR REGISTER 10    */\n*     3 TCBGRS11 PTR(31),            /* SAVE AREA FOR REGISTER 11    */\n*     3 TCBGRS12 PTR(31),            /* SAVE AREA FOR REGISTER 12    */\n*     3 TCBGRS13 PTR(31),            /* SAVE AREA FOR REGISTER 13    */\n*     3 TCBGRS14 PTR(31),            /* SAVE AREA FOR REGISTER 14    */\n*     3 TCBGRS15 PTR(31),            /* SAVE AREA FOR REGISTER 15    */\n*     3 TCBGRS0  PTR(31),            /* SAVE AREA FOR REGISTER 0     */\n*     3 TCBGRS1  PTR(31),            /* SAVE AREA FOR REGISTER 1     */\n*     3 TCBGRS2  PTR(31),            /* SAVE AREA FOR REGISTER 2     */\n*     3 TCBGRS3  PTR(31),            /* SAVE AREA FOR REGISTER 3     */\n*     3 TCBGRS4  PTR(31),            /* SAVE AREA FOR REGISTER 4     */\n*     3 TCBGRS5  PTR(31),            /* SAVE AREA FOR REGISTER 5     */\n*     3 TCBGRS6  PTR(31),            /* SAVE AREA FOR REGISTER 6     */\n*     3 TCBGRS7  PTR(31),            /* SAVE AREA FOR REGISTER 7     */\n*     3 TCBGRS8  PTR(31),            /* SAVE AREA FOR REGISTER 8     */\n*     3 TCBGRS9  PTR(31),            /* SAVE AREA FOR REGISTER 9     */\n*%TCBB4C : ;\n*    2 TCBFSA   PTR(31),             /* ADDR OF FIRST PROBLEM\n*                                       PROGRAM SAVE AREA            */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBB5;\n*     3 TCBIDF   CHAR(1),            /* TCB IDENTIFIER FIELD (AOS/1) */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBB6;\n*      4 TCBQEL   PTR(8),            /* ENQUEUE COUNT  (AOS/2)       */\n*%GOTO TCBB6;\n*%TCBB5 : ;\n*     3 TCBQEL   PTR(8),             /* ENQUEUE COUNT  (AOS/2)       */\n*%TCBB6 : ;\n*     3 TCBFSAB  PTR(24),            /* ADDR OF FIRST PROBLEM\n*                                       PROGRAM SAVE AREA            */\n*    2 TCBTCB   PTR(31),             /* ADDR OF NEXT LOWER PRIRTITY\n*                                       TCB ON READY QUEUE           */\n*    2 TCBTME   PTR(31),             /* ADDRESS OF TIMER QUEUE\n*                                       ELEMENT                      */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBB7;\n*    2 TCBPIB   PTR(31),             /* ADDRESS OF PARTITION\n*                                       INFORMATION BLOCK  (AOS/1)   */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBB7A;\n*     3 TCBJSTCB PTR(31),            /* ADDRESS OF FIRST JOBSTEP TCB\n*                                       OR OF THIS TCB IF KEY ZERO\n*                                       (AOS/2)                      */\n*%TCBB7A : ;\n*      4 TCBPIBT  CHAR(1),           /* PARTITION TYPE  (AOS/1)      */\n*       5 TCBPART  BIT(2),           /* - PARTITION FLAG BITS (AOS/1)*/\n* %DCL TCBPP    CHAR;\n* %TCBPP   ='''11''B';               /* PROCESSING PROGRAM PARTITION */\n* %DCL TCBSYSP  CHAR;\n* %TCBSYSP ='''00''B';               /* SYSTEM TASK PARTITION        */\n*       5 TCBSIZE  BIT(1),           /* - LARGE PARTITION (1)--SMALL\n*                                       PARTITION (0)                */\n*       5 TCBSTOP  BIT(1),           /* - CPU TIMING STOPPED BY\n*                                       FINCH  UNTIL TRANSIENT\n*                                       LOADED                       */\n*       5 TCBRSV54 BIT(1),           /* RESERVED                     */\n*       5 TCBSCHTI BIT(1),           /* BIT ON INDICATES THAT THE\n*                                       SCHEDULER HAS SET THE TCBTIO\n*                                       FIELD TO POINT TO THE\n*                                       INITIATOR'S TIOT.  IT ONLY\n*                                       HAS MEANING WHEN BIT TCBSCHED\n*                                       IS ON.  (ICB489)       XM8572*/\n*       5 TCBWRITE BIT(1),           /* INDICATES TO ABEND THAT THIS\n*                                       IS A READER OR WRITER\n*                                       TASK                   ICB422*/\n*       5 TCBSCHED BIT(1),           /* - SCHEDULER IN CONTROL -\n*                                       USED BY ABEND - TURNED OFF\n*                                       WHEN TIOT WRITTEN TO JOB\n*                                       QUEUE                        */\n*      4 TCBPIBA  PTR(24),           /* ADDRESS OF PARTITION\n*                                       INFORMATION BLOCK  (AOS/1)   */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBB8;\n*       5 TCBJSTCA PTR(24),          /* ADDRESS OF FIRST JOBSTEP TCB\n*                                       OR OF THIS TCB IF KEY ZERO\n*                                       (AOS/2)                      */\n*%GOTO TCBB8;\n*%TCBB7 : ;\n*    2 TCBJSTCB PTR(31),             /* ADDRESS OF FIRST JOBSTEP TCB\n*                                       OR OF THIS TCB IF KEY ZERO\n*                                       (AOS/2)                      */\n*     3 TCBRSV16 PTR(8),             /* RESERVED                     */\n*     3 TCBJSTCA PTR(24),            /* ADDRESS OF FIRST JOBSTEP TCB\n*                                       OR OF THIS TCB IF KEY ZERO\n*                                       (AOS/2)                      */\n*%TCBB8 : ;\n*    2 TCBNTC   PTR(31),             /* ADDR OF NEXT SISTER TCB\n*                                       (ZERO IF THIS IS LAST\n*                                       SUBTASK)                     */\n*    2 TCBOTC   PTR(31),             /* ADDR OF MOTHER TCB           */\n*    2 TCBLTC   PTR(31),             /* ADDR OF LAST DAUGHTER TCB\n*                                       (ZERO IF THIS IS IT)         */\n*    2 TCBIQE   PTR(31),             /* ADDR OF IQE FOR EXTR\n*                                       SCHEDULING                   */\n*    2 TCBECB   PTR(31),             /* ADDR OF ECB TO BE POSTED\n*                                       UPON TERMINATION             */\n*    2 TCBTSFLG BIT(8),              /* TIME SHARING FLAGS           */\n*     3 TCBTSTSK BIT(1),             /* - SWAPPED TS TASK            */\n*     3 TCBSTPPR BIT(1),             /* - TASK SHOULD BE MADE NDSP\n*                                       VIA TCBSTPP WHEN IT IS NO\n*                                       LONGER RUNNING A PRIVILEGED\n*                                       PGM                          */\n*     3 TCBATT   BIT(1),             /* - TASK SHOULD NOT HAVE\n*                                       ATTENTION EXITS SCHEDULED ON\n*                                       IT BY EXIT EFFECTOR          */\n*     3 TCBTIOTG BIT(1),             /* - PURGE TGET/TPUT AFTER\n*                                       ATTENTION                    */\n*     3 TCBRSV17 BIT(1),             /* RESERVED                     */\n*     3 TCBRSV18 BIT(1),             /* RESERVED                     */\n*     3 TCBDYDSP BIT(1),             /* M195 TASK IS MEMBER OF\n*                                       DYNAMIC DISPATCHING\n*                                       GROUP                  ICB262*/\n*     3 TCBCPUBN BIT(1),             /* FOR M195, ZERO MEANS I/O\n*                                       BOUND AND ONE MEANS CPU\n*                                       BOUND                  ICB262*/\n*    2 TCBSTPCT PTR(8),              /* NUMBER OF SETTASK STARTS\n*                                       WHICH MUST BE ISSUED BEFORE\n*                                       TASK IS MADE DISPATCHABLE -\n*                                       FIELD NOT RESTRICTED TO TSO  */\n*    2 TCBTSLP  PTR(8),              /* LIMIT PRIORITY OF TS TASK    */\n*    2 TCBTSDP  CHAR(1),             /* DISPATCHING PRIORITY OF TS\n*                                       TASK                         */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBC1;\n*    2 TCBPQE   PTR(31),             /* POINTER TO DPQE MINUS 8 FOR\n*                                       THE JOB STEP (AOS/2)         */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBC2;\n*     3 TCBFTLMP PTR(8),             /* TASK LIMIT PRIORITY (AOS/1)  */\n*     3 TCBFTFLG CHAR(3),            /* ABEND FLAGS (AOS/1)          */\n*%GOTO TCBC1A;\n*%TCBC1 : ;\n*    2 TCBFTLMP PTR(8),              /* TASK LIMIT PRIORITY (AOS/1)  */\n*    2 TCBFTFLG CHAR(3),             /* ABEND FLAGS (AOS/1)          */\n*%TCBC1A : ;\n*      4 TCBFTFL1 CHAR(1),           /* ABEND FLAGS (AOS/1)          */\n*       5 TCBRSV56 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV57 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV58 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV59 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV60 BIT(1),           /* RESERVED                     */\n*       5 TCBFTTOP BIT(1),           /* THIS IS TOP TASK IN TREE\n*                                       BEING ABTERMED         ICB422*/\n*       5 TCBFTCOM BIT(1),           /* - ABTERM DUMP SUCCESSFULLY\n*                                       COMPLETED                    */\n*       5 TCBENQ   BIT(1),           /* INDICATES TO ABEND THAT TASK\n*                                       IS ENQUEUED ON DUMP DATA\n*                                       SET                    ICB422*/\n*      4 TCBFTFL2 CHAR(1),           /* ABEND FLAGS (AOS/1)          */\n*       5 TCBRSV61 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV62 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV63 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV64 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV65 BIT(1),           /* RESERVED                     */\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBC2X;\n*       5 TCBFDSOP BIT(1),           /* INDICATES TO ABEND THAT DUMP\n*                                       DATA SET IS OPEN FOR JOB\n*                                       STEP                   ICB422*/\n*%GOTO TCBC2Y;\n*%TCBC2X : ;\n*       5 *        BIT(1),           /* TCBFDSOP - INDICATES TO ABEND\n*                                       THAT DUMP DATA SET IS OPEN\n*                                       FOR JOB STEP           ICB422*/\n*%TCBC2Y : ;\n*       5 TCBSYSAB BIT(1),           /* INDICATES TO ABEND THAT\n*                                       EITHER THE SYSABEND DATA SET\n*                                       (BIT=1) OR THE SYSUDUMP DATA\n*                                       SET (BIT=0) IS BEING USED\n*                                                              ICB422*/\n*       5 TCBRSV66 BIT(1),           /* RESERVED                     */\n*      4 TCBFTFL3 CHAR(1),           /* ABEND FLAGS (AOS/1)          */\n*       5 TCBRSV67 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV68 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV69 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV70 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV71 BIT(1),           /* RESERVED                     */\n*       5 TCBFTDUM BIT(1),           /* - NO ABTERM DUMPS MAY BE\n*                                       PROVIDED IN THIS STEP        */\n*       5 TCBRSV72 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV73 BIT(1),           /* RESERVED                     */\n*%TCBC2 : ;\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBC2F;\n*    2 TCBAQE   PTR(31),             /* LIST ORIGIN OF AQE(S) FOR\n*                                       THIS TASK (AOS/2)            */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBC2G;\n*     3 TCBDDRTI FIXED(31),          /* AMOUNT OF TIME REMAINING IN\n*                                       TASK'S DYNAMIC DISPATCH TIME\n*                                       SLICE  (AOS/1)         ICB465*/\n*%GOTO TCBC2G;\n*%TCBC2F : ;\n*    2 TCBDDRTI FIXED(31),           /* AMOUNT OF TIME REMAINING IN\n*                                       TASK'S DYNAMIC DISPATCH TIME\n*                                       SLICE  (AOS/1)         ICB465*/\n*%TCBC2G : ;\n*    2 TCBSTAB  PTR(31),             /* ADDR OF STAE CONTROL BLOCK   */\n*     3 TCBNSTAE CHAR(1),            /* STAE FLAGS                   */\n*      4 TCBSTABE BIT(1),            /* - ABEND ENTERED BECAUSE OF\n*                                       ERROR IN STAE PROC           */\n*      4 TCBQUIES BIT(1),            /* - STAE INVOKED PURGE I/O\n*                                       ROUTINE WITH QUIESCE I/O\n*                                       OPTION                       */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBC2A;\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBC2B;\n*      4 TCB33E   BIT(1),            /* - A 33E ABEND HAS OCCURRED\n*                                       FOR TASK  (AOS/2)            */\n*      4 TCBRSV19 BIT(1),            /* RESERVED  (AOS/2)      ICB443*/\n*      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT\n*                                       SUCCESSFULLY QUIESCE I/O BUT\n*                                       I/O WAS HALTED               */\n*      4 TCBSYNCH BIT(1),            /* - SYNCH ISSUED BY ASIR TO\n*                                       SCHEDULE EXIT ROUTINE (AOS/2)*/\n*      4 TCBNPURG BIT(1),            /* - VALID RETRY WITHOUT AN\n*                                       RB PURGE  (AOS/2)            */\n*      4 TCBSTCUR BIT(1),            /* STAE RECURSION VALID (AOS/2)\n*                                                              ICB443*/\n*%GOTO TCBC2C;\n*%TCBC2A : ;\n*      4 TCBXCTL  BIT(1),            /* - CURRENT SCB HAS XCTL=YES\n*                                       OPTION  (AOS/1)              */\n*      4 TCBSCAT  BIT(1),            /* - SCB WAS CREATED BY A\n*                                       PROGRAM THAT IS SCATTER\n*                                       LOADED  (AOS/1)              */\n*      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT\n*                                       SUCCESSFULLY QUIESCE I/O BUT\n*                                       I/O WAS HALTED               */\n*      4 TCBSUPER BIT(1),            /* - PROGRAM USING STAE IS IN\n*                                       SUPERVISOR MODE  (AOS/1)     */\n*      4 TCBRETRY BIT(1),            /* - STAE USER REQUESTED THAT A\n*                                       RETRY ROUTINE BE SCHEDULED\n*                                       BUT THAT THE RB CHAIN NOT BE\n*                                       PURGED  (AOS/1)              */\n*      4 TCBVALID BIT(1),            /* - RETRY ROUTINE AND\n*                                       PARAMETER LIST ADDRESSES ARE\n*                                       VALID  (AOS/1)               */\n*%GOTO TCBC2C;\n*%TCBC2B : ;\n*      4 TCBXCTL  BIT(1),            /* - CURRENT SCB HAS XCTL=YES\n*                                       OPTION  (AOS/1)              */\n*       5 TCB33E   BIT(1),           /* - A 33E ABEND HAS OCCURRED\n*                                       FOR TASK  (AOS/2)            */\n*      4 TCBSCAT  BIT(1),            /* - SCB WAS CREATED BY A\n*                                       PROGRAM THAT IS SCATTER\n*                                       LOADED  (AOS/1)              */\n*       5 TCBRSV19 BIT(1),           /* RESERVED  (AOS/2)      ICB443*/\n*      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT\n*                                       SUCCESSFULLY QUIESCE I/O BUT\n*                                       I/O WAS HALTED               */\n*      4 TCBSUPER BIT(1),            /* - PROGRAM USING STAE IS IN\n*                                       SUPERVISOR MODE  (AOS/1)     */\n*       5 TCBSYNCH BIT(1),           /* - SYNCH ISSUED BY ASIR TO\n*                                       SCHEDULE EXIT ROUTINE (AOS/2)*/\n*      4 TCBRETRY BIT(1),            /* - STAE USER REQUESTED THAT A\n*                                       RETRY ROUTINE BE SCHEDULED\n*                                       BUT THAT THE RB CHAIN NOT BE\n*                                       PURGED  (AOS/1)              */\n*       5 TCBNPURG BIT(1),           /* - VALID RETRY WITHOUT AN\n*                                       RB PURGE  (AOS/2)            */\n*      4 TCBVALID BIT(1),            /* - RETRY ROUTINE AND\n*                                       PARAMETER LIST ADDRESSES ARE\n*                                       VALID  (AOS/1)               */\n*       5 TCBSTCUR BIT(1),           /* STAE RECURSION VALID (AOS/2)\n*                                                              ICB443*/\n*%TCBC2C : ;\n*     3 TCBSTABB PTR(24),            /* ADDR OF STAE CONTROL BLOCK   */\n*    2 TCBTCT   PTR(31),             /* ADDR OF TCT                  */\n*     3 TCBTCTGF BIT(8),             /* FLAG BYTE FOR TIMING CONTROL\n*                                       TABLE                  ICB318*/\n*      4 TCBSMFGF BIT(1),            /* IF ZERO, THE TCT CORE TABLE\n*                                       IS NOT BE TO UPDATED BY\n*                                       GETMAIN/FREEMAIN.  IF ONE,\n*                                       THE TCT CORE TABLE IS TO BE\n*                                       UPDATED BY GETMAIN/FREEMAIN.\n*                                                              ICB318*/\n*      4 TCBRSV20 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV97 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV98 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV99 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV9A BIT(1),            /* RESERVED                     */\n*      4 TCBRSV9B BIT(1),            /* RESERVED                     */\n*      4 TCBRSV9C BIT(1),            /* RESERVED                     */\n*     3 TCBTCTB  PTR(24),            /* ADDR OF TCT                  */\n*    2 TCBUSER  PTR(31),             /* FIELD AVAILABLE TO THE USER  */\n*    2 TCBSCNDY CHAR(4) BDY(WORD),   /* SECONDARY NONDISPATCHABILITY\n*                                       FLAGS - (IF ANY BIT IN THESE\n*                                       BYTES IS ON, THEN SO IS THE\n*                                       PRIMARY NDSP FLAG)           */\n*     3 TCBNDSP  CHAR(4) BDY(WORD),  /* SAME AS TCBSCNDY             */\n*      4 TCBNDSP0 CHAR(1),           /* BYTE 0                       */\n*      4 TCBNDSP1 CHAR(1),           /* BYTE 1                       */\n*       5 TCBDARTN BIT(1),           /* - TASK TEMPORARILY\n*                                       NONDISPATCHABLE - (DAR)      */\n*       5 TCBDARPN BIT(1),           /* - TASK PERMANENTLY\n*                                       NONDISPATCHABLE - (DAR)      */\n*       5 TCBRSTND BIT(1),           /* - TASK TEMPORARILY\n*                                       NONDISPATCHABLE - (RMS/SER)  */\n*       5 TCBRSPND BIT(1),           /* - TASK PERMANENTLY\n*                                       NONDISPATCHABLE - (RMS/SER)\n*                                       (IF THIS FLAG IS ON THEN THE\n*                                       PREVIOUS ONE MUST BE TOO)    */\n*       5 TCBDDRND BIT(1),           /* TASK IS IN DEVICE ALLOCATION\n*                                       AND DYNAMIC DEVICE\n*                                       RECONFIGURATION (DDR) HAS\n*                                       MADE IT NONDISPATCHABLE      */\n*       5 TCBTPSP  BIT(1),           /* DISPATCHING OF TCAM TASK\n*                                       MUST BE DELAYED UNTIL TCAM\n*                                       I/O APPENDAGE OR SVC ROUTINE\n*                                       HAS COMPLETED EXECUTION\n*                                       (TCAM IN MULTIPROCESSING\n*                                       ENVIRONMENT)                 */\n*       5 TCBRSV21 BIT(1),           /* RESERVED                     */\n*       5 TCBDPFND BIT(1),           /* TASK IS TEMPORARILY SET\n*                                       NON-DISPATCHABLE TO FACILITATE\n*                                       DISPATCHING THE OWNER OF THE\n*                                       SYSTEM LOCK.  SET TO 1 BY\n*                                       PAGING SUPERVISOR.  (OS/VS2)\n*                                                             YA00832*/\n*      4 TCBNDSP2 CHAR(1),           /* BYTE 2                       */\n*       5 TCBABD   BIT(1),           /* - SET BY ABDUMP - (AOS/1)    */\n*       5 TCBSTPP  BIT(1),           /* - TASK NDSP BECAUSE STOPPED\n*                                       BY SETTASK                   */\n*       5 TCBNDSVC BIT(1),           /* - TASK NDSP BECAUSE SVC\n*                                       DUMP IS EXECUTING FOR\n*                                       ANOTHER TASK                 */\n*       5 TCBNDTS  BIT(1),           /* - TASK NDSP BECAUSE BEING\n*                                       SWAPPED OUT                  */\n*       5 TCBIWAIT BIT(1),           /* - TASK NDSP DUE TO INPUT\n*                                       WAIT                         */\n*       5 TCBOWAIT BIT(1),           /* - TASK NDSP DUE TO OUTPUT\n*                                       WAIT                         */\n*       5 TCBDSS   BIT(1),           /* DSS HAS SET THE TASK\n*                                       NON-DISPATCHABLE       ICB313*/\n*       5 TCBABE   BIT(1),           /* - ABEND ENTERED FOR THIS\n*                                       TASK - WHILE SYSABEND DCB\n*                                       OPEN FOR ANOTHER TASK (AOS/1)*/\n*      4 TCBNDSP3 CHAR(1),           /* BYTE 3                       */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBC3;\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBC3A;\n*       5 TCBTERM  BIT(1),           /* TERMINATED (AOS/1)           */\n*       5 TCBABTER BIT(1),           /* - TO BE TERMINATED BY ABEND\n*                                       -  (AOS/1)                   */\n*       5 TCBNDSDA BIT(1),           /* TEMPORARILY NONDISPATCHABLE,\n*                                       PARTITION IS DEACTIVATED\n*                                       (AOS/1)                ICB357*/\n*%GOTO TCBC4;\n*%TCBC3A : ;\n*       5 TCBLJSND BIT(1),           /* TASK IS ABENDING AND\n*                                       NONDISPATCHABLE BECAUSE IT\n*                                       HAS A JOB STEP SUBTASK.\n*                                       TCBONDSP MUST ALSO BE ON.\n*                                       (AOS/2)                      */\n*        6 TCBTERM  BIT(1),          /* TERMINATED (AOS/1 WITH\n*                                       SUBTASKING                   */\n*       5 TCBSTAND BIT(1),           /* TASK HAS BEEN SET\n*                                       NONDISPATCHABLE WHILE ASIR\n*                                       IS SCHEDULING AN EXIT ROUTINE\n*                                       FOR SOME OTHER TASK IN JOB\n*                                       STEP  (AOS/2)                */\n*        6 TCBABTER BIT(1),          /* - TO BE TERMINATED BY ABEND\n*                                       (AOS/1)                      */\n*       5 TCBRSV23 BIT(1),           /* RESERVED  (AOS/2)            */\n*        6 TCBNDSDA BIT(1),          /* TEMPORARILY NONDISPATCHABLE,\n*                                       PARTITION IS DEACTIVATED\n*                                       (AOS/1)                ICB357*/\n*%GOTO TCBC4;\n*%TCBC3 : ;\n*       5 TCBLJSND BIT(1),           /* TASK IS ABENDING AND\n*                                       NONDISPATCHABLE BECAUSE IT\n*                                       HAS A JOB STEP SUBTASK.\n*                                       TCBONDSP MUST ALSO BE ON.\n*                                       (AOS/2)                      */\n*       5 TCBSTAND BIT(1),           /* TASK HAS BEEN SET\n*                                       NONDISPATCHABLE WHILE ASIR\n*                                       IS SCHEDULING AN EXIT ROUTINE\n*                                       FOR SOME OTHER TASK IN JOB\n*                                       STEP  (AOS/2)                */\n*       5 TCBRSV23 BIT(1),           /* RESERVED (AOS/2)             */\n*%TCBC4 : ;\n*       5 TCBRSV24 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV25 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV26 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV27 BIT(1),           /* RESERVED                     */\n*       5 TCBRSV28 BIT(1),           /* RESERVED                     */\n*    2 TCBMDIDS FIXED(31),           /* RESERVED FOR MODEL-DEPENDENT\n*                                       SUPPORT AND FOR IBM\n*                                       PROPRIETARY PROGRAMMING\n*                                       SUPPORT                ICBXXX*/\n*    2 TCBJSCB  PTR(31),             /* ADDR OF JOB STEP CONTROL\n*                                       BLOCK                        */\n*     3 TCBRECDE CHAR(1),            /* ABEND RECURSION BYTE   ICB456*/\n*      4 TCBREC   BIT(1),            /* VALID REENTRY TO ABEND\n*                                       INDICATED IF NON-ZERO VALUE\n*                                       IN FOLLOWING 7 BITS    ICB456*/\n*      4 *        BIT(7),            /* ABEND BITS             ICB456*/\n*%TCBOPEN='''01''X';                 /* OPEN DUMP DATA SET     ICB456*/\n*%TCBCLOSD='''02''X';                /* CLOSE DIRECT SYSOUT ON\n*                                       TAPE                   ICB456*/\n*%TCBCLOSE='''03''X';                /* CLOSE OPEN DATA SETS   ICB456*/\n*%TCBCLOSF='''04''X';                /* RESERVED               ICB456*/\n*%TCBGREC='''05''X';                 /* GRAPHICS               ICB456*/\n*%TCBADUMP='''07''X';                /* ABDUMP                 ICB456*/\n*%TCBPTAXE='''08''X';                /* PURGE TAXE             ICB456*/\n*%TCBMESG='''09''X';                 /* MESSAGE RECURSION      ICB456*/\n*%TCBDYNAM='''0A''X';                /* DD-DYNAM TIOT CLEANUP  ICB456*/\n*%TCBQTIP='''0C''X';                 /* PURGE TSO INTERPARTITION\n*                                       POSTS                  ICB456*/\n*%TCBTCAMP='''0D''X';                /* PURGE TCAM INTERPARTITION\n*                                       POSTS                  ICB456*/\n*%TCBSAVCD='''0F''X';                /* ASIR RECURSION.  SAVE OLD\n*                                       COMP CODE              ICB456*/\n*%TCBTYP1W='''10''X';                /* TYPE 1 MESSAGE WRITE TO\n*                                       PROGRAMMER             ICB456*/\n*%TCBNOSTA='''30''X';                /* STAE/STAI NOT TO BE\n*                                       HONORED                ICB456*/\n*%TCBSTRET='''31''X';                /* RETURN FROM STEAL CORE ICB456*/\n*%TCBCONVR='''32''X';                /* CONVERT TO STEP ABEND  ICB456*/\n*%TCBDARET='''33''X';                /* RETURN FROM DAR        ICB456*/\n*%TCBTYP1R='''34''X';                /* RETURN FROM TYPE 1 MESSAGE\n*                                       MODULE                 ICV456*/\n*%TCBNEWRB='''35''X';                /* ABEND ISSUED SVC 13 TO XCTL\n*                                       TO A NON-ABEND MODULE  ICB456*/\n*%TCBMCCNS='''40''X';                /* INDICATES THAT A MUST COMPLETE\n*                                       TASK HAS ABENDED WITHOUT\n*                                       ENOUGH STORAGE FOR 2 RB'S FOR\n*                                       A WTOR ASKING WHETHER THE\n*                                       TASK'S RESOURCES ARE CRITICAL\n*                                       OR NOT.  THE RESOURCES ARE\n*                                       ASSUMED TO BE CRITICAL, WHICH\n*                                       WILL CAUSE THE PARTITION TO\n*                                       BE MARKED PERMANENTLY NON-\n*                                       DISPATCHABLE. (OS/VS1) ICB492*/\n*     3 TCBJSCBB PTR(24),            /* ADDR OF JOB STEP CONTROL\n*                                       BLOCK                        */\n*    2 TCBDDEXC FIXED(15),           /* COUNT OF THE NUMBER OF TIMES\n*                                       A DYNAMIC DISPATCHING TASK\n*                                       HAS ITS TIME SLICE EXPIRE\n*                                       (AOS/1)                ICB465*/\n*    2 TCBDDWTC FIXED(15),           /* COUNT OF THE NUMBER OF TIMES\n*                                       A DYNAMIC DISPATCHING TASK IS\n*                                       NOT INTERRUPTED BY TIME SLICE\n*                                       BETWEEN WAITS  (AOS/1) ICB465*/\n*    2 TCBIOBRC PTR(31),             /* ADDRESS OF IOB RESTORE CHAIN\n*                                       FOR I/O QUIESCED BY EOT\n*                                                              YM2840*/\n*    2 TCBRSV30 PTR(31),             /* RESERVED                     */\n*    2 TCBEXT1  PTR(31),             /* SAME AS TCBEXT1A       ICB311*/\n*     3 TCBRSV32 PTR(8),             /* RESERVED               ICB311*/\n*     3 TCBEXT1A PTR(24),            /* ADDRESS OF OS-AOS COMMON\n*                                       EXTENSION              ICB311*/\n*\n* /*           AOS/1 - AOS/2 COMMON SECTION                          */\n*\n*    2 TCBBITS  CHAR(4) BDY(WORD),   /* FLAG BYTES                   */\n*     3 TCBNDSP4 BIT(8),             /* SECONDARY NONDISPATCHABILITY\n*                                       FLAGS COMMON TO AOS/1 AND\n*                                       AOS/2.  COORDINATED WITH\n*                                       PRIMARY NONDISPATCHABILITY\n*                                       FLAG TCBPNDSP.               */\n*      4 TCBRSV86 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV87 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV88 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV89 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV90 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV91 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV92 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV93 BIT(1),            /* RESERVED                     */\n*     3 TCBNDSP5 BIT(8),             /* SECONDARY NONDISPATCHABILITY\n*                                       FLAGS UNIQUE TO AOS/1 OR\n*                                       AOS/2.  COORDINATED WITH\n*                                       PRIMARY NONDISPATCHABILITY\n*                                       FLAG TCBPNDSP.               */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBC5;\n*      4 TCBNDSPL BIT(1),            /* NONDISPATCHABLE BECAUSE\n*                                       SUPERVISOR LOCK SET.  SET BY\n*                                       PAGING SERVICE INTERFACE\n*                                       ROUTINE WHEN DISABLED CODE\n*                                       PRODUCES A PAGE FAULT OR\n*                                       REQUESTS A PAGE FIX. (AOS/1) */\n*      4 TCBNDGTF BIT(1),            /* TASK NONDISPATCHABLE WHILE\n*                                       WAITING FOR A TIRB ROUTINE TO\n*                                       PROCESS A DISABLED PAGE FAULT\n*                                       WHICH WAS PRODUCED BY GTF.\n*                                       SET AND RESET OF STAGE THREE\n*                                       EXIT EFFECTOR.  SET WHEN TIRB\n*                                       POOL EMPTY AND REQUESTING\n*                                       TASK HAS AN SQE QUEUED AT\n*                                       REQUEST OF GTF.  (AOS/1)     */\n*%GOTO TCBC5D;\n*%TCBC5 : ;\n*      4 TCBRSV94 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBRSV95 BIT(1),            /* RESERVED  (AOS/2)            */\n*%TCBC5D : ;\n*      4 TCBRSV74 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV75 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV76 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV77 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV78 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV79 BIT(1),            /* RESERVED                     */\n*     3 TCBFLGS6 CHAR(1),            /* TASK-RELATED FLAGS           */\n*      4 TCBRV    BIT(1),            /* PARTITION IS FIXED.  VIRTUAL\n*                                       ADDRESSES IN PARTITION ARE\n*                                       REAL.                        */\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBC5A;\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBC5B;\n*      4 TCBPIE17 BIT(1),            /* TASK REQUESTS SPIE ON PAGE\n*                                       FAULTS  (AOS/1)        ICB339*/\n*      4 TCBPANIC BIT(1),            /* TASK HAS OR IS WAITING FOR\n*                                       'PANIC'  (AOS/1)       ICB457*/\n*      4 TCBRSV80 BIT(1),            /* RESERVED  (AOS/1)            */\n*      4 TCBRUNPN BIT(1),            /* IF ZERO, PARTITION CAN BE\n*                                       DEACTIVATED.  IF ONE,\n*                                       PARTITION IS INELIGIBLE TO\n*                                       BE DEACTIVATED.(AOS/1) ICB465*/\n*      4 TCBRUNJB BIT(1),            /* IF ZERO, CURRENT JOB CAN BE\n*                                       DEACTIVATED.  IF ONE,\n*                                       PARTITION IS INELIGIBLE TO BE\n*                                       DEACTIVATED WHILE CURRENT JOB\n*                                       IS RUNNING.  (AOS/1)   ICB465*/\n*      4 TCBDSINQ BIT(1),            /* IF ZERO, DSI LOGIC IS NOT\n*                                       BEING EXECUTED.  IF ONE,\n*                                       SCHEDULER IS USING (ENQUEQUED)\n*                                       DATA SET INTEGRITY (DSI)\n*                                       LOGIC AT JOB START TIME.\n*                                       PARTITION IS INELIGIBLE FOR\n*                                       DEACTIVATION. (AOS/1)  ICB465*/\n*      4 TCBRSV81 BIT(1),            /* RESERVED  (AOS/1)            */\n*%GOTO TCBC8;\n*%TCBC5B : ;\n*      4 TCBPIE17 BIT(1),            /* TASK REQUESTS SPIE ON PAGE\n*                                       FAULTS  (AOS/1)\n*                                       PAGE FAULT INTERRUPT IS TO\n*                                       BE PASSED TO THE TASK'S\n*                                       INTERRUPT EXIT AND AN 8-BYTE\n*                                       PICA IS IN EFFECT FOR THIS\n*                                       TASK (AOS/2)           ICB339*/\n*      4 TCBCPU   BIT(1),            /* TASK IS CPU-BOUND MEMBER OF\n*                                       APG  (AOS/2)                 */\n*       5 TCBPANIC BIT(1),           /* TASK HAS OR IS WAITING FOR\n*                                       'PANIC'  (AOS/1)       ICB457*/\n*      4 TCBSPVLK BIT(1),            /* TASK SCHEDULED FOR ABTERM\n*                                       WHILE OWNING SUPERVISOR LOCK\n*                                       (AOS/2)                      */\n*       5 TCBRSV80 BIT(1),           /* RESERVED  (AOS/1)            */\n*      4 TCBOLSQA BIT(1),            /* TASK OWNS SPQE FOR LSQA\n*                                       (AOS/2)                      */\n*       5 TCBRUNPN BIT(1),           /* IF ZERO, PARTITION CAN BE\n*                                       DEACTIVATED.  IF ONE,\n*                                       PARTITION IS INELIGIBLE TO\n*                                       BE DEACTIVATED.(AOS/1) ICB465*/\n*      4 TCBMIGR  BIT(1),            /* REGION SELECTED FOR MIGRATION\n*                                       FROM PRIMARY PAGING DEVICE\n*                                       (AOS/2)                      */\n*       5 TCBRUNJB BIT(1),           /* IF ZERO, CURRENT JOB CAN BE\n*                                       DEACTIVATED.  IF ONE,\n*                                       PARTITION IS INELIGIBLE TO BE\n*                                       DEACTIVATED WHILE CURRENT JOB\n*                                       IS RUNNING.  (AOS/1)   ICB465*/\n*      4 TCBAPG   BIT(1),            /* TASK IS IN APG  (AOS/2)      */\n*       5 TCBDSINQ BIT(1),           /* IF ZERO, DSI LOGIC IS NOT\n*                                       BEING EXECUTED.  IF ONE,\n*                                       SCHEDULER IS USING (ENQUEUED)\n*                                       DATA SET INTEGRITY (DSI)\n*                                       LOGIC AT JOB START TIME.\n*                                       PARTITION IS INELIGIBLE FOR\n*                                       DEACTIVATION.  (AOS/1) ICB465*/\n*      4 TCBNTJS  BIT(1),            /* JOB STEP TASK BUT NOT HIGHEST\n*                                       IN FAILING TREE  (AOS/2)     */\n*       5 TCBRSV81 BIT(1),           /* RESERVED  (AOS/1)            */\n*%GOTO TCBC8;\n*%TCBC5A : ;\n*      4 TCBPIE17 BIT(1),            /* PAGE FAULT INTERRUPT IS TO\n*                                       BE PASSED TO THE TASK'S\n*                                       INTERRUPT EXIT AND AN 8-BYTE\n*                                       PICA IS IN EFFECT FOR THIS\n*                                       TASK (AOS/2)           ICB339*/\n*      4 TCBCPU   BIT(1),            /* TASK IS CPU-BOUND MEMBER OF\n*                                       APG  (AOS/2)                 */\n*      4 TCBSPVLK BIT(1),            /* TASK SCHEDULED FOR ABTERM\n*                                       WHILE OWNING SUPERVISOR LOCK\n*                                       (AOS/2)                      */\n*      4 TCBOLSQA BIT(1),            /* TASK OWNS SPQE FOR LSQA\n*                                       (AOS/2)                      */\n*      4 TCBMIGR  BIT(1),            /* REGION SELECTED FOR MIGRATION\n*                                       FROM PRIMARY PAGING DEVICE\n*                                       (AOS/2)                      */\n*      4 TCBAPG   BIT(1),            /* TASK IS IN APG  (AOS/2)      */\n*      4 TCBNTJS  BIT(1),            /* JOB STEP TASK BUT NOT HIGHEST\n*                                       IN FAILING TREE  (AOS/2)     */\n*%TCBC8 : ;\n*     3 TCBFLGS7 CHAR(1),            /* TASK-RELATED FLAGS           */\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBC9;\n*%IF TCBSYSTM='BOTH'  %THEN\n*    %GOTO TCBC9B;\n*      4 TCBGPECB BIT(1),            /* TASK IS IN AN ECB WAIT FOR A\n*                                       GETPART (AOS/2)        ICB339*/\n*      4 TCBRSV33 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBRSV34 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBSTACK BIT(1),            /* SET IN JOB STEP TCB TO\n*                                       INDICATE THAT A TASK IN THE\n*                                       JOB STEP IS IN SERIAL ABEND\n*                                       PROCESSING.  USED IN\n*                                       CONJUNCTION WITH TCBFOINP.\n*                                       (AOS/2)                ICB374*/\n*      4 TCBRSV35 BIT(1),            /* RESERVED  (AOS/2)            */\n*      4 TCBRSTSK BIT(1),            /* RESIDENT SYSTEM TASK (AOS/2) */\n*      4 TCBADMP  BIT(1),            /* ALL OTHER TASKS IN JOB STEP\n*                                       HAVE BEEN SET NONDISPATCHABLE\n*                                       BY ABDUMP.  THIS BIT IS SET\n*                                       TO CONTROL JOB STEP DURING\n*                                       THE DUMPING PROCESS. (AOS/2) */\n*%GOTO TCBC9A;\n*%TCBC9B : ;\n*      4 TCBGPECB BIT(1),            /* TASK IS IN AN ECB WAIT FOR A\n*                                       GETPART  (AOS/2)       ICB339*/\n*       5 TCBFDD   BIT(1),           /* IF ONE, THIS TCB IS A MEMBER\n*                                       OF THE DYNAMIC DISPATCHING\n*                                       GROUP.  (AOS/1)        ICB465*/\n*      4 TCBRSV33 BIT(1),            /* RESERVED  (AOS/2)            */\n*       5 TCBFDDT  BIT(1),           /* USED BY DYNAMIC DISPATCHING -\n*                                       0 = CPU BOUND, 1 = I/O BOUND\n*                                       (AOS/1)                ICB465*/\n*      4 TCBRSV34 BIT(1),            /* RESERVED  (AOS/2)            */\n*       5 TCBFDDEI BIT(1),           /* USED BY DYNAMIC DISPATCHING -\n*                                       0 = INTERVAL HAS NOT EXPIRED,\n*                                       1 = TIME SLICE INTERVAL HAS\n*                                       EXPIRED FOR THIS TASK SINCE\n*                                       IT LAST ISSUED A WAIT.\n*                                       (AOS/1)                ICB465*/\n*      4 TCBSTACK BIT(1),            /* SET IN JOB STEP TCB TO\n*                                       INDICATE THAT A TASK IN THE\n*                                       JOB STEP IS IN SERIAL ABEND\n*                                       PROCESSING.  USED IN\n*                                       CONJUNCTION WITH TCBFOINP.\n*                                       (AOS/2)                ICB374*/\n*       5 TCBFWDD  BIT(1),           /* IF ONE, THIS TCB WAS A MEMBER\n*                                       OF DYNAMIC DISPATCHING GROUP\n*                                       BUT IS NOT CURRENTLY A MEMBER\n*                                       (OS/VS1)               XM9175*/\n*      4 TCBRSV35 BIT(1),            /* RESERVED                     */\n*      4 TCBRSTSK BIT(1),            /* RESIDENT SYSTEM TASK (AOS/2) */\n*       5 TCBRSV83 BIT(1),           /* RESERVED  (AOS/1)            */\n*      4 TCBADMP  BIT(1),            /* ALL OTHER TASKS IN JOB STEP\n*                                       HAVE BEEN SET NONDISPATCHABLE\n*                                       BY ABDUMP.  THIS BIT IS SET\n*                                       TO CONTROL JOB STEP DURING\n*                                       THE DUMPING PROCESS. (AOS/2) */\n*       5 TCBRSV84 BIT(1),           /* RESERVED  (AOS/1)            */\n*%GOTO TCBC9A;\n*%TCBC9 : ;\n*      4 TCBFDD   BIT(1),            /* IF ONE, THIS TCB IS A MEMBER\n*                                       OF THE DYNAMIC DISPATCHING\n*                                       GROUP.  (AOS/1)        ICB465*/\n*      4 TCBFDDT  BIT(1),            /* USED BY DYNAMIC DISPATCHING -\n*                                       0 = CPU BOUND, 1 = I/O BOUND\n*                                       (AOS/1)                ICB465*/\n*      4 TCBFDDEI BIT(1),            /* USED BY DYNAMIC DISPATCHING -\n*                                       0 = INTERVAL HAS NOT EXPIRED,\n*                                       1 = TIME SLICE INTERVAL HAS\n*                                       EXPIRED FOR THIS TASK SINCE\n*                                       IT LAST ISSUED A WAIT.\n*                                       (AOS/1)                ICB465*/\n*      4 TCBFWDD  BIT(1),            /* IF ONE, THIS TCB WAS A MEMBER\n*                                       OF DYNAMIC DISPATCHING GROUP\n*                                       BUT IS NOT CURRENTLY A MEMBER\n*                                       (OS/VS1)               XM9175*/\n*      4 TCBRSV35 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV83 BIT(1),            /* RESERVED (AOS/1)             */\n*      4 TCBRSV84 BIT(1),            /* RESERVED (AOS/1)             */\n*%TCBC9A : ;\n*      4 TCBGTOFM BIT(1),            /* GTF TRACING TEMPORARILY\n*                                       DISABLED               ICB402*/\n*    2 TCBDAR   CHAR(1),             /* DAMAGE ASSESSMENT ROUTINE\n*                                       FLAGS                        */\n*     3 TCBDARP  BIT(1),             /* - PRIMARY DAR RECURSION - -\n*                                       DAR FAILURE WHILE WRITING\n*                                       CORE IMAGE                   */\n*     3 TCBDARS  BIT(1),             /* - SECONDARY DAR RECURSION -\n*                                       -  DAR FAILURE WHILE\n*                                       ATTEMPTING TO REINSTATE\n*                                       FAILING REGION/PARTITION     */\n*     3 TCBDARD  BIT(1),             /* - A DUMP HAS BEEN REQUESTED\n*                                       FOR A WRITER OR SCHEDULER\n*                                       ABEND AND THE USER HAS NOT\n*                                       PROVIDED A SYSABEND DD CARD\n*                                       (AOS/1)                      */\n*     3 TCBDARC  BIT(1),             /* - RECURSION PERMITTED IN\n*                                       CLOSE - AFTER DAR PROCESSING\n*                                       COMPLETED  (PCP)             */\n*      4 TCBDARMC BIT(1),            /* DAR HAS BEEN ENTERED TO\n*                                       HANDLE A VALID RECURSION\n*                                       IN MUST COMPLETE STATUS\n*                                       THROUGH ABEND          ICB264*/\n*     3 TCBDARO  BIT(1),             /* - SYSTEM ERROR TASK IS\n*                                       FAILING.  DAR DUMP SHOULD NOT\n*                                       REQUEST ANY ERP PROCESSING   */\n*     3 TCBDARWT BIT(1),             /* WTO IN PROCESS FOR DAR ICB264*/\n*     3 TCBRSV36 BIT(1),             /* RESERVED                     */\n*     3 TCBEXSVC BIT(1),             /* SVC DUMP IS EXECUTING FOR\n*                                       THIS TASK                    */\n*    2 TCBRSV37 PTR(8),              /* RESERVED                     */\n*    2 TCBSYSCT PTR(8),              /* COUNT FOR THE OUTSTANDING\n*                                       NUMBER OF 'SYSTEM MUST\n*                                       COMPLETE' REQUESTS\n*                                       (ICB497)               YM3883*/\n*    2 TCBSTMCT PTR(8),              /* COUNT FOR OUTSTANDING NUMBER\n*                                       OF 'STEP MUST COMPLETE'\n*                                       REQUESTS (ICB497)      YM3883*/\n*    2 TCBEXT2  PTR(31) BDY(DWORD),  /* SAME AS TCBEXT2A       ICB311*/\n*     3 TCBRSV39 PTR(8),             /* RESERVED               ICB311*/\n*     3 TCBEXT2A PTR(24),            /* ADDRESS OF AOS/1 - AOS/2\n*                                       COMMON EXTENSION       ICB311*/\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBD1;\n*\n* /*           AOS/1 TCB OVERLAY                                     */\n*\n*    2 TCBPCB   PTR(31) BDY(DWORD,5),/* ADDRESS OF PAGE CONTROL\n*                                       BLOCK FOR TASK               */\n*    2 TCBGQE   PTR(31),             /* ADDRESS OF FIRST GQE FOR TASK*/\n*    2 TCBARB   PTR(31),             /* ADDR OF AVAILABLE SVRB ICB344*/\n*     3 TCBRSV85 CHAR(1),            /* RESERVED               ICB344*/\n*     3 TCBARBA  PTR(24),            /* ADDR OF AVAILABLE SVRB ICB344*/\n*    2 *        CHAR(0) BDY(DWORD);\n*%IF TCBSYSTM='AOS1'  %THEN\n*    %GOTO TCBD2;\n*%TCBD1 : ;\n*\n* /*           AOS/2 TCB OVERLAY                                     */\n*\n*%IF TCBSYSTM=''  %THEN\n*    %GOTO TCBD1A;\n* DECLARE\n*%IF IKEPLS='2'  %THEN\n*    %GOTO TCBD1B;\n*   1 TCBS01   BASED(ADDR(TCBPCB))  BDY(DWORD,5),\n*%GOTO TCBD1A;\n*%TCBD1B : ;\n*   1 TCBS01   DEF(TCBPCB) BDY(DWORD,5),\n*%TCBD1A : ;\n*    2 TCBXTENT CHAR(4) BDY(DWORD,5),/* REGION SEGMENT INFORMATION   */\n*     3 TCBRSV40 PTR(8),             /* RESERVED                     */\n*     3 TCBSTI   PTR(8),             /* SEGMENT INDEX TO FIRST\n*                                       SEGMENT IN REGION.  ZERO IF\n*                                       VIRTUAL ADDRESSES IN REGION\n*                                       ARE REAL.                    */\n*     3 TCBSCT   PTR(8),             /* COUNT FIELD INDICATING THE\n*                                       NUMBER OF SEGMENTS FOR THIS\n*                                       TASK'S REGION.  ZERO IF\n*                                       VIRTUAL ADDRESSES IN REGION\n*                                       ARE REAL.                    */\n*     3 TCBLSQA  PTR(8),             /* SEGMENT INDEX TO FIRST LSQA\n*                                       SEGMENT FOR THE TASK'S\n*                                       REGION                 ICB339*/\n*    2 TCBTIRB  PTR(31),             /* ADDRESS OF TIRB FOR TASK     */\n*    2 TCBBACK  PTR(31),             /* ADDRESS OF PREVIOUS TCB ON\n*                                       READY QUEUE.  ZERO IN TOP\n*                                       TCB.                         */\n*    2 TCBLSQAP PTR(31),             /* ADDRESS OF SPQE FOR LSQA     */\n*    2 TCBIOTIM FIXED(31),           /* TIME IN 16-MICROSECOND UNITS\n*                                       BETWEEN TIME ORIGINAL TIME\n*                                       SLICE INTERVAL WAS ASSIGNED\n*                                       AND TIME APG TASK WENT INTO\n*                                       VOLUNTARY WAIT               */\n*    2 TCBTMSAV FIXED(31),           /* TIME IN 16-MICROSECOND UNITS\n*                                       REMAINING FROM ORIGINAL TIME\n*                                       SLICE INTERVAL WHEN APG TASK\n*                                       WAS LAST DISPATCHED          */\n*    2 TCBABCUR CHAR(1),             /* ABEND RECURSION BYTE         */\n*    2 TCBRSVAA PTR(8),              /* RESERVED (ICB497)      YM3883*/\n*    2 TCBTID   CHAR(1),             /* TASK ID NUMBER         ICB374*/\n*%TCBPAGID='''FF''X';                /* ID FOR PAGING SUPERVISOR\n*                                       TASK                   ICB403*/\n*%TCBSYERR='''FE''X';                /* ID FOR SYSTEM ERROR\n*                                       TASK                   ICB403*/\n*%TCBCOMM='''FD''X';                 /* ID FOR COMMUNICATIONS\n*                                       TASK                   ICB403*/\n*%TCBIORMS='''FC''X';                /* ID FOR I/O RMS\n*                                       TASK                   ICB403*/\n*%TCBMASTR='''FB''X';                /* ID FOR MASTER SCHEDULER\n*                                       TASK                   ICB403*/\n*%TCBJES='''FA''X';                  /* ID FOR JES MONITOR\n*                                       TASK                   ICB403*/\n*%TCBDSSID='''F9''X';                /* ID FOR DSS\n*                                       TASK                   ICB403*/\n*    2 TCBRSV41 PTR(8),              /* RESERVED               ICB374*/\n*    2 TCBQECB  PTR(31),             /* SAME AS TCBQECBA BELOW ICB339*/\n*     3 TCBNQCT  PTR(8),             /* COUNT OF ALL RESOURCES\n*                                       UNAVAILABLE DUE TO ENQ OR\n*                                       RESERVE REQUESTED WITH\n*                                       ECB                    ICB339*/\n*     3 TCBQECBA PTR(24),            /* ADDRESS OF ECB TO BE POSTED\n*                                       WHEN TCBNQCT=0         ICB339*/\n*    2 TCBFOE   PTR(31),             /* SAME AS TCBFOEA BELOW  ICB339*/\n*     3 TCBRSV42 PTR(8),             /* RESERVED               ICB339*/\n*     3 TCBFOEA  PTR(24),            /* ADDRESS OF FIRST FIX\n*                                       OWNERSHIP ELEMENT (FOE) IN\n*                                       LIST FOR THIS TASK     ICB339*/\n*    2 TCBSWA   PTR(31),             /* ADDRESS OF FIRST SCHEDULER\n*                                       WORK AREA (SWA) HEADER IN A\n*                                       CHAIN OF SWA BLOCKS FOR THIS\n*                                       TASK                   ICB374*/\n*    2 TCBRSV96 PTR(31),             /* RESERVED                     */\n*    2 *        CHAR(0) BDY(DWORD);\n*%TCBD2 : ;\n*\n* /*           AOS/1 - AOS/2 COMMON EXTENSION                        */\n*\n* DECLARE\n*   1 TCBXTNT2 BASED(TCBEXT2)  BDY(DWORD),\n*    2 TCBGTF   PTR(31),             /* SAME AS TCBGTFA BELOW  ICB312*/\n*     3 TCBTFLG  BIT(8),             /* GTF FLAG BYTE          ICB312*/\n*      4 TCBASYNC BIT(1),            /* GTF ASYNCHRONOUS GATHER\n*                                       ROUTINE IN CONTROL     ICB312*/\n*      4 TCBERRTN BIT(1),            /* GTF ASYNCHRONOUS GATHER ERROR\n*                                       ROUTINE IN CONTROL     ICB312*/\n*      4 TCBDSPIT BIT(1),            /* MCIH SHOULD UNCONDITIONALLY\n*                                       BRANCH TO DISPATCHER   ICB312*/\n*      4 TCBRSV43 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV44 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV45 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV46 BIT(1),            /* RESERVED                     */\n*      4 TCBRSV47 BIT(1),            /* RESERVED                     */\n*     3 TCBGTFA  PTR(24),            /* ADDRESS OF TEMPORARY TRACE\n*                                       BUFFER                 ICB312*/\n*    2 TCBRSVAB PTR(8),              /* RESERVED (ICB497)      YM3883*/\n*    2 TCBRCMP  BIT(24),             /* COMMON INTERFACE BETWEEN\n*                                       AOS/1 AND AOS/2 TO KEEP\n*                                       ABTERM COMPLETION CODE DUE TO\n*                                       A VALID RECURSION IN STAE\n*                                                              ICB411*/\n*    2 TCBRSV48 PTR(31),             /* RESERVED                     */\n*    2 TCBRSV49 PTR(31),             /* RESERVED                     */\n*    2 *        CHAR(0) BDY(DWORD);\n*\n*%TCBLEN='LENGTH(TCBFIX) + LENGTH(TCB) + LENGTH(TCBXTNT2)';  /* TCB\n*                                       LENGTH INCLUDING PREFIX\n*                                                              ICB362*/\n*\n* /*                   END OF TCB                                    */\n./ ADD NAME=IHBPSINR 0100-19106-19106-1238-00176-00176-00000-MZAP78  17\n         MACRO\n&NAME IHBPSINR &FORM,&TYPE=,&LA=,&A=,&ECB=,&ECBIND=,&LONG=,&RELEASE=,  X\n               &RSAOPT=,&SUSPEND=\n.******* DEFINE LOCAL SET SYMBOLS\n         LCLA  &INDEX,&INDEX2\n         LCLB  &LFORM,&RFORM,&FX(1),&FR(1),&LD(1),&P(4)\n         LCLB  &ECBISAD,&ECBINR0,&ECBNULL,&ECBNEG\n         LCLB  &ADRISAD,&ADRISRG,&ADRINR1\n         LCLC  &COMP,&OP,&ECBREG,&ERR\n.******* TEST FOR IRRECOVERABLE ERRORS\n         AIF   ('&FORM' NE '').G1\n      IHBERMAC 1017,MODE           MODE OPERAND REQ'D-NOT SPECIFIED\n         MEXIT\n.G1      AIF   ('&FORM' EQ 'L' OR '&FORM' EQ 'R').G2\n      IHBERMAC 1001,MODE,&FORM     INVALID MODE OPERAND SPECIF'D-FORM\n         MEXIT\n.G2      ANOP                      MODE OPERAND PRESENT -- EQ R OR L\n&RFORM   SETB  ('&FORM' EQ 'R')\n         AIF   (&RFORM).RF1        BRANCH FOR REGISTER-FORM PROCESSING\n.LF1     AIF   ('&LA' NE '').LF2   BEGIN LIST-FORM MAJOR ERROR TEST\n      IHBERMAC 1017,LA             LA= OPERAND REQ'D-NOT SPECIFIED\n         MEXIT\n.LF2     AIF   ('&A' EQ '').LF3\n      IHBERMAC 1020,A,L            OPERAND NOT ALLOWED WITH L MODE\n         MEXIT\n.LF3     ANOP\n&LFORM   SETB  1\n&ADRISAD SETB  ('&LA'(1,1) NE '(')\n&ADRINR1 SETB  ('&LA(1)' EQ '1')\n         AGO   .G3                 END OF LIST-FORM MAJOR ERROR TEST\n.RF1     AIF   ('&A' NE '').RF2    REGISTER-FORM MAJOR ERROR TESTS\n      IHBERMAC 1017,A              A  OPERAND REQ'D-NOT SPECIFIED\n         MEXIT\n.RF2     AIF   ('&LA' EQ '').RF3\n      IHBERMAC 1020,LA,R           LA= OPERAND NOT ALLOWED WITH R MODE\n         MEXIT\n.RF3     ANOP                      END OF REG-FORM MAJOR ERROR TESTS\n&ADRISAD SETB  ('&A'(1,1) NE '(')\n&ADRINR1 SETB  ('&A(1)' EQ '1')\n.G3      ANOP\n         AIF   (T'&ECB EQ 'O'  OR T'&ECBIND EQ 'O').G3A\n      IHBERMAC 1020,ECBIND,ECB     ECBIND NOT ALLOWED WITH ECB\n         MEXIT\n.G3A     ANOP\n&ECBNULL SETB  (T'&ECB EQ 'O' AND T'&ECBIND EQ 'O')\n&ECBNEG  SETB  (T'&ECBIND NE 'O')\n         AIF   ('&TYPE' EQ 'FREE' OR (NOT &ECBNULL)).G4\n      IHBERMAC 1017,ECB            ECB OPERAND REQ'D-NOT SPECIFIED\n         MEXIT\n.******* END OF TESTS FOR IRRECOVERABLE ERRORS\n.G4      ANOP                      BEGIN RECOVERABLE ERROR TESTS\n&FX(1)   SETB  ('&TYPE' EQ 'FIX')\n&FR(1)   SETB  ('&TYPE' EQ 'FREE')\n&LD(1)   SETB  ('&TYPE' EQ 'LOAD' OR '&TYPE' EQ 'FIX')\n         AIF   ('&TYPE' EQ 'LOAD').REL1\n         AIF   (&FR(1)).RSA1\n.LNG1    AIF   ('&LONG' EQ 'Y' OR '&LONG' EQ 'N' OR '&LONG' EQ '').LNG2\n      IHBERMAC 1015,&LONG,LONG,Y   V INVALID FOR LONG KWD, Y ASSUMED\n.LNG2    ANOP\n&P(1)    SETB  ('&LONG' NE 'N')\n.SUS1    AIF   ('&SUSPEND' EQ '').RSA1\n         AIF   (&LFORM).SUS2\n      IHBERMAC 1016,SUSPEND,R           INCOMP. WITH R MODE-IGNORED\n         AGO   .RSA1\n.SUS2    AIF   ('&SUSPEND' EQ 'Y' OR '&SUSPEND' EQ 'N').SUS3\n      IHBERMAC 1015,&SUSPEND,SUSPEND,N  V INV FOR SUSPEND, N ASSUMED\n.SUS3    ANOP\n&P(2)    SETB  ('&SUSPEND' EQ 'Y')\n.RSA1    AIF   ('&RSAOPT' EQ '').REL1\n         AIF   (&LFORM).RSA2\n      IHBERMAC 1016,RSAOPT,R            INCOMP. WITH R MODE-IGNORED\n         AGO   .REL1\n.RSA2    AIF   ('&RSAOPT' EQ 'Y' OR '&RSAOPT' EQ 'N').RSA3\n      IHBERMAC 1015,&RSAOPT,RSAOPT,N    V INV FOR RSAOPT, N ASSUMED\n.RSA3    ANOP\n&P(3)    SETB  ('&RSAOPT' EQ 'Y')\n.REL1    AIF   ('&RELEASE' EQ '').G5\n         AIF   (&LFORM).REL2\n      IHBERMAC 1016,RELEASE,R           INCOMP. WITH R MODE-IGNORED\n         AGO   .G5\n.REL2    AIF   ('&RELEASE' EQ 'Y' OR '&RELEASE' EQ 'N').REL3\n      IHBERMAC 1015,&RELEASE,RELEASE,N  V INV FOR RELEASE, N ASSUMED\n.REL3    ANOP\n&P(4)    SETB  ('&RELEASE' EQ 'Y')\n         AIF   (NOT(&P(3) AND &P(4))).G5\n&P(4)    SETB  0\n&ERR     SETC  'RSAOPT=Y'\n      IHBERMAC 1016,RELEASE,&ERR        RELEASE INCOMP. WITH RSAOPT\n.******* ERROR TEST END, PARMS VALID -- START MACRO EXPANSION\n.G5      ANOP\n&ADRISRG SETB  (NOT &ADRISAD)\n         AIF   (&ECBNULL).G5C\n         AIF   (&ECBNEG).G5A\n&ECBISAD SETB  ('&ECB'(1,1) NE '(')\n&COMP    SETC  ''\n         AIF   (&ECBISAD).G5C\n&OP      SETC  'LR'\n&ECBREG  SETC  '&ECB(1)'\n&ECBINR0 SETB  ('&ECB(1)' EQ '0')\n         AGO   .G5C\n.G5A     ANOP\n&ECBISAD SETB  ('&ECBIND'(1,1) NE '(')\n&COMP    SETC  '0-'\n         AIF   (&ECBISAD).G5C\n&OP      SETC  'LCR'\n&ECBREG  SETC  '&ECBIND(1)'\n.******* FORCE ALIGNMENT, INSERT LABELED HEADER, BRANCH PAST CONSTANTS\n.G5C     AIF   (NOT(&ECBISAD OR &ADRISAD)).G6\n.* * * * CNOP FOR ALIGNMENT IF LOAD TO BE PERFORMED\n         CNOP  0,4\n.G6      AIF   ('&NAME' EQ '').G6A\n.* * * * HEADER IF USER MACRO CALL LABELED\n&NAME    DS    0H\n.G6A     ANOP\n&INDEX   SETA  (4+4*&ECBISAD+4*&ADRISAD+2*&ADRISRG)\n.* * * * BRANCH TO FIRST EXECUTABLE INSTRUCTION\n         B     *+&INDEX  BRANCH AROUND INPUT PARMS\n.******* GENERATE ADDRESS CONSTANTS AND MODE FLAG OR FUNCTION BYTE\n         AIF   (NOT &ECBISAD).G7\n.* * * * ECB ADCON IF ECB=ADDR\n         DC    A(&COMP.&ECB&ECBIND)   FIRST INPUT PARM\n.G7      AIF   (&RFORM).G8\n.* * * * HIGH-ORDER REG 1 FLAG IF LIST FORM\n         DC    X'80'     L-MODE FLAG\n         AGO   .G9\n.* * * * HIGH-ORDER REG 1 FUNCTION BITS IF REGISTER FORM\n.G8      DC    B'0&FX(1)&FR(1)&LD(1)&P(4)0&P(1)0'    FUNCTION BYTE\n.G9      AIF   (&ADRISRG).G10\n.* * * * LIST OR VIRTUAL ADDRESS ADCON IF LA=ADDR OR A=ADDR\n         DC    AL3(&LA&A) SECOND INPUT PARM\n         AGO   .G11\n.* * * * FILLER IF NO LIST OR VIRTUAL ADDRESS ADCON PRESENT\n.G10     DC    X'00'     (TO MAINTAIN ALIGNMENT)\n.******* INITIALIZE REGISTER 0 -- ECB ADDRESS\n.G11     AIF   (NOT(&ADRISAD AND &ECBISAD)).G12\n.* * * * LOAD MULTIPLE IF BOTH ADCON'S HAVE BEEN CREATED\n         LM    0,1,*-8   INITIALIZE PARM REGS\n         AGO   .G18\n.G12     AIF   (&ECBINR0).G15\n         AIF   (&ECBNULL).G14\n         AIF   (&ECBISAD).G13\n.* * * * LOAD FROM REGISTER IF ECB ADDR NOT AN ADCON\n         &OP    0,&ECBREG     INITIALIZE PARM REG 0\n         AGO   .G15\n.* * * * LOAD FROM PARM LIST IF ECB ADDR IS AN ADCON\n.G13     L     0,*-6     INITIALIZE PARM REG 0\n         AGO   .G15\n.* * * * CLEAR REG 0 IF ECB OMITTED (PGFREE ONLY)\n.G14     SR    0,0       INDICATE NO PURGE ECB SPECIFIED\n.******* REGISTER 0 INITIALIZATION COMPLETE -- START REG 1\n.G15     AIF   (&ADRINR1).G17\n         AIF   (&ADRISAD).G16\n.* * * * LOAD FROM REGISTER IF LIST/VIRTUAL ADDR NOT AN ADCON\n         LR    1,&LA(1)&A(1)   INITIALIZE PARM REG 1\n         AGO   .G17\n.G16     ANOP\n&INDEX2  SETA  (6-2*&ECBINR0)\n.* * * * LOAD FROM PARM LIST IF LIST/VIRTUAL ADDR IS AN ADCON\n         L     1,*-&INDEX2         INITIALIZE PARM REG 1\n.G17     AIF   (&ADRISAD).G18\n&INDEX2  SETA  (6+2*&ECBISAD-2*&ECBINR0-2*&ADRINR1)\n.* * * * SET REG 1 BYTE 0 (MODE OR FUNCTIONS) UNLESS ALREADY LOADED\n         ICM   1,8,*-&INDEX2     SET HIGH-ORDER BYTE\n.G18     AIF   (&RFORM).CLREG\n.******* REGISTER INITIALIZATION COMPLETE EXCEPT FOR CLEARING REG 15\n.******* INITIALIZE LIST IF REQUIRED\n.* * * * FOR L-FORM ONLY, SET PARM LIST BYTES 0 AND 4\n         NI    0(1),X'80' CLEAR PARM LIST BYTE 0 FUNCTION BITS\n         OI    0(1),B'0&FX(1)&FR(1)&LD(1)&P(4)0&P(1)0' AND RESET\n         NI    4(1),X'C0' CLEAR PARM LIST BYTE 4 FUNCTION BITS\n         OI    4(1),B'00&P(3)0&P(2)000' AND RESET\n         AGO   .GEND\n.CLREG   SR    15,15     INDICATE NO END ADDRESS\n.* * * * PARAMETER LIST COMPLETE -- ISSUE SUPERVISOR CALL\n.GEND    SVC   113  INVOKE SERVICE ROUTINE\n         MEND\n./ ADD NAME=IHBRELNO 0100-19106-19106-1238-00005-00005-00000-MZAP78  17\n         MACRO                                                          0000000\n         IHBRELNO                                                       0000000\n         DS    0F    ALIGN CVT ON FULL WORD BOUNDRY                     0000000\nCVTRELNO DC    CL4'017 '    RELEASE NUMBER                              0000000\n         MEND                                                           0000000\n./ ADD NAME=IKJTJB   0100-19106-19106-1238-00168-00168-00000-MZAP78  18\n*        %GOTO TJBBSL   ; /*\n         MACRO\n         IKJTJB\n* LEVEL=21120000   SYSTEMS=OS/VS2\nTJB      DSECT\nTJBTSB   DS    A .       ADDR OF TSB FOR THIS JOB,0-STARTED BY OPERATOR\nTJBATTN  DS    CL1 .     NUMBER OF UNPROCESSED ATTNS FOR THIS JOB\nTJBSTAX  DS    CL1 .     NUMBER OF STAX EXITS YET UNSCHEDULED\nTJBSTAT  DS    X .       STATUS FLAGS\nTJBNJB   EQU   X'80' .   NO JOB,THIS TJB IS CURRENTLY UNUSED\nTJBINCOR EQU   X'40' .   USER IN CORE\nTJBLOGON EQU   X'20' .   LOGON START,SET BY TIOC AT DIAL-UP,TSC RESET\nTJBIWAIT EQU   X'10' .   INPUT WAIT,TERMINAL JOB IS IN INPUT WAIT\nTJBOWAIT EQU   X'08' .   OUTPUT WAIT,TERMINAL JOB IS IN OUTPUT WAIT\nTJBSILF  EQU   X'04' .   SYSTEM INITIATED LOGOFF\nTJBDISC  EQU   X'02' .   DISCONNECT SET TO REQUEST TIOC TO DISCON LINE\nTJBSILF2 EQU   X'01' .   SYSTEM INITIATED LOGOFF\nTJBSTAT2 DS    X .       STATUS FLAGS\nTJBHUNG  EQU   X'80' .   HUNG UP\nTJBHOLD  EQU   X'40' .   USER IS IN OWAIT DUE TO HOLD OPTIONS\nTJBOCAB  EQU   X'20' .   TSO FAILURE RESULTING IN OUT-OF-CORE ABEND\nTJBRNAV  EQU   X'10' .   USER CANNOT BE LOGGED ON BECAUSE MACHINE CHECK\n*                        IN REGION OR NO REGION LARGE ENOUGH\nTJBQUIS  EQU   X'04' .   QUIESCE STARTED FOR USER\nTJBUSERR EQU   X'02' .   USER READY TO RUN\nTJBDEAD  EQU   X'01' .   INDICATE ABEND RECURSION TO IKJEAT07\nTJBEXTNT DS    A .       POINTER TO TJB IN SWAPPED OUT JOB IMAGE\nTJBRCB   DS    A .       POINTER TO RCB FOR THIS REGION\n         DS    A .\nTJBSPCT  DS    A .       POINTER TO USER SPCT\n         DS    H .       OFFSET IN TT MAP OF TT MAP Q FOR THIS USER\nTJBRSTOR DS    X .       RESTORE FLAGS, TESTED BY RCT RESTORE\nTJBOWP   EQU   X'80' .   POST OUTPUT WAIT,SET BY TIOC,ENDS AN OWAIT\nTJBIWP   EQU   X'40' .   POST INPUT WAIT,SET BY TIOC,ENDS AN IWAIT\n*        EQU   X'20' .   RESERVED\nTJBLOGP  EQU   X'10' .   POST LOGON,POST ECB WAITED ON BY LOGON IMAGE\nTJBLWAIT EQU   X'08' .   USER IN LONG WAIT,SWAP OUT IF NOT MADE READY\n*                        BY RESTORE PROCESSING\nTJBDDRD  EQU   X'04' .   WHEN ON RESTORE WILL RESET DDR NON\n*                        DISPATCHABILITY BIT\nTJBFAT   EQU   X'02' .   AN ATTN EXIT IS REQ FOR THIS USER\nTJBDDRND EQU   X'01' .   INDICATES TO RESTORE TO SET TCB NON\n*                        DISPATCHABILE WHEN JOB SWAPPED IN\n         DS    CL1 .\nTJBUSER  DS    CL8 .     USERID OF THIS JOB OWNER,PADDED RT WITH BLANKS\nTJBIPPB  DS    F .       IPPB CHAIN OF ECB'S TO BE POSTED BY RESTORE\nTJBNEWID DS    CL1 .     RGN ID INTO WHICH THIS USER SHOULD BE LOGGED\n*                        ON. 0 IF SELECTED BY DRIVER\nTJBFLUSL DS    CL1 .     STAX LEV OF LAST STAX ISSUED WITH NOPURGE\n*                        OPTION\nTJBTJID  DS    CL2 .     TERMINAL JOB ID\nTJBMONI  DS    X .       MONITOR CMD INDICATING INFO REQUESTED\nTJBMDSN  EQU   X'80' .   DSNAMES\nTJBMJBN  EQU   X'40' .   JOBNAMES\nTJBMSES  EQU   X'20' .   SESSION\nTJBMSPA  EQU   X'10' .   SPACE\nTJBMSTA  EQU   X'08' .   STATUS\nTJBGETBF EQU   X'04' .   THIS BIT INDICATES TPUT SHOULD ATTEMPT TO GET\n*                        ADDITIONAL BUFFERS FOR USER BEFORE GOING INTO\n*                        A WAIT STATE\nTJBSTAT3 DS    X .       STATUS FLAGS\nTJBDISC2 EQU X'80' .     INDICATES TO IKJEAT03 WE ARE DISCONNECTING\n*                        THIS TJB AND NEXT TIME THRU IF THIS BIT IS\n*                        ON DO NOT DECREMENT RCB USE COUNT\nTJBLOGTM EQU   X'20'     INDICATES TO LOGON THAT TERMINATION\n*                        IS REQUESTED\nTJBOCPR  EQU   X'10' .   PREVENTS IKJVAT07 RECURSION\nTJBLINE  DS    CL2 .     CONTAINS BINARY REP OF THE UNIT ADDRESS OF\n*                        THE LINE BEING USED.\nTJBEND   DS    0F\n**/\n         MEND\n* %TJBBSL  :  ;\n* DECLARE\n*   1 TJB      BASED(TJBPTR),\n*    2 TJBTSB   PTR(31),             /* ADDR OF TSB FOR THIS\n*                                       JOB,0-STARTED BY OPERATOR    */\n*    2 TJBATTN  CHAR(1),             /* NUMBER OF UNPROCESSED ATTNS\n*                                       FOR THIS JOB                 */\n*    2 TJBSTAX  CHAR(1),             /* NUMBER OF STAX EXITS YET\n*                                       UNSCHEDULED                  */\n*    2 TJBSTAT  CHAR(1),             /* STATUS FLAGS                 */\n*     3 TJBNJB   BIT(1),             /* NO JOB,THIS TJB IS CURRENTLY\n*                                       UNUSED                       */\n*     3 TJBINCOR BIT(1),             /* USER IN CORE                 */\n*     3 TJBLOGON BIT(1),             /* LOGON START,SET BY TIOC AT\n*                                       DIAL-UP,TSC RESET            */\n*     3 TJBIWAIT BIT(1),             /* INPUT WAIT,TERMINAL JOB IS\n*                                       IN INPUT WAIT                */\n*     3 TJBOWAIT BIT(1),             /* OUTPUT WAIT,TERMINAL JOB IS\n*                                       IN OUTPUT WAIT               */\n*     3 TJBSILF  BIT(1),             /* SYSTEM INITIATED LOGOFF      */\n*     3 TJBDISC  BIT(1),             /* DISCONNECT SET TO REQUEST\n*                                       TIOC TO DISCON LINE          */\n*     3 TJBSILF2 BIT(1),             /* SYSTEM INITIATED LOGOFF      */\n*    2 TJBSTAT2 CHAR(1),             /* STATUS FLAGS                 */\n*     3 TJBHUNG  BIT(1),             /* HUNG UP                      */\n*     3 TJBHOLD  BIT(1),             /* USER IS IN OWAIT DUE TO HOLD\n*                                       OPTIONS                      */\n*     3 TJBOCAB  BIT(1),             /* TSO FAILURE RESULTING IN\n*                                       OUT-OF-CORE ABEND            */\n*     3 TJBRNAV  BIT(1),             /* USER CANNOT BE LOGGED ON\n*                                       BECAUSE MACHINE CHECK IN\n*                                       REGION OR NO REGION LARGE\n*                                       ENOUGH BITS                  */\n*     3 * BIT(1),                    /* RESERVED                     */\n*     3 TJBQUIS  BIT(1),             /* QUIESCE STARTED FOR USER     */\n*     3 TJBUSERR BIT(1),             /* USER READY TO RUN            */\n*     3 TJBDEAD  BIT(1),             /* INDIACTE ABEND RECURSION\n*                                       TO IKJEAT07                  */\n*    2 TJBEXTNT PTR(31),             /* POINTER TO TJB IN SWAPPED\n*                                       OUT JOB IMAGE                */\n*    2 TJBRCB   PTR(31),             /* POINTER TO RCB FOR THIS\n*                                       REGION                       */\n*    2 *        PTR(31),             /* RESERVED                     */\n*    2 TJBSPCT PTR(31),              /* PTR TO USER SPCT             */\n*    2 *    FIXED(15),               /* RESERVED                     */\n*    2 TJBRSTOR CHAR(1),             /* RESTORE FLAGS, TESTED BY RCT\n*                                       RESTORE                      */\n*     3 TJBOWP   BIT(1),             /* POST OUTPUT WAIT,SET BY\n*                                       TIOC,ENDS AN OWAIT           */\n*     3 TJBIWP   BIT(1),             /* POST INPUT WAIT,SET BY\n*                                       TIOC,ENDS AN IWAIT EQU       */\n*     3 *        BIT(1),             /* RESERVED                     */\n*     3 TJBLOGP  BIT(1),             /* POST LOGON,POST ECB WAITED\n*                                       ON BY LOGON IMAGE            */\n*     3 TJBLWAIT BIT(1),             /* USER IN LONG WAIT,SWAP OUT\n*                                       IF NOT MADE READY BY RESTORE\n*                                       PROCESSING EQU               */\n*     3 TJBDDRD  BIT(1),             /* WHEN ON RESTORE WILL RESET DDR\n*                                       NON DISPATCHABILITY BIT      */\n*     3 TJBFAT   BIT(1),             /* AN ATTN EXIT IS REQ FOR THIS\n*                                       USER                         */\n*     3 TJBDDRND BIT(1) ,            /* INDICATES TO RESTORE TO SET\n*                                       TCB NON DISPATCHABILE WHEN\n*                                       JOB SWAPPED IN               */\n*    2 *        CHAR(1),             /* RESERVED                     */\n*    2 TJBUSER  CHAR(8),             /* USERID OF THIS JOB\n*                                       OWNER,PADDED RT WITH BLANKS  */\n*    2 TJBIPPB  FIXED(31),           /* IPPB CHAIN OF ECB'S TO BE\n*                                       POSTED BY RESTORE            */\n*    2 TJBNEWID PTR(8),              /* RGN ID INTO WHICH THIS USER\n*                                       SHOULD BE LOGGED ON. 0 IF\n*                                       SELECTED BY DRIVER           */\n*    2 TJBFLUSL CHAR(1),             /* STAX LEV OF LAST STAX ISSUED\n*                                       WITH NOPURGE OPTION          */\n*    2 TJBTJID  FIXED(15),           /* TERMINAL JOB ID              */\n*    2 TJBMONI  CHAR(1),             /* MONITOR CMD INDICATING INFO\n*                                       REQUESTED                    */\n*     3 TJBMDSN  BIT(1),             /* DSNAMES                      */\n*     3 TJBMJBN  BIT(1),             /* JOBNAMES                     */\n*     3 TJBMSES  BIT(1),             /* SESSION                      */\n*     3 TJBMSPA  BIT(1),             /* SPACE                        */\n*     3 TJBMSTA  BIT(1),             /* STATUS                       */\n*     3 TJBGETBF BIT(1),             /* THIS BIT INDICATES TPUT SHOULD\n*                                       ATTEMPT TO GET ADDITIONAL\n*                                       BUFFERS FOR USER BEFORE GOING\n*                                       INTO A WAIT STATE            */\n*     3 *        BIT(1),             /* RESERVED                     */\n*     3 *        BIT(1),             /* RESERVED                     */\n*    2 TJBSTAT3 CHAR(1),             /* STATUS FLAGS                 */\n*     3 TJBDISC2 BIT(1),             /* TJB GOING TO DISCONNECT      */\n*     3 * BIT(1),                    /* RESERVED                     */\n*     3 TJBLOGTM BIT(1),             /* INDICATES TO LOGON THAT\n*                                       TERMINATION IS REQUESTED     */\n*     3 TJBOCPR BIT(1),              /* PREVENTS IKJVAT07 RECURSION  */\n*    2 TJBLINE  CHAR(2);             /* CONTAINS THE BINARY REP OF THE\n*                                       UNIT ADR OF LINE BEING USED  */\n./ ADD NAME=IKJTSCVT 0100-19106-19106-1238-00158-00158-00000-MZAP78  18\n*        %GOTO TSCVTBSL ; /*\n         MACRO\n         IKJTSCVT\n* LEVEL=21310000   SYSTEMS=AOS/2\nTSCVT    DSECT\nTSCVTTJB DS    A .      POINTER TO TJB TABLE\nTSCVTRCB DS    A .      POINTER TO RCB TABLE\nTSCVTRPT DS    A .      PTR TO REFERENCE POINTER TABLE\nTSCVTFLG DS    X .      FLAGS TO INDICATE FUNCT REQUESTED OF TSC\n         DS    X\nTSCSWPBG EQU   X'40' .  SWAP SHOULD BE STARTED\nTSCLOGON EQU   X'20' .  A LOGON IS TO BE PROCESSED\nTSCDISC  EQU   X'10' .  A DISCONNECT IS TO BE PROCESSED\nTSCVTTHR EQU   X'08' .  SYSTEM IS THRASHING\nTSCVTFL1 DS    X .      FLAGS TO INDICATE FUNCT REQUESTED OF TSC\n         DS    X\nTSCSSTOP EQU   X'80' .  SYSTEM STOP REQUESTED OR REQUIRED\nTSCRSTOP EQU   X'40' .  REGION STOP REQUESTED\nTSCASTOP EQU   X'20' .  ABEND-STOP TS FLG. SET BY TSO/RMS IF TCAM MCH'S\n*                       SET BY TCAM STAE EXIT IF TCAM ABENDS\nTSCTSTOP EQU   X'10'    RMS/MCH INTERFACE HAS STOPPED TSC\nTSCVTI04 DS    A .      ADDRESS OF ENTRY POINT - IKJVAI04\nTSCVTCUS DS    1H .     CURR NO. OF USERS LOGGED ON TSO\nTSCVTLUS DS    H .      CURRENT LIMIT NO. OF USERS LOGGED ON TO TSO\n*                       SET BY TSC\nTSCVTNTJ DS    1H .     NO.TJB-TSB'S ALLOC BY TSO INITIALLY\nTSCVTSZU DS    1H .     SIZE OF TJB\nTSCVTCTR DS    1H .     NO. OF RCB'S ALLOC BY TSO INITIALLY\nTSCVTMUS DS    H .      MAX NUMBER OF USERS LOGGED ON TO TSO\n*                       SET BY START AND MODIFY COMMANDS (TSC)\nTSCVTSAV DS    A .      PTR TO SAV AREA FOR TSC,TSIP&TS DISP\nTSCVTECB DS    A .      PTR TO TSECBTAB CTL BLK OF ECB'S\nTSCVTSIA DS    A .      PTR TO TSIA\nTSCVTICB DS    A .      PTR TO TSICB\nTSCVTI01 DS    A .      ADDRESS OF ENTRY POINT IKJEAI01 TSIP BR ENTRY\nTSCVTTQE DS    A .      PTR TO TQE FOR TSO'S TIME SLICING\nTSCVTI02 DS    A .      ADDRESS OF ENTRY POINT IKJEAI02 IN TS DISPATCH\nTSCVTI03 DS    A .      ADDRESS OF ENTRY POINT IKJEAI03 IN TS DISPATCH\nTSCVTD02 DS    A .      ADDRESS OF ENTRY POINT IKJEAD02 IN TS DRIVER\nTSCVTLCQ DS    A .      ADDR OF TOP ELEM ON LOGON COMM. QUE\nTSCVTTRB DS    A .      ADDR OF TRACE CTL BLK CHAIN\nTSCVTLPA DS    A .      ADDR OF 1ST CDE IN TS LINK PACK AREA\nTSCVTSLF DS    A .      ADDR OF SYSTEM INITIATED LOGOFF - IKJEAL00\nTSCVTTSC DS    A .      ADDR OF THE  TSC TASK'S TCB. (TSC)\nTSCVTSPL DS    A .      ADDRESS OF START PARAMETER LIST\nTSCVTRSZ DS    H .      MIN REGION SIZE FOR LOGON - SET TO ZERO\n         DS    CL2 .    RESERVED\nTSCVTSVT DS    CL4 .    SVCTBL ENTRY FOR TSIP PRIOR TO START TS\nTSCVTSVQ DS    CL4 .    SVCTBL ENTRY FOR QTIP PRIOR TO START TS\nTSCVTABN DS    A .      ADDR OF OUT-OF-CORE ABEND RTN(IKJEAT07)\nTSCVTD03 DS    A .      ADDR OF EP IKJEAD03 IN TS DRIVER\nTSCVTFLM DS    A .      ADDRESS OF ENTRY POINT - IKJEFLM\nTSCVTQTP DS    A .      ADDRESS OF ENTRY FOR QTIP SVC - IKJGGQT1\nTSCVTT08 DS    A .      ENTRY POINT ADDRESS OF IKJEAT08\nTSCVTDMP DS    A .      ADDRESS OF TSO DUMP CONTROL BLOCK-IKJTSDMP\nTSCVTT06 DS    A .      ADDRESS OF TCB FOR IKJEAT06\nTSCVTLS3 DS    A .      ADDRSS OF LOGON OUT OF CORE ABEND RTN\nTSCVTSMI DS    A .      ADDRESS OF SMITDSN CONTROL BLOCK\nTSCVTMSG DS    A .      BRANCH ENTRY POINT FOR IKJVAMSG\nTSCVTSCN DS    A .      BRANCH ENTRY POINT FOR IKJVASCN\nTSCVTR01 DS    A .      ADDRESS OF ENTRY POINT - IKJVAR01\n**/\n         MEND\n* %TSCVTBSL:  ;\n* DECLARE\n*   1 TSCVT    BASED(TSCVTPTR),\n*    2 TSCVTTJB PTR(31),             /* POINTER TO TJB TABLE         */\n*    2 TSCVTRCB PTR(31),             /* POINTER TO RCB TABLE         */\n*    2 TSCVTRPT PTR(31),             /* PTR TO REFERENCE POINTER\n*                                       TABLE                        */\n*    2 TSCVTFLG  CHAR(2),            /*  FLAGS TO INDICATE FUNCT\n*                                       REQUESTED OF TSC             */\n*     3 * BIT(1),                    /* SPARE                        */\n*     3 TSCSWPBG BIT(1),             /* SWAP SHOULD BE STARTED       */\n*     3 TSCLOGON BIT(1),             /* A LOGON IS TO BE PROCESSED   */\n*     3 TSCDISC  BIT(1),             /* A DISCONNECT IS TO BE\n*                                       PROCESSED BITS               */\n*     3 TSCVTTHR BIT(1),             /* SYSTEM IS THRASHING          */\n*    2 TSCVTFL1  CHAR(2),            /*  FLAGS TO INDICATE FUNCT\n*                                       REQUESTED OF TSC             */\n*     3 TSCSSTOP BIT(1),             /* SYSTEM STOP REQUESTED AND\n*                                       TSC IS STOPPING              */\n*     3 TSCRSTOP BIT(1),             /* REGION STOP REQUESTED        */\n*     3 TSCASTOP BIT(1),             /* ABEND-STOP TS FLG. SET BY\n*                                       TSO/RMS IF TCAM MCH'SSET BY\n*                                       TCAM STAE EXIT IF TCAM\n*                                       ABENDS  BITS                 */\n*     3 TSCTSTOP BIT(1),             /* RMS/MCH INTERFACE HAS STOPPED\n*                                       TSC                          */\n*     3 *        BIT(1),             /* RESERVED                     */\n*     3 *        BIT(1),             /* RESERVED                     */\n*     3 *        BIT(1),             /* RESERVED                     */\n*     3 *        BIT(1),             /* RESERVED                     */\n*    2 TSCVTI04 PTR(31),             /* ADDRESS OF IKJVAI04 IN TS\n*                                       DISPATCHER                   */\n*    2 TSCVTCUS FIXED(15),           /* CURR NO. OF USERS LOGGED ON\n*                                       TSO                          */\n*    2 TSCVTLUS FIXED(15),           /* CURRENT LIMIT NO. OF USERS\n*                                       LOGGED ON TO TSO SET BY TSC  */\n*    2 TSCVTNTJ FIXED(15),           /* NO.TJB-TSB'S ALLOC BY TSO\n*                                       INITIALLY                    */\n*    2 TSCVTSZU FIXED(15),           /* SIZE OF TJB                  */\n*    2 TSCVTCTR FIXED(15),           /* NO. OF RCB'S ALLOC BY TSO\n*                                       INITIALLY                    */\n*    2 TSCVTMUS FIXED(15),           /* MAX NUMBER OF USERS LOGGED\n*                                       ON TO TSO SET BY START AND\n*                                       MODIFY COMMANDS (TSC)        */\n*    2 TSCVTSAV PTR(31),             /* PTR TO SAV AREA FOR\n*                                       TSC,TSIP&TS DISP             */\n*    2 TSCVTECB PTR(31),             /* PTR TO TSECBTAB CTL BLK OF\n*                                       ECB'S                        */\n*    2 TSCVTSIA PTR(31),             /* PTR TO TSIA                  */\n*    2 TSCVTICB PTR(31),             /* PTR TO TSICB                 */\n*    2 TSCVTI01 PTR(31),             /* ADDRESS OF ENTRY POINT\n*                                       IKJEAI01 TSIP BR ENTRY       */\n*    2 TSCVTTQE PTR(31),             /* PTR TO TQE FOR TSO'S TIME\n*                                       SLICING                      */\n*    2 TSCVTI02 PTR(31),             /* ADDRESS OF ENTRY POINT\n*                                       IKJEAI02 IN TS DISPATCH      */\n*    2 TSCVTI03 PTR(31),             /* ADDRESS OF ENTRY POINT\n*                                       IKJEAI03 IN TS DISPATCH      */\n*    2 TSCVTD02 PTR(31),             /* ADDRESS OF ENTRY POINT\n*                                       IKJEAD02 IN TS DRIVER        */\n*    2 TSCVTLCQ PTR(31),             /* ADDR OF TOP ELEM ON LOGON\n*                                       COMM. QUE                    */\n*    2 TSCVTTRB PTR(31),             /* ADDR OF TRACE CTL BLK CHAIN  */\n*    2 TSCVTLPA PTR(31),             /* ADDR OF 1ST CDE IN TS LINK\n*                                       PACK AREA                    */\n*    2 TSCVTSLF FIXED(31),           /* SYSTEM INIATED LOGOFF        */\n*    2 TSCVTTSC PTR(31),             /* ADDR OF THE                  */\n*    2 TSCVTSPL PTR(31),             /* ADDRESS OF START PARAMETER\n*                                       LIST                         */\n*    2 TSCVTRSZ FIXED(15),           /* MIN REGION SIZE FOR LOGON    */\n*    2 *        CHAR(2),             /* RESERVED                     */\n*    2 TSCVTSVT CHAR(4),             /* SVCTBL ENTRY FOR TSIP PRIOR\n*                                       TO START TS                  */\n*    2 TSCVTSVQ CHAR(4),             /* SVCTBL ENTRY FOR QTIP PRIOR\n*                                       TO START TS                  */\n*    2 TSCVTABN PTR(31),             /* ADDR OF OUT-OF-CORE ABEND\n*                                       RTN(IKJEAT07)                */\n*    2 TSCVTD03 PTR(31),             /* ADDR OF EP IKJEAD03 IN TS\n*                                       DRIVER                       */\n*    2 TSCVTFLM PTR(31),             /* ADDR OF EP - IKJEFLM         */\n*    2 TSCVTQTP PTR(31),             /* ADDR OF EP OF QTIP SVC -\n*                                       IKJGGQT1                     */\n*    2 TSCVTT08 PTR(31),             /* ADDR OF EP - IKJEAT08        */\n*    2 TSCVTDMP PTR(31),             /* ADDR OF TSO DUMP CONTROL\n*                                        BLOCK - IKJTSDMP            */\n*    2 TSCVTT06 PTR(31),             /* ADDR OF TCB FOR IKJEAT06     */\n*    2 TSCVTLS3 PTR(31),             /* ADDR OF LOGON OUT OF CORE    */\n*    2 TSCVTSMI PTR(31),             /* ADDRESS OF SMITDSN CONTROL\n*                                       BLOCK                        */\n*    2 TSCVTMSG PTR(31),             /* BRANCH ENTRY POINT FOR IKJVAMSG\n*                                                                    */\n*    2 TSCVTSCN PTR(31),             /* BRANCH ENTRY POINT FOR IKJVASCN\n*                                                                    */\n*    2 TSCVTR01 PTR(31);             /* ADDRESS OF IKJVAR01.         */\n*\n./ ADD NAME=MODESET  0100-19106-19106-1238-00148-00148-00000-MZAP78  18\n         MACRO\n&NAME    MODESET &KEY=,&MODE=,&ENABLE=,&SYSMASK=,&REG=,&MF=\n         LCLA  &COUNT,&SAVE1,&SAVE2\n.* THE FOLLOWING ARE THE LOCAL SET SYMBOLS FOR THE 4 BYTE PARM LIST\n         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7\n         LCLB  &B8,&B9,&B10,&B11,&B12,&B13,&B14,&B15\n         LCLB  &B16,&B17,&B18,&B19,&B20,&B21,&B22,&B23\n         LCLB  &B24,&B25,&B26,&B27,&B28,&B29,&B30,&B31\n         LCLC  &A,&B\n         AIF  ((T'&KEY EQ 'O') AND (T'&MODE EQ 'O') AND (T'&ENABLE EQ 'X\n               O') AND (T'&SYSMASK EQ 'O') AND (T'&MF EQ 'O') AND (T'&RX\n               EG EQ 'O')).ERROR9\n         AIF   ('&REG' EQ '(1)').REG   REG PARAMETER SPECIFIED\n         AIF   (T'&REG NE 'O').ERROR1  WRONG REG SPECIFIED\n         AIF   ((T'&MF NE 'O') AND ('&MF' NE 'L')).MF\n         AIF   (T'&KEY EQ 'O').MDE     KEY NOT SPECIFIED\n         AIF   (('&KEY' NE 'ZERO') AND ('&KEY' NE 'NZERO')).ERROR2\n&B26     SETB  1\n&B27     SETB  ('&KEY' EQ 'ZERO')      SET 0 KEY IF ZERO SPECIFIED\n.MDE     ANOP\n         AIF   (T'&MODE EQ 'O').ENAB   MODE NOT SPECIFIED\n         AIF   (('&MODE' NE 'PROB') AND ('&MODE' NE 'SUP')).ERROR3\n&B29     SETB  1\n&B28     SETB  ('&MODE' EQ 'SUP')      INDICATE SUPV STATE IF SUP SPEC\n.ENAB    ANOP\n         AIF   (T'&ENABLE EQ 'O').SMSK ENABLE OPERAND NOT SPECIFIED\n         AIF   (('&ENABLE' NE 'YES') AND ('&ENABLE' NE 'NO')).ERROR4\n&B30     SETB  1\n&B31     SETB  ('&ENABLE' EQ 'NO')     INDICATE DISABLE IF REQUESTED\n.SMSK    ANOP\n         AIF   (T'&SYSMASK EQ 'O').MF  SYSMASK NOT SPECIFIED\n         AIF   ('&SYSMASK'(1,1) NE '(').ERROR5\n.AGAIN   ANOP\n&COUNT   SETA  &COUNT+1\n&B5      SETB  ('&SYSMASK(&COUNT)' EQ 'RELOC=YES')\n&B6      SETB  ('&SYSMASK(&COUNT)' EQ 'IO=YES')\n&B7      SETB  ('&SYSMASK(&COUNT)' EQ 'EXT=YES')\n&B13     SETB  ('&SYSMASK(&COUNT)' EQ 'RELOC=NO')\n&B14     SETB  ('&SYSMASK(&COUNT)' EQ 'IO=NO')\n&B15     SETB  ('&SYSMASK(&COUNT)' EQ 'EXT=NO')\n&SAVE1   SETA  &SAVE1+(&B5*4)+(&B6*2)+(&B7)\n&SAVE2   SETA  &SAVE2+(&B13*4)+(&B14*2)+(&B15)\n         AIF   (&B5+&B6+&B7+&B13+&B14+&B15 NE 1).ERROR5\n         AIF   (&COUNT NE N'&SYSMASK).AGAIN  WAS THAT THE LAST ONE?\n&B24     SETB  (&SAVE1 GT 0)\n&B25     SETB  (&SAVE2 GT 0)\n         AIF   (&B25).INVERT           INVERT THE AND MASK\n         AGO   .SET3\n.INVERT  ANOP\n&SAVE2   SETA  255-&SAVE2              INVERT THE AND MASK\n.SET3    ANOP\n&B5      SETB  (&SAVE1-4 GE 0)\n&SAVE1   SETA  (&SAVE1-(&B5*4))\n&B6      SETB  (&SAVE1-2 GE 0)\n&SAVE1   SETA  (&SAVE1-(&B6*2))\n&B7      SETB  (&SAVE1-1 GE 0)\n&SAVE1   SETA  (&SAVE1-&B6)\n&B8      SETB  (&SAVE2-128 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B8*128))\n&B9      SETB  (&SAVE2-64 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B9*64))\n&B10     SETB  (&SAVE2-32 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B10*32))\n&B11     SETB  (&SAVE2-16 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B11*16))\n&B12     SETB  (&SAVE2-8 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B12*8))\n&B13     SETB  (&SAVE2-4 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B13*4))\n&B14     SETB  (&SAVE2-2 GE 0)\n&SAVE2   SETA  (&SAVE2-(&B14*2))\n&B15     SETB  (&SAVE2-1 GE 0)\n.MF      ANOP\n         AIF   (T'&MF NE 'O').CK2      WAS MF OMITTED?\n         CNOP  0,4\n&NAME    BAL   1,*+8\n         AGO   .DC\n.CK2     ANOP\n         AIF   ('&MF' NE 'L').CK3      WAS MF=L SPECIFIED?\n&NAME    DS    0F\n.DC      ANOP\n         DC    B'&B0&B1&B2&B3&B4&B5&B6&B7&B8&B9&B10&B11&B12&B13&B14&B15X\n               &B16&B17&B18&B19&B20&B21&B22&B23&B24&B25&B26&B27&B28&B29X\n               &B30&B31'\n         AIF   (T'&MF EQ 'O').LD\n         MEXIT\n.LD      ANOP\n         L     1,0(1)\n         AGO   .SVC\n.CK3     ANOP\n         AIF   ('&MF(1)' EQ 'E').CK4\n         AGO   .ERROR6\n.CK4     ANOP\n         AIF  ((T'&KEY NE 'O') OR (T'&MODE NE 'O') OR (T'&ENABLE NE 'O'X\n               ) OR (T'&SYSMASK NE 'O') OR (T'&REG NE 'O')).ERROR8\n.CK6     AIF   ('&MF(2)' NE '(1)').CK5\n&NAME    L     1,0&MF(2)\n         AGO   .SVC\n.CK5     ANOP\n         AIF   ('&MF(2)'(1,1) EQ '(').ERROR1\n         AIF   (T'&MF(2) EQ 'N').ERROR1\n&NAME    L     1,&MF(2)\n         AGO   .SVC\n.REG     AIF  ((T'&KEY EQ 'O') AND (T'&MODE EQ 'O') AND (T'&ENABLE EQ 'X\n               O') AND (T'&SYSMASK EQ 'O') AND (T'&MF EQ 'O')).SVC1\n.* IF REG (1) SPECIFIED AND ALL OTHERS OMITTED, GENERATE SVC\n&A       SETC  'REG'\n         AGO   .M1\n.SVC1    ANOP\n&NAME    SVC   107\n         MEXIT\n.SVC     ANOP\n         SVC   107\n         MEXIT\n.ERROR1  ANOP\n&A       SETC  'REG'\n&B       SETC  '&REG'\n.M2      ANOP\n         MNOTE 12,'***  IHB002 INVALID &A SPECIFIED-&B'\n         MEXIT\n.ERROR2  ANOP\n&A       SETC  'KEY'\n&B       SETC  '&KEY'\n         AGO   .M2\n.ERROR3  ANOP\n&A       SETC  'MODE'\n&B       SETC  '&MODE'\n       AGO   .M2\n.ERROR4  ANOP\n&A       SETC  'ENABLE'\n&B       SETC  '&ENABLE'\n         AGO   .M2\n.ERROR5  ANOP\n&A       SETC  'SYSMASK'\n&B       SETC  '&SYSMASK(&COUNT)'\n         AGO   .M2\n.ERROR6  ANOP\n&A       SETC  'MF'\n&B       SETC  '&MF'\n         AGO   .M2\n.ERROR8  ANOP\n&A       SETC  'MF=E'\n.M1      ANOP\n         MNOTE 12,'***  IHB237 &A SPECIFIED WITH OTHER OPERAND(S).'\n         MEXIT\n.ERROR9  ANOP\n         MNOTE 12,'***  IHB004 REQUIRED OPERAND NOT SPECIFIED'\n         MEND\n./ ADD NAME=MZAPDBUG 0100-19106-19106-1238-00326-00326-00000-MZAP78  18\nMZAPDBUG TITLE 'MOREZAP DEBUG PROCESSOR - COPYRIGHT 1975 SHMUEL METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         SPACE 5\n         COPY  MZGBL\n         MZSET\n         PUNCH '         ALIAS MZAPDBUG'\n         TITLE 'MOREZAP DEBUG PROCESSOR'\n         MZHED 'MOREZAP DEBUG PROCESSOR'\nMZAPDBUG MZENT\n         OI    SW3,DUMPSW               IN CASE OF NOMON\n         L     R7,HEAD                  1ST V/R ENTRY\n         USING VRSECT,R7\n         OI    SW1,DMPSW                SET UP TITLE\n         BAL   R14,EJECT\n         MVC   HDATA,BLANKARD\n         MVC   HDATA(L'DBHED),DBHED\n         MZHEX HDATA+L'DBHED,SW1,2,BL=','\n         MZHEX HDATA+L'DBHED+3,SW2,2,BL=','\n         MZHEX HDATA+L'DBHED+6,SW3,2,BL=','\n         MZHEX HDATA+L'DBHED+9,SW4,2\n         EX    0,BLCARD\n         BAL   R14,PUTGOT\nINSECT   LA    R7,0(R7)                 HI BYTE OF ADDR TO 0\n         LTR   R7,R7                    END OF CHAIN?\n         BNZ   SWAT\nNADER    NI    SW1,255-DMPSW            SHUT OFF TITLE\n         NI    SW3,255-DUMPSW           NOMON NO LONGER RELEVANT\n         L     R12,PUTLOG\n         LA    R0,DUMMYVEC\n         CR    R0,R12\n         BE    SOF\n         L     R1,OFDCB(,R12)\n         MZSTA R1,SYSP\n         TRUNC (1)\n         BAL   R14,PUTGOT\n         LA    R0,255\n         BAL   R14,OFEJECT(,R12)\n*        CLOSE (SYSPRINT,LEAVE),TYPE=T  FORCE OUT BUFFERS AND SET\n*                                        \"SYSOUT DATA EXISTS\" IN TIOT\n         CLOSE MF=(E,SYSP),TYPE=T\nSOF      L     R15,AGRAIL\n         TM    SW2,LPASW\n         BO    BYBY\n         L     R15,AESP\n         TM    SW1,CSECTSW\n         BO    BYBY\n         L     R15,AHOVEL\n         TM    SW1,DBEFSW\n         BO    BYBY\n         L     R15,APATCH\n         TM    SW2,VEREPSW\n         BO    BYBY\n         L     R15,AHOVEL\n         TM    SW1,DAFTSW\n         BO    BYBY\n         L     R15,A#666\nBYBY     MZGO\n         SPACE 1\nSWAT     TM    SW1,DMPSW                USER UPTIGHT?\n         BZ    NADER                     YES - STOP DDT\n         LA    R0,3                     NEED 3 LINES,\n         CLI   VRTYPE,VRREP             VER/REP NEEDS 4\n         BNH   SWAT4\n         CLI   VRTYPE,VRNAME            NAME & DUMP ALSO NEED 4\n         BL    SWAT3\n         CLI   VRTYPE,VRDUMPT\n         BH    *+8\nSWAT4    LA    R0,4\nSWAT3    BAL   R14,RESERVE\n         EX    0,BLCARD\n         ST    R7,0(R13)\n         MZHEX IBUF,MZAPMAIN+1,6\n         MVC   DBTYPEL,=C'TYPE='\n         MZHEX DBTYPED,VRTYPE,2,BL=':'\n         SR    R1,R1\n         IC    R1,VRTYPE\n         SLL   R1,2\n         LA    R15,BTBL(R1)\n         AR    R1,R1\n         LA    R1,NTBL(R1)\n         MVC   DBTYPEN,0(R1)\n         MVC   DBNXTL,=C'NXT:'\n         MZHEX DBNXTD,VRNXT,6\n         MVC   DBLINEL,=C'LINE:'\n         LH    R0,VRLINE\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,15\n         UNPK  DBLINED,DOUBLE\n         MVC   DBLOCL,=C'LOC:'\n         MZHEX DBLOCD,VRLC,6\n         BR    R15\n         SPACE 1\nNTBL     DC    CL8'VER'\n         DC    CL8'REP'\n         DC    CL8'BASE'\n         DC    CL8'INDEX'\n         DC    CL8'HINDEX'\n         DC    CL8'NAME'\n         DC    CL8'DUMP'\n         DC    CL8'DUMPA'\n         DC    CL8'DUMPT'\n         DC    CL8'HDUMP'\n         DC    CL8'HDUMPA'\n         DC    CL8'HDUMPT'\n         DC    CL8'LIB'\n         DC    CL8'<- N *'\n         DC    CL8'MVC'\n         DC    CL8'<- N PTR'\n         DC    CL8'-> PTR'\n         DC    CL8'-> REF N'\n         SPACE 1\nBTBL     B     DEBVER                   VER\n         B     DEBVER                   REP\n         B     LIST1                    BASE\n         B     DEBIX                    INDEX\n         B     LIST1                    HINDEX\n         B     DEBNAME                  NAME\n         B     DEBNAME                  DUMP\n         B     DEBNAME                  DUMPA\n         B     DEBNAME                  DUMPT\n         B     DEBHDUMP                 HDUMP\n         B     DEBHDUMP                 HDUMPA\n         B     DEBHDUMP                 HDUMPT\n         B     LIB                      LIB\n         B     DEBSAVE                  <- N *    SAVE\n         B     DEBVER                   MVC\n         B     DEBPOINT                 <- N PTR  REFER\n         B     DEBPOINT                 -> PTR    POINT\n*        B     DEBSAVE                  -> REF N  UNSAVE\n         SPACE 2\nDEBSAVE  MVC   DBNDXL,=C'NDX:'\nDEBPOINT MVC   DBLENBL,=C'LENB:'\n         MZHEX DBLENBD,VRLENB,4\n         BAL   R14,PUTGOT\n         BAL   R9,ADDFLGS\n         MVC   DBIXBL,=C'IXB:'\n         MZHEX DBIXBD,VRIXB,4\n         MVC   DBPTRL,=C'PTR:'\n         B     DEBMVC+6\n         SPACE 1\nLIB      MVC   DBDCBL,=C'DCB:'\n         L     R1,VRDCB\n         MZLT  R1,VRDCB\n         USING IHADCB,R1\n         BZ    LIST1\n         MVC   DBDDNL,=C'DDNAME:'\n         MVC   DBDDND,DDNAME\n         DROP  R1\n*        B     LIST1\n         SPACE 1\nLIST1    BAL   R14,PUTGOT\n         EX    0,BLCARD\n         BAL   R14,ADDFLAG\n*        B     DEBOK\n         SPACE 1\nDEBOK    BAL   R14,PUTGOT\n         EX    0,BLCARD\n         BAL   R14,PUTGOT\n         L     R7,VRNEXT                GET NEXT V/R ENTRY, IF ANY\n         B     INSECT                   PRINT IT\n         SPACE 2\nADDFLAG  MVC   DBFLGL,=C'FLG:'\n         MZHEX DBFLGD,VRFLG,2\n         BR    R14\n         SPACE 1\nDEBVER   MVC   DBDATLNL,=C'DATLN: XX(DDD-1)'\n         MZHEX DBDATLND,VRDATLN,2,BL='('\n         SR    R1,R1\n         IC    R1,VRDATLN\n         LA    R1,1(R1)\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,15\n         UNPK  DBDATLNT,DOUBLE\n         BAL   R14,PUTGOT\n         BAL   R9,ADDFLGS\n         CLI   VRTYPE,VRMVC\n         BE    DEBMVC\n         BAL   R14,PUTGOT\n         EX    0,BLCARD\n         LA    R4,5\n         LA    R5,IBUF+75\n         LA    R6,DBFLGL\n         LA    R1,VRDAT\n         SR    R9,R9\n         IC    R9,VRDATLN\nMOREVER  UNPK  0(5,R6),0(3,R1)\n         TR    0(4,R6),HEXTAB-C'0'\n         MVI   4(R6),C','\n         SH    R9,=H'2'\n         BM    ENDVER\n         LA    R1,2(R1)\n         BXLE  R6,R4,MOREVER\n         B     DEBOK\nENDVER   MVI   4(R6),C' '\n         B     DEBOK\n         SPACE 1\nDEBMVC   MVC   DBDSTL,=C'DST:'\n         MZHEX DBDSTD,VRPTR+1,6\n         B     DEBOK\n         SPACE 1\nDEBIX    MVC   IBUF+61(7),=C'IXNAME:'\n         MVC   IBUF+69(8),VRIXNAME\n         B     LIST1\n         SPACE 1\nDEBNAME  MVC   DBLOCL,=C'BEG:'\n         MVC   DBNAMEL,=C'NAME:'\n         MVC   DBNAMED,VRNAM\n         CLI   VRNAM,C'.'               IS NAME NUC?\n         BNE   *+10                      NO\n         MVC   DBNAMED,NUCMEM            YES - SET IT TO NUCLEUS MEMBER\n         BAL   R14,PUTGOT\n         EX    0,BLCARD\n         MVC   DBCDEL,=C'CDE:'\n         MZHEX DBCDED,VRCDEPTR+1,6\n         MVC   DBSIZEL,=C'SIZ:'\n         MZHEX DBSIZED,VRSIZE,6\n         CLI   VRCSECT,0                IS THERE A CSECT NAME?\n         BE    *+16                      NO\n         MVC   DBCSECTL,=C'CSECT:'\n         MVC   DBCSECTD,VRCSECT\n         BAL   R14,ADDFLAG\n         MZLT  R1,VRDCBPT\n         BZ    DEBOK\n         BAL   R14,PUTGOT\n         EX    0,BLCARD\n         USING IHADCB,R1\n         MVC   DBSSIL,=C'SSI:'\n         MZHEX DBSSID,VRSSI,8\n         MVC   DBDCBPL,=C'DCB:'\n         MZHEX DBDCBPD,VRDCBPT+1,6\n         MVC   DBLBND,DDNAME\n         DROP  R1\n         B     DEBOK\n         SPACE 1\nDEBHDUMP MVC   DBLENL,=C'LEN:'\n         MZHEX DBLEND,VRLEN+1,6\n         BAL   R14,PUTGOT\n         BAL   R9,ADDFLGS\n         B     DEBOK\n         SPACE 2\nADDFLGS  EX    0,BLCARD\n         MVC   DBABSL,=C'ABS:'\n         MZHEX DBABSD,VRAB,6\n         EX    0,ADDFLAG\n         MZHEX DBFLGD,VRFLG,2,BL=','\n         MZHEX DBFLGD+3,VRVRFLG,2\n         BR    R9\n         SPACE 2\nSYSP     CLOSE (,LEAVE),MF=L\nDBHED    DC    C'MZPD01I VER/REP SNAP. SW='\nHEXTAB   DC    C'0123456789ABCDEF'\n         LTORG\n         PRINT NOGEN\n        MZWORK MAIN=YES\nMZAPMAIN DSECT\n         ORG   IBUF+7\nDBTYPEL  DS    C'TYPE='\nDBTYPED  DS    CL2,C': '\nDBTYPEN  DS    CL8,C\nDBNXTL   DS    C'NXT:',C\nDBNXTD   DS    CL6,C\nDBLINEL  DS    C'LINE:',C\nDBLINED  DS    CL5,C\nDBBEGL   DS    C'BEG:',C\nDBBEGD   DS    CL6,CL3\nDBNAMEL  DS    C'NAME:',C\nDBNAMED  DS    CL8\n         ORG   DBNXTL\nDBCDEL   DS    C'CDE:',C\nDBCDED   DS    CL6,CL2\nDBFLGL   DS    C'FLG:',C\nDBFLGD   DS    CL2,C',',CL2,C\nDBSIZEL  DS    C'SIZ:',C\nDBSIZED  DS    CL6,CL2\nDBCSECTL DS    C'CSECT:',C\nDBCSECTD DS    CL8\nDBSSIL   EQU   DBCDEL,3,C\nDBSSID   EQU   DBCDED,8,C\nDBDCBPL  EQU   DBSIZEL,3,C\nDBDCBPD  EQU   DBSIZED,6,C\nDBLBND   EQU   DBCSECTD,8,C\n         ORG   DBNXTL\nDBDSTL   DS    C'DST:',C\nDBDSTD   DS    CL6,CL2\n         ORG   DBNXTL\nDBPTRL   DS    C'PTR:',C\nDBPTRD   DS    CL6,CL2\n         ORG   DBBEGL\nDBLOCL   DS    C'LOC:',C\nDBLOCD   DS    CL6,C\nDBIXNAML DS    C'IXNAME:',C\nDBIXNAMD DS    CL8\n         ORG   DBBEGL\nDBNDXL   DS    C'NDX:',C\nDBNDXD   DS    CL6,CL3\nDBLENBL  DS    C'LENB:',C\nDBLENBD  DS    CL4\n         ORG   DBLENBL+1\nDBIXBL   DS    C'IXB:',C\nDBIXBD   DS    CL4\n         ORG   DBBEGD+7\nDBLENL   DS    C'LEN:',C\nDBLEND   DS    CL6\n         ORG   DBLOCL\nDBABSL   DS    C'ABS:',C\nDBABSD   DS    CL6\n         ORG   DBLENL\nDBDATLNL DS    C'DATLN: XX(DDD-1)'\n         ORG   *-9\nDBDATLND DS    CL2,C'('\nDBDATLNT DS    CL3,C'-1)'\n         ORG   DBLOCL\nDBDCBL   DS    C'DCB:',C\nDBDCBD   DS    CL6,C\nDBDDNL   DS    C'DDNAME:',C\nDBDDND   DS    CL8\n         END\n./ ADD NAME=MZAPHELP 0100-19106-19106-1238-00359-00359-00000-MZAP78  18\nMZAPHELP TITLE 'MOREZAP CONTROL CARD PROCESSOR - HELP - COPYRIGHT 1975 *\n               SHMUEL METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT 1972, 1975 SHMUEL (SEYMOUR J.) METZ.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZHLP MACRO - COPYRIGH*\n               T 1975 SHMUEL METZ'\n         MACRO\n         MZHLP &TXT\n         LCLA  &I,&L\n&L       SETA  K'&TXT(1)-1\n         AIF   ('&TXT(1)'(1,1) NE '''').WORD\n&L       SETA  &L-2\n&I       SETA  2\n.LOOP    AIF   ('&TXT(1)'(&I,2) NE '''''' AND                          *\n               '&TXT(1)'(&I,2) NE '&&&&').SINGLE\n&L       SETA  &L-1\n&I       SETA  &I+1\n.SINGLE  ANOP\n&I       SETA  &I+1\n         AIF   (&I LT K'&TXT(1)-1).LOOP\n         DC    AL1(&L),C&TXT(1)\n         MEXIT\n.WORD    DC    AL1(&L),C'&TXT(1)'\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - HELP - COPYRIGHT 1975 *\n               SHMUEL METZ'\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP CONTROL CARD PROCESSOR'\n         MZSHD 'HELP'\nMZAPHELP MZENT HELP\n         MVC   HDATA,BLANKARD\n         MVC   HDATA(7),=C'MZPH01I'\n         OI    SW1,DMPSW\n         OI    SW2,ATTNSW+PROMPTSW\n         LA    R4,IBUF+6                OPERAND 1\n         LA    R5,74                    LENGTH  1\n         LA    R6,HELPTAB               OPERAND 2(NOT USED AS SUCH)\n         L     R7,=X'40000000'          SP PAD AND OP 2 LEN=0\n         LA    R12,HELPTAB\n         NONBL NOGO=HELPALL\n         LA    R4,4(,R4)\n         SH    R5,H4\n         NONBL NOGO=HELPALL\n         SR    R7,R7\nHELPOP   IC    R7,2(,R12)               GET OPCODE LEN-1\n         EX    R7,CLCHELP\n         BE    HELPOP1\n         LH    R0,0(,R12)               GET OFFSET TO NEXT OPCODE\n         AR    R12,R0\n         LTR   R0,R0\n         BNZ   HELPOP\n         EX    0,BLCARD\n         MZMVC 'MZPH04I INVALID OPCODE - HELP ALL FORCED'\n         BAL   R14,PUTGOT\n*        B     HELPALL\n         SPACE 1\nHELPALL  MVC   HDATA+8(3),=C'ALL'\n         EX    0,BLCARD\n         MZMVC 'MZPH02I USE HELP <CMD> FOR OPERANDS OF <CMD>'\n         BAL   R14,PUTGOT\n         LA    R12,HELPTAB              RE-INIT IN CASE OF INV HELP CMD\nHELPALL1 EX    0,BLCARD\n         MZMVC 'MZPH03I OPCODE'\n         IC    R7,2(,R12)               GET OPCODE LEN-1\n         EX    R7,MVCHELP\n         BAL   R14,PUTHELP\n         LH    R0,0(,R12)               GET OFFSET TO NEXT OPCODE\n         AR    R12,R0\n         LTR   R0,R0\n         BNZ   HELPALL1\nENDHELP  NI    SW1,255-DMPSW\n         L     R13,4(,R13)\n         LM    R14,R12,12(R13)\n         L     R15,ACORN-MZAPMAIN(,R10)\n         BR    R15\n         SPACE 1\nSETHELP  MVC   HDATA+8(0),3(R12)\nSETHELP1 MVC   IBUF+16(0),5(R12)\nCLCHELP  CLC   0(,R4),3(R12)\nMVCHELP  MVC   IBUF+15(0),3(R12)\n         SPACE 2\nHELPOP1  EX    R7,SETHELP\n         AR    R12,R7\nHELPOP3  CLI   4(R12),X'FF'             LAST MZHLP MACRO?\n         BE    ENDHELP\n         EX    0,BLCARD\n         MZMVC 'MZPH05I OPERAND'\n         IC    R7,4(,R12)               GET MZHLP LEN-1\n         EX    R7,SETHELP1\n         BAL   R14,PUTHELP\n         LA    R12,2(R7,R12)\n         B     HELPOP3\nPUTHELP  TM    SW1,DMPSW                OPERATOR TIRED?\n         BZ    ENDHELP                   YES\n         B     PUTGOT\n         LTORG\n         EJECT\nHELPTAB  MZOP  KEY\n         MZHLP '<NULL>'\n         MZHLP '\"ASK THE MAN WHO OWNS ONE\"'\n         DC    X'FF'\n         SPACE 1\n         MZOP  DEBUG\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  END\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  GO\n         MZHLP '<NULL>'\n         MZHLP ' ONLY VALID FROM CRT OR CONSOLE'\n         DC    X'FF'\n         SPACE 1\n         MZOP  RESET\n         MZHLP '<NULL>'\n         MZHLP EOD\n         DC    X'FF'\n         SPACE 1\n         MZOP  NAME\n         MZHLP .\n         MZHLP '.<CSECT>'\n         MZHLP '<NAME>'\n         MZHLP '<NAME> <CSECT>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  CVT\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  GOVRFLB\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  HCT\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  IBMORG\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  MSER\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  PATCH\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  QMRES\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  SCVT\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  SMCA\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  TACT\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  TSCVT\n         MZHLP '<NULL>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  UCB\n         MZHLP '<CUU>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  UCM\n         MZHLP BASE\n         MZHLP HARDCOPY\n         MZHLP MASTER\n         MZHLP MCS\n         MZHLP PREFIX\n         MZHLP 'ID=<DEC UCMID>'\n         MZHLP 'UNIT=<CUU>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  USERORG\n         MZHLP <NULL>\n         DC    X'FF'\n         SPACE 1\n         MZOP  <-\n         MZHLP '<HEX REF DIGIT> *'\n         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>'\n         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>-<PFX>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  SETPTR\n         MZHLP '<HEX REF DIGIT> *'\n         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>'\n         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>-<PFX>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  ->\n         MZHLP 'REF <HEX REF DIGIT>'\n         MZHLP '<PTR DISPLACEMENT> <LENGTH>'\n         MZHLP '<PTR DISPLACEMENT> <LENGTH>-<PFX>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  POINT\n         MZHLP 'REF <HEX REF DIGIT>'\n         MZHLP '<PTR DISPLACEMENT> <LENGTH>'\n         MZHLP '<PTR DISPLACEMENT> <LENGTH>-<PFX>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  BASE\n         MZHLP '<HEX BASE>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  INDEX\n         MZHLP '<CSECT>'\n         MZHLP '<ENTRY POINT>'\n         MZHLP '=<REL HEX DISPLACEMENT>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  LIB\n         MZHLP AUTO\n         MZHLP '<DDNAME>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  VERIFY\n         MZHLP '<REL HEX LOCATION> <VERIFICATION DATA>'\n         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'\n         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'\n         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'\n         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'\n         MZHLP '  DATA MAY BE A CHARACTER STRING,'\n         MZHLP '   DELIMITED BY APOSTROPHES,'\n         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'\n         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'\n         MZHLP '   VERIFY -06 0065''201 '''\n         DC    X'FF'\n         SPACE 1\n         MZOP  VER\n         MZHLP '<REL HEX LOCATION> <VERIFICATION DATA>'\n         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'\n         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'\n         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'\n         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'\n         MZHLP '  DATA MAY BE A CHARACTER STRING,'\n         MZHLP '   DELIMITED BY APOSTROPHES,'\n         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'\n         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'\n         MZHLP '   VER -06 0065''201 '''\n         DC    X'FF'\n         SPACE 1\n         MZOP  V\n         MZHLP '<REL HEX LOCATION> <VERIFICATION DATA>'\n         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'\n         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'\n         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'\n         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'\n         MZHLP '  DATA MAY BE A CHARACTER STRING,'\n         MZHLP '   DELIMITED BY APOSTROPHES,'\n         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'\n         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'\n         MZHLP '   V -06 0065''201 '''\n         DC    X'FF'\n         SPACE 1\n         MZOP  REPLACE\n         MZHLP '<REL HEX LOCATION> <REPLACEMENT DATA>'\n         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'\n         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'\n         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'\n         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'\n         MZHLP '  DATA MAY BE A CHARACTER STRING,'\n         MZHLP '   DELIMITED BY APOSTROPHES,'\n         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'\n         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'\n         MZHLP '   REPLACE -06 0065''201 '''\n         DC    X'FF'\n         SPACE 1\n         MZOP  REP\n         MZHLP '<REL HEX LOCATION> <REPLACEMENT DATA>'\n         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'\n         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'\n         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'\n         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'\n         MZHLP '  DATA MAY BE A CHARACTER STRING,'\n         MZHLP '   DELIMITED BY APOSTROPHES,'\n         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'\n         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'\n         MZHLP '   REP -06 0065''201 '''\n         DC    X'FF'\n         SPACE 1\n         MZOP  R\n         MZHLP '<REL HEX LOCATION> <REPLACEMENT DATA>'\n         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'\n         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'\n         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'\n         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'\n         MZHLP '  DATA MAY BE A CHARACTER STRING,'\n         MZHLP '   DELIMITED BY APOSTROPHES,'\n         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'\n         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'\n         MZHLP '   R -06 0065''201 '''\n         DC    X'FF'\n         SPACE 1\n         MZOP  CONSOLE\n         MZHLP '<NULL>'\n         MZHLP 'UNIT=<CUU>'\n         MZHLP 'L=<DEC ID>'\n         MZHLP 'L=<DEC ID><AREA ID>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  DUMP\n         MZHLP .\n         MZHLP '.<CSECT>'\n         MZHLP '<NAME>'\n         MZHLP '<NAME> <CSECT>'\n         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  DUMPB\n         MZHLP .\n         MZHLP '.<CSECT>'\n         MZHLP '<NAME>'\n         MZHLP '<NAME> <CSECT>'\n         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  DUMPA\n         MZHLP .\n         MZHLP '.<CSECT>'\n         MZHLP '<NAME>'\n         MZHLP '<NAME> <CSECT>'\n         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'\n         DC    X'FF'\n         SPACE 1\n         MZOP  DUMPT,NEXT=*\n         MZHLP .\n         MZHLP '.<CSECT>'\n         MZHLP '<NAME>'\n         MZHLP '<NAME> <CSECT>'\n         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'\n         DC    X'FF'\n         SPACE 1\n         LTORG\n        MZWORK MAIN=YES,GEN=NOGEN\n         END\n./ ADD NAME=MZAPMAIN 0100-19106-19106-1238-00382-00382-00000-MZAP78  18\n         MACRO\n&L    MZAPMAIN &TYPE=DSECT,&GEN=NOGEN\n         COPY  MZGBL\n         LCLC  &DC\n         PUSH  PRINT\n         AIF   ('&GEN' EQ 'NOGEN').NOHED1\n         MZSHD 'MZAPMAIN - REGISTER DEFINITIONS'\n.NOHED1  PRINT &GEN\n         MZSET\n         LCLC  &MZPMAIN\n&MZPMAIN SETC  '&L'\n         AIF   (T'&L NE 'O').LOK\n&MZPMAIN SETC  'MZAPMAIN'\n         MNOTE 4,'LABEL OMITTED - ''MZAPMAIN'' ASSUMED'\n.LOK     AIF   ('&TYPE' EQ 'C' OR '&TYPE' EQ 'CSECT').C\n         AIF   ('&TYPE' EQ 'D' OR '&TYPE' EQ 'DSECT').D\n         MNOTE 8,'&&TYPE IS NEITHER CSECT NOR DSECT - DSECT ASSUMED'\n.D       ANOP\n&MZPMAIN DSECT\n&DC      SETC  'DS'\n         AGO   .NOC\n.C       ANOP\n&MZPMAIN CSECT\n&DC      SETC  'DC'\n.NOC     ANOP\n*        REG   USE\n         SPACE 1\nR0       EQU   0                        SCRATCH\n*                             PATCH     ABS V|R END = LOC+LEN-1\n         SPACE 1\nR1       EQU   1                        SCRATCH/PARAM\n*                                       TRT ARGUEMENT PTR\n*                             PATCH     ABS V|R LOC\n         SPACE 1\nR2       EQU   2                        PRESERVED ACROSS GET/PUT\n*                             INIT2     DCB COUNTER\n*                                       TRT FUNCTION BYTE\n*                                       MFT INITIALIZATION COUNTER\n         SPACE 1\nR3       EQU   3                        CVT\n         SPACE 1\nR4       EQU   4              INIT2     TIOT SCAN POINTER\n*                                       MFT INITIALIZATION TABLE\n*                             GETCC     SCAN PTR\n*                             DEBUG     INCREMENT OF 5 FOR V/R DATA\n*                             GETESD    REMAINING ESD BYTES\n*                             DUMP      DEST FOR OPCODE\n*                                       SCRATCH\n*                             PATCH     V|R ENTRY\n         SPACE 1\nR5       EQU   5              INIT2     DCB LIST POINTER\n*                             INIT2     OPEN LIST POINTER\n*                             GETCC     SCAN LEN\n*                             DEBUG     COMPARAND OF IBUF+75 FOR V/R\n*                             GETESD    CESD BUFFER\n*                             DUMP      SCRATCH\n*                             PATCH     V|R IC REG\n         SPACE 1\nR6       EQU   6              INIT2     DCB POINTER\n*                             GETCC     TABLE PTR\n*                             DEBUG     CURRENT V/R MSG POINTER\n*                             GETESD    DCB\n*                             DUMP      SCRATCH\n*                             PATCH     ABS MODULE/CSECT LOC\n         SPACE 1\nR7       EQU   7              DEBUG     V/R TABLE POINTER\n*                             GETCC     PAD CHAR\n*                             GETCDE    DCB\n*                             GETESD    VRNAME ENTRY\n*                             DUMP      V/R TABLE POINTER\n*                             DUMPOP    OPTAB POINTER\n*                             PATCH     ABS MODULE/CSECT END+1=LOC+LEN\n*                             PATCH     ALTERNATE VR ENTRY POINTER\n         SPACE 1\nR8       EQU   8                        CSCB POINTER\n*                             GETCC     INTERNAL SUBROUTINE RETURN\n*                             GETCDE    VRDCB\n*                             DUMP      INCREMENT FOR LOOP\n*                             MZUNREST  INTERNAL SUBROUTINE RETURN\n         SPACE 1\nR9       EQU   9                        RETURN FROM INTERNAL SUB\n*                             INIT2     TCB POINTER\n*                             GETESD    VRENTRY FOR CURRENT VRNAME\n*                             PATCH     NAM ENTRY\n*                             GETESD    ESD TABLE POINTER FOR SCTR\n         SPACE 1\nR10      EQU   10                       TEMP MAIN BASE\n         SPACE 1\nR11      EQU   11                       SUB BASE\n         SPACE 1\nR12      EQU   12                       PRESERVED ACROSS GET/PUT\n         SPACE 1\nR13      EQU   13                       SSA AND MAIN BASE\n         SPACE 1\nR14      EQU   14                       RETURN\n*                             PATCH     INDEX-BASE\n         SPACE 1\nR15      EQU   15                       CALL\n*                                       KEY SWITCH\n         AIF   ('&GEN' EQ 'NOGEN').NOHED2\n         MZSHD 'MZAPMAIN - PUT LOGIC'\n.NOHED2  USING *,R10\n         DC    18F'0'\n         USING *,R15\nMOREZAP  B     MZEPMAIN\n         DC    AL1(25),CL25'MOREZAP - &SYSDATE &SYSTIME'\nMZEPMAIN STM   R14,R12,12(R13)\n         L     R10,=A(&MZPMAIN)\n         DROP  R15\n         LA    R3,SAVE\n         ST    R3,8(R13)\nH8       EQU   *-2,2,H\n         ST    R13,4(R3)\nH4       EQU   *-2,2,H\n         LR    R13,R3\n         L     R15,AINIT1\n         BALR  R14,R15\n         L     R15,AINIT2\nKITCHEN  SYNCH (15)\n         BR    R15\n         SPACE 2\nHITKADEM NOP   0                        HOOK FOR DEBUG\n         NOPR  0\n         L     R15,8(,R12)\n         BR    R15\n         EJECT\n         DROP\n         USING &MZPMAIN,R13\n         USING CVT,R3\n*              ALL I/O MODULES START WITH A TRANSFER VECTOR:\n         SPACE 1\nOFNAME   EQU   X'00'                    MODULE NAME\nOFDCB    EQU   X'08'                    ->DCB\nOFPUT    EQU   X'0C'                    PUT\nOFEJECT  EQU   X'10'                    RESERVE SPACE ON PAGE\nOFGET    EQU   X'14'                    GET\nOFATTN   EQU   X'18'                    TEST FOR ATTENTION\nOFINIT   EQU   X'1C'                    INFO FOR INITIALIZATION\n         SPACE 3\nPUTGOT   MVC   ODATA,IBUF\nPUTLINE  STM   R0,R15,SAVEPUT\n         TR    ODATA,TRTABLE\nPUTENTRY L     R12,PUTLOG\n         BAL   R14,OFPUT(,R12)\nNOLOG    L     R12,PUTMON\nCRTSW    BAL   R14,OFPUT(,R12)\nNOCRT    L     R12,PUTCON\nCONSW    BAL   R14,OFPUT(,R12)\nENDPUT   NI    SW2,255-ATTNSW-PROMPTSW  CLEAR ATTN SWITCHES\nBLNKODTA MVC   ODATA,BLANKARD\n         LM    R0,R15,SAVEPUT\n         BR    R14\n         SPACE 2\nEJECT    LA    R0,255\nRESERVE  STM   R0,R15,SAVEPUT\n         L     R12,PUTLOG\n         BAL   R14,OFEJECT(,R12)\n         L     R12,PUTMON\n         BAL   R14,OFEJECT(,R12)\n         L     R12,PUTCON\n         BAL   R14,OFEJECT(,R12)\n         B     ENDPUT\n         SPACE 2\nABDUMP   ABEND 122,DUMP\n         MZSHD 'MZAPMAIN - ATTENTION ROUTINES'\nOFFMON   OI    SW3,NOMONSW\n         B     PUTENTRY\n         SPACE 1\nSETMON   NI    SW3,255-NOMONSW\n         B     PUTENTRY\n         SPACE 1\nOFFDUMP  NI    SW1,255-DMPSW\n         B     PUTENTRY\n         SPACE 1\nSETHOLD  OI    SW2,HOLDSW               SET LOCK PAGE MODE\n         B     PUTENTRY\n         SPACE 1\nOFFHOLD  NI    SW2,255-HOLDSW           SET AUTO WRITE MODE\n         B     PUTENTRY\n         SPACE 1\nONCON    MVI   GETSW+1,0\n         MVI   CONSW+3,OFPUT\n         B     PUTENTRY\n         AIF   ('&GEN' EQ 'NOGEN').NOHED3\n         MZSHD 'MZAPMAIN - SWITCHES'\n.NOHED3  ANOP\nPUTLOG   DC    A(DUMMYVEC)              PUT ROUTINE FOR SYSPRINT\nPUTMON   DC    A(DUMMYVEC)              PUT ROUTINE FOR 2260/3270\nPUTCON   DC    A(DUMMYVEC)              PUT ROUTINE FOR TSO/OPERATOR\nDUMMYVEC EQU   *-8                      ALLOW FOR NAME\n         DC    A(0)                     NO DCB\n         BR    R14                      PUT\nLINENO   DC    H'0'\n         BR    R14                      EJECT\nHWUCMID  DC    H'0'\nMYUCMID  EQU   *-1\n         BR    R14                      GET\n         DS    H\n         BR    R14                      TEST ATTENTION\nSW1      DC    AL1(DMPSW)\nDMPSW    EQU   X'80'                    DUMP MAY CONTINUE\nDBEFSW   EQU   X'40'                    DUMP BEFORE EXISTS\nDAFTSW   EQU   X'20'                    DUMP AFTER EXISTS\nDEBUGSW  EQU   X'10'\nNOTNUC   EQU   X'08'                    MISSING OR INVALID SYSNUC\n*              MUST BE SYSRES PACK, DSN=SYS1.NUCLEUS(IEANUC0X)\nCSECTSW  EQU   X'04'                    ESD READ REQUIRED\nKEYSW    EQU   X'02'\nNOGO     EQU   X'01'\n         SPACE 1\nSW2      DC    X'0'\nEOD      EQU   X'80'\nVEREPSW  EQU   X'40'                    VER/REP OVERLAY REQUIRED\nLPASW    EQU   X'20'                    CDE SEARCH OVERLAY REQUIRED\nNAMESW   EQU   X'10'                    IN RANGE OF NAME\nCRTERRSW EQU   X'08'                    I/O ERROR ON LAST CRT OP\nATTNSW   EQU   X'04'                    RESPONSE TO ATTN MSG\nPROMPTSW EQU   X'02'                    $HELP MESSAGE REQUIRED\nHOLDSW   EQU   X'01'                    ENTER REQ'D AFTER EACH WRITE\n         SPACE 1\nSW3      DC    X'00'\nGANAVSW  EQU   X'80' .                  INVALID CPU\nPUNCHSW  EQU   X'40' .                  PUNCH SUCESSFUL ZAPS\nNOMONSW  EQU   X'20'                    DO NOT WRITE DUMP TO CRT\nDUMPSW   EQU   X'10'                    DUMP, NOT HELP\nTSOSW    EQU   X'08'                    TSO\nTS2260SW EQU   X'04'                    TSO - TERMINAL IS 2260\nTS3270SW EQU   X'02'                    TSO - TERMINAL IS 3270\nTSOCRTSW EQU   TS2260SW+TS3270SW        TSO - TERMINAL IS CRT\n         SPACE 1\nSW4      DC    X'00'\nPREPASSW EQU   X'80'                    VR CONTROL BLOCKS ARE\n*                                          INTERNALLY GENERATED\nJOBACTSW EQU   X'40'                    JOB NAME SPECIFIED\n         AIF   ('&GEN' EQ 'NOGEN').NOHED4\n         MZSHD 'MZAPMAIN - GET LOGIC'\n.NOHED4  ANOP\nGETLINE  MVC   IBUF,BLANKARD\nBLCARD   EQU   GETLINE\n         STM   R0,R15,SAVEGET\n         LH    R1,LINENO\n         LA    R1,1(,R1)\n         STH   R1,LINENO\n         CVD   R1,DOUBLE\n         OI    DOUBLE+7,X'0F'\n         UNPK  IBUF(5),DOUBLE\n         SPACE 1\nGETSW    NOP   GETQSAM                  SET TO NOP BY CONSOLE OPTION\n         L     R12,PUTMON\n         BAL   R14,OFGET(,R12)\n         L     R12,PUTCON\n         BAL   R14,OFGET(,R12)\n         SPACE 2\nGETQSAM  GET   SYSIN\n         MVC   IBUF+6(74),0(R1)\nGETUC    OC    IBUF,BLANKARD\nENDGET   LM    R0,R15,SAVEGET\n         BR    R14\n         SPACE 1\nALDUN    OI    SW2,EOD\n         MVC   IBUF+6(5),=C'RESET'\n         B     ENDGET\nZAPSPACE DC    8C'ZAPSPACE'\n         AIF   ('&GEN' EQ 'NOGEN').NOHED5\n         MZSHD 'MZAPMAIN - TRANSFER VECTOR'\n.NOHED5  ANOP\nVINIT1   DC    CL8'INIT1'\nAINIT1   &DC   V(INIT1)\nVINIT2   DC    CL8'INIT2'\nAINIT2   &DC   V(INIT2)\nVREAD    DC    CL8'MZAPCC'              CONTROL CARD READ\nACORN    &DC   V(MZAPCC)                CONTROL CARD READ\nVHELP    DC    CL8'MZAPHELP'            HELP\nAHELP    &DC   V(MZAPHELP)\nVDDT     DC    CL8'MZAPDBUG'            DEBUG\nADDT     &DC   V(MZAPDBUG)              DEBUG\nVLPA     DC    CL8'MZAPCDE'             LPA SEARCH\nAGRAIL   &DC   V(MZAPCDE)               LPA SEARCH\nVLOOKUP  DC    CL8'MZAPESD'             LOAD MODULE PROCESSING\nAESP     &DC   V(MZAPESD)\nVHOVEL   DC    CL8'MZAPDUMP'\nAHOVEL   &DC   V(MZAPDUMP)\nVPATCH   DC    CL8'MZAPATCH'\nAPATCH   &DC   V(MZAPATCH)\nVSOF     DC    CL8'MZUNREST'            TERMINATION\nA#666    &DC   V(MZUNREST)              UNRESET\n         AIF   ('&GEN' EQ 'NOGEN').NOHED6\n         MZSHD 'MZAPMAIN - MISCELLANEOUS'\n.NOHED6  ANOP\nDOUBLE   DS    0D\nCPUID    DC    XL4'&CPUID',XL2'&MDL',XL2'0'\nTIME     DS    F\nDATE     DS    F\nNUCMEM   DC    C'IEANUC01'\nREF      DC    A(0)\nREFLEN   DC    H'0'\nREFIX    DC    H'0'\n         DC    15XL8'0'\n         AIF   ('&SYS' NE 'OS/MFT' AND '&SYS' NE 'VS1').NOTMFT\nIEAARAM4 DC    A(0)                     LPA\nIEAARSV1 DC    A(0)                     RSVC\nIEAAERP  DC    A(0)                     RERP\n         AGO   .NOTTSO\n.NOTMFT  ANOP\nTSLPA    DC    A(0)\n.NOTTSO  SPACE 1\n*              THESE FIELDS ARE IN SUPPORT OF JOB CDE CHAINS,\n*              FOR ASHER YUVAL AND HIS MERRY MEN.\nJOBNAME  DC    CL8' '                   PROCNAME IF STARTED TASK\nJOBID    DC    CL8' '                   TASKID   IF STARTED TASK\nJOBSTEP  DC    CL8' '                   JOBSTEP TCB\nJPAQ     DC    A(0)\n         SPACE 1\nLNAD     DC    C'0\u00a2'\nBLANKARD DC    CL80' '\n         SPACE 1\nIBUF     DS    CL80\n         SPACE 1\nSAVE     DC    3A(0)\nSAVER14  DC    A(0)\nSAVER15  DC    A(0)\nSAVER0   DC    A(0)\nSAVER1   DC    A(0)\nSAVER2   DC    A(0)\nSAVER3   DC    A(0)\nSAVER4   DC    A(0)\nSAVER5   DC    A(0)\nSAVER6   DC    A(0)\nSAVER7   DC    A(0)\nSAVER8   DC    A(0)\nSAVER9   DC    A(0)\nSAVER10  DC    A(0)\nSAVER11  DC    A(0)\nSAVER12  DC    A(0)\n         SPACE 1\nSAVEPUT  DS    16F\nSAVEGET  DS    16F\n         SPACE 1\nSCRMBL   DC    F'0'\n         SPACE 1\nHLEN     DC    Y(85,0),C' '\nHDATA    DC    CL80'MZP100I MOREZAP VERSION &SYSDATE &SYSTIME STARTING'\n         SPACE 1\nOLEN     DC    Y(85,0)\nOCC      DC    C'-'\nODATA    DC    CL80' '\n         ORG   ODATA\nODWORD   DS    F\n         ORG\nTRTABLE  DS    CL256\n         SPACE 5\nHEAD     DC    A(0)                     VER/REP CHAIN\nTAIL     DC    A(0)                     CONTIGUOUS WITH HEAD\nHIGHRC   DC    F'0'\n*        10    BAD NUCLEUS SPECIFICATION\n*        08    ERROR IN LOAD MODULE FORMAT\n*        04    VERIFY FAILURE\n*              SYNTAX ERROR\n*              VER/REP OUT OF RANGE\n*              ETC.\n         AIF   ('&GEN' EQ 'NOGEN').NOHED8\n         MZSHD 'MZAPMAIN - LITERALS'\n.NOHED8  LTORG\n         AIF   ('&GEN' EQ 'NOGEN').NOHED9\n         MZSHD 'SKELETON DCB, ETC FOR REQUIRED DS''S'\n.NOHED9  ANOP\nSVC      DC    A(0)\nLINK     DC    A(0)\n         AIF   (NOT &MVT).NOCMDL\nCMDL     DC    A(0)\n.NOCMDL  AIF   (NOT &VS2 AND NOT (&MVT AND &MZUPC)).NOLPAL\nLPAL     DC    A(0)\n.NOLPAL  ANOP\nPNCH     DC    A(0)\nSYSNUC   DCB   DSORG=PO,MACRF=R,DDNAME=SYSNUC\n         DC    CL8'SYSNUC'\n         DC    A(0)\nNULEN    EQU   *-SYSNUC\nSYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),RECFM=FB,LRECL=80,     *\n               EODAD=ALDUN\n         POP   PRINT\n         MEND\n./ ADD NAME=MZAP1    0100-19106-19106-1238-00779-00779-00000-MZAP78  18\nMZAP     TITLE 'METZ''S OWN RELIABLE EXTENDED ZAP - COPYRIGHT S. METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         SPACE 5\n*              THIS PROGRAM IS INTENDED TO REPLACE COREZAP,\n*              AND WILL ACCEPT MOST VALID CONTROL CARDS FROM IBM'S ZAP.\n         SPACE 1\n*              MY SYNTAX IS:\n         SPACE 2\n*        KEY   <TODAYS MAGIC #>\n         SPACE 1\n*        NAME  <PGM-NAME>\n*        BLDL  <NAME>\n*        CDE   <NAME>\n*        CVT\n*        GOVRFLB\n*        HCT\n*        IBMORG\n*        MSER\n*        PATCH\n*        QMRES\n*        SCVT\n*        SMCA\n*        TACT\n*        TCB   <JOBNAME>                NOT YET IMPLIMENTED\n*        TCB   <JOBNAME>.<STEPNAME>     NOT YET IMLIMENTED\n*        TCB   <TASKID>                 NOT YET IMLIMENTED\n*        TCB   <PROCNAME>.<TASKID>      NOT YET IMLIMENTED\n*        TSCVT\n*        UCB   <CUU>\n*        UCB  =<CUU>\n*        UCM   BASE\n*        UCM   HARDCOPY\n*        UCM   MASTER\n*        UCM   MCS\n*        UCM   PREFIX\n*        UCM   ID=<DEC-UCMID>\n*        UCM   UNIT=<CUU>\n*        USERORG\n         SPACE 1\n*        BASE  <HEX-BASE>\n*        BASE =<HEX-BASE>\n*              USED TO SUPPLY A DECREMENT, NORMALLY FROM THE ASM\n*              LISTING.\n         SPACE 1\n*        INDEX=<HEX-INDEX>\n*              USED TO SUPPLY AN INCREMENT, NORMALLY THE LINK-EDITED\n*              DISPLACEMENT. CSECT FORM REQUIRES DD FOR LIB.\n         SPACE 1\n*        INDEX <CSECT>\n*              THE COMBINATION\n*                                       NAME  <MOD> <CSECT1>\n*                                       INDEX <CSECT2>\n*              IS EQUIVALENT TO\n*                                       NAME  <MOD> <CSECT1>\n*                                       INDEX <HEX CSECT2-MOD>\n*              OR TO\n*                                       NAME  <MOD> <CSECT1>\n*                                       BASE  <HEX CSECT1-CSECT2>\n*              THE CSECT FORM OF INDEX SHOULD BE USED WITH CAUTION IF\n*              THE MODULE HAS EITHER THE SCTR OR HIAR ATTRIBUTES.\n         SPACE 1\n*        LIB   <DDNAME>\n*        LIB   AUTO\n*              NORMALLY, THE LIBRARY WILL BE INFERRED FROM THE\n*              MODULE NAME: IEANUCXX, IGXXXXXX, IKJXXXXX, OR OTHER ARE\n*              NUCLEUS, SVCLIB, CMDLIB, OR LINKLIB.\n         SPACE 1\n*        JOB   <JOBNAME>                NOT YET IMPLIMENTED\n*        JOB   <JOBNAME>.<STEPNAME>     NOT YET IMPLIMENTED\n*        JOB   <TASKID>                 NOT YET IMPLIMENTED\n*        JOB   <PROCNAME>.<TASKID>      NOT YET IMPLIMENTED\n         SPACE 1\n*        VERIFY\n*        VER\n*        V     <HEX-LOC> <HEX-DATA>\n*        REPLACE\n*        REP\n*        R     <HEX-LOC> <HEX-DATA>\n*              VERIFY AND REPLACE HAVE USUAL SYNTAX.\n         SPACE 1\n*        <-    <REF_DIGIT> *\n*        SETPTR\n*              SAVE THE CURRENT CSECT AND INDEX IN PTR <N>\n         SPACE 1\n*        <-    <REF_DIGIT> <PTR_DISP> <LENGTH>\n*        SETPTR\n*              USED TO SAVE THE ADDRESS POINTED TO IN PTR <N>\n         SPACE 1\n*        <-    <REF_DIGIT> <PTR_DISP> <LENGTH>-<PREFIX_LENGTH>\n*        SETPTR\n*              USED TO SAVE THE ADDRESS POINTED TO IN PTR <N>\n*              AREA INCLUDES A PREFIX OF THE DESIGNATED LENGTH\n         SPACE 1\n*        ->    REF <REF_DIGIT>\n*        POINT REF <REF_DIGIT>\n*              USED TO POINT TO THE AREA SAVED IN PTR <N>\n         SPACE 1\n*        ->    <PTR_DISP> <LENGTH>\n*        POINT <PTR_DISP> <LENGTH>\n*              POINT TO THE DESIGNATED AREA\n         SPACE 1\n*        ->    <PTR_DISP> <LENGTH>-<PREFIX_LENGTH>\n*        POINT <PTR_DISP> <LENGTH>-<PREFIX_LENGTH>\n*              POINT TO THE DESIGNATED AREA\n*              AREA INCLUDES A PREFIX OF THE DESIGNATED LENGTH\n         SPACE 1\n*              POINT, SETPTR, AND THEIT SYNONYMNS \"->\", \"<-\" MAY BE\n*              FOLLOWED BY A COMMA AND THE POINTER LENGTH.\n*              VALID POINTER LENGTHS ARE THOSE USED IN THE FOLLOWING:\n*        ->,15 HALFWORD WITH NEGATIVE SIGN ILLEGAL\n*        ->,16 HALFWORD, CONSIDERED TO BE A POSITIVE 16 BIT FIELD\n*        <-,24 THREE BYTE ADDRESS, NOT PRECEEDED BY PAD\n*        <-,32 THREE BYTE ADDRESS, PRECEEDED BY PAD\n*        ->,Y  SAME AS 15\n*        <-,H  SAME AS 16\n*        ->,AL3 SAME AS 24\n*        <-,A  SAME AS 32\n         SPACE 1\n*        *\n*        CONSOLE\n*        CON   ROUTCDE=(<1-16>,...)\n*              ROUTCDE DEFAULTS TO (9,10)\n*              ROUTCDE MAY BE SPELLED AS ROUT OR ROUT<ALPHA>\n*        CON   UNIT=<CUU>\n*        CON   L=<DEC-UCMID>\n*        CON   L=<DEC-UCMID><ALPHA-AREAID>\n*        CON   DSRT=<HEX-DESC&ROUTCDE>\n*        MONITOR\n*        MON\n*        NOMONITOR\n*        NOMON\n*        RESET\n*        RESET EOD\n         SPACE 1\n*        DUMP =<HEX-START> <HEX-LENGTH>\n*        DUMP  <PGM-NAME>\n*        DUMPB=<HEX-START> <HEX-LENGTH>\n*        DUMPB <PGM-NAME>\n*        DUMPA=<HEX-START> <HEX-LENGTH>\n*        DUMPA <PGM-NAME>\n*        DUMPT=<HEX-START> <HEX-LENGTH>\n*        DUMPT <PGM-NAME>\n         SPACE 2\n*              PGM-NAME MAY BE ANY OF THE FOLLOWING:\n*              .                        ALL OF NUCLEUS\n*              NUCLEUS\n*              <MODULE>                 ALL OF SPECIFIED MODULE\n*              .<NUC-CSECT>             CSECT IN NUCLEUS\n*              <MODULE> <CSECT>         CSECT IN SPECIFIED MODULE\n         SPACE 3\n*              THE FOLLOWING DD CARDS ARE REQUIRED:\n*              SYSPRINT                 SEE SNAP IN SUP & DM MACROS\n*              SYSIN\n*              SYSNUC                   CURRENT NUCLEUS\n*              SVCLIB\n*              LINKLIB                  INCLUDE ALL CONCATENATED\n*                                        LINKLIBS IN SAME ORDER AS\n*                                        LNKLST00.\n         SPACE 1\n*              SVCLIB AND LINKLIB MAY BE OMITTED,\n*                                        AS LONG AS CSECT NAMES ARE\n*                                        NOT USED.\n         SPACE 5\n*              LINKPACK IS CHAINED OFF OF IEAQLPAQ IN IEAQLK00,\n*              POINTED TO BY CVTQLPAQ.\n*              RES SVC LIST IS CHAINED OFF OF IEAQSVCQ IN IEAQTR00.\n*              RES ERP IS CHAINED OFF OF IEAAERP IN IEAQNU00.\n*        SPACE 1\n*              CHASING THE MS LLE CHAIN SHOULD GET ALL ON ONE SEARCH.\n         SPACE 2\n*              THINGS ARE DIFFERENT FOR MFT, OS/VS1:\n         SPACE 1\n*              ALL CHAIN STARTS ARE IN IGC006.\n*              IEAAERP->RERP\n*              IEAARSV1->RSVC\n*              IEAARAM4->RAM\n         SPACE 5\n         MACRO\n&L       DCBL  &DD,&TYPE,&LOC,&REQSYS=ANY\n         COPY  MZGBL\n         MZTST &REQSYS\n         AIF   (NOT &MZMATCH).NODCB\n&L       DC    CL8'&DD'\n         AIF   ('&TYPE' EQ 'IGNORE').IGNORE\n         AIF   ('&TYPE' EQ 'LIB').LIB\n         AIF   ('&TYPE' EQ 'NUC').NUC\n         AIF   ('&TYPE' EQ 'SPECIAL').SPEC\n         MNOTE 8,'TYPE ''&TYPE'' INVALID - SET TO IGNORE'\n.*\n.IGNORE  DC    F'0'\n         MEXIT\n.*\n.LIB     DC    X'04'\n         DC    AL3(&LOC)                LOC OF DCB PTR\n         MEXIT\n.*\n.NUC     DC    X'08'\n         DC    AL3(BUMPTIOT-4)          ALLOW FOR NUC IN OPEN LIST\n         MEXIT\n.*\n.SPEC    DC    X'08'\n         DC    AL3(&LOC)                LOC OF SUBROUTINE\n.NODCB   MEND\n         SPACE 5\n         MACRO\n&L       MZ1   &TYPE\n         COPY  MZGBL\n         AIF   ('&TYPE' EQ 'SPIE').SPIE\n         AIF   ('&TYPE' EQ 'NUCID').NUCID\n         AIF   ('&TYPE' EQ 'CPUID').CPUID\n         AIF   ('&TYPE' EQ 'EXIT').EXIT\n         AIF   ('&TYPE' EQ 'CONS2').CONS2\n         MNOTE 12,'&&TYPE=&TYPE IS NOT VALID'\n         MEXIT\n.*\n.SPIE    AIF   ('&CPU' EQ '370').DESPIE\n&L       SPIE  MAXSMART,(1,2)\n         STIDP CPUID\n         B     NOT370\nMAXSMART CLI   7(R1),1 .                IS IT 360?\n         BCR   8,R14 .                   YES - NO SWEAT\n         LA    R0,NOT360 .              BYPASS KEY 0 CODE\n         ST    R0,8(R1)\n         OI    SW3,GANAVSW\n         XC    CPUID(8),CPUID\n         BR    R14\nNOT370   SPIE\n         MEXIT\n.DESPIE  ANOP\n&L       SPIE\n         MEXIT\n.*\n.NUCID   AIF   ('&SYS' EQ 'OS/MFT' OR '&SYS' EQ 'OS/MVT').OSID\n         L     R2,CVTEXT2 .             GET OS/VS CVT EXTENSION\n         MVC   NUCMEM+7(1),CVTNUCLS-CVTXTNT2(R2)\n         CLI   JFCBELNM,C' ' .          NUCLEUS NAME DEFAULTED?\n         BE    *+14 .                    YES - LET IT BE\n         MEXIT\n.OSID    MVC   NUCMEM+7(1),JFCBELNM+7-OPENWORK(R1)\n         MEXIT\n.*\n.CPUID   AIF   ('&CPU' EQ '360').BYBY\n         STIDP CPUID\n         MEXIT\n.*\n.EXIT    AIF   ('&SYS' EQ 'OS/MVT' OR '&SYS' EQ 'VS2').BYBY\n         MZGM  VRNAMLEN+3*(VRIXLEN+VRMVCLEN)\n         USING VRSECT,R1\n         ST    R1,HEAD\n         XC    0(VRNAMLEN+3*(VRIXLEN+VRMVCLEN),R1),0(R1)\n         LA    R15,VRNAMELN(,R1)\n         ST    R15,VRNEXT\n         MVI   VRTYPE,VRNAME\n         MVI   VRNAM,C'.'\n         MVC   VRCSECT,=CL8'IGC006'\n         LA    R2,3\n         LA    R4,MFTCONS\nMFTLOOP  ST    R15,VRNEXT\n         LR    R1,R15\n         LA    R14,VRIXLEN(,R1)\n         LA    R15,VRMVCLEN(,R14)\n         ST    R14,VRNEXT\n         MVI   VRTYPE,VRINDEX\n         MVC   VRIXNAME,0(8,R4)\n         LR    R1,R14\n         MVI   VRTYPE,VRMVC\n         MVI   VRDATLN,3\n         MVC   VRPTR,8(4,R4)\n         LA    R4,12(,R4)\n         BCT   R2,MFTLOOP\n         ST    R15,TAIL\n         DROP  R1\n         MEXIT\n.*\n.CONS2   AIF   ('&SYS' EQ 'OS/MVT' OR '&SYS' EQ 'VS2').BYBY\n         DS    0F\nMFTCONS  DC    CL8'IEAAERP ',A(IEAAERP)\n         DC    CL8'IEAARSV1',A(IEAARSV1)\n         DC    CL8'IEAARAM4',A(IEAARAM4)\n.BYBY    MEND\n         EJECT\n         COPY  MZGBL\n         MZSET\n         SPACE 5\n         PUNCH ' INSERT  MZAPMAIN'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  INIT1'\n         PUNCH ' INSERT  INIT2'\n         PUNCH ' INSERT  DCBEXIT'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  MZAPCC'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  MZAPHELP'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  MZAPDBUG'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  MZAPCDE'\n         PUNCH ' INSERT  MZAPESD'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  MZAPDUMP'\n         PUNCH ' OVERLAY DUMP'\n         PUNCH ' INSERT  MZDMPHEX'\n         PUNCH ' OVERLAY DUMP'\n         PUNCH ' INSERT  MZDMPOPS'\n         PUNCH ' OVERLAY A'\n         PUNCH ' INSERT  MZAPATCH'\n         PUNCH ' INSERT  MZUNREST'\n         PUNCH ' ENTRY   MOREZAP'\n         PUNCH ' ALIAS   MZAP'\n         EJECT\n         ENTRY MOREZAP\n         MZHED 'METZ''S OWN RELIABLE EXTENDED ZAP'\nMZAPMAIN MZAPMAIN TYPE=C,GEN=GEN\n         MZSHD 'INITIALIZE && KEY 0'\n         PRINT NOGEN\n*              THE LAWS OF GOD, THE LAWS OF MAN,\n*              HE MAY KEEP THEM THAT WILL AND CAN;\n*              NOT I: LET GOD AND MAN DECREE\n*              LAWS FOR THEMSELVES AMD NOT FOR ME;\n         SPACE 1\n*              A. E. HAUSSMAN, LAST POEMS XII\n         SPACE 1\nINIT1    MZENT\n         L     R3,CVTPTR\n         USING CVT,R3\n         L     R4,CVTTCBP\n         L     R9,4(,R4)\n         USING TCB,R9\n         SPACE 1\n*              AT THIS POINT, R1 IS STILL INTACT.\n*              IT MAY BE WORTHWHILE, IN TSO, TO USE THE ENTIRE CPPL,\n*              HOWEVER, AT THE MOMENT I ONLY NEED THE PARM.\n         L     R15,0(,R1)               ->PARM\n         CLI   1(R15),5                 L(PARM)<5\n         BL    NODEBUG                   YES - CAN'T BE 'DEBUG'\n         CLC   =C'DEBUG',2(R15)         DEBUG WANTED IN PREPASS?\n         BNE   NODEBUG                   NO\n         OI    SW1,DEBUGSW              SET UP FOR DEBUG OUTPUT\n         SPACE 2\nNODEBUG  MVC   TRTABLE,TRPRINT\n         SPACE 1\n         MZLT  R2,CVTTSCVT\n         BZ    EINTSO\n         USING TSCVT,R2\n         MVC   TSLPA,TSCVTLPA\n         TM    TCBTSFLG,TCBTSTSK\n         BO    TSO\nEINTSO   LOAD  EP=MZWTO\n         ST    R0,PUTCON\n         B     NOTSO\nTRPRINT  TRTAB FILL=C'.',CODE=PN\nTR2260   TRTAB FILL=C'\"',CODE=2260\nTR3270   TRTAB FILL=C'.',CODE=3270\n         SPACE 1\n         PRINT GEN\nTSO      L     R1,TCBJSCB\n         USING IEZJSCB,R1\n         LH    R4,JSCBTJID\n         MH    R4,TSCVTSZU\n         AL    R4,TSCVTTJB\n         USING TJB,R4\n         L     R5,TJBTSB\n         USING TSB,R5\n         L     R6,TSBQCB-1\n         USING IEDQQCB,R6\n         TM    TSBSTAT,TSBDSPLY\n         BZ    TSO1\n         OI    SW3,TS2260SW\n         MVC   TRTABLE,TR2260\n         MVC   TSONAME,=CL8'MZTS2260'\n         TM    TSBSTAT,TSB3270\n         BZ    TSO1\n         XI    SW3,TS2260SW+TS3270SW\n         MVC   TRTABLE,TR3270\n         MVC   TSONAME,=CL8'MZTS3270'\n         DROP  R1,R2\nTSO1     OI    SW3,TSOSW\n         LOAD  EPLOC=TSONAME\n         ST    R0,PUTCON\n         LR    R12,R0\n         L     R12,OFINIT(,R12)\n         STM   R4,R6,0(R12)             SAVE TJB, TSB, QCB POINTER\n         STAX  32(R12),USADDR=(R13),REPLACE=NO,MF=(E,12(R12))\n         B     *+4(R15)\n         B     NOTSO\n         DC    F'0'                     DEFERAL\n         DC    F'0'                     INVALID PARAMETER\n         DROP  R4,R5,R6\n         SPACE 1\nNOTSO    MZ1   SPIE\n      IDENTIFY EP=IGG019ZZ,ENTRY=TRUMPS\n         OPEN  (NUKE,(INPUT))\n         TM    NUKE+DCBOFLGS-IHADCB,DCBOFOPN\n         BZ    NONUC\n         L     R1,NUKE+DCBDEBAD-IHADCB\n         MVC   IOBSEEK-IOBSTDRD+IOWEBEE+1(6),36(R1)\n         SYNCH KOKO                                                * GP\n         CLOSE (NUKE,)\n         MZ1   CPUID\n         TM    SW1,NOTNUC               CORRECT NUCLEUS SPECIFIED?\n         BZ    NUCOK\n         B     NONUC+6\n         SPACE 1\nNONUC    MVC   NUCMEM,=C'IEANUC0?'\n         OI    SW1,NOTNUC+NOGO\n         WTO   'MZP104I SYSNUC MISSING OR INVALID',ROUTCDE=(9,10,11),  *\n               DESC=6\n         MVI   HIGHRC+3,16\nNUCOK   DELETE EP=IGG019ZZ\nNOT360   L     R13,4(,R13)\n         USING SAVE,R13\n         ST    R3,SAVER3                PASS CVT POINTER BACK\n         ST    R9,SAVER9                PASS TCB POINTER BACK\n         LM    R14,R12,SAVER14\n         BR    R14\n         USING MZAPMAIN,R13\n         SPACE 2                                                   * GP\n*              DEFER, DEFER, TO THE LORD HIGH EXECUTIONER.\nKOKO     EXCP  IOWEBEE                                             * GP\n         WAIT  ECB=ECB\n         SVC   3\n         SPACE 2\nDCBEXIT  L     R1,TCBRBP-TCB(,R9)       GET SYNCH(DCBEXIT) PRB\n         L     R1,RBLINK-RBSECT(,R1)    GET SVRB\n         L     R1,RBEXSAVE+8-RBSECT(R1) GET OPEN WORK AREA\n         MZ1   NUCID\n         CLC   NUCMEM,JFCBELNM-OPENWORK(R1)\n         BNE   BADNUCNM\n         CLC   =C'SYS1.NUCLEUS ',JFCBDSNM-OPENWORK(R1)\n         BNE   BADNUCNM\n         BER   R14\nBADNUCNM OI    SW1,NOTNUC\n         SVC   3\n         MZSHD 'TRICK TAKER AND MIND BLOWER'\n*              AND IF MY WAYS ARE NOT AS THEIRS\n*              LET THEM MIND THEIR OWN AFFAIRS.\n         SPACE 1\n*              A. E. HAUSSMAN, LAST POEMS XII\n         SPACE 1\n*              THE FOLLOWING FOUL AND DEVIOUS CODE IS DEDICATED TO\n*              SIGMUND FREUD, BECAUSE IT RELATES TO AN IDENTITY CRISIS.\n*        1     RQE\n*              13(1) IS TCB ADDRESS(VMS)\n*        2     IOB\n*        3     DEB\n*        4     DCB\n*        7     UCB\n*        10    SCRATCH\n*        11    SCRATCH\n*        13    SCRATCH\n*        14    RETURN\n*              4(14) IS SKIP SIO RETURN\n*        15    *\n         USING *,R15\nTRUMPS   ST    R12,SAVE12               SAVE 12 THROUGH POST\n         ST    R14,SAVERET              SAVE RETURN THROUGH POST\n         L     R10,=A(SW1)              POINT AT GOOD/BAD NUC FLAG\n         USING SRTE,R7\n         TM    UCBSTAT,UCBSYSR          IS THIS RIGHT VOLUME FOR NUC?\n         BO    *+8                       YES\n         OI    0(R10),NOTNUC             NO\n         L     R10,=X'7F000000'\n         LA    R11,ECB\n         L     R12,0(,R3)               GET TCB FROM DEB, NOT 16*\n*              THE ABOVE IS FOR MFT COMPATABILITY.\n         L     R13,CVTPTR\n         USING CVT,R13\n         L     R14,TCBRBP-TCB(R12)\n         USING RBSECT,R14\n         L     R14,RBLINK\n         NI    RBOPSW+1,X'0E'           SET KEY 0, SUP MODE\n         DROP  R14\n         L     R15,CVT0PT01\n         BALR  R14,R15\n         USING *,R14\n         L     R12,SAVE12\n         L     R14,SAVERET\n         B     4(,R14)                  SKIP SIO\n         DROP  R7,R13,R14,R15\nECB      DC    F'0'\nIOWEBEE  DC    X'42000000'\n         DC    A(ECB)\n         DC    X'0',XL7'0'\n         DC    A(CCW)\n         DC    A(NUKE)\n         DC    F'0'\n         DC    F'0'\n         DC    XL8'0'\nCCW      DS    D\nSAVE12   DS    A\nSAVERET  DS    A\nNUKEX    DC    X'85',AL3(DCBEXIT)\nNUKE     DCB   DDNAME=SYSNUC,MACRF=(E),SIOA=ZZ,DEVD=DA,EXLST=NUKEX\nTSONAME  DC    CL8'MZTSO'\n         LTORG\n         MZSHD 'CONSTRUCT DCB CHAIN AND OPEN LIBRARIES'\n*              THEIR DEEDS I JUDGE AND MUCH CONDEMN,\n*              YET WHEN DID I MAKE LAWS FOR THEM?\n         SPACE 1\n*              A. E. HAUSSMAN, LAST POEMS XII\n         SPACE 1\nINIT2    MZENT 2\n         LH    R1,=Y(CVTMDL-CVTFIX-256)\n         AR    R1,R3\n         CLC   =XL2'&MDL',0(R1)         IS THIS RIGHT MODEL?\n         BNE   BUMCPU                    NO\n         TM    SW3,GANAVSW\n         BO    BUMCPU\n         TM    SW1,NOTNUC\n         BO    IDOK\n         CLC   =X'&CPUID&MDL',CPUID+1   IS THIS THE RIGHT CPU #?\n         BE    IDOK                      YES\nBUMCPU   WTO   'MZP101I UNAUTHORIZED CPU FOR MOREZAP',                 *\n               ROUTCDE=(1,9,11),DESC=1\n         OI    SW3,GANAVSW              MY OBJECT ALL SUBLIME\n         L     R1,TCBRBP-TCB(,R9)\n         USING RBSECT,R1\n         MVC   BADPSW(1),RBOPSW         SET PROPER SYSTEM MASK IF VS\n         DROP  R1\n         MZKEY ZERO\n         MVZ   BADPSW+1(1),TCBPKF-TCB(R9)\n         LPSW  BADPSW\n         DS    0D\nBADPSW   DC    X'FF050000'\n         DC    A(*+4)\n         MZKEY\nIDOK     L     R1,TCBJSCB-TCB(,R9)\n         L     R8,JSCBCSCB-IEZJSCB(,R1)\n         USING CHAIN,R8\nDELSTOP  MZLT  R1,CHCIBP\n         BZ    SETCIBC\n         USING CIB,R1\n         CLI   CIBVERB,CIBSTOP\n         BNE   NOTSTOP\n         QEDIT ORIGIN=CHCIBP,BLOCK=0(R1) FORCE LA ON DELETE STOP CIB\n         B     DELSTOP\n         SPACE 1\nNOTSTOP  CLI   CIBVERB,CIBSTART\n         BNE   SETCIBC\n         MVC   MYUCMID,CIBCONID\n         QEDIT ORIGIN=CHCIBP,BLOCK=0(R1) FORCE LA ON DELETE START CIB\n         SPACE 1\nSETCIBC  QEDIT ORIGIN=CHCIBP,CIBCTR=2   STACK 2 MODIFY S\n         L     R4,TCBTIO\n         USING TIOT,R4\n         ST    R4,SAVE+36\n         L     0,TIOCNJOB\n         X     0,TIOCNJOB+4\n         X     0,TIOCSTEP\n         X     0,TIOCSTEP+4\n         X     0,TIOCSTEP+8\n         X     R0,TIOCSTEP+12\n         ST    0,SCRMBL\n         SR    R2,R2                    COUNT FOR OPEN LIST\n         LA    R6,SYSNUC\n         USING IHADCB,R6\nTST      CLI   TIOELNGH,0\n         BE    ENDTIOT\n         CLI   TIOEDDNM,C' '            IS IT CONCAT?\n         BE    BUMPTIOT\n         TM    TIOESTTA,TIOSJBLB        IS IT JOB/STEP LIB?\n         BO    BUMPTIOT\n         TM    TIOELINK,TIOTTERM        IS IT TSO TERMINAL?\n         BO    TSOTERM                   YES - USE TGET/TPUT\n         TM    TIOELINK,6               VS1 SYSIN/SYSOUT?\n         BNZ   SPOOLED                   YES - USE IT\n         MZLT  R1,TIOEFSRT-1            DSN=NULLFILE?\n         USING SRTE,R1\n         BE    BUMPTIOT                  YES - SNUB IT\n         CLI   UCBTBYT3,UCB3DISP\n         BE    GRAPHIC\n         CLI   TIOEDDNM+4,C'*'          IS THIS ENTRY FETCHLIB?\n         BE    BUMPTIOT                  HERE, SPOT\nSPOOLED  LA    R5,DCBTBL\nTST1     CLC   TIOEDDNM,0(R5)           IS THIS SPECIAL DD?\n         BE    SPECIAL\n         LA    R5,12(,R5)\n         CLI   0(R5),X'FF'\n         BNE   TST1\n         SR    R5,R5\nGETDCB GETMAIN R,LV=NULEN\n         ST    R1,NEXTDCB\n         LR    R6,R1\n         MVC   0(NULEN,R1),SYSNUC\n         XC    DCBEXLST+1(3),DCBEXLST+1\n         XC    NEXTDCB,NEXTDCB\n         MVC   DDNAME,TIOEDDNM\n         MVC   DCBDDNAM,TIOEDDNM\n         LTR   R5,R5                    IS THIS SPECIAL DD?\n         BZ    BUMPTIOT-4                NO\n         ST    R1,0(,R5)\n         MVI   0(R5),X'80'\n         LA    R2,4(,R2)\nBUMPTIOT SR    R0,R0\n         IC    R0,TIOELNGH\n         AR    R4,R0\n         B     TST\n         DROP  R6\n         SPACE 1\nTSOTERM  EQU   BUMPTIOT                 TERM PROCESSED VIA TPUT/TGET\n         SPACE 1\nGRAPHIC  CLI   UCBTBYT4,X'03'\n         BE    CRT2260\n         CLI   UCBTBYT4,X'09'\n         BE    CRT3277\n         WTO   'MZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED',          *\n               ROUTCDE=(10,11),DESC=(7,8)\n         B     BUMPTIOT\n         SPACE 1\nCRT2260  MVC   CRTNAME,=CL8'MZ2260'\n         MVC   TRTABLE,TRT2260\n         B     CRTCOMMN\n         SPACE 1\nCRT3277  MVC   CRTNAME,=CL8'MZ3270'\n         MVC   TRTABLE,TRT3270\nCRTCOMMN MVC   CRTDD,TIOEDDNM\n         MVI   CONSW+3,OFATTN           SHUT OFF WTO OUTPUT\n         MVC   NOSYSIT,=C'KEYBOARD'\n         B     BUMPTIOT-4\n         SPACE 1\nTRT2260  TRTAB FILL=C'\"',CODE=2260\nTRT3270  TRTAB FILL=C'.',CODE=3270\n         SPACE 2\nSPECIAL  SR    R1,R1\n         IC    R1,8(R5)\n         MVI   8(R5),0\n         L     R5,8(R5)\n         LA    R5,0(,R5)\n         B     *+4(R1)\n         B     BUMPTIOT                 IGNORE\n         B     GETDCB                   LIB\n         BR    R5                       SPECIAL\n         SPACE 1\nPSYSIN   MVI   GETSW+1,X'F0'            SHUT OFF CONSOLE INPUT\n         B     BUMPTIOT-4\n         SPACE 1\nPSYSPRNT LOAD  EP=MZPRINT\n         ST    R0,PUTLOG\n         LR    R1,R0\n         L     R1,OFDCB(,R1)\n         L     R15,=V(DCBXLIST)\n         USING IHADCB,R1\n         MZSTA R15,DCBRECFM             SET DCBEXLST\n         DROP  R1\n         USING IHADCB,R6\n         B     BUMPTIOT-4\n         SPACE 1\nPSYSPNCH EQU   BUMPTIOT-4               **** TEMP ****\n         SPACE 2\nENDTIOT GETMAIN R,LV=(R2)               FOR OPEN LIST\n         LR    R5,R1\n         LR    R7,R1\n         CLI   TSYSPR+8,0               IS THERE A SYSPRINT?\n         BNE   OPSYSIN\n         L     R1,PUTLOG\n         MVC   0(4,R7),OFDCB(R1)\n         MVI   0(R7),X'0F'\n         LA    R7,4(,R7)\n         MVI   SWSYSPRI,X'92'           SHUT OFF WTO IF SYSIN\nOPSYSIN  CLI   TSYSIN+8,0               IS THERE A SYSIN?\n         BNE   WHICHCRT\nSWSYSPRI CLI   CONSW+3,OFATTN           SHUT OFF WTO IF SYSPRINT\n         MVC   0(4,R7),=A(SYSIN)\n         LA    R7,4(,R7)\nWHICHCRT CLI   CRTNAME,C' '\n         BE    OPNUC\n         LOAD  EPLOC=CRTNAME\n         ST    R0,PUTMON\n         LR    R1,R0\n         L     R1,OFDCB(,R1)\n         ST    R1,0(,R7)\n         MVC   DCBDDNAM-IHADCB(,R1),CRTDD\n         MVI   0(R7),0\n         LA    R7,4(,R7)\nOPNUC    LA    R6,SYSNUC\n         CLI   TSYSNUC+8,0              SYSNUC MISSING?\n         BNE   SKIPNUC                   YES - GET NEXT DCB\nBLDOP    ST    R6,0(,R7)\n         LA    R7,4(,R7)\nSKIPNUC  MZLT  R6,NEXTDCB\n         BNZ   BLDOP\n         SH    R7,H4\n         OI    0(R7),X'80'\n         DROP  R6\n         OPEN  MF=(E,(R5))\n      FREEMAIN R,LV=(R2),A=(5)\n         L     R1,PUTLOG\n         CLI   TSYSPR+8,0\n         BNE   *+14\n         L     R1,OFDCB(,R1)\n         USING IHADCB,R1\n         XC    DCBEXLSA,DCBEXLSA\n         DROP  R1\n         TIME  DEC\n         STM   R0,R1,TIME\n         CLC   CRTNAME,=CL8'MZ2260'\n         BNE   NOSPAR\n         L     R1,PUTMON\n         L     R0,OFINIT(,R1)\n         SPAR  ((R0)),MF=(E,GACBL)\nNOSPAR   TM    TCBTSFLG,TCBTSTSK\n         BZ    *+10\n         MVC   NOSYSIT,=C'TERMINAL'\n         SPACE 2\n         CLI   TSYSIN+8,0               IS THERE A SYSIN?\n         BE    YESHSYSI\n         EX    0,GETLINE                BLANK IBUF\n         MVC   IBUF(L'NOSYSI),NOSYSI\n         BAL   R14,PUTGOT\nYESHSYSI CLI   TSYSPR+8,0               IS THERE A SYSPRINT?\n         BE    YESHSYSP\n         MVC   NOSYSPT,NOSYSIT\n         EX    0,GETLINE                BLANK IBUF\n         MVC   IBUF(L'NOSYSPR),NOSYSPR\n         BAL   R14,PUTGOT\n         SPACE 2\nYESHSYSP EX    0,GETLINE\n         BAL   R14,PUTGOT\n         NI    SW1,255-DMPSW\n         L     R13,4(,R13)\n         USING SAVE,R13\n         ST    R8,SAVER8                PASS CSCB POINTER BACK\n         LM    R14,R12,12(R13)\n         USING MZAPMAIN,R10\n         LA    R12,VREAD\n         B     HITKADEM\n         DROP\n         SPACE 2\nNOSYSPR  DC    C'MZP102I SYSPRINT DD CARD MISSING - OUTPUT ON CONSOLE '\n         ORG   *-8\nNOSYSPT  DS    C'TERMINAL'\nNOSYSI   DC    C'MZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE '\n         ORG   *-8\nNOSYSIT  DS    C'TERMINAL'\n         SPACE 2\n         LTORG\n         SPACE 2\nCRTNAME  DC    CL8' '\nCRTDD    DC    CL8' '\nGACBL    SPAR  (0),MF=L\n         SPACE 2\n         DS    0F\nDCBTBL   DCBL  SYSABEND,IGNORE\n         DCBL  SYSUDUMP,IGNORE\n         DCBL  JOBLIB,IGNORE\n         DCBL  STEPLIB,IGNORE\n         DCBL  JOBCAT,IGNORE\n         DCBL  STEPCAT,IGNORE\nTSYSNUC  DCBL  SYSNUC,NUC\n         DCBL  SVCLIB,LIB,SVC\n         DCBL  LINKLIB,LIB,LINK\n         DCBL  CMDLIB,LIB,CMDL\n         DCBL  LPALIB,LIB,LPAL,REQSYS=VS\nTSYSIN   DCBL  SYSIN,SPECIAL,PSYSIN\nTSYSPR   DCBL  SYSPRINT,SPECIAL,PSYSPRNT\nTSYSPU   DCBL  SYSPUNCH,SPECIAL,PSYSPNCH\n         DC    X'FF'\n         SPACE 2\n         PRINT GEN\n        MZWORK ALL=YES,GEN=GEN\n         MZSHD 'TIME SHARING CVT'\n      IKJTSCVT\n         MZSHD 'TERMINAL JOB BLOCK'\n        IKJTJB\n         MZSHD 'TERMINAL STATUS BLOCK'\n        IKJTSB\n         TQCBD\n         END   MOREZAP\n./ ADD NAME=MZAP2    0100-19106-19106-1238-01198-01198-00000-MZAP78  18\nMZP2     TITLE 'MOREZAP CONTROL CARD PROCESSOR - COPYRIGHT 1975 SHMUEL *\n               METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - NONBL MACRO'\n         MACRO\n&L       NONBL &GO,&NOGO=SYNTEX\n         GBLC  &CPU\n         AIF   ('&CPU' NE '370').S360\n&L       CLCL  R4,R6\n         AIF   (T'&GO EQ 'O').NG370\n         BNE   &GO\n         MEXIT\n.NG370   BE    &NOGO\n         MEXIT\n.S360    ANOP\n&L       CLI   0(R4),C' '\n         AIF   (T'&GO EQ 'O').NG360\n         BNE   &GO\n         AGO   .G360\n.NG360   BNE   *+16\n.G360    LA    R4,1(R4)\n         BCT   R5,*-12\n         AIF   (T'&GO NE 'O').BYBY\n         B     &NOGO\n.BYBY    MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - OP MACRO'\n         MACRO\n&L       OP    &NAME,&NEXT=\n         GBLC  &NM\n         LCLA  &LEN,&L1\n         LCLC  &NXT\n         AIF   (T'&NAME EQ 'O').NONAME\n&LEN     SETA  K'&NAME\n         AIF   ('&NAME'(1,1) NE '''').NOTQ\n&LEN     SETA  &LEN-2\n&L1      SETA  1\n.NOTQ    AIF   (T'&L EQ 'O').NXT\n&NM      SETC  '&L'\n.NXT     ANOP\n&NXT     SETC  '&NEXT'\n         AIF   ('&NEXT' EQ '*').AST\n         AIF   (T'&NEXT NE 'O').NOK\n&NXT     SETC  'OP'.'&SYSNDX'\n         AGO   .NOK\n.AST     ANOP\n&NXT     SETC  '&NM'\n.NOK     AIF   ('&NAME'(1,1) EQ '''').Q\n&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C'&NAME'\n&NM      SETC  '&NXT'\n         MEXIT\n.Q       ANOP\n&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C&NAME\n&NM      SETC  '&NXT'\n         MEXIT\n.NONAME  MNOTE 8,'NO OPERAND ON OP MACRO'\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - FBLDL MACRO'\n         MACRO\n&L       FBLDL\n         COPY  MZGBL\n&L       L     R15,CVTPRLTV\n         AIF   ('&SYS' EQ 'VS2').NOSVC\n         SH    R15,H8\n         LM    R14,R15,0(R15)\n         BAL   R9,FBLDL\n         LR    R15,R14\n.COMMON  BAL   R9,FBLDL\n         B     BUMBLDL\n         MEXIT\n.NOSVC   SH    R15,H4\n         L     R15,0(,R15)\n         AGO   .COMMON\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZCB MACRO'\n         MACRO\n         MZCB  &NAME,&VRNAM=IEANUC0X,&LEN=,&PTR=,&IND=,&ERR=,&REG=R2,  *\n               &SVC=,&CHAIN=YES\n         AIF   (T'&NAME EQ 'O').NONAME\n         AIF   (K'&NAME GT 7).BIGNAME\n         AIF   (T'&PTR NE 'O').LOADIT\n         AIF   (T'&SVC EQ 'O').NOPTR\n         AIF   ('&SVC' EQ '0').EIN\n         SVC   &SVC\n         LTR   R2,&REG\n         AGO   .TST\n.EIN     B     &ERR\n         MEXIT\n.LOADIT  AIF   ('&PTR' EQ '&REG' OR '&PTR' EQ '(&REG)').TSTIND\n         MZLT  &REG,&PTR\n.TST     AIF   (T'&ERR EQ 'O').TSTIND\n         BZ    &ERR\n.TSTIND  AIF   (T'&IND EQ 'O').GM\n         MZLT  &REG,&IND.(&REG)\n         AIF   (T'&ERR EQ 'O').GM\n         BZ    &ERR\n.GM    GETMAIN R,LV=VRCSECT+8-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRCSECT+8-VRSECT),VRSECT\n         MVI   VRTYPE,VRNAME\n         ST    &REG,VRBEGIN\n         AIF   ('&VRNAM' EQ 'IEANUC0X').NUC\n         MVC   VRNAM,&VRNAM\n         AGO   .NOTNUC\n.NUC     MVI   VRNAM,C'.'\n.NOTNUC  MVC   VRCSECT,=CL8'\"&NAME\"'\n         MVI   VRFLG,VRXLE+VR1XL+VRFND+VRNAMFND\n         AIF   ('&LEN'(1,1) EQ '(').REGLEN\n         AIF   (T'&LEN NE 'N').HW\n         AIF   (&LEN GE 256).HW\n         MVI   VRSIZE+2,&LEN\n         AGO   .NOTHW\n.REGLEN  MZSTA &LEN(1),VRSIZE-1\n         AGO   .NOTHW\n.HW      MVC   VRSIZE+1(2),=Y(&LEN)\n.NOTHW   OI    SW1,CSECTSW .            MSG NEEDED\n         AIF   ('&CHAIN' EQ 'NO').NOCHN\n         B     CHAINCCN\n.NOCHN   MEXIT\n.NONAME  MNOTE 8,'NO CONTROL BLOCK NAME SPECIFIED'\n         DC    H'0'\n         MEXIT\n.BIGNAME MNOTE 8,'CONTROL BLOCK NAME &NAME LONGER THAN 6'\n         DC    H'0'\n         MEXIT\n.NOPTR   MNOTE 8,'NEITHER PTR NOR SVC SPECIFIED'\n         DC    H'0'\n         MEXIT\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - BUMP MACRO'\n         MACRO\n&L       BUMP  &BUM\n&L       BAL   R14,BUMPCOL\n         DC    Y(&BUM-&SYSECT)\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZERR MACRO'\n         MACRO\n&L       MZERR &TXT\n         LCLA  &I,&J\n         AIF   (T'&TXT EQ 'O').NOT\n         AIF   ('&TXT'(1,1) NE '''').NOQ\n&J       SETA  K'&TXT-3\n&I       SETA  2\n.SCN     AIF   ('&TXT'(&I,2) EQ '''').QA\n         AIF   ('&TXT'(&I,2) NE '&&').NXT\n.QA      ANOP\n&J       SETA  &J-1\n&I       SETA  &I+1\n.NXT     ANOP\n&I       SETA  &I+1\n         AIF   (&I LT K'&TXT).SCN\n&L       BAL   R1,INVLD\n         DC    AL1(&J),C&TXT\n         MEXIT\n.NOT     MNOTE 12,' ''TEXT'' REQUIRED'\n         MEXIT\n.NOQ     MNOTE 12,'DELIMITING '' MISSING'\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZNMX MACRO'\n         MACRO\n&L       MZNMX &NAME,&INDEX,&IX=,&LOC=\n         COPY  MZGBL\n         LCLA  &I,&J\n         LCLC  &C\n&I       SETA  1\n         AIF   (T'&NAME EQ 'O').NONAME\n         AIF   (N'&NAME EQ 1).SYSOK1\n.TSTSYS1 ANOP\n&C       SETC  '&NAME(&I+1)'\n         AIF   ('&C' EQ '&SYS').SYSOK1\n         AIF   ('&C' EQ 'MFT').TSTMFT1\n         AIF   ('&C' EQ 'MVT').TSTMVT1\n         AIF   ('&C' EQ 'OS').TSTOS1\n         AIF   ('&C' EQ 'VS').TSTVS1\n.TSTNXT1 ANOP\n&I       SETA  &I+2\n         AIF   (&I LT N'&NAME).TSTSYS1\n.BUMOP   MNOTE *,'INVALID COMMAND FOR &SYS'\n&L       B     BUMOP .\n         MEXIT\n.TSTMFT1 AIF   ('&SYS' EQ 'OS/MFT' OR '&SYS' EQ 'VS1').SYSOK1\n         AGO   .TSTNXT1\n.TSTMVT1 AIF   ('&SYS' EQ 'OS/MVT' OR '&SYS' EQ 'VS2').SYSOK1\n         AGO   .TSTNXT1\n.TSTOS1  AIF   ('&SYS' EQ 'OS/MFT' OR '&SYS' EQ 'OS/MVT').SYSOK1\n         AGO   .TSTNXT1\n.TSTVS1  AIF   ('&SYS' EQ 'VS1' OR '&SYS' EQ 'VS2').SYSOK1\n         AGO   .TSTNXT1\n.*\n.NONAME  MNOTE 12,'REQUIRED OPERAND OMITTED'\n         MEXIT\n.*\n.*\n.SYSOK1  ANOP\n&C       SETC  '&L'\n         AIF   (T'&INDEX EQ 'O').JUSTNAM\n         AIF   (T'&LOC EQ 'O').NOLOC\n         AIF   ('&LOC' EQ '(2)' OR '&LOC' EQ '(R2)').CALLNMX\n         AIF   ('&LOC'(1,1) EQ '(').LR\n&L       LA    R2,&LOC\n&C       SETC  ''\n         AGO   .CALLNMX\n.LR      ANOP\n&L       LR    R2,&LOC(1)\n&C       SETC  ''\n.CALLNMX ANOP\n&C       BAL   R9,CHNMIX\n         AGO   .NM\n.NOLOC   ANOP\n&L       BAL   R9,CHNMIX-2\n.NM      DC    CL8'&NAME(&I)'\n         AIF   ('&INDEX'(1,1) EQ '''').QUOTEIX\n&IX      DC    CL8'&INDEX(1)'\n         MEXIT\n.QUOTEIX ANOP\n&IX      DC    CL8&INDEX\n         MEXIT\n.JUSTNAM ANOP\n&J       SETA  K'&NAME(&I)\n&L       LA    R5,&J+2\n         BAL   R4,SCANNAME\n         DC    C'.&NAME(&I). '\n.BYBY    MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZHLP MACRO'\n         MACRO\n         MZHLP &TXT\n         LCLA  &I,&L\n&L       SETA  K'&TXT(1)-1\n         AIF   ('&TXT(1)'(1,1) NE '''').WORD\n&L       SETA  &L-2\n&I       SETA  2\n.LOOP    AIF   ('&TXT(1)'(&I,2) NE '''''' AND                          *\n               '&TXT(1)'(&I,2) NE '&&&&').SINGLE\n&L       SETA  &L-1\n&I       SETA  &I+1\n.SINGLE  ANOP\n&I       SETA  &I+1\n         AIF   (&I LT K'&TXT(1)-1).LOOP\n         DC    AL1(&L),C&TXT(1)\n         MEXIT\n.WORD    DC    AL1(&L),C'&TXT(1)'\n         MEND\n         TITLE 'MOREZAP CONTROL CARD PROCESSOR'\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP CONTROL CARD PROCESSOR'\n         PUNCH '         ALIAS MZAPCC'\n         PRINT ON,GEN\n         MZSHD 'MAIN LOOP'\n         PRINT NOGEN\nMZAPCC   MZENT CC\n         USING MZAPCC+4096,R12\n         LA    R12,MZAPCC+4095\n         LA    R12,1(R12)\nGETCONCD BAL   R14,GETLINE\n         BAL   R14,PUTGOT\n         TM    SW3,GANAVSW              IS HE HONEST?\n         BO    BUMOP                     NO - TELL HIM THE BEST POLICY\n         CLI   IBUF,C'*'                BYPASS COMMENT STATEMENTS\n         BE    GETCONCD\n         LA    R4,IBUF+6                OPERAND 1\n         LA    R5,74                    LENGTH  1\n         LA    R6,OPTAB                 OPERAND 2\n         L     R7,=X'40000000'          SP PAD AND OP 2 LEN OF 0\n         NONBL NOGO=GETCONCD\nNEXTOP   IC    R7,2(R6)                 GET LEN-1 FROM OP TBL\n         LA    R1,1(R4,R7)              NEXT CHAR IF MATCH\n         LA    R2,5(R6,R7)              BR ADDR IF MATCH & LEN EVEN\n         SRL   R2,1                     COMPENSATE FOR ODD BR ADDR IF\n         SLL   R2,1                      LEN ODD\n         EX    R7,CLCOP                 MATCH?\n         BNE   NXTOP                     NO - TRY NEXT\n         LA    R7,1(R7)                 SET LEN=LEN-1 + 1\n         AR    R4,R7                    ADVANCE SCAN PTR\n         SR    R5,R7                    DEC SCAN COUNTER\n         BNP   SYNTEX                   DON'T GO OVER THE EDGE\n         L     R7,=X'40000000'          RESTORE FILL CHAR & 0 COUNT\n         BR    R2\nNXTOP    LH    R0,0(R6)\n         AR    R6,R0\n         LTR   R0,R0                    0 NEXT PTR = END OF TBL\n         BNZ   NEXTOP\nBUMOP    MZERR 'MZP202I INVALID OPCODE'\n         SPACE 2\nCLCOP    CLC   0(,R4),3(R6)             EX TO TEST OPCODE MATCH\n         SPACE 2\nBUMVEREP MZERR 'MZP201I STATEMENT MISPLACED'\nNOUCB    MZERR 'MZP203I DEVICE NOT FOUND'\n         SPACE 1\nSYNTEX   EX    0,BLCARD                 MARK COLUMN IN ERROR\n         LTR   R5,R5                    BEYOND COL 80?\n         BP    *+8                       NO\n         LA    R4,IBUF+79                YES - CALL IT 80\n         MVI   0(R4),C'|'\n         BAL   R14,PUTGOT\n         MZERR 'MZP204I INVALID STATEMENT'\n         SPACE 2\nNOTMCS   MZERR 'MZP206I NOT MCS'\n         SPACE 1\nNOHC     MZERR 'MZP207I HARDCPY=SYSLOG - NO UCM'\n         SPACE 2\nNOTSMF   MZERR 'MZP208I NOT SMF'\n         SPACE 1\nNOTACTVE MZERR 'MZP209I SPECIFIED CONSOLE NOT ACTIVE'\n         SPACE 1\nNOTCAM   MZERR 'MZP212I TCAM IS NOT ACTIVE'\n         SPACE 1\nNOTSO    MZERR 'MZP213I TSO NOT ACTIVE'\n         SPACE 1\nNOHASP   MZERR 'MZP214I HASP NOT ACTIVE'\n         SPACE 1\nBUMBLDL  MZERR 'MZP215I NAME NOT IN BLDL LIST'\n         SPACE 2\nINVLD    EX    0,BLCARD\n         IC    R9,0(R1)\n         EX    R9,MVERR\n         OI    SW1,NOGO\n         BAL   R14,PUTGOT\n         EX    0,BLCARD                 BLANK LINE AFTER ERR MSG\n         BAL   R14,PUTGOT\n         OI    HIGHRC+3,4\n         TM    SW3,TSOSW\n         BZ    GETCONCD\n       TCLEARQ INPUT\n         B     GETCONCD\nMVERR    MVC   IBUF(0),1(R1)\n         MZSHD 'KEY'\nOPTAB    OP    KEY\n         NONBL SCANKEY\n         SPACE 1\nREADKEY  EX    0,BLCARD\n         MZMVC 'MZP210I KEY'\n         L     R0,SCRMBL\n         X     R0,TIME\n         X     R0,DATE\n         ST    R0,MODNAME\n         MZHEX IBUF+12,MODNAME,8,BL='?'\n         MVI   GETSW+1,0\n         MVI   CONSW+3,OFPUT\n         BAL   R14,PUTGOT\n         BAL   R14,GETLINE\n         LA    R6,IBUF+6                POINT TO INPUT\n         SPACE 1\nTESTKEY  L     R1,MODNAME\n         SR    R0,R0\n         LA    R2,8\n         LR    R14,R0\n         SLDL  R0,4\n         ALR   R0,R14\n         BCT   R2,*-8\n         ST    R0,LOCO\n         MZHEX MODNAME,LOCO,8,BL=*\n         CLC   MODNAME,0(R6)\n         BNE   BUMKEY\n         OI    SW1,KEYSW\n         B     GETCONCD\n         SPACE 1\nBUMKEY   WTO   'MZP211I INVALID KEY',ROUTCDE=(1,9,11),DESC=1\n         B     READKEY\n         SPACE 1\nSCANKEY  IC    R1,TIME                  HOURS, TRUNCATED EVEN,\n         SRL   R1,1                      TO BITS 0-7\n         SLL   R1,25\n         X     R1,DATE\n         X     R1,SCRMBL\n         B     TESTKEY+4\n         MZSHD 'I/O CONTROL STATEMENTS'\n         OP    CONSOLE\n         B     CONSOLE\n         OP    CON\nCONSOLE  MVI   GETSW+1,0\n         MVI   CONSW+3,OFPUT\n         TM    SW3,TSOSW                BATCH?\n         BO    GETCONCD                  NO - NO WTO ROUTINE\n         SPACE 1\n         L     R10,PUTCON               GET WTO PARAMETER BLOCK\n         L     R10,OFINIT(,R10)\n         MVI   SETAREA+1,0              ASSUME NO AREA\n         SPACE 1\nSCANCON  CLI   0(R4),C','\n         BNE   SCANCON1\n         BUMP  SYNTEX\nSCANCON1 NONBL NOGO=GETCONCD\n         CLC   =C'DSRT=',0(R4)\n         BE    SCANDSRT\n         CLC   =C'UNIT=',0(R4)\n         BE    SCNCUCB\n         CLC   =C'L=',0(R4)\n         BNE   SYNTEX\n         LA    R4,2(R4)\n         SH    R5,*-2\n         BNP   SYNTEX\n         BAL   R8,SCANUCM\n         CLI   0(R4),C'A'               CLEAR AREA ID\n         BL    SETUCMID\n         CLI   0(R4),C'Z'               Z=NO AREA\n         BNL   SETUCMID\n         MVC   SETAREA+1(1),0(R4)       SETUP AREA ID\n         BUMP  SYNTEX\n         USING UCMLIST,R15\nSETUCMID TM    UCMATR,UCMUF             IS CONSOLE ACTIVE?\n         BZ    NOTACTVE                  NO\n         DROP  R15\n         MVC   MYUCMID,TSTUCMID+1\nSETAREA  MVI   6(R10),0\n         B     SCANCON\n         SPACE 1\nSCNCUCB  BAL   R8,SCANCUCB\n         B     SETUCMID\n         SPACE 1\nSCANDSRT LA    R4,5(R4)\n         SH    R5,*-2\n         BNP   SYNTEX\n         BAL   R9,SCANHEX\n         CLI   LOCOL,4\n         BNE   SYNTEX\n         MVC   0(4,R10),ODATA\n         B     SCANCON\n         SPACE 3\n         OP    DEBUG\n         OI    SW1,DEBUGSW              LET IT ALL HANG OUT\n         TM    CVTDCB,CVT6DAT           VS?\n         BO    GETCONCD                  YES - SKIP LOADING OS NAME\n         L     R1,CVTSVDCB              LOAD ABDUMP SERVICE NOW,\n         LOAD  EP=IGC0A05A,DCB=(1)       WHILE THERE IS CORE\n         B     GETCONCD\n         SPACE 2\n         OP    HELP\n         L     R15,AHELP                I'D LIKE TO HELP YOU OUT,\n         B     NOCC                      WHICH WAY DID YOU COME IN?\n         SPACE 3\n         OP    MONITOR\n         B     MON\n         OP    MON\nMON      NI    SW3,255-NOMONSW\n         B     GETCONCD\n         SPACE 2\n         OP    NOMONITOR\n         B     NOMON\n         OP    NOMON\nNOMON    OI    SW3,NOMONSW\n         B     GETCONCD\n         SPACE 2\n         OP    END\n         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN\n         BZ    BUMOP                    NO SYSIN - CONSOLE STAYS\n         MVI   GETSW+1,X'F0'\n         MVI   CONSW+3,OFATTN\n         B     GETCONCD\n         MZSHD 'FAILURE LIMITERS'\n*        OP    GO\n*        CLI   GETSW+1,X'F0'\n*        BE    BUMOP\n*        NI    SW1,255-NOGO\n*        B     GETCONCD                 MOVED AFTER GOVRFLB\n         SPACE 2\n         OP    RESET\n         NONBL NOGO=RESET\n         CLI   0(R4),X'7F'              PUNCTUATION?\n         BH    *+8                       NO\n         LA    R4,1(R4)                  YES - SKIP IT\n         CLC   0(3,R4),=C'EOD'\n         BNE   RESET\n         OI    SW2,EOD\nRESET    L     R15,ADDT                  IS DEBUG OPTION SET?\n         TM    SW1,DEBUGSW\n         BO    NOCC\n         L     R15,AGRAIL\n         TM    SW2,LPASW\n         BO    NOCC\n         L     R15,AESP                 IS ESD NEEDED?\n         TM    SW1,CSECTSW\n         BO    NOCC\n         L     R15,AHOVEL               IS DUMP BEFORE NEEDED?\n         TM    SW1,DBEFSW\n         BO    NOCC\n         L     R15,APATCH               IS VER/REP NEEDED?\n         TM    SW2,VEREPSW\n         BO    NOCC\n         L     R15,AHOVEL               IS DUMP AFTER NEEDED?\n         TM    SW1,DAFTSW\n         BO    NOCC\n         L     R15,A#666                 NO - RESET\nNOCC     MZGO\n         MZSHD 'NAME'\n         OP    NAME\nSCANNAME MVI   NAMTYP+1,VRNAME\n         NI    SW2,255-NAMESW               TURN OF V/R OK\n*              WILL BE TURNED BACK ON IF NO SYNTAX ERROR\n         CLI   0(R4),C'.'               SPACE NOT REQUIRED BEFORE .\n         BE    SCANNAM\n         CLI   0(R4),C' '\n         BNE   SYNTEX\n         NONBL\n         SPACE 1\nSCANNAM  XC    EBC,EBC\n         MVI   EBC,C'.'\n         CLI   0(R4),C'.'               IS THIS NUC?\n         BE    *+12\n         BAL   R9,SCANEBC\n         B     *+10\n         BUMP  SYNTEX\n         MVC   MODNAME,EBC\n         XC    EBC,EBC\n         NONBL NOGO=NOCSECT\n         BAL   R9,SCANEBC\nNOCSECT GETMAIN R,LV=VRCSECT+8-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRCSECT+8-VRSECT),VRSECT\nNAMTYP   MVI   VRTYPE,VRNAME\n         CLC   MODNAME,=CL8'NUCLEUS'\n         BE    *+14\n         CLC   MODNAME,NUCMEM\n         BNE   *+8\n         MVI   MODNAME,C'.'\n         MVC   VRNAM(16),MODNAME        (VRNAM,VRCSECT)=(MODNAME,EBC)\n         OI    SW1,CSECTSW              ESD/MSG NEEDED\n         OI    SW2,LPASW                CDE/LRB NEEDED\nCHAINCCN OI    SW2,NAMESW               V/R FOLLOWING IS OK\n*        B     CHAINCC\n         DROP  R1\n         SPACE 2\n         USING VRSECT,R1\n*              ENTRY WITH R1 SET TO SINGLE NEW ENTRY\nCHAINCC  LR    R0,R1\n         SPACE 1\n*              ENTRY WITH R1 SET TO FIRST NEW ENTRY, R0 SET TO LAST\n*              CALLER MUST MOVE LINENO INTO EACH ENTRY BUT 1ST\nCHAINCCM MVC   VRLINE,LINENO            SET STATEMENT # FOR 1ST\n         DROP  R1\n         USING VRSECT,R2\n         MZLT  R2,TAIL                  1ST TIME CHAIN CALLED?\n         ST    R0,TAIL                  SET NEW LAST ENTRY REGARDLESS\n         BNZ   *+12                      BR IF \u00ac 1ST TIME\n         ST    R1,HEAD                  MAKE NEW CHAIN 1ST CHAIN\n         B     GETCONCD\n         MZSTA R1,VRNEXT                ADD NEW CHAIN TO END OF OLD\n         B     GETCONCD\n         DROP  R2\n         MZSHD 'CONTROL BLOCK STATEMENTS'\n         OP    AVT\n         NI    SW2,255-NAMESW\n         PRINT GEN\n         MZCB  AVT,IND=0,PTR=CVTAQAVT,LEN=1226,ERR=NOTCAM\n         PRINT NOGEN\n         DROP  R1\n         SPACE 3\n         OP    BLDL\n         NI    SW2,255-NAMESW\n         CLI   0(R4),C' '               SPACE REQUIRED AFTER OPCODE\n         BNE   SYNTEX\n         NONBL\n         BAL   R9,SCANEBC               SCAN NAME\n         PRINT GEN\n         FBLDL\n         SPACE 2\nFBLDL    LH    R0,0(R15)\n         LH    R5,2(R15)\n         LTR   R0,R0\n         BZR   R9\nCBLDL    CLC   4(8,R15),EBC\n         BE    FNDBLDL\n         AR    R15,R5\n         BCT   R0,CBLDL\n         BR    R9\nFNDBLDL  LA    R2,4(,R15)\n         MZCB  BLDL,LEN=(R5),PTR=(R2),VRNAM=EBC\n         PRINT NOGEN\n         SPACE 3\n         OP    CDE\n         NI    SW2,255-NAMESW\n         B     BUMOP\n         SPACE 3\n         OP    CVT\n         NI    SW2,255-NAMESW\n         MZNMX (IEAQBK00,MVT,IEACVTRN,MFT),IEACVT\n         SPACE 3\n         OP    GOVRFLB\n         NI    SW2,255-NAMESW\n         MZNMX (IEAQGM00,MVT),GOVRFLB\n         SPACE 3\n         OP    GO                       MOVED BECAUSE OF GOVRFLB\n         CLI   GETSW+1,X'F0'            INPUT FROM CARDS?\n         BE    BUMOP                     I HATE CARDS\n         NI    SW1,255-NOGO\n         B     GETCONCD\n         SPACE 3\n         OP    HCT\n         NI    SW2,255-NAMESW\n         MZCB  HCT,SVC=&HASPSVC,LEN=320,REG=R15,ERR=NOHASP\n         DROP  R1\n         SPACE 3\n         OP    IBMORG\n         NI    SW2,255-NAMESW\n         MZNMX (IBMORG,MVT)\n         SPACE 3\n         OP    MSER\n         NI    SW2,255-NAMESW\n         MZNMX IEEMSER\n         SPACE 3\n         OP    PATCH\n         NI    SW2,255-NAMESW\n         MZNMX PATCH\n         SPACE 3\n         OP    QMRES\n         NI    SW2,255-NAMESW\n         MZNMX IEFJOB\n         SPACE 3\n         OP    SCVT\n         NI    SW2,255-NAMESW\n         MZNMX (IGC003,MVT),IEABEND\n         SPACE 3\n         OP    SMCA\n         NI    SW2,255-NAMESW\n         PRINT GEN\n         MZCB  SMCA,PTR=CVTSMCA,LEN=148,ERR=NOTSMF\n         PRINT NOGEN\n         DROP  R1\n         SPACE 3\n         OP    TACT\n         NI    SW2,255-NAMESW\n         MZNMX (IEAQTAQ,OS/MVT)\n         SPACE 3\n         OP    TSCVT\n         NI    SW2,255-NAMESW\n         PRINT GEN\n         MZCB  TSCVT,PTR=CVTTSCVT,LEN=132,ERR=NOTSO\n         PRINT NOGEN\n         EJECT\n         OP    UCB\n         NI    SW2,255-NAMESW\n         CLI   0(R4),C'='\n         BE    *+12\n         CLI   0(R4),C' '\n         BNE   SYNTEX\n         NONBL\n         BAL   R9,SCANUCB\n         MVC   NAMEUCB+4(3),UCBNAME-SRTE(R2)\n         MZNMX (IEAQFX00,MVT,IEAAIH00,MFT),(UCB=CUU),LOC=(R2),         *\n               IX=NAMEUCB\n         EJECT\n         OP    UCM\n*              EQUIVALENT TO:\n         SPACE 1\n*        NAME  .IEEUCMC\n*        INDEX <VARIABLE>\n         NONBL\n         CLC   =C'UNIT=',0(R4)\n         BE    SCNCNCUU\n         CLC   =C'ID=',0(R4)\n         BE    SCNCONID\n         L     R2,CVTCUCB\n         USING UCMXECB,R2\n         CLC   =C'BASE',0(R4)\n         BE    SETUCMB\n         CLC   =C'PREFIX',0(R4)\n         BE    SETUCMP\n         TM    UCMMODE,UCMMCS           MCS SUPPORT?\n         BZ    NOTMCS                    REST OF TESTS DON'T APPLY\n         SH    R2,H4                     YES - GET MCS UCM PREFIX\n         L     R2,0(,R2)\n         USING MCSUCM,R2\n         CLC   =C'MCS',0(R4)\n         BE    SETMCS\n         CLC   =C'MASTER',0(R4)\n         BE    SETMAST\n         CLC   =C'HARDCOPY',0(R4)\n         BNE   SYNTEX\n         TM    UCMSFLGS,UCMSYSG         IS SYSLOG HARDCOPY?\n         BO    NOHC                      YES - NO UCM\n         L     R2,UCMHCUCM\n         MZNMX IEEUCMC,'\"HC UCM\"',LOC=(R2)\nSETMAST  L     R2,UCMMCENT\n         MZNMX IEEUCMC,'\"MC UCM\"',LOC=(R2)\n         SPACE 1\nSETMCS   MZNMX IEEUCMC,' UCM MCS',LOC=(R2)\n         DROP  R2\n         SPACE 1\nSETUCMP  SH    R2,H8\n         MZNMX IEEUCMC,' UCM PFX',LOC=(R2)\nSETUCMB  MZNMX IEEUCMC,IEECUCB\nSCNCONID LA    R4,3(R4)\n         SH    R5,*-2\n         BNP   SYNTEX\n         BAL   R8,SCANUCM\n         SR    R0,R0\n         IC    R0,TSTUCMID+1\n         CVD   R0,MODNAME\n         OI    MODNAME+7,X'0F'\n         UNPK  IDUCM+6(2),MODNAME\n         MZNMX IEEUCMC,' UCM #XX',LOC=(R15),IX=IDUCM\nSCNCNCUU BAL   R8,SCANCUCB\n         MVC   UCMCUU+5(3),0(R4)\n         MZNMX IEEUCMC,' UCM CUU',LOC=(R15),IX=UCMCUU\n         SPACE 3\n         OP    USERORG\n         MZNMX (IBMORG,MVT),USERORG\n         MZSHD 'POINTER MANIPULATION'\n         OP    <-\n         B     SETPTR\n         SPACE 1\n         OP    SETPTR\nSETPTR   TM    SW2,NAMESW               IN SCOPE OF NAME OR POINT?\n         BZ    BUMVEREP                  NO - <- IS INVALID\n         BAL   R9,SCANPLEN               YES - TEST FOR PTR LENGTH\n         BAL   R9,SCANREF\n         NONBL\n         CLI   0(R4),C'*'               IS IT <- N *?\n         BE    SAVEOP\n         BAL   R8,SCANPTR\n         DC    AL1(VRREFER)\n         SPACE 1\nSAVEOP   XC    LENB(4),LENB\n         BAL   R8,SETREF\n         DC    AL1(VRSAVE)\n         SPACE 2\n         OP    ->\n         B     POINT\n         SPACE 1\n         OP    POINT\nPOINT    BAL   R9,SCANPLEN\n         NONBL\n         CLC   =C'REF',0(R4)\n         BE    UNSAVE\n         TM    SW2,NAMESW               IN SCOPE OF NAME OR -> ?\n         BZ    BUMVEREP                  NO\n         XC    REFPTR(8),REFPTR\n         BAL   R8,SCANPTR\n         DC    AL1(VRPOINT)\n         SPACE 1\nUNSAVE   LA    R4,3(R4)\n         SH    R5,*-2\n         BNP   SYNTEX\n         NONBL\n         BAL   R9,SCANREF\n         XC    LENB(4),LENB\n         OI    SW2,NAMESW               VER/REP MAY FOLLOW\n         BAL   R8,SETREF\n         DC    AL1(VRUNSAVE)\n         SPACE 1\nSCANPLEN XC    LOCL,LOCL                VRLOC=0\n         MVI   PTYPE,0                  ASSUME 32 BIT ADDRESS\n         CLI   0(R4),C','               COMMA FOLLOW OPCODE?\n         BNER  R9                        NO - CAN'T HAVE POINTER LENGTH\n         BUMP  SYNTEX\n         CLC   =C'A ',0(R4)\n         BE    SPLN2\n         CLC   =C'32 ',0(R4)\n         MVI   PTYPE,2                  ASSUME 16 BIT ADDRESS\n         CLC   =C'H ',0(R4)\n         BE    SPLN3\n         CLC   =C'16 ',0(R4)\n         BE    SPLN3\n         MVI   PTYPE,3                  ASSUME 15 BIT ADDRESS\n         CLC   =C'Y ',0(R4)\n         BE    SPLN2\n         CLC   =C'15 ',0(R4)\n         BE    SPLN3\n         MVI   PTYPE,1                  MUST BE 24 BIT OR INVALID\n         CLC   =C'24 ',0(R4)\n         BE    SPLN3\n         CLC   =C'AL3 ',0(R4)\n         BNE   SYNTEX\n         BUMP  SYNTEX\nSPLN3    BUMP  SYNTEX\nSPLN2    BUMP  SYNTEX\n         BUMP  SYNTEX\n         BR    R9\n         SPACE 1\nSCANREF  NONBL\n         SR    R0,R0                    SCAN ONE HEX DIGIT\n         BAL   R15,DIGIT\n         LR    R14,R0\n         SLL   R14,3\n         LA    R14,REF(R14)\n         ST    R14,REFPTR\n         BR    R9\n         SPACE 1\nSCANPTR  BAL   R9,SCANHEX\n         BO    SYNTEX\n         ST    R0,LOCL                  STORE DISPLACEMENT TO POINTER\n         NONBL\n         BAL   R9,SCANHEX               SCAN CONTROL BLOCK LENGTH\n         MZBC  MO,SYNTEX                LENGTH MUST BE POSITIVE\n         STH   R0,LENB                  SAVE LENGTH\n         SRA   R0,15                    LENGTH MUST BE < 32K\n         BNZ   SYNTEX\n         NONBL NOGO=SETREF              IS THERE A PREFIX LENGTH?\n         CLI   0(R4),C'-'                YES - MUST START WITH HYPHEN\n         BNE   SYNTEX\n         BUMP  SYNTEX                   SPACE PAST HYPHEN\n         BAL   R9,SCANHEX               SCAN PREFIX LENGTH\n         MZBC  MO,SYNTEX                MUST BE POSITIVE\n         STH   R0,IXB\n         AH    R0,LENB\n         STH   R0,LENB\n         SRA   R0,15                    MUST BE < 32K\n         BNZ   SYNTEX\nSETREF GETMAIN R,LV=VRIXB+2-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRIXB+2-VRSECT),VRSECT\n         MVC   VRTYPE,0(R8)\n         MVC   VRLOC,LOCL               STORE POINTER DISPLACEMENT\n         MVC   VRPTR(8),REFPTR          STORE PTR, LENB, AND IXB\n         MVI   VRPTR,0                  STORE POINTER LENGTH\nPTYPE    EQU   *-3\n         B     CHAINCC\n         DROP  R1\n         MZSHD 'BASE'\n         OP    BASE\n         MVI   BASTYP+1,VRBASE\n         CLI   0(R4),C'='\n         BE    SCANBASE\n         CLI   0(R4),C' '\n         BNE   SYNTEX\nSCANBASE NONBL\n         BAL   R9,SCANHEX\n         BNP   SYNTEX\n       GETMAIN R,LV=VRLOC+4-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRLOC+4-VRSECT),VRSECT\nBASTYP   MVI   VRTYPE,VRBASE\n         MVC   VRLOC,LOCO\n         B     CHAINCC\n         DROP  R1\n         MZSHD 'INDEX'\n         OP    INDEX\n         MVI   BASTYP+1,VRHINDEX\n         CLI   0(R4),C'='\n         BE    SCANBASE\n         CLI   0(R4),C'-'\n         BE    SCANBASE\n         CLI   0(R4),C' '\n         BNE   SYNTEX\n         NONBL\n         CLI   0(R4),C'='\n         BE    SCANBASE\n         BAL   R9,SCANEBC\n       GETMAIN R,LV=VRIXNAME+8-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRIXNAME-VRSECT),VRSECT\n         MVI   VRTYPE,VRINDEX\n         MVC   VRIXNAME,EBC\n         OI    SW1,CSECTSW              FORCE ESD READ OVERLAY\n         B     CHAINCC\n         DROP  R1\n         MZSHD 'LIB'\n         OP    LIB\n         NI    SW2,255-NAMESW           V/R FOLLOWING IST VERBOTEN\n         NONBL\n         SR    R2,R2\n         CLC   =C'AUTO',0(R4)\n         BE    STDCB\n         BAL   R9,SCANEBC\n         BCTR  R4,0\n         LA    R2,SYSNUC\n         USING IHADCB,R2\n         L     R0,SAVE+36               TIOT FROM R4\nNXTDCB   LH    R1,DCBTIOT\n         AR    R1,R0\n         USING TIOELNGH,R1\n         CLC   TIOEDDNM,EBC\n         BE    STDCB\n         L     R2,NEXTDCB\n         LTR   R2,R2\n         BNZ   NXTDCB\n         B     SYNTEX\n         SPACE 1\nSTDCB    TM    DCBDSORG,2               DSORG=PO?\n         BZ    SYNTEX                    NO\n       GETMAIN R,LV=VRDCB+4-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRDCB+4-VRSECT),VRSECT\n         ST    R2,VRDCB\n         MVI   VRTYPE,VRLIB\n         B     CHAINCC\n         DROP  R1\n         MZSHD 'VER/REP'\n         OP    VERIFY\nV        MVI   REPTYP+1,VRVER\n         B     VEREP\n         SPACE 2\n         OP    VER\n         B     V\n         SPACE 2\n         OP    V\n         B     V\n         EJECT\n         OP    REPLACE\nR        MVI   REPTYP+1,VRREP\n         TM    SW1,KEYSW                WHO DOES HE THINK HE IS?\n         BZ    BUMVEREP                  HE DOESN'T KNOW, TELL HIM\nVEREP    TM    SW2,NAMESW               IN SCOPE OF NAME, CVT, OR UCB?\n         BZ    BUMVEREP                  NO - KVETCH\n         CLI   0(R4),C'='\n         BE    SCANREP\n         CLI   0(R4),C'-'\n         BE    SCANREP\n         CLI   0(R4),C' '\n         BNE   SYNTEX\n         NONBL\nSCANREP  BAL   R9,SCANHEX\n         BO    SYNTEX\n         ST    R0,LOCL\n         NONBL\n         BAL   R9,SCANHEX\n         CLI   HEXSIGN,LCR              IS DATA NEGATED?\n         BE    SYNTEX                    YES - NEGATE ZAPS\n         MZGM  13,VRDAT-VRSECT(R1)      GET STORAGE FOR VER/REP ENTRY\n         USING VRSECT,R1\n         XC    0(VRDAT-VRSECT,R1),0(R1)\nREPTYP   MVI   VRTYPE,VRREP\n         MVC   VRLC,LOCL+1\n         IC    R2,LOCOL\n         BCTR  R2,0\n         STC   R2,VRDATLN\n         EX    R2,FILLREP\n         OI    SW2,VEREPSW              VER/REP OVERLAY REQUIRED\n         B     CHAINCC\n         SPACE 2\nFILLREP  MVC   VRDAT(0),ODATA\n         DROP  R1\n         SPACE 2\n         OP    REP\n         B     R\n         SPACE 2\n         OP    R\n         B     R\n         MZSHD 'DUMP, ...'\n         OP    DUMPB\n         B     SCANDUMP\n         SPACE 2\n         OP    DUMPA\n         MVI   NAMTYP+1,VRDUMPA\n         MVI   DMPTYP+1,VRHDUMPA\n         OI    SW1,DAFTSW               FORCE DUMP AFTER OVERLAY\n         B     SCNDMP\n         SPACE 2\n         OP    DUMPT\n         MVI   NAMTYP+1,VRDUMPT\n         MVI   DMPTYP+1,VRHDUMPT\n         OI    SW1,DAFTSW\n         B     SCNDMP\n         SPACE 2\n         OP    DUMP,NEXT=*\nSCANDUMP MVI   NAMTYP+1,VRDUMP\n         MVI   DMPTYP+1,VRHDUMP\n         OI    SW1,DBEFSW               FORCE DUMP-BEFORE OVERLAY\nSCNDMP   CLI   0(R4),C'='\n         BE    SCNHDMP\n         CLI   0(R4),C'-'\n         BE    SCNHDMP\n         CLI   0(R4),C' '\n         BNE   SYNTEX\n         NONBL\n         CLI   0(R4),C'='\n         BE    SCNHDMP\n         CLI   0(R4),C'-'\n         BE    SCNHDMP\n         NI    SW2,255-NAMESW           V/R FOLLOWING IST VERBOTEN\n         B     SCANNAM\nSCNHDMP  BAL   R9,SCANHEX\n         BO    SYNTEX\n         ST    R0,LOCL\n         NONBL\n         BAL   R9,SCANHEX\n         BNP   SYNTEX\n       GETMAIN R,LV=VRLEN+4-VRSECT,SP=13\n         USING VRSECT,R1\n         XC    VRSECT(VRLEN+4-VRSECT),VRSECT\n         MVC   VRLC,LOCL+1\n         MVC   VRLEN,LOCO\nDMPTYP   MVI   VRTYPE,VRDUMP\n         B     CHAINCC\n         DROP  R1\n         MZSHD 'SUBROUTINES AND DATA AREAS'\n         SR    R2,R2                    ALT EP TO CHAIN NEW NAME/INDEX\n*                                       BYPASS DIRECT USE OF THE MACRO\n*                                        GETMAIN UNTIL THE HAMORIM FIX\n*                                        THE MACRO.\n*                                       UP YOUR CNOP.!\n         PRINT GEN\nCHNMIX   MZGM  13,VRCSECT+8-VRSECT+VRIXNAME+8-VRSECT\n         PRINT NOGEN\n         USING VRSECT,R1\n         XC    VRSECT(VRCSECT+8-VRSECT+VRIXNAME+8-VRSECT),VRSECT\n         LA    R0,VRCSECT+8\n         ST    R0,VRNEXT\n         MVI   VRTYPE,VRNAME\n         MVI   VRNAM,C'.'\n         MVC   VRCSECT,0(R9)\n         MVI   VRTYPE+VRCSECT+8-VRSECT,VRINDEX\n         MVC   VRLINE+VRCSECT+8-VRSECT,LINENO\n         MVC   VRIXNAME+VRCSECT+8-VRSECT,8(R9)\n         OI    SW1,CSECTSW\n         OI    SW2,NAMESW+LPASW\n         LA    R2,0(R2)\n         LTR   R2,R2\n         BZ    CHAINCCM\n         ST    R2,VRLOC+VRCSECT+8-VRSECT\n         MVI   VRFLG+VRCSECT+8-VRSECT,VRFND\n         B     CHAINCCM\n         DROP  R1\n         SPACE 3\n         USING UCMXECB,R14\n         USING UCMECB,R15\nFINDUCM  L     R14,CVTCUCB\n         LM    R15,R1,UCMVEA\n         EX    0,0(,R9)\n         BE    4(R9)\n         BXLE  R15,R0,*-8\n         MZERR 'MZP205I NOT A VALID CONSOLE'\n         DROP  R14,R15\n         SPACE 3\nSCANUCM  BAL   R9,SCANDEC\n         BNP   SYNTEX\n         CH    R0,=H'31'\n         BH    SYNTEX\n         STC   R0,TSTUCMID+1\n         USING UCMECB,R15\n         BAL   R9,FINDUCM\nTSTUCMID CLI   UCMID,0\n         BR    R8\n         SPACE 2\nSCANCUCB LA    R4,5(R4)\n         SH    R5,*-2\n         BNP   SYNTEX\n         BAL   R9,SCANUCB\n         BAL   R9,FINDUCM\n         C     R2,UCMUCB\n         BR    R8\n         DROP  R15\n         SPACE 2\nSCANUCB  CLI   0(R4),C'='               EQUAL SIGN?\n         BNE   SCANUCB1                  NO\n         BUMP  SYNTEX                    YES - BYPASS IT\nSCANUCB1 L     R1,CVTILK2               GET UCB LOOKUP TABLE\nSCANUCB2 CLI   0(R1),X'FF'              END OF LOOKUP TABLE?\n         BE    NOUCB                     YES - BAD CUU\n         MZITH R2,0(R1)                 GET UCB ADDRESS IN LOW BYTES\n         LA    R1,2(,R1)                POINT TO NEXT ENTRY IN LOOKUP\n         BZ    SCANUCB2                 IGNORE DUMMY POINTERS\n         USING SRTE,R2\n         CLC   UCBNAME,0(R4)            IS THIS THE ONE?\n         BNE   SCANUCB2                  IF AT FIRST YOU DON'T SUCCEED\n         BR    R9\n         SPACE 2\nSCANDEC  SR    R0,R0\n         MVI   DECSIGN,LTR\n         CLI   0(R4),C'-'\n         BNE   *+14\n         MVI   DECSIGN,LCR\n         BUMP  SYNTEX\n         TM    0(R4),C'0'\n         BNO   SYNTEX\nDECDIGIT LA    R14,15\n         MH    R0,=H'10'\n         IC    R15,0(R4)\n         NR    R15,R14\n         AR    R0,R15\n         BUMP  SYNTEX\n         TM    0(R4),C'0'\n         BO    DECDIGIT\nDECSIGN  LTR   R0,R0\n         BR    R9\n         SPACE 2\nSCANHEX  XC    ODATA,ODATA\n         CLI   0(R4),C'='\n         BNE   *+10\n         BUMP  SYNTEX\n         MVI   HEXSIGN,LTR\n         CLI   0(R4),C'-'\n         BNE   *+14\n         MVI   HEXSIGN,LCR\n         BUMP  SYNTEX\n         LA    R6,ODATA\n         SR    R1,R1\n         SR    R0,R0\n         MVI   SCAN2+1,0                SET MODE TO HEX DIGITS\nSCAN2    B     SCANBYTE\n         CLI   0(R4),C''''              IS IT INITIAL APOSTROPHE?\n         BNE   SCANDIGS                  NO - SCAN TWO HEX DIGITS\n         BUMP  SYNTEX                    YES\n         MVI   SCAN2+1,X'F0'            SET MODE TO STRING\nSCANBYTE CLI   0(R4),C''''              IS DOUBLE CHAR REQUIRED?\n         BE    *+12                      YES\n         CLI   0(R4),C'&&'\n         BNE   SCANBYT                   NO\n         CLC   0(2,R4),0(R4)            IS 2ND CHAR SAME AS 1ST?\n         BNE   SYNTEX                    NO - ERROR\n         BUMP  SYNTEX                   BYPASS 1ST CHAR\nSCANBYT  IC    R0,0(R4)                 GET CURRENT BYTE\n         BUMP  SYNTEX\n         CLI   0(R4),C''''              IS THIS ALL THERE IS?\n         BNE   SCAN3                     NO\n         CLI   1(R4),C''''               MAYBE - MIGHT BE DOUBLE '\n         BE    SCAN3                     NO\n         BUMP  SYNTEX                    YES\n         MVI   SCAN2+1,0                BACK TO DIGIT MODE\n         B     SCAN3\nSCANDIGS BAL   R15,DIGIT\n         BAL   R15,DIGIT\nSCAN3    STC   R0,0(R6)\n         LA    R6,1(R6)\n         LA    R1,1(R1)\n         EX    0,SCAN2                  GO TO SCANBYTE IF STRING MODE\n         CLI   0(R4),C','\n         BNE   *+10\n         BUMP  SYNTEX\n         CLI   0(R4),C'-'               END OF FIELD?\n         BE    *+28\n         CLI   0(R4),C'/'\n         BE    *+20\n         CLI   0(R4),C':'\n         BE    *+12\n         CLI   0(R4),C' '\n         BNE   SCAN2\n         ST    R0,LOCO\n         STC   R1,LOCOL\n         CLI   LOCOL,4                  IS LENGTH GE 4?\n         BL    HEXSIGN\n         TM    *+1,1                    SET CC TO 3(O)\n         BR    R9\nHEXSIGN  LTR   R0,R0\n         BR    R9\nLCR      EQU   X'13'\nLTR      EQU   X'12'\n         SPACE 2\nDIGIT    TM    0(R4),X'C0'\n         BNO   SYNTEX\n         TM    0(R4),X'30'\n         BM    SYNTEX\n         SR    R14,R14\n         NI    0(R4),X'1F'\n         IC    R14,0(R4)\n         IC    R14,HEXT1(R14)\n         EX    R14,CLIFF\n         BE    SYNTEX\n         SLL   R0,4\n         OR    R0,R14\n         BUMP  SYNTEX\n         BR    15\n         SPACE 1\nCLIFF    CLI   =X'FF',0                 EXECUTED TO TEST FOR BAD HEX\n         SPACE 2\nSCANEBC  MVC   EBC,BLANKARD\n         LA    R1,EBC\n         LA    R0,8\nSCANEBC1 MVC   0(1,R1),0(R4)\n         CLI   0(R1),C'+'               IS IT +0 FOR DING-DONG SVC?\n         BNE   *+8                       NO\n         MVI   0(R1),X'C0'               YES - MAKE IT +0\n         BUMP  SYNTEX\n         CLI   0(R4),C' '\n         BER   R9\n         CLI   0(R4),C'.'\n         BER   R9\n         LA    R1,1(R1)\n         BCT   R0,SCANEBC1\n         B     SYNTEX\n         SPACE 2\nBUMPCOL  LA    R4,1(R4)\n         BCT   R5,2(R14)\n         LH    R15,0(R14)\n         B     0(R11,R15)\n         SPACE 2\nHEXTAB   DC    C'0123456789ABCDEF'\nHEXT1    DC    AL1(255,10,11,12,13,14,15),9AL1(255)\n         DC    AL1(0,1,2,3,4,5,6,7,8,9),6AL1(255)\nLOCL     DS    A\nLOCO     DS    A\nLOCOL    DS    X\nMODNAME  DS    D\nEBC      DS    CL8\n         SPACE 1\nREFPTR   DS    A\nLENB     DS    H\nIXB      DS    H\n         LTORG\n         DROP  R11,R12\n         LTORG\n         EJECT\n        MZWORK TIOT=YES,UCB=YES,MAIN=YES,GEN=NOGEN\n         MZSHD 'UCM, ... MAP'\nIEECUCM  DSECT\n         PRINT GEN\n       IEECUCM\n         END\n./ ADD NAME=MZAP3    0100-19106-19106-1238-00194-00194-00000-MZAP78  18\nMZAP3    TITLE 'MOREZAP CDE AND LPDE LOOKUP - COPYRIGHT 1975 SHMUEL MET*\n               Z'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         SPACE 5\n         MACRO\n&L       MZ3   &TYPE\n         COPY  MZGBL\n         MZSET\n         AIF   ('&TYPE' EQ 'CDE').CDE\n         MNOTE 12,'&&TYPE=&TYPE IS INVALID'\n         MEXIT\n.*\n.CDE     AIF   ('&CPU' EQ '370').CDE370\n&L       MVC   VRCDEPTR+1(3),LLCDPTR+1\n         MEXIT\n.CDE370  ANOP\n&L       STCM  R6,7,VRCDEPTR+1\n         MEXIT\n         MEND\n         SPACE 5\n         COPY  MZGBL\n         PUNCH '         ALIAS MZAPCDE'\n         TITLE 'MOREZAP CDE LOOKUP'\n         PRINT GEN\nMZAPCDE  MZENT\n         NI    SW2,255-LPASW\n         SR    R8,R8                    LIB AUTO\n         L     R4,HEAD\n         USING VRSECT,R4\nNXTVR    CLI   VRTYPE,VRNAME\n         BL    NEXTVR\n         CLI   VRTYPE,VRLIB\n         BE    LIB\n         CLI   VRTYPE,VRDUMPT\n         BH    NEXTVR\n         TM    VRFLG,VRFND              WAS RESOLUTION FORCED BY GETCC?\n         BO    NEXTVR                    YES - LET IT BE\n         CLI   VRNAM,C'.'\n         BE    NUCLIM\n         TM    SW1,NOTNUC\n         BO    FAKEFIND\n         MZKEY 0\n         MZSSM DIS\n         MZLT  R6,TSLPA\n         L     R7,CMDL\n         BZ    NOTSO\n         MZLT  R2,CVTTSCVT\n         BZ    NOTSO\n         USING TSCVT,R2\n         CLC   TSLPA+1(3),TSCVTLPA+1\n         BNE   NOTSO\n         USING CDENTRY,R6\n         SPACE 1\nNXTCDE   CLC   CDNAME,VRNAM\n         BE    FNDCDE\n         MZLT  R6,CDCHAIN\n         BNZ   NXTCDE\n         SPACE 1\nNOTSO    LTR   R7,R8                    GET LIB DCB\n         BNZ   NOTAUTO\n         L     R7,SVC                   IS IT IFG, IGC, IGG, IGF, ETC.?\n         CLC   =C'IFG',VRNAM             O/C/EOV?\n         BE    NOTAUTO                    YES\n         CLC   =C'IG',VRNAM              SVC, EREP, AM, ETC.?\n         BE    NOTAUTO                    YES\n         L     R7,LINK                    NO\n         SPACE 1\nNOTAUTO  TM    CVTDCB,CVT6DAT           IS THIS VS?\n         BZ    NOTVS                     NO - MVT\n         ICM   R6,7,CVTQLPAQ+1          IS THERE A MLPA?\n         BZ    NOMLPA                    NO - SEARCH FLPA\nNXTCDE1  CLC   CDNAME,VRNAM\n         MNOTE 0,'LATER ON, CODE SHOULD BE ADDED TO SUPPRESS PAGEOUT'\n         MNOTE 0,' IF THIS IS ALSO IN PLPA'\n         BE    FNDCDE\n         MZLT  R6,CDCHAIN\n         BNZ   NXTCDE1\n         SPACE 2\n*        REG   IEAVVMSR INPUT           IEAVVMSR OUTPUT\n*        R0    NAME(1-4)                L(LPDE)\n*        R1    NAME(5-8)\n*        R3    L(CVT)\n*        R7    BASE\n*        R14   +0 OK\n*              +4 NOT FOUND (R0-R6 UNCHANGED)\n         SPACE 1\nNOMLPA   LM    R0,R1,VRNAM\n         L     R7,CVTLPDSR              LPDA SEARCH EP\n         BALR  R14,R7\n         B     *+8\n         B     NOTFOUND\n         USING LPDE,R1\n         OI    VRCDEPTR,VRISLPDE        FLAG AS LPDA\n         STCM  R0,7,VRCDEPTR+1\n         LR    R1,R0                    ESTABLISH ADDRESSABILITY\n         MVC   VRBEGIN,LPDEXTAD\n         MVC   VRSIZE,LPDEXTLN+1\n         OI    VRFLG,VRXLE+VR1XL\n         L     R7,LPAL                  LIB=SYS1.LPALIB\n         B     NEXTVR1\n         DROP  R1\n         SPACE 2\nNOTVS    L     R5,CVTHEAD               GET MASTER SCHEDULER TCB\n         USING TCB,R5\n         L     R5,TCBOTC\n         L     R5,TCBLLS                GET MS LLE CHAIN FOR LINKPACK\n         USING LLE,R5\nNXTLLE   L     R6,LLCDPTR\n         USING CDENTRY,R6\n         CLC   CDNAME,VRNAM\n         BNE   NEXTLLE\nFNDCDE   MZSTA R6,VRCDEPTR\n         TM    CDATTR,CDMIN             IS THIS MINOR CDE?\n         BZ    *+8                       NO - MAJOR\n         L     R6,CDXLMJP                YES - GET MAJOR CDE\n         TM    CDATTR2,CDXLE            ANY XL?\n         BZ    NEXTVR1                   NO - ENABLE & GET NEXT VR\n         L     R6,CDXLMJP               GET XL\n         OI    VRFLG,VRXLE\n         USING XL,R6\n         L     R1,EXLNUMRL              # RELOC FACTORS = 1?\n         BCT   R1,MULTXTNT\n         OI    VRFLG,VR1XL\n         MVC   VRBEGIN+1(3),EXLISTLN+5\n         MVC   VRSIZE,EXLISTLN+1\n         B     NEXTVR1\nMULTXTNT OI    SW1,CSECTSW              FORCE ESD LOAD FOR MULT XL\n         SPACE 1\nNEXTVR1  MZSSM ENB\n         MZKEY KLUB                     BACK TO NORMAL KEY\n         SPACE 1\nSETDCB   MZSTA R7,VRDCBPT\n         SPACE 1\nNEXTVER  TM    VRFLG,VRXLE              IF NOT FOUND,\n         BZ    BADVR                     SET NOGO\n         CLI   VRCSECT,0                IF CSECT NAME SPECIFIED,\n         BNZ   NEXTVR\n         OI    VRFLG,VRFND+VRNAMFND\n         TM    VRFLG,VR1XL              IS IT BLOCK LOAD?\n         BO    NEXTVR                    YES - CSECTS OPTIONAL\nBADVR    OI    SW1,NOGO                 SUPPRESS REPS\n         OI    VRFLG,VRFAIL\nNEXTVR   MZLT  R4,VRNEXT\n         BNZ   NXTVR\n         L     R15,ADDT\n         TM    SW1,DEBUGSW\n         BO    BYBY\n         L     R15,AESP\n         TM    SW1,CSECTSW\n         BO    BYBY\n         L     R15,AHOVEL\n         TM    SW1,DBEFSW\n         BO    BYBY\n         L     R15,APATCH\n         TM    SW2,VEREPSW\n         BO    BYBY\n         L     R15,A#666\nBYBY     MZGO\n         SPACE 2\nLIB      L     R8,VRDCB\n         LA    R8,0(,R8)\n         B     NEXTVR\n         SPACE 1\n         SPACE 2\nFAKEFIND OI    VRFLG,VRXLE+VR1XL        FAKE CDE FOUND\n         MVI   VRSIZE,255                B I G\n         OI    SW1,CSECTSW\n         B     NEXTVER\n         SPACE 2\nNUCLIM   MVC   VRSIZE,CVTNUCB+1\n         OI    VRFLG,VRXLE+VR1XL        NOT TRUE BUT NEEDED BY V/R OVLY\n         LA    R7,SYSNUC\n         B     SETDCB\n         SPACE 2\nNEXTLLE  MZLT  R5,LLECHAIN\n         BNZ   NXTLLE\nNOTFOUND OI    SW1,NOGO                 MODULE NOT FOUND - SUPPRESS REP\n         B     NEXTVR1\n         LTORG\n         PRINT NOGEN\n        MZWORK MAIN=YES,TCB=YES,CD=YES\n      IKJTSCVT\n         END\n./ ADD NAME=MZAP4    0100-19106-19106-1238-00939-00939-00000-MZAP78  18\nMZAP4    TITLE 'MOREZAP ESD AND SCATTER/TRANSLATE PROCESSOR - COPYRIGHT*\n                1975 SHMUEL METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         SPACE 5\n         MACRO\n         MZ4   &TYPE\n         COPY  MZGBL\n         AIF   ('&TYPE' EQ 'GML').GML\n         AIF   ('&TYPE' EQ 'NUCRES').NUC\n         MNOTE 12,'INVALID &&TYPE SPECIFIED'\n         MEXIT\n.GML     AIF   (&VS1).VS1GML\n         MVI   GML+8,X'80'\n         CLI   VRNAM,C'.'\n         BE    GMBUF\n         MVI   GML+4,X'80'\n         MEXIT\n.VS1GML  MVI   GML+4,X'80'\n         CLI   VRNAM,C'.'\n         BNE   GMBUF\n         L     R1,CVTPCVT\n         MVC   GMA+8(4),PCVADTB\n         MEXIT\n.NUC     L     R9,GMA+8\n         CLI   VRNAM,C'.' .             IS THIS NUCLEUS?\n         AIF   ('&SYS'(1,2) EQ 'VS').VS1NUC\n         BNE   SCTRFIX .                 NO\n         MZSHD 'NUCLEUS RELOCATION'\n         LA    R0,4 .                   INCREMENT\n         LR    R1,R5 .\n         AH    R1,HWSCTRLN .\n         SR    R1,R0 .                  SCTR+SCTRLEN-4\n         BCTR  R1,0 .\n         L     R4,GMA+8 .\n         L     R14,4(R5) .\n         LR    R15,R14\n         SL    R14,0(R5)\n         ST    R14,0(R4)\n         LA    R4,4(R4)\n         BXLE  R5,R0,*-18\n         L     R14,BLDLSIZE\n         SRA   R14,8\n         LA    R14,7(R14)\n         N     R14,=X'FFFFFFF8'\n         LR    R0,R14 .                 SAVE FOR NIP RELOC\n         SLR   R14,R15\n         ST    R14,0(R4)\n         L     R5,TRLOC .               TR(1)=IEAANIP0\n         LH    R4,2(R5)\n         SLA   R4,2\n         AR    R4,R9\n         SL    R0,0(R4) .               NIP LOC = NUC LEN - NIP LEN\n         ST    R0,0(R4)\n         MVI   0(R4),X'80'\n         LA    R5,4(R5) .               TR(2)=IEAQFX00\n         LA    R0,2 .                   INCREMENT\n         L     R1,SCLOC .               LAST TR ENTRY\n         SR    R1,R0 .                   IS SC(-1)\n         SR    R14,R14\nRESOLVTR LH    R4,0(R5)\n         SLA   R4,2\n         BZ    NOTR\n         AR    R4,R9\n         CLI   0(R4),0 .                WAS THIS SC ENTRY RESOLVED?\n         BH    NOTR .                    YES - ONCE IS ENOUGH\n         L     R15,0(R4)\n         ST    R14,0(R4)\n         ALR   R14,R15\n         MVI   0(R4),X'80'\nNOTR     BXLE  R5,R0,RESOLVTR\n*              R5 NOW -> SC(0)\n         B     NUCFIX\n         MZSHD 'SCATTER LOADABLE RESOLUTION'\n         MEXIT\n.VS1NUC  BE    NUCFIX                    YES\n         MEXIT\n         MEND\n         SPACE 5\n         COPY  MZGBL\n         MZSET\n         PUNCH '         ALIAS MZAPESD'\n         TITLE 'MOREZAP ESD AND SCATTER/TRANSLATE PROCESSOR'\n         MZHED 'MOREZAP ESD AND SCTR/TRANS PROCESSOR',LEN=37\n*              AND HOW AM I TO FACE THE ODDS\n*              OF MAN'S BEDEVILMENT AND GOD'S?\n*              I, A STRANGER AND AFRAID\n*              IN A WORLD I NEVER MADE.\n         SPACE 1\n*              A. E. HAUSSMAN, LAST POEMS XII\n         SPACE 1\n         PRINT GEN\nMZAPESD  MZENT\n         L     R7,HEAD\n         USING VRSECT,R7\n         MZSHD 'MAIN LOOP'\nLUPUS    TM    VRFLG,VRNAMFND           IS NAME ALREADY PROCESSED?\n         BO    CANIS                     YES\n*              VRBOUNDS CANNOT BE SET YET IN V|R ENTRIES\n         SPACE 1\n         TM    VRFLG,VRXLE              WAS MEMBER CDE FOUND?\n         BZ    CANIS                     NO\n         CLI   VRTYPE,VRNAME\n         BL    CANIS\n         TM    VRFLG,VRFND\n         BO    CANIS\n         CLI   VRTYPE,VRHDUMP\n         BL    FIND\nCANIS    MZLT  R7,VRNEXT\n         BNZ   LUPUS\n         L     R7,HEAD\nNEXTFLOT L     R1,VRLOC                 GET LOC, INDEX, BASE, ETC.\n         LA    R1,0(R1)\n         STM   R14,R12,12(R13)                            *** DEBUG ***\n         CLI   VRTYPE,VRNAME\n         BL    *+12\n         CLI   VRTYPE,VRDUMPT\n         BNH   VRNM\n         CLI   VRTYPE,VRINDEX\n         BE    VRIX\n         CLI   VRTYPE,VRHINDEX\n         BE    VRHIX\n         CLI   VRTYPE,VRBASE\n         BE    VRBS\n         CLI   VRTYPE,VRREP             IS THIS VER/REP?\n         BNH   VRVR                      YES\n         CLI   VRTYPE,VRHDUMP           IS THIS HEX DUMP?\n         BL    NXTFLOAT                  NO\n         CLI   VRTYPE,VRHDUMPT\n         BNH   VRDMP\n         CLI   VRTYPE,VRSAVE            TEST FOR POINTER MANIPULATION\n         BL    NXTFLOAT\n         L     R14,VRPTR\n         BE    SAVEFLOT\n         CLI   VRTYPE,VRREFER\n         BL    VRVR\n         CLI   VRTYPE,VRUNSAVE\n         BL    REFER\n*        BE    UNSAVE\n         CLI   0(R14),X'80'             HAS THIS REF BEEN SET?\n         BNE   BUMPTR                    NO - CAN'T REFERENCE IT\n         L     R4,0(,R14)               RESTORE BEGIN\n         LA    R4,0(,R4)\n         ST    R4,VRABS\n         MVC   VRLENB(4),4(R14)\n         LH    R5,4(,R14)               RESTORE END+1\n         LH    R15,6(,R14)              RESTORE INDEX\n         LA    R15,0(R4,R15)\n         MZSTA R15,VRLOC\nUNSAVELN LA    R5,0(R4,R5)\n         OI    VRFLG,VRFND\n*        B     NXTFLOAT\n         SPACE 1\nNXTFLOAT MZLT  R7,VRNEXT\n         BNZ   NEXTFLOT\nLISTEM   L     R7,HEAD\nNEXTLIST TM    VRFLG,VRFAIL\n         BNZ   LISTIT\n         CLI   VRTYPE,VRINDEX\n         BE    LISTIT\n         CLI   VRTYPE,VRREFER\n         BNL   LISTIT\n         CLI   VRTYPE,VRNAME\n         BL    LISTNEXT\n         CLI   VRTYPE,VRDUMPT\n         BNH   LISTIT\nLISTNEXT NI    VRFLG,255-VRFAIL\n         MZLT  R7,VRNEXT\n         BNZ   NEXTLIST\n         NI    SW1,255-CSECTSW\n         TM    SW1,NOTNUC\n         BZ    *+8\n         NI    SW2,255-VEREPSW\n         L     R15,ADDT\n         TM    SW1,DEBUGSW\n         BO    BYBY\n         L     R15,AHOVEL\n         TM    SW1,DBEFSW\n         BO    BYBY\n         L     R15,APATCH\n         TM    SW2,VEREPSW\n         BO    BYBY\n         L     R15,AHOVEL\n         TM    SW1,DAFTSW\n         BO    BYBY\n         L     R15,A#666\nBYBY     MZGO\n         MZSHD 'INFORMATIVE && DIAGNOSTIC MSGS'\nLISTIT   EX    0,BLCARD\n         MZMVC 'MZP410I'\n         LH    R0,VRLINE\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,15\n         UNPK  IBUF+8(5),DOUBLE\n         CLI   VRTYPE,VRREP\n         BNH   VBOUNDED\n         CLI   VRTYPE,VRINDEX\n         BE    LISTIX\n         CLI   VRTYPE,VRMVC\n         BE    VBOUNDED\n         BH    LISTREFR\n         CLI   VRTYPE,VRDUMPT\n         BH    DBOUNDED\n         MVC   IBUF+14(5),=C'NAME:'\n         MVC   IBUF+20(8),VRNAM\n         CLI   VRNAM,C'.'\n         BNE   *+10\n         MVC   IBUF+20(8),NUCMEM\n         TM    VRFLG,VRXLE\n         BZ    NOTINLPA\n         TM    VRFLG,VRNAMFND\n         BZ    NOTINDIR\n         MVC   IBUF+29(8),VRCSECT\n         TM    VRFLG,VRFND\n         BZ    NOTFOUND\n         MVI   IBUF+5,C'3'\n         MVC   IBUF+38(4),=C'ABS:'\n         MZHEX IBUF+43,VRLC,6,BL=':'\n         L     R0,VRBEGIN\n         AL    R0,VRSIZE-1\n         BCTR  R0,0\n         ST    R0,DOUBLE\n         MZHEX IBUF+50,DOUBLE+1,6\n*        B     LIST1\n         SPACE 1\nLIST1    BAL   R14,PUTGOT\n         B     LISTNEXT\n         SPACE 1\nLISTREFR TM    VRFLG,VRBOUNDS\n         BO    PBOUNDED\n         MVI   IBUF+4,C'2'\n         TM    VRFLG,VRFAIL\n         BZ    LISTPNT\n         CLI   VRTYPE,VRUNSAVE\n         BE    LISTUNSV\n         MVC   IBUF+14(18),=C'INVALID POINTER AT'\n         MZHEX IBUF+33,VRAB,6\n         B     LIST1\n         SPACE 1\nLISTUNSV MVI   IBUF+5,C'1'\n         MVC   IBUF+57(22),=C'-> IS INV: REF NOT SET'\n         B     LIST1\n         SPACE 1\nLISTPNT  TM    VRFLG,VRFND\n         BZ    LISTNEXT\n         MVI   IBUF+5,C'2'\n         MVC   IBUF+14(6),=C'INDEX:'\n         L     R0,VRABS                 CALCULATE INDEX\n         LR    R1,R0                    AND LIMITS\n         AH    R0,VRIXB\n         AH    R1,VRLENB\n         BCTR  R1,0\n         STM   R0,R1,DOUBLE\n         MZHEX IBUF+21,DOUBLE+1,6\n         MVC   IBUF+35(7),=C'LIMITS:'\n         MZHEX IBUF+43,VRAB,6,BL=':'\n         MZHEX IBUF+50,DOUBLE+5,6\n         B     LIST1\n         SPACE 1\nNOTINLPA MVC   IBUF+29(10),=C'NOT LOADED'\n         B     LIST1\n         SPACE 1\nNOTINDIR MVI   IBUF+5,C'1'\n         MVC   IBUF+29(16),=C'NOT IN DIRECTORY'\n         B     LIST1\n         SPACE 1\nNOTFOUND MVI   IBUF+5,C'2'\n         MVC   IBUF+38(9),=C'NOT FOUND'\n         B     LIST1\n         SPACE 1\nLISTIX   MVC   IBUF+14(5),=C'ENTRY'\n         MVC   IBUF+20(8),VRIXNAME\n         TM    VRFLG,VRFND\n         BO    IXFOUND\n         MVI   IBUF+5,C'4'\n         MVC   IBUF+57(9),=C'NOT FOUND'\n         B     LIST1\n         SPACE 1\nIXFOUND  MVI   IBUF+5,C'5'\n         MVC   IBUF+38(4),=C'ABS:'\n         MZHEX IBUF+43,VRLC,6\n         B     LIST1\n         SPACE 1\nPBOUNDED SR    R1,R1\n         IC    R1,VRPTR\n         IC    R1,LENPTR(R1)\n         B     BOUNDED\n         SPACE 1\nVBOUNDED SR    R1,R1\n         IC    R1,VRDATLN\n         B     BOUNDED\n         SPACE 1\nDBOUNDED L     R1,VRLEN\n         BCTR  R1,0\n*        B     BOUNDED\n         SPACE 1\nBOUNDED  MVI   IBUF+5,C'6'\n         MVC   IBUF+15(4),=C'REL:'\n         LM    R14,R15,VRLOC            (14,15)<-(VRLOC,VRABS)\n         LCR   R0,R14\n         TM    VRLC,X'80'               IS LOC NEGATIVE?\n         BZ    POSLOCB                   NO - PRINT SIX DIGITS\n         ST    R0,DOUBLE\n         MVI   IBUF+23,C'-'\n         MZHEX IBUF+24,DOUBLE+2,4,BL=*\n         B     NEGLOCB\nPOSLOCB  MZHEX IBUF+22,VRLC,6,BL=':'\nNEGLOCB  EQU   *-4\n         LA    R14,0(R14,R1)\n         AR    R15,R1\n         STM   R14,R15,DOUBLE\n         LCR   R14,R14                  IS LOC+LEN-1 NEGATIVE?\n         TM    DOUBLE+1,X'80'\n         BZ    POSLOCE                   NO  - PRINT SIX DIGITS\n         ST    R14,ODWORD                YES - PRINT FOUR DIGITS\n         MVI   IBUF+30,C'-'\n         MZHEX IBUF+31,ODWORD+2,4,BL=*\n         B     NEGLOCE\nPOSLOCE  MZHEX IBUF+29,DOUBLE+1,6\nNEGLOCE  EQU   *-4\n         MVC   IBUF+38(4),=C'ABS:'\n         MZHEX IBUF+43,VRAB,6,BL=':'\n         MZHEX IBUF+50,DOUBLE+5,6\n         MVC   IBUF+57(12),=C'OUT OF RANGE'\n         B     LIST1\n         MZSHD 'NAME, INDEX, VER, REP, DUMP, ->, <-, AND MVC'\nREFER    SR    R6,R6\n         IC    R6,VRPTR\n         IC    R6,LENPTR(R6)\n         B     VRVR+6\nLENPTR   DC    AL1(3,2,1,1)\n         SPACE 1\nMVC      EX    R6,MVCMVC\n         B     NXTFLOAT\nMVCMVC   MVC   0(,R14),0(R1)\n         SPACE 1\nSAVEFLOT ST    R4,VRABS                 SAVE BEGIN\n         ST    R4,0(,R14)               SAVE BEGIN\n         LR    R0,R5                    VRLENB=END+1-BEGIN\n         SR    R0,R4\n         STH   R0,VRLENB\n         LR    R0,R15                   VRIXB=ABSINDEX-BEGIN\n         SR    R0,R4\n         STH   R0,VRIXB\n         MZSTA R15,VRLOC\nSETREFLN MVC   4(4,R14),VRLENB          STORE VRLENB AND VRIXB\n         MVI   0(R14),X'80'             FLAG AS VALID\n         B     NXTFLOAT\n         SPACE 1\nVRNM     TM    VRFLG,VRFND              WAS CSECT FOUND?\n         BZ    FAILNAME                  NO - SET NOGO\n         LR    R9,R7                    SAVE ENTRY IN CASE OF FAIL\n         LR    R4,R1                    GET ABS LOC\n         LR    R15,R1                   INDEX=0\n         L     R5,VRSIZE-1              GET END+1 = LOC+LEN\n         LA    R5,0(R4,R5)               WITH HIGH BYTE = 0\n         B     NXTFLOAT\n         SPACE 1\nVRIX     TM    VRFLG,VRFND              WAS CSECT/EP FOUND?\n         BZ    FAILIX                    NO - SET NOGO\n         L     R4,VRLOC-VRSECT(R9)      RESET BEGIN FROM NAME ENTRY\n         L     R5,VRSIZE-1-VRSECT(R9)   RESET END+1\n         LA    R4,0(,R4)\n         LA    R5,0(R4,R5)\n         LR    R15,R1                   INDEX=NEW INDEX\n         B     NXTFLOAT\n         SPACE 1\nVRBS     LCR   R1,R1                    INDEX=INDEX+(-BASE)\nVRHIX    AR    R15,R1                   INDEX=INDEX+NEW INDEX\n         B     NXTFLOAT\n         SPACE 1\nVRVR     SR    R6,R6                    GET V|R LEN-1\n         IC    R6,VRDATLN\n         LA    R1,0(R1,R15)             ADD INDEX-BASE TO REL LOC\n         MZSTA R1,VRABS\n         LA    R0,0(R1,R6)              CALC END=START+LEN-1\n*              THE PREVIOUS TWO LA INSTRUCTIONS MUST NOT BE LR,\n*              SINCE THE HIGH BYTE MUST BE ZEROED;\n*              NOTE THAT I KEEP NEGATIVE DISPLACEMENTS AS TWO'S COMP.\n         OI    VRFLG,VRFND\n         CR    R0,R1                    WRAP AROUND ERROR?\n         BL    FAILVR\n         CR    R1,R4                    ADDRESS TOO LOW?\n         BL    FAILVR                    YES\n         CR    R0,R5                    LENGTH TOO LONG?\n         BNL   FAILVR                    YES - FAIL IT\n         CLI   VRTYPE,VRMVC\n         BE    MVC\n         CLI   VRTYPE,VRREFER\n         BE    *+12\n         CLI   VRTYPE,VRPOINT\n         BNE   NXTFLOAT\n         EX    R6,MOVEPTR\n         L     R1,DOUBLE\n         IC    R6,VRPTR\n         SLA   R6,2\n         EX    0,GETPTR(R6)\n         LTR   R1,R1                    INVALID Y PTR?\n         BE    BUMPTR                    YES - FAIL IT\n         SH    R1,VRIXB                 POINT TO PREFIX\n         ST    R1,VRABS\n         MVI   VRABS,0\n         CLI   VRTYPE,VRPOINT\n         BE    *+12\n         ST    R1,0(,R14)\n         B     SETREFLN\n         LR    R4,R1\n         LH    R5,VRLENB\n         LH    R15,VRIXB\n         LA    R15,0(R4,R15)\n         B     UNSAVELN\n         SPACE 1\nMOVEPTR  MVC   DOUBLE(0),0(R1)\nGETPTR   LA    R1,0(R1)\n         SRL   R1,8\n         SRL   R1,16\n         SRA   R1,16\n         SPACE 1\nFAILVR   OI    VRFLG,VRBOUNDS           FAIL V, R, DUMP, ETC.\nBUMPTR   OI    VRFLG,VRFAIL             FAIL POINT, UNSAVE, ETC.\n         OI    SW1,NOGO                 STOP ZAPS\n         CLI   VRTYPE,VRREFER           IS FLUSH PROCESSING NEEDED?\n         BL    NXTFLOAT                  NO\n         BH    DEUNSAVE                 FLUSH POINT OR UNSAVE\n         MVI   0(R14),0                 SET REF UNRESOLVED\n         B     NXTFLOAT\n         SPACE 1\nFAILIX   OI    SW1,NOGO\nDEUNSAVE MZLT  R7,VRNEXT\n         BZ    LISTEM\n         CLI   VRTYPE,VRINDEX\n         BE    NEXTFLOT\n         CLI   VRTYPE,VRNAME\n         BL    DEUNSAVE\n         CLI   VRTYPE,VRDUMPT\n         BNH   NEXTFLOT\n         CLI   VRTYPE,VRSAVE\n         BL    DEUNSAVE\n         L     R14,VRPTR\n         BH    *+12\n         MVI   0(R14),0\n         B     DEUNSAVE\n         CLI   VRTYPE,VRREFER\n         BE    *-12\n         BL    DEUNSAVE\n         CLI   VRTYPE,VRPOINT\n         BE    DEUNSAVE\n         B     NEXTFLOT\n         SPACE 1\nVRDMP    L     R6,VRLEN\n         BCTR  R6,0\n         B     VRVR+6\n         SPACE 1\nFAILNAME OI    VRFLG,VRFAIL             FLAG NAME\n         OI    SW1,NOGO                 STOP REPS\nDENAME   MZLT  R7,VRNEXT                SKIP TO NEXT NAME|DUMP ENTRY\n         BZ    LISTEM\n         CLI   VRTYPE,VRNAME\n         BL    DENAME\n         CLI   VRTYPE,VRDUMPT\n         BH    DENAME\n         B     NEXTFLOT\n         MZSHD 'LOAD MODULE PROCESSING'\nFIND     L     R6,VRDCBPT               GET DCB\n         MVC   BLDLENT,VRNAM            NAME FOR BLDL UNLESS NUCLEUS\n         CLI   VRNAM,C'.'               IS THIS NUCLEUS?\n         BNE   NUCOK\n         MVC   BLDLENT,NUCMEM           IEANUC0X IS NAME FOR BLDL\n         TM    SW1,NOTNUC               IS NUC DD BAD?\n         BZ    NUCOK                     NO\n         OI    SW1,NOGO\n         OI    VRFLG,VRNOTNUC\n         USING IHADCB,R6\nNUCOK    LA    R6,0(,R6)                DOES DCB EXIST?\n         LTR   R6,R6\n         BZ    *+12                      NO - DD MUST BE MISSING\n         TM    DCBOFLGS,DCBOFOPN        IS DCB OPEN?\n         BO    FINDIT\n         OI    SW1,NOGO\n         B     CANIS\nFINDIT   XC    BLDL1TTR,BLDL1TTR\n         EX    0,BLCARD                 BLANK MSG IN CASE OF ERROR\n         BLDL  (R6),BLDL\n         MVC   HWSCTRLN(4),PDS2SLSZ     PUT SCLEN AND TRLEN ON HW BOUND\n         B     *+4(R15)\n         B     BLDLOK\n         B     BLDLMISS\n*        B     BLDLIERR\nBLDLIERR MVC   MSGNUM,=C'MZP401I'\n         MVC   MSGTEXT(19),=C'DIRECTORY I/O ERROR'\n         B     SLYDOG                   FINISH ERROR MSG & GO TO CANIS\n         SPACE 1\nBLDLMISS L     R1,CMDL                  WAS CMDLIB JUST SEARCHED?\n         LA    R1,0(,R1)\n         CR    R1,R6\n         BNE   *+12\n         L     R6,LINK                   IF SO, TRY LINKLIB\n         B     NUCOK\n         L     R1,LINK                  WAS LINKLIB JUST SEARCHED?\n         LA    R1,0(,R1)\n         CR    R1,R6\n         L     R6,LPAL                   IF SO, TRY LPALIB\n         BE    NUCOK\n         MVC   MSGNUM,=C'MZP402I'\n         MVC   MSGTEXT(9),=C'NOT FOUND'\n*        B     SLYDOG\n         SPACE 1\nSLYDOG   MVC   MSGDD,DDNAME\n         MVI   MSGDD+8,C'('\n         MVC   MSGMEM,VRNAM\n         MVI   MSGMEM+8,C')'\n         BAL   R14,PUTGOT\n         OI    SW1,NOGO\n         OI    HIGHRC+3,8\n         B     CANIS\n         SPACE 1\nBLDLOK   XC    SSI,SSI\n         LA    R14,31\n         IC    R15,BLDLFLAG\n         NR    R14,R15\n         SLA   R14,1\n         LA    R14,BLDLENT(R14)\n         LA    R15,PDS2SLSZ\n         TM    PDS2ATR1,PDS2SCTR\n         BZ    *+8\n         LA    R15,PDS2EPM-PDS2SLSZ(,R15)\n         TM    BLDLFLAG,X'80'\n         BZ    *+16\n         TM    PDS2ATR1,PDS2RENT+PDS2REUS\n         BZ    *+8\n         LA    R15,11(,R15)\n         LA    R15,1(,R15)\n         SRA   R15,1\n         SLA   R15,1\n         CR    R14,R15\n         BNH   NOSSI\n         TM    PDS2FTB1,PDSAOSLE+PDS2SSI\n         BM    NOSSI\n         MVC   SSI,0(R15)\nNOSSI    FIND  (R6),BLDL1TTR,C\n         XC    SSI,SSI\n         LA    R15,256                  MIN IS SYM/CESD/CON/IDR RECORD\n         LH    R4,HWTRLN                NUMESD*2+2\n         LH    R1,HWSCTRLN              NUMCSECT*4+4\n         LA    R14,4(R1,R4)             4+SCLEN+TRLEN\n         STH   R14,SCTRLEN\n         CR    R15,R14                  SCTRLEN<256?\n         BH    *+6\n         LR    R15,R14\n         CLI   VRNAM,C'.'               NUC MUST BE SCTR\n         BE    *+12\n         TM    VRFLG,VR1XL\n         BO    BLOCKLD\n         TM    PDS2ATR1,PDS2SCTR        BLOCK HIARCHY OR BAD ATR?\n         BZ    NOTSCTR                   YES - ERR MSG\n         LR    R0,R4                    NUMESD*2+2\n         SLA   R0,3                     NUMESD*16+16\n         SH    R0,H16                   NUMESD*16\n         STM   R15,R1,GML\n         MZ4   GML\n         B     GMBUF\n         SPACE 1\nNOTSCTR  MVC   MSGNUM,=C'MZP403I'\n         MVC   MSGTEXT(8),=C'NOT SCTR'\n         B     SLYDOG                   FINISH ERROR MSG & GO TO CANIS\n         SPACE 1\nBLOCKLD  LA    R0,1024                  GML=MIN(1024,R15)\n         CR    R0,R15\n         BL    *+6\n         LR    R0,R15\n         ST    R0,GML\n         MVI   GML,X'80'\n         TM    PDS2ATR1,PDS2SCTR        HOW MANY ESD ITEMS?\n         L     R4,=X'0FFFFFF0'           DON'T KNOW\n         SPACE 5\n*              GET A MAXIMUM OF 3 BUFFERS.\n         SPACE 1\n*              THE FIRST IS USED TO READ CESD, IDR, SC/TR, SYM, AND CON\n*               RECORDS; IT IS ALWAYS AT LEAST 256 BYTES.\n*              FOR A SCTR LOADED MODULE, IT IS AT LEAST 4 BYTES LARGER\n*               THAN THE COMBINED SCTR/TRANS TABLE.\n*              FOR SCTR FORMAT BLOCK LOADED MODULES WITH ONE ENTRY IN\n*               THE LAST CESD RECORD, IT IS AT LEAST\n*               MIN(1024,SCLEN+TRLEN+4), THE LENGTH OF THE 1ST SC/TR\n*               RECORD.\n         SPACE 1\n*              THE SECOND BUFFER IS USED ONLY FOR SCTR LOADED MODULES.\n*              IT HOLDS THE COMPLETE CESD.\n         SPACE 1\n*              THE THIRD BUFFER IS USED ONLY FOR NUCLEUS RELOCATION.\n*              IT IS NOT ALLOCATED FOR OS/VS, SINCE THE PAGEABLE CVT\n*               POINTS TO A TABLE OF CSECT ADDRESSES.\n*              FOR OS/MFT AND OS/MVT, IT HAS ONE WORD PER CSECT.\n*              IT IS USED TO HOLD CSECT SIZE(1ST PASS) AND CSECT LOC\n*               (2ND PASS) DURING NUCLEUS RELOCATION.\n         SPACE 5\nGMBUF  GETMAIN LU,LA=GML,A=GMA,SP=13\n         MVC   CESDEND,GMA+4            INITIALIZE IF SCTR\n         L     R5,GMA\n         USING BUF,R5\n         SLA   R4,3                     NUMESD*16+16\n         SH    R4,H16                   NUMESD*16\nCLASH    READ  SYMECB,SF,(R6),(R5),248  BYPASS SYM, READ 1ST CESD\n         CHECK SYMECB\n         CLI   TYPE,TYPESYM\n         BE    CLASH\n         CLI   TYPE,TYPECESD\n         BNE   NOESD\n         TM    PDS2ATR1,PDS2SCTR        HOW MANY ESD ENTRIES?\n         BO    *+6                       R4\n         BCTR  R4,0                      MNE, MNE, TKEL UFARSIN\nDOCESD   LA    R14,16\n         LH    R15,ESDCOUNT\n         AR    R15,R5\n         BCTR  R15,0\n         CLI   GML,X'80'                SCTR?\n         BE    MATCHESD\n         LH    R9,ESDID\n         BCTR  R9,0\n         SLA   R9,4                     (ESDID-1)*16\n         A     R9,GMA+4\n         C     R9,CESDEND               IS CESD IN SEQUENCE BY ESDID?\n         BNE   MISSCESD                  NO - MISSING CESD RECORD\n         MVC   0(16,R9),ESDNAME\n         LA    R9,16(R9)\nH16      EQU   *-2,2,H\n         ST    R9,CESDEND               LAST ENTRY PTR\n         BXLE  R5,R14,*-14\nREADCESD L     R5,GMA\n         SH    R4,ESDCOUNT\n         BZ    READSCTR                  LAST CESD STORED - RESOLVE\n         BM    FMBUF                     SCTR RESOLVED - FREE BUFFERS\n         TM    PDS2ATR1,PDS2SCTR\n         BZ    *+20\n         CLI   ESDCOUNT+1,240           FULL CESD RECORD?\n         BE    *+12                      YES - MAY BE MORE\n         CH    R4,H16                   EXACTLY ONE UNFILLED CESD ENTRY\n         BE    READSCTR                  YES\n         READ  CESDECB,SF,(R6),(R5),248 CESD OR CONTROL RECORD\n         CHECK CESDECB\n         CLI   TYPE,TYPECESD\n         BE    DOCESD\n         CLI   TYPE,TYPEIDR\n         BE    FMBUFBLK\n         CLI   TYPE,TYPESCTR\n         BE    FMBUFBLK\n         TM    TYPE,X'F0'               IS IT CONTROL?\n         BNZ   NOCON                     NO\n         TM    TYPE,1                   IS IT CON?\n         BZ    NOCON                     NO   RLD\nFMBUFBLK TM    PDS2ATR1,PDS2SCTR        IS IT SCTR?\n         BZ    FMBUF                     NO - NO MISSING CESD\n         SH    R4,=H'16'                 MISSING CESD?\n         BNZ   MISSCESD                  YES\n         TM    GML,X'80'                SCTR LOADED?\n         BZ    READSCTR                  YES - READ SC/TR RECORDS\nFMBUF FREEMAIN L,LA=GML,A=GMA,SP=13\n         B     CANIS                    END OF BLOCK LOAD NAME\n         SPACE 3\nNOESD    MVC   MSGNUM,=C'MZP404I'\n         MVC   MSGTEXT(6),=C'NO ESD'\n         B     SHYDOG\n         SPACE 1\nNOCON    MVC   MSGNUM,=C'MZP405I'\n         MVC   MSGTEXT(6),=C'NO CON'\n         B     SHYDOG\n         SPACE 1\nMISSCESD MVC   MSGNUM,=C'MZP406I'\n         MVC   MSGTEXT(12),=C'MISSING CESD'\n         B     SHYDOG\n         SPACE 1\nMISSSCTR MVC   MSGNUM,=C'MZP407I'\n         MVC   MSGTEXT(13),=C'MISSING SC/TR'\n*        B     SHYDOG\n         SPACE 1\nSHYDOG   MVC   MSGDD,DDNAME\n         MVI   MSGDD+8,C'('\n         MVC   MSGMEM,VRNAM\n         CLI   VRNAM,C'.'               IS THIS NUCLEUS?\n         BNE   *+10                      NO\n         MVC   MSGMEM,NUCMEM\n         MVI   MSGMEM+8,C')'\n         BAL   R14,PUTGOT\n         OI    SW1,NOGO\n         OI    VRFLG,VRNAMFND\n         B     FMBUF\n         SPACE 2\nMATCHESD NI    ESDTYPE,ESDDEL+15        SET ESD ENTRY FOR COMPARE\n         CLI   ESDTYPE,ESDLR            ENTRY PT DEF?\n         BE    *+28                      YES\n         CLI   ESDTYPE,ESDSD            IS IT SD, PC, OR CM?\n         BE    *+20\n         CLI   ESDTYPE,ESDCM\n         BE    *+12\n         CLI   ESDTYPE,ESDPC\n         BNE   ENDMATCH\n         LR    R9,R7\n         DROP  R7\n         USING VRSECT,R9\nMATCHLUP CLI   VRTYPE,VRLIB             IS DCB SAME?\n         BE    ENDMATCH                  NO\n         CLI   VRTYPE,VRNAME            IS THIS NAME OR DUMP?\n         BL    NOMATCH                   NO\n         CLI   VRTYPE,VRDUMPT            MAYBE\n         BH    NOMATCH                   NO\nMATCHN   CLC   VRNAM,VRNAM-VRSECT(R7) IS THIS THE SAME MEMBER?\n         BNE   NOMATCH                   NO\n         OI    VRFLG,VRNAMFND            YES - AVOID 2ND BLDL\n         MVC   VRSSI,SSI\n         TM    VRFLG,VRFND              WAS CSECT FOUND ALREADY?\n         BO    MATCHI                    YES - DON'T FLOAT IT AGAIN\n*              OMITTED CSECT NAMES MATCHED IN HOLYCDE\n         CLI   ESDTYPE,ESDLR            IS THIS ENTRY PT DEF?\n         BE    MATCHI                    YES - CAN'T MATCH NAME|DUMP\n         CLC   VRCSECT,ESDNAME          IS THIS SAME CSECT?\n         BNE   MATCHI                   NOT RIGHT CSECT\n         MVC   VRSIZE,ESDLEN\nFLOATIX  L     R0,ESDADDR-1             REL ADDR IF BLOCK, ELSE ABS\n         CLI   GML,X'80'                SCTR?\n         BNZ   SAVEP                     YES - USE RELOCATED ESD\n         L     R1,VRCDEPTR               NO - GET XL VIA CDE OR LPDE\n         TM    VRCDEPTR,VRISLPDE        MODULE FOUND IN PAGABLE LPA?\n         BZ    NOTPLPA                   NO  - GET XL VIA CDE\n         AL    R0,LPDEXTAD-LPDE(,R1)     YES - GET VIA LPDE\n         B     SAVEP\nNOTPLPA  L     R1,CDXLMJP-CDENTRY(R1)\n         AL    R0,EXLISTLN+4-XL(,R1)    FIND 1ST EXTENT\nSAVEP    MZSTA R0,VRLOC,IC=R1\n         OI    VRFLG,VRFND              FLAG AS RELOCATED\nMATCHI   MZLT  R9,VRNEXT                GET NEXT ENTRY\n         BZ    ENDMATCH                  NO MORE\n         CLI   VRTYPE,VRLIB             IS IT SAME DCB?\n         BE    ENDMATCH                  NO\n         CLI   VRTYPE,VRINDEX\n         BE    MATCHIX\n         CLI   VRTYPE,VRNAME            IS IT SAME SCOPE?\n         BL    MATCHI                    YES\n         CLI   VRTYPE,VRDUMPT\n         BH    MATCHI                    YES\n         B     MATCHN                    NO - PROCESS NEW NAME\nNOMATCH  MZLT  R9,VRNEXT                SCAN TO NEXT NAME\n         BNZ   MATCHLUP\nENDMATCH BXLE  R5,R14,MATCHESD\n         LTR   R4,R4                    SCTR?\n         BNP   FMBUF                     YES\n         B     READCESD\nMATCHIX  CLC   VRIXNAME,ESDNAME\n         BNE   MATCHI\n         B     FLOATIX\n         DROP  R9\n         MZSHD 'SCATTER LOADABLE MODULE PROCESSING'\n         USING VRSECT,R7\nREADSCTR CLI   GML,X'80'                IS THIS BLOCK LOAD?\n         BE    FMBUF                     YES - ALL DONE\n         MVC   FWNOTE,BLDLNOTE          BYPASS IDR\n         POINT (R6),FWNOTE\n         L     R5,GMA                   GET END OF BUFFER LOC\n         A     R5,GML\n         LH    R4,SCTRLEN               SC/TR SIZE + 4\nREADREST LR    R0,R4                    MIN(1024,REST OF SC/TR + 4)\n         CH    R0,=H'1024'\n         BL    *+8\n         LA    R0,1024\n         SR    R4,R0                    DECREMENT BYTE COUNT\n         SR    R5,R0                    DECREMENT LOC\n         READ  SCECB,SF,(R6),(R5),(R0)\n         CHECK SCECB\n         CLI   TYPE,TYPESCTR            MUST BE SC/TR\n         BNE   MISSSCTR\n         LA    R5,4(R5)                 ADJUST FOR PREFIX\n         LTR   R4,R4                    TEST UNADJUSTED REMAINDER\n         LA    R4,4(R4)                 ADJUST FOR PREFIX\n         BP    READREST\n         ST    R5,TRLOC                 TRANSLATE TABLE LOC\n         AH    R5,HWTRLN\n         ST    R5,SCLOC                 SCATTER TABLE LOC\n         MZ4   NUCRES                   RESOLVE NUCLEUS\nSCTRFIX  L     R9,VRCDEPTR              L(XL)+4*(#CSECTS+1)\n         L     R9,CDXLMJP-CDENTRY(R9)\n         AH    R9,HWSCTRLN\n         SPACE 1\nNUCFIX   L     R2,GMA+4                 CESD\n         USING ESDNAME,R2\n         LA    R14,16\n         L     R15,CESDEND\n         BCTR  R15,0\n         L     R4,TRLOC                 TR(0)\nSCTRLUP  NI    ESDTYPE,X'0F'            STRIP FLAGS\n         LH    R1,2(R4)                 CSECT # FROM TRANSLATE TABLE\n         SLA   R1,2                     *4 AND TEST\n         BZ    NOSCTR\n         L     R0,ESDADDR-1\n         SL    R0,0(R1,R5)              DEFLOAT VIA SCATTER(CSECT #)\n         AL    R0,0(R1,R9)              REFLOAT VIA XL(CSECT #)\n         ST    R0,ESDADDR-1\nNOSCTR   LA    R4,2(R4)\n         BXLE  R2,R14,SCTRLUP\n         L     R5,GMA+4                 CESD\n         SH    R5,=Y(ESDNAME-BUF)\n         SR    R4,R4\n         B     MATCHESD\n         MZSHD 'MISCELLANEOUS'\nSSI      DS    XL4\nSCTRLEN  DS    H\nHWSCTRLN DS    H\nHWTRLN   DS    H\nSCLOC    DS    A\nGML      DC    3A(0)\nGMA      DC    3A(0)\nTRLOC    DS    A\nCESDEND  DS    A                        LAST CESD ENTRY\nFWNOTE   DC    F'0'\nBLDL     DC    Y(1,BLDLEND-BLDLENT)\nBLDLENT  DC    CL8' '\nBLDL1TTR DC    XL3'0'\nBLDLCONC DC    X'0'\nBLDLLIBN DC    X'0'\nBLDLFLAG DC    X'0'                     BIT 0=ALIAS 1-2=# TTRS, 3-7=LEN\nBLDL1TXT DC    XL3'0'\n         DC    X'0'\nBLDLNOTE DC    XL3'0'                   SCTR/TRANS OR OVLY NOTE LIST\n         DC    X'0'                     NUM TTR IN NOTE LIST\nPDS2ATR1 DS    X\nPDS2RENT EQU   128\nPDS2REUS EQU   64\nPDS2OVLY EQU   32\nPDS2TEST EQU   16\nPDS2LOAD EQU   8\nPDS2SCTR EQU   4\nPDS2EXEC EQU   2\nPDS21BLK EQU   1\nPDS2ATR2 DS    X\nPDS2FLVL EQU   128\nPDS2ORG0 EQU   64\nPDS2EP0  EQU   32\nPDS2NRLD EQU   16\nPDS2NREP EQU   8\nPDS2TSTN EQU   4\nPDS2LEF  EQU   2\nPDS2REFR EQU   1\nBLDLSIZE DS    CL3\n         DS    CL2                      LENGTH 1ST TEXT BLOCK\nBLDLEP   DS    CL3\nPDS2FTB1 DS    X\nPDSAOSLE EQU   128\nPDS2PAGA EQU   32\nPDS2SSI  EQU   16\nPDSAPFLG EQU   8\nPDS2FTB2 DS    X\nPDS2FTB3 DS    X\nPDS2SLSZ DS    HL2                      LENGTH(SCTR LIST) IN BYTES\n*              (PDS2SLSZ-4)/4=#CSECTS\nPDS2TTSZ DS    HL2                      LENGTH(TRANSLATE TAB) IN BYTES\n*              (PDS2TTSZ-2)/2=#ESD\nPDS2ESDT DS    HL2                      ESD ID 1ST TEXT BLOCK\nPDS2ESDC DS    HL2                      ESD ID OF ENTRY POINT\n         SPACE 1\nPDS2EPM  DS    AL3\nPDS2MNM  DS    CL8\n         SPACE 1\n         DS    0H\nPDSCHLVL DS    X\nPDSSSIFB DS    X\nPDSMBRSN DS    H\n         SPACE 1\nPDSAPFCT DS    X\nPDSAPFAC DS    X\nBLDLEND  EQU   *\nHEXTAB   DC    C'0123456789ABCDEF'\n         LTORG\n         MZSHD 'BUFFER FOR READING CESD AND SCTR/TRANS'\nBUF      DSECT\nTYPE     DS    X\nTYPEIDR  EQU   X'80'                    MAX LEN 256\nTYPECESD EQU   X'20'                    MAX LEN 248=8+240\nTYPESCTR EQU   X'10'                    MAX LEN 1024=4+1020\nTYPECON  EQU   X'01'\nTYPECEOS EQU   X'05'\nTYPECEOM EQU   X'0D'\nTYPERLD  EQU   X'02'\nTYPERLDS EQU   X'06'\nTYPERLDM EQU   X'0E'\nTYPECRL  EQU   X'03'\nTYPECRLS EQU   X'07'\nTYPECRLM EQU   X'0F'\nTYPESYM  EQU   X'40'\nCESD     DS    XL3\nESDID    DS    XL2\nESDCOUNT DS    H                        SIZE IN BYTES OF REST\n         SPACE\n*              REPEATED\nESDNAME  DS    CL8\nESDTYPE  DS    X\nESDDEL   EQU   X'10'\nESDREP   EQU   X'10'\nESDINS   EQU   X'20'\nESDCHAIN EQU   X'40'\nESDMAP   EQU   X'80'\nESDSD    EQU   X'00'\nESDLR    EQU   X'03'\nESDPC    EQU   X'04'\nESDCM    EQU   X'05'\nESDPR    EQU   X'06'\nESDNU    EQU   X'07'\nESDER    EQU   X'02'\nESDWX    EQU   X'0A'\nESDPCDEL EQU   X'14'\nESDADDR  DS    AL3\nESDSEGNO DS    X\nESDLEN   DS    AL3                      ID IF ESDTYPE LR/LD\n         SPACE\n         ORG   CESD\n         DC    X'0'\n         DS    H\n*        DS    CL1020\n*              SCTR TABLE IS IN ORDER BY 1ST TEXT APPEARANCE\n*              SCTR/TRAN RECORDS START AT HIGH ADDR\n         LTORG\n        MZWORK MAIN=YES,CD=YES\nMZAPMAIN DSECT\n         ORG   IBUF\nMSGNUM   DS    C'MZP4..I',C\nMSGDD    DS    CL8,C\nMSGMEM   DS    CL8,2C\nMSGTEXT  DS    C\n         ORG   MSGDD\nMSGNAME  DS    CL8,C\nMSGTXT   DS    C\n         END\n./ ADD NAME=MZAP5    0100-19106-19106-1238-01055-01055-00000-MZAP78  18\nMZAP5    TITLE 'MOREZAP DUMP PROCESSOR - COPYRIGHT 1975 SHMUEL METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         SPACE 5\n         MACRO\n&L       MZHX  &DUM\n         GBLA  &MZBIN\n         LCLA  &I,&J\n&MZBIN   SETA  0\n         AIF   (T'&L EQ 'O').NOL\n&I       SETA  1\n.NEXTDIG ANOP\n&J       SETA  1\n.NEXTVAL AIF   ('0123456789ABCDEF'(&J,1) EQ '&L'(&I,1)).DIG\n&J       SETA  &J+1\n         AIF   (&J LE 16).NEXTVAL\n         MNOTE 12,'&L IS NOT HEXADECIMAL'\n         MEXIT\n.DIG     ANOP\n&MZBIN   SETA  &MZBIN*16+&J-1\n&I       SETA  &I+1\n         AIF   (&I LE K'&L).NEXTDIG\n         MEXIT\n.NOL     MNOTE 12,'NULL ARGUEMENT INVALID - HEX REQUIRED'\n         MEXIT\n         MEND\n         SPACE 2\n         MACRO\n&L       MZOP  &OP,&SUBOP,&EM=360\n         GBLA  &MZBIN                   OUTPUT OF MZHX\n         GBLA  &MZEMOPD                 DISPLACEMENT OF LAST EMULATOR\n         GBLA  &MZLSTOP                 OPCODE+1 OF LAST EXTENDED OPCOD\n         GBLA  &NUMEMS                  NUMBER OF EMULATORS\n         GBLA  &OPD                     NEXT OPCODE DISPLACEMENT\n         GBLA  &OPL(256)                OPCODE DISPLACEMENTS\n         GBLB  &MZEMSW                  EM SUB-OPCODES BEING DEFINED\n         GBLB  &MZEMXOP                 LAST OP WAS EXTENDED EM OP\n         GBLB  &MZOPX(256)              16 BIT OR EXTENDED OPCODE\n         GBLC  &OPC(256)                OPCODE NAMES\n         GBLC  &EMS(10)                 CPU S TO BE EMULATED\n.*             LIST SHOULD ALWAYS INCLUDE 360\n.*\n         GBLC  &MZLSTEM                 CPU WHOSE EM IS BEING DEFINED\n         GBLC  &MZSUBOP                 EMULATOR SUB-OP BEING DEFINED\n.*             VALUE IS NULL OR 3 CHARACTERS:\n.*             TOO\n.*             WHERE T IS 1 FOR 16 BIT EM OPS AND 2 FOR EXTENDED EM OPS\n.*             OO IS BITS 0-7 OF THE OPCODE\n.*\n         LCLA  &I,&J\n         LCLA  &SCHMUCK\n         LCLC  &HEX,&OP2\n.*             GENERATE OPCODE TABLE FOR MZAP5\n.*             TABLE CONSISTS OF 256 HALFWORD ENTRIES,\n.*              EACH CONTAING THE DISPLACEMENT TO AN OPCODE;\n.*              UNUSED ENTRIES CONTAIN FFFF (-1).\n.*             EACH OPCODE MAY BE IN ONE OF THE FOLLOWING FORMS:\n.*\n.*             XX,EM=CPU                EIGHT BIT OPCODES:\n.*       DC    AL1(LEN-1),C'NAME'\n.*\n.*             XX,M,EM=CPU              EXTENDED MNEUMONICS:\n.*       DC    X'1M',AL1(LEN-1),C'NAME'\n.*       ...\n.*       DC    X'FF'                    END OF M1 TABLE FOR OPCODE\n.*\n.*             XXXX,EM=CPU              SIXTEEN BIT OPCODES:\n.*       DC    X'20'                    1ST TIME ONLY FOR BITS 0-7\n.*       DC    AL1(LEN-1),X'SUBOP',C'NAME'\n.*       ...\n.*       DC    X'FF'                    END OF BIT 8-15 TABLE FOR OPCOD\n.*\n.*             -XX,EM=CPU               8 BIT EMULATOR SUB-OPCODE\n.*       DC    X'80'                    ONLY ON 1ST OF GROUP\n.*       DC    X'81',Y(DISPL)           NEW EMULATOR\n.*       DC    AL1(LEN-1),X'OPCODE',C'NAME'\n.*\n.*             -XX,R,EM=CPU             EXTENDED 8 BIT EMULATOR SUB-OP\n.*       DC    X'C0',X'OPCODE'          1ST TIME ONLY FOR BITS 0-7\n.*       DC    AL1(LEN-1),X'R2|R3',C'NAME'\n.*       ...\n.*\n.*             -XXXX,EM=CPU             16 BIT EMULATOR SUB-OPCODE\n.*       DC    X'A0',X'OPCODE'          1ST TIME ONLY FOR BITS 0-7\n.*       DC    AL1(LEN-1),X'SUBOP',C'NAME'\n.*       DC    X'FF'                    END OF OPCODES FOR EMULATOR\n         AIF   (T'&L EQ 'O').NOL\n         AIF   (T'&OP EQ 'O').NOP\n&SCHMUCK SETA  K'&L-1\n         MZSET\n&I       SETA  1\n.NXTEM   AIF   ('&EM' EQ '&EMS(&I)').GOODEM\n&I       SETA  &I+1\n         AIF   (&I LE &NUMEMS).NXTEM\n.*             SKIP OPCODE FOR UNWANTED EMULATOR\n         MEXIT\n.GOODEM  AIF   ('&OP'(1,1) EQ '-').EMOP\n         AIF   ('&OP' EQ 'TABLE').TABLE\n         AIF   (K'&OP NE 2 AND K'&OP NE 4).BUMOP\n&HEX     SETC  '&OP'(1,2)\n&HEX     MZHX                           CONVERT HEX OPCODE\n&J       SETA  &MZBIN+1\n         AIF   ('&OPC(&J)' NE '').SAMEOP\n&MZEMSW  SETB  0\n&MZEMXOP SETB  1\n&MZLSTEM SETC  '&EM'\n         AIF   (&MZLSTOP EQ 0 OR &MZLSTOP EQ &J).NOFF\n         DC    X'FF' .                  TERMINATE EXTENDED OPCODE\n&OPD     SETA  &OPD+1\n.NOFF    ANOP\n&OPC(&J) SETC  '&L'\n&OPL(&J) SETA  &OPD\n         AIF   (K'&OP EQ 4).LONGOP\n         AIF   (T'&SUBOP NE 'O').SUBOP\n&OPD     SETA  &OPD+K'&L+1\n         DC    AL1(&SCHMUCK),C'&L'\n&MZLSTOP SETA  0\n         MEXIT\n.*\n.*\n.LONGOP  DC    X'20' .                  16 BIT OPCODES FOLLOW\n&OPD     SETA  &OPD+K'&L+3\n&MZLSTOP SETA  &J\n&MZOPX(&J) SETB 1                       FLAG AS EXTENDED OP\n         AGO   .BYTE2\n.SAMEOP  AIF   (K'&OP EQ 2).DUPOP\n         AIF   (&MZLSTOP NE &J).DUPSEQ\n         AIF   (NOT &MZEMSW).NOEMOFF\n&MZEMXOP SETB  0\n         AIF   (&OPD-&OPD/2*2 EQ 1).NOFILL\n         DC    X'80' .                  PAD\n&OPD     SETA  &OPD+1\n.NOFILL  DC    X'81',Y(&MZEMOPD) .      NEW CPU BEING EMULATED\n&OPL(&J) SETA  &OPD\n&OPD     SETA  &OPD+3\n.NOEMOFF ANOP\n&OPD     SETA  &OPD+K'&L+2\n.BYTE2   ANOP\n&OP2     SETC  '&OP'(3,2)\n         DC    AL1(&SCHMUCK),X'&OP2',C'&L'\n         AIF   ('&L  '(1,3) NE 'EMU').SKIP\n&MZEMOPD SETA  &OPL(&J)\n&MZLSTEM SETC  '&EM'\n&MZEMSW  SETB  1\n         MEXIT\n.*\n.*\n.DUPOP   AIF   (T'&SUBOP EQ 'O').INVDUP\n.SUBOP   AIF   (K'&SUBOP NE 1).INVSUB\n&OPD     SETA  &OPD+K'&L+2\n         DC    X'1&SUBOP',AL1(&SCHMUCK),C'&L'\n&MZLSTOP SETA  &J\n&MZOPX(&J) SETB 1                       FLAG AS EXTENDED OP\n         MEXIT\n.*\n.*\n.*\n.EMOP    AIF   (K'&OP NE 3 AND K'&OP NE 5).BUMEMOP\n         AIF   ('&EM' NE '&MZLSTEM').WRONGEM\n&HEX     SETC  '&OP'(2,2)\n&HEX     MZHX                           CONVERT HEX OPCODE\n&J       SETA  &MZBIN+1\n         AIF   (K'&OP EQ 3).SHEMOP\n&OP2     SETC  '&OP'(4,2)\n         AIF   ('&MZSUBOP' EQ '2&HEX').NOA0\n         DC    X'A0',X'&HEX' .          START LIST OF 16 BIT EM SUBOPS\n&OPD     SETA  &OPD+2\n&MZSUBOP SETC  '2&HEX'\n.NOA0    DC    AL1(&SCHMUCK),X'&OP2',C'&L'\n&OPD     SETA  &OPD+K'&L+2\n&MZEMXOP SETB  1\n         MEXIT\n.SHEMOP  AIF   (T'&SUBOP NE 'O').EMOPX\n         AIF   (NOT &MZEMXOP).NO80\n         DC    X'80' .                  INITIATE EMULATOR OPCODES\n&OPD     SETA  &OPD+1\n.NO80    DC    AL1(&SCHMUCK),X'&HEX',C'&L'\n&MZEMXOP SETB  0\n&OPD     SETA  &OPD+K'&L+2\n&MZSUBOP SETC  ''\n         MEXIT\n.*\n.EMOPX   AIF   (K'&SUBOP NE 1).INVSUB\n         AIF   ('&MZSUBOP' EQ '1&OP').NOC0\n         DC    X'C0',X'&HEX' .          START LIST OF EXT EM SUBOPS\n&OPD     SETA  &OPD+2\n&MZSUBOP SETC  '1&OP'\n.NOC0    DC    AL1(&SCHMUCK),X'&SUBOP',C'&L'\n&OPD     SETA  &OPD+K'&L+2\n&MZEMXOP SETB  1\n         MEXIT\n.TABLE   AIF   (&MZLSTOP EQ 0).NOFFT\n         DC    X'FF' .                  TERMINATE LAST EXTENDED OPCODE\n.NOFFT   ANOP\n&L       DS    0H\n&I       SETA  1\n.NXTBL   ANOP\n&J       SETA  (&I-1)/16\n&HEX     SETC  '0123456789ABCDEF'(&J+1,1)\n&HEX     SETC  '&HEX'.'0123456789ABCDEF'(&I-16*&J,1)\n         AIF   ('&OPC(&I)' EQ '').NULLTBL\n         AIF   (&MZOPX(&I)).TBLMN\n         MNOTE *,'&HEX IS &OPC(&I)'\n         AGO   .TBLDC\n.TBLMN   MNOTE *,'&HEX IS &OPC(&I), ...'\n.TBLDC   DC    H'&OPL(&I)'\n.TBLNXT  SPACE 1\n&I       SETA  &I+1\n         AIF   (&I LE 256).NXTBL\n         MEXIT\n.NULLTBL MNOTE *,'&HEX IS AN UNDEFINED OPCODE'\n         DC    H'-1'\n         AGO   .TBLNXT\n.*\n.*\n.*\n.INVSUB  MNOTE 12,'&L IMPROPERLY SPECIFIED - SUB-OPCODE &SUBOP NOT EXAC*\n               TLY ONE HEX DIGIT'\n         MEXIT\n.INVDUP  MNOTE 12,'&L IS NOT SPECIFIED AS AN EXTENDED OPCODE AND &OP IS*\n                ALREADY DEFINED'\n         MEXIT\n.DUPSEQ  MNOTE 12,'&L DOES NOT DIRECTLY FOLLOW PREVIOUS DEFINITION OF &*\n               HEX'\n         MEXIT\n.BUMOP   MNOTE 12,'&OP IS NOT 2 OR 4 HEX DIGITS'\n         MEXIT\n.NOP     MNOTE 12,'HEX OPCODE REQUIRED AS 1ST OPERAND'\n         MEXIT\n.BUMEMOP MNOTE 12,'&L IS SPECIFIED AS AN EMULATOR OPCODE BUT IS NOT EXA*\n               CTLY TWO DIGITS'\n         MEXIT\n.WRONGEM MNOTE 12,'&L SPECIFIED EM=&EM INSTEAD OF EM=&MZLSTEM'\n         MEXIT\n.NOL     MNOTE 12,'OPCODE REQUIRED IN LABEL FIELD'\n.SKIP    MEND\n         SPACE 2\n         GBLA  &NUMEMS\n         GBLC  &EMS(10)\n         COPY  MZGBL\n         MZSET\n         PUNCH '         ALIAS MZAPDUMP'\n&EMS(1)  SETC  '360'\n&EMS(2)  SETC  '370'\n&EMS(3)  SETC  'IMVC'\n&EMS(4)  SETC  'DOS'\n&EMS(5)  SETC  '14XX'\n&EMS(6)  SETC  '707X'\n&EMS(7)  SETC  '7080'\n&EMS(8)  SETC  '709X'\n&NUMEMS  SETA  3\n         EJECT\n         MZHED 'MOREZAP DUMP PROCESSOR'\nMZAPDUMP MZENT D\n         USING VRSECT,R7\nDUMP     OI    SW3,DUMPSW\n         L     R7,HEAD\nLOOP     TM    VRFLG,VRFND\n         BZ    ELOOP\n         CLI   VRTYPE,VRINDEX\n         BE    SAVEINDX\n         CLI   VRTYPE,VRNAME\n         BL    ELOOP\n         CLI   VRTYPE,VRDUMPT\n         BNH   SAVENAME\n         TM    VRFLG,VRBOUNDS\n         BO    ELOOP\n         CLI   VRTYPE,VRHDUMP\n         BL    ELOOP\n         CLI   VRTYPE,VRHDUMPT\n         BNH   HDUMP\n         CLI   VRTYPE,VRPOINT\n         BL    ELOOP\n         MVI   INDEX,1                  SET POINT FLAG FOR DUMP HEADER\nELOOP    MZLT  R7,VRNEXT\n         BNZ   LOOP\n         BAL   R14,EJECT\n         TM    SW1,DBEFSW\n         BO    *+8\n         NI    SW1,255-DAFTSW\n         NI    SW1,255-DBEFSW\n         NI    SW3,255-DUMPSW\n         L     R15,ADDT\n         TM    SW1,DEBUGSW\n         BO    BYBY\n         L     R15,APATCH\n         TM    SW2,VEREPSW\n         BO    BYBY\n         TM    SW1,DAFTSW\n         BO    DUMP\n         L     R15,A#666\nBYBY     MZGO\nSAVENAME MVC   NAME(16),VRNAM\n         XC    INDEX,INDEX\n         CLI   VRTYPE,VRNAME\n         BE    ELOOP\n         TM    SW1,DBEFSW\n         BO    DBEF\n         CLI   VRTYPE,VRDUMP\n         BE    ELOOP\nDUMPIT   SR    R4,R4\n         L     R5,VRLOC\n         L     R6,VRSIZE-1\n         B     HDUMP+4\nDBEF     CLI   VRTYPE,VRDUMP\n         BE    DUMPIT\n         B     ELOOP\n         SPACE 1\nSAVEINDX MVC   INDEX,VRIXNAME\n         B     ELOOP\n         SPACE 1\nHDUMP    LM    R4,R6,VRLOC              (4,5,6)<-(LOC,ABS,LEN)\n         LA    R0,0(R5,R6)              R0=(VRABS+VRLEN-1)|15\n         BCTR  R0,0\n         LA    R1,15\n         OR    R0,R1\n         ST    R0,END\n         NR    R1,R5\n         LCR   R1,R1\n         LA    R4,0(R4,R1)              VRLOC-VRABS&15\n         LA    R5,0(R5,R1)              VRABS-VRABS&15\n         STM   R4,R5,REL\n         OI    SW1,DMPSW\n         BAL   R14,EJECT\n         MVC   HDATA,BLANKARD\n         MVC   HDATA(7),=C'MZP501I'\n         LH    R0,VRLINE\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,15\n         UNPK  HDATA+8(5),DOUBLE\n         LA    R1,HDATA+14\n         CLI   INDEX,1\n         BNE   *+14\n         MVC   0(12,R1),=C'ACCESSED VIA'\n         LA    R1,13(,R1)\n         MVC   0(8,R1),NAME\n         CLI   NAME,C'.'\n         BNE   *+10\n         MVC   0(8,R1),NUCMEM\n         LA    R1,9(,R1)\n         CLI   CSECT,0\n         BE    *+14\n         MVC   0(8,R1),CSECT\n         LA    R1,9(,R1)\n         CLI   INDEX,1\n         BNH   *+20\n         MVC   0(6,R1),=C'INDEX:'\n         MVC   7(8,R1),INDEX\n         LA    R1,16(,R1)\n         L     R15,=V(MZDMPOPS)\n         CLI   VRTYPE,VRDUMPT\n         BE    *+16\n         CLI   VRTYPE,VRHDUMPT\n         BE    *+8\n         L     R15,=V(MZDMPHEX)\n         BR    R15\n         SPACE 1\nNAME     DC    CL8' '\nCSECT    DC    CL8' '\nINDEX    DC    XL8'0'\nREL      DC    A(0)\nABS      DC    A(0)\n         DC    F'16'                    INCR FOR BXH\nEND      DC    A(0)\n         SPACE 1\nHEXTAB   DC    C'0123456789ABCDEF'\n         LTORG\n         MZSHD 'HEX/EBCDIC FORMAT'\nMZDMPHEX CSECT\n         USING *,R12\n         LR    R12,R15\n         MVC   0(15,R1),=C'HEX/EBCDIC DUMP'\n         USING CORE,R15\nDLOOP    EX    0,BLCARD\n         MVC   DRELL,=C'R:'\n         L     R1,REL\n         LCR   R1,R1\n         TM    REL+1,X'80'              IS RELATIVE LOC NEGATIVE?\n         BZ    POSLOCH                   NO - PRINT SIX DIGITS\n         ST    R1,DOUBLE\n         MVI   DRELD+1,C'-'\n         MZHEX DRELD+2,DOUBLE+2,4,BL=*\n         B     NEGLOCH\nPOSLOCH  MZHEX DRELD,REL+1,6\nNEGLOCH  EQU   *-4\n         MVC   DABSL,=C'A:'\n         MZHEX DABSD,ABS+1,6\n         LM    R14,R1,REL\n         MZHEX DWD1,CWD1,8\n         MZHEX DWD2,CWD2,8\n         MZHEX DWD3,CWD3,8\n         MZHEX DWD4,CWD4,8\n         MVI   DAST1,C'*'\n         MVC   DEBC,CORE\n         TR    DEBC,TRTABLE\n         MVI   DAST2,C'*'\n         BXH   R15,R0,DLAST\n         AR    R14,R0\n         STM   R14,R1,REL\n         BAL   R14,PUTGOT\n         TM    SW1,DMPSW\n         BO    DLOOP\n         B     ELOOP\nDLAST    BAL   R14,PUTGOT\n         NI    SW1,255-DMPSW\n         B     ELOOP\n         LTORG\n         MZSHD 'OPCODE/HEX/EBCDIC FORMAT'\nMZDMPOPS CSECT\n         USING *,R12\n         LR    R12,R15\n         ST    R7,TR7\n         MVC   0(22,R1),=C'HEX/EBCDIC/OPCODE DUMP'\n         USING CORE,R15\nTLOOP    EX    0,BLCARD\n         LA    R0,2\n         BAL   R14,RESERVE\n         L     R1,REL\n         LCR   R1,R1\n         TM    REL+1,X'80'              IS RELATIVE LOC NEGATIVE?\n         BZ    POSLOCT                   NO - PRINT SIX DIGITS\n         ST    R1,DOUBLE\n         MVI   TREL+1,C'-'\n         MZHEX TREL+2,DOUBLE+2,4,BL=*\n         B     NEGLOCT\nPOSLOCT  MZHEX TREL,REL+1,6\nNEGLOCT  EQU   *-4\n         MZHEX TABS,ABS+1,6\n         LA    R8,2\n         LA    R2,TDISP\n         L     R15,ABS\n         LA    R9,15(R15)\n         MVI   TAST1,C'*'\n         MVC   TEBC,CORE\n         TR    TEBC,TRTABLE\n         MVI   TAST2,C'*'\nTLOOP1   SR    R14,R14\n         IC    R14,0(R2)\n         LA    R14,IBUF(R14)\n         USING THW,R14\n         MZHEX THW,CORE,4\n         BCTR  R2,0\n         BXLE  R15,R8,TLOOP1\n         BAL   R14,PUTGOT\n         EX    0,BLCARD\n         LM    R15,R1,ABS\n         LA    R8,2\n         LA    R2,TDISP\n         LA    R9,15(R15)\nTLOOP2   SR    R14,R14\n         IC    R14,0(R2)\n         LA    R4,IBUF(R14)\n         SR    R7,R7\n         IC    R7,0(R15)\n         AR    R7,R7\n         LH    R7,OPCODES(R7)\n         LTR   R7,R7\n         BM    NXTHW\nTSTOP    LA    R7,OPTAB(R7)\n         CLI   0(R7),X'20'\n         BE    LONGOP\n         CLI   0(R7),X'81'\n         BE    MAINEM\n         TM    0(R7),X'10'\n         BO    EXTOP\nMOVEOP   IC    R14,0(R7)\n         EX    R14,MVOP\nNXTHW    BCTR  R2,0                     NEXT IBUF DISPLACEMENT\n         BXLE  R15,R8,TLOOP2            NEXT ABS HW ADDRESS\n         LM    R14,R1,REL\n         BXH   R15,R0,TLAST\n         AR    R14,R0\n         STM   R14,R15,REL\n         BAL   R14,PUTGOT\n         TM    SW1,DMPSW\n         BO    TLOOP\n         LA    R0,2\n         BAL   R14,RESERVE\nTBYBY    L     R7,TR7\n         B     ELOOP\n         SPACE 1\nTLAST    BAL   R14,PUTGOT\n         NI    SW1,255-DMPSW\n         B     TBYBY\n         SPACE 1\nMVOP     MVC   0(,R4),1(R7)\n         SPACE 1\nEXTOP    IC    R14,1(R15)               ISOLATE MASK\n         SRA   R14,4\n         LA    R1,X'10'(R14)\n         IC    R14,0(R7)\n         LA    R7,1(,R7)\n         CR    R14,R1\n         BE    MOVEOP\n         IC    R14,0(R7)\n         LA    R7,2(R7,R14)\n         CLI   0(R7),X'FF'\n         BE    NXTHW\n         B     EXTOP\n         SPACE 1\nLONGOP   IC    R14,1(R7)\n         LA    R1,3(R7,R14)\n         CLC   2(1,R7),1(R15)\n         BNE   NXTLONG\n         MVC   EMNAME,3(R7)\n         CLI   1(R1),X'FF'\n         BE    *+12\n         TM    1(R1),X'80'\n         BO    EM1ST\n         LA    R7,2(R7)\n         B     MOVEOP+4\n         SPACE 1\nNXTLONG  TM    1(R1),X'80'\n         BO    NXTHW\n         LR    R7,R1\n         B     LONGOP\n         SPACE 1\nMAINEM   IC    R14,3(R7)\n         LA    R1,5(R7,R14)\n         MVC   EMNAME,5(R7)\n         CLC   1(1,R15),4(R7)\n         BE    EM1ST\n         LH    R7,1(R7)\n         B     TSTOP\n         SPACE 1\nEM1ST    LA    R0,5(R15)                IS ENTIRE INSTRUCTION DUMPED?\n         C     R0,END\n         BH    NXTHW                     NO - DON'T TRY TO LOOK IT UP\nEMNXT    CLI   1(R1),X'80'              IS THIS NORMAL OP?\n         LA    R1,1(R1)\n         BE    EMNXT                     YES - SKIP OVER FLAG\n         BL    EM8                       YES - NO FLAG\n         CLI   0(R1),X'81'              NEXT EMULATOR?\n         BE    USEMAIN                   YES -\n         CLI   0(R1),X'FF'              IS THIS ALL THERE IS?\n         BE    USEMAIN                   YES\n*              MUST BE A0(16 BIT) OR C0(12 BIT)\n         CLC   2(1,R15),1(R1)           DO 1ST 8 BITS OF OPCODE MATCH?\n         BE    EMEXT                     YES\n         IC    R14,2(R1)                SKIP ALL SUBOP ENTRIES\n         LA    R1,3(R1,R14)\n         TM    2(R1),X'80'\n         BZ    *-12\n         BCT   R1,EMNXT\n         SPACE 1\nEM8      IC    R14,0(R1)\n         CLC   2(1,R15),1(R1)\n         BE    MOVEMOP\n         LA    R1,2(R1,R14)\n         B     EMNXT\n         SPACE 1\nEMEXT    CLI   0(R1),X'A0'\n         BE    EM16\n         MVN   EMSUBOP,3(R15)           ISOLATE BITS 12-15\n         IC    R14,2(R1)                RIGHT ENTRY?\n         CLC   EMSUBOP,3(R1)\n         BE    MOVEXMOP                  YES\n         LA    R1,3(R1,R14)              NO - GET NEXT ENTRY\n         CLI   2(R1),X'80'              SAME MAJOR OPCODE?\n         BL    *-22                      YES - TRY AGAIN\n         B     USEMAIN\n         SPACE 1\nEM16     IC    R14,2(R1)\n         CLC   3(1,R15),3(R1)           BITS 8-15 MATCH?\n         BE    MOVEXMOP                  YES\n         LA    R1,3(R1,R14)              NO - GET NEXT ENTRY\n         CLI   2(R1),X'80'              SAME MAJOR OPCODE?\n         BL    EM16                      YES - TRY AGAIN\n*        B     USEMAIN\n         SPACE 1\nUSEMAIN  MVC   0(5,R4),EMNAME\n         B     NXTHW\n         SPACE 1\nMOVEXMOP LA    R1,2(R1)\nMOVEMOP  LA    R1,1(R1)\n         B     MOVEOP+4\nEMNAME   DC    C'EMUXX'\nEMSUBOP  DC    X'0'                     0 ZONE, VARIABLE NUMERIC\n         SPACE 1\n*              SET UP FOR BACKWARDS INDEXING, VIA BXLE\n         DC    AL1(THW8-IBUF,THW7-IBUF,THW6-IBUF,THW5-IBUF)\n         DC    AL1(THW4-IBUF,THW3-IBUF,THW2-IBUF,THW1-IBUF)\nTDISP    EQU   *-1\nTR7      DS    F\n         LTORG\n         MZSHD 'OPCODES'\n         PRINT NOGEN\nOPTAB    DS    0H\n*              BASIC\nA        MZOP  5A\nAH       MZOP  4A\nAL       MZOP  5E\nALR      MZOP  1E\nAR       MZOP  1A\nBAL      MZOP  45\nBALR     MZOP  05\nBAS      MZOP  4D,EM=2067\nBASR     MZOP  0D,EM=2067\nB        MZOP  47,F\nBNO      MZOP  47,E\nBNH      MZOP  47,D\nBEL      MZOP  47,C\nBNL      MZOP  47,B\nBEH      MZOP  47,A\nBEO      MZOP  47,9\nBE       MZOP  47,8\nBNE      MZOP  47,7\nBHL      MZOP  47,6\nBLO      MZOP  47,5\nBL       MZOP  47,4\nBHO      MZOP  47,3\nBH       MZOP  47,2\nBO       MZOP  47,1\nNOP      MZOP  47,0\nBR       MZOP  07,F\nBNOR     MZOP  07,E\nBNHR     MZOP  07,D\nBELR     MZOP  07,C\nBNLR     MZOP  07,B\nBEHR     MZOP  07,A\nBEOR     MZOP  07,9\nBER      MZOP  07,8\nBNER     MZOP  07,7\nBHLR     MZOP  07,6\nBLOR     MZOP  07,5\nBLR      MZOP  07,4\nBHOR     MZOP  07,3\nBHR      MZOP  07,2\nBOR      MZOP  07,1\nNOPR     MZOP  07,0\nBCT      MZOP  46\nBCTR     MZOP  06\nBXH      MZOP  86\nBXLE     MZOP  87\nC        MZOP  59\nCDS      MZOP  BB,EM=370\nCH       MZOP  49\nCL       MZOP  55\nCLC      MZOP  D5\nCLCL     MZOP  0F,EM=370\nCLI      MZOP  95\nCLM      MZOP  BD,EM=370\nCLR      MZOP  15\nCR       MZOP  19\nCS       MZOP  BA,EM=370\nCVB      MZOP  4F\nCVD      MZOP  4E\nD        MZOP  5D\nDIAG     MZOP  83\nDR       MZOP  1D\nEX       MZOP  44\nHIO      MZOP  9E00\nHDV      MZOP  9E01\nIC       MZOP  43\nICM      MZOP  BF,EM=370\nIMVC     MZOP  E8,EM=IMVC\nL        MZOP  58\nLA       MZOP  41\nLCR      MZOP  13\nLCTL     MZOP  B7,EM=370\nLH       MZOP  48\nLM       MZOP  98\nLMC      MZOP  B8,EM=2067\nLNR      MZOP  11\nLPR      MZOP  10\nLPSW     MZOP  82\nLR       MZOP  18\nLRA      MZOP  B1,EM=370\nLRA      MZOP  B1,EM=2067\nLTR      MZOP  12\nM        MZOP  5C\nMC       MZOP  AF,EM=360                UNTRUE BUT GTF USES\nMH       MZOP  4C\nMR       MZOP  1C\nMVC      MZOP  D2\nMVCL     MZOP  0E,EM=370\nMVI      MZOP  92\nMVN      MZOP  D1\nMVO      MZOP  F1\nMVZ      MZOP  D3\nN        MZOP  54\nNC       MZOP  D4\nNI       MZOP  94\nNR       MZOP  14\nO        MZOP  56\nOC       MZOP  D6\nOI       MZOP  96\nOR       MZOP  16\nPACK     MZOP  F2\nS        MZOP  5B\nSH       MZOP  4B\nSIGP     MZOP  AE,EM=370\nSIO      MZOP  9C00\nSIOF     MZOP  9C01\nSL       MZOP  5F\nSLA      MZOP  8B\nSLDA     MZOP  8F\nSLDL     MZOP  8D\nSLL      MZOP  89\nSLR      MZOP  1F\nSPM      MZOP  04\nSR       MZOP  1B\nSRA      MZOP  8A\nSRDA     MZOP  8E\nSRDL     MZOP  8C\nSRL      MZOP  88\nSSM      MZOP  80\nST       MZOP  50\nSTC      MZOP  42\nSTCM     MZOP  BE,EM=370\nSTCTL    MZOP  B6,EM=370\nSTH      MZOP  40\nSTM      MZOP  90\nSTMC     MZOP  B0,EM=2067\nSTNSM    MZOP  AC,EM=370\nSTOSM    MZOP  AD,EM=370\nSVC      MZOP  0A\nTCH      MZOP  9F00\nTIO      MZOP  9D00\nCLRIO    MZOP  9D01\nTM       MZOP  91\nTR       MZOP  DC\nTRT      MZOP  DD\nTS       MZOP  93\nUNPK     MZOP  F3\nX        MZOP  57\nXC       MZOP  D7\nXI       MZOP  97\nXR       MZOP  17\nIPK      MZOP  B20B,EM=370\nPTLB     MZOP  B20D,EM=370\nRRB      MZOP  B213,EM=370\nSCK      MZOP  B204,EM=370\nSCKC     MZOP  B206,EM=370\nSPKA     MZOP  B20A,EM=370\nSPT      MZOP  B208,EM=370\nSPX      MZOP  B210,EM=370\nSTAP     MZOP  B212,EM=370\nSTCK     MZOP  B205,EM=370\nSTCKC    MZOP  B207,EM=370\nSTIDC    MZOP  B203,EM=370\nSTIDP    MZOP  B202,EM=370\nSTPT     MZOP  B209,EM=370\nSTPX     MZOP  B211,EM=370\n*              B2E0-B2EF ARE RESERVED FOR SOFTWARE USE,\n*              PER 370 PRINCIPLES OF OPERATION, P74.\n         SPACE 2\n*              DOS EMULATOR FEATURE OF 370\nEXL      MZOP  B20E,EM=DOS\nADJCC    MZOP  B20F,EM=DOS\n         SPACE 2\n*              STORAGE PROTECTION\nISK      MZOP  09\nSSK      MZOP  08\n         SPACE 2\n*              DECIMAL\nAP       MZOP  FA\nCP       MZOP  F9\nDP       MZOP  FD\nED       MZOP  DE\nEDMK     MZOP  DF\nMP       MZOP  FC\nSP       MZOP  FB\nSRP      MZOP  F0,EM=370\nZAP      MZOP  F8\n         SPACE 2\n*              FLOATING POINT AND EXTENDED PRECISION\nADR      MZOP  2A\nAD       MZOP  6A\nAER      MZOP  3A\nAE       MZOP  7A\nAWR      MZOP  2E\nAW       MZOP  6E\nAUR      MZOP  3E\nAU       MZOP  7E\nAXR      MZOP  36\nCDR      MZOP  29\nCD       MZOP  69\nCER      MZOP  39\nCE       MZOP  79\nDDR      MZOP  2D\nDD       MZOP  6D\nDER      MZOP  3D\nDE       MZOP  7D\nHDR      MZOP  24\nHER      MZOP  34\nLTDR     MZOP  22\nLTER     MZOP  32\nLCDR     MZOP  23\nLCER     MZOP  33\nLDR      MZOP  28\nLD       MZOP  68\nLNDR     MZOP  21\nLNER     MZOP  31\nLPDR     MZOP  20\nLPER     MZOP  30\nLER      MZOP  38\nLE       MZOP  78\nLRDR     MZOP  25\nLRER     MZOP  35\nMDR      MZOP  2C\nMD       MZOP  6C\nMER      MZOP  3C\nME       MZOP  7C\nMXR      MZOP  26\nMXDR     MZOP  27\nMXD      MZOP  67\nSTD      MZOP  60\nSTE      MZOP  70\nSDR      MZOP  2B\nSD       MZOP  6B\nSER      MZOP  3B\nSE       MZOP  7B\nSWR      MZOP  2F\nSW       MZOP  6F\nSUR      MZOP  3F\nSU       MZOP  7F\nSXR      MZOP  37\n         SPACE 2\n*              DIRECT CONTROL\nRDD      MZOP  85\nWRD      MZOP  84\n         SPACE 2\nDIL14    MZOP  EA00,EM=14XX\nBDI      MZOP  EA01,EM=14XX\nANUM     MZOP  EA04,EM=14XX\nCOMP     MZOP  EA05,EM=14XX\nMCPU     MZOP  EA08,EM=14XX\nMIO      MZOP  EA09,EM=14XX\nBIFLG    MZOP  EA0C,EM=14XX\n         SPACE 2\nEMU70    MZOP  E901,EM=707X\nEBI      MZOP  -10,EM=707X\nSIC      MZOP  -11,EM=707X\nETCI     MZOP  -20,EM=707X\nDIL70    MZOP  -25,EM=707X\nELB      MZOP  -A0,EM=707X\nELBR     MZOP  -A1,EM=707X\nELBZ     MZOP  -A2,EM=707X\nEUNA     MZOP  -A3,EM=707X\nENA      MZOP  -A9,0,EM=707X\nENS      MZOP  -A9,1,EM=707X\nENB      MZOP  -A9,2,EM=707X\nEFST     MZOP  -AB,0,EM=707X\nEMAD     MZOP  -AB,C,EM=707X\nEBIX     MZOP  -AC,0,EM=707X\nEBDX     MZOP  -AC,1,EM=707X\nEUB      MZOP  -AA,0,EM=707X\nEUBR     MZOP  -AA,1,EM=707X\nESC      MZOP  -AD,EM=707X\nECA      MZOP  -AE,EM=707X\nERG      MZOP  -AF,8,EM=707X\nERS      MZOP  -AF,9,EM=707X\nEUNS     MZOP  -B0,EM=707X\nETMB     MZOP  -B3,EM=707X\nEAN      MZOP  -B5,EM=707X\nEA       MZOP  -B6,0,EM=707X\nES       MZOP  -B6,1,EM=707X\nEC       MZOP  -B6,2,EM=707X\nELBC     MZOP  -B8,EM=707X\nEXA      MZOP  -BA,0,EM=707X\nEXS      MZOP  -BA,1,EM=707X\nEFD      MZOP  -BD,EM=707X\nELL      MZOP  -BF,0,EM=707X\nELE      MZOP  -BF,1,EM=707X\nELEH     MZOP  -BF,2,EM=707X\n         SPACE 2\nEMU80    MZOP  E902,EM=7080\nLB       MZOP  -0E,0,EM=7080\nLBM      MZOP  -0E,1,EM=7080\nUBS      MZOP  -0F,0,EM=7080\nUBP      MZOP  -0F,1,EM=7080\nZAPZ     MZOP  -09,EM=7080\nESPC     MZOP  -10,EM=7080\nSETMD    MZOP  -11,EM=7080\nBRIF     MZOP  -12,EM=7080\nCERZ     MZOP  -13,EM=7080\nZACB     MZOP  -14,0,EM=7080\nZAPON    MZOP  -14,4,EM=7080\nZAPF     MZOP  -14,8,EM=7080\nZAMF     MZOP  -14,C,EM=7080\nATFS     MZOP  -15,0,EM=7080\nCSELR    MZOP  -15,1,EM=7080\nUNSPC    MZOP  -15,2,EM=7080\nCINZA    MZOP  -15,3,EM=7080\nBSOF     MZOP  -16,EM=7080\nBRIND    MZOP  -17,EM=7080\nEEIA     MZOP  -24,EM=7080\nDIL80    MZOP  -25,EM=7080\nETRP     MZOP  -27,0,EM=7080\nETRZ     MZOP  -27,1,EM=7080\nMDOFF    MZOP  -A4,EM=7080\nMDON     MZOP  -A6,EM=7080\nEULA     MZOP  -A9,1,EM=7080\nEUFC     MZOP  -A9,2,EM=7080\nEUSB     MZOP  -A9,3,EM=7080\nEUNL     MZOP  -A9,7,EM=7080\nETR      MZOP  -AA,EM=7080\nDILEX    MZOP  -AB,EM=7080\nEST      MZOP  -AC,EM=7080\nESPR     MZOP  -AD,1,EM=7080\nEADM     MZOP  -AD,4,EM=7080\nESET     MZOP  -AE,0,EM=7080\nERND     MZOP  -AE,2,EM=7080\nESHR     MZOP  -AE,3,EM=7080\nSALSM    MZOP  -AE,5,EM=7080\nEAAM     MZOP  -AF,EM=7080\nRSTER    MZOP  -B3,EM=7080\nEBLM     MZOP  -B5,0,EM=7080\nESND     MZOP  -B5,1,EM=7080\nETMT     MZOP  -B5,2,EM=7080\nETCT     MZOP  -B5,3,EM=7080\nETCR     MZOP  -B5,7,EM=7080\nEMPY     MZOP  -B600,EM=7080\nEADD     MZOP  -B640,EM=7080\nESUB     MZOP  -B6,1,EM=7080\nERAD     MZOP  -B6,2,EM=7080\nERSU     MZOP  -B6,3,EM=7080\nETLE     MZOP  -B6,4,EM=7080\nETLH     MZOP  -B6,6,EM=7080\nELOD     MZOP  -B6,8,EM=7080\nECMP     MZOP  -B6,9,EM=7080\nELDA     MZOP  -B6,D,EM=7080\nELSB     MZOP  -B6,E,EM=7080\nELFC     MZOP  -B6,F,EM=7080\nEMU90    MZOP  E900,EM=709X\nSKC9     MZOP  -0E,EM=709X\nTLQ9     MZOP  -0F,EM=709X\nPXD9     MZOP  -10,EM=709X\nLLS9     MZOP  -11,0,EM=709X\nLRS9     MZOP  -11,1,EM=709X\nALS9     MZOP  -11,2,EM=709X\nARS9     MZOP  -11,3,EM=709X\nLGR9     MZOP  -11,4,EM=709X\nLGL9     MZOP  -11,5,EM=709X\nRQL9     MZOP  -11,6,EM=709X\nSHFT9    MZOP  -11,EM=709X\nBA9      MZOP  -12,EM=709X\nAXT9     MZOP  -13,EM=709X\nSM9      MZOP  -14,EM=709X\nD9       MZOP  -15,EM=709X\nACL9     MZOP  -16,EM=709X\nXCA9     MZOP  -17,0,EM=709X\nSSM9     MZOP  -17,1,EM=709X\nCHS9     MZOP  -17,2,EM=709X\nSQP9     MZOP  -17,EM=709X\nDIL9     MZOP  -25,EM=709X\nSTO9     MZOP  -A0,EM=709X\nSTQ9     MZOP  -A1,EM=709X\nSLW9     MZOP  -A2,EM=709X\nMVDD9    MZOP  -A3,EM=709X\nMVED9    MZOP  -A4,EM=709X\nISIC9    MZOP  -A5,EM=709X\nBC9      MZOP  -A6,EM=709X\nTXI9     MZOP  -A7,EM=709X\nMVEB9    MZOP  -A8,EM=709X\nFM9      MZOP  -A9,EM=709X\nDFAS9    MZOP  -AA,EM=709X\nFAS9     MZOP  -AB,EM=709X\nDFM9     MZOP  -AC,EM=709X\nDFD9     MZOP  -AD,EM=709X\nFD9      MZOP  -AE,EM=709X\nM9       MZOP  -AF,EM=709X\nMVDB9    MZOP  -B0,EM=709X\nTSX9     MZOP  -B1,EM=709X\nSXA9     MZOP  -B3,0,EM=709X\nSXD9     MZOP  -B3,2,EM=709X\nLXD9     MZOP  -B3,3,EM=709X\nLXA9     MZOP  -B3,5,EM=709X\nLSX9     MZOP  -B3,EM=709X\nPX9      MZOP  -B4,EM=709X\nADD9     MZOP  -B5,0,EM=709X\nADM9     MZOP  -B5,1,EM=709X\nSUB9     MZOP  -B5,4,EM=709X\nSBM9     MZOP  -B5,5,EM=709X\nAS9      MZOP  -B5,EM=709X\nDLD9     MZOP  -B6,EM=709X\nTNX9     MZOP  -B7,EM=709X\nBAC9     MZOP  -B8,EM=709X\nTMI9     MZOP  -B9,2,EM=709X\nTPL9     MZOP  -B9,6,EM=709X\nTOV9     MZOP  -B9,8,EM=709X\nTNO9     MZOP  -B9,9,EM=709X\nTC9      MZOP  -B9,EM=709X\nCLA9     MZOP  -BA,0,EM=709X\nCLS9     MZOP  -BA,1,EM=709X\nCAL9     MZOP  -BA,2,EM=709X\nLDQ9     MZOP  -BA,3,EM=709X\nSTA9     MZOP  -BA,4,EM=709X\nLST9     MZOP  -BA,EM=709X\nXEC9     MZOP  -BB,EM=709X\nTXL9     MZOP  -BC,EM=709X\nTXH9     MZOP  -BD,EM=709X\nTIX9     MZOP  -BE,EM=709X\nSKAC9    MZOP  -BF,EM=709X\n         SPACE 2\nOPCODES  MZOP  TABLE\n         MZSHD 'DSECTS'\nTHW      DSECT\n         DS    C\n         SPACE 1\nCORE     DSECT\nCWD1     DS    F\nCWD2     DS    F\nCWD3     DS    F\nCWD4     DS    F\n         ORG   CORE\nCHW1     DS    H\nCHW2     DS    H\nCHW3     DS    H\nCHW4     DS    H\nCHW5     DS    H\nCHW6     DS    H\nCHW7     DS    H\nCHW8     DS    H\n         PRINT NOGEN\n        MZWORK MAIN=YES MAIN=YES\nMZAPMAIN DSECT\n         ORG   IBUF\nDRELL    DS    C'R:',C\nDRELD    DS    CL6,C\nDABSL    DS    C'A:',C\nDABSD    DS    CL6,CL2\nDWD1     DS    CL8,C\nDWD2     DS    CL8,CL3\nDWD3     DS    CL8,C\nDWD4     DS    CL8,CL2\nDAST1    DS    C'*'\nDEBC     DS    CL16\nDAST2    DS    C'*'\n         ORG   IBUF\nTREL     DS    CL6,C\nTABS     DS    CL6,CL2\nTHW1     DS    CL4,C\nTHW2     DS    CL4,CL2\nTHW3     DS    CL4,C\nTHW4     DS    CL4,CL3\nTHW5     DS    CL4,C\nTHW6     DS    CL4,CL2\nTHW7     DS    CL4,C\nTHW8     DS    CL4,CL2\nTAST1    DS    C'*'\nTEBC     DS    CL16\nTAST2    DS    C'*'\n         END\n./ ADD NAME=MZAP6    0100-19106-19106-1238-00313-00313-00000-MZAP78  18\nMZAP6    TITLE 'MOREZAP PATCH PROCESSOR - COPYRIGHT 1975 SHMUEL METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         EJECT\n         MACRO\n         MZ6   &TYPE\n         COPY  MZGBL\n         AIF   ('&TYPE' EQ 'REFR').REFR\n         MNOTE 12,'MZ6 SPECIFIES AN INVALID TYPE - ''&TYPE'''\n         MNOTE 12,'CODE GENERATION SUPPRESSED'\n         MEXIT\n.REFR    MZTST OS\n&MZMATCH SETB  (&MZMATCH OR &MZUPC)\n         AIF   (NOT &MZMATCH).END\n         AIF   (NOT &MZUPC).ISOSCDE\n         TM    CVTDCB,CVT6DAT           SKIP REFR HANDLING IF VS\n         BO    NOOSCDE\n.ISOSCDE CLI   VRNAME,C'.'              NUCLEUS?\n         BE    NOOSCDE                   YES - NO CDE\n         TM    SW1,NOGO                 VERIFY FAILED?\n         BO    NOOSCDE                   YES - SKIP REFR HANDLING\n         L     R9,VRCDEPTR              MAKE NOT REFRESHABLE\n         NC    CDATTR2-CDENTRY(1,R9),7(R14)\n*              NOTE THAT ON VER PASS, 7(R14) WILL BE FF,\n*                        ON REP PASS, 7(R14) WILL BE FF-CDREFR,\nNOOSCDE EQU    *\n.END     MEND\n         SPACE 5\n         COPY  MZGBL\n         MZSET\n         PUNCH '         ALIAS MZAPATCH'\n         TITLE 'MOREZAP PATCH PROCESSOR'\n         MZHED 'MOREZAP PATCH PROCESSOR'\n*              PLEASE YOURSELVES, SAY I, AND THEY\n*              NEED ONLY LOOK THE OTHER WAY.\n*              BUT NO, THEY WILL NOT; THEY MUST STILL\n*              WREST THEIR NEIGHBOR TO THEIR WILL,\n*              AND MAKE ME DANCE AS THEY DESIRE\n*              WITH JAIL AND GALLOWS AND HELL-FIRE.\n*              THEY WILL BE MASTER, RIGHT OR WRONG;\n*              THOUGH BOTH ARE FOOLISH, BOTH ARE STRONG.\n         SPACE 1\n*              A. E. HAUSSMAN, LAST POEMS XII\n         SPACE 1\n         PRINT GEN\nMZAPATCH MZENT\n         NI    SW2,255-VEREPSW\n*              MODEL DEPENDENT RMS SUPPORT CODE MUST BE ADDED,\n*              TO PREVENT INCORRECT REFRESH LOAD OR CHECKSUM RESTORE\n*              OF REFRESHABLE LPA AND NUC MODULES.\n         USING VRSECT,R4\n         SR    R5,R5                    IC REG\n         MZKEY ZERO                     DISABLE BETWEEN VER AND REP\n         SSM   *+1\n         BAL   R14,DOIT                 DO VERIFIES\n         CLC   0(,R1),VRDAT\n         DC    AL1(VRVER,255)\n         SPACE 1\n*              AND THUS THE NATIVE HUE OF RESOLUTION\n*              IS SICKLIED O'ER WITH THE PALE CAST OF THOUGHT,\n*              AND ENTERPRISES OF GREAT PITCH AND MOMENT,\n*              WITH THIS REGARD THEIR CURRENTS TURN AWRY,\n*              AND LOSE THE NAME OF ACTION\n         SPACE 1\n*              III 1 HAM\n         SPACE 1\n         TM    SW1,NOGO                 OK TO REP?\n         BO    KVETCH                    NO\n         BAL   R14,DOIT                 PROCESS REPLACES\n         MVC   0(,R1),VRDAT\n         DC    AL1(VRREP,255-CDREFR)\nKVETCH   SSM   *+1                      ENABLE\n         ORG   *-3\n         DC    X'FF'\n         ORG   *+2\n         MZKEY KLUB                     RETURN TO NORMAL KEY\n         TM    SW1,NOGO                 WAS THERE AN ERROR OR VER FAIL?\n         BZ    EUREKA                    NO - GO TO UNRESET FOR CLEANUP\n         DROP  R4\n         L     R7,HEAD                  LIST VER/REP/NAME/INDEX FAILS\n         USING VRSECT,R7\nNACHES   TM    VRFLG,VRFAIL\n         BNZ   LISTIT\nNEXT     MZLT  R7,VRNEXT\n         BNZ   NACHES\n         LA    R0,4\n         C     R0,HIGHRC\n         BL    *+8\n         ST    R0,HIGHRC\n         EX    0,BLCARD\n         MZMVC 'MZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED'\n         BAL   R14,PUTGOT\n         B     BYBY\n         SPACE 1\nEUREKA   EX    0,BLCARD\n         MZMVC 'MZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL'\n         BAL   R14,PUTGOT\n         SPACE 1\nBYBY     L     R13,4(,R13)              GO TO UNRESET\n         LM    R14,R12,12(R13)\n         L     R15,ADDT-MZAPMAIN(,R10)\n         TM    SW1-MZAPMAIN(R10),DEBUGSW\n         BOR   R15\n         L     R15,A#666-MZAPMAIN(,R10)\n         BR    R15\nLISTIT   EX    0,BLCARD\n         MZMVC 'MZP601I'\n         LH    R0,VRLINE\n         CVD   R0,DOUBLE\n         OI    DOUBLE+7,15\n         UNPK  IBUF+8(5),DOUBLE\n         CLI   VRTYPE,VRNAME\n         BE    LISTNAME\n         CLI   VRTYPE,VRREP             IS IT V|R?\n         BH    NEXT                      NO\n         TM    VRFLG,VRBOUNDS\n         BO    BOUNDED\n         MVI   IBUF+5,C'3'\n         MVC   IBUF+14(17),=C'VERIFY FAILURE AT'\n         L     R1,VRLOC\n         LCR   R0,R1\n         TM    VRLC,X'80'               IS RELATIVE LOC NEGATIVE?\n         BZ    POSLOC                    NO - PRINT SIX DIGITS\n         ST    R0,DOUBLE\n         MVI   IBUF+33,C'-'\n         MZHEX IBUF+34,DOUBLE+2,4,BL=*\n         B     NEGLOC\nPOSLOC   MZHEX IBUF+32,VRLC,6\nNEGLOC   EQU   *-4\n         MVC   IBUF+39(4),=C'ABS:'\n         MZHEX IBUF+44,VRAB,6\n         BAL   R14,PUTGOT\n         MVC   IBUF+14(17),=C'ACTUAL CONTENT IS'\n         MVC   IBUF+32(18),BLANKARD\n         MVI   IBUF+5,C'4'\n         LA    R4,5\n         LA    R5,IBUF+75\n         LA    R6,IBUF+32\n         LA    R1,VRDAT\n         SR    R9,R9\n         IC    R9,VRDATLN\nMOREVER  UNPK  0(5,R6),0(3,R1)\n         TR    0(4,R6),HEXTAB-C'0'\n         MVI   4(R6),C','\n         SH    R9,=H'2'\n         BM    ENDVER\n         LA    R1,2(R1)\n         BXLE  R6,R4,MOREVER\n         B     LIST\nENDVER   MVI   4(R6),C' '\n         SPACE 1\nLIST     BAL   R14,PUTGOT\n         B     NEXT\n         SPACE 1\nBOUNDED  MVI   IBUF+5,C'2'\n         LM    R14,R15,VRLOC            (14,15)<-(LOC,ABS)\n         SR    R1,R1\n         IC    R1,VRDATLN\n         AR    R14,R1\n         AR    R15,R1\n         STM   R14,R15,DOUBLE\n         MZHEX IBUF+14,VRLC,6,BL=':'\n         MZHEX IBUF+21,DOUBLE+1,6\n         MVC   IBUF+28(4),=C'ABS:'\n         MZHEX IBUF+33,VRAB,6,BL=':'\n         MZHEX IBUF+40,DOUBLE+5,6\n         MVC   IBUF+47(12),=C'OUT OF RANGE'\n         B     LIST\n         SPACE 1\nLISTNAME MVC   IBUF+14(4),=C'NAME'\n         MVC   IBUF+19(8),NUCMEM\n         CLI   VRNAM,C'.'\n         BE    *+10\n         MVC   IBUF+19(8),VRNAM\n         CLI   VRCSECT,0                IS THERE A CSECT NAME?\n         BE    *+10                      NO\n         MVC   IBUF+28(8),VRCSECT\n         B     LIST\n         DROP  R7\n         SPACE 5\n*              SUBROUTINE TO PROCESS NAME, BASE, INDEX, VER, AND REP.\n*              CALLED BY:\n*        BAL   R14,DOIT\n*        CLC   0(,R1),VRDAT\n*        DC    AL1(VRVER,255)\n         SPACE 1\n*              OR:\n*        BAL   R14,DOIT\n*        MVC   0(,R1),VRDAT\n*        DC    AL1(VRREP,255-CDREFR)\n         SPACE 1\n*              REGISTER USAGE:\n*        1     LOCATION\n*        4     ENTRY POINTER\n*        9     ENTRY FOR NAME\n*        14    RETURN\n*        5     LENGTH-1\n*        6     LOCATION OF CSECT\n*        7     END+1    OF CSECT\n*        15    INDEX-BASE\n         SPACE 1\nDOIT     L     R4,HEAD\n         USING VRSECT,R4\nVERILY   L     R1,VRLOC                 GET LOC, INDEX, BASE, ETC.\n         LA    R1,0(R1)\n         CLI   VRTYPE,VRNAME\n         BE    VRNM\n         CLI   VRTYPE,VRINDEX\n         BE    VRIX\n         CLI   VRTYPE,VRHINDEX\n         BE    VRHIX\n         CLI   VRTYPE,VRBASE\n         BE    VRBS\n         CLI   VRTYPE,VRREP             IS THIS VER/REP?\n         BNH   VRVR                      YES - PROCESS\n         CLI   VRTYPE,VRPOINT           IS THIS POINT OR UNSAVE?\n         BL    NEXTRUTH                  NO - SKIP\n         TM    VRFLG,VRFND+VRBOUNDS     NOT FOUND OR OUT OF BOUNDS?\n         BNM   DEIX                      YES - SKIP FOLLOWING REPS\n         L     R6,VRABS                 RE-ESTABLISH BEGIN\n         LA    R6,0(,R6)\n         LH    R7,VRLENB                RE-ESTABLISH END+1\n         LA    R7,0(R6,R7)\n         LH    R15,VRIXB                RE-ESTABLISH INDEX\n         LA    R15,0(R6,R15)\n         SPACE 1\nNEXTRUTH MZLT  R4,VRNEXT                ANY MORE?\n         BNZ   VERILY\n         B     8(R14)                    NO MORE\n         SPACE 1\nVRNM     TM    VRFLG,VRFND\n         BZ    DENAME\n         MZ6   REFR\n         LR    R9,R4                    SAVE ENTRY IN CASE OF FAIL\n         LR    R6,R1                    GET ABS LOC\n         LR    R15,R1                   INDEX=0\n         L     R7,VRSIZE-1              GET END+1 = LOC+LEN\n         LA    R7,0(R6,R7)               WITH HIGH BYTE = 0\n         B     NEXTRUTH\n         SPACE 1\nVRIX     TM    VRFLG,VRFND\n         BZ    DEIX\n         L     R6,VRLOC-VRSECT(R9)      GET ABS LOC\n         LA    R6,0(,R6)\n         L     R7,VRSIZE-1-VRSECT(R9)   GET END+1 = LOC+LEN\n         LA    R7,0(R6,R7)\n         LR    R15,R1                   INDEX=NEW INDEX\n         B     NEXTRUTH\n         SPACE 1\nVRBS     LCR   R1,R1                    INDEX=INDEX + (-NEW INDEX)\nVRHIX    AR    R15,R1                   INDEX=INDEX + NEW INDEX\n         B     NEXTRUTH\n         SPACE 1\nVRVR     TM    VRFLG-VRSECT(R9),VRFND   IS NAME OK?\n         BZ    DENAME                    NO - CAN'T VALIDATE V|R\n         TM    VRFLG,VRBOUNDS           ALREADY KVETCHED?\n         BO    NEXTRUTH                  YES - ONCE IS ENOUGH\n         IC    R5,VRDATLN\n         LA    R1,0(R1,R15)             ADD INDEX-BASE TO REL LOCATION\n         LA    R0,0(R1,R5)              CALC END=START+LEN-1\n         CR    R0,R1                    WRAP-AROUND ERROR?\n         BL    FAILVR                    YES\n         CR    R1,R6                    ADDRESS TOO LOW?\n         BL    FAILVR                    YES\n         CR    R0,R7                    LENGTH TOO LONG?\n         BL    *+12                      NO\nFAILVR   OI    VRFLG,VRBOUNDS            YES\n         B     FAIL\n         CLC   VRTYPE,6(R14)            IS IT 1ST&VER | 2ND&REP?\n         BNZ   NEXTRUTH                  NO\n         EX    R5,0(R14)                CLC/MVC\n         BE    NEXTRUTH\n         EX    R5,SAVEFAIL\nFAIL     OI    VRFLG,VRFAIL             FLAG V|R\n         OI    VRFLG-VRSECT(R9),VRFAIL  FLAG NAME CARD\n         OI    SW1,NOGO\n         B     NEXTRUTH\n         SPACE 1\nSAVEFAIL MVC   VRDAT(0),0(R1)\n         SPACE 1\nDEIX     MZLT  R4,VRNEXT                SKIP TO NAME OR IX ENTRY\n         BZ    8(R14)\n         CLI   VRTYPE,VRINDEX\n         BE    VERILY\n         CLI   VRTYPE,VRNAME\n         BE    VERILY\n         CLI   VRTYPE,VRPOINT           POINT OR UNSAVE?\n         BL    DEIX                      NO SKIP IT\n         B     VERILY                    YES\n         SPACE 1\nDENAME   MZLT  R4,VRNEXT                SKIP TO NEXT NAME ENTRY\n         BZ    8(R14)\n         CLI   VRTYPE,VRNAME\n         BNZ   DENAME\n         B     VERILY\n         DROP  R4\n         SPACE 1\nHEXTAB   DC    C'0123456789ABCDEF'\n         LTORG\n         PRINT NOGEN\n        MZWORK MAIN=YES,CD=YES\nCDREFR  EQU   X'20'\n         END\n./ ADD NAME=MZAP7    0100-19106-19106-1238-00101-00101-00000-MZAP78  18\nMZP7     TITLE 'MOREZAP UNRESET ROUTINE - COPYRIGHT 1975 SHMUEL METZ'\n*              THIS PROGRAM WAS WRITTEN BY:\n         SPACE 1\n*                                  SHMUEL METZ\n*                                  TECHNION,\n*                                    ISRAEL INSTITUTE OF TECHNOLOGY\n*                                  TECHNION CITY\n*                                  HAIFA, ISRAEL\n         SPACE 2\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\n*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION\n*              FROM THE AUTHOR.\n         SPACE 5\n         COPY  MZGBL\n         MZSET\n         PUNCH '         ALIAS MZUNREST'\n         TITLE 'CLEANUP AFTER ALL PROCESSING FOR RESET OR EODAD - COPYR*\n               IGHT 1975 SHMUEL METZ'\n         MZHED 'CLEANUP AFTER ALL PROCESSING FOR RESET OR EODAD'\n*              AND SINCE, MY SOUL, WE CANNOT FLY\n*              TO SATURN NOR TO MERCURY,\n*              KEEP WE MUST, IF KEEP WE CAN,\n*              THOSE FOREIGN LAWS OF GOD AND MAN.\n         SPACE 1\n*              A. E. HAUSSMAN, LAST POEMS XII\n         SPACE 1\nMZUNREST MZENT\n         TM    SW1,DEBUGSW              DEBUG MODE SET?\n         BZ    NODDT\n         TM    CVTDCB,CVT6DAT           VS?\n         BO    NODDT                     YES - SKIP DELETING OS NAME\n        DELETE EP=IGC0A05A              REMOVE SNAP SERVICE MODULE\nNODDT    NI    SW1,NOTNUC+KEYSW         TURN OFF DEBUGSW AND NOGO\n         NI    SW2,EOD+HOLDSW\n         XC    HEAD(8),HEAD             HEAD=TAIL=0\n      FREEMAIN R,SP=13\n         TM    SW2,EOD\n         BO    CESTTOUT\n         BAL   R14,EJECT\n         L     R15,ACORN\n         MZGO\n         SPACE 1\nCESTTOUT EX    0,BLCARD\n         MZMVC 'MZP701I EOD'\n         BAL   R14,PUTGOT\n         TM    SW3,TSOSW\n         BZ    NOTSO\n         STAX\n     SPAUTOPT\nNOTSO    LA    R4,SYSIN\n         BAL   R9,CLOSE\n         L     R12,PUTLOG\n         BAL   R8,DELETE\n         L     R12,PUTMON\n         BAL   R8,DELETE\n         L     R12,PUTCON\n         BAL   R8,DELETE\n         LA    R4,SYSNUC\n         BAL   R9,CLOSE\n         USING IHADCB,R4\n         MZLT  R4,NEXTDCB               ANY MORE?\n         BZ    BYBY                      NO\nCLUP     BAL   R9,CLOSE\n         LA    R1,0(,R4)\n         L     R4,NEXTDCB               GET NEXT BEFORE FREE\n      FREEMAIN R,A=(1),LV=NULEN\n         LA    R4,0(,R4)                KILL HIGH BYTE\n         LTR   R4,R4\n         BNZ   CLUP\n         SPACE 1\nBYBY     MZKEY ZERO                     FLOAT\n         TM    SW3,GANAVSW              IS HE A DIOGENES?\n         BO    TAGMUL                    NO - STRENGTHEN HIS CHARACTER\n         L     R15,HIGHRC               THIS IS THE WAY THE WORLD ENDS,\n         SVC   3                        NOT WITH A BANG, BUT A WHIMPER\n         SPACE 1\nTAGMUL   STAE  E04,XCTL=YES,PURGE=NONE\nE04      BALR  R15,0                    OLD MACDONALD HAD A FARM,\n         SVC   12                       EO, EO, FOUR\n         SPACE 1\nDELETE   LA    R0,DUMMYVEC\n         CR    R0,R12\n         BER   R8\n         MZLT  R4,OFDCB(R12)\n         BZ    *+8\n         BAL   R9,CLOSE\n         DELETE EPLOC=OFNAME(,R12)\n         BR    R8\n         SPACE 1\nCLOSE    CLOSE ((R4),)\n         TM    DCBDSORG,X'42'           PS OR PO?\n         BCR   8,R9                      NO\n         TM    DCBBUFCB+3,1             BUFFER POOL EXIST?\n         BCR   1,R9                      NO\n      FREEPOOL (R4)\n         BR    R9\n         LTORG\n         PRINT NOGEN\n        MZWORK MAIN=YES\n         END\n./ ADD NAME=MZBC     0100-19106-19106-1238-00060-00060-00000-MZAP78  18\n         MACRO\n&L       MZBC  &MASK,&B\n         LCLA  &I,&J\n         LCLC  &C\n         AIF   (T'&MASK EQ 'O').NOMASK\n         AIF   (T'&B EQ 'O').NOB\n         AIF   ('&MASK' EQ 'B').B\n         AIF   ('&MASK' EQ 'NOP').NOP\n&J       SETA  1\n         AIF   ('&B'(1,1) EQ '(').NXT\n         AIF   (K'&MASK EQ 1).MSK\n         AIF   (K'&MASK EQ 2 AND '&MASK'(1,1) EQ 'N').MSK\n         AIF   ('&MASK'(1,1) EQ 'N').BUMP\n.NXT     ANOP\n&C       SETC  '&MASK'(&J,1)\n         AIF   ('&C' EQ 'Z' OR '&C' EQ 'E').E\n         AIF   ('&C' EQ 'M' OR '&C' EQ 'L').L\n         AIF   ('&C' EQ 'P' OR '&C' EQ 'H').H\n         AIF   ('&C' EQ 'O').O\n         MNOTE 12,'&C IS INVALID IN MZBC MASK &MASK'\n         MEXIT\n.E       ANOP\n&I       SETA  &I+8\n         AGO   .BUMP\n.L       ANOP\n&I       SETA  &I+4\n         AGO   .BUMP\n.H       ANOP\n&I       SETA  &I+2\n         AGO   .BUMP\n.O       ANOP\n&I       SETA  &I+1\n.BUMP    ANOP\n&J       SETA  &J+1\n         AIF   (&J LE K'&MASK).NXT\n         AIF   ('&MASK'(1,1) NE 'N').NOC\n&I       SETA  15-&I\n.NOC     AIF   ('&B'(1,1) EQ '(').BCR\n&L       BC    &I,&B\n         MEXIT\n.BCR     ANOP\n&L       BCR   &I,&B(1)\n         MEXIT\n.B       AIF   ('&B'(1,1) EQ '(').BR\n&L       B     &B\n         MEXIT\n.BR      ANOP\n&L       BR    &B(1)\n         MEXIT\n.NOP     AIF   (T'&L EQ 'O').BYBY\n&L       DS    0H\n.BYBY    MEXIT\n.MSK     ANOP\n&C       SETC  'B'.'&MASK'\n&L       &C    &B\n         MEXIT\n.NOMASK  MNOTE 12,'MASK OMITTED FOR MZIF'\n         MEXIT\n.NOB     MNOTE 12,'BRANCH ADDRESS OMITTED FOR MZBC'\n         MEND\n./ ADD NAME=MZENT    0100-19106-19106-1238-00033-00033-00000-MZAP78  18\n         MACRO\n&L       MZENT &TYPE=OVERLAY,&B=R11,                                   *\n               &DCB=0,&PUT=CVTBRET,&EJECT=CVTBRET,&ATTN=CVTBRET,       *\n               &GET=CVTBRET,&INIT=\n&L       CSECT\n         USING CVT,R3\n         AIF   ('&TYPE' EQ 'OVERLAY').OVERLAY\n         AIF   ('&TYPE' EQ 'IO').IO\n         MNOTE 12,'TYPE=&TYPE IS INVALID ON MZENT'\n         MEXIT\n.OVERLAY USING *,&B(1)\n         USING MZAPMAIN,R13\n         B     I&SYSNDX-&L.(,R15)\n         DC    AL1(L'N&SYSNDX)\nN&SYSNDX DC    C'&L - COPYRIGHT 1975 SHMUEL METZ - &SYSDATE - &SYSTIME'\nI&SYSNDX STM   R14,R12,12(R13)\n         LR    &B(1),R15\n         ST    R10,8(,R13)\n         ST    R13,4(,R10)\n         LR    R13,R10\n         MEXIT\n.IO      USING *,R12\n         USING MZAPMAIN,R13\n         DC    CL8'&L'\n         DC    A(&DCB)                  DCB\n         B     &PUT                     PUT\n         B     &EJECT                   EJECT/RESERVE\n         B     &GET                     GET\n         B     &ATTN                    TEST ATTENTION\n         AIF   (T'&INIT EQ 'O').NOINIT\n         DC    A(&INIT)              INITIALIZATION INFORMATION\n.NOINIT  DC    C'&SYSDATE - SHMUEL METZ - &SYSTIME'\n         MEND\n./ ADD NAME=MZERR    0100-19106-19106-1238-00022-00022-00000-MZAP78  18\n         MACRO\n&L       MZERR &TXT\n         LCLA  &I,&J\n         AIF   (T'&TXT EQ 'O').NOT\n         AIF   ('&TXT'(1,1) NE '''').NOQ\n&J       SETA  K'&TXT-3\n&I       SETA  2\n.SCN     AIF   ('&TXT'(&I,2) EQ '''').QA\n         AIF   ('&TXT'(&I,2) NE '&&').NXT\n.QA      ANOP\n&J       SETA  &J-1\n&I       SETA  &I+1\n.NXT     ANOP\n&I       SETA  &I+1\n         AIF   (&I LT K'&TXT).SCN\n&L       BAL   R1,INVLD\n         DC    AL1(&J),C&TXT\n         MEXIT\n.NOT     MNOTE 12,' ''TEXT'' REQUIRED'\n         MEXIT\n.NOQ     MNOTE 12,'DELIMITING '' MISSING'\n         MEND\n./ ADD NAME=MZGBL    0100-19106-19106-1238-00007-00007-00000-MZAP78  18\n         GBLA  &MZPREL,&MZSREL,&MTSVC,&HASPSVC\n         GBLB  &MZ1ST\n         GBLB  &MZMATCH                 SYSTEM MATCHES OPTIONS\n         GBLB  &MZUPC                   UPWARD COMPATABLE (OS->VS)\n         GBLB  &MFT,&MVT,&OS,&OSMFT,&OSMVT,&VS,&VS1,&VS2,&SVS,&MVS\n         GBLC  &CPU,&CPUID,&MDL,&SYS,&REL\n         GBLC  &ASP,&ASPV,&HASP,&HASPV\n./ ADD NAME=MZGM     0100-19106-19106-1238-00014-00014-00000-MZAP78  18\n         MACRO\n&L       MZGM  &SP,&SIZE\n         GBLC  &CPU\n         AIF   ('&CPU' EQ '370').ICM\n&L       LA    R0,&SP\n         LA    R1,&SIZE\n         SLL   R1,8\n         SLDL  R0,24\n         AGO   .GM\n.ICM     ANOP\n&L       LA    R0,&SIZE\n         ICM   R0,8,=AL1(&SP)\n.GM    GETMAIN R,LV=(0)\n         MEND\n./ ADD NAME=MZGO     0100-19106-19106-1238-00016-00016-00000-MZAP78  18\n         MACRO\n&L       MZGO  &BACK,&R=(R15)\n&L       L     R13,4(R13)\n         AIF   ('&BACK' EQ 'BACK').BACK\n         AIF   ('&R' EQ '*').LM\n         AIF   ('&R'(1,1) EQ '(').STORE\n         LA    R15,&R\n         ST    R15,16(R13)\n         AGO   .LM\n.STORE   ST    &R(1),16(R13)\n.LM      LM    R14,R12,12(R13)\n         AIF   ('&R' EQ '*').BYBY\n         BR    R15\n.BYBY    MEXIT\n.BACK   RETURN (14,12),T\n         MEND\n./ ADD NAME=MZHED    0100-19106-19106-1238-00043-00043-00000-MZAP78  18\n         MACRO\n&L       MZHED &TIT,&LEN=35\n.*\n.*             COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n.*\n.*             THIS MACRO IS CALLED AT THE BEGINNING OF AN ASSEMBLY,\n.*             IN ORDER TO SET UP THE LEFT HALF OF THE TITLE.\n.*             IT IS INTENDED TO BE USED IN CONJUNCTION WITH MZSHD.\n.*             MAIN HALF OF TITLE IS PADDED TO &LEN CHARACTERS.\n.*\n.*             THIS MACRO CAN NOT BE USED WITH ASSEMBLER F.\n.*             USE F EXTENDED(FROM OS/VS), G WITH LSETC=255, OR H.\n         GBLC  &MTITLE\n         LCLA  &I,&LN\n&I       SETA  1\n         AIF   ('&TIT'(1,1) NE '''' OR '&TIT'(K'&TIT,1) NE '''').DEL\n.LOOP    AIF   (&I GE K'&TIT-1).ENDLOOP\n         AIF   (&LN GE &LEN).TOOBIG\n&I       SETA  &I+1\n&LN      SETA  &LN+1\n         AIF   ('&TIT'(&I,1) EQ '''' OR '&TIT'(&I,1) EQ '&&').SPECIAL\n&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,1)\n         AGO   .LOOP\n.*\n.DEL     MNOTE 4,'TITLE NOT DELIMITED BY \"''\" - IGNORED'\n&MTITLE  SETC  'LEARN TO PUT QUOUTES AROUND THINGS'\n.*\n.SPECIAL AIF   (&I EQ K'&TIT).NOTPAIR\n         AIF   ('&TIT'(&I,1) NE '&TIT'(&I+1,1)).NOTPAIR\n&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,2)\n&I       SETA  &I+1\n         AGO   .LOOP\n.*\n.NOTPAIR MNOTE 4,' CHARACTER \"''\" OR \"&&\" NOT PAIRED'\n&MTITLE  SETC  '&MTITLE'.(2)'&TIT'(&I,1)\n         AGO   .LOOP\n.*\n.TOOBIG  MNOTE 4,'TITLE LONGER THAN &LEN - EXCESS TRUNCATED'\n         MEXIT\n.*\n.ENDLOOP AIF   (&LN EQ &LEN).END\n&MTITLE  SETC  '&MTITLE'.(&LEN-&LN)' '\n.END     MEND\n./ ADD NAME=MZHEX    0100-19106-19106-1238-00013-00013-00000-MZAP78  18\n         MACRO\n&L       MZHEX &D,&S,&LEN,&BL=' '\n         LCLA  &I,&J\n&I       SETA  &LEN/2+1\n         AIF   (N'&S EQ 1).IOK\n&I       SETA  &S(2)\n.IOK     ANOP\n&J       SETA  &LEN+1\n&L       UNPK  &D.(&J),&S.(&I)\n         TR    &D.(&LEN),HEXTAB-C'0'\n         AIF   ('&BL' EQ '' OR '&BL' EQ '*').BYBY\n         MVI   &D+&LEN,C&BL\n.BYBY    MEND\n./ ADD NAME=MZIF     0100-19106-19106-1238-00066-00066-00000-MZAP78  18\n         MACRO\n&L       MZIF  &TEST,&B\n         COPY  MZGBL\n         LCLA  &I\n&I       SETA  6\n         AIF   ('&B'(1,1) EQ '(').TEST\n&I       SETA  8\n.TEST    AIF   ('&TEST' EQ '360).T360\n         AIF   ('&TEST' EQ '370').370\n         AIF   ('&TEST' EQ 'OS').OS\n         AIF   ('&TEST' EQ 'VS').VS\n         AIF   ('&TEST' EQ 'VS1').VS1\n         AIF   ('&TEST' EQ 'VS2').VS2\n         AIF   ('&TEST' EQ 'MFT').MFT\n         AIF   ('&TEST' EQ 'MVT').MVT\n         AIF   ('&TEST' EQ 'OS/MFT').OSMFT\n         AIF   ('&TEST' EQ 'OS/MVT').OSMVT\n         AIF   ('&TEST' EQ 'STIDP').STIDP\n         MNOTE 12,'&TEST IS INVALID TEST FOR MZIF'\n         MEXIT\n.T360    AIF   ('&CPU' EQ '360').B\n.NOP     ANOP\n&L       MZBC  NOP,&B\n         MEXIT\n.B       ANOP\n&L       MZBC  B,&B\n         MEXIT\n.T370    AIF   ('&CPU' EQ '370').B\n         AGO   .NOP\n.OS      ANOP\n&L       TM    CVTDCB,CVT6DAT           OS/VS?\n         MZBC  Z,&B\n         MEXIT\n.VS      ANOP\n&L       TM    CVTDCB,CVT6DAT           OS/VS?\n.BO      MZBC  O,&B\n         MEXIT\n.VS1     ANOP\n&L       TM    CVTDCB,CVT2SPS+2 .       OS/VS1?\n         AGO   .BO\n.VS2     ANOP\n&L       TM    CVTDCB,CVT4MS1+2 .       OS/VS2?\n         AGO   .BO\n.MFT     ANOP\n&L       TM    CVTDCB,CVT2SPS .         EITHER OS/MFT OR OS/VS1?\n         AGO   .BO\n.MVT     ANOP\n&L       TM    CVTDCB,CVT4MS1 .         EITHER OS/MVT OR OS/VS2?\n         AGO   .BO\n.OSMFT   ANOP\n         TM    CVTDCB,CVT6DAT           OS/VS?\n         BO    *+&I\n         TM    CVTDCB,CVT2SPS .         OS/MFT?\n         AGO   .BO\n.OSMVT   ANOP\n         TM    CVTDCB,CVT6DAT           OS/VS?\n         BO    *+&I\n         TM    CVTDCB,CVT4MS1 .         OS/MVT?\n         AGO   .BO\n.STIDP   AIF   ('&CPU' NE '370').NOP\n         AIF   ('&B'(1,1) EQ '(').BUMREG\n&L       STIDP &B\n         MEXIT\n.BUMREG  MNOTE 12,'MZIF STIDP,&B HAS REGISTER NOTATION'\n         MEXIT\n         MEND\n./ ADD NAME=MZITH    0100-19106-19106-1238-00011-00011-00000-MZAP78  18\n         MACRO\n&L       MZITH &D,&S\n         GBLC  &CPU\n         AIF   ('&CPU' EQ '370').ICM\n&L       LH    &D,&S\n         N     &D,=X'0000FFFF'\n         MEXIT\n.ICM     ANOP\n&L       SR    &D,&D\n         ICM   &D,3,&S\n         MEND\n./ ADD NAME=MZKEY    0100-19106-19106-1238-00008-00008-00000-MZAP78  18\n         MACRO\n&L       MZKEY &KEY\n         AIF   ('&KEY' EQ '0' OR '&KEY' EQ 'ZERO').ZORO\n&L       BAL   15,KITCHEN *             SVC 12; BR 15\n         MEXIT\n.ZORO    ANOP\n&L       BAL   15,CVTEXIT *             SVC 3\n         MEND\n./ ADD NAME=MZLT     0100-19106-19106-1238-00011-00011-00000-MZAP78  18\n         MACRO\n&L       MZLT  &D,&S\n         GBLC  &CPU\n         AIF   ('&CPU' EQ '370').ICM\n&L       L     &D,&S\n         LA    &D,0(&D)\n         LTR   &D,&D\n         MEXIT\n.ICM     ANOP\n&L       ICM   &D,7,1+&S\n         MEND\n./ ADD NAME=MZMVC    0100-19106-19106-1238-00006-00006-00000-MZAP78  18\n         MACRO\n&L       MZMVC &MSG\n         LCLA  &I\n&I       SETA  K'&MSG-2\n&L       MVC   IBUF(&I),=C&MSG\n         MEND\n./ ADD NAME=MZOP     0100-19106-19106-1238-00030-00030-00000-MZAP78  18\n         MACRO\n&L       MZOP  &NAME,&NEXT=\n         GBLC  &NM\n         LCLA  &LEN,&L1\n         LCLC  &NXT\n         AIF   (T'&NAME EQ 'O').NONAME\n&LEN     SETA  K'&NAME\n         AIF   ('&NAME'(1,1) NE '''').NOTQ\n&LEN     SETA  &LEN-2\n&L1      SETA  1\n.NOTQ    AIF   (T'&L EQ 'O').NXT\n&NM      SETC  '&L'\n.NXT     ANOP\n&NXT     SETC  '&NEXT'\n         AIF   ('&NEXT' EQ '*').AST\n         AIF   (T'&NEXT NE 'O').NOK\n&NXT     SETC  'OP'.'&SYSNDX'\n         AGO   .NOK\n.AST     ANOP\n&NXT     SETC  '&NM'\n.NOK     AIF   ('&NAME'(1,1) EQ '''').Q\n&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C'&NAME'\n&NM      SETC  '&NXT'\n         MEXIT\n.Q       ANOP\n&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C&NAME\n&NM      SETC  '&NXT'\n         MEXIT\n.NONAME  MNOTE 8,'NO OPERAND ON OP MACRO'\n         MEND\n./ ADD NAME=MZPRINT  0100-19106-19106-1238-00081-00081-00000-MZAP78  18\nMZPR     TITLE 'MOREZAP SYSPRINT ACCESS METHOD'\n         COPY  MZGBL\n         MZSET\n         PRINT NOGEN\nMZPRINT  MZENT TYPE=IO,DCB=SYSPRINT,                                   *\n               PUT=LINECNT,EJECT=RSVSPACE,GET=GETQSAM\n         SPACE 2\nLINECNT  LA    R1,1                     ARE WE AT THE END OF OUR PAGE?\n         BCT   R1,NEXTLINE\n         CLI   DAT+1,C' '\n         BNL   NOEDIT\n         ED    DAT(7),DATE+1\n         ED    TME(9),TIME\nNOEDIT   AP    PAGENO,=P'1'\n         MVC   PNUM,PMASK\n         ED    PNUM,PAGENO\n         PUT   SYSPRINT,HEADER\n         MVI   OCC,C'-'\n         LA    R1,56\n         TM    SW1,DMPSW                DUMP/HELP/DEBUG ACTIVE?\n         BZ    NEXTLINE                  NO - NO SUBHEADING\n         PUT   SYSPRINT,HLEN\n         LA    R1,55\nNEXTLINE STH   R1,LINECNT+2\n         LA    R4,ODATA+79              ELIMINATE TRAILING BLANKS\n         LA    R5,80\n         CLI   0(R4),C' '\n         BNE   *+14\n         BCTR  R4,0\n         BCT   R5,*-10\n         LA    R5,1                     FORCE 1 SIG POSITION FOR\n*                                       BUG IN QSAM\nH1       EQU   *-2\n         LA    R5,5(R5)                 4 FOR RDW, 1 FOR CC\n         ORG   *-2\nH5       DS    H\n         STH   R5,OLEN\n         PUT   SYSPRINT,OLEN\n         MVI   OCC,C' '\n         TM    SW2,ATTNSW\n         BO    NOLOG\n         TM    SW3,DUMPSW+NOMONSW\n         BNO   NOLOG\n         LA    R14,NOCRT                FAKE BAL   R14,OFATTN(,R12)\n         L     R12,PUTMON\n         CLI   OFATTN(R12),X'07'\n         BNE   OFATTN(,R12)\n         LA    R14,ENDPUT\n         L     R12,PUTCON\n         B     OFATTN(,R12)\n         SPACE 2\nRSVSPACE CH    R0,LINECNT+2\n         BLR   R14\n         MVI   LINECNT+3,1\n         BR    R14\n         SPACE 4\nHEADER   DC    Y(ENDHED-HEADER,0)\n         DC    C'1METZ''S OWN RELIABLE EXTENDED ZAP'\n         DC    CL5' '\n         DC    C'TIME'\nTME      DC    X'402120',C':',X'2020',C':',X'2020'\n         DC    CL5' '\n         DC    C'DATE'\nDAT      DC    X'402120',C'/',X'202020'\n         DC    CL5' '\n         DC    C'PAGE'\nPNUM     DC    X'40212020'\nENDHED   EQU   *\n         SPACE 1\nPMASK    DC    X'40212020'\nPAGENO   DC    PL2'0'\n         LTORG\n         PRINT NOGEN\nSYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    *\n               RECFM=VBA,LRECL=137\n         MZSHD 'LITERALS'\n         LTORG\nMZAPMAIN MZAPMAIN TYPE=D\n         TITLE 'COMMUNICATIONS VECTOR TABLE'\nCVT      CVT   SYS=VMS,PREFIX=YES\n         END   MZPRINT\n./ ADD NAME=MZSCR    0100-19106-19106-1238-00273-00273-00000-MZAP78  18\n         MACRO\n&L       MZSCR &DUMMY,&LINESZE=80\n         GBLA  &ROW,&COL\n         LCLA  &I,&I1,&I2,&J,&K\n         LCLB  &LN40,&LN64,&LN80,&STARTPR,&SAL,&RSTKBY,&RSTMDT\n         LCLB  &PROT,&NUMERIC,&DECT,&INT,&NONDISP,&MDT\n         LCLB  &OK\n         LCLC  &LABEL,&LABEL1,&CH1,&TB(64)\n&LABEL   SETC  '&L'\n&TB(1)   SETC  ' '\n&TB(2)   SETC  'A'\n&TB(3)   SETC  'B'\n&TB(4)   SETC  'C'\n&TB(5)   SETC  'D'\n&TB(6)   SETC  'E'\n&TB(7)   SETC  'F'\n&TB(8)   SETC  'G'\n&TB(9)   SETC  'H'\n&TB(10)  SETC  'I'\n&TB(11)  SETC  '\u00a2'\n&TB(12)  SETC  '.'\n&TB(13)  SETC  '<'\n&TB(14)  SETC  '('\n&TB(15)  SETC  '+'\n&TB(16)  SETC  '|'\n&TB(17)  SETC  '&&'\n&TB(18)  SETC  'J'\n&TB(19)  SETC  'K'\n&TB(20)  SETC  'L'\n&TB(21)  SETC  'M'\n&TB(22)  SETC  'N'\n&TB(23)  SETC  'O'\n&TB(24)  SETC  'P'\n&TB(25)  SETC  'Q'\n&TB(26)  SETC  'R'\n&TB(27)  SETC  '!'\n&TB(28)  SETC  '$'\n&TB(29)  SETC  '*'\n&TB(30)  SETC  ')'\n&TB(31)  SETC  ';'\n&TB(32)  SETC  '\u00ac'\n&TB(33)  SETC  '-'\n&TB(34)  SETC  '/'\n&TB(35)  SETC  'S'\n&TB(36)  SETC  'T'\n&TB(37)  SETC  'U'\n&TB(38)  SETC  'V'\n&TB(39)  SETC  'W'\n&TB(40)  SETC  'X'\n&TB(41)  SETC  'Y'\n&TB(42)  SETC  'Z'\n&TB(43)  SETC  '\u00a6'\n&TB(44)  SETC  ','\n&TB(45)  SETC  '%'\n&TB(46)  SETC  '_'\n&TB(47)  SETC  '>'\n&TB(48)  SETC  '?'\n&TB(49)  SETC  '0'\n&TB(50)  SETC  '1'\n&TB(51)  SETC  '2'\n&TB(52)  SETC  '3'\n&TB(53)  SETC  '4'\n&TB(54)  SETC  '5'\n&TB(55)  SETC  '6'\n&TB(56)  SETC  '7'\n&TB(57)  SETC  '8'\n&TB(58)  SETC  '9'\n&TB(59)  SETC  ':'\n&TB(60)  SETC  '#'\n&TB(61)  SETC  '@'\n&TB(62)  SETC  ''''\n&TB(63)  SETC  '='\n&TB(64)  SETC  '\"'\n         AIF   (N'&SYSLIST EQ 0).NOLIST\n.NXTI    AIF   (&I EQ N'&SYSLIST).END\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').STRING\n         AIF   ('&SYSLIST(&I)'(1,1) EQ '(').ADDR\n         AIF   ('&SYSLIST(&I)' EQ 'SBA').SBA\n         AIF   ('&SYSLIST(&I)' EQ 'SF').SF\n         AIF   ('&SYSLIST(&I)' EQ 'IC').IC\n         AIF   ('&SYSLIST(&I)' EQ 'PT').PT\n         AIF   ('&SYSLIST(&I)' EQ 'RA').RA\n         AIF   ('&SYSLIST(&I)' EQ 'EUA').EUA\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ ':').LABEL\n         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '-').LABEL1\n         AIF   ('&SYSLIST(&I)'(1,2) EQ 'CL').DSC\n         AIF   ('&SYSLIST(&I)'(1,4) EQ 'AL2(').DSA\n         MNOTE 12,'PARAMETER #&I INVALID - &SYSLIST(&I) NOT A VALID KEY*\n               WORD'\n         MEXIT\n.*\n.STRING  ANOP\n&J       SETA  2\n&K       SETA  0\n.STRLOOP AIF   ('&SYSLIST(&I)'(&J,2) EQ '''''').STRDBL\n         AIF   ('&SYSLIST(&I)'(&J,2) NE '&&&&').STRSNGL\n.STRDBL  ANOP\n&J       SETA  &J+1\n.STRSNGL ANOP\n&J       SETA  &J+1\n&K       SETA  &K+1\n         AIF   (&J LT K'&SYSLIST(&I)).STRLOOP\n         AIF   (&COL+&K LE &LINESZE).STRFITS\n&ROW     SETA  &ROW+1\n&COL     SETA  1\n.STRFITS ANOP\n&LABEL   DC    C&SYSLIST(&I)\n.SETL1   AIF   ('&LABEL1' EQ '').NOL1\n&I2      SETA  (&ROW-1)*&LINESZE+&COL-1\n&I1      SETA  &I2/64\n&CH1     SETC  '&TB(&I1+1)'.'&TB(&I2-64*&I1+1)'\n&LABEL1  EQU   C'&CH1'\n&LABEL1  SETC  ''\n.NOL1    ANOP\n&LABEL   SETC  ''\n&COL     SETA  &COL+&K\n.SLDEC   AIF   (&COL LE &LINESZE).NXTI\n&ROW     SETA  &ROW+1\n&COL     SETA  &COL-&LINESZE\n         AGO   .SLDEC\n         AGO   .NXTI\n.*\n.ADDR    ANOP\n         AIF   ('&SYSLIST(&I,1)' EQ '*').RSAME\n         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '+').RINC\n         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '-').RDEC\n         AIF   ('&SYSLIST(&I,1)'(1,1) LT '0').CONBYTE\n&ROW     SETA  &SYSLIST(&I,1)\n         AGO   .RSAME\n.RINC    ANOP\n&CH1     SETC  '&SYSLIST(&I,1)'(2,K'&SYSLIST(&I,1)-1)\n&ROW     SETA  &ROW+&CH1\n&COL     SETA  1\n         AGO   .RSAME\n.RDEC    ANOP\n&CH1     SETC  '&SYSLIST(&I,1)'(2,K'&SYSLIST(&I,1)-1)\n&ROW     SETA  &ROW-&CH1\n&COL     SETA  1\n.RSAME   AIF   ('&SYSLIST(&I,2)' EQ '*').CSAME\n         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '+').CINC\n         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '-').CDEC\n&COL     SETA  &SYSLIST(&I,2)\n         AGO   .CSAME\n.CINC    ANOP\n&CH1     SETC  '&SYSLIST(&I,2)'(2,K'&SYSLIST(&I,2)-1)\n&COL     SETA  &COL+&CH1\n.TINC    AIF   (&COL LE &LINESZE).CSAME\n&COL     SETA  &COL-&LINESZE\n&ROW     SETA  &ROW+1\n         AGO   .TINC\n.CDEC    ANOP\n&CH1     SETC  '&SYSLIST(&I,2)'(2,K'&SYSLIST(&I,2)-1)\n&COL     SETA  &COL-&CH1\n.TDEC    AIF   (&COL GE 0).CSAME\n&COL     SETA  &COL+&LINESZE\n&ROW     SETA  &ROW-1\n         AGO   .TDEC\n.CSAME   ANOP\n&I2      SETA  (&ROW-1)*&LINESZE+&COL-1\n&I1      SETA  &I2/64\n&CH1     SETC  '&TB(&I1+1)'.'&TB(&I2-64*&I1+1)'\n&LABEL   DC    C'&CH1'\n&LABEL   SETC  ''\n         AGO   .NXTI\n.*\n.CONBYTE ANOP\n&K       SETA  0\n&J       SETA  1\n.CBLOOP  AIF   (&J GT N'&SYSLIST(&I)).CBEND\n&LN40    SETB  ('&SYSLIST(&I,&J)' EQ '40CHAR')\n&LN64    SETB  ('&SYSLIST(&I,&J)' EQ '64CHAR')\n&LN80    SETB  ('&SYSLIST(&I,&J)' EQ '80CHAR')\n&STARTPR SETB  ('&SYSLIST(&I,&J)' EQ 'STARTPR')\n&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'RING')\n&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'ALARM' OR &SAL)\n&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'SAL'   OR &SAL)\n&RSTKBY  SETB  ('&SYSLIST(&I,&J)' EQ 'RESTKBY')\n&RSTKBY  SETB  ('&SYSLIST(&I,&J)' EQ 'KBYRSTOR' OR &RSTKBY)\n&RSTMDT  SETB  ('&SYSLIST(&I,&J)' EQ 'RESTMDT')\n&RSTMDT  SETB  ('&SYSLIST(&I,&J)' EQ 'RESETMDT' OR &RSTMDT)\n&K       SETA  &K+&LN40*16+&LN64*32+&LN80*48+&STARTPR*8\n&K       SETA  &K+&SAL*4+&RSTKBY*2+&RSTMDT\n.*\n&PROT    SETB  ('&SYSLIST(&I,&J)' EQ 'PROT')\n&NUMERIC SETB  ('&SYSLIST(&I,&J)' EQ 'NUM')\n&DECT    SETB  ('&SYSLIST(&I,&J)' EQ 'DECTABLE')\n&INT     SETB  ('&SYSLIST(&I,&J)' EQ 'INTENSE')\n&INT     SETB  ('&SYSLIST(&I,&J)' EQ 'INT' OR &INT)\n&NONDISP SETB  ('&SYSLIST(&I,&J)' EQ 'NONDISP')\n&MDT     SETB  ('&SYSLIST(&I,&J)' EQ 'MDT')\n&K       SETA  &K+&PROT*32+&NUMERIC*16+&DECT*4+&INT*8+&NONDISP*2+&MDT\n&OK      SETB  ('&SYSLIST(&I,&J)' EQ 'NONE' OR &LN40 OR &LN64 OR &LN80)\n&OK      SETB  (&OK OR &STARTPR OR &SAL OR &RSTKBY OR &RSTMDT)\n&OK      SETB  (&OK OR &PROT OR &NUMERIC OR &DECT OR &INT OR &NONDISP)\n&OK      SETB  (&OK OR &MDT)\n         AIF   (&OK).CBBUMP\n         MNOTE 12,'SUBPARAMETER #&J OF PARAMETER #&I INVALID - ''&SYSLI*\n               ST(&I,&J)'' NOT RECOGNIZED'\n.CBBUMP  ANOP\n&J       SETA  &J+1\n         AGO   .CBLOOP\n.CBEND   ANOP\n&CH1     SETC  '&TB(&K+1)'\n&LABEL   DC    C'&CH1'\n&LABEL   SETC  ''\n         AGO   .NXTI\n.*\n.SBA     ANOP\n&LABEL   DC    X'11'                    SET BUFFER ADDRESS\n&K       SETA  0\n         AGO   .SETL1\n.*\n.SF      ANOP\n&LABEL   DC    X'1D'                    START FIELD\n&K       SETA  1\n         AGO   .SETL1\n.*\n.IC      ANOP\n&LABEL   DC    X'13'                    INSERT CURSOR\n&K       SETA  0\n         AGO   .SETL1\n.*\n.PT      ANOP\n&LABEL   DC    X'05'                    PROGRAM TAB\n&K       SETA  0\n         AGO   .NOL1\n.*\n.RA      ANOP\n&LABEL   DC    X'3C'                    REPEAT TO ADDRESS\n&K       SETA  0\n         AGO   .NOL1\n.*\n.EUA     ANOP\n&LABEL   DC    X'12'                    ERASE UNPROTECTED TO ADDRESS\n&K       SETA  0\n         AGO   .NOL1\n.*\n.LABEL   ANOP\n&LABEL   SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1)\n         AGO   .NXTI\n.*\n.LABEL1  ANOP\n&LABEL1  SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1)\n         AGO   .NXTI\n.*\n.DSC     ANOP\n&J       SETA  3\n.DSLOOP  AIF   (&J GT K'&SYSLIST(&I)).DSEND\n         AIF   ('&SYSLIST(&I)'(&J,1) EQ '''').DSQ\n         AIF   ('&SYSLIST(&I)'(&J,1) LT '0').DSL\n&J       SETA  &J+1\n         AGO   .DSLOOP\n.DSL     MNOTE 12,'PARAMETER #&I INVALID - &SYSLIST(&I) NOT DS OPERAND'\n         MEXIT\n.DSQ     ANOP\n&CH1     SETC  '&SYSLIST(&I)'(3,&J-3)\n&K       SETA  &CH1\n&LABEL   DC    &SYSLIST(&I)\n         AGO   .SETL1\n.DSEND   ANOP\n&CH1     SETC  '&SYSLIST(&I)'(3,&J-3)\n&K       SETA  &CH1\n&LABEL   DS    &SYSLIST(&I)\n         AGO   .SETL1\n.DSA     ANOP\n&LABEL   DC    &SYSLIST(&I)\n&LABEL   SETC  ''\n         AGO   .NXTI\n.*\n.*\n.NOLIST  MNOTE 12,'BUFFER LIST OMITTED'\n.END     MEND\n./ ADD NAME=MZSET    0100-19106-19106-1238-00119-00119-00000-MZAP78  18\n         MACRO\n         MZSET &DUMMY\n         COPY  MZGBL\n         LCLA  &I,&J\n         LCLC  &C\n         AIF   (&MZ1ST).END\n.**********************************************************************\n.*             THE FOLLOWING SHOULD BE SET TO THE PROPER VALUES       *\n.*                                                                    *\n&MZUPC   SETB  1                        (MFT->VS1 AND MVT->SVS        *\n.*                                       UPWARD COMPATABILITY)        *\n.*                                                                    *\n&HASPSVC SETA  247                      ONLY IF MODIFIED TO RETURN HCT*\n.*                                                          IN R15    *\n.*                                                                    *\n&CPU     SETC  '370'                                                  *\n&MDL     SETC  '0168'                                                 *\n&CPUID   SETC  '071044'                                               *\n&SYS     SETC  'OS/MVT'                                               *\n&REL     SETC  '21.7'                                                 *\n.*                                                                    *\n&ASP     SETC  'NO'                                                   *\n&ASPV    SETC  '3.1.3'                                                *\n&MTSVC   SETA  246                                                    *\n.*                                                                    *\n&HASP    SETC  'II'                                                   *\n&HASPV   SETC  '3.1'                                                  *\n.*                                                                    *\n.**********************************************************************\n.*\n.SETSYS  ANOP\n&OSMFT   SETB  ('&SYS' EQ 'OS/MFT')\n&OSMVT   SETB  ('&SYS' EQ 'OS/MVT')\n&VS1     SETB  ('&SYS' EQ 'VS1')\n&VS2     SETB  ('&SYS' EQ 'VS2')\n&OS      SETB  (&OSMFT OR &OSMVT)\n&VS      SETB  (&VS1 OR &VS2)\n&MFT     SETB  (&OSMFT OR &VS1)\n&MVT     SETB  (&OSMVT OR &VS2)\n         AIF   (&OS OR &VS).SETREL\n         MNOTE 12,'&&SYS=&SYS IS NOT OS/MFT, OS/MVT, VS1, OR VS2!'\n         MNOTE 12,'&&SYS IS NOT OS/MFT, OS/MVT, VS1, OR VS2!'\n         MNOTE 12,'&&SYS=OS/MVT ASSUMED'\n&SYS     SETC  'OS/MVT'\n         AGO   .SETSYS\n.SETREL  AIF   ('&REL' EQ '').NOREL\n.SETREL1 AIF   (&I EQ K'&REL).USEREL\n&I       SETA  &I+1\n         AIF   ('&REL'(&I,1) EQ '.').SETSUB\n         AIF   ('&REL'(&I,1) LT '0' OR '&REL'(&I,1) GT '9').BUMREL\n&C       SETC  '&C'.'&REL'(&I,1)\n&MZPREL  SETA  &C\n         AGO   .SETREL1\n.SETSUB  ANOP\n&C       SETC  ''\n.SETSUB1 AIF   (&I EQ K'&REL).USEREL\n&I       SETA  &I+1\n         AIF   ('&REL'(&I,1) EQ '.').SUBSUB\n         AIF   ('&REL'(&I,1) LT '0' OR '&REL'(&I,1) GT '9').BUMREL\n&C       SETC  '&C'.'&REL'(&I,1)\n&MZSREL  SETA  &C\n         AGO   .SETSUB1\n.SUBSUB  MNOTE 4,'&&REL=&REL HAS THREE LEVELS OF NUMBERS'\n&C       SETC  '&REL(1,&I-1)'\n         MNOTE 4,'&&REL=&C ASSUMED'\n         AGO   .USEREL\n.NOREL   MNOTE 12,'&&REL OMITTED'\n         AGO   .DEFREL\n.BUMREL  MNOTE 12,'&&REL=REL INVALID'\n.DEFREL  AIF   (&VS1).DEFVS1\n         AIF   (&VS2).DEFVS2\n         MNOTE 12,'&&REL=21.8 ASSUMED'\n&REL     SETC  '21.8'\n&MZPREL  SETA  21\n&MZSREL  SETA  8\n         AGO   .USEREL\n.DEFVS1  MNOTE 12,'&&REL=3.0 ASSUMED'\n&REL     SETC  '3.0'\n&MZPREL  SETA  3\n&MZSREL  SETA  0\n         AGO   .USEREL\n.DEFVS2  MNOTE 12,'&&REL=1.7 ASSUMED'\n&REL     SETC  '1.7'\n&MZPREL  SETA  1\n&MZSREL  SETA  7\n         AGO   .USEREL\n.*\n.USEREL  AIF   (NOT &VS2).SETASP\n&SVS     SETB  1\n         AIF   (&MZPREL LT 2).SETASP\n&SVS     SETB  0\n&MVS     SETB  1\n.*\n.SETASP  AIF   ('&ASP' EQ 'NO').NOASP\n         AIF   ('&ASP' EQ 'YES' OR '&ASP' EQ '3').ASPOK\n         AIF   ('&ASP EQ 'JES' OR '&ASP' EQ 'JES3').JES3\n         MNOTE 8,'&&ASP NOT YES, NO, OR JES3'\n         MNOTE 8,'&&ASP=YES,&&MTSVC=246 ASSUMED'\n&ASP     SETC  'YES'\n&ASPV    SETC  '3.1.4'\n&MTSVC   SETA  246\n         AGO   .ASPOK\n.JES3    ANOP\n&MTSVC   SETA  0\n.ASPOK   ANOP\n.NOASP   ANOP\n.*\n         AIF   ('&HASP' EQ 'NO' OR '&HASP' EQ 'BEST').NOHASP\n         AIF   ('&HASP' EQ 'YES' OR '&HASP' EQ 'II').HASP\n         AIF   ('&HASP' EQ 'JES' OR '&HASP' EQ 'JES2').JES2\n         MNOTE 8,'&&HASP IS NOT BEST, YES, II, OR JES2'\n         MNOTE 8,'&&HASP=BEST (I.E. NONE) ASSUMED'\n.NOHASP  ANOP\n&HASP    SETC  'BEST'\n         MEXIT\n.JES2    ANOP\n&HASPSVC SETA  0\n.HASP    MEXIT\n.END     MEND\n./ ADD NAME=MZSHD    0100-19106-19106-1238-00029-00029-00000-MZAP78  18\n         MACRO\n&L       MZSHD &TIT\n.*\n.*             COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n.*\n.*             THIS MACRO IS USED IN CONJUNCTION WITH MZHED TO\n.*             SPECIFY THE SUB-TITLE FOR A TITLE CARD.\n.*             THE MAIN PORTION OF THE TITLE IS SPECIFIED ONCE,\n.*             VIA MZHED, WHILE EACH MZSHD SPECIFIES ITS OWN\n.*             SUB-TITLE, WHICH IS PLACED ON THE RIGHT HAND SIDE.\n.*             AN OPERAND OF OFF GENERATES A TITLE WITH NO SUB-TITLE.\n         GBLC  &MTITLE\n         LCLC  &STIT\n         PUSH  PRINT\n         AIF   (T'&TIT EQ 'O').OFF\n         AIF   ('&TIT' EQ 'OFF').OFF\n         AIF   ('&TIT'(1,1) EQ '''' AND '&TIT'(K'&TIT,1) EQ '''').OK\n         MNOTE 4,'SUBTITLE NOT DELIMITED BY \"''\" - IGNORED'\n&STIT    SETC  '*** INVALID SUBTITLE ***'\n         AGO   .TIT\n.OK      ANOP\n&STIT    SETC  '&TIT'(2,K'&TIT-2)\n.TIT     PRINT GEN\n         TITLE '&MTITLE- COPYRIGHT 1975 S. METZ - &STIT'\n         AGO   .POP\n.OFF     PRINT GEN\n         TITLE '&MTITLE'\n.POP     POP   PRINT\n         MEND\n./ ADD NAME=MZSSM    0100-19106-19106-1238-00026-00026-00000-MZAP78  18\n         MACRO\n&L       MZSSM &TYPE\n         COPY  MZGBL\n         MZSET\n         AIF   ('&TYPE' EQ 'DIS').DIS\n         AIF   ('&TYPE' EQ 'ENB').ENB\n         MNOTE 12,'&&TYPE=&TYPE IS INVALID'\n         MEXIT\n.*\n.DIS     AIF   (&VS).VSDIS\n&L       SSM   *+1\n         MEXIT\n.VSDIS   ANOP\n&L     MODESET ENABLE=NO\n         MEXIT\n.*\n.ENB     AIF   ('&SYS'(1,2) EQ 'VS').VSENB\n&L       SSM   *+1\n         ORG   *-3\n         DC    X'FF'\n         ORG   *+2\n         MEXIT\n.VSENB   ANOP\n&L     MODESET  ENABLE=YES\n         MEXIT\n         MEND\n./ ADD NAME=MZSTA    0100-19106-19106-1238-00011-00011-00000-MZAP78  18\n         MACRO\n&L       MZSTA &S,&D,&IC=(R0)\n         GBLC  &CPU\n         AIF   ('&CPU' EQ '370').STCM\n&L       IC    &IC(1),&D\n         ST    &S,&D\n         STC   &IC(1),&D\n         MEXIT\n.STCM    ANOP\n&L       STCM  &S,7,&D+1\n         MEND\n./ ADD NAME=MZTSO    0100-19106-19106-1238-00182-00182-00000-MZAP78  18\nTSO      TITLE 'MOREZAP TSO NON-DISPLAY ACCESS METHOD - COPYRIGHT 1975 *\n               SHMUEL METZ'\n         MACRO\n&L       ICMH  &REG,&OPT\n         COPY  MZGBL\n         AIF   ('&CPU' EQ '370').S370\n&L       LA    R15,&OPT\n         SLL   R15,24\n         OR    &REG,R15\n         MEXIT\n.*\n.S370    ANOP\n&L       ICM   &REG,8,=AL1(&OPT)\n         MEND\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP TSO NON-DISPLAY ACCESS METHOD',LEN=38\nMZTSO    MZENT TYPE=IO,PUT=WRITE,ATTN=TESTATTN,GET=READ,INIT=ATJB,     *\n               EJECT=COUNTLNS\nWRITE    LA    R1,1\nLINECNT  EQU   *-2,2,H\n         BCT   R1,NOSKIP\nPUTHED   TM    SW1,DMPSW\n         BZ    SKIPIT\n         LA    R1,HDATA\n         TPUT  (1),80,EDIT\n         B     *+4(R15)\n         B     SKIPIT\n         DC    2H'0'\n         B     PUTHED\n         DC    2H'0'\n         DC    2H'0'\nSKIPIT   LA    R1,55\nNOSKIP   STH   R1,LINECNT\n         SPACE 1\nPUTIT    LA    R1,ODATA\n         TPUT  (1),80,EDIT\n         B     *+4(R15)\n         B     TSTPRMPT                 TPUT OK\n         DC    2H'0'                    NOWAIT & NO BUFFER AVAILABLE\n         B     PUTIT                    ATTENTION - REISSUE\n         DC    2H'0'                    TPUT WITH TJID\n         DC    2H'0'                    INVALID PARAMETERS\n         DC    2H'0'                    TERMINAL DISCONNECTED\n         SPACE 2\nCOUNTLNS LH    R1,LINECNT\n         S     R1,SAVEPUT\n         BPR   R14\n         MVI   LINECNT+1,1\n         BR    R14\n         MZSHD 'ATTENTION LOGIC'\nATJB     DS    A\nATSB     DS    A\nAQCB     DS    A\n         STAX  ATTNRTN,REPLACE=NO,MF=L\nATTNRTN  L     R1,8(,R1)\n         OI    SW2-MZAPMAIN(R1),ATTNSW\n         BR    R14\n         SPACE 2\nTSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?\n         BO    GIVEHELP                  YES - GIVE HELP\n*        B     TESTATTN\n         SPACE 1\nTESTATTN TM    SW2,ATTNSW\n         BZ    ENDPUT\n         TPUT  EH,5,ASIS\n*        TGET  ODATA,80\n         LA    R0,80\n         LA    R1,ODATA\n         ICMH  R1,128\n         TGET  (1),(0),R\n         B     *+4(R15)\n         B     TESTNULL                 OK\n         DC    2H'0'                    NOWAIT\n         B     TESTATTN                 ATTENTION\n         B     INVATN                   TOO BIG\n         DC    2H'0'                    INVALID PARAMETERS\n         DC    2H'0'                    DISCONNECT\n         SPACE 1\nTESTNULL LTR   R1,R1\n         BZ    ENDPUT\nINT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE\n         CLC   =C'$ABEND',ODATA\n         BE    ABDUMP\n         CLC   $FLUSH,ODATA\n         BE    FLUSH\n         CLC   $HELP,ODATA\n         BE    GIVEHELP\n         SR    R1,R1                    12 WRITES/SCREEN?\n         CLC   $SLOW,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,1                     6 WRITES/SCREEN?\n         CLC   $HALFAST,ODATA\n         BE    SETSPEED\n         LA    R1,3                     3 WRITES/SCREEN?\n         CLC   $FAST,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,X'FF'                 1 WRITE/SCREEN?\n         CLC   $PAGE,ODATA\n         BE    SETSPEED                  YES\n         CLC   $HOLD,ODATA              PAGE LOCK MODE?\n         BE    SETHOLD                   YES\n         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?\n         BE    OFFHOLD\n         CLC   $MON,ODATA               DUMP MONITORING?\n         BE    SETMON                    YES\n         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?\n         BE    OFFMON                    YES\n         CLC   STOP,ODATA               DISCONTINUE DUMP?\n         BE    OFFDUMP                   YES\n         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?\n         BE    ONCON\nINVATN TCLEARQ INPUT\n         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'\n         OI    SW2,PROMPTSW             FORCE HELP MESSAGE\n         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG\n         SPACE 1\nFLUSH  TCLEARQ OUTPUT\n         B     PUTENTRY\n         SPACE 1\n         SPACE 2\nSETSPEED TPUT  DEFERRED,L'DEFERRED\n         B     TESTATTN\n         SPACE 1\nGIVEHELP EX    0,BLNKODTA\n         MVC   ODATA(PROMPTLN),ATTPRMPT\n         NI    SW2,255-PROMPTSW\n         B     PUTENTRY\n         SPACE 1\nATTPRMPT DC    C'MZP002I '\n$HELP    DC    C'$HELP',C': '\n$HOLD    DC    C'$HOLD',C'|'\n$AUTO    DC    C'$AUTO',C' '\nCON      DC    C'CON',C' '\nSTOP     DC    C'STOP',C' '\n$PAGE    DC    C'$PAGE',C'|'\n$FAST    DC    C'$FAST',C'|'\n$HALFAST DC    C'$HALFAST',C'|'\n$SLOW    DC    C'$SLOW',C' '\n$MON     DC    C'$MON',C'|'\n$NOMON   DC    C'$NOMON',C' '\nPROMPTLN EQU   *-ATTPRMPT\n         SPACE 1\n$FLUSH   DC    C'$FLUSH'\n         SPACE 1\nDEFERRED DC    C'MZPT001I DEFERRED FEATURE'\n         SPACE 1\n         MZSHD 'READ'\nREAD     LA    R1,IBUF\n         TPUT  (1),5,ASIS\n         B     *+4(R15)\n         B     READIT                   OK\n         DC    2H'0'                    NOWAIT\n         B     READ                     ATTENTION\n         DC    2H'0'                    TPUT WITH TJID\n         DC    2H'0'                    INVALID PARAMETERS\n         DC    2H'0'                    TERMINAL DISCONNECTED\nREADIT   LA    R0,72\n         LA    R1,IBUF+6\n         ICMH  R1,128\n         TGET  (1),(0),R\n         B     *+4(R15)\n         B     GETUC\n         DC    2H'0'\n         B     READ\n         B     TOOBIG\n         DC    2H'0'\n         DC    2H'0'\nTOOBIG TCLEARQ INPUT\n         TPUT  TBMSG,L'TBMSG\n         B     READ\n         SPACE 2\n         MZSHD 'LITERALS && CONSTANTS'\nTBMSG    DC    C'MZPT01I TOO BIG - IGNORED'\nEH       DC    CL5'EH ?'\n         LTORG\n         PRINT NOGEN\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\nCVT      DSECT\n         CVT\nMZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN\n         END\n./ ADD NAME=MZTST    0100-19106-19106-1238-00070-00070-00000-MZAP78  18\n         MACRO\n         MZTST &DUM\n         COPY  MZGBL\n         LCLA  &I,&J\n         LCLB  &OKMFT,&OKMVT,&OKVS1,&OKSVS,&OKMVS\n         AIF   (N'&SYSLIST NE 0).ISLIST\n         MNOTE 16,'MZTST INVOKED WITH EMPTY ARGUEMENT'\n         MEXIT\n.ISLIST  ANOP\n&MZMATCH SETB  0\n.LOOP    AIF   (&I EQ N'&SYSLIST).END1\n&I       SETA  &I+1\n         AIF   ('&SYSLIST(&I)' EQ 'OS').OS\n         AIF   ('&SYSLIST(&I)' EQ 'OSMFT').OSMFT\n         AIF   ('&SYSLIST(&I)' EQ 'OSMVT').OSMVT\n         AIF   ('&SYSLIST(&I)' EQ 'VS').VS\n         AIF   ('&SYSLIST(&I)' EQ 'VS1').VS1\n         AIF   ('&SYSLIST(&I)' EQ 'VS2').VS2\n         AIF   ('&SYSLIST(&I)' EQ 'SVS').SVS\n         AIF   ('&SYSLIST(&I)' EQ 'MVS').MVS\n         AIF   ('&SYSLIST(&I)' EQ 'MFT').MFT\n         AIF   ('&SYSLIST(&I)' EQ 'MVT').MVT\n         AIF   ('&SYSLIST(&I)' EQ 'ANY').ANY\n         MNOTE 16,'MZTST - &SYSLIST(&I) INVALID SYSTEM TYPE'\n         MEXIT\n.*\n.OS      ANOP\n&OKMFT   SETB  1\n.OSMVT   ANOP\n&OKMVT   SETB  1\n         AGO   .LOOP\n.*\n.OSMFT   ANOP\n&OKMFT   SETB  1\n         AGO   .LOOP\n.*\n.VS      ANOP\n&OKVS1   SETB  1\n.VS2     ANOP\n&OKSVS   SETB  1\n.MVS     ANOP\n&OKMVS   SETB  1\n         AGO   .LOOP\n.*\n.MFT     ANOP\n&OKMFT   SETB  1\n.VS1     ANOP\n&OKVS1   SETB  1\n         AGO   .LOOP\n.*\n.MVT     ANOP\n&OKMVT   SETB  1\n.SVS     ANOP\n&OKSVS   SETB  1\n         AGO   .LOOP\n.*\n.END1    ANOP\n&OKVS1   SETB  (&OKVS1 OR &OKMFT AND &MZUPC)\n&OKSVS   SETB  (&OKSVS OR &OKMVT AND &MZUPC)\n&OKMFT   SETB  (&OKMFT OR &OKVS1 AND &MZUPC)\n&OKMVT   SETB  (&OKMVT OR &OKSVS AND &MZUPC)\n         AIF   (&OKVS1 AND &VS1).ANY\n         AIF   (&OKSVS AND &SVS).ANY\n         AIF   (&OKMVS AND &MVS).ANY\n         AIF   (&OKMFT AND &OSMFT).ANY\n         AIF   (&OKMVT AND &OSMVT).ANY\n         MEXIT\n.ANY     ANOP\n&MZMATCH SETB  1\n         MEND\n./ ADD NAME=MZTS2260 0100-19106-19106-1238-00209-00209-00000-MZAP78  18\n226T     TITLE 'MOREZAP TSO 2260 DISPLAY ACCESS METHOD - COPYRIGHT 1975*\n               SHMUEL METZ'\n         MACRO\n&L       ICMH  &REG,&OPT\n         COPY  MZGBL\n         AIF   ('&CPU' EQ '370').S370\n&L       LA    R15,&OPT\n         SLL   R15,24\n         OR    &REG,R15\n         MEXIT\n.*\n.S370    ANOP\n&L       ICM   &REG,8,=AL1(&OPT)\n         MEND\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP TSO 2260 DISPLAY ACCESS METHOD',LEN=39\nMZTS2260 MZENT TYPE=IO,PUT=WRITE,ATTN=TESTATTN,GET=READ,INIT=ATJB,     *\n               EJECT=COUNTLNS\nWRITE    LA    R1,1\nLINECNT  EQU   *-2,2,H\n         BCT   R1,NOSKIP\nPUTHED   TM    SW1,DMPSW\n         BZ    SKIPIT\n         LA    R1,HDATA\n         LA    R0,80\n         BAL   R14,TPUTH\n         B     PUTHED\nSKIPIT   MZKEY 0\n         SR    R0,R0\n         L     R1,AQCB\n         USING IEDQQCB,R1\n         IC    R0,QCBSATCT\n         CLI   QCBSATCT,255\n         BE    ENDPAGE\n         LA    R1,11\n         SR    R1,R0\n         BP    SKIPBACK\nENDPAGE  LA    R1,1\n         DROP  R1\nSKIPBACK MZKEY KLUB\nNOSKIP   STH   R1,LINECNT\n         SPACE 1\nPUTIT    LA    R1,ODATA\n         LA    R0,80\n         BAL   R14,TPUTNH\n         B     PUTIT                    ATTENTION - REISSUE\n         B     TSTPRMPT\n         SPACE 2\nCOUNTLNS LH    R2,LINECNT\n         BCT   R2,*+6\n         BR    R14\n         C     R2,SAVEPUT\n         BHR   R14\nSKIP1    LA    R1,BLANKARD\n         LA    R0,1\n         BAL   R14,TPUTNH\n         NOP   R0\n         BCT   R2,SKIP1\n         MVI   LINECNT+1,1\n         B     ENDPUT\n         MZSHD 'ATTENTION LOGIC'\nATJB     DS    A\nATSB     DS    A\nAQCB     DS    A\n         STAX  ATTNRTN,REPLACE=NO,MF=L\nATTNRTN  L     R1,8(,R1)\n         OI    SW2-MZAPMAIN(R1),ATTNSW\n         BR    R14\n         SPACE 2\nTSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?\n         BO    GIVEHELP                  YES - GIVE HELP\n*        B     TESTATTN\n         SPACE 1\nTESTATTN TM    SW2,ATTNSW\n         BZ    ENDPUT\n         LA    R1,EH\n         LA    R0,5\n         BAL   R14,TPUTASIS\n         B     *-4                      ATTENTION\n         LA    R1,ODATA\n         BAL   R14,TGET\n         B     TESTATTN                 ATTENTION\n         B     INVATN                   TOO BIG\n         SPACE 1\nTESTNULL LTR   R1,R1\n         BZ    ENDPUT\nINT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE\n         CLC   =C'$ABEND',ODATA\n         BE    ABDUMP\n         CLC   $FLUSH,ODATA\n         BE    FLUSH\n         CLC   $HELP,ODATA\n         BE    GIVEHELP\n         SR    R1,R1                    12 WRITES/SCREEN?\n         CLC   $SLOW,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,1                     6 WRITES/SCREEN?\n         CLC   $HALFAST,ODATA\n         BE    SETSPEED\n         LA    R1,3                     3 WRITES/SCREEN?\n         CLC   $FAST,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,X'FF'                 1 WRITE/SCREEN?\n         CLC   $PAGE,ODATA\n         BE    SETSPEED                  YES\n         CLC   $HOLD,ODATA              PAGE LOCK MODE?\n         BE    SETHOLD                   YES\n         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?\n         BE    OFFHOLD                   YES\n         CLC   $MON,ODATA               DUMP MONITORING?\n         BE    SETMON                    YES\n         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?\n         BE    OFFMON                    YES\n         CLC   STOP,ODATA               DISCONTINUE DUMP?\n         BE    OFFDUMP                   YES\n         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?\n         BE    ONCON                     YES\nINVATN TCLEARQ INPUT\n         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'\n         OI    SW2,PROMPTSW             FORCE HELP MESSAGE\n         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG\n         SPACE 1\nFLUSH  TCLEARQ OUTPUT\n         B     PUTENTRY\n         SPACE 1\n         SPACE 2\nSETSPEED TPUT  DEFERRED,L'DEFERRED\n         B     TESTATTN\n         SPACE 1\nGIVEHELP EX    0,BLNKODTA\n         MVC   ODATA(PROMPTLN),ATTPRMPT\n         NI    SW2,255-PROMPTSW\n         B     PUTENTRY\n         SPACE 1\nATTPRMPT DC    C'MZP002I '\n$HELP    DC    C'$HELP',C': '\n$HOLD    DC    C'$HOLD',C'|'\n$AUTO    DC    C'$AUTO',C' '\nCON      DC    C'CON',C' '\nSTOP     DC    C'STOP',C' '\n$PAGE    DC    C'$PAGE',C'|'\n$FAST    DC    C'$FAST',C'|'\n$HALFAST DC    C'$HALFAST',C'|'\n$SLOW    DC    C'$SLOW',C' '\n$MON     DC    C'$MON',C'|'\n$NOMON   DC    C'$NOMON',C' '\nPROMPTLN EQU   *-ATTPRMPT\n         SPACE 1\n$FLUSH   DC    C'$FLUSH'\n         SPACE 1\nDEFERRED DC    C'MZPT001I DEFERRED FEATURE'\n         SPACE 1\n*        TPUT  IBUF,5,ASIS\n         MZSHD 'READ'\nREAD     LA    R1,IBUF\n         LA    R0,5\n         BAL   R14,TPUTASIS\n         B     READ                     ATTENTION\nREADIT   LA    R1,IBUF+6\n         BAL   R14,TGET\n         B     GETUC                    ATTENTION\n         B     TOOBIG\n         B     GETUC\nTOOBIG TCLEARQ INPUT\n         TPUT  TBMSG,L'TBMSG\n         B     READ\n         SPACE 2\n         MZSHD 'SUBROUTINES, LITERALS && CONSTANTS'\nTPUTH    TPUT  (1),(0),,HOLD\n         B     TPUTV(R15)\n         SPACE 1\nTPUTASIS ICMH  R1,1\n*        B     TPUTNH                   ASIS\n         SPACE 1\nTPUTNH   CLI   LINECNT+1,1\n         BE    TPUTH\n         TPUT  (1),(0),R\n         B     TPUTV(R15)\nTPUTV    B     4(,R14)                   0  OK\n         DC    2H'0'                     4  NOWAIT\n         BR    R14                       8  ATTENTION\n         DS    H\n         DC    2H'0'                     C  TJID\n         DC    2H'0'                    10  INVALID PARAMETERS\n         DC    2H'0'                    14  TERMINAL DISCONNECTED\n         SPACE 1\nTGET     TGET  (1),72,EDIT\n         B     *+4(R15)\n         B     8(,R14)                   0  OK\n         DC    2H'0'                     4  NOWAIT\n         BR    R14                       8  ATTENTION\n         DS    H\n         B     4(,R14)                   C  TOO BIG\n         DC    2H'0'                    10  INVALID PARAMETERS\n         DC    2H'0'                    14 DISCONNECT\n         SPACE 2\nTBMSG    DC    C'MZPT01I TOO BIG - IGNORED'\nEH       DC    CL5'EH ?'\n         LTORG\n         PRINT NOGEN\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\nCVT      DSECT\n         CVT\nMZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN\n        IKJTJB\n        IKJTSB\n         TQCBD\n         END\n./ ADD NAME=MZTS3270 0100-19106-19106-1238-00209-00209-00000-MZAP78  18\n327T     TITLE 'MOREZAP TSO 3270 DISPLAY ACCESS METHOD - COPYRIGHT 1975*\n                SHMUEL METZ'\n         MACRO\n&L       ICMH  &REG,&OPT\n         COPY  MZGBL\n         AIF   ('&CPU' EQ '370').S370\n&L       LA    R15,&OPT\n         SLL   R15,24\n         OR    &REG,R15\n         MEXIT\n.*\n.S370    ANOP\n&L       ICM   &REG,8,=AL1(&OPT)\n         MEND\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP TSO 3270 DISPLAY ACCESS METHOD',LEN=39\nMZTS3270 MZENT TYPE=IO,PUT=WRITE,ATTN=TESTATTN,GET=READ,INIT=ATJB,     *\n               EJECT=COUNTLNS\nWRITE    LA    R1,1\nLINECNT  EQU   *-2,2,H\n         BCT   R1,NOSKIP\nPUTHED   TM    SW1,DMPSW                IS TITLE LINE REQUIRED?\n         BZ    SKIPIT                    NO - ADVANCE LINE COUNT\n         LA    R1,HDATA                 TPUT HEAD WITH HOLD\n         LA    R0,80\n         BAL   R14,TPUTH\n         B     PUTHED                    IF ATTN, RETRY\nSKIPIT   MZKEY 0                        PREVENT 0C4 IN VS\n         SR    R0,R0\n         L     R1,AQCB\n         USING IEDQQCB,R1\n         IC    R0,QCBSATCT\n         CLI   QCBSATCT,255\n         BE    ENDPAGE\n         LA    R1,23\n         SR    R1,R0\n         BP    SKIPBACK\nENDPAGE  LA    R1,1\n         DROP  R1\nSKIPBACK MZKEY KLUB                     GO TO NORMAL KEY WITH LINE #\nNOSKIP   STH   R1,LINECNT\n         SPACE 1\nPUTIT    LA    R1,ODATA\n         LA    R0,80\n         BAL   R14,TPUTNH\n         B     PUTIT                    ATTENTION - REISSUE\n         B     TSTPRMPT\n         SPACE 2\nCOUNTLNS LH    R2,LINECNT\n         BCT   R2,*+6\n         BR    R14\n         C     R2,SAVEPUT\n         BHR   R14\nSKIP1    LA    R1,BLANKARD\n         LA    R0,1\n         BAL   R14,TPUTNH\n         NOP   R0\n         BCT   R2,SKIP1\n         MVI   LINECNT+1,1\n         B     ENDPUT\n         MZSHD 'ATTENTION LOGIC'\nATJB     DS    A\nATSB     DS    A\nAQCB     DS    A\n         STAX  ATTNRTN,REPLACE=NO,MF=L\nATTNRTN  L     R1,8(,R1)\n         OI    SW2-MZAPMAIN(R1),ATTNSW\n         BR    R14\n         SPACE 2\nTSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?\n         BO    GIVEHELP                  YES - GIVE HELP\n*        B     TESTATTN\n         SPACE 1\nTESTATTN TM    SW2,ATTNSW\n         BZ    ENDPUT\n         LA    R1,EH\n         LA    R0,5\n         BAL   R14,TPUTASIS\n         B     *-4                      ATTENTION\n         LA    R1,ODATA\n         BAL   R14,TGET\n         B     TESTATTN                 ATTENTION\n         B     INVATN                   TOO BIG\n         SPACE 1\nTESTNULL LTR   R1,R1\n         BZ    ENDPUT\nINT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE\n         CLC   =C'$ABEND',ODATA\n         BE    ABDUMP\n         CLC   $FLUSH,ODATA\n         BE    FLUSH\n         CLC   $HELP,ODATA\n         BE    GIVEHELP\n         SR    R1,R1                    12 WRITES/SCREEN?\n         CLC   $SLOW,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,1                     6 WRITES/SCREEN?\n         CLC   $HALFAST,ODATA\n         BE    SETSPEED\n         LA    R1,3                     3 WRITES/SCREEN?\n         CLC   $FAST,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,X'FF'                 1 WRITE/SCREEN?\n         CLC   $PAGE,ODATA\n         BE    SETSPEED                  YES\n         CLC   $HOLD,ODATA              PAGE LOCK MODE?\n         BE    SETHOLD                   YES\n         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?\n         BE    OFFHOLD                   YES\n         CLC   $MON,ODATA               DUMP MONITORING?\n         BE    SETMON                    YES\n         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?\n         BE    OFFMON                    YES\n         CLC   STOP,ODATA               DISCONTINUE DUMP?\n         BE    OFFDUMP\n         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?\n         BE    ONCON\nINVATN TCLEARQ INPUT\n         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'\n         OI    SW2,PROMPTSW             FORCE HELP MESSAGE\n         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG\n         SPACE 1\nFLUSH  TCLEARQ OUTPUT\n         B     PUTENTRY\n         SPACE 1\n         SPACE 2\nSETSPEED TPUT  DEFERRED,L'DEFERRED\n         B     TESTATTN\n         SPACE 1\nGIVEHELP EX    0,BLNKODTA\n         MVC   ODATA(PROMPTLN),ATTPRMPT\n         NI    SW2,255-PROMPTSW\n         B     PUTENTRY\n         SPACE 1\nATTPRMPT DC    C'MZP002I '\n$HELP    DC    C'$HELP',C': '\n$HOLD    DC    C'$HOLD',C'|'\n$AUTO    DC    C'$AUTO',C' '\nCON      DC    C'CON',C' '\nSTOP     DC    C'STOP',C' '\n$PAGE    DC    C'$PAGE',C'|'\n$FAST    DC    C'$FAST',C'|'\n$HALFAST DC    C'$HALFAST',C'|'\n$SLOW    DC    C'$SLOW',C' '\n$MON     DC    C'$MON',C'|'\n$NOMON   DC    C'$NOMON',C' '\nPROMPTLN EQU   *-ATTPRMPT\n         SPACE 1\n$FLUSH   DC    C'$FLUSH'\n         SPACE 1\nDEFERRED DC    C'MZPT001I DEFERRED FEATURE'\n         SPACE 1\n*        TPUT  IBUF,5,ASIS\n         MZSHD 'READ'\nREAD     LA    R1,IBUF\n         LA    R0,5\n         BAL   R14,TPUTASIS\n         B     READ                     ATTENTION\nREADIT   LA    R1,IBUF+6\n         BAL   R14,TGET\n         B     GETUC                    ATTENTION\n         B     TOOBIG\n         B     GETUC\nTOOBIG TCLEARQ INPUT\n         TPUT  TBMSG,L'TBMSG\n         B     READ\n         SPACE 2\n         MZSHD 'SUBROUTINES, LITERALS && CONSTANTS'\nTPUTH    TPUT  (1),(0),,HOLD\n         B     TPUTV(R15)\n         SPACE 1\nTPUTASIS ICMH  R1,1\n*        B     TPUTNH\n         SPACE 1\nTPUTNH   CLI   LINECNT+1,1\n         BE    TPUTH\n         TPUT  (1),(0),R\n         B     TPUTV(R15)\nTPUTV    B     4(,R14)                   0  OK\n         DC    2H'0'                     4  NOWAIT\n         BR    R14                       8  ATTENTION\n         DS    H\n         DC    2H'0'                     C  TJID\n         DC    2H'0'                    10  INVALID PARAMETERS\n         DC    2H'0'                    14  TERMINAL DISCONNECTED\n         SPACE 1\nTGET     TGET  (1),72,EDIT\n         B     *+4(R15)\n         B     8(,R14)                   0  OK\n         DC    2H'0'                     4  NOWAIT\n         BR    R14                       8  ATTENTION\n         DS    H\n         B     4(,R14)                   C  TOO BIG\n         DC    2H'0'                    10  INVALID PARAMETERS\n         DC    2H'0'                    14 DISCONNECT\n         SPACE 2\nTBMSG    DC    C'MZPT01I TOO BIG - IGNORED'\nEH       DC    CL5'EH ?'\n         LTORG\n         PRINT NOGEN\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\nCVT      DSECT\n         CVT\nMZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN\n        IKJTJB\n        IKJTSB\n         TQCBD\n         END\n./ ADD NAME=MZWORK   0100-19106-19106-1238-00227-00227-00000-MZAP78  18\n         MACRO\n        MZWORK &UCB=NO,&TCB=NO,&CD=NO,&JSCB=NO,&TIOT=NO,&IOB=NO,       *\n               &ALL=NO,&MAIN=NO,                                       *\n               &OPWORK=NO,&GEN=NOGEN\n         COPY  MZGBL\n         GBLC  &LIST\n&LIST    SETC  'NO'\n         AIF   ('&GEN' EQ 'NOGEN').NOGEN\n&LIST    SETC  'YES'\n.NOGEN   PUSH  PRINT\n         PRINT &GEN\n         AIF   ('&MAIN' EQ 'NO').NOMAIN\nMZAPMAIN MZAPMAIN TYPE=D,GEN=&GEN\n.NOMAIN  AIF   ('&GEN' EQ 'NOGEN').NOHED0\n         MZSHD 'VERIFY/REP TABLE'\n.NOHED0  ANOP\nVRSECT   DSECT\n*              ENTIRE CHAIN IS IN ONE SUBPOOL - ONE FREEMAIN GETS ALL\nVRNEXT   DS    0A\nVRTYPE   DS    X\nVRVER    EQU   0\nVRREP    EQU   1\nVRBASE   EQU   2\nVRINDEX  EQU   3\nVRHINDEX EQU   4\nVRNAME   EQU   5\nVRDUMP   EQU   6\nVRDUMPA  EQU   7\nVRDUMPT  EQU   8\nVRHDUMP  EQU   9\nVRHDUMPA EQU   10\nVRHDUMPT EQU   11\nVRLIB    EQU   12\nVRSAVE   EQU   13 .                     SETPTR REFDIGIT *\nVRMVC    EQU   14 .                     INTERNAL USE ONLY\nVRREFER  EQU   15 .                     SETPTR\nVRPOINT  EQU   16 .                     POINT VIA PTR\nVRUNSAVE EQU   17 .                     POINT REF REFDIGIT\n         SPACE 1\nVRNXT    DS    AL3\n         SPACE 1\nVRLINE   DS    H .                      SEQUENTIAL INPUT STATEMENT NO.\n         SPACE 1\nVRLOC    DS    0A\nVRFLG    DS    X\nVRFND    EQU   X'80'                    CSECT FOUND IN ESD\nVRFAIL   EQU   X'40'                    VERIFY FAILED\nVRXLE    EQU   X'20'                    CDE HAS XL\nVR1XL    EQU   X'10'                    XL HAS JUST ONE RELOC FACTOR\nVRNAMFND EQU   X'08'                    PROCESSED BY GETESD\nVRBOUNDS EQU   X'08'                    VER/REP OUTSIDE CSECT\nVRNOTNUC EQU   X'04'                    NUC DD BAD\nVRLC     DS    AL3\n         SPACE 2\n*              FIELDS FOR VER, REP, AND HEX DUMPS\nVRABS    DS    0A .\nVRVRFLG  DC    AL1(VRBOUNDS+VRFND) .    SAME BITS AS VRFLG\nVRAB     DS    AL3 .                    ABSOLUTE VIRTUAL ADDRESS\nVRHDPLEN EQU   *-VRSECT                 ENTRY LENGTH FOR HDUMP\n         SPACE 1\n*              FIELDS FOR VER AND REP\nVRDATLN  DS    X                        LENGTH-1 FOR EXECUTE\nVRDAT    DS    0X\n         SPACE 2\n*              FIELDS FOR INDEX\n         ORG   VRLOC+4\nVRIXNAME DS    CL8\nVRIXLEN  EQU   *-VRSECT\n         SPACE 2\n*              FIELDS FOR NAME, DUMP, DUMP, DUMPT (EXCEPT HEX FORMS)\n         ORG   VRLOC\nVRBEGIN  DS    A\nVRDMPTYP DS    X                        OPTIONS FOR DUMP\n*              SAME FIELD AS VRCBTYPE\nVRDUMPTP EQU   X'80'\nVRAFTER  EQU   X'02'\nVRBEFORE EQU   X'01'\nVRSIZE   DS    FL3\nVRCDEPTR DS    A\nVRISLPDE EQU   X'80'                    MODULE IN PLPA, NOT IN MLPA\nVRDCBPT  DS    A                        DCB POINTER\nVRSSI    DS    XL4\nVRNAM    DS    CL8\nVRCSECT  DS    CL8\nVRNAMLEN EQU   *-VRSECT\n         SPACE 2\n*              FIELDS FOR LIB\n         ORG   VRLOC\nVRDCB    DS    A                        LIB DCB\n         SPACE 2\n*              FIELDS FOR BASE AND INDEX(HEX)\n         ORG   VRLOC\nVRLOCN   DS    A\n         SPACE 2\n*              FIELDS FOR HEX DUMP AND FORMAT\n         ORG   VRDATLN\nVRCBTYPE DS    0XL1                     SAME FIELD AS VRDMPTYP\nVRNOTFMT EQU   X'80'                    OPCODE WAS DUMP. SAME AS VRDMPT\nVRAVT    EQU   1\nVRBLDL   EQU   2\nVRCDE    EQU   3\nVRCVT    EQU   4\nVRHCT    EQU   5\nVRMSER   EQU   6\nVRQMRES  EQU   7\nVRSCVT   EQU   8\nVRSMCA   EQU   9\nVRTACT   EQU   10\nVRTSCVT  EQU   11\nVRUCB    EQU   12\nVRUCM    EQU   13                       UNIT CONTROL MODULE ENTRY\nVRUCMB   EQU   14                       UCM BASE\nVRUCMM   EQU   15                       UCM MCS PREFIX\nVRLEN    DS    A\n         SPACE 2\n*              FIELDS FOR MVC, POINT, SAVE\n         ORG   VRDATLN\nVRPTRLEN DS    0X\nVRPTR32 EQU    0                        A\nVRPTR24 EQU    1                        AL3\nVRPTR16 EQU    2                        AL2\nVRPTR15 EQU    3                        Y CON\nVRPTR    DS    A\nVRMVCLEN EQU   *-VRSECT\n         SPACE 2\n*              FIELDS FOR POINT, SAVE\nVRLENB   DS    H\nVRIXB    DS    H\nVRSAVLEN EQU   *-VRSECT\n         AIF   ('&GEN' EQ 'NOGEN').NOHED1\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\n.NOHED1  ANOP\n         CVT   PREFIX=YES,DSECT=YES,SYS=AOS2,LIST=&LIST\nCVT      EQU   CVTMAP\n         AIF   ('&GEN' EQ 'NOGEN').NOHED2\n         MZSHD 'COMMAND SCHEDULING CONTROL BLOCK DSECT'\n.NOHED2  ANOP\nIEECSCB  DSECT\n       IEECHAIN\n         AIF   ('&GEN' EQ 'NOGEN').NOHED3\n         MZSHD 'COMMAND INPUT BUFFER'\n.NOHED3  ANOP\nCIB      DSECT\n        IEZCIB\n         AIF   ('&UCB' EQ 'NO' AND '&ALL' EQ 'NO').NOUCB\n         AIF   ('&GEN' EQ 'NOGEN').NOHED4\n         MZSHD 'UNIT CONTROL BLOCK'\n.NOHED4  ANOP\nSRTE     DSECT\n       IEFUCBOB\n.NOUCB   AIF   ('&TCB' EQ 'NO' AND '&ALL' EQ 'NO').NOTCB\n         AIF   ('&GEN' EQ 'NOGEN').NOHED5\n         MZSHD 'TASK CONTROL BLOCK'\n.NOHED5  AIF   (&VS OR &MZUPC).VSTCB\n        IKJTCB\n         AGO   .COMTCB\n.VSTCB  IHATCB\n.COMTCB  AIF   ('&GEN' EQ 'NOGEN').NOHED6\n         MZSHD 'REQUEST BLOCK'\n.NOHED6  AIF   (&VS OR &MZUPC).VSRB\n         IKJRB\n         AGO   .NOTCB\n.VSRB    IHARB\n.NOTCB   AIF   ('&CD' EQ 'NO' AND '&ALL' EQ 'NO').NOCD\n         AIF   ('&GEN' EQ 'NOGEN').NOHED7\n         MZSHD 'LOAD LIST ELEMENT'\n.NOHED7  ANOP\nLLE      DSECT\nLLECHAIN DS    A\nLLCDPTR  DS    0A\nLLCOUNT  DS    X\n         DS    AL3\n         AIF   ('&GEN' EQ 'NOGEN').NOHED8\n         MZSHD 'CONTENTS DIRECTORY ELEMENT'\n.NOHED8  IHACDE\n         AIF   (NOT &MZUPC AND NOT &VS).NOLPDE\n         AIF   ('&GEN' EQ 'NOGEN').NOHED8A\n         MZSHD 'LINK PACK DIRECTORY ELEMENT'\n.NOHED8A IHALPDE\n.NOLPDE  AIF   ('&GEN' EQ 'NOGEN').NOHED9\n         MZSHD 'EXTENT LIST'\n.NOHED9  ANOP\nXL       DSECT\nEXLLNTH  DS    F\nEXLNUMRL DS    F                        # OF RELOCATION FACTORS\nEXLISTLN DS    F\n*              FOR BLOCK, X'80' IN HIGH BYTE OF EACH LENGTH\n*              FOR SCATTER, X'80' IN HIGH BYTE OF LAST LENGTH\n*              IN EITHER CASE, FOLLOWED BY LIST OF ADDRESSES, HIGH BYTE\n*               OF 00\n         SPACE 2\nNOTELIST DSECT\nNLRELOC  DS    A                        RELOCATION FACTOR\n         DS    AL3\nNLCONCAT DS    X                        CONCATENATION #\nNLTTR0   DS    XL4                      1ST SEGMENT\n.NOCD    AIF   ('&JSCB' EQ 'NO' AND '&ALL' EQ 'NO').NOJSCB\n         AIF   ('&GEN' EQ 'NOGEN').NOHED10\n         MZSHD 'JOB STEP CONTROL BLOCK'\n.NOHED10 ANOP\n       IEZJSCB\n.NOJSCB  AIF   ('&TIOT' EQ 'NO' AND '&ALL' EQ 'NO').NOTIOT\n         AIF   ('&GEN' EQ 'NOGEN').NOHED11\n         MZSHD 'TASK I/O TABLE'\n.NOHED11 ANOP\nTIOT     DSECT\n      IEFTIOT1\n.NOTIOT  ANOP\n         AIF   ('&GEN' EQ 'NOGEN').NOHED12\n         MZSHD 'DATA CONTROL BLOCK, ETC.'\n.NOHED12 DCBD  DEVD=DA,DSORG=PO\nDDNAME   DS    CL8\nNEXTDCB  DC    A(0)\n         AIF   ('&IOB' EQ 'NO' AND '&ALL' EQ 'NO').NOIOB\n         AIF   ('&GEN' EQ 'NOGEN').NOHED13\n         MZSHD 'INPUT/OUTPUT BLOCK'\n.NOHED13 ANOP\n        IEZIOB\n.NOIOB   AIF   ('&OPWORK' EQ 'NO' AND '&ALL' EQ 'NO').NOOPWRK\n         AIF   ('&GEN' EQ 'NOGEN').NOHED14\n         MZSHD 'OPEN WORK AREA DSECT - JFCB ONLY'\n.NOHED14 ANOP\nOPENWORK DSECT\n         DS    XL100\n      IEFJFCBN\n.NOOPWRK POP   PRINT\n         MEND\n./ ADD NAME=MZWTO    0100-19106-19106-1238-00182-00182-00000-MZAP78  18\nCON      TITLE 'MOREZAP WTO/WTOR  REPLY/STOP/MODIFY  ACCESS METHOD'\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP WTOR REPLY/STOP/MODIFY ACCESS METHOD',         *\n               LEN=45\n         SPACE 1\n*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.\n         SPACE 1\nMZWTO    MZENT TYPE=IO,PUT=STUFF,EJECT=RSVSPACE,GET=WTOR,              *\n               ATTN=TESTMOD,INIT=WTODSRT\n         SPACE 2\nRSVSPACE L     R15,ANUMLINE\n         LTR   R15,R15\n         BZR   R14\n         SR    R0,R0\n         IC    R0,7(R15)\n         A     R0,SAVEPUT\n         SH    R0,=H'10'\n         BLR   R14\n         BAL   R9,DOWTO\n         B     ENDPUT\n         SPACE 1\nSTUFF    MVI   LINETYPE,X'20'           LINE TYPE D (DATA)\n         LA    R1,ODATA\n         L     R14,ANUMLINE\n         LTR   R14,R14\n         BZ    NEWLINE\n         IC    R15,7(,R14)\n         LA    R15,1(R15)\n         STC   R15,7(R14)\n         L     R2,ASOF\n         BAL   R9,MOVEIT\n         MVC   2(2,R2),LINETYPE\n         AR    R2,R15\n         ST    R2,ASOF\n         CLI   7(R14),10\n         BL    TSTPRMPT\nWTO      BAL   R9,DOWTO\n        STIMER WAIT,BINTVL=DELAY\n         B     TSTPRMPT\n         SPACE 1\nNEWLINE  LA    R2,MLWTO\n         TM    SW1,DMPSW\n         BZ    *+12\n         MVI   LINETYPE,X'40'           LINETYPE L (LABEL)\n         LA    R1,HDATA\n         BAL   R9,MOVEIT\n         AR    R2,R15\n         MVC   0(8,R2),WTODSRT           DESC, ROUTCDE, LINETYPE, AREA,\n*                                        NUMBER OF LINES.\n         ST    R2,ANUMLINE\n         LA    R2,8(,R2)\n         ST    R2,ASOF\n         TM    SW1,DMPSW\n         BO    STUFF\n*        B     TESTMOD\n         MZSHD 'ATTENTION'\nTSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?\n         BO    GIVEHELP                  YES - GIVE HELP\n*        B     TESTMOD\n         SPACE 1\nTESTMOD  NI    SW2,255-ATTNSW-PROMPTSW  CLEAR ATTN SWITCHES\n         L     R8,SAVER8                COMM ECB POSTED?\n         USING CHAIN,R8\n         TM    CHECB,X'40'\n         BZ    ENDPUT                    NO\n         TM    CHECB,X'10'              STOP?\n         BO    STOPIT\n         L     R1,CHCIBP\n         USING CIB,R1\n         CLI   CIBVERB,CIBSTOP\n         BE    STOPIT\n         CLI   CIBVERB,CIBMODFY\n         BE    MODIFY\n         DC    H'0'                     SPIE ON INVALID VERB\nMODIFY   EX    0,BLNKODTA\n         LH    R14,CIBDATLN\n         LTR   R14,R14                  ANY DATA?\n         BZ    MODNONE                   NO\n         BCTR  R14,0                    SET FOR MOVE\n         EX    R14,MVCIB\nMODNONE  QEDIT ORIGIN=CHCIBP,BLOCK=(1)\nINT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE\n         CLC   =C'$ABEND',ODATA\n         BE    ABDUMP\n         CLC   $HELP,ODATA\n         BE    GIVEHELP\n         CLC   $MON,ODATA\n         BE    SETMON\n         CLC   $NOMON,ODATA\n         BE    OFFMON\n         CLC   STOP,ODATA               DISCONTINUE DUMP?\n         BE    OFFDUMP\n         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?\n         BE    ONCON\n         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'\n         OI    SW2,PROMPTSW             FORCE HELP MESSAGE\n         B     PUTENTRY                 LOG ERROR ATTN && ERR MSG\n         SPACE 1\nMVCIB    MVC   ODATA(0),CIBDATA\n         DROP  R1\n         SPACE 1\nGIVEHELP EX    0,BLNKODTA\n         MVC   ODATA(PROMPTLN),ATTPRMPT\n         NI    SW2,255-PROMPTSW\n         B     PUTENTRY\n         MZSHD 'SUBROUTINES'\nMOVEIT   LA    R15,79(,R1)\nLOOP     CR    R1,R15\n         BE    ENDMOVE\n         CLI   0(R15),C' '\n         BNE   ENDMOVE\n         BCT   R15,LOOP\nENDMOVE  SR    R15,R1\n         EX    R15,MVCSTUFF\n         LA    R15,5(R15)\n         MVI   0(R2),0\n         STC   R15,1(R2)\n         BR    R9\n         SPACE 1\nMVCSTUFF MVC   4(,R2),0(R1)\n         SPACE 2\nDOWTO    LH    R0,HWUCMID\n         MVI   MLWTO+2,X'80'\n         LTR   R0,R0\n         BZ    *+8\n         MVI   MLWTO+2,X'C0'\n         WTO   MF=(E,MLWTO)\n         XC    ANUMLINE,ANUMLINE\n         BR    R9\n         MZSHD 'WTOR'\nWTOR     MZLT  R15,ANUMLINE\n         BZ    *+8\n         BAL   R9,DOWTO\n         XC    ECB(4),ECB\n         LH    R0,HWUCMID\n         MVC   WTORL+10(1),MLWTO+2      COPY MCS, QREG0 FLAGS\n         MVC   WTORDSRT,WTODSRT\n         LA    R2,IBUF+6\n         MZSTA R2,WTORL\n         WTOR  'MZP003A',ROUTCDE=(9,10),DESC=(6,8),MF=(E,WTORL)\n         WAIT  ECB=ECB\n         B     GETUC\nSTOPIT   DC    H'0'                     SPIE IN THE SKIE\n         SPACE 2\nATTPRMPT DC    C'MZP002I '\n$HELP    DC    C'$HELP',C': '\n$HOLD    DC    C'$HOLD',C'|'\n$AUTO    DC    C'$AUTO',C' '\n$MON     DC    C'$MON',C'|'\n$NOMON   DC    C'$NOMON',C' '\nCON      DC    C'CON',C' '\nSTOP     DC    C'STOP',C' '\nPROMPTLN EQU   *-ATTPRMPT\n         SPACE 1\nWTORL    WTOR  'MZP003A',,74,ECB,ROUTCDE=(9,10),DESC=(6,8),MF=L\n         ORG   *-4\nWTORDSRT DS    XL4\nECB      DC    F'0'\nMLWTO    WTO   ('MZP000I METZ''S OWN RELIABLE EXTENDED ZAP',L),        *\n               (' ',D),                                                *\n               (' ',DE),AREAID=A,ROUTCDE=(2,9),DESC=7,MF=L\n         ORG   MLWTO+4\nTEXT     DS    10CL84\n         DS    XL4\nANUMLINE DC    A(0)\nASOF     DS    A\nWTODSRT  DC    X'0200',X'00C0'\nLINETYPE DC    XL2'4000',H'1'\n         MZSHD 'LITERALS AND MISCELLANEOUS'\nDELAY    DC    F'250'                   2.5 SECOND DELAY AFTER OVERFLOW\n         LTORG\n         PRINT NOGEN\nMZAPMAIN MZAPMAIN TYPE=D\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\nCVT      DSECT\n         CVT   SYS=VMS,PREFIX=YES\n         MZSHD 'CSCB && CIB'\n      IEECHAIN\nCIB      DSECT\n        IEZCIB\n         END   MZWTO\n./ ADD NAME=MZ2260   0100-19106-19106-1238-00227-00227-00000-MZAP78  18\n2260     TITLE 'MOREZAP 2260 ACCESS METHOD - COPYRIGHT 1975 SHMUEL METZ*\n               '\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP 2260 ACCESS METHOD'\nMZ2260   MZENT TYPE=IO,DCB=SYS2260,                                    *\n               PUT=PUTCRT,EJECT=RSVSPACE,GET=GETCRT,                   *\n               ATTN=TESTATTN,INIT=GACB\n         SPACE 2\nPUTCRT   LM    R4,R6,LINEINC\n         LTR   R6,R6                    IS THIS LINE 0?\n         BNZ   UNSWIFT                   NO - OK TO USE\n         TM    SW1,DMPSW                IS DUMP OR HELP IN PROGRESS?\n         BZ    *+6                       NO - LEAVE LINE ALONE\n         LR    R6,R4                    BYPASS LINE 0 - LEAVE TITLE\n         CLI   SPEEDSW,X'FF'            IS THIS 1/PAGE MODE?\n         BNE   UNSWIFT                   NO\n         AR    R6,R4                    SKIP 0(\u00acDUMP) OR 1(DUMP)\n         LA    R1,GBUF\n         TM    SW1,DMPSW                IS DUMP IN PROGRESS?\n         BZ    *+8                       NO - ONLY NEED ONE LINE\n         LA    R1,80(R1)                USE LINE 2 FOR DUMP\nH80      EQU   *-2,2,H\n         MVC   0(80,R1),BLANKARD        BLANK LINE 0(\u00acDUMP)|1(DUMP)\nUNSWIFT  ST    R6,LINECUR               SAVE IN CASE ALTERED BY $PAGE\n*                                        OR DUMP/HELP SWITCHE CODING\n         MH    R6,H80\n         LA    R6,GBUF(R6)\n         MVC   0(80,R6),ODATA\n         L     R6,LINECUR\n         BXLE  R6,R4,*+6\n         SR    R6,R6\n         ST    R6,LINECUR\n         STC   R6,LNAD\n         OI    LNAD,C'0'\n         CLI   LNAD,C'0'                BLANKING FOR EJECT?\n         NOP   PUTCRT\nEJECTSW  EQU   *-3,1,X\n         CLI   SPEEDSW,X'FF'            1/PAGE MODE?\n         BE    NOMARK                    YES - SKIP FLAGGING OLDEST\n         MH    R6,H80\n         LA    R6,GBUF(R6)\n         MVI   0(R6),C'|'\n         SPACE 1\nNOMARK   EX    0,BLNKODTA\n         SPACE 1\n         TM    SW1,DMPSW                DUMP/HELP/DEBUG?\n         BZ    *+10                      NO - LEAVE LINE 0 ALONE\n         MVC   GBUF(80),HDATA           MOVE TITLE TO LINE 0\n         TM    SW2,CRTERRSW+ATTNSW      I/O ERROR OR ATTENTION?\n         BNZ   *+12                      I'M GONNA SAY IT NOW\nSPEEDTST TM    LINECUR+3,3              IS LINE A MULT OF 1,2,4,12?\nSPEEDSW  EQU   *-3,1,X\n         BNZ   NOCRT\n        GWRITE GW,LNE,,961,SCREEN,MF=E\n         LTR   R15,R15                  IS WRITE OK?\n         BNZ   BUMRC                     NO\n         CLI   LNAD,C'0'\n         BNE   W1\n         TM    SW2,ATTNSW+HOLDSW        WILL ATTN BE FORCED?\n         BNZ   W1                        YES - NO POINT TO DELAY\n        STIMER WAIT,BINTVL=DELAY\nW1       LA    R1,GW                    RESTORE DECB PTR\n         BAL   R14,TESTECB\n         TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?\n         BO    GIVEHELP                  YES - GIVE HELP\n         TM    SW2,HOLDSW+ATTNSW        PAGE LOCK MODE OR ATTN?\n         BNZ   C1                        YES - SIMULATE ATTN\n       ATTNINQ GACB,MODE=(C,C1)\n         B     NOCRT\n         SPACE 2\nRSVSPACE L     R0,SAVEPUT\n         LM    R1,R2,LINEMAX\n         BXLE  R2,R0,ENDPUT\n         MVI   EJECTSW,X'70'\n         EX    0,BLNKODTA\n         B     PUTCRT\n         MZSHD 'ERROR HANDLING'\nTESTRC   LTR   R15,R15\n         BNZ   BUMRC\n*        B     TESTECB\n         SPACE 1\nTESTECB  STM   R14,R12,12(R13)\n         WAIT  ECB=(1)\n         L     R1,24(R13)               RESTORE DECB POINTER\n         CLI   0(R1),X'7F'              I/O ERROR?\n         BNE   CRTERR\n         NI    SW2,255-CRTERRSW\nECBOK   RETURN (14,12)\n         SPACE 1\nBUMRC    DC    H'0'                     SPIE IN THE SKIE\n         SPACE 1\nCRTERR   TM    SW2,CRTERRSW             2ND ERROR?\n         BO    CRTERROR                  YES\n         OI    SW2,CRTERRSW             SET 1ST ERROR SW\nCRTERRMS MVC   IBUF(26),=C'*** I/O ERROR ON 2260 ***'\n         CLI   4(R1),X'D8'              IS THIS READ SMI?\n         BNE   PUTENTRY                  NO - DO NOT RE-ISSUE\n         L     R0,SAVEGET+56            BACKUP RETURN ADDRESS\n         SH    R0,=H'4'\n         ST    R0,SAVEGET+56\n         B     PUTENTRY\n         SPACE 1\nCRTERROR CLOSE (SYS2260,)\n         WTO   'MZP001I I/O ERROR ON 2260 - USE CONSOLE',              *\n               ROUTCDE=(1,11),DESC=1\n         MVC   CRTSW,NOP\n         B     CRTERRMS\nNOP      NOP   0\n         MZSHD 'ATTENTION HANDLING'\nTESTATTN ATTNINQ GACB,MODE=(C,CATTN)\n         B     NOCRT\n         SPACE 1\nCATTN    OI    SW2,ATTNSW\n         B     NOMARK\n         SPACE 2\nC1       MVC   ATTNMSG(1),LNAD\n         OI    SW2,ATTNSW               FORCE REENTRY TO ATTN CODE\n        GWRITE GW,LNE,,81,LNAD,MF=E     BLANK ENTRY LINE\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n        GWRITE GW,LNE,,7,ATTNMSG,MF=E   POSITION CURSOR\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n       ATTNINQ GACB                     WAIT FOR ATTENTION\n         MVI   GR+16,0\n         GREAD GR,SMI,,80,ODATA,MF=E\n         BAL   R14,TESTRC               WAIT FOR NORMAL COMPLETION\n         CLI   GR+16,X'43'              WRONG LENGTH?\n         BNE   INT                       NO\n         CLC   GR+17(3),GR+21           JUST ENTER?\n         BE    NOCRT                     YES - HE CHANGED HIS MIND\n         CLI   ODATA,X'6A'              IS IT EOM?\n         BE    NOCRT                     YES - HE CHANGED HIS MIND\nINT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE\n         CLC   =C'$ABEND',ODATA\n         BE    ABDUMP\n         CLC   $HELP,ODATA\n         BE    GIVEHELP\n         SR    R1,R1                    12 WRITES/SCREEN?\n         CLC   $SLOW,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,1                     6 WRITES/SCREEN?\n         CLC   $HALFAST,ODATA\n         BE    SETSPEED\n         LA    R1,3                     3 WRITES/SCREEN?\n         CLC   $FAST,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,X'FF'                 1 WRITE/SCREEN?\n         CLC   $PAGE,ODATA\n         BE    SETSPEED                  YES\n         CLC   $HOLD,ODATA              PAGE LOCK MODE?\n         BE    SETHOLD                   YES\n         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?\n         BE    OFFHOLD                   YES\n         CLC   $MON,ODATA               DUMP MONITORING?\n         BE    SETMON                    YES\n         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?\n         BE    OFFMON                    YES\n         CLC   STOP,ODATA               DISCONTINUE DUMP?\n         BE    OFFDUMP                   YES\n         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?\n         BE    ONCON                     YES\n         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'\n         OI    SW2,PROMPTSW             FORCE HELP MESSAGE\n         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG\n         SPACE 2\nSETSPEED STC   R1,SPEEDSW\n         B     PUTENTRY\n         SPACE 1\nGIVEHELP EX    0,BLNKODTA\n         MVC   ODATA(PROMPTLN),ATTPRMPT\n         NI    SW2,255-PROMPTSW\n         B     PUTENTRY\n         MZSHD 'GET'\nGETCRT   EX    0,SPEEDTST               IS LINE A MULT OF 1,2,4,12?\n         BZ    GET1                      YES - WRITE HAS BEEN DONE\n        GWRITE GW,LNE,,961,SCREEN,MF=E\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\nGET1   ATTNINQ GACB,MODE=(C,C2)\nC2      GWRITE GW,LNE,,81,LNAD,MF=E     BLANK ENTRY LINE\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n        GWRITE GW,LNE,,2,MF=E           POSITION CURSOR\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n       ATTNINQ GACB                     WAIT FOR ATTENTION\n         MVI   GR+16,0\n         GREAD GR,SMI,,74,IBUF+6,MF=E\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n         B     GETUC\nLINEINC  DC    F'1'\nLINEMAX  DC    F'11'\nLINECUR  DC    F'0'\n*              THE FOLLOWING ARE DELIBERATELY SET UP TO FORCE GBUF\n*               TO A FULLWORD BOUBDARY.\nATTNMSG  DC    C'0EH ? \u00a2'\nSCREEN   DC    C'0'\nGBUF     DC    12CL80' '\n         SPACE 1\nATTPRMPT DC    C'MZP002I '\n$HELP    DC    C'$HELP',C': '\n$HOLD    DC    C'$HOLD',C'|'\n$AUTO    DC    C'$AUTO',C' '\nCON      DC    C'CON',C' '\nSTOP     DC    C'STOP',C' '\n$PAGE    DC    C'$PAGE',C'|'\n$FAST    DC    C'$FAST',C'|'\n$HALFAST DC    C'$HALFAST',C'|'\n$SLOW    DC    C'$SLOW',C' '\n$MON     DC    C'$MON',C'|'\n$NOMON   DC    C'$NOMON',C' '\nPROMPTLN EQU   *-ATTPRMPT\n         SPACE 1\n         GREAD GR,SMI,SYS2260,74,0,1,MF=L\nSYS2260  DCB   DDNAME=DD2260,DSORG=GS,GTYPE=BASIC,GNCP=1,MACRF=(R,W)\n        GWRITE GW,LNE,SYS2260,961,SCREEN,1,MF=L\nGACB     SAEC  EP=REST,DCB=SYS2260,COMAREA=OCR,ATTNTYP=(R,2260)\nOCR      DS    4F\nREST     EQU   0                        NO ATTENTION ROUTINE\n         SPACE 2\nDELAY    DC    F'150'                   1.5 SEC DELAY FOR ATTN\n         LTORG\n         PRINT NOGEN\nMZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\nCVT      DSECT\n         CVT   SYS=VMS,PREFIX=YES\n         MZSHD 'DATA CONTROL BLOCK DSECT'\n         DCBD  DSORG=GS\n         END\n./ ADD NAME=MZ3270   0100-19106-19106-1238-00326-00326-00000-MZAP78  18\n3270     TITLE 'MOREZAP 3270 ACCESS METHOD - COPYRIGHT 1975 SHMUEL METZ*\n               '\n         MACRO\n&L       BUF\n         LCLA  &I\n         LCLC  &LB\n&LB      SETC  '&L'\n.LOOP    ANOP\n&I       SETA  &I+1\n&LB      MZSCR SF,(INT),CL79' '\n&LB      SETC  ''\n         AIF   (&I LT 24).LOOP\n         MEND\n         SPACE 1\n         MACRO\n&L       ADDRT\n         LCLA  &I\n         LCLC  &LB\n&LB      SETC  '&L'\n.LOOP    ANOP\n&I       SETA  &I+1\n&LB      MZSCR (&I,1)\n&LB      SETC  ''\n         AIF   (&I LT 24).LOOP\n         MZSCR (1,1)\n         MEND\n         SPACE 3\n         COPY  MZGBL\n         MZSET\n         MZHED 'MOREZAP 3270 ACCESS METHOD'\nMZ3270   MZENT TYPE=IO,DCB=SYS3270,                                    *\n               PUT=PUTCRT,EJECT=RSVSPACE,GET=GETCRT,                   *\n               ATTN=TESTATTN,INIT=AUCB\n         SPACE 2\nPUTCRT   LM    R4,R6,LINEINC\n         LTR   R6,R6                    IS THIS LINE 0?\n         BNZ   UNSWIFT                   NO - OK TO USE\n         TM    SW1,DMPSW                IS DUMP OR HELP IN PROGRESS?\n         BZ    *+6                       NO - LEAVE LINE ALONE\n         LR    R6,R4                    BYPASS LINE 0 - LEAVE TITLE\n         CLI   SPEEDSW,X'FF'            IS THIS 1/PAGE MODE?\n         BNE   UNSWIFT                   NO\n         AR    R6,R4                    SKIP 0(\u00acDUMP) OR 1(DUMP)\n         LA    R1,GBUF\n         TM    SW1,DMPSW                IS DUMP IN PROGRESS?\n         BZ    *+8                       NO - ONLY NEED ONE LINE\n         LA    R1,81(R1)                USE LINE 2 FOR DUMP\nH81      EQU   *-2,2,H\n         MVC   2(79,R1),BLANKARD        BLANK LINE 0(\u00acDUMP)|1(DUMP)\nUNSWIFT  ST    R6,LINECUR               SAVE IN CASE ALTERED BY $PAGE\n*                                        OR DUMP/HELP SWITCH CODING\n         MH    R6,H81\n         LA    R6,GBUF(R6)\n         MVC   2(79,R6),ODATA\n         L     R6,LINECUR\n         BXLE  R6,R4,*+6\n         SR    R6,R6\n         ST    R6,LINECUR\n         LA    R1,ADDRTAB(R6)\n         AR    R1,R6\n         MVC   PRADDR,0(R1)\n         MVC   PREUA,2(R1)\n         CLI   LINECUR+3,0              BLANKING FOR EJECT?\n         NOP   PUTCRT\nEJECTSW  EQU   *-3,1,X\n         CLI   SPEEDSW,X'FF'            1/PAGE MODE?\n         BE    NOMARK                    YES - SKIP FLAGGING OLDEST\n         MH    R6,H81\n         LA    R6,GBUF(R6)\n         MVI   2(R6),C'|'\n         SPACE 1\nNOMARK   EX    0,BLNKODTA\n         SPACE 1\n         TM    SW1,DMPSW                DUMP/HELP/DEBUG?\n         BZ    *+10                      NO - LEAVE LINE 0 ALONE\n         MVC   GBUF+1(79),HDATA         MOVE TITLE TO LINE 0\n         TM    SW2,CRTERRSW+ATTNSW      I/O ERROR OR ATTENTION?\n         BNZ   *+12                      I'M GONNA SAY IT NOW\nSPEEDTST TM    LINECUR+3,3              IS LINE A MULT OF 1,2,4,12?\nSPEEDSW  EQU   *-3,1,X\n         BNZ   NOCRT\n         WRITE GW,TS,,SCREEN,GBUFE-SCREEN,MF=E\n         LTR   R15,R15                  IS WRITE OK?\n         BNZ   BUMRC                     NO\n         CLI   LINECUR+3,0\n         BNE   W1\n         TM    SW2,ATTNSW+HOLDSW        WILL ATTN BE FORCED?\n         BNZ   W1                        YES - NO POINT TO DELAY\n        STIMER WAIT,BINTVL=DELAY\nW1       LA    R1,GW                    RESTORE DECB PTR\n         BAL   R14,TESTECB\n         TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?\n         BO    GIVEHELP                  YES - GIVE HELP\n         TM    SW2,HOLDSW+ATTNSW        PAGE LOCK MODE OR ATTN?\n         BNZ   C1                        YES - SIMULATE ATTN\n         L     R1,AUCB\n         USING SRTE,R1\n         TM    UCBGCB,1\n         BO    C1\n         DROP  R1\n         B     NOCRT\n         SPACE 2\nRSVSPACE L     R0,SAVEPUT\n         LM    R1,R2,LINEMAX\n         BXLE  R2,R0,ENDPUT\n         MVI   EJECTSW,X'70'\n         EX    0,BLNKODTA\n         B     PUTCRT\n         MZSHD 'ERROR ANALYSIS AND HANDLING'\n         USING DECSDECB,R1\n*              THIS SUBROUTINE IS ENTERED AT TESTRC FOLLOWING A\n*              READ/WRITE, IN ORDER TO ANALYZE THE RESULT.\n*              IF ENTERED AT TESTECB, COMPLETION IS WAITED FOR,\n*              FOLLOWING WHICH THE DECB IS ANALYZED.\n*              IF ENTERED AT TESTRC, THE RETURN CODE IN R15 IS FIRST\n*              TESTED, FOLLOWING WHICH, IF R15=0,\n*              THE TESTECB PROCESSING IS PERFORMED.\n*              REGISTER USAGE IS:\n         SPACE 1\n*              R1    ->DECB\n*              R9    -> INPUT AREA (IBUF OR ODATA)   ***** TEMP *****\n*              R14   RETURN VECTOR\n*              READ  0  PA1    RETURN\n*              READ  4  PA2    RETURN\n*              READ  8  NULL   RETURN\n*              READ  12 NORMAL RETURN\n*              WRITE 0  NORMAL RETURN\n*              R15   RETURN CODE FROM READ/WRITE\nTESTRC   LTR   R15,R15\n         BNZ   BUMRC\n*        B     TESTECB\n         SPACE 1\nTESTECB  STM   R14,R12,12(R13)\n         WAIT  ECB=(1)\n         L     R1,24(R13)               RESTORE DECB POINTER\n         CLI   0(R1),X'7F'              I/O ERROR?\n         BNE   CRTERR\n         NI    SW2,255-CRTERRSW\n         CLI   DECFLAGS,1\n         BNE   ECBOK\n         MVC   IBUF(29),=C'MZPC002I ONLINE TEST COMPLETE'\n         B     SHUV\nECBOK    LM    R14,R12,12(R13)\n         CLI   DECTYPE+1,1              READ TI?\n         BNER  R14                       NO - ALL DONE\n         CLI   RTIBAID,X'6D'\n         BE    CLEAR\n         CLI   RTIBAID,X'6C'            PA1?\n         BER   R14\n         CLI   RTIBAID,X'6E'            PA2(CANCEL)?\n         BE    4(,R14)\n         CLI   RTIBAID,X'7E'            SELECTOR PEN DETECT?\n         BE    PEN\n         CLI   RTIBAID,X'7D'            ENTER?\n         BNER  R14\n         LA    R15,RTIBUFE-RTIBTEXT-1\n         SH    R15,DECCOUNT\n         BM    8(,R14)\n         CH    R15,=Y(71)                                         *TSM*\n         BH    TOOLONG                                            *TSM*\n         EX    R15,*+8\n         B     12(,R14)\n         MVC   0(,R9),RTIBTEXT\n         SPACE 1\nPEN      BR    R14                      ************ TEMP *************\n         SPACE 1\nCLEAR    BR    R14                      ************ TEMP *************\n         SPACE 1\n         SPACE 1\nTOOLONG  MVC   IBUF(21),=C'MZPC003I MSG TOO LONG'\n         B     SHUV\n         SPACE 1\nBUMRC    DC    H'0'                     SPIE IN THE SKIE\n         SPACE 1\nCRTERR   TM    SW2,CRTERRSW             2ND ERROR?\n         BO    CRTERROR                  YES\n         OI    SW2,CRTERRSW             SET 1ST ERROR SW\nCRTERRMS MVC   IBUF(34),=C'MZPC001I *** I/O ERROR ON 3270 ***'\nSHUV     CLI   DECTYPE+1,1              IS THIS READ TI?\n         BNE   PUTENTRY                  NO - DO NOT RE-ISSUE\n         L     R0,SAVEGET+56            BACKUP RETURN ADDRESS\n         SH    R0,=H'4'\n         ST    R0,SAVEGET+56\n         B     PUTENTRY\n         DROP  R1\n         SPACE 1\nCRTERROR CLOSE (SYS3270,)\n         WTO   'MZP001I I/O ERROR ON 3270 - USE CONSOLE',              *\n               ROUTCDE=(1,11),DESC=1\n         MVC   CRTSW,NOP\n         B     CRTERRMS\nNOP      NOP   0\n         MZSHD 'ATTENTION HANDLING'\nTESTATTN L     R1,AUCB\n         USING SRTE,R1\n         TM    UCBGCB,1\n         BZ    NOCRT\n         DROP  R1\n         OI    SW2,ATTNSW\n         B     NOMARK\n         SPACE 2\nC1       MVC   PRDATA,ATTNMSG\n         OI    SW2,ATTNSW               FORCE REENTRY TO ATTN CODE\n         WRITE GW,TI,,PROMPTS,PROMPTE-PROMPTS,MF=E\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n         MVI   GR+16,0\n         READ  GR,TI,,RTIBAID,RTIBUFE-RTIBAID,MF=E\n         LA    R9,ODATA                 FOR EX MVC   ****** TEMP *****\n         BAL   R14,TESTRC               WAIT FOR NORMAL COMPLETION\n         B     GIVEHELP                  PA1\n         B     NOCRT                     PA2 (CANCEL)\n         B     NOCRT                     NULL\nINT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE\n         CLC   =C'$ABEND',ODATA\n         BE    ABDUMP\n         CLC   $HELP,ODATA\n         BE    GIVEHELP\n         SR    R1,R1                    24 WRITES/SCREEN?\n         CLC   $SLOW,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,3                     12 WRITES/SCREEN?\n         CLC   $HALFAST,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,7                     6 WRITES/SCREEN?\n         CLC   $FAST,ODATA\n         BE    SETSPEED                  YES\n         LA    R1,X'FF'                 1 WRITE/SCREEN?\n         CLC   $PAGE,ODATA\n         BE    SETSPEED                  YES\n         CLC   $HOLD,ODATA              PAGE LOCK MODE?\n         BE    SETHOLD                   YES\n         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?\n         BE    OFFHOLD                   YES\n         CLC   $MON,ODATA               DUMP MONITORING?\n         BE    SETMON                    YES\n         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?\n         BE    OFFMON                    YES\n         CLC   STOP,ODATA               DISCONTINUE DUMP?\n         BE    OFFDUMP                   YES\n         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?\n         BE    ONCON                     YES\n         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'\n         OI    SW2,PROMPTSW             FORCE HELP MESSAGE\n         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG\n         SPACE 2\nSETSPEED STC   R1,SPEEDSW\n         B     PUTENTRY\n         SPACE 1\nGIVEHELP EX    0,BLNKODTA\n         MVC   ODATA(PROMPTLN),ATTPRMPT\n         NI    SW2,255-PROMPTSW\n         B     PUTENTRY\n         MZSHD 'GET'\nGETCRT   EX    0,SPEEDTST               IS LINE A MULT OF 1,2,4,12?\n         BZ    GET1                      YES - WRITE HAS BEEN DONE\n         WRITE GW,TS,,SCREEN,GBUFE-SCREEN,MF=E\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\nGET1     MVC   PRDATA,IBUF              PREPARE TO BLANK ENTRY LINE\n         WRITE GW,TI,,PROMPTS,PROMPTE-PROMPTS,MF=E\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n         MVI   GR+16,0\n         READ  GR,TI,,RTIBAID,RTIBUFE-RTIBAID,MF=E\n         LA    R9,IBUF+6                 FOR EX MVC   **** TEMP *****\n         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION\n         OI    SW2,ATTNSW                 PA1          **** TEMP *****\n         OI    SW2,ATTNSW                 PA2 (CANCEL) **** TEMP *****\n         OI    SW2,ATTNSW                 NULL         **** TEMP *****\n         B     GETUC\n         SPACE 2\nRTIBAID  DS    X\nRTIBCADR DS    XL2\nRTIBSBA  DS    X\nRTIBBADR DS    XL2\nRTIBTEXT DS    CL294                     LEAVE ROOM FOR OLT\nRTIBUFE  EQU   *\n         MZSHD 'BUFFER, DCB, AND MISCELLANEOUS'\nLINEINC  DC    F'1'\nLINEMAX  DC    F'23'\nLINECUR  DC    F'0'\nAUCB     DS    A\nATTNMSG  DC    CL5'EH ?'\n         SPACE 1\nPROMPTS  MZSCR (RESETMDT,KBYRSTOR),SBA,PRADDR:,(24,1),                 *\n               SF,(INT,PROT),PRDATA:,CL5,                              *\n               SF,(NONE),IC,EUA,PREUA:,(+1,1)\nPROMPTE  EQU   *\n         SPACE 1\nADDRTAB  ADDRT\n         SPACE 1\nATTPRMPT DC    C'MZP002I '\n$HELP    DC    C'$HELP',C': '\n$HOLD    DC    C'$HOLD',C'|'\n$AUTO    DC    C'$AUTO',C' '\nCON      DC    C'CON',C' '\nSTOP     DC    C'STOP',C' '\n$PAGE    DC    C'$PAGE',C'|'\n$FAST    DC    C'$FAST',C'|'\n$HALFAST DC    C'$HALFAST',C'|'\n$SLOW    DC    C'$SLOW',C' '\n$MON     DC    C'$MON',C'|'\n$NOMON   DC    C'$NOMON',C' '\nPROMPTLN EQU   *-ATTPRMPT\n         SPACE 1\nSYS3270  DCB   DDNAME=IEFRDER,DSORG=CX,EROPT=T,                        *\n               MACRF=(R,W)\n         READ  GR,TI,SYS3270,RTIBAID,RTIBUFE-RTIBAID,0,1,MF=L\n         WRITE GW,TS,SYS3270,SCREEN,GBUFE-SCREEN,,1,MF=L\n         SPACE 2\nDELAY    DC    F'150'                   1.5 SEC DELAY FOR ATTN\n         LTORG\nSCREEN   MZSCR (RESETMDT)\nGBUF     BUF\nGBUFE    EQU   *\n         PRINT NOGEN\nMZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN\n         MZSHD 'COMMUNICATIONS VECTOR TABLE'\nCVT      DSECT\n         CVT   SYS=VMS,PREFIX=YES\n         MZSHD 'DATA CONTROL BLOCK DSECT'\n         DCBD  DSORG=BX\n         MZSHD 'DATA EVENT CONTROL BLOCK DSECT'\n      IECTDECB\n         MZSHD 'UNIT CONTROL BLOCK DSECT'\nSRTE    DSECT\n      IEFUCBOB\n         END\n./ ADD NAME=NONBL    0100-19106-19106-1238-00021-00021-00000-MZAP78  18\n         MACRO\n&L       NONBL &GO,&NOGO=SYNTEX\n         GBLC  &CPU\n         AIF   ('&CPU' NE '370').S360\n&L       CLCL  R4,R6\n         AIF   (T'&GO EQ 'O').NG370\n         BNE   &GO\n         MEXIT\n.NG370   BE    &NOGO\n         MEXIT\n.S360    ANOP\n&L       CLI   0(R4),C' '\n         AIF   (T'&GO EQ 'O').NG360\n         BNE   &GO\n         AGO   .G360\n.NG360   BNE   *+16\n.G360    LA    R4,1(R4)\n         BCT   R5,*-12\n         AIF   (T'&GO NE 'O').BYBY\n         B     &NOGO\n.BYBY    MEND\n./ ADD NAME=PGFIX    0100-19106-19106-1238-00007-00007-00000-MZAP78  18\n         MACRO\n&NAME    PGFIX &FORM,&LA=,&A=,&ECB=,&ECBIND=,&LONG=,&RELEASE=,         X\n               &RSAOPT=,&SUSPEND=\n&NAME IHBPSINR &FORM,TYPE=FIX,LA=&LA,A=&A,ECB=&ECB,ECBIND=&ECBIND,     X\n               LONG=&LONG,RELEASE=&RELEASE,RSAOPT=&RSAOPT,             X\n               SUSPEND=&SUSPEND\n         MEND\n./ ADD NAME=PGFREE   0100-19106-19106-1238-00005-00005-00000-MZAP78  18\n         MACRO\n&NAME    PGFREE &FORM,&LA=,&A=,&ECB=,&ECBIND=,&RSAOPT=,&RELEASE=\n&NAME IHBPSINR &FORM,TYPE=FREE,LA=&LA,A=&A,ECB=&ECB,ECBIND=&ECBIND,    X\n               RELEASE=&RELEASE,RSAOPT=&RSAOPT\n         MEND\n./ ADD NAME=TQCBD    0100-19106-19106-1238-00209-00209-00000-MZAP78  18\n         MACRO\n         TQCBD\n* TQCBD MACRO UPDATED 02/11/72                                   S22025\nIEDQQCB DSECT\n.*D230000                                                        S22025\n.*C015000                                                        S22025\n.*A020000,6950000\n.*D110000-125000                                                 S22026\n.*A087000,110000-125000,337000,382000-384000,497000              S22026\n*\n*\n*        THIS IS A DSECT OF THE MASTER QCB FOLLOWED BY THE PRIORITY\n*        QCB. THERE IS A MASTER QCB FOR EVERY MESSAGE QUEUE. THERE\n*        IS A PRIORITY QCB FOR EACH PRIORITY LEVEL APPLICABLE FOR\n*        THIS DESTINATION QUEUE.\n         SPACE\nQCBDSFLG DS    XL1 .                    FLAGS INDICATING A QCB FOR\n*                                         DISPATCHER AND WHICH DATA\n*                                         SET(S) THE MESSAGES FOR\n*                                         THIS DEST. ARE QUEUED ON\n*                        BIT DEFINITIONS\nQCBHELD  EQU   X'01' .                  STOP SENDING\nQCBFQCB  EQU   X'02' .                  FLAG INDICATING A QCB\nQCBDRQQ  EQU   X'04' .                  FLAG INDIC A DRQ         S22026\nQCBREUS  EQU   X'10' .                  FLAG FOR REUSEABLE DISK Q.\nQCBNREUS EQU   X'20' .                  FLAG FOR NONREUS. DISK Q.\nQCBDISK  EQU   X'30' .                  DISK QUEUES USED\nQCBCORE  EQU   X'40' .                  FLAG FOR MS QUEUES.\n*              X'50'                    INDICATES CORE Q'S WITH\n*                                       BACKUP ON REUSABLE DISK\n*              X'60'                    INDICATES CORE Q'S WITH\n*                                       BACKUP ON NONREUS DISK\n*\nQCBELCHN DS    AL3 .                    ELEMENT CHAIN\n*              CONTAINS THE QCB ADDRESS TO BE POSTED TO WHEN THIS\n*              QCB IS REMOVED FROM THE TIME DELAY QUEUE.\nQCBPRI   DS    XL1 .                    PRIORITY\nQCBLINK  DS    AL3 .                    POINTER TO NEXT STCB IN CHAIN\nQCBSTVTO DS    AL1 .                    INDEX TO THE ENTRY IN THE\n*                                         SUBTASK VECTOR TABLE\nQCBSTCHN DS    AL3 .                    STCB CHAIN\nQCBSTPRI DS    XL1 .                    PRIORITY OF THE STCB\nQCBSLINK DS    AL3 .                    POINTER TO NEXT STCB IN CHAIN\nQCBEOLDT DS    XL2 .                    INTERRUPT TIME\nQCBRETCT DS    0XL1 .                   TSO RETRY COUNTERS          TSO\nQCBLKRLN DS    XL1 .                    LOCK RELATIVE LINE NO.\n*              OFFSET TO QCB FOR TIME DELAY - FOR QCB = X'00'\nQCBSTAT  DS    XL1 .                    STATUS OF THIS QCB\n*                        BIT DEFINITIONS\nQCBEOM   EQU   X'80' .                  END OF MESSAGE SENT\nQCBTRMHO EQU   X'40' .                  TERMINAL WAS HELD\nQCBBUFRD EQU   X'20' .                  BUFFERED TERMINAL\nQCBSEND  EQU   X'10' .                  SENDING TO BUFFERED TERMINAL\nQCBSCHDL EQU   X'04' .                  PUT IN DELAY Q WHEN INACTIVE\nQCBCLOCK EQU   X'02' .                  ON = CLOCK, OFF = INTVL\nQCBTIME  EQU   X'01' .                  DELAY GREATER THAN 12 HOURS\n*\nQCBSCBOF DS    XL1 .                    OFFSET TO THE PROPER SCB\n*                                         FOR THIS TRANSMISSION.\n*                                         X'00' UNLES THIS LINE\n*                                         HAS BUFFERED TERMS.\nQCBINSRC DS    0AL3 .                   CHAIN OF SOURCE LCB'S\n*                                         CURRENTLY SENDING INITIATE\n*                                         MODE MSGS TO THIS DEST. Q.\nQCBSATCT DS    XL1 .                    SIM ATTN OUTPUT LINE COUNT  TSO\nQCBTSOF2 DS    XL1 .                    SECOND TSO FLAG BYTE        TSO\n*                        BIT DEFINITIONS                            TSO\nQCBINHBN EQU   X'80' .                  USE INHIBITS WITH THIS TERM TSO\nQCBBUFQ  EQU   X'40' .                  TCAM BUFFER BEING HELD      TSO\nQCBPOSTO EQU   X'20' .                  QCB POSTED TO ITSELF        TSO\nQCBDSSMI EQU   X'10' .                  START MI CHARACTER SENT     TSO\nQCBSIMRD EQU   X'08' .                  SIMATTN READ EXECUTING      TSO\nQCBSATCH EQU   X'04' .                  SIMULATED ATTN BY CHARACTER TSO\nQCBSATTI EQU   X'02' .                  SIMULATED ATTN BY TIME      TSO\nQCBSATLC EQU   X'01' .                  SIMULATED ATTN BY LINE      TSO\n*\nQCBTSOF1 DS    XL1 .                    FIRST TSO FLAG BYTE         TSO\n*                        BIT DEFINITIONS                            TSO\nQCBWRBRK EQU   X'80' .                  ISSUE A WRITE BREAK         TSO\nQCBTGET  EQU   X'40' .                  TGET REQUEST                TSO\nQCBTPUT  EQU   X'20' .                  TPUT REQUEST                TSO\nQCBNOBUF EQU   X'10' .                  INSUFFICIENT BUFFERS        TSO\nQCBSATRD EQU   X'08' .                  SIMULATED ATTN READ REQUEST TSO\nQCBPARTO EQU   X'04' .                  PARTIAL OUTPUT LINE         TSO\nQCBDELAY EQU   X'02' .                  QCB IN DELAY QUEUE\nQCBDISC  EQU   X'01' .                  USER TO BE LOGGED OFF       TSO\n*\nQCBEXTO  DS    0H .                     OFFSET TO EXT            S22026\nQCBINTVL DS    XL2 .                    INTERVAL FOR POLL DELAY\nQCBMSGCT DS    H .                      COUNT OF MESSAGES IN THIS\n*                                         QUEUE\nQCBPREN  DS    0A .                     ADDRESS OF TERMINAL TABLE\n*                                       ENTRY IF QCB FOR A PROCESS\n*                                       ENTRY\nQCBPRLVL DS    XL1 .                    HIGHEST PRIORITY LEVEL MESSAGE\nQCBLKRRN DS    0XL3 .                   LOCK RELATIVE RECORD NUM.\n*              LINK FIELD FOR QCB WHEN ON THE TIME DELAY QUEUE\nQCBCARCT DS    XL1 .                    CARRIAGE POSITION COUNT     TSO\nQCBTJID  DS    H .                      TSO JOB IDENTIFICATION      TSO\nQCBRELLN DS    XL1 .                    RELATIVE LINE NO. FOR THE\n*                                         LINE THIS QCB REPRESENTS\nQCBDCBAD DS    AL3 .                    ADDRESS OF DCB\nQCBFLAG  DS    XL1 .                    QCB STATUS BITS\n*                        BIT DEFINITIONS\nQCBTSSES EQU   X'80' .                  TSO SESSION IN PROGRESS     TSO\nQCBNOBRK EQU   X'40' .                  NO REVERSE BREAK FEATURE    TSO\nQCBREAD  EQU   X'20' .                  READ HAS PRIORITY           TSO\nQCBRSRV  EQU   X'10' .                  REUSE SERVICED BIT\nQCBTERMQ EQU   X'08' .                  QUEUING BY TERMINAL\nQCBSDFFO EQU   X'04' .                  CURRENTLY SENDING FEFO MSG\nQCBPROC  EQU   X'02' .                  THIS QCB FOR A PROCESS ENTRY\nQCBCKPT  EQU   X'01' .                  FLAG FOR CHECKPOINT\n*\nQCBQBACK DS    AL3 .                    QBACK MESSAGE CHAIN\n         SPACE 2\n*     DEC                                 HEX\n*        *********************************\n*      0 * DSFLG *         ELCHN         *\n*        *********************************\n*      4 * PRI   *         LINK          *  4\n*        *********************************\n*      8 *  VTO  *         STCHN         *  8\n*        *********************************           **************\n*     12 * STPRI *         SLINK         *  C        *            *\n*        *********************************           * MASTER QCB *\n*     16 *    EOLDT      * LKRLN * STAT  * 10        *\n*        *********************************           **************\n*     20 * SCBOF *         INSRC         * 14\n*        *********************************\n*     24 *    INTVL      *     MSGCT     * 18\n*        *********************************\n*     28 * PRILVL*     PREN/LKRRN        * 1C\n*        *********************************\n*     32 * RELLN *         DCBAD         * 20\n*        *********************************\n*     36 * FLAG  *         QBACK         * 24\n*        *********************************\n         SPACE\n*\nQCBMEND  EQU   * .\nQCBMSIZE EQU   QCBMEND-IEDQQCB .        SIZE OF MASTER QCB\n*\n         SPACE 2\n*\n*        THIS IS THE DSECT OF A PRIORITY QCB.  THERE IS A PRIORITY\n*        QCB FOR EACH PRIORITY LEVEL APPLICABLE FOR THIS DEST. Q\n*\nIEDQPQCB EQU   * .                 START OF PRI LEVEL QCB\nQCBDNHDR DS    XL3 .                    DISK RECORE NUMBER TO PUT\n*                                         THE NEXT HDR RECEIVED\nQCBFHDLZ DS    XL3 .                    DISK REC. NO OF THE FIRST\n*                                         HEADER ON THIS QUEUE\n*                                         THAT WAS PLACED ON THE\n         ORG   QCBFHDLZ .                                        S21101\nQCBDATFL DS    X .                     DATFLAGS FIELD OF LAST    S21101\n*                                      MSG REMOVED FROM FEFO Q   S21101\nQCBPFEFO DS    XL3 .                    RCD NUMBER OF LAST MSG   S21101\n*                                       REMOVED FROM FEFO Q      S21101\nQCBDATSQ DS    XL2 .                    SEQUENC NUMBER OF LAST   S21101\n*                                       MSG REMOVED FROM FEFO Q  S21101\n         ORG   QCBFHDLZ+3 .                                      S21101\nQCBFHDTZ DS    XL3 .                      LAST ZENE USED.\n*                                       DISK REC. NO. OF THE FIRST\n*                                         HEADER PLACED IN THE\n*                                         CURRENT ZONE\nQCBINTFF DS    XL3 .                    DISK REC.NO. OF THE FIRST\n*                                         INTERCEPTED MSG. - FEFO\n*                                         ORDER\nQCBINTLF DS    XL3 .                    DISK REC. NO. OF THE LAST\n*                                         INTERCEPTED MSG. - FEFO\nQCBFFEFO DS    XL3 .                    DISK REC. NO. OF THE FIRST\n*                                         (FEFO) MSG. TO BE RECVD.\n*                                         CORE RECORD NO. IF THIS\n*                                         IS A CORE ONLY QUEUE.\nQCBLFEFO DS    XL3 .                    DISK RECORD NO. OF THE\n*                                         LAST FEFO MSG. RECEIVED.\n*                                         CORE REC. NO. IF THIS IS\n*                                         A CORE ONLY QUEUE.\nQCBCFHDR DS    XL3 .                    CORE REC. NO. OF THE FIRST\n*                                         HEADER APPEARING IN THIS\n*                                         QUEUE.\nQCBPRIPQ DS    XL1 .                    THE PRIORITY OF THIS PRITY\n*                                         LEVEL QCB.  THIS WILL BE\n*                                         X'00' IF THIS IS THE\n*                                         LOWEST PRTY LEVEL.\nQCBCPVHD DS    AL3 .                    CORE ADDR OF THE LAST ADR\n*                                         PLACED ON THIS QUEUE.\n         SPACE 2\n*     DEC                                 HEX\n*        *********************************\n*      0 *         DNHDR         * FHDLZ *  0\n*        *********************************\n*      4 *    (FHDLZ)    *     FHDTZ     *  4\n*        *********************************         ****************\n*      8 *(FHDTZ)*         INTFF         *  8      *              *\n*        *********************************         * PRIORITY QCB *\n*     12 *         INTLF         * FFEFO *  C      *              *\n*        *********************************         ****************\n*     16 *    (FFEFO)    *     LFEFO     * 10\n*        *********************************\n*     20 *(LFEFO)*         CFHDR         * 14\n*        *********************************\n*     24 * PRIPQ *         CPVHD         * 18\n*        *********************************\n*\nQCBPEND  EQU   *\nQCBPSIZE EQU   QCBPEND-IEDQPQCB\n*\n         MEND\n./ ADD NAME=TRTAB    0100-19106-19106-1238-00092-00092-00000-MZAP78  18\n         MACRO\n&NM      TRTAB &FILL=C'.',&CODE=2260,&OPT=\n         LCLC  &N\n         LCLA  &I,&J\n         LCLB  &C60,&C70,&PN,&TN,&FOLD,&ERR\n         LCLA  &LEN(13),&DISP(13),&ADD(13)\n&LEN(1)  SETA  6             . TO &\n&DISP(1) SETA  75            .\n&LEN(2) SETA   7             $ TO /\n&DISP(2) SETA  91            $\n&LEN(4)  SETA 5              : TO =\n&DISP(4) SETA  122           :\n&LEN(3) SETA   5             , TO ?\n&DISP(3) SETA  107           ,\n&LEN(10) SETA  9             A\n&LEN(11) SETA  9\n&LEN(12) SETA  8\n&LEN(13) SETA  10\n&DISP(10) SETA 193           A-I\n&DISP(11) SETA 209           J-R\n&DISP(12) SETA 226           S-Z\n&DISP(13) SETA 240           0-9\n&N       SETC  '&NM'\n         AIF   ('&N' NE '').OK\n&N       SETC  'TRTA'.'&SYSNDX'\n.OK      ANOP\n&N       DC    256&FILL .      FILLER CODE\n         ORG   &N+C' '\n         DC    C' ' .        BLANK\n&C60     SETB  ('&CODE' EQ '2260' OR '&CODE' EQ '2265')\n&C70     SETB  ('&CODE' EQ '3270')\n&PN      SETB  ('&CODE' EQ 'PN')\n&TN      SETB  ('&CODE' EQ 'TN')\n         AIF   (&C60 OR &C70 OR &PN OR &TN).OKCODE\n         MNOTE 8,'CODE=''&CODE'' NOT SUPPORTED'\n         MEXIT\n.OKCODE  ANOP\n&I       SETA  N'&OPT\n         AIF   (&I LT 1).NOPT\n&J       SETA  1\n.OPTLOOP AIF   ('&OPT(&J)' EQ 'FOLD').FOLD\n         AIF   ('&OPT(&J)' EQ  'SVC').SVC\n         AIF   ('&OPT(&J)' EQ 'ERR').ERR\n         MNOTE 8,'OPT=''&OPT(&J)'' NOT SUPPORTED'\n.OPTINC  AIF   (&J GE &I).NOPT\n&J       SETA  &J+1\n         AGO   .OPTLOOP\n.FOLD    ANOP\n&FOLD    SETB  (&C60 OR &PN)\n         AGO   .OPTINC\n.SVC     ORG   &N+X'C0'\n         DC    C'+' .        DISPLAY X'C0' IN SVC NAME AS PLUS SIGN\n         AGO   .OPTINC\n.ERR     ANOP\n&ERR     SETB  (&C60)\n         AGO   .OPTINC\n.NOPT    ANOP\n&FOLD    SETB  (&FOLD OR &TN OR &C70)\n&ERR     SETB  (&ERR OR &TN OR &PN OR &C70)\n         AIF   (&C60 OR &PN).NOCENT\n&LEN(1) SETA   7\n&DISP(1) SETA  74            ADD CENT SIGN\n&LEN(2) SETA   8\n&DISP(2) SETA  90            ADD EXC. MARK\n.NOCENT  AIF   (&C60 AND NOT &ERR).NOERR\n&LEN(4) SETA   6             ADD QUOTE\n.NOERR   AIF   (NOT &FOLD).NOLC\n&LEN(5) SETA   9\n&LEN(6) SETA   9\n&LEN(7)  SETA  8\n&DISP(5) SETA  129\n&DISP(6) SETA  145\n&DISP(7) SETA  162\n         AIF   (&C70 AND NOT &FOLD).NONUM\n&LEN(8) SETA   10\n&DISP(8) SETA  176\n         AIF   (NOT &C70).NONUM\n&ADD(8) SETA   64\n.NONUM   AIF   (&C70 OR &TN).NOLC\n&ADD(5)  SETA  64\n&ADD(6)  SETA  64\n&ADD(7)  SETA  64\n.NOLC    ANOP\n&I       SETA  1\n.NEXT    AIF   (&LEN(&I) LT 1).DCL\n         ORG   &N+&DISP(&I)\n         DC    &LEN(&I)AL1(*-&N+&ADD(&I))\n.DCL     AIF   (&I GE 13).ORG\n&I       SETA  &I+1\n         AGO   .NEXT\n.ORG     ORG\n         MEND\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MZAPFB": {"ttr": 6662, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x19\\x10o\\x01\\x19\\x10o\"G\\x13\\x17\\x13\\x17\\x00\\x00\\xd4\\xe9\\xc1\\xd7@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:47:35", "lines": 4887, "newlines": 4887, "modlines": 0, "user": "MZAP"}, "text": "./ ADD NAME=ATTN     0100-19106-19106-2244-00047-00047-00000-MZAPFB  16\nIII. Attention/MODIFY messages\n.in 5\n.sp 1\nThe following attention messages are allowed;\nthey may be in lower case since MZAP translates to upper case:\n.sp 2\n.in 10\n.hi 12\n$HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndisplay list of valid nonpriveleged attention messages.\nThis function is forced if an invalid attention message is entered.\n.sp 1\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nset console input mode\n.sp 1\nSTOP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nterminate dump or HELP\n.sp 1\n$HOLD \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nenter attention state after every write\n.sp 1\n.br\n$AUTO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nrestore normal mode after $HOLD\n.sp 1\n$SLOW \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 12 writes/2260 screen, 24/3270.\nA write will occur for each output line.\n.sp 1\n$HALFAST \u00ac\u00ac\u00ac\ndo 6 writes/screen.\na write will occur for every 2 output lines(2260)\nor every 4 lines(3270)\n.sp 1\n$FAST \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 3 writes/screen.\nA write will occur for every 4 output lines(2260)\nor every 8 output lines(3270).\n.sp 1\n$PAGE \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 1 write/screen.\nIf a dump is in progress,\none line is reserved for the dump header.\nOne line is reserved as the entry line.\nA write will occur for every 10 or 11 output lines\n(3270: 22 or 23 output lines).\n.in 0\n./ ADD NAME=COMPARE  0100-19106-19106-2244-00074-00074-00000-MZAPFB  16\nVII. \u00acMZAP/CZAP Comparision\n.sp 1\n.in 4\n.nj\nMZAP\b\b\b\b____                          CZAP\b\b\b\b____\nCONSOLE                       No equivalent\n.sp 1\n*                             *\n.sp 1\nNAME .                        NAME NUCLEUS\n.sp 1\nNAME .csect                   NAME NUCLEUS\n                              INDEX csectdisp\n.sp 1\nNAME name                     NAME name\n.sp 1\nNAME name csect               NAME name\n                              INDEX csectdisp\n.sp 1\nCVT                           NAME NUCLEUS\n                              INDEX cvtloc\n.sp 1\nUCB=cuu                       NAME NUCLEUS\n                              INDEX ucbloc\nUCB cuu                       NAME NUCLEUS\n                              INDEX ucbloc\n.sp 1\nBASE hexbase                  BASE hexbase\n.sp 1\nINDEX=hexix                   INDEX hexix\n.sp 1\nINDEX esdname                 INDEX csectdisp\n                              BASE  esdindex\n.sp 1\nVERIFY  xx                    VERIFY  xx\nVER     00 'a'                VER     00 c1\nV       00 'a'C2              VER     00 c1C2\nV       00 C3'D'              VER     00 c3C4\nV       00 C6'GH'C9           VER     00 c6C7C8C9\n.sp 1\nREPLACE xx                    REPLACE xx\nREP     00 'a'                REP     00 c1\nR       00 'a'C2              REP     00 c1C2\nR       00 C3'D'              REP     00 c3C4\nR       00 C6'GH'C9           REP     00 c6C7C8C9\n.sp 1\nRESET                         RESET\n.sp 1\nRESET   EOD                   No equivalent\n.sp 1\nDUMP    name                  NAME    name\n                              DUMP    0  modulelen\n.sp 1\nDUMP    name  csect           NAME    name\n                              DUMP    csectdisp  csectlen\n.sp 1\nDUMP    .                     NAME    NUCLEUS\n                              DUMP    0          nuclen\n.sp 1\nDUMP    .     csect           NAME    NUCLEUS\n                              DUMP    csectdisp  csectlen\n.sp 1\nDUMPA   (see DUMP)            DUMPA   (see DUMP)\n.sp 1\nDUMPT   (see DUMP)            No equivalent\n.sp 1\n$ABEND  (attn)                ABEND\n.sp 1\nDEBUG   (Not truly equiv)     TRACE   (not truly equiv)\nDEBUG   (Not truly equiv)     LOGOUT  (not truly equiv)\n.sp 1\nRESET   (Not truly equiv)     TRACEOFF(not truly equiv)\n.fi\n.in 0\n./ ADD NAME=INDEX    0100-19106-19106-2244-00024-00024-00000-MZAPFB  16\nVIII. \u00acIndex to Input Statements\n.sp 2\n.nf\nStatement\b\b\b\b\b\b\b\b\b_________      Page\b\b\b\b____     Statement\b\b\b\b\b\b\b\b\b____\nAVT               9     MSER                  10\nBASE             12     NAME                   8\nBLDL              9     POINT                 17\nCONSOLE          14     QMRES                 10\nCVT               9     R                     13\nDEBUG             8     REP                   13\nDUMP             14     REPLACE               13\nDUMPA            15     RESET                  8\nDUMPB            14     SCVT                  10\nDUMPT            15     SETPTR                16\nEND               8     SMCA                  10\nGO                8     TACT                  10\nGOVRFLB           9     TCB                   10\nHCT               9     TSCVT                 11\nHELP             16     UCB                   11\nIBMORG            9     UCM                   11\nINDEX            12     USERORG               11\nJOB               8     V                     13\nKEY               7     VER                   13\nLIB              13     VERIFY                13\n./ ADD NAME=INITDOC  0100-19106-19106-2244-00103-00103-00000-MZAPFB  16\n.ti\n.if '&1' ne '';.se escape '&1.'\n.ur .if '&escape' eq '';.sr escape '\u00ac'\n.ur .if '&adjust' eq '';.sr adjust 15\n.ur .if '&trace' eq 'yes'\n.su traceon\n.ur .if '&trace' eq 'YES'\n.su traceon\n.sr lcfn='no'\n.ur .if '&train.' = 'SN'\n.sr lcfn='1'\n.ur .if '&train.' = 'TN'\n.sr lcfn='1'\n.ur .if '&train.' = 'UN'\n.sr lcfn='1'\n.rm *\n.tt 1 //Metz's Own Reliable Extended Zap/%/\n.rm\n.rm $resetdoc SAVE NOSAVE\n.tt 2 ////\n.tt 3 ////\n.tt 4 //COPYRIGHT 1975 SHMUEL METZ//\n.ti ( ( ) ) . * 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\n.ti t 05 b * s ff\n.ur .if '&lcfn' = '1'\n.ti ( 8d ) 9d . af 0 b0 1 b1 2 b2 3 b3 4 b4 5 b5 6 b6 7 b7 8 b8 9 b9\n.ti l ( L ( r ) R ) < < > >\n.ur .if '&lcfn' = '1'\n.ti l ad L 8b r bd R 9b < 8c > ae # 9c\n.ur .if '&lcfn' = '1'\n.ti b af\n.tr ff 40\n.ur .ti set &escape\n.cm Note that .tt 1 to 6 shares buffers with .bt 6 to 1.\n.bt 1 ////\n.ur .if &syspage > 1;.bt 1 //- % -//\n.bt 2 ////\n.tm 5+4\n.hm 1\n.hs 4\n.bm 3+2\n.ur .ad &adjust\n.ll 65\n.in 0\n.pi 0\n.fo\n.tb\n.sr item=0\n.$resetfn\n.rm\n.rm $resetfn SAVE NOSAVE\n.sr n0=0\n.sr n1=0\n.sr n2=0\n.sr sig0=0\n.sr sig1=0\n.rm\n.$resetdoc\n.rm $fn save nosave\n.cm Increment footnote digits and propagate the carry.\n.se n2=&n2+1\n.se carry=&n2/10\n.se sig1=&sig1+&carry\n.se n1=&n1+&carry\n.se carry=&n1/10\n.se sig2=&sig2+&carry\n.se n0=&n0+&carry\n.ur .if &n2 > 9;.sr n2=0\n.ur .if &n1 > 9;.sr n1=0\n.cm rfn is Reference to Foot Note: (n)\n.cm lfn is Label of Foot Note: (N)\n.se rfn='&escape.('\n.sr lfn='('\n.ur .if &sig0 > 0;.se rfn='&rfn.&escape.&n0'\n.ur .if &sig0 > 0;.se lfn='&lfn.&n0'\n.ur .if &sig1 > 0;.se rfn='&rfn.&escape.&n1'\n.ur .if &sig1 > 0;.se lfn='&lfn.&n1'\n.se rfn='&rfn.&escape.&n2.&escape.)'\n.se lfn='&lfn.&n2)'\n.se nfn=0+&n0.&n1.&n2\n.rm\n.rm $fnbeg save nosave\n.fn begin\n.in 5\n.un 5\n.rm\n.rm $item SAVE NOSAVE\n.se item=&item+1\n.se itemrf='&item.\u00act'\n.rm\n.rm $itemrf save nosave\n.$item\n.ur &item.\u00act&1 &2 &3 &4 &5 &6 &7 &8 &9\n.sr 1 ''\n.sr 2 ''\n.sr 3 ''\n.sr 4 ''\n.sr 5 ''\n.sr 6 ''\n.sr 7 ''\n.sr 8 ''\n.sr 9 ''\n.rm\n./ ADD NAME=INPUT    0100-19106-19106-2244-00729-00729-00000-MZAPFB  16\nIV. INPUT STATEMENTS\n.sp 1\n.in 5\nInput statements are of three types:\n.in 8\n.sp 1\n.un 4\n1.)\nA statement with an asterisk (*) in column 1 is a column 1 is a comment.\n.sp 1\n.un 4\n2.)\nA blank card is a comment.\n.sp 1\n.un 4\n3.)\nAny other statement contains an opcode in the first non-blank column\n(normally column 1).\n.in 5\n.sp 1\nFor the remainder of this section,\nthe term \"statement\" will be understood to apply only to non-comments.\n.sp 2\nEach opcode may require or permit operands;\nthe opcode must be followed by a blank unless the operand\nbegins with a period (.), hyphen (-), or equal sign (=).\n.sp 2\nA hex (hexadecimal) number is expressed as an even number\nof hexadecimal digits(0-9, A-F),\noptionally preceeded by an equal sign or hyphen.\nAn equal sign indicates that the value which follows\nis a number rather than a name;\na hyphen indicates a negative number and is only valid when\nspecifying a relative address;\nan equal sign may preceed any hex data.\n.sp 2\nA character string is expressed by enclosing the desired characters\nin apostrophes (');\nan apostrophe is represented by two consequtive apostrophes('').\nApostrophe is the only character which is doubled;\nin particular, an ampersand (&) is represented by a single\b\b\b\b\b\b______ a\nCharacter strings may be used wherever hex numbers are valid,\nand may be concatenated with hex data:\n=C1C2C3, C1C2'C', C1'B'C3 and ='ABC' all represent the same value.\n.sp 2\nThe following statements are accepted:\n.in 22\n.sp 1\n.un 13\n.se key='&sysppage'\nKEY \u00act\nThis statement is required if any REP statements are used.\nThe operand requirements may change for every release;\nthis is intended to prevent unauthorized use of MZAP.\nIt is recommended that each installation modify the\nrequirements for this opcode,\nto prevent unauthorized alteration of their system.\nThe operand requirements have been deliberately omitted\nfrom the writeup;\nthey will be made available only to a single\nindividual at each installation and he may select,\nat his own discretion,\nwho is authorized to modify resident code.\n.sp 2\n.un 13\n.se debug='&sysppage'\nDEBUG \u00act\nThe switches and table entries used for communicating between\nphases of MZAP will be displayed after each phase completes processing.\n.in 22\n.sp 2\n.se end='&sysppage'\nEND \u00act\nConsole input mode will be terminated if a valid SYSIN data set\n.un 13\nwas specified;\notherwise END is an invalid opcode.\n.sp 2\nGO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nTurns off the NOGO switch if from CRT/terminal/console;\nGO is invalid from SYSIN.\n.sp 2\nRESET \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nCauses all control cards previously read to be processed.\nIf an operand of EOD is specified,\nno further input will be read;\notherwise NOGO and DEBUG will be reset and MZAP will\ncontinue reading input.\n.sp 2\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname\n.br\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname.jobstepname\n.br\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00actaskid\n.br\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acprocname.taskid\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the job whose JPAQ is\nto be searched, prior to the TSLPA, RERP, RSVC, or RAM list queues.\nA related set of ZAPs must lie within a single job;\nonce a JOB card is accepted, it is invalid to supply\na new one without first supplying a RESET card.\nThis restriction was imposed to maintain compatability with\nthe planned OS/VS2 release 2 (MVS) support.\n.sp 2\n.ce data\nTHIS DESCRIPTION IS FOR PLANNING PURPOSES ONLY.\nTHE WRITEUP WILL BE AMENDED WHEN JOB IS AVAILABLE.\n.sp 2\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module or CSECT for\nthe VERIFYs, REPLACEs, and DUMPs which follow.\nThe name may be a load module name, a period (.),\nor either one followed by a CSECT name.\nIf the load module was scatter loaded,\na CSECT name is required.\nA period represents the nucleus specified as a member of\nthe dsname on SYSNUC,\nand is considered to be block loaded.\nThe load address will be added to the relative address\non each applicable statement (VER, DUMP, etc.)\nin the SCOPE of the NAME statement;\nthe length will be used to check that each relative address\nis within bounds.\n.sp 2\nAVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for the\nstatements which follow.\nThe AVT address is obtained from the CVT;\nthe opcode is invalid if TCAM is not active.\n.sp 2\nBLDL \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac name\nThis statement defines the module and CSECT for\nthe statements which follow.\nIt is invalid if the designated name does not\noccur in the resident BLDL list.\nThe length is set to include only the specified\nBLDL entry.\n.sp 2\nCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module,CSECT, and INDEX\nfor the statements which follow.\nAny location in the CSECT containing the CVT may be patched:\nthe locations should be given relative to the CVT.\nIt is equivalent, in MVT, to:\n.hi 0\n.in 25\n.nj\nNAME      .IEAQBK00\nINDEX     IEACVT\n.fi l\n.in 9\n.hi 13\n.sp 2\nGOVRFLB \u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only for OS/MVT and OS/VS2,\ndefines the module, CSECT, and INDEX for the statements which follow.\nAny location in the CSECT containing the main storage supervisor\nmay be patched;\nthe locations given should be relative to GOVRFLB.\nIt is equivalent to:\n.hi 0\n.in 25\n.br\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n.br\nINDEX \u00ac\u00ac\u00ac\u00acGOVRFLB\n.in 9\n.hi 13\n.sp 2\nHCT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for the HASP Control Table.\nIt is invalid if HASP is not active,\nor if there is no local modification to the HASP SVC to return\nthe HCT address in register 15.\n.sp 2\nIBMORG \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only for OS/MVT and OS/VS2,\ndefines the module and CSECT for the statements which follow.\nAny location in the SVC table may be patched;\nthe location given should be relative to the IBM portion of the table.\nIt is equivalent to:\n.hi 0\n.in 25\nName \u00ac\u00ac\u00ac\u00ac.IBMORG\n.in 9\n.hi 13\n.sp 2\nMSER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for\nthe statements which follow.\nAny location in the Master Scheduler Resident Data Area\nand in the Master Common Area may be patched.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEMSER\n.in 9\n.hi 13\n.sp 2\nQMRES \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for\nthe statements which follow.\nAny location in the Queue Manager Resident Data Area may be patched.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00acIEFJOB\n.in 9\n.hi 13\n.sp 2\nSCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only in OS/MVT and OS/VS2, defines the module, CSE\nfor the statements which follow.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IGC003\n.br\nINDEX \u00ac\u00ac\u00ac\u00acIEABEND\n.in 9\n.hi 13\n.sp 2\nSMCA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only if the system was generated with the SMF opti\nis used to define the module and CSECT for the statements which follow.\nWhile it is not actually a CSECT, nor is it in the nucleus,\nit may be patched as if it were.\n.in 9\n.hi 13\n.sp 2\n TACT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only in OS/MVT, defines the module, CSECT, and IND\nfor the statements which follow.\nAny location in the CSECT containing the permanent TCBs,\ntransient areas, and CVT amy be patched;\nthe location given should be relative to the\nTransient Area Control Table.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n.br\nINDEX \u00ac\u00ac\u00ac\u00acIEAQTAQ\n.in 9\n.hi 13\n.sp 2\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob\n.br\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob.step\n.br\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acid\n.br\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acproc.id\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT,\nand INDEX for the statements which follow.\nAny location in the jobstep tcb of the specified job or\nstarted task may be patched:\naddresses shhould be given relative to the TCB.\nNote that floating-point registers are stored at a negative\ndisplacement.\n.sp 1\n\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acTHE TCB OPCODE IS DESCRIBED FOR PLANNING PURPOSES ONLY.\nTHE WRITEUP WILL BE AMENDED WHEN IT IS AVAILABLE.\n.sp 2\nTSCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid onlin with OS/MVT and OS/VS2,\nis used to define the module and CSECT for the statements which follow.\nIt is an invalid statement if TSO is not active.\nAny location in the Time Shareing Communications Vector Table\nmay be patched;\nlocations should be given relative to the TSCVT.\n.sp 2\nUCB=cuu\n.br\nUCB cuu \u00ac\u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX for th\nstatements which follow.\nAny location in the I/O Supervisor may be patched;\nthe location given should be relative to the specified UCB.\nIt is equivalent, in MVT, to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac.IEAQFX00\n.br\nINDEX \u00ac\u00ac\u00acucbloc\n.in 9\n.hi 13\n.sp 2\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acBASE\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acHARDCOPY\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMASTER\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMCS\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acPREFIX\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=xx\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=cuu\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX\nfor the statements which follow.\nExcept for UCM BASE, the INDEX is set as an absolute address\nrather than an entrypoint name or relative address.\nHARDCOPY, MASTER, and MCS are only valid if the system was\ngenerated with the Multiple Console Support option.\nBASE, MCS, and PREFIX refer to UCM areas not related to\na specific console;\nUCM MASTER and HARDCOPY refer to the UCME for the console assigned to\nthe designated function;\nUCM ID=xx refers to the UCME whose ID (in decimal) is xx;\nand UCM UNIT=cuu refers to the UCME for the designated device.\nThey are equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEUCMC\n.br\nINDEX \u00ac\u00ac\u00ac\u00acIEECUCB (for BASE)\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acforced absolute address\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac(for other than BASE)\n.in 9\n.hi 13\n.sp 2\nUSERORG \u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only for OS/MVT and OS/VS2,\ndefines the module, CSECT, and INDEX\nfor the statements which follow.\nAny location in the SVC table may be patched;\nthe location given should be relative to the user portion\nof the table.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IBMORG\n.br\nINDEX \u00ac\u00ac\u00ac\u00acUSERORG\n.in 9\n.hi 13\n.sp 2\nBASE=xx \u00ac\u00ac\u00ac\u00ac\u00ac\n.br\nBASE xx \u00ac\u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be subtracted\nfrom the address given in a VER or REP.\nIt is normally the relative address of the CSECT,\nas printed in the assembly listing.\nThe effect of this statement is retained until\nthe next statement containing or implying a name\n(DUMP, NAME, INDEX, CVT, UCB, ...).\nIf a previous BASE is in effect,\nthe statement has a cummulative effect:\nthe amount subtracted is the sum of the BASEs.\n.sp 2\nINDEX=xx \u00ac\u00ac\u00ac\u00ac\n.br\nINDEX xx \u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to\nthe address given in a VER, REP, DUMP, etc.\nIt is normally the relative address of a CSECT from a\nlink-edit listing.\nThe effect of this statement is retained until the next statement\ncontaining or implying a name\n(CVT, DUMP, INDEX, NAME, etc.);\nall previous BASE or INDEX specifications remain in effect.\n.sp 2\nINDEX \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to the\naddress given in a VER, REP, DUMP, etc.\nIt resets all previous BASE and INDEX specifications.\nThe value used is the address of the CSECT or entry point specified,\nadjusted by the CSECT or module address of the preceeding name statement\n.sp 2\nLIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acAUTO\n.br\nLIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acddname\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to specify the ddname of the\ndata set to be used to resolve CSECT names (other than nucleus CSECTs)\nin statements which follow.\nIf AUTO is specified, modules found in TSLPA are assumed to be on CMDLIB\nmodules whose names begin with IFG or IG are assumed to be on SVCLIB;\nall other modules are assumed to be on LINKLIB.\nAUTO is initially in effect,\nand remains in effect untill overrriden by an LIB statement.\n.sp 2\nVERIFY \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nVER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nV \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dr\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to prevent inadvertently\naltering the wrong location.\nThe data at the specified relative address, r, adjusted by\nthe address from the NAME statement and any BASE or INDEX in effect,\nis compared to the specified data,\nand, if a match does not occur,\na switch (called the NOGO switch) is set,\ncausing all REPs between the preceeding RESET (or beginning of input)\nand the following RESET (or end of data) to be suppressed.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe location must be specified as 2, 4, or 6 hex digits,\npreceeded (if negative) by a hyphen (-).\nThe data may be specified as:\n.in 25\n.hi 5\n.sp 1\n1). an even number of hex digits\n.sp 1\n2). a character string enclosed in apostrophes (');\nan apostrophe is represented by 2 apostrophes\n(i.e., \"CAN'T\" is entered as \"CAN''T\").\n.sp 1\n3). any combination of 1). and 2).\n.sp 1\n4). any of the above,\nseparated by commas (,).\n.in 9\n.hi 13\n.sp 2\nREPLACE \u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nREP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nR \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to replace data\nat the specified relative location, r, as adjusted by the NAME,\nBASE, and INDEX statements in effect.\nSee VER for a description of formats.\nThe effect of a REP is suppressed if the NOGO switch is set,\neither because of a REP failure (see REP) or by an invalid\ncontrol statement (however, see GO and RESET).\n.sp 2\nCONSOLE\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cc\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cca\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n.br\nCON\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cc\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cca\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to cause subsequent input\nto be from the CRT (if a local 2260 or 3270 is assigned),\nthe terminal (if TSO),\nor the operators console (via WTO/WTOR and REPLY/MODIFY).\nA specific console may be assigned by a two hex digit UCMID\n(with an optional area identifier from A-Z) or\nby a unit address.\nRouting codes and descriptors may be specified in the form\nddddrrrr, where d is a 16 bit descriptor mask and\nr is a 16 bit routing code mask.\n.sp 2\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a dump of the specified\nmodule or CSECT,\nprior to applying any REPs.\nThe dump will contain a display of 16 bytes/line, in the format:\n.ll 120\n.nj\n.hi 0\n.in 0\n.sp 2\nR:b\b/rrrrrrb\b/A:b\b/aaaaaab\b/b\b/xxxxxxxxb\b/xxxxxxxxb\b/b\b/b\b/xxxxxxxxb\b/xx\n.ll 70\n.fi l\n.hi 5\n.in 22\n.sp 2\n  Where r is the relative address in hex\n.in 28\n.br\n  a is the absolute address in hex\n.br\n  x is the data in hex\n.br\n  e is the data the data in EBCDIC, with unprintable characters\ndisplayed as periods (.) or quotes (\").\n.br\n b\b/ is a blank\n.in 9\n.hi 13\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acA character is considered unprintable if it\ndoes not appear on the CRT;\nif called from a non-CRT TSO terminal or run in batch\nwithout a CRT,\na character is unprintable if it does not appear un the PN train.\nA cent sign (\u00a2) is considered unprintable on the 2260\nsince it is used as an SMI (>\b|).\nA quote rather than a period will be substituted for each\nunprintable character only for the 2260;\nquotes appear on the 2260 as an error symbol (_\b<\b>\b\u00ac).\n.sp 2\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a partial dump of the\nCSECT or module identified in the preceeding NAME statement.\nr is 2, 4, or 6 hex digits,\npreceeded by a hyphen if negative;\ns is 2, 4, or 6 hex digits.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe data beginning at r,\nadjusted by the preceeding NAME, INDEX, and BASE statements,\nis displayed in the format shown above.\nThe number of bytes dumped will be given by s,\nhowever the dump will always begin and end on a quadword\n(16 byte) boundary.\n.sp 2\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\nexcept that VERs and REPs will be processed prior\nto printing the dump.\n.sp 2\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\nexcept that VERs and REPs will be processed will be processed\nprior to printing the dump and that the format of the dump is different.\nEach halfword will be treated as the beginning of an instruction\nfor the purpose of printing an opcode under the hex value.\nThe dump will contain a display of 16 bytes/line, in the format:\n.ll 120\n.hi 0\n.in 0\n.nj\nrrrrrrb\b/aaaaaab\b/b\b/xxxxb\b/xxxxb\b/b\b/xxxxb\b/xxxxb\b/b\b/b\b/xxxxb\b/xxxxb\b/\nb\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/oooob\b/oooob\b/b\b/oooob\b/ooo\n.fi l\n.ll 70\n.in 22\n.hi 5\n.sp 1\n Where r is the hex relative address\n.in 28\na is the hex absolute address\n.br\nx is the hex data\n.br\ne is the EBCDIC data\n.br\no is the opcode for the above data,\ntruncated to 5 characters\n.br\nb\b/ is a blank.\n.in 9\n.hi 13\n.sp 2\nHELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list\nof valid command names.\nIf a CRT is assigned,\nor if MZAP is being run from a TSO terminal,\nattention mode is forced and a $HELP is simulated\nto enable the user to set the speed or hold options;\nthe list of commands will begin when a null line is entered.\nThe list can be terminated by entering an attention message\nof \"STOP\" from the terminal/CRT or by the operator command:\n\"P id\", where id is the jobname or START id.\n.sp 2\nHELP cmd \u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list of valid operands\nfor the designated input statement.\nIf a CRT is assigned or MZAP was invoked via TSO,\nattention mode is forced and a $HELP is simulated\nto enable the user to set the speed or hold options;\nthe list of operands will begin when a null line is entered.\nThe list can be terminated by entering an attention message\nof \"STOP\" form the terminal/CRT or by the operator command:\n\"P id,STOP\", where id is the jobname or START id.\n.sp 2\nSETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n.br\n<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement, during dump processing or VERIFY/REP\nprocessing;\ncauses the limits (address,length) and index currently in effect\nto be saved in one of 16 MZAP \"reference pointers\";\nrefdigit, which may be any hex digit from 0 to F,\nis used to identify this information for subsequent use\n(see POINT).\n.sp 2\nSETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n.br\n<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n.br\nSETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n.br\n<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n.br\nSETPTR,plen \u00acrefdigit ptr len\n.br\n<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n.br\nSETPTR,plen \u00acrefdigit ptr len-pfx\n.br\n<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement,\nduring dump or VERIFY/REPLACE processing,\nsaves the limits (address, length) and index of a control block\nas described below;\nrefdigit, which may be any hex digit from 0 to F,\nis used to identify this information for subsequent use\n(see POINT).\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acplen, if present, defines the type of pointer;\nit may have the values 15, 16, 24, or 32 (the default);\nin addition, Y, H, AL3, and A are synonymous to 15, 16, 24, and 32.\n(Only the last 24 bits of a 32 bit pointer are used.)\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr must be an even number of hex digits,\ngiving the relative address of a pointer.\nIn what follows, \"(ptr)\" denotes the contents of the designated location\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00aclen must be an even number of hex digits,\ngiving the size of the control block pointed to\n(excluding prefix, if any).\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acpfx, if specified, must be an even number of hex digits,\ngiving the length in bytes of the control block prefix.\nThe hyphen separating len and pfx may be preceeded by blanks,\nbut may not be succeeded by blanks.\npfx is assumed to be 0 if not specified.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acWhen the specified pointer, (ptr),\nis accessed, the following are computed:\n.nj\n.in 25\n.hi 0\naddress    is    (ptr)-pfx\nlength     is    len + pfx\nindex      is    (ptr)\nrelative\n index     is    index - address = pfx\n.fi l\n.in 10\n.hi 12\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index are then\nsaved in the requested reference pointer.\n.sp 2\nPOINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n.br\n-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index last set into\nthe designated reference pointer are made current;\nthe index may be modified by a subsequent BASE or INDEX (hex only)\nstatement.\n.sp 2\nPOINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n.br\n-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n.br\nPOINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n.br\n-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n.br\nPOINT,plen \u00acptr len\n.br\n->,plen \u00ac\u00ac\u00ac\u00acptr len\n.br\nPOINT,plen \u00acptr len-pfx\n.br\n->,plen \u00ac\u00ac\u00ac\u00acptr len-pfx\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index for a control block\nare made current.\nSee SETPTR for an explanation of the operands.\n.in 0\n.hi 0\n./ ADD NAME=INTRO    0100-19106-19106-2244-00019-00019-00000-MZAPFB  16\nI.\u00actINTRODUCTION\n.sp 1\n.ur .sr intro &sysppage\n.in 5\n.fi l\nThis program is intendended to provide, for OS/360 (MVT) and OS/VS2,\nthe same function as the IBM service aid COREZAP0 (360S-01114-00),\nreferred to here as CZAP;\nthat is, to apply patches to programs in main storage.\nSeveral of the control cards have an altered syntax in order\nto permit names to be specified without framing characters.\nThere is a chart at the end of this writeup which illustrates\nthe known differences.\n.sp 1\nMZAP is organized as an overlay structure.\nInformation is passed between overlays through a set of switches\nand through a chain of control of control blocks constructed\nas a result of the input statements read.\n.in 0\n./ ADD NAME=JCL      0100-19106-19106-2244-00109-00109-00000-MZAPFB  17\nV. \u00acJCL\n.in 5\n.sp 1\nMZAP requires the following JCL statements:\n.nj\n.sp 1\n 1)  //       EXEC  PGM=MOREZAP,REGION=100K\n 2)  //STEPLIB  DD  ...\n 3)  //SYSNUC   DD  DSN=SYS1.NUCLEUS(IEANUC0x),DISP=SHR\n 4)  //SVCLIB   DD  DSN=SYS1.SVCLIB,DISP=SHR\n 5)  //CMDLIB   DD  DSN=SYS1.CMDLIB,DISP=SHR\n 6)  //LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n 7)  //         DD  ...\n 8)  //ddn      DD  ...\n 9)  //IEFRDER  DD  UNIT=cuu\n10)  //SYSPRINT DD  SYSOUT=A\n11)  //SYSIN    DD  *\n.fi\n.in 9\n.sp 1\n1.) The REGION size required will vary depending on the\nsize of the CESD for the nucleus and on the number of DD\nstatements.\n.sp 1\n2) This statement is not required if MOREZAP is located in\na JOBLIB or in the system link libraries.\n.sp 1\n3) This statement is required;\nit must specify the nucleus currently loaded.\n.sp 1\n4) This statement is required if any module in SVCLIB is referenced\nin a NAME or DUMP statement.\n.sp\n5) This statement is required if any module in the TSLPA is referenced\nin a NAME or DUMP statement.\n.sp\n6) This statement is required if any module in the system\nLINK library is referenced in a NAME or DUMP statement.\nIf SYS1.PARMLIB(LNKLST00) specified data sets concatemated to SYS1.LINKL\nthen these data sets must be specified on concatenated DD statements,\nin the same order as in LNKLST00.\n.sp 1\n7) See 6.\n.sp 1\n8) Optional additional libraries may be specified;\nthe ddname should be the same as the operand of the LIB\nstatement which specifies the data set.\n.sp 1\n9) Optional 2260 (960 byte screen, local mode) or\n3277 (1920 byte screen, local mode, EBCDIC) for\ncontrol statement and attention input.\nAny ddname desired may be used,\nhowever IEFRDER is suggested if MZAP is\nto be invoked via a START command.\n.sp 1\n10) Printed output.\nIf no BLKSIZE is specified, 141 will be used for unit record\nand 685 for tape or disk.\nThe user should specify the largest blocksize acceptable to\nthe system output writer at his installation.\nIf the installation is using ASP,\nthe blocksize should not exceed the ASP buffer size.\n.sp 1\n11) Control statement input.\nAdditional input may be requested from the operator with\na CONSOLE statement.\n.in 5\n.sp 2\nThe required JCL may be preceeded by a JOB card and submitted\nthrough the input stream, or by SUBMIT.\nAlternatively, the user may add the JCL to SYS1.PROCLIB,\nand invoke MZAP with a START command.\nSee the Operators Reference and JCL Reference for more\ninformation on catalogued procedures and START commands.\n.in 8\n.cp 19\n.se ex1='&sysppage'\n.nf\n.sp 2\n//        EXEC   PGM=IEBUPDTE,PARM=NEW\n//SYSUT2    DD   DSN=SYS1.PROCLIB,DISP=MOD\n//SYSPRINT  DD   SYSOUT=A\n//SYSIN     DD   DATA\n.li\n><         ADD   NAME=MZAP,LIST=ALL\n.li\n><      NUMBER   NEW1=1000,INCR=1000\n//MZAP    PROC   NUC=1\n//IEFPROC EXEC   PGM=MZAP\n//STEPLIB   DD   DSN=SYS2.ASM.XEQ,DISP=SHR\n//SYSNUC    DD   DSN=SYS1.NUCLEUS(IEANUC0&NUC),DISP=SHR\n//IEFRDER   DD   UNIT=290\n//SVCLIB    DD   DSN=SYS1.SVCLIB,DISP=SHR\n//LINKLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//          DD   DSN=SYS2.linklib,disp=SHR\n//CMDLIB    DD   DSN=SYS1.CMDLIB,DISP=SHR\n/*\n.sp 1\n       Adding PROC to PROCLIB\n              (Example 1)\n.sp 4\n.cp 4\n.se ex2 '&sysppage'\n           S  MZAP.KENT,046,NUC=2\n.sp 1\n       Starting MZAP using sample PROC\n              (Example 2)\n.hi 0\n.in 0\n./ ADD NAME=MANUAL   0100-19106-19106-2244-00097-00097-00000-MZAPFB  17\n.cm COPYRIGHT 1975 Shmuel (Seymour J.)  Metz\n.im initdoc\n.ro\n.ce data\nMOREZAP\n\n- TABLE OF CONTENTS -\n.sp 1\n.ur tm=&systm hm=&syshm hs=&syshs\n.end\n.nf\n.sp 2\n.tb 55\n.oc _/1\n \u00actPage\n.tb ./55\n.sp 1\n.ur    I.  INTRODUCTION \u00act&intro\n.sp 1\n.ur   II.  SYSTEM and INPUT/OUTPUT REQUIREMENTS \u00act&system\n.sp 1\n.ur  III.  Attention/MODIFY Messages \u00act&attn\n.sp 1\n.ur   IV.  INPUT Statements \u00act&input\n.sp 1\n.ur    V.  JCL \u00act&jcl\n.ur         Example 1 \u00act&ex1\n.ur         Example 2 \u00act&ex2\n.sp 1\n.ur   VI.  MESSAGES\n.ur         General \u00act&msgeneral\n.ur         Common Messages \u00act&msgcommon\n.ur         Initialization Messages \u00act&msginit\n.ur         Input Messages          \u00act&msginput\n.ur         HELP Messages           \u00act&msghelp\n.ur         DEBUG Messages          \u00act&msgdebug\n.ur         ESD Messages            \u00act&msgesd\n.ur         DUMP Messages           \u00act&msgdump\n.ur         VER/REP Messages        \u00act&msgverep\n.ur         Final Housekeeping and\n.ur          Reinitialization Messages \u00act&msgfinal\n.sp 1\n.ur  VII.  MZAP/CZAP Comparison    \u00act&compare\n.sp 1\n.ur VIII.  Index to Input Statements. \u00act&index\n.sp 1\n       Sample Output                  \u00actA-1\n.tb 5 10 15 20 25 30 35 40 45 50 55 60 65\n.pa\n.rm * NOSAVE NOSAVE\n.se intro &sysppage\n.rm\n.im intro\n.$resetdoc\n.pa\n.rm * NOSAVE NOSAVE\n.se system &sysppage\n.rm\n.im system\n.$resetdoc\n.pa\n.ar\n.rm * NOSAVE NOSAVE\n.se attn &sysppage\n.rm\n.im attn\n.$resetdoc\n.pa\n.rm * NOSAVE NOSAVE\n.se input &sysppage\n.rm\n.im input\n.$resetdoc\n.pa\n.rm * NOSAVE NOSAVE\n.se jcl &sysppage\n.rm\n.im jcl\n.$resetdoc\n.pa\n.rm * NOSAVE NOSAVE\n.se messages &sysppage\n.rm\n.im messages\n.$resetdoc\n.pa\n.rm * NOSAVE NOSAVE\n.se comparison &sysppage\n.rm\n.im compare\n.$resetdoc\n.pa\n.rm * NOSAVE NOSAVE\n.se index &sysppage\n.rm\n.im index\n.sr sample 'A-1'\n./ ADD NAME=MESSAGES 0100-19106-19106-2244-01015-01015-00000-MZAPFB  17\nVI. \u00acMESSAGES\n.in 5\n.fo all l\n.sp 1\nExcept for prompting, listing of input,\nmodule/csect/control block dumps, and debug output,\nall messages produced by MZAP have a common format:\n.in 15\n.sp 2\nMZPfnnabtext\n.in 5\n.sp 1\nWhere f identifies the functional area:\n.in 18\n.hi 3\n.sp 1\n0 \u00accommon\n.br\n1 \u00acinitialization\n.br\n2 \u00accontrol card scan\n.br\nH \u00acHELP\n.br\nD \u00acDEBUG\n.br\n3 \u00acCDE search\n.br\n4 \u00acESD processing and module/csect/location listing\n.br\n5 \u00acdump processing\n.br\n6 \u00acVER/REP processing\n.br\n7 \u00acfinal housekeeping, reinitialization, and termination\n.hi 0\n.sp 1\n.in 10\nnn is a decimal message number within function\n.sp 1\na \u00acis an action indicator:\nA if action required, I otherwise.\n.in 5\n.sp 2\nWhen a message relates to a specific input statement and\ndoes not immediately follow the statement,\nthe message text will normally begin with the\n5 digit sequence number assigned when that statement was read.\n.in 0\n.hi 0\n.pa\n.ce on\nCommon Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________\n.ce off\n.hi 6\n.sp 3\n>\b|\n.br\nsssss>\n.br\nsssss>\b|\n.br\nsssss\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acInput required from the terminal, 2260, or 3270.\n.sp 2\nEH?>\n.br\nEH?>\b|\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAttention mode is in effect.\nKey in attention input or terminated attention mode\nwith a null line.\n.sp 2\nMZP001I I/O ERROR ON 2260 - USE CONSOLE\n.br\nMZP001I I/O ERROR ON 3270 - USE CONSOLE\n.in 10\nROUTCDE: 1,10,11\n.br\nDESC: \u00ac\u00ac\u00ac1\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acUnrecoverable I/O error on the CRT.\nInteractive I/O will be done via the WTO/WTOR/MODIFY interface.\n.sp 2\nMZP0002I $HELP: $HOLD|$AUTO CON STOP $PAGE|$HALFAST|$FAST|$SLOW\n.br\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither HELP, $HELP or an invalid attention was entered.\nThe valid attention messages are listed,\nwith mutually exclusive messages separated by logical OR (|).\n.sp 2\nMZP0003A\n.br\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac2\n.br\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00acInput required via REPLY.\n.sp 2\nsssss text\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac7\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acListing of user's input.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated text was read and assigned the sequence number\nsssss.\nThe output is to SYSPRINT, terminal (if TSO CRT), or CRT (if assigned).\nIf the CONSOLE option is in effect, no CRT is assigned,\nand MZAP is in batch, a WTO is used.\n.pa\n.ce on\nInitialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________________\n.ce off\n.sp 2\n.in 0\n.hi 6\n.sp 2\nMZP100I MOREZAP VERSION mm/dd/yy hh.mm STARTING\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac6\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP has been invoked.\nInitialization status and error messages may follow.\n.sp 2\nMZP101I UNAUTHORIZED CPU FOR MZAP\n.in 10\nROUTCDE: 1,9,11\n.br\nDESC: \u00ac\u00ac\u00ac1\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP is not running on the machine it was destributed for;\nif you wish to use MZAP, order a separate copy for each CPU\non which it is to be used.\n.sp 2\nMZP102I SYSPRINT CARD MISSING - OUTPUT ON CONSOLE\n.br\nMZP102I SYSPRINT CARD MISSING - OUTPUT ON TERMINAL\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac7\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo SYSPRINT DD card is present, or, if TSO,\nno suitable ALLOC was done for SYSPRINT.\nOutput will be via TPUT, if TSO,\nto the CRT in batch,\nand to the console via WTO if there is no CRT\nassigned in batch.\n.sp 2\nMZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE\n.br\nMZP103I SYSIN DD CARD MISSING - INPUT FROM KEYBOARD\nMZP103I SYSIN DD CARD MISSING - INPUT FROM TERMINAL\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac7\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo appropriate ALLOC(TSO) or DD card for SYSIN.\nInput will be via TPUT for TSO;\nfor batch, input will be from the keyboard of the\nCRT, if one is assigned;\notherwise, input will be via REPLY to WTOR.\n.sp 2\nMZP104I SYSNUC MISSING OR INVALID\n.in 10\nROUTCDE: 9,10,11\n.br\nDESC: \u00ac\u00ac\u00ac6\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither there is no appropriate ALLOC(TSO) or DD card\nfor SYSNUC, or the DSNAME is not SYS1.NUCLEUS,\nor it is not located on the IPL volume,\nor the member name, IEANUC0x, is missing or is not the\nnucleus most recently IPLed.\n.sp 2\nMZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED\n.in 10\nROUTCDE: 10,11\n.br\nDESC: \u00ac\u00ac\u00ac7,8,9\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn  ALLOC(TSO) or DD card exists for a graphics device\nother than a 960 byte local 2260 or a 1980 byte local 3277.\n2250, 2280, etc., are all unsupported, as are all remote CRTs.\nSorry 'bout that!\n.in 0\n.hi 0\n.pa\n.ce on\nInput Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n\nNOTE: NOGO\b\b\b\b____ switch will be set for all MZP2 messages.\n.ce off\n.sp 2\n.in 0\n.hi 6\nMZP201I STATEMENT MISPLACED\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acVERIFY, REPLACE, POINT, etc. statement not\nin the range of NAME statement.\n.in 0\n.sp 2\nMZP202I INVALID OPCODE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe first non-blank column of the input statement\ndoes not contain a valid MZAP opcode, or the opcode is\ninvalid but has restrictions on its use.\nFor example, this message is produced if a GO statement\nis present in SYSIN.\n.sp 2\nMZP203I DEVICE NOT FOUND\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn input statement, such a UCB, specified as\ndevice address which was not present in any UCB.\n.sp 2\nMZP204I INVALID STATEMENT\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA syntax error is present in an input statement.\nA logical OR (|) will be displaYED BELOW THE COLUMN\nAT WHICH THE ERROR WAS DETECTED.\nFor an omitted operand, this will bee the end of the statement.\nFor an invalid negative hex operand,\nthis will be the end of the operand,\nnot\b\b\b___ under the hyphen.\n.sp 2\nMZP205I NOT A VALID CONSOLE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a UCMID higher than the number of consoles\nspecified in the system,\nhe specified a unit (cuu) which is not defined as\nan operators' console.\n.sp 2\nMZP206I NOT MCS\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn operand was specified on a UCM statement\nwhich is only valid for a system with the MCS\n(Multiple Console Support) option.\n.sp 2\nMZP207I HARDCPY=SYSLOG - NO UCM\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe statement UCM HARDCOPY is only valid if\na console device, rather than SYSLOG, is assigned the\nSYSLOG function.\n.sp 2\nMZP208I CONSOLE NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a console which is ONLINE or\nOFFLINE, rather than in CONSOLE status.\n.sp 2\nMZP209I NOT SMF\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an input statement, such as SMCA,\nwhich is only valid if the system is defined with\nthe SMF (System Management Facility) option.\n.sp 2\nMZP210I KEY xxxxxxxx?\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave a KEY statement with an invalid or\nomitted operand.\nHe must reply with a valid key,\nconsisting of a scrambled version\nof the displayed hexadecimal number.\nIf you don't know the magic number,\nsee your installation systems programmer for an explanation of why\nyou are not allowed to use this program!\n.sp 2\nMZP211I INVALID KEY\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an invalid reply to MZP210I,\nor supplied an invalid operand on a KEY statement.\nThis message will be followed by MZP210I.\n.sp 2\nMZP212I TCAM IS NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\nsuch as AVT, which is only valid while TCAM is active.\n.sp 2\nMZP213I TSO IS NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\nsuch as TSCVT, which is only valid while TSO is active.\n.sp 2\nMZP214I HASP IS NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\nsuch as HCT, which is only valid while HASP is active.\n.sp 2\nMZP215I NAME NOT IN BLDL LIST\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac IThe user has supplied a BLDL statement which\nspecifies a module not found in the BLDL list(s)\nused in the current IPL.\nAn alternative explanation is that, since the latest IPL,\nthe appropriate BLDL entry has been REPed to another name.\n.hi 0\n.in 0\n.pa\n.ce on\nHELP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n.ce off\n.hi 6\n.sp 2\nMZPH01I ALL\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of all command names is in effect.\nThis message will remain on line 0 of the CRT\nuntil the display is complete;\nit will not appear on the console or SYSPRINT.\n.sp 2\nMZPH01I cmd\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of the operands of the designated command\nis in effect.\nSee MZPH01I ALL.\n.sp 2\nMZPH02I USE HELP <cmd> FOR OPERANDS OF <cmd>\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis is the first line of output for HELP ALL.\nIf a supported CRT is assigned (960 byte local 2260,\n1920 byte 3277),\nor if MZAP is being called from TSO,\nthis  will be followed by an MZP002I message;\nenter any desired attention messages and then\nterminate attention mode with a null line.\n.sp 2\nMZPH03I OPCODE cmd\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated opcode may be used in input statements.\n.sp 2\nMZPH04I INVALID OPCODE - HELP ALL FORCED\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe operand used for HELP was invalid,\nand will be ignored.\nA list of valid opcodes will be displayed.\n.sp 2\nMZPH05I OPERAND text\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe text listed is part of a description of\nthe operands of the command for which HELP was requested.\n.hi 0\n.in 0\n.pa\n.ce on\nDEBUG Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n.ce off\n.sp 2\n.li 1\nMZPD01I VER/REP SNAP. SW=xx,xx,xx,xx\n.sp 1\n.in 10\nA phase of MOREZAP has completed processing.\nSW1-SW4 had the values, in hex, indicated in the message.\nA set of messages, described below,\nwill be written for each of the MZAP control blocks\nwhich have been constructed;\nfollowing this, the next phase will be called.\nThese messages are at least two lines, and include the following:\n.in 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=xx: tttttttt NXT: nnnnnn LINE: ##### text\n                                      FLG: ff\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where a is the 6 hex digit virtual address of the control block\ndisplayed.\n.in 26\n.hi 2\n.sp 1\n x is the two hex digit type.\n.sp 1\n t is a descrition of the type.\n.sp 1\n n is the 6 hex digit address\nof the next MZAP control block.\n.sp 1\n # is the sequence number aSSIGNED TO THE INPUT STATEMENT\nwhich generated the control block.\n.sp 1\n f is the two hex digit flag field.\n.hi 0\n.in 0\n.sp 2\n.nf\n.li 3\naaaaaa TYPE=00: VER      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(d\n                                      FLG: ff,ff ABS: xxxxxx\n                                      vvvv,vvvv,vvvv,vvvvv,vvvv,vvvv,vvv\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where @ is the 6 hex digit relative address of the data to be verified.\n.in 26\n.hi 2\n.sp 1\n m is the hex length-1 (i.e., as it would be used in a CLC).\n.sp 1\n d is the decimal data length.\n.sp 1\n x is the 6 digit absolute virtual address of the data to be  verified,\nor is 0 if not yet known.\n.sp 1\n v is the data to be used for verification,\nor the data which failed to pass verification.\n.sp 2\n.hi 0\n.in 0\n.nf\n.li 3\naaaaaa TYPE=01: REP      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(d\n                                      FLG: ff,ff ABS: xxxxxx\n                                      rrrr,rrrr,rrrr,rrrrr,rrrr,rrrr,rrr\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the data to be replaced.\n.in 26\n.hi 2\n.sp 1\n m is the hex length-1 (i.e., as it would be used in a MVC).\n.sp 1\n d is the decimal data length.\n.sp 1\n x is the 6 digit absolute virtual address of the data to be  replaced,\nor is 0 if not yet known.\n.sp 1\n r is the data to replace the data at @,\nas relocated.\n.sp 2\n.hi 0\n.in 0\n.nf\n.li 2\naaaaaa TYPE=02: BASE     NXT: nnnnnn LINE: ##### LOC: bbbbbb\n                                      FLG: ff\n.sp 1\n.fi l\n.in 20\n.hi 8\n Where b is the 6 hex digit hex number to be subtraacted from\nthe relative address of each statement within\nthe scope of this BASE.\n.hi 0\n.in 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=03: INDEX    NXT: nnnnnn LINE: ##### LOC: xxxxxx IXNAME: eee\n                                      FLG: ff\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where x is the 6 hex digit hex number,\nas far as currently resolved,\nto be used as a relocation factor for each\nstatement within the scope of this INDEX.\n.in 26\n.hi 2\n.sp 1\n e is the csect or entry point within the module\nwhose address is resolved as x.\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=04: HINDEX   NXT: nnnnnn LINE: ##### LOC: xxxxxx\n                                      FLG: ff\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where x is the 6 hex digit number to be added to\nthe relative address of each statement within the scope\nof this INDEX.\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 3\naaaaaa TYPE=05: NAME     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where x is the module or csect location,\nas currently resolved.\n.sp 1\n.in 26\n.hi 2\n m is the module name.\n.sp 1\n r is the CDE (OS/MVT, OS/VS2) or RB (OS/MFT, OS/VS1) address,\nif known, else 0.\nThis field is always 0 for the nucleus.\n.sp 1\n s is the module or csect size, as currently resolved.\nThe module size for the nucleus is taken from  CVTNUCB.\n.sp 1\n c is the csect name, if specified.\n.sp 1\n y is the 6 hex digit address of the DCB for the library\ncontaing the load module.\n.sp 1\n d is the ddname of the library.\n.sp 1\n z is the 8 hex digit System Status Information\n(See the SRL for Services Aids).\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=06: DUMP     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.in 20\n.hi 8\n.sp 1\nWhere all fields are as explained for 05 (NAME).\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=07: DUMPA    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.in 20\n.hi 8\n.sp 1\nWhere all fields are as explained for 05 (NAME).\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=08: DUMPT    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.in 20\n.hi 8\n.sp 1\nWhere all fields are as explained for 05 (NAME).\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=09: HDUMP    NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n                                      FLG: ff,ff ABS: xxxxxx\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the\ndata to be dumped.\n.in 26\n.hi 2\n.sp 1\n s is the 6 hex digit length of the area to be dumped.\n.sp 1\n x is the 6 hex digit absolute virtual address of the data to be dumped,\nor is 0 if not yet know.\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=0A: HDUMPA   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n                                      FLG: ff,ff ABS: xxxxxx\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the\ndata to be dumped.\n.in 26\n.hi 2\n.sp 1\n s is the 6 hex digit length of the area to be dumped.\n.sp 1\n x is the 6 hex digit absolute virtual address of the data to be dumped,\nor is 0 if not yet know.\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=0B: HDUMPT   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n                                      FLG: ff,ff ABS: xxxxxx\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the\ndata to be dumped.\n.in 26\n.hi 2\n.sp 1\n s is the 6 hex digit length of the area to be dumped.\n.sp 1\n x is the 6 hex digit absolute virtual address of the data to be dumped,\nor is 0 if not yet know.\n.in 0\n.hi 0\n.sp 2\n.nf\n.li 2\naaaaaa TYPE=0C: LIB      NXT: nnnnnn LINE: ##### DCB: xxxxxx DDNAME: ddd\n                                      FLG: ff\n.fi l\n.in 20\n.hi 8\n Where x is the 6 hex digit absolute virtual address of the DCB,\nor is 0 if LIB AUTO is in effect.\n.in 26\n.hi 2\n.sp 1\n d is the ddname specified.\n.in 0\n.hi 0\n.nf\n.sp 2\n.li 2\naaaaaa TYPE=0D: <- N *   NXT: nnnnnn LINE: ##### NDX: @@@@@@   LENB: sss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx    IXB: iii\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where @ is the absolute virtual index in effect at the time\nthe address, length, and index were saved.\n.in 26\n.hi 2\n.sp 1\n s is the length of the module, csect, or control block.\n.sp 1\n p is the address of the 8 byte area in which the address,\nlength, and relative index are to be stored.\n.sp 1\n x is the absolute virtual address of the module, csect,\nor control block.\n.sp 1\n i is the relative index which was saved.\n.in 0\n.hi 0\n.nf\n.sp 2\n.li 2\naaaaaa TYPE=0E: MVC      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: (mm(\n                         DST: pppppp  FLG: ff,ff ABS: xxxxxx\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the relative address of the data to be saved.\n.in 26\n.hi 2\n.sp 1\n m is the hex length-1 (i.e., as it would be used in an MVC).\n.sp 1\n d is the decimal length.\n.sp 1\n p is the address of the area in which the data is to be saved.\n.sp 1\n x is the absolute virtual address of the data to be saved,\nor 0 if not known.\n.in 0\n.hi 0\n.nf\n.sp 2\n.li 2\naaaaaa TYPE=0F: <- N PTR NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the relative address of the pointer to\nthe desired control block.\n.in 26\n.hi 2\n.sp 1\n s is the length of the control block pointed to.\n.sp 1\n p is the address of the 8 byte area where\nthe address, length, and relative index are to be stored.\n.sp 1\n x is the absolute virtual address of the desired control block,\nor 0 if not known.\n.sp 1\n i is the relative index.\n.in 0\n.hi 0\n.nf\n.sp 2\n.li 2\naaaaaa TYPE=10: -> PTR   NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the relative address of the pointer to\nthe desired control block.\n.in 26\n.hi 2\n.sp 1\n s is the length of the control block pointed to.\n.sp 1\n p is the absolute virtual address of the pointer to\nthe desired control block.\n.sp 1\n x is the absolute virtual address of the desired control block,\nor 0 if not known.\n.sp 1\n i is the relative index.\n.in 0\n.hi 0\n.nf\n.sp 2\n.li 2\naaaaaa TYPE=11: -> REF N NXT: nnnnnn LINE: ##### NDX: @@@@@@  LENB: ssss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where @ is the absolute virtual INDEX in effect when\nthe address, size, and index were restored.\n.in 26\n.hi 2\n.sp 1\n s is the length of the module, csect, or control block.\n.sp 1\n p is the address of the 8 byte area from which\nthe address, size, and relative index were or are\nto be restored.\n.sp 1\n x is the absolute virtual adress of the module, csect,\nor control block.\n.sp 1\n i is the relative index.\n.in 0\n.hi 0\n.pa\n.ce on\nESD Messages\b\b\b\b\b\b\b\b\b\b\b\b____________\n.ce off\n.sp 2\nMZP401I mmmmmmmm DIRECTORY I/O ERROR\n.sp 1\n.in 6\nA return code of 8 was received from the BLDL macro,\nindicating an I/O error in the directory\nwhile trying to locate module m.\n.in 0\n.sp 2\nMZP402I mmmmmmmm NOT FOUND\n.sp 1\n.in 6\nA return code of 4 was received from the BLDL macro,\nindicating that module m was not found\nin the directory of any of the relevant libraries.\nAdd a DD card for the necessary library,\nand if required, add a LIB statement.\n.in 0\n.sp 2\nMZP403I mmmmmmmm NOT SCTR\n.in 6\n.sp 1\nA load module was found to be in block load format\nwhen scatter format was expected.\nEither the specified module was the nucleus,\nor it was loaded with more than one extent;\nin either case, the module found in the library\ncannot be the proper member, since it does not\nhave the SCTR attribute.\n.in 0\n.sp 2\nMZP404I mmmmmmmm NO ESD\n.in 6\n.sp 1\nThe first record in load module m, or the first\nrecord following the SYM records,\nis not a CESD record.\nRun IMBLIST (LISTLOAD) on the module,\nand call your friendly neighbor IBM CE\n- the linkage editor has just awarded you third prize,\nand there are only two contestants.\n.in 0\n.sp 2\nMZP405I mmmmmmmm NO CON\n.in 6\n.sp 1\nA reccord follows a CESD record which is not a control,\nIDR, SCTR, or CESD record.\nCall (but keep it clean) your friendly, neighborhood CE,\nas for MZP404I.\n.in 0\n.sp 2\nMZP406I mmmmmmmm MISSING CESD\n.in 6\n.sp 1\nA SCTR format record has fewer CESD records than expected;\nthe BLDL entry may have an incorrect table length or\nthere may be a missing or incorrect CESD record.\n.sp 1\nBefore complaining to IBM, list the module with IMBLIST and\nverify that the problem is in the load module;\nthis message could conceivably be caused by an error\nin MZAP, in which case the complaint should come to me\nrather than IBM.\nIf you received MZAP as an IUP from IBM,\nrather than directly from me,\nthen they get the complaint regardless\n- but no doubt I'll hear from them.\n.in 0\n.sp 2\nMZP407I mmmmmmmm MISSING SC/TR\n.in 6\n.sp 1\nA record type other than hex 10 was found while\nreading in the scatter/translate table.\nSee the remarks for MZP404I and MZP406I.\n.in 0\n.sp 2\nMZP410I sssss NAME: mmmmmmmm NOT LOADED\n.sp 1\n.in 6\nModule m was not found in the RERP, RAM, RSVC,\nor TSLPA linkpack queues, nor in the or selected JPAQ.\n.in 0\n.sp 2\nMZP411I sssss NAME: mmmmmmmm NOT IN DIRECTORY\n.in 6\n.sp 1\n Module m was not found in the proper library.\nUsually accompanied by message MZP401I or MZP402I.\n.in 0\n.sp 2\nMZP412I sssss NAME: mmmmmmmm cccccccc NOT FOUND\n.in 6\n.sp 1\nCsect c does not exist in module m,\nor an error exists in the format of load module m.\n.in 0\n.sp 2\nMZP413I sssss NAME: mmmmmmmm cccccccc ABS:  aaaaaa:aaaaaa\n.in 6\n.sp 1\nThe designated module or csect exists and was loaded at\nthe listed absolute virtual addresses.\n.in 0\n.sp 2\nMZP414I sssss ENTRY eeeeeeee NOT FOUND\n.in 6\n.sp 1\nEntry point e was either specified in an INDEX statement\nor implied by a control block statement:\nCVT, UCB, etc.;\nit could not be found in the load module's CESD.\n.in 0\n.sp 2\nMZP415I sssss ENTRY eeeeeeee ABS: aaaaaa\n.in 6\n.sp 1\nEntry point e is at the specified absolute virtual address.\n.in 0\n.sp 2\nMZP416I sssss REL: rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n.in 6\n.sp 1\nStatement number s specified either:\na relative address beyond the module or csect;\na negative displacement beyond the control block prefix;\nor an excessive length for a VER, REP, or DUMP.\nThe range of addresses given is listed as both relative and\nabsolute virtual addresses.\n.in 0\n.sp 2\nMZP420I sssss INVALID POINTER AT aaaaaa\n.in 6\n.sp 1\nA POINT or SETPTR statement refers to a halfword which is negative.\nSince the pointer type was specified as Y (15),\nthis is invalid.\n.in 0\n.sp 2\nMZP421I sssss REF NOT - POINT INVALID\n.in 6\n.sp 1\nA POINT REF statement refers to a ref digit for which either:\n.hi 3\n.in 8\n 1. There is no preceeding SETPTR.\n 2. The last preceeding SETPTR was not successfully processed.\n.hi 0\n.in 0\n.sp 2\nMZP422I sssss INDEX: iiiiii LIMITS: aaaaaa:aaaaaa\n.in 6\n.sp 1\nA POINT statement refers to the designated absolute virtual address, i.\nThe limits are for the entire area pointed to,\nincluding the prefix, if any.\n.in 0\n.pa\n.ce on\nDUMP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n.ce off\n.sp 2\n.fi l\nMZP501I sssss \u00ddACCESSED VIA\u00a8 m \u00ddc\u00a8\n\u00ddINDEX: e\u00a8 HEX/EBCDIC\u00dd/OPCODE\u00a8 DUMP\n.in 6\n.sp 1\nThis message is used as a subtile for all dumps.\nThe clause \"INDEX: eeeeeeee\" is present if an entry point\nwithin the containing csect is specified,\neither explicitly or implicitly.\nThe clause \"ACCESSED VIA\" is present if the limits\nof the dump are relative to a location\nfound with a POINT statement;\nany \"INDEX\" clause which would otherwise be supplied is suppressed,\nin order not to exceed the line size of the 2260 or 3270.\n.in 0\n.hi 0\n.pa\n.ce daTA\nVER/REP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b________________\n.ce off\n.sp 2\nMZP601I sssss NAME mmmmmmmm cccccccc\n.in 6\nOne or more errors have been found relating to the specified module.\nAddition messages will be displayed to diagnose the exact errors.\n.in 0\n.sp 2\nMZP602I sssss rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n.in 6\n.sp 1\nThe start or end address of the verify or replace is outside the\nbounds of the module or csect.\n.in 0\n.sp 2\nMZP603I sssss VERIFY FAILURE AT: rrrrrr ABS :aaaaaa\n.in 6\n.sp 1\nThe data in storage did not match the VERIFY data.\nThis message is always accompanied by MZP604I.\n.in 0\n.sp 2\nMZP604I sssss ACTUAL CONTENT IS xxxx,xxxx,...\n.in 6\n.sp 1\nThis message immediately follows MZP603I.\n.in 0\n.sp 2\nMZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL\n.in 6\n.sp 1\nNo errors were detected.\nAll REP operations, if any, were performed.\n.in 0\n.sp 2\nMZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED\n.in 6\n.sp 1\nAn error was detected.\nNo REP operation is performed.\nThe user should correct the errors indicated\nin the preceeding error messages.\n.in 0\n.pa\n.in 12\n.nf\nFinal Housekeeping and Reinitialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n.fo\n.sp 2\nMZP701I EOD\n.in 6\n.sp 1\nEither an end-of-file occurred on SYSIN or a RESET EOD\nstatement was read.\nAll input read prior to that point has been processed.\n.in 0\n./ ADD NAME=MZAP     0100-19106-19106-2244-02246-02246-00000-MZAPFB  17\n.ss\n.ll 70\n.pl 60\n.tt //METZ'S OWN RELIABLE EXTENDED ZAP (MOREZAP)//\n.bt //- % -//\n.ce data\nMOREZAP\n\n- TABLE OF CONTENTS -\n.end\n.nj\n.sp 2\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acPage\b\b\b\b____\n.sp 1\n \u00ac\u00acI.  INTRODUCTION \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac2\n.sp 1\n \u00acII.  SYSTEM and INPUT/OUTPUT REQUIREMENTS \u00ac\u00ac3\n.sp 1\n III.  Attention/MODIFY Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac6\n.sp 1\n \u00acIV.  INPUT Statements \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac7\n.sp 1\n \u00ac\u00acV.  JCL \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac19\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acExample 1 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac20\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acExample 2 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac20\n.sp 1\n \u00acVI. \u00acMESSAGES\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acGeneral \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac21\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acCommon Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac22\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acInitialization Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac23\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acInput Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac25\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acHELP Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac28\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDEBUG Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac29\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acESD Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac35\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDUMP Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac38\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acVER/REP Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac39\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acFinal Housekeeping and\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acReinitialization Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac40\n.sp 1\n VII. \u00acMZAP/CZAP Comparison \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac41\n.sp 1\nVIII. \u00acIndex to Input Statements. \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac43\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acSample Output \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acA-1\n.pa\nI. \u00ac\u00acINTRODUCTION\n.sp\n.in 5\n.fi l\nThis program is intendended to provide, for MVT,\nthe same function as the IBM service aid COREZAP0 (360S-01114-00),\nreferred to here as CZAP;\nthat is, to apply patches to programs in main storage.\nSeveral of the control cards have an altered syntax in order\nto permit names to be specified without framing characters.\nThere is a chart at the end of this writeup which illustrates\nthe known differences.\n.sp 1\nMZAP is organized as an overlay structure.\nInformation is passed between overlays through a set of switches\nand through a chain of control of control blocks constructed\nas a result of the input statements read.\n.pa\n.in 0\nII. SYSTEM and INPUT/OUTPUT REQUIREMENTS\n.sp 1\n.in 5\nMZAP requires that the control program be OS/MVT or OS/65MP;\nOS/VS2 Release 1.6 support is planned in the near future;\nand provision has been made for easily adding MFT or VS1 support\nwith only minor modifications.\nNo optional OS facilities need be generated,\nother than normal device support (for the 2260,\nthis must be explicitly requested via the GRAPHICS macro;\nfor the 3270, this must be requested via the BTAM option\nof the DATAMGT macro; for all sequential and DA devices\nthis support is automatic).\nIn particular, MZAP does not use SVC 54 to get into key 0,\nand hence ISAM is not required.\nWhen VS support is available,\nMZAP will be required to run only from an authorized library.\n.sp 1\nMZAP is intended to obtain input from multiple sources:\na data set called SYSIN,\na TSO terminal,\na local crt, or an operator's console.\nIf MZAP is invoked from a TSO terminal,\ninput can be supplied only form SYSIN or the terminal;\notherwise a DD statement may be supplied allocating a\n960 byte (12*80) local 2260 with line addressing and\nnon-destructive cursor\nor a 1920 byte (24*80) EBCDIC local 3270,\nwhich may be used for both input and output.\nInput, output, and attention from an operators\nconsole are performed via REPLY,\nWTO/WTOR, and MODIFY;\nthey are normally inactive if a CRT is assigned,\nbut an uncorrectable I/O error on the CRT will\nforce transfer of these functions (the operator may\nperform a MODIFY even when the CRT is operational).\n.sp 1\nInput is normally from a sequential data set,\nSYSIN. If SYSIN is not defined or is a DD DUMMY,\n\"console input mode\" is set.\nThis mode is also set by a CONSOLE statement read\nfrom SYSIN or by a MODIFY or attention with the text CONSOLE.\nInput is always translated to upper case.\nConsole mode is terminated, and control reverted to SYSIN,\nby an END statement;\nthis is permitted only when SYSIN is assigned.\n.sp 1\nOutput is normally to SYSPRINT.\nIf a 2260 or 3270 is assigned,\nall output except page headings will be displayed on the CRT;\nif in console input mode with no CRT assigned,\nthis output will be displayed via WTO/TPUT.\n.sp 1\nWhen a TSO terminal or a CRT is used,\nit is in one of two states: normal and attention.\nIn normal state, input is solicited in a device-dependent fashion:\n.in 10\n.sp 1\n.hi 12\n2260 local:\nBlanking the entry line and displaying an SMI;\nthe user keys in a command and depresses SHIFT and ENTER simultaneously.\n.sp 1\n3270 local:\nwriting a statement number, Blanking an entry line,\nand positioning the cursor;\nthe user enters a command and depresses ENTER.\n.sp 1\n2260 TSO: \u00ac\nWriting a statement number followed by an SMI;\nthe user enters a command and SHIFT/ENTER.\n.sp 1\n3270 TSO: \u00ac\nwriting a statement number and positioning the cursor;\nthe user enters a command and ENTER.\n.sp 1\nTSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nWriting a statement number;\nthe user enters a command and depresses RETURN, EOB, etc.,\naccording to the type of terminal.\n.sp 2\n.hi 0\n.in 5\nAttention state is entered in a device-dependent fashion:\n.in 10\n.hi 12\n.sp 1\nLocal 2260:\nSHIFT/ENTER within 1.5 seconds after\nline 11(bottom line) is updated;\n.sp 1\nLocal 3270:\nENTER or PA1 any time the keyboard is\nunlocked;\n.sp 1\nTSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nthe technique depends on type of terminal,\nTSO/TCAM generation,\nand the users last TERM command - it may be BREAK or\nmay be a simulated attention.\nAttention state is also entered automatically when in HOLD mode\n(see below).\n.sp 1\n.hi 0\n.in 5\nWhen in attention state,\nthe user will be prompted to key in an attention message by\nblanking an entry line and displaying \"EH ? \" followed by an SMI (>\b|)\n- a greater than sign (>) will be used on other than a 2260.\nThe prompt will be repeated after each attention message,\nallowing the user to key in as many messages as he wishes;\nattention state will be reset when he enters a null line\n(SHIFT/ENTER, SHIFT, CR, etc. with no preceeding text).\n.sp 2\n.hi 0\n.in 5\n.sp 2\nOutput to the CRT/terminal may be done in two modes:\nAUTO and HOLD;\noutput may be at any of four speeds:\nSLOW, HALFAST, FAST, or PAGE.\nIn AUTO mode, output occurs continously until input is\nrequired or the user enters attention state;\nin HOLD mode attention state is entered after each write\nand the user must enter a null line to continue.\n.sp 2\nOutput to a CRT will always be in full screen mode;\nthe oldest line on the screen will be indicated by a logical or\n(|).\nThe write will take place every time one, two, four, or twelve lines\n(1,4,8, or 24 for 3270) have been written,\ndepending on the speed option.\nIn PAGE mode, one line (two if a dump is in progress)\nwill be reserved on the screen,\nresulting in a net display of 11 (10 if a dump) lines per 2260 screen\nand 23 (22 if a dump) per 3270 screen.\nRegardless of the speed,\nthe current contents of the buffer will be written prior to\nsoliciting input or additional attention messages.\n.sp 2\nWhen a CRT is not assigned,\noperator input in batch (non-TSO) will be solicited by a WTOR;\nattention messages must be entered by giving the command\n\"MODIFY id,msg\" where id is the jobname or START id and\nmsg is the text of the attention message.\nSee section V for a description of START requirements.\n.pa\n.in 0\nIII. Attention/MODIFY messages\n.in 5\n.sp 1\nThe following attention messages are allowed;\nthey may be in lower case since MZAP translates to upper case:\n.sp 2\n.in 10\n.hi 12\n$HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndisplay list of valid nonpriveleged attention messages.\nThis function is forced if an invalid attention message is entered.\n.sp 1\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nset console input mode\n.sp 1\nSTOP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nterminate dump or HELP\n.sp 1\n$HOLD \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nenter attention state after every write\n.sp 1\n.br\n$AUTO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nrestore normal mode after $HOLD\n.sp 1\n$SLOW \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 12 writes/2260 screen, 24/3270.\nA write will occur for each output line.\n.sp 1\n$HALFAST \u00ac\u00ac\u00ac\ndo 6 writes/screen.\na write will occur for every 2 output lines(2260)\nor every 4 lines(3270)\n.sp 1\n$FAST \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 3 writes/screen.\nA write will occur for every 4 output lines(2260)\nor every 8 output lines(3270).\n.sp 1\n$PAGE \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 1 write/screen.\nIf a dump is in progress,\none line is reserved for the dump header.\nOne line is reserved as the entry line.\nA write will occur for every 10 or 11 output lines\n(3270: 22 or 23 output lines).\n.pa\n.hi 0\n.in 0\nIV. INPUT STATEMENTS\n.sp 1\n.in 5\nInput statements are of three types:\n.in 8\n.hi 4\n.sp 1\n1.)\nA statement with an asterisk (*) in column 1 is a column 1 is a comment.\n.sp 1\n2.)\nA blank card is a comment.\n.sp 1\n3.)\nAny other statement contains an opcode in the first non-blank column\n(normally column 1).\n.hi 0\n.in 5\n.sp 1\nFor the remainder of this section,\nthe term \"statement\" will be understood to apply only to non-comments.\n.sp 2\nEach opcode may require or permit operands;\nthe opcode must be followed by a blank unless the operand\nbegins with a period (.), hyphen (-), or equal sign (=).\n.sp 2\nA hex (hexadecimal) number is expressed as an even number\nof hexadecimal digits(0-9, A-F),\noptionally preceeded by an equal sign or hyphen.\nAn equal sign indicates that the value which follows\nis a number rather than a name;\na hyphen indicates a negative number and is only valid when\nspecifying a relative address;\nan equal sign may preceed any hex data.\n.sp 2\nA character string is expressed by enclosing the desired characters\nin apostrophes (');\nan apostrophe is represented by two consequtive apostrophes('').\nApostrophe is the only character which is doubled;\nin particular, an ampersand (&) is represented by a single\b\b\b\b\b\b______ a\nCharacter strings may be used wherever hex numbers are valid,\nand may be concatenated with hex data:\n=C1C2C3, C1C2'C', C1'B'C3 and ='ABC' all represent the same value.\n.sp 2\nThe following statements are accepted:\n.in 9\n.hi 13\n.sp 1\nKEY \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement is required if any REP statements are used.\nThe operand requirements may change for every release;\nthis is intended to prevent unauthorized use of MZAP.\nIt is recommended that each installation modify the\nrequirements for this opcode,\nto prevent unauthorized alteration of their system.\nThe operand requirements have been deliberately omitted\nfrom the writeup;\nthey will be made available only to a single\nindividual at each installation and he may select,\nat his own discretion,\nwho is authorized to modify resident code.\n.sp 2\nDEBUG \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThe switches and table entries used for communicating between\nphases of MZAP will be displayed after each phase completes processing.\n.in 9\n.hi 13\n.br\n.sp 2\nEND \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nConsole input mode will be terminated if a valid SYSIN data set\nwas specified;\notherwise END is an invalid opcode.\n.sp 2\nGO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nTurns off the NOGO switch if from CRT/terminal/console;\nGO is invalid from SYSIN.\n.sp 2\nRESET \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nCauses all control cards previously read to be processed.\nIf an operand of EOD is specified,\nno further input will be read;\notherwise NOGO and DEBUG will be reset and MZAP will\ncontinue reading input.\n.sp 2\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname\n.br\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname.jobstepname\n.br\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00actaskid\n.br\nJOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acprocname.taskid\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the job whose JPAQ is\nto be searched, prior to the TSLPA, RERP, RSVC, or RAM list queues.\nA related set of ZAPs must lie within a single job;\nonce a JOB card is accepted, it is invalid to supply\na new one without first supplying a RESET card.\nThis restriction was imposed to maintain compatability with\nthe planned OS/VS2 release 2 (MVS) support.\n.sp 2\n.ce data\nTHIS DESCRIPTION IS FOR PLANNING PURPOSES ONLY.\nTHE WRITEUP WILL BE AMENDED WHEN JOB IS AVAILABLE.\n.sp 2\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module or CSECT for\nthe VERIFYs, REPLACEs, and DUMPs which follow.\nThe name may be a load module name, a period (.),\nor either one followed by a CSECT name.\nIf the load module was scatter loaded,\na CSECT name is required.\nA period represents the nucleus specified as a member of\nthe dsname on SYSNUC,\nand is considered to be block loaded.\nThe load address will be added to the relative address\non each applicable statement (VER, DUMP, etc.)\nin the SCOPE of the NAME statement;\nthe length will be used to check that each relative address\nis within bounds.\n.sp 2\nAVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for the\nstatements which follow.\nThe AVT address is obtained from the CVT;\nthe opcode is invalid if TCAM is not active.\n.sp 2\nBLDL \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac name\nThis statement defines the module and CSECT for\nthe statements which follow.\nIt is invalid if the designated name does not\noccur in the resident BLDL list.\nThe length is set to include only the specified\nBLDL entry.\n.sp 2\nCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module,CSECT, and INDEX\nfor the statements which follow.\nAny location in the CSECT containing the CVT may be patched:\nthe locations should be given relative to the CVT.\nIt is equivalent, in MVT, to:\n.hi 0\n.in 25\n.nj\nNAME      .IEAQBK00\nINDEX     IEACVT\n.fi l\n.in 9\n.hi 13\n.sp 2\nGOVRFLB \u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only for OS/MVT and OS/VS2,\ndefines the module, CSECT, and INDEX for the statements which follow.\nAny location in the CSECT containing the main storage supervisor\nmay be patched;\nthe locations given should be relative to GOVRFLB.\nIt is equivalent to:\n.hi 0\n.in 25\n.br\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n.br\nINDEX \u00ac\u00ac\u00ac\u00acGOVRFLB\n.in 9\n.hi 13\n.sp 2\nHCT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for the HASP Control Table.\nIt is invalid if HASP is not active,\nor if there is no local modification to the HASP SVC to return\nthe HCT address in register 15.\n.sp 2\nIBMORG \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only for OS/MVT and OS/VS2,\ndefines the module and CSECT for the statements which follow.\nAny location in the SVC table may be patched;\nthe location given should be relative to the IBM portion of the table.\nIt is equivalent to:\n.hi 0\n.in 25\nName \u00ac\u00ac\u00ac\u00ac.IBMORG\n.in 9\n.hi 13\n.sp 2\nMSER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for\nthe statements which follow.\nAny location in the Master Scheduler Resident Data Area\nand in the Master Common Area may be patched.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEMSER\n.in 9\n.hi 13\n.sp 2\nQMRES \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement defines the module and CSECT for\nthe statements which follow.\nAny location in the Queue Manager Resident Data Area may be patched.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00acIEFJOB\n.in 9\n.hi 13\n.sp 2\nSCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only in OS/MVT and OS/VS2, defines the module, CSE\nfor the statements which follow.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IGC003\n.br\nINDEX \u00ac\u00ac\u00ac\u00acIEABEND\n.in 9\n.hi 13\n.sp 2\nSMCA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only if the system was generated with the SMF opti\nis used to define the module and CSECT for the statements which follow.\nWhile it is not actually a CSECT, nor is it in the nucleus,\nit may be patched as if it were.\n.in 9\n.hi 13\n.sp 2\n TACT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only in OS/MVT, defines the module, CSECT, and IND\nfor the statements which follow.\nAny location in the CSECT containing the permanent TCBs,\ntransient areas, and CVT amy be patched;\nthe location given should be relative to the\nTransient Area Control Table.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n.br\nINDEX \u00ac\u00ac\u00ac\u00acIEAQTAQ\n.in 9\n.hi 13\n.sp 2\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob\n.br\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob.step\n.br\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acid\n.br\nTCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acproc.id\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT,\nand INDEX for the statements which follow.\nAny location in the jobstep tcb of the specified job or\nstarted task may be patched:\naddresses shhould be given relative to the TCB.\nNote that floating-point registers are stored at a negative\ndisplacement.\n.sp 1\n\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acTHE TCB OPCODE IS DESCRIBED FOR PLANNING PURPOSES ONLY.\nTHE WRITEUP WILL BE AMENDED WHEN IT IS AVAILABLE.\n.sp 2\nTSCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid onlin with OS/MVT and OS/VS2,\nis used to define the module and CSECT for the statements which follow.\nIt is an invalid statement if TSO is not active.\nAny location in the Time Shareing Communications Vector Table\nmay be patched;\nlocations should be given relative to the TSCVT.\n.sp 2\nUCB=cuu\n.br\nUCB cuu \u00ac\u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX for th\nstatements which follow.\nAny location in the I/O Supervisor may be patched;\nthe location given should be relative to the specified UCB.\nIt is equivalent, in MVT, to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac.IEAQFX00\n.br\nINDEX \u00ac\u00ac\u00acucbloc\n.in 9\n.hi 13\n.sp 2\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acBASE\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acHARDCOPY\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMASTER\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMCS\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acPREFIX\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=xx\n.br\nUCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=cuu\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX\nfor the statements which follow.\nExcept for UCM BASE, the INDEX is set as an absolute address\nrather than an entrypoint name or relative address.\nHARDCOPY, MASTER, and MCS are only valid if the system was\ngenerated with the Multiple Console Support option.\nBASE, MCS, and PREFIX refer to UCM areas not related to\na specific console;\nUCM MASTER and HARDCOPY refer to the UCME for the console assigned to\nthe designated function;\nUCM ID=xx refers to the UCME whose ID (in decimal) is xx;\nand UCM UNIT=cuu refers to the UCME for the designated device.\nThey are equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEUCMC\n.br\nINDEX \u00ac\u00ac\u00ac\u00acIEECUCB (for BASE)\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acforced absolute address\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac(for other than BASE)\n.in 9\n.hi 13\n.sp 2\nUSERORG \u00ac\u00ac\u00ac\u00ac\u00ac\nThis statement, valid only for OS/MVT and OS/VS2,\ndefines the module, CSECT, and INDEX\nfor the statements which follow.\nAny location in the SVC table may be patched;\nthe location given should be relative to the user portion\nof the table.\nIt is equivalent to:\n.hi 0\n.in 25\nNAME \u00ac\u00ac\u00ac\u00ac\u00ac.IBMORG\n.br\nINDEX \u00ac\u00ac\u00ac\u00acUSERORG\n.in 9\n.hi 13\n.sp 2\nBASE=xx \u00ac\u00ac\u00ac\u00ac\u00ac\n.br\nBASE xx \u00ac\u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be subtracted\nfrom the address given in a VER or REP.\nIt is normally the relative address of the CSECT,\nas printed in the assembly listing.\nThe effect of this statement is retained until\nthe next statement containing or implying a name\n(DUMP, NAME, INDEX, CVT, UCB, ...).\nIf a previous BASE is in effect,\nthe statement has a cummulative effect:\nthe amount subtracted is the sum of the BASEs.\n.sp 2\nINDEX=xx \u00ac\u00ac\u00ac\u00ac\n.br\nINDEX xx \u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to\nthe address given in a VER, REP, DUMP, etc.\nIt is normally the relative address of a CSECT from a\nlink-edit listing.\nThe effect of this statement is retained until the next statement\ncontaining or implying a name\n(CVT, DUMP, INDEX, NAME, etc.);\nall previous BASE or INDEX specifications remain in effect.\n.sp 2\nINDEX \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to the\naddress given in a VER, REP, DUMP, etc.\nIt resets all previous BASE and INDEX specifications.\nThe value used is the address of the CSECT or entry point specified,\nadjusted by the CSECT or module address of the preceeding name statement\n.sp 2\nLIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acAUTO\n.br\nLIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acddname\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to specify the ddname of the\ndata set to be used to resolve CSECT names (other than nucleus CSECTs)\nin statements which follow.\nIf AUTO is specified, modules found in TSLPA are assumed to be on CMDLIB\nmodules whose names begin with IFG or IG are assumed to be on SVCLIB;\nall other modules are assumed to be on LINKLIB.\nAUTO is initially in effect,\nand remains in effect untill overrriden by an LIB statement.\n.sp 2\nVERIFY \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nVER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nV \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dr\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to prevent inadvertently\naltering the wrong location.\nThe data at the specified relative address, r, adjusted by\nthe address from the NAME statement and any BASE or INDEX in effect,\nis compared to the specified data,\nand, if a match does not occur,\na switch (called the NOGO switch) is set,\ncausing all REPs between the preceeding RESET (or beginning of input)\nand the following RESET (or end of data) to be suppressed.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe location must be specified as 2, 4, or 6 hex digits,\npreceeded (if negative) by a hyphen (-).\nThe data may be specified as:\n.in 25\n.hi 5\n.sp 1\n1). an even number of hex digits\n.sp 1\n2). a character string enclosed in apostrophes (');\nan apostrophe is represented by 2 apostrophes\n(i.e., \"CAN'T\" is entered as \"CAN''T\").\n.sp 1\n3). any combination of 1). and 2).\n.sp 1\n4). any of the above,\nseparated by commas (,).\n.in 9\n.hi 13\n.sp 2\nREPLACE \u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nREP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\nR \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to replace data\nat the specified relative location, r, as adjusted by the NAME,\nBASE, and INDEX statements in effect.\nSee VER for a description of formats.\nThe effect of a REP is suppressed if the NOGO switch is set,\neither because of a REP failure (see REP) or by an invalid\ncontrol statement (however, see GO and RESET).\n.sp 2\nCONSOLE\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cc\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cca\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n.br\nCONSOLE \u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n.br\nCON\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cc\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cca\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n.br\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to cause subsequent input\nto be from the CRT (if a local 2260 or 3270 is assigned),\nthe terminal (if TSO),\nor the operators console (via WTO/WTOR and REPLY/MODIFY).\nA specific console may be assigned by a two hex digit UCMID\n(with an optional area identifier from A-Z) or\nby a unit address.\nRouting codes and descriptors may be specified in the form\nddddrrrr, where d is a 16 bit descriptor mask and\nr is a 16 bit routing code mask.\n.sp 2\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a dump of the specified\nmodule or CSECT,\nprior to applying any REPs.\nThe dump will contain a display of 16 bytes/line, in the format:\n.ll 120\n.nj\n.hi 0\n.in 0\n.sp 2\nR:b\b/rrrrrrb\b/A:b\b/aaaaaab\b/b\b/xxxxxxxxb\b/xxxxxxxxb\b/b\b/b\b/xxxxxxxxb\b/xx\n.ll 70\n.fi l\n.hi 5\n.in 22\n.sp 2\n  Where r is the relative address in hex\n.in 28\n.br\n  a is the absolute address in hex\n.br\n  x is the data in hex\n.br\n  e is the data the data in EBCDIC, with unprintable characters\ndisplayed as periods (.) or quotes (\").\n.br\n b\b/ is a blank\n.in 9\n.hi 13\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acA character is considered unprintable if it\ndoes not appear on the CRT;\nif called from a non-CRT TSO terminal or run in batch\nwithout a CRT,\na character is unprintable if it does not appear un the PN train.\nA cent sign (\u00a2) is considered unprintable on the 2260\nsince it is used as an SMI (>\b|).\nA quote rather than a period will be substituted for each\nunprintable character only for the 2260;\nquotes appear on the 2260 as an error symbol (_\b<\b>\b\u00ac).\n.sp 2\nDUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\nDUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a partial dump of the\nCSECT or module identified in the preceeding NAME statement.\nr is 2, 4, or 6 hex digits,\npreceeded by a hyphen if negative;\ns is 2, 4, or 6 hex digits.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe data beginning at r,\nadjusted by the preceeding NAME, INDEX, and BASE statements,\nis displayed in the format shown above.\nThe number of bytes dumped will be given by s,\nhowever the dump will always begin and end on a quadword\n(16 byte) boundary.\n.sp 2\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\nDUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\nexcept that VERs and REPs will be processed prior\nto printing the dump.\n.sp 2\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n.br\nDUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\nexcept that VERs and REPs will be processed will be processed\nprior to printing the dump and that the format of the dump is different.\nEach halfword will be treated as the beginning of an instruction\nfor the purpose of printing an opcode under the hex value.\nThe dump will contain a display of 16 bytes/line, in the format:\n.ll 120\n.hi 0\n.in 0\n.nj\nrrrrrrb\b/aaaaaab\b/b\b/xxxxb\b/xxxxb\b/b\b/xxxxb\b/xxxxb\b/b\b/b\b/xxxxb\b/xxxxb\b/\nb\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/oooob\b/oooob\b/b\b/oooob\b/ooo\n.fi l\n.ll 70\n.in 22\n.hi 5\n.sp 1\n Where r is the hex relative address\n.in 28\na is the hex absolute address\n.br\nx is the hex data\n.br\ne is the EBCDIC data\n.br\no is the opcode for the above data,\ntruncated to 5 characters\n.br\nb\b/ is a blank.\n.in 9\n.hi 13\n.sp 2\nHELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list\nof valid command names.\nIf a CRT is assigned,\nor if MZAP is being run from a TSO terminal,\nattention mode is forced and a $HELP is simulated\nto enable the user to set the speed or hold options;\nthe list of commands will begin when a null line is entered.\nThe list can be terminated by entering an attention message\nof \"STOP\" from the terminal/CRT or by the operator command:\n\"P id\", where id is the jobname or START id.\n.sp 2\nHELP cmd \u00ac\u00ac\u00ac\u00ac\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list of valid operands\nfor the designated input statement.\nIf a CRT is assigned or MZAP was invoked via TSO,\nattention mode is forced and a $HELP is simulated\nto enable the user to set the speed or hold options;\nthe list of operands will begin when a null line is entered.\nThe list can be terminated by entering an attention message\nof \"STOP\" form the terminal/CRT or by the operator command:\n\"P id,STOP\", where id is the jobname or START id.\n.sp 2\nSETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n.br\n<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement, during dump processing or VERIFY/REP\nprocessing;\ncauses the limits (address,length) and index currently in effect\nto be saved in one of 16 MZAP \"reference pointers\";\nrefdigit, which may be any hex digit from 0 to F,\nis used to identify this information for subsequent use\n(see POINT).\n.sp 2\nSETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n.br\n<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n.br\nSETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n.br\n<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n.br\nSETPTR,plen \u00acrefdigit ptr len\n.br\n<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n.br\nSETPTR,plen \u00acrefdigit ptr len-pfx\n.br\n<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement,\nduring dump or VERIFY/REPLACE processing,\nsaves the limits (address, length) and index of a control block\nas described below;\nrefdigit, which may be any hex digit from 0 to F,\nis used to identify this information for subsequent use\n(see POINT).\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acplen, if present, defines the type of pointer;\nit may have the values 15, 16, 24, or 32 (the default);\nin addition, Y, H, AL3, and A are synonymous to 15, 16, 24, and 32.\n(Only the last 24 bits of a 32 bit pointer are used.)\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr must be an even number of hex digits,\ngiving the relative address of a pointer.\nIn what follows, \"(ptr)\" denotes the contents of the designated location\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00aclen must be an even number of hex digits,\ngiving the size of the control block pointed to\n(excluding prefix, if any).\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acpfx, if specified, must be an even number of hex digits,\ngiving the length in bytes of the control block prefix.\nThe hyphen separating len and pfx may be preceeded by blanks,\nbut may not be succeeded by blanks.\npfx is assumed to be 0 if not specified.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acWhen the specified pointer, (ptr),\nis accessed, the following are computed:\n.nj\n.in 25\n.hi 0\naddress    is    (ptr)-pfx\nlength     is    len + pfx\nindex      is    (ptr)\nrelative\n index     is    index - address = pfx\n.fi l\n.in 10\n.hi 12\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index are then\nsaved in the requested reference pointer.\n.sp 2\nPOINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n.br\n-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index last set into\nthe designated reference pointer are made current;\nthe index may be modified by a subsequent BASE or INDEX (hex only)\nstatement.\n.sp 2\nPOINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n.br\n-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n.br\nPOINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n.br\n-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n.br\nPOINT,plen \u00acptr len\n.br\n->,plen \u00ac\u00ac\u00ac\u00acptr len\n.br\nPOINT,plen \u00acptr len-pfx\n.br\n->,plen \u00ac\u00ac\u00ac\u00acptr len-pfx\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index for a control block\nare made current.\nSee SETPTR for an explanation of the operands.\n.pa\n.in 0\n.hi 0\nV. \u00acJCL\n.in 5\n.sp 1\nMZAP requires the following JCL statements:\n.nj\n.sp 1\n 1)  //       EXEC  PGM=MOREZAP,REGION=100K\n 2)  //STEPLIB  DD  ...\n 3)  //SYSNUC   DD  DSN=SYS1.NUCLEUS(IEANUC0x),DISP=SHR\n 4)  //SVCLIB   DD  DSN=SYS1.SVCLIB,DISP=SHR\n 5)  //CMDLIB   DD  DSN=SYS1.CMDLIB,DISP=SHR\n 6)  //LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n 7)  //         DD  ...\n 8)  //ddn      DD  ...\n 9)  //IEFRDER  DD  UNIT=cuu\n10)  //SYSPRINT DD  SYSOUT=A\n11)  //SYSIN    DD  *\n.fi\n.in 9\n.sp 1\n1.) The REGION size required will vary depending on the\nsize of the CESD for the nucleus and on the number of DD\nstatements.\n.sp 1\n2) This statement is not required if MOREZAP is located in\na JOBLIB or in the system link libraries.\n.sp 1\n3) This statement is required;\nit must specify the nucleus currently loaded.\n.sp 1\n4) This statement is required if any module in SVCLIB is referenced\nin a NAME or DUMP statement.\n.sp\n5) This statement is required if any module in the TSLPA is referenced\nin a NAME or DUMP statement.\n.sp\n6) This statement is required if any module in the system\nLINK library is referenced in a NAME or DUMP statement.\nIf SYS1.PARMLIB(LNKLST00) specified data sets concatemated to SYS1.LINKL\nthen these data sets must be specified on concatenated DD statements,\nin the same order as in LNKLST00.\n.sp 1\n7) See 6.\n.sp 1\n8) Optional additional libraries may be specified;\nthe ddname should be the same as the operand of the LIB\nstatement which specifies the data set.\n.sp 1\n9) Optional 2260 (960 byte screen, local mode) or\n3277 (1920 byte screen, local mode, EBCDIC) for\ncontrol statement and attention input.\nAny ddname desired may be used,\nhowever IEFRDER is suggested if MZAP is\nto be invoked via a START command.\n.sp 1\n10) Printed output.\nIf no BLKSIZE is specified, 141 will be used for unit record\nand 685 for tape or disk.\nThe user should specify the largest blocksize acceptable to\nthe system output writer at his installation.\nIf the installation is using ASP,\nthe blocksize should not exceed the ASP buffer size.\n.sp 1\n11) Control statement input.\nAdditional input may be requested from the operator with\na CONSOLE statement.\n.in 5\n.sp 2\nThe required JCL may be preceeded by a JOB card and submitted\nthrough the input stream, or by SUBMIT.\nAlternatively, the user may add the JCL to SYS1.PROCLIB,\nand invoke MZAP with a START command.\nSee the Operators Reference and JCL Reference for more\ninformation on catalogued procedures and START commands.\n.in 8\n.nj\n.sp 2\n//        EXEC   PGM=IEBUPDTE,PARM=NEW\n//SYSUT2    dd   DSN=SYS1.PROCLIB,DISP=MOD\n//SYSPRINT  DD   SYSOUT=A\n//SYSIN     DD   DATA\n.li\n><         ADD   NAME=MZAP,LIST=ALL\n.li\n><      NUMBER   NEW1=1000,INCR=1000\n//MZAP    PROC   NUC=1\n//IEFPROC EXEC   PGM=MZAP\n//STEPLIB   DD   DSN=SYS2.ASM.XEQ,DISP=SHR\n//SYSNUC    DD   DSN=SYS1.NUCLEUS(IEANUC0&NUC),DISP=SHR\n//IEFRDER   DD   UNIT=290\n//SVCLIB    DD   DSN=SYS1.SVCLIB,DISP=SHR\n//LINKLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n//          DD   DSN=SYS2.linklib,disp=SHR\n//CMDLIB    DD   DSN=SYS1.CMDLIB,DISP=SHR\n/*\n.sp 1\n       Adding PROC to PROCLIB\n              (Example 1)\n.sp 4\n           S  MZAP.KENT,046,NUC=2\n.sp 1\n       Starting MZAP using sample PROC\n              (Example 2)\n.hi 0\n.in 0\n.pa\nVI. \u00acMESSAGES\n.in 5\n.fi l\n.sp 1\nExcept for prompting, listing of input,\nmodule/csect/control block dumps, and debug output,\nall messages produced by MZAP have a common format:\n.in 15\n.sp 2\nMZPfnnabtext\n.in 5\n.sp 1\nWhere f identifies the functional area:\n.in 18\n.hi 3\n.sp 1\n0 \u00accommon\n.br\n1 \u00acinitialization\n.br\n2 \u00accontrol card scan\n.br\nH \u00acHELP\n.br\nD \u00acDEBUG\n.br\n3 \u00acCDE search\n.br\n4 \u00acESD processing and module/csect/location listing\n.br\n5 \u00acdump processing\n.br\n6 \u00acVER/REP processing\n.br\n7 \u00acfinal housekeeping, reinitialization, and termination\n.hi 0\n.sp 1\n.in 10\nnn is a decimal message number within function\n.sp 1\na \u00acis an action indicator:\nA if action required, I otherwise.\n.in 5\n.sp 2\nWhen a message relates to a specific input statement and\ndoes not immediately follow the statement,\nthe message text will normally begin with the\n5 digit sequence number assigned when that statement was read.\n.in 0\n.hi 0\n.pa\n.ce data\nCommon Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________\n.end\n.hi 6\n.sp 3\n>\b|\n.br\nsssss>\n.br\nsssss>\b|\n.br\nsssss\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acInput required from the terminal, 2260, or 3270.\n.sp 2\nEH?>\n.br\nEH?>\b|\n.br\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAttention mode is in effect.\nKey in attention input or terminated attention mode\nwith a null line.\n.sp 2\nMZP001I I/O ERROR ON 2260 - USE CONSOLE\n.br\nMZP001I I/O ERROR ON 3270 - USE CONSOLE\n.in 10\nROUTCDE: 1,10,11\n.br\nDESC: \u00ac\u00ac\u00ac1\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acUnrecoverable I/O error on the CRT.\nInteractive I/O will be done via the WTO/WTOR/MODIFY interface.\n.sp 2\nMZP0002I $HELP: $HOLD|$AUTO CON STOP $PAGE|$HALFAST|$FAST|$SLOW\n.br\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither HELP, $HELP or an invalid attention was entered.\nThe valid attention messages are listed,\nwith mutually exclusive messages separated by logical OR (|).\n.sp 2\nMZP0003A\n.br\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac2\n.br\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00acInput required via REPLY.\n.sp 2\nsssss text\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac7\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acListing of user's input.\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated text was read and assigned the sequence number\nsssss.\nThe output is to SYSPRINT, terminal (if TSO CRT), or CRT (if assigned).\nIf the CONSOLE option is in effect, no CRT is assigned,\nand MZAP is in batch, a WTO is used.\n.pa\n.ll 100\n.ce data\nInitialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________________\n.end\n.ll 70\n.sp 2\n.in 0\n.hi 6\n.sp 2\nMZP100I MOREZAP VERSION mm/dd/yy hh.mm STARTING\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac6\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP has been invoked.\nInitialization status and error messages may follow.\n.sp 2\nMZP101I UNAUTHORIZED CPU FOR MZAP\n.in 10\nROUTCDE: 1,9,11\n.br\nDESC: \u00ac\u00ac\u00ac1\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP is not running on the machine it was destributed for;\nif you wish to use MZAP, order a separate copy for each CPU\non which it is to be used.\n.sp 2\nMZP102I SYSPRINT CARD MISSING - OUTPUT ON CONSOLE\n.br\nMZP102I SYSPRINT CARD MISSING - OUTPUT ON TERMINAL\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac7\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo SYSPRINT DD card is present, or, if TSO,\nno suitable ALLOC was done for SYSPRINT.\nOutput will be via TPUT, if TSO,\nto the CRT in batch,\nand to the console via WTO if there is no CRT\nassigned in batch.\n.sp 2\nMZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE\n.br\nMZP103I SYSIN DD CARD MISSING - INPUT FROM KEYBOARD\nMZP103I SYSIN DD CARD MISSING - INPUT FROM TERMINAL\n.in 10\nROUTCDE: 9,10\n.br\nDESC: \u00ac\u00ac\u00ac7\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo appropriate ALLOC(TSO) or DD card for SYSIN.\nInput will be via TPUT for TSO;\nfor batch, input will be from the keyboard of the\nCRT, if one is assigned;\notherwise, input will be via REPLY to WTOR.\n.sp 2\nMZP104I SYSNUC MISSING OR INVALID\n.in 10\nROUTCDE: 9,10,11\n.br\nDESC: \u00ac\u00ac\u00ac6\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither there is no appropriate ALLOC(TSO) or DD card\nfor SYSNUC, or the DSNAME is not SYS1.NUCLEUS,\nor it is not located on the IPL volume,\nor the member name, IEANUC0x, is missing or is not the\nnucleus most recently IPLed.\n.sp 2\nMZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED\n.in 10\nROUTCDE: 10,11\n.br\nDESC: \u00ac\u00ac\u00ac7,8,9\n.in 0\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn  ALLOC(TSO) or DD card exists for a graphics device\nother than a 960 byte local 2260 or a 1980 byte local 3277.\n2250, 2280, etc., are all unsupported, as are all remote CRTs.\nSorry 'bout that!\n.in 0\n.hi 0\n.pa\n.ll 100\n.ce data\nInput Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n\nNOTE: NOGO\b\b\b\b____ switch will be set for all MZP2 messages.\n.end\n.ll 70\n.sp 2\n.in 0\n.hi 6\nMZP201I STATEMENT MISPLACED\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acVERIFY, REPLACE, POINT, etc. statement not\nin the range of NAME statement.\n.in 0\n.sp 2\nMZP202I INVALID OPCODE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe first non-blank column of the input statement\ndoes not contain a valid MZAP opcode, or the opcode is\ninvalid but has restrictions on its use.\nFor example, this message is produced if a GO statement\nis present in SYSIN.\n.sp 2\nMZP203I DEVICE NOT FOUND\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn input statement, such a UCB, specified as\ndevice address which was not present in any UCB.\n.sp 2\nMZP204I INVALID STATEMENT\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA syntax error is present in an input statement.\nA logical OR (|) will be displaYED BELOW THE COLUMN\nAT WHICH THE ERROR WAS DETECTED.\nFor an omitted operand, this will bee the end of the statement.\nFor an invalid negative hex operand,\nthis will be the end of the operand,\nnot\b\b\b___ under the hyphen.\n.sp 2\nMZP205I NOT A VALID CONSOLE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a UCMID higher than the number of consoles\nspecified in the system,\nhe specified a unit (cuu) which is not defined as\nan operators' console.\n.sp 2\nMZP206I NOT MCS\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn operand was specified on a UCM statement\nwhich is only valid for a system with the MCS\n(Multiple Console Support) option.\n.sp 2\nMZP207I HARDCPY=SYSLOG - NO UCM\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe statement UCM HARDCOPY is only valid if\na console device, rather than SYSLOG, is assigned the\nSYSLOG function.\n.sp 2\nMZP208I CONSOLE NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a console which is ONLINE or\nOFFLINE, rather than in CONSOLE status.\n.sp 2\nMZP209I NOT SMF\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an input statement, such as SMCA,\nwhich is only valid if the system is defined with\nthe SMF (System Management Facility) option.\n.sp 2\nMZP210I KEY xxxxxxxx?\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave a KEY statement with an invalid or\nomitted operand.\nHe must reply with a valid key,\nconsisting of a scrambled version\nof the displayed hexadecimal number.\nIf you don't know the magic number,\nsee your installation systems programmer for an explanation of why\nyou are not allowed to use this program!\n.sp 2\nMZP211I INVALID KEY\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an invalid reply to MZP210I,\nor supplied an invalid operand on a KEY statement.\nThis message will be followed by MZP210I.\n.sp 2\nMZP212I TCAM IS NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\nsuch as AVT, which is only valid while TCAM is active.\n.sp 2\nMZP213I TSO IS NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\nsuch as TSCVT, which is only valid while TSO is active.\n.sp 2\nMZP214I HASP IS NOT ACTIVE\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\nsuch as HCT, which is only valid while HASP is active.\n.sp 2\nMZP215I NAME NOT IN BLDL LIST\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac IThe user has supplied a BLDL statement which\nspecifies a module not found in the BLDL list(s)\nused in the current IPL.\nAn alternative explanation is that, since the latest IPL,\nthe appropriate BLDL entry has been REPed to another name.\n.hi 0\n.in 0\n.pa\n.ce data\nHELP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n.end\n.hi 6\n.sp 2\nMZPH01I ALL\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of all command names is in effect.\nThis message will remain on line 0 of the CRT\nuntil the display is complete;\nit will not appear on the console or SYSPRINT.\n.sp 2\nMZPH01I cmd\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of the operands of the designated command\nis in effect.\nSee MZPH01I ALL.\n.sp 2\nMZPH02I USE HELP <cmd> FOR OPERANDS OF <cmd>\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis is the first line of output for HELP ALL.\nIf a supported CRT is assigned (960 byte local 2260,\n1920 byte 3277),\nor if MZAP is being called from TSO,\nthis  will be followed by an MZP002I message;\nenter any desired attention messages and then\nterminate attention mode with a null line.\n.sp 2\nMZPH03I OPCODE cmd\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated opcode may be used in input statements.\n.sp 2\nMZPH04I INVALID OPCODE - HELP ALL FORCED\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe operand used for HELP was invalid,\nand will be ignored.\nA list of valid opcodes will be displayed.\n.sp 2\nMZPH05I OPERAND text\n.sp 1\n \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe text listed is part of a description of\nthe operands of the command for which HELP was requested.\n.hi 0\n.in 0\n.pa\n.ce data\nDEBUG Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n.end\n.sp 2\n.li 1\nMZPD01I VER/REP SNAP. SW=xx,xx,xx,xx\n.sp 1\n.in 10\nA phase of MOREZAP has completed processing.\nSW1-SW4 had the values, in hex, indicated in the message.\nA set of messages, described below,\nwill be written for each of the MZAP control blocks\nwhich have been constructed;\nfollowing this, the next phase will be called.\nThese messages are at least two lines, and include the following:\n.in 0\n.sp 2\n.nj\n.li 2\naaaaaa TYPE=xx: tttttttt NXT: nnnnnn LINE: ##### text\n                                      FLG: ff\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where a is the 6 hex digit virtual address of the control block\ndisplayed.\n.in 26\n.hi 2\n.sp 1\n x is the two hex digit type.\n.sp 1\n t is a descrition of the type.\n.sp 1\n n is the 6 hex digit address\nof the next MZAP control block.\n.sp 1\n # is the sequence number aSSIGNED TO THE INPUT STATEMENT\nwhich generated the control block.\n.sp 1\n f is the two hex digit flag field.\n.hi 0\n.in 0\n.sp 2\n.nj\n.ll 100\n.li 3\naaaaaa TYPE=00: VER      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(d\n                                      FLG: ff,ff ABS: xxxxxx\n                                      vvvv,vvvv,vvvv,vvvvv,vvvv,vvvv,vvv\n.fi l\n.ll 70\n.sp 1\n.in 20\n.hi 8\n Where @ is the 6 hex digit relative address of the data to be verified.\n.in 26\n.hi 2\n.sp 1\n m is the hex length-1 (i.e., as it would be used in a CLC).\n.sp 1\n d is the decimal data length.\n.sp 1\n x is the 6 digit absolute virtual address of the data to be  verified,\nor is 0 if not yet known.\n.sp 1\n v is the data to be used for verification,\nor the data which failed to pass verification.\n.sp 2\n.hi 0\n.in 0\n.ll 100\n.nj\n.li 3\naaaaaa TYPE=01: REP      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(d\n                                      FLG: ff,ff ABS: xxxxxx\n                                      rrrr,rrrr,rrrr,rrrrr,rrrr,rrrr,rrr\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the data to be replaced.\n.in 26\n.hi 2\n.sp 1\n m is the hex length-1 (i.e., as it would be used in a MVC).\n.sp 1\n d is the decimal data length.\n.sp 1\n x is the 6 digit absolute virtual address of the data to be  replaced,\nor is 0 if not yet known.\n.sp 1\n r is the data to replace the data at @,\nas relocated.\n.sp 2\n.hi 0\n.in 0\n.nj\n.li 2\naaaaaa TYPE=02: BASE     NXT: nnnnnn LINE: ##### LOC: bbbbbb\n                                      FLG: ff\n.sp 1\n.fi l\n.in 20\n.hi 8\n Where b is the 6 hex digit hex number to be subtraacted from\nthe relative address of each statement within\nthe scope of this BASE.\n.hi 0\n.in 0\n.sp 2\n.nj\n.li 2\naaaaaa TYPE=03: INDEX    NXT: nnnnnn LINE: ##### LOC: xxxxxx IXNAME: eee\n                                      FLG: ff\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where x is the 6 hex digit hex number,\nas far as currently resolved,\nto be used as a relocation factor for each\nstatement within the scope of this INDEX.\n.in 26\n.hi 2\n.sp 1\n e is the csect or entry point within the module\nwhose address is resolved as x.\n.in 0\n.hi 0\n.sp 2\n.nj\n.li 2\naaaaaa TYPE=04: HINDEX   NXT: nnnnnn LINE: ##### LOC: xxxxxx\n                                      FLG: ff\n.fi l\n.sp 1\n.in 20\n.hi 8\n Where x is the 6 hex digit number to be added to\nthe relative address of each statement within the scope\nof this INDEX.\n.in 0\n.hi 0\n.sp 2\n.nj\n.li 3\naaaaaa TYPE=05: NAME     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.in 20\n.hi 8\n.sp 1\n Where x is the module or csect location,\nas currently resolved.\n.sp 1\n.in 26\n.hi 2\n m is the module name.\n.sp 1\n r is the CDE (OS/MVT, OS/VS2) or RB (OS/MFT, OS/VS1) address,\nif known, else 0.\nThis field is always 0 for the nucleus.\n.sp 1\n s is the module or csect size, as currently resolved.\nThe module size for the nucleus is taken from  CVTNUCB.\n.sp 1\n c is the csect name, if specified.\n.sp 1\n y is the 6 hex digit address of the DCB for the library\ncontaing the load module.\n.sp 1\n d is the ddname of the library.\n.sp 1\n z is the 8 hex digit System Status Information\n(See the SRL for Services Aids).\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=06: DUMP     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\nWhere all fields are as explained for 05 (NAME).\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=07: DUMPA    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\nWhere all fields are as explained for 05 (NAME).\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=08: DUMPT    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmm\n                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: ccc\n                         DCB: yyyyyy  dddddddd                  SSI: zzz\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\nWhere all fields are as explained for 05 (NAME).\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=09: HDUMP    NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n                                      FLG: ff,ff ABS: xxxxxx\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the\ndata to be dumped.\n.in 26\n.hi 2\n.sp 1\n s is the 6 hex digit length of the area to be dumped.\n.sp 1\n x is the 6 hex digit absolute virtual address of the data to be dumped,\nor is 0 if not yet know.\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=0A: HDUMPA   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n                                      FLG: ff,ff ABS: xxxxxx\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the\ndata to be dumped.\n.in 26\n.hi 2\n.sp 1\n s is the 6 hex digit length of the area to be dumped.\n.sp 1\n x is the 6 hex digit absolute virtual address of the data to be dumped,\nor is 0 if not yet know.\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=0B: HDUMPT   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n                                      FLG: ff,ff ABS: xxxxxx\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the 6 hex digit relative address of the\ndata to be dumped.\n.in 26\n.hi 2\n.sp 1\n s is the 6 hex digit length of the area to be dumped.\n.sp 1\n x is the 6 hex digit absolute virtual address of the data to be dumped,\nor is 0 if not yet know.\n.in 0\n.hi 0\n.sp 2\n.nj\n.ll 100\n.li 2\naaaaaa TYPE=0C: LIB      NXT: nnnnnn LINE: ##### DCB: xxxxxx DDNAME: ddd\n                                      FLG: ff\n.fi l\n.ll 70\n.in 20\n.hi 8\n Where x is the 6 hex digit absolute virtual address of the DCB,\nor is 0 if LIB AUTO is in effect.\n.in 26\n.hi 2\n.sp 1\n d is the ddname specified.\n.in 0\n.hi 0\n.nj\n.sp 2\n.ll 100\n.li 2\naaaaaa TYPE=0D: <- N *   NXT: nnnnnn LINE: ##### NDX: @@@@@@   LENB: sss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx    IXB: iii\n.fi l\n.sp 1\n.ll 70\n.in 20\n.hi 8\n Where @ is the absolute virtual index in effect at the time\nthe address, length, and index were saved.\n.in 26\n.hi 2\n.sp 1\n s is the length of the module, csect, or control block.\n.sp 1\n p is the address of the 8 byte area in which the address,\nlength, and relative index are to be stored.\n.sp 1\n x is the absolute virtual address of the module, csect,\nor control block.\n.sp 1\n i is the relative index which was saved.\n.in 0\n.hi 0\n.nj\n.sp 2\n.ll 100\n.li 2\naaaaaa TYPE=0E: MVC      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: (mm(\n                         DST: pppppp  FLG: ff,ff ABS: xxxxxx\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the relative address of the data to be saved.\n.in 26\n.hi 2\n.sp 1\n m is the hex length-1 (i.e., as it would be used in an MVC).\n.sp 1\n d is the decimal length.\n.sp 1\n p is the address of the area in which the data is to be saved.\n.sp 1\n x is the absolute virtual address of the data to be saved,\nor 0 if not known.\n.in 0\n.hi 0\n.nj\n.sp 2\n.ll 100\n.li 2\naaaaaa TYPE=0F: <- N PTR NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the relative address of the pointer to\nthe desired control block.\n.in 26\n.hi 2\n.sp 1\n s is the length of the control block pointed to.\n.sp 1\n p is the address of the 8 byte area where\nthe address, length, and relative index are to be stored.\n.sp 1\n x is the absolute virtual address of the desired control block,\nor 0 if not known.\n.sp 1\n i is the relative index.\n.in 0\n.hi 0\n.nj\n.sp 2\n.ll 100\n.li 2\naaaaaa TYPE=10: -> PTR   NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the relative address of the pointer to\nthe desired control block.\n.in 26\n.hi 2\n.sp 1\n s is the length of the control block pointed to.\n.sp 1\n p is the absolute virtual address of the pointer to\nthe desired control block.\n.sp 1\n x is the absolute virtual address of the desired control block,\nor 0 if not known.\n.sp 1\n i is the relative index.\n.in 0\n.hi 0\n.nj\n.sp 2\n.ll 100\n.li 2\naaaaaa TYPE=11: -> REF N NXT: nnnnnn LINE: ##### NDX: @@@@@@  LENB: ssss\n                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n.fi l\n.ll 70\n.in 20\n.hi 8\n.sp 1\n Where @ is the absolute virtual INDEX in effect when\nthe address, size, and index were restored.\n.in 26\n.hi 2\n.sp 1\n s is the length of the module, csect, or control block.\n.sp 1\n p is the address of the 8 byte area from which\nthe address, size, and relative index were or are\nto be restored.\n.sp 1\n x is the absolute virtual adress of the module, csect,\nor control block.\n.sp 1\n i is the relative index.\n.in 0\n.hi 0\n.pa\n.ce data\nESD Messages\b\b\b\b\b\b\b\b\b\b\b\b____________\n.end\n.sp 2\nMZP401I mmmmmmmm DIRECTORY I/O ERROR\n.sp 1\n.in 6\nA return code of 8 was received from the BLDL macro,\nindicating an I/O error in the directory\nwhile trying to locate module m.\n.in 0\n.sp 2\nMZP402I mmmmmmmm NOT FOUND\n.sp 1\n.in 6\nA return code of 4 was received from the BLDL macro,\nindicating that module m was not found\nin the directory of any of the relevant libraries.\nAdd a DD card for the necessary library,\nand if required, add a LIB statement.\n.in 0\n.sp 2\nMZP403I mmmmmmmm NOT SCTR\n.in 6\n.sp 1\nA load module was found to be in block load format\nwhen scatter format was expected.\nEither the specified module was the nucleus,\nor it was loaded with more than one extent;\nin either case, the module found in the library\ncannot be the proper member, since it does not\nhave the SCTR attribute.\n.in 0\n.sp 2\nMZP404I mmmmmmmm NO ESD\n.in 6\n.sp 1\nThe first record in load module m, or the first\nrecord following the SYM records,\nis not a CESD record.\nRun IMBLIST (LISTLOAD) on the module,\nand call your friendly neighbor IBM CE\n- the linkage editor has just awarded you third prize,\nand there are only two contestants.\n.in 0\n.sp 2\nMZP405I mmmmmmmm NO CON\n.in 6\n.sp 1\nA reccord follows a CESD record which is not a control,\nIDR, SCTR, or CESD record.\nCall (but keep it clean) your friendly, neighborhood CE,\nas for MZP404I.\n.in 0\n.sp 2\nMZP406I mmmmmmmm MISSING CESD\n.in 6\n.sp 1\nA SCTR format record has fewer CESD records than expected;\nthe BLDL entry may have an incorrect table length or\nthere may be a missing or incorrect CESD record.\n.sp 1\nBefore complaining to IBM, list the module with IMBLIST and\nverify that the problem is in the load module;\nthis message could conceivably be caused by an error\nin MZAP, in which case the complaint should come to me\nrather than IBM.\nIf you received MZAP as an IUP from IBM,\nrather than directly from me,\nthen they get the complaint regardless\n- but no doubt I'll hear from them.\n.in 0\n.sp 2\nMZP407I mmmmmmmm MISSING SC/TR\n.in 6\n.sp 1\nA record type other than hex 10 was found while\nreading in the scatter/translate table.\nSee the remarks for MZP404I and MZP406I.\n.in 0\n.sp 2\nMZP410I sssss NAME: mmmmmmmm NOT LOADED\n.sp 1\n.in 6\nModule m was not found in the RERP, RAM, RSVC,\nor TSLPA linkpack queues, nor in the or selected JPAQ.\n.in 0\n.sp 2\nMZP411I sssss NAME: mmmmmmmm NOT IN DIRECTORY\n.in 6\n.sp 1\n Module m was not found in the proper library.\nUsually accompanied by message MZP401I or MZP402I.\n.in 0\n.sp 2\nMZP412I sssss NAME: mmmmmmmm cccccccc NOT FOUND\n.in 6\n.sp 1\nCsect c does not exist in module m,\nor an error exists in the format of load module m.\n.in 0\n.sp 2\nMZP413I sssss NAME: mmmmmmmm cccccccc ABS:  aaaaaa:aaaaaa\n.in 6\n.sp 1\nThe designated module or csect exists and was loaded at\nthe listed absolute virtual addresses.\n.in 0\n.sp 2\nMZP414I sssss ENTRY eeeeeeee NOT FOUND\n.in 6\n.sp 1\nEntry point e was either specified in an INDEX statement\nor implied by a control block statement:\nCVT, UCB, etc.;\nit could not be found in the load module's CESD.\n.in 0\n.sp 2\nMZP415I sssss ENTRY eeeeeeee ABS: aaaaaa\n.in 6\n.sp 1\nEntry point e is at the specified absolute virtual address.\n.in 0\n.sp 2\nMZP416I sssss REL: rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n.in 6\n.sp 1\nStatement number s specified either:\na relative address beyond the module or csect;\na negative displacement beyond the control block prefix;\nor an excessive length for a VER, REP, or DUMP.\nThe range of addresses given is listed as both relative and\nabsolute virtual addresses.\n.in 0\n.sp 2\nMZP420I sssss INVALID POINTER AT aaaaaa\n.in 6\n.sp 1\nA POINT or SETPTR statement refers to a halfword which is negative.\nSince the pointer type was specified as Y (15),\nthis is invalid.\n.in 0\n.sp 2\nMZP421I sssss REF NOT - POINT INVALID\n.in 6\n.sp 1\nA POINT REF statement refers to a ref digit for which either:\n.hi 3\n.in 8\n 1. There is no preceeding SETPTR.\n 2. The last preceeding SETPTR was not successfully processed.\n.hi 0\n.in 0\n.sp 2\nMZP422I sssss INDEX: iiiiii LIMITS: aaaaaa:aaaaaa\n.in 6\n.sp 1\nA POINT statement refers to the designated absolute virtual address, i.\nThe limits are for the entire area pointed to,\nincluding the prefix, if any.\n.in 0\n.pa\n.ce data\nDUMP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n.end\n.sp 2\n.fi l\n.ll 100\nMZP501I sssss \u00ddACCESSED VIA\u00a8 m \u00ddc\u00a8\n\u00ddINDEX: e\u00a8 HEX/EBCDIC\u00dd/OPCODE\u00a8 DUMP\n.ll 70\n.in 6\n.sp 1\nThis message is used as a subtile for all dumps.\nThe clause \"INDEX: eeeeeeee\" is present if an entry point\nwithin the containing csect is specified,\neither explicitly or implicitly.\nThe clause \"ACCESSED VIA\" is present if the limits\nof the dump are relative to a location\nfound with a POINT statement;\nany \"INDEX\" clause which would otherwise be supplied is suppressed,\nin order not to exceed the line size of the 2260 or 3270.\n.in 0\n.hi 0\n.pa\n.ce daTA\nVER/REP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b________________\n.end\n.sp 2\nMZP601I sssss NAME mmmmmmmm cccccccc\n.in 6\nOne or more errors have been found relating to the specified module.\nAddition messages will be displayed to diagnose the exact errors.\n.in 0\n.sp 2\nMZP602I sssss rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n.in 6\n.sp 1\nThe start or end address of the verify or replace is outside the\nbounds of the module or csect.\n.in 0\n.sp 2\nMZP603I sssss VERIFY FAILURE AT: rrrrrr ABS :aaaaaa\n.in 6\n.sp 1\nThe data in storage did not match the VERIFY data.\nThis message is always accompanied by MZP604I.\n.in 0\n.sp 2\nMZP604I sssss ACTUAL CONTENT IS xxxx,xxxx,...\n.in 6\n.sp 1\nThis message immediately follows MZP603I.\n.in 0\n.sp 2\nMZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL\n.in 6\n.sp 1\nNo errors were detected.\nAll REP operations, if any, were performed.\n.in 0\n.sp 2\nMZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED\n.in 6\n.sp 1\nAn error was detected.\nNo REP operation is performed.\nThe user should correct the errors indicated\nin the preceeding error messages.\n.in 0\n.pa\n.ll 158\n.in 12\n.nj\nFinal Housekeeping and Reinitialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\n.fi\n.ll 70\n.sp 2\nMZP701I EOD\n.in 6\n.sp 1\nEither an end-of-file occurred on SYSIN or a RESET EOD\nstatement was read.\nAll input read prior to that point has been processed.\n.in 0\n.pa\nVII. \u00acMZAP/CZAP Comparision\n.sp 1\n.in 4\n.nj\nMZAP\b\b\b\b____                          CZAP\b\b\b\b____\nCONSOLE                       No equivalent\n.sp 1\n*                             *\n.sp 1\nNAME .                        NAME NUCLEUS\n.sp 1\nNAME .csect                   NAME NUCLEUS\n                              INDEX csectdisp\n.sp 1\nNAME name                     NAME name\n.sp 1\nNAME name csect               NAME name\n                              INDEX csectdisp\n.sp 1\nCVT                           NAME NUCLEUS\n                              INDEX cvtloc\n.sp 1\nUCB=cuu                       NAME NUCLEUS\n                              INDEX ucbloc\nUCB cuu                       NAME NUCLEUS\n                              INDEX ucbloc\n.sp 1\nBASE hexbase                  BASE hexbase\n.sp 1\nINDEX=hexix                   INDEX hexix\n.sp 1\nINDEX esdname                 INDEX csectdisp\n                              BASE  esdindex\n.sp 1\nVERIFY  xx                    VERIFY  xx\nVER     00 'a'                VER     00 c1\nV       00 'a'C2              VER     00 c1C2\nV       00 C3'D'              VER     00 c3C4\nV       00 C6'GH'C9           VER     00 c6C7C8C9\n.sp 1\nREPLACE xx                    REPLACE xx\nREP     00 'a'                REP     00 c1\nR       00 'a'C2              REP     00 c1C2\nR       00 C3'D'              REP     00 c3C4\nR       00 C6'GH'C9           REP     00 c6C7C8C9\n.sp 1\nRESET                         RESET\n.sp 1\nRESET   EOD                   No equivalent\n.sp 1\nDUMP    name                  NAME    name\n                              DUMP    0  modulelen\n.sp 1\nDUMP    name  csect           NAME    name\n                              DUMP    csectdisp  csectlen\n.sp 1\nDUMP    .                     NAME    NUCLEUS\n                              DUMP    0          nuclen\n.sp 1\nDUMP    .     csect           NAME    NUCLEUS\n                              DUMP    csectdisp  csectlen\n.sp 1\nDUMPA   (see DUMP)            DUMPA   (see DUMP)\n.sp 1\nDUMPT   (see DUMP)            No equivalent\n.sp 1\n$ABEND  (attn)                ABEND\n.sp 1\nDEBUG   (Not truly equiv)     TRACE   (not truly equiv)\nDEBUG   (Not truly equiv)     LOGOUT  (not truly equiv)\n.sp 1\nRESET   (Not truly equiv)     TRACEOFF(not truly equiv)\n.fi\n.in 0\n.pa\nVIII. \u00acIndex to Input Statements\n.sp 2\n.nj\n.ll 140\nStatement\b\b\b\b\b\b\b\b\b_________      Page\b\b\b\b____     Statement\b\b\b\b\b\b\b\b\b____\n.ll 70\nAVT               9     MSER                  10\nBASE             12     NAME                   8\nBLDL              9     POINT                 17\nCONSOLE          14     QMRES                 10\nCVT               9     R                     13\nDEBUG             8     REP                   13\nDUMP             14     REPLACE               13\nDUMPA            15     RESET                  8\nDUMPB            14     SCVT                  10\nDUMPT            15     SETPTR                16\nEND               8     SMCA                  10\nGO                8     TACT                  10\nGOVRFLB           9     TCB                   10\nHCT               9     TSCVT                 11\nHELP             16     UCB                   11\nIBMORG            9     UCM                   11\nINDEX            12     USERORG               11\nJOB               8     V                     13\nKEY               7     VER                   13\nLIB              13     VERIFY                13\n./ ADD NAME=MZAPINST 0100-19106-19106-2244-00217-00217-00000-MZAPFB  17\n.tt ///\n.ti t 05\n.ti set \u00ac\n.he             MZAP Installation\n.ce on\nMOREZAP\n\nINSTALLATION INSTRUCTIONS\n______________________________\n.ce off\n.fo on\n.sp 3\n\u00actMZAP is intended to be individually assembled for each\ncombination of operating system, system level, and CPU;\nit will not function properly if run on the wrong system or CPU.\nAny installation with multiple CPUs must order MZAP separately\nfor each CPU; any violation of this is construed as theft and\nappropriate action will be taken.\n.sp 1\n\u00actMZAP is intended to protect itself against theft,\nby whatever means are considered appropriate.\nUse at an unauthorized installation may crash the system,\ndestroy online disks,\nor anything else which may strike my fancy:\nfurthermore, if such theft is discovered, legal action may be taken,\nover and above whatever steps occur automatically.\n.sp 1\n\u00actMZAP source consists of a set of macros,\na set of subroutines,\nand a main module.\nAll of these have names beginning with MZ;\nthose subroutines which are link-edited together\nwith the main module have names beginning with MZAP.\n.sp 1\n\u00actTo generate a copy of MZAP, certain important variables must\nbe ascertained.\nThey are as follows:\n.ju no\n.in 24\n.sp 1\n.un 14\n1).  CPU \u00act- either 360\b\b\b___ or 370\b\b\b___.\n.sp 1\n.un 14\n2).  CPUID \u00act- Must be the six digit IBM serial number of the\nCentral Processing Unit.\nWhile the number is normally found on the front of the system console,\nin certain models (such as 168) the console may be considered to be\na separate unit, and, as such, assigned a separate number;\nit is safest to obtain the number from the CE, or in the case of 370s,\nby performing a STIDP instruction while in supervisor mode.\n.sp 1\n3). MDL \u00act- 40\b\b__, 50\b\b__, 65\b\b__, 67\b\b__, 75\b\b__, 91\b\b__, 95\b\b__,\n135\b\b\b___, 145\b\b\b___, 155\b\b\b___, 158\b\b\b___, 165\b\b\b___, 168\b\b\b___, or 195\n.sp 1\n.un 14\n4). SYS \u00act- OS/MFT\b\b\b\b\b\b______, OS/MVT\b\b\b\b\b\b, VS1\b\b\b___, or VS2\b\b\b.___.\n.un 14\n4). SYS \u00act-\n.oc _\nOS/MFT, OS/MVT, VS1,\n.oc\nor\n.oc _\nVS2.\n.oc\nMP/65 is considered to be MVT.\n.sp 1\n.un 14\n5).  RELEASE\n.sp 1\n.un 14\n6). HASPSVC - For those unfortunate enough to be using HASP II\nVERSION 3.0 or 3.1, this parameter should be specified as\nthe three decimal digit SVC number assigned to HASP.\nHASP I is totally unsupported, support is planned for HASP II versions\n4 and JES2(HASP II Version 5).\nIf you think you are using HASP 3, 4, or 5,\ntake another look at the book; or see an optometrist:\nfrom 1968 to 1974, the only HASP releases have been HASP 2 (would you\nbelieve an MFT/1 HASP 1 site in beautiful downtown Burbank?) -\nany other number you may have heard is due to illiteracy.\nThis parameter is ignored for versions 4 and 5.\n.sp 1\n.un 14\n7).  For 370 only, the emulators for which DUMPT support is desired.\n.in 0\n.fo on\n.in 0\n.sp 2\n\u00actIn addition to the MZAP macros,\nOS macros from SYS1.MACLIB, SYS1.MODGEN, and SYS1.PVTMACS are used.\nIf the system was generated without TSO,\ncertain of the macros will be missing from SYS1.MACLIB\nand may be found in SYS1.TSOMAC and SYS1.TCAMMAC.\nFor VS, some of the name have changes (for instance,\nSYS1.MODGEN is now SYS1.AMODGEN),\nbut it should be clear from a listing of the VTOC what\nthe proper names are.\n.sp 1\n\u00actThese OS macros come from two sources,\nthe DLIB disks and the optional source material.\nWhile those macros not in SYS1.MACLIB will be supplied\nas part of MZAP,\nit is recommended that the installation replace them\nwith the macros at the proper release level.\n.sp 2\n\u00actTo install MZAP, all modules must be reassembled\nafter two members are updated:\n.pi 0\n.in 14\n.ju off\n.sp 1\n.un 4\n1. MZSET contains SETx statements,\nwhich must be modified to reflect the customer's configuration;\nthe spellings underlined must be adhered to.\n.sp 1\n.un 4\n2. MZAP5 contains SETA and SETC statements specifying emulators\nwhose opcodes are to be recognized during DUMPT Processing.\n360 is mandatory;\n370 is strongly recommended;\nany of the others may be included if the customer wishes.\n.in 0\n.fo on\n.sp 2\nThe MZAP modules which must be reassembled are:\n.in 23\n.ju off\n.un 13\nMZAP1 \u00act\u00actInitialization\n.sp 1\n.un 13\nMZAP2 \u00act\u00actControl Cards\n.sp 1\n.un 13\nMZAPDBUG \u00act\u00actDEBUG Snapshots of Control Blocks\n.sp 1\n.un 13\nMZAP3 \u00act\u00actCDE/LPRB lookup\n.sp 1\n.un 13\nMZAP4 \u00act\u00actESD Lookup\n.sp 1\n.un 13\nMZAP5 \u00act\u00actDump Processing\n.sp 1\n.un 13\nMZAP6 \u00act\u00actVER/REP Processing\n.sp 1\n.un 13\nMZAP7 \u00act\u00actFinal housekeeping and reinitialization\n.sp 1\n.un 13\nMZPRINT \u00act\u00actSYSPRINT Access Method\n.sp 1\n.un 13\nMZWTO \u00act\u00actOperator's console access method\n.sp 1\n.un 13\nMZ2260 \u00act\u00act2260 local CRT access method\n.sp 1\n.un 13\nMZ3270 \u00act\u00act3270 local CRT access method\n.sp 1\n.un 13\nMZTSO \u00act\u00actTSO non-CRT access method\n.sp 1\n.un 13\nMZTS2260 \u00ac\u00ac\u00ac\u00acTSO 2260 CRT access method\n.sp 1\n.un 13\nMZTS3270 \u00ac\u00ac\u00ac\u00acTSO 3270 CRT access method\n.in 0\n.fo on\n.sp 2\n\u00actWhen MZAP has been assembled,\nremove any ALIAS card from the beginning of each object\ndeck except MZAP1,\nleave the OVERLAY and INSERT cards in front of the MZAP1\nobject deck, and remove any cardspunched by the separator,\nincluding blank cards.\nPlace the statement NAME MZAP(R) at the end of the last object deck.\nThe object deck, or a copy on tape,\nmay now be shipped to the customer site.\n.sp 1\n\u00actThe OS customer should link-edit MZAP with the OVLY attribute;\nthe VS customer may prefer not to use the overlay supervisor.\nIf the assemblies are done at the customer's site,\nthen an assemble-and-link may be done\nand no object decks need be punched.\n.sp 2\n\u00actNote that it is imperative that a separate copy of MZAP\nbe ordered for each cpu-system combination:\n.pi 0\n.in 10\n.hi 4\n.fi l\n.sp 1\n1. Some functions are logically different for each of the five\nOS systems (MFT, VS1, MVT, SVS, MVS).\n.sp 1\n2. Special processing may be done on specific models to\navoid causing problems to MCH.\nThis may be necessary as a precaution against storage failures\nin modules which were copied or checksummed into SYS1.ASRLIB,\nor which reside in the PLPA.\n.sp 1\n.un 14\n3. If the CPU type, CPU model, or CPUID are not as expected,\nthis is interpreted as being due to an unauthorized use of\na stolen copy of MZAP and appropriate measures are taken;\na system crash is the least that could result.\n.in 0\n.hi 0\n.fi\n./ ADD NAME=SYSTEM   0100-19106-19106-2244-00195-00195-00000-MZAPFB  17\nII. SYSTEM and INPUT/OUTPUT REQUIREMENTS\n.sp 1\n.in 5\nMZAP requires that the control program be OS/MVT or OS/65MP;\nOS/VS2 Release 1.6 support is planned in the near future;\nand provision has been made for easily adding MFT or VS1 support\nwith only minor modifications.\nNo optional OS facilities need be generated,\nother than normal device support (for the 2260,\nthis must be explicitly requested via the GRAPHICS macro;\nfor the 3270, this must be requested via the BTAM option\nof the DATAMGT macro; for all sequential and DA devices\nthis support is automatic).\nIn particular, MZAP does not use SVC 54 to get into key 0,\nand hence ISAM is not required.\nWhen VS support is available,\nMZAP will be required to run only from an authorized library.\n.sp 1\nMZAP is intended to obtain input from multiple sources:\na data set called SYSIN,\na TSO terminal,\na local crt, or an operator's console.\nIf MZAP is invoked from a TSO terminal,\ninput can be supplied only form SYSIN or the terminal;\notherwise a DD statement may be supplied allocating a\n960 byte (12*80) local 2260 with line addressing and\nnon-destructive cursor\nor a 1920 byte (24*80) EBCDIC local 3270,\nwhich may be used for both input and output.\nInput, output, and attention from an operators\nconsole are performed via REPLY,\nWTO/WTOR, and MODIFY;\nthey are normally inactive if a CRT is assigned,\nbut an uncorrectable I/O error on the CRT will\nforce transfer of these functions (the operator may\nperform a MODIFY even when the CRT is operational).\n.sp 1\nInput is normally from a sequential data set,\nSYSIN. If SYSIN is not defined or is a DD DUMMY,\n\"console input mode\" is set.\nThis mode is also set by a CONSOLE statement read\nfrom SYSIN or by a MODIFY or attention with the text CONSOLE.\nInput is always translated to upper case.\nConsole mode is terminated, and control reverted to SYSIN,\nby an END statement;\nthis is permitted only when SYSIN is assigned.\n.sp 1\nOutput is normally to SYSPRINT.\nIf a 2260 or 3270 is assigned,\nall output except page headings will be displayed on the CRT;\nif in console input mode with no CRT assigned,\nthis output will be displayed via WTO/TPUT.\n.sp 1\nWhen a TSO terminal or a CRT is used,\nit is in one of two states: normal and attention.\nIn normal state, input is solicited in a device-dependent fashion:\n.in 10\n.sp 1\n.hi 12\n2260 local:\nBlanking the entry line and displaying an SMI;\nthe user keys in a command and depresses SHIFT and ENTER simultaneously.\n.sp 1\n3270 local:\nwriting a statement number, Blanking an entry line,\nand positioning the cursor;\nthe user enters a command and depresses ENTER.\n.sp 1\n2260 TSO: \u00ac\nWriting a statement number followed by an SMI;\nthe user enters a command and SHIFT/ENTER.\n.sp 1\n3270 TSO: \u00ac\nwriting a statement number and positioning the cursor;\nthe user enters a command and ENTER.\n.sp 1\nTSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nWriting a statement number;\nthe user enters a command and depresses RETURN, EOB, etc.,\naccording to the type of terminal.\n.sp 2\n.hi 0\n.in 5\nAttention state is entered in a device-dependent fashion:\n.in 10\n.hi 12\n.sp 1\nLocal 2260:\nSHIFT/ENTER within 1.5 seconds after\nline 11(bottom line) is updated;\n.sp 1\nLocal 3270:\nENTER or PA1 any time the keyboard is\nunlocked;\n.sp 1\nTSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nthe technique depends on type of terminal,\nTSO/TCAM generation,\nand the users last TERM command - it may be BREAK or\nmay be a simulated attention.\nAttention state is also entered automatically when in HOLD mode\n(see below).\n.sp 1\n.hi 0\n.in 5\nWhen in attention state,\nthe user will be prompted to key in an attention message by\nblanking an entry line and displaying \"EH ? \" followed by an SMI (>\b|)\n- a greater than sign (>) will be used on other than a 2260.\nThe prompt will be repeated after each attention message,\nallowing the user to key in as many messages as he wishes;\nattention state will be reset when he enters a null line\n(SHIFT/ENTER, SHIFT, CR, etc. with no preceeding text).\n.sp 2\n.hi 0\n.in 5\n.sp 2\nOutput to the CRT/terminal may be done in two modes:\nAUTO and HOLD;\noutput may be at any of four speeds:\nSLOW, HALFAST, FAST, or PAGE.\nIn AUTO mode, output occurs continously until input is\nrequired or the user enters attention state;\nin HOLD mode attention state is entered after each write\nand the user must enter a null line to continue.\n.sp 2\nOutput to a CRT will always be in full screen mode;\nthe oldest line on the screen will be indicated by a logical or\n(|).\nThe write will take place every time one, two, four, or twelve lines\n(1,4,8, or 24 for 3270) have been written,\ndepending on the speed option.\nIn PAGE mode, one line (two if a dump is in progress)\nwill be reserved on the screen,\nresulting in a net display of 11 (10 if a dump) lines per 2260 screen\nand 23 (22 if a dump) per 3270 screen.\nRegardless of the speed,\nthe current contents of the buffer will be written prior to\nsoliciting input or additional attention messages.\n.sp 2\nWhen a CRT is not assigned,\noperator input in batch (non-TSO) will be solicited by a WTOR;\nattention messages must be entered by giving the command\n\"MODIFY id,msg\" where id is the jobname or START id and\nmsg is the text of the attention message.\nSee section V for a description of START requirements.\n.pa\n.in 0\nIII. Attention/MODIFY messages\n.in 5\n.sp 1\nThe following attention messages are allowed;\nthey may be in lower case since MZAP translates to upper case:\n.sp 2\n.in 10\n.hi 12\n$HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndisplay list of valid nonpriveleged attention messages.\nThis function is forced if an invalid attention message is entered.\n.sp 1\nCON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nset console input mode\n.sp 1\nSTOP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nterminate dump or HELP\n.sp 1\n$HOLD \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nenter attention state after every write\n.sp 1\n.br\n$AUTO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\nrestore normal mode after $HOLD\n.sp 1\n$SLOW \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 12 writes/2260 screen, 24/3270.\nA write will occur for each output line.\n.sp 1\n$HALFAST \u00ac\u00ac\u00ac\ndo 6 writes/screen.\na write will occur for every 2 output lines(2260)\nor every 4 lines(3270)\n.sp 1\n$FAST \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 3 writes/screen.\nA write will occur for every 4 output lines(2260)\nor every 8 output lines(3270).\n.sp 1\n$PAGE \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\ndo 1 write/screen.\nIf a dump is in progress,\none line is reserved for the dump header.\nOne line is reserved as the entry line.\nA write will occur for every 10 or 11 output lines\n(3270: 22 or 23 output lines).\n.in 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MZAPMVS": {"ttr": 8708, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x03\\x01\\x19\\x18O\\x01\\x19\\x18O\\x14\\x10\\x00K\\x00K\\x00\\x00\\xe2`\\xd4\\xc5\\xe3\\xe9@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-07-03T00:00:00", "modifydate": "2019-07-03T14:10:03", "lines": 75, "newlines": 75, "modlines": 0, "user": "S-METZ"}, "text": "Porting MOREZAP (MZAP) to MVS\n\nI originally wrote MOREZAP (MZAP) for OS/360 in the expectation\nof discarding it once I had the use of DSS. I based the syntax\naround that of \"Superzap\" and COREZAP0, which allowed using the\nsame VER and REP statements in both programs but led to a\nclumsier syntax than I like. There are several areas that anybody\nupgrading the code to support MVS must address.\n\n1.      Please avoid forking if feasible; instead, use\n        conditional assembly statements for all changes in\n        support of MVS so that the Hercules community can use\n        the same source modules for older systems.\n\n2.      MZAP gets into key zero by exploiting an integrity\n        exposure in OS/360 and MVS; you will need to use APF\n        AC(1) and a MODESET instead.\n\n3.      There were no program objects in OS/360, OS/VS1 or OS/VS2\n        R1 (SVS). You will need to add code to resolve CSECT\n        locations within a program object.\n\n4.      MZAP resolves nucleus CSECTs by processing the scatter\n        load data in IEANUCxx. The way NIP loads nucleus CSECTs\n        has changed and you will need to write new code for MVS.\n\n5.      MZAP has statements to locate various system control\n        blocks; you will need to AIF out the ones that no longer\n        exist and may want to add in others.\n\n6.      MZAP processes patches in an atomic fashion. It collects\n        the VER and REP statements, then processes all of the VER\n        statements before any of the REP statements. It uses SSM\n        to serialize this processing. That works well in OS/360\n        except for MP65, and it works in SVS because SVS handles\n        disabled page faults. To support MVS you will need to\n        fix/unfix the affected pages and add a different\n        serialization method; even then you can't prevent code not\n        holding any locks from running on another processor.\n\n7.      MZAP supports a local 2260, but I can think of no reason\n        why you would want to upgrade that code for MVS. AIF it\n        out.\n\n8.      MZAP uses EXCP to control a non-SNA local 3270, with the\n        assistance of an attention exit. The intent was to allow\n        use of MZAP when it was not feasible to use TCAM, TSO or\n        VTAM. You will need to provide an attention exit for MVS\n        and possibly modify the code.\n\n9.      You may want to write code to allow direct use of VTAM\n        for 3270s. I don't see a need for TCP/IP.\n\n10.     MZAP supports use of the MCS consoles for input and\n        output. You will probably need to update that code to\n        deal with changes in, e.g., QEDIT, WTO.\n\n11.     MZAP can run under TSO. The TIOC support for full screen\n        3270 in SVS is subtly different form the VTIOC support in\n        MVS, and you will almost certainly need to add some code.\n\n12.     MZAP has code to interpret opcodes. Not only has IBM\n        added opcodes, it has added new classes of opcodes. You\n        can add new instructions in an existing class by simply\n        adding a new macro invocation to the existing table, but\n        for new classes you will need to upgrade both the code\n        that analyzes opcodes and the macro that generates table\n        entries.\n\n13.     As I recall I use DCBEXIT; review the code to see whether\n        the magic numbers make sense in the current environment.\n\nYou can contact me at Shmuel (Seymour J.) Metz <smetz3@gmu.edu>\nor 703-256-4764.\n\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MZAPVB": {"ttr": 8711, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x005\\x01\\x19\\x10o\\x01\\x19\\x10o\"G\\t\\x1a\\t\\x1a\\x00\\x00\\xe7\\xd4\\xc9\\xe3@@@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:47:35", "lines": 2330, "newlines": 2330, "modlines": 0, "user": "XMIT"}, "mimetype": "application/xmit", "datatype": "binary", "extension": ".xmi"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT988/FILE988.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT988", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}