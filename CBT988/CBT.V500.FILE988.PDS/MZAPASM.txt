./ ADD NAME=CVT      0100-19106-19106-1238-01304-01304-00000-MZAP78  17
*
*        %GOTO CVTL1;       /* BILINGUAL MAPPING
         MACRO
&CVTNAME CVT   &SYS=AOS2,&OPTIONS=(NOSLICE,INTERVAL,0),&TSO=NO,        *
               &PREFIX=NO,&FLAG=00,&FLAGB=00,&PATCH=NO,&REAL=0,        *
               &DSECT=NO,&RPS=NO,&CVTTZ=0,&CTLFLGS=00,&LIST=NO,        *
               &LOADBAL=NO       */
*%CVTL1 : ;
*/*                                                                  */
*/*      COMMUNICATION VECTOR TABLE                                  */
*/*                                                                  */
*/*      OS/VS2 RELEASE 1.6, 01/30/73, LEVEL=31                      */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      PL/S - DCL CVTPTR PTR                                       */
*/*      BAL  - DSECT=YES SHOULD BE SPECIFIED ON MACRO CALL EXCEPT   */
*/*             WHEN CALLED DURING SYSGEN TO CREATE CSECT.  CVT FOR  */
*/*             AOS/2 IS MAPPED UNLESS SYS=AOS1 IS SPECIFIED.  THE   */
*/*             PREFIX IS NOT MAPPED UNLESS PREFIX=YES IS SPECIFIED. */
*/*             A USING ON CVTMAP OR DSECT NAME WILL ESTABLISH       */
*/*             ADDRESSABILITY FOR ALL SYMBOLS EXCEPT IN THE 2       */
*/*             EXTENSIONS.  TO ESTABLISH ADDRESSABILITY FOR THE     */
*/*             OS - AOS COMMON EXTENSION, YOU SHOULD CODE           */
*/*                                                                  */
*/*             L     REG,CVTEXT1                                    */
*/*             USING CVTXTNT1,REG                                   */
*/*                                                                  */
*/*             TO ESTABLISH ADDRESSABILITY FOR THE AOS/1 - AOS/2    */
*/*             COMMON EXTENSION, YOU SHOULD CODE                    */
*/*                                                                  */
*/*             L     REG,CVTEXT2                                    */
*/*             USING CVTXTNT2,REG                                   */
*/*                                                                  */
*/*             WHERE REG IN EITHER CASE IS ANY REGISTER OTHER       */
*/*             THAN ZERO.                                           */
*/*                                                                  */
*/*             WHEN LISTING IS SUPPRESSED, YOU CAN DETERMINE WHICH  */
*/*             DSECT A SYMBOL IS IN BY USING THE STATEMENT NUMBER   */
*/*             IN THE DEFN COLUMN IN THE CROSS REFERENCE LISTING.   */
*/*             FOR EXAMPLE, ANY SYMBOL DEFINED BETWEEN THE          */
*/*             STATEMENT NUMBERS FOR CVTXTNT1 AND CVTXTNT2 IS IN    */
*/*             THE OS - AOS COMMON EXTENSION.                       */
*/*                                                                  */
*/*  F.E.'S                                                          */
*/*      MICROFICHE LISTING - CVT                                    */
*/*                                                                  */
*/*  DEVELOPERS                                                      */
*/*      BAL LISTING  - SPECIFY LIST=YES ON MACRO CALL               */
*/*      PL/S LISTING - SPECIFY %IHALIST='YES' BEFORE INCLUDE        */
*/*                                                                  */
*/*      FOR INTEGRATION, A LISTING MUST NOT BE REQUESTED UNLESS     */
*/*      YOUR MODULE CREATES THE CSECT.                              */
*
*%GOTO CVTL2;   /*
.*       CALLED DURING AOS/1 SYSGEN STAGE I BY SGIEA2CV
.*       CALLED DURING AOS/2 SYSGEN STAGE II BY IEAQBK
.*
.*             OPERATING SYSTEM OPTIONS
         LCLB  &CVTAOS1,&CVTAOS2
.*
.*             MULTIPROGRAMMING WITH A FIXED NUMBER OF PARTITION TASKS
&CVTAOS1 SETB  ('&SYS' EQ 'AOS1' OR '&SYS' EQ 'MFT' OR '&SYS' EQ 'INT')
.*
.*             MULTIPROGRAMMING WITH A VARIABLE NUMBER OF REGION TASKS
&CVTAOS2 SETB  ('&SYS' EQ 'AOS2' OR '&SYS' EQ 'MVT' OR '&SYS' EQ 'VMS')
.*
         PUSH  PRINT
         AIF   ('&LIST' EQ 'YES').CVT1A
         PRINT OFF
.CVT1A   ANOP
CVTPTR   EQU   16 -          ABSOLUTE ADDRESS OF POINTER TO CVT
         AIF   ('&PREFIX' EQ 'NO').CVT15
*
*              BEGINNING OF CVT PREFIX
*
         AIF   ('&DSECT' EQ 'NO').CVT10
CVTFIX   DSECT -             CVTMAP-256 - PREFIX
         DS    0F
         DS    CL248 -       RESERVED
         AGO   .CVT12
.CVT10   ANOP
         DS    0F
CVTFIX   EQU   *-248 -       CVTMAP-256
.CVT12   ANOP
         DS    H -           RESERVED
CVTMDL   DS    CL2 -         CPU MODEL NUMBER IN SIGNLESS PACKED
*                            DECIMAL, I.E., A MODEL 50 WOULD BE
*                            REPRESENTED AS 0050 HEX
         AIF   ('&DSECT' EQ 'NO').CVT13                          YM2188
CVTRELNO DS    0CL4 -        OS RELEASE NUMBER (CHAR)
CVTNUMB  DS    CL2 -         RELEASE NUMBER                      YM2188
CVTLEVL  DS    CL2 -         RELEASE LEVEL                       YM2188
         AGO   .CVT14                                            YM2188
.CVT13   ANOP
         IHBRELNO , -                                            YM2188
.CVT14   ANOP
*
*              END OF CVT PREFIX
*
         AGO   .CVT16
.CVT15   ANOP
*
*              BEGINNING OF CVT PROPER
*
         AIF   ('&DSECT' EQ 'NO').CVT16
CVT      DSECT , -
         AGO   .CVT18
.CVT16   ANOP
         DS    0F
.CVT18   ANOP
         AIF   ('&CVTNAME' EQ '').CVT01
&CVTNAME EQU   * -           CVTPTR CONTENT POINTS HERE
         AGO   .CVT02
.CVT01   ANOP
CVTMAP   EQU   * -           CVTPTR CONTENT POINTS HERE
.CVT02   ANOP
*
CVTTCBP  DC    V(IEATCBP) -  ADDR OF NEXT AND CURRENT TCB POINTER LIST
CVT0EF00 DC    V(IEA0EF00) - ADDR OF ROUTINE TO SCHEDULE
*                              ASYNCHRONOUS EXITS
CVTLINK  DC    V(IEFLINK) -  ADDR OF SYS1.LINKLIB DCB
CVTJOB   DC    V(IEFJOB) -   ADDR OF SYS1.JOBQE DCB
CVTBUF   DC    A(0) -        ADDR OF BUFFER FOR RESIDENT
*                              CONSOLE INTERRUPTION ROUTINE
CVTXAPG  DC    V(IECXAPG) -  ADDR OF IOS APPENDAGE VECTOR TABLE
CVT0VL00 DC    V(IEA0VL00) - ENTRY POINT ADDR OF ADDR VALIDITY CHECKING
*                              ROUTINE FOR SUPERVISOR
CVTPCNVT DC    V(IECPCNVT) - ENTRY POINT ADDR OF ROUTINE FOR CONVERTING
*                              RELATIVE TRACK ADDR TO ABSOLUTE
CVTPRLTV DC    V(IECPRLTV) - ENTRY POINT ADDR OF ROUTINE FOR CONVERTING
*                              ABSOLUTE TRACK ADDR TO RELATIVE
CVTILK1  DC    V(IECILK1) -  ADDR OF CHANNEL AND CONTROL UNIT SECTION
*                              IN UCB LOOKUP TABLE
CVTILK2  DC    V(IECILK2) -  ADDR OF UCB HALFWORD ADDR LIST SECTION
*                              IN UCB LOOKUP TABLE
CVTXTLER DC    V(IECXTLER) - ENTRY POINT ADDR TO XCTL ROUTINE
*                              FOR SYSTEM ERROR TRANSIENT AREA ROUTINES
CVTSYSAD DC    A(0) -        ADDR OF SYSTEM RESIDENCE VOLUME ENTRY
*                              IN UCB LOOKUP TABLE
CVTBTERM DC    V(IEA0AB00) - ENTRY POINT ADDR OF ABTERM ROUTINE
CVTDATE  DC    F'0' -        LOCAL DATE IN PACKED DECIMAL
CVTMSLT  DC    V(IEEMSER) -  ADDR OF MASTER COMMON AREA
*                              PLEASE USE CVTMSER INSTEAD TO ADDRESS
*                              MASTER SCHEDULER RESIDENT DATA AREA
CVTZDTAB DC    V(IECZDTAB) - ADDR OF I/O DEVICE CHARACTERISTIC TABLE
CVTXITP  DC    V(IECXITP) -  ADDR OF ERROR INTERPRETER ROUTINE
CVTDAR   DS    0A -          SAME AS CVTDARA BELOW               ICB370
CVTFLGS1 DC    B'0' -        FLAG BYTE                           ICB370
CVTDMPLK EQU   X'80' -       SVC DUMP IS IN PROGRESS             ICB370
CVTRSV01 EQU   X'40',,C'X' - RESERVED
CVTRSV02 EQU   X'20',,C'X' - RESERVED
CVTRSV03 EQU   X'10',,C'X' - RESERVED
CVTRSV04 EQU   X'08',,C'X' - RESERVED
CVTRSV05 EQU   X'04',,C'X' - RESERVED
CVTRSV06 EQU   X'02',,C'X' - RESERVED
CVTRSV07 EQU   X'01',,C'X' - RESERVED
CVTDARA  DC    AL3(0) -      ADDR OF SYS1.DUMP I/O CONTROL BLOCKS
*                            FOR DAMAGE ASSESSMENT ROUTINES (AOS/1)
*                            ADDRESS OF DCB FOR SYS1.DUMP DATA
*                            SET  (AOS/2)                        ICB370
.*
.*             CVT0FN00: AOS/1, AOS/2
.*
         AIF   (&CVTAOS2).CVT21
CVT0FN00 DC    V(IEA0FN00) - ENTRY POINT ADDR TO FINCH (AOS/1)
         AGO   .CVT22
.CVT21   ANOP
CVT0FN00 DC    A(0) -        RESERVED (AOS/2)
.CVT22   ANOP
.*
CVTEXIT  SVC   3 -           EXIT TO DISPATCHER
CVTBRET  BR    14 -          RETURN TO CALLER
CVTSVDCB DC    V(IEASVDCB) - ADDR OF SYS1.SVCLIB DCB
CVTTPC   DC    V(IEATPC) -   ADDR OF TIMER SUPERVISOR WORK AREA
CVTPBLDL DC    V(IECPBLDL) - BALR ENTRY POINT ADDR OF BLDL
.*
.*             CVTSJQ: AOS/1, AOS/2
.*
         AIF   (&CVTAOS2).CVT41
CVTSJQ   DC    V(IEESJQ) -   ADDR OF SELECTED JOB QUEUE (AOS/1)
         AGO   .CVT42
.CVT41   ANOP
CVTSJQ   DC    A(0) -        RESERVED (AOS/2)
.CVT42   ANOP
.*
CVTCUCB  DC    V(IEECUCB) -  ADDR OF TABLE CONTAINING CONSOLE UCB ADDR
.*
.*             CVTQTE00, CVTQTD00: INTERVAL TIMING, NONE
.*
         AIF   ('&OPTIONS(2)' EQ 'INTERVAL').CVT51
CVTQTE00 DC    A(0) -        RESERVED (NO INTERVAL TIMER)
CVTQTD00 DC    A(0) -        RESERVED (NO INTERVAL TIMER)
         AGO   .CVT52
.CVT51   ANOP
CVTQTE00 DC    V(IEAQTE00) - ADDR OF TIMER ENQUEUE ROUTINE
*                              FOR INTERVAL TIMER
CVTQTD00 DC    V(IEAQTD00) - ADDR OF TIMER DEQUEUE ROUTINE
*                              FOR INTERVAL TIMER
.CVT52   ANOP
.*
CVTSTB   DC    V(IECSTB) -   ADDR OF I/O DEVICE STATISTIC TABLE
.*
.*             CVTDCB, CVTDCBA: AOS/1, AOS/2
.*
         AIF   (NOT &CVTAOS1).CVT62
CVTDCB   DC    XL1'22' -     OPERATING SYSTEM
CVTRSV08 EQU   X'80',,C'X' - RESERVED
CVT1SSS  EQU   X'40' -       OPTION 1 (PCP) SSS
CVT2SPS  EQU   X'20' -       OPTION 2 (MFT) SPS, AOS/1
CVT4MS1  EQU   X'10' -       OPTION 4 (MVT) MS1, AOS/2
CVTRSV09 EQU   X'08',,C'X' - RESERVED
CVT4MPS  EQU   X'04' -       MODEL 65 MULTIPROCESSING
CVT6DAT  EQU   X'02' -       DYNAMIC ADDRESS TRANSLATION BY CPU
*                            (AOS/1, AOS/2)
CVTRSV10 EQU   X'01',,C'X' - RESERVED
CVTDCBA  DC    VL3(IFBDCB) - ADDR OF DCB FOR SER SYS1.LOGREC
         AGO   .CVT64
.CVT62   ANOP
CVTDCB   DC    XL1'12' -     OPERATING SYSTEM
CVTRSV08 EQU   X'80',,C'X' - RESERVED
CVT1SSS  EQU   X'40' -       OPTION 1 (PCP) SSS
CVT2SPS  EQU   X'20' -       OPTION 2 (MFT) SPS, AOS/1
CVT4MS1  EQU   X'10' -       OPTION 4 (MVT) MS1, AOS/2
CVTRSV09 EQU   X'08',,C'X' - RESERVED
CVT4MPS  EQU   X'04' -       MODEL 65 MULTIPROCESSING
CVT6DAT  EQU   X'02' -       DYNAMIC ADDRESS TRANSLATION BY CPU
*                            (AOS/1, AOS/2)
CVTRSV10 EQU   X'01',,C'X' - RESERVED
CVT8AOS2 EQU   CVT4MS1+CVT6DAT - AOS/2 SYSTEM
CVTDCBA  DC    VL3(IFBDCB) - ADDR OF DCB FOR SER SYS1.LOGREC
.CVT64   ANOP
.*
CVTIOQET DC    V(IECIOQET) - ADDR OF I/O QUEUE ELEMENT TABLE
CVTIXAVL DC    V(IECIXAVL) - ADDR OF I/O SUPERVISOR FREELIST POINTER
CVTNUCB  DC    A(0) -        LOWEST ADDRESS NOT IN NUCLEUS. ON PAGE BDY
CVTFBOSV DC    V(IEWFBOSV) - ADDR OF PROGRAM FETCH ROUTINE
CVT0DS   DC    V(IEA0DS) -   ENTRY POINT ADDR OF DISPATCHER
CVTILCH  DC    V(IECILCH) -  ADDR OF LOGICAL CHANNEL WORD TABLE
CVTIERLC DC    V(IECIERLC) - ADDR OF ASYNCHRONOUS EXIT QUEUE
CVTMSER  DC    V(IEEMSER) -  ADDR OF MASTER SCHEDULER RESIDENT
*                              DATA AREA
CVT0PT01 DC    V(IEA0PT01) - BRANCH ENTRY POINT ADDR OF POST ROUTINE
CVTRSV11 DS    A -           ** CVTTRMTB FIELD UNUSED IN AOS **
CVTHEAD  DC    V(IEAHEAD) -  ADDR OF FIRST TCB ON READY QUEUE
         AIF   (&CVTAOS2).CVT72
CVTMZ00  DC    A(0) -        HIGHEST ADDRESS IN VIRTUAL STORAGE
         AGO   .CVT73
.CVT72   ANOP
CVTMZ00  DC    X'00FFFFFF' - HIGHEST ADDRESS IN VIRTUAL STORAGE
.CVT73   ANOP
CVT1EF00 DC    A(0) -        ADDRESS OF ROUTINE WHICH CREATES IRB'S
*                            FOR EXITS
         AIF   (NOT &CVTAOS1).CVT83
CVTQOCR  DC    V(IEAQOCR) -  ADDR OF SEVENTH GFX PARM LIST WORD
*                              (0 IF GFX INACTIVE) AOS/1
         AGO   .CVT84
.CVT83   ANOP
CVTQOCR  DC    A(0) -        ADDR OF SEVENTH GFX PARM LIST WORD
*                              (0 IF GFX INACTIVE) AOS/2
.CVT84   ANOP
CVTQMWR  DC    V(IEFQMWR) -  ADDR OF QMGR COMMUNICATION DATA AREA
CVTSNCTR DC    H'0' -        SERIAL DATA SET SEQUENCE NUMBER COUNTER
CVTOPTA  DC    AL1(&FLAG) -  MISCELLANEOUS FLAGS
CVTCCH   EQU   X'80' -       CCH OPTION PRESENT                PTM 4686
CVTAPR   EQU   X'40' -       AUTOMATIC PATH RETRY --
*                              I/O RECOVERY MANAGEMENT
CVTDDR   EQU   X'20' -       DYNAMIC DEVICE RECONFIGURATION --
*                              I/O RECOVERY MANAGEMENT         PTM 4686
CVTNIP   EQU   X'10' -       NIP RUNNING
CVTRSV12 EQU   X'08',,C'X' - RESERVED
CVTRSV13 EQU   X'04',,C'X' - RESERVED
CVTASCII EQU   X'02' -       USAS(CI)I OPTION PRESENT
CVTXPFP  EQU   X'01' -       CPU HAS EXTENDED PRECISION FLOATING POINT
CVTOPTB  DC    AL1(&FLAGB) - MISCELLANEOUS FLAGS
CVTPROT  EQU   X'80' -       STORE PROTECTION SYSGENED (AOS/1)
CVTRSV14 EQU   X'40',,C'X' - RESERVED
CVTTOD   EQU   X'20' -       CPU HAS TIME OF DAY CLOCK
CVTNLOG  EQU   X'10' -       SYS1.LOGREC UNAVAILABLE FOR ERROR
*                            RECORDING                           ICB382
CVTAPTHR EQU   X'08' -       NIP SETS TO 1 WHEN DEVICE TESTING IS
*                            COMPLETE.  IF 1, IOS WILL USE AN ALTERNATE
*                            PATH TO A DEVICE ON CONDITION CODE 3.
*                            THIS IS RESET BY NIP WHEN THE LPA IS
*                            INITIALIZED.                        YM2670
CVTFP    EQU   X'04' -       FETCH PROTECT IS ACTIVE (AOS/1)     ICB427
CVTRSV16 EQU   X'02',,C'X' - RESERVED
CVTRSV17 EQU   X'01',,C'X' - RESERVED
.*
.*             CVTQCDSR, CVTQLPAQ: AOS/1, AOS/2
.*
         AIF   (&CVTAOS1).CVT91
CVTQCDSR DC    V(IEAQCDSR) - CDE SEARCH ROUTINE ADDR
CVTQLPAQ DC    V(IEAQLPAQ) - ADDRESS OF POINTER TO MOST RECENT ENTRY
*                            ON LPA CDE QUEUE
         AGO   .CVT92
.CVT91   ANOP
CVTQCDSR DC    A(0) -        CDE SEARCH ROUTINE ADDR
CVTQLPAQ DC    A(0) -        ADDRESS OF POINTER TO MOST RECENT ENTRY
*                            ON LPA CDE QUEUE
.CVT92   ANOP
CVTRSV18 DC    A(0) -        ** CVTMPCVT FIELD UNUSED IN AOS **
CVTSMCA  DC    A(0) -        ADDR OF SYSTEM MGT CONTROL AREA
.*
.*             CVTABEND: AOS/1, AOS/2
.*
         AIF   (NOT &CVTAOS2).CVTB1
CVTABEND DC    V(IEABEND) -  ADDR OF SECONDARY CVT FOR ABEND IN EOT
*                            (AOS/2)
         AGO   .CVTB2
.CVTB1   ANOP
CVTABEND DC    A(0) -        USED BY AN INTERNAL ABEND TRACE ROUTINE
*                            FOR DEBUG PURPOSES (OS/VS1)         XM0615
.CVTB2   ANOP
.*
CVTUSER  DC    A(0) -        A WORD TO THE USER
CVTMDLDS DC    A(0) -        RESERVED FOR MODEL-DEPENDENT SUPPORT
CVTQABST SVC   13 -          AN ABEND INSTRUCTION (AOS/2)
CVTLNKSC SVC   6 -           A LINK INSTRUCTION                  ICB369
.*
.*             CVTTSCE: TIME SLICING, NONE
.*
         AIF   (&CVTAOS2).CVTC1
         AIF   ('&OPTIONS(1)' NE 'TSLICE').CVTC1
CVTTSCE  DC    V(IEATSCE) -  ADDR OF FIRST TIME SLICE CONTROL ELEMENT
         AGO   .CVTC2
.CVTC1   ANOP
CVTTSCE  DC    A(0) -        ADDR OF FIRST TIME SLICE CONTROL ELEMENT
.CVTC2   ANOP
.*
.*             CVTPATCH: PATCH AREA, NONE
.*
         AIF   (&CVTAOS2).CVTC5
         AIF   ('&PATCH' NE 'YES').CVTC3
.CVTC5   ANOP
CVTPATCH DC    V(IEAPATCH) - ADDR OF FE PATCH AREA
         AGO   .CVTC4
.CVTC3   ANOP
CVTPATCH DC    A(0) -        ADDR OF FE PATCH AREA
.CVTC4   ANOP
.*
CVTRMS   DC    V(IGFRVT) -   ADDR OF RMS VECTOR TABLE
CVTTSCVT DS    0A -          ADDR OF TIME SHARING CVT (TSO)
CVTTSFLG DC    B'0' -        TIME SHARING FLAGS (TSO)
CVTTSRDY EQU   X'80' -       TIME SHARING READY
CVTRSV19 EQU   X'40',,C'X' - RESERVED
CVTRSV20 EQU   X'20',,C'X' - RESERVED
CVTRSV21 EQU   X'10',,C'X' - RESERVED
CVTRSV22 EQU   X'08',,C'X' - RESERVED
CVTRSV23 EQU   X'04',,C'X' - RESERVED
CVTRSV24 EQU   X'02',,C'X' - RESERVED
CVTRSV25 EQU   X'01',,C'X' - RESERVED
CVTTSCVB DC    AL3(0) -      ADDR OF TIME SHARING CVT (TSO)
         AIF   ('&RPS' EQ 'NO').CVTC6
CVT0SCR1 DC    V(IEC0SCR1) - ADDR OF RPS SECTOR CONVERTER
         AGO   .CVTC7
.CVTC6   ANOP
CVT0SCR1 DC    A(0) -        ADDR OF RPS SECTOR CONVERTER
.CVTC7   ANOP
CVTGTF   DS    0A -          GTF CONTROL WORD                    ICB312
CVTGTFST DC    AL1(0) -      GTF FLAG BYTES                      ICB312
CVTGTFS  EQU   X'C0' -       GTF STATUS                          ICB312
CVTGTFIN EQU   X'00' -       GTF NOT ACTIVE                      ICB312
CVTGTFSP EQU   X'80' -       GTF STOPPING                        ICB312
CVTGTFSR EQU   X'40' -       GTF STARTING                        ICB312
CVTGTFAC EQU   X'C0' -       GTF ACTIVE                          ICB312
CVTSTATE EQU   X'20' -       GTF IN CONTROL PROCESSING A HOOK    ICB312
CVTTMODE EQU   X'10' -       IF 0 - MODE=INT
*                            IF 1 - MODE=EXT                     ICB312
CVTFORM  EQU   X'08' -       FORMAT TRACE TABLE AT ABEND         ICB312
CVTUSR   EQU   X'04' -       TRACE=USR SPECIFIED                 ICB312
CVTRSV26 EQU   X'02',,C'X' - RESERVED
CVTRSV27 EQU   X'01',,C'X' - RESERVED
         AIF   (&CVTAOS2).CVTG1
CVTGTFA  DC    VL3(HHLHCTQ) -ADDRESS OF MONITOR CALL VECTOR
*                            TABLE                             PTM 2828
         AGO   .CVTG2
.CVTG1   ANOP
CVTGTFA  DC    VL3(AHLHCTQ) -ADDRESS OF MONITOR CALL VECTOR
*                            TABLE                               ICB458
.CVTG2   ANOP
CVTAQAVT DS    0A -          PTR TO WORD CONTAINING ADDR OF
*                            TCAM ADDRESS VECTOR TABLE
CVTTCMFG DC    X'00' -       TCAM FLAGS
CVTTCRDY EQU   X'80' -       TCAM RUNNING (AOS/2)
CVTRSV28 EQU   X'40',,C'X' - RESERVED
CVTRSV29 EQU   X'20',,C'X' - RESERVED
CVTRSV30 EQU   X'10',,C'X' - RESERVED
CVTRSV31 EQU   X'08',,C'X' - RESERVED
CVTRSV32 EQU   X'04',,C'X' - RESERVED
CVTRSV33 EQU   X'02',,C'X' - RESERVED
CVTRSV34 EQU   X'01',,C'X' - RESERVED
CVTAQAVB DC    AL3(0) -      SAME AS CVTAQVT ABOVE
CVTTATA  DS    0A -          ADDR OF TCB ADDR TAB (P0 TCB POINTER)
CVTTSKS  DC    FL1'0' -      MAXIMAL NUMBER OF TCB ADDR TAB ENTRIES
CVTTAT   DC    AL3(0) -      ADDR OF TCB ADDR TAB (P0 TCB POINTER)
         AIF   (NOT &CVTAOS1).CVTP1
CVTATER  DS    0A -          SAME AS CVTATERA BELOW              ICB346
.CVTP1   ANOP
.*
.*             CVTSYST: OPTIONS(3)
.*
         AIF   ('&OPTIONS(3)' EQ '').CVT85
CVTSYST  DC    AL1(&OPTIONS(3)) NUMBER OF SYSGENED TCB ADDR TAB ENTRIES
         AGO   .CVT86
.CVT85   ANOP
CVTSYST  DC    FL1'0' -       NUMBER OF SYSGENED TCB ADDR TAB ENTRIES
.CVT86   ANOP
.*
         AIF   (NOT &CVTAOS1).CVTP2
CVTATERA DC    VL3(IEASETCB) ADDRESS OF SYSTEM ERROR TCB         ICB346
         AGO   .CVTP3
.CVTP2   ANOP
         DC    AL3(0) -      RESERVED
.CVTP3   ANOP
CVTEXT1  DC    A(CVTXTNT1) - ADDRESS OF OS-AOS COMMON EXTENSION  ICB421
CVTCBSP  DC    A(0) -        ADDRESS OF ACCESS METHOD CONTROL BLOCK
*                            STRUCTURE.  IF ZERO, IT INDICATES THAT
*                            THE ACCESS METHOD MASTER CATALOG IS NOT
*                            OPEN'ED AND AVAILABLE               ICB436
CVTPURG  DS    0A -          POINTER TO SUBSYSTEM PURGE ROUTINE  ICB330
CVTRSV35 DS    XL1 -         RESERVED                            ICB330
CVTPURGA DC    AL3(0) -      ADDRESS OF SUBSYSTEM PURGE ROUTINE  ICB330
CVTAMFF  DC    XL4'00' -     RESERVED FOR ACCESS METHOD FLAGS    ICB436
CVTQMSG  DS    0A -          POINTER TO INFORMATION TO BE PRINTED
*                            BY ABEND                            ICB307
CVTRSV36 DS    XL1 -         RESERVED                            ICB307
CVTQMSGA DC    VL3(IEAQMSGS) ADDRESS OF INFORMATION TO BE PRINTED
*                            BY ABEND                            ICB449
CVTDMSR  DS    0A -          SAME AS CVTDMSRA BELOW              ICB346
CVTRSV37 DS    X -           RESERVED                            ICB346
         AIF   (&CVTAOS2).CVTP4
CVTDMSRA DC    VL3(IFG019RA) ADDRESS OF OPEN/CLOSE/EOV SUPERVISORY
*                            ROUTINE                             ICB346
         AGO   .CVTP5
.CVTP4   ANOP
CVTDMSRA DC    AL3(0) -      ADDRESS OF OPEN/CLOSE/EOV SUPERVISORY
*                            ROUTINE                             YM2707
.CVTP5   ANOP
CVTRSV38 DS    F -           RESERVED
CVTRSV39 DS    F -           RESERVED
*
*              AOS/1 - AOS/2 COMMON SECTION
*
CVTREAL  DC    A(&REAL) -    ADDRESS OF THE VIRTUAL STORAGE BYTE
*                            FOLLOWING THE HIGHEST VIRTUAL=REAL
*                            STORAGE ADDRESS                     ICB368
CVTPTRV  DC    V(IEAPTRV) -  ADDRESS OF PAGING SUPERVISOR GENERAL
*                            ROUTINE TO TRANSLATE REAL ADDRESSES TO
*                            VIRTUAL
CVTMODE  DC    V(IEAMODBR) - ADDRESS OF ROUTINE TO CHANGE SYSTEM MASK
         AIF   (&CVTAOS2).CVTJ1
CVTJESCT DS    A -           ADDRESS OF JES CONTROL TABLE
CVTJEPS  DC    V(IEAJPTCB) - ADDRESS OF JEPS MONITOR TCB (OS/VS1)YM2702
         AGO   .CVTJ2
.CVTJ1   ANOP
CVTJESCT DC    V(IEFJESCT) - ADDRESS OF JES CONTROL TABLE        ICB342
         DS    A -           RESERVED (WAS CVTJEPS) (OS/VS2)     YM2702
.CVTJ2   ANOP
CVTTZ    DC    F'&CVTTZ' -   DIFFERENCE BETWEEN LOCAL TIME AND
*                            GREENWICH MEAN TIME
*                            (BIT 31 = 1.048576 SEC)
CVTMCHPR DS    A -           ADDRESS OF MACHINE CHECK PARAMETER LIST
CVTEORM  DS    A -           HIGHEST REAL ADDRESS IN MAIN STORAGE
CVTERPV  DC    V(IEAERPV) -  POINTER TO SUBROUTINE IN IOS TO CONVERT
*                            CCW DATA ADDRESSES TO VIRTUAL
*                            ADDRESSES                           ICB367
         AIF   (&CVTAOS2).CVTJ3
         AIF   ('&LOADBAL' EQ 'YES').CVTJ3
CVTINTLA DC    A(0) -        ADDRESS OF AREA CONTAINING INTERVAL LENGTH
*                            AT WHICH I/O LOAD BALANCING EXCP COUNTS
*                            AND RATES ARE COMPUTED              XM0277
         AGO   .CVTJ4
.CVTJ3   ANOP
CVTINTLA DC    V(IEAEXINT) - ADDRESS OF AREA CONTAINING INTERVAL LENGTH
*                            AT WHICH I/O LOAD BALANCING EXCP COUNTS
*                            AND RATES ARE COMPUTED              ICB341
.CVTJ4   ANOP
CVTAPF   DS    0A -          SAME AS CVTAPFA BELOW               ICB360
CVTRSV40 DS    X -           RESERVED                            ICB360
CVTAPFA  DC    VL3(IEAVTEST) ADDRESS OF BRANCH ENTRY POINT IN APF
*                            ROUTINE
CVTEXT2  DS    0A -          ADDRESS OF AOS/1 - AOS/2 COMMON
*                            EXTENSION                           ICB330
CVTRSV41 DS    XL1 -         RESERVED                            ICB330
CVTEXT2A DC    AL3(CVTXTNT2) SAME AS CVTEXT2 ABOVE               ICB330
CVTHJES  DS    0A -          SAME AS CVTHJESA BELOW              ICB454
CVTRSV42 DS    X -           RESERVED                            ICB454
CVTHJESA DC    AL3(0) -      ADDRESS OF OPTIONAL JOB ENTRY SYSTEM
*                            COMMUNICATION VECTOR TABLE          ICB454
CVTRSV43 DS    H -           RESERVED
CVTRSV44 DS    H -           RESERVED
CVTRSV45 DS    F -           RESERVED
CVTRSV46 DS    F -           RESERVED
         AIF   (&CVTAOS2).CVTV2
*
*              AOS/1 OVERLAY
*
CVTPGSIA DC    V(IHAPGSIA) - ADDRESS OF PAGING SUPERVISOR INFORMATION
*                            AREA
CVTPCVT  DC    V(IEAPCVT) -  ADDRESS OF PAGED CVT EXTENSION
CVTA1F1  DS    B -           PAGE FAULT FLAGS
CVTPFSW  EQU   X'80' -       ONLY PAGING TASK MAY BE DISPATCHED
CVTSRSW  EQU   X'40' -       NO TASK EXCEPT PAGING TASK MAY EXECUTE
*                            DISABLED CODE
CVTRSV47 EQU   X'20',,C'X' - RESERVED
CVTRSV48 EQU   X'10',,C'X' - RESERVED
CVTRSV49 EQU   X'08',,C'X' - RESERVED
CVTRSV50 EQU   X'04',,C'X' - RESERVED
CVTRSV51 EQU   X'02',,C'X' - RESERVED
CVTRSV52 EQU   X'01',,C'X' - RESERVED
CVTSYSK  DS    B -           SYSTEM LOCK.  IF NOT ZERO, ONLY PAGING
*                            TASK MAY BE DISPATCHED
CVTRSV53 EQU   X'80',,C'X' - RESERVED
CVTRSV54 EQU   X'40',,C'X' - RESERVED
CVTRSV55 EQU   X'20',,C'X' - RESERVED
CVTRSV56 EQU   X'10',,C'X' - RESERVED
CVTSLKR  EQU   X'08' -       MACHINE CHECK HANDLING IS IN
*                            PROGRESS                            ICB320
CVTSLKQ  EQU   X'04' -       SQA EXHAUSTED
CVTSLKP  EQU   X'02' -       LAST PCB USED
CVTSLKO  EQU   X'01' -       A DISABLED ROUTINE HAS PRODUCED A PAGE
*                            FAULT
CVTSULK  DS    H -           SUPERVISOR LOCK.  NUMBER OF TASKS
*                            ATTEMPTING TO EXECUTE DISABLED CODE.  IF
*                            NOT ZERO, ONLY ENABLED TASKS MAY RUN.
CVTSMF   DC    V(SMFTCBIT) - ADDRESS OF SMF TCB                  ICB395
CVTPNWFR DC    V(IEAFNPAN) - ADDRESS OF ROUTINE WHICH FREES THE
*                            'EMERGENCY' WORK AREA (ICB413)    PTM 2452
CVTDDCE  DC    V(IEADDCE) -  ADDRESS OF DYNAMIC DISPATCHER CONTROL
*                            ELEMENT                             ICB466
CVTRSV57 DS    H -           RESERVED
CVTRSV58 DS    H -           RESERVED
CVTSTOA  DS    F -           SAVE AREA FOR THE REAL STORAGE ADDRESS OF
*                            THE SEGMENT TABLE ORIGIN            ICB496
CVTRSV60 DS    F -           RESERVED
CVTRSV61 DS    F -           RESERVED
CVTRSV62 DS    F -           RESERVED
         AGO   .CVTV4
.CVTV2   ANOP
*
*              AOS/2 OVERLAY
*
CVTRSVA2 DS    A -           RESERVED                            ICB339
CVTLPDSR DC    V(IEAVVMSR) - ADDRESS OF LPA DIRECTORY SEARCH ROUTINE
CVTPVTP  DC    V(CSECPVT) -  ADDRESS OF PAGE VECTOR TABLE
CVTLPDIA DS    0A -          ADDRESS OF LPA DIRECTORY.  ON PAGE BDY
CVTDIRST DS    B -           FLAG BYTE
CVTDICOM EQU   X'80' -       LPA DIRECTORY HAS BEEN INITIALIZED BY NIP
CVTRSV63 EQU   X'40',,C'X' - RESERVED
CVTRSV64 EQU   X'20',,C'X' - RESERVED
CVTRSV65 EQU   X'10',,C'X' - RESERVED
CVTRSV66 EQU   X'08',,C'X' - RESERVED
CVTRSV67 EQU   X'04',,C'X' - RESERVED
CVTRSV68 EQU   X'02',,C'X' - RESERVED
CVTRSV69 EQU   X'01',,C'X' - RESERVED
CVTLPDIR DS    AL3 -         ADDRESS OF LPA DIRECTORY.  ON PAGE BDY
CVTPAGE1 DS    A -           ADDRESS OF DCB FOR PRIMARY PAGING DATA SET
CVTPGSUP DC    V(IHAPGTCB) - ADDRESS OF TCB FOR PAGING SUPERVISOR
CVTSLIDA DS    0CL4 -        IDENTITY OF TCB CAUSING SUPERVISOR LOCK
*                            BYTE (CVTSYLK) TO BE SET OR IDENTITY OF
*                            TCB THAT SECOND EXIT PROCESSING IS FOR
*                            WHEN CVTSEIC=1
CVTSYLK  DS    C -           SUPERVISOR LOCK.  ONLY ENABLED TASKS MAY
*                            BE DISPATCHED
CVTSYLKS EQU   X'FF' -       SET LOCK BYTE
CVTSYLKR EQU   X'00' -       RESET LOCK BYTE
CVTSLID  DS    CL3 -         SAME AS CVTSLIDA ABOVE
CVTSER   DS    0A -          SAME AS CVTSERA BELOW
CVTSEFLG DS    B -           SECOND EXIT FLAGS
CVTSEIC  EQU   X'80' -       INDICATES THAT PAGING SUPERVISOR HAS
*                            BRANCHED TO A SECOND EXIT ROUTINE
CVTRSV70 EQU   X'40',,C'X' - RESERVED
CVTRSV71 EQU   X'20',,C'X' - RESERVED
CVTRSV72 EQU   X'10',,C'X' - RESERVED
CVTRSV73 EQU   X'08',,C'X' - RESERVED
CVTRSV74 EQU   X'04',,C'X' - RESERVED
CVTRSV75 EQU   X'02',,C'X' - RESERVED
CVTRSV76 EQU   X'01',,C'X' - RESERVED
CVTSERA  DS    AL3 -         SECOND EXIT ROUTINE ADDRESS THAT WILL BE
*                            BRANCHED TO BY ABTERM PROLOGUE SHOULD
*                            THE SECOND EXIT ROUTINE PROGRAM CHECK
CVTSEG   DS    0CL16 -       SEGMENT TABLE INFORMATION
CVTSEGA  DS    A -           VIRTUAL ADDRESS OF USER SEGMENT TABLE
CVTSEGB  DS    A -           VIRTUAL ADDRESS OF SYSTEM SEGMENT TABLE
CVTSEGC  DS    0A -          REAL ADDRESS OF USER SEGMENT TABLE
CVTSEGLC DC    X'10' -       LENGTH IN 64-BYTE UNITS OF USER SEGMENT
*                            TABLE
CVTSEGCA DS    AL3 -         REAL ADDRESS OF USER SEGMENT TABLE
CVTSEGD  DS    0A -          REAL ADDRESS OF SYSTEM SEGMENT TABLE
CVTSEGLD DS    FL1 -         LENGTH IN 64-BYTE UNITS OF SYSTEM SEGMENT
*                            TABLE
CVTSEGDA DS    AL3 -         REAL ADDRESS OF SYSTEM SEGMENT TABLE
CVTRSV77 DS    X -           RESERVED
CVTSPVLK DS    FL1 -         NUMBER OF TASKS WHICH HAVE TERMINATED
*                            WHILE OWNING SUPERVISOR LOCK WITHOUT
*                            OPERATOR HAVING YET BEEN NOTIFIED
CVTCTLFG DC    AL1(&CTLFLGS) SYSTEM CONTROL FLAGS
CVTPSIC  EQU   X'80' -       PAGING SUPERVISOR IN CONTROL
CVTAPGB  EQU   X'40' -       APG IS ACTIVE                       ICB339
CVTT1DSP EQU   X'20' -       DISABLED PAGE FAULT OCCURRED DURING
*                            TYPE 1 SVC                         YA01802
CVTDSTAT EQU   X'10' -       DEVSTAT OPTION IN EFFECT.  DEVICE ADDRESS
*                            FOR 2319-3330-2314 CAN VARY ACROSS SYSTEMS
CVTRSV79 EQU   X'08',,C'X' - RESERVED
CVTRSV80 EQU   X'04',,C'X' - RESERVED
CVTGTRCE EQU   X'02' -       GTF HAS SUPPRESSED SUPERVISOR TRACE ICB446
CVTSDTRC EQU   X'01' -       SVC DUMP HAS SUPPRESSED SUPERVISOR TRACE
*                                                                ICB446
CVTAPG   DS    FL1 -         DISPATCHING PRIORITY OF APG.        ICB339
CVTTRACE BR    11 -          BRANCH ON REGISTER INSTRUCTION.  SET BY
*                            NIP.  REGISTER TEN FOR TRACE.  REGISTER
*                            ELEVEN FOR NO TRACE
CVTTRAC2 BR    11 -          THIS ALLOWS FOR SUPPRESSING TRACE
*                            DYNAMICALLY BY SETTING CONDITION CODE
*                            MASK TO ZERO IN FIRST INSTRUCTION
*                            (CVTTRACE)
CVTRSCN  DC    V(IEATRSCN) - ADDRESS OF ROUTINE TO SCAN TCB TREE
CVTTAS   DC    A(0) -        ADDRESS OF ROUTINE TO TRANSFER ADDRESS
*                            SPACE                               YM2706
CVTPVALD DC    V(IEA0VL02) - ADDRESS OF ROUTINE TO CHECK ADDRESSES AS
*                            BEING IN A REGION
CVTSHRVM DS    A -           LOWEST ADDRESS OF SHARED VIRTUAL STORAGE
*                            AREA.  THIS ADDRESS WILL BE EITHER THE
*                            BEGINNING OF LPA DIRECTORY OR THE
*                            BEGINNING OF LPA UPDATE AREA IF 'MLPA'
*                            OPTION WAS USED AT SUPERVISOR
*                            INITIALIZATION
CVT0VL01 DC    V(IEA0VL01) - ENTRY POINT ADDRESS OF VALIDITY CHECK
*                            ROUTINE (IEA0VL01) USED TO COMPARE
*                            PROTECT KEY OF AN ADDRESS WITH TCB
*                            PROTECT KEY
CVTPFIXQ DC    V(IEAPFIXQ) - BRANCH ENTRY TO IEAPFIXQ, THE FIX-QUIESCE
*                            ROUTINE USED BY TSO BEFORE SWAP TO FREE
*                            ALL SVC FIXES                       ICB412
CVTPFIXR DC    V(IEAPFIXR) - BRANCH ENTRY TO IEAPFIXR, THE FIX-RESTORE
*                            ROUTINE USED BY TSO AFTER SWAP (INVERSE OF
*                            FIX-QUIESCE)                        ICB412
CVTPFIXP DC    V(IEAPFIXP) - BRANCH ENTRY TO IEAPFIXP, THE FIX-PURGE
*                            ROUTINE USED BY STAE, ABEND, ETC., TO GET
*                            RID OF OUTSTANDING FIX REQUESTS     ICB412
CVTPTCD  DC    V(IEAPTCD) -  BRANCH ENTRY TO IEAPTCD, THE PAGE-TABLE-
*                            CREATE-DESTROY ROUTINE USED BY TSO
*                            LOGOFF IN DOING A PSEUDO-FREEPART   ICB412
CVTSYSWT DC    V(SYSWSAVE) - ADDRESS OF THE SMF SYSTEM WAIT TIME
*                            COLLECTION AREA                     ICB469
CVTRSV81 DS    H -           RESERVED
CVTRSV82 DS    H -           RESERVED
CVTRSV83 DS    F -           RESERVED
CVTRSV84 DS    F -           RESERVED
CVTRSV85 DS    F -           RESERVED
CVTRSV86 DS    F -           RESERVED
.CVTV4   ANOP
*
*              OS - AOS COMMON EXTENSION
*              ADDRESS OF EXTENSION IS IN CVTEXT1
*
         AIF   ('&DSECT' EQ 'NO').CVTW1
CVTXTNT1 DSECT
         AGO   .CVTW2
.CVTW1   ANOP
CVTXTNT1 EQU   * -           START OF OS - AOS EXTENSION         ICB421
.CVTW2   ANOP
CVTFACHN DC    A(0) -        ADDRESS OF CHAIN OF DCB FIELD AREAS
*                            (ISAM)                              ICB421
CVTRSV87 DS    F -           RESERVED
CVTRSV88 DS    F -           RESERVED
*
*              AOS/1 - AOS/2 COMMON EXTENSION
*              ADDRESS OF EXTENSION IS IN CVTEXT2
*
         AIF   ('&DSECT' EQ 'NO').CVTW3
CVTXTNT2 DSECT
         AGO   .CVTW4
.CVTW3   ANOP
CVTXTNT2 EQU   * -           START OF AOS/1 - AOS/2 EXTENSION    ICB330
.CVTW4   ANOP
CVTDSSV  DS    0A -          ADDRESS OF THE DSS VECTOR TABLE     ICB313
CVTRSV89 DS    XL1 -         RESERVED                            ICB313
CVTDSSVA DC    VL3(IQADSV00) ADDRESS OF THE DSS VECTOR TABLE     ICB393
CVTNUCLS DS    C -           USED TO IDENTIFY THE NUCLEUS MEMBER
*                            NAME                                ICB322
CVTRSV90 DS    B -           RESERVED
CVTRSV9A EQU   X'80',,C'X' - RESERVED
CVTRSV9B EQU   X'40',,C'X' - RESERVED
CVTRSV9C EQU   X'20',,C'X' - RESERVED
CVTRSV9D EQU   X'10',,C'X' - RESERVED
CVTRSV9E EQU   X'08',,C'X' - RESERVED
CVTRSV9F EQU   X'04',,C'X' - RESERVED
CVTRSV9G EQU   X'02',,C'X' - RESERVED
CVTRSV9H EQU   X'01',,C'X' - RESERVED
CVTRSV91 DS    H -           RESERVED
CVTDEBVR DC    V(IFGDEBVR) - ADDRESS OF BRANCH ENTRY POINT OF DEBCHK
*                            VERIFY ROUTINE (ICB380)             XM9028
CVTRSV92 DS    F -           RESERVED
CVTRSV93 DS    F -           RESERVED
CVTRSV94 DS    F -           RESERVED
CVTQID   DS    0A -          SAME AS CVTQIDA BELOW               ICB381
CVTRSV95 DC    XL1'00' -     RESERVED                            ICB381
CVTQIDA  DC    AL3(0) -      ADDRESS OF QID TABLE PREFIX         ICB381
CVTOLTEP DS    A -           POINTER TO CONTROL BLOCK CREATED BY SVC 59
*                            TO POINT TO PSEUDO-DEB'S            ICB423
CVTRSV96 DS    H -           RESERVED
CVTRSV97 DS    H -           RESERVED
CVTRSV98 DS    F -           RESERVED
CVTRSV99 DS    F -           RESERVED
CVTRSVA0 DS    F -           RESERVED
CVTRSVA1 DS    F -           RESERVED
*
*              END OF CVT
         POP   PRINT
         MEND  , */
* %CVTL2  :  ;
*%IF IKEPLS=''  %THEN
*    %GOTO CVTL3;
*% DEACTIVATE PUSH,POP,OFF;
*%IHALPUSH='@LIST PUSH';
*%IHALPOP='@LIST POP';
*%IHALOFF='@LIST OFF';
*IHALPUSH;
*%IF IHALIST='YES'  %THEN
*    %GOTO CVTL3;
*IHALOFF;
*%CVTL3:;
* /*                   CVT PROPER                                    */
*
* DECLARE
*   1 CVTMAP   BASED(CVTPTR) BDY(WORD),
*    2 CVTTCBP  PTR(31),             /* PTR TO ADDRESSES FOR NEXT
*                                       AND CURRENT TCB              */
*    2 CVT0EF00 PTR(31),             /* ADDR OF ROUTINE TO SCHEDULE
*                                       ASYNCHRONOUS EXITS           */
*    2 CVTLINK  PTR(31),             /* ADDR OF DCB FOR SYS1.LINKLIB */
*    2 CVTJOB   PTR(31),             /* ADDR OF WORK QUEUE CONTROL
*                                       BLOCKS                       */
*    2 CVTBUF   PTR(31),             /* ADDR OF BUFFER FOR RESIDENT
*                                       CONSOLE INTERRUPTION ROUTINE */
*    2 CVTXAPG  PTR(31),             /* ADDR OF IOS APPENDAGE TABLE  */
*    2 CVT0VL00 PTR(31),             /* ENTRY POINT ADDR OF ADDR
*                                       VALIDITY CHECKING ROUTINE    */
*    2 CVTPCNVT PTR(31),             /* ENTRY POINT ADDR OF ROUTINE
*                                       FOR CONVERTING RELATIVE
*                                       TRACK ADDR TO ABSOLUTE       */
*    2 CVTPRLTV PTR(31),             /* ENTRY POINT ADDR OF ROUTINE
*                                       FOR CONVERTING ABSOLUTE
*                                       TRACK ADDR TO RELATIVE       */
*    2 CVTILK1  PTR(31),             /* ADDR OF CHANNEL AND CONTROL
*                                       UNIT SECTION IN UCB LOOKUP
*                                       TABLE                        */
*    2 CVTILK2  PTR(31),             /* ADDR OF UCB ADDR LIST
*                                       SECTION IN UCB LOOKUP TABLE  */
*    2 CVTXTLER PTR(31),             /* ENTRY POINT ADDR TO XCTL
*                                       ROUTINE FOR SYSTEM ERROR
*                                       ROUTINES                     */
*    2 CVTSYSAD PTR(31),             /* ADDR OF SYSTEM RESIDENCE
*                                       VOLUME ENTRY IN UCB TABLE    */
*    2 CVTBTERM PTR(31),             /* ENTRY POINT ADDR OF ABTERM
*                                       ROUTINE                      */
*    2 CVTDATE  CHAR(4) BDY(WORD),   /* LOCAL DATE IN PACKED DECIMAL */
*    2 CVTMSLT  PTR(31),             /* ADDR OF MASTER COMMON AREA
*                                       PLEASE USE CVTMSER INSTEAD
*                                       TO ADDRESS MASTER SCHEDULER
*                                       RESIDENT DATA AREA           */
*    2 CVTZDTAB PTR(31),             /* ADDR OF I/O DEVICE
*                                       CHARACTERISTIC TABLE         */
*    2 CVTXITP  PTR(31),             /* ADDR OF ERROR INTERPRETER
*                                       ROUTINE                      */
*    2 CVTDAR   PTR(31),             /* SAME AS CVTDARA BELOW  ICB370*/
*     3 CVTFLGS1 BIT(8),             /* FLAG BYTE              ICB370*/
*      4 CVTDMPLK BIT(1),            /* SVC DUMP IS IN PROGRESS
*                                                              ICB370*/
*      4 CVTRSV01 BIT(1),            /* RESERVED                     */
*      4 CVTRSV02 BIT(1),            /* RESERVED                     */
*      4 CVTRSV03 BIT(1),            /* RESERVED                     */
*      4 CVTRSV04 BIT(1),            /* RESERVED                     */
*      4 CVTRSV05 BIT(1),            /* RESERVED                     */
*      4 CVTRSV06 BIT(1),            /* RESERVED                     */
*      4 CVTRSV07 BIT(1),            /* RESERVED                     */
*     3 CVTDARA  PTR(24),            /* ADDRESS OF SYS1.DUMP I/O
*                                       CONTROL BLOCKS FOR DAMAGE
*                                       ASSESSMENT ROUTINES  (AOS/1)
*                                       ADDRESS OF DCB FOR SYS1.DUMP
*                                       DATA SET  (AOS/2)      ICB370*/
*    2 CVT0FN00 PTR(31),             /* ENTRY POINT ADDR TO FINCH    */
*    2 CVTEXIT  CHAR(2) BDY(WORD),   /* AN SVC 3 INSTRUCTION         */
*    2 CVTBRET  CHAR(2) BDY(WORD,3), /* A BCR 15,14 INSTRUCTION      */
*    2 CVTSVDCB PTR(31),             /* ADDR OF DCB FOR SYS1.SVCLIB  */
*    2 CVTTPC   PTR(31),             /* ADDR OF TIMER SUPERVISOR
*                                       WORK AREA                    */
*    2 CVTPBLDL PTR(31),             /* BRANCH AND LINK ENTRY POINT
*                                       TO BLDL ROUTINE              */
*    2 CVTSJQ   PTR(31),             /* ADDR OF SELECTED JOB QUEUE   */
*    2 CVTCUCB  PTR(31),             /* ADDR OF TABLE WITH CONSOLE
*                                       UCB ADDR                     */
*    2 CVTQTE00 PTR(31),             /* ADDR OF TIMER ENQUEUE
*                                       ROUTINE                      */
*    2 CVTQTD00 PTR(31),             /* ADDR OF TIMER DEQUEUE
*                                       ROUTINE                      */
*    2 CVTSTB   PTR(31),             /* ADDR OF I/O DEVICE STATISTIC
*                                       TABLE                        */
*    2 CVTDCB   CHAR(1) BDY(WORD),   /* OPERATING SYSTEM
*                                       CONFIGURATION                */
*      4 CVTRSV08 BIT(1),            /* RESERVED                     */
*      4 CVT1SSS  BIT(1),            /* - PCP                        */
*      4 CVT2SPS  BIT(1),            /* - MFT, AOS/1                 */
*      4 CVT4MS1  BIT(1),            /* - MVT, AOS/2                 */
*      4 CVTRSV09 BIT(1),            /* RESERVED                     */
*      4 CVT4MPS  BIT(1),            /* - MULTIPROCESSING            */
*      4 CVT6DAT  BIT(1),            /* DYNAMIC ADDRESS TRANSLATION
*                                       BY CPU (AOS/1, AOS/2)        */
*      4 CVTRSV10 BIT(1),            /* RESERVED                     */
*%DCL CVT8AOS2 CHAR;
*%CVT8AOS2='''12''X';                /* AOS/2 SYSTEM                 */
*    2 CVTDCBA  PTR(24),             /* ADDR OF DCB FOR SYS1.LOGREC  */
*    2 CVTIOQET PTR(31),             /* ADDR OF REQUEST ELEMENT
*                                       TABLE                        */
*    2 CVTIXAVL PTR(31),             /* ADDR OF I/O SUPERVISOR'S
*                                       FREELIST POINTER             */
*    2 CVTNUCB  PTR(31),             /* LOWEST ADDRESS NOT IN
*                                       NUCLEUS.  ON PAGE BDY        */
*    2 CVTFBOSV PTR(31),             /* ADDR OF PROGRAM FETCH
*                                       ROUTINE                      */
*    2 CVT0DS   PTR(31),             /* ADDR OF ENTRY POINT OF
*                                       DISPATCHER                   */
*    2 CVTILCH  PTR(31),             /* ADDR OF LOGICAL CHANNEL WORD
*                                       TABLE                        */
*    2 CVTIERLC PTR(31),             /* ADDR OF ASYNCHRONOUS EXIT
*                                       QUEUE                        */
*    2 CVTMSER  PTR(31),             /* ADDR OF MASTER SCHEDULER
*                                       RESIDENT DATA AREA           */
*    2 CVT0PT01 PTR(31),             /* ADDR OF BRANCH ENTRY POINT
*                                       OF POST ROUTINE              */
*    2 CVTRSV11 PTR(31),             /* ** CVTTRMTB FIELD UNUSED
*                                       IN AOS **                    */
*    2 CVTHEAD  PTR(31),             /* ADDR OF HIGHEST PRIORITY TCB
*                                       IN READY QUEUE               */
*    2 CVTMZ00  PTR(31),             /* HIGHEST ADDRESS IN VIRTUAL
*                                       STORAGE                      */
*    2 CVT1EF00 PTR(31),             /* ADDR OF ROUTINE WHICH
*                                       CREATES IRBS FOR EXITS       */
*    2 CVTQOCR  PTR(31),             /* ADDR OF A GFX PARM LIST
*                                       WORD, OR ZERO                */
*    2 CVTQMWR  PTR(31),             /* ADDR OF QMGR COMMUNICATION
*                                       DATA AREA                    */
*    2 CVTSNCTR FIXED(15),           /* SERIAL DATA SET SEQUENCE
*                                       NUMBER COUNTER               */
*    2 CVTOPTA  CHAR(1),             /* FLAGS                        */
*     3 CVTCCH   BIT(1),             /* CCH OPTION PRESENT   PTM 4686*/
*     3 CVTAPR   BIT(1),             /* AUTOMATIC PATH RETRY --
*                                       I/O RECOVERY MGT             */
*     3 CVTDDR   BIT(1),             /* DYNAMIC DEVICE
*                                       RECONFIGURATION --
*                                       I/O RECOVERY MGT     PTM 4686*/
*     3 CVTNIP   BIT(1),             /* - NIP PROCESSING             */
*     3 CVTRSV12 BIT(1),             /* RESERVED                     */
*     3 CVTRSV13 BIT(1),             /* RESERVED                     */
*     3 CVTASCII BIT(1),             /* USAS(CI)I OPTION PRESENT     */
*     3 CVTXPFP  BIT(1),             /* CPU HAS EXTENDED PRECISION
*                                       FLOATING POINT               */
*    2 CVTOPTB  CHAR(1),             /* RESERVED                     */
*     3 CVTPROT  BIT(1),             /* STORE PROTECTION SYSGENED    */
*     3 CVTRSV14 BIT(1),             /* RESERVED                     */
*     3 CVTTOD   BIT(1),             /* CPU HAS TIME OF DAY CLOCK    */
*     3 CVTNLOG  BIT(1),             /* SYS1.LOGREC UNAVAILABLE FOR
*                                       ERROR RECORDING        ICB382*/
*     3 CVTAPTHR BIT(1),             /* NIP SETS TO 1 WHEN DEVICE
*                                       TESTING IS COMPLETE.  IF 1,
*                                       IOS WILL USE AN ALTERNATE
*                                       PATH TO A DEVICE ON CONDITION
*                                       CODE 3.  THIS IS RESET BY NIP
*                                       WHEN THE LPA IS INITIALIZED.
*                                                              YM2670*/
*     3 CVTFP    BIT(1),             /* FETCH PROTECT IS ACTIVE
*                                       (AOS/1)                ICB427*/
*     3 CVTRSV16 BIT(1),             /* RESERVED                     */
*     3 CVTRSV17 BIT(1),             /* RESERVED                     */
*    2 CVTQCDSR PTR(31),             /* CDE SEARCH ROUTINE ADDRESS   */
*    2 CVTQLPAQ PTR(31),             /* ADDRESS OF POINTER TO MOST
*                                       RECENT ENTRY ON LPA CDE QUEUE*/
*    2 CVTRSV18 PTR(31),             /* ** CVTMPCVT FIELD UNUSED IN
*                                       AOS **                       */
*    2 CVTSMCA  PTR(31),             /* ADDR OF SMCA                 */
*    2 CVTABEND PTR(31),             /* OS/VS2 - ADDRESS OF SECONDARY
*                                       CVT --  OS/VS1 - USED BY AN
*                                       INTERNAL ABEND TRACE ROUTINE
*                                       FOR DEBUG PURPOSES     XM0615*/
*    2 CVTUSER  PTR(31),             /* FIELD AVAILABLE TO USER      */
*    2 CVTMDLDS PTR(31),             /* RESERVED FOR MODEL-DEPENDENT
*                                       SUPPORT                      */
*    2 CVTQABST CHAR(2) BDY(WORD),   /* AOS/2 - AN SVC 13 INSTRUCTION
*                                       --  AOS/1 - RESERVED         */
*    2 CVTLNKSC CHAR(2) BDY(WORD,3), /* AN SVC 6 (LINK) INSTRUCTION
*                                                              ICB369*/
*    2 CVTTSCE  PTR(31),             /* ADDR OF FIRST TSCE           */
*    2 CVTPATCH PTR(31),             /* ADDR OF FE PATCH AREA        */
*    2 CVTRMS   PTR(31),             /* ADDRESS OF RMS VECTOR TABLE  */
*    2 CVTTSCVT PTR(31),             /* ADDR OF TIME SHARING CVT     */
*     3 CVTTSFLG CHAR(1),            /* TIME SHARING OPTION FLAGS    */
*      4 CVTTSRDY BIT(1),            /* TSO READY AND INIT           */
*      4 CVTRSV19 BIT(1),            /* RESERVED                     */
*      4 CVTRSV20 BIT(1),            /* RESERVED                     */
*      4 CVTRSV21 BIT(1),            /* RESERVED                     */
*      4 CVTRSV22 BIT(1),            /* RESERVED                     */
*      4 CVTRSV23 BIT(1),            /* RESERVED                     */
*      4 CVTRSV24 BIT(1),            /* RESERVED                     */
*      4 CVTRSV25 BIT(1),            /* RESERVED                     */
*     3 CVTTSCVB PTR(24),            /* ADDR OF TIME SHARING CVT     */
*    2 CVT0SCR1 PTR(31),             /* ADDRESS OF RPS SECTOR
*                                       CONVERTER                    */
*    2 CVTGTF   PTR(31),             /* GTF CONTROL WORD       ICB312*/
*     3 CVTGTFST BIT(8),             /* GTF FLAG BYTE          ICB312*/
*      4 CVTGTFS  BIT(2),            /* GTF STATUS             ICB312*/
*%CVTGTFIN = '''00''B';              /* INACTIVE               ICB312*/
*%CVTGTFSR = '''01''B';              /* STARTING               ICB312*/
*%CVTGTFSP = '''10''B';              /* STOPPING               ICB312*/
*%CVTGTFAC = '''11''B';              /* ACTIVE                 ICB312*/
*      4 CVTSTATE BIT(1),            /* GTF IN CONTROL PROCESSING
*                                       A HOOK                 ICB312*/
*      4 CVTTMODE BIT(1),            /* IF 0 - MODE=INT
*                                       IF 1 - MODE=EXT        ICB312*/
*      4 CVTFORM  BIT(1),            /* FORMAT TRACE TABLE AT
*                                       ABEND                  ICB312*/
*      4 CVTUSR   BIT(1),            /* TRACE=USR SPECIFIED    ICB312*/
*      4 CVTRSV26 BIT(1),            /* RESERVED                     */
*      4 CVTRSV27 BIT(1),            /* RESERVED                     */
*     3 CVTGTFA  PTR(24),            /* ADDR OF MONITOR CALL
*                                       VECTOR TABLE           ICB312*/
*    2 CVTAQAVT PTR(31),             /* POINTER TO WORD CONTAINING
*                                       ADDR OF TCAM VECTOR TABLE    */
*     3 CVTTCMFG CHAR(1),            /* TCAM FLAGS                   */
*      4 CVTTCRDY BIT(1),            /* TCAM RUNNING                 */
*      4 CVTRSV28 BIT(1),            /* RESERVED                     */
*      4 CVTRSV29 BIT(1),            /* RESERVED                     */
*      4 CVTRSV30 BIT(1),            /* RESERVED                     */
*      4 CVTRSV31 BIT(1),            /* RESERVED                     */
*      4 CVTRSV32 BIT(1),            /* RESERVED                     */
*      4 CVTRSV33 BIT(1),            /* RESERVED                     */
*      4 CVTRSV34 BIT(1),            /* RESERVED                     */
*     3 CVTAQAVB PTR(24),            /* POINTER TO WORD CONTAINING
*                                       ADDR OF TCAM VECTOR TABLE    */
*    2 CVTTATA  PTR(31),             /* ADDR OF P0 TCB POINTER       */
*     3 CVTTSKS  PTR(8),             /* MAXIMAL NUMBER OF TCB ADDR
*                                       TAB ENTRIES                  */
*     3 CVTTAT   PTR(24),            /* ADDR OF P0 TCB POINTER       */
*    2 CVTATER  PTR(31),             /* POINTER TO SYSTEM ERROR
*                                       TCB  (AOS/1)           ICB346*/
*     3 CVTSYST  PTR(8),             /* NUMBER OF SYSGEN'D TCB'S     */
*     3 CVTATERA PTR(24),            /* POINTER TO SYSTEM ERROR
*                                       TCB  (AOS/1)           ICB346*/
*    2 CVTEXT1  PTR(31),             /* ADDRESS OF OS-AOS COMMON
*                                       EXTENSION              ICB421*/
*    2 CVTCBSP  PTR(31),             /* ADDRESS OF ACCESS METHOD
*                                       CONTROL BLOCK STRUCTURE.  IF
*                                       ZERO, IT INDICATES THAT THE
*                                       ACCESS METHOD MASTER CATALOG
*                                       IS NOT OPEN'ED AND AVAILABLE
*                                                              ICB436*/
*    2 CVTPURG  PTR(31),             /* POINTER TO SUBSYSTEM PURGE
*                                       ROUTINE                ICB330*/
*     3 CVTRSV35 PTR(8),             /* RESERVED               ICB330*/
*     3 CVTPURGA PTR(24),            /* ADDRESS OF SUBSYSTEM PURGE
*                                       ROUTINE                ICB330*/
*    2 CVTAMFF  CHAR(4),             /* RESERVED FOR ACCESS METHOD
*                                       FLAGS                  ICB436*/
*    2 CVTQMSG  PTR(31),             /* POINTER TO INFORMATION TO BE
*                                       PRINTED BY ABEND       ICB307*/
*     3 CVTRSV36 PTR(8),             /* RESERVED               ICB307*/
*     3 CVTQMSGA PTR(24),            /* ADDRESS OF INFORMATION TO BE
*                                       PRINTED BY ABEND       ICB307*/
*    2 CVTDMSR  PTR(31),             /* SAME AS CVTDMSRA BELOW ICB346*/
*     3 CVTRSV37 PTR(8),             /* RESERVED               ICB346*/
*     3 CVTDMSRA PTR(24),            /* ADDRESS OF OPEN/CLOSE/EOV
*                                       SUPERVISORY ROUTINE    ICB346*/
*    2 CVTRSV38 PTR(31),             /* RESERVED                     */
*    2 CVTRSV39 PTR(31),             /* RESERVED                     */
*
* /*           AOS/1 - AOS/2 COMMON SECTION                          */
*
*    2 CVTREAL  PTR(31),             /* ADDRESS OF THE VIRTUAL
*                                       STORAGE BYTE FOLLOWING THE
*                                       HIGHEST VIRTUAL=REAL STORAGE
*                                       ADDRESS                ICB368*/
*    2 CVTPTRV  PTR(31),             /* ADDRESS OF PAGING SUPERVISOR
*                                       GENERAL ROUTINE TO TRANSLATE
*                                       REAL ADDRESSES TO VIRTUAL    */
*    2 CVTMODE  PTR(31),             /* ADDRESS OF ROUTINE TO CHANGE
*                                       SYSTEM MASK                  */
*    2 CVTJESCT PTR(31),             /* ADDRESS OF JES CONTROL TABLE */
*    2 CVTJEPS  PTR(31),             /* ADDRESS OF JEPS MONITOR TCB
*                                       (OS/VS1)               YM2702*/
*    2 CVTTZ    FIXED(31),           /* DIFFERENCE BETWEEN LOCAL TIME
*                                       AND GREENWICH MEAN TIME
*                                       (BIT 31 = 1.048576 SEC)      */
*    2 CVTMCHPR PTR(31),             /* ADDRESS OF MACHINE CHECK
*                                       PARAMETER LIST               */
*    2 CVTEORM  PTR(31),             /* HIGHEST REAL ADDRESS IN MAIN
*                                       STORAGE                      */
*    2 CVTERPV  PTR(31),             /* POINTER TO SUBROUTINE IN IOS
*                                       TO CONVERT CCW DATA ADDRESSES
*                                       TO VIRTUAL ADDRESSES   ICB367*/
*    2 CVTINTLA PTR(31),             /* ADDRESS OF AREA CONTAINING
*                                       INTERVAL LENGTH AT WHICH I/O
*                                       LOAD BALANCING EXCP COUNTS
*                                       AND RATES ARE COMPUTED ICB341*/
*    2 CVTAPF   PTR(31),             /* SAME AS CVTAPFA BELOW  ICB360*/
*     3 CVTRSV40 PTR(8),             /* RESERVED               ICB360*/
*     3 CVTAPFA  PTR(24),            /* ADDRESS OF BRANCH ENTRY POINT
*                                       IN APF ROUTINE               */
*    2 CVTEXT2  PTR(31),             /* ADDRESS OF AOS/1 - AOS/2
*                                       COMMON EXTENSION       ICB330*/
*     3 CVTRSV41 PTR(8),             /* RESERVED               ICB330*/
*     3 CVTEXT2A PTR(24),            /* SAME AS CVTEXT2 ABOVE  ICB330*/
*    2 CVTHJES  PTR(31),             /* SAME AS CVTHJESA BELOW ICB454*/
*     3 CVTRSV42 PTR(8),             /* RESERVED               ICB454*/
*     3 CVTHJESA PTR(24),            /* ADDRESS OF OPTIONAL JOB ENTRY
*                                       SYSTEM COMMUNICATION VECTOR
*                                       TABLE                  ICB454*/
*    2 CVTRSV43 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV44 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV45 PTR(31),             /* RESERVED                     */
*    2 CVTRSV46 PTR(31),             /* RESERVED                     */
*
* /*           AOS/1 OVERLAY                                         */
*
*    2 CVTPGSIA PTR(31),             /* ADDRESS OF PAGING SUPERVISOR
*                                       INFORMATION AREA             */
*    2 CVTPCVT  PTR(31),             /* ADDRESS OF PAGED CVT
*                                       EXTENSION                    */
*    2 CVTA1F1  CHAR(1),             /* PAGE FAULT FLAGS             */
*     3 CVTPFSW  BIT(1),             /* ONLY PAGING TASK MAY BE
*                                       DISPATCHABLE                 */
*     3 CVTSRSW  BIT(1),             /* NO TASK EXCEPT PAGING TASK
*                                       MAY EXECUTE DISABLED CODE    */
*     3 CVTRSV47 BIT(1),             /* RESERVED                     */
*     3 CVTRSV48 BIT(1),             /* RESERVED                     */
*     3 CVTRSV49 BIT(1),             /* RESERVED                     */
*     3 CVTRSV50 BIT(1),             /* RESERVED                     */
*     3 CVTRSV51 BIT(1),             /* RESERVED                     */
*     3 CVTRSV52 BIT(1),             /* RESERVED                     */
*    2 CVTSYSK  CHAR(1),             /* SYSTEM LOCK.  IF NOT ZERO,
*                                       ONLY PAGING TASK MAY BE
*                                       DISPATCHED                   */
*     3 CVTRSV53 BIT(1),             /* RESERVED                     */
*     3 CVTRSV54 BIT(1),             /* RESERVED                     */
*     3 CVTRSV55 BIT(1),             /* RESERVED                     */
*     3 CVTRSV56 BIT(1),             /* RESERVED                     */
*     3 CVTSLKR  BIT(1),             /* MACHINE CHECK HANDLING IS IN
*                                       PROGRESS               ICB320*/
*     3 CVTSLKQ  BIT(1),             /* SQA EXHAUSTED                */
*     3 CVTSLKP  BIT(1),             /* LAST PCB USED                */
*     3 CVTSLKO  BIT(1),             /* A DISABLED ROUTINE HAS
*                                       PRODUCED A PAGE FAULT        */
*    2 CVTSULK  FIXED(15),           /* SUPERVISOR LOCK.  NUMBER OF
*                                       TASKS ATTEMPTING TO EXECUTE
*                                       DISABLED CODE.  IF NOT ZERO,
*                                       ONLY ENABLED TASKS MAY RUN   */
*    2 CVTSMF   PTR(31),             /* ADDRESS OF SMF TCB     ICB395*/
*    2 CVTPNWFR PTR(31),             /* ADDRESS OF ROUTINE WHICH
*                                       FREES THE 'EMERGENCY' WORK
*                                       AREA (ICB413)        PTM 2452*/
*    2 CVTDDCE  PTR(31),             /* ADDRESS OF DYNAMIC DISPATCHER
*                                       CONTROL ELEMENT        ICB466*/
*    2 CVTRSV57 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV58 FIXED(15),           /* RESERVED                     */
*    2 CVTSTOA  FIXED(31),           /* SAVE AREA FOR THE REAL
*                                       STORAGE ADDRESS OF THE
*                                       SEGMENT TABLE ORIGIN   ICB496*/
*    2 CVTRSV60 PTR(31),             /* RESERVED                     */
*    2 CVTRSV61 PTR(31),             /* RESERVED                     */
*    2 CVTRSV62 PTR(31);             /* RESERVED                     */
*
* /*           AOS/2 OVERLAY                                         */
*
* DECLARE
*%IF IKEPLS='2'  %THEN
*    %GOTO CVTP1;
*   1 CVTS01   BASED(ADDR(CVTPGSIA)) BDY(WORD),
*%GOTO CVTP2;
*%CVTP1 : ;
*   1 CVTS01   DEF(CVTPGSIA) BDY(WORD),
*%CVTP2:;
*    2 CVTRSVA2 PTR(31),             /* RESERVED               ICB339*/
*    2 CVTLPDSR PTR(31),             /* ADDRESS OF LPA DIRECTORY
*                                       SEARCH ROUTINE               */
*    2 CVTPVTP  PTR(31),             /* ADDRESS OF PAGE VECTOR TABLE */
*    2 CVTLPDIA PTR(31),             /* ADDRESS OF LPA DIRECTORY.
*                                       ON PAGE BOUNDARY             */
*     3 CVTDIRST CHAR(1),            /* FLAG BYTE                    */
*      4 CVTDICOM BIT(1),            /* LPA DIRECTORY HAS BEEN
*                                       INITIALIZED BY NIP           */
*      4 CVTRSV63 BIT(1),            /* RESERVED                     */
*      4 CVTRSV64 BIT(1),            /* RESERVED                     */
*      4 CVTRSV65 BIT(1),            /* RESERVED                     */
*      4 CVTRSV66 BIT(1),            /* RESERVED                     */
*      4 CVTRSV67 BIT(1),            /* RESERVED                     */
*      4 CVTRSV68 BIT(1),            /* RESERVED                     */
*      4 CVTRSV69 BIT(1),            /* RESERVED                     */
*     3 CVTLPDIR PTR(24),            /* ADDRESS OF LPA DIRECTORY.
*                                       ON PAGE BOUNDARY             */
*    2 CVTPAGE1 PTR(31),             /* ADDRESS OF DCB FOR PRIMARY
*                                       PAGING DATA SET              */
*    2 CVTPGSUP PTR(31),             /* ADDRESS OF TCB FOR PAGING
*                                       SUPERVISOR                   */
*    2 CVTSLIDA CHAR(4) BDY(WORD),   /* IDENTITY OF TCB CAUSING
*                                       SUPERVISOR LOCK BYTE (CVTSYLK)
*                                       TO BE SET OR IDENTITY OF TCB
*                                       THAT SECOND EXIT PROCESSING
*                                       IS FOR WHEN CVTSEIC=1        */
*     3 CVTSYLK  CHAR(1),            /* SUPERVISOR LOCK.  ONLY
*                                       ENABLED TASKS MAY BE
*                                       DISPATCHED                   */
*%DCL CVTSYLKS CHAR;
*%CVTSYLKS='''FF''X';                /* SET LOCK BYTE                */
*%DCL CVTSYLKR CHAR;
*%CVTSYLKR='''00''X';                /* RESET LOCK BYTE              */
*     3 CVTSLID  CHAR(3),            /* SAME AS CVTSLIDA ABOVE       */
*    2 CVTSER   PTR(31),             /* SAME AS CVTSERA BELOW        */
*     3 CVTSEFLG CHAR(1),            /* SECOND EXIT FLAGS            */
*      4 CVTSEIC  BIT(1),            /* INDICATES THAT PAGING
*                                       SUPERVISOR HAS BRANCHED TO A
*                                       SECOND EXIT ROUTINE          */
*      4 CVTRSV70 BIT(1),            /* RESERVED                     */
*      4 CVTRSV71 BIT(1),            /* RESERVED                     */
*      4 CVTRSV72 BIT(1),            /* RESERVED                     */
*      4 CVTRSV73 BIT(1),            /* RESERVED                     */
*      4 CVTRSV74 BIT(1),            /* RESERVED                     */
*      4 CVTRSV75 BIT(1),            /* RESERVED                     */
*      4 CVTRSV76 BIT(1),            /* RESERVED                     */
*     3 CVTSERA  PTR(24),            /* SECOND EXIT ROUTINE ADDRESS
*                                       THAT WILL BE BRANCHED TO BY
*                                       ABTERM PROLOGUE SHOULD THE
*                                       SECOND EXIT ROUTINE PROGRAM
*                                       CHECK                        */
*    2 CVTSEG   CHAR(16) BDY(WORD),  /* SEGMENT TABLE INFORMATION    */
*     3 CVTSEGA  PTR(31),            /* VIRTUAL ADDRESS OF USER
*                                       SEGMENT TABLE                */
*     3 CVTSEGB  PTR(31),            /* VIRTUAL ADDRESS OF SYSTEM
*                                       SEGMENT TABLE                */
*     3 CVTSEGC  PTR(31),            /* REAL ADDRESS OF USER SEGMENT
*                                       TABLE                        */
*      4 CVTSEGLC PTR(8),            /* LENGTH IN 64-BYTE UNITS OF
*                                       USER SEGMENT TABLE           */
*      4 CVTSEGCA PTR(24),           /* REAL ADDRESS OF USER SEGMENT
*                                       TABLE                        */
*     3 CVTSEGD  PTR(31),            /* REAL ADDRESS OF SYSTEM
*                                       SEGMENT TABLE                */
*      4 CVTSEGLD PTR(8),            /* LENGTH IN 64-BYTE UNITS OF
*                                       SYSTEM SEGMENT TABLE         */
*      4 CVTSEGDA PTR(24),           /* REAL ADDRESS OF SYSTEM
*                                       SEGMENT TABLE                */
*    2 CVTRSV77 PTR(8),              /* RESERVED                     */
*    2 CVTSPVLK PTR(8),              /* NUMBER OF TASKS WHICH HAVE
*                                       TERMINATED WHILE OWNING
*                                       SUPERVISOR LOCK WITHOUT
*                                       OPERATOR HAVING YET BEEN
*                                       NOTIFIED                     */
*    2 CVTCTLFG CHAR(1),             /* SYSTEM CONTROL FLAGS         */
*     3 CVTPSIC  BIT(1),             /* PAGING SUPERVISOR IN CONTROL */
*     3 CVTAPGB  BIT(1),             /* APG IS ACTIVE          ICB339*/
*     3 CVTT1DSP BIT(1),             /* DISABLED PAGE FAULT OCCURRED
*                                       DURING TYPE 1 SVC     YA01802*/
*     3 CVTDSTAT BIT(1),             /* DEVSTAT OPTION IN EFFECT.
*                                       DEVICE ADDRESS FOR 2319-3330-
*                                       2314 CAN VARY ACROSS SYSTEMS */
*     3 CVTRSV79 BIT(1),             /* RESERVED                     */
*     3 CVTRSV80 BIT(1),             /* RESERVED                     */
*     3 CVTGTRCE BIT(1),             /* GTF HAS SUPPRESSED SUPERVISOR
*                                       TRACE                  ICB446*/
*     3 CVTSDTRC BIT(1),             /* SVC DUMP HAS SUPPRESSED
*                                       SUPERVISOR TRACE       ICB446*/
*    2 CVTAPG   CHAR(1),             /* DISPATCHING PRIORITY OF
*                                       APG                    ICB339*/
*    2 CVTTRACE CHAR(2) BDY(WORD),   /* BRANCH ON REGISTER
*                                       INSTRUCTION.  SET BY NIP.
*                                       REGISTER TEN FOR TRACE.
*                                       REGISTER ELEVEN FOR NO TRACE.*/
*    2 CVTTRAC2 CHAR(2) BDY(WORD,3), /* BRANCH ON REGISTER 11
*                                       INSTRUCTION.  THIS ALLOWS FOR
*                                       SUPPRESSING TRACE DYNAMICALLY
*                                       BY SETTING CONDITION CODE
*                                       MASK TO ZERO IN FIRST
*                                       INSTRUCTION  (CVTTRACE)      */
*    2 CVTRSCN  PTR(31),             /* ADDRESS OF ROUTINE TO SCAN
*                                       TCB TREE                     */
*    2 CVTTAS   PTR(31),             /* ADDRESS OF ROUTINE TO
*                                       TRANSFER ADDRESS SPACE       */
*    2 CVTPVALD PTR(31),             /* ADDRESS OF ROUTINE TO CHECK
*                                       ADDRESSES AS BEING IN A
*                                       REGION                       */
*    2 CVTSHRVM PTR(31),             /* LOWEST ADDRESS OF SHARED
*                                       VIRTUAL STORAGE AREA.  THIS
*                                       ADDRESS WILL BE EITHER THE
*                                       BEGINNING OF LPA DIRECTORY OR
*                                       THE BEGINNING OF LPA UPDATE
*                                       AREA IF 'MLPA' OPTION WAS
*                                       USED AT SUPERVISOR
*                                       INITIALIZATION.              */
*    2 CVT0VL01 PTR(31),             /* ENTRY POINT ADDRESS OF
*                                       VALIDITY CHECK ROUTINE
*                                       (IEA0VL01) USED TO COMPARE
*                                       PROTECT KEY OF AN ADDRESS
*                                       WITH TCB PROTECT KEY.        */
*    2 CVTPFIXQ PTR(31),             /* BRANCH ENTRY TO IEAPFIXQ, THE
*                                       FIX-QUIESCE ROUTINE USED BY
*                                       TSO BEFORE SWAP TO FREE ALL
*                                       SVC FIXES              ICB412*/
*    2 CVTPFIXR PTR(31),             /* BRANCH ENTRY TO IEAPFIXR, THE
*                                       FIX-RESTORE ROUTINE USED BY
*                                       TSO AFTER SWAP (INVERSE OF
*                                       FIX-QUIESCE)           ICB412*/
*    2 CVTPFIXP PTR(31),             /* BRANCH ENTRY TO IEAPFIXP, THE
*                                       FIX-PURGE ROUTINE USED BY
*                                       STAE, ABEND, ETC., TO GET RID
*                                       OF OUTSTANDING FIX REQUESTS
*                                                              ICB412*/
*    2 CVTPTCD  PTR(31),             /* BRANCH ENTRY TO IEAPTCD, THE
*                                       PAGE-TABLE-CREATE-DESTROY
*                                       ROUTINE USED BY TSO LOGOFF IN
*                                       DOING A PSEUDO-FREEPART
*                                                              ICB412*/
*    2 CVTSYSWT PTR(31),             /* ADDRESS OF THE SMF SYSTEM
*                                       WAIT TIME COLLECTION AREA
*                                                              ICB469*/
*    2 CVTRSV81 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV82 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV83 PTR(31),             /* RESERVED                     */
*    2 CVTRSV84 PTR(31),             /* RESERVED                     */
*    2 CVTRSV85 PTR(31),             /* RESERVED                     */
*    2 CVTRSV86 PTR(31);             /* RESERVED                     */
*
* /*                                                                 */
* /*           OS - AOS COMMON EXTENSION                             */
* /*                                                                 */
*
* DECLARE
*   1 CVTXTNT1 BASED(CVTEXT1),       /* START OF OS-AOS COMMON
*                                       EXTENSION              ICB421*/
*    2 CVTFACHN PTR(31),             /* ADDRESS OF CHAIN OF DCB FIELD
*                                       AREAS (ISAM)           ICB421*/
*    2 CVTRSV87 PTR(31),             /* RESERVED                     */
*    2 CVTRSV88 PTR(31);             /* RESERVED                     */
*
* /*                                                                 */
* /*           AOS/1 - AOS/2 COMMON EXTENSION                        */
* /*                                                                 */
*
* DECLARE
*   1 CVTXTNT2 BASED(CVTEXT2),       /* START OF AOS/1-AOS/2 EXT     */
*    2 CVTDSSV  PTR(31),             /* ADDRESS OF THE DSS VECTOR
*                                       TABLE                  ICB313*/
*     3 CVTRSV89 PTR(8),             /* RESERVED               ICB313*/
*     3 CVTDSSVA PTR(24),            /* ADDRESS OF THE DSS VECTOR
*                                       TABLE                  ICB313*/
*    2 CVTNUCLS CHAR(1),             /* USED TO IDENTIFY THE NUCLEUS
*                                       MEMBER NAME            ICB322*/
*    2 CVTRSV90 BIT(8),              /* RESERVED                     */
*     3 CVTRSV9A BIT(1),             /* RESERVED                     */
*     3 CVTRSV9B BIT(1),             /* RESERVED                     */
*     3 CVTRSV9C BIT(1),             /* RESERVED                     */
*     3 CVTRSV9D BIT(1),             /* RESERVED                     */
*     3 CVTRSV9E BIT(1),             /* RESERVED                     */
*     3 CVTRSV9F BIT(1),             /* RESERVED                     */
*     3 CVTRSV9G BIT(1),             /* RESERVED                     */
*     3 CVTRSV9H BIT(1),             /* RESERVED                     */
*    2 CVTRSV91 FIXED(15),           /* RESERVED                     */
*    2 CVTDEBVR PTR(31),             /* ADDRESS OF BRANCH ENTRY POINT
*                                       OF DEBCHK VERIFY ROUTINE
*                                       (ICB380)               XM9028*/
*    2 CVTRSV92 PTR(31),             /* RESERVED                     */
*    2 CVTRSV93 PTR(31),             /* RESERVED                     */
*    2 CVTRSV94 PTR(31),             /* RESERVED                     */
*    2 CVTQID   PTR(31),             /* SAVE AS CVTQIDA BELOW  ICB381*/
*     3 CVTRSV95 PTR(8),             /* RESERVED               ICB381*/
*     3 CVTQIDA  PTR(24),            /* ADDRESS OF QID TABLE
*                                       PREFIX                 ICB381*/
*    2 CVTOLTEP PTR(31),             /* POINTER TO CONTROL BLOCK
*                                       CREATED BY SVC 59 TO POINT TO
*                                       PSEUDO-DEB'S           ICB423*/
*    2 CVTRSV96 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV97 FIXED(15),           /* RESERVED                     */
*    2 CVTRSV98 PTR(31),             /* RESERVED                     */
*    2 CVTRSV99 PTR(31),             /* RESERVED                     */
*    2 CVTRSVA0 PTR(31),             /* RESERVED                     */
*    2 CVTRSVA1 PTR(31);             /* RESERVED                     */
*
* /*                      CVT PREFIX                                 */
*
*    DCL 1 CVTFIX BASED(CVTPTR-256) BDY(WORD),
*    2 *        CHAR(248) BDY(WORD), /* RESERVED                     */
*    2 *        CHAR(2) BDY(WORD),   /* RESERVED                     */
*    2 CVTMDL   CHAR(2) BDY(WORD,3), /* CPU MODEL NUMBER IN SIGNLESS
*                                       PACKED DECIMAL, I.E., A
*                                       MODEL 50 WOULD BE REPRESENTED
*                                       AS 0050 HEX                  */
*    2 CVTRELNO CHAR(4) BDY(WORD),   /* OS RELEASE NUMBER (EBCDIC)   */
*     3 CVTNUMB  CHAR(2) BDY(WORD),  /* RELEASE NUMBER               */
*     3 CVTLEVL  CHAR(2) BDY(WORD,3);/* RELEASE LEVEL                */
*
* /*                   END OF CVT MACRO                              */
*
*%IF IKEPLS=''  %THEN
*    %GOTO CVTL4;
*IHALPOP;
*% ACTIVATE PUSH,POP,OFF;
*%CVTL4 : ;
./ ADD NAME=DCBEXIT  0100-19106-19106-1238-00042-00042-00000-MZAP78  17
DCBX     TITLE 'GENERAL PURPOSE DCB EXIT'
         PUNCH '         ALIAS DCBXLIST'
DCBEXIT  CSECT
         ENTRY DCBXLIST
         USING *,15
         USING IHADCB,1
         STM   14,12,12(13)
         LH    2,DCBBLKSI               DID USER SUPPLY BLKSIZE?
         LTR   2,2
         BNZ   BLKOK                     YES - ACCEPT IT
         LH    2,DCBLRECL               START WITH RECORD LENGTH
         TM    DCBRECFM,DCBRECU         RECFM=U?
         BO    NOTV                      YES - USE BLKSIZE=LRECL
         TM    DCBDEVT,X'40'            IS DEVICE UNIT RECORD?
         BO    *+12                      YES - USE BLKSIZE=LRECL
         MH    2,=H'5'                   NO - BLOCK 5 TO 1
         OI    DCBRECFM,DCBRECBR        FORCE IT BLOCKED
         TM    DCBRECFM,DCBRECF         IS IT FB?
         BO    NOTV                      YES
         LA    2,4(2)                   ADD BDW FOR V OR D RECORD
NOTV     STH   2,DCBBLKSI               STORE CALCULATED BLKSIZE
BLKOK    CLI   DCBBUFNO,0               DID USER SUPPLY # OF BUFFERS?
         BNE   SARTRE                    YES - EXIT
         LA    5,1                      DCBBUFNO=1 IF DA(*) (TERM=TS)
         CLI   DCBDEVT,DCBDVTRM          IS IT TSO TERMINAL?
         BE    SETBUFNO                   YES - BUFNO=1
         SR    4,4                      DCBBUFNO=MAX(2,2048/DCBBLKSI)
         LA    5,2048
         DR    4,2
         CH    5,TWO
         BH    *+8
         LA    5,2
TWO      EQU   *-2
SETBUFNO STC   5,DCBBUFNO
SARTRE   LM    14,12,12(13)
         BR    14
         LTORG
         SPACE 2
DCBXLIST DC    0F'0',X'85',AL3(DCBEXIT)
         PRINT NOGEN
         DCBD  DSORG=PS,DEVD=DA
         END
./ ADD NAME=FULLSCR  0100-19106-19106-1238-00214-00214-00000-MZAP78  17
//UPSTAGE2 JOB (CCSMASHM,CNT7,F2301,T20,L20),HAGAON.HATSANUA,
//             MSGLEVEL=(1,1),NOTIFY=ZCCSMAS
//       EXEC  SYSTUCL,UPPGM=EDITOR,REGION.UP=128K,
//             LIB='SYS2.GEN.ASM',LCT=33,
//             MCALL=N,U1P=1500,U1S=500,
//             LOPT=,NCAL=,OLIB='SYS2.LINKLIB',
//             MOD='SYS1.TELCMLIB'
//SCRATCH  DD  UNIT=3330-1,SPACE=(CYL,(1,1),,CONTIG)
><       SET   LEA LIS EDI
><       USE   TCM75122
><       INS   0 BY 100
MCPSTG2  TITLE 'TCAM 5F GENERATION - STAGE 2'                     *IIH*
         MTITL 'TCAM 5F GENERATION (WITH FULLSCR) - STAGE 2',LEN=45
*********************************************************************
*              TECHNION 11 SEPT 1975                              *IIH*
*                                                                 *IIH*
*              THE SOURCE GENERATED BY TCAM STAGE 1 MUST BE       *IIH*
*              MODIFIED TO INCORPORATE USER CODE,                 *IIH*
*              AS WELL AS TO CORRECT VARIOUS IBM ERRORS.          *IIH*
*                                                                 *IIH*
*              TECHNION CODE IS GENERALLY INDICATED BY A SLASH    *IIH*
*              ('/') IN THE COMMENTS FIELD, OR BY *IIH* OR *TSM*  *IIH*
*              IN COLUMNS 67/71.                                  *IIH*
*                                                                 *IIH*
*              THE CHANGES ARE:                                   *IIH*
*                                                                 *IIH*
*              FOR 3277 AND 3275 DCBS, BUFMAX,BUFIN,BUFOUT=10;    *IIH*
*                                      BUFSIZE=232.               *IIH*
*              FOR 3277 AND 3275 TERMINALS, BUFSIZE=2150:         *IIH*
*                                (FOR A FULL SCREEN TGET, 1968, THE
*                                 DEFAULT , IS NOT ENOUGH. YOU NEED
*                                 24*82+AID+CURSOR ADDRESS+SF+ATTRIB
*              PCI=(N,N)         (A,A) DOESN'T WORK               *IIH*
*              CODE TO TERMINATE FULL SCREEN MODE UPON LOGON      *IIH*
*              HAS BEEN ADDED TO THE INHDR GROUP, AFTER LOGON.    *IIH*
*                                                                 *IIH*
*              THE ORDER OF MSGGENS IN THE INMSG GROUP HAS        *IIH*
*              BEEN ALTERED; THIS IS INTENDED TO CORRECT THE      *IIH*
*              ERROR WHICH OCCURS WHEN TSO ISN'T UP,              *IIH*
*              THE USER PRESSES ENTER (CARRIAGE RETURN),          *IIH*
*              HE RECEIVES A "ENTER LOGON" MESSAGE,               *IIH*
*              ATTEMPTS TO LOGON, AND ONLY AT THAT POINT          *IIH*
*              RECEIVES A "TSO NOT ACTIVE" MESSAGE.               *IIH*
*                                                                 *IIH*
*     FOR 2260 REMOTE, ALTER '+' TO '-' IN INVITATION LIST. THIS
*   PREVENTS POLLING AND THUS AVOIDS NEED FOR OPERATOR TO VARY
*   OFFTP WHEN THEN LINE IS NOT IN USE. DITTO FOR 2741 CORRESPONDENCE
*  (TEKTRONIX) AND TTY LINES. NONE OF THESE HAVE MODEMS.
*
*   EVERY 'TERMINAL' MACRO HAS AT LEAST ONE OPTION FIELD. FOR 3277
*   AND 3275 TERMINALS THERE ARE TWO OPTION FIELD.
*   ACCORDINGLY THE OPDATA OPERAND MUST BE CODED AS FOLLOWS:-
*   FOR 3270    OPDATA=(2,0)
*   NON 3270    OPDATA=1
*
         STITL 'INITIALIZE(OPEN) AND TERMINATE(CLOSE) LINES'      *IIH*
><       DEL   94000
><       INS   92000 BY 1000
         STITL 'OPTION MACROS (OPDATA)'                           *TSM*
*               REPLACE IEDQFSCR OPTION GENERATED BY STAGE 1.     *TSM*
IF3270   OPTION XL1                     /FOR CUTOFF SELECTION     *IIH*
SWFSMODE EQU   4                                                  *TSM*
SW3270   EQU   2                                                  *TSM*
SWNO3270 EQU   1                                                  *TSM*
IEDQFSCR OPTION XL1                     /FOR FULL SCREEN TRIGGER  *IIH*
><       INS   96000 BY 100
         STITL 'TERMINAL DEFINITIONS'                             *TSM*
*              THE 2741 AT THE IBM SCIENTIFIC CENTER              *IIH*
*              DOESN'T HAVE THE BREAK FEATURE.                    *IIH*
*              MAKE SURE THAT IT IS THE FIRST IN THE LINE GROUP.  *IIH*
         SPACE 1                                                  *TSM*
*              CHANGE "OPDATA=0" TO "OPDATA=(2,0)" IN EVERY       *TSM*
*              TERMINAL MACRO FOR WHICH FULL SCREEN SUPPORT       *TSM*
*              IS REQUIRED (PRESUMABLY 3277 AND 3275).            *TSM*
         SPACE 1                                                  *TSM*
*              ADD "OPDATA=1" TO ALL REMAINING TERMINAL MACROS.   *TSM*
         SPACE 1                                                  *TSM*
*              CHANGE BUFFER SIZE FOR FULL SCREEN TERMINALS FROM  *TSM*
*              1968 (GENERATED BY STAGE 1) TO 2150.               *TSM*
         SPACE 1                                                  *TSM*
><       INS   'UTERM' IN 98000/324000
               OPDATA=1,                /NO FULL SCREEN SUPPORT   *TSM**
><       CHA   'BREAK' TO 'NOBREAK' IN 102000
><       REP   'OPDATA' IN 326000/682000
               OPDATA=(2,0),            /FULL SCREEN SUPPORT      *TSM**
><       CHA   '1968'   TO '2150'                IN 326000/682000
><       INS   'UTERM' IN 686000/744000
               OPDATA=1,                /NO FULL SCREEN SUPPORT   *TSM**
><       INS   746000 BY 100
         STITL 'DCB S'                                            *TSM*
*              REMOVE PCI=(A,A) FOR 3277 AND 3275:                *TSM*
*              TCAM WILL BOMB IF PCI IS SPECIFIED FOR 3270S.      *TSM*
         SPACE 1                                                  *TSM*
*              CHANGE 3270 DCBS FROM BUFIN=02,BUFOUT=02,BUFMAX=03 *TSM*
*                               TO   BUFIN=10,BUFOUT=10,BUFMAX=10 *TSM*
*                               FROM BUFSIZE=116 (1 LUNIT)        *TSM*
*                               TO   BUFSIZE=232 (2 LUNITS)       *TSM*
*                               FROM 03*116=348                   *TSM*
*                               TO   10*232=2320                  *TSM*
><       CHA   '2' TO '10' IN 848000,922000
><       CHA   '116' TO '232' IN 850000,924000
><       CHA   '=3'  TO '=10' IN 850000,924000
><       CHA   'A,A' TO 'N,N' IN 850000,924000
><       INS   960000 BY 100
         STITL 'INVITATION LISTS'                                 *TSM*
*              MARK 2260 REMOTE (D-112) AND TTY INVITATION LISTS  *TSM*
*              AS INITIALLY INACTIVE.                             *TSM*
         SPACE 1                                                  *TSM*
><       CHA   '+' TO '-' IN 1110000/1128000
><       CHA   41/53 TO '/226R (D-112)' IN 1110000/1124000
><       CHA   50/53 TO '/TTY' IN 1126000/1128000
><       INS   1130000 BY 100
         STITL 'TSO MESSAGE HANDLER'                              *TSM*
><       INS   1132000 BY 100
         SPACE 1                                                  *TSM*
*              CHECK FOR THE EXISTENCE OF THE IEDQFSCR OPTION FIELD.
*              IF ABSENT, THIS IS NOT A 3270, SO BYPASS PROCESSING;
*              ELSE, CHECK IF WE ARE IN THE MIDDLE OF A LOGON.
*              IF LOGON, REMOVE RESIDUAL FULL SCREEN MODE THAT
*              MAY BE LEFT OVER FROM THE PREVIOUS SESSION.
         SPACE 1                                                  *TSM*
><       INS   1138000 BY 100
         SPACE 1                                                  *TSM*
*              THE STAGE 1 GENERATED MACROS INBUF THROUGH SIMATTN *TSM*
*              ARE REPLACED BY THE FOLLOWING:                     *TSM*
         SPACE 1                                                  *TSM*
         LOCOPT IEDQFSCR       /VALID ONLY FOR 3270               *IIH*
         LTR    R15,R15        /ZERO IF NOT 3270                  *IIH*
         BZ     NOT3270        /SO BYPASS                         *IIH*
         L      R1,IEDADBUF    /BUFFER ADDRESS                    *IIH*
         L      R1,PRFSUNIT-PRFRCB(R1) /LCB ADDRESS               *IIH*
         L      R1,LCBNTXT-LCBRCB(R1)  /SCB ADDRESS               *IIH*
         USING  IEDQSCB,R1                                        *IIH*
         TM     SCBERR1,SCBNOLOG   /LOGON IN PROGRESS?            *IIH*
         DROP   R1                                                *IIH*
         BZ     MH3270         /DON'T TOUCH OPTION FIELD          *IIH*
         MVI    0(R15),0       /R15 STILL POINTS TO IEDQFSCR      *IIH*
         B      MH3270                                            *IIH*
         SPACE 1                                                  *IIH*
NOT3270  INBUF  PATH=(IF3270,1)  /EXECUTE FOR NON 3270            *IIH*
         CUTOFF 300                                               *IIH*
         CARRIAGE                                                 *IIH*
         B      COMMON                                            *IIH*
         SPACE 1                                                  *IIH*
MH3270   INBUF  ,                  /EXECUTE FOR 3270 ONLY         *IIH*
         CUTOFF 4096                                              *IIH*
         CARRIAGE                                                 *IIH*
IEDQFS   FULLSCR TRIGGER=X'6E'    /PA2 KEY IS TRIGGER             *IIH*
         L     R2,IEDADBUF        /BUFFER ADDRESS                 *TSM*
         USING IEDQPRF,R2         /ADDRESS BUFFER PREFIX          *TSM*
         TM    PRFSTAT1,PRFTSMSG  /TSO MESSAGE ?                  *TSM*
         BZ    NOTTSO1            /NO, BYPASS                     *TSM*
         L     R1,PRFLCB-1        /LINE CONTROL BLOCK ADDRESS     *TSM*
         LH    R1,LCBTTCIN-IEDQLCB(,R1)   /INDEX OF TERMINAL      *TSM*
         LTR   R1,R1              /TTCIN ZERO?                    *TSM*
         BZ    NOTTSO1            /IF SO, NOT TSO                 *TSM*
         L     R15,IEDRNMPT       /CONVERT TO OFFSET IN TERM TABLE*TSM*
         BALR  R14,R15            /GO DO IT                       *TSM*
         LR    R3,R1              /SAVE ON RETURN                 *TSM*
         USING IEDQTRM,R3                                         *TSM*
         L     R4,TRMDESTQ-1      /ADDRESS OF QCB                 *TSM*
         USING IEDQQCB,R4                                         *TSM*
         LOCOPT IF3270            /GET ADDRESS OF OPTION FIELD    *TSM*
         TM    0(R15),SWFSMODE    /ALREADY IN FS MODE?            *TSM*
         BZ    *+12               /NO, BYPASS                     *TSM*
         MVI   QCBSATCT,0         /ZERO SIM ATTN LINE COUNT       *TSM*
         MVI   QCBCARCT,0         /ZERO CARRIAGE COUNT            *TSM*
         DROP  R2,R3,R4                                           *TSM*
NOTTSO1  EQU   *                                                  *TSM*
COMMON   SIMATTN                                                  *TSM*
><       DEL   1140000/1148000
><       MOV   1172000/1174000 TO 1154000
><       INS   1198000 BY 100
         SPACE 1                                                  *TSM*
*              THE FOLLOWING CODE IS ADDED AFTER OUTBUF:          *TSM*
         SPACE 1                                                  *TSM*
         L     R2,IEDADBUF       /BUFFER ADDRESS                  *TSM*
         USING IEDQPRF,R2        /ADDRESS BUFFER PREFIX           *TSM*
         TM    PRFSTAT1,PRFTSMSG /TSO MESSAGE ?                   *TSM*
         BZ    NOTTSO2           /NO,BYPASS                       *TSM*
         LOCOPT IF3270           /GET ADDRESS OF OPTION BYTE      *TSM*
         LTR   R15,R15           /IF NONE, NOT 3270               *TSM*
         BZ    NOTTSO2                                            *TSM*
         OI    0(R15),SWFSMODE   /TENTATIVELY SET TO FS MODE      *TSM*
         SPACE 1                                                  *TSM*
*              NOTE THAT THIS CODE IS DEPENDENT ON THE FACT THAT  *TSM*
*              MODULE IEDAYE USES AVTSAVE4 (IEDSAVE4+24) AS       *TSM*
*              A WORK AREA FOR THE TYPE OF TPUT.                  *TSM*
         TM    IEDSAVE4+24,X'60' /TPUT WITH FS ?                  *TSM*
         BO    NOTTSO2           /YES, FINISHED                   *TSM*
         SPACE 1                                                  *TSM*
         NI    0(R15),255-SWFSMODE /NO, CANCEL FS MODE            *TSM*
NOTTSO2  EQU   *                                                  *TSM*
><       INS   1218000 BY 100
         STITL '- DCB MAPPING'
><       INS   1220000 BY 100
         STITL '- QUEUE CONTROL BLOCK'
         TQCBD
         STITL '- LINE CONTROL BLOCK'
         TLCBD
         STITL '- STATION CONTROL BLOCK'
         TSCBD
         STITL '- TERMINAL TABLE ENTRY'
         TTRMD
         STITL '- BUFFER PREFIX'
         TPRFD
        REGEQU
//ASM.SYSIN DD *
%OFF
TCM75122
      INCLUDE  PARM(ORDER)
         NAME  IEDQTCAM(R)
//LKED.PARM DD DSN=SYS2.PARMLIB,DISP=SHR
/*EOF
./ ADD NAME=IEZCIB   0100-19106-19106-1238-00078-00078-00000-MZAP78  17
*        %GOTO CIBBSL;  /* BILINGUAL MAPPING                         /*
         MACRO
&CIBNAME IEZCIB
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
*        COMMAND INPUT BUFFER MAPPING MACRO
*
*    AOS/1 RELEASE 1, 10/19/71, LEVEL=1
*
&CIBNAME DS    0D -     CIBPTR
*
CIBNEXT  DS    A -      ADDRESS OF NEXT CIB IN QUEUE (ZERO FOR LAST)
CIBVERB  DS    C -      COMMAND VERB CODE
CIBSTART EQU   X'04' -  COMMAND CODE FOR START
CIBMODFY EQU   X'44' -  COMMAND CODE FOR MODIFY
CIBSTOP  EQU   X'40' -  COMMAND CODE FOR STOP
CIBMOUNT EQU   X'0C' -  COMMAND CODE FOR MOUNT
CIBLEN   DS    FL1 -    LENGTH IN DOUBLEWORDS OF CIB INCLUDING CIBDATA
         DS    XL4 -    RESERVED FOR CSCB COMPATIBILITY
CIBTJID  DS    CL2 -    TSO TERMINAL JOB IDENTIFIER
CIBCONID DS    C -      IDENTIFIER OF CONSOLE ISSUING COMMAND
         DS    X -      RESERVED
CIBDATLN DS    H -      LENGTH IN BYTES OF DATA IN CIBDATA
CIBDATA  DS    CL8 -    DATA FROM COMMAND OPERAND
*        (LENGTH OF CIBDATA IS A MULTIPLE OF EIGHT BYTES
*        DEPENDING ON THE VALUE CONTAINED IN CIBLEN)
*              START -  FOURTH POSITIONAL PARAMETER (PARMVALUE)
*              MODIFY - RESIDUAL OPERAND IMAGE FOLLOWING COMMA
*                       TERMINATING FIRST POSITIONAL PARAMETER
*              STOP -   NONE (CIB GENERATED ONLY TO GIVE CONSOLE ID)
*
* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
*
         MEND  , */
* %CIBBSL  :  ;
* /*                                                                 */
* /*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
* /*                                                                 */
* /*     COMMAND INPUT BUFFER MAPPING MACRO                          */
*
* /* AOS/1 RELEASE 1, 10/19/71, LEVEL=1                              */
* /*                                                                 */
* DECLARE
*   1 CIBNAME  BASED(CIBPTR),
*
*    2 CIBNEXT  PTR(31),             /* ADDRESS OF NEXT CIB IN QUEUE
*                                       (ZERO FOR LAST)              */
*    2 CIBVERB  CHAR(1),             /* COMMAND VERB CODE            */
* %DCL CIBSTART CHAR;
* %CIBSTART='''04''X';               /* COMMAND CODE FOR START       */
* %DCL CIBMODFY CHAR;
* %CIBMODFY='''44''X';               /* COMMAND CODE FOR MODIFY      */
* %DCL CIBSTOP  CHAR;
* %CIBSTOP ='''40''X';               /* COMMAND CODE FOR STOP        */
* %DCL CIBMOUNT CHAR;
* %CIBMOUNT='''0C''X';               /* COMMAND CODE FOR MOUNT       */
*    2 CIBLEN   PTR(8),              /* LENGTH IN DOUBLEWORDS OF CIB
*                                       INCLUDING CIBDATA            */
*    2 *        CHAR(4),             /* RESERVED FOR CSCB
*                                       COMPATIBILITY                */
*    2 CIBTJID  CHAR(2),             /* TSO TERMINAL JOB IDENTIFIER  */
*    2 CIBCONID CHAR(1),             /* IDENTIFIER OF CONSOLE
*                                       ISSUING COMMAND              */
*    2 *        CHAR(1),             /* RESERVED                     */
*    2 CIBDATLN FIXED(15),           /* LENGTH IN BYTES OF DATA IN
*                                       CIBDATA                      */
*    2 CIBDATA  CHAR(8);
*                                    /* DATA FROM COMMAND OPERAND    */
* /*     (LENGTH OF CIBDATA IS A MULTIPLE OF EIGHT BYTES             */
* /*     DEPENDING ON THE VALUE CONTAINED IN CIBLEN)                 */
* /*           START -  FOURTH POSITIONAL PARAMETER (PARMVALUE)      */
* /*           MODIFY - RESIDUAL OPERAND IMAGE FOLLOWING COMMA       */
* /*                    TERMINATING FIRST POSITIONAL PARAMETER       */
* /*           STOP -   NONE (CIB GENERATED ONLY TO GIVE CONSOLE ID) */
*
* /*  * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *  */
*
./ ADD NAME=IEZIOB   0100-19106-19106-1238-00914-00914-00000-MZAP78  17
*
*        %GOTO  IOBL1;      /*
         MACRO
         IEZIOB &DSECT=YES   */
*%IOBL1 : ;
*
*/*            INPUT/OUTPUT BLOCK                                    */
*/*                                                                  */
*/*  OS/VS2 RELEASE 1, OS/VS1 RELEASE 2, 05/25/72, LEVEL=5           */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON IOB GIVES ADDRESSABILITY FOR ALL SYMBOLS.   */
*/*      PL/S - DCL (IOBPRPTR,IOBSTPTR) PTR                          */
*/*                                                                  */
*%GOTO IOBL2;  /*
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').NODSCT
IOB      DSECT
         AGO   .CONT
.NODSCT  ANOP
         DS    0D
IOB      EQU   *
.CONT    ANOP
         SPACE 1
***********************************************************************
*                                                                     *
*                    PREFIX SECTIONS OF THE IOB                       *
*                                                                     *
***********************************************************************
         SPACE 3
IOBPREFX DS    0D
         SPACE 1
*                            ******************************************
*                            *                                        *
IOBQSAMC DS    0D *          *        QSAM,BSAM,BPAM PREFIX           *
IOBBSAMC DS    0D *          *     CHAINED SCHEDULING ** 16 BYTES     *
IOBBPAMC DS    0D *          *                                        *
*                            ******************************************
         SPACE 1
IOBCFLG1 DS    B -       FLAG BYTE
IOBRSV01 EQU   X'80',,C'X' RESERVED
IOBRSV02 EQU   X'40',,C'X' RESERVED
IOBRSV03 EQU   X'20',,C'X' RESERVED
IOBRSV04 EQU   X'10',,C'X' RESERVED
IOBPTST  EQU   X'08' --- NOTE OR POINT OPERATION IS IN PROCESS
IOBABAPP EQU   X'04' --- ERROR PROCESSED ONCE BY ABMORMAL-END APPENDAGE
IOBRSTCH EQU   X'02' --- RESTART CHANNEL
IOBPCI   EQU   X'01' --- PCI INTERRUPT HAS OCCURRED
IOBRSV05 DS    XL1 ----- RESERVED
IOBCINOP DS    CL1 ----- OFFSET OF LAST I/O COMMAND FOR  INPUT
*                        OPERATION(NOP CCW) FROM THE ICB ORIGIN
IOBCONOP DS    CL1 ----- OFFSET OF LAST I/O COMMAND FOR  OUTPUT
*                        OPERATION(NOP CCW) FROM THE ICB ORIGIN
IOBCECB  DS    F ------- EVENT CONTROL BLOCK
IOBCICB  DS    A ------- ADDR.OF FIRST ICB ON QUEUE
IOBCNOPA DS    A ------- ADDR.OF NOP COMMAND AT END OF QUEUE
         SPACE 2
         ORG   IOBPREFX+8
         SPACE 2
*                            ******************************************
*                            *                                        *
IOBQSAMN DS    0D *          *        QSAM,BSAM,BPAM PREFIX           *
IOBBSAMN DS    0D *          *    NORMAL SCHEDULING *** 8 BYTES       *
IOBBPAMN DS    0D *          *                                        *
*                            ******************************************
         SPACE 1
IOBNIOBA DS    0A ------ ADDR.NEXT IOB ON CHAIN
IOBNFLG1 DS    B -       FLAG BYTE
IOBPRTOV EQU   X'80' --- 'PRTOV' HAS OCCURRED
IOBWRITE EQU   X'40' --- 'WRITE' OPERATION IN PROCESS
IOBREAD  EQU   X'20' --- 'READ' OPERATION IN PROCESS
IOBUPDAT EQU   X'10' --- BLOCK IS TO BE UPDATED
IOBBKSPC EQU   X'08' --- IOB BEING USED FOR BACKSPACE,CONTROL,NOTE/PT.
IOBSPAN  EQU   X'04' --- THIS RECORD IS A SPANNED RECORD
IOBRSV06 EQU   X'02',,C'X' RESERVED
IOBFIRST EQU   X'01' --- THIS IS FIRST IOB ON CHAIN
IOBNIOBB DS    AL3 ----- ADDR.NEXT IOB ON CHAIN
IOBNECB  DS    F ------- EVENT CONTROL BLOCK
         SPACE 2
         ORG   IOBPREFX+8
         SPACE 2
*                            ******************************************
*                            *                                        *
IOBBDAM  DS    0D *          *       BDAM PREFIX *** 8 BYTES          *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBDQADA DS    0A ------ ADDR.OF IOB WAITING TO DEQUEUE TRACKS
*                        OCCUPIED BY SPANNED RECORDS
IOBDEQIN DS    B ------- DEQUEUE LOOP INDICATOR
IOBDEQ   EQU   X'80' --- TASK WITH SPANNED RECORD BEING DEQUEUED
IOBRSV07 EQU   X'40',,C'X' RESERVED
IOBRSV08 EQU   X'20',,C'X' RESERVED
IOBRSV09 EQU   X'10',,C'X' RESERVED
IOBRSV10 EQU   X'08',,C'X' RESERVED
IOBRSV11 EQU   X'04',,C'X' RESERVED
IOBRSV12 EQU   X'02',,C'X' RESERVED
IOBRSV13 EQU   X'01',,C'X' RESERVED
IOBDQADB DS    AL3 ----- ADDR.OF IOB WAITING TO DEQUEUE TRACKS
*                        OCCUPIED BY SPANNED RECORDS
IOBSWAP  DS    A ------- ADDR.OF SPANNED WORK AREA
         SPACE 2
         ORG   IOBPREFX+12
         SPACE 2
*                            ******************************************
*                            *                                        *
IOBGAM   EQU   * *           *                                        *
IOBQISAM EQU   * *           *       GAM,QISAM PREFIX *** 4 BYTES     *
*                            ******************************************
*
IOBGQECB DS    F --- EVENT CONTROL BLOCK
         SPACE 3
***********************************************************************
*                                                                     *
*                    STANDARD SECTION OF THE IOB                      *
*                                                                     *
***********************************************************************
         SPACE 3
IOBSTDRD DS    0D
         SPACE 1
IOBFLAG1 DS    B -       FLAG BYTE
IOBDATCH EQU   X'80' --- DATA CHAINING USED IN CHANNEL PROGRAM
IOBCMDCH EQU   X'40' --- COMMAND CHAINING USED IN CHANNEL PROGRAM
IOBERRTN EQU   X'20' --- ERROR ROUTINE IS IN CONTROL
IOBRPSTN EQU   X'10' --- DEVICE IS TO BE REPOSITIONED
IOBCYCCK EQU   X'08' --- CYCLIC REDUNDANCY CHECK NEEDED(TAPE ONLY)
IOBFCREX EQU   X'08' --- FETCH COMMAND RETRY EXIT (DIRECT ACCESS ONLY)
IOBIOERR EQU   X'04' --- I/O ERROR HAS OCCURRED
IOBUNREL EQU   X'02' --- THIS I/O REQUEST IS UNRELATED(NON-SEQUENTIAL)
IOBRSTRT EQU   X'01' --- RESTART ADDR.IN IOB TO BE USED
IOBFLAG2 DS    B -       FLAG BYTE
IOBHALT  EQU   X'80' --- HALT I/O HAS BEEN ISSUED BY SVC PURGE ROUTINE
IOBSENSE EQU   X'40' --- ISSUE SENSE COMMAND AFTER DEVICE END OCCURS
IOBPURGE EQU   X'20' --- IOB HAS BEEN PURGED *ALLOW I/O TO QUIESCE
IOBRDHA0 EQU   X'10' --- HOME ADDRESS TO BE READ * NO SEEK NEEDED
IOBALTTR EQU   X'08' --- NO TEST FOR OUT-OF-EXTENT * AN ALTERNATE TRACK
*                        IS IN USE
IOBSKUPD EQU   X'04' --- SEEK ADDRESS IS BEING UPDATED -CYLINDER END
*                        OR FILE MASK VIOLATION HAS OCCURRED
IOBSTATO EQU   X'02' --- DEVICE END STATUS HAS BEEN ORED WITH
*                        CHANNEL END STATUS - GRAPHICS DEVICE
IOBPNCH  EQU   X'01' --- TURNED ON BY QSAM WHEN ERROR RECOVERY IS TO
*                        BE PROVIDED FOR THE 2540 CARD PUNCH
IOBSENS0 DS    B ------- FIRST SENSE BYTE
IOBS0B0  EQU   X'80' --- BIT 0 (DEVICE DEPENDENT)
IOBS0B1  EQU   X'40' --- BIT 1 (DEVICE DEPENDENT)
IOBS0B2  EQU   X'20' --- BIT 2 (DEVICE DEPENDENT)
IOBS0B3  EQU   X'10' --- BIT 3 (DEVICE DEPENDENT)
IOBS0B4  EQU   X'08' --- BIT 4 (DEVICE DEPENDENT)
IOBS0B5  EQU   X'04' --- BIT 5 (DEVICE DEPENDENT)
IOBS0B6  EQU   X'02' --- BIT 6 (DEVICE DEPENDENT)
IOBS0B7  EQU   X'01' --- BIT 7 (DEVICE DEPENDENT)
IOBSNSC9 EQU   X'01' --- CHANNEL 9 SENSED IN CARRIAGE TAPE
IOBSENS1 DS    B ------- SECOND SENSE BYTE
IOBS1B0  EQU   X'80' --- BIT 0 (DEVICE DEPENDENT)
IOBS1B1  EQU   X'40' --- BIT 1 (DEVICE DEPENDENT)
IOBS1B2  EQU   X'20' --- BIT 2 (DEVICE DEPENDENT)
IOBS1B3  EQU   X'10' --- BIT 3 (DEVICE DEPENDENT)
IOBS1B4  EQU   X'08' --- BIT 4 (DEVICE DEPENDENT)
IOBS1B5  EQU   X'04' --- BIT 5 (DEVICE DEPENDENT)
IOBS1B6  EQU   X'02' --- BIT 6 (DEVICE DEPENDENT)
IOBS1B7  EQU   X'01' --- BIT 7 (DEVICE DEPENDENT)
IOBECBPT DS    0A ------ ADDRESS OF ECB TO BE POSTED ON I/O COMPLETION
IOBECBCC DS    CL1 ---- COMPLETION CODE FOR THIS I/O REQUEST
IOBECBPB DS    AL3 ----- ADDRESS OF ECB TO BE POSTED ON I/O COMPLETION
IOBFLAG3 DS    B ------- ERROR ROUTINE FLAG BYTE
IOBCSW   DS    CL7 ----- LOW ORDER 7 BYTES OF CSW AT CHANNEL END
IOBSTART DS    0A ------ ADDRESS OF CHANNEL PROGRAM
IOBSIOCC DS    B ------- BITS 2 AND 3 = C.C. FROM SIO
IOBSTRTB DS    AL3 ----- ADDRESS OF CHANNEL PROGRAM
IOBDCBPT DS    0A ------ ADDRESS OF DATA CONTROL BLOCK FOR THIS IOB
IOBRSV36 DS    XL1 ----- RESERVED
IOBDCBPB DS    AL3 ----- ADDRESS OF DATA CONTROL BLOCK FOR THIS IOB
IOBRESTR DS    0A ------ RESTART ADDRESS FOR ERROR RETRY
IOBREPOS DS    CL1 ----- CODE USED TO REPOSITION DEVICE
IOBRSTRB DS    AL3 ----- RESTART ADDRESS FOR ERROR RETRY
IOBINCAM DS    0H ------ VALUE USED TO INCREMENT BLOCK COUNT ON TAPE
IOBBTAMF DS    B ------- FLAG BYTE FOR BTAM
IOBPRMER EQU   X'80' --- 'SAD','ENABLE' ISSUED BY OPEN CAUSED I/O ERROR
IOBINUSE EQU   X'40' --- IOB IS IN USE
IOBRSV14 EQU   X'20',,C'X' RESERVED
IOBRSV15 EQU   X'10',,C'X' RESERVED
IOBRSV16 EQU   X'08',,C'X' RESERVED
IOBRSV17 EQU   X'04',,C'X' RESERVED
IOBRFTMG EQU   X'02' --- INDICATES A REQUEST-FOR-TEST MESSAGE FROM A
*                        REMOTE 3270                             ICB478
IOBOLTST EQU   X'01' --- LINE IS UNDER ON-LINE TEST OPERATION
IOBRSV19 DS    XL1 ----- RESERVED
         SPACE 1
         ORG   IOBINCAM
IOBCRDCC DS    CL1 ----- OPTICAL READER: DATA CHECK ERROR COUNT
IOBCRILC DS    CL1 ----- OPTICAL READER: INCORRECT LENGTH ERROR COUNT
         SPACE 2
IOBERRCT DS    H ------- NUMBER OF ERROR RETRIES
         SPACE 3
***********************************************************************
*                                                                     *
*                   EXTENSION SECTIONS OF THE IOB                     *
*                                                                     *
***********************************************************************
         SPACE 1
IOBEXTEN DS    0D
         SPACE 1
*                            ******************************************
*                            *                                        *
*                            *  DIRECT ACCESS EXTENSION *** 8 BYTES   *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBSEEK  DS    0CL8 ----
IOBM     DS    CL1 ----- RELATIVE EXTENT NUMBER FOR THIS REQUEST(0-15)
IOBBB    DS    0CL2 ---- BIN NUMBER(DATA CELL)
IOBBB1   DS    CL1
IOBBB2   DS    CL1
IOBCC    DS    0CL2 ---- CYLINDER NUMBER
IOBCC1   DS    CL1
IOBCC2   DS    CL1
IOBHH    DS    0CL2 ---- TRACK NUMBER
IOBHH1   DS    CL1
IOBHH2   DS    CL1
IOBR     DS    CL1 ----- RECORD NUMBER
         SPACE 1
*                            ******************************************
*                            *                                        *
         ORG   IOBEXTEN *    * BTAM EXTENSION ** 40 BYTES + CHNL.PGM  *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBUCBX  DS    CL1 ----- LINE NUMBER IS USED TO LOCATE THE
*                        PROPER UCB ADDRESS IN THE DEB.
IOBWORK  DS    CL5 ----- WORK AREA USED BY ERROR ROUTINES AND
*                        ON-LINE TERMINAL ROUTINES
IOBRCVPT DS    CL1 ----- RECEIVED ACK (ACK-0 OR ACK-1)
IOBSNDPT DS    CL1 ----- SENT ACK (ACK-0 OR ACK-1)
IOBERCCW DS    CL8 ----- CCW AREA USED BY BTAM ERROR ROUTINES
IOBERINF DS    CL16 ---- ERROR INFORMATION FIELD USED BY BTAM ERROR RTN
IOBCPA   DS    0D ------ AREA FOR CHANNEL PROGRAMS.  LENGTH VARIES
*                        ACCORDING TO TERMINAL AND OPTIONS
         SPACE 2
*                            ******************************************
*                            *                                        *
         ORG   IOBSEEK+8 *   *        BISAM EXTENSION *** 16 BYTES    *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBCCWAD DS    A ------- FOR FIXED LENGTH RCRDS:PTR.TO FIRST CCW
*                        FOR VARIABLE RECORDS:PTR.TO BUFFER(DYNAMIC
*                        BUFFERING SPECIFIED)AFTER COMPLETION OF
*                        READ FOR UPDATE(READ KU)
IOBINDCT DS    B -       FLAG BYTE
IOBDEQCP EQU   X'80' --- DEQUEUE CHANNEL PROGRAM FROM QUEUE
IOBUNSCH EQU   X'40' --- UNSCHEDULER QUEUE
IOBOVPTR EQU   X'20' --- PTR.TO OVERFLOW RECORD INDICATOR:
*                        BIT = 0 MEANS 'DECBAREA' + 6 POINTS TO
*                         OVERFLOW RECORD DATA
*                        BIT = 1 MEANS 'DCBMSWA' POINTS TO OVERFLOW
*                         RECORD KEY FOLLOWED BY DATA
IOBKEYAD EQU   X'10' --- PTR.TO OVERFLOW RECORD KEY INDICATOR:
*                        BIT = 0 MEANS 'DECBKEY' POINTS TO OVERFLOW
*                         RECORD KEY
*                        BIT = 1 MEANS 'DCBMSWA' + 8 POINTS TO
*                         OVERFLOW RECORD KEY
IOBRSV27 EQU   X'08',,C'X' RESERVED
IOBRSV28 EQU   X'04',,C'X' RESERVED
IOBRSV29 EQU   X'02',,C'X' RESERVED
IOBCHNNL EQU   X'01' --- CHANNEL END STATUS INDICATOR:
*                        BIT = 0 MEANS NORMAL CHANNEL END OCCURRED
*                        BIT = 1 MEANS ABNORMAL END OCCURRED
IOBUNSQR DS    B ------- REASON FOR UNSCHEDULED QUEUE
IOBCPBSY EQU   X'80' --- CHANNEL PROGRAM CP1  OR CP2 BUSY
IOBNTAV1 EQU   X'40' --- NO CP4,CP5 OR CP6 AVAILABLE
IOBNTAV2 EQU   X'20' --- NO CP7 AVAILABLE
IOBKNWR  EQU   X'10' --- WRITE KN IS IN EFFECT(UNSCHEDULED IOB IS FOR
*                        WRITE KN)
IOBKNRWR EQU   X'08' --- WRITE KN IS IN EFFECT(UNSCHEDULED IOB IS FOR
*                        READ OR WRITE KN)
IOBRSV30 EQU   X'04',,C'X' RESERVED
IOBRSV31 EQU   X'02',,C'X' RESERVED
IOBRSV32 EQU   X'01',,C'X' RESERVED
IOBAPP   DS    CL1 ----- APPENDAGE CODE -(CONSULT SYSTEM CONTROL BLOCKS
*                        MANUAL FOR CODE DEFINITIONS)
IOBASYN  DS    CL1 ----- ASYNCHRONOUS ROUTINE CODE -(CONSULT SYSTEM
*                        CONTROL BLOCKS MANUAL FOR CODE DEFINITIONS)
IOBFCHAD DS    0A ------ FORWARD CHAIN ADDRESS
IOBCOUNT DS    CL1 ----- WRITE CHECK COUNTER
IOBFCHNB DS    AL3 ----- FORWARD CHAIN ADDRESS
IOBBCHAD DS    A ------  BACKWARD CHAIN ADDRESS
         SPACE 2
*                            ******************************************
*                            *                                        *
         ORG   IOBEXTEN *    *      GAM EXTENSION *** 40 BYTES        *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBUCBXG DS    CL1 ----- UCB INDEX
IOBRSV37 DS    XL3 ----- RESERVED
IOBNXTPT DS    0A ------ PTR.TO NEXT AVAILABLE IOB
*                        ZERO IF LAST IOB
IOBSTATA DS    B ------- STATUS SWITCH
IOBAVLFL EQU   X'80' --- IF BIT IS 0,IOB IS AVAILABLE
*                        IF BIT IS 1,IOB IS NOT AVAILABLE
IOBRSV20 EQU   X'40',,C'X' RESERVED
IOBRSV21 EQU   X'20',,C'X' RESERVED
IOBRSV22 EQU   X'10',,C'X' RESERVED
IOBRSV23 EQU   X'08',,C'X' RESERVED
IOBRSV24 EQU   X'04',,C'X' RESERVED
IOBRSV25 EQU   X'02',,C'X' RESERVED
IOBRSV26 EQU   X'01',,C'X' RESERVED
IOBNXTPB DS    AL3 ----- PTR.TO NEXT AVAILABLE IOB
*                        ZERO IF LAST IOB
IOBCCW   DS    CL32 ---- CHANNEL COMMAND WORDS USED TO TRANSFER DATA
         SPACE 2
*                            ******************************************
*                            *                                        *
         ORG   IOBSEEK+8 *   *     QISAM EXTENSION *** 2 BYTES        *
*                            *                                        *
*                            ******************************************
         SPACE 1
W1IEXTEN DS    0CL2 ---- APPENDAGE
W1OEXTEN DS    CL2 -----  CODES
         SPACE 2
*                            ******************************************
*                            *                                        *
         ORG   IOBSEEK+8 *   * BDAM EXTENSION ** 40 BYTES + CHNL.PGM  *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBDBYTR DS    H ------- NUMBER OF UNUSED BYTES ON TRACK
IOBDIOBS DS    H ------- OVERALL SIZE OF THE IOB
IOBDPLAD DS    0A ------ ADDRESS OF NEXT IOB IN POOL OF IOB'S
IOBDAYLI DS    B ------- ALL BITS ZERO INDICATE AVAILABILITY OF IOB
IOBDPLB  DS    AL3 ----- ADDRESS OF NEXT IOB IN POOL OF IOB'S
IOBDTYPE DS    B ------- TYPE OF REQUEST AND SPECIFIED OPTIONS
IOBVERFY EQU   X'80' --- VERIFY
IOBOVFLO EQU   X'40' --- OVERFLOW
IOBEXTSC EQU   X'20' --- EXTENDED SEARCH
IOBFDBCK EQU   X'10' --- FEEDBACK
IOBACTAD EQU   X'08' --- ACTUAL ADDRESSING
IOBDYNBF EQU   X'04' --- DYNAMIC BUFFERING
IOBRDEXC EQU   X'02' --- READ EXCLUSIVE
IOBRELBL EQU   X'01' --- RELATIVE BLOCK ADDRESSING
IOBDTYP2 DS    B ------- SECOND BYTE OF OPTIONS AND REQUESTS
IOBSKEY  EQU   X'80' --- KEY ADDRESS CODED AS 'S'
IOBSBLKL EQU   X'40' --- BLOCK LENGTH CODED AS 'S'
IOBSUFFX EQU   X'30' --- INDICATES TYPE OF SUFFIX('R' OR 'RU')
IOBRQUST EQU   X'08' --- BIT = 1 MEANS READ; BIT = 0 MEANS WRITE;
IOBTYPE  EQU   X'04' --- BIT = 1 MEANS KEY TYPE
*                        BIT = 0 MEANS ID TYPE
IOBADDTY EQU   X'02' --- ADD TYPE
IOBRELEX EQU   X'01' --- RELEX MACRO ISSUED
IOBDSTAT DS    0CL2  --- STATUS OF THE REQUEST
IOBSTAT1 DS    B -       FLAG BYTE
IOBABNRM EQU   X'80' --- ABNORMAL COMPLETION
IOBNEWVL EQU   X'40' --- ON EXTENDED SEARCH,THE NEXT EXTENT IS ON A NEW
*                        VOLUME.THE ASI ROUTINE MUST ISSUE THE EXCP
*                        MACRO;END OF EXTENT APPENDAGE CANNOT.
IOBRSV33 EQU   X'20',,C'X' RESERVED
IOBPASS2 EQU   X'10' --- ON EXTENDED SEARCH,INDICATES TO RELATIVE BLOCK
*                        CONVERSION ROUTINE THAT SECOND PASS OF A
*                        TWO-PASS CONV.ROUTINE HAS COMPLETED
IOBENQUE EQU   X'08' --- RECORD ENQUEUED(EXCLUSIVE CONTROL REQUEST)
IOBBUFF  EQU   X'04' --- BUFFER ASSIGNED TO THIS IOB
IOBADDVU EQU   X'02' --- V OR U TYPE RECORD BEING ADDED TO DATA SET
IOBSIORT EQU   X'01' --- INDICATES TO DYNAMIC BUFFERING ROUTINE THAT
*                        IT WAS ENTERED FROM,AND IS TO RETURN TO,THE
*                        START I/O APPENDAGE MODULE
IOBSTAT2 DS    CL1 ----- ERROR CODE FOR ABNORMAL COMPLETION USED AS
*                        POST CODE IN ECB
IOBDCPND DS    A ------- ADDRESS OF LOCATION WHERE CHANNEL END PROGRAM
*                        SHOULD END
IOBDBYTN DS    H ------- NUMBER OF BYTES NEEDED ON A TRACK TO WRITE A
*                        NEW BLOCK
IOBRSV34 DS    XL2 ----- RESERVED
IOBDQPTR DS    A ------- PTR.TO IOB FOR NEXT I/O OPERATION TO EXECUTE
IOBRSV35 DS    XL8 ----- RESERVED
IOBDNCRF DS    CL8 ----- COUNT FIELD FOR NEW BLOCK
IOBCHNPR DS    0D ------ CHANNEL PROGRAM
         SPACE 2
*                            ******************************************
*                            *                                        *
         ORG   IOBSEEK+8 *   * NEW ACCESS METHOD EXTENSION - 24 BYTES *
*                            *                                        *
*                            ******************************************
         SPACE 1
IOBSEEK2 DS    0CL8 -    SEEK FIELD 2                            ICB435
IOBSK2M  DS    C -       EXTENT NUMBER                           ICB435
IOBSK2BB DS    CL2 -     BIN NUMBER                              ICB435
IOBSK2CC DS    CL2 -     CYLINDER NUMBER                         ICB435
IOBSK2HH DS    CL2 -     HEAD NUMBER                             ICB435
IOBSK2R  DS    C -       RECORD NUMBER                           ICB435
IOBBUFC  DS    A -       ADDRESS OF ASSOCIATED BUFFER CONTROL BLOCK
*                                                                ICB435
IOBREADA DS    A -       ADDRESS OF FIRST UNDONE READ CHANNEL PROGRAM
*                        SEGMENT                                 ICB435
IOBNEXTA DS    A -       ADDRESS OF NEXT ACTIVE IOB              ICB435
IOBRDCHP DS    A -       ADDRESS OF READ CHANNEL PROGRAM         ICB435
         MEND  , */
* %IOBL2 : ;
*
* DECLARE
*   1 IOBPREFX BASED(IOBPRPTR) BDY(WORD),
*
* /* *************************************************************** */
* /*                                                                 */
* /*                 PREFIX SECTIONS OF THE IOB                      */
* /*                                                                 */
* /* *************************************************************** */
*
*                        /* **************************************** */
*                        /*    QSAM,BSAM,BPAM PREFIX                 */
*                        /*    CHAINED SCHEDULING *** 16 BYTES       */
*                        /* **************************************** */
*
*    2 IOBCFLG1 CHAR(1),
*     3 IOBRSV01 BIT(1),             /* RESERVED                     */
*     3 IOBRSV02 BIT(1),             /* RESERVED                     */
*     3 IOBRSV03 BIT(1),             /* RESERVED                     */
*     3 IOBRSV04 BIT(1),             /* RESERVED                     */
*     3 IOBPTST  BIT(1),             /* NOTE OR POINT OPERATION IS
*                                       IN PROCESS                   */
*     3 IOBABAPP BIT(1),             /* ERROR PROCESSED ONCE BY
*                                       ABMORMAL-END APPENDAGE       */
*     3 IOBRSTCH BIT(1),             /* RESTART CHANNEL              */
*     3 IOBPCI   BIT(1),             /* PCI INTERRUPT HAS OCCURRED   */
*    2 IOBRSV05 CHAR(1),             /* RESERVED                     */
*    2 IOBCINOP CHAR(1),             /* OFFSET OF LAST I/O COMMAND
*                                       FOR OPERATION(NOP CCW) FROM
*                                       THE ICB ORIGIN               */
*    2 IOBCONOP CHAR(1),             /* OFFSET OF LAST I/O COMMAND
*                                       FOR OPERATION(NOP CCW) FROM
*                                       THE ICB ORIGIN               */
*    2 IOBCECB  FIXED(31),           /* EVENT CONTROL BLOCK          */
*    2 IOBCICB  PTR(31),             /* ADDR.OF FIRST ICB ON QUEUE   */
*    2 IOBCNOPA PTR(31);             /* ADDR.OF NOP COMMAND AT END
*                                       OF QUEUE                     */
*
*                        /* **************************************** */
*                        /*    QSAM,BSAM,BPAM PREFIX                 */
*                        /*    NORMAL SCHEDULING *** 8 BYTES         */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG01
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA1;
*       BASED(ADDR(IOBPREFX)+8) BDY(WORD),
*%GOTO IOBA2;
*%IOBA1 : ;
*       DEF(IOBPREFX) POS(9) BDY(WORD),
*%IOBA2 : ;
*    2 IOBNIOBA PTR(31),             /* ADDR.NEXT IOB ON CHAIN       */
*     3 IOBNFLG1 CHAR(1),            /* FLAG BYTE                    */
*      4 IOBPRTOV BIT(1),            /* 'PRTOV' HAS OCCURRED         */
*      4 IOBWRITE BIT(1),            /* 'WRITE' OPERATION IN PROCESS */
*      4 IOBREAD  BIT(1),            /* 'READ' OPERATION IN PROCESS  */
*      4 IOBUPDAT BIT(1),            /* BLOCK IS TO BE UPDATED       */
*      4 IOBBKSPC BIT(1),            /* IOB BEING USED FOR
*                                       BACKSPACE,CONTROL,NOTE/PT.   */
*      4 IOBSPAN  BIT(1),            /* THIS RECORD IS A SPANNED
*                                       RECORD                       */
*      4 IOBRSV06 BIT(1),            /* RESERVED                     */
*      4 IOBFIRST BIT(1),            /* THIS IS FIRST IOB ON CHAIN   */
*     3 IOBNIOBB PTR(24),            /* ADDR.NEXT IOB ON CHAIN       */
*    2 IOBNECB  FIXED(31);           /* EVENT CONTROL BLOCK          */
*
*                        /* **************************************** */
*                        /*    BDAM PREFIX *** 8 BYTES               */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG02
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA3;
*       BASED(ADDR(IOBPREFX)+8) BDY(WORD),
*%GOTO IOBA4;
*%IOBA3 : ;
*       DEF(IOBPREFX) POS(9) BDY(WORD),
*%IOBA4 : ;
*    2 IOBDQADA PTR(31),             /* ADDR.OF IOB WAITING TO
*                                       DEQUEUE TRACKS OCCUPIED BY
*                                       SPANNED RECORDS              */
*     3 IOBDEQIN CHAR(1),            /* DEQUEUE LOOP INDICATOR       */
*      4 IOBDEQ   BIT(1),            /* TASK WITH SPANNED RECORD
*                                       BEING DEQUEUED               */
*      4 IOBRSV07 BIT(1),            /* RESERVED                     */
*      4 IOBRSV08 BIT(1),            /* RESERVED                     */
*      4 IOBRSV09 BIT(1),            /* RESERVED                     */
*      4 IOBRSV10 BIT(1),            /* RESERVED                     */
*      4 IOBRSV11 BIT(1),            /* RESERVED                     */
*      4 IOBRSV12 BIT(1),            /* RESERVED                     */
*      4 IOBRSV13 BIT(1),            /* RESERVED                     */
*     3 IOBDQADB PTR(24),            /* ADDR.OF IOB WAITING TO
*                                       DEQUEUE TRACKS OCCUPIED BY
*                                       SPANNED RECORDS              */
*    2 IOBSWAP  PTR(31);             /* ADDR.OF SPANNED WORK AREA    */
*
*                        /* **************************************** */
*                        /*    GAM,QISAM PREFIX *** 4 BYTES          */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG03
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA5;
*       BASED(ADDR(IOBPREFX)+12) BDY(WORD),
*%GOTO IOBA6;
*%IOBA5 : ;
*       DEF(IOBPREFX) POS(13) BDY(WORD),
*%IOBA6 : ;
*    2 IOBGQECB FIXED(31);           /* EVENT CONTROL BLOCK          */
*
* /* *************************************************************** */
* /*                                                                 */
* /*                 STANDARD SECTION OF THE IOB                     */
* /*                                                                 */
* /* *************************************************************** */
*
* DECLARE
*   1 IOBSTDRD BASED(IOBSTPTR) BDY(WORD),
*    2 IOBFLAG1 CHAR(1),             /* FLAG BYTE                    */
*     3 IOBDATCH BIT(1),             /* DATA CHAINING USED IN
*                                       CHANNEL PROGRAM              */
*     3 IOBCMDCH BIT(1),             /* COMMAND CHAINING USED IN
*                                       CHANNEL PROGRAM              */
*     3 IOBERRTN BIT(1),             /* ERROR ROUTINE IS IN CONTROL  */
*     3 IOBRPSTN BIT(1),             /* DEVICE IS TO BE REPOSITIONED */
*     3 IOBCYCCK BIT(1),             /* CYCLIC REDUNDANCY CHECK
*                                       NEEDED(TAPE ONLY)            */
*      4 IOBFCREX BIT(1),            /* FETCH COMMAND RETRY EXIT
*                                       (DIRECT ACCESS ONLY)         */
*     3 IOBIOERR BIT(1),             /* I/O ERROR HAS OCCURRED       */
*     3 IOBUNREL BIT(1),             /* THIS I/O REQUEST IS
*                                       UNRELATED(NON-SEQUENTIAL)    */
*     3 IOBRSTRT BIT(1),             /* RESTART ADDR.IN IOB TO BE
*                                       USED                         */
*    2 IOBFLAG2 CHAR(1),             /* FLAG BYTE                    */
*     3 IOBHALT  BIT(1),             /* HALT I/O HAS BEEN ISSUED BY
*                                       SVC PURGE ROUTINE            */
*     3 IOBSENSE BIT(1),             /* ISSUE SENSE COMMAND AFTER
*                                       DEVICE END OCCURS            */
*     3 IOBPURGE BIT(1),             /* IOB HAS BEEN PURGED *ALLOW
*                                       I/O TO QUIESCE               */
*     3 IOBRDHA0 BIT(1),             /* HOME ADDRESS TO BE READ * NO
*                                       SEEK NEEDED                  */
*     3 IOBALTTR BIT(1),             /* NO TEST FOR OUT-OF-EXTENT *
*                                       AN ALTERNATE TRACKIS IN USE  */
*     3 IOBSKUPD BIT(1),             /* SEEK ADDRESS IS BEING
*                                       UPDATED -CYLINDER END OR
*                                       FILE MASK VIOLATION HAS
*                                       OCCURRED                     */
*     3 IOBSTATO BIT(1),             /* DEVICE END STATUS HAS BEEN
*                                       ORED WITH CHANNEL END STATUS
*                                       - GRAPHICS DEVICE            */
*     3 IOBPNCH  BIT(1),             /* TURNED ON BY QSAM WHEN ERROR
*                                       RECOVERY IS TO BE PROVIDED
*                                       FOR THE 2540 CARD PUNCH      */
*    2 IOBSENS0 CHAR(1),             /* FIRST SENSE BYTE             */
*     3 IOBS0B0  BIT(1),             /* BIT 0 (DEVICE DEPENDENT)     */
*     3 IOBS0B1  BIT(1),             /* BIT 1 (DEVICE DEPENDENT)     */
*     3 IOBS0B2  BIT(1),             /* BIT 2 (DEVICE DEPENDENT)     */
*     3 IOBS0B3  BIT(1),             /* BIT 3 (DEVICE DEPENDENT)     */
*     3 IOBS0B4  BIT(1),             /* BIT 4 (DEVICE DEPENDENT)     */
*     3 IOBS0B5  BIT(1),             /* BIT 5 (DEVICE DEPENDENT)     */
*     3 IOBS0B6  BIT(1),             /* BIT 6 (DEVICE DEPENDENT)     */
*     3 IOBS0B7  BIT(1),             /* BIT 7 (DEVICE DEPENDENT)     */
*      4 IOBSNSC9 BIT(1),            /* CHANNEL 9 SENSED IN
*                                       CARRIAGE TAPE                */
*    2 IOBSENS1 CHAR(1),             /* SECOND SENSE BYTE            */
*     3 IOBS1B0  BIT(1),             /* BIT 0 (DEVICE DEPENDENT)     */
*     3 IOBS1B1  BIT(1),             /* BIT 1 (DEVICE DEPENDENT)     */
*     3 IOBS1B2  BIT(1),             /* BIT 2 (DEVICE DEPENDENT)     */
*     3 IOBS1B3  BIT(1),             /* BIT 3 (DEVICE DEPENDENT)     */
*     3 IOBS1B4  BIT(1),             /* BIT 4 (DEVICE DEPENDENT)     */
*     3 IOBS1B5  BIT(1),             /* BIT 5 (DEVICE DEPENDENT)     */
*     3 IOBS1B6  BIT(1),             /* BIT 6 (DEVICE DEPENDENT)     */
*     3 IOBS1B7  BIT(1),             /* BIT 7 (DEVICE DEPENDENT)     */
*    2 IOBECBPT PTR(31),             /* ADDRESS OF ECB TO BE POSTED
*                                       ON I/O COMPLETION            */
*     3 IOBECBCC CHAR(1),            /* COMPLETION CODE FOR THIS I/O
*                                       REQUEST                      */
*     3 IOBECBPB PTR(24),            /* ADDRESS OF ECB TO BE POSTED
*                                       ON I/O COMPLETION            */
*    2 IOBFLAG3 CHAR(1),             /* ERROR ROUTINE FLAG BYTE      */
*    2 IOBCSW   CHAR(7),             /* LOW ORDER 7 BYTES OF CSW AT
*                                       CHANNEL END                  */
*    2 IOBSTART PTR(31),             /* ADDRESS OF CHANNEL PROGRAM   */
*     3 IOBSIOCC CHAR(1),            /* BITS 2 AND 3 = C.C. FROM SIO */
*     3 IOBSTRTB PTR(24),            /* ADDRESS OF CHANNEL PROGRAM   */
*    2 IOBDCBPT PTR(31),             /* ADDRESS OF DATA CONTROL
*                                       BLOCK FOR THIS IOB           */
*     3 IOBRSV36 CHAR(1),            /* RESERVED                     */
*     3 IOBDCBPB PTR(24),            /* ADDRESS OF DATA CONTROL
*                                       BLOCK FOR THIS IOB           */
*    2 IOBRESTR PTR(31),             /* RESTART ADDRESS FOR ERROR
*                                       RETRY                        */
*     3 IOBREPOS CHAR(1),            /* CODE USED TO REPOSITION
*                                       DEVICE                       */
*     3 IOBRSTRB PTR(24),            /* RESTART ADDRESS FOR ERROR
*                                       RETRY                        */
*    2 IOBINCAM FIXED(15) BDY(WORD), /* VALUE USED TO INCREMENT
*                                       BLOCK COUNT ON TAPE          */
*     3 IOBBTAMF CHAR(1),            /* FLAG BYTE FOR BTAM           */
*      4 IOBPRMER BIT(1),            /* 'SAD','ENABLE' ISSUED BY
*                                       OPEN CAUSED I/O ERROR        */
*      4 IOBINUSE BIT(1),            /* IOB IS IN USE                */
*      4 IOBRSV14 BIT(1),            /* RESERVED                     */
*      4 IOBRSV15 BIT(1),            /* RESERVED                     */
*      4 IOBRSV16 BIT(1),            /* RESERVED                     */
*      4 IOBRSV17 BIT(1),            /* RESERVED                     */
*      4 IOBRFTMG BIT(1),            /* INDICATES A REQUEST-FOR-TEST
*                                       MESSAGE FROM A REMOTE 3270
*                                                              ICB478*/
*      4 IOBOLTST BIT(1),            /* LINE IS UNDER ON-LINE TEST
*                                       OPERATION                    */
*     3 IOBRSV19 CHAR(1),            /* RESERVED                     */
*    2 IOBERRCT FIXED(15);           /* NUMBER OF ERROR RETRIES      */
*
* DECLARE 1 IOBORG04
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA7;
*       BASED(ADDR(IOBINCAM)) BDY(WORD),
*%GOTO IOBA8;
*%IOBA7 : ;
*       DEF(IOBINCAM) BDY(WORD),
*%IOBA8 : ;
*    2 IOBCRDCC CHAR(1),    /* OPTICAL READER:DATA CHECK ERROR COUNT */
*    2 IOBCRILC CHAR(1);    /* OPTICAL RDR:INCORRECT LENGTH ERROR CT.*/
*
*
* /* *************************************************************** */
* /*                                                                 */
* /*                EXTENSION SECTIONS OF THE IOB                    */
* /*                                                                 */
* /* *************************************************************** */
*
*                        /* **************************************** */
*                        /*    DIRECT ACCESS EXTENSION *** 8 BYTES   */
*                        /* **************************************** */
*
* DECLARE
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA9;
*   1 IOBEXTEN BASED(ADDR(IOBSTDRD)+32) BDY(WORD),
*%GOTO IOBA10;
*%IOBA9 : ;
*   1 IOBEXTEN DEF(IOBSTDRD) POS(33) BDY(WORD),
*%IOBA10 : ;
*    2 IOBSEEK  CHAR(8) BDY(WORD),
*     3 IOBM     CHAR(1),            /* RELATIVE EXTENT NUMBER FOR
*                                       THIS REQUEST(0-15)           */
*     3 IOBBB    CHAR(2),            /* BIN NUMBER(DATA CELL)        */
*      4 IOBBB1   CHAR(1),
*      4 IOBBB2   CHAR(1),
*     3 IOBCC    CHAR(2),            /* CYLINDER NUMBER              */
*      4 IOBCC1   CHAR(1),
*      4 IOBCC2   CHAR(1),
*     3 IOBHH    CHAR(2),            /* TRACK NUMBER                 */
*      4 IOBHH1   CHAR(1),
*      4 IOBHH2   CHAR(1),
*     3 IOBR     CHAR(1);            /* RECORD NUMBER                */
*
*                        /* **************************************** */
*                        /*    BTAM EXTENSION *** 40 BYTES +         */
*                        /*                   CHANNEL PROGRAM        */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG05
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA11;
*       BASED(ADDR(IOBEXTEN)) BDY(WORD),
*%GOTO IOBA12;
*%IOBA11 : ;
*       DEF(IOBEXTEN) BDY(WORD),
*%IOBA12 : ;
*    2 IOBUCBX  CHAR(1),             /* LINE NUMBER IS USED TO
*                                       LOCATE THE PROPER UCB
*                                       ADDRESS IN THE DEB.          */
*    2 IOBWORK  CHAR(5),             /* WORK AREA USED BY ERROR
*                                       ROUTINES AND ON-LINE
*                                       TERMINAL ROUTINES            */
*    2 IOBRCVPT CHAR(1),             /* RECEIVED ACK (ACK-0 OR ACK-1)*/
*    2 IOBSNDPT CHAR(1),             /* SENT ACK (ACK-0 OR ACK-1) */
*    2 IOBERCCW CHAR(8) BDY(WORD),   /* CCW AREA USED BY BTAM ERROR
*                                       ROUTINES                     */
*    2 IOBERINF CHAR(16) BDY(WORD),  /* ERROR INFORMATION FIELD USED
*                                       BY BTAM ERROR RTN            */
*    2 IOBCPA   CHAR(8) BDY(WORD);   /* AREA FOR CHANNEL PROGRAMS.
*                                       LENGTH VARIES ACCORDING TO
*                                       TERMINAL AND OPTIONS         */
*
*                        /* **************************************** */
*                        /*    GAM EXTENSION *** 40 BYTES            */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG06
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA13;
*       BASED(ADDR(IOBEXTEN)) BDY(WORD),
*%GOTO IOBA14;
*%IOBA13 : ;
*       DEF(IOBEXTEN) BDY(WORD),
*%IOBA14 : ;
*     3 IOBUCBXG CHAR(1),            /* UCB INDEX                    */
*     3 IOBRSV37 CHAR(3),            /* RESERVED                     */
*     3 IOBNXTPT PTR(31),            /* PTR.TO NEXT AVAILABLE IOB
*                                       ZERO IF LAST IOB             */
*      4 IOBSTATA CHAR(1),           /* STATUS SWITCH                */
*       5 IOBAVLFL BIT(1),           /* IF BIT IS 0,IOB IS AVAILABLE
*                                       IF BIT IS 1,IOB IS NOT
*                                       AVAILABLE                    */
*       5 IOBRSV20 BIT(1),           /* RESERVED                     */
*       5 IOBRSV21 BIT(1),           /* RESERVED                     */
*       5 IOBRSV22 BIT(1),           /* RESERVED                     */
*       5 IOBRSV23 BIT(1),           /* RESERVED                     */
*       5 IOBRSV24 BIT(1),           /* RESERVED                     */
*       5 IOBRSV25 BIT(1),           /* RESERVED                     */
*       5 IOBRSV26 BIT(1),           /* RESERVED                     */
*      4 IOBNXTPB PTR(24),           /* PTR.TO NEXT AVAILABLE IOB
*                                       ZERO IF LAST IOB             */
*     3 IOBCCW   CHAR(32) BDY(WORD); /* CHANNEL COMMAND WORDS USED
*                                       TO TRANSFER DATA             */
*
*                        /* **************************************** */
*                        /*    QISAM EXTENSION *** 2 BYTES           */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG07
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA15;
*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),
*%GOTO IOBA16;
*%IOBA15 : ;
*       DEF(IOBEXTEN) POS(9) BDY(WORD),
*%IOBA16 : ;
*    2 W1OEXTEN CHAR(2),             /* CODES                        */
*     3 W1IEXTEN CHAR(2);            /* APPENDAGE                    */
*
*                        /* **************************************** */
*                        /*    BISAM EXTENSION *** 16 BYTES          */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG08
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA17;
*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),
*%GOTO IOBA18;
*%IOBA17 : ;
*       DEF(IOBEXTEN) POS(9) BDY(WORD),
*%IOBA18 : ;
*    2 IOBCCWAD PTR(31),             /* FOR FIXED LENGTH
*                                       RCRDS:PTR.TO FIRST CCW FOR
*                                       VARIABLE RECORDS:PTR.TO
*                                       BUFFER(DYNAMIC BUFFERING
*                                       SPECIFIED)AFTER COMPLETION
*                                       OF  READ FOR UPDATE(READ KU) */
*    2 IOBINDCT CHAR(1),             /* FLAG BYTE                    */
*     3 IOBDEQCP BIT(1),             /* DEQUEUE CHANNEL PROGRAM FROM
*                                       QUEUE                        */
*     3 IOBUNSCH BIT(1),             /* UNSCHEDULER QUEUE            */
*     3 IOBOVPTR BIT(1),             /* PTR.TO OVERFLOW RECORD
*                                       INDICATOR: BIT = 0 MEANS
*                                       'DECBAREA' + 6 POINTS TO
*                                       OVERFLOW RECORD DATA BIT = 1
*                                       MEANS 'DCBMSWA' POINTS TO
*                                       OVERFLOW RECORD KEY FOLLOWED
*                                       BY DATA                      */
*     3 IOBKEYAD BIT(1),             /* PTR.TO OVERFLOW RECORD KEY
*                                       INDICATOR: BIT = 0 MEANS
*                                       'DECBKEY' POINTS TO OVERFLOW
*                                       RECORD KEY BIT = 1 MEANS
*                                       'DCBMSWA' + 8 POINTS TO
*                                       OVERFLOW RECORD KEY          */
*     3 IOBRSV27 BIT(1),             /* RESERVED                     */
*     3 IOBRSV28 BIT(1),             /* RESERVED                     */
*     3 IOBRSV29 BIT(1),             /* RESERVED                     */
*     3 IOBCHNNL BIT(1),             /* CHANNEL END STATUS
*                                       INDICATOR:  BIT = 0 MEANS
*                                       NORMAL CHANNEL END OCCURRED
*                                       BIT = 1 MEANS ABNORMAL END
*                                       OCCURRED                     */
*    2 IOBUNSQR CHAR(1),             /* REASON FOR UNSCHEDULED QUEUE */
*     3 IOBCPBSY BIT(1),             /* CHANNEL PROGRAM CP1          */
*     3 IOBNTAV1 BIT(1),             /* NO CP4,CP5 OR CP6 AVAILABLE  */
*     3 IOBNTAV2 BIT(1),             /* NO CP7 AVAILABLE             */
*     3 IOBKNWR  BIT(1),             /* WRITE KN IS IN
*                                       EFFECT(UNSCHEDULED IOB IS
*                                       FOR  WRITE KN)               */
*     3 IOBKNRWR BIT(1),             /* WRITE KN IS IN
*                                       EFFECT(UNSCHEDULED IOB IS
*                                       FOR  READ OR WRITE KN)       */
*     3 IOBRSV30 BIT(1),             /* RESERVED                     */
*     3 IOBRSV31 BIT(1),             /* RESERVED                     */
*     3 IOBRSV32 BIT(1),             /* RESERVED                     */
*    2 IOBAPP   CHAR(1),             /* APPENDAGE CODE -(CONSULT
*                                       SYSTEM CONTROL BLOCKSMANUAL
*                                       FOR CODE DEFINITIONS)        */
*    2 IOBASYN  CHAR(1),             /* ASYNCHRONOUS ROUTINE CODE
*                                       -(CONSULT SYSTEM CONTROL
*                                       BLOCKS MANUAL FOR CODE
*                                       DEFINITIONS)                 */
*    2 IOBFCHAD PTR(31),             /* FORWARD CHAIN ADDRESS        */
*     3 IOBCOUNT CHAR(1),            /* WRITE CHECK COUNTER          */
*     3 IOBFCHNB PTR(24),            /* FORWARD CHAIN ADDRESS        */
*    2 IOBBCHAD PTR(31);             /* BACKWARD CHAIN ADDRESS       */
*
*                        /* **************************************** */
*                        /*    BDAM EXTENSION *** 40 BYTES +         */
*                        /*                   CHANNEL PROGRAM        */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG09
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA19;
*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),
*%GOTO IOBA20;
*%IOBA19 : ;
*       DEF(IOBEXTEN) POS(9) BDY(WORD),
*%IOBA20 : ;
*    2 IOBDBYTR FIXED(15),           /* NUMBER OF UNUSED BYTES ON
*                                       TRACK                        */
*    2 IOBDIOBS FIXED(15),           /* OVERALL SIZE OF THE IOB      */
*    2 IOBDPLAD PTR(31),             /* ADDRESS OF NEXT IOB IN POOL
*                                       OF IOB'S                     */
*     3 IOBDAYLI CHAR(1),            /* ALL BITS ZERO INDICATE
*                                       AVAILABILITY OF IOB          */
*     3 IOBDPLB  PTR(24),            /* ADDRESS OF NEXT IOB IN POOL
*                                       OF IOB'S                     */
*    2 IOBDTYPE CHAR(1),             /* TYPE OF REQUEST AND
*                                       SPECIFIED OPTIONS            */
*     3 IOBVERFY BIT(1),             /* VERIFY                       */
*     3 IOBOVFLO BIT(1),             /* OVERFLOW                     */
*     3 IOBEXTSC BIT(1),             /* EXTENDED SEARCH              */
*     3 IOBFDBCK BIT(1),             /* FEEDBACK                     */
*     3 IOBACTAD BIT(1),             /* ACTUAL ADDRESSING            */
*     3 IOBDYNBF BIT(1),             /* DYNAMIC BUFFERING            */
*     3 IOBRDEXC BIT(1),             /* READ EXCLUSIVE               */
*     3 IOBRELBL BIT(1),             /* RELATIVE BLOCK ADDRESSING    */
*    2 IOBDTYP2 CHAR(1),             /* SECOND BYTE OF OPTIONS AND
*                                       REQUESTS                     */
*     3 IOBSKEY  BIT(1),             /* KEY ADDRESS CODED AS 'S'     */
*     3 IOBSBLKL BIT(1),             /* BLOCK LENGTH CODED AS 'S'    */
*     3 IOBSUFFX BIT(2),             /* INDICATES TYPE OF SUFFIX('R'
*                                       OR 'RU')                     */
*     3 IOBRQUST BIT(1),             /* BIT = 1 MEANS READ, BIT = 0
*                                       MEANS WRITE.                 */
*     3 IOBTYPE  BIT(1),             /* BIT = 1 MEANS KEY TYPE BIT =
*                                       0 MEANS ID TYPE              */
*     3 IOBADDTY BIT(1),             /* ADD TYPE                     */
*     3 IOBRELEX BIT(1),             /* RELEX MACRO ISSUED           */
*    2 IOBDSTAT CHAR(2),             /* STATUS OF THE REQUEST        */
*     3 IOBSTAT1 CHAR(1),            /* FLAG BYTE                    */
*      4 IOBABNRM BIT(1),            /* ABNORMAL COMPLETION          */
*      4 IOBNEWVL BIT(1),            /* ON EXTENDED SEARCH,THE NEXT
*                                       EXTENT IS ON A NEWVOLUME.THE
*                                       ASI ROUTINE MUST ISSUE THE
*                                       EXCP MACRO-END OF EXTENT
*                                       APPENDAGE CANNOT.            */
*      4 IOBRSV33 BIT(1),            /* RESERVED                     */
*      4 IOBPASS2 BIT(1),            /* ON EXTENDED SEARCH,INDICATES
*                                       TO RELATIVE BLOCKCONVERSION
*                                       ROUTINE THAT SECOND PASS OF
*                                       A  TWO-PASS CONV.ROUTINE HAS
*                                       COMPLETED                    */
*      4 IOBENQUE BIT(1),            /* RECORD ENQUEUED(EXCLUSIVE
*                                       CONTROL REQUEST)             */
*      4 IOBBUFF  BIT(1),            /* BUFFER ASSIGNED TO THIS IOB  */
*      4 IOBADDVU BIT(1),            /* V OR U TYPE RECORD BEING
*                                       ADDED TO DATA SET            */
*      4 IOBSIORT BIT(1),            /* INDICATES TO DYNAMIC
*                                       BUFFERING ROUTINE THAT IT
*                                       WAS ENTERED FROM,AND IS TO
*                                       RETURN TO,THE START I/O
*                                       APPENDAGE MODULE             */
*     3 IOBSTAT2 CHAR(1),            /* ERROR CODE FOR ABNORMAL
*                                       COMPLETION USED AS POST CODE
*                                       IN ECB                       */
*    2 IOBDCPND PTR(31),             /* ADDRESS OF LOCATION WHERE
*                                       CHANNEL END PROGRAM SHOULD
*                                       END                          */
*    2 IOBDBYTN FIXED(15),           /* NUMBER OF BYTES NEEDED ON A
*                                       TRACK TO WRITE A NEW BLOCK   */
*    2 IOBRSV34 CHAR(2),             /* RESERVED                     */
*    2 IOBDQPTR PTR(31),             /* PTR.TO IOB FOR NEXT I/O
*                                       OPERATION TO EXECUTE         */
*    2 IOBRSV35 CHAR(8) BDY(WORD),   /* RESERVED                     */
*    2 IOBDNCRF CHAR(8) BDY(WORD),   /* COUNT FIELD FOR NEW BLOCK    */
*    2 IOBCHNPR CHAR(0) BDY(WORD);   /* CHANNEL PROGRAM STARTS HERE  */
*
*                        /* **************************************** */
*                        /*    NEW ACCESS METHOD EXTENSION           */
*                        /*        *** 24 BYTES                      */
*                        /* **************************************** */
*
* DECLARE 1 IOBORG10
*%IF IKEPLS='2'  %THEN
*    %GOTO IOBA21;
*       BASED(ADDR(IOBEXTEN)+8) BDY(WORD),
*%GOTO IOBA22;
*%IOBA21 : ;
*       DEF(IOBEXTEN) POS(9) BDY(WORD),
*%IOBA22 : ;
*    2 IOBSEEK2 CHAR(8) BDY(WORD),   /* SEEK FIELD 2           ICB435*/
*     3 IOBSK2M  CHAR(1),            /* EXTENT NUMBER          ICB435*/
*     3 IOBSK2BB CHAR(2),            /* BIN NUMBER             ICB435*/
*     3 IOBSK2CC CHAR(2),            /* CYLINDER NUMBER        ICB435*/
*     3 IOBSK2HH CHAR(2),            /* HEAD NUMBER            ICB435*/
*     3 IOBSK2R  CHAR(1),            /* RECORD NUMBER          ICB435*/
*    2 IOBBUFC  PTR(31),             /* ADDRESS OF ASSOCIATED BUFFER
*                                       CONTROL BLOCK          ICB435*/
*    2 IOBREADA PTR(31),             /* ADDRESS OF FIRST UNDONE READ
*                                       CHANNEL PROGRAM SEGMENT
*                                                              ICB435*/
*    2 IOBNEXTA PTR(31),             /* ADDRESS OF NEXT ACTIVE IOB
*                                                              ICB435*/
*    2 IOBRDCHP PTR(31);             /* ADDRESS OF READ CHANNEL
*                                       PROGRAM                ICB435*/
./ ADD NAME=IHACDE   0100-19106-19106-1238-00148-00148-00000-MZAP78  17
*
*        %GOTO CDEL1;       /*
         MACRO
         IHACDE
CDENTRY  DSECT  ,  */
*%CDEL1 : ;
*
*/* **************************************************************** */
*/*             CONTENTS DIRECTORY ENTRY                             */
*/*                                                                  */
*/*  AOS/2 RELEASE 1, 03/15/72, LEVEL=5                              */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - A DSECT IS PRODUCED AND A USING ON CDENTRY GIVES     */
*/*             ADDRESSABILITY FOR ALL SYMBOLS.                      */
*/*      PL/S - DCL CDENTPTR PTR                                     */
*/* **************************************************************** */
*%GOTO CDEL2;  /*
         SPACE 1
CDCHAIN  DS    0A -           SAME AS CDCHAINA BELOW
CDATTR   DS    B -            ATTRIBUTE FLAGS
CDNIP    EQU   X'80' -        MODULE LOADED BY NIP OR FIXED/MODIFIED
*                             LPA MODULE
CDNIC    EQU   X'40' -        MODULE IS IN PROCESS OF BEING LOADED
CDREN    EQU   X'20' -        MODULE IS REENTERABLE
CDSER    EQU   X'10' -        MODULE IS SERIALLY REUSABLE
CDNFN    EQU   X'08' -        MODULE IS NOT REUSABLE (NON-FUNCTIONAL)
CDMIN    EQU   X'04' -        THIS IS A MINOR CDE
CDJPA    EQU   X'02' -        MODULE IS IN JOB PACK AREA
CDNLR    EQU   X'01' -        MODULE IS NOT LOADABLE-ONLY
CDCHAINA DS    AL3 -          ADDRESS OF NEXT CDE IN QUEUE (EITHER JPAQ
*                             OR LPAQ)
CDRRBP   DS    0A -           SAME AS CDRRBPA BELOW
CDROLL   DS    FL1 -          BITS 4-7 ARE USED TO EXTEND THE USE
*                             COUNT OF A MODULE TO 4095.  THE VALUE
*                             IN THIS FIELD INDICATES THE NUMBER OF
*                             OVERFLOWS IN FIELD CDUSE.
CDRRBPA  DS    AL3 -          IF THE MODULE IS REENTERABLE, THIS FIELD
*                             CONTAINS THE ADDRESS OF THE LAST RB THAT
*                             CONTROLLED THE MODULE.  IF THE MODULE IS
*                             SERIALLY REUSABLE, THIS FIELD CONTAINS
*                             THE ADDRESS OF THE RB AT THE TOP OF THE
*                             WAITING (RBPGMQ) QUEUE.  IF THE MODULE
*                             WAS REQUESTED ONLY THROUGH LOAD MACRO
*                             INSTRUCTIONS, CONTAINS ZERO.
CDNAME   DS    CL8 -          8-BYTE NAME
CDENTPT  DS    0A -           SAME AS CDENTPTA BELOW
CDUSE    DS    FL1 -          VALUE CONTAINS THE MODULE USE COUNT AND
*                             MUST BE USED IN CONJUNCTION WITH BITS
*                             4-7 OF CDROLL
CDENTPTA DS    AL3 -          MODULE'S RELOCATED ENTRY POINT ADDRESS
CDXLMJP  DS    0A -           SAME AS CDXLMJPA BELOW
CDATTR2  DS    B -            SECOND ATTRIBUTE FIELD
CDSPZ    EQU   X'80' -        MODULE IS IN SUBPOOL ZERO
CDREL    EQU   X'40' -        MODULE IS INACTIVE AND MAY BE RELEASED
*                             BY THE GETMAIN ROUTINE (CDPURGE)
CDXLE    EQU   X'20' -        EXTENT LIST HAS BEEN BUILT FOR MODULE.
*                             MAIN STORAGE OCCUPIED BY MODULE IS
*                             DESCRIBED THEREIN.
CDRLC    EQU   X'10' -        THIS CDE CONTAINS A MINOR ENTRY POINT
*                             ADDRESS THAT HAS BEEN RELOCATED BY THE
*                             PROGRAM FETCH ROUTINE
CDTSO    EQU   X'08' -        THIS IS A TSLPA CDE                ICB476
CDOLY    EQU   X'04' -        MODULE IS IN OVERLAY FORMAT        A27026
CDERSV02 EQU   X'02',,C'X' -  RESERVED
CDAUTH   EQU   X'01' -        PROGRAM AUTHORIZATION FLAG         ICB360
CDXLMJPA DS    AL3 -          EXTENT LIST ADDRESS OR MAJOR CDE ADDRESS
*                             IF THIS CDE IS A MINOR
         MEND  , */
*%CDEL2  :  ;
*
*DECLARE
*  1 CDENTRY  BASED(CDENTPTR),
*   2 CDCHAIN     PTR(31),               /* SAME AS CDCHAINA BELOW   */
*    3 CDATTR      CHAR(1),              /* ATTRIBUTE FLAGS          */
*     4 CDNIP    BIT(1),                 /* MODULE LOAD BY NIP OR
*                                           FIXED/MODIFIED LPA
*                                           MODULE                   */
*     4 CDNIC    BIT(1),                 /* MODULE IS IN PROCESS OF
*                                           BEING LOADED             */
*     4 CDREN    BIT(1),                 /* MODULE IS REENTRABLE     */
*     4 CDSER    BIT(1),                 /* MODULE IS SERIALLY
*                                           REUSABLE                 */
*     4 CDNFN    BIT(1),                 /* MODULE IS NOT REUSABLE
*                                           (NON-FUNCTIONAL)         */
*     4 CDMIN    BIT(1),                 /* THIS IS A MINOR CDE      */
*     4 CDJPA    BIT(1),                 /* MODULE IS IN JOB PACK
*                                           AREA                     */
*     4 CDNLR    BIT(1),                 /* MODULE IS NOT
*                                           LOADABLE-ONLY            */
*    3 CDCHAINA    PTR(24),              /* ADDRESS OF NEXT CDE IN
*                                           QUEUE (EITHER JPAQ OR
*                                           LPAQ)                    */
*   2 CDRRBP      PTR(31),               /* SAME AS CDRRBPA BELOW    */
*    3 CDROLL      PTR(8),               /* BITS 4-7 ARE USED TO
*                                           EXTEND THE USE COUNT OF A
*                                           MODULE TO 4095.  THE
*                                           VALUE IN THIS FIELD
*                                           INDICATES THE NUMBER OF
*                                           OVERFLOWS IN FIELD CDUSE */
*    3 CDRRBPA     PTR(24),              /* IF THE MODULE IS
*                                           REENTERABLE, THIS FIELD
*                                           CONTAINS THE ADDRESS OF
*                                           THE LAST RB THAT
*                                           CONTROLLED THE MODULE.
*                                           IF THE MODULE IS SERIALLY
*                                           REUSABLE, THIS FIELD
*                                           CONTAINS THE ADDRESS OF
*                                           THE RB AT THE TOP OF THE
*                                           WAITING (RBPGMQ) QUEUE.
*                                           IF THE MODULE WAS
*                                           REQUESTED ONLY THROUGH
*                                           LOAD MACRO INSTRUCTIONS,
*                                           CONTAINS ZERO.           */
*   2 CDNAME      CHAR(8),               /* 8 BYTE NAME              */
*   2 CDENTPT     PTR(31),               /* SAME AS CDENTPTA BELOW   */
*    3 CDUSE       PTR(8),               /* VALUE CONTAINS THE MODULE
*                                           USE COUNT AND MUST BE
*                                           USED IN CONJUNCTION WITH
*                                           BITS 4-7 OF CDROLL       */
*    3 CDENTPTA    PTR(24),              /* MODULE'S RELOCATED ENTRY
*                                           POINT ADDRESS            */
*   2 CDXLMJP     PTR(31),               /* SAME AS CDXLMJPA BELOW   */
*    3 CDATTR2     CHAR(1),              /* SECOND ATTRIBUTE FIELD   */
*     4 CDSPZ    BIT(1),                 /* MODULE IS IN SUBPOOL ZERO*/
*     4 CDREL    BIT(1),                 /* MODULE IS INACTIVE AND
*                                           MAY BE RELEASED BY THE
*                                           GETMAIN ROUTINE (CDPURGE)*/
*     4 CDXLE    BIT(1),                 /* EXTENT LIST HAS BEEN
*                                           BUILT FOR MODULE.
*                                           MAIN STORAGE  OCCUPIED
*                                           BY MODULE IS DESCRIBED
*                                           THEREIN                  */
*     4 CDRLC    BIT(1),                 /* THIS CDE CONTAINS A
*                                           MINOR ENTRY POINT ADDRESS
*                                           THAT HAS BEEN RELOCATED
*                                           BY THE PROGRAM FETCH
*                                           ROUTINE                  */
*     4 CDTSO    BIT(1),                 /* THIS IS A TSLPA CDE
*                                                              ICB476*/
*     4 CDOLY    BIT(1),                 /* MODULE IS IN OVERLAY
*                                           FORMAT             A27026*/
*     4 CDERSV02 BIT(1),                 /* RESERVED                 */
*     4 CDAUTH   BIT(1),                 /* PROGRAM AUTHORIZATION
*                                           FLAG               ICB360*/
*    3 CDXLMJPA    PTR(24);              /* EXTENT LIST ADDRESS OR
*                                           MAJOR CDE ADDRESS IF THIS
*                                           CDE IS A MINOR.          */
./ ADD NAME=IHALPDE  0100-19106-19106-1238-00115-00115-00000-MZAP78  17
*
*        %GOTO LPDEL1;      /*
         MACRO
         IHALPDE
LPDE     DSECT  ,  */
*%LPDEL1 : ;
*
*/* **************************************************************** */
*/*            LINK PACK DIRECTORY ENTRY                             */
*/*                                                                  */
*/*  AOS/2 RELEASE 1, 03/01/72, LEVEL=4                              */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - A DSECT IS PRODUCED AND A USING ON LPDE GIVES        */
*/*             ADDRESSABILITY FOR ALL SYMBOLS.                      */
*/*      PL/S - DCL LPDEPTR PTR                                      */
*/* **************************************************************** */
*%GOTO LPDEL2;  /*
         SPACE 1
LPDECHN  DS    0A -           SAME AS LPDECHNA BELOW
LPDEATTR DS    B -            ATTRIBUTE FLAGS
LPDENIP  EQU   X'80' -        MODULE LOADED BY NIP
LPDERS01 EQU   X'40',,C'X' -  RESERVED
LPDEREN  EQU   X'20' -        MODULE IS REENTERABLE
LPDESER  EQU   X'10' -        MODULE IS SERIALLY REUSABLE
LPDERS02 EQU   X'08',,C'X' -  RESERVED
LPDEMIN  EQU   X'04' -        THIS IS A MINOR LPDE
LPDERS03 EQU   X'02',,C'X' -  RESERVED
LPDENLR  EQU   X'01' -        NOT LOADABLE ONLY
LPDECHNA DS    AL3 -          ADDRESS OF NEXT LPDE IN CHAIN OF LPDE
*                             SYNONYMS
LPDERBP  DS    0A -           SAME AS LPDERBPA BELOW
LPDEROLL DS    FL1 -          COUNT FIELD - BITS 0-3 RESERVED,
*                             BITS 4-7 ZERO
LPDERBPA DS    AL3 -          RESERVED
LPDENAME DS    CL8 -          EITHER MODULE NAME OR ALIAS NAME
LPDENTP  DS    0A -           SAME AS LPDENTPA BELOW
LPDEUSE  DS    FL1 -          COUNT FIELD - BITS 0-7 ARE 0
LPDENTPA DS    AL3 -          RELOCATED ENTRY POINT ADDRESS
LPDEXLP  DS    0A -           SAME AS LPDEXLPA BELOW
LPDEATT2 DS    B -            SECOND ATTRIBUTE FLAG BYTE
LPDEAUTH EQU   X'80' -        PROGRAM AUTHORIZATION FLAG         ICB360
LPDERS04 EQU   X'40',,C'X' -  RESERVED
LPDEXLE  EQU   X'20' -        EXTENT LIST BUILT - MAIN STORAGE
*                             OCCUPIED BY MODULE IS DESCRIBED THEREIN
LPDERLC  EQU   X'10' -        LPDE CONTAINS A RELOCATED ALIAS ENTRY
*                             POINT ADDRESS
LPDERS05 EQU   X'08',,C'X' -  RESERVED
LPDERS06 EQU   X'04',,C'X' -  RESERVED
LPDERS07 EQU   X'02',,C'X' -  RESERVED
LPDERS08 EQU   X'01',,C'X' -  RESERVED
LPDEXLPA DS    AL3 -          RESERVED
LPDEMJNM DS    0CL8 -         MAJOR LPDE ENTRY POINT NAME WHEN
*                             LPDEMIN=1 OR 8-BYTE EXTENT LIST IF
*                             LPDEMIN=0
LPDEXTLN DS    F -            LENGTH OF MAIN STORAGE BLOCK IN WHICH
*                             MODULE RESIDES
LPDEXTAD DS    A -            ADDRESS OF MAIN STORAGE BLOCK IN WHICH
*                             MODULE RESIDES
         MEND  , */
*%LPDEL2 :  ;
*
*DECLARE
*  1 LPDE     BASED(LPDEPTR),
*   2 LPDECHN     PTR(31),               /* SAME AS LPDECHNA BELOW   */
*    3 LPDEATTR    CHAR(1),              /* ATTRIBUTE FLAGS          */
*     4 LPDENIP  BIT(1),                 /* MODULE LOADED BY NIP     */
*     4 LPDERS01 BIT(1),                 /* RESERVED                 */
*     4 LPDEREN  BIT(1),                 /* MODULE IS REENTERABLE    */
*     4 LPDESER  BIT(1),                 /* MODULE IS SERIALLY
*                                           REUSABLE                 */
*     4 LPDERS02 BIT(1),                 /* RESERVED                 */
*     4 LPDEMIN  BIT(1),                 /* THIS IS A MINOR LPDE     */
*     4 LPDERS03 BIT(1),                 /* RESERVED                 */
*     4 LPDENLR  BIT(1),                 /* NOT LOADABLE ONLY        */
*    3 LPDECHNA    PTR(24),              /* ADDRESS OF NEXT LPDE IN
*                                           CHAIN OF LPDE SYNONYMS   */
*   2 LPDERBP     PTR(31),               /* SAME AS LPDERBPA BELOW   */
*    3 LPDEROLL    PTR(8),               /* COUNT FIELD - BITS 0-3
*                                           RESERVED, BITS 4-7 ZERO  */
*    3 LPDERBPA    PTR(24),              /* RESERVED                 */
*   2 LPDENAME    CHAR(8),               /* EITHER MODULE NAME OR
*                                           ALIAS NAME               */
*   2 LPDENTP     PTR(31),               /* SAME AS LPDENTPA BELOW   */
*    3 LPDEUSE     PTR(8),               /* COUNT FIELD - BITS 0-7
*                                           ARE 0                    */
*    3 LPDENTPA    PTR(24),              /* RELOCATED ENTRY POINT
*                                           ADDRESS                  */
*   2 LPDEXLP     PTR(31),               /* SAME AS LPDEXLPA BELOW   */
*    3 LPDEATT2    CHAR(1),              /* SECOND ATTRIBUTE FLAG
*                                           BYTE                     */
*     4 LPDEAUTH BIT(1),                 /* PROGRAM AUTHORIZATION
*                                           FLAG               ICB360*/
*     4 LPDERS04 BIT(1),                 /* RESERVED                 */
*     4 LPDEXLE  BIT(1),                 /* EXTENT LIST BUILT -
*                                           MAIN STORAGE OCCUPIED
*                                           BY MODULE IS DESCRIBED
*                                           THEREIN                  */
*     4 LPDERLC  BIT(1),                 /* LPDE CONTAINS A RELOCATED
*                                           ALIAS ENTRY POINT ADDRESS*/
*     4 LPDERS05 BIT(1),                 /* RESERVED                 */
*     4 LPDERS06 BIT(1),                 /* RESERVED                 */
*     4 LPDERS07 BIT(1),                 /* RESERVED                 */
*     4 LPDERS08 BIT(1),                 /* RESERVED                 */
*    3 LPDEXLPA    PTR(24),              /* RESERVED                 */
*   2 LPDEMJNM    CHAR(8)  BDY(WORD),    /* MAJOR LPDE ENTRY POINT
*                                           NAME WHEN LPDEMIN=1 OR
*                                           8-BYTE EXTENT LIST IF
*                                           LPDEMIN=0                */
*    3 LPDEXTLN    FIXED(31),            /* LENGTH OF MAIN STORAGE
*                                           BLOCK IN WHICH MODULE
*                                           RESIDES                  */
*    3 LPDEXTAD    PTR(31);              /* ADDRESS OF MAIN STORAGE
*                                           BLOCK IN WHICH MODULE
*                                           RESIDES                  */
./ ADD NAME=IHAPDS   0100-19106-19106-1238-00436-00436-00000-MZAP78  17
*        %GOTO PDSBSL;                                               /*
         MACRO
         IHAPDS &PDSBLDL=YES,&DSECT=YES
         SPACE 1
***********************************************************************
*                                                                     *
*              PARTITIONED DATA SET (PDS) DIRECTORY ENTRY             *
*                                                                     *
*    RELEASE 2 AOS (AOS/1 REL 2, AOS/2 REL 1), 11/03/71, LEVEL=2      *
*                                                                     *
*        THE MACRO EXPANSION WILL INCLUDE THE TWO BYTES INSERTED      *
*        BY BLDL UNLESS PDSBLDL=NO IS SPECIFIED.                      *
*                                                                     *
*        THIS MACRO WILL PRODUCE A DSECT CARD UNLESS DSECT=NO IS      *
*        SPECIFIED.                                                   *
*                                                                     *
*        THE PDS DIRECTORY ENTRY MAY HAVE ANY OR ALL OF THE           *
*        FOLLOWING FIVE SECTIONS IN THIS ORDER --                     *
*        1.    BASIC (MAY OR MAY NOT CONTAIN 2 BLDL BYTES)            *
*        2.    SCATTER LOAD   - OPTIONAL                              *
*        3.    ALIAS          - OPTIONAL                              *
*        4.    SSI            - OPTIONAL                              *
*        5.    APF            - OPTIONAL                              *
***********************************************************************
         IEZBITS , -          SYMBOLIC BIT DEFINITIONS
         SPACE 1
         AIF   ('&DSECT' EQ 'NO').NODSCT2
PDS2     DSECT ,              PDS2PTR
         AGO   .CONT2
.NODSCT2 ANOP
         DS    0D
PDS2     EQU   * -            PDS2PTR
.CONT2   ANOP
PDS2NAME DS    CL8 -          LOAD MODULE MEMBER NAME OR ALIAS
PDS2TTRP DS    CL3 -          TTR OF FIRST BLOCK OF NAMED MEMBER
         AIF   ('&PDSBLDL' EQ 'NO').PDSX2
PDS2CNCT DS    FL1 -          CONCATENATION NUMBER OF THE DATA SET
PDS2LIBF DS    C -            LIBRARY FLAG FIELD
PDS2LNRM EQU   X'00' -        NORMAL CASE
PDS2LLNK EQU   X'01' -        IF DCB OPERAND IN BLDL MACRO INTRUCTION
*                             WAS SPECIFIED AS ZERO, NAME WAS FOUND IN
*                             LINK LIBRARY
PDS2LJOB EQU   X'02' -        IF DCB OPERAND IN BLDL MACRO INTRUCTION
*                             WAS SPECIFIED AS ZERO, NAME WAS FOUND IN
*                             JOB LIBRARY
DEZBYTE  EQU   PDS2LIBF --- ALIAS
.PDSX2   ANOP
PDS2INDC DS    B -            INDICATOR BYTE
PDS2ALIS EQU   BIT0 -         NAME IN THE FIRST FIELD IS AN ALIAS
DEALIAS  EQU   BIT0 --- ALIAS FOR PDS2ALIS
PDS2NTTR EQU   BIT1+BIT2 -    NUMBER OF TTR'S IN THE USER DATA FIELD
PDS2LUSR EQU   BIT3+BIT4+BIT5+BIT6+BIT7 - LENGTH OF USER DATA FIELD
*                             IN HALF WORDS
PDS2USRD DS    0C -           START OF VARIABLE LENGTH USER DATA FIELD
PDS2TTRT DS    CL3 -          TTR OF FIRST BLOCK OF TEXT
PDS2ZERO DS    C -            ZERO
PDS2TTRN DS    CL3 -          TTR OF NOTE LIST OR SCATTER/TRANSLATION
*                             TABLE.  USED FOR MODULES IN SCATTER LOAD
*                             FORMAT OR OVERLAY STRUCTURE ONLY.
PDS2NL   DS    FL1 -          NUMBER OF ENTRIES IN NOTE LIST FOR
*                             MODULES IN OVERLAY STRUCTURE,
*                             OTHERWISE ZERO
PDS2ATR  DS    0BL2 -         TWO-BYTE MODULE ATTRIBUTE FIELD
PDS2ATR1 DS    B -            FIRST BYTE OF MODULE ATTRIBUTE FIELD
PDS2RENT EQU   BIT0 -         REENTERABLE
DEREEN   EQU   BIT0 --- ALIAS FOR PDS2RENT
PDS2REUS EQU   BIT1 -         REUSABLE
PDS2OVLY EQU   BIT2 -         IN OVERLAY STRUCTURE
DEOVLY   EQU   BIT2 --- ALIAS FOR PDS2OVLY
PDS2TEST EQU   BIT3 -         MODULE TO BE TESTED - TESTRAN
PDS2LOAD EQU   BIT4 -         ONLY LOADABLE
DELODY   EQU   BIT4 --- ALIAS FOR PDS2LOAD
PDS2SCTR EQU   BIT5 -         SCATTER FORMAT
DESCAT   EQU   BIT5 --- ALIAS FOR PDS2SCTR
PDS2EXEC EQU   BIT6 -         EXECUTABLE
DEXCUT   EQU   BIT6 --- ALIAS FOR PDS2EXEC
PDS21BLK EQU   BIT7 -         IF ZERO, MODULE CONTAINS MULTIPLE RECORDS
*                             WITH AT LEAST ONE BLOCK OF TEXT.  ---
*                             IF ONE, MODULE CONTAINS NO RLD ITEMS AND
*                             ONLY ONE BLOCK OF TEXT.
PDS2ATR2 DS    B -            SECOND BYTE OF MODULE ATTRIBUTE FIELD
PDS2FLVL EQU   BIT0 -         IF ZERO, MODULE CAN BE PROCESSED BY ALL
*                             LEVELS OF LINKAGE EDITOR.  ---
*                             IF ONE, MODULE CAN BE PROCESSED ONLY BY
*                             F LEVEL OF LINKAGE EDITOR.
PDS2ORG0 EQU   BIT1 -         LINKAGE EDITOR ASSIGNED ORIGIN OF FIRST
*                             BLOCK OF TEXT IS ZERO.
PDS2EP0  EQU   BIT2 -         ENTRY POINT ASSIGNED BY LINKAGE EDITOR
*                             IS ZERO
PDS2NRLD EQU   BIT3 -         MODULE CONTAINS NO RLD ITEMS
PDS2NREP EQU   BIT4 -         MODULE CANNOT BE REPROCESSED BY LINKAGE
*                             EDITOR
PDS2TSTN EQU   BIT5 -         MODULE CONTAINS TESTRAN SYMBOL CARDS
PDS2LEF  EQU   BIT6 -         MODULE CREATED BY LINKAGE EDITOR F
PDS2REFR EQU   BIT7 -         REFRESHABLE MODULE
PDS2STOR DS    FL3 -          TOTAL CONTIGUOUS MAIN STORAGE REQUIREMENT
*                             OF MODULE
PDS2FTBL DS    FL2 -          LENGTH OF FIRST BLOCK OF TEXT
PDS2EPA  DS    AL3 -          ENTRY POINT ADDRESS ASSOCIATED WITH
*                             MEMBER NAME OR WITH ALIAS NAME IF ALIAS
*                             INDICATOR IS ONE
         DS    0AL3 -         LINKAGE EDITOR ASSIGNED ORIGIN OF FIRST
*                             BLOCK OF TEXT (OS USE OF FIELD)
PDS2FTBO DS    0BL3 -         FLAG BYTES (AOS USE OF FIELD)      ICB269
PDS2FTB1 DS    B -            BYTE 1 OF PDS2FTBO                 ICB269
PDSAOSLE EQU   BIT0 -         MODULE HAS BEEN PROCESSED BY AOS LINKAGE
*                             EDITOR                             ICB410
*        BIT1 IS RESERVED TO INDICATE ANOTHER EXPANSION WHEN IT
*        BECOMES NECESSARY                                       ICB410
PDS2PAGA EQU   BIT2 -         PAGE ALIGNMENT REQUIRED FOR LOAD
*                             MODULE                             ICB410
PDS2SSI  EQU   BIT3 -         SSI INFORMATION PRESENT            ICB410
PDSAPFLG EQU   BIT4 -         INFORMATION IN PDSAPF IS VALID     ICB360
PDS2FTB2 DS    B -            BYTE 2 OF PDS2FTBO                 ICB269
PDS2FTB3 DS    B -            BYTE 3 OF PDS2FTBO                 ICB269
PDSBCEND EQU   * -            END OF BASIC SECTION
PDSBCLN  EQU   PDSBCEND-PDS2 - LENGTH OF BASIC SECTION
         SPACE 2
*        THE FOLLOWING SECTION IS FOR LOAD MODULES WITH SCATTER LOAD
         SPACE 1
PDSS01   EQU   * -            START OF SCATTER LOAD SECTION
PDS2SLSZ DS    FL2 -          NUMBER OF BYTES IN SCATTER LIST
PDS2TTSZ DS    FL2 -          NUMBER OF BYTES IN TRANSLATION TABLE
PDS2ESDT DS    CL2 -          IDENTIFICATION OF ESD ITEM (ESDID) OF
*                             CONTROL SECTION TO WHICH FIRST BLOCK OF
*                             TEXT BELONGS
PDS2ESDC DS    CL2 -          IDENTIFICATION OF ESD ITEM (ESDID) OF
*                             CONTROL SECTION CONTAINING ENTRY POINT
PDSS01ND EQU   * -            END OF SCATTER LOAD SECTION
PDSS01LN EQU   PDSS01ND-PDSS01 - LENGTH OF SCATTER LOAD SECTION
         SPACE 2
*        THE FOLLOWING SECTION IS FOR LOAD MODULES WITH ALIAS NAMES
         SPACE 1
PDSS02   EQU   * -            START OF ALIAS SECTION
PDS2EPM  DS    AL3 -          ENTRY POINT FOR MEMBER NAME
DEENTBK  EQU   PDS2EPM --- ALIAS
PDS2MNM  DS    CL8 -          MEMBER NAME OF LOAD MODULE
PDSS02ND EQU   * -            END OF ALIAS SECTION
PDSS02LN EQU   PDSS02ND-PDSS02 - LENGTH OF ALIAS SECTION
         SPACE 2
*        THE FOLLOWING SECTION IS FOR SSI INFORMATION AND IS ON
*        A HALF-WORD BOUNDARY
         SPACE 1
PDSS03   DS    0H -           FORCE HALF-WORD ALIGNMENT FOR SSI
*                             SECTION
PDSSSIWD DS    0CL4 -         SSI INFORMATION WORD
PDSCHLVL DS    FL1 -          CHANGE LEVEL OF MEMBER
PDSSSIFB DS    B -            SSI FLAG BYTE
PDSFORCE EQU   BIT1 -         A FORCE CONTROL CARD WAS USED WHEN
*                             EXECUTING THE IHGUAP PROGRAM
PDSUSRCH EQU   BIT2 -         A CHANGE WAS MADE TO MEMBER BY THE
*                             INSTALLATION, AS OPPOSED TO AN
*                             IBM-DISTRIBUTED CHANGE
PDSEMFIX EQU   BIT3 -         SET WHEN AN EMERGENCY IBM-AUTHORIZED
*                             PROGRAM 'FIX' IS MADE, AS OPPOSED TO
*                             CHANGES THAT ARE INCLUDED IN AN
*                             IBM-DISTRIBUTED MAINTENANCE PACKAGE
PDSDEPCH EQU   BIT4 -         A CHANGE MADE TO THE MEMBER IS DEPENDENT
*                             UPON A CHANGE MADE TO SOME OTHER MEMBER
*                             IN THE SYSTEM
PDSSYSGN EQU   BIT5+BIT6 -    FLAGS THAT INDICATE WHETHER OR NOT A
*                             CHANGE TO THE MEMBER WILL NECESSITATE A
*                             PARTIAL OR COMPLETE REGENERATION OF THE
*                             SYSTEM
PDSNOSGN EQU   X'00' -        NOT CRITICAL FOR SYSTEM GENERATION
PDSCMSGN EQU   BIT6 -         MAY REQUIRE COMPLETE REGENERATION
PDSPTSGN EQU   BIT5 -         MAY REQUIRE PARTIAL REGENERATION
PDSIBMMB EQU   BIT7 -         MEMBER IS SUPPLIED BY IBM
PDSMBRSN DS    CL2 -          MEMBER SERIAL NUMBER
PDSS03ND EQU   * -            END OF SSI SECTION
PDSS03LN EQU   PDSS03ND-PDSS03 - LENGTH OF SSI SECTION
         SPACE 2
*        THE FOLLOWING SECTION IS FOR APF INFORMATION          ICB360 *
         SPACE 1
PDSS04   EQU   * -            START OF APF SECTION               ICB360
PDSAPF   DS    0CL2 -         PROGRAM AUTHORIZATION FACILITY (APF)
*                             FIELD                              ICB360
PDSAPFCT DS    FL1 -          LENGTH OF PROGRAM AUTHORIZATION CODE
*                             (PDSAPFAC) IN BYTES                ICB360
PDSAPFAC DS    C -            PROGRAM AUTHORIZATION CODE         ICB360
PDSS04ND EQU   * -            END OF APF SECTION                 ICB360
PDSS04LN EQU   PDSS04ND-PDSS04 - LENGTH OF APF SECTION           ICB360
         MEND  , */
*%PDSBSL  :  ;
*
* /* *************************************************************** */
* /*                                                                 */
* /*           PARTITIONED DATA SET (PDS) DIRECTORY ENTRY            */
* /*                                                                 */
* /*  RELEASE 2 AOS (AOS/1 REL 2, AOS/2 REL 1), 11/03/71, LEVEL=2    */
* /*                                                                 */
* /*     THE MACRO EXPANSION WILL INCLUDE THE TWO BYTES INSERTED     */
* /*     BY BLDL UNLESS %PDSBLDL IS SET TO 'NO'.                     */
* /*                                                                 */
* /*     THE PDS DIRECTORY ENTRY MAY HAVE ANY OR ALL OF THE          */
* /*     FOLLOWING FIVE SECTIONS IN THIS ORDER --                    */
* /*     1.    BASIC (MAY OR MAY NOT CONTAIN 2 BLDL BYTES)           */
* /*     2.    SCATTER LOAD   - OPTIONAL                             */
* /*     3.    ALIAS          - OPTIONAL                             */
* /*     4.    SSI            - OPTIONAL                             */
* /*     5.    APF            - OPTIONAL                             */
* /*                                                                 */
* /*     THE FOLLOWING 4 BSL STATEMENTS SHOW HOW THE STARTING        */
* /*     ADDRESS OF ANY OF THE FOUR OPTIONAL SECTIONS OF USER        */
* /*     DATA MAY BE OBTAINED.                                       */
* /*                                                                 */
* /*     (1)   PDSPTRV=ADDR(PDSBCEND)                                */
* /*     (2)   IF PDS2SCTR='1'B THEN PDSPTRV=PDSPTRV + LENGTH(PDSS01)*/
* /*     (3)   IF PDS2ALIS='1'B THEN PDSPTRV=PDSPTRV + LENGTH(PDSS02)*/
* /*     (4)   IF PDS2SSI='1'B THEN PDSPTRV=PDSPTRV + LENGTH(PDSS03) */
* /*                                                                 */
* /*     STATEMENT (1) GETS THE ADDRESS FOR THE START OF THE         */
* /*     OPTIONAL SECTIONS.  TO GET THE STARTING ADDRESS OF THE      */
* /*     SCATTER LOAD SECTION, USE STATEMENT (1).  FOR THE ALIAS     */
* /*     SECTION, USE STATEMENTS (1) AND (2).  FOR THE SSI SECTION,  */
* /*     USE STATEMENTS (1), (2) AND (3) AND ADD ONE TO ADDRESS IN   */
* /*     PDSPTRV IF ADDRESS IS NOT ON A HALF-WORD BOUNDARY.  FOR     */
* /*     THE APF SECTION, USE ALL 4 STATEMENTS.                      */
* /*                                                                 */
* /* *************************************************************** */
*
*DECLARE
*  1 PDS2     BASED(PDS2PTR),
*
*   2 PDS2NAME    CHAR(8),               /* LOAD MODULE MEMBER NAME
*                                           OR ALIAS                 */
*   2 PDS2TTRP    CHAR(3),               /* TTR OF FIRST BLOCK OF
*                                           NAMED MEMBER             */
*%IF PDSBLDL='NO'  %THEN
*   %GOTO PDSX2;
*   2 PDS2CNCT    PTR(8),                /* CONCATENATION NUMBER OF
*                                           THE DATA SET             */
*   2 PDS2LIBF    CHAR(1),               /* LIBRARY FLAG FIELD       */
*%DCL PDS2LNRM CHAR;
*%PDS2LNRM='''00''X';                    /* NORMAL CASE              */
*%DCL PDS2LLNK CHAR;
*%PDS2LLNK='''01''X';                    /* IF DCB OPERAND IN BLDL
*                                           MACRO INTRUCTION  WAS
*                                           SPECIFIED AS ZERO, NAME
*                                           WAS FOUND IN  LINK
*                                           LIBRARY                  */
*%DCL PDS2LJOB CHAR;
*%PDS2LJOB='''02''X';                    /* IF DCB OPERAND IN BLDL
*                                           MACRO INTRUCTION  WAS
*                                           SPECIFIED AS ZERO, NAME
*                                           WAS FOUND IN  JOB
*                                           LIBRARY                  */
*%PDSX2 : ;
*   2 PDS2INDC    CHAR(1),               /* INDICATOR BYTE           */
*    3 PDS2ALIS BIT(1),                  /* NAME IN THE FIRST FIELD
*                                           IS AN ALIAS              */
*    3 PDS2NTTR BIT(2),                  /* NUMBER OF TTR'S IN THE
*                                           USER DATA FIELD          */
*    3 PDS2LUSR BIT(5),                  /* LENGTH OF USER DATA
*                                           FIELD IN HALF WORDS      */
*   2 PDS2TTRT    CHAR(3),               /* TTR OF FIRST BLOCK OF
*                                           TEXT                     */
*    3 PDS2USRD    CHAR(1),              /* START OF VARIABLE LENGTH
*                                           USER DATA FIELD          */
*   2 PDS2ZERO    CHAR(1),               /* ZERO                     */
*   2 PDS2TTRN    CHAR(3),               /* TTR OF NOTE LIST OR
*                                           SCATTER/TRANSLATION
*                                           TABLE. USED FOR MODULES
*                                           IN SCATTER LOAD  FORMAT
*                                           OR OVERLAY STRUCTURE
*                                           ONLY.                    */
*   2 PDS2NL      PTR(8),                /* NUMBER OF ENTRIES IN
*                                           NOTE LIST FOR  MODULES
*                                           IN OVERLAY STRUCTURE,
*                                           OTHERWISE ZERO           */
*   2 PDS2ATR     CHAR(2),               /* TWO-BYTE MODULE
*                                           ATTRIBUTE FIELD          */
*    3 PDS2ATR1    BIT(8),               /* FIRST BYTE OF MODULE
*                                           ATTRIBUTE FIELD          */
*     4 PDS2RENT BIT(1),                 /* REENTERABLE              */
*     4 PDS2REUS BIT(1),                 /* REUSABLE                 */
*     4 PDS2OVLY BIT(1),                 /* IN OVERLAY STRUCTURE     */
*     4 PDS2TEST BIT(1),                 /* MODULE TO BE TESTED -
*                                           TESTRAN                  */
*     4 PDS2LOAD BIT(1),                 /* ONLY LOADABLE            */
*     4 PDS2SCTR BIT(1),                 /* SCATTER FORMAT           */
*     4 PDS2EXEC BIT(1),                 /* EXECUTABLE               */
*     4 PDS21BLK BIT(1),                 /* IF ZERO, MODULE CONTAINS
*                                           MULTIPLE RECORDS WITH AT
*                                           LEAST ONE BLOCK OF TEXT.
*                                           ---  IF ONE, MODULE
*                                           CONTAINS NO RLD ITEMS
*                                           AND  ONLY ONE BLOCK OF
*                                           TEXT.                    */
*    3 PDS2ATR2    BIT(8),               /* SECOND BYTE OF MODULE
*                                           ATTRIBUTE FIELD          */
*     4 PDS2FLVL BIT(1),                 /* IF ZERO, MODULE CAN BE
*                                           PROCESSED BY ALL  LEVELS
*                                           OF LINKAGE EDITOR. ---
*                                           IF ONE, MODULE CAN BE
*                                           PROCESSED ONLY BY  F
*                                           LEVEL OF LINKAGE EDITOR. */
*     4 PDS2ORG0 BIT(1),                 /* LINKAGE EDITOR ASSIGNED
*                                           ORIGIN OF FIRST  BLOCK
*                                           OF TEXT IS ZERO.         */
*     4 PDS2EP0  BIT(1),                 /* ENTRY POINT ASSIGNED BY
*                                           LINKAGE EDITOR  IS ZERO  */
*     4 PDS2NRLD BIT(1),                 /* MODULE CONTAINS NO RLD
*                                           ITEMS                    */
*     4 PDS2NREP BIT(1),                 /* MODULE CANNOT BE
*                                           REPROCESSED BY LINKAGE
*                                           EDITOR                   */
*     4 PDS2TSTN BIT(1),                 /* MODULE CONTAINS TESTRAN
*                                           SYMBOL CARDS             */
*     4 PDS2LEF  BIT(1),                 /* MODULE CREATED BY
*                                           LINKAGE EDITOR F         */
*     4 PDS2REFR BIT(1),                 /* REFRESHABLE MODULE       */
*   2 PDS2STOR    PTR(24)  BDY(BYTE),    /* TOTAL CONTIGUOUS MAIN
*                                           STORAGE REQUIREMENT OF
*                                           MODULE                   */
*   2 PDS2FTBL    FIXED(15) BDY(BYTE),   /* LENGTH OF FIRST BLOCK OF
*                                           TEXT                     */
*   2 PDS2EPA     PTR(24)  BDY(BYTE),    /* ENTRY POINT ADDRESS
*                                           ASSOCIATED WITH  MEMBER
*                                           NAME OR WITH ALIAS NAME
*                                           IF ALIAS  INDICATOR IS
*                                           ONE                      */
*   2 *           PTR(24)  BDY(BYTE),    /* LINKAGE EDITOR ASSIGNED
*                                           ORIGIN OF FIRST BLOCK OF
*                                           TEXT (OS USE OF FIELD)   */
*    3 PDS2FTBO    CHAR(3),              /* FLAG BYTES (AOS USE OF
*                                           FIELD)             ICB269*/
*     4 PDS2FTB1    BIT(8),              /* BYTE 1 OF PDS2FTBO ICB269*/
*      5 PDSAOSLE BIT(1),                /* MODULE HAS BEEN PROCESSED
*                                           BY AOS LINKAGE EDITOR
*                                                              ICB410*/
*      5 *        BIT(1),                /* RESERVED TO INDICATE
*                                           ANOTHER EXPANSION WHEN IT
*                                           BECOMES NECESSARY  ICB410*/
*      5 PDS2PAGA BIT(1),                /* PAGE ALIGNMENT REQUIRED
*                                           FOR LOAD MODULE    ICB410*/
*      5 PDS2SSI  BIT(1),                /* SSI INFORMATION PRESENT
*                                                              ICB410*/
*      5 PDSAPFLG BIT(1),                /* INFORMATION IN PDSAPF IS
*                                           VALID              ICB360*/
*      5 *        BIT(3),                /* RESERVED                 */
*     4 PDS2FTB2    CHAR(1),             /* BYTE 2 OF PDS2FTBO ICB269*/
*     4 PDS2FTB3    CHAR(1),             /* BYTE 3 OF PDS2FTBO ICB269*/
*   2 PDSBCEND    CHAR(0);               /* END OF BASIC SECTION     */
*
*
* /*     THE FOLLOWING SECTION IS FOR LOAD MODULES WITH SCATTER LOAD */
*
*DECLARE
*  1 PDSS01   BASED(PDSPTRV)  BDY(BYTE),
*   2 PDS2SLSZ    FIXED(15) BDY(BYTE),   /* NUMBER OF BYTES IN
*                                           SCATTER LIST             */
*   2 PDS2TTSZ    FIXED(15) BDY(BYTE),   /* NUMBER OF BYTES IN
*                                           TRANSLATION TABLE        */
*   2 PDS2ESDT    CHAR(2),               /* IDENTIFICATION OF ESD
*                                           ITEM (ESDID) OF  CONTROL
*                                           SECTION TO WHICH FIRST
*                                           BLOCK OF  TEXT BELONGS   */
*   2 PDS2ESDC    CHAR(2),               /* IDENTIFICATION OF ESD
*                                           ITEM (ESDID) OF  CONTROL
*                                           SECTION CONTAINING ENTRY
*                                           POINT                    */
*   2 PDSS01ND    CHAR(0);               /* END OF SCATTER LOAD
*                                           SECTION                  */
*
*
* /*     THE FOLLOWING SECTION IS FOR LOAD MODULES WITH ALIAS NAMES  */
*
*DECLARE
*  1 PDSS02   BASED(PDSPTRV)  BDY(BYTE),
*   2 PDS2EPM     PTR(24)  BDY(BYTE),    /* ENTRY POINT FOR MEMBER
*                                           NAME                     */
*   2 PDS2MNM     CHAR(8),               /* MEMBER NAME OF LOAD
*                                           MODULE                   */
*   2 PDSS02ND    CHAR(0);               /* END OF ALIAS SECTION     */
*
*
* /*     THE FOLLOWING SECTION IS FOR SSI INFORMATION AND IS ON      */
* /*     A HALF-WORD BOUNDARY                                        */
*
*DECLARE
*  1 PDSS03   BASED(PDSPTRV)  BDY(HWORD),
*   2 PDSSSIWD    CHAR(4),               /* SSI INFORMATION WORD     */
*    3 PDSCHLVL    PTR(8),               /* CHANGE LEVEL OF MEMBER   */
*    3 PDSSSIFB    BIT(8),               /* SSI FLAG BYTE            */
*     4 *        BIT(1),                 /* RESERVED                 */
*     4 PDSFORCE BIT(1),                 /* A FORCE CONTROL CARD WAS
*                                           USED WHEN EXECUTING THE
*                                           IHGUAP PROGRAM           */
*     4 PDSUSRCH BIT(1),                 /* A CHANGE WAS MADE TO
*                                           MEMBER BY THE
*                                           INSTALLATION, AS OPPOSED
*                                           TO AN IBM-DISTRIBUTED
*                                           CHANGE                   */
*     4 PDSEMFIX BIT(1),                 /* SET WHEN AN EMERGENCY
*                                           IBM-AUTHORIZED PROGRAM
*                                           'FIX' IS MADE, AS OPPOSED
*                                           TO CHANGES THAT ARE
*                                           INCLUDED IN AN IBM-
*                                           DISTRIBUTED MAINTENANCE
*                                           PACKAGE                  */
*     4 PDSDEPCH BIT(1),                 /* A CHANGE MADE TO THE
*                                           MEMBER IS DEPENDENT UPON
*                                           A CHANGE MADE TO SOME
*                                           OTHER MEMBER IN SYSTEM   */
*     4 PDSSYSGN BIT(2),                 /* FLAGS THAT INDICATE
*                                           WHETHER OR NOT A CHANGE
*                                           TO THE MEMBER WILL
*                                           NECESSITATE A PARTIAL OR
*                                           COMPLETE REGENERATION OF
*                                           THE SYSTEM               */
*%PDSNOSGN='''00''B';                    /* NOT CRITICAL FOR SYSTEM
*                                           GENERATION               */
*%PDSCMSGN='''01''B';                    /* MAY REQUIRE COMPLETE
*                                           REGENERATION             */
*%PDSPTSGN='''10''B';                    /* MAY REQUIRE PARTIAL
*                                           REGENERATION             */
*     4 PDSIBMMB BIT(1),                 /* MEMBER IS SUPPLIED BY IBM*/
*    3 PDSMBRSN    CHAR(2),              /* MEMBER SERIAL NUMBER     */
*   2 PDSS03ND    CHAR(0);               /* END OF SSI SECTION       */
*
*
* /*     THE FOLLOWING SECTION IS FOR APF INFORMATION          ICB360*/
*
*DECLARE
*  1 PDSS04   BASED(PDSPTRV)  BDY(BYTE),
*   2 PDSAPF      CHAR(2),               /* PROGRAM AUTHORIZATION
*                                           FACILITY (APF) FIELD
*                                                              ICB360*/
*    3 PDSAPFCT    PTR(8),               /* LENGTH OF PROGRAM
*                                           AUTHORIZATION CODE
*                                           (PDSAPFAC) IN BYTES
*                                                              ICB360*/
*    3 PDSAPFAC    CHAR(1),              /* PROGRAM AUTHORIZATION
*                                           CODE               ICB360*/
*   2 PDSS04ND    CHAR(0);               /* END OF APF SECTION ICB360*/
./ ADD NAME=IHARB    0100-19106-19106-1238-00563-00563-00000-MZAP78  17
*
*        %GOTO RBL1;        /*
         MACRO
         IHARB &DSECT=YES    */
*%RBL1 : ;
*
*/* **************************************************************** */
*/*                                                                  */
*/*      THIS MACRO MAPS AOS/2 REQUEST BLOCKS                        */
*/*                                                                  */
*/*      SVRB - SUPERVISOR REQUEST BLOCK FOR TRANSIENT SVC ROUTINES  */
*/*      SVRB - SUPERVISOR REQUEST BLOCK FOR RESIDENT SVC ROUTINES   */
*/*      IRB  - INTERRUPTION REQUEST BLOCK                           */
*/*      SIRB - SYSTEM INTERRUPT REQUEST BLOCK                       */
*/*      PRB  - PROGRAM REQUEST BLOCK                                */
*/*      TIRB - TASK INTERRUPTION REQUEST BLOCK                      */
*/*                                                                  */
*/*  AOS/2 RELEASE 1, 05/31/72, LEVEL=8                              */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.      */
*/*             USING ON RBPREFIX GIVES ADDRESSABILITY FOR ALL       */
*/*             SYMBOLS.                                             */
*/*      PL/S - DCL RBSECPTR PTR                                     */
*/* **************************************************************** */
*%GOTO RBL2;  /*
         SPACE 1
         IEZBITS , -          SYMBOLIC BIT DEFINITIONS
         SPACE 1
         MNOTE 0,'REPLACE IHARB WITH VS2 IKJRB'
         AIF   ('&DSECT' EQ 'NO').NODSCT1
RBPREFIX DSECT , -            RBSECPTR-64
         AGO   .CONT1
.NODSCT1 ANOP
         DS    0D
RBPREFIX EQU   * -            RBSECPTR-64
.CONT1   ANOP
         DS    7D -           RESERVED FOR FUTURE EXPANSION
RBPRFXST DS    0D -           START OF ASSIGNED FIELDS IN RB PREFIX
RBFLAGS1 DS    B -            FLAG BYTE
RBSLOCK  EQU   BIT0 -         INDICATES THAT THIS RB IS
*                             NON-DISPATCHABLE UNTIL THE SUPERVISOR
*                             LOCK (CVTSYLK) IS RESET  (ALL RB'S)
RBXWAIT  EQU   BIT1 -         INDICATES THAT THE PROGRAM OPERATING
*                             UNDER THIS RB HAS ISSUED AN EXPLICIT
*                             (SVC) WAIT  (ALL RB'S)
RBABEND  EQU   BIT2 -         ABEND SVRB  (SVRB-BOTH)
RBUPR    EQU   BIT3 -         INDICATES THAT ADDRESS OF A PIE HAS BEEN
*                             PLACED IN FIRST WORD OF RBEXSAVE AND A
*                             SUPERVISOR SPIE EXIT CAN BE SCHEDULED IF
*                             AN INVALID PAGE REFERENCE OCCURS
*                             (SVRB-BOTH)
RBASIR   EQU   BIT4 -         ASIR IS RUNNING UNDER THIS RB      ICB444
RBRSV001 EQU   BIT5,,C'X' -   RESERVED
RBRSV002 EQU   BIT6,,C'X' -   RESERVED
RBRSV003 EQU   BIT7,,C'X' -   RESERVED
RBRSV004 DS    XL3 -          RESERVED
RBWCSA   DS    FL1 -          NUMBER OF REQUESTS WAITING AT TIME OF
*                             TERMINATION (WAIT COUNT SAVE AREA)
*                             (ALL RB'S)
RBINTCDA DS    0CL3 -         INTERRUPT CODE  (ALL RB'S)
RBINLNTH DS    CL1 -          INSTRUCTION LENGTH CODE - 4 HIGH-ORDER
*                             BITS MUST BE ZERO  (ALL RB'S)
RBINTCOD DS    CL2 -          INTERRUPT CODE  (ALL RB'S)
RBPRFXND DS    0C -           END OF RB PREFIX
         SPACE 2
         DS    0D -
RBSECT   EQU   * -            RBSECPTR - THIS IS THE START OF THE
*                             BASIC SECTION OF THE RB
RBPPSAV  DS    0A -           ADDRESS OF PROBLEM PROGRAM REGISTER SAVE
*                             AREA (IRB)
RBTMFLD  DS    B -            INDICATORS FOR TIMER ROUTINES.  WHEN
*                             THERE ARE NO TIMER ROUTINES, THIS FIELD
*                             IS ZERO.  (IRB)
RBTMQUE  EQU   BIT0 -         TIMER ELEMENT NOT ON QUEUE
RBTMTOD  EQU   BIT1 -         LOCAL TIME-OF-DAY OPTION IS USED
RBRSV005 EQU   BIT2,,C'X' -   RESERVED
RBRSV006 EQU   BIT3,,C'X' -   RESERVED
RBTMCMP  EQU   BIT4 -         INTERVAL HAS EXPIRED
RBTMIND2 EQU   BIT5 -         EXIT SPECIFIED WITH TASK OR REAL REQUEST
RBTMIND3 EQU   BIT6+BIT7 -    TYPE OF REQUEST
RBTREQ   EQU   X'00' -        TASK REQUEST
RBWREQ   EQU   BIT7 -         WAIT REQUEST
RBRREQ   EQU   BIT6+BIT7 -    REAL REQUEST
RBPPSAV1 DS    AL3 -          ADDRESS OF PROBLEM PROGRAM REGISTER SAVE
*                             AREA (IRB)
RBABOPSW DS    CL4 -          AFTER EXECUTION OF TRANSIENT AREA HANDLER
*                             ROUTINE - FOUR LOW-ORDER BYTES OF NAME OF
*                             REQUESTED ROUTINE  (SVRB-TRANS)
*                             AFTER EXECUTION OF ABTERM ROUTINE -
*                             RIGHT HALF OF USER'S OLD PSW ---
*                             OTHERWISE - ZERO
*                             (SVRB-BOTH, IRB, PRB, TIRB)
RBSIZE   DS    H -            SIZE OF THIS RB IN DOUBLEWORDS (ALL RB'S)
RBSTAB   DS    0BL2 -         STATUS AND ATTRIBUTE BITS  (ALL RB'S)
RBSTAB1  DS    B -            FIRST BYTE OF STATUS AND ATTRIBUTE BITS
RBFTP    EQU   BIT0+BIT1+BIT2 TYPE OF RB
RBFTPRB  EQU   X'00' -        PRB
RBFTTIRB EQU   BIT1+BIT2 -    TIRB                               ICB417
RBFTIRB  EQU   BIT1 -         IRB
RBFTSIRB EQU   BIT0 -         SIRB
RBFTSVRB EQU   BIT0+BIT1 -    SVRB
RBTRSVRB EQU   BIT3 -         IF RBTRSVRB=0 AND RBCDE=0, THEN TYPE 2
*                             SVC IN NUCLEUS.  IF RBTRSVRB=0 AND
*                             RBCDE1 NOT 0, THEN SECOND OR SUBSEQUENT
*                             LOAD OF TYPE 4 SVC IN FIXED OR MODIFIED
*                             LPA (RBCDE1 = ADDRESS OF CDE).  IF
*                             RBTRSVRB=1 AND RBCDE1=0, THEN TYPE 3 OR
*                             FIRST LOAD OF TYPE 4 SVC IN PAGED, FIXED
*                             OR MODIFIED LPA.  IF RBTRSVRB=1 AND
*                             RBCDE1 NOT 0, THEN SECOND OR SUBSEQUENT
*                             LOAD OF TYPE 4 SVC IN PAGED LPA (RBCDE1
*                             = ADDRESS OF LPDE).
RBFNSVRB EQU   BIT3 -         ALIAS FOR RBTRSVRB
RBWAITP  EQU   BIT4 -         INDICATES THAT AN ECB IS POINTING AT THE
*                             RB.                                ICB416
RBFTCKPT EQU   BIT5 -         A CHECKPOINT MAY BE TAKEN IN A USER EXIT
*                             FROM THIS SVC ROUTINE (SVRB-BOTH)
RBATNXIT EQU   BIT6 -         THIS IRB IS AN ATTENTION IRB       ICB444
RBRSV007 EQU   BIT7,,C'X' -   RESERVED
RBSTAB2  DS    B -            SECOND BYTE OF STATUS AND ATTRIBUTE BITS
RBTCBNXT EQU   BIT0 -         RBLINK FIELD POINTS TO TCB (ALL RB'S)
RBFACTV  EQU   BIT1 -         IRB OR SIRB IS QUEUED TO TCB - PROGRAM IS
*                             ACTIVE
RBATTN   EQU   BIT2 -         EXITING PROGRAM IS AN ATTENTION EXIT
*                             (IRB)
RBETXR   EQU   BIT3 -         IRB IS FOR AN ETXR EXIT ROUTINE
RBUSIQE  EQU   BIT3 -         SAME AS RBETXR                     ICB444
RBIQETP  EQU   BIT4+BIT5 -
RBRQENR  EQU   X'00' -        REQUEST QUEUE ELEMENT IS NOT TO BE
*                             RETURNED
RBIRBAER EQU   BIT5 -         IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY
*                             EXECUTED ROUTINES THAT ARE RQE'S
RBIQENR  EQU   BIT4 -         IQE IS NOT TO BE RETURNED AT EXIT
RBIRBAIQ EQU   BIT4+BIT5 -    IRB HAS QUEUE ELEMENTS FOR ASYNCHRONOUSLY
*                             EXECUTED ROUTINES THAT ARE IQE'S
RBFDYN   EQU   BIT6 -         RB STORAGE CAN BE FREED AT EXIT
RBECBWT  EQU   BIT7 -         IF ZERO, WAIT FOR A SINGLE EVENT OR ALL
*                             OF A NUMBER OF EVENTS ---
*                             IF ONE, WAIT FOR A NUMBER OF EVENTS THAT
*                             IS LESS THAN THE TOTAL NUMBER OF EVENTS
*                             WAITING
RBEP     DS    A -            ENTRY POINT ADDRESS OF ASYNCHRONOUSLY
*                             EXECUTED ROUTINE (IRB, SIRB)
RBOPSW   DS    CL8 -          USER'S OLD PSW (ALL RB'S)
RBPGMQ   DS    0A -           SAME AS RBPGMQ1 BELOW
         DS    X -            ZERO
RBPGMQ1  DS    AL3 -          ADDRESS OF RB INDICATING A REQUEST TO USE
*                             SAME SERIALLY REUSABLE PROGRAM
*                             (SVRB-RES, PRB)
RBLINK   DS    0A -           SAME AS FOR RBLINKB BELOW
RBWCF    DS    FL1 -          NUMBER OF REQUESTS WAITING (WAIT COUNT)
*                             (ALL RB'S)
RBLINKB  DS    AL3 -          ADDRESS OF PREVIOUS RB, OR ADDRESS OF TCB
*                             WHEN THIS IS FIRST RB ON THE QUEUE
*                             (ALL RB'S)
PRBEND   DS    0F -           END OF PRB
SIRBEND  DS    0F -           END OF SIRB
RBGRSAVE DS    0CL64 -        GENERAL REGISTER SAVE AREA
*                             (SVRB-BOTH, IRB, TIRB)
RBGRS0   DS    F -            SAVE AREA FOR GENERAL REGISTER 0
RBGRS1   DS    F -            SAVE AREA FOR GENERAL REGISTER 1
RBGRS2   DS    F -            SAVE AREA FOR GENERAL REGISTER 2
RBGRS3   DS    F -            SAVE AREA FOR GENERAL REGISTER 3
RBGRS4   DS    F -            SAVE AREA FOR GENERAL REGISTER 4
RBGRS5   DS    F -            SAVE AREA FOR GENERAL REGISTER 5
RBGRS6   DS    F -            SAVE AREA FOR GENERAL REGISTER 6
RBGRS7   DS    F -            SAVE AREA FOR GENERAL REGISTER 7
RBGRS8   DS    F -            SAVE AREA FOR GENERAL REGISTER 8
RBGRS9   DS    F -            SAVE AREA FOR GENERAL REGISTER 9
RBGRS10  DS    F -            SAVE AREA FOR GENERAL REGISTER 10
RBGRS11  DS    F -            SAVE AREA FOR GENERAL REGISTER 11
RBGRS12  DS    F -            SAVE AREA FOR GENERAL REGISTER 12
RBGRS13  DS    F -            SAVE AREA FOR GENERAL REGISTER 13
RBGRS14  DS    F -            SAVE AREA FOR GENERAL REGISTER 14
RBGRS15  DS    F -            SAVE AREA FOR GENERAL REGISTER 15
TIRBEND  DS    0F -           END OF TIRB
IRBEND   DS    0F -           END OF IRB UNLESS OPTIONAL FIELDS
*                             RBNEXAV AND RBIQEWRK ARE PRESENT
RBEXSAVE DS    12F -          EXTENDED SAVE AREA FOR SVC ROUTINES
*                             (SVRB-BOTH)
SVRBEND  DS    0F -           END OF SVRB (BOTH)
         SPACE 2
         ORG   RBPPSAV -      FOR SIRB
RBEXRTNM DS    CL8 -          EIGHT-CHARACTER NAME OF ERROR EXIT
*                             ROUTINE (SIRB)
         SPACE 2
         ORG   RBEP -         FOR SVRB-BOTH AND PRB
RBCDE    DS    0A -           SAME AS RBCDE1 BELOW
RBCDFLGS DS    B -            CONTROL FLAGS
RBRSV008 EQU   BIT0,,C'X' -   RESERVED
RBRSV009 EQU   BIT1,,C'X' -   RESERVED
RBCDATCH EQU   BIT2 -         CONTENTS SUPERVISION HAS BEEN ENTERED
*                             VIA ATTACH                         ICB444
RBRSV010 EQU   BIT3,,C'X' -   RESERVED
RBCDNODE EQU   BIT4 -         NO DE SAVE AREA REQUIRED           ICB444
RBCDSYNC EQU   BIT5 -         SYNCH MACRO INSTRUCTION REQUESTED
RBCDXCTL EQU   BIT6 -         XCTL MACRO INSTRUCTION REQUESTED
RBCDLOAD EQU   BIT7 -         LOAD MACRO INSTRUCTION REQUESTED
RBCDE1   DS    AL3 -          ADDRESS OF CDE, ADDRESS OF LPDE OR ZERO
*                             (SEE COMMENTS FOR BIT RBTRSVRB)
         SPACE 2
         ORG   RBPGMQ -       FOR TIRB
RBSQE    DS    0A -           SAME AS RBSQEA BELOW
         DS    FL1 -          RBUSE - CONTAINS ZEROS
RBSQEA   DS    AL3 -          CHAIN OF SUPERVISOR QUEUE ELEMENTS
*                             (SQE'S) WHICH REPRESENT ASYNCHRONOUS
*                             SUPERVISOR SERVICE REQUESTS RELATED TO
*                             TCB UNDER WHICH TIRB IS PRESENTLY
*                             OPERATING  (TIRB)
         SPACE 2
         ORG   RBPGMQ -       FOR IRB (3-BYTE LINK FIELD SEGMENT)
RBIQE    DS    0A -           LIST ORIGIN FOR IQE (IRB)
RBUSE    DS    FL1 -          USE COUNT USED BY ATTACH (IRB)
RBIQE1   DS    AL3 -          LIST ORIGIN FOR IQE (IRB)
         SPACE 2
         ORG   RBPGMQ -       FOR IRB (2-BYTE LINK FIELD SEGMENT), SIRB
RBIQE2   DS    0F -
RBRSV011 DS    XL2 -          RESERVED
RBIQEA   DS    H -            LIST ORIGIN FOR RQE (IRB WITH 2-BYTE LINK
*                             FIELD SEGMENT, SIRB)
         SPACE 2
         ORG   RBEXSAVE -     FOR IRB--FIELDS PRESENT ONLY IF REQUESTED
RBNEXAV  DS    A -            ADDRESS OF NEXT AVAILABLE IQE (IRB)
RBIQEWRK DS    F -            IQE WORK SPACE, VARIABLE LENGTH,
*                             MAXIMUM SIZE IS 1984 BYTES (IRB)
         SPACE 2
RBPRFXLN EQU   RBPRFXND-RBPREFIX - TOTAL PREFIX LENGTH INCLUDING
*                                  AREA RESERVED FOR FUTURE EXPANSION
RBPRFLNA EQU   RBPRFXND-RBPRFXST - ASSIGNED PREFIX LENGTH
PRBLEN   EQU   PRBEND-RBPRFXST -   REAL PRB LENGTH FOR GETMAIN
SIRBLEN  EQU   SIRBEND-RBPRFXST -  REAL SIRB LENGTH FOR GETMAIN
TIRBLEN  EQU   TIRBEND-RBPRFXST -  REAL TIRB LENGTH FOR GETMAIN
IRBLEN   EQU   IRBEND-RBPRFXST -   REAL IRB LENGTH FOR GETMAIN UNLESS
*                                  OPTIONAL FIELDS ARE ALSO PRESENT
SVRBLEN  EQU   SVRBEND-RBPRFXST -  REAL SVRB LENGTH FOR GETMAIN
         MEND  , */
*%RBL2   :  ;
*
*DECLARE
*  1 RBPREFIX BASED (RBSECPTR-64),
*   2 *           CHAR(56),              /* RESERVED FOR FUTURE
*                                           EXPANSION                */
*   2 RBPRFXST    CHAR(0),               /* START OF ASSIGNED FIELDS
*                                           IN RB PREFIX             */
*   2 RBFLAGS1    CHAR(1),               /* FLAG BYTE                */
*    3 RBSLOCK  BIT(1),                  /* INDICATES THAT THIS RB
*                                           IS NON-DISPATCHABLE UNTIL
*                                           THE SUPERVISOR LOCK
*                                           (CVTSYLK) IS RESET
*                                           (ALL RB'S)               */
*    3 RBXWAIT  BIT(1),                  /* INDICATES THAT THE
*                                           PROGRAM OPERATING UNDER
*                                           THIS RB HAS ISSUED AN
*                                           EXPLICIT (SVC) WAIT
*                                           (ALL RB'S)               */
*    3 RBABEND  BIT(1),                  /* ABEND SVRB  (SVRB-BOTH)  */
*    3 RBUPR    BIT(1),                  /* INDICATES THAT ADDRESS OF
*                                           A PIE HAS BEEN PLACED IN
*                                           FIRST WORD OF RBEXSAVE
*                                           AND A SUPERVISOR SPIE
*                                           EXIT CAN BE SCHEDULED IF
*                                           AN INVALID PAGE REFERENCE
*                                           OCCURS  (SVRB-BOTH)      */
*    3 RBASIR   BIT(1),                  /* ASIR IS RUNNING UNDER
*                                           THIS RB            ICB444*/
*    3 RBRSV001 BIT(1),                  /* RESERVED                 */
*    3 RBRSV002 BIT(1),                  /* RESERVED                 */
*    3 RBRSV003 BIT(1),                  /* RESERVED                 */
*   2 RBRSV004    PTR(24),               /* RESERVED                 */
*   2 RBWCSA      PTR(8),                /* NUMBER OF REQUESTS
*                                           WAITING AT TIME OF
*                                           TERMINATION (WAIT COUNT
*                                           SAVE AREA)  (ALL RB'S)   */
*   2 RBINTCDA    CHAR(3),               /* INTERRUPT CODE (ALL RB'S)*/
*    3 RBINLNTH    CHAR(1),              /* INSTRUCTION LENGTH CODE
*                                           - 4 HIGH-ORDER BITS MUST
*                                           BE ZERO  (ALL RB'S)      */
*    3 RBINTCOD    CHAR(2),              /* INTERRUPT CODE (ALL RB'S)*/
*   2 RBPRFXND    CHAR(0);               /* END OF RB PREFIX         */
*
*
*DECLARE
*  1 RBSECT   BASED(RBSECPTR),
*   2 RBPPSAV     PTR(31),               /* ADDRESS OF PROBLEM
*                                           PROGRAM REGISTER SAVE
*                                           AREA (IRB)               */
*    3 RBTMFLD     CHAR(1),              /* INDICATORS FOR TIMER
*                                           ROUTINES. WHEN  THERE
*                                           ARE NO TIMER ROUTINES,
*                                           THIS FIELD  IS ZERO.
*                                           (IRB)                    */
*     4 RBTMQUE  BIT(1),                 /* TIMER ELEMENT NOT ON
*                                           QUEUE                    */
*     4 RBTMTOD  BIT(1),                 /* LOCAL TIME-OF-DAY OPTION
*                                           IS USED                  */
*     4 RBRSV005 BIT(1),                 /* RESERVED                 */
*     4 RBRSV006 BIT(1),                 /* RESERVED                 */
*     4 RBTMCMP  BIT(1),                 /* INTERVAL HAS EXPIRED     */
*     4 RBTMIND2 BIT(1),                 /* EXIT SPECIFIED WITH TASK
*                                           OR REAL REQUEST          */
*     4 RBTMIND3 BIT(2),                 /* TYPE OF REQUEST          */
*%DCL RBTREQ   CHAR;
*%RBTREQ  ='''00''B';                    /* TASK REQUEST             */
*%DCL RBWREQ   CHAR;
*%RBWREQ  ='''01''B';                    /* WAIT REQUEST             */
*%DCL RBRREQ   CHAR;
*%RBRREQ  ='''11''B';                    /* REAL REQUEST             */
*    3 RBPPSAV1    PTR(24),              /* ADDRESS OF PROBLEM
*                                           PROGRAM REGISTER SAVE
*                                           AREA (IRB)               */
*   2 RBABOPSW    CHAR(4),               /* AFTER EXECUTION OF
*                                           TRANSIENT AREA HANDLER
*                                           ROUTINE - FOUR LOW-ORDER
*                                           BYTES OF NAME OF
*                                           REQUESTED ROUTINE
*                                           (SVRB-TRANS)  AFTER
*                                           EXECUTION OF ABTERM
*                                           ROUTINE -  RIGHT HALF OF
*                                           USER'S OLD PSW ---
*                                           OTHERWISE - ZERO
*                                           (SVRB-BOTH, IRB,PRB,TIRB)*/
*   2 RBSIZE      FIXED(15),             /* SIZE OF THIS RB IN
*                                           DOUBLEWORDS (ALL RB'S)   */
*   2 RBSTAB      CHAR(2),               /* STATUS AND ATTRIBUTE
*                                           BITS  (ALL RB'S)         */
*    3 RBSTAB1     CHAR(1),              /* FIRST BYTE OF STATUS AND
*                                           ATTRIBUTE BITS           */
*     4 RBFTP    BIT(3),                 /* TYPE OF RB               */
*%DCL RBFTPRB  CHAR;
*%RBFTPRB ='''000''B';                   /* PRB                      */
*%DCL RBFTTIRB CHAR;
*%RBFTTIRB='''011''B';                   /* TIRB               ICB417*/
*%DCL RBFTIRB  CHAR;
*%RBFTIRB ='''010''B';                   /* IRB                      */
*%DCL RBFTSIRB CHAR;
*%RBFTSIRB='''100''B';                   /* SIRB                     */
*%DCL RBFTSVRB CHAR;
*%RBFTSVRB='''110''B';                   /* SVRB                     */
*     4 RBTRSVRB BIT(1),                 /* IF RBTRSVRB=0 AND
*                                           RBCDE1=0, THEN TYPE 2 SVC
*                                           IN NUCLEUS.  IF RBTRSVRB=0
*                                           AND RBCDE1 NOT 0, THEN
*                                           SECOND OR SUBSEQUENT LOAD
*                                           OF TYPE 4 SVC IN FIXED OR
*                                           MODIFIED LPA (RBCDE1 =
*                                           ADDRESS OF CDE).  IF
*                                           RBTRSVRB=1 AND RBCDE1=0,
*                                           THEN TYPE 3 OR FIRST LOAD
*                                           OF TYPE 4 SVC IN PAGED,
*                                           FIXED OR MODIFIED LPA.
*                                           IF RBTRSVRB=1 AND RBCDE1
*                                           NOT 0, THEN SECOND OR
*                                           SUBSEQUENT LOAD OF TYPE 4
*                                           SVC IN PAGED LPA (RBCDE1
*                                           = ADDRESS OF LPDE).      */
*      5 RBFNSVRB BIT(1),                /* ALIAS FOR RBTRSVRB       */
*     4 RBWAITP  BIT(1),                 /* INDICATES THAT AN ECB IS
*                                           POINTING AT THE RB ICB416*/
*     4 RBFTCKPT BIT(1),                 /* A CHECKPOINT MAY BE
*                                           TAKEN IN A USER EXIT
*                                           FROM THIS SVC ROUTINE
*                                           (SVRB-BOTH)              */
*     4 RBATNXIT BIT(1),                 /* THIS IRB IS AN ATTENTION
*                                           IRB                ICB444*/
*     4 RBRSV007 BIT(1),                 /* RESERVED                 */
*    3 RBSTAB2     CHAR(1),              /* SECOND BYTE OF STATUS
*                                           AND ATTRIBUTE BITS       */
*     4 RBTCBNXT BIT(1),                 /* RBLINK FIELD POINTS TO
*                                           TCB (ALL RB'S)           */
*     4 RBFACTV  BIT(1),                 /* IRB OR SIRB IS QUEUED TO
*                                           TCB - PROGRAM IS ACTIVE  */
*     4 RBATTN   BIT(1),                 /* EXITING PROGRAM IS AN
*                                           ATTENTION EXIT  (IRB)    */
*     4 RBETXR   BIT(1),                 /* IRB IS FOR AN ETXR EXIT
*                                           ROUTINE                  */
*      5 RBUSIQE  BIT(1),                /* SAME AS RBETXR     ICB444*/
*     4 RBIQETP  BIT(2),
*%DCL RBRQENR  CHAR;
*%RBRQENR ='''00''B';                    /* REQUEST QUEUE ELEMENT IS
*                                           NOT TO BE RETURNED       */
*%DCL RBIRBAER CHAR;
*%RBIRBAER='''01''B';                    /* IRB HAS QUEUE ELEMENTS
*                                           FOR ASYNCHRONOUSLY
*                                           EXECUTED ROUTINES THAT
*                                           ARE RQE'S                */
*%DCL RBIQENR  CHAR;
*%RBIQENR ='''10''B';                    /* IQE IS NOT TO BE
*                                           RETURNED AT EXIT         */
*%DCL RBIRBAIQ CHAR;
*%RBIRBAIQ='''11''B';                    /* IRB HAS QUEUE ELEMENTS
*                                           FOR ASYNCHRONOUSLY
*                                           EXECUTED ROUTINES THAT
*                                           ARE IQE'S                */
*     4 RBFDYN   BIT(1),                 /* RB STORAGE CAN BE FREED
*                                           AT EXIT                  */
*     4 RBECBWT  BIT(1),                 /* IF ZERO, WAIT FOR A
*                                           SINGLE EVENT OR ALL  OF
*                                           A NUMBER OF EVENTS ---
*                                           IF ONE, WAIT FOR A
*                                           NUMBER OF EVENTS THAT
*                                           IS LESS THAN THE TOTAL
*                                           NUMBER OF EVENTS
*                                           WAITING                  */
*   2 RBEP        PTR(31),               /* ENTRY POINT ADDRESS OF
*                                           ASYNCHRONOUSLY  EXECUTED
*                                           ROUTINE (IRB, SIRB)      */
*   2 RBOPSW      CHAR(8)  BDY(WORD),    /* USER'S OLD PSW (ALL
*                                           RB'S)                    */
*   2 RBPGMQ      PTR(31),               /* SAME AS RBPGMQ1 BELOW    */
*    3 *           CHAR(1),              /* ZERO                     */
*    3 RBPGMQ1     PTR(24),              /* ADDRESS OF RB INDICATING
*                                           A REQUEST TO USE SAME
*                                           SERIALLY REUSABLE
*                                           PROGRAM   (SVRB-RES,
*                                           PRB)                     */
*   2 RBLINK      PTR(31),               /* SAME AS FOR RBLINKB
*                                           BELOW                    */
*    3 RBWCF       PTR(8),               /* NUMBER OF REQUESTS
*                                           WAITING (WAIT COUNT)
*                                           (ALL RB'S)               */
*    3 RBLINKB     PTR(24),              /* ADDRESS OF PREVIOUS RB,
*                                           OR ADDRESS OF TCB WHEN
*                                           THIS IS FIRST RB ON THE
*                                           QUEUE  (ALL RB'S)        */
*   2 PRBEND   CHAR(0)  BDY(WORD),       /* END OF PRB               */
*   2 SIRBEND  CHAR(0)  BDY(WORD),       /* END OF SIRB              */
*   2 RBGRSAVE    CHAR(64)  BDY(WORD),   /* GENERAL REGISTER SAVE
*                                           AREA  (SVRB-BOTH, IRB,
*                                           TIRB)                    */
*    3 RBGRS0      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 0               */
*    3 RBGRS1      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 1               */
*    3 RBGRS2      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 2               */
*    3 RBGRS3      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 3               */
*    3 RBGRS4      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 4               */
*    3 RBGRS5      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 5               */
*    3 RBGRS6      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 6               */
*    3 RBGRS7      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 7               */
*    3 RBGRS8      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 8               */
*    3 RBGRS9      FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 9               */
*    3 RBGRS10     FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 10              */
*    3 RBGRS11     FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 11              */
*    3 RBGRS12     FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 12              */
*    3 RBGRS13     FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 13              */
*    3 RBGRS14     FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 14              */
*    3 RBGRS15     FIXED(31),            /* SAVE AREA FOR GENERAL
*                                           REGISTER 15              */
*   2 TIRBEND     CHAR(0)  BDY(WORD),    /* END OF TIRB              */
*   2 IRBEND      CHAR(0)  BDY(WORD),    /* END OF IRB UNLESS
*                                           OPTIONAL FIELDS RBNEXAV
*                                           AND RBIQEWRK ARE PRESENT */
*   2 RBEXSAVE (12) FIXED(31),           /* EXTENDED SAVE AREA FOR
*                                           SVC ROUTINES
*                                           (SVRB-BOTH)              */
*   2 SVRBEND  CHAR(0)  BDY(WORD);       /* END OF SVRB (BOTH)       */
*
*
*DECLARE 1 RBSECS01
*      BASED(ADDR(RBPPSAV)),             /* FOR SIRB                 */
*   2 RBEXRTNM    CHAR(8)  BDY(WORD);    /* EIGHT-CHARACTER NAME OF
*                                           ERROR EXIT  ROUTINE
*                                           (SIRB)                   */
*
*
*DECLARE 1 RBSECS03
*      BASED(ADDR(RBEP)),                /* FOR SVRB-BOTH AND PRB    */
*   2 RBCDE       PTR(31),               /* SAME AS RBCDE1 BELOW     */
*    3 RBCDFLGS    CHAR(1),              /* CONTROL FLAGS            */
*     4 RBRSV008 BIT(1),                 /* RESERVED                 */
*     4 RBRSV009 BIT(1),                 /* RESERVED                 */
*     4 RBCDATCH BIT(1),                 /* CONTENTS SUPERVISION HAS
*                                           BEEN ENTERED VIA ATTACH
*                                                              ICB444*/
*     4 RBRSV010 BIT(1),                 /* RESERVED                 */
*     4 RBCDNODE BIT(1),                 /* NO DE SAVE AREA
*                                           REQUIRED           ICB444*/
*     4 RBCDSYNC BIT(1),                 /* SYNCH MACRO INSTRUCTION
*                                           REQUESTED                */
*     4 RBCDXCTL BIT(1),                 /* XCTL MACRO INSTRUCTION
*                                           REQUESTED                */
*     4 RBCDLOAD BIT(1),                 /* LOAD MACRO INSTRUCTION
*                                           REQUESTED                */
*    3 RBCDE1      PTR(24);              /* ADDRESS OF CDE, ADDRESS
*                                           OF LPDE OR ZERO (SEE
*                                           COMMENTS FOR BIT
*                                           RBTRSVRB)                */
*
*
*DECLARE 1 RBSECS05
*      BASED(ADDR(RBPGMQ)),              /* FOR TIRB AND PRB         */
*   2 RBSQE       PTR(31),               /* SAME AS RBSQEA BELOW     */
*    3 *           PTR(8),               /* RBUSE - CONTAINS ZEROS   */
*    3 RBSQEA      PTR(24);              /* CHAIN OF SUPERVISOR QUEUE
*                                           ELEMENTS (SQE'S) WHICH
*                                           REPRESENT ASYNCHRONOUS
*                                           SUPERVISOR SERVICE
*                                           REQUESTS RELATED TO TCB
*                                           UNDER WHICH TIRB IS
*                                           PRESENTLY OPERATING
*                                           (TIRB)                   */
*
*
*DECLARE 1 RBSECS06
*      BASED(ADDR(RBPGMQ)),              /* FOR IRB (3-BYTE LINK
*                                           FIELD SEGMENT)           */
*   2 RBIQE       PTR(31),               /* LIST ORIGIN FOR IQE
*                                           (IRB)                    */
*    3 RBUSE       PTR(8),               /* USE COUNT USED BY ATTACH
*                                           (IRB)                    */
*    3 RBIQE1      PTR(24);              /* LIST ORIGIN FOR IQE
*                                           (IRB)                    */
*
*
*DECLARE 1 RBSECS07
*      BASED(ADDR(RBPGMQ)),              /* FOR IRB (2-BYTE LINK
*                                           FIELD SEGMENT), SIRB     */
*   2 RBIQE2      FIXED(31),
*    3 RBRSV011    FIXED(15),            /* RESERVED                 */
*    3 RBIQEA      FIXED(15);            /* LIST ORIGIN FOR RQE (IRB
*                                           WITH 2-BYTE LINK FIELD
*                                           SEGMENT, SIRB)           */
*
*
*DECLARE 1 RBSECS08
*      BASED(ADDR(RBEXSAVE)),            /* FOR IRB--FIELDS PRESENT
*                                           ONLY IF REQUESTED        */
*   2 RBNEXAV     PTR(31),               /* ADDRESS OF NEXT
*                                           AVAILABLE IQE (IRB)      */
*   2 RBIQEWRK    FIXED(31);             /* IQE WORK SPACE, VARIABLE
*                                           LENGTH,  MAXIMUM SIZE IS
*                                           1984 BYTES (IRB)         */
*
*
*RBPRFXLN:  GEN  (EQU 64);               /* TOTAL PREFIX LENGTH
*                                           INCLUDING AREA RESERVED
*                                           FOR FUTURE EXPANSION     */
*RBPRFLNA:  GEN  (EQU 8);                /* ASSIGNED PREFIX LENGTH   */
*PRBLEN:    GEN  (EQU 40);               /* REAL PRB LENGTH FOR
*                                           GETMAIN                  */
*SIRBLEN:   GEN  (EQU 40);               /* REAL SIRB LENGTH FOR
*                                           GETMAIN                  */
*TIRBLEN:   GEN  (EQU 104);              /* REAL TIRB LENGTH FOR
*                                           GETMAIN                  */
*IRBLEN:    GEN  (EQU 104);              /* REAL IRB LENGTH FOR
*                                           GETMAIN UNLESS OPTIONAL
*                                           FIELDS ARE ALSO PRESENT  */
*SVRBLEN:   GEN  (EQU 152);              /* REAL SVRB LENGTH FOR
*                                           GETMAIN                  */
./ ADD NAME=IHATCB   0100-19106-19106-1238-02115-02115-00000-MZAP78  17
*
*        %GOTO TCBL1; /*
         MACRO
         IHATCB &SYS=AOS2,&DSECT=YES     */
*%TCBL1 : ;
*/*                                                                  */
*/*            TASK CONTROL BLOCK                                    */
*/*                                                                  */
*/*  OS/VS2 REL 1.6, 12/08/72, LEVEL=19                              */
*/*                                                                  */
*/*  METHOD OF ACCESS                                                */
*/*      BAL  - A DSECT IS PRODUCED UNLESS DSECT=NO IS SPECIFIED.    */
*/*             USING ON TCBFIX GIVES ADDRESSABILITY FOR ALL SYMBOLS */
*/*             IN PREFIX AND TCB PROPER.  TO GET ADDRESSABILITY FOR */
*/*             THE AOS/1 - AOS/2 COMMON EXTENSION, YOU SHOULD CODE  */
*/*                                                                  */
*/*             L     REG,TCBEXT2                                    */
*/*             USING TCBXTNT2,REG                                   */
*/*             WHERE REG IS ANY REGISTER OTHER THAN ZERO.           */
*/*                                                                  */
*/*             THIS MACRO ASSUMES A DEFAULT OF SYS=AOS2 WHICH MEANS */
*/*             A MAPPING OF AN AOS/2 TCB IS DESIRED.  IF A MAPPING  */
*/*             OF AN AOS/1 TCB IS DESIRED, PUT SYS=AOS1 AS A        */
*/*             PARAMETER ON THE MACRO CALL.  IF A MAPPING OF THE    */
*/*             TCB FOR BOTH AOS/1 AND AOS/2 IS DESIRED, PUT         */
*/*             SYS=BOTH AS A PARAMETER.                             */
*/*                                                                  */
*/*      PL/S - DCL TCBPTR PTR                                       */
*/*                                                                  */
*/*             THIS MACRO ASSUMES IT IS MAPPING AN AOS/2 TCB.  IF   */
*/*             AN AOS/1 TCB MAPPING IS DESIRED, SPECIFY             */
*/*             %TCBSYSTM='AOS1' OR IF A MAPPING OF THE TCB FOR BOTH */
*/*             AOS/1 AND AOS/2 IS DESIRED, SPECIFY %TCBSYSTM='BOTH' */
*/*             BEFORE THE INCLUDE FOR THIS MACRO.  DO NOT SET       */
*/*             TCBSYSTM TO 'AOS2' BECAUSE NULL MEANS AOS/2.         */
*/*                                                                  */
*/*             MACRO VARIABLE TCBLEN IS SET TO THE LENGTH OF THE    */
*/*             TCB INCLUDING THE PREFIX.  TCBLEN IS VALID IF        */
*/*             TCBSYSTM IS 'AOS1' OR '' (AOS/2), BUT IT IS NOT      */
*/*             VALID IF TCBSYSTM='BOTH'.                            */
*
*%GOTO TCBL2;  /*
*
**             TCB PREFIX
**
         MNOTE 0,'REPLACE IHATCB WITH VS IKJTCB'
         AIF   ('&DSECT' EQ 'NO').NODSCT
TCBFIX   DSECT , -     TCBPTR-32
         AGO   .CONT
.NODSCT  ANOP
         DS    0D
TCBFIX   EQU   * -     TCBPTR-32
.CONT    ANOP
**
TCBFRS   DS    0CL32 - FLOATING POINT REGISTER SAVE AREA
TCBFRS0  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 0
TCBFRS2  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 2
TCBFRS4  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 4
TCBFRS6  DS    D -     SAVE AREA FOR FLOATING POINT REGISTER 6
TCBPXLEN EQU   *-TCBFIX LENGTH OF PREFIX SECTION
**
**             TCB PROPER
**
         DS    0D
TCB      EQU   * -     TCBPTR
**
TCBRBP   DS    A -     PTR TO TOP RB ON RB CHAIN
TCBPIE   DS    0A -    ADDR OF PROGRAM INTERRUPT ELEMENT (PIE)
TCBPMASK DS    B -     SPIE BITS
TCBPM    EQU   X'0F' - PROGRAM MASK AT TIME OF SPIE INITIATION.  MASK
*                      RESTORED AT TIME OF SPIE NULLIFICATION.
TCBPIEA  DS    AL3 -   ADDRESS OF PROGRAM INTERRUPT ELEMENT (PIE)
TCBDEB   DS    A -     ADDR OF THE DEB QUEUE
TCBTIO   DS    A -     ADDR OF THE TASK I/O TABLE (TIOT)
TCBCMP   DS    0BL4 -  TASK COMPLETION CODE
TCBCMPF  DS    B -     COMPLETION FLAGS
TCBCREQ  EQU   X'80' - A DUMP HAS BEEN REQUESTED
TCBCSTEP EQU   X'40' - A STEP ABEND HAS BEEN REQUESTED
TCBCPP   EQU   X'20' - SECOND ABEND LOAD OVERLAID PP STORAGE
*                      (AOS/1)
*                      FOR FIRST LOAD OVERLAY SEE TCBFLGS
TCBSTCC  EQU   X'10' - COMPLETION CODE IS NOT TO BE STORED IN TCBCMPC
*                      SHOULD AN ABEND BE ENCOUNTERED.  THIS PREVENTS
*                      AN OVERLAY OF ORIGINAL COMPLETION CODE.
TCBCDBL  EQU   X'08' - A DOUBLE ABEND HAS OCCURRED
TCBCWTO  EQU   X'04' - DUMP MSG TO BE ISSUED TO OPR
TCBCIND  EQU   X'02' - SCHEDULER TO PRINT INDICATIVE DUMP
TCBCMSG  EQU   X'01' - ABEND MSG PROVIDED TO BE PRINTED BY ABDUMP
TCBCMPC  DS    BL3 -   SYSTEM (FIRST 12 BITS) AND USER (SECOND 12)
*                      COMPLETION CODES
TCBTRN   DS    0A -    ADDR OF CONTROL CORE TABLE
TCBABF   DS    B -     FLAG BYTE
TCBMOD91 EQU   X'80' - BOTH TESTRAN AND DECIMAL SIMULATOR ON A MOD 91
TCBNOCHK EQU   X'40' - SUPPRESS TAKING CHECKPOINTS FOR THIS STEP
*                      (JOB STEP TCB)
TCBGRPH  EQU   X'20' - GRAPHICS FOREGROUND JOB OR GRAPHIC JOB PROCESSOR
TCBRSV01 EQU   X'10',,C'X' - RESERVED
TCBTCPP  EQU   X'08' - TCAM POST-PENDING  (RORI)
TCBTCP   EQU   X'04' - TEST TASK - USED BY TEST SVC
TCBOLTEP EQU   X'02' - OLTEP FUNCTIONS REQUIRE CLEAN-UP BEFORE ABNORMAL
*                      TERMINATION CAN BE INVOKED
TCBRSV02 EQU   X'01',,C'X' - RESERVED
TCBTRNB  DS    AL3 -   ADDR OF CONTROL CORE TABLE
TCBMSS   DS    0A -    ADDR OF THE BOUNDARY BOX (AOS/1)
*                      ADDR OF LAST SPQE ON MSS QUEUE (AOS/2)
TCBRSV03 DS    X -     ** TCBNROC  FIELD UNUSED IN AOS **
TCBMSSB  DS    AL3 -   ADDR OF THE BOUNDARY BOX (AOS/1)
*                      ADDR OF LAST SPQE ON MSS QUEUE (AOS/2)
TCBPKF   DS    B -     STORAGE PROTECTION KEY
TCBFLAG  EQU   X'F0' - PROTECTION KEY
TCBZERO  EQU   X'0F' - ZERO
TCBFLGS  DS    0BL5 -  FLAGS
TCBFLGS1 DS    B -     FIRST TCB FLAG BYTE
TCBFA    EQU   X'80' - ABNORMAL TERMINATION IN PROGRESS
TCBFE    EQU   X'40' - NORMAL TERMINATION IN PROGRESS
         AIF   ('&SYS' EQ 'AOS2').A1
         AIF   ('&SYS' EQ 'BOTH').A1A
TCBABTRM EQU   X'20' - ABEND INITIATED BY RESIDENT ABTERM  (AOS/1)
TCBRSV04 EQU   X'10',,C'X' - RESERVED
         AGO   .A1B
.A1A     ANOP
*        FOLLOWING AOS/1 EQU IS SHOWN AS A COMMENT BECAUSE
*        AOS/2 USES THIS LABEL ON ANOTHER BIT
*TCBABTRM EQU  X'20' - ABEND INITIATED BY RESIDENT ABTERM  (AOS/1)
.A1B     ANOP
TCBDMPA  EQU   X'08' - BIT ON INDICATES THIS TASK IS USING THE DUMP
*                      AREA.  FREEMAIN VALIDITY CHECK ALLOWS TASK TO
*                      FREEMAIN PROBLEM PROGRAM STORAGE INTO DUMP AREA
*                      THUS ALLOWING A JOBSTEP TO OBTAIN A DUMP IF
*                      REQUESTED EVEN IF NOT ENOUGH STORAGE IS IN THE
*                      PARTITION  (AOS/1)                        ICB440
TCBPOOL  EQU   X'04' - ABEND SVRB POOL HAS BEEN ASSIGNED TO THIS TASK
*                      (AOS/1)  (ICBI # 383)                      35198
.A1      AIF   ('&SYS' EQ 'AOS1').A2
TCBFERA  EQU   X'20' - ENTER ABEND ERASE ROUTINE WHEN IN CONTROL AGAIN
*                      (AOS/2)
TCBRSV04 EQU   X'10',,C'X' - RESERVED
TCBPDUMP EQU   X'08' - PREVENT DUMP INDICATOR  (AOS/2)
TCBFT    EQU   X'04' - TOP TASK IN TREE BEING ABTERMED (AOS/2)
.A2      ANOP
TCBFS    EQU   X'02' - ABTERM DUMP COMPLETED (AOS/2)
*                      ABEND OVERLAID PROBLEM PROGRAM STORAGE (AOS/1)
TCBFX    EQU   X'01' - PROHIBIT ASYNCHRONOUS EXIT QUEUEING
TCBFLGS2 DS    B -     SECOND FLAG BYTE
         AIF   ('&SYS' EQ 'AOS2').A3
TCBSYSTK EQU   X'80' - ABEND PROHIBITED FOR THIS SYSTEM TASK  (AOS/1)
.A3      AIF   ('&SYS' EQ 'AOS1').A4
TCBFOINP EQU   X'80' - A VALUE OF 1 INDICATES THAT THE TASK IS ABENDING
*                      AND IS IN THE PROCESS OF (1) OPEN FOR DUMP
*                      DATA SET PROCESSING, (2) CLOSE FOR USER DATA
*                      SET OR (3) PURGE FOR ENQ'ED RESOURCES.  THIS
*                      BIT IS USED IN CONJUNCTION WITH TCBSTACK.
*                      (AOS/2)                                   ICB374
.A4      ANOP
TCBFSTI  EQU   X'40' - SECOND JOB STEP INTERVAL HAS EXPIRED
*                      (AOS/2 INITIATOR TCB)
TCBFABOP EQU   X'20' - A VALUE OF 1 INDICATES THAT THE SYSABEND DUMP
*                      DATA SET HAS BEEN OPENED FOR ABEND.  A VALUE OF
*                      0 INDICATES THAT THE SYSUDUMP DUMP DATA SET WAS
*                      OPENED.  THIS BIT IS ONLY USED FOR THE JOB STEP
*                      TCB AND IS USED IN CONJUNCTION WITH TCBFDSOP
*                      BIT.  (OS/VS2)  (ICB482)                  YM0651
TCBFSMC  EQU   X'10' - TASK HAS ISSUED SYSTEM MUST COMPLETE AND SET
*                      ALL OTHER TASKS IN THE SYSTEM NONDISPATCHABLE
TCBFJMC  EQU   X'08' - TASK HAS ISSUED STEP MUST COMPLETE AND TURNED
*                      OFF ALL OTHER TASKS IN THE STEP
         AIF   ('&SYS' EQ 'AOS1').A6
TCBFDSOP EQU   X'04' - SYSABEND OPEN FOR JOBSTEP  (AOS/2)
.A6      ANOP
         AIF   ('&SYS' EQ 'AOS2').A6A
TCBRSV50 EQU   X'04',,C'X' - RESERVED (AOS/1)
.A6A     ANOP
TCBFETXR EQU   X'02' - ETXR TO BE SCHEDULED
TCBFTS   EQU   X'01' - MEMBER OF TIME-SLICING GROUP
TCBFLGS3 DS    B -     THIRD FLAG BYTE
TCBFSM   EQU   X'80' - ALL PSW'S IN SUPERVISOR STATE  (AOS/2)
         AIF   ('&SYS' EQ 'AOS2').A7
TCBRSV51 EQU   X'40',,C'X' - RESERVED (AOS/1)
TCBSYSER EQU   X'20' - EXIT EFFECTOR--SYSTEM ERROR ROUTINES OPERATING
*                      (AOS/1)
TCBRSV52 EQU   X'10',,C'X' - RESERVED (AOS/1)
TCBFLREG EQU   X'08' - FLOATING POINT REGISTERS EXIST  (AOS/1)
TCBSCHAB EQU   X'04' - BIT ON INDICATES SCHEDULER HAS ABENDED, ABEND
*                      PROCESSING HAS COMPLETED AND THE SCHEDULER
*                      HAS BEEN RE-ENTERED  (AOS/1)  (ICB465)    XM4931
TCBPKCHG EQU   X'02' - XCTL IS CHANGING PROTECT KEY IN PSW FROM ZERO
*                      TO THAT USED BY PROBLEM PROGRAM  (AOS/1)
TCBRSV53 EQU   X'01',,C'X' - RESERVED (AOS/1)
.A7      AIF   ('&SYS' EQ 'AOS1').A8
TCBADINP EQU   X'40' - USED IN CONJUNCTION WITH TCBONDSP.  FLAG
*                      INDICATING THAT ABDUMP IS CURRENTLY PROCESSING
*                      FOR SOME TASK IN JOB STEP.  A HIGHER LEVEL TASK
*                      IS NOT ALLOWED TO ENTER MAINLINE ABEND
*                      PROCESSING IF THIS BIT IS SET IN JOB STEP TCB
*                      UNLESS JOB STEP TASK IS FAILING.  BIT SET ONLY
*                      IN JOB STEP TCB AND TASK INVOKING ABDUMP.
TCBABTRM EQU   X'20' - ABTERM BIT TO PREVENT MULTIPLE ABENDS  (AOS/2)
TCBABGM  EQU   X'10' - GETMAIN IS TO DEFAULT LSQA REQUESTS TO SQA
*                      REQUESTS WHEN REQUEST CANNOT BE SATISFIED FROM
*                      LSQA
TCBRSV06 EQU   X'08',,C'X' - RESERVED (AOS/2)
TCBRSV07 EQU   X'04',,C'X' - RESERVED (AOS/2)
TCBRSV08 EQU   X'02',,C'X' - RESERVED (AOS/2)
TCBDWSTA EQU   X'01' - THIS TASK WAS DETACHED WITH STAE=YES OPTION
*                      (AOS/2)                                   ICB315
.A8      ANOP
TCBFLGS4 DS    B -     NONDISPATCHABILITY FLAGS
*                      (AOS/2)
TCBNDUMP EQU   X'80' - ABDUMP NON-DISP. INDICATOR
TCBSER   EQU   X'40' - SER1 NON-DISP. INDICATOR
TCBRQENA EQU   X'20' - I/O RQE'S EXHAUSTED
TCBHNDSP EQU   X'10' - TASK OR JOB STEP IS MOMENTARILY 'FROZEN' UNTIL
*                      THE REQUIRED RESOURCES ARE AVAILABLE.  THE BIT
*                      IS SET THROUGH THE USE OF THE 'STATUS' SVC
*                                                                ICB453
TCBUXNDV EQU   X'08' - TASK IS TEMPORARILY NON-DISPATCHABLE BECAUSE
*                      SMF TIME LIMIT OR SYSOUT LIMIT USER EXIT
*                      ROUTINE IS BEING EXECUTED FOR THIS STEP (AOS/2)
TCBMPCVQ EQU   X'04' - VARY OR QUIESCE IN MULTIPROCESSING SYSTEM
TCBMPCND EQU   X'02' - M65 MULTIPROCESSING NON-DISP. INDICATOR FOR ALL
*                      CPU'S
TCBONDSP EQU   X'01' - TASK TERMINATING AND NONDISPATCHABLE BECAUSE
*                      EITHER OPEN FOR DUMP DATA SET IS IN PROCESS OR
*                      CLOSE BY ABEND IS IN PROCESS
TCBFLGS5 DS    B -     MORE NONDISPATCHABILITY FLAGS
TCBFC    EQU   X'80' - TASK TERMINATED  (AOS/2)
TCBABWF  EQU   X'40' - ABNORMAL WAIT   (AOS/2)
TCBUXNDF EQU   X'40' - TASK IS TEMPORARILY NONDISPATCHABLE BECAUSE
*                      SMF TIME LIMIT OR SYSOUT LIMIT USER EXIT ROUTINE
*                      IS BEING EXECUTED FOR THIS STEP.  BIT IS ONE IN
*                      ALL TCB'S EXCEPT JOB STEP TCB.  (AOS/1)   ICB263
TCBPAGE  EQU   X'20' - TASK NONDISPATCHABLE DUE TO EXCESSIVE PAGING
*                      RATE
TCBANDSP EQU   X'10' - TASK NONDISPATCHABLE TEMPORARILY BECAUSE
*                      ATTACHED WITH DISP=NO OPERAND
TCBSYS   EQU   X'08' - ANOTHER TASK IS IN SYSTEM MUST COMPLETE STATUS
*                      OR A SUMMARY BIT FOR FIELD TCBSYSCT  (AOS/2)
TCBSTP   EQU   X'04' - ANOTHER TASK IN JS IS IN STEP MUST COMPLETE
*                      STATUS  (AOS/2)
TCBFCD1  EQU   X'02' - INITIATOR WAITING FOR REGION   (AOS/2)
TCBPNDSP EQU   X'01' - PRIMARY NONDISPATCHABILITY FLAG
*                      (SECONDARY NDSP FLAG TCBNDSP2 SET)
TCBLMP   DS    FL1 -   TASK LIMIT PRIORITY  (AOS/2)
*                      ENQUEUE COUNT  (AOS/1)
TCBDSP   DS    FL1 -   DISPATCHING PRIORITY
TCBLLS   DS    A -     ADDR OF LAST LLE IN LOAD LIST  (AOS/2)
*                      ADDR OF LAST RB FOR PROGRAM LOADED VIA LOAD
*                      (AOS/1)
TCBJLB   DS    A -     ADDR OF JOBLIB DCB
         AIF   ('&SYS' EQ 'AOS2').B1
TCBFTJST DS    0A -    ADDRESS OF FIRST TCB FOR JOBSTEP  (AOS/1)
.B1      AIF   ('&SYS' EQ 'AOS1').B2
TCBJPQ   DS    0A -    ADDR OF LAST CDE FOR JPA CONTROL QUEUE  (AOS/2)
.B2      ANOP
TCBPURGE DS    B -     PURGE FLAGS  (AOS/2)
TCBJPQF  EQU   X'80' - JPQ PURGE FLAG
TCBRSV09 EQU   X'40',,C'X' - RESERVED
TCBRSV10 EQU   X'20',,C'X' - RESERVED
TCBRSV11 EQU   X'10',,C'X' - RESERVED
TCBRSV12 EQU   X'08',,C'X' - RESERVED
TCBRSV13 EQU   X'04',,C'X' - RESERVED
TCBRSV14 EQU   X'02',,C'X' - RESERVED
TCBRSV15 EQU   X'01',,C'X' - RESERVED
         AIF   ('&SYS' EQ 'AOS2').B3
         AIF   ('&SYS' EQ 'BOTH').B3A
TCBFTJSA DS    AL3 -   ADDRESS OF FIRST TCB FOR JOBSTEP  (AOS/1)
         AGO   .B4
.B3A     ANOP
TCBFTJSA DS    0AL3 -  ADDRESS OF FIRST TCB FOR JOBSTEP  (AOS/1)
.B3      ANOP
TCBJPQB  DS    AL3 -   ADDR OF LAST CDE FOR JPA CONTROL QUEUE  (AOS/2)
.B4      ANOP
TCBGRS   DS    0CL64 - GENERAL REGISTER SAVE AREA
         AIF   ('&SYS' EQ 'AOS1').B4B
         AIF   ('&SYS' EQ 'AOS2').B4A
*    THE FOLLOWING REGISTER MAPPING APPLIES TO AOS/2.
*    AOS/1 SAVES REGISTERS IN THE ORDER TCBGRS10-TCBGRS9.
.B4A     ANOP
TCBGRS0  DS    F -     SAVE AREA FOR GENERAL REGISTER 0
TCBGRS1  DS    F -     SAVE AREA FOR GENERAL REGISTER 1
TCBGRS2  DS    F -     SAVE AREA FOR GENERAL REGISTER 2
TCBGRS3  DS    F -     SAVE AREA FOR GENERAL REGISTER 3
TCBGRS4  DS    F -     SAVE AREA FOR GENERAL REGISTER 4
TCBGRS5  DS    F -     SAVE AREA FOR GENERAL REGISTER 5
TCBGRS6  DS    F -     SAVE AREA FOR GENERAL REGISTER 6
TCBGRS7  DS    F -     SAVE AREA FOR GENERAL REGISTER 7
TCBGRS8  DS    F -     SAVE AREA FOR GENERAL REGISTER 8
TCBGRS9  DS    F -     SAVE AREA FOR GENERAL REGISTER 9
TCBGRS10 DS    F -     SAVE AREA FOR GENERAL REGISTER 10
TCBGRS11 DS    F -     SAVE AREA FOR GENERAL REGISTER 11
TCBGRS12 DS    F -     SAVE AREA FOR GENERAL REGISTER 12
TCBGRS13 DS    F -     SAVE AREA FOR GENERAL REGISTER 13
TCBGRS14 DS    F -     SAVE AREA FOR GENERAL REGISTER 14
TCBGRS15 DS    F -     SAVE AREA FOR GENERAL REGISTER 15
         AGO   .B4C
.B4B     ANOP
TCBGRS10 DS    F -     SAVE AREA FOR GENERAL REGISTER 10
TCBGRS11 DS    F -     SAVE AREA FOR GENERAL REGISTER 11
TCBGRS12 DS    F -     SAVE AREA FOR GENERAL REGISTER 12
TCBGRS13 DS    F -     SAVE AREA FOR GENERAL REGISTER 13
TCBGRS14 DS    F -     SAVE AREA FOR GENERAL REGISTER 14
TCBGRS15 DS    F -     SAVE AREA FOR GENERAL REGISTER 15
TCBGRS0  DS    F -     SAVE AREA FOR GENERAL REGISTER 0
TCBGRS1  DS    F -     SAVE AREA FOR GENERAL REGISTER 1
TCBGRS2  DS    F -     SAVE AREA FOR GENERAL REGISTER 2
TCBGRS3  DS    F -     SAVE AREA FOR GENERAL REGISTER 3
TCBGRS4  DS    F -     SAVE AREA FOR GENERAL REGISTER 4
TCBGRS5  DS    F -     SAVE AREA FOR GENERAL REGISTER 5
TCBGRS6  DS    F -     SAVE AREA FOR GENERAL REGISTER 6
TCBGRS7  DS    F -     SAVE AREA FOR GENERAL REGISTER 7
TCBGRS8  DS    F -     SAVE AREA FOR GENERAL REGISTER 8
TCBGRS9  DS    F -     SAVE AREA FOR GENERAL REGISTER 9
.B4C     ANOP
TCBFSA   DS    0A -    ADDR OF FIRST PROBLEM PROGRAM SAVE AREA
         AIF   ('&SYS' EQ 'AOS2').B5
         AIF   ('&SYS' EQ 'BOTH').B5A
TCBIDF   DS    C -     TCB IDENTIFIER FIELD  (AOS/1)
         AGO   .B6
.B5A     ANOP
TCBIDF   DS    0C -    TCB IDENTIFIER FIELD  (AOS/1)
.B5      ANOP
TCBQEL   DS    FL1 -   ENQUEUE COUNT  (AOS/2)
.B6      ANOP
TCBFSAB  DS    AL3 -   ADDR OF FIRST PROBLEM PROGRAM SAVE AREA
TCBTCB   DS    A -     ADDR OF NEXT LOWER PRIRTITY TCB ON READY QUEUE
TCBTME   DS    A -     ADDRESS OF TIMER QUEUE ELEMENT
         AIF   ('&SYS' EQ 'AOS2').B7
TCBPIB   DS    0A -    ADDRESS OF PARTITION INFORMATION BLOCK
TCBPIBT  DS    B -     PARTITION TYPE  (AOS/1)
TCBPART  EQU   X'C0' - PARTITION FLAG BITS
*                      (AOS/1)
TCBPP    EQU   X'C0' - PROCESSING PROGRAM PARTITION
TCBSYSP  EQU   X'00' - SYSTEM TASK PARTITION
TCBSIZE  EQU   X'20' - LARGE PARTITION (1)--SMALL PARTITION (0)
TCBSTOP  EQU   X'10' - CPU TIMING STOPPED BY FINCH
*                      UNTIL TRANSIENT LOADED
TCBRSV54 EQU   X'08',,C'X' - RESERVED
TCBSCHTI EQU   X'04' - BIT ON INDICATES THAT THE SCHEDULER HAS SET THE
*                      TCBTIO FIELD TO POINT TO THE INITIATOR'S TIOT.
*                      IT ONLY HAS MEANING WHEN BIT TCBSCHED IS ON.
*                      (ICB489)                                  XM8572
TCBWRITE EQU   X'02' - INDICATES TO ABEND THAT THIS IS A READER OR
*                      WRITER TASK                               ICB422
TCBSCHED EQU   X'01' - SCHEDULER IN CONTROL - USED BY ABEND -
*                      TURNED OFF WHEN TIOT WRITTEN TO JOB QUEUE
TCBPIBA  DS    AL3 -   ADDRESS OF PARTITION INFORMATION BLOCK
         AIF   ('&SYS' EQ 'AOS1').B8
         ORG   TCBPIB
.B7      ANOP
TCBJSTCB DS    0A -    ADDRESS OF FIRST JOBSTEP TCB
*                      OR OF THIS TCB IF KEY ZERO  (AOS/2)
TCBRSV16 DS    X -     RESERVED
TCBJSTCA DS    AL3 -   ADDRESS OF FIRST JOBSTEP TCB
*                      OR OF THIS TCB IF KEY ZERO  (AOS/2)
.B8      ANOP
TCBNTC   DS    A -     ADDR OF NEXT SISTER TCB (ZERO IF THIS IS LAST
*                      SUBTASK)
TCBOTC   DS    A -     ADDR OF MOTHER TCB
TCBLTC   DS    A -     ADDR OF LAST DAUGHTER TCB ( ZERO IF THIS IS IT )
TCBIQE   DS    A -     ADDR OF IQE FOR EXTR SCHEDULING
TCBECB   DS    A -     ADDR OF ECB TO BE POSTED UPON TERMINATION
TCBTSFLG DS    B -     TIME SHARING FLAGS
TCBTSTSK EQU   X'80' - SWAPPED TS TASK
TCBSTPPR EQU   X'40' - TASK SHOULD BE MADE NDSP VIA TCBSTPP
*                      WHEN IT IS NO LONGER RUNNING A PRIVILEGED PGM
TCBATT   EQU   X'20' - TASK SHOULD NOT HAVE ATTENTION EXITS
*                      SCHEDULED ON IT BY EXIT EFFECTOR
TCBTIOTG EQU   X'10' - PURGE TGET/TPUT AFTER ATTENTION
TCBRSV17 EQU   X'08',,C'X' - RESERVED
TCBRSV18 EQU   X'04',,C'X' - RESERVED
TCBDYDSP EQU   X'02' - M195 TASK IS MEMBER OF DYNAMIC DISPATCHING
*                      GROUP                                     ICB262
TCBCPUBN EQU   X'01' - FOR M195, ZERO MEANS I/O BOUND AND ONE MEANS
*                      CPU BOUND                                 ICB262
TCBSTPCT DS    FL1 -   NUMBER OF SETTASK STARTS WHICH MUST BE
*                      ISSUED BEFORE TASK IS MADE DISPATCHABLE -
*                      FIELD NOT RESTRICTED TO TSO
TCBTSLP  DS    FL1 -   LIMIT PRIORITY OF TS TASK
TCBTSDP  DS    B -     DISPATCHING PRIORITY OF TS TASK
         AIF   ('&SYS' EQ 'AOS1').C1
         AIF   ('&SYS' EQ 'BOTH').C1A
TCBPQE   DS    A -     POINTER TO DPQE MINUS 8 FOR THE JOB STEP (AOS/2)
         AGO   .C2
.C1A     ANOP
TCBPQE   DS    0A -    POINTER TO DPQE MINUS 8 FOR THE JOB STEP (AOS/2)
.C1      ANOP
TCBFTLMP DS    FL1 -   TASK LIMIT PRIORITY (AOS/1)
TCBFTFLG DS    0BL3 -  ABEND FLAGS (AOS/1)
TCBFTFL1 DS    B -     ABEND FLAGS (AOS/1)
TCBRSV56 EQU   X'80',,C'X' - RESERVED
TCBRSV57 EQU   X'40',,C'X' - RESERVED
TCBRSV58 EQU   X'20',,C'X' - RESERVED
TCBRSV59 EQU   X'10',,C'X' - RESERVED
TCBRSV60 EQU   X'08',,C'X' - RESERVED
TCBFTTOP EQU   X'04' - THIS IS TOP TASK IN TREE BEING ABTERMED   ICB422
TCBFTCOM EQU   X'02' - ABTERM DUMP SUCCESSFULLY COMPLETED
TCBENQ   EQU   X'01' - INDICATES TO ABEND THAT TASK IS ENQUEUED ON
*                      DUMP DATA SET                             ICB422
TCBFTFL2 DS    B -     ABEND FLAGS (AOS/1)
TCBRSV61 EQU   X'80',,C'X' - RESERVED
TCBRSV62 EQU   X'40',,C'X' - RESERVED
TCBRSV63 EQU   X'20',,C'X' - RESERVED
TCBRSV64 EQU   X'10',,C'X' - RESERVED
TCBRSV65 EQU   X'08',,C'X' - RESERVED
         AIF   ('&SYS' EQ 'BOTH').C2X
TCBFDSOP EQU   X'04' - INDICATES TO ABEND THAT DUMP DATA SET IS OPEN
*                      FOR JOB STEP                              ICB422
         AGO   .C2Y
.C2X     ANOP
*        FOLLOWING AOS/1 EQU IS SHOWN AS A COMMENT BECAUSE
*        AOS/2 USES THIS LABEL ON ANOTHER BIT
*TCBFDSOP EQU  X'04' - INDICATES TO ABEND THAT DUMP DATA SET IS OPEN
*                      FOR JOB STEP                              ICB422
.C2Y     ANOP
TCBSYSAB EQU   X'02' - INDICATES TO ABEND THAT EITHER THE SYSABEND DATA
*                      SET (BIT=1) OR THE SYSUDUMP DATA SET (BIT=0) IS
*                      BEING USED                                ICB422
TCBRSV66 EQU   X'01',,C'X' - RESERVED
TCBFTFL3 DS    B -     ABEND FLAGS (AOS/1)
TCBRSV67 EQU   X'80',,C'X' - RESERVED
TCBRSV68 EQU   X'40',,C'X' - RESERVED
TCBRSV69 EQU   X'20',,C'X' - RESERVED
TCBRSV70 EQU   X'10',,C'X' - RESERVED
TCBRSV71 EQU   X'08',,C'X' - RESERVED
TCBFTDUM EQU   X'04' - NO ABTERM DUMPS MAY BE PROVIDED IN THIS STEP
TCBRSV72 EQU   X'02',,C'X' - RESERVED
TCBRSV73 EQU   X'01',,C'X' - RESERVED
.C2      ANOP
         AIF   ('&SYS' EQ 'BOTH').C2E
         AIF   ('&SYS' EQ 'AOS1').C2F
TCBAQE   DS    A -     LIST ORIGIN OF AQE(S) FOR THIS TASK (AOS/2)
         AGO   .C2G
.C2E     ANOP
TCBAQE   DS    0A -    LIST ORIGIN OF AQE(S) FOR THIS TASK (AOS/2)
.C2F     ANOP
TCBDDRTI DS    F -     AMOUNT OF TIME REMAINING IN TASK'S DYNAMIC
*                      DISPATCH TIME SLICE  (AOS/1)              ICB465
.C2G     ANOP
TCBSTAB  DS    0A -    ADDR OF STAE CONTROL BLOCK
TCBNSTAE DS    B -     STAE FLAGS
TCBSTABE EQU   X'80' - ABEND ENTERED BECAUSE OF ERROR IN STAE PROC
TCBQUIES EQU   X'40' - STAE INVOKED PURGE I/O ROUTINE WITH QUIESCE I/O
*                      OPTION
         AIF   ('&SYS' EQ 'AOS1').C2A
TCB33E   EQU   X'20' - A 33E ABEND HAS OCCURRED FOR TASK  (AOS/2)
TCBRSV19 EQU   X'10',,C'X' - RESERVED  (AOS/2)
.C2A     AIF   ('&SYS' EQ 'AOS2').C2B
TCBXCTL  EQU   X'20' - CURRENT SCB HAS XCTL=YES OPTION  (AOS/1)
TCBSCAT  EQU   X'10' - SCB WAS CREATED BY A PROGRAM THAT IS SCATTER
*                      LOADED  (AOS/1)
.C2B     ANOP
TCBHALT  EQU   X'08' - PURGE I/O ROUTINE DID NOT SUCCESSFULLY QUIESCE
*                      I/O BUT I/O WAS HALTED
         AIF   ('&SYS' EQ 'AOS1').C2C
TCBSYNCH EQU   X'04' - SYNCH ISSUED BY ASIR TO SCHEDULE EXIT ROUTINE
*                      (AOS/2)
TCBNPURG EQU   X'02' - VALID RETRY WITHOUT AN RB PURGE  (AOS/2)
TCBSTCUR EQU   X'01' - STAE RECURSION VALID  (AOS/2)             ICB443
.C2C     AIF   ('&SYS' EQ 'AOS2').C2D
TCBSUPER EQU   X'04' - PROGRAM USING STAE IS IN SUPERVISOR MODE (AOS/1)
TCBRETRY EQU   X'02' - STAE USER REQUESTED THAT A RETRY ROUTINE BE
*                      SCHEDULED BUT THAT THE RB CHAIN NOT BE PURGED
*                      (AOS/1)
TCBVALID EQU   X'01' - RETRY ROUTINE AND PARAMETER LIST ADDRESSES ARE
*                      VALID  (AOS/1)
.C2D     ANOP
TCBSTABB DS    AL3 -   ADDR OF STAE CONTROL BLOCK
TCBTCT   DS    0A -    ADDR OF TCT
TCBTCTGF DS    B -     FLAG BYTE FOR TIMING CONTROL TABEL        ICB318
TCBSMFGF EQU   X'80' - IF ZERO, THE TCT CORE TABLE IS NOT TO BE
*                      UPDATED BY GETMAIN/FREEMAIN.
*                      IF ONE, THE TCT CORE TABLE IS TO BE UPDATED BY
*                      GETMAIN/FREEMAIN.                         ICB318
TCBRSV20 EQU   X'40',,C'X' - RESERVED
TCBRSV97 EQU   X'20',,C'X' - RESERVED
TCBRSV98 EQU   X'10',,C'X' - RESERVED
TCBRSV99 EQU   X'08',,C'X' - RESERVED
TCBRSV9A EQU   X'04',,C'X' - RESERVED
TCBRSV9B EQU   X'02',,C'X' - RESERVED
TCBRSV9C EQU   X'01',,C'X' - RESERVED
TCBTCTB  DS    AL3 -   ADDR OF TCT
TCBUSER  DS    A -     FIELD AVAILABLE TO THE USER
TCBSCNDY DS    0BL4 -  SECONDARY NONDISPATCHABILITY FLAGS -
*                      (IF ANY BIT IN THESE BYTES IS ON,
*                      THEN SO IS THE PRIMARY NDSP FLAG)
TCBNDSP  DS    0BL4 -  SAME AS TCBSCNDY
TCBNDSP0 DS    B -     BYTE 0
TCBNDSP1 DS    B - -   BYTE 1
TCBDARTN EQU   X'80' - TASK TEMPORARILY NONDISPATCHABLE -
*                      (DAR)
TNONDISP EQU   TCBDARTN * ALIAS *
TCBDARPN EQU   X'40' - TASK PERMANENTLY NONDISPATCHABLE -
*                      (DAR)
PNONDISP EQU   TCBDARPN * ALIAS *
TCBRSTND EQU   X'20' - TASK TEMPORARILY NONDISPATCHABLE -
*                      (RMS/SER)
TCBRSPND EQU   X'10' - TASK PERMANENTLY NONDISPATCHABLE -
*                      (RMS/SER)
*                      (IF THIS FLAG IS ON THEN THE PREVIOUS
*                      ONE MUST BE TOO)
TCBDDRND EQU   X'08' - TASK IS IN DEVICE ALLOCATION AND DYNAMIC DEVICE
*                      RECONFIGURATION (DDR) HAS MADE IT
*                      NONDISPATCHABLE
TCBTPSP  EQU   X'04' - DISPATCHING OF TCAM TASK MUST BE DELAYED
*                      UNTIL TCAM I/O APPENDAGE OR SVC ROUTINE HAS
*                      COMPLETED EXECUTION  (TCAM IN
*                      MULTIPROCESSING ENVIRONMENT)
TCBRSV21 EQU   X'02',,C'X' - RESERVED
TCBDPFND EQU   X'01' - TASK IS TEMPORARILY SET NON-DISPATCHABLE TO
*                      FACILITATE DISPATCHING THE OWNER OF THE SYSTEM
*                      LOCK.  SET TO 1 BY PAGING SUPERVISOR.
*                      (OS/VS2)                                 YA00832
TCBNDSP2 DS    B - -   BYTE 2
TCBABD   EQU   X'80' - SET BY ABDUMP - (AOS/1)
TCBSTPP  EQU   X'40' - TASK NDSP BECAUSE STOPPED BY SETTASK
TCBNDSVC EQU   X'20' - TASK NDSP BECAUSE SVC DUMP IS EXECUTING FOR
*                      ANOTHER TASK
TCBNDTS  EQU   X'10' - TASK NDSP BECAUSE BEING SWAPPED OUT
TCBIWAIT EQU   X'08' - TASK NDSP DUE TO INPUT WAIT
TCBOWAIT EQU   X'04' - TASK NDSP DUE TO OUTPUT WAIT
TCBDSS   EQU   X'02' - DSS HAS SET THE TASK NON-DISPATCHABLE     ICB313
TCBABE   EQU   X'01' - ABEND ENTERED FOR THIS TASK -
*                      WHILE SYSABEND DCB OPEN FOR ANOTHER TASK (AOS/1)
TCBNDSP3 DS    B -     BYTE 3
         AIF   ('&SYS' EQ 'AOS2').C3
TCBTERM  EQU   X'80' - TERMINATED - (AOS/1)
TCBABTER EQU   X'40' - TO BE TERMINATED BY ABEND -  (AOS/1)
TCBNDSDA EQU   X'20' - TEMPORARILY NONDISPATCHABLE, PARTITION IS
*                      DEACTIVATED  (AOS/1)                      ICB357
.C3      AIF   ('&SYS' EQ 'AOS1').C4
TCBLJSND EQU   X'80' - TASK IS ABENDING AND NONDISPATCHABLE BECAUSE IT
*                      HAS A JOB STEP SUBTASK.  TCBONDSP MUST ALSO BE
*                      ON.
TCBSTAND EQU   X'40' - TASK HAS BEEN SET NONDISPATCHABLE WHILE ASIR
*                      IS SCHEDULING AN EXIT ROUTINE FOR SOME OTHER
*                      TASK IN JOB STEP
TCBRSV23 EQU   X'20',,C'X' - RESERVED  (AOS/2)
.C4      ANOP
TCBRSV24 EQU   X'10',,C'X' - RESERVED
TCBRSV25 EQU   X'08',,C'X' - RESERVED
TCBRSV26 EQU   X'04',,C'X' - RESERVED
TCBRSV27 EQU   X'02',,C'X' - RESERVED
TCBRSV28 EQU   X'01',,C'X' - RESERVED
TCBMDIDS DS    F - -   RESERVED FOR MODEL-DEPENDENT SUPPORT AND FOR
*                      IBM PROPRIETARY PROGRAMMING SUPPORT       ICBXXX
TCBJSCB  DS    0A -    ADDR OF JOB STEP CONTROL BLOCK
TCBRECDE DS    B -     ABEND RECURSION BYTE                      ICB456
TCBREC   EQU   X'80' - VALID REENTRY TO ABEND INDICATED IF NON-ZERO
*                      VALUE IN FOLLOWING 7 BITS                 ICB456
TCBOPEN  EQU   X'01' - OPEN DUMP DATA SET                        ICB456
TCBCLOSD EQU   X'02' - CLOSE DIRECT SYSOUT ON TAPE               ICB456
TCBCLOSE EQU   X'03' - CLOSE OPEN DATA SETS                      ICB456
TCBCLOSF EQU   X'04' - RESERVED                                  ICB456
TCBGREC  EQU   X'05' - GRAPHICS                                  ICB456
TCBADUMP EQU   X'07' - ABDUMP                                    ICB456
TCBPTAXE EQU   X'08' - PURGE TAXE                                ICB456
TCBMESG  EQU   X'09' - MESSAGE RECURSION                         ICB456
TCBDYNAM EQU   X'0A' - DD-DYNAM TIOT CLEANUP                     ICB456
TCBQTIP  EQU   X'0C' - PURGE TSO INTERPARTITION POSTS            ICB456
TCBTCAMP EQU   X'0D' - PURGE TCAM INTERPARTITION POSTS           ICB456
TCBSAVCD EQU   X'0F' - ASIR RECURSION.  SAVE OLD COMP CODE       ICB456
TCBTYP1W EQU   X'10' - TYPE 1 MESSAGE WRITE TO PROGRAMMER        ICB456
TCBNOSTA EQU   X'30' - STAE/STAI NOT TO BE HONORED               ICB456
TCBSTRET EQU   X'31' - RETURN FROM STEAL CORE                    ICB456
TCBCONVR EQU   X'32' - CONVERT TO STEP ABEND                     ICB456
TCBDARET EQU   X'33' - RETURN FROM DAR                           ICB456
TCBTYP1R EQU   X'34' - RETURN FROM TYPE 1 MESSAGE MODULE         ICB456
TCBNEWRB EQU   X'35' - ABEND ISSUED SVC 13 TO XCTL TO A NON-ABEND
*                      MODULE                                    ICB456
TCBMCCNS EQU   X'40' - INDICATES THAT A MUST COMPLETE TASK HAS ABENDED
*                      WITHOUT ENOUGH STORAGE FOR 2 RB'S FOR A WTOR
*                      ASKING WHETHER THE TASK'S RESOURCES ARE CRITICAL
*                      OR NOT.  THE RESOURCES ARE ASSUMED TO BE
*                      CRITICAL, WHICH WILL CAUSE THE PARTITION TO BE
*                      MARKED PERMANENTLY NON-DISPATCHABLE.
*                      (OS/VS1)                                  ICB492
TCBJSCBB DS    AL3 -   ADDR OF JOB STEP CONTROL BLOCK
TCBDDEXC DS    H -     COUNT OF THE NUMBER OF TIMES A DYNAMIC
*                      DISPATCHING TASK HAS ITS TIME SLICE EXPIRE
*                      (AOS/1)                                   ICB465
TCBDDWTC DS    H -     COUNT OF THE NUMBER OF TIMES A DYNAMIC
*                      DISPATCHING TASK IS NOT INTERRUPTED BY TIME
*                      SLICE BETWEEN WAITS  (AOS/1)              ICB465
TCBIOBRC DS    A -     ADDRESS OF IOB RESTORE CHAIN FOR I/O QUIESCED
*                      BY EOT                                    YM2840
TCBRSV30 DS    F -     RESERVED
TCBEXT1  DS    0A -    ADDRESS OF OS-AOS COMMON TCB EXTENSION    ICB311
TCBRSV32 DS    X -     RESERVED                                  ICB311
TCBEXT1A DS    AL3 -   ADDRESS OF OS-AOS COMMON TCB EXTENSION    ICB311
*
*              AOS/1 - AOS/2 COMMON SECTION
*
TCBBITS  DS    0BL4 -  FLAG BYTES
TCBNDSP4 DS    B -     SECONDARY NONDISPATCHABILITY FLAGS COMMON TO
*                      AOS/1 AND AOS/2.  COORDINATED WITH PRIMARY
*                      NONDISPATCHABILITY FLAG TCBPNDSP.
TCBRSV86 EQU   X'80',,C'X' - RESERVED
TCBRSV87 EQU   X'40',,C'X' - RESERVED
TCBRSV88 EQU   X'20',,C'X' - RESERVED
TCBRSV89 EQU   X'10',,C'X' - RESERVED
TCBRSV90 EQU   X'08',,C'X' - RESERVED
TCBRSV91 EQU   X'04',,C'X' - RESERVED
TCBRSV92 EQU   X'02',,C'X' - RESERVED
TCBRSV93 EQU   X'01',,C'X' - RESERVED
TCBNDSP5 DS    B -     SECONDARY NONDISPATCHABILITY FLAGS UNIQUE TO
*                      AOS/1 OR AOS/2.  COORDINATED WITH PRIMARY
*                      NONDISPATCHABILITY FLAG TCBPNDSP.
         AIF   ('&SYS' EQ 'AOS2').C5
TCBNDSPL EQU   X'80' - NONDISPATCHABLE BECAUSE SUPERVISOR LOCK SET.
*                      SET BY PAGING SERVICE INTERFACE ROUTINE WHEN
*                      DISABLED CODE PRODUCES A PAGE FAULT OR REQUESTS
*                      A PAGE FIX.  (AOS/1)
TCBNDGTF EQU   X'40' - TASK NONDISPATCHABLE WHILE WAITING FOR A TIRB
*                      ROUTINE TO PROCESS A DISABLED PAGE FAULT WHICH
*                      WAS PRODUCED BY GTF.  SET AND RESET BY STAGE
*                      THREE EXIT EFFECTOR.  SET WHEN TIRB POOL EMPTY
*                      AND REQUESTING TASK HAS AN SQE QUEUED AT
*                      REQUEST OF GTF.  (AOS/1)
         AGO   .C5D
.C5      ANOP
TCBRSV94 EQU   X'80',,C'X' - RESERVED
TCBRSV95 EQU   X'40',,C'X' - RESERVED
.C5D     ANOP
TCBRSV74 EQU   X'20',,C'X' - RESERVED
TCBRSV75 EQU   X'10',,C'X' - RESERVED
TCBRSV76 EQU   X'08',,C'X' - RESERVED
TCBRSV77 EQU   X'04',,C'X' - RESERVED
TCBRSV78 EQU   X'02',,C'X' - RESERVED
TCBRSV79 EQU   X'01',,C'X' - RESERVED
TCBFLGS6 DS    B -     TASK-RELATED FLAGS
TCBRV    EQU   X'80' - PARTITION IS FIXED.  VIRTUAL ADDRESSES IN
*                      PARTITION ARE REAL.
         AIF   ('&SYS' EQ 'AOS2').C5A
         AIF   ('&SYS' EQ 'BOTH').C5B
TCBPIE17 EQU   X'40' - TASK REQUESTS SPIE ON PAGE FAULTS (AOS/1) ICB339
.C5E     ANOP
TCBPANIC EQU   X'20' - TASK HAS OR IS WAITING FOR 'PANIC' (AOS/1)ICB457
TCBRSV80 EQU   X'10',,C'X' - RESERVED  (AOS/1)
TCBRUNPN EQU   X'08' - IF ZERO, PARTITION CAN BE DEACTIVATED.
*                      IF ONE, PARTITION IS INELIGIBLE TO BE
*                      DEACTIVATED.  (AOS/1)                     ICB465
TCBRUNJB EQU   X'04' - IF ZERO, CURRENT JOB CAN BE DEACTIVATED.
*                      IF ONE, PARTITION IS INELIGIBLE TO BE
*                      DEACTIVATED WHILE CURRENT JOB IS RUNNING.
*                      (AOS/1)                                   ICB465
TCBDSINQ EQU   X'02' - IF ZERO, DSI LOGIC IS NOT BEING EXECUTED.
*                      IF ONE, SCHEDULER IS USING (ENQUEUED) DATA SET
*                      INTEGRITY (DSI) LOGIC AT JOB START TIME.
*                      PARTITION IS INELIGIBLE FOR DEACTIVATION.
*                      (AOS/1)                                   ICB465
TCBRSV81 EQU   X'01',,C'X' - RESERVED  (AOS/1)
         AGO   .C7
.C5A     ANOP
TCBPIE17 EQU   X'40' - PAGE FAULT INTERRUPT IS TO BE PASSED TO THE
*                      TASK'S INTERRUPT EXIT AND AN 8-BYTE PICA IS IN
*                      EFFECT FOR THIS TASK  (AOS/2)             ICB339
         AGO   .C5C
.C5B     ANOP
TCBPIE17 EQU   X'40' - TASK REQUESTS SPIE ON PAGE FAULTS (AOS/1)
*                      PAGE FAULT INTERRUPT IS TO BE PASSED TO THE
*                      TASK'S INTERRUPT EXIT AND AN 8-BYTE PICA IS IN
*                      EFFECT FOR THIS TASK  (AOS/2)             ICB339
.C5C     ANOP
TCBCPU   EQU   X'20' - TASK IS CPU-BOUND MEMBER OF APG  (AOS/2)
TCBSPVLK EQU   X'10' - TASK SCHEDULED FOR ABTERM WHILE OWNING
*                      SUPERVISOR LOCK  (AOS/2)
TCBOLSQA EQU   X'08' - TASK OWNS SPQE FOR LSQA  (AOS/2)
TCBMIGR  EQU   X'04' - REGION SELECTED FOR MIGRATION FROM PRIMARY
*                      PAGING DEVICE  (AOS/2)
TCBAPG   EQU   X'02' - TASK IS IN APG  (AOS/2)
TCBNTJS  EQU   X'01' - JOB STEP TASK BUT NOT HIGHEST IN FAILING TREE
*                      (AOS/2)
         AIF   ('&SYS' EQ 'BOTH').C5E
.C7      ANOP
TCBFLGS7 DS    B -     TASK-RELATED FLAGS
         AIF   ('&SYS' EQ 'AOS1').C9
TCBGPECB EQU   X'80' - TASK IS IN AN ECB WAIT FOR A GETPART
*                      (AOS/2)                                   ICB339
TCBRSV33 EQU   X'40',,C'X' - RESERVED  (AOS/2)
TCBRSV34 EQU   X'20',,C'X' - RESERVED  (AOS/2)
TCBSTACK EQU   X'10' - SET IN JOB STEP TCB TO INDICATE THAT A TASK IN
*                      THE JOB STEP IS IN SERIAL ABEND PROCESSING.
*                      USED IN CONJUNCTION WITH TCBFOINP. (AOS/2)ICB374
TCBRSV35 EQU   X'08',,C'X' - RESERVED
TCBRSTSK EQU   X'04' - RESIDENT SYSTEM TASK  (AOS/2)
TCBADMP  EQU   X'02' - ALL OTHER TASKS IN JOB STEP HAVE BEEN SET
*                      NONDISPATCHABLE BY ABDUMP.  THIS BIT IS SET TO
*                      CONTROL JOB STEP DURING THE DUMPING PROCESS.
*                      (AOS/2)
         AIF   ('&SYS' EQ 'AOS2').C9A
.C9      ANOP
TCBFDD   EQU   X'80' - IF ONE, THIS TCB IS A MEMBER OF THE DYNAMIC
*                      DISPATCHING GROUP  (AOS/1)                ICB465
TCBFDDT  EQU   X'40' - USED BY DYNAMIC DISPATCHING - 0 = CPU BOUND,
*                      1 = I/O BOUND  (AOS/1)                    ICB465
TCBFDDEI EQU   X'20' - USED BY DYNAMIC DISPATCHING - 0 = INTERVAL HAS
*                      NOT EXPIRED, 1 = TIME SLICE INTERVAL HAS EXPIRED
*                      FOR THIS TASK SINCE IT LAST ISSUED A WAIT.
*                      (AOS/1)                                   ICB465
TCBFWDD  EQU   X'10' - IF ONE, THIS TCB WAS A MEMBER OF DYNAMIC
*                      DISPATCHING GROUP BUT IS NOT CURRENTLY A
*                      MEMBER  (OS/VS1)                          XM9175
         AIF   ('&SYS' EQ 'BOTH').C9C
TCBRSV35 EQU   X'08',,C'X' - RESERVED
.C9C     ANOP
TCBRSV83 EQU   X'04',,C'X' - RESERVED  (AOS/1)
TCBRSV84 EQU   X'02',,C'X' - RESERVED  (AOS/1)
.C9A     ANOP
TCBGTOFM EQU   X'01' - GTF TRACING TEMPORARILY DISABLED          ICB402
TCBDAR   DS    B - -   DAMAGE ASSESSMENT ROUTINE FLAGS
TCBDARP  EQU   X'80' - PRIMARY DAR RECURSION - -
*                      DAR FAILURE WHILE WRITING CORE IMAGE
TCBDARS  EQU   X'40' - SECONDARY DAR RECURSION -
*                      DAR FAILURE WHILE ATTEMPTING
*                      TO REINSTATE FAILING REGION/PARTITION
TCBDARD  EQU   X'20' - A DUMP HAS BEEN REQUESTED FOR A WRITER OR
*                      SCHEDULER ABEND AND THE USER HAS PROVIDED NO
*                      SYSABEND DD CARD (AOS/1)
TCBDARC  EQU   X'10' - RECURSION PERMITTED IN CLOSE -
*                      AFTER DAR PROCESSING COMPLETED (PCP)
TCBDARMC EQU   X'10' - DAR HAS BEEN ENTERED TO HANDLE A VALID RECURSION
*                      IN MUST COMPLETE STATUS THROUGH ABEND     ICB264
TCBDARO  EQU   X'08' - SYSTEM ERROR TASK IS FAILING.  DAR DUMP SHOULD
*                      NOT REQUEST ANY ERP PROCESSING
TCBDARWT EQU   X'04' - WTO IN PROCESS FOR DAR                    ICB264
TCBRSV36 EQU   X'02',,C'X' - RESERVED
TCBEXSVC EQU   X'01' - SVC DUMP IS EXECUTING FOR THIS TASK
TCBRSV37 DS    X -     RESERVED
TCBSYSCT DS    FL1 -   COUNT FOR THE OUTSTANDING NUMBER OF 'SYSTEM
*                      MUST COMPLETE' REQUESTS (ICB497)          YM3883
TCBSTMCT DS    FL1 -   COUNT FOR OUTSTANDING NUMBER OF 'STEP MUST
*                      COMPLETE' REQUESTS (ICB497)               YM3883
TCBEXT2  DS    0A -    SAME AS TCBEXT2A                          ICB311
TCBRSV39 DS    X -     RESERVED                                  ICB311
TCBEXT2A DS    AL3 -   ADDRESS OF AOS/1 - AOS/2 COMMON EXTENSION ICB311
         AIF   ('&SYS' EQ 'AOS2').D1
*
*              AOS/1 TCB OVERLAY
*
TCBPCB   DS    A -     ADDRESS OF PAGE CONTROL BLOCK FOR TASK
TCBGQE   DS    A -     ADDRESS OF FIRST GQE FOR TASK
TCBARB   DS    0A -    ADDRESS OF AVAILABLE SVRB                 ICB344
TCBRSV85 DS    XL1 -   RESERVED                                  ICB344
TCBARBA  DS    AL3 -   ADDRESS OF AVAILABLE SVRB                 ICB344
         AIF   ('&SYS' EQ 'AOS1').D2
         SPACE 1
         ORG   TCBPCB
.D1      ANOP
*
*              AOS/2 TCB OVERLAY
*
TCBXTENT DS    0CL4 -  REGION SEGMENT INFORMATION
TCBRSV40 DS    XL1 -   RESERVED
TCBSTI   DS    FL1 -   SEGMENT INDEX TO FIRST SEGMENT IN REGION.  ZERO
*                      IF VIRTUAL ADDRESSES IN REGION ARE REAL.
TCBSCT   DS    FL1 -   COUNT FIELD INDICATING THE NUMBER OF SEGMENTS
*                      FOR THIS TASK'S REGION.  ZERO IF VIRTUAL
*                      ADDRESSES IN REGION ARE REAL.
TCBLSQA  DS    FL1 -   SEGMENT INDEX TO FIRST LSQA SEGMENT FOR THE
*                      TASK'S REGION                             ICB339
TCBTIRB  DS    A -     ADDRESS OF TIRB FOR TASK
TCBBACK  DS    A -     ADDRESS OF PREVIOUS TCB ON READY QUEUE.  ZERO
*                      IN TOP TCB.
TCBLSQAP DS    A -     ADDRESS OF SPQE FOR LSQA
TCBIOTIM DS    F -     TIME IN 16-MICROSECOND UNITS BETWEEN TIME
*                      ORIGINAL TIME SLICE INTERVAL WAS ASSIGNED AND
*                      TIME APG TASK WENT INTO VOLUNTARY WAIT
TCBTMSAV DS    F -     TIME IN 16-MICROSECOND UNITS REMAINING FROM
*                      ORIGINAL TIME SLICE INTERVAL WHEN APG TASK WAS
*                      LAST DISPATCHED
TCBABCUR DS    C -     ABEND RECURSION BYTE
TCBRSVAA DS    FL1 -   RESERVED (ICB497)                         YM3883
TCBTID   DS    C -     TASK ID NUMBER                            ICB374
TCBPAGID EQU   255 -   ID FOR PAGING SUPERVISOR TASK             ICB403
TCBSYERR EQU   254 -   ID FOR SYSTEM ERROR TASK                  ICB403
TCBCOMM  EQU   253 -   ID FOR COMMUNCIATIONS TASK                ICB403
TCBIORMS EQU   252 -   ID FOR I/O RMS TASK                       ICB403
TCBMASTR EQU   251 -   ID FOR MASTER SCHEDULER TASK              ICB403
TCBJES   EQU   250 -   ID FOR JES MONITOR TASK                   ICB403
TCBDSSID EQU   249 -   ID FOR DSS TASK                           ICB403
TCBRSV41 DS    X -     RESERVED                                  ICB374
TCBQECB  DS    0A -    SAME AS TCBQECBA BELOW                    ICB339
TCBNQCT  DS    FL1 -   COUNT OF ALL RESOURCES UNAVAILABLE DUE TO ENQ
*                      OR RESERVE REQUESTED WITH ECB             ICB339
TCBQECBA DS    AL3 -   ADDR OF ECB TO BE POSTED WHEN TCBNQCT=0   ICB339
TCBFOE   DS    0A -    SAME AS TCBFOEA BELOW                     ICB339
TCBRSV42 DS    X -     RESERVED                                  ICB339
TCBFOEA  DS    AL3 -   ADDRESS OF FIRST FIX OWNERSHIP ELEMENT (FOE)
*                      IN LIST FOR THIS TASK                     ICB339
TCBSWA   DS    A -     ADDRESS OF FIRST SCHEDULER WORK AREA (SWA)
*                      HEADER IN A CHAIN OF SWA BLOCKS FOR THIS
*                      TASK                                      ICB374
TCBRSV96 DS    F -     RESERVED
.D2      ANOP
         DS    0D
TCBMNLEN EQU   *-TCB - LENGTH OF MAIN SECTION OF TCB
*
*              AOS/1 - AOS/2 COMMON EXTENSION
*              ADDRESS OF EXTENSION IS IN TCBEXT2
*
         AIF   ('&DSECT' EQ 'NO').D3
TCBXTNT2 DSECT , -     START OF EXTENSION
         AGO   .D4
.D3      ANOP
TCBXTNT2 EQU   * -     START OF EXTENSION                        ICB311
.D4      ANOP
TCBGTF   DS    0A -    SAME AS TCBGTFA BELOW                     ICB312
TCBTFLG  DS    B -     GTF FLAG BYTE                             ICB312
TCBASYNC EQU   X'80' - GTF ASYNCHRONOUS GATHER RTNE IN CONTROL   ICB312
TCBERRTN EQU   X'40' - GTF ASYNCHRONOUS GATHER ERROR ROUTINE IN
*                      CONTROL                                   ICB312
TCBDSPIT EQU   X'20' - MCIH SHOULD UNCONDITIONALLY BRANCH TO THE
*                      DISPATCHER                                ICB312
TCBRSV43 EQU   X'10',,C'X' - RESERVED
TCBRSV44 EQU   X'08',,C'X' - RESERVED
TCBRSV45 EQU   X'04',,C'X' - RESERVED
TCBRSV46 EQU   X'02',,C'X' - RESERVED
TCBRSV47 EQU   X'01',,C'X' - RESERVED
TCBGTFA  DS    AL3 -   ADDRESS OF TEMPORARY TRACE BUFFER         ICB312
TCBRSVAB DS    FL1 -   RESERVED (ICB497)                         YM3883
TCBRCMP  DS    BL3 -   COMMON INTERFACE BETWEEN AOS/1 AND AOS/2 TO KEEP
*                      ABTERM COMPLETION CODE DUE TO A VALID RECURSION
*                      IN STAE                                   ICB411
TCBRSV48 DS    F -     RESERVED
TCBRSV49 DS    F -     RESERVED
         SPACE 1
         DS    0D -    FORCE LENGTH EQUATE TO DOUBLE WORD        ICB362
TCBX2LEN EQU   *-TCBXTNT2 LENGTH OF COMMON EXTENSION
         SPACE 2
TCBLEN   EQU   TCBPXLEN+TCBMNLEN+TCBX2LEN - TCB LENGTH INCLUDING
*                      PREFIX  (VALID IF SYS=AOS1 OR SYS=AOS2, BUT
*                      NOT VALID IF SYS=BOTH)
*
*                      END OF TCB
         MEND  , */
* %TCBL2  :  ;
* /*           TCB PREFIX                                            */
*
* DECLARE
*   1 TCBFIX   BASED(TCBPTR-32)  BDY(DWORD),
*
*    2 TCBFRS   CHAR(32) BDY(DWORD), /* FLOATING POINT REGISTER SAVE
*                                       AREA                         */
*     3 TCBFRS0 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING
*                                       POINT REGISTER 0             */
*     3 TCBFRS2 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING
*                                       POINT REGISTER 2             */
*     3 TCBFRS4 CHAR(8)  BDY(DWORD), /* SAVE AREA FOR FLOATING
*                                       POINT REGISTER 4             */
*     3 TCBFRS6 CHAR(8)  BDY(DWORD); /* SAVE AREA FOR FLOATING
*                                       POINT REGISTER 6             */
*
* /*           TCB PROPER                                            */
*
* DECLARE
*   1 TCB      BASED(TCBPTR)  BDY(DWORD),
*
*    2 TCBRBP   PTR(31),             /* PTR TO TOP RB ON RB CHAIN    */
*    2 TCBPIE   PTR(31),             /* ADDR OF PROGRAM INTERRUPT
*                                       ELEMENT (PIE)                */
*     3 TCBPMASK CHAR(1),            /* SPIE BITS                    */
*      4 *        BIT(4),            /* RESERVED                     */
*      4 TCBPM    BIT(4),            /* PROGRAM MASK AT TIME OF SPIE
*                                       INITIATION.  MASK RESTORED AT
*                                       TIME OF SPIE NULLIFICATION.  */
*     3 TCBPIEA  PTR(24),            /* ADDRESS OF PIE               */
*    2 TCBDEB   PTR(31),             /* ADDR OF THE DEB QUEUE        */
*    2 TCBTIO   PTR(31),             /* ADDR OF THE TASK I/O TABLE
*                                       (TIOT)                       */
*    2 TCBCMP   CHAR(4) BDY(WORD),   /* TASK COMPLETION CODE         */
*     3 TCBCMPF  CHAR(1),            /* COMPLETION FLAGS             */
*      4 TCBCREQ  BIT(1),            /* - A DUMP HAS BEEN REQUESTED  */
*      4 TCBCSTEP BIT(1),            /* - A STEP ABEND HAS BEEN
*                                       REQUESTED                    */
*      4 TCBCPP   BIT(1),            /* - SECOND ABEND LOAD OVERLAID
*                                       PP STORAGE (AOS/1) FOR FIRST
*                                       LOAD OVERLAY SEE TCBFLGS     */
*      4 TCBSTCC  BIT(1),            /* COMPLETION CODE IS NOT TO
*                                       BE STORED IN TCBCMPC SHOULD
*                                       AN ABEND BE ENCOUNTERED.
*                                       THIS PREVENTS AN OVERLAY OF
*                                       ORIGINAL COMPLETION CODE.    */
*      4 TCBCDBL  BIT(1),            /* - A DOUBLE ABEND HAS
*                                       OCCURRED                     */
*      4 TCBCWTO  BIT(1),            /* - DUMP MSG TO BE ISSUED TO
*                                       OPR                          */
*      4 TCBCIND  BIT(1),            /* - SCHEDULER TO PRINT
*                                       INDICATIVE DUMP              */
*      4 TCBCMSG  BIT(1),            /* - ABEND MSG PROVIDED TO BE
*                                       PRINTED BY ABDUMP            */
*     3 TCBCMPC  CHAR(3),            /* SYSTEM (FIRST 12 BITS) AND
*                                       USER (SECOND 12) COMPLETION
*                                       CODES                        */
*    2 TCBTRN   PTR(31),             /* ADDR OF CONTROL CORE TABLE   */
*     3 TCBABF   CHAR(1),            /* FLAG BYTE                    */
*      4 TCBMOD91 BIT(1),            /* - BOTH TESTRAN AND DECIMAL
*                                       SIMULATOR ON A MOD 91        */
*      4 TCBNOCHK BIT(1),            /* - SUPPRESS TAKING
*                                       CHECKPOINTS FOR THIS STEP
*                                       (JOB STEP TCB)               */
*      4 TCBGRPH  BIT(1),            /* - GRAPHICS FOREGROUND JOB OR
*                                       GRAPHIC JOB PROCESSOR        */
*      4 TCBRSV01 BIT(1),            /* RESERVED                     */
*      4 TCBTCPP  BIT(1),            /* - TCAM POST-PENDING  (RORI)  */
*      4 TCBTCP   BIT(1),            /* - TEST TASK - USED BY TEST
*                                       SVC                          */
*      4 TCBOLTEP BIT(1),            /* OLTEP FUNCTIONS REQUIRE
*                                       CLEAN-UP BEFORE ABNORMAL
*                                       TERMINATION CAN BE INVOKED   */
*      4 TCBRSV02 BIT(1),            /* RESERVED                     */
*     3 TCBTRNB  PTR(24),            /* ADDR OF CONTROL CORE TABLE   */
*    2 TCBMSS   PTR(31),             /* ADDR OF THE BOUNDARY BOX
*                                       (AOS/1) ADDR OF LAST SPQE
*                                       ON MSS QUEUE (AOS/2)         */
*     3 TCBRSV03 PTR(8),             /* ** TCBNROC  FIELD UNUSED
*                                       IN AOS **                    */
*     3 TCBMSSB  PTR(24),            /* ADDR OF THE BOUNDARY BOX
*                                       (AOS/1) ADDR OF LAST SPQE
*                                       ON MSS QUEUE (AOS/2)         */
*    2 TCBPKF   CHAR(1),             /* STORAGE PROTECTION KEY       */
*     3 TCBFLAG  BIT(4),             /* - PROTECTION KEY             */
*     3 TCBZERO  BIT(4),             /* - ZERO                       */
*    2 TCBFLGS  CHAR(5),             /* FLAGS                        */
*     3 TCBFLGS1 CHAR(1),            /* FIRST TCB FLAG BYTE          */
*      4 TCBFA    BIT(1),            /* - ABNORMAL TERMINATION IN
*                                       PROGRESS                     */
*      4 TCBFE    BIT(1),            /* - NORMAL TERMINATION IN
*                                       PROGRESS                     */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBA1;
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBA1A;
*      4 TCBABTRM BIT(1),            /* ABEND INITIATED BY RESIDENT
*                                       ABTERM  (AOS/1)              */
*      4 TCBRSV04 BIT(1),            /* RESERVED                     */
*      4 TCBDMPA  BIT(1),            /* BIT ON INDICATES THIS TASK IS
*                                       USING THE DUMP AREA.  FREEMAIN
*                                       VALIDITY CHECK ALLOWS TASK TO
*                                       FREEMAIN PROBLEM PROGRAM
*                                       STORAGE INTO DUMP AREA, THUS
*                                       ALLOWING A JOBSTEP TO OBTAIN
*                                       A DUMP IF REQUESTED EVEN IF
*                                       NOT ENOUGH STORAGE IS IN THE
*                                       PARTITION.  (AOS/1)    ICB440*/
*      4 TCBPOOL  BIT(1),            /* ABEND SVRB POOL HAS BEEN
*                                       ASSIGNED TO THIS TASK (AOS/1)
*                                       (ICBI # 383)            35198*/
*%GOTO TCBA2;
*%TCBA1A : ;
*      4 TCBFERA  BIT(1),            /* ENTER ABEND ERASE ROUTINE
*                                       WHEN IN CONTROL AGAIN (AOS/2)*/
*       5 *        BIT(1),           /* TCBABTRM - ABEND INITIATED BY
*                                       RESIDENT ABTERM (AOS/1)      */
*      4 TCBRSV04 BIT(1),            /* RESERVED                     */
*      4 TCBPDUMP BIT(1),            /* PREVENT DUMP INDICATOR
*                                       (AOS/2)                      */
*       5 TCBDMPA  BIT(1),           /* BIT ON INDICATES THIS TASK IS
*                                       USING THE DUMP AREA.  FREEMAIN
*                                       VALIDITY CHECK ALLOWS TASK TO
*                                       FREEMAIN PROBLEM PROGRAM
*                                       STORAGE INTO DUMP AREA, THUS
*                                       ALLOWING A JOBSTEP TO OBTAIN
*                                       A DUMP IF REQUESTED EVEN IF
*                                       NOT ENOUGH STORAGE IS IN THE
*                                       PARTITION.  (AOS/1)    ICB440*/
*      4 TCBFT    BIT(1),            /* TOP TASK IN TREE BEING
*                                       ABTERMED  (AOS/2)            */
*       5 TCBPOOL  BIT(1),           /* ABEND SVRB POOL HAS BEEN
*                                       ASSIGNED TO THIS TASK (AOS/1)
*                                       (ICBI # 383)            35198*/
*%GOTO TCBA2;
*%TCBA1 : ;
*      4 TCBFERA  BIT(1),            /* ENTER ABEND ERASE ROUTINE
*                                       WHEN IN CONTROL AGAIN (AOS/2)*/
*      4 TCBRSV04 BIT(1),            /* RESERVED               ICB402*/
*      4 TCBPDUMP BIT(1),            /* PREVENT DUMP INDICATOR
*                                       (AOS/2)                      */
*      4 TCBFT    BIT(1),            /* TOP TASK IN TREE BEING
*                                       ABTERMED  (AOS/2)            */
*%TCBA2 : ;
*      4 TCBFS    BIT(1),            /* - ABTERM DUMP COMPLETED
*                                       (AOS/2)  ABEND OVERLAID
*                                       PROBLEM PROGRAM STORAGE
*                                       (AOS/1)                      */
*      4 TCBFX    BIT(1),            /* - PROHIBIT ASYNCHRONOUS EXIT
*                                       QUEUEING                     */
*     3 TCBFLGS2 CHAR(1),            /* SECOND FLAG BYTE             */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBA3;
*      4 TCBSYSTK BIT(1),            /* ABEND PROHIBITED FOR THIS
*                                       SYSTEM TASK  (AOS/1)         */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBA4;
*       5 TCBFOINP BIT(1),           /* A VALUE OF 1 INDICATES THAT
*                                       THE TASK IS ABENDING AND IS
*                                       IN THE PROCESS OF (1) OPEN
*                                       FOR DUMP DATA SET PROCESSING,
*                                       (2) CLOSE FOR USER DATA SET
*                                       OR (3) PURGE FOR ENQ'ED
*                                       RESOURCES.  THIS BIT IS USED
*                                       IN CONJUNCTION WITH TCBSTACK.
*                                       (AOS/2)                ICB374*/
*%GOTO TCBA4;
*%TCBA3 : ;
*      4 TCBFOINP BIT(1),            /* A VALUE OF 1 INDICATES THAT
*                                       THE TASK IS ABENDING AND IS
*                                       IN THE PROCESS OF (1) OPEN
*                                       FOR DUMP DATA SET PROCESSING,
*                                       (2) CLOSE FOR USER DATA SET
*                                       OR (3) PURGE FOR ENQ'ED
*                                       RESOURCES.  THIS BIT IS USED
*                                       IN CONJUNCTION WITH TCBSTACK.
*                                       (AOS/2)                ICB374*/
*%TCBA4 : ;
*      4 TCBFSTI  BIT(1),            /* - SECOND JOB STEP INTERVAL
*                                       HAS EXPIRED (AOS/2 INITIATOR
*                                       TCB)                         */
*      4 TCBFABOP BIT(1),            /* A VALUE OF 1 INDICATES THAT
*                                       THE SYSABEND DUMP DATA SET
*                                       HAS BEEN OPENED FOR ABEND.
*                                       A VALUE OF 0 INDICATES THAT
*                                       THE SYSUDUMP DUMP DATA SET
*                                       WAS OPENED.  THIS BIT IS ONLY
*                                       USED FOR THE JOB STEP TCB AND
*                                       IS USED IN CONJUNCTION WITH
*                                       TCBFDSOP BIT.  (OS/VS2)
*                                       (ICB482)               YM0651*/
*      4 TCBFSMC  BIT(1),            /* - TASK HAS ISSUED SYSTEM
*                                       MUST COMPLETE AND SET ALL
*                                       OTHER TASKS IN THE SYSTEM
*                                       NONDISPATCHABLE              */
*      4 TCBFJMC  BIT(1),            /* - TASK HAS ISSUED STEP MUST
*                                       COMPLETE AND TURNED OFF ALL
*                                       OTHER TASKS IN THE STEP      */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBA5;
*      4 TCBFDSOP BIT(1),            /* SYSABEND OPEN FOR JOBSTEP
*                                       (AOS/2)                      */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBA6;
*       5 TCBRSV50 BIT(1),           /* RESERVED  (AOS/1)      ICB456*/
*%GOTO TCBA6;
*%TCBA5 : ;
*      4 TCBRSV50 BIT(1),            /* RESERVED  (AOS/1)      ICB456*/
*%TCBA6 : ;
*      4 TCBFETXR BIT(1),            /* - ETXR TO BE SCHEDULED       */
*      4 TCBFTS   BIT(1),            /* - MEMBER OF TIME-SLICING
*                                       GROUP                        */
*     3 TCBFLGS3 CHAR(1),            /* THIRD FLAG BYTE              */
*      4 TCBFSM   BIT(1),            /* - ALL PSW'S IN SUPERVISOR
*                                       STATE (AOS/2)                */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBA7;
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBA7A;
*      4 TCBRSV51 BIT(1),            /* RESERVED (AOS/1)             */
*      4 TCBSYSER BIT(1),            /* EXIT EFFECTOR--SYSTEM ERROR
*                                       ROUTINES OPERATING FOR THIS
*                                       TASK  (AOS/1)                */
*      4 TCBRSV52 BIT(1),            /* RESERVED  (AOS/1)            */
*      4 TCBFLREG BIT(1),            /* FLOATING POINT REGISTERS
*                                       EXIST  (AOS/1)               */
*      4 TCBSCHAB BIT(1),            /* BIT ON INDICATES SCHEDULER
*                                       HAS ABENDED,  ABEND
*                                       PROCESSING HAS COMPLETED
*                                       AND THE SCHEDULER HAS BEEN
*                                       RE-ENTERED  (AOS/1)
*                                       (ICB465)               XM4931*/
*      4 TCBPKCHG BIT(1),            /* XCTL IS CHANGING PROTECT KEY
*                                       IN PSW FROM ZERO TO THAT
*                                       USED BY PROBLEM PROGRAM
*                                       (AOS/1)                      */
*      4 TCBRSV53 BIT(1),            /* RESERVED  (AOS/1)      ICB456*/
*%GOTO TCBA8;
*%TCBA7A : ;
*      4 TCBADINP BIT(1),            /* USED IN CONJUNCTION WITH
*                                       TCBONDSP.  FLAG INDICATING
*                                       THAT ABDUMP IS CURRENTLY
*                                       PROCESSING FOR SOME TASK IN
*                                       JOB STEP.  A HIGHER LEVEL
*                                       TASK IS NOT ALLOWED TO ENTER
*                                       MAINLINE ABEND PROCESSING IF
*                                       THIS BIT IS SET IN JOB STEP
*                                       TCB UNLESS JOB STEP TASK IS
*                                       FAILING.  BIT SET ONLY IN JOB
*                                       STEP TCB AND TASK INVOKING
*                                       ABDUMP.  (AOS/2)             */
*       5 TCBRSV51 BIT(1),           /* RESERVED (AOS/1)             */
*      4 TCBABTRM BIT(1),            /* - ABTERM BIT TO PREVENT
*                                       MULTIPLE ABENDS  (AOS/2)     */
*       5 TCBSYSER BIT(1),           /* EXIT EFFECTOR--SYSTEM ERROR
*                                       ROUTINES OPERATING FOR THIS
*                                       TASK  (AOS/1)                */
*      4 TCBABGM  BIT(1),            /* GETMAIN IS TO DEFAULT LSQA
*                                       REQUESTS TO SQA REQUESTS WHEN
*                                       REQUEST CANNOT BE SATISFIED
*                                       FROM LSQA  (AOS/2)           */
*       5 TCBRSV52 BIT(1),           /* RESERVED (AOS/1)             */
*      4 TCBRSV06 BIT(1),            /* RESERVED  (AOS/2)            */
*       5 TCBFLREG BIT(1),           /* FLOATING POINT REGISTERS
*                                       EXIST  (AOS/1)               */
*      4 TCBRSV07 BIT(1),            /* RESERVED  (AOS/2)            */
*       5 TCBSCHAB BIT(1),           /* BIT ON INDICATES SCHEDULER
*                                       HAS ABENDED,  ABEND
*                                       PROCESSING HAS COMPLETED
*                                       AND THE SCHEDULER HAS BEEN
*                                       RE-ENTERED  (AOS/1)
*                                       (ICB465)               XM4931*/
*      4 TCBRSV08 BIT(1),            /* RESERVED  (AOS/2)            */
*       5 TCBPKCHG BIT(1),           /* XCTL IS CHANGING PROTECT KEY
*                                       IN PSW FROM ZERO TO THAT
*                                       USED BY PROBLEM PROGRAM
*                                       (AOS/1)                      */
*      4 TCBDWSTA BIT(1),            /* TASK WAS DETATCHED WITH
*                                       STAE=YES OPTION (AOS/2)ICB315*/
*       5 TCBRSV53 BIT(1),           /* RESERVED (AOS/1)       ICB456*/
*%GOTO TCBA8;
*%TCBA7 : ;
*      4 TCBADINP BIT(1),            /* USED IN CONJUNCTION WITH
*                                       TCBONDSP.  FLAG INDICATING
*                                       THAT ABDUMP IS CURRENTLY
*                                       PROCESSING FOR SOME TASK IN
*                                       JOB STEP.  A HIGHER LEVEL
*                                       TASK IS NOT ALLOWED TO ENTER
*                                       MAINLINE ABEND PROCESSING IF
*                                       THIS BIT IS SET IN JOB STEP
*                                       TCB UNLESS JOB STEP TASK IS
*                                       FAILING.  BIT SET ONLY IN JOB
*                                       STEP TCB AND TASK INVOKING
*                                       ABDUMP.  (AOS/2)             */
*      4 TCBABTRM BIT(1),            /* - ABTERM BIT TO PREVENT
*                                       MULTIPLE ABENDS  (AOS/2)     */
*      4 TCBABGM  BIT(1),            /* GETMAIN IS TO DEFAULT LSQA
*                                       REQUESTS TO SQA REQUESTS WHEN
*                                       REQUEST CANNOT BE SATISFIED
*                                       FROM LSQA  (AOS/2)           */
*      4 TCBRSV06 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBRSV07 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBRSV08 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBDWSTA BIT(1),            /* TASK WAS DETATCHED WITH
*                                       STAE=YES OPTION (AOS/2)ICB315*/
*%TCBA8 : ;
*     3 TCBFLGS4 CHAR(1),            /* NONDISPATCHABILITY FLAGS
*                                       (AOS/2)                      */
*      4 TCBNDUMP BIT(1),            /* - ABDUMP NON-DISP. INDICATOR */
*      4 TCBSER   BIT(1),            /* - SER1 NON-DISP. INDICATOR   */
*      4 TCBRQENA BIT(1),            /* - I/O RQE'S EXHAUSTED        */
*      4 TCBHNDSP BIT(1),            /* TASK OR JOB STEP IS
*                                       MOMENTARILY 'FROZEN' UNTIL
*                                       THE REQUIRED RESOURCES ARE
*                                       AVAILABLE.  THE BIT IS SET
*                                       THROUGH THE USE OF THE
*                                       'STATUS' SVC.          ICB453*/
*      4 TCBUXNDV BIT(1),            /* - TASK IS TEMPORARILY
*                                       NON-DISPATCHABLE BECAUSE SMF
*                                       TIME LIMIT OR SYSOUT LIMIT
*                                       USER EXIT ROUTINE IS BEING
*                                       EXECUTED FOR THIS STEP       */
*      4 TCBMPCVQ BIT(1),            /* - VARY OR QUIESCE IN
*                                       MULTIPROCESSING SYSTEM       */
*      4 TCBMPCND BIT(1),            /* - M65 MULTIPROCESSING
*                                       NON-DISP. INDICATOR FOR ALL
*                                       CPU'S                        */
*      4 TCBONDSP BIT(1),            /* TASK TERMINATING AND
*                                       NONDISPATCHABLE BECAUSE
*                                       EITHER OPEN FOR DUMP DATA
*                                       SET IS IN PROCESS OR CLOSE
*                                       BY ABEND IS IN PROCESS       */
*     3 TCBFLGS5 CHAR(1),            /* MORE NONDISPATCHABILITY
*                                       FLAGS                        */
*      4 TCBFC    BIT(1),            /* - TASK TERMINATED (AOS/2)    */
*      4 TCBABWF  BIT(1),            /* - ABNORMAL WAIT  (AOS/2)     */
*       5 TCBUXNDF BIT(1),           /* TASK IS TEMPORARILY
*                                       NONDISPATCHABLE BECAUSE SMF
*                                       TIME LIMIT OR SYSOUT LIMIT
*                                       USER EXIT ROUTINE IS BEING
*                                       EXECUTED FOR THIS STEP.  THIS
*                                       BIT IS ONE IN ALL TCB'S FOR
*                                       STEP EXCEPT JOB STEP TCB.
*                                       (AOS/1)                ICB263*/
*      4 TCBPAGE  BIT(1),            /* TASK NONDISPATCHABLE DUE TO
*                                       EXCESSIVE PAGING RATE        */
*      4 TCBANDSP BIT(1),            /* TASK NONDISPATCHABLE
*                                       TEMPORARILY BECAUSE ATTACHED
*                                       WITH DISP=NO OPERAND         */
*      4 TCBSYS   BIT(1),            /* - ANOTHER TASK IS IN SYSTEM
*                                       MUST COMPLETE STATUS OR A
*                                       SUMMARY BIT FOR FIELD
*                                       TCBSYSCT  (AOS/2)            */
*      4 TCBSTP   BIT(1),            /* - ANOTHER TASK IN JS IS IN
*                                       STEP MUST COMPLETE STATUS
*                                       (AOS/2)                      */
*      4 TCBFCD1  BIT(1),            /* - INITIATOR WAITING FOR
*                                       REGION   (AOS/2)             */
*      4 TCBPNDSP BIT(1),            /* - PRIMARY NONDISPATCHABILITY
*                                       FLAG                         */
*    2 TCBLMP   PTR(8),              /* TASK LIMIT PRIORITY (AOS/2)
*                                       ENQUEUE COUNT (AOS/1)        */
*    2 TCBDSP   PTR(8),              /* DISPATCHING PRIORITY         */
*    2 TCBLLS   PTR(31),             /* ADDR OF LAST LLE IN LOAD
*                                       LIST (AOS/2) ADDR OF LAST RB
*                                       FOR PROGRAM LOADED VIA LOAD
*                                       (AOS/1)                      */
*    2 TCBJLB   PTR(31),             /* ADDR OF JOBLIB DCB           */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBB1;
*    2 TCBFTJST PTR(31),             /* ADDRESS OF FIRST TCB FOR
*                                       JOBSTEP  (AOS/1)             */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBB2;
*     3 TCBJPQ   PTR(31),            /* ADDR OF LAST CDE FOR JPA
*                                       CONTROL QUEUE  (AOS/2)       */
*%GOTO TCBB2;
*%TCBB1 : ;
*    2 TCBJPQ   PTR(31),             /* ADDR OF LAST CDE FOR JPA
*                                       CONTROL QUEUE  (AOS/2)       */
*%TCBB2 : ;
*      4 TCBPURGE CHAR(1),           /* PURGE FLAGS (AOS/2)          */
*       5 TCBJPQF  BIT(1),           /* - JPQ PURGE FLAG             */
*       5 TCBRSV09 BIT(1),           /* RESERVED                     */
*       5 TCBRSV10 BIT(1),           /* RESERVED                     */
*       5 TCBRSV11 BIT(1),           /* RESERVED                     */
*       5 TCBRSV12 BIT(1),           /* RESERVED                     */
*       5 TCBRSV13 BIT(1),           /* RESERVED                     */
*       5 TCBRSV14 BIT(1),           /* RESERVED                     */
*       5 TCBRSV15 BIT(1),           /* RESERVED                     */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBB3;
*      4 TCBFTJSA PTR(24),           /* ADDRESS OF FIRST TCB FOR
*                                       JOBSTEP  (AOS/1)             */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBB4;
*       5 TCBJPQB  PTR(24),          /* ADDRESS OF LAST CDE FOR JPA
*                                       CONTROL QUEUE  (AOS/2)       */
*%GOTO TCBB4;
*%TCBB3 : ;
*      4 TCBJPQB  PTR(24),           /* ADDRESS OF LAST CDE FOR JPA
*                                       CONTROL QUEUE  (AOS/2)       */
*%TCBB4 : ;
*    2 TCBGRS   CHAR(64)  BDY(WORD), /* GENERAL REGISTER SAVE AREA   */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBB4B;
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBB4A;
* /* THE FOLLOWING REGISTER MAPPING APPLIES TO AOS/2.                */
* /* AOS/1 SAVES REGISTERS IN THE ORDER TCBGRS10-TCBGRS9.            */
*%TCBB4A : ;
*     3 TCBGRS0  PTR(31),            /* SAVE AREA FOR REGISTER 0     */
*     3 TCBGRS1  PTR(31),            /* SAVE AREA FOR REGISTER 1     */
*     3 TCBGRS2  PTR(31),            /* SAVE AREA FOR REGISTER 2     */
*     3 TCBGRS3  PTR(31),            /* SAVE AREA FOR REGISTER 3     */
*     3 TCBGRS4  PTR(31),            /* SAVE AREA FOR REGISTER 4     */
*     3 TCBGRS5  PTR(31),            /* SAVE AREA FOR REGISTER 5     */
*     3 TCBGRS6  PTR(31),            /* SAVE AREA FOR REGISTER 6     */
*     3 TCBGRS7  PTR(31),            /* SAVE AREA FOR REGISTER 7     */
*     3 TCBGRS8  PTR(31),            /* SAVE AREA FOR REGISTER 8     */
*     3 TCBGRS9  PTR(31),            /* SAVE AREA FOR REGISTER 9     */
*     3 TCBGRS10 PTR(31),            /* SAVE AREA FOR REGISTER 10    */
*     3 TCBGRS11 PTR(31),            /* SAVE AREA FOR REGISTER 11    */
*     3 TCBGRS12 PTR(31),            /* SAVE AREA FOR REGISTER 12    */
*     3 TCBGRS13 PTR(31),            /* SAVE AREA FOR REGISTER 13    */
*     3 TCBGRS14 PTR(31),            /* SAVE AREA FOR REGISTER 14    */
*     3 TCBGRS15 PTR(31),            /* SAVE AREA FOR REGISTER 15    */
*%GOTO TCBB4C;
*%TCBB4B : ;
*     3 TCBGRS10 PTR(31),            /* SAVE AREA FOR REGISTER 10    */
*     3 TCBGRS11 PTR(31),            /* SAVE AREA FOR REGISTER 11    */
*     3 TCBGRS12 PTR(31),            /* SAVE AREA FOR REGISTER 12    */
*     3 TCBGRS13 PTR(31),            /* SAVE AREA FOR REGISTER 13    */
*     3 TCBGRS14 PTR(31),            /* SAVE AREA FOR REGISTER 14    */
*     3 TCBGRS15 PTR(31),            /* SAVE AREA FOR REGISTER 15    */
*     3 TCBGRS0  PTR(31),            /* SAVE AREA FOR REGISTER 0     */
*     3 TCBGRS1  PTR(31),            /* SAVE AREA FOR REGISTER 1     */
*     3 TCBGRS2  PTR(31),            /* SAVE AREA FOR REGISTER 2     */
*     3 TCBGRS3  PTR(31),            /* SAVE AREA FOR REGISTER 3     */
*     3 TCBGRS4  PTR(31),            /* SAVE AREA FOR REGISTER 4     */
*     3 TCBGRS5  PTR(31),            /* SAVE AREA FOR REGISTER 5     */
*     3 TCBGRS6  PTR(31),            /* SAVE AREA FOR REGISTER 6     */
*     3 TCBGRS7  PTR(31),            /* SAVE AREA FOR REGISTER 7     */
*     3 TCBGRS8  PTR(31),            /* SAVE AREA FOR REGISTER 8     */
*     3 TCBGRS9  PTR(31),            /* SAVE AREA FOR REGISTER 9     */
*%TCBB4C : ;
*    2 TCBFSA   PTR(31),             /* ADDR OF FIRST PROBLEM
*                                       PROGRAM SAVE AREA            */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBB5;
*     3 TCBIDF   CHAR(1),            /* TCB IDENTIFIER FIELD (AOS/1) */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBB6;
*      4 TCBQEL   PTR(8),            /* ENQUEUE COUNT  (AOS/2)       */
*%GOTO TCBB6;
*%TCBB5 : ;
*     3 TCBQEL   PTR(8),             /* ENQUEUE COUNT  (AOS/2)       */
*%TCBB6 : ;
*     3 TCBFSAB  PTR(24),            /* ADDR OF FIRST PROBLEM
*                                       PROGRAM SAVE AREA            */
*    2 TCBTCB   PTR(31),             /* ADDR OF NEXT LOWER PRIRTITY
*                                       TCB ON READY QUEUE           */
*    2 TCBTME   PTR(31),             /* ADDRESS OF TIMER QUEUE
*                                       ELEMENT                      */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBB7;
*    2 TCBPIB   PTR(31),             /* ADDRESS OF PARTITION
*                                       INFORMATION BLOCK  (AOS/1)   */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBB7A;
*     3 TCBJSTCB PTR(31),            /* ADDRESS OF FIRST JOBSTEP TCB
*                                       OR OF THIS TCB IF KEY ZERO
*                                       (AOS/2)                      */
*%TCBB7A : ;
*      4 TCBPIBT  CHAR(1),           /* PARTITION TYPE  (AOS/1)      */
*       5 TCBPART  BIT(2),           /* - PARTITION FLAG BITS (AOS/1)*/
* %DCL TCBPP    CHAR;
* %TCBPP   ='''11''B';               /* PROCESSING PROGRAM PARTITION */
* %DCL TCBSYSP  CHAR;
* %TCBSYSP ='''00''B';               /* SYSTEM TASK PARTITION        */
*       5 TCBSIZE  BIT(1),           /* - LARGE PARTITION (1)--SMALL
*                                       PARTITION (0)                */
*       5 TCBSTOP  BIT(1),           /* - CPU TIMING STOPPED BY
*                                       FINCH  UNTIL TRANSIENT
*                                       LOADED                       */
*       5 TCBRSV54 BIT(1),           /* RESERVED                     */
*       5 TCBSCHTI BIT(1),           /* BIT ON INDICATES THAT THE
*                                       SCHEDULER HAS SET THE TCBTIO
*                                       FIELD TO POINT TO THE
*                                       INITIATOR'S TIOT.  IT ONLY
*                                       HAS MEANING WHEN BIT TCBSCHED
*                                       IS ON.  (ICB489)       XM8572*/
*       5 TCBWRITE BIT(1),           /* INDICATES TO ABEND THAT THIS
*                                       IS A READER OR WRITER
*                                       TASK                   ICB422*/
*       5 TCBSCHED BIT(1),           /* - SCHEDULER IN CONTROL -
*                                       USED BY ABEND - TURNED OFF
*                                       WHEN TIOT WRITTEN TO JOB
*                                       QUEUE                        */
*      4 TCBPIBA  PTR(24),           /* ADDRESS OF PARTITION
*                                       INFORMATION BLOCK  (AOS/1)   */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBB8;
*       5 TCBJSTCA PTR(24),          /* ADDRESS OF FIRST JOBSTEP TCB
*                                       OR OF THIS TCB IF KEY ZERO
*                                       (AOS/2)                      */
*%GOTO TCBB8;
*%TCBB7 : ;
*    2 TCBJSTCB PTR(31),             /* ADDRESS OF FIRST JOBSTEP TCB
*                                       OR OF THIS TCB IF KEY ZERO
*                                       (AOS/2)                      */
*     3 TCBRSV16 PTR(8),             /* RESERVED                     */
*     3 TCBJSTCA PTR(24),            /* ADDRESS OF FIRST JOBSTEP TCB
*                                       OR OF THIS TCB IF KEY ZERO
*                                       (AOS/2)                      */
*%TCBB8 : ;
*    2 TCBNTC   PTR(31),             /* ADDR OF NEXT SISTER TCB
*                                       (ZERO IF THIS IS LAST
*                                       SUBTASK)                     */
*    2 TCBOTC   PTR(31),             /* ADDR OF MOTHER TCB           */
*    2 TCBLTC   PTR(31),             /* ADDR OF LAST DAUGHTER TCB
*                                       (ZERO IF THIS IS IT)         */
*    2 TCBIQE   PTR(31),             /* ADDR OF IQE FOR EXTR
*                                       SCHEDULING                   */
*    2 TCBECB   PTR(31),             /* ADDR OF ECB TO BE POSTED
*                                       UPON TERMINATION             */
*    2 TCBTSFLG BIT(8),              /* TIME SHARING FLAGS           */
*     3 TCBTSTSK BIT(1),             /* - SWAPPED TS TASK            */
*     3 TCBSTPPR BIT(1),             /* - TASK SHOULD BE MADE NDSP
*                                       VIA TCBSTPP WHEN IT IS NO
*                                       LONGER RUNNING A PRIVILEGED
*                                       PGM                          */
*     3 TCBATT   BIT(1),             /* - TASK SHOULD NOT HAVE
*                                       ATTENTION EXITS SCHEDULED ON
*                                       IT BY EXIT EFFECTOR          */
*     3 TCBTIOTG BIT(1),             /* - PURGE TGET/TPUT AFTER
*                                       ATTENTION                    */
*     3 TCBRSV17 BIT(1),             /* RESERVED                     */
*     3 TCBRSV18 BIT(1),             /* RESERVED                     */
*     3 TCBDYDSP BIT(1),             /* M195 TASK IS MEMBER OF
*                                       DYNAMIC DISPATCHING
*                                       GROUP                  ICB262*/
*     3 TCBCPUBN BIT(1),             /* FOR M195, ZERO MEANS I/O
*                                       BOUND AND ONE MEANS CPU
*                                       BOUND                  ICB262*/
*    2 TCBSTPCT PTR(8),              /* NUMBER OF SETTASK STARTS
*                                       WHICH MUST BE ISSUED BEFORE
*                                       TASK IS MADE DISPATCHABLE -
*                                       FIELD NOT RESTRICTED TO TSO  */
*    2 TCBTSLP  PTR(8),              /* LIMIT PRIORITY OF TS TASK    */
*    2 TCBTSDP  CHAR(1),             /* DISPATCHING PRIORITY OF TS
*                                       TASK                         */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBC1;
*    2 TCBPQE   PTR(31),             /* POINTER TO DPQE MINUS 8 FOR
*                                       THE JOB STEP (AOS/2)         */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBC2;
*     3 TCBFTLMP PTR(8),             /* TASK LIMIT PRIORITY (AOS/1)  */
*     3 TCBFTFLG CHAR(3),            /* ABEND FLAGS (AOS/1)          */
*%GOTO TCBC1A;
*%TCBC1 : ;
*    2 TCBFTLMP PTR(8),              /* TASK LIMIT PRIORITY (AOS/1)  */
*    2 TCBFTFLG CHAR(3),             /* ABEND FLAGS (AOS/1)          */
*%TCBC1A : ;
*      4 TCBFTFL1 CHAR(1),           /* ABEND FLAGS (AOS/1)          */
*       5 TCBRSV56 BIT(1),           /* RESERVED                     */
*       5 TCBRSV57 BIT(1),           /* RESERVED                     */
*       5 TCBRSV58 BIT(1),           /* RESERVED                     */
*       5 TCBRSV59 BIT(1),           /* RESERVED                     */
*       5 TCBRSV60 BIT(1),           /* RESERVED                     */
*       5 TCBFTTOP BIT(1),           /* THIS IS TOP TASK IN TREE
*                                       BEING ABTERMED         ICB422*/
*       5 TCBFTCOM BIT(1),           /* - ABTERM DUMP SUCCESSFULLY
*                                       COMPLETED                    */
*       5 TCBENQ   BIT(1),           /* INDICATES TO ABEND THAT TASK
*                                       IS ENQUEUED ON DUMP DATA
*                                       SET                    ICB422*/
*      4 TCBFTFL2 CHAR(1),           /* ABEND FLAGS (AOS/1)          */
*       5 TCBRSV61 BIT(1),           /* RESERVED                     */
*       5 TCBRSV62 BIT(1),           /* RESERVED                     */
*       5 TCBRSV63 BIT(1),           /* RESERVED                     */
*       5 TCBRSV64 BIT(1),           /* RESERVED                     */
*       5 TCBRSV65 BIT(1),           /* RESERVED                     */
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBC2X;
*       5 TCBFDSOP BIT(1),           /* INDICATES TO ABEND THAT DUMP
*                                       DATA SET IS OPEN FOR JOB
*                                       STEP                   ICB422*/
*%GOTO TCBC2Y;
*%TCBC2X : ;
*       5 *        BIT(1),           /* TCBFDSOP - INDICATES TO ABEND
*                                       THAT DUMP DATA SET IS OPEN
*                                       FOR JOB STEP           ICB422*/
*%TCBC2Y : ;
*       5 TCBSYSAB BIT(1),           /* INDICATES TO ABEND THAT
*                                       EITHER THE SYSABEND DATA SET
*                                       (BIT=1) OR THE SYSUDUMP DATA
*                                       SET (BIT=0) IS BEING USED
*                                                              ICB422*/
*       5 TCBRSV66 BIT(1),           /* RESERVED                     */
*      4 TCBFTFL3 CHAR(1),           /* ABEND FLAGS (AOS/1)          */
*       5 TCBRSV67 BIT(1),           /* RESERVED                     */
*       5 TCBRSV68 BIT(1),           /* RESERVED                     */
*       5 TCBRSV69 BIT(1),           /* RESERVED                     */
*       5 TCBRSV70 BIT(1),           /* RESERVED                     */
*       5 TCBRSV71 BIT(1),           /* RESERVED                     */
*       5 TCBFTDUM BIT(1),           /* - NO ABTERM DUMPS MAY BE
*                                       PROVIDED IN THIS STEP        */
*       5 TCBRSV72 BIT(1),           /* RESERVED                     */
*       5 TCBRSV73 BIT(1),           /* RESERVED                     */
*%TCBC2 : ;
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBC2F;
*    2 TCBAQE   PTR(31),             /* LIST ORIGIN OF AQE(S) FOR
*                                       THIS TASK (AOS/2)            */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBC2G;
*     3 TCBDDRTI FIXED(31),          /* AMOUNT OF TIME REMAINING IN
*                                       TASK'S DYNAMIC DISPATCH TIME
*                                       SLICE  (AOS/1)         ICB465*/
*%GOTO TCBC2G;
*%TCBC2F : ;
*    2 TCBDDRTI FIXED(31),           /* AMOUNT OF TIME REMAINING IN
*                                       TASK'S DYNAMIC DISPATCH TIME
*                                       SLICE  (AOS/1)         ICB465*/
*%TCBC2G : ;
*    2 TCBSTAB  PTR(31),             /* ADDR OF STAE CONTROL BLOCK   */
*     3 TCBNSTAE CHAR(1),            /* STAE FLAGS                   */
*      4 TCBSTABE BIT(1),            /* - ABEND ENTERED BECAUSE OF
*                                       ERROR IN STAE PROC           */
*      4 TCBQUIES BIT(1),            /* - STAE INVOKED PURGE I/O
*                                       ROUTINE WITH QUIESCE I/O
*                                       OPTION                       */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBC2A;
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBC2B;
*      4 TCB33E   BIT(1),            /* - A 33E ABEND HAS OCCURRED
*                                       FOR TASK  (AOS/2)            */
*      4 TCBRSV19 BIT(1),            /* RESERVED  (AOS/2)      ICB443*/
*      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT
*                                       SUCCESSFULLY QUIESCE I/O BUT
*                                       I/O WAS HALTED               */
*      4 TCBSYNCH BIT(1),            /* - SYNCH ISSUED BY ASIR TO
*                                       SCHEDULE EXIT ROUTINE (AOS/2)*/
*      4 TCBNPURG BIT(1),            /* - VALID RETRY WITHOUT AN
*                                       RB PURGE  (AOS/2)            */
*      4 TCBSTCUR BIT(1),            /* STAE RECURSION VALID (AOS/2)
*                                                              ICB443*/
*%GOTO TCBC2C;
*%TCBC2A : ;
*      4 TCBXCTL  BIT(1),            /* - CURRENT SCB HAS XCTL=YES
*                                       OPTION  (AOS/1)              */
*      4 TCBSCAT  BIT(1),            /* - SCB WAS CREATED BY A
*                                       PROGRAM THAT IS SCATTER
*                                       LOADED  (AOS/1)              */
*      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT
*                                       SUCCESSFULLY QUIESCE I/O BUT
*                                       I/O WAS HALTED               */
*      4 TCBSUPER BIT(1),            /* - PROGRAM USING STAE IS IN
*                                       SUPERVISOR MODE  (AOS/1)     */
*      4 TCBRETRY BIT(1),            /* - STAE USER REQUESTED THAT A
*                                       RETRY ROUTINE BE SCHEDULED
*                                       BUT THAT THE RB CHAIN NOT BE
*                                       PURGED  (AOS/1)              */
*      4 TCBVALID BIT(1),            /* - RETRY ROUTINE AND
*                                       PARAMETER LIST ADDRESSES ARE
*                                       VALID  (AOS/1)               */
*%GOTO TCBC2C;
*%TCBC2B : ;
*      4 TCBXCTL  BIT(1),            /* - CURRENT SCB HAS XCTL=YES
*                                       OPTION  (AOS/1)              */
*       5 TCB33E   BIT(1),           /* - A 33E ABEND HAS OCCURRED
*                                       FOR TASK  (AOS/2)            */
*      4 TCBSCAT  BIT(1),            /* - SCB WAS CREATED BY A
*                                       PROGRAM THAT IS SCATTER
*                                       LOADED  (AOS/1)              */
*       5 TCBRSV19 BIT(1),           /* RESERVED  (AOS/2)      ICB443*/
*      4 TCBHALT  BIT(1),            /* - PURGE I/O ROUTINE DID NOT
*                                       SUCCESSFULLY QUIESCE I/O BUT
*                                       I/O WAS HALTED               */
*      4 TCBSUPER BIT(1),            /* - PROGRAM USING STAE IS IN
*                                       SUPERVISOR MODE  (AOS/1)     */
*       5 TCBSYNCH BIT(1),           /* - SYNCH ISSUED BY ASIR TO
*                                       SCHEDULE EXIT ROUTINE (AOS/2)*/
*      4 TCBRETRY BIT(1),            /* - STAE USER REQUESTED THAT A
*                                       RETRY ROUTINE BE SCHEDULED
*                                       BUT THAT THE RB CHAIN NOT BE
*                                       PURGED  (AOS/1)              */
*       5 TCBNPURG BIT(1),           /* - VALID RETRY WITHOUT AN
*                                       RB PURGE  (AOS/2)            */
*      4 TCBVALID BIT(1),            /* - RETRY ROUTINE AND
*                                       PARAMETER LIST ADDRESSES ARE
*                                       VALID  (AOS/1)               */
*       5 TCBSTCUR BIT(1),           /* STAE RECURSION VALID (AOS/2)
*                                                              ICB443*/
*%TCBC2C : ;
*     3 TCBSTABB PTR(24),            /* ADDR OF STAE CONTROL BLOCK   */
*    2 TCBTCT   PTR(31),             /* ADDR OF TCT                  */
*     3 TCBTCTGF BIT(8),             /* FLAG BYTE FOR TIMING CONTROL
*                                       TABLE                  ICB318*/
*      4 TCBSMFGF BIT(1),            /* IF ZERO, THE TCT CORE TABLE
*                                       IS NOT BE TO UPDATED BY
*                                       GETMAIN/FREEMAIN.  IF ONE,
*                                       THE TCT CORE TABLE IS TO BE
*                                       UPDATED BY GETMAIN/FREEMAIN.
*                                                              ICB318*/
*      4 TCBRSV20 BIT(1),            /* RESERVED                     */
*      4 TCBRSV97 BIT(1),            /* RESERVED                     */
*      4 TCBRSV98 BIT(1),            /* RESERVED                     */
*      4 TCBRSV99 BIT(1),            /* RESERVED                     */
*      4 TCBRSV9A BIT(1),            /* RESERVED                     */
*      4 TCBRSV9B BIT(1),            /* RESERVED                     */
*      4 TCBRSV9C BIT(1),            /* RESERVED                     */
*     3 TCBTCTB  PTR(24),            /* ADDR OF TCT                  */
*    2 TCBUSER  PTR(31),             /* FIELD AVAILABLE TO THE USER  */
*    2 TCBSCNDY CHAR(4) BDY(WORD),   /* SECONDARY NONDISPATCHABILITY
*                                       FLAGS - (IF ANY BIT IN THESE
*                                       BYTES IS ON, THEN SO IS THE
*                                       PRIMARY NDSP FLAG)           */
*     3 TCBNDSP  CHAR(4) BDY(WORD),  /* SAME AS TCBSCNDY             */
*      4 TCBNDSP0 CHAR(1),           /* BYTE 0                       */
*      4 TCBNDSP1 CHAR(1),           /* BYTE 1                       */
*       5 TCBDARTN BIT(1),           /* - TASK TEMPORARILY
*                                       NONDISPATCHABLE - (DAR)      */
*       5 TCBDARPN BIT(1),           /* - TASK PERMANENTLY
*                                       NONDISPATCHABLE - (DAR)      */
*       5 TCBRSTND BIT(1),           /* - TASK TEMPORARILY
*                                       NONDISPATCHABLE - (RMS/SER)  */
*       5 TCBRSPND BIT(1),           /* - TASK PERMANENTLY
*                                       NONDISPATCHABLE - (RMS/SER)
*                                       (IF THIS FLAG IS ON THEN THE
*                                       PREVIOUS ONE MUST BE TOO)    */
*       5 TCBDDRND BIT(1),           /* TASK IS IN DEVICE ALLOCATION
*                                       AND DYNAMIC DEVICE
*                                       RECONFIGURATION (DDR) HAS
*                                       MADE IT NONDISPATCHABLE      */
*       5 TCBTPSP  BIT(1),           /* DISPATCHING OF TCAM TASK
*                                       MUST BE DELAYED UNTIL TCAM
*                                       I/O APPENDAGE OR SVC ROUTINE
*                                       HAS COMPLETED EXECUTION
*                                       (TCAM IN MULTIPROCESSING
*                                       ENVIRONMENT)                 */
*       5 TCBRSV21 BIT(1),           /* RESERVED                     */
*       5 TCBDPFND BIT(1),           /* TASK IS TEMPORARILY SET
*                                       NON-DISPATCHABLE TO FACILITATE
*                                       DISPATCHING THE OWNER OF THE
*                                       SYSTEM LOCK.  SET TO 1 BY
*                                       PAGING SUPERVISOR.  (OS/VS2)
*                                                             YA00832*/
*      4 TCBNDSP2 CHAR(1),           /* BYTE 2                       */
*       5 TCBABD   BIT(1),           /* - SET BY ABDUMP - (AOS/1)    */
*       5 TCBSTPP  BIT(1),           /* - TASK NDSP BECAUSE STOPPED
*                                       BY SETTASK                   */
*       5 TCBNDSVC BIT(1),           /* - TASK NDSP BECAUSE SVC
*                                       DUMP IS EXECUTING FOR
*                                       ANOTHER TASK                 */
*       5 TCBNDTS  BIT(1),           /* - TASK NDSP BECAUSE BEING
*                                       SWAPPED OUT                  */
*       5 TCBIWAIT BIT(1),           /* - TASK NDSP DUE TO INPUT
*                                       WAIT                         */
*       5 TCBOWAIT BIT(1),           /* - TASK NDSP DUE TO OUTPUT
*                                       WAIT                         */
*       5 TCBDSS   BIT(1),           /* DSS HAS SET THE TASK
*                                       NON-DISPATCHABLE       ICB313*/
*       5 TCBABE   BIT(1),           /* - ABEND ENTERED FOR THIS
*                                       TASK - WHILE SYSABEND DCB
*                                       OPEN FOR ANOTHER TASK (AOS/1)*/
*      4 TCBNDSP3 CHAR(1),           /* BYTE 3                       */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBC3;
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBC3A;
*       5 TCBTERM  BIT(1),           /* TERMINATED (AOS/1)           */
*       5 TCBABTER BIT(1),           /* - TO BE TERMINATED BY ABEND
*                                       -  (AOS/1)                   */
*       5 TCBNDSDA BIT(1),           /* TEMPORARILY NONDISPATCHABLE,
*                                       PARTITION IS DEACTIVATED
*                                       (AOS/1)                ICB357*/
*%GOTO TCBC4;
*%TCBC3A : ;
*       5 TCBLJSND BIT(1),           /* TASK IS ABENDING AND
*                                       NONDISPATCHABLE BECAUSE IT
*                                       HAS A JOB STEP SUBTASK.
*                                       TCBONDSP MUST ALSO BE ON.
*                                       (AOS/2)                      */
*        6 TCBTERM  BIT(1),          /* TERMINATED (AOS/1 WITH
*                                       SUBTASKING                   */
*       5 TCBSTAND BIT(1),           /* TASK HAS BEEN SET
*                                       NONDISPATCHABLE WHILE ASIR
*                                       IS SCHEDULING AN EXIT ROUTINE
*                                       FOR SOME OTHER TASK IN JOB
*                                       STEP  (AOS/2)                */
*        6 TCBABTER BIT(1),          /* - TO BE TERMINATED BY ABEND
*                                       (AOS/1)                      */
*       5 TCBRSV23 BIT(1),           /* RESERVED  (AOS/2)            */
*        6 TCBNDSDA BIT(1),          /* TEMPORARILY NONDISPATCHABLE,
*                                       PARTITION IS DEACTIVATED
*                                       (AOS/1)                ICB357*/
*%GOTO TCBC4;
*%TCBC3 : ;
*       5 TCBLJSND BIT(1),           /* TASK IS ABENDING AND
*                                       NONDISPATCHABLE BECAUSE IT
*                                       HAS A JOB STEP SUBTASK.
*                                       TCBONDSP MUST ALSO BE ON.
*                                       (AOS/2)                      */
*       5 TCBSTAND BIT(1),           /* TASK HAS BEEN SET
*                                       NONDISPATCHABLE WHILE ASIR
*                                       IS SCHEDULING AN EXIT ROUTINE
*                                       FOR SOME OTHER TASK IN JOB
*                                       STEP  (AOS/2)                */
*       5 TCBRSV23 BIT(1),           /* RESERVED (AOS/2)             */
*%TCBC4 : ;
*       5 TCBRSV24 BIT(1),           /* RESERVED                     */
*       5 TCBRSV25 BIT(1),           /* RESERVED                     */
*       5 TCBRSV26 BIT(1),           /* RESERVED                     */
*       5 TCBRSV27 BIT(1),           /* RESERVED                     */
*       5 TCBRSV28 BIT(1),           /* RESERVED                     */
*    2 TCBMDIDS FIXED(31),           /* RESERVED FOR MODEL-DEPENDENT
*                                       SUPPORT AND FOR IBM
*                                       PROPRIETARY PROGRAMMING
*                                       SUPPORT                ICBXXX*/
*    2 TCBJSCB  PTR(31),             /* ADDR OF JOB STEP CONTROL
*                                       BLOCK                        */
*     3 TCBRECDE CHAR(1),            /* ABEND RECURSION BYTE   ICB456*/
*      4 TCBREC   BIT(1),            /* VALID REENTRY TO ABEND
*                                       INDICATED IF NON-ZERO VALUE
*                                       IN FOLLOWING 7 BITS    ICB456*/
*      4 *        BIT(7),            /* ABEND BITS             ICB456*/
*%TCBOPEN='''01''X';                 /* OPEN DUMP DATA SET     ICB456*/
*%TCBCLOSD='''02''X';                /* CLOSE DIRECT SYSOUT ON
*                                       TAPE                   ICB456*/
*%TCBCLOSE='''03''X';                /* CLOSE OPEN DATA SETS   ICB456*/
*%TCBCLOSF='''04''X';                /* RESERVED               ICB456*/
*%TCBGREC='''05''X';                 /* GRAPHICS               ICB456*/
*%TCBADUMP='''07''X';                /* ABDUMP                 ICB456*/
*%TCBPTAXE='''08''X';                /* PURGE TAXE             ICB456*/
*%TCBMESG='''09''X';                 /* MESSAGE RECURSION      ICB456*/
*%TCBDYNAM='''0A''X';                /* DD-DYNAM TIOT CLEANUP  ICB456*/
*%TCBQTIP='''0C''X';                 /* PURGE TSO INTERPARTITION
*                                       POSTS                  ICB456*/
*%TCBTCAMP='''0D''X';                /* PURGE TCAM INTERPARTITION
*                                       POSTS                  ICB456*/
*%TCBSAVCD='''0F''X';                /* ASIR RECURSION.  SAVE OLD
*                                       COMP CODE              ICB456*/
*%TCBTYP1W='''10''X';                /* TYPE 1 MESSAGE WRITE TO
*                                       PROGRAMMER             ICB456*/
*%TCBNOSTA='''30''X';                /* STAE/STAI NOT TO BE
*                                       HONORED                ICB456*/
*%TCBSTRET='''31''X';                /* RETURN FROM STEAL CORE ICB456*/
*%TCBCONVR='''32''X';                /* CONVERT TO STEP ABEND  ICB456*/
*%TCBDARET='''33''X';                /* RETURN FROM DAR        ICB456*/
*%TCBTYP1R='''34''X';                /* RETURN FROM TYPE 1 MESSAGE
*                                       MODULE                 ICV456*/
*%TCBNEWRB='''35''X';                /* ABEND ISSUED SVC 13 TO XCTL
*                                       TO A NON-ABEND MODULE  ICB456*/
*%TCBMCCNS='''40''X';                /* INDICATES THAT A MUST COMPLETE
*                                       TASK HAS ABENDED WITHOUT
*                                       ENOUGH STORAGE FOR 2 RB'S FOR
*                                       A WTOR ASKING WHETHER THE
*                                       TASK'S RESOURCES ARE CRITICAL
*                                       OR NOT.  THE RESOURCES ARE
*                                       ASSUMED TO BE CRITICAL, WHICH
*                                       WILL CAUSE THE PARTITION TO
*                                       BE MARKED PERMANENTLY NON-
*                                       DISPATCHABLE. (OS/VS1) ICB492*/
*     3 TCBJSCBB PTR(24),            /* ADDR OF JOB STEP CONTROL
*                                       BLOCK                        */
*    2 TCBDDEXC FIXED(15),           /* COUNT OF THE NUMBER OF TIMES
*                                       A DYNAMIC DISPATCHING TASK
*                                       HAS ITS TIME SLICE EXPIRE
*                                       (AOS/1)                ICB465*/
*    2 TCBDDWTC FIXED(15),           /* COUNT OF THE NUMBER OF TIMES
*                                       A DYNAMIC DISPATCHING TASK IS
*                                       NOT INTERRUPTED BY TIME SLICE
*                                       BETWEEN WAITS  (AOS/1) ICB465*/
*    2 TCBIOBRC PTR(31),             /* ADDRESS OF IOB RESTORE CHAIN
*                                       FOR I/O QUIESCED BY EOT
*                                                              YM2840*/
*    2 TCBRSV30 PTR(31),             /* RESERVED                     */
*    2 TCBEXT1  PTR(31),             /* SAME AS TCBEXT1A       ICB311*/
*     3 TCBRSV32 PTR(8),             /* RESERVED               ICB311*/
*     3 TCBEXT1A PTR(24),            /* ADDRESS OF OS-AOS COMMON
*                                       EXTENSION              ICB311*/
*
* /*           AOS/1 - AOS/2 COMMON SECTION                          */
*
*    2 TCBBITS  CHAR(4) BDY(WORD),   /* FLAG BYTES                   */
*     3 TCBNDSP4 BIT(8),             /* SECONDARY NONDISPATCHABILITY
*                                       FLAGS COMMON TO AOS/1 AND
*                                       AOS/2.  COORDINATED WITH
*                                       PRIMARY NONDISPATCHABILITY
*                                       FLAG TCBPNDSP.               */
*      4 TCBRSV86 BIT(1),            /* RESERVED                     */
*      4 TCBRSV87 BIT(1),            /* RESERVED                     */
*      4 TCBRSV88 BIT(1),            /* RESERVED                     */
*      4 TCBRSV89 BIT(1),            /* RESERVED                     */
*      4 TCBRSV90 BIT(1),            /* RESERVED                     */
*      4 TCBRSV91 BIT(1),            /* RESERVED                     */
*      4 TCBRSV92 BIT(1),            /* RESERVED                     */
*      4 TCBRSV93 BIT(1),            /* RESERVED                     */
*     3 TCBNDSP5 BIT(8),             /* SECONDARY NONDISPATCHABILITY
*                                       FLAGS UNIQUE TO AOS/1 OR
*                                       AOS/2.  COORDINATED WITH
*                                       PRIMARY NONDISPATCHABILITY
*                                       FLAG TCBPNDSP.               */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBC5;
*      4 TCBNDSPL BIT(1),            /* NONDISPATCHABLE BECAUSE
*                                       SUPERVISOR LOCK SET.  SET BY
*                                       PAGING SERVICE INTERFACE
*                                       ROUTINE WHEN DISABLED CODE
*                                       PRODUCES A PAGE FAULT OR
*                                       REQUESTS A PAGE FIX. (AOS/1) */
*      4 TCBNDGTF BIT(1),            /* TASK NONDISPATCHABLE WHILE
*                                       WAITING FOR A TIRB ROUTINE TO
*                                       PROCESS A DISABLED PAGE FAULT
*                                       WHICH WAS PRODUCED BY GTF.
*                                       SET AND RESET OF STAGE THREE
*                                       EXIT EFFECTOR.  SET WHEN TIRB
*                                       POOL EMPTY AND REQUESTING
*                                       TASK HAS AN SQE QUEUED AT
*                                       REQUEST OF GTF.  (AOS/1)     */
*%GOTO TCBC5D;
*%TCBC5 : ;
*      4 TCBRSV94 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBRSV95 BIT(1),            /* RESERVED  (AOS/2)            */
*%TCBC5D : ;
*      4 TCBRSV74 BIT(1),            /* RESERVED                     */
*      4 TCBRSV75 BIT(1),            /* RESERVED                     */
*      4 TCBRSV76 BIT(1),            /* RESERVED                     */
*      4 TCBRSV77 BIT(1),            /* RESERVED                     */
*      4 TCBRSV78 BIT(1),            /* RESERVED                     */
*      4 TCBRSV79 BIT(1),            /* RESERVED                     */
*     3 TCBFLGS6 CHAR(1),            /* TASK-RELATED FLAGS           */
*      4 TCBRV    BIT(1),            /* PARTITION IS FIXED.  VIRTUAL
*                                       ADDRESSES IN PARTITION ARE
*                                       REAL.                        */
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBC5A;
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBC5B;
*      4 TCBPIE17 BIT(1),            /* TASK REQUESTS SPIE ON PAGE
*                                       FAULTS  (AOS/1)        ICB339*/
*      4 TCBPANIC BIT(1),            /* TASK HAS OR IS WAITING FOR
*                                       'PANIC'  (AOS/1)       ICB457*/
*      4 TCBRSV80 BIT(1),            /* RESERVED  (AOS/1)            */
*      4 TCBRUNPN BIT(1),            /* IF ZERO, PARTITION CAN BE
*                                       DEACTIVATED.  IF ONE,
*                                       PARTITION IS INELIGIBLE TO
*                                       BE DEACTIVATED.(AOS/1) ICB465*/
*      4 TCBRUNJB BIT(1),            /* IF ZERO, CURRENT JOB CAN BE
*                                       DEACTIVATED.  IF ONE,
*                                       PARTITION IS INELIGIBLE TO BE
*                                       DEACTIVATED WHILE CURRENT JOB
*                                       IS RUNNING.  (AOS/1)   ICB465*/
*      4 TCBDSINQ BIT(1),            /* IF ZERO, DSI LOGIC IS NOT
*                                       BEING EXECUTED.  IF ONE,
*                                       SCHEDULER IS USING (ENQUEQUED)
*                                       DATA SET INTEGRITY (DSI)
*                                       LOGIC AT JOB START TIME.
*                                       PARTITION IS INELIGIBLE FOR
*                                       DEACTIVATION. (AOS/1)  ICB465*/
*      4 TCBRSV81 BIT(1),            /* RESERVED  (AOS/1)            */
*%GOTO TCBC8;
*%TCBC5B : ;
*      4 TCBPIE17 BIT(1),            /* TASK REQUESTS SPIE ON PAGE
*                                       FAULTS  (AOS/1)
*                                       PAGE FAULT INTERRUPT IS TO
*                                       BE PASSED TO THE TASK'S
*                                       INTERRUPT EXIT AND AN 8-BYTE
*                                       PICA IS IN EFFECT FOR THIS
*                                       TASK (AOS/2)           ICB339*/
*      4 TCBCPU   BIT(1),            /* TASK IS CPU-BOUND MEMBER OF
*                                       APG  (AOS/2)                 */
*       5 TCBPANIC BIT(1),           /* TASK HAS OR IS WAITING FOR
*                                       'PANIC'  (AOS/1)       ICB457*/
*      4 TCBSPVLK BIT(1),            /* TASK SCHEDULED FOR ABTERM
*                                       WHILE OWNING SUPERVISOR LOCK
*                                       (AOS/2)                      */
*       5 TCBRSV80 BIT(1),           /* RESERVED  (AOS/1)            */
*      4 TCBOLSQA BIT(1),            /* TASK OWNS SPQE FOR LSQA
*                                       (AOS/2)                      */
*       5 TCBRUNPN BIT(1),           /* IF ZERO, PARTITION CAN BE
*                                       DEACTIVATED.  IF ONE,
*                                       PARTITION IS INELIGIBLE TO
*                                       BE DEACTIVATED.(AOS/1) ICB465*/
*      4 TCBMIGR  BIT(1),            /* REGION SELECTED FOR MIGRATION
*                                       FROM PRIMARY PAGING DEVICE
*                                       (AOS/2)                      */
*       5 TCBRUNJB BIT(1),           /* IF ZERO, CURRENT JOB CAN BE
*                                       DEACTIVATED.  IF ONE,
*                                       PARTITION IS INELIGIBLE TO BE
*                                       DEACTIVATED WHILE CURRENT JOB
*                                       IS RUNNING.  (AOS/1)   ICB465*/
*      4 TCBAPG   BIT(1),            /* TASK IS IN APG  (AOS/2)      */
*       5 TCBDSINQ BIT(1),           /* IF ZERO, DSI LOGIC IS NOT
*                                       BEING EXECUTED.  IF ONE,
*                                       SCHEDULER IS USING (ENQUEUED)
*                                       DATA SET INTEGRITY (DSI)
*                                       LOGIC AT JOB START TIME.
*                                       PARTITION IS INELIGIBLE FOR
*                                       DEACTIVATION.  (AOS/1) ICB465*/
*      4 TCBNTJS  BIT(1),            /* JOB STEP TASK BUT NOT HIGHEST
*                                       IN FAILING TREE  (AOS/2)     */
*       5 TCBRSV81 BIT(1),           /* RESERVED  (AOS/1)            */
*%GOTO TCBC8;
*%TCBC5A : ;
*      4 TCBPIE17 BIT(1),            /* PAGE FAULT INTERRUPT IS TO
*                                       BE PASSED TO THE TASK'S
*                                       INTERRUPT EXIT AND AN 8-BYTE
*                                       PICA IS IN EFFECT FOR THIS
*                                       TASK (AOS/2)           ICB339*/
*      4 TCBCPU   BIT(1),            /* TASK IS CPU-BOUND MEMBER OF
*                                       APG  (AOS/2)                 */
*      4 TCBSPVLK BIT(1),            /* TASK SCHEDULED FOR ABTERM
*                                       WHILE OWNING SUPERVISOR LOCK
*                                       (AOS/2)                      */
*      4 TCBOLSQA BIT(1),            /* TASK OWNS SPQE FOR LSQA
*                                       (AOS/2)                      */
*      4 TCBMIGR  BIT(1),            /* REGION SELECTED FOR MIGRATION
*                                       FROM PRIMARY PAGING DEVICE
*                                       (AOS/2)                      */
*      4 TCBAPG   BIT(1),            /* TASK IS IN APG  (AOS/2)      */
*      4 TCBNTJS  BIT(1),            /* JOB STEP TASK BUT NOT HIGHEST
*                                       IN FAILING TREE  (AOS/2)     */
*%TCBC8 : ;
*     3 TCBFLGS7 CHAR(1),            /* TASK-RELATED FLAGS           */
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBC9;
*%IF TCBSYSTM='BOTH'  %THEN
*    %GOTO TCBC9B;
*      4 TCBGPECB BIT(1),            /* TASK IS IN AN ECB WAIT FOR A
*                                       GETPART (AOS/2)        ICB339*/
*      4 TCBRSV33 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBRSV34 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBSTACK BIT(1),            /* SET IN JOB STEP TCB TO
*                                       INDICATE THAT A TASK IN THE
*                                       JOB STEP IS IN SERIAL ABEND
*                                       PROCESSING.  USED IN
*                                       CONJUNCTION WITH TCBFOINP.
*                                       (AOS/2)                ICB374*/
*      4 TCBRSV35 BIT(1),            /* RESERVED  (AOS/2)            */
*      4 TCBRSTSK BIT(1),            /* RESIDENT SYSTEM TASK (AOS/2) */
*      4 TCBADMP  BIT(1),            /* ALL OTHER TASKS IN JOB STEP
*                                       HAVE BEEN SET NONDISPATCHABLE
*                                       BY ABDUMP.  THIS BIT IS SET
*                                       TO CONTROL JOB STEP DURING
*                                       THE DUMPING PROCESS. (AOS/2) */
*%GOTO TCBC9A;
*%TCBC9B : ;
*      4 TCBGPECB BIT(1),            /* TASK IS IN AN ECB WAIT FOR A
*                                       GETPART  (AOS/2)       ICB339*/
*       5 TCBFDD   BIT(1),           /* IF ONE, THIS TCB IS A MEMBER
*                                       OF THE DYNAMIC DISPATCHING
*                                       GROUP.  (AOS/1)        ICB465*/
*      4 TCBRSV33 BIT(1),            /* RESERVED  (AOS/2)            */
*       5 TCBFDDT  BIT(1),           /* USED BY DYNAMIC DISPATCHING -
*                                       0 = CPU BOUND, 1 = I/O BOUND
*                                       (AOS/1)                ICB465*/
*      4 TCBRSV34 BIT(1),            /* RESERVED  (AOS/2)            */
*       5 TCBFDDEI BIT(1),           /* USED BY DYNAMIC DISPATCHING -
*                                       0 = INTERVAL HAS NOT EXPIRED,
*                                       1 = TIME SLICE INTERVAL HAS
*                                       EXPIRED FOR THIS TASK SINCE
*                                       IT LAST ISSUED A WAIT.
*                                       (AOS/1)                ICB465*/
*      4 TCBSTACK BIT(1),            /* SET IN JOB STEP TCB TO
*                                       INDICATE THAT A TASK IN THE
*                                       JOB STEP IS IN SERIAL ABEND
*                                       PROCESSING.  USED IN
*                                       CONJUNCTION WITH TCBFOINP.
*                                       (AOS/2)                ICB374*/
*       5 TCBFWDD  BIT(1),           /* IF ONE, THIS TCB WAS A MEMBER
*                                       OF DYNAMIC DISPATCHING GROUP
*                                       BUT IS NOT CURRENTLY A MEMBER
*                                       (OS/VS1)               XM9175*/
*      4 TCBRSV35 BIT(1),            /* RESERVED                     */
*      4 TCBRSTSK BIT(1),            /* RESIDENT SYSTEM TASK (AOS/2) */
*       5 TCBRSV83 BIT(1),           /* RESERVED  (AOS/1)            */
*      4 TCBADMP  BIT(1),            /* ALL OTHER TASKS IN JOB STEP
*                                       HAVE BEEN SET NONDISPATCHABLE
*                                       BY ABDUMP.  THIS BIT IS SET
*                                       TO CONTROL JOB STEP DURING
*                                       THE DUMPING PROCESS. (AOS/2) */
*       5 TCBRSV84 BIT(1),           /* RESERVED  (AOS/1)            */
*%GOTO TCBC9A;
*%TCBC9 : ;
*      4 TCBFDD   BIT(1),            /* IF ONE, THIS TCB IS A MEMBER
*                                       OF THE DYNAMIC DISPATCHING
*                                       GROUP.  (AOS/1)        ICB465*/
*      4 TCBFDDT  BIT(1),            /* USED BY DYNAMIC DISPATCHING -
*                                       0 = CPU BOUND, 1 = I/O BOUND
*                                       (AOS/1)                ICB465*/
*      4 TCBFDDEI BIT(1),            /* USED BY DYNAMIC DISPATCHING -
*                                       0 = INTERVAL HAS NOT EXPIRED,
*                                       1 = TIME SLICE INTERVAL HAS
*                                       EXPIRED FOR THIS TASK SINCE
*                                       IT LAST ISSUED A WAIT.
*                                       (AOS/1)                ICB465*/
*      4 TCBFWDD  BIT(1),            /* IF ONE, THIS TCB WAS A MEMBER
*                                       OF DYNAMIC DISPATCHING GROUP
*                                       BUT IS NOT CURRENTLY A MEMBER
*                                       (OS/VS1)               XM9175*/
*      4 TCBRSV35 BIT(1),            /* RESERVED                     */
*      4 TCBRSV83 BIT(1),            /* RESERVED (AOS/1)             */
*      4 TCBRSV84 BIT(1),            /* RESERVED (AOS/1)             */
*%TCBC9A : ;
*      4 TCBGTOFM BIT(1),            /* GTF TRACING TEMPORARILY
*                                       DISABLED               ICB402*/
*    2 TCBDAR   CHAR(1),             /* DAMAGE ASSESSMENT ROUTINE
*                                       FLAGS                        */
*     3 TCBDARP  BIT(1),             /* - PRIMARY DAR RECURSION - -
*                                       DAR FAILURE WHILE WRITING
*                                       CORE IMAGE                   */
*     3 TCBDARS  BIT(1),             /* - SECONDARY DAR RECURSION -
*                                       -  DAR FAILURE WHILE
*                                       ATTEMPTING TO REINSTATE
*                                       FAILING REGION/PARTITION     */
*     3 TCBDARD  BIT(1),             /* - A DUMP HAS BEEN REQUESTED
*                                       FOR A WRITER OR SCHEDULER
*                                       ABEND AND THE USER HAS NOT
*                                       PROVIDED A SYSABEND DD CARD
*                                       (AOS/1)                      */
*     3 TCBDARC  BIT(1),             /* - RECURSION PERMITTED IN
*                                       CLOSE - AFTER DAR PROCESSING
*                                       COMPLETED  (PCP)             */
*      4 TCBDARMC BIT(1),            /* DAR HAS BEEN ENTERED TO
*                                       HANDLE A VALID RECURSION
*                                       IN MUST COMPLETE STATUS
*                                       THROUGH ABEND          ICB264*/
*     3 TCBDARO  BIT(1),             /* - SYSTEM ERROR TASK IS
*                                       FAILING.  DAR DUMP SHOULD NOT
*                                       REQUEST ANY ERP PROCESSING   */
*     3 TCBDARWT BIT(1),             /* WTO IN PROCESS FOR DAR ICB264*/
*     3 TCBRSV36 BIT(1),             /* RESERVED                     */
*     3 TCBEXSVC BIT(1),             /* SVC DUMP IS EXECUTING FOR
*                                       THIS TASK                    */
*    2 TCBRSV37 PTR(8),              /* RESERVED                     */
*    2 TCBSYSCT PTR(8),              /* COUNT FOR THE OUTSTANDING
*                                       NUMBER OF 'SYSTEM MUST
*                                       COMPLETE' REQUESTS
*                                       (ICB497)               YM3883*/
*    2 TCBSTMCT PTR(8),              /* COUNT FOR OUTSTANDING NUMBER
*                                       OF 'STEP MUST COMPLETE'
*                                       REQUESTS (ICB497)      YM3883*/
*    2 TCBEXT2  PTR(31) BDY(DWORD),  /* SAME AS TCBEXT2A       ICB311*/
*     3 TCBRSV39 PTR(8),             /* RESERVED               ICB311*/
*     3 TCBEXT2A PTR(24),            /* ADDRESS OF AOS/1 - AOS/2
*                                       COMMON EXTENSION       ICB311*/
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBD1;
*
* /*           AOS/1 TCB OVERLAY                                     */
*
*    2 TCBPCB   PTR(31) BDY(DWORD,5),/* ADDRESS OF PAGE CONTROL
*                                       BLOCK FOR TASK               */
*    2 TCBGQE   PTR(31),             /* ADDRESS OF FIRST GQE FOR TASK*/
*    2 TCBARB   PTR(31),             /* ADDR OF AVAILABLE SVRB ICB344*/
*     3 TCBRSV85 CHAR(1),            /* RESERVED               ICB344*/
*     3 TCBARBA  PTR(24),            /* ADDR OF AVAILABLE SVRB ICB344*/
*    2 *        CHAR(0) BDY(DWORD);
*%IF TCBSYSTM='AOS1'  %THEN
*    %GOTO TCBD2;
*%TCBD1 : ;
*
* /*           AOS/2 TCB OVERLAY                                     */
*
*%IF TCBSYSTM=''  %THEN
*    %GOTO TCBD1A;
* DECLARE
*%IF IKEPLS='2'  %THEN
*    %GOTO TCBD1B;
*   1 TCBS01   BASED(ADDR(TCBPCB))  BDY(DWORD,5),
*%GOTO TCBD1A;
*%TCBD1B : ;
*   1 TCBS01   DEF(TCBPCB) BDY(DWORD,5),
*%TCBD1A : ;
*    2 TCBXTENT CHAR(4) BDY(DWORD,5),/* REGION SEGMENT INFORMATION   */
*     3 TCBRSV40 PTR(8),             /* RESERVED                     */
*     3 TCBSTI   PTR(8),             /* SEGMENT INDEX TO FIRST
*                                       SEGMENT IN REGION.  ZERO IF
*                                       VIRTUAL ADDRESSES IN REGION
*                                       ARE REAL.                    */
*     3 TCBSCT   PTR(8),             /* COUNT FIELD INDICATING THE
*                                       NUMBER OF SEGMENTS FOR THIS
*                                       TASK'S REGION.  ZERO IF
*                                       VIRTUAL ADDRESSES IN REGION
*                                       ARE REAL.                    */
*     3 TCBLSQA  PTR(8),             /* SEGMENT INDEX TO FIRST LSQA
*                                       SEGMENT FOR THE TASK'S
*                                       REGION                 ICB339*/
*    2 TCBTIRB  PTR(31),             /* ADDRESS OF TIRB FOR TASK     */
*    2 TCBBACK  PTR(31),             /* ADDRESS OF PREVIOUS TCB ON
*                                       READY QUEUE.  ZERO IN TOP
*                                       TCB.                         */
*    2 TCBLSQAP PTR(31),             /* ADDRESS OF SPQE FOR LSQA     */
*    2 TCBIOTIM FIXED(31),           /* TIME IN 16-MICROSECOND UNITS
*                                       BETWEEN TIME ORIGINAL TIME
*                                       SLICE INTERVAL WAS ASSIGNED
*                                       AND TIME APG TASK WENT INTO
*                                       VOLUNTARY WAIT               */
*    2 TCBTMSAV FIXED(31),           /* TIME IN 16-MICROSECOND UNITS
*                                       REMAINING FROM ORIGINAL TIME
*                                       SLICE INTERVAL WHEN APG TASK
*                                       WAS LAST DISPATCHED          */
*    2 TCBABCUR CHAR(1),             /* ABEND RECURSION BYTE         */
*    2 TCBRSVAA PTR(8),              /* RESERVED (ICB497)      YM3883*/
*    2 TCBTID   CHAR(1),             /* TASK ID NUMBER         ICB374*/
*%TCBPAGID='''FF''X';                /* ID FOR PAGING SUPERVISOR
*                                       TASK                   ICB403*/
*%TCBSYERR='''FE''X';                /* ID FOR SYSTEM ERROR
*                                       TASK                   ICB403*/
*%TCBCOMM='''FD''X';                 /* ID FOR COMMUNICATIONS
*                                       TASK                   ICB403*/
*%TCBIORMS='''FC''X';                /* ID FOR I/O RMS
*                                       TASK                   ICB403*/
*%TCBMASTR='''FB''X';                /* ID FOR MASTER SCHEDULER
*                                       TASK                   ICB403*/
*%TCBJES='''FA''X';                  /* ID FOR JES MONITOR
*                                       TASK                   ICB403*/
*%TCBDSSID='''F9''X';                /* ID FOR DSS
*                                       TASK                   ICB403*/
*    2 TCBRSV41 PTR(8),              /* RESERVED               ICB374*/
*    2 TCBQECB  PTR(31),             /* SAME AS TCBQECBA BELOW ICB339*/
*     3 TCBNQCT  PTR(8),             /* COUNT OF ALL RESOURCES
*                                       UNAVAILABLE DUE TO ENQ OR
*                                       RESERVE REQUESTED WITH
*                                       ECB                    ICB339*/
*     3 TCBQECBA PTR(24),            /* ADDRESS OF ECB TO BE POSTED
*                                       WHEN TCBNQCT=0         ICB339*/
*    2 TCBFOE   PTR(31),             /* SAME AS TCBFOEA BELOW  ICB339*/
*     3 TCBRSV42 PTR(8),             /* RESERVED               ICB339*/
*     3 TCBFOEA  PTR(24),            /* ADDRESS OF FIRST FIX
*                                       OWNERSHIP ELEMENT (FOE) IN
*                                       LIST FOR THIS TASK     ICB339*/
*    2 TCBSWA   PTR(31),             /* ADDRESS OF FIRST SCHEDULER
*                                       WORK AREA (SWA) HEADER IN A
*                                       CHAIN OF SWA BLOCKS FOR THIS
*                                       TASK                   ICB374*/
*    2 TCBRSV96 PTR(31),             /* RESERVED                     */
*    2 *        CHAR(0) BDY(DWORD);
*%TCBD2 : ;
*
* /*           AOS/1 - AOS/2 COMMON EXTENSION                        */
*
* DECLARE
*   1 TCBXTNT2 BASED(TCBEXT2)  BDY(DWORD),
*    2 TCBGTF   PTR(31),             /* SAME AS TCBGTFA BELOW  ICB312*/
*     3 TCBTFLG  BIT(8),             /* GTF FLAG BYTE          ICB312*/
*      4 TCBASYNC BIT(1),            /* GTF ASYNCHRONOUS GATHER
*                                       ROUTINE IN CONTROL     ICB312*/
*      4 TCBERRTN BIT(1),            /* GTF ASYNCHRONOUS GATHER ERROR
*                                       ROUTINE IN CONTROL     ICB312*/
*      4 TCBDSPIT BIT(1),            /* MCIH SHOULD UNCONDITIONALLY
*                                       BRANCH TO DISPATCHER   ICB312*/
*      4 TCBRSV43 BIT(1),            /* RESERVED                     */
*      4 TCBRSV44 BIT(1),            /* RESERVED                     */
*      4 TCBRSV45 BIT(1),            /* RESERVED                     */
*      4 TCBRSV46 BIT(1),            /* RESERVED                     */
*      4 TCBRSV47 BIT(1),            /* RESERVED                     */
*     3 TCBGTFA  PTR(24),            /* ADDRESS OF TEMPORARY TRACE
*                                       BUFFER                 ICB312*/
*    2 TCBRSVAB PTR(8),              /* RESERVED (ICB497)      YM3883*/
*    2 TCBRCMP  BIT(24),             /* COMMON INTERFACE BETWEEN
*                                       AOS/1 AND AOS/2 TO KEEP
*                                       ABTERM COMPLETION CODE DUE TO
*                                       A VALID RECURSION IN STAE
*                                                              ICB411*/
*    2 TCBRSV48 PTR(31),             /* RESERVED                     */
*    2 TCBRSV49 PTR(31),             /* RESERVED                     */
*    2 *        CHAR(0) BDY(DWORD);
*
*%TCBLEN='LENGTH(TCBFIX) + LENGTH(TCB) + LENGTH(TCBXTNT2)';  /* TCB
*                                       LENGTH INCLUDING PREFIX
*                                                              ICB362*/
*
* /*                   END OF TCB                                    */
./ ADD NAME=IHBPSINR 0100-19106-19106-1238-00176-00176-00000-MZAP78  17
         MACRO
&NAME IHBPSINR &FORM,&TYPE=,&LA=,&A=,&ECB=,&ECBIND=,&LONG=,&RELEASE=,  X
               &RSAOPT=,&SUSPEND=
.******* DEFINE LOCAL SET SYMBOLS
         LCLA  &INDEX,&INDEX2
         LCLB  &LFORM,&RFORM,&FX(1),&FR(1),&LD(1),&P(4)
         LCLB  &ECBISAD,&ECBINR0,&ECBNULL,&ECBNEG
         LCLB  &ADRISAD,&ADRISRG,&ADRINR1
         LCLC  &COMP,&OP,&ECBREG,&ERR
.******* TEST FOR IRRECOVERABLE ERRORS
         AIF   ('&FORM' NE '').G1
      IHBERMAC 1017,MODE           MODE OPERAND REQ'D-NOT SPECIFIED
         MEXIT
.G1      AIF   ('&FORM' EQ 'L' OR '&FORM' EQ 'R').G2
      IHBERMAC 1001,MODE,&FORM     INVALID MODE OPERAND SPECIF'D-FORM
         MEXIT
.G2      ANOP                      MODE OPERAND PRESENT -- EQ R OR L
&RFORM   SETB  ('&FORM' EQ 'R')
         AIF   (&RFORM).RF1        BRANCH FOR REGISTER-FORM PROCESSING
.LF1     AIF   ('&LA' NE '').LF2   BEGIN LIST-FORM MAJOR ERROR TEST
      IHBERMAC 1017,LA             LA= OPERAND REQ'D-NOT SPECIFIED
         MEXIT
.LF2     AIF   ('&A' EQ '').LF3
      IHBERMAC 1020,A,L            OPERAND NOT ALLOWED WITH L MODE
         MEXIT
.LF3     ANOP
&LFORM   SETB  1
&ADRISAD SETB  ('&LA'(1,1) NE '(')
&ADRINR1 SETB  ('&LA(1)' EQ '1')
         AGO   .G3                 END OF LIST-FORM MAJOR ERROR TEST
.RF1     AIF   ('&A' NE '').RF2    REGISTER-FORM MAJOR ERROR TESTS
      IHBERMAC 1017,A              A  OPERAND REQ'D-NOT SPECIFIED
         MEXIT
.RF2     AIF   ('&LA' EQ '').RF3
      IHBERMAC 1020,LA,R           LA= OPERAND NOT ALLOWED WITH R MODE
         MEXIT
.RF3     ANOP                      END OF REG-FORM MAJOR ERROR TESTS
&ADRISAD SETB  ('&A'(1,1) NE '(')
&ADRINR1 SETB  ('&A(1)' EQ '1')
.G3      ANOP
         AIF   (T'&ECB EQ 'O'  OR T'&ECBIND EQ 'O').G3A
      IHBERMAC 1020,ECBIND,ECB     ECBIND NOT ALLOWED WITH ECB
         MEXIT
.G3A     ANOP
&ECBNULL SETB  (T'&ECB EQ 'O' AND T'&ECBIND EQ 'O')
&ECBNEG  SETB  (T'&ECBIND NE 'O')
         AIF   ('&TYPE' EQ 'FREE' OR (NOT &ECBNULL)).G4
      IHBERMAC 1017,ECB            ECB OPERAND REQ'D-NOT SPECIFIED
         MEXIT
.******* END OF TESTS FOR IRRECOVERABLE ERRORS
.G4      ANOP                      BEGIN RECOVERABLE ERROR TESTS
&FX(1)   SETB  ('&TYPE' EQ 'FIX')
&FR(1)   SETB  ('&TYPE' EQ 'FREE')
&LD(1)   SETB  ('&TYPE' EQ 'LOAD' OR '&TYPE' EQ 'FIX')
         AIF   ('&TYPE' EQ 'LOAD').REL1
         AIF   (&FR(1)).RSA1
.LNG1    AIF   ('&LONG' EQ 'Y' OR '&LONG' EQ 'N' OR '&LONG' EQ '').LNG2
      IHBERMAC 1015,&LONG,LONG,Y   V INVALID FOR LONG KWD, Y ASSUMED
.LNG2    ANOP
&P(1)    SETB  ('&LONG' NE 'N')
.SUS1    AIF   ('&SUSPEND' EQ '').RSA1
         AIF   (&LFORM).SUS2
      IHBERMAC 1016,SUSPEND,R           INCOMP. WITH R MODE-IGNORED
         AGO   .RSA1
.SUS2    AIF   ('&SUSPEND' EQ 'Y' OR '&SUSPEND' EQ 'N').SUS3
      IHBERMAC 1015,&SUSPEND,SUSPEND,N  V INV FOR SUSPEND, N ASSUMED
.SUS3    ANOP
&P(2)    SETB  ('&SUSPEND' EQ 'Y')
.RSA1    AIF   ('&RSAOPT' EQ '').REL1
         AIF   (&LFORM).RSA2
      IHBERMAC 1016,RSAOPT,R            INCOMP. WITH R MODE-IGNORED
         AGO   .REL1
.RSA2    AIF   ('&RSAOPT' EQ 'Y' OR '&RSAOPT' EQ 'N').RSA3
      IHBERMAC 1015,&RSAOPT,RSAOPT,N    V INV FOR RSAOPT, N ASSUMED
.RSA3    ANOP
&P(3)    SETB  ('&RSAOPT' EQ 'Y')
.REL1    AIF   ('&RELEASE' EQ '').G5
         AIF   (&LFORM).REL2
      IHBERMAC 1016,RELEASE,R           INCOMP. WITH R MODE-IGNORED
         AGO   .G5
.REL2    AIF   ('&RELEASE' EQ 'Y' OR '&RELEASE' EQ 'N').REL3
      IHBERMAC 1015,&RELEASE,RELEASE,N  V INV FOR RELEASE, N ASSUMED
.REL3    ANOP
&P(4)    SETB  ('&RELEASE' EQ 'Y')
         AIF   (NOT(&P(3) AND &P(4))).G5
&P(4)    SETB  0
&ERR     SETC  'RSAOPT=Y'
      IHBERMAC 1016,RELEASE,&ERR        RELEASE INCOMP. WITH RSAOPT
.******* ERROR TEST END, PARMS VALID -- START MACRO EXPANSION
.G5      ANOP
&ADRISRG SETB  (NOT &ADRISAD)
         AIF   (&ECBNULL).G5C
         AIF   (&ECBNEG).G5A
&ECBISAD SETB  ('&ECB'(1,1) NE '(')
&COMP    SETC  ''
         AIF   (&ECBISAD).G5C
&OP      SETC  'LR'
&ECBREG  SETC  '&ECB(1)'
&ECBINR0 SETB  ('&ECB(1)' EQ '0')
         AGO   .G5C
.G5A     ANOP
&ECBISAD SETB  ('&ECBIND'(1,1) NE '(')
&COMP    SETC  '0-'
         AIF   (&ECBISAD).G5C
&OP      SETC  'LCR'
&ECBREG  SETC  '&ECBIND(1)'
.******* FORCE ALIGNMENT, INSERT LABELED HEADER, BRANCH PAST CONSTANTS
.G5C     AIF   (NOT(&ECBISAD OR &ADRISAD)).G6
.* * * * CNOP FOR ALIGNMENT IF LOAD TO BE PERFORMED
         CNOP  0,4
.G6      AIF   ('&NAME' EQ '').G6A
.* * * * HEADER IF USER MACRO CALL LABELED
&NAME    DS    0H
.G6A     ANOP
&INDEX   SETA  (4+4*&ECBISAD+4*&ADRISAD+2*&ADRISRG)
.* * * * BRANCH TO FIRST EXECUTABLE INSTRUCTION
         B     *+&INDEX  BRANCH AROUND INPUT PARMS
.******* GENERATE ADDRESS CONSTANTS AND MODE FLAG OR FUNCTION BYTE
         AIF   (NOT &ECBISAD).G7
.* * * * ECB ADCON IF ECB=ADDR
         DC    A(&COMP.&ECB&ECBIND)   FIRST INPUT PARM
.G7      AIF   (&RFORM).G8
.* * * * HIGH-ORDER REG 1 FLAG IF LIST FORM
         DC    X'80'     L-MODE FLAG
         AGO   .G9
.* * * * HIGH-ORDER REG 1 FUNCTION BITS IF REGISTER FORM
.G8      DC    B'0&FX(1)&FR(1)&LD(1)&P(4)0&P(1)0'    FUNCTION BYTE
.G9      AIF   (&ADRISRG).G10
.* * * * LIST OR VIRTUAL ADDRESS ADCON IF LA=ADDR OR A=ADDR
         DC    AL3(&LA&A) SECOND INPUT PARM
         AGO   .G11
.* * * * FILLER IF NO LIST OR VIRTUAL ADDRESS ADCON PRESENT
.G10     DC    X'00'     (TO MAINTAIN ALIGNMENT)
.******* INITIALIZE REGISTER 0 -- ECB ADDRESS
.G11     AIF   (NOT(&ADRISAD AND &ECBISAD)).G12
.* * * * LOAD MULTIPLE IF BOTH ADCON'S HAVE BEEN CREATED
         LM    0,1,*-8   INITIALIZE PARM REGS
         AGO   .G18
.G12     AIF   (&ECBINR0).G15
         AIF   (&ECBNULL).G14
         AIF   (&ECBISAD).G13
.* * * * LOAD FROM REGISTER IF ECB ADDR NOT AN ADCON
         &OP    0,&ECBREG     INITIALIZE PARM REG 0
         AGO   .G15
.* * * * LOAD FROM PARM LIST IF ECB ADDR IS AN ADCON
.G13     L     0,*-6     INITIALIZE PARM REG 0
         AGO   .G15
.* * * * CLEAR REG 0 IF ECB OMITTED (PGFREE ONLY)
.G14     SR    0,0       INDICATE NO PURGE ECB SPECIFIED
.******* REGISTER 0 INITIALIZATION COMPLETE -- START REG 1
.G15     AIF   (&ADRINR1).G17
         AIF   (&ADRISAD).G16
.* * * * LOAD FROM REGISTER IF LIST/VIRTUAL ADDR NOT AN ADCON
         LR    1,&LA(1)&A(1)   INITIALIZE PARM REG 1
         AGO   .G17
.G16     ANOP
&INDEX2  SETA  (6-2*&ECBINR0)
.* * * * LOAD FROM PARM LIST IF LIST/VIRTUAL ADDR IS AN ADCON
         L     1,*-&INDEX2         INITIALIZE PARM REG 1
.G17     AIF   (&ADRISAD).G18
&INDEX2  SETA  (6+2*&ECBISAD-2*&ECBINR0-2*&ADRINR1)
.* * * * SET REG 1 BYTE 0 (MODE OR FUNCTIONS) UNLESS ALREADY LOADED
         ICM   1,8,*-&INDEX2     SET HIGH-ORDER BYTE
.G18     AIF   (&RFORM).CLREG
.******* REGISTER INITIALIZATION COMPLETE EXCEPT FOR CLEARING REG 15
.******* INITIALIZE LIST IF REQUIRED
.* * * * FOR L-FORM ONLY, SET PARM LIST BYTES 0 AND 4
         NI    0(1),X'80' CLEAR PARM LIST BYTE 0 FUNCTION BITS
         OI    0(1),B'0&FX(1)&FR(1)&LD(1)&P(4)0&P(1)0' AND RESET
         NI    4(1),X'C0' CLEAR PARM LIST BYTE 4 FUNCTION BITS
         OI    4(1),B'00&P(3)0&P(2)000' AND RESET
         AGO   .GEND
.CLREG   SR    15,15     INDICATE NO END ADDRESS
.* * * * PARAMETER LIST COMPLETE -- ISSUE SUPERVISOR CALL
.GEND    SVC   113  INVOKE SERVICE ROUTINE
         MEND
./ ADD NAME=IHBRELNO 0100-19106-19106-1238-00005-00005-00000-MZAP78  17
         MACRO                                                          0000000
         IHBRELNO                                                       0000000
         DS    0F    ALIGN CVT ON FULL WORD BOUNDRY                     0000000
CVTRELNO DC    CL4'017 '    RELEASE NUMBER                              0000000
         MEND                                                           0000000
./ ADD NAME=IKJTJB   0100-19106-19106-1238-00168-00168-00000-MZAP78  18
*        %GOTO TJBBSL   ; /*
         MACRO
         IKJTJB
* LEVEL=21120000   SYSTEMS=OS/VS2
TJB      DSECT
TJBTSB   DS    A .       ADDR OF TSB FOR THIS JOB,0-STARTED BY OPERATOR
TJBATTN  DS    CL1 .     NUMBER OF UNPROCESSED ATTNS FOR THIS JOB
TJBSTAX  DS    CL1 .     NUMBER OF STAX EXITS YET UNSCHEDULED
TJBSTAT  DS    X .       STATUS FLAGS
TJBNJB   EQU   X'80' .   NO JOB,THIS TJB IS CURRENTLY UNUSED
TJBINCOR EQU   X'40' .   USER IN CORE
TJBLOGON EQU   X'20' .   LOGON START,SET BY TIOC AT DIAL-UP,TSC RESET
TJBIWAIT EQU   X'10' .   INPUT WAIT,TERMINAL JOB IS IN INPUT WAIT
TJBOWAIT EQU   X'08' .   OUTPUT WAIT,TERMINAL JOB IS IN OUTPUT WAIT
TJBSILF  EQU   X'04' .   SYSTEM INITIATED LOGOFF
TJBDISC  EQU   X'02' .   DISCONNECT SET TO REQUEST TIOC TO DISCON LINE
TJBSILF2 EQU   X'01' .   SYSTEM INITIATED LOGOFF
TJBSTAT2 DS    X .       STATUS FLAGS
TJBHUNG  EQU   X'80' .   HUNG UP
TJBHOLD  EQU   X'40' .   USER IS IN OWAIT DUE TO HOLD OPTIONS
TJBOCAB  EQU   X'20' .   TSO FAILURE RESULTING IN OUT-OF-CORE ABEND
TJBRNAV  EQU   X'10' .   USER CANNOT BE LOGGED ON BECAUSE MACHINE CHECK
*                        IN REGION OR NO REGION LARGE ENOUGH
TJBQUIS  EQU   X'04' .   QUIESCE STARTED FOR USER
TJBUSERR EQU   X'02' .   USER READY TO RUN
TJBDEAD  EQU   X'01' .   INDICATE ABEND RECURSION TO IKJEAT07
TJBEXTNT DS    A .       POINTER TO TJB IN SWAPPED OUT JOB IMAGE
TJBRCB   DS    A .       POINTER TO RCB FOR THIS REGION
         DS    A .
TJBSPCT  DS    A .       POINTER TO USER SPCT
         DS    H .       OFFSET IN TT MAP OF TT MAP Q FOR THIS USER
TJBRSTOR DS    X .       RESTORE FLAGS, TESTED BY RCT RESTORE
TJBOWP   EQU   X'80' .   POST OUTPUT WAIT,SET BY TIOC,ENDS AN OWAIT
TJBIWP   EQU   X'40' .   POST INPUT WAIT,SET BY TIOC,ENDS AN IWAIT
*        EQU   X'20' .   RESERVED
TJBLOGP  EQU   X'10' .   POST LOGON,POST ECB WAITED ON BY LOGON IMAGE
TJBLWAIT EQU   X'08' .   USER IN LONG WAIT,SWAP OUT IF NOT MADE READY
*                        BY RESTORE PROCESSING
TJBDDRD  EQU   X'04' .   WHEN ON RESTORE WILL RESET DDR NON
*                        DISPATCHABILITY BIT
TJBFAT   EQU   X'02' .   AN ATTN EXIT IS REQ FOR THIS USER
TJBDDRND EQU   X'01' .   INDICATES TO RESTORE TO SET TCB NON
*                        DISPATCHABILE WHEN JOB SWAPPED IN
         DS    CL1 .
TJBUSER  DS    CL8 .     USERID OF THIS JOB OWNER,PADDED RT WITH BLANKS
TJBIPPB  DS    F .       IPPB CHAIN OF ECB'S TO BE POSTED BY RESTORE
TJBNEWID DS    CL1 .     RGN ID INTO WHICH THIS USER SHOULD BE LOGGED
*                        ON. 0 IF SELECTED BY DRIVER
TJBFLUSL DS    CL1 .     STAX LEV OF LAST STAX ISSUED WITH NOPURGE
*                        OPTION
TJBTJID  DS    CL2 .     TERMINAL JOB ID
TJBMONI  DS    X .       MONITOR CMD INDICATING INFO REQUESTED
TJBMDSN  EQU   X'80' .   DSNAMES
TJBMJBN  EQU   X'40' .   JOBNAMES
TJBMSES  EQU   X'20' .   SESSION
TJBMSPA  EQU   X'10' .   SPACE
TJBMSTA  EQU   X'08' .   STATUS
TJBGETBF EQU   X'04' .   THIS BIT INDICATES TPUT SHOULD ATTEMPT TO GET
*                        ADDITIONAL BUFFERS FOR USER BEFORE GOING INTO
*                        A WAIT STATE
TJBSTAT3 DS    X .       STATUS FLAGS
TJBDISC2 EQU X'80' .     INDICATES TO IKJEAT03 WE ARE DISCONNECTING
*                        THIS TJB AND NEXT TIME THRU IF THIS BIT IS
*                        ON DO NOT DECREMENT RCB USE COUNT
TJBLOGTM EQU   X'20'     INDICATES TO LOGON THAT TERMINATION
*                        IS REQUESTED
TJBOCPR  EQU   X'10' .   PREVENTS IKJVAT07 RECURSION
TJBLINE  DS    CL2 .     CONTAINS BINARY REP OF THE UNIT ADDRESS OF
*                        THE LINE BEING USED.
TJBEND   DS    0F
**/
         MEND
* %TJBBSL  :  ;
* DECLARE
*   1 TJB      BASED(TJBPTR),
*    2 TJBTSB   PTR(31),             /* ADDR OF TSB FOR THIS
*                                       JOB,0-STARTED BY OPERATOR    */
*    2 TJBATTN  CHAR(1),             /* NUMBER OF UNPROCESSED ATTNS
*                                       FOR THIS JOB                 */
*    2 TJBSTAX  CHAR(1),             /* NUMBER OF STAX EXITS YET
*                                       UNSCHEDULED                  */
*    2 TJBSTAT  CHAR(1),             /* STATUS FLAGS                 */
*     3 TJBNJB   BIT(1),             /* NO JOB,THIS TJB IS CURRENTLY
*                                       UNUSED                       */
*     3 TJBINCOR BIT(1),             /* USER IN CORE                 */
*     3 TJBLOGON BIT(1),             /* LOGON START,SET BY TIOC AT
*                                       DIAL-UP,TSC RESET            */
*     3 TJBIWAIT BIT(1),             /* INPUT WAIT,TERMINAL JOB IS
*                                       IN INPUT WAIT                */
*     3 TJBOWAIT BIT(1),             /* OUTPUT WAIT,TERMINAL JOB IS
*                                       IN OUTPUT WAIT               */
*     3 TJBSILF  BIT(1),             /* SYSTEM INITIATED LOGOFF      */
*     3 TJBDISC  BIT(1),             /* DISCONNECT SET TO REQUEST
*                                       TIOC TO DISCON LINE          */
*     3 TJBSILF2 BIT(1),             /* SYSTEM INITIATED LOGOFF      */
*    2 TJBSTAT2 CHAR(1),             /* STATUS FLAGS                 */
*     3 TJBHUNG  BIT(1),             /* HUNG UP                      */
*     3 TJBHOLD  BIT(1),             /* USER IS IN OWAIT DUE TO HOLD
*                                       OPTIONS                      */
*     3 TJBOCAB  BIT(1),             /* TSO FAILURE RESULTING IN
*                                       OUT-OF-CORE ABEND            */
*     3 TJBRNAV  BIT(1),             /* USER CANNOT BE LOGGED ON
*                                       BECAUSE MACHINE CHECK IN
*                                       REGION OR NO REGION LARGE
*                                       ENOUGH BITS                  */
*     3 * BIT(1),                    /* RESERVED                     */
*     3 TJBQUIS  BIT(1),             /* QUIESCE STARTED FOR USER     */
*     3 TJBUSERR BIT(1),             /* USER READY TO RUN            */
*     3 TJBDEAD  BIT(1),             /* INDIACTE ABEND RECURSION
*                                       TO IKJEAT07                  */
*    2 TJBEXTNT PTR(31),             /* POINTER TO TJB IN SWAPPED
*                                       OUT JOB IMAGE                */
*    2 TJBRCB   PTR(31),             /* POINTER TO RCB FOR THIS
*                                       REGION                       */
*    2 *        PTR(31),             /* RESERVED                     */
*    2 TJBSPCT PTR(31),              /* PTR TO USER SPCT             */
*    2 *    FIXED(15),               /* RESERVED                     */
*    2 TJBRSTOR CHAR(1),             /* RESTORE FLAGS, TESTED BY RCT
*                                       RESTORE                      */
*     3 TJBOWP   BIT(1),             /* POST OUTPUT WAIT,SET BY
*                                       TIOC,ENDS AN OWAIT           */
*     3 TJBIWP   BIT(1),             /* POST INPUT WAIT,SET BY
*                                       TIOC,ENDS AN IWAIT EQU       */
*     3 *        BIT(1),             /* RESERVED                     */
*     3 TJBLOGP  BIT(1),             /* POST LOGON,POST ECB WAITED
*                                       ON BY LOGON IMAGE            */
*     3 TJBLWAIT BIT(1),             /* USER IN LONG WAIT,SWAP OUT
*                                       IF NOT MADE READY BY RESTORE
*                                       PROCESSING EQU               */
*     3 TJBDDRD  BIT(1),             /* WHEN ON RESTORE WILL RESET DDR
*                                       NON DISPATCHABILITY BIT      */
*     3 TJBFAT   BIT(1),             /* AN ATTN EXIT IS REQ FOR THIS
*                                       USER                         */
*     3 TJBDDRND BIT(1) ,            /* INDICATES TO RESTORE TO SET
*                                       TCB NON DISPATCHABILE WHEN
*                                       JOB SWAPPED IN               */
*    2 *        CHAR(1),             /* RESERVED                     */
*    2 TJBUSER  CHAR(8),             /* USERID OF THIS JOB
*                                       OWNER,PADDED RT WITH BLANKS  */
*    2 TJBIPPB  FIXED(31),           /* IPPB CHAIN OF ECB'S TO BE
*                                       POSTED BY RESTORE            */
*    2 TJBNEWID PTR(8),              /* RGN ID INTO WHICH THIS USER
*                                       SHOULD BE LOGGED ON. 0 IF
*                                       SELECTED BY DRIVER           */
*    2 TJBFLUSL CHAR(1),             /* STAX LEV OF LAST STAX ISSUED
*                                       WITH NOPURGE OPTION          */
*    2 TJBTJID  FIXED(15),           /* TERMINAL JOB ID              */
*    2 TJBMONI  CHAR(1),             /* MONITOR CMD INDICATING INFO
*                                       REQUESTED                    */
*     3 TJBMDSN  BIT(1),             /* DSNAMES                      */
*     3 TJBMJBN  BIT(1),             /* JOBNAMES                     */
*     3 TJBMSES  BIT(1),             /* SESSION                      */
*     3 TJBMSPA  BIT(1),             /* SPACE                        */
*     3 TJBMSTA  BIT(1),             /* STATUS                       */
*     3 TJBGETBF BIT(1),             /* THIS BIT INDICATES TPUT SHOULD
*                                       ATTEMPT TO GET ADDITIONAL
*                                       BUFFERS FOR USER BEFORE GOING
*                                       INTO A WAIT STATE            */
*     3 *        BIT(1),             /* RESERVED                     */
*     3 *        BIT(1),             /* RESERVED                     */
*    2 TJBSTAT3 CHAR(1),             /* STATUS FLAGS                 */
*     3 TJBDISC2 BIT(1),             /* TJB GOING TO DISCONNECT      */
*     3 * BIT(1),                    /* RESERVED                     */
*     3 TJBLOGTM BIT(1),             /* INDICATES TO LOGON THAT
*                                       TERMINATION IS REQUESTED     */
*     3 TJBOCPR BIT(1),              /* PREVENTS IKJVAT07 RECURSION  */
*    2 TJBLINE  CHAR(2);             /* CONTAINS THE BINARY REP OF THE
*                                       UNIT ADR OF LINE BEING USED  */
./ ADD NAME=IKJTSCVT 0100-19106-19106-1238-00158-00158-00000-MZAP78  18
*        %GOTO TSCVTBSL ; /*
         MACRO
         IKJTSCVT
* LEVEL=21310000   SYSTEMS=AOS/2
TSCVT    DSECT
TSCVTTJB DS    A .      POINTER TO TJB TABLE
TSCVTRCB DS    A .      POINTER TO RCB TABLE
TSCVTRPT DS    A .      PTR TO REFERENCE POINTER TABLE
TSCVTFLG DS    X .      FLAGS TO INDICATE FUNCT REQUESTED OF TSC
         DS    X
TSCSWPBG EQU   X'40' .  SWAP SHOULD BE STARTED
TSCLOGON EQU   X'20' .  A LOGON IS TO BE PROCESSED
TSCDISC  EQU   X'10' .  A DISCONNECT IS TO BE PROCESSED
TSCVTTHR EQU   X'08' .  SYSTEM IS THRASHING
TSCVTFL1 DS    X .      FLAGS TO INDICATE FUNCT REQUESTED OF TSC
         DS    X
TSCSSTOP EQU   X'80' .  SYSTEM STOP REQUESTED OR REQUIRED
TSCRSTOP EQU   X'40' .  REGION STOP REQUESTED
TSCASTOP EQU   X'20' .  ABEND-STOP TS FLG. SET BY TSO/RMS IF TCAM MCH'S
*                       SET BY TCAM STAE EXIT IF TCAM ABENDS
TSCTSTOP EQU   X'10'    RMS/MCH INTERFACE HAS STOPPED TSC
TSCVTI04 DS    A .      ADDRESS OF ENTRY POINT - IKJVAI04
TSCVTCUS DS    1H .     CURR NO. OF USERS LOGGED ON TSO
TSCVTLUS DS    H .      CURRENT LIMIT NO. OF USERS LOGGED ON TO TSO
*                       SET BY TSC
TSCVTNTJ DS    1H .     NO.TJB-TSB'S ALLOC BY TSO INITIALLY
TSCVTSZU DS    1H .     SIZE OF TJB
TSCVTCTR DS    1H .     NO. OF RCB'S ALLOC BY TSO INITIALLY
TSCVTMUS DS    H .      MAX NUMBER OF USERS LOGGED ON TO TSO
*                       SET BY START AND MODIFY COMMANDS (TSC)
TSCVTSAV DS    A .      PTR TO SAV AREA FOR TSC,TSIP&TS DISP
TSCVTECB DS    A .      PTR TO TSECBTAB CTL BLK OF ECB'S
TSCVTSIA DS    A .      PTR TO TSIA
TSCVTICB DS    A .      PTR TO TSICB
TSCVTI01 DS    A .      ADDRESS OF ENTRY POINT IKJEAI01 TSIP BR ENTRY
TSCVTTQE DS    A .      PTR TO TQE FOR TSO'S TIME SLICING
TSCVTI02 DS    A .      ADDRESS OF ENTRY POINT IKJEAI02 IN TS DISPATCH
TSCVTI03 DS    A .      ADDRESS OF ENTRY POINT IKJEAI03 IN TS DISPATCH
TSCVTD02 DS    A .      ADDRESS OF ENTRY POINT IKJEAD02 IN TS DRIVER
TSCVTLCQ DS    A .      ADDR OF TOP ELEM ON LOGON COMM. QUE
TSCVTTRB DS    A .      ADDR OF TRACE CTL BLK CHAIN
TSCVTLPA DS    A .      ADDR OF 1ST CDE IN TS LINK PACK AREA
TSCVTSLF DS    A .      ADDR OF SYSTEM INITIATED LOGOFF - IKJEAL00
TSCVTTSC DS    A .      ADDR OF THE  TSC TASK'S TCB. (TSC)
TSCVTSPL DS    A .      ADDRESS OF START PARAMETER LIST
TSCVTRSZ DS    H .      MIN REGION SIZE FOR LOGON - SET TO ZERO
         DS    CL2 .    RESERVED
TSCVTSVT DS    CL4 .    SVCTBL ENTRY FOR TSIP PRIOR TO START TS
TSCVTSVQ DS    CL4 .    SVCTBL ENTRY FOR QTIP PRIOR TO START TS
TSCVTABN DS    A .      ADDR OF OUT-OF-CORE ABEND RTN(IKJEAT07)
TSCVTD03 DS    A .      ADDR OF EP IKJEAD03 IN TS DRIVER
TSCVTFLM DS    A .      ADDRESS OF ENTRY POINT - IKJEFLM
TSCVTQTP DS    A .      ADDRESS OF ENTRY FOR QTIP SVC - IKJGGQT1
TSCVTT08 DS    A .      ENTRY POINT ADDRESS OF IKJEAT08
TSCVTDMP DS    A .      ADDRESS OF TSO DUMP CONTROL BLOCK-IKJTSDMP
TSCVTT06 DS    A .      ADDRESS OF TCB FOR IKJEAT06
TSCVTLS3 DS    A .      ADDRSS OF LOGON OUT OF CORE ABEND RTN
TSCVTSMI DS    A .      ADDRESS OF SMITDSN CONTROL BLOCK
TSCVTMSG DS    A .      BRANCH ENTRY POINT FOR IKJVAMSG
TSCVTSCN DS    A .      BRANCH ENTRY POINT FOR IKJVASCN
TSCVTR01 DS    A .      ADDRESS OF ENTRY POINT - IKJVAR01
**/
         MEND
* %TSCVTBSL:  ;
* DECLARE
*   1 TSCVT    BASED(TSCVTPTR),
*    2 TSCVTTJB PTR(31),             /* POINTER TO TJB TABLE         */
*    2 TSCVTRCB PTR(31),             /* POINTER TO RCB TABLE         */
*    2 TSCVTRPT PTR(31),             /* PTR TO REFERENCE POINTER
*                                       TABLE                        */
*    2 TSCVTFLG  CHAR(2),            /*  FLAGS TO INDICATE FUNCT
*                                       REQUESTED OF TSC             */
*     3 * BIT(1),                    /* SPARE                        */
*     3 TSCSWPBG BIT(1),             /* SWAP SHOULD BE STARTED       */
*     3 TSCLOGON BIT(1),             /* A LOGON IS TO BE PROCESSED   */
*     3 TSCDISC  BIT(1),             /* A DISCONNECT IS TO BE
*                                       PROCESSED BITS               */
*     3 TSCVTTHR BIT(1),             /* SYSTEM IS THRASHING          */
*    2 TSCVTFL1  CHAR(2),            /*  FLAGS TO INDICATE FUNCT
*                                       REQUESTED OF TSC             */
*     3 TSCSSTOP BIT(1),             /* SYSTEM STOP REQUESTED AND
*                                       TSC IS STOPPING              */
*     3 TSCRSTOP BIT(1),             /* REGION STOP REQUESTED        */
*     3 TSCASTOP BIT(1),             /* ABEND-STOP TS FLG. SET BY
*                                       TSO/RMS IF TCAM MCH'SSET BY
*                                       TCAM STAE EXIT IF TCAM
*                                       ABENDS  BITS                 */
*     3 TSCTSTOP BIT(1),             /* RMS/MCH INTERFACE HAS STOPPED
*                                       TSC                          */
*     3 *        BIT(1),             /* RESERVED                     */
*     3 *        BIT(1),             /* RESERVED                     */
*     3 *        BIT(1),             /* RESERVED                     */
*     3 *        BIT(1),             /* RESERVED                     */
*    2 TSCVTI04 PTR(31),             /* ADDRESS OF IKJVAI04 IN TS
*                                       DISPATCHER                   */
*    2 TSCVTCUS FIXED(15),           /* CURR NO. OF USERS LOGGED ON
*                                       TSO                          */
*    2 TSCVTLUS FIXED(15),           /* CURRENT LIMIT NO. OF USERS
*                                       LOGGED ON TO TSO SET BY TSC  */
*    2 TSCVTNTJ FIXED(15),           /* NO.TJB-TSB'S ALLOC BY TSO
*                                       INITIALLY                    */
*    2 TSCVTSZU FIXED(15),           /* SIZE OF TJB                  */
*    2 TSCVTCTR FIXED(15),           /* NO. OF RCB'S ALLOC BY TSO
*                                       INITIALLY                    */
*    2 TSCVTMUS FIXED(15),           /* MAX NUMBER OF USERS LOGGED
*                                       ON TO TSO SET BY START AND
*                                       MODIFY COMMANDS (TSC)        */
*    2 TSCVTSAV PTR(31),             /* PTR TO SAV AREA FOR
*                                       TSC,TSIP&TS DISP             */
*    2 TSCVTECB PTR(31),             /* PTR TO TSECBTAB CTL BLK OF
*                                       ECB'S                        */
*    2 TSCVTSIA PTR(31),             /* PTR TO TSIA                  */
*    2 TSCVTICB PTR(31),             /* PTR TO TSICB                 */
*    2 TSCVTI01 PTR(31),             /* ADDRESS OF ENTRY POINT
*                                       IKJEAI01 TSIP BR ENTRY       */
*    2 TSCVTTQE PTR(31),             /* PTR TO TQE FOR TSO'S TIME
*                                       SLICING                      */
*    2 TSCVTI02 PTR(31),             /* ADDRESS OF ENTRY POINT
*                                       IKJEAI02 IN TS DISPATCH      */
*    2 TSCVTI03 PTR(31),             /* ADDRESS OF ENTRY POINT
*                                       IKJEAI03 IN TS DISPATCH      */
*    2 TSCVTD02 PTR(31),             /* ADDRESS OF ENTRY POINT
*                                       IKJEAD02 IN TS DRIVER        */
*    2 TSCVTLCQ PTR(31),             /* ADDR OF TOP ELEM ON LOGON
*                                       COMM. QUE                    */
*    2 TSCVTTRB PTR(31),             /* ADDR OF TRACE CTL BLK CHAIN  */
*    2 TSCVTLPA PTR(31),             /* ADDR OF 1ST CDE IN TS LINK
*                                       PACK AREA                    */
*    2 TSCVTSLF FIXED(31),           /* SYSTEM INIATED LOGOFF        */
*    2 TSCVTTSC PTR(31),             /* ADDR OF THE                  */
*    2 TSCVTSPL PTR(31),             /* ADDRESS OF START PARAMETER
*                                       LIST                         */
*    2 TSCVTRSZ FIXED(15),           /* MIN REGION SIZE FOR LOGON    */
*    2 *        CHAR(2),             /* RESERVED                     */
*    2 TSCVTSVT CHAR(4),             /* SVCTBL ENTRY FOR TSIP PRIOR
*                                       TO START TS                  */
*    2 TSCVTSVQ CHAR(4),             /* SVCTBL ENTRY FOR QTIP PRIOR
*                                       TO START TS                  */
*    2 TSCVTABN PTR(31),             /* ADDR OF OUT-OF-CORE ABEND
*                                       RTN(IKJEAT07)                */
*    2 TSCVTD03 PTR(31),             /* ADDR OF EP IKJEAD03 IN TS
*                                       DRIVER                       */
*    2 TSCVTFLM PTR(31),             /* ADDR OF EP - IKJEFLM         */
*    2 TSCVTQTP PTR(31),             /* ADDR OF EP OF QTIP SVC -
*                                       IKJGGQT1                     */
*    2 TSCVTT08 PTR(31),             /* ADDR OF EP - IKJEAT08        */
*    2 TSCVTDMP PTR(31),             /* ADDR OF TSO DUMP CONTROL
*                                        BLOCK - IKJTSDMP            */
*    2 TSCVTT06 PTR(31),             /* ADDR OF TCB FOR IKJEAT06     */
*    2 TSCVTLS3 PTR(31),             /* ADDR OF LOGON OUT OF CORE    */
*    2 TSCVTSMI PTR(31),             /* ADDRESS OF SMITDSN CONTROL
*                                       BLOCK                        */
*    2 TSCVTMSG PTR(31),             /* BRANCH ENTRY POINT FOR IKJVAMSG
*                                                                    */
*    2 TSCVTSCN PTR(31),             /* BRANCH ENTRY POINT FOR IKJVASCN
*                                                                    */
*    2 TSCVTR01 PTR(31);             /* ADDRESS OF IKJVAR01.         */
*
./ ADD NAME=MODESET  0100-19106-19106-1238-00148-00148-00000-MZAP78  18
         MACRO
&NAME    MODESET &KEY=,&MODE=,&ENABLE=,&SYSMASK=,&REG=,&MF=
         LCLA  &COUNT,&SAVE1,&SAVE2
.* THE FOLLOWING ARE THE LOCAL SET SYMBOLS FOR THE 4 BYTE PARM LIST
         LCLB  &B0,&B1,&B2,&B3,&B4,&B5,&B6,&B7
         LCLB  &B8,&B9,&B10,&B11,&B12,&B13,&B14,&B15
         LCLB  &B16,&B17,&B18,&B19,&B20,&B21,&B22,&B23
         LCLB  &B24,&B25,&B26,&B27,&B28,&B29,&B30,&B31
         LCLC  &A,&B
         AIF  ((T'&KEY EQ 'O') AND (T'&MODE EQ 'O') AND (T'&ENABLE EQ 'X
               O') AND (T'&SYSMASK EQ 'O') AND (T'&MF EQ 'O') AND (T'&RX
               EG EQ 'O')).ERROR9
         AIF   ('&REG' EQ '(1)').REG   REG PARAMETER SPECIFIED
         AIF   (T'&REG NE 'O').ERROR1  WRONG REG SPECIFIED
         AIF   ((T'&MF NE 'O') AND ('&MF' NE 'L')).MF
         AIF   (T'&KEY EQ 'O').MDE     KEY NOT SPECIFIED
         AIF   (('&KEY' NE 'ZERO') AND ('&KEY' NE 'NZERO')).ERROR2
&B26     SETB  1
&B27     SETB  ('&KEY' EQ 'ZERO')      SET 0 KEY IF ZERO SPECIFIED
.MDE     ANOP
         AIF   (T'&MODE EQ 'O').ENAB   MODE NOT SPECIFIED
         AIF   (('&MODE' NE 'PROB') AND ('&MODE' NE 'SUP')).ERROR3
&B29     SETB  1
&B28     SETB  ('&MODE' EQ 'SUP')      INDICATE SUPV STATE IF SUP SPEC
.ENAB    ANOP
         AIF   (T'&ENABLE EQ 'O').SMSK ENABLE OPERAND NOT SPECIFIED
         AIF   (('&ENABLE' NE 'YES') AND ('&ENABLE' NE 'NO')).ERROR4
&B30     SETB  1
&B31     SETB  ('&ENABLE' EQ 'NO')     INDICATE DISABLE IF REQUESTED
.SMSK    ANOP
         AIF   (T'&SYSMASK EQ 'O').MF  SYSMASK NOT SPECIFIED
         AIF   ('&SYSMASK'(1,1) NE '(').ERROR5
.AGAIN   ANOP
&COUNT   SETA  &COUNT+1
&B5      SETB  ('&SYSMASK(&COUNT)' EQ 'RELOC=YES')
&B6      SETB  ('&SYSMASK(&COUNT)' EQ 'IO=YES')
&B7      SETB  ('&SYSMASK(&COUNT)' EQ 'EXT=YES')
&B13     SETB  ('&SYSMASK(&COUNT)' EQ 'RELOC=NO')
&B14     SETB  ('&SYSMASK(&COUNT)' EQ 'IO=NO')
&B15     SETB  ('&SYSMASK(&COUNT)' EQ 'EXT=NO')
&SAVE1   SETA  &SAVE1+(&B5*4)+(&B6*2)+(&B7)
&SAVE2   SETA  &SAVE2+(&B13*4)+(&B14*2)+(&B15)
         AIF   (&B5+&B6+&B7+&B13+&B14+&B15 NE 1).ERROR5
         AIF   (&COUNT NE N'&SYSMASK).AGAIN  WAS THAT THE LAST ONE?
&B24     SETB  (&SAVE1 GT 0)
&B25     SETB  (&SAVE2 GT 0)
         AIF   (&B25).INVERT           INVERT THE AND MASK
         AGO   .SET3
.INVERT  ANOP
&SAVE2   SETA  255-&SAVE2              INVERT THE AND MASK
.SET3    ANOP
&B5      SETB  (&SAVE1-4 GE 0)
&SAVE1   SETA  (&SAVE1-(&B5*4))
&B6      SETB  (&SAVE1-2 GE 0)
&SAVE1   SETA  (&SAVE1-(&B6*2))
&B7      SETB  (&SAVE1-1 GE 0)
&SAVE1   SETA  (&SAVE1-&B6)
&B8      SETB  (&SAVE2-128 GE 0)
&SAVE2   SETA  (&SAVE2-(&B8*128))
&B9      SETB  (&SAVE2-64 GE 0)
&SAVE2   SETA  (&SAVE2-(&B9*64))
&B10     SETB  (&SAVE2-32 GE 0)
&SAVE2   SETA  (&SAVE2-(&B10*32))
&B11     SETB  (&SAVE2-16 GE 0)
&SAVE2   SETA  (&SAVE2-(&B11*16))
&B12     SETB  (&SAVE2-8 GE 0)
&SAVE2   SETA  (&SAVE2-(&B12*8))
&B13     SETB  (&SAVE2-4 GE 0)
&SAVE2   SETA  (&SAVE2-(&B13*4))
&B14     SETB  (&SAVE2-2 GE 0)
&SAVE2   SETA  (&SAVE2-(&B14*2))
&B15     SETB  (&SAVE2-1 GE 0)
.MF      ANOP
         AIF   (T'&MF NE 'O').CK2      WAS MF OMITTED?
         CNOP  0,4
&NAME    BAL   1,*+8
         AGO   .DC
.CK2     ANOP
         AIF   ('&MF' NE 'L').CK3      WAS MF=L SPECIFIED?
&NAME    DS    0F
.DC      ANOP
         DC    B'&B0&B1&B2&B3&B4&B5&B6&B7&B8&B9&B10&B11&B12&B13&B14&B15X
               &B16&B17&B18&B19&B20&B21&B22&B23&B24&B25&B26&B27&B28&B29X
               &B30&B31'
         AIF   (T'&MF EQ 'O').LD
         MEXIT
.LD      ANOP
         L     1,0(1)
         AGO   .SVC
.CK3     ANOP
         AIF   ('&MF(1)' EQ 'E').CK4
         AGO   .ERROR6
.CK4     ANOP
         AIF  ((T'&KEY NE 'O') OR (T'&MODE NE 'O') OR (T'&ENABLE NE 'O'X
               ) OR (T'&SYSMASK NE 'O') OR (T'&REG NE 'O')).ERROR8
.CK6     AIF   ('&MF(2)' NE '(1)').CK5
&NAME    L     1,0&MF(2)
         AGO   .SVC
.CK5     ANOP
         AIF   ('&MF(2)'(1,1) EQ '(').ERROR1
         AIF   (T'&MF(2) EQ 'N').ERROR1
&NAME    L     1,&MF(2)
         AGO   .SVC
.REG     AIF  ((T'&KEY EQ 'O') AND (T'&MODE EQ 'O') AND (T'&ENABLE EQ 'X
               O') AND (T'&SYSMASK EQ 'O') AND (T'&MF EQ 'O')).SVC1
.* IF REG (1) SPECIFIED AND ALL OTHERS OMITTED, GENERATE SVC
&A       SETC  'REG'
         AGO   .M1
.SVC1    ANOP
&NAME    SVC   107
         MEXIT
.SVC     ANOP
         SVC   107
         MEXIT
.ERROR1  ANOP
&A       SETC  'REG'
&B       SETC  '&REG'
.M2      ANOP
         MNOTE 12,'***  IHB002 INVALID &A SPECIFIED-&B'
         MEXIT
.ERROR2  ANOP
&A       SETC  'KEY'
&B       SETC  '&KEY'
         AGO   .M2
.ERROR3  ANOP
&A       SETC  'MODE'
&B       SETC  '&MODE'
       AGO   .M2
.ERROR4  ANOP
&A       SETC  'ENABLE'
&B       SETC  '&ENABLE'
         AGO   .M2
.ERROR5  ANOP
&A       SETC  'SYSMASK'
&B       SETC  '&SYSMASK(&COUNT)'
         AGO   .M2
.ERROR6  ANOP
&A       SETC  'MF'
&B       SETC  '&MF'
         AGO   .M2
.ERROR8  ANOP
&A       SETC  'MF=E'
.M1      ANOP
         MNOTE 12,'***  IHB237 &A SPECIFIED WITH OTHER OPERAND(S).'
         MEXIT
.ERROR9  ANOP
         MNOTE 12,'***  IHB004 REQUIRED OPERAND NOT SPECIFIED'
         MEND
./ ADD NAME=MZAPDBUG 0100-19106-19106-1238-00326-00326-00000-MZAP78  18
MZAPDBUG TITLE 'MOREZAP DEBUG PROCESSOR - COPYRIGHT 1975 SHMUEL METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         SPACE 5
         COPY  MZGBL
         MZSET
         PUNCH '         ALIAS MZAPDBUG'
         TITLE 'MOREZAP DEBUG PROCESSOR'
         MZHED 'MOREZAP DEBUG PROCESSOR'
MZAPDBUG MZENT
         OI    SW3,DUMPSW               IN CASE OF NOMON
         L     R7,HEAD                  1ST V/R ENTRY
         USING VRSECT,R7
         OI    SW1,DMPSW                SET UP TITLE
         BAL   R14,EJECT
         MVC   HDATA,BLANKARD
         MVC   HDATA(L'DBHED),DBHED
         MZHEX HDATA+L'DBHED,SW1,2,BL=','
         MZHEX HDATA+L'DBHED+3,SW2,2,BL=','
         MZHEX HDATA+L'DBHED+6,SW3,2,BL=','
         MZHEX HDATA+L'DBHED+9,SW4,2
         EX    0,BLCARD
         BAL   R14,PUTGOT
INSECT   LA    R7,0(R7)                 HI BYTE OF ADDR TO 0
         LTR   R7,R7                    END OF CHAIN?
         BNZ   SWAT
NADER    NI    SW1,255-DMPSW            SHUT OFF TITLE
         NI    SW3,255-DUMPSW           NOMON NO LONGER RELEVANT
         L     R12,PUTLOG
         LA    R0,DUMMYVEC
         CR    R0,R12
         BE    SOF
         L     R1,OFDCB(,R12)
         MZSTA R1,SYSP
         TRUNC (1)
         BAL   R14,PUTGOT
         LA    R0,255
         BAL   R14,OFEJECT(,R12)
*        CLOSE (SYSPRINT,LEAVE),TYPE=T  FORCE OUT BUFFERS AND SET
*                                        "SYSOUT DATA EXISTS" IN TIOT
         CLOSE MF=(E,SYSP),TYPE=T
SOF      L     R15,AGRAIL
         TM    SW2,LPASW
         BO    BYBY
         L     R15,AESP
         TM    SW1,CSECTSW
         BO    BYBY
         L     R15,AHOVEL
         TM    SW1,DBEFSW
         BO    BYBY
         L     R15,APATCH
         TM    SW2,VEREPSW
         BO    BYBY
         L     R15,AHOVEL
         TM    SW1,DAFTSW
         BO    BYBY
         L     R15,A#666
BYBY     MZGO
         SPACE 1
SWAT     TM    SW1,DMPSW                USER UPTIGHT?
         BZ    NADER                     YES - STOP DDT
         LA    R0,3                     NEED 3 LINES,
         CLI   VRTYPE,VRREP             VER/REP NEEDS 4
         BNH   SWAT4
         CLI   VRTYPE,VRNAME            NAME & DUMP ALSO NEED 4
         BL    SWAT3
         CLI   VRTYPE,VRDUMPT
         BH    *+8
SWAT4    LA    R0,4
SWAT3    BAL   R14,RESERVE
         EX    0,BLCARD
         ST    R7,0(R13)
         MZHEX IBUF,MZAPMAIN+1,6
         MVC   DBTYPEL,=C'TYPE='
         MZHEX DBTYPED,VRTYPE,2,BL=':'
         SR    R1,R1
         IC    R1,VRTYPE
         SLL   R1,2
         LA    R15,BTBL(R1)
         AR    R1,R1
         LA    R1,NTBL(R1)
         MVC   DBTYPEN,0(R1)
         MVC   DBNXTL,=C'NXT:'
         MZHEX DBNXTD,VRNXT,6
         MVC   DBLINEL,=C'LINE:'
         LH    R0,VRLINE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,15
         UNPK  DBLINED,DOUBLE
         MVC   DBLOCL,=C'LOC:'
         MZHEX DBLOCD,VRLC,6
         BR    R15
         SPACE 1
NTBL     DC    CL8'VER'
         DC    CL8'REP'
         DC    CL8'BASE'
         DC    CL8'INDEX'
         DC    CL8'HINDEX'
         DC    CL8'NAME'
         DC    CL8'DUMP'
         DC    CL8'DUMPA'
         DC    CL8'DUMPT'
         DC    CL8'HDUMP'
         DC    CL8'HDUMPA'
         DC    CL8'HDUMPT'
         DC    CL8'LIB'
         DC    CL8'<- N *'
         DC    CL8'MVC'
         DC    CL8'<- N PTR'
         DC    CL8'-> PTR'
         DC    CL8'-> REF N'
         SPACE 1
BTBL     B     DEBVER                   VER
         B     DEBVER                   REP
         B     LIST1                    BASE
         B     DEBIX                    INDEX
         B     LIST1                    HINDEX
         B     DEBNAME                  NAME
         B     DEBNAME                  DUMP
         B     DEBNAME                  DUMPA
         B     DEBNAME                  DUMPT
         B     DEBHDUMP                 HDUMP
         B     DEBHDUMP                 HDUMPA
         B     DEBHDUMP                 HDUMPT
         B     LIB                      LIB
         B     DEBSAVE                  <- N *    SAVE
         B     DEBVER                   MVC
         B     DEBPOINT                 <- N PTR  REFER
         B     DEBPOINT                 -> PTR    POINT
*        B     DEBSAVE                  -> REF N  UNSAVE
         SPACE 2
DEBSAVE  MVC   DBNDXL,=C'NDX:'
DEBPOINT MVC   DBLENBL,=C'LENB:'
         MZHEX DBLENBD,VRLENB,4
         BAL   R14,PUTGOT
         BAL   R9,ADDFLGS
         MVC   DBIXBL,=C'IXB:'
         MZHEX DBIXBD,VRIXB,4
         MVC   DBPTRL,=C'PTR:'
         B     DEBMVC+6
         SPACE 1
LIB      MVC   DBDCBL,=C'DCB:'
         L     R1,VRDCB
         MZLT  R1,VRDCB
         USING IHADCB,R1
         BZ    LIST1
         MVC   DBDDNL,=C'DDNAME:'
         MVC   DBDDND,DDNAME
         DROP  R1
*        B     LIST1
         SPACE 1
LIST1    BAL   R14,PUTGOT
         EX    0,BLCARD
         BAL   R14,ADDFLAG
*        B     DEBOK
         SPACE 1
DEBOK    BAL   R14,PUTGOT
         EX    0,BLCARD
         BAL   R14,PUTGOT
         L     R7,VRNEXT                GET NEXT V/R ENTRY, IF ANY
         B     INSECT                   PRINT IT
         SPACE 2
ADDFLAG  MVC   DBFLGL,=C'FLG:'
         MZHEX DBFLGD,VRFLG,2
         BR    R14
         SPACE 1
DEBVER   MVC   DBDATLNL,=C'DATLN: XX(DDD-1)'
         MZHEX DBDATLND,VRDATLN,2,BL='('
         SR    R1,R1
         IC    R1,VRDATLN
         LA    R1,1(R1)
         CVD   R1,DOUBLE
         OI    DOUBLE+7,15
         UNPK  DBDATLNT,DOUBLE
         BAL   R14,PUTGOT
         BAL   R9,ADDFLGS
         CLI   VRTYPE,VRMVC
         BE    DEBMVC
         BAL   R14,PUTGOT
         EX    0,BLCARD
         LA    R4,5
         LA    R5,IBUF+75
         LA    R6,DBFLGL
         LA    R1,VRDAT
         SR    R9,R9
         IC    R9,VRDATLN
MOREVER  UNPK  0(5,R6),0(3,R1)
         TR    0(4,R6),HEXTAB-C'0'
         MVI   4(R6),C','
         SH    R9,=H'2'
         BM    ENDVER
         LA    R1,2(R1)
         BXLE  R6,R4,MOREVER
         B     DEBOK
ENDVER   MVI   4(R6),C' '
         B     DEBOK
         SPACE 1
DEBMVC   MVC   DBDSTL,=C'DST:'
         MZHEX DBDSTD,VRPTR+1,6
         B     DEBOK
         SPACE 1
DEBIX    MVC   IBUF+61(7),=C'IXNAME:'
         MVC   IBUF+69(8),VRIXNAME
         B     LIST1
         SPACE 1
DEBNAME  MVC   DBLOCL,=C'BEG:'
         MVC   DBNAMEL,=C'NAME:'
         MVC   DBNAMED,VRNAM
         CLI   VRNAM,C'.'               IS NAME NUC?
         BNE   *+10                      NO
         MVC   DBNAMED,NUCMEM            YES - SET IT TO NUCLEUS MEMBER
         BAL   R14,PUTGOT
         EX    0,BLCARD
         MVC   DBCDEL,=C'CDE:'
         MZHEX DBCDED,VRCDEPTR+1,6
         MVC   DBSIZEL,=C'SIZ:'
         MZHEX DBSIZED,VRSIZE,6
         CLI   VRCSECT,0                IS THERE A CSECT NAME?
         BE    *+16                      NO
         MVC   DBCSECTL,=C'CSECT:'
         MVC   DBCSECTD,VRCSECT
         BAL   R14,ADDFLAG
         MZLT  R1,VRDCBPT
         BZ    DEBOK
         BAL   R14,PUTGOT
         EX    0,BLCARD
         USING IHADCB,R1
         MVC   DBSSIL,=C'SSI:'
         MZHEX DBSSID,VRSSI,8
         MVC   DBDCBPL,=C'DCB:'
         MZHEX DBDCBPD,VRDCBPT+1,6
         MVC   DBLBND,DDNAME
         DROP  R1
         B     DEBOK
         SPACE 1
DEBHDUMP MVC   DBLENL,=C'LEN:'
         MZHEX DBLEND,VRLEN+1,6
         BAL   R14,PUTGOT
         BAL   R9,ADDFLGS
         B     DEBOK
         SPACE 2
ADDFLGS  EX    0,BLCARD
         MVC   DBABSL,=C'ABS:'
         MZHEX DBABSD,VRAB,6
         EX    0,ADDFLAG
         MZHEX DBFLGD,VRFLG,2,BL=','
         MZHEX DBFLGD+3,VRVRFLG,2
         BR    R9
         SPACE 2
SYSP     CLOSE (,LEAVE),MF=L
DBHED    DC    C'MZPD01I VER/REP SNAP. SW='
HEXTAB   DC    C'0123456789ABCDEF'
         LTORG
         PRINT NOGEN
        MZWORK MAIN=YES
MZAPMAIN DSECT
         ORG   IBUF+7
DBTYPEL  DS    C'TYPE='
DBTYPED  DS    CL2,C': '
DBTYPEN  DS    CL8,C
DBNXTL   DS    C'NXT:',C
DBNXTD   DS    CL6,C
DBLINEL  DS    C'LINE:',C
DBLINED  DS    CL5,C
DBBEGL   DS    C'BEG:',C
DBBEGD   DS    CL6,CL3
DBNAMEL  DS    C'NAME:',C
DBNAMED  DS    CL8
         ORG   DBNXTL
DBCDEL   DS    C'CDE:',C
DBCDED   DS    CL6,CL2
DBFLGL   DS    C'FLG:',C
DBFLGD   DS    CL2,C',',CL2,C
DBSIZEL  DS    C'SIZ:',C
DBSIZED  DS    CL6,CL2
DBCSECTL DS    C'CSECT:',C
DBCSECTD DS    CL8
DBSSIL   EQU   DBCDEL,3,C
DBSSID   EQU   DBCDED,8,C
DBDCBPL  EQU   DBSIZEL,3,C
DBDCBPD  EQU   DBSIZED,6,C
DBLBND   EQU   DBCSECTD,8,C
         ORG   DBNXTL
DBDSTL   DS    C'DST:',C
DBDSTD   DS    CL6,CL2
         ORG   DBNXTL
DBPTRL   DS    C'PTR:',C
DBPTRD   DS    CL6,CL2
         ORG   DBBEGL
DBLOCL   DS    C'LOC:',C
DBLOCD   DS    CL6,C
DBIXNAML DS    C'IXNAME:',C
DBIXNAMD DS    CL8
         ORG   DBBEGL
DBNDXL   DS    C'NDX:',C
DBNDXD   DS    CL6,CL3
DBLENBL  DS    C'LENB:',C
DBLENBD  DS    CL4
         ORG   DBLENBL+1
DBIXBL   DS    C'IXB:',C
DBIXBD   DS    CL4
         ORG   DBBEGD+7
DBLENL   DS    C'LEN:',C
DBLEND   DS    CL6
         ORG   DBLOCL
DBABSL   DS    C'ABS:',C
DBABSD   DS    CL6
         ORG   DBLENL
DBDATLNL DS    C'DATLN: XX(DDD-1)'
         ORG   *-9
DBDATLND DS    CL2,C'('
DBDATLNT DS    CL3,C'-1)'
         ORG   DBLOCL
DBDCBL   DS    C'DCB:',C
DBDCBD   DS    CL6,C
DBDDNL   DS    C'DDNAME:',C
DBDDND   DS    CL8
         END
./ ADD NAME=MZAPHELP 0100-19106-19106-1238-00359-00359-00000-MZAP78  18
MZAPHELP TITLE 'MOREZAP CONTROL CARD PROCESSOR - HELP - COPYRIGHT 1975 *
               SHMUEL METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT 1972, 1975 SHMUEL (SEYMOUR J.) METZ.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZHLP MACRO - COPYRIGH*
               T 1975 SHMUEL METZ'
         MACRO
         MZHLP &TXT
         LCLA  &I,&L
&L       SETA  K'&TXT(1)-1
         AIF   ('&TXT(1)'(1,1) NE '''').WORD
&L       SETA  &L-2
&I       SETA  2
.LOOP    AIF   ('&TXT(1)'(&I,2) NE '''''' AND                          *
               '&TXT(1)'(&I,2) NE '&&&&').SINGLE
&L       SETA  &L-1
&I       SETA  &I+1
.SINGLE  ANOP
&I       SETA  &I+1
         AIF   (&I LT K'&TXT(1)-1).LOOP
         DC    AL1(&L),C&TXT(1)
         MEXIT
.WORD    DC    AL1(&L),C'&TXT(1)'
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - HELP - COPYRIGHT 1975 *
               SHMUEL METZ'
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP CONTROL CARD PROCESSOR'
         MZSHD 'HELP'
MZAPHELP MZENT HELP
         MVC   HDATA,BLANKARD
         MVC   HDATA(7),=C'MZPH01I'
         OI    SW1,DMPSW
         OI    SW2,ATTNSW+PROMPTSW
         LA    R4,IBUF+6                OPERAND 1
         LA    R5,74                    LENGTH  1
         LA    R6,HELPTAB               OPERAND 2(NOT USED AS SUCH)
         L     R7,=X'40000000'          SP PAD AND OP 2 LEN=0
         LA    R12,HELPTAB
         NONBL NOGO=HELPALL
         LA    R4,4(,R4)
         SH    R5,H4
         NONBL NOGO=HELPALL
         SR    R7,R7
HELPOP   IC    R7,2(,R12)               GET OPCODE LEN-1
         EX    R7,CLCHELP
         BE    HELPOP1
         LH    R0,0(,R12)               GET OFFSET TO NEXT OPCODE
         AR    R12,R0
         LTR   R0,R0
         BNZ   HELPOP
         EX    0,BLCARD
         MZMVC 'MZPH04I INVALID OPCODE - HELP ALL FORCED'
         BAL   R14,PUTGOT
*        B     HELPALL
         SPACE 1
HELPALL  MVC   HDATA+8(3),=C'ALL'
         EX    0,BLCARD
         MZMVC 'MZPH02I USE HELP <CMD> FOR OPERANDS OF <CMD>'
         BAL   R14,PUTGOT
         LA    R12,HELPTAB              RE-INIT IN CASE OF INV HELP CMD
HELPALL1 EX    0,BLCARD
         MZMVC 'MZPH03I OPCODE'
         IC    R7,2(,R12)               GET OPCODE LEN-1
         EX    R7,MVCHELP
         BAL   R14,PUTHELP
         LH    R0,0(,R12)               GET OFFSET TO NEXT OPCODE
         AR    R12,R0
         LTR   R0,R0
         BNZ   HELPALL1
ENDHELP  NI    SW1,255-DMPSW
         L     R13,4(,R13)
         LM    R14,R12,12(R13)
         L     R15,ACORN-MZAPMAIN(,R10)
         BR    R15
         SPACE 1
SETHELP  MVC   HDATA+8(0),3(R12)
SETHELP1 MVC   IBUF+16(0),5(R12)
CLCHELP  CLC   0(,R4),3(R12)
MVCHELP  MVC   IBUF+15(0),3(R12)
         SPACE 2
HELPOP1  EX    R7,SETHELP
         AR    R12,R7
HELPOP3  CLI   4(R12),X'FF'             LAST MZHLP MACRO?
         BE    ENDHELP
         EX    0,BLCARD
         MZMVC 'MZPH05I OPERAND'
         IC    R7,4(,R12)               GET MZHLP LEN-1
         EX    R7,SETHELP1
         BAL   R14,PUTHELP
         LA    R12,2(R7,R12)
         B     HELPOP3
PUTHELP  TM    SW1,DMPSW                OPERATOR TIRED?
         BZ    ENDHELP                   YES
         B     PUTGOT
         LTORG
         EJECT
HELPTAB  MZOP  KEY
         MZHLP '<NULL>'
         MZHLP '"ASK THE MAN WHO OWNS ONE"'
         DC    X'FF'
         SPACE 1
         MZOP  DEBUG
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  END
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  GO
         MZHLP '<NULL>'
         MZHLP ' ONLY VALID FROM CRT OR CONSOLE'
         DC    X'FF'
         SPACE 1
         MZOP  RESET
         MZHLP '<NULL>'
         MZHLP EOD
         DC    X'FF'
         SPACE 1
         MZOP  NAME
         MZHLP .
         MZHLP '.<CSECT>'
         MZHLP '<NAME>'
         MZHLP '<NAME> <CSECT>'
         DC    X'FF'
         SPACE 1
         MZOP  CVT
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  GOVRFLB
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  HCT
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  IBMORG
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  MSER
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  PATCH
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  QMRES
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  SCVT
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  SMCA
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  TACT
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  TSCVT
         MZHLP '<NULL>'
         DC    X'FF'
         SPACE 1
         MZOP  UCB
         MZHLP '<CUU>'
         DC    X'FF'
         SPACE 1
         MZOP  UCM
         MZHLP BASE
         MZHLP HARDCOPY
         MZHLP MASTER
         MZHLP MCS
         MZHLP PREFIX
         MZHLP 'ID=<DEC UCMID>'
         MZHLP 'UNIT=<CUU>'
         DC    X'FF'
         SPACE 1
         MZOP  USERORG
         MZHLP <NULL>
         DC    X'FF'
         SPACE 1
         MZOP  <-
         MZHLP '<HEX REF DIGIT> *'
         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>'
         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>-<PFX>'
         DC    X'FF'
         SPACE 1
         MZOP  SETPTR
         MZHLP '<HEX REF DIGIT> *'
         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>'
         MZHLP '<HEX REF DIGIT> <PTR DISPLACEMENT> <LENGTH>-<PFX>'
         DC    X'FF'
         SPACE 1
         MZOP  ->
         MZHLP 'REF <HEX REF DIGIT>'
         MZHLP '<PTR DISPLACEMENT> <LENGTH>'
         MZHLP '<PTR DISPLACEMENT> <LENGTH>-<PFX>'
         DC    X'FF'
         SPACE 1
         MZOP  POINT
         MZHLP 'REF <HEX REF DIGIT>'
         MZHLP '<PTR DISPLACEMENT> <LENGTH>'
         MZHLP '<PTR DISPLACEMENT> <LENGTH>-<PFX>'
         DC    X'FF'
         SPACE 1
         MZOP  BASE
         MZHLP '<HEX BASE>'
         DC    X'FF'
         SPACE 1
         MZOP  INDEX
         MZHLP '<CSECT>'
         MZHLP '<ENTRY POINT>'
         MZHLP '=<REL HEX DISPLACEMENT>'
         DC    X'FF'
         SPACE 1
         MZOP  LIB
         MZHLP AUTO
         MZHLP '<DDNAME>'
         DC    X'FF'
         SPACE 1
         MZOP  VERIFY
         MZHLP '<REL HEX LOCATION> <VERIFICATION DATA>'
         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'
         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'
         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'
         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'
         MZHLP '  DATA MAY BE A CHARACTER STRING,'
         MZHLP '   DELIMITED BY APOSTROPHES,'
         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'
         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'
         MZHLP '   VERIFY -06 0065''201 '''
         DC    X'FF'
         SPACE 1
         MZOP  VER
         MZHLP '<REL HEX LOCATION> <VERIFICATION DATA>'
         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'
         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'
         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'
         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'
         MZHLP '  DATA MAY BE A CHARACTER STRING,'
         MZHLP '   DELIMITED BY APOSTROPHES,'
         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'
         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'
         MZHLP '   VER -06 0065''201 '''
         DC    X'FF'
         SPACE 1
         MZOP  V
         MZHLP '<REL HEX LOCATION> <VERIFICATION DATA>'
         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'
         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'
         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'
         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'
         MZHLP '  DATA MAY BE A CHARACTER STRING,'
         MZHLP '   DELIMITED BY APOSTROPHES,'
         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'
         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'
         MZHLP '   V -06 0065''201 '''
         DC    X'FF'
         SPACE 1
         MZOP  REPLACE
         MZHLP '<REL HEX LOCATION> <REPLACEMENT DATA>'
         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'
         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'
         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'
         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'
         MZHLP '  DATA MAY BE A CHARACTER STRING,'
         MZHLP '   DELIMITED BY APOSTROPHES,'
         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'
         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'
         MZHLP '   REPLACE -06 0065''201 '''
         DC    X'FF'
         SPACE 1
         MZOP  REP
         MZHLP '<REL HEX LOCATION> <REPLACEMENT DATA>'
         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'
         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'
         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'
         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'
         MZHLP '  DATA MAY BE A CHARACTER STRING,'
         MZHLP '   DELIMITED BY APOSTROPHES,'
         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'
         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'
         MZHLP '   REP -06 0065''201 '''
         DC    X'FF'
         SPACE 1
         MZOP  R
         MZHLP '<REL HEX LOCATION> <REPLACEMENT DATA>'
         MZHLP '  LOC MUST BE 2, 4, OR 6 DIGITS'
         MZHLP '  PRECEED LOC WITH - IF NEGATIVE'
         MZHLP '  DATA MAY BE AN EVEN # OF HEX DIGITS, UNSIGNED'
         MZHLP '  AN OPTIONAL COMMA MAY SEPARATE PAIRS OF DIGITS'
         MZHLP '  DATA MAY BE A CHARACTER STRING,'
         MZHLP '   DELIMITED BY APOSTROPHES,'
         MZHLP '   WITH APOSTROPHE REPRESENTED BY A DOUBLE APOSTROPHE'
         MZHLP '  HEX AND STRING MAY BE USED IN COMBINATION:'
         MZHLP '   R -06 0065''201 '''
         DC    X'FF'
         SPACE 1
         MZOP  CONSOLE
         MZHLP '<NULL>'
         MZHLP 'UNIT=<CUU>'
         MZHLP 'L=<DEC ID>'
         MZHLP 'L=<DEC ID><AREA ID>'
         DC    X'FF'
         SPACE 1
         MZOP  DUMP
         MZHLP .
         MZHLP '.<CSECT>'
         MZHLP '<NAME>'
         MZHLP '<NAME> <CSECT>'
         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'
         DC    X'FF'
         SPACE 1
         MZOP  DUMPB
         MZHLP .
         MZHLP '.<CSECT>'
         MZHLP '<NAME>'
         MZHLP '<NAME> <CSECT>'
         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'
         DC    X'FF'
         SPACE 1
         MZOP  DUMPA
         MZHLP .
         MZHLP '.<CSECT>'
         MZHLP '<NAME>'
         MZHLP '<NAME> <CSECT>'
         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'
         DC    X'FF'
         SPACE 1
         MZOP  DUMPT,NEXT=*
         MZHLP .
         MZHLP '.<CSECT>'
         MZHLP '<NAME>'
         MZHLP '<NAME> <CSECT>'
         MZHLP '=<REL HEX LOCATION> <HEX LENGTH>'
         DC    X'FF'
         SPACE 1
         LTORG
        MZWORK MAIN=YES,GEN=NOGEN
         END
./ ADD NAME=MZAPMAIN 0100-19106-19106-1238-00382-00382-00000-MZAP78  18
         MACRO
&L    MZAPMAIN &TYPE=DSECT,&GEN=NOGEN
         COPY  MZGBL
         LCLC  &DC
         PUSH  PRINT
         AIF   ('&GEN' EQ 'NOGEN').NOHED1
         MZSHD 'MZAPMAIN - REGISTER DEFINITIONS'
.NOHED1  PRINT &GEN
         MZSET
         LCLC  &MZPMAIN
&MZPMAIN SETC  '&L'
         AIF   (T'&L NE 'O').LOK
&MZPMAIN SETC  'MZAPMAIN'
         MNOTE 4,'LABEL OMITTED - ''MZAPMAIN'' ASSUMED'
.LOK     AIF   ('&TYPE' EQ 'C' OR '&TYPE' EQ 'CSECT').C
         AIF   ('&TYPE' EQ 'D' OR '&TYPE' EQ 'DSECT').D
         MNOTE 8,'&&TYPE IS NEITHER CSECT NOR DSECT - DSECT ASSUMED'
.D       ANOP
&MZPMAIN DSECT
&DC      SETC  'DS'
         AGO   .NOC
.C       ANOP
&MZPMAIN CSECT
&DC      SETC  'DC'
.NOC     ANOP
*        REG   USE
         SPACE 1
R0       EQU   0                        SCRATCH
*                             PATCH     ABS V|R END = LOC+LEN-1
         SPACE 1
R1       EQU   1                        SCRATCH/PARAM
*                                       TRT ARGUEMENT PTR
*                             PATCH     ABS V|R LOC
         SPACE 1
R2       EQU   2                        PRESERVED ACROSS GET/PUT
*                             INIT2     DCB COUNTER
*                                       TRT FUNCTION BYTE
*                                       MFT INITIALIZATION COUNTER
         SPACE 1
R3       EQU   3                        CVT
         SPACE 1
R4       EQU   4              INIT2     TIOT SCAN POINTER
*                                       MFT INITIALIZATION TABLE
*                             GETCC     SCAN PTR
*                             DEBUG     INCREMENT OF 5 FOR V/R DATA
*                             GETESD    REMAINING ESD BYTES
*                             DUMP      DEST FOR OPCODE
*                                       SCRATCH
*                             PATCH     V|R ENTRY
         SPACE 1
R5       EQU   5              INIT2     DCB LIST POINTER
*                             INIT2     OPEN LIST POINTER
*                             GETCC     SCAN LEN
*                             DEBUG     COMPARAND OF IBUF+75 FOR V/R
*                             GETESD    CESD BUFFER
*                             DUMP      SCRATCH
*                             PATCH     V|R IC REG
         SPACE 1
R6       EQU   6              INIT2     DCB POINTER
*                             GETCC     TABLE PTR
*                             DEBUG     CURRENT V/R MSG POINTER
*                             GETESD    DCB
*                             DUMP      SCRATCH
*                             PATCH     ABS MODULE/CSECT LOC
         SPACE 1
R7       EQU   7              DEBUG     V/R TABLE POINTER
*                             GETCC     PAD CHAR
*                             GETCDE    DCB
*                             GETESD    VRNAME ENTRY
*                             DUMP      V/R TABLE POINTER
*                             DUMPOP    OPTAB POINTER
*                             PATCH     ABS MODULE/CSECT END+1=LOC+LEN
*                             PATCH     ALTERNATE VR ENTRY POINTER
         SPACE 1
R8       EQU   8                        CSCB POINTER
*                             GETCC     INTERNAL SUBROUTINE RETURN
*                             GETCDE    VRDCB
*                             DUMP      INCREMENT FOR LOOP
*                             MZUNREST  INTERNAL SUBROUTINE RETURN
         SPACE 1
R9       EQU   9                        RETURN FROM INTERNAL SUB
*                             INIT2     TCB POINTER
*                             GETESD    VRENTRY FOR CURRENT VRNAME
*                             PATCH     NAM ENTRY
*                             GETESD    ESD TABLE POINTER FOR SCTR
         SPACE 1
R10      EQU   10                       TEMP MAIN BASE
         SPACE 1
R11      EQU   11                       SUB BASE
         SPACE 1
R12      EQU   12                       PRESERVED ACROSS GET/PUT
         SPACE 1
R13      EQU   13                       SSA AND MAIN BASE
         SPACE 1
R14      EQU   14                       RETURN
*                             PATCH     INDEX-BASE
         SPACE 1
R15      EQU   15                       CALL
*                                       KEY SWITCH
         AIF   ('&GEN' EQ 'NOGEN').NOHED2
         MZSHD 'MZAPMAIN - PUT LOGIC'
.NOHED2  USING *,R10
         DC    18F'0'
         USING *,R15
MOREZAP  B     MZEPMAIN
         DC    AL1(25),CL25'MOREZAP - &SYSDATE &SYSTIME'
MZEPMAIN STM   R14,R12,12(R13)
         L     R10,=A(&MZPMAIN)
         DROP  R15
         LA    R3,SAVE
         ST    R3,8(R13)
H8       EQU   *-2,2,H
         ST    R13,4(R3)
H4       EQU   *-2,2,H
         LR    R13,R3
         L     R15,AINIT1
         BALR  R14,R15
         L     R15,AINIT2
KITCHEN  SYNCH (15)
         BR    R15
         SPACE 2
HITKADEM NOP   0                        HOOK FOR DEBUG
         NOPR  0
         L     R15,8(,R12)
         BR    R15
         EJECT
         DROP
         USING &MZPMAIN,R13
         USING CVT,R3
*              ALL I/O MODULES START WITH A TRANSFER VECTOR:
         SPACE 1
OFNAME   EQU   X'00'                    MODULE NAME
OFDCB    EQU   X'08'                    ->DCB
OFPUT    EQU   X'0C'                    PUT
OFEJECT  EQU   X'10'                    RESERVE SPACE ON PAGE
OFGET    EQU   X'14'                    GET
OFATTN   EQU   X'18'                    TEST FOR ATTENTION
OFINIT   EQU   X'1C'                    INFO FOR INITIALIZATION
         SPACE 3
PUTGOT   MVC   ODATA,IBUF
PUTLINE  STM   R0,R15,SAVEPUT
         TR    ODATA,TRTABLE
PUTENTRY L     R12,PUTLOG
         BAL   R14,OFPUT(,R12)
NOLOG    L     R12,PUTMON
CRTSW    BAL   R14,OFPUT(,R12)
NOCRT    L     R12,PUTCON
CONSW    BAL   R14,OFPUT(,R12)
ENDPUT   NI    SW2,255-ATTNSW-PROMPTSW  CLEAR ATTN SWITCHES
BLNKODTA MVC   ODATA,BLANKARD
         LM    R0,R15,SAVEPUT
         BR    R14
         SPACE 2
EJECT    LA    R0,255
RESERVE  STM   R0,R15,SAVEPUT
         L     R12,PUTLOG
         BAL   R14,OFEJECT(,R12)
         L     R12,PUTMON
         BAL   R14,OFEJECT(,R12)
         L     R12,PUTCON
         BAL   R14,OFEJECT(,R12)
         B     ENDPUT
         SPACE 2
ABDUMP   ABEND 122,DUMP
         MZSHD 'MZAPMAIN - ATTENTION ROUTINES'
OFFMON   OI    SW3,NOMONSW
         B     PUTENTRY
         SPACE 1
SETMON   NI    SW3,255-NOMONSW
         B     PUTENTRY
         SPACE 1
OFFDUMP  NI    SW1,255-DMPSW
         B     PUTENTRY
         SPACE 1
SETHOLD  OI    SW2,HOLDSW               SET LOCK PAGE MODE
         B     PUTENTRY
         SPACE 1
OFFHOLD  NI    SW2,255-HOLDSW           SET AUTO WRITE MODE
         B     PUTENTRY
         SPACE 1
ONCON    MVI   GETSW+1,0
         MVI   CONSW+3,OFPUT
         B     PUTENTRY
         AIF   ('&GEN' EQ 'NOGEN').NOHED3
         MZSHD 'MZAPMAIN - SWITCHES'
.NOHED3  ANOP
PUTLOG   DC    A(DUMMYVEC)              PUT ROUTINE FOR SYSPRINT
PUTMON   DC    A(DUMMYVEC)              PUT ROUTINE FOR 2260/3270
PUTCON   DC    A(DUMMYVEC)              PUT ROUTINE FOR TSO/OPERATOR
DUMMYVEC EQU   *-8                      ALLOW FOR NAME
         DC    A(0)                     NO DCB
         BR    R14                      PUT
LINENO   DC    H'0'
         BR    R14                      EJECT
HWUCMID  DC    H'0'
MYUCMID  EQU   *-1
         BR    R14                      GET
         DS    H
         BR    R14                      TEST ATTENTION
SW1      DC    AL1(DMPSW)
DMPSW    EQU   X'80'                    DUMP MAY CONTINUE
DBEFSW   EQU   X'40'                    DUMP BEFORE EXISTS
DAFTSW   EQU   X'20'                    DUMP AFTER EXISTS
DEBUGSW  EQU   X'10'
NOTNUC   EQU   X'08'                    MISSING OR INVALID SYSNUC
*              MUST BE SYSRES PACK, DSN=SYS1.NUCLEUS(IEANUC0X)
CSECTSW  EQU   X'04'                    ESD READ REQUIRED
KEYSW    EQU   X'02'
NOGO     EQU   X'01'
         SPACE 1
SW2      DC    X'0'
EOD      EQU   X'80'
VEREPSW  EQU   X'40'                    VER/REP OVERLAY REQUIRED
LPASW    EQU   X'20'                    CDE SEARCH OVERLAY REQUIRED
NAMESW   EQU   X'10'                    IN RANGE OF NAME
CRTERRSW EQU   X'08'                    I/O ERROR ON LAST CRT OP
ATTNSW   EQU   X'04'                    RESPONSE TO ATTN MSG
PROMPTSW EQU   X'02'                    $HELP MESSAGE REQUIRED
HOLDSW   EQU   X'01'                    ENTER REQ'D AFTER EACH WRITE
         SPACE 1
SW3      DC    X'00'
GANAVSW  EQU   X'80' .                  INVALID CPU
PUNCHSW  EQU   X'40' .                  PUNCH SUCESSFUL ZAPS
NOMONSW  EQU   X'20'                    DO NOT WRITE DUMP TO CRT
DUMPSW   EQU   X'10'                    DUMP, NOT HELP
TSOSW    EQU   X'08'                    TSO
TS2260SW EQU   X'04'                    TSO - TERMINAL IS 2260
TS3270SW EQU   X'02'                    TSO - TERMINAL IS 3270
TSOCRTSW EQU   TS2260SW+TS3270SW        TSO - TERMINAL IS CRT
         SPACE 1
SW4      DC    X'00'
PREPASSW EQU   X'80'                    VR CONTROL BLOCKS ARE
*                                          INTERNALLY GENERATED
JOBACTSW EQU   X'40'                    JOB NAME SPECIFIED
         AIF   ('&GEN' EQ 'NOGEN').NOHED4
         MZSHD 'MZAPMAIN - GET LOGIC'
.NOHED4  ANOP
GETLINE  MVC   IBUF,BLANKARD
BLCARD   EQU   GETLINE
         STM   R0,R15,SAVEGET
         LH    R1,LINENO
         LA    R1,1(,R1)
         STH   R1,LINENO
         CVD   R1,DOUBLE
         OI    DOUBLE+7,X'0F'
         UNPK  IBUF(5),DOUBLE
         SPACE 1
GETSW    NOP   GETQSAM                  SET TO NOP BY CONSOLE OPTION
         L     R12,PUTMON
         BAL   R14,OFGET(,R12)
         L     R12,PUTCON
         BAL   R14,OFGET(,R12)
         SPACE 2
GETQSAM  GET   SYSIN
         MVC   IBUF+6(74),0(R1)
GETUC    OC    IBUF,BLANKARD
ENDGET   LM    R0,R15,SAVEGET
         BR    R14
         SPACE 1
ALDUN    OI    SW2,EOD
         MVC   IBUF+6(5),=C'RESET'
         B     ENDGET
ZAPSPACE DC    8C'ZAPSPACE'
         AIF   ('&GEN' EQ 'NOGEN').NOHED5
         MZSHD 'MZAPMAIN - TRANSFER VECTOR'
.NOHED5  ANOP
VINIT1   DC    CL8'INIT1'
AINIT1   &DC   V(INIT1)
VINIT2   DC    CL8'INIT2'
AINIT2   &DC   V(INIT2)
VREAD    DC    CL8'MZAPCC'              CONTROL CARD READ
ACORN    &DC   V(MZAPCC)                CONTROL CARD READ
VHELP    DC    CL8'MZAPHELP'            HELP
AHELP    &DC   V(MZAPHELP)
VDDT     DC    CL8'MZAPDBUG'            DEBUG
ADDT     &DC   V(MZAPDBUG)              DEBUG
VLPA     DC    CL8'MZAPCDE'             LPA SEARCH
AGRAIL   &DC   V(MZAPCDE)               LPA SEARCH
VLOOKUP  DC    CL8'MZAPESD'             LOAD MODULE PROCESSING
AESP     &DC   V(MZAPESD)
VHOVEL   DC    CL8'MZAPDUMP'
AHOVEL   &DC   V(MZAPDUMP)
VPATCH   DC    CL8'MZAPATCH'
APATCH   &DC   V(MZAPATCH)
VSOF     DC    CL8'MZUNREST'            TERMINATION
A#666    &DC   V(MZUNREST)              UNRESET
         AIF   ('&GEN' EQ 'NOGEN').NOHED6
         MZSHD 'MZAPMAIN - MISCELLANEOUS'
.NOHED6  ANOP
DOUBLE   DS    0D
CPUID    DC    XL4'&CPUID',XL2'&MDL',XL2'0'
TIME     DS    F
DATE     DS    F
NUCMEM   DC    C'IEANUC01'
REF      DC    A(0)
REFLEN   DC    H'0'
REFIX    DC    H'0'
         DC    15XL8'0'
         AIF   ('&SYS' NE 'OS/MFT' AND '&SYS' NE 'VS1').NOTMFT
IEAARAM4 DC    A(0)                     LPA
IEAARSV1 DC    A(0)                     RSVC
IEAAERP  DC    A(0)                     RERP
         AGO   .NOTTSO
.NOTMFT  ANOP
TSLPA    DC    A(0)
.NOTTSO  SPACE 1
*              THESE FIELDS ARE IN SUPPORT OF JOB CDE CHAINS,
*              FOR ASHER YUVAL AND HIS MERRY MEN.
JOBNAME  DC    CL8' '                   PROCNAME IF STARTED TASK
JOBID    DC    CL8' '                   TASKID   IF STARTED TASK
JOBSTEP  DC    CL8' '                   JOBSTEP TCB
JPAQ     DC    A(0)
         SPACE 1
LNAD     DC    C'0¢'
BLANKARD DC    CL80' '
         SPACE 1
IBUF     DS    CL80
         SPACE 1
SAVE     DC    3A(0)
SAVER14  DC    A(0)
SAVER15  DC    A(0)
SAVER0   DC    A(0)
SAVER1   DC    A(0)
SAVER2   DC    A(0)
SAVER3   DC    A(0)
SAVER4   DC    A(0)
SAVER5   DC    A(0)
SAVER6   DC    A(0)
SAVER7   DC    A(0)
SAVER8   DC    A(0)
SAVER9   DC    A(0)
SAVER10  DC    A(0)
SAVER11  DC    A(0)
SAVER12  DC    A(0)
         SPACE 1
SAVEPUT  DS    16F
SAVEGET  DS    16F
         SPACE 1
SCRMBL   DC    F'0'
         SPACE 1
HLEN     DC    Y(85,0),C' '
HDATA    DC    CL80'MZP100I MOREZAP VERSION &SYSDATE &SYSTIME STARTING'
         SPACE 1
OLEN     DC    Y(85,0)
OCC      DC    C'-'
ODATA    DC    CL80' '
         ORG   ODATA
ODWORD   DS    F
         ORG
TRTABLE  DS    CL256
         SPACE 5
HEAD     DC    A(0)                     VER/REP CHAIN
TAIL     DC    A(0)                     CONTIGUOUS WITH HEAD
HIGHRC   DC    F'0'
*        10    BAD NUCLEUS SPECIFICATION
*        08    ERROR IN LOAD MODULE FORMAT
*        04    VERIFY FAILURE
*              SYNTAX ERROR
*              VER/REP OUT OF RANGE
*              ETC.
         AIF   ('&GEN' EQ 'NOGEN').NOHED8
         MZSHD 'MZAPMAIN - LITERALS'
.NOHED8  LTORG
         AIF   ('&GEN' EQ 'NOGEN').NOHED9
         MZSHD 'SKELETON DCB, ETC FOR REQUIRED DS''S'
.NOHED9  ANOP
SVC      DC    A(0)
LINK     DC    A(0)
         AIF   (NOT &MVT).NOCMDL
CMDL     DC    A(0)
.NOCMDL  AIF   (NOT &VS2 AND NOT (&MVT AND &MZUPC)).NOLPAL
LPAL     DC    A(0)
.NOLPAL  ANOP
PNCH     DC    A(0)
SYSNUC   DCB   DSORG=PO,MACRF=R,DDNAME=SYSNUC
         DC    CL8'SYSNUC'
         DC    A(0)
NULEN    EQU   *-SYSNUC
SYSIN    DCB   DDNAME=SYSIN,DSORG=PS,MACRF=(GL),RECFM=FB,LRECL=80,     *
               EODAD=ALDUN
         POP   PRINT
         MEND
./ ADD NAME=MZAP1    0100-19106-19106-1238-00779-00779-00000-MZAP78  18
MZAP     TITLE 'METZ''S OWN RELIABLE EXTENDED ZAP - COPYRIGHT S. METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         SPACE 5
*              THIS PROGRAM IS INTENDED TO REPLACE COREZAP,
*              AND WILL ACCEPT MOST VALID CONTROL CARDS FROM IBM'S ZAP.
         SPACE 1
*              MY SYNTAX IS:
         SPACE 2
*        KEY   <TODAYS MAGIC #>
         SPACE 1
*        NAME  <PGM-NAME>
*        BLDL  <NAME>
*        CDE   <NAME>
*        CVT
*        GOVRFLB
*        HCT
*        IBMORG
*        MSER
*        PATCH
*        QMRES
*        SCVT
*        SMCA
*        TACT
*        TCB   <JOBNAME>                NOT YET IMPLIMENTED
*        TCB   <JOBNAME>.<STEPNAME>     NOT YET IMLIMENTED
*        TCB   <TASKID>                 NOT YET IMLIMENTED
*        TCB   <PROCNAME>.<TASKID>      NOT YET IMLIMENTED
*        TSCVT
*        UCB   <CUU>
*        UCB  =<CUU>
*        UCM   BASE
*        UCM   HARDCOPY
*        UCM   MASTER
*        UCM   MCS
*        UCM   PREFIX
*        UCM   ID=<DEC-UCMID>
*        UCM   UNIT=<CUU>
*        USERORG
         SPACE 1
*        BASE  <HEX-BASE>
*        BASE =<HEX-BASE>
*              USED TO SUPPLY A DECREMENT, NORMALLY FROM THE ASM
*              LISTING.
         SPACE 1
*        INDEX=<HEX-INDEX>
*              USED TO SUPPLY AN INCREMENT, NORMALLY THE LINK-EDITED
*              DISPLACEMENT. CSECT FORM REQUIRES DD FOR LIB.
         SPACE 1
*        INDEX <CSECT>
*              THE COMBINATION
*                                       NAME  <MOD> <CSECT1>
*                                       INDEX <CSECT2>
*              IS EQUIVALENT TO
*                                       NAME  <MOD> <CSECT1>
*                                       INDEX <HEX CSECT2-MOD>
*              OR TO
*                                       NAME  <MOD> <CSECT1>
*                                       BASE  <HEX CSECT1-CSECT2>
*              THE CSECT FORM OF INDEX SHOULD BE USED WITH CAUTION IF
*              THE MODULE HAS EITHER THE SCTR OR HIAR ATTRIBUTES.
         SPACE 1
*        LIB   <DDNAME>
*        LIB   AUTO
*              NORMALLY, THE LIBRARY WILL BE INFERRED FROM THE
*              MODULE NAME: IEANUCXX, IGXXXXXX, IKJXXXXX, OR OTHER ARE
*              NUCLEUS, SVCLIB, CMDLIB, OR LINKLIB.
         SPACE 1
*        JOB   <JOBNAME>                NOT YET IMPLIMENTED
*        JOB   <JOBNAME>.<STEPNAME>     NOT YET IMPLIMENTED
*        JOB   <TASKID>                 NOT YET IMPLIMENTED
*        JOB   <PROCNAME>.<TASKID>      NOT YET IMPLIMENTED
         SPACE 1
*        VERIFY
*        VER
*        V     <HEX-LOC> <HEX-DATA>
*        REPLACE
*        REP
*        R     <HEX-LOC> <HEX-DATA>
*              VERIFY AND REPLACE HAVE USUAL SYNTAX.
         SPACE 1
*        <-    <REF_DIGIT> *
*        SETPTR
*              SAVE THE CURRENT CSECT AND INDEX IN PTR <N>
         SPACE 1
*        <-    <REF_DIGIT> <PTR_DISP> <LENGTH>
*        SETPTR
*              USED TO SAVE THE ADDRESS POINTED TO IN PTR <N>
         SPACE 1
*        <-    <REF_DIGIT> <PTR_DISP> <LENGTH>-<PREFIX_LENGTH>
*        SETPTR
*              USED TO SAVE THE ADDRESS POINTED TO IN PTR <N>
*              AREA INCLUDES A PREFIX OF THE DESIGNATED LENGTH
         SPACE 1
*        ->    REF <REF_DIGIT>
*        POINT REF <REF_DIGIT>
*              USED TO POINT TO THE AREA SAVED IN PTR <N>
         SPACE 1
*        ->    <PTR_DISP> <LENGTH>
*        POINT <PTR_DISP> <LENGTH>
*              POINT TO THE DESIGNATED AREA
         SPACE 1
*        ->    <PTR_DISP> <LENGTH>-<PREFIX_LENGTH>
*        POINT <PTR_DISP> <LENGTH>-<PREFIX_LENGTH>
*              POINT TO THE DESIGNATED AREA
*              AREA INCLUDES A PREFIX OF THE DESIGNATED LENGTH
         SPACE 1
*              POINT, SETPTR, AND THEIT SYNONYMNS "->", "<-" MAY BE
*              FOLLOWED BY A COMMA AND THE POINTER LENGTH.
*              VALID POINTER LENGTHS ARE THOSE USED IN THE FOLLOWING:
*        ->,15 HALFWORD WITH NEGATIVE SIGN ILLEGAL
*        ->,16 HALFWORD, CONSIDERED TO BE A POSITIVE 16 BIT FIELD
*        <-,24 THREE BYTE ADDRESS, NOT PRECEEDED BY PAD
*        <-,32 THREE BYTE ADDRESS, PRECEEDED BY PAD
*        ->,Y  SAME AS 15
*        <-,H  SAME AS 16
*        ->,AL3 SAME AS 24
*        <-,A  SAME AS 32
         SPACE 1
*        *
*        CONSOLE
*        CON   ROUTCDE=(<1-16>,...)
*              ROUTCDE DEFAULTS TO (9,10)
*              ROUTCDE MAY BE SPELLED AS ROUT OR ROUT<ALPHA>
*        CON   UNIT=<CUU>
*        CON   L=<DEC-UCMID>
*        CON   L=<DEC-UCMID><ALPHA-AREAID>
*        CON   DSRT=<HEX-DESC&ROUTCDE>
*        MONITOR
*        MON
*        NOMONITOR
*        NOMON
*        RESET
*        RESET EOD
         SPACE 1
*        DUMP =<HEX-START> <HEX-LENGTH>
*        DUMP  <PGM-NAME>
*        DUMPB=<HEX-START> <HEX-LENGTH>
*        DUMPB <PGM-NAME>
*        DUMPA=<HEX-START> <HEX-LENGTH>
*        DUMPA <PGM-NAME>
*        DUMPT=<HEX-START> <HEX-LENGTH>
*        DUMPT <PGM-NAME>
         SPACE 2
*              PGM-NAME MAY BE ANY OF THE FOLLOWING:
*              .                        ALL OF NUCLEUS
*              NUCLEUS
*              <MODULE>                 ALL OF SPECIFIED MODULE
*              .<NUC-CSECT>             CSECT IN NUCLEUS
*              <MODULE> <CSECT>         CSECT IN SPECIFIED MODULE
         SPACE 3
*              THE FOLLOWING DD CARDS ARE REQUIRED:
*              SYSPRINT                 SEE SNAP IN SUP & DM MACROS
*              SYSIN
*              SYSNUC                   CURRENT NUCLEUS
*              SVCLIB
*              LINKLIB                  INCLUDE ALL CONCATENATED
*                                        LINKLIBS IN SAME ORDER AS
*                                        LNKLST00.
         SPACE 1
*              SVCLIB AND LINKLIB MAY BE OMITTED,
*                                        AS LONG AS CSECT NAMES ARE
*                                        NOT USED.
         SPACE 5
*              LINKPACK IS CHAINED OFF OF IEAQLPAQ IN IEAQLK00,
*              POINTED TO BY CVTQLPAQ.
*              RES SVC LIST IS CHAINED OFF OF IEAQSVCQ IN IEAQTR00.
*              RES ERP IS CHAINED OFF OF IEAAERP IN IEAQNU00.
*        SPACE 1
*              CHASING THE MS LLE CHAIN SHOULD GET ALL ON ONE SEARCH.
         SPACE 2
*              THINGS ARE DIFFERENT FOR MFT, OS/VS1:
         SPACE 1
*              ALL CHAIN STARTS ARE IN IGC006.
*              IEAAERP->RERP
*              IEAARSV1->RSVC
*              IEAARAM4->RAM
         SPACE 5
         MACRO
&L       DCBL  &DD,&TYPE,&LOC,&REQSYS=ANY
         COPY  MZGBL
         MZTST &REQSYS
         AIF   (NOT &MZMATCH).NODCB
&L       DC    CL8'&DD'
         AIF   ('&TYPE' EQ 'IGNORE').IGNORE
         AIF   ('&TYPE' EQ 'LIB').LIB
         AIF   ('&TYPE' EQ 'NUC').NUC
         AIF   ('&TYPE' EQ 'SPECIAL').SPEC
         MNOTE 8,'TYPE ''&TYPE'' INVALID - SET TO IGNORE'
.*
.IGNORE  DC    F'0'
         MEXIT
.*
.LIB     DC    X'04'
         DC    AL3(&LOC)                LOC OF DCB PTR
         MEXIT
.*
.NUC     DC    X'08'
         DC    AL3(BUMPTIOT-4)          ALLOW FOR NUC IN OPEN LIST
         MEXIT
.*
.SPEC    DC    X'08'
         DC    AL3(&LOC)                LOC OF SUBROUTINE
.NODCB   MEND
         SPACE 5
         MACRO
&L       MZ1   &TYPE
         COPY  MZGBL
         AIF   ('&TYPE' EQ 'SPIE').SPIE
         AIF   ('&TYPE' EQ 'NUCID').NUCID
         AIF   ('&TYPE' EQ 'CPUID').CPUID
         AIF   ('&TYPE' EQ 'EXIT').EXIT
         AIF   ('&TYPE' EQ 'CONS2').CONS2
         MNOTE 12,'&&TYPE=&TYPE IS NOT VALID'
         MEXIT
.*
.SPIE    AIF   ('&CPU' EQ '370').DESPIE
&L       SPIE  MAXSMART,(1,2)
         STIDP CPUID
         B     NOT370
MAXSMART CLI   7(R1),1 .                IS IT 360?
         BCR   8,R14 .                   YES - NO SWEAT
         LA    R0,NOT360 .              BYPASS KEY 0 CODE
         ST    R0,8(R1)
         OI    SW3,GANAVSW
         XC    CPUID(8),CPUID
         BR    R14
NOT370   SPIE
         MEXIT
.DESPIE  ANOP
&L       SPIE
         MEXIT
.*
.NUCID   AIF   ('&SYS' EQ 'OS/MFT' OR '&SYS' EQ 'OS/MVT').OSID
         L     R2,CVTEXT2 .             GET OS/VS CVT EXTENSION
         MVC   NUCMEM+7(1),CVTNUCLS-CVTXTNT2(R2)
         CLI   JFCBELNM,C' ' .          NUCLEUS NAME DEFAULTED?
         BE    *+14 .                    YES - LET IT BE
         MEXIT
.OSID    MVC   NUCMEM+7(1),JFCBELNM+7-OPENWORK(R1)
         MEXIT
.*
.CPUID   AIF   ('&CPU' EQ '360').BYBY
         STIDP CPUID
         MEXIT
.*
.EXIT    AIF   ('&SYS' EQ 'OS/MVT' OR '&SYS' EQ 'VS2').BYBY
         MZGM  VRNAMLEN+3*(VRIXLEN+VRMVCLEN)
         USING VRSECT,R1
         ST    R1,HEAD
         XC    0(VRNAMLEN+3*(VRIXLEN+VRMVCLEN),R1),0(R1)
         LA    R15,VRNAMELN(,R1)
         ST    R15,VRNEXT
         MVI   VRTYPE,VRNAME
         MVI   VRNAM,C'.'
         MVC   VRCSECT,=CL8'IGC006'
         LA    R2,3
         LA    R4,MFTCONS
MFTLOOP  ST    R15,VRNEXT
         LR    R1,R15
         LA    R14,VRIXLEN(,R1)
         LA    R15,VRMVCLEN(,R14)
         ST    R14,VRNEXT
         MVI   VRTYPE,VRINDEX
         MVC   VRIXNAME,0(8,R4)
         LR    R1,R14
         MVI   VRTYPE,VRMVC
         MVI   VRDATLN,3
         MVC   VRPTR,8(4,R4)
         LA    R4,12(,R4)
         BCT   R2,MFTLOOP
         ST    R15,TAIL
         DROP  R1
         MEXIT
.*
.CONS2   AIF   ('&SYS' EQ 'OS/MVT' OR '&SYS' EQ 'VS2').BYBY
         DS    0F
MFTCONS  DC    CL8'IEAAERP ',A(IEAAERP)
         DC    CL8'IEAARSV1',A(IEAARSV1)
         DC    CL8'IEAARAM4',A(IEAARAM4)
.BYBY    MEND
         EJECT
         COPY  MZGBL
         MZSET
         SPACE 5
         PUNCH ' INSERT  MZAPMAIN'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  INIT1'
         PUNCH ' INSERT  INIT2'
         PUNCH ' INSERT  DCBEXIT'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  MZAPCC'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  MZAPHELP'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  MZAPDBUG'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  MZAPCDE'
         PUNCH ' INSERT  MZAPESD'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  MZAPDUMP'
         PUNCH ' OVERLAY DUMP'
         PUNCH ' INSERT  MZDMPHEX'
         PUNCH ' OVERLAY DUMP'
         PUNCH ' INSERT  MZDMPOPS'
         PUNCH ' OVERLAY A'
         PUNCH ' INSERT  MZAPATCH'
         PUNCH ' INSERT  MZUNREST'
         PUNCH ' ENTRY   MOREZAP'
         PUNCH ' ALIAS   MZAP'
         EJECT
         ENTRY MOREZAP
         MZHED 'METZ''S OWN RELIABLE EXTENDED ZAP'
MZAPMAIN MZAPMAIN TYPE=C,GEN=GEN
         MZSHD 'INITIALIZE && KEY 0'
         PRINT NOGEN
*              THE LAWS OF GOD, THE LAWS OF MAN,
*              HE MAY KEEP THEM THAT WILL AND CAN;
*              NOT I: LET GOD AND MAN DECREE
*              LAWS FOR THEMSELVES AMD NOT FOR ME;
         SPACE 1
*              A. E. HAUSSMAN, LAST POEMS XII
         SPACE 1
INIT1    MZENT
         L     R3,CVTPTR
         USING CVT,R3
         L     R4,CVTTCBP
         L     R9,4(,R4)
         USING TCB,R9
         SPACE 1
*              AT THIS POINT, R1 IS STILL INTACT.
*              IT MAY BE WORTHWHILE, IN TSO, TO USE THE ENTIRE CPPL,
*              HOWEVER, AT THE MOMENT I ONLY NEED THE PARM.
         L     R15,0(,R1)               ->PARM
         CLI   1(R15),5                 L(PARM)<5
         BL    NODEBUG                   YES - CAN'T BE 'DEBUG'
         CLC   =C'DEBUG',2(R15)         DEBUG WANTED IN PREPASS?
         BNE   NODEBUG                   NO
         OI    SW1,DEBUGSW              SET UP FOR DEBUG OUTPUT
         SPACE 2
NODEBUG  MVC   TRTABLE,TRPRINT
         SPACE 1
         MZLT  R2,CVTTSCVT
         BZ    EINTSO
         USING TSCVT,R2
         MVC   TSLPA,TSCVTLPA
         TM    TCBTSFLG,TCBTSTSK
         BO    TSO
EINTSO   LOAD  EP=MZWTO
         ST    R0,PUTCON
         B     NOTSO
TRPRINT  TRTAB FILL=C'.',CODE=PN
TR2260   TRTAB FILL=C'"',CODE=2260
TR3270   TRTAB FILL=C'.',CODE=3270
         SPACE 1
         PRINT GEN
TSO      L     R1,TCBJSCB
         USING IEZJSCB,R1
         LH    R4,JSCBTJID
         MH    R4,TSCVTSZU
         AL    R4,TSCVTTJB
         USING TJB,R4
         L     R5,TJBTSB
         USING TSB,R5
         L     R6,TSBQCB-1
         USING IEDQQCB,R6
         TM    TSBSTAT,TSBDSPLY
         BZ    TSO1
         OI    SW3,TS2260SW
         MVC   TRTABLE,TR2260
         MVC   TSONAME,=CL8'MZTS2260'
         TM    TSBSTAT,TSB3270
         BZ    TSO1
         XI    SW3,TS2260SW+TS3270SW
         MVC   TRTABLE,TR3270
         MVC   TSONAME,=CL8'MZTS3270'
         DROP  R1,R2
TSO1     OI    SW3,TSOSW
         LOAD  EPLOC=TSONAME
         ST    R0,PUTCON
         LR    R12,R0
         L     R12,OFINIT(,R12)
         STM   R4,R6,0(R12)             SAVE TJB, TSB, QCB POINTER
         STAX  32(R12),USADDR=(R13),REPLACE=NO,MF=(E,12(R12))
         B     *+4(R15)
         B     NOTSO
         DC    F'0'                     DEFERAL
         DC    F'0'                     INVALID PARAMETER
         DROP  R4,R5,R6
         SPACE 1
NOTSO    MZ1   SPIE
      IDENTIFY EP=IGG019ZZ,ENTRY=TRUMPS
         OPEN  (NUKE,(INPUT))
         TM    NUKE+DCBOFLGS-IHADCB,DCBOFOPN
         BZ    NONUC
         L     R1,NUKE+DCBDEBAD-IHADCB
         MVC   IOBSEEK-IOBSTDRD+IOWEBEE+1(6),36(R1)
         SYNCH KOKO                                                * GP
         CLOSE (NUKE,)
         MZ1   CPUID
         TM    SW1,NOTNUC               CORRECT NUCLEUS SPECIFIED?
         BZ    NUCOK
         B     NONUC+6
         SPACE 1
NONUC    MVC   NUCMEM,=C'IEANUC0?'
         OI    SW1,NOTNUC+NOGO
         WTO   'MZP104I SYSNUC MISSING OR INVALID',ROUTCDE=(9,10,11),  *
               DESC=6
         MVI   HIGHRC+3,16
NUCOK   DELETE EP=IGG019ZZ
NOT360   L     R13,4(,R13)
         USING SAVE,R13
         ST    R3,SAVER3                PASS CVT POINTER BACK
         ST    R9,SAVER9                PASS TCB POINTER BACK
         LM    R14,R12,SAVER14
         BR    R14
         USING MZAPMAIN,R13
         SPACE 2                                                   * GP
*              DEFER, DEFER, TO THE LORD HIGH EXECUTIONER.
KOKO     EXCP  IOWEBEE                                             * GP
         WAIT  ECB=ECB
         SVC   3
         SPACE 2
DCBEXIT  L     R1,TCBRBP-TCB(,R9)       GET SYNCH(DCBEXIT) PRB
         L     R1,RBLINK-RBSECT(,R1)    GET SVRB
         L     R1,RBEXSAVE+8-RBSECT(R1) GET OPEN WORK AREA
         MZ1   NUCID
         CLC   NUCMEM,JFCBELNM-OPENWORK(R1)
         BNE   BADNUCNM
         CLC   =C'SYS1.NUCLEUS ',JFCBDSNM-OPENWORK(R1)
         BNE   BADNUCNM
         BER   R14
BADNUCNM OI    SW1,NOTNUC
         SVC   3
         MZSHD 'TRICK TAKER AND MIND BLOWER'
*              AND IF MY WAYS ARE NOT AS THEIRS
*              LET THEM MIND THEIR OWN AFFAIRS.
         SPACE 1
*              A. E. HAUSSMAN, LAST POEMS XII
         SPACE 1
*              THE FOLLOWING FOUL AND DEVIOUS CODE IS DEDICATED TO
*              SIGMUND FREUD, BECAUSE IT RELATES TO AN IDENTITY CRISIS.
*        1     RQE
*              13(1) IS TCB ADDRESS(VMS)
*        2     IOB
*        3     DEB
*        4     DCB
*        7     UCB
*        10    SCRATCH
*        11    SCRATCH
*        13    SCRATCH
*        14    RETURN
*              4(14) IS SKIP SIO RETURN
*        15    *
         USING *,R15
TRUMPS   ST    R12,SAVE12               SAVE 12 THROUGH POST
         ST    R14,SAVERET              SAVE RETURN THROUGH POST
         L     R10,=A(SW1)              POINT AT GOOD/BAD NUC FLAG
         USING SRTE,R7
         TM    UCBSTAT,UCBSYSR          IS THIS RIGHT VOLUME FOR NUC?
         BO    *+8                       YES
         OI    0(R10),NOTNUC             NO
         L     R10,=X'7F000000'
         LA    R11,ECB
         L     R12,0(,R3)               GET TCB FROM DEB, NOT 16*
*              THE ABOVE IS FOR MFT COMPATABILITY.
         L     R13,CVTPTR
         USING CVT,R13
         L     R14,TCBRBP-TCB(R12)
         USING RBSECT,R14
         L     R14,RBLINK
         NI    RBOPSW+1,X'0E'           SET KEY 0, SUP MODE
         DROP  R14
         L     R15,CVT0PT01
         BALR  R14,R15
         USING *,R14
         L     R12,SAVE12
         L     R14,SAVERET
         B     4(,R14)                  SKIP SIO
         DROP  R7,R13,R14,R15
ECB      DC    F'0'
IOWEBEE  DC    X'42000000'
         DC    A(ECB)
         DC    X'0',XL7'0'
         DC    A(CCW)
         DC    A(NUKE)
         DC    F'0'
         DC    F'0'
         DC    XL8'0'
CCW      DS    D
SAVE12   DS    A
SAVERET  DS    A
NUKEX    DC    X'85',AL3(DCBEXIT)
NUKE     DCB   DDNAME=SYSNUC,MACRF=(E),SIOA=ZZ,DEVD=DA,EXLST=NUKEX
TSONAME  DC    CL8'MZTSO'
         LTORG
         MZSHD 'CONSTRUCT DCB CHAIN AND OPEN LIBRARIES'
*              THEIR DEEDS I JUDGE AND MUCH CONDEMN,
*              YET WHEN DID I MAKE LAWS FOR THEM?
         SPACE 1
*              A. E. HAUSSMAN, LAST POEMS XII
         SPACE 1
INIT2    MZENT 2
         LH    R1,=Y(CVTMDL-CVTFIX-256)
         AR    R1,R3
         CLC   =XL2'&MDL',0(R1)         IS THIS RIGHT MODEL?
         BNE   BUMCPU                    NO
         TM    SW3,GANAVSW
         BO    BUMCPU
         TM    SW1,NOTNUC
         BO    IDOK
         CLC   =X'&CPUID&MDL',CPUID+1   IS THIS THE RIGHT CPU #?
         BE    IDOK                      YES
BUMCPU   WTO   'MZP101I UNAUTHORIZED CPU FOR MOREZAP',                 *
               ROUTCDE=(1,9,11),DESC=1
         OI    SW3,GANAVSW              MY OBJECT ALL SUBLIME
         L     R1,TCBRBP-TCB(,R9)
         USING RBSECT,R1
         MVC   BADPSW(1),RBOPSW         SET PROPER SYSTEM MASK IF VS
         DROP  R1
         MZKEY ZERO
         MVZ   BADPSW+1(1),TCBPKF-TCB(R9)
         LPSW  BADPSW
         DS    0D
BADPSW   DC    X'FF050000'
         DC    A(*+4)
         MZKEY
IDOK     L     R1,TCBJSCB-TCB(,R9)
         L     R8,JSCBCSCB-IEZJSCB(,R1)
         USING CHAIN,R8
DELSTOP  MZLT  R1,CHCIBP
         BZ    SETCIBC
         USING CIB,R1
         CLI   CIBVERB,CIBSTOP
         BNE   NOTSTOP
         QEDIT ORIGIN=CHCIBP,BLOCK=0(R1) FORCE LA ON DELETE STOP CIB
         B     DELSTOP
         SPACE 1
NOTSTOP  CLI   CIBVERB,CIBSTART
         BNE   SETCIBC
         MVC   MYUCMID,CIBCONID
         QEDIT ORIGIN=CHCIBP,BLOCK=0(R1) FORCE LA ON DELETE START CIB
         SPACE 1
SETCIBC  QEDIT ORIGIN=CHCIBP,CIBCTR=2   STACK 2 MODIFY S
         L     R4,TCBTIO
         USING TIOT,R4
         ST    R4,SAVE+36
         L     0,TIOCNJOB
         X     0,TIOCNJOB+4
         X     0,TIOCSTEP
         X     0,TIOCSTEP+4
         X     0,TIOCSTEP+8
         X     R0,TIOCSTEP+12
         ST    0,SCRMBL
         SR    R2,R2                    COUNT FOR OPEN LIST
         LA    R6,SYSNUC
         USING IHADCB,R6
TST      CLI   TIOELNGH,0
         BE    ENDTIOT
         CLI   TIOEDDNM,C' '            IS IT CONCAT?
         BE    BUMPTIOT
         TM    TIOESTTA,TIOSJBLB        IS IT JOB/STEP LIB?
         BO    BUMPTIOT
         TM    TIOELINK,TIOTTERM        IS IT TSO TERMINAL?
         BO    TSOTERM                   YES - USE TGET/TPUT
         TM    TIOELINK,6               VS1 SYSIN/SYSOUT?
         BNZ   SPOOLED                   YES - USE IT
         MZLT  R1,TIOEFSRT-1            DSN=NULLFILE?
         USING SRTE,R1
         BE    BUMPTIOT                  YES - SNUB IT
         CLI   UCBTBYT3,UCB3DISP
         BE    GRAPHIC
         CLI   TIOEDDNM+4,C'*'          IS THIS ENTRY FETCHLIB?
         BE    BUMPTIOT                  HERE, SPOT
SPOOLED  LA    R5,DCBTBL
TST1     CLC   TIOEDDNM,0(R5)           IS THIS SPECIAL DD?
         BE    SPECIAL
         LA    R5,12(,R5)
         CLI   0(R5),X'FF'
         BNE   TST1
         SR    R5,R5
GETDCB GETMAIN R,LV=NULEN
         ST    R1,NEXTDCB
         LR    R6,R1
         MVC   0(NULEN,R1),SYSNUC
         XC    DCBEXLST+1(3),DCBEXLST+1
         XC    NEXTDCB,NEXTDCB
         MVC   DDNAME,TIOEDDNM
         MVC   DCBDDNAM,TIOEDDNM
         LTR   R5,R5                    IS THIS SPECIAL DD?
         BZ    BUMPTIOT-4                NO
         ST    R1,0(,R5)
         MVI   0(R5),X'80'
         LA    R2,4(,R2)
BUMPTIOT SR    R0,R0
         IC    R0,TIOELNGH
         AR    R4,R0
         B     TST
         DROP  R6
         SPACE 1
TSOTERM  EQU   BUMPTIOT                 TERM PROCESSED VIA TPUT/TGET
         SPACE 1
GRAPHIC  CLI   UCBTBYT4,X'03'
         BE    CRT2260
         CLI   UCBTBYT4,X'09'
         BE    CRT3277
         WTO   'MZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED',          *
               ROUTCDE=(10,11),DESC=(7,8)
         B     BUMPTIOT
         SPACE 1
CRT2260  MVC   CRTNAME,=CL8'MZ2260'
         MVC   TRTABLE,TRT2260
         B     CRTCOMMN
         SPACE 1
CRT3277  MVC   CRTNAME,=CL8'MZ3270'
         MVC   TRTABLE,TRT3270
CRTCOMMN MVC   CRTDD,TIOEDDNM
         MVI   CONSW+3,OFATTN           SHUT OFF WTO OUTPUT
         MVC   NOSYSIT,=C'KEYBOARD'
         B     BUMPTIOT-4
         SPACE 1
TRT2260  TRTAB FILL=C'"',CODE=2260
TRT3270  TRTAB FILL=C'.',CODE=3270
         SPACE 2
SPECIAL  SR    R1,R1
         IC    R1,8(R5)
         MVI   8(R5),0
         L     R5,8(R5)
         LA    R5,0(,R5)
         B     *+4(R1)
         B     BUMPTIOT                 IGNORE
         B     GETDCB                   LIB
         BR    R5                       SPECIAL
         SPACE 1
PSYSIN   MVI   GETSW+1,X'F0'            SHUT OFF CONSOLE INPUT
         B     BUMPTIOT-4
         SPACE 1
PSYSPRNT LOAD  EP=MZPRINT
         ST    R0,PUTLOG
         LR    R1,R0
         L     R1,OFDCB(,R1)
         L     R15,=V(DCBXLIST)
         USING IHADCB,R1
         MZSTA R15,DCBRECFM             SET DCBEXLST
         DROP  R1
         USING IHADCB,R6
         B     BUMPTIOT-4
         SPACE 1
PSYSPNCH EQU   BUMPTIOT-4               **** TEMP ****
         SPACE 2
ENDTIOT GETMAIN R,LV=(R2)               FOR OPEN LIST
         LR    R5,R1
         LR    R7,R1
         CLI   TSYSPR+8,0               IS THERE A SYSPRINT?
         BNE   OPSYSIN
         L     R1,PUTLOG
         MVC   0(4,R7),OFDCB(R1)
         MVI   0(R7),X'0F'
         LA    R7,4(,R7)
         MVI   SWSYSPRI,X'92'           SHUT OFF WTO IF SYSIN
OPSYSIN  CLI   TSYSIN+8,0               IS THERE A SYSIN?
         BNE   WHICHCRT
SWSYSPRI CLI   CONSW+3,OFATTN           SHUT OFF WTO IF SYSPRINT
         MVC   0(4,R7),=A(SYSIN)
         LA    R7,4(,R7)
WHICHCRT CLI   CRTNAME,C' '
         BE    OPNUC
         LOAD  EPLOC=CRTNAME
         ST    R0,PUTMON
         LR    R1,R0
         L     R1,OFDCB(,R1)
         ST    R1,0(,R7)
         MVC   DCBDDNAM-IHADCB(,R1),CRTDD
         MVI   0(R7),0
         LA    R7,4(,R7)
OPNUC    LA    R6,SYSNUC
         CLI   TSYSNUC+8,0              SYSNUC MISSING?
         BNE   SKIPNUC                   YES - GET NEXT DCB
BLDOP    ST    R6,0(,R7)
         LA    R7,4(,R7)
SKIPNUC  MZLT  R6,NEXTDCB
         BNZ   BLDOP
         SH    R7,H4
         OI    0(R7),X'80'
         DROP  R6
         OPEN  MF=(E,(R5))
      FREEMAIN R,LV=(R2),A=(5)
         L     R1,PUTLOG
         CLI   TSYSPR+8,0
         BNE   *+14
         L     R1,OFDCB(,R1)
         USING IHADCB,R1
         XC    DCBEXLSA,DCBEXLSA
         DROP  R1
         TIME  DEC
         STM   R0,R1,TIME
         CLC   CRTNAME,=CL8'MZ2260'
         BNE   NOSPAR
         L     R1,PUTMON
         L     R0,OFINIT(,R1)
         SPAR  ((R0)),MF=(E,GACBL)
NOSPAR   TM    TCBTSFLG,TCBTSTSK
         BZ    *+10
         MVC   NOSYSIT,=C'TERMINAL'
         SPACE 2
         CLI   TSYSIN+8,0               IS THERE A SYSIN?
         BE    YESHSYSI
         EX    0,GETLINE                BLANK IBUF
         MVC   IBUF(L'NOSYSI),NOSYSI
         BAL   R14,PUTGOT
YESHSYSI CLI   TSYSPR+8,0               IS THERE A SYSPRINT?
         BE    YESHSYSP
         MVC   NOSYSPT,NOSYSIT
         EX    0,GETLINE                BLANK IBUF
         MVC   IBUF(L'NOSYSPR),NOSYSPR
         BAL   R14,PUTGOT
         SPACE 2
YESHSYSP EX    0,GETLINE
         BAL   R14,PUTGOT
         NI    SW1,255-DMPSW
         L     R13,4(,R13)
         USING SAVE,R13
         ST    R8,SAVER8                PASS CSCB POINTER BACK
         LM    R14,R12,12(R13)
         USING MZAPMAIN,R10
         LA    R12,VREAD
         B     HITKADEM
         DROP
         SPACE 2
NOSYSPR  DC    C'MZP102I SYSPRINT DD CARD MISSING - OUTPUT ON CONSOLE '
         ORG   *-8
NOSYSPT  DS    C'TERMINAL'
NOSYSI   DC    C'MZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE '
         ORG   *-8
NOSYSIT  DS    C'TERMINAL'
         SPACE 2
         LTORG
         SPACE 2
CRTNAME  DC    CL8' '
CRTDD    DC    CL8' '
GACBL    SPAR  (0),MF=L
         SPACE 2
         DS    0F
DCBTBL   DCBL  SYSABEND,IGNORE
         DCBL  SYSUDUMP,IGNORE
         DCBL  JOBLIB,IGNORE
         DCBL  STEPLIB,IGNORE
         DCBL  JOBCAT,IGNORE
         DCBL  STEPCAT,IGNORE
TSYSNUC  DCBL  SYSNUC,NUC
         DCBL  SVCLIB,LIB,SVC
         DCBL  LINKLIB,LIB,LINK
         DCBL  CMDLIB,LIB,CMDL
         DCBL  LPALIB,LIB,LPAL,REQSYS=VS
TSYSIN   DCBL  SYSIN,SPECIAL,PSYSIN
TSYSPR   DCBL  SYSPRINT,SPECIAL,PSYSPRNT
TSYSPU   DCBL  SYSPUNCH,SPECIAL,PSYSPNCH
         DC    X'FF'
         SPACE 2
         PRINT GEN
        MZWORK ALL=YES,GEN=GEN
         MZSHD 'TIME SHARING CVT'
      IKJTSCVT
         MZSHD 'TERMINAL JOB BLOCK'
        IKJTJB
         MZSHD 'TERMINAL STATUS BLOCK'
        IKJTSB
         TQCBD
         END   MOREZAP
./ ADD NAME=MZAP2    0100-19106-19106-1238-01198-01198-00000-MZAP78  18
MZP2     TITLE 'MOREZAP CONTROL CARD PROCESSOR - COPYRIGHT 1975 SHMUEL *
               METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - NONBL MACRO'
         MACRO
&L       NONBL &GO,&NOGO=SYNTEX
         GBLC  &CPU
         AIF   ('&CPU' NE '370').S360
&L       CLCL  R4,R6
         AIF   (T'&GO EQ 'O').NG370
         BNE   &GO
         MEXIT
.NG370   BE    &NOGO
         MEXIT
.S360    ANOP
&L       CLI   0(R4),C' '
         AIF   (T'&GO EQ 'O').NG360
         BNE   &GO
         AGO   .G360
.NG360   BNE   *+16
.G360    LA    R4,1(R4)
         BCT   R5,*-12
         AIF   (T'&GO NE 'O').BYBY
         B     &NOGO
.BYBY    MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - OP MACRO'
         MACRO
&L       OP    &NAME,&NEXT=
         GBLC  &NM
         LCLA  &LEN,&L1
         LCLC  &NXT
         AIF   (T'&NAME EQ 'O').NONAME
&LEN     SETA  K'&NAME
         AIF   ('&NAME'(1,1) NE '''').NOTQ
&LEN     SETA  &LEN-2
&L1      SETA  1
.NOTQ    AIF   (T'&L EQ 'O').NXT
&NM      SETC  '&L'
.NXT     ANOP
&NXT     SETC  '&NEXT'
         AIF   ('&NEXT' EQ '*').AST
         AIF   (T'&NEXT NE 'O').NOK
&NXT     SETC  'OP'.'&SYSNDX'
         AGO   .NOK
.AST     ANOP
&NXT     SETC  '&NM'
.NOK     AIF   ('&NAME'(1,1) EQ '''').Q
&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C'&NAME'
&NM      SETC  '&NXT'
         MEXIT
.Q       ANOP
&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C&NAME
&NM      SETC  '&NXT'
         MEXIT
.NONAME  MNOTE 8,'NO OPERAND ON OP MACRO'
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - FBLDL MACRO'
         MACRO
&L       FBLDL
         COPY  MZGBL
&L       L     R15,CVTPRLTV
         AIF   ('&SYS' EQ 'VS2').NOSVC
         SH    R15,H8
         LM    R14,R15,0(R15)
         BAL   R9,FBLDL
         LR    R15,R14
.COMMON  BAL   R9,FBLDL
         B     BUMBLDL
         MEXIT
.NOSVC   SH    R15,H4
         L     R15,0(,R15)
         AGO   .COMMON
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZCB MACRO'
         MACRO
         MZCB  &NAME,&VRNAM=IEANUC0X,&LEN=,&PTR=,&IND=,&ERR=,&REG=R2,  *
               &SVC=,&CHAIN=YES
         AIF   (T'&NAME EQ 'O').NONAME
         AIF   (K'&NAME GT 7).BIGNAME
         AIF   (T'&PTR NE 'O').LOADIT
         AIF   (T'&SVC EQ 'O').NOPTR
         AIF   ('&SVC' EQ '0').EIN
         SVC   &SVC
         LTR   R2,&REG
         AGO   .TST
.EIN     B     &ERR
         MEXIT
.LOADIT  AIF   ('&PTR' EQ '&REG' OR '&PTR' EQ '(&REG)').TSTIND
         MZLT  &REG,&PTR
.TST     AIF   (T'&ERR EQ 'O').TSTIND
         BZ    &ERR
.TSTIND  AIF   (T'&IND EQ 'O').GM
         MZLT  &REG,&IND.(&REG)
         AIF   (T'&ERR EQ 'O').GM
         BZ    &ERR
.GM    GETMAIN R,LV=VRCSECT+8-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRCSECT+8-VRSECT),VRSECT
         MVI   VRTYPE,VRNAME
         ST    &REG,VRBEGIN
         AIF   ('&VRNAM' EQ 'IEANUC0X').NUC
         MVC   VRNAM,&VRNAM
         AGO   .NOTNUC
.NUC     MVI   VRNAM,C'.'
.NOTNUC  MVC   VRCSECT,=CL8'"&NAME"'
         MVI   VRFLG,VRXLE+VR1XL+VRFND+VRNAMFND
         AIF   ('&LEN'(1,1) EQ '(').REGLEN
         AIF   (T'&LEN NE 'N').HW
         AIF   (&LEN GE 256).HW
         MVI   VRSIZE+2,&LEN
         AGO   .NOTHW
.REGLEN  MZSTA &LEN(1),VRSIZE-1
         AGO   .NOTHW
.HW      MVC   VRSIZE+1(2),=Y(&LEN)
.NOTHW   OI    SW1,CSECTSW .            MSG NEEDED
         AIF   ('&CHAIN' EQ 'NO').NOCHN
         B     CHAINCCN
.NOCHN   MEXIT
.NONAME  MNOTE 8,'NO CONTROL BLOCK NAME SPECIFIED'
         DC    H'0'
         MEXIT
.BIGNAME MNOTE 8,'CONTROL BLOCK NAME &NAME LONGER THAN 6'
         DC    H'0'
         MEXIT
.NOPTR   MNOTE 8,'NEITHER PTR NOR SVC SPECIFIED'
         DC    H'0'
         MEXIT
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - BUMP MACRO'
         MACRO
&L       BUMP  &BUM
&L       BAL   R14,BUMPCOL
         DC    Y(&BUM-&SYSECT)
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZERR MACRO'
         MACRO
&L       MZERR &TXT
         LCLA  &I,&J
         AIF   (T'&TXT EQ 'O').NOT
         AIF   ('&TXT'(1,1) NE '''').NOQ
&J       SETA  K'&TXT-3
&I       SETA  2
.SCN     AIF   ('&TXT'(&I,2) EQ '''').QA
         AIF   ('&TXT'(&I,2) NE '&&').NXT
.QA      ANOP
&J       SETA  &J-1
&I       SETA  &I+1
.NXT     ANOP
&I       SETA  &I+1
         AIF   (&I LT K'&TXT).SCN
&L       BAL   R1,INVLD
         DC    AL1(&J),C&TXT
         MEXIT
.NOT     MNOTE 12,' ''TEXT'' REQUIRED'
         MEXIT
.NOQ     MNOTE 12,'DELIMITING '' MISSING'
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZNMX MACRO'
         MACRO
&L       MZNMX &NAME,&INDEX,&IX=,&LOC=
         COPY  MZGBL
         LCLA  &I,&J
         LCLC  &C
&I       SETA  1
         AIF   (T'&NAME EQ 'O').NONAME
         AIF   (N'&NAME EQ 1).SYSOK1
.TSTSYS1 ANOP
&C       SETC  '&NAME(&I+1)'
         AIF   ('&C' EQ '&SYS').SYSOK1
         AIF   ('&C' EQ 'MFT').TSTMFT1
         AIF   ('&C' EQ 'MVT').TSTMVT1
         AIF   ('&C' EQ 'OS').TSTOS1
         AIF   ('&C' EQ 'VS').TSTVS1
.TSTNXT1 ANOP
&I       SETA  &I+2
         AIF   (&I LT N'&NAME).TSTSYS1
.BUMOP   MNOTE *,'INVALID COMMAND FOR &SYS'
&L       B     BUMOP .
         MEXIT
.TSTMFT1 AIF   ('&SYS' EQ 'OS/MFT' OR '&SYS' EQ 'VS1').SYSOK1
         AGO   .TSTNXT1
.TSTMVT1 AIF   ('&SYS' EQ 'OS/MVT' OR '&SYS' EQ 'VS2').SYSOK1
         AGO   .TSTNXT1
.TSTOS1  AIF   ('&SYS' EQ 'OS/MFT' OR '&SYS' EQ 'OS/MVT').SYSOK1
         AGO   .TSTNXT1
.TSTVS1  AIF   ('&SYS' EQ 'VS1' OR '&SYS' EQ 'VS2').SYSOK1
         AGO   .TSTNXT1
.*
.NONAME  MNOTE 12,'REQUIRED OPERAND OMITTED'
         MEXIT
.*
.*
.SYSOK1  ANOP
&C       SETC  '&L'
         AIF   (T'&INDEX EQ 'O').JUSTNAM
         AIF   (T'&LOC EQ 'O').NOLOC
         AIF   ('&LOC' EQ '(2)' OR '&LOC' EQ '(R2)').CALLNMX
         AIF   ('&LOC'(1,1) EQ '(').LR
&L       LA    R2,&LOC
&C       SETC  ''
         AGO   .CALLNMX
.LR      ANOP
&L       LR    R2,&LOC(1)
&C       SETC  ''
.CALLNMX ANOP
&C       BAL   R9,CHNMIX
         AGO   .NM
.NOLOC   ANOP
&L       BAL   R9,CHNMIX-2
.NM      DC    CL8'&NAME(&I)'
         AIF   ('&INDEX'(1,1) EQ '''').QUOTEIX
&IX      DC    CL8'&INDEX(1)'
         MEXIT
.QUOTEIX ANOP
&IX      DC    CL8&INDEX
         MEXIT
.JUSTNAM ANOP
&J       SETA  K'&NAME(&I)
&L       LA    R5,&J+2
         BAL   R4,SCANNAME
         DC    C'.&NAME(&I). '
.BYBY    MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR - MZHLP MACRO'
         MACRO
         MZHLP &TXT
         LCLA  &I,&L
&L       SETA  K'&TXT(1)-1
         AIF   ('&TXT(1)'(1,1) NE '''').WORD
&L       SETA  &L-2
&I       SETA  2
.LOOP    AIF   ('&TXT(1)'(&I,2) NE '''''' AND                          *
               '&TXT(1)'(&I,2) NE '&&&&').SINGLE
&L       SETA  &L-1
&I       SETA  &I+1
.SINGLE  ANOP
&I       SETA  &I+1
         AIF   (&I LT K'&TXT(1)-1).LOOP
         DC    AL1(&L),C&TXT(1)
         MEXIT
.WORD    DC    AL1(&L),C'&TXT(1)'
         MEND
         TITLE 'MOREZAP CONTROL CARD PROCESSOR'
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP CONTROL CARD PROCESSOR'
         PUNCH '         ALIAS MZAPCC'
         PRINT ON,GEN
         MZSHD 'MAIN LOOP'
         PRINT NOGEN
MZAPCC   MZENT CC
         USING MZAPCC+4096,R12
         LA    R12,MZAPCC+4095
         LA    R12,1(R12)
GETCONCD BAL   R14,GETLINE
         BAL   R14,PUTGOT
         TM    SW3,GANAVSW              IS HE HONEST?
         BO    BUMOP                     NO - TELL HIM THE BEST POLICY
         CLI   IBUF,C'*'                BYPASS COMMENT STATEMENTS
         BE    GETCONCD
         LA    R4,IBUF+6                OPERAND 1
         LA    R5,74                    LENGTH  1
         LA    R6,OPTAB                 OPERAND 2
         L     R7,=X'40000000'          SP PAD AND OP 2 LEN OF 0
         NONBL NOGO=GETCONCD
NEXTOP   IC    R7,2(R6)                 GET LEN-1 FROM OP TBL
         LA    R1,1(R4,R7)              NEXT CHAR IF MATCH
         LA    R2,5(R6,R7)              BR ADDR IF MATCH & LEN EVEN
         SRL   R2,1                     COMPENSATE FOR ODD BR ADDR IF
         SLL   R2,1                      LEN ODD
         EX    R7,CLCOP                 MATCH?
         BNE   NXTOP                     NO - TRY NEXT
         LA    R7,1(R7)                 SET LEN=LEN-1 + 1
         AR    R4,R7                    ADVANCE SCAN PTR
         SR    R5,R7                    DEC SCAN COUNTER
         BNP   SYNTEX                   DON'T GO OVER THE EDGE
         L     R7,=X'40000000'          RESTORE FILL CHAR & 0 COUNT
         BR    R2
NXTOP    LH    R0,0(R6)
         AR    R6,R0
         LTR   R0,R0                    0 NEXT PTR = END OF TBL
         BNZ   NEXTOP
BUMOP    MZERR 'MZP202I INVALID OPCODE'
         SPACE 2
CLCOP    CLC   0(,R4),3(R6)             EX TO TEST OPCODE MATCH
         SPACE 2
BUMVEREP MZERR 'MZP201I STATEMENT MISPLACED'
NOUCB    MZERR 'MZP203I DEVICE NOT FOUND'
         SPACE 1
SYNTEX   EX    0,BLCARD                 MARK COLUMN IN ERROR
         LTR   R5,R5                    BEYOND COL 80?
         BP    *+8                       NO
         LA    R4,IBUF+79                YES - CALL IT 80
         MVI   0(R4),C'|'
         BAL   R14,PUTGOT
         MZERR 'MZP204I INVALID STATEMENT'
         SPACE 2
NOTMCS   MZERR 'MZP206I NOT MCS'
         SPACE 1
NOHC     MZERR 'MZP207I HARDCPY=SYSLOG - NO UCM'
         SPACE 2
NOTSMF   MZERR 'MZP208I NOT SMF'
         SPACE 1
NOTACTVE MZERR 'MZP209I SPECIFIED CONSOLE NOT ACTIVE'
         SPACE 1
NOTCAM   MZERR 'MZP212I TCAM IS NOT ACTIVE'
         SPACE 1
NOTSO    MZERR 'MZP213I TSO NOT ACTIVE'
         SPACE 1
NOHASP   MZERR 'MZP214I HASP NOT ACTIVE'
         SPACE 1
BUMBLDL  MZERR 'MZP215I NAME NOT IN BLDL LIST'
         SPACE 2
INVLD    EX    0,BLCARD
         IC    R9,0(R1)
         EX    R9,MVERR
         OI    SW1,NOGO
         BAL   R14,PUTGOT
         EX    0,BLCARD                 BLANK LINE AFTER ERR MSG
         BAL   R14,PUTGOT
         OI    HIGHRC+3,4
         TM    SW3,TSOSW
         BZ    GETCONCD
       TCLEARQ INPUT
         B     GETCONCD
MVERR    MVC   IBUF(0),1(R1)
         MZSHD 'KEY'
OPTAB    OP    KEY
         NONBL SCANKEY
         SPACE 1
READKEY  EX    0,BLCARD
         MZMVC 'MZP210I KEY'
         L     R0,SCRMBL
         X     R0,TIME
         X     R0,DATE
         ST    R0,MODNAME
         MZHEX IBUF+12,MODNAME,8,BL='?'
         MVI   GETSW+1,0
         MVI   CONSW+3,OFPUT
         BAL   R14,PUTGOT
         BAL   R14,GETLINE
         LA    R6,IBUF+6                POINT TO INPUT
         SPACE 1
TESTKEY  L     R1,MODNAME
         SR    R0,R0
         LA    R2,8
         LR    R14,R0
         SLDL  R0,4
         ALR   R0,R14
         BCT   R2,*-8
         ST    R0,LOCO
         MZHEX MODNAME,LOCO,8,BL=*
         CLC   MODNAME,0(R6)
         BNE   BUMKEY
         OI    SW1,KEYSW
         B     GETCONCD
         SPACE 1
BUMKEY   WTO   'MZP211I INVALID KEY',ROUTCDE=(1,9,11),DESC=1
         B     READKEY
         SPACE 1
SCANKEY  IC    R1,TIME                  HOURS, TRUNCATED EVEN,
         SRL   R1,1                      TO BITS 0-7
         SLL   R1,25
         X     R1,DATE
         X     R1,SCRMBL
         B     TESTKEY+4
         MZSHD 'I/O CONTROL STATEMENTS'
         OP    CONSOLE
         B     CONSOLE
         OP    CON
CONSOLE  MVI   GETSW+1,0
         MVI   CONSW+3,OFPUT
         TM    SW3,TSOSW                BATCH?
         BO    GETCONCD                  NO - NO WTO ROUTINE
         SPACE 1
         L     R10,PUTCON               GET WTO PARAMETER BLOCK
         L     R10,OFINIT(,R10)
         MVI   SETAREA+1,0              ASSUME NO AREA
         SPACE 1
SCANCON  CLI   0(R4),C','
         BNE   SCANCON1
         BUMP  SYNTEX
SCANCON1 NONBL NOGO=GETCONCD
         CLC   =C'DSRT=',0(R4)
         BE    SCANDSRT
         CLC   =C'UNIT=',0(R4)
         BE    SCNCUCB
         CLC   =C'L=',0(R4)
         BNE   SYNTEX
         LA    R4,2(R4)
         SH    R5,*-2
         BNP   SYNTEX
         BAL   R8,SCANUCM
         CLI   0(R4),C'A'               CLEAR AREA ID
         BL    SETUCMID
         CLI   0(R4),C'Z'               Z=NO AREA
         BNL   SETUCMID
         MVC   SETAREA+1(1),0(R4)       SETUP AREA ID
         BUMP  SYNTEX
         USING UCMLIST,R15
SETUCMID TM    UCMATR,UCMUF             IS CONSOLE ACTIVE?
         BZ    NOTACTVE                  NO
         DROP  R15
         MVC   MYUCMID,TSTUCMID+1
SETAREA  MVI   6(R10),0
         B     SCANCON
         SPACE 1
SCNCUCB  BAL   R8,SCANCUCB
         B     SETUCMID
         SPACE 1
SCANDSRT LA    R4,5(R4)
         SH    R5,*-2
         BNP   SYNTEX
         BAL   R9,SCANHEX
         CLI   LOCOL,4
         BNE   SYNTEX
         MVC   0(4,R10),ODATA
         B     SCANCON
         SPACE 3
         OP    DEBUG
         OI    SW1,DEBUGSW              LET IT ALL HANG OUT
         TM    CVTDCB,CVT6DAT           VS?
         BO    GETCONCD                  YES - SKIP LOADING OS NAME
         L     R1,CVTSVDCB              LOAD ABDUMP SERVICE NOW,
         LOAD  EP=IGC0A05A,DCB=(1)       WHILE THERE IS CORE
         B     GETCONCD
         SPACE 2
         OP    HELP
         L     R15,AHELP                I'D LIKE TO HELP YOU OUT,
         B     NOCC                      WHICH WAY DID YOU COME IN?
         SPACE 3
         OP    MONITOR
         B     MON
         OP    MON
MON      NI    SW3,255-NOMONSW
         B     GETCONCD
         SPACE 2
         OP    NOMONITOR
         B     NOMON
         OP    NOMON
NOMON    OI    SW3,NOMONSW
         B     GETCONCD
         SPACE 2
         OP    END
         TM    SYSIN+DCBOFLGS-IHADCB,DCBOFOPN
         BZ    BUMOP                    NO SYSIN - CONSOLE STAYS
         MVI   GETSW+1,X'F0'
         MVI   CONSW+3,OFATTN
         B     GETCONCD
         MZSHD 'FAILURE LIMITERS'
*        OP    GO
*        CLI   GETSW+1,X'F0'
*        BE    BUMOP
*        NI    SW1,255-NOGO
*        B     GETCONCD                 MOVED AFTER GOVRFLB
         SPACE 2
         OP    RESET
         NONBL NOGO=RESET
         CLI   0(R4),X'7F'              PUNCTUATION?
         BH    *+8                       NO
         LA    R4,1(R4)                  YES - SKIP IT
         CLC   0(3,R4),=C'EOD'
         BNE   RESET
         OI    SW2,EOD
RESET    L     R15,ADDT                  IS DEBUG OPTION SET?
         TM    SW1,DEBUGSW
         BO    NOCC
         L     R15,AGRAIL
         TM    SW2,LPASW
         BO    NOCC
         L     R15,AESP                 IS ESD NEEDED?
         TM    SW1,CSECTSW
         BO    NOCC
         L     R15,AHOVEL               IS DUMP BEFORE NEEDED?
         TM    SW1,DBEFSW
         BO    NOCC
         L     R15,APATCH               IS VER/REP NEEDED?
         TM    SW2,VEREPSW
         BO    NOCC
         L     R15,AHOVEL               IS DUMP AFTER NEEDED?
         TM    SW1,DAFTSW
         BO    NOCC
         L     R15,A#666                 NO - RESET
NOCC     MZGO
         MZSHD 'NAME'
         OP    NAME
SCANNAME MVI   NAMTYP+1,VRNAME
         NI    SW2,255-NAMESW               TURN OF V/R OK
*              WILL BE TURNED BACK ON IF NO SYNTAX ERROR
         CLI   0(R4),C'.'               SPACE NOT REQUIRED BEFORE .
         BE    SCANNAM
         CLI   0(R4),C' '
         BNE   SYNTEX
         NONBL
         SPACE 1
SCANNAM  XC    EBC,EBC
         MVI   EBC,C'.'
         CLI   0(R4),C'.'               IS THIS NUC?
         BE    *+12
         BAL   R9,SCANEBC
         B     *+10
         BUMP  SYNTEX
         MVC   MODNAME,EBC
         XC    EBC,EBC
         NONBL NOGO=NOCSECT
         BAL   R9,SCANEBC
NOCSECT GETMAIN R,LV=VRCSECT+8-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRCSECT+8-VRSECT),VRSECT
NAMTYP   MVI   VRTYPE,VRNAME
         CLC   MODNAME,=CL8'NUCLEUS'
         BE    *+14
         CLC   MODNAME,NUCMEM
         BNE   *+8
         MVI   MODNAME,C'.'
         MVC   VRNAM(16),MODNAME        (VRNAM,VRCSECT)=(MODNAME,EBC)
         OI    SW1,CSECTSW              ESD/MSG NEEDED
         OI    SW2,LPASW                CDE/LRB NEEDED
CHAINCCN OI    SW2,NAMESW               V/R FOLLOWING IS OK
*        B     CHAINCC
         DROP  R1
         SPACE 2
         USING VRSECT,R1
*              ENTRY WITH R1 SET TO SINGLE NEW ENTRY
CHAINCC  LR    R0,R1
         SPACE 1
*              ENTRY WITH R1 SET TO FIRST NEW ENTRY, R0 SET TO LAST
*              CALLER MUST MOVE LINENO INTO EACH ENTRY BUT 1ST
CHAINCCM MVC   VRLINE,LINENO            SET STATEMENT # FOR 1ST
         DROP  R1
         USING VRSECT,R2
         MZLT  R2,TAIL                  1ST TIME CHAIN CALLED?
         ST    R0,TAIL                  SET NEW LAST ENTRY REGARDLESS
         BNZ   *+12                      BR IF ¬ 1ST TIME
         ST    R1,HEAD                  MAKE NEW CHAIN 1ST CHAIN
         B     GETCONCD
         MZSTA R1,VRNEXT                ADD NEW CHAIN TO END OF OLD
         B     GETCONCD
         DROP  R2
         MZSHD 'CONTROL BLOCK STATEMENTS'
         OP    AVT
         NI    SW2,255-NAMESW
         PRINT GEN
         MZCB  AVT,IND=0,PTR=CVTAQAVT,LEN=1226,ERR=NOTCAM
         PRINT NOGEN
         DROP  R1
         SPACE 3
         OP    BLDL
         NI    SW2,255-NAMESW
         CLI   0(R4),C' '               SPACE REQUIRED AFTER OPCODE
         BNE   SYNTEX
         NONBL
         BAL   R9,SCANEBC               SCAN NAME
         PRINT GEN
         FBLDL
         SPACE 2
FBLDL    LH    R0,0(R15)
         LH    R5,2(R15)
         LTR   R0,R0
         BZR   R9
CBLDL    CLC   4(8,R15),EBC
         BE    FNDBLDL
         AR    R15,R5
         BCT   R0,CBLDL
         BR    R9
FNDBLDL  LA    R2,4(,R15)
         MZCB  BLDL,LEN=(R5),PTR=(R2),VRNAM=EBC
         PRINT NOGEN
         SPACE 3
         OP    CDE
         NI    SW2,255-NAMESW
         B     BUMOP
         SPACE 3
         OP    CVT
         NI    SW2,255-NAMESW
         MZNMX (IEAQBK00,MVT,IEACVTRN,MFT),IEACVT
         SPACE 3
         OP    GOVRFLB
         NI    SW2,255-NAMESW
         MZNMX (IEAQGM00,MVT),GOVRFLB
         SPACE 3
         OP    GO                       MOVED BECAUSE OF GOVRFLB
         CLI   GETSW+1,X'F0'            INPUT FROM CARDS?
         BE    BUMOP                     I HATE CARDS
         NI    SW1,255-NOGO
         B     GETCONCD
         SPACE 3
         OP    HCT
         NI    SW2,255-NAMESW
         MZCB  HCT,SVC=&HASPSVC,LEN=320,REG=R15,ERR=NOHASP
         DROP  R1
         SPACE 3
         OP    IBMORG
         NI    SW2,255-NAMESW
         MZNMX (IBMORG,MVT)
         SPACE 3
         OP    MSER
         NI    SW2,255-NAMESW
         MZNMX IEEMSER
         SPACE 3
         OP    PATCH
         NI    SW2,255-NAMESW
         MZNMX PATCH
         SPACE 3
         OP    QMRES
         NI    SW2,255-NAMESW
         MZNMX IEFJOB
         SPACE 3
         OP    SCVT
         NI    SW2,255-NAMESW
         MZNMX (IGC003,MVT),IEABEND
         SPACE 3
         OP    SMCA
         NI    SW2,255-NAMESW
         PRINT GEN
         MZCB  SMCA,PTR=CVTSMCA,LEN=148,ERR=NOTSMF
         PRINT NOGEN
         DROP  R1
         SPACE 3
         OP    TACT
         NI    SW2,255-NAMESW
         MZNMX (IEAQTAQ,OS/MVT)
         SPACE 3
         OP    TSCVT
         NI    SW2,255-NAMESW
         PRINT GEN
         MZCB  TSCVT,PTR=CVTTSCVT,LEN=132,ERR=NOTSO
         PRINT NOGEN
         EJECT
         OP    UCB
         NI    SW2,255-NAMESW
         CLI   0(R4),C'='
         BE    *+12
         CLI   0(R4),C' '
         BNE   SYNTEX
         NONBL
         BAL   R9,SCANUCB
         MVC   NAMEUCB+4(3),UCBNAME-SRTE(R2)
         MZNMX (IEAQFX00,MVT,IEAAIH00,MFT),(UCB=CUU),LOC=(R2),         *
               IX=NAMEUCB
         EJECT
         OP    UCM
*              EQUIVALENT TO:
         SPACE 1
*        NAME  .IEEUCMC
*        INDEX <VARIABLE>
         NONBL
         CLC   =C'UNIT=',0(R4)
         BE    SCNCNCUU
         CLC   =C'ID=',0(R4)
         BE    SCNCONID
         L     R2,CVTCUCB
         USING UCMXECB,R2
         CLC   =C'BASE',0(R4)
         BE    SETUCMB
         CLC   =C'PREFIX',0(R4)
         BE    SETUCMP
         TM    UCMMODE,UCMMCS           MCS SUPPORT?
         BZ    NOTMCS                    REST OF TESTS DON'T APPLY
         SH    R2,H4                     YES - GET MCS UCM PREFIX
         L     R2,0(,R2)
         USING MCSUCM,R2
         CLC   =C'MCS',0(R4)
         BE    SETMCS
         CLC   =C'MASTER',0(R4)
         BE    SETMAST
         CLC   =C'HARDCOPY',0(R4)
         BNE   SYNTEX
         TM    UCMSFLGS,UCMSYSG         IS SYSLOG HARDCOPY?
         BO    NOHC                      YES - NO UCM
         L     R2,UCMHCUCM
         MZNMX IEEUCMC,'"HC UCM"',LOC=(R2)
SETMAST  L     R2,UCMMCENT
         MZNMX IEEUCMC,'"MC UCM"',LOC=(R2)
         SPACE 1
SETMCS   MZNMX IEEUCMC,' UCM MCS',LOC=(R2)
         DROP  R2
         SPACE 1
SETUCMP  SH    R2,H8
         MZNMX IEEUCMC,' UCM PFX',LOC=(R2)
SETUCMB  MZNMX IEEUCMC,IEECUCB
SCNCONID LA    R4,3(R4)
         SH    R5,*-2
         BNP   SYNTEX
         BAL   R8,SCANUCM
         SR    R0,R0
         IC    R0,TSTUCMID+1
         CVD   R0,MODNAME
         OI    MODNAME+7,X'0F'
         UNPK  IDUCM+6(2),MODNAME
         MZNMX IEEUCMC,' UCM #XX',LOC=(R15),IX=IDUCM
SCNCNCUU BAL   R8,SCANCUCB
         MVC   UCMCUU+5(3),0(R4)
         MZNMX IEEUCMC,' UCM CUU',LOC=(R15),IX=UCMCUU
         SPACE 3
         OP    USERORG
         MZNMX (IBMORG,MVT),USERORG
         MZSHD 'POINTER MANIPULATION'
         OP    <-
         B     SETPTR
         SPACE 1
         OP    SETPTR
SETPTR   TM    SW2,NAMESW               IN SCOPE OF NAME OR POINT?
         BZ    BUMVEREP                  NO - <- IS INVALID
         BAL   R9,SCANPLEN               YES - TEST FOR PTR LENGTH
         BAL   R9,SCANREF
         NONBL
         CLI   0(R4),C'*'               IS IT <- N *?
         BE    SAVEOP
         BAL   R8,SCANPTR
         DC    AL1(VRREFER)
         SPACE 1
SAVEOP   XC    LENB(4),LENB
         BAL   R8,SETREF
         DC    AL1(VRSAVE)
         SPACE 2
         OP    ->
         B     POINT
         SPACE 1
         OP    POINT
POINT    BAL   R9,SCANPLEN
         NONBL
         CLC   =C'REF',0(R4)
         BE    UNSAVE
         TM    SW2,NAMESW               IN SCOPE OF NAME OR -> ?
         BZ    BUMVEREP                  NO
         XC    REFPTR(8),REFPTR
         BAL   R8,SCANPTR
         DC    AL1(VRPOINT)
         SPACE 1
UNSAVE   LA    R4,3(R4)
         SH    R5,*-2
         BNP   SYNTEX
         NONBL
         BAL   R9,SCANREF
         XC    LENB(4),LENB
         OI    SW2,NAMESW               VER/REP MAY FOLLOW
         BAL   R8,SETREF
         DC    AL1(VRUNSAVE)
         SPACE 1
SCANPLEN XC    LOCL,LOCL                VRLOC=0
         MVI   PTYPE,0                  ASSUME 32 BIT ADDRESS
         CLI   0(R4),C','               COMMA FOLLOW OPCODE?
         BNER  R9                        NO - CAN'T HAVE POINTER LENGTH
         BUMP  SYNTEX
         CLC   =C'A ',0(R4)
         BE    SPLN2
         CLC   =C'32 ',0(R4)
         MVI   PTYPE,2                  ASSUME 16 BIT ADDRESS
         CLC   =C'H ',0(R4)
         BE    SPLN3
         CLC   =C'16 ',0(R4)
         BE    SPLN3
         MVI   PTYPE,3                  ASSUME 15 BIT ADDRESS
         CLC   =C'Y ',0(R4)
         BE    SPLN2
         CLC   =C'15 ',0(R4)
         BE    SPLN3
         MVI   PTYPE,1                  MUST BE 24 BIT OR INVALID
         CLC   =C'24 ',0(R4)
         BE    SPLN3
         CLC   =C'AL3 ',0(R4)
         BNE   SYNTEX
         BUMP  SYNTEX
SPLN3    BUMP  SYNTEX
SPLN2    BUMP  SYNTEX
         BUMP  SYNTEX
         BR    R9
         SPACE 1
SCANREF  NONBL
         SR    R0,R0                    SCAN ONE HEX DIGIT
         BAL   R15,DIGIT
         LR    R14,R0
         SLL   R14,3
         LA    R14,REF(R14)
         ST    R14,REFPTR
         BR    R9
         SPACE 1
SCANPTR  BAL   R9,SCANHEX
         BO    SYNTEX
         ST    R0,LOCL                  STORE DISPLACEMENT TO POINTER
         NONBL
         BAL   R9,SCANHEX               SCAN CONTROL BLOCK LENGTH
         MZBC  MO,SYNTEX                LENGTH MUST BE POSITIVE
         STH   R0,LENB                  SAVE LENGTH
         SRA   R0,15                    LENGTH MUST BE < 32K
         BNZ   SYNTEX
         NONBL NOGO=SETREF              IS THERE A PREFIX LENGTH?
         CLI   0(R4),C'-'                YES - MUST START WITH HYPHEN
         BNE   SYNTEX
         BUMP  SYNTEX                   SPACE PAST HYPHEN
         BAL   R9,SCANHEX               SCAN PREFIX LENGTH
         MZBC  MO,SYNTEX                MUST BE POSITIVE
         STH   R0,IXB
         AH    R0,LENB
         STH   R0,LENB
         SRA   R0,15                    MUST BE < 32K
         BNZ   SYNTEX
SETREF GETMAIN R,LV=VRIXB+2-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRIXB+2-VRSECT),VRSECT
         MVC   VRTYPE,0(R8)
         MVC   VRLOC,LOCL               STORE POINTER DISPLACEMENT
         MVC   VRPTR(8),REFPTR          STORE PTR, LENB, AND IXB
         MVI   VRPTR,0                  STORE POINTER LENGTH
PTYPE    EQU   *-3
         B     CHAINCC
         DROP  R1
         MZSHD 'BASE'
         OP    BASE
         MVI   BASTYP+1,VRBASE
         CLI   0(R4),C'='
         BE    SCANBASE
         CLI   0(R4),C' '
         BNE   SYNTEX
SCANBASE NONBL
         BAL   R9,SCANHEX
         BNP   SYNTEX
       GETMAIN R,LV=VRLOC+4-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRLOC+4-VRSECT),VRSECT
BASTYP   MVI   VRTYPE,VRBASE
         MVC   VRLOC,LOCO
         B     CHAINCC
         DROP  R1
         MZSHD 'INDEX'
         OP    INDEX
         MVI   BASTYP+1,VRHINDEX
         CLI   0(R4),C'='
         BE    SCANBASE
         CLI   0(R4),C'-'
         BE    SCANBASE
         CLI   0(R4),C' '
         BNE   SYNTEX
         NONBL
         CLI   0(R4),C'='
         BE    SCANBASE
         BAL   R9,SCANEBC
       GETMAIN R,LV=VRIXNAME+8-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRIXNAME-VRSECT),VRSECT
         MVI   VRTYPE,VRINDEX
         MVC   VRIXNAME,EBC
         OI    SW1,CSECTSW              FORCE ESD READ OVERLAY
         B     CHAINCC
         DROP  R1
         MZSHD 'LIB'
         OP    LIB
         NI    SW2,255-NAMESW           V/R FOLLOWING IST VERBOTEN
         NONBL
         SR    R2,R2
         CLC   =C'AUTO',0(R4)
         BE    STDCB
         BAL   R9,SCANEBC
         BCTR  R4,0
         LA    R2,SYSNUC
         USING IHADCB,R2
         L     R0,SAVE+36               TIOT FROM R4
NXTDCB   LH    R1,DCBTIOT
         AR    R1,R0
         USING TIOELNGH,R1
         CLC   TIOEDDNM,EBC
         BE    STDCB
         L     R2,NEXTDCB
         LTR   R2,R2
         BNZ   NXTDCB
         B     SYNTEX
         SPACE 1
STDCB    TM    DCBDSORG,2               DSORG=PO?
         BZ    SYNTEX                    NO
       GETMAIN R,LV=VRDCB+4-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRDCB+4-VRSECT),VRSECT
         ST    R2,VRDCB
         MVI   VRTYPE,VRLIB
         B     CHAINCC
         DROP  R1
         MZSHD 'VER/REP'
         OP    VERIFY
V        MVI   REPTYP+1,VRVER
         B     VEREP
         SPACE 2
         OP    VER
         B     V
         SPACE 2
         OP    V
         B     V
         EJECT
         OP    REPLACE
R        MVI   REPTYP+1,VRREP
         TM    SW1,KEYSW                WHO DOES HE THINK HE IS?
         BZ    BUMVEREP                  HE DOESN'T KNOW, TELL HIM
VEREP    TM    SW2,NAMESW               IN SCOPE OF NAME, CVT, OR UCB?
         BZ    BUMVEREP                  NO - KVETCH
         CLI   0(R4),C'='
         BE    SCANREP
         CLI   0(R4),C'-'
         BE    SCANREP
         CLI   0(R4),C' '
         BNE   SYNTEX
         NONBL
SCANREP  BAL   R9,SCANHEX
         BO    SYNTEX
         ST    R0,LOCL
         NONBL
         BAL   R9,SCANHEX
         CLI   HEXSIGN,LCR              IS DATA NEGATED?
         BE    SYNTEX                    YES - NEGATE ZAPS
         MZGM  13,VRDAT-VRSECT(R1)      GET STORAGE FOR VER/REP ENTRY
         USING VRSECT,R1
         XC    0(VRDAT-VRSECT,R1),0(R1)
REPTYP   MVI   VRTYPE,VRREP
         MVC   VRLC,LOCL+1
         IC    R2,LOCOL
         BCTR  R2,0
         STC   R2,VRDATLN
         EX    R2,FILLREP
         OI    SW2,VEREPSW              VER/REP OVERLAY REQUIRED
         B     CHAINCC
         SPACE 2
FILLREP  MVC   VRDAT(0),ODATA
         DROP  R1
         SPACE 2
         OP    REP
         B     R
         SPACE 2
         OP    R
         B     R
         MZSHD 'DUMP, ...'
         OP    DUMPB
         B     SCANDUMP
         SPACE 2
         OP    DUMPA
         MVI   NAMTYP+1,VRDUMPA
         MVI   DMPTYP+1,VRHDUMPA
         OI    SW1,DAFTSW               FORCE DUMP AFTER OVERLAY
         B     SCNDMP
         SPACE 2
         OP    DUMPT
         MVI   NAMTYP+1,VRDUMPT
         MVI   DMPTYP+1,VRHDUMPT
         OI    SW1,DAFTSW
         B     SCNDMP
         SPACE 2
         OP    DUMP,NEXT=*
SCANDUMP MVI   NAMTYP+1,VRDUMP
         MVI   DMPTYP+1,VRHDUMP
         OI    SW1,DBEFSW               FORCE DUMP-BEFORE OVERLAY
SCNDMP   CLI   0(R4),C'='
         BE    SCNHDMP
         CLI   0(R4),C'-'
         BE    SCNHDMP
         CLI   0(R4),C' '
         BNE   SYNTEX
         NONBL
         CLI   0(R4),C'='
         BE    SCNHDMP
         CLI   0(R4),C'-'
         BE    SCNHDMP
         NI    SW2,255-NAMESW           V/R FOLLOWING IST VERBOTEN
         B     SCANNAM
SCNHDMP  BAL   R9,SCANHEX
         BO    SYNTEX
         ST    R0,LOCL
         NONBL
         BAL   R9,SCANHEX
         BNP   SYNTEX
       GETMAIN R,LV=VRLEN+4-VRSECT,SP=13
         USING VRSECT,R1
         XC    VRSECT(VRLEN+4-VRSECT),VRSECT
         MVC   VRLC,LOCL+1
         MVC   VRLEN,LOCO
DMPTYP   MVI   VRTYPE,VRDUMP
         B     CHAINCC
         DROP  R1
         MZSHD 'SUBROUTINES AND DATA AREAS'
         SR    R2,R2                    ALT EP TO CHAIN NEW NAME/INDEX
*                                       BYPASS DIRECT USE OF THE MACRO
*                                        GETMAIN UNTIL THE HAMORIM FIX
*                                        THE MACRO.
*                                       UP YOUR CNOP.!
         PRINT GEN
CHNMIX   MZGM  13,VRCSECT+8-VRSECT+VRIXNAME+8-VRSECT
         PRINT NOGEN
         USING VRSECT,R1
         XC    VRSECT(VRCSECT+8-VRSECT+VRIXNAME+8-VRSECT),VRSECT
         LA    R0,VRCSECT+8
         ST    R0,VRNEXT
         MVI   VRTYPE,VRNAME
         MVI   VRNAM,C'.'
         MVC   VRCSECT,0(R9)
         MVI   VRTYPE+VRCSECT+8-VRSECT,VRINDEX
         MVC   VRLINE+VRCSECT+8-VRSECT,LINENO
         MVC   VRIXNAME+VRCSECT+8-VRSECT,8(R9)
         OI    SW1,CSECTSW
         OI    SW2,NAMESW+LPASW
         LA    R2,0(R2)
         LTR   R2,R2
         BZ    CHAINCCM
         ST    R2,VRLOC+VRCSECT+8-VRSECT
         MVI   VRFLG+VRCSECT+8-VRSECT,VRFND
         B     CHAINCCM
         DROP  R1
         SPACE 3
         USING UCMXECB,R14
         USING UCMECB,R15
FINDUCM  L     R14,CVTCUCB
         LM    R15,R1,UCMVEA
         EX    0,0(,R9)
         BE    4(R9)
         BXLE  R15,R0,*-8
         MZERR 'MZP205I NOT A VALID CONSOLE'
         DROP  R14,R15
         SPACE 3
SCANUCM  BAL   R9,SCANDEC
         BNP   SYNTEX
         CH    R0,=H'31'
         BH    SYNTEX
         STC   R0,TSTUCMID+1
         USING UCMECB,R15
         BAL   R9,FINDUCM
TSTUCMID CLI   UCMID,0
         BR    R8
         SPACE 2
SCANCUCB LA    R4,5(R4)
         SH    R5,*-2
         BNP   SYNTEX
         BAL   R9,SCANUCB
         BAL   R9,FINDUCM
         C     R2,UCMUCB
         BR    R8
         DROP  R15
         SPACE 2
SCANUCB  CLI   0(R4),C'='               EQUAL SIGN?
         BNE   SCANUCB1                  NO
         BUMP  SYNTEX                    YES - BYPASS IT
SCANUCB1 L     R1,CVTILK2               GET UCB LOOKUP TABLE
SCANUCB2 CLI   0(R1),X'FF'              END OF LOOKUP TABLE?
         BE    NOUCB                     YES - BAD CUU
         MZITH R2,0(R1)                 GET UCB ADDRESS IN LOW BYTES
         LA    R1,2(,R1)                POINT TO NEXT ENTRY IN LOOKUP
         BZ    SCANUCB2                 IGNORE DUMMY POINTERS
         USING SRTE,R2
         CLC   UCBNAME,0(R4)            IS THIS THE ONE?
         BNE   SCANUCB2                  IF AT FIRST YOU DON'T SUCCEED
         BR    R9
         SPACE 2
SCANDEC  SR    R0,R0
         MVI   DECSIGN,LTR
         CLI   0(R4),C'-'
         BNE   *+14
         MVI   DECSIGN,LCR
         BUMP  SYNTEX
         TM    0(R4),C'0'
         BNO   SYNTEX
DECDIGIT LA    R14,15
         MH    R0,=H'10'
         IC    R15,0(R4)
         NR    R15,R14
         AR    R0,R15
         BUMP  SYNTEX
         TM    0(R4),C'0'
         BO    DECDIGIT
DECSIGN  LTR   R0,R0
         BR    R9
         SPACE 2
SCANHEX  XC    ODATA,ODATA
         CLI   0(R4),C'='
         BNE   *+10
         BUMP  SYNTEX
         MVI   HEXSIGN,LTR
         CLI   0(R4),C'-'
         BNE   *+14
         MVI   HEXSIGN,LCR
         BUMP  SYNTEX
         LA    R6,ODATA
         SR    R1,R1
         SR    R0,R0
         MVI   SCAN2+1,0                SET MODE TO HEX DIGITS
SCAN2    B     SCANBYTE
         CLI   0(R4),C''''              IS IT INITIAL APOSTROPHE?
         BNE   SCANDIGS                  NO - SCAN TWO HEX DIGITS
         BUMP  SYNTEX                    YES
         MVI   SCAN2+1,X'F0'            SET MODE TO STRING
SCANBYTE CLI   0(R4),C''''              IS DOUBLE CHAR REQUIRED?
         BE    *+12                      YES
         CLI   0(R4),C'&&'
         BNE   SCANBYT                   NO
         CLC   0(2,R4),0(R4)            IS 2ND CHAR SAME AS 1ST?
         BNE   SYNTEX                    NO - ERROR
         BUMP  SYNTEX                   BYPASS 1ST CHAR
SCANBYT  IC    R0,0(R4)                 GET CURRENT BYTE
         BUMP  SYNTEX
         CLI   0(R4),C''''              IS THIS ALL THERE IS?
         BNE   SCAN3                     NO
         CLI   1(R4),C''''               MAYBE - MIGHT BE DOUBLE '
         BE    SCAN3                     NO
         BUMP  SYNTEX                    YES
         MVI   SCAN2+1,0                BACK TO DIGIT MODE
         B     SCAN3
SCANDIGS BAL   R15,DIGIT
         BAL   R15,DIGIT
SCAN3    STC   R0,0(R6)
         LA    R6,1(R6)
         LA    R1,1(R1)
         EX    0,SCAN2                  GO TO SCANBYTE IF STRING MODE
         CLI   0(R4),C','
         BNE   *+10
         BUMP  SYNTEX
         CLI   0(R4),C'-'               END OF FIELD?
         BE    *+28
         CLI   0(R4),C'/'
         BE    *+20
         CLI   0(R4),C':'
         BE    *+12
         CLI   0(R4),C' '
         BNE   SCAN2
         ST    R0,LOCO
         STC   R1,LOCOL
         CLI   LOCOL,4                  IS LENGTH GE 4?
         BL    HEXSIGN
         TM    *+1,1                    SET CC TO 3(O)
         BR    R9
HEXSIGN  LTR   R0,R0
         BR    R9
LCR      EQU   X'13'
LTR      EQU   X'12'
         SPACE 2
DIGIT    TM    0(R4),X'C0'
         BNO   SYNTEX
         TM    0(R4),X'30'
         BM    SYNTEX
         SR    R14,R14
         NI    0(R4),X'1F'
         IC    R14,0(R4)
         IC    R14,HEXT1(R14)
         EX    R14,CLIFF
         BE    SYNTEX
         SLL   R0,4
         OR    R0,R14
         BUMP  SYNTEX
         BR    15
         SPACE 1
CLIFF    CLI   =X'FF',0                 EXECUTED TO TEST FOR BAD HEX
         SPACE 2
SCANEBC  MVC   EBC,BLANKARD
         LA    R1,EBC
         LA    R0,8
SCANEBC1 MVC   0(1,R1),0(R4)
         CLI   0(R1),C'+'               IS IT +0 FOR DING-DONG SVC?
         BNE   *+8                       NO
         MVI   0(R1),X'C0'               YES - MAKE IT +0
         BUMP  SYNTEX
         CLI   0(R4),C' '
         BER   R9
         CLI   0(R4),C'.'
         BER   R9
         LA    R1,1(R1)
         BCT   R0,SCANEBC1
         B     SYNTEX
         SPACE 2
BUMPCOL  LA    R4,1(R4)
         BCT   R5,2(R14)
         LH    R15,0(R14)
         B     0(R11,R15)
         SPACE 2
HEXTAB   DC    C'0123456789ABCDEF'
HEXT1    DC    AL1(255,10,11,12,13,14,15),9AL1(255)
         DC    AL1(0,1,2,3,4,5,6,7,8,9),6AL1(255)
LOCL     DS    A
LOCO     DS    A
LOCOL    DS    X
MODNAME  DS    D
EBC      DS    CL8
         SPACE 1
REFPTR   DS    A
LENB     DS    H
IXB      DS    H
         LTORG
         DROP  R11,R12
         LTORG
         EJECT
        MZWORK TIOT=YES,UCB=YES,MAIN=YES,GEN=NOGEN
         MZSHD 'UCM, ... MAP'
IEECUCM  DSECT
         PRINT GEN
       IEECUCM
         END
./ ADD NAME=MZAP3    0100-19106-19106-1238-00194-00194-00000-MZAP78  18
MZAP3    TITLE 'MOREZAP CDE AND LPDE LOOKUP - COPYRIGHT 1975 SHMUEL MET*
               Z'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         SPACE 5
         MACRO
&L       MZ3   &TYPE
         COPY  MZGBL
         MZSET
         AIF   ('&TYPE' EQ 'CDE').CDE
         MNOTE 12,'&&TYPE=&TYPE IS INVALID'
         MEXIT
.*
.CDE     AIF   ('&CPU' EQ '370').CDE370
&L       MVC   VRCDEPTR+1(3),LLCDPTR+1
         MEXIT
.CDE370  ANOP
&L       STCM  R6,7,VRCDEPTR+1
         MEXIT
         MEND
         SPACE 5
         COPY  MZGBL
         PUNCH '         ALIAS MZAPCDE'
         TITLE 'MOREZAP CDE LOOKUP'
         PRINT GEN
MZAPCDE  MZENT
         NI    SW2,255-LPASW
         SR    R8,R8                    LIB AUTO
         L     R4,HEAD
         USING VRSECT,R4
NXTVR    CLI   VRTYPE,VRNAME
         BL    NEXTVR
         CLI   VRTYPE,VRLIB
         BE    LIB
         CLI   VRTYPE,VRDUMPT
         BH    NEXTVR
         TM    VRFLG,VRFND              WAS RESOLUTION FORCED BY GETCC?
         BO    NEXTVR                    YES - LET IT BE
         CLI   VRNAM,C'.'
         BE    NUCLIM
         TM    SW1,NOTNUC
         BO    FAKEFIND
         MZKEY 0
         MZSSM DIS
         MZLT  R6,TSLPA
         L     R7,CMDL
         BZ    NOTSO
         MZLT  R2,CVTTSCVT
         BZ    NOTSO
         USING TSCVT,R2
         CLC   TSLPA+1(3),TSCVTLPA+1
         BNE   NOTSO
         USING CDENTRY,R6
         SPACE 1
NXTCDE   CLC   CDNAME,VRNAM
         BE    FNDCDE
         MZLT  R6,CDCHAIN
         BNZ   NXTCDE
         SPACE 1
NOTSO    LTR   R7,R8                    GET LIB DCB
         BNZ   NOTAUTO
         L     R7,SVC                   IS IT IFG, IGC, IGG, IGF, ETC.?
         CLC   =C'IFG',VRNAM             O/C/EOV?
         BE    NOTAUTO                    YES
         CLC   =C'IG',VRNAM              SVC, EREP, AM, ETC.?
         BE    NOTAUTO                    YES
         L     R7,LINK                    NO
         SPACE 1
NOTAUTO  TM    CVTDCB,CVT6DAT           IS THIS VS?
         BZ    NOTVS                     NO - MVT
         ICM   R6,7,CVTQLPAQ+1          IS THERE A MLPA?
         BZ    NOMLPA                    NO - SEARCH FLPA
NXTCDE1  CLC   CDNAME,VRNAM
         MNOTE 0,'LATER ON, CODE SHOULD BE ADDED TO SUPPRESS PAGEOUT'
         MNOTE 0,' IF THIS IS ALSO IN PLPA'
         BE    FNDCDE
         MZLT  R6,CDCHAIN
         BNZ   NXTCDE1
         SPACE 2
*        REG   IEAVVMSR INPUT           IEAVVMSR OUTPUT
*        R0    NAME(1-4)                L(LPDE)
*        R1    NAME(5-8)
*        R3    L(CVT)
*        R7    BASE
*        R14   +0 OK
*              +4 NOT FOUND (R0-R6 UNCHANGED)
         SPACE 1
NOMLPA   LM    R0,R1,VRNAM
         L     R7,CVTLPDSR              LPDA SEARCH EP
         BALR  R14,R7
         B     *+8
         B     NOTFOUND
         USING LPDE,R1
         OI    VRCDEPTR,VRISLPDE        FLAG AS LPDA
         STCM  R0,7,VRCDEPTR+1
         LR    R1,R0                    ESTABLISH ADDRESSABILITY
         MVC   VRBEGIN,LPDEXTAD
         MVC   VRSIZE,LPDEXTLN+1
         OI    VRFLG,VRXLE+VR1XL
         L     R7,LPAL                  LIB=SYS1.LPALIB
         B     NEXTVR1
         DROP  R1
         SPACE 2
NOTVS    L     R5,CVTHEAD               GET MASTER SCHEDULER TCB
         USING TCB,R5
         L     R5,TCBOTC
         L     R5,TCBLLS                GET MS LLE CHAIN FOR LINKPACK
         USING LLE,R5
NXTLLE   L     R6,LLCDPTR
         USING CDENTRY,R6
         CLC   CDNAME,VRNAM
         BNE   NEXTLLE
FNDCDE   MZSTA R6,VRCDEPTR
         TM    CDATTR,CDMIN             IS THIS MINOR CDE?
         BZ    *+8                       NO - MAJOR
         L     R6,CDXLMJP                YES - GET MAJOR CDE
         TM    CDATTR2,CDXLE            ANY XL?
         BZ    NEXTVR1                   NO - ENABLE & GET NEXT VR
         L     R6,CDXLMJP               GET XL
         OI    VRFLG,VRXLE
         USING XL,R6
         L     R1,EXLNUMRL              # RELOC FACTORS = 1?
         BCT   R1,MULTXTNT
         OI    VRFLG,VR1XL
         MVC   VRBEGIN+1(3),EXLISTLN+5
         MVC   VRSIZE,EXLISTLN+1
         B     NEXTVR1
MULTXTNT OI    SW1,CSECTSW              FORCE ESD LOAD FOR MULT XL
         SPACE 1
NEXTVR1  MZSSM ENB
         MZKEY KLUB                     BACK TO NORMAL KEY
         SPACE 1
SETDCB   MZSTA R7,VRDCBPT
         SPACE 1
NEXTVER  TM    VRFLG,VRXLE              IF NOT FOUND,
         BZ    BADVR                     SET NOGO
         CLI   VRCSECT,0                IF CSECT NAME SPECIFIED,
         BNZ   NEXTVR
         OI    VRFLG,VRFND+VRNAMFND
         TM    VRFLG,VR1XL              IS IT BLOCK LOAD?
         BO    NEXTVR                    YES - CSECTS OPTIONAL
BADVR    OI    SW1,NOGO                 SUPPRESS REPS
         OI    VRFLG,VRFAIL
NEXTVR   MZLT  R4,VRNEXT
         BNZ   NXTVR
         L     R15,ADDT
         TM    SW1,DEBUGSW
         BO    BYBY
         L     R15,AESP
         TM    SW1,CSECTSW
         BO    BYBY
         L     R15,AHOVEL
         TM    SW1,DBEFSW
         BO    BYBY
         L     R15,APATCH
         TM    SW2,VEREPSW
         BO    BYBY
         L     R15,A#666
BYBY     MZGO
         SPACE 2
LIB      L     R8,VRDCB
         LA    R8,0(,R8)
         B     NEXTVR
         SPACE 1
         SPACE 2
FAKEFIND OI    VRFLG,VRXLE+VR1XL        FAKE CDE FOUND
         MVI   VRSIZE,255                B I G
         OI    SW1,CSECTSW
         B     NEXTVER
         SPACE 2
NUCLIM   MVC   VRSIZE,CVTNUCB+1
         OI    VRFLG,VRXLE+VR1XL        NOT TRUE BUT NEEDED BY V/R OVLY
         LA    R7,SYSNUC
         B     SETDCB
         SPACE 2
NEXTLLE  MZLT  R5,LLECHAIN
         BNZ   NXTLLE
NOTFOUND OI    SW1,NOGO                 MODULE NOT FOUND - SUPPRESS REP
         B     NEXTVR1
         LTORG
         PRINT NOGEN
        MZWORK MAIN=YES,TCB=YES,CD=YES
      IKJTSCVT
         END
./ ADD NAME=MZAP4    0100-19106-19106-1238-00939-00939-00000-MZAP78  18
MZAP4    TITLE 'MOREZAP ESD AND SCATTER/TRANSLATE PROCESSOR - COPYRIGHT*
                1975 SHMUEL METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         SPACE 5
         MACRO
         MZ4   &TYPE
         COPY  MZGBL
         AIF   ('&TYPE' EQ 'GML').GML
         AIF   ('&TYPE' EQ 'NUCRES').NUC
         MNOTE 12,'INVALID &&TYPE SPECIFIED'
         MEXIT
.GML     AIF   (&VS1).VS1GML
         MVI   GML+8,X'80'
         CLI   VRNAM,C'.'
         BE    GMBUF
         MVI   GML+4,X'80'
         MEXIT
.VS1GML  MVI   GML+4,X'80'
         CLI   VRNAM,C'.'
         BNE   GMBUF
         L     R1,CVTPCVT
         MVC   GMA+8(4),PCVADTB
         MEXIT
.NUC     L     R9,GMA+8
         CLI   VRNAM,C'.' .             IS THIS NUCLEUS?
         AIF   ('&SYS'(1,2) EQ 'VS').VS1NUC
         BNE   SCTRFIX .                 NO
         MZSHD 'NUCLEUS RELOCATION'
         LA    R0,4 .                   INCREMENT
         LR    R1,R5 .
         AH    R1,HWSCTRLN .
         SR    R1,R0 .                  SCTR+SCTRLEN-4
         BCTR  R1,0 .
         L     R4,GMA+8 .
         L     R14,4(R5) .
         LR    R15,R14
         SL    R14,0(R5)
         ST    R14,0(R4)
         LA    R4,4(R4)
         BXLE  R5,R0,*-18
         L     R14,BLDLSIZE
         SRA   R14,8
         LA    R14,7(R14)
         N     R14,=X'FFFFFFF8'
         LR    R0,R14 .                 SAVE FOR NIP RELOC
         SLR   R14,R15
         ST    R14,0(R4)
         L     R5,TRLOC .               TR(1)=IEAANIP0
         LH    R4,2(R5)
         SLA   R4,2
         AR    R4,R9
         SL    R0,0(R4) .               NIP LOC = NUC LEN - NIP LEN
         ST    R0,0(R4)
         MVI   0(R4),X'80'
         LA    R5,4(R5) .               TR(2)=IEAQFX00
         LA    R0,2 .                   INCREMENT
         L     R1,SCLOC .               LAST TR ENTRY
         SR    R1,R0 .                   IS SC(-1)
         SR    R14,R14
RESOLVTR LH    R4,0(R5)
         SLA   R4,2
         BZ    NOTR
         AR    R4,R9
         CLI   0(R4),0 .                WAS THIS SC ENTRY RESOLVED?
         BH    NOTR .                    YES - ONCE IS ENOUGH
         L     R15,0(R4)
         ST    R14,0(R4)
         ALR   R14,R15
         MVI   0(R4),X'80'
NOTR     BXLE  R5,R0,RESOLVTR
*              R5 NOW -> SC(0)
         B     NUCFIX
         MZSHD 'SCATTER LOADABLE RESOLUTION'
         MEXIT
.VS1NUC  BE    NUCFIX                    YES
         MEXIT
         MEND
         SPACE 5
         COPY  MZGBL
         MZSET
         PUNCH '         ALIAS MZAPESD'
         TITLE 'MOREZAP ESD AND SCATTER/TRANSLATE PROCESSOR'
         MZHED 'MOREZAP ESD AND SCTR/TRANS PROCESSOR',LEN=37
*              AND HOW AM I TO FACE THE ODDS
*              OF MAN'S BEDEVILMENT AND GOD'S?
*              I, A STRANGER AND AFRAID
*              IN A WORLD I NEVER MADE.
         SPACE 1
*              A. E. HAUSSMAN, LAST POEMS XII
         SPACE 1
         PRINT GEN
MZAPESD  MZENT
         L     R7,HEAD
         USING VRSECT,R7
         MZSHD 'MAIN LOOP'
LUPUS    TM    VRFLG,VRNAMFND           IS NAME ALREADY PROCESSED?
         BO    CANIS                     YES
*              VRBOUNDS CANNOT BE SET YET IN V|R ENTRIES
         SPACE 1
         TM    VRFLG,VRXLE              WAS MEMBER CDE FOUND?
         BZ    CANIS                     NO
         CLI   VRTYPE,VRNAME
         BL    CANIS
         TM    VRFLG,VRFND
         BO    CANIS
         CLI   VRTYPE,VRHDUMP
         BL    FIND
CANIS    MZLT  R7,VRNEXT
         BNZ   LUPUS
         L     R7,HEAD
NEXTFLOT L     R1,VRLOC                 GET LOC, INDEX, BASE, ETC.
         LA    R1,0(R1)
         STM   R14,R12,12(R13)                            *** DEBUG ***
         CLI   VRTYPE,VRNAME
         BL    *+12
         CLI   VRTYPE,VRDUMPT
         BNH   VRNM
         CLI   VRTYPE,VRINDEX
         BE    VRIX
         CLI   VRTYPE,VRHINDEX
         BE    VRHIX
         CLI   VRTYPE,VRBASE
         BE    VRBS
         CLI   VRTYPE,VRREP             IS THIS VER/REP?
         BNH   VRVR                      YES
         CLI   VRTYPE,VRHDUMP           IS THIS HEX DUMP?
         BL    NXTFLOAT                  NO
         CLI   VRTYPE,VRHDUMPT
         BNH   VRDMP
         CLI   VRTYPE,VRSAVE            TEST FOR POINTER MANIPULATION
         BL    NXTFLOAT
         L     R14,VRPTR
         BE    SAVEFLOT
         CLI   VRTYPE,VRREFER
         BL    VRVR
         CLI   VRTYPE,VRUNSAVE
         BL    REFER
*        BE    UNSAVE
         CLI   0(R14),X'80'             HAS THIS REF BEEN SET?
         BNE   BUMPTR                    NO - CAN'T REFERENCE IT
         L     R4,0(,R14)               RESTORE BEGIN
         LA    R4,0(,R4)
         ST    R4,VRABS
         MVC   VRLENB(4),4(R14)
         LH    R5,4(,R14)               RESTORE END+1
         LH    R15,6(,R14)              RESTORE INDEX
         LA    R15,0(R4,R15)
         MZSTA R15,VRLOC
UNSAVELN LA    R5,0(R4,R5)
         OI    VRFLG,VRFND
*        B     NXTFLOAT
         SPACE 1
NXTFLOAT MZLT  R7,VRNEXT
         BNZ   NEXTFLOT
LISTEM   L     R7,HEAD
NEXTLIST TM    VRFLG,VRFAIL
         BNZ   LISTIT
         CLI   VRTYPE,VRINDEX
         BE    LISTIT
         CLI   VRTYPE,VRREFER
         BNL   LISTIT
         CLI   VRTYPE,VRNAME
         BL    LISTNEXT
         CLI   VRTYPE,VRDUMPT
         BNH   LISTIT
LISTNEXT NI    VRFLG,255-VRFAIL
         MZLT  R7,VRNEXT
         BNZ   NEXTLIST
         NI    SW1,255-CSECTSW
         TM    SW1,NOTNUC
         BZ    *+8
         NI    SW2,255-VEREPSW
         L     R15,ADDT
         TM    SW1,DEBUGSW
         BO    BYBY
         L     R15,AHOVEL
         TM    SW1,DBEFSW
         BO    BYBY
         L     R15,APATCH
         TM    SW2,VEREPSW
         BO    BYBY
         L     R15,AHOVEL
         TM    SW1,DAFTSW
         BO    BYBY
         L     R15,A#666
BYBY     MZGO
         MZSHD 'INFORMATIVE && DIAGNOSTIC MSGS'
LISTIT   EX    0,BLCARD
         MZMVC 'MZP410I'
         LH    R0,VRLINE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,15
         UNPK  IBUF+8(5),DOUBLE
         CLI   VRTYPE,VRREP
         BNH   VBOUNDED
         CLI   VRTYPE,VRINDEX
         BE    LISTIX
         CLI   VRTYPE,VRMVC
         BE    VBOUNDED
         BH    LISTREFR
         CLI   VRTYPE,VRDUMPT
         BH    DBOUNDED
         MVC   IBUF+14(5),=C'NAME:'
         MVC   IBUF+20(8),VRNAM
         CLI   VRNAM,C'.'
         BNE   *+10
         MVC   IBUF+20(8),NUCMEM
         TM    VRFLG,VRXLE
         BZ    NOTINLPA
         TM    VRFLG,VRNAMFND
         BZ    NOTINDIR
         MVC   IBUF+29(8),VRCSECT
         TM    VRFLG,VRFND
         BZ    NOTFOUND
         MVI   IBUF+5,C'3'
         MVC   IBUF+38(4),=C'ABS:'
         MZHEX IBUF+43,VRLC,6,BL=':'
         L     R0,VRBEGIN
         AL    R0,VRSIZE-1
         BCTR  R0,0
         ST    R0,DOUBLE
         MZHEX IBUF+50,DOUBLE+1,6
*        B     LIST1
         SPACE 1
LIST1    BAL   R14,PUTGOT
         B     LISTNEXT
         SPACE 1
LISTREFR TM    VRFLG,VRBOUNDS
         BO    PBOUNDED
         MVI   IBUF+4,C'2'
         TM    VRFLG,VRFAIL
         BZ    LISTPNT
         CLI   VRTYPE,VRUNSAVE
         BE    LISTUNSV
         MVC   IBUF+14(18),=C'INVALID POINTER AT'
         MZHEX IBUF+33,VRAB,6
         B     LIST1
         SPACE 1
LISTUNSV MVI   IBUF+5,C'1'
         MVC   IBUF+57(22),=C'-> IS INV: REF NOT SET'
         B     LIST1
         SPACE 1
LISTPNT  TM    VRFLG,VRFND
         BZ    LISTNEXT
         MVI   IBUF+5,C'2'
         MVC   IBUF+14(6),=C'INDEX:'
         L     R0,VRABS                 CALCULATE INDEX
         LR    R1,R0                    AND LIMITS
         AH    R0,VRIXB
         AH    R1,VRLENB
         BCTR  R1,0
         STM   R0,R1,DOUBLE
         MZHEX IBUF+21,DOUBLE+1,6
         MVC   IBUF+35(7),=C'LIMITS:'
         MZHEX IBUF+43,VRAB,6,BL=':'
         MZHEX IBUF+50,DOUBLE+5,6
         B     LIST1
         SPACE 1
NOTINLPA MVC   IBUF+29(10),=C'NOT LOADED'
         B     LIST1
         SPACE 1
NOTINDIR MVI   IBUF+5,C'1'
         MVC   IBUF+29(16),=C'NOT IN DIRECTORY'
         B     LIST1
         SPACE 1
NOTFOUND MVI   IBUF+5,C'2'
         MVC   IBUF+38(9),=C'NOT FOUND'
         B     LIST1
         SPACE 1
LISTIX   MVC   IBUF+14(5),=C'ENTRY'
         MVC   IBUF+20(8),VRIXNAME
         TM    VRFLG,VRFND
         BO    IXFOUND
         MVI   IBUF+5,C'4'
         MVC   IBUF+57(9),=C'NOT FOUND'
         B     LIST1
         SPACE 1
IXFOUND  MVI   IBUF+5,C'5'
         MVC   IBUF+38(4),=C'ABS:'
         MZHEX IBUF+43,VRLC,6
         B     LIST1
         SPACE 1
PBOUNDED SR    R1,R1
         IC    R1,VRPTR
         IC    R1,LENPTR(R1)
         B     BOUNDED
         SPACE 1
VBOUNDED SR    R1,R1
         IC    R1,VRDATLN
         B     BOUNDED
         SPACE 1
DBOUNDED L     R1,VRLEN
         BCTR  R1,0
*        B     BOUNDED
         SPACE 1
BOUNDED  MVI   IBUF+5,C'6'
         MVC   IBUF+15(4),=C'REL:'
         LM    R14,R15,VRLOC            (14,15)<-(VRLOC,VRABS)
         LCR   R0,R14
         TM    VRLC,X'80'               IS LOC NEGATIVE?
         BZ    POSLOCB                   NO - PRINT SIX DIGITS
         ST    R0,DOUBLE
         MVI   IBUF+23,C'-'
         MZHEX IBUF+24,DOUBLE+2,4,BL=*
         B     NEGLOCB
POSLOCB  MZHEX IBUF+22,VRLC,6,BL=':'
NEGLOCB  EQU   *-4
         LA    R14,0(R14,R1)
         AR    R15,R1
         STM   R14,R15,DOUBLE
         LCR   R14,R14                  IS LOC+LEN-1 NEGATIVE?
         TM    DOUBLE+1,X'80'
         BZ    POSLOCE                   NO  - PRINT SIX DIGITS
         ST    R14,ODWORD                YES - PRINT FOUR DIGITS
         MVI   IBUF+30,C'-'
         MZHEX IBUF+31,ODWORD+2,4,BL=*
         B     NEGLOCE
POSLOCE  MZHEX IBUF+29,DOUBLE+1,6
NEGLOCE  EQU   *-4
         MVC   IBUF+38(4),=C'ABS:'
         MZHEX IBUF+43,VRAB,6,BL=':'
         MZHEX IBUF+50,DOUBLE+5,6
         MVC   IBUF+57(12),=C'OUT OF RANGE'
         B     LIST1
         MZSHD 'NAME, INDEX, VER, REP, DUMP, ->, <-, AND MVC'
REFER    SR    R6,R6
         IC    R6,VRPTR
         IC    R6,LENPTR(R6)
         B     VRVR+6
LENPTR   DC    AL1(3,2,1,1)
         SPACE 1
MVC      EX    R6,MVCMVC
         B     NXTFLOAT
MVCMVC   MVC   0(,R14),0(R1)
         SPACE 1
SAVEFLOT ST    R4,VRABS                 SAVE BEGIN
         ST    R4,0(,R14)               SAVE BEGIN
         LR    R0,R5                    VRLENB=END+1-BEGIN
         SR    R0,R4
         STH   R0,VRLENB
         LR    R0,R15                   VRIXB=ABSINDEX-BEGIN
         SR    R0,R4
         STH   R0,VRIXB
         MZSTA R15,VRLOC
SETREFLN MVC   4(4,R14),VRLENB          STORE VRLENB AND VRIXB
         MVI   0(R14),X'80'             FLAG AS VALID
         B     NXTFLOAT
         SPACE 1
VRNM     TM    VRFLG,VRFND              WAS CSECT FOUND?
         BZ    FAILNAME                  NO - SET NOGO
         LR    R9,R7                    SAVE ENTRY IN CASE OF FAIL
         LR    R4,R1                    GET ABS LOC
         LR    R15,R1                   INDEX=0
         L     R5,VRSIZE-1              GET END+1 = LOC+LEN
         LA    R5,0(R4,R5)               WITH HIGH BYTE = 0
         B     NXTFLOAT
         SPACE 1
VRIX     TM    VRFLG,VRFND              WAS CSECT/EP FOUND?
         BZ    FAILIX                    NO - SET NOGO
         L     R4,VRLOC-VRSECT(R9)      RESET BEGIN FROM NAME ENTRY
         L     R5,VRSIZE-1-VRSECT(R9)   RESET END+1
         LA    R4,0(,R4)
         LA    R5,0(R4,R5)
         LR    R15,R1                   INDEX=NEW INDEX
         B     NXTFLOAT
         SPACE 1
VRBS     LCR   R1,R1                    INDEX=INDEX+(-BASE)
VRHIX    AR    R15,R1                   INDEX=INDEX+NEW INDEX
         B     NXTFLOAT
         SPACE 1
VRVR     SR    R6,R6                    GET V|R LEN-1
         IC    R6,VRDATLN
         LA    R1,0(R1,R15)             ADD INDEX-BASE TO REL LOC
         MZSTA R1,VRABS
         LA    R0,0(R1,R6)              CALC END=START+LEN-1
*              THE PREVIOUS TWO LA INSTRUCTIONS MUST NOT BE LR,
*              SINCE THE HIGH BYTE MUST BE ZEROED;
*              NOTE THAT I KEEP NEGATIVE DISPLACEMENTS AS TWO'S COMP.
         OI    VRFLG,VRFND
         CR    R0,R1                    WRAP AROUND ERROR?
         BL    FAILVR
         CR    R1,R4                    ADDRESS TOO LOW?
         BL    FAILVR                    YES
         CR    R0,R5                    LENGTH TOO LONG?
         BNL   FAILVR                    YES - FAIL IT
         CLI   VRTYPE,VRMVC
         BE    MVC
         CLI   VRTYPE,VRREFER
         BE    *+12
         CLI   VRTYPE,VRPOINT
         BNE   NXTFLOAT
         EX    R6,MOVEPTR
         L     R1,DOUBLE
         IC    R6,VRPTR
         SLA   R6,2
         EX    0,GETPTR(R6)
         LTR   R1,R1                    INVALID Y PTR?
         BE    BUMPTR                    YES - FAIL IT
         SH    R1,VRIXB                 POINT TO PREFIX
         ST    R1,VRABS
         MVI   VRABS,0
         CLI   VRTYPE,VRPOINT
         BE    *+12
         ST    R1,0(,R14)
         B     SETREFLN
         LR    R4,R1
         LH    R5,VRLENB
         LH    R15,VRIXB
         LA    R15,0(R4,R15)
         B     UNSAVELN
         SPACE 1
MOVEPTR  MVC   DOUBLE(0),0(R1)
GETPTR   LA    R1,0(R1)
         SRL   R1,8
         SRL   R1,16
         SRA   R1,16
         SPACE 1
FAILVR   OI    VRFLG,VRBOUNDS           FAIL V, R, DUMP, ETC.
BUMPTR   OI    VRFLG,VRFAIL             FAIL POINT, UNSAVE, ETC.
         OI    SW1,NOGO                 STOP ZAPS
         CLI   VRTYPE,VRREFER           IS FLUSH PROCESSING NEEDED?
         BL    NXTFLOAT                  NO
         BH    DEUNSAVE                 FLUSH POINT OR UNSAVE
         MVI   0(R14),0                 SET REF UNRESOLVED
         B     NXTFLOAT
         SPACE 1
FAILIX   OI    SW1,NOGO
DEUNSAVE MZLT  R7,VRNEXT
         BZ    LISTEM
         CLI   VRTYPE,VRINDEX
         BE    NEXTFLOT
         CLI   VRTYPE,VRNAME
         BL    DEUNSAVE
         CLI   VRTYPE,VRDUMPT
         BNH   NEXTFLOT
         CLI   VRTYPE,VRSAVE
         BL    DEUNSAVE
         L     R14,VRPTR
         BH    *+12
         MVI   0(R14),0
         B     DEUNSAVE
         CLI   VRTYPE,VRREFER
         BE    *-12
         BL    DEUNSAVE
         CLI   VRTYPE,VRPOINT
         BE    DEUNSAVE
         B     NEXTFLOT
         SPACE 1
VRDMP    L     R6,VRLEN
         BCTR  R6,0
         B     VRVR+6
         SPACE 1
FAILNAME OI    VRFLG,VRFAIL             FLAG NAME
         OI    SW1,NOGO                 STOP REPS
DENAME   MZLT  R7,VRNEXT                SKIP TO NEXT NAME|DUMP ENTRY
         BZ    LISTEM
         CLI   VRTYPE,VRNAME
         BL    DENAME
         CLI   VRTYPE,VRDUMPT
         BH    DENAME
         B     NEXTFLOT
         MZSHD 'LOAD MODULE PROCESSING'
FIND     L     R6,VRDCBPT               GET DCB
         MVC   BLDLENT,VRNAM            NAME FOR BLDL UNLESS NUCLEUS
         CLI   VRNAM,C'.'               IS THIS NUCLEUS?
         BNE   NUCOK
         MVC   BLDLENT,NUCMEM           IEANUC0X IS NAME FOR BLDL
         TM    SW1,NOTNUC               IS NUC DD BAD?
         BZ    NUCOK                     NO
         OI    SW1,NOGO
         OI    VRFLG,VRNOTNUC
         USING IHADCB,R6
NUCOK    LA    R6,0(,R6)                DOES DCB EXIST?
         LTR   R6,R6
         BZ    *+12                      NO - DD MUST BE MISSING
         TM    DCBOFLGS,DCBOFOPN        IS DCB OPEN?
         BO    FINDIT
         OI    SW1,NOGO
         B     CANIS
FINDIT   XC    BLDL1TTR,BLDL1TTR
         EX    0,BLCARD                 BLANK MSG IN CASE OF ERROR
         BLDL  (R6),BLDL
         MVC   HWSCTRLN(4),PDS2SLSZ     PUT SCLEN AND TRLEN ON HW BOUND
         B     *+4(R15)
         B     BLDLOK
         B     BLDLMISS
*        B     BLDLIERR
BLDLIERR MVC   MSGNUM,=C'MZP401I'
         MVC   MSGTEXT(19),=C'DIRECTORY I/O ERROR'
         B     SLYDOG                   FINISH ERROR MSG & GO TO CANIS
         SPACE 1
BLDLMISS L     R1,CMDL                  WAS CMDLIB JUST SEARCHED?
         LA    R1,0(,R1)
         CR    R1,R6
         BNE   *+12
         L     R6,LINK                   IF SO, TRY LINKLIB
         B     NUCOK
         L     R1,LINK                  WAS LINKLIB JUST SEARCHED?
         LA    R1,0(,R1)
         CR    R1,R6
         L     R6,LPAL                   IF SO, TRY LPALIB
         BE    NUCOK
         MVC   MSGNUM,=C'MZP402I'
         MVC   MSGTEXT(9),=C'NOT FOUND'
*        B     SLYDOG
         SPACE 1
SLYDOG   MVC   MSGDD,DDNAME
         MVI   MSGDD+8,C'('
         MVC   MSGMEM,VRNAM
         MVI   MSGMEM+8,C')'
         BAL   R14,PUTGOT
         OI    SW1,NOGO
         OI    HIGHRC+3,8
         B     CANIS
         SPACE 1
BLDLOK   XC    SSI,SSI
         LA    R14,31
         IC    R15,BLDLFLAG
         NR    R14,R15
         SLA   R14,1
         LA    R14,BLDLENT(R14)
         LA    R15,PDS2SLSZ
         TM    PDS2ATR1,PDS2SCTR
         BZ    *+8
         LA    R15,PDS2EPM-PDS2SLSZ(,R15)
         TM    BLDLFLAG,X'80'
         BZ    *+16
         TM    PDS2ATR1,PDS2RENT+PDS2REUS
         BZ    *+8
         LA    R15,11(,R15)
         LA    R15,1(,R15)
         SRA   R15,1
         SLA   R15,1
         CR    R14,R15
         BNH   NOSSI
         TM    PDS2FTB1,PDSAOSLE+PDS2SSI
         BM    NOSSI
         MVC   SSI,0(R15)
NOSSI    FIND  (R6),BLDL1TTR,C
         XC    SSI,SSI
         LA    R15,256                  MIN IS SYM/CESD/CON/IDR RECORD
         LH    R4,HWTRLN                NUMESD*2+2
         LH    R1,HWSCTRLN              NUMCSECT*4+4
         LA    R14,4(R1,R4)             4+SCLEN+TRLEN
         STH   R14,SCTRLEN
         CR    R15,R14                  SCTRLEN<256?
         BH    *+6
         LR    R15,R14
         CLI   VRNAM,C'.'               NUC MUST BE SCTR
         BE    *+12
         TM    VRFLG,VR1XL
         BO    BLOCKLD
         TM    PDS2ATR1,PDS2SCTR        BLOCK HIARCHY OR BAD ATR?
         BZ    NOTSCTR                   YES - ERR MSG
         LR    R0,R4                    NUMESD*2+2
         SLA   R0,3                     NUMESD*16+16
         SH    R0,H16                   NUMESD*16
         STM   R15,R1,GML
         MZ4   GML
         B     GMBUF
         SPACE 1
NOTSCTR  MVC   MSGNUM,=C'MZP403I'
         MVC   MSGTEXT(8),=C'NOT SCTR'
         B     SLYDOG                   FINISH ERROR MSG & GO TO CANIS
         SPACE 1
BLOCKLD  LA    R0,1024                  GML=MIN(1024,R15)
         CR    R0,R15
         BL    *+6
         LR    R0,R15
         ST    R0,GML
         MVI   GML,X'80'
         TM    PDS2ATR1,PDS2SCTR        HOW MANY ESD ITEMS?
         L     R4,=X'0FFFFFF0'           DON'T KNOW
         SPACE 5
*              GET A MAXIMUM OF 3 BUFFERS.
         SPACE 1
*              THE FIRST IS USED TO READ CESD, IDR, SC/TR, SYM, AND CON
*               RECORDS; IT IS ALWAYS AT LEAST 256 BYTES.
*              FOR A SCTR LOADED MODULE, IT IS AT LEAST 4 BYTES LARGER
*               THAN THE COMBINED SCTR/TRANS TABLE.
*              FOR SCTR FORMAT BLOCK LOADED MODULES WITH ONE ENTRY IN
*               THE LAST CESD RECORD, IT IS AT LEAST
*               MIN(1024,SCLEN+TRLEN+4), THE LENGTH OF THE 1ST SC/TR
*               RECORD.
         SPACE 1
*              THE SECOND BUFFER IS USED ONLY FOR SCTR LOADED MODULES.
*              IT HOLDS THE COMPLETE CESD.
         SPACE 1
*              THE THIRD BUFFER IS USED ONLY FOR NUCLEUS RELOCATION.
*              IT IS NOT ALLOCATED FOR OS/VS, SINCE THE PAGEABLE CVT
*               POINTS TO A TABLE OF CSECT ADDRESSES.
*              FOR OS/MFT AND OS/MVT, IT HAS ONE WORD PER CSECT.
*              IT IS USED TO HOLD CSECT SIZE(1ST PASS) AND CSECT LOC
*               (2ND PASS) DURING NUCLEUS RELOCATION.
         SPACE 5
GMBUF  GETMAIN LU,LA=GML,A=GMA,SP=13
         MVC   CESDEND,GMA+4            INITIALIZE IF SCTR
         L     R5,GMA
         USING BUF,R5
         SLA   R4,3                     NUMESD*16+16
         SH    R4,H16                   NUMESD*16
CLASH    READ  SYMECB,SF,(R6),(R5),248  BYPASS SYM, READ 1ST CESD
         CHECK SYMECB
         CLI   TYPE,TYPESYM
         BE    CLASH
         CLI   TYPE,TYPECESD
         BNE   NOESD
         TM    PDS2ATR1,PDS2SCTR        HOW MANY ESD ENTRIES?
         BO    *+6                       R4
         BCTR  R4,0                      MNE, MNE, TKEL UFARSIN
DOCESD   LA    R14,16
         LH    R15,ESDCOUNT
         AR    R15,R5
         BCTR  R15,0
         CLI   GML,X'80'                SCTR?
         BE    MATCHESD
         LH    R9,ESDID
         BCTR  R9,0
         SLA   R9,4                     (ESDID-1)*16
         A     R9,GMA+4
         C     R9,CESDEND               IS CESD IN SEQUENCE BY ESDID?
         BNE   MISSCESD                  NO - MISSING CESD RECORD
         MVC   0(16,R9),ESDNAME
         LA    R9,16(R9)
H16      EQU   *-2,2,H
         ST    R9,CESDEND               LAST ENTRY PTR
         BXLE  R5,R14,*-14
READCESD L     R5,GMA
         SH    R4,ESDCOUNT
         BZ    READSCTR                  LAST CESD STORED - RESOLVE
         BM    FMBUF                     SCTR RESOLVED - FREE BUFFERS
         TM    PDS2ATR1,PDS2SCTR
         BZ    *+20
         CLI   ESDCOUNT+1,240           FULL CESD RECORD?
         BE    *+12                      YES - MAY BE MORE
         CH    R4,H16                   EXACTLY ONE UNFILLED CESD ENTRY
         BE    READSCTR                  YES
         READ  CESDECB,SF,(R6),(R5),248 CESD OR CONTROL RECORD
         CHECK CESDECB
         CLI   TYPE,TYPECESD
         BE    DOCESD
         CLI   TYPE,TYPEIDR
         BE    FMBUFBLK
         CLI   TYPE,TYPESCTR
         BE    FMBUFBLK
         TM    TYPE,X'F0'               IS IT CONTROL?
         BNZ   NOCON                     NO
         TM    TYPE,1                   IS IT CON?
         BZ    NOCON                     NO   RLD
FMBUFBLK TM    PDS2ATR1,PDS2SCTR        IS IT SCTR?
         BZ    FMBUF                     NO - NO MISSING CESD
         SH    R4,=H'16'                 MISSING CESD?
         BNZ   MISSCESD                  YES
         TM    GML,X'80'                SCTR LOADED?
         BZ    READSCTR                  YES - READ SC/TR RECORDS
FMBUF FREEMAIN L,LA=GML,A=GMA,SP=13
         B     CANIS                    END OF BLOCK LOAD NAME
         SPACE 3
NOESD    MVC   MSGNUM,=C'MZP404I'
         MVC   MSGTEXT(6),=C'NO ESD'
         B     SHYDOG
         SPACE 1
NOCON    MVC   MSGNUM,=C'MZP405I'
         MVC   MSGTEXT(6),=C'NO CON'
         B     SHYDOG
         SPACE 1
MISSCESD MVC   MSGNUM,=C'MZP406I'
         MVC   MSGTEXT(12),=C'MISSING CESD'
         B     SHYDOG
         SPACE 1
MISSSCTR MVC   MSGNUM,=C'MZP407I'
         MVC   MSGTEXT(13),=C'MISSING SC/TR'
*        B     SHYDOG
         SPACE 1
SHYDOG   MVC   MSGDD,DDNAME
         MVI   MSGDD+8,C'('
         MVC   MSGMEM,VRNAM
         CLI   VRNAM,C'.'               IS THIS NUCLEUS?
         BNE   *+10                      NO
         MVC   MSGMEM,NUCMEM
         MVI   MSGMEM+8,C')'
         BAL   R14,PUTGOT
         OI    SW1,NOGO
         OI    VRFLG,VRNAMFND
         B     FMBUF
         SPACE 2
MATCHESD NI    ESDTYPE,ESDDEL+15        SET ESD ENTRY FOR COMPARE
         CLI   ESDTYPE,ESDLR            ENTRY PT DEF?
         BE    *+28                      YES
         CLI   ESDTYPE,ESDSD            IS IT SD, PC, OR CM?
         BE    *+20
         CLI   ESDTYPE,ESDCM
         BE    *+12
         CLI   ESDTYPE,ESDPC
         BNE   ENDMATCH
         LR    R9,R7
         DROP  R7
         USING VRSECT,R9
MATCHLUP CLI   VRTYPE,VRLIB             IS DCB SAME?
         BE    ENDMATCH                  NO
         CLI   VRTYPE,VRNAME            IS THIS NAME OR DUMP?
         BL    NOMATCH                   NO
         CLI   VRTYPE,VRDUMPT            MAYBE
         BH    NOMATCH                   NO
MATCHN   CLC   VRNAM,VRNAM-VRSECT(R7) IS THIS THE SAME MEMBER?
         BNE   NOMATCH                   NO
         OI    VRFLG,VRNAMFND            YES - AVOID 2ND BLDL
         MVC   VRSSI,SSI
         TM    VRFLG,VRFND              WAS CSECT FOUND ALREADY?
         BO    MATCHI                    YES - DON'T FLOAT IT AGAIN
*              OMITTED CSECT NAMES MATCHED IN HOLYCDE
         CLI   ESDTYPE,ESDLR            IS THIS ENTRY PT DEF?
         BE    MATCHI                    YES - CAN'T MATCH NAME|DUMP
         CLC   VRCSECT,ESDNAME          IS THIS SAME CSECT?
         BNE   MATCHI                   NOT RIGHT CSECT
         MVC   VRSIZE,ESDLEN
FLOATIX  L     R0,ESDADDR-1             REL ADDR IF BLOCK, ELSE ABS
         CLI   GML,X'80'                SCTR?
         BNZ   SAVEP                     YES - USE RELOCATED ESD
         L     R1,VRCDEPTR               NO - GET XL VIA CDE OR LPDE
         TM    VRCDEPTR,VRISLPDE        MODULE FOUND IN PAGABLE LPA?
         BZ    NOTPLPA                   NO  - GET XL VIA CDE
         AL    R0,LPDEXTAD-LPDE(,R1)     YES - GET VIA LPDE
         B     SAVEP
NOTPLPA  L     R1,CDXLMJP-CDENTRY(R1)
         AL    R0,EXLISTLN+4-XL(,R1)    FIND 1ST EXTENT
SAVEP    MZSTA R0,VRLOC,IC=R1
         OI    VRFLG,VRFND              FLAG AS RELOCATED
MATCHI   MZLT  R9,VRNEXT                GET NEXT ENTRY
         BZ    ENDMATCH                  NO MORE
         CLI   VRTYPE,VRLIB             IS IT SAME DCB?
         BE    ENDMATCH                  NO
         CLI   VRTYPE,VRINDEX
         BE    MATCHIX
         CLI   VRTYPE,VRNAME            IS IT SAME SCOPE?
         BL    MATCHI                    YES
         CLI   VRTYPE,VRDUMPT
         BH    MATCHI                    YES
         B     MATCHN                    NO - PROCESS NEW NAME
NOMATCH  MZLT  R9,VRNEXT                SCAN TO NEXT NAME
         BNZ   MATCHLUP
ENDMATCH BXLE  R5,R14,MATCHESD
         LTR   R4,R4                    SCTR?
         BNP   FMBUF                     YES
         B     READCESD
MATCHIX  CLC   VRIXNAME,ESDNAME
         BNE   MATCHI
         B     FLOATIX
         DROP  R9
         MZSHD 'SCATTER LOADABLE MODULE PROCESSING'
         USING VRSECT,R7
READSCTR CLI   GML,X'80'                IS THIS BLOCK LOAD?
         BE    FMBUF                     YES - ALL DONE
         MVC   FWNOTE,BLDLNOTE          BYPASS IDR
         POINT (R6),FWNOTE
         L     R5,GMA                   GET END OF BUFFER LOC
         A     R5,GML
         LH    R4,SCTRLEN               SC/TR SIZE + 4
READREST LR    R0,R4                    MIN(1024,REST OF SC/TR + 4)
         CH    R0,=H'1024'
         BL    *+8
         LA    R0,1024
         SR    R4,R0                    DECREMENT BYTE COUNT
         SR    R5,R0                    DECREMENT LOC
         READ  SCECB,SF,(R6),(R5),(R0)
         CHECK SCECB
         CLI   TYPE,TYPESCTR            MUST BE SC/TR
         BNE   MISSSCTR
         LA    R5,4(R5)                 ADJUST FOR PREFIX
         LTR   R4,R4                    TEST UNADJUSTED REMAINDER
         LA    R4,4(R4)                 ADJUST FOR PREFIX
         BP    READREST
         ST    R5,TRLOC                 TRANSLATE TABLE LOC
         AH    R5,HWTRLN
         ST    R5,SCLOC                 SCATTER TABLE LOC
         MZ4   NUCRES                   RESOLVE NUCLEUS
SCTRFIX  L     R9,VRCDEPTR              L(XL)+4*(#CSECTS+1)
         L     R9,CDXLMJP-CDENTRY(R9)
         AH    R9,HWSCTRLN
         SPACE 1
NUCFIX   L     R2,GMA+4                 CESD
         USING ESDNAME,R2
         LA    R14,16
         L     R15,CESDEND
         BCTR  R15,0
         L     R4,TRLOC                 TR(0)
SCTRLUP  NI    ESDTYPE,X'0F'            STRIP FLAGS
         LH    R1,2(R4)                 CSECT # FROM TRANSLATE TABLE
         SLA   R1,2                     *4 AND TEST
         BZ    NOSCTR
         L     R0,ESDADDR-1
         SL    R0,0(R1,R5)              DEFLOAT VIA SCATTER(CSECT #)
         AL    R0,0(R1,R9)              REFLOAT VIA XL(CSECT #)
         ST    R0,ESDADDR-1
NOSCTR   LA    R4,2(R4)
         BXLE  R2,R14,SCTRLUP
         L     R5,GMA+4                 CESD
         SH    R5,=Y(ESDNAME-BUF)
         SR    R4,R4
         B     MATCHESD
         MZSHD 'MISCELLANEOUS'
SSI      DS    XL4
SCTRLEN  DS    H
HWSCTRLN DS    H
HWTRLN   DS    H
SCLOC    DS    A
GML      DC    3A(0)
GMA      DC    3A(0)
TRLOC    DS    A
CESDEND  DS    A                        LAST CESD ENTRY
FWNOTE   DC    F'0'
BLDL     DC    Y(1,BLDLEND-BLDLENT)
BLDLENT  DC    CL8' '
BLDL1TTR DC    XL3'0'
BLDLCONC DC    X'0'
BLDLLIBN DC    X'0'
BLDLFLAG DC    X'0'                     BIT 0=ALIAS 1-2=# TTRS, 3-7=LEN
BLDL1TXT DC    XL3'0'
         DC    X'0'
BLDLNOTE DC    XL3'0'                   SCTR/TRANS OR OVLY NOTE LIST
         DC    X'0'                     NUM TTR IN NOTE LIST
PDS2ATR1 DS    X
PDS2RENT EQU   128
PDS2REUS EQU   64
PDS2OVLY EQU   32
PDS2TEST EQU   16
PDS2LOAD EQU   8
PDS2SCTR EQU   4
PDS2EXEC EQU   2
PDS21BLK EQU   1
PDS2ATR2 DS    X
PDS2FLVL EQU   128
PDS2ORG0 EQU   64
PDS2EP0  EQU   32
PDS2NRLD EQU   16
PDS2NREP EQU   8
PDS2TSTN EQU   4
PDS2LEF  EQU   2
PDS2REFR EQU   1
BLDLSIZE DS    CL3
         DS    CL2                      LENGTH 1ST TEXT BLOCK
BLDLEP   DS    CL3
PDS2FTB1 DS    X
PDSAOSLE EQU   128
PDS2PAGA EQU   32
PDS2SSI  EQU   16
PDSAPFLG EQU   8
PDS2FTB2 DS    X
PDS2FTB3 DS    X
PDS2SLSZ DS    HL2                      LENGTH(SCTR LIST) IN BYTES
*              (PDS2SLSZ-4)/4=#CSECTS
PDS2TTSZ DS    HL2                      LENGTH(TRANSLATE TAB) IN BYTES
*              (PDS2TTSZ-2)/2=#ESD
PDS2ESDT DS    HL2                      ESD ID 1ST TEXT BLOCK
PDS2ESDC DS    HL2                      ESD ID OF ENTRY POINT
         SPACE 1
PDS2EPM  DS    AL3
PDS2MNM  DS    CL8
         SPACE 1
         DS    0H
PDSCHLVL DS    X
PDSSSIFB DS    X
PDSMBRSN DS    H
         SPACE 1
PDSAPFCT DS    X
PDSAPFAC DS    X
BLDLEND  EQU   *
HEXTAB   DC    C'0123456789ABCDEF'
         LTORG
         MZSHD 'BUFFER FOR READING CESD AND SCTR/TRANS'
BUF      DSECT
TYPE     DS    X
TYPEIDR  EQU   X'80'                    MAX LEN 256
TYPECESD EQU   X'20'                    MAX LEN 248=8+240
TYPESCTR EQU   X'10'                    MAX LEN 1024=4+1020
TYPECON  EQU   X'01'
TYPECEOS EQU   X'05'
TYPECEOM EQU   X'0D'
TYPERLD  EQU   X'02'
TYPERLDS EQU   X'06'
TYPERLDM EQU   X'0E'
TYPECRL  EQU   X'03'
TYPECRLS EQU   X'07'
TYPECRLM EQU   X'0F'
TYPESYM  EQU   X'40'
CESD     DS    XL3
ESDID    DS    XL2
ESDCOUNT DS    H                        SIZE IN BYTES OF REST
         SPACE
*              REPEATED
ESDNAME  DS    CL8
ESDTYPE  DS    X
ESDDEL   EQU   X'10'
ESDREP   EQU   X'10'
ESDINS   EQU   X'20'
ESDCHAIN EQU   X'40'
ESDMAP   EQU   X'80'
ESDSD    EQU   X'00'
ESDLR    EQU   X'03'
ESDPC    EQU   X'04'
ESDCM    EQU   X'05'
ESDPR    EQU   X'06'
ESDNU    EQU   X'07'
ESDER    EQU   X'02'
ESDWX    EQU   X'0A'
ESDPCDEL EQU   X'14'
ESDADDR  DS    AL3
ESDSEGNO DS    X
ESDLEN   DS    AL3                      ID IF ESDTYPE LR/LD
         SPACE
         ORG   CESD
         DC    X'0'
         DS    H
*        DS    CL1020
*              SCTR TABLE IS IN ORDER BY 1ST TEXT APPEARANCE
*              SCTR/TRAN RECORDS START AT HIGH ADDR
         LTORG
        MZWORK MAIN=YES,CD=YES
MZAPMAIN DSECT
         ORG   IBUF
MSGNUM   DS    C'MZP4..I',C
MSGDD    DS    CL8,C
MSGMEM   DS    CL8,2C
MSGTEXT  DS    C
         ORG   MSGDD
MSGNAME  DS    CL8,C
MSGTXT   DS    C
         END
./ ADD NAME=MZAP5    0100-19106-19106-1238-01055-01055-00000-MZAP78  18
MZAP5    TITLE 'MOREZAP DUMP PROCESSOR - COPYRIGHT 1975 SHMUEL METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         SPACE 5
         MACRO
&L       MZHX  &DUM
         GBLA  &MZBIN
         LCLA  &I,&J
&MZBIN   SETA  0
         AIF   (T'&L EQ 'O').NOL
&I       SETA  1
.NEXTDIG ANOP
&J       SETA  1
.NEXTVAL AIF   ('0123456789ABCDEF'(&J,1) EQ '&L'(&I,1)).DIG
&J       SETA  &J+1
         AIF   (&J LE 16).NEXTVAL
         MNOTE 12,'&L IS NOT HEXADECIMAL'
         MEXIT
.DIG     ANOP
&MZBIN   SETA  &MZBIN*16+&J-1
&I       SETA  &I+1
         AIF   (&I LE K'&L).NEXTDIG
         MEXIT
.NOL     MNOTE 12,'NULL ARGUEMENT INVALID - HEX REQUIRED'
         MEXIT
         MEND
         SPACE 2
         MACRO
&L       MZOP  &OP,&SUBOP,&EM=360
         GBLA  &MZBIN                   OUTPUT OF MZHX
         GBLA  &MZEMOPD                 DISPLACEMENT OF LAST EMULATOR
         GBLA  &MZLSTOP                 OPCODE+1 OF LAST EXTENDED OPCOD
         GBLA  &NUMEMS                  NUMBER OF EMULATORS
         GBLA  &OPD                     NEXT OPCODE DISPLACEMENT
         GBLA  &OPL(256)                OPCODE DISPLACEMENTS
         GBLB  &MZEMSW                  EM SUB-OPCODES BEING DEFINED
         GBLB  &MZEMXOP                 LAST OP WAS EXTENDED EM OP
         GBLB  &MZOPX(256)              16 BIT OR EXTENDED OPCODE
         GBLC  &OPC(256)                OPCODE NAMES
         GBLC  &EMS(10)                 CPU S TO BE EMULATED
.*             LIST SHOULD ALWAYS INCLUDE 360
.*
         GBLC  &MZLSTEM                 CPU WHOSE EM IS BEING DEFINED
         GBLC  &MZSUBOP                 EMULATOR SUB-OP BEING DEFINED
.*             VALUE IS NULL OR 3 CHARACTERS:
.*             TOO
.*             WHERE T IS 1 FOR 16 BIT EM OPS AND 2 FOR EXTENDED EM OPS
.*             OO IS BITS 0-7 OF THE OPCODE
.*
         LCLA  &I,&J
         LCLA  &SCHMUCK
         LCLC  &HEX,&OP2
.*             GENERATE OPCODE TABLE FOR MZAP5
.*             TABLE CONSISTS OF 256 HALFWORD ENTRIES,
.*              EACH CONTAING THE DISPLACEMENT TO AN OPCODE;
.*              UNUSED ENTRIES CONTAIN FFFF (-1).
.*             EACH OPCODE MAY BE IN ONE OF THE FOLLOWING FORMS:
.*
.*             XX,EM=CPU                EIGHT BIT OPCODES:
.*       DC    AL1(LEN-1),C'NAME'
.*
.*             XX,M,EM=CPU              EXTENDED MNEUMONICS:
.*       DC    X'1M',AL1(LEN-1),C'NAME'
.*       ...
.*       DC    X'FF'                    END OF M1 TABLE FOR OPCODE
.*
.*             XXXX,EM=CPU              SIXTEEN BIT OPCODES:
.*       DC    X'20'                    1ST TIME ONLY FOR BITS 0-7
.*       DC    AL1(LEN-1),X'SUBOP',C'NAME'
.*       ...
.*       DC    X'FF'                    END OF BIT 8-15 TABLE FOR OPCOD
.*
.*             -XX,EM=CPU               8 BIT EMULATOR SUB-OPCODE
.*       DC    X'80'                    ONLY ON 1ST OF GROUP
.*       DC    X'81',Y(DISPL)           NEW EMULATOR
.*       DC    AL1(LEN-1),X'OPCODE',C'NAME'
.*
.*             -XX,R,EM=CPU             EXTENDED 8 BIT EMULATOR SUB-OP
.*       DC    X'C0',X'OPCODE'          1ST TIME ONLY FOR BITS 0-7
.*       DC    AL1(LEN-1),X'R2|R3',C'NAME'
.*       ...
.*
.*             -XXXX,EM=CPU             16 BIT EMULATOR SUB-OPCODE
.*       DC    X'A0',X'OPCODE'          1ST TIME ONLY FOR BITS 0-7
.*       DC    AL1(LEN-1),X'SUBOP',C'NAME'
.*       DC    X'FF'                    END OF OPCODES FOR EMULATOR
         AIF   (T'&L EQ 'O').NOL
         AIF   (T'&OP EQ 'O').NOP
&SCHMUCK SETA  K'&L-1
         MZSET
&I       SETA  1
.NXTEM   AIF   ('&EM' EQ '&EMS(&I)').GOODEM
&I       SETA  &I+1
         AIF   (&I LE &NUMEMS).NXTEM
.*             SKIP OPCODE FOR UNWANTED EMULATOR
         MEXIT
.GOODEM  AIF   ('&OP'(1,1) EQ '-').EMOP
         AIF   ('&OP' EQ 'TABLE').TABLE
         AIF   (K'&OP NE 2 AND K'&OP NE 4).BUMOP
&HEX     SETC  '&OP'(1,2)
&HEX     MZHX                           CONVERT HEX OPCODE
&J       SETA  &MZBIN+1
         AIF   ('&OPC(&J)' NE '').SAMEOP
&MZEMSW  SETB  0
&MZEMXOP SETB  1
&MZLSTEM SETC  '&EM'
         AIF   (&MZLSTOP EQ 0 OR &MZLSTOP EQ &J).NOFF
         DC    X'FF' .                  TERMINATE EXTENDED OPCODE
&OPD     SETA  &OPD+1
.NOFF    ANOP
&OPC(&J) SETC  '&L'
&OPL(&J) SETA  &OPD
         AIF   (K'&OP EQ 4).LONGOP
         AIF   (T'&SUBOP NE 'O').SUBOP
&OPD     SETA  &OPD+K'&L+1
         DC    AL1(&SCHMUCK),C'&L'
&MZLSTOP SETA  0
         MEXIT
.*
.*
.LONGOP  DC    X'20' .                  16 BIT OPCODES FOLLOW
&OPD     SETA  &OPD+K'&L+3
&MZLSTOP SETA  &J
&MZOPX(&J) SETB 1                       FLAG AS EXTENDED OP
         AGO   .BYTE2
.SAMEOP  AIF   (K'&OP EQ 2).DUPOP
         AIF   (&MZLSTOP NE &J).DUPSEQ
         AIF   (NOT &MZEMSW).NOEMOFF
&MZEMXOP SETB  0
         AIF   (&OPD-&OPD/2*2 EQ 1).NOFILL
         DC    X'80' .                  PAD
&OPD     SETA  &OPD+1
.NOFILL  DC    X'81',Y(&MZEMOPD) .      NEW CPU BEING EMULATED
&OPL(&J) SETA  &OPD
&OPD     SETA  &OPD+3
.NOEMOFF ANOP
&OPD     SETA  &OPD+K'&L+2
.BYTE2   ANOP
&OP2     SETC  '&OP'(3,2)
         DC    AL1(&SCHMUCK),X'&OP2',C'&L'
         AIF   ('&L  '(1,3) NE 'EMU').SKIP
&MZEMOPD SETA  &OPL(&J)
&MZLSTEM SETC  '&EM'
&MZEMSW  SETB  1
         MEXIT
.*
.*
.DUPOP   AIF   (T'&SUBOP EQ 'O').INVDUP
.SUBOP   AIF   (K'&SUBOP NE 1).INVSUB
&OPD     SETA  &OPD+K'&L+2
         DC    X'1&SUBOP',AL1(&SCHMUCK),C'&L'
&MZLSTOP SETA  &J
&MZOPX(&J) SETB 1                       FLAG AS EXTENDED OP
         MEXIT
.*
.*
.*
.EMOP    AIF   (K'&OP NE 3 AND K'&OP NE 5).BUMEMOP
         AIF   ('&EM' NE '&MZLSTEM').WRONGEM
&HEX     SETC  '&OP'(2,2)
&HEX     MZHX                           CONVERT HEX OPCODE
&J       SETA  &MZBIN+1
         AIF   (K'&OP EQ 3).SHEMOP
&OP2     SETC  '&OP'(4,2)
         AIF   ('&MZSUBOP' EQ '2&HEX').NOA0
         DC    X'A0',X'&HEX' .          START LIST OF 16 BIT EM SUBOPS
&OPD     SETA  &OPD+2
&MZSUBOP SETC  '2&HEX'
.NOA0    DC    AL1(&SCHMUCK),X'&OP2',C'&L'
&OPD     SETA  &OPD+K'&L+2
&MZEMXOP SETB  1
         MEXIT
.SHEMOP  AIF   (T'&SUBOP NE 'O').EMOPX
         AIF   (NOT &MZEMXOP).NO80
         DC    X'80' .                  INITIATE EMULATOR OPCODES
&OPD     SETA  &OPD+1
.NO80    DC    AL1(&SCHMUCK),X'&HEX',C'&L'
&MZEMXOP SETB  0
&OPD     SETA  &OPD+K'&L+2
&MZSUBOP SETC  ''
         MEXIT
.*
.EMOPX   AIF   (K'&SUBOP NE 1).INVSUB
         AIF   ('&MZSUBOP' EQ '1&OP').NOC0
         DC    X'C0',X'&HEX' .          START LIST OF EXT EM SUBOPS
&OPD     SETA  &OPD+2
&MZSUBOP SETC  '1&OP'
.NOC0    DC    AL1(&SCHMUCK),X'&SUBOP',C'&L'
&OPD     SETA  &OPD+K'&L+2
&MZEMXOP SETB  1
         MEXIT
.TABLE   AIF   (&MZLSTOP EQ 0).NOFFT
         DC    X'FF' .                  TERMINATE LAST EXTENDED OPCODE
.NOFFT   ANOP
&L       DS    0H
&I       SETA  1
.NXTBL   ANOP
&J       SETA  (&I-1)/16
&HEX     SETC  '0123456789ABCDEF'(&J+1,1)
&HEX     SETC  '&HEX'.'0123456789ABCDEF'(&I-16*&J,1)
         AIF   ('&OPC(&I)' EQ '').NULLTBL
         AIF   (&MZOPX(&I)).TBLMN
         MNOTE *,'&HEX IS &OPC(&I)'
         AGO   .TBLDC
.TBLMN   MNOTE *,'&HEX IS &OPC(&I), ...'
.TBLDC   DC    H'&OPL(&I)'
.TBLNXT  SPACE 1
&I       SETA  &I+1
         AIF   (&I LE 256).NXTBL
         MEXIT
.NULLTBL MNOTE *,'&HEX IS AN UNDEFINED OPCODE'
         DC    H'-1'
         AGO   .TBLNXT
.*
.*
.*
.INVSUB  MNOTE 12,'&L IMPROPERLY SPECIFIED - SUB-OPCODE &SUBOP NOT EXAC*
               TLY ONE HEX DIGIT'
         MEXIT
.INVDUP  MNOTE 12,'&L IS NOT SPECIFIED AS AN EXTENDED OPCODE AND &OP IS*
                ALREADY DEFINED'
         MEXIT
.DUPSEQ  MNOTE 12,'&L DOES NOT DIRECTLY FOLLOW PREVIOUS DEFINITION OF &*
               HEX'
         MEXIT
.BUMOP   MNOTE 12,'&OP IS NOT 2 OR 4 HEX DIGITS'
         MEXIT
.NOP     MNOTE 12,'HEX OPCODE REQUIRED AS 1ST OPERAND'
         MEXIT
.BUMEMOP MNOTE 12,'&L IS SPECIFIED AS AN EMULATOR OPCODE BUT IS NOT EXA*
               CTLY TWO DIGITS'
         MEXIT
.WRONGEM MNOTE 12,'&L SPECIFIED EM=&EM INSTEAD OF EM=&MZLSTEM'
         MEXIT
.NOL     MNOTE 12,'OPCODE REQUIRED IN LABEL FIELD'
.SKIP    MEND
         SPACE 2
         GBLA  &NUMEMS
         GBLC  &EMS(10)
         COPY  MZGBL
         MZSET
         PUNCH '         ALIAS MZAPDUMP'
&EMS(1)  SETC  '360'
&EMS(2)  SETC  '370'
&EMS(3)  SETC  'IMVC'
&EMS(4)  SETC  'DOS'
&EMS(5)  SETC  '14XX'
&EMS(6)  SETC  '707X'
&EMS(7)  SETC  '7080'
&EMS(8)  SETC  '709X'
&NUMEMS  SETA  3
         EJECT
         MZHED 'MOREZAP DUMP PROCESSOR'
MZAPDUMP MZENT D
         USING VRSECT,R7
DUMP     OI    SW3,DUMPSW
         L     R7,HEAD
LOOP     TM    VRFLG,VRFND
         BZ    ELOOP
         CLI   VRTYPE,VRINDEX
         BE    SAVEINDX
         CLI   VRTYPE,VRNAME
         BL    ELOOP
         CLI   VRTYPE,VRDUMPT
         BNH   SAVENAME
         TM    VRFLG,VRBOUNDS
         BO    ELOOP
         CLI   VRTYPE,VRHDUMP
         BL    ELOOP
         CLI   VRTYPE,VRHDUMPT
         BNH   HDUMP
         CLI   VRTYPE,VRPOINT
         BL    ELOOP
         MVI   INDEX,1                  SET POINT FLAG FOR DUMP HEADER
ELOOP    MZLT  R7,VRNEXT
         BNZ   LOOP
         BAL   R14,EJECT
         TM    SW1,DBEFSW
         BO    *+8
         NI    SW1,255-DAFTSW
         NI    SW1,255-DBEFSW
         NI    SW3,255-DUMPSW
         L     R15,ADDT
         TM    SW1,DEBUGSW
         BO    BYBY
         L     R15,APATCH
         TM    SW2,VEREPSW
         BO    BYBY
         TM    SW1,DAFTSW
         BO    DUMP
         L     R15,A#666
BYBY     MZGO
SAVENAME MVC   NAME(16),VRNAM
         XC    INDEX,INDEX
         CLI   VRTYPE,VRNAME
         BE    ELOOP
         TM    SW1,DBEFSW
         BO    DBEF
         CLI   VRTYPE,VRDUMP
         BE    ELOOP
DUMPIT   SR    R4,R4
         L     R5,VRLOC
         L     R6,VRSIZE-1
         B     HDUMP+4
DBEF     CLI   VRTYPE,VRDUMP
         BE    DUMPIT
         B     ELOOP
         SPACE 1
SAVEINDX MVC   INDEX,VRIXNAME
         B     ELOOP
         SPACE 1
HDUMP    LM    R4,R6,VRLOC              (4,5,6)<-(LOC,ABS,LEN)
         LA    R0,0(R5,R6)              R0=(VRABS+VRLEN-1)|15
         BCTR  R0,0
         LA    R1,15
         OR    R0,R1
         ST    R0,END
         NR    R1,R5
         LCR   R1,R1
         LA    R4,0(R4,R1)              VRLOC-VRABS&15
         LA    R5,0(R5,R1)              VRABS-VRABS&15
         STM   R4,R5,REL
         OI    SW1,DMPSW
         BAL   R14,EJECT
         MVC   HDATA,BLANKARD
         MVC   HDATA(7),=C'MZP501I'
         LH    R0,VRLINE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,15
         UNPK  HDATA+8(5),DOUBLE
         LA    R1,HDATA+14
         CLI   INDEX,1
         BNE   *+14
         MVC   0(12,R1),=C'ACCESSED VIA'
         LA    R1,13(,R1)
         MVC   0(8,R1),NAME
         CLI   NAME,C'.'
         BNE   *+10
         MVC   0(8,R1),NUCMEM
         LA    R1,9(,R1)
         CLI   CSECT,0
         BE    *+14
         MVC   0(8,R1),CSECT
         LA    R1,9(,R1)
         CLI   INDEX,1
         BNH   *+20
         MVC   0(6,R1),=C'INDEX:'
         MVC   7(8,R1),INDEX
         LA    R1,16(,R1)
         L     R15,=V(MZDMPOPS)
         CLI   VRTYPE,VRDUMPT
         BE    *+16
         CLI   VRTYPE,VRHDUMPT
         BE    *+8
         L     R15,=V(MZDMPHEX)
         BR    R15
         SPACE 1
NAME     DC    CL8' '
CSECT    DC    CL8' '
INDEX    DC    XL8'0'
REL      DC    A(0)
ABS      DC    A(0)
         DC    F'16'                    INCR FOR BXH
END      DC    A(0)
         SPACE 1
HEXTAB   DC    C'0123456789ABCDEF'
         LTORG
         MZSHD 'HEX/EBCDIC FORMAT'
MZDMPHEX CSECT
         USING *,R12
         LR    R12,R15
         MVC   0(15,R1),=C'HEX/EBCDIC DUMP'
         USING CORE,R15
DLOOP    EX    0,BLCARD
         MVC   DRELL,=C'R:'
         L     R1,REL
         LCR   R1,R1
         TM    REL+1,X'80'              IS RELATIVE LOC NEGATIVE?
         BZ    POSLOCH                   NO - PRINT SIX DIGITS
         ST    R1,DOUBLE
         MVI   DRELD+1,C'-'
         MZHEX DRELD+2,DOUBLE+2,4,BL=*
         B     NEGLOCH
POSLOCH  MZHEX DRELD,REL+1,6
NEGLOCH  EQU   *-4
         MVC   DABSL,=C'A:'
         MZHEX DABSD,ABS+1,6
         LM    R14,R1,REL
         MZHEX DWD1,CWD1,8
         MZHEX DWD2,CWD2,8
         MZHEX DWD3,CWD3,8
         MZHEX DWD4,CWD4,8
         MVI   DAST1,C'*'
         MVC   DEBC,CORE
         TR    DEBC,TRTABLE
         MVI   DAST2,C'*'
         BXH   R15,R0,DLAST
         AR    R14,R0
         STM   R14,R1,REL
         BAL   R14,PUTGOT
         TM    SW1,DMPSW
         BO    DLOOP
         B     ELOOP
DLAST    BAL   R14,PUTGOT
         NI    SW1,255-DMPSW
         B     ELOOP
         LTORG
         MZSHD 'OPCODE/HEX/EBCDIC FORMAT'
MZDMPOPS CSECT
         USING *,R12
         LR    R12,R15
         ST    R7,TR7
         MVC   0(22,R1),=C'HEX/EBCDIC/OPCODE DUMP'
         USING CORE,R15
TLOOP    EX    0,BLCARD
         LA    R0,2
         BAL   R14,RESERVE
         L     R1,REL
         LCR   R1,R1
         TM    REL+1,X'80'              IS RELATIVE LOC NEGATIVE?
         BZ    POSLOCT                   NO - PRINT SIX DIGITS
         ST    R1,DOUBLE
         MVI   TREL+1,C'-'
         MZHEX TREL+2,DOUBLE+2,4,BL=*
         B     NEGLOCT
POSLOCT  MZHEX TREL,REL+1,6
NEGLOCT  EQU   *-4
         MZHEX TABS,ABS+1,6
         LA    R8,2
         LA    R2,TDISP
         L     R15,ABS
         LA    R9,15(R15)
         MVI   TAST1,C'*'
         MVC   TEBC,CORE
         TR    TEBC,TRTABLE
         MVI   TAST2,C'*'
TLOOP1   SR    R14,R14
         IC    R14,0(R2)
         LA    R14,IBUF(R14)
         USING THW,R14
         MZHEX THW,CORE,4
         BCTR  R2,0
         BXLE  R15,R8,TLOOP1
         BAL   R14,PUTGOT
         EX    0,BLCARD
         LM    R15,R1,ABS
         LA    R8,2
         LA    R2,TDISP
         LA    R9,15(R15)
TLOOP2   SR    R14,R14
         IC    R14,0(R2)
         LA    R4,IBUF(R14)
         SR    R7,R7
         IC    R7,0(R15)
         AR    R7,R7
         LH    R7,OPCODES(R7)
         LTR   R7,R7
         BM    NXTHW
TSTOP    LA    R7,OPTAB(R7)
         CLI   0(R7),X'20'
         BE    LONGOP
         CLI   0(R7),X'81'
         BE    MAINEM
         TM    0(R7),X'10'
         BO    EXTOP
MOVEOP   IC    R14,0(R7)
         EX    R14,MVOP
NXTHW    BCTR  R2,0                     NEXT IBUF DISPLACEMENT
         BXLE  R15,R8,TLOOP2            NEXT ABS HW ADDRESS
         LM    R14,R1,REL
         BXH   R15,R0,TLAST
         AR    R14,R0
         STM   R14,R15,REL
         BAL   R14,PUTGOT
         TM    SW1,DMPSW
         BO    TLOOP
         LA    R0,2
         BAL   R14,RESERVE
TBYBY    L     R7,TR7
         B     ELOOP
         SPACE 1
TLAST    BAL   R14,PUTGOT
         NI    SW1,255-DMPSW
         B     TBYBY
         SPACE 1
MVOP     MVC   0(,R4),1(R7)
         SPACE 1
EXTOP    IC    R14,1(R15)               ISOLATE MASK
         SRA   R14,4
         LA    R1,X'10'(R14)
         IC    R14,0(R7)
         LA    R7,1(,R7)
         CR    R14,R1
         BE    MOVEOP
         IC    R14,0(R7)
         LA    R7,2(R7,R14)
         CLI   0(R7),X'FF'
         BE    NXTHW
         B     EXTOP
         SPACE 1
LONGOP   IC    R14,1(R7)
         LA    R1,3(R7,R14)
         CLC   2(1,R7),1(R15)
         BNE   NXTLONG
         MVC   EMNAME,3(R7)
         CLI   1(R1),X'FF'
         BE    *+12
         TM    1(R1),X'80'
         BO    EM1ST
         LA    R7,2(R7)
         B     MOVEOP+4
         SPACE 1
NXTLONG  TM    1(R1),X'80'
         BO    NXTHW
         LR    R7,R1
         B     LONGOP
         SPACE 1
MAINEM   IC    R14,3(R7)
         LA    R1,5(R7,R14)
         MVC   EMNAME,5(R7)
         CLC   1(1,R15),4(R7)
         BE    EM1ST
         LH    R7,1(R7)
         B     TSTOP
         SPACE 1
EM1ST    LA    R0,5(R15)                IS ENTIRE INSTRUCTION DUMPED?
         C     R0,END
         BH    NXTHW                     NO - DON'T TRY TO LOOK IT UP
EMNXT    CLI   1(R1),X'80'              IS THIS NORMAL OP?
         LA    R1,1(R1)
         BE    EMNXT                     YES - SKIP OVER FLAG
         BL    EM8                       YES - NO FLAG
         CLI   0(R1),X'81'              NEXT EMULATOR?
         BE    USEMAIN                   YES -
         CLI   0(R1),X'FF'              IS THIS ALL THERE IS?
         BE    USEMAIN                   YES
*              MUST BE A0(16 BIT) OR C0(12 BIT)
         CLC   2(1,R15),1(R1)           DO 1ST 8 BITS OF OPCODE MATCH?
         BE    EMEXT                     YES
         IC    R14,2(R1)                SKIP ALL SUBOP ENTRIES
         LA    R1,3(R1,R14)
         TM    2(R1),X'80'
         BZ    *-12
         BCT   R1,EMNXT
         SPACE 1
EM8      IC    R14,0(R1)
         CLC   2(1,R15),1(R1)
         BE    MOVEMOP
         LA    R1,2(R1,R14)
         B     EMNXT
         SPACE 1
EMEXT    CLI   0(R1),X'A0'
         BE    EM16
         MVN   EMSUBOP,3(R15)           ISOLATE BITS 12-15
         IC    R14,2(R1)                RIGHT ENTRY?
         CLC   EMSUBOP,3(R1)
         BE    MOVEXMOP                  YES
         LA    R1,3(R1,R14)              NO - GET NEXT ENTRY
         CLI   2(R1),X'80'              SAME MAJOR OPCODE?
         BL    *-22                      YES - TRY AGAIN
         B     USEMAIN
         SPACE 1
EM16     IC    R14,2(R1)
         CLC   3(1,R15),3(R1)           BITS 8-15 MATCH?
         BE    MOVEXMOP                  YES
         LA    R1,3(R1,R14)              NO - GET NEXT ENTRY
         CLI   2(R1),X'80'              SAME MAJOR OPCODE?
         BL    EM16                      YES - TRY AGAIN
*        B     USEMAIN
         SPACE 1
USEMAIN  MVC   0(5,R4),EMNAME
         B     NXTHW
         SPACE 1
MOVEXMOP LA    R1,2(R1)
MOVEMOP  LA    R1,1(R1)
         B     MOVEOP+4
EMNAME   DC    C'EMUXX'
EMSUBOP  DC    X'0'                     0 ZONE, VARIABLE NUMERIC
         SPACE 1
*              SET UP FOR BACKWARDS INDEXING, VIA BXLE
         DC    AL1(THW8-IBUF,THW7-IBUF,THW6-IBUF,THW5-IBUF)
         DC    AL1(THW4-IBUF,THW3-IBUF,THW2-IBUF,THW1-IBUF)
TDISP    EQU   *-1
TR7      DS    F
         LTORG
         MZSHD 'OPCODES'
         PRINT NOGEN
OPTAB    DS    0H
*              BASIC
A        MZOP  5A
AH       MZOP  4A
AL       MZOP  5E
ALR      MZOP  1E
AR       MZOP  1A
BAL      MZOP  45
BALR     MZOP  05
BAS      MZOP  4D,EM=2067
BASR     MZOP  0D,EM=2067
B        MZOP  47,F
BNO      MZOP  47,E
BNH      MZOP  47,D
BEL      MZOP  47,C
BNL      MZOP  47,B
BEH      MZOP  47,A
BEO      MZOP  47,9
BE       MZOP  47,8
BNE      MZOP  47,7
BHL      MZOP  47,6
BLO      MZOP  47,5
BL       MZOP  47,4
BHO      MZOP  47,3
BH       MZOP  47,2
BO       MZOP  47,1
NOP      MZOP  47,0
BR       MZOP  07,F
BNOR     MZOP  07,E
BNHR     MZOP  07,D
BELR     MZOP  07,C
BNLR     MZOP  07,B
BEHR     MZOP  07,A
BEOR     MZOP  07,9
BER      MZOP  07,8
BNER     MZOP  07,7
BHLR     MZOP  07,6
BLOR     MZOP  07,5
BLR      MZOP  07,4
BHOR     MZOP  07,3
BHR      MZOP  07,2
BOR      MZOP  07,1
NOPR     MZOP  07,0
BCT      MZOP  46
BCTR     MZOP  06
BXH      MZOP  86
BXLE     MZOP  87
C        MZOP  59
CDS      MZOP  BB,EM=370
CH       MZOP  49
CL       MZOP  55
CLC      MZOP  D5
CLCL     MZOP  0F,EM=370
CLI      MZOP  95
CLM      MZOP  BD,EM=370
CLR      MZOP  15
CR       MZOP  19
CS       MZOP  BA,EM=370
CVB      MZOP  4F
CVD      MZOP  4E
D        MZOP  5D
DIAG     MZOP  83
DR       MZOP  1D
EX       MZOP  44
HIO      MZOP  9E00
HDV      MZOP  9E01
IC       MZOP  43
ICM      MZOP  BF,EM=370
IMVC     MZOP  E8,EM=IMVC
L        MZOP  58
LA       MZOP  41
LCR      MZOP  13
LCTL     MZOP  B7,EM=370
LH       MZOP  48
LM       MZOP  98
LMC      MZOP  B8,EM=2067
LNR      MZOP  11
LPR      MZOP  10
LPSW     MZOP  82
LR       MZOP  18
LRA      MZOP  B1,EM=370
LRA      MZOP  B1,EM=2067
LTR      MZOP  12
M        MZOP  5C
MC       MZOP  AF,EM=360                UNTRUE BUT GTF USES
MH       MZOP  4C
MR       MZOP  1C
MVC      MZOP  D2
MVCL     MZOP  0E,EM=370
MVI      MZOP  92
MVN      MZOP  D1
MVO      MZOP  F1
MVZ      MZOP  D3
N        MZOP  54
NC       MZOP  D4
NI       MZOP  94
NR       MZOP  14
O        MZOP  56
OC       MZOP  D6
OI       MZOP  96
OR       MZOP  16
PACK     MZOP  F2
S        MZOP  5B
SH       MZOP  4B
SIGP     MZOP  AE,EM=370
SIO      MZOP  9C00
SIOF     MZOP  9C01
SL       MZOP  5F
SLA      MZOP  8B
SLDA     MZOP  8F
SLDL     MZOP  8D
SLL      MZOP  89
SLR      MZOP  1F
SPM      MZOP  04
SR       MZOP  1B
SRA      MZOP  8A
SRDA     MZOP  8E
SRDL     MZOP  8C
SRL      MZOP  88
SSM      MZOP  80
ST       MZOP  50
STC      MZOP  42
STCM     MZOP  BE,EM=370
STCTL    MZOP  B6,EM=370
STH      MZOP  40
STM      MZOP  90
STMC     MZOP  B0,EM=2067
STNSM    MZOP  AC,EM=370
STOSM    MZOP  AD,EM=370
SVC      MZOP  0A
TCH      MZOP  9F00
TIO      MZOP  9D00
CLRIO    MZOP  9D01
TM       MZOP  91
TR       MZOP  DC
TRT      MZOP  DD
TS       MZOP  93
UNPK     MZOP  F3
X        MZOP  57
XC       MZOP  D7
XI       MZOP  97
XR       MZOP  17
IPK      MZOP  B20B,EM=370
PTLB     MZOP  B20D,EM=370
RRB      MZOP  B213,EM=370
SCK      MZOP  B204,EM=370
SCKC     MZOP  B206,EM=370
SPKA     MZOP  B20A,EM=370
SPT      MZOP  B208,EM=370
SPX      MZOP  B210,EM=370
STAP     MZOP  B212,EM=370
STCK     MZOP  B205,EM=370
STCKC    MZOP  B207,EM=370
STIDC    MZOP  B203,EM=370
STIDP    MZOP  B202,EM=370
STPT     MZOP  B209,EM=370
STPX     MZOP  B211,EM=370
*              B2E0-B2EF ARE RESERVED FOR SOFTWARE USE,
*              PER 370 PRINCIPLES OF OPERATION, P74.
         SPACE 2
*              DOS EMULATOR FEATURE OF 370
EXL      MZOP  B20E,EM=DOS
ADJCC    MZOP  B20F,EM=DOS
         SPACE 2
*              STORAGE PROTECTION
ISK      MZOP  09
SSK      MZOP  08
         SPACE 2
*              DECIMAL
AP       MZOP  FA
CP       MZOP  F9
DP       MZOP  FD
ED       MZOP  DE
EDMK     MZOP  DF
MP       MZOP  FC
SP       MZOP  FB
SRP      MZOP  F0,EM=370
ZAP      MZOP  F8
         SPACE 2
*              FLOATING POINT AND EXTENDED PRECISION
ADR      MZOP  2A
AD       MZOP  6A
AER      MZOP  3A
AE       MZOP  7A
AWR      MZOP  2E
AW       MZOP  6E
AUR      MZOP  3E
AU       MZOP  7E
AXR      MZOP  36
CDR      MZOP  29
CD       MZOP  69
CER      MZOP  39
CE       MZOP  79
DDR      MZOP  2D
DD       MZOP  6D
DER      MZOP  3D
DE       MZOP  7D
HDR      MZOP  24
HER      MZOP  34
LTDR     MZOP  22
LTER     MZOP  32
LCDR     MZOP  23
LCER     MZOP  33
LDR      MZOP  28
LD       MZOP  68
LNDR     MZOP  21
LNER     MZOP  31
LPDR     MZOP  20
LPER     MZOP  30
LER      MZOP  38
LE       MZOP  78
LRDR     MZOP  25
LRER     MZOP  35
MDR      MZOP  2C
MD       MZOP  6C
MER      MZOP  3C
ME       MZOP  7C
MXR      MZOP  26
MXDR     MZOP  27
MXD      MZOP  67
STD      MZOP  60
STE      MZOP  70
SDR      MZOP  2B
SD       MZOP  6B
SER      MZOP  3B
SE       MZOP  7B
SWR      MZOP  2F
SW       MZOP  6F
SUR      MZOP  3F
SU       MZOP  7F
SXR      MZOP  37
         SPACE 2
*              DIRECT CONTROL
RDD      MZOP  85
WRD      MZOP  84
         SPACE 2
DIL14    MZOP  EA00,EM=14XX
BDI      MZOP  EA01,EM=14XX
ANUM     MZOP  EA04,EM=14XX
COMP     MZOP  EA05,EM=14XX
MCPU     MZOP  EA08,EM=14XX
MIO      MZOP  EA09,EM=14XX
BIFLG    MZOP  EA0C,EM=14XX
         SPACE 2
EMU70    MZOP  E901,EM=707X
EBI      MZOP  -10,EM=707X
SIC      MZOP  -11,EM=707X
ETCI     MZOP  -20,EM=707X
DIL70    MZOP  -25,EM=707X
ELB      MZOP  -A0,EM=707X
ELBR     MZOP  -A1,EM=707X
ELBZ     MZOP  -A2,EM=707X
EUNA     MZOP  -A3,EM=707X
ENA      MZOP  -A9,0,EM=707X
ENS      MZOP  -A9,1,EM=707X
ENB      MZOP  -A9,2,EM=707X
EFST     MZOP  -AB,0,EM=707X
EMAD     MZOP  -AB,C,EM=707X
EBIX     MZOP  -AC,0,EM=707X
EBDX     MZOP  -AC,1,EM=707X
EUB      MZOP  -AA,0,EM=707X
EUBR     MZOP  -AA,1,EM=707X
ESC      MZOP  -AD,EM=707X
ECA      MZOP  -AE,EM=707X
ERG      MZOP  -AF,8,EM=707X
ERS      MZOP  -AF,9,EM=707X
EUNS     MZOP  -B0,EM=707X
ETMB     MZOP  -B3,EM=707X
EAN      MZOP  -B5,EM=707X
EA       MZOP  -B6,0,EM=707X
ES       MZOP  -B6,1,EM=707X
EC       MZOP  -B6,2,EM=707X
ELBC     MZOP  -B8,EM=707X
EXA      MZOP  -BA,0,EM=707X
EXS      MZOP  -BA,1,EM=707X
EFD      MZOP  -BD,EM=707X
ELL      MZOP  -BF,0,EM=707X
ELE      MZOP  -BF,1,EM=707X
ELEH     MZOP  -BF,2,EM=707X
         SPACE 2
EMU80    MZOP  E902,EM=7080
LB       MZOP  -0E,0,EM=7080
LBM      MZOP  -0E,1,EM=7080
UBS      MZOP  -0F,0,EM=7080
UBP      MZOP  -0F,1,EM=7080
ZAPZ     MZOP  -09,EM=7080
ESPC     MZOP  -10,EM=7080
SETMD    MZOP  -11,EM=7080
BRIF     MZOP  -12,EM=7080
CERZ     MZOP  -13,EM=7080
ZACB     MZOP  -14,0,EM=7080
ZAPON    MZOP  -14,4,EM=7080
ZAPF     MZOP  -14,8,EM=7080
ZAMF     MZOP  -14,C,EM=7080
ATFS     MZOP  -15,0,EM=7080
CSELR    MZOP  -15,1,EM=7080
UNSPC    MZOP  -15,2,EM=7080
CINZA    MZOP  -15,3,EM=7080
BSOF     MZOP  -16,EM=7080
BRIND    MZOP  -17,EM=7080
EEIA     MZOP  -24,EM=7080
DIL80    MZOP  -25,EM=7080
ETRP     MZOP  -27,0,EM=7080
ETRZ     MZOP  -27,1,EM=7080
MDOFF    MZOP  -A4,EM=7080
MDON     MZOP  -A6,EM=7080
EULA     MZOP  -A9,1,EM=7080
EUFC     MZOP  -A9,2,EM=7080
EUSB     MZOP  -A9,3,EM=7080
EUNL     MZOP  -A9,7,EM=7080
ETR      MZOP  -AA,EM=7080
DILEX    MZOP  -AB,EM=7080
EST      MZOP  -AC,EM=7080
ESPR     MZOP  -AD,1,EM=7080
EADM     MZOP  -AD,4,EM=7080
ESET     MZOP  -AE,0,EM=7080
ERND     MZOP  -AE,2,EM=7080
ESHR     MZOP  -AE,3,EM=7080
SALSM    MZOP  -AE,5,EM=7080
EAAM     MZOP  -AF,EM=7080
RSTER    MZOP  -B3,EM=7080
EBLM     MZOP  -B5,0,EM=7080
ESND     MZOP  -B5,1,EM=7080
ETMT     MZOP  -B5,2,EM=7080
ETCT     MZOP  -B5,3,EM=7080
ETCR     MZOP  -B5,7,EM=7080
EMPY     MZOP  -B600,EM=7080
EADD     MZOP  -B640,EM=7080
ESUB     MZOP  -B6,1,EM=7080
ERAD     MZOP  -B6,2,EM=7080
ERSU     MZOP  -B6,3,EM=7080
ETLE     MZOP  -B6,4,EM=7080
ETLH     MZOP  -B6,6,EM=7080
ELOD     MZOP  -B6,8,EM=7080
ECMP     MZOP  -B6,9,EM=7080
ELDA     MZOP  -B6,D,EM=7080
ELSB     MZOP  -B6,E,EM=7080
ELFC     MZOP  -B6,F,EM=7080
EMU90    MZOP  E900,EM=709X
SKC9     MZOP  -0E,EM=709X
TLQ9     MZOP  -0F,EM=709X
PXD9     MZOP  -10,EM=709X
LLS9     MZOP  -11,0,EM=709X
LRS9     MZOP  -11,1,EM=709X
ALS9     MZOP  -11,2,EM=709X
ARS9     MZOP  -11,3,EM=709X
LGR9     MZOP  -11,4,EM=709X
LGL9     MZOP  -11,5,EM=709X
RQL9     MZOP  -11,6,EM=709X
SHFT9    MZOP  -11,EM=709X
BA9      MZOP  -12,EM=709X
AXT9     MZOP  -13,EM=709X
SM9      MZOP  -14,EM=709X
D9       MZOP  -15,EM=709X
ACL9     MZOP  -16,EM=709X
XCA9     MZOP  -17,0,EM=709X
SSM9     MZOP  -17,1,EM=709X
CHS9     MZOP  -17,2,EM=709X
SQP9     MZOP  -17,EM=709X
DIL9     MZOP  -25,EM=709X
STO9     MZOP  -A0,EM=709X
STQ9     MZOP  -A1,EM=709X
SLW9     MZOP  -A2,EM=709X
MVDD9    MZOP  -A3,EM=709X
MVED9    MZOP  -A4,EM=709X
ISIC9    MZOP  -A5,EM=709X
BC9      MZOP  -A6,EM=709X
TXI9     MZOP  -A7,EM=709X
MVEB9    MZOP  -A8,EM=709X
FM9      MZOP  -A9,EM=709X
DFAS9    MZOP  -AA,EM=709X
FAS9     MZOP  -AB,EM=709X
DFM9     MZOP  -AC,EM=709X
DFD9     MZOP  -AD,EM=709X
FD9      MZOP  -AE,EM=709X
M9       MZOP  -AF,EM=709X
MVDB9    MZOP  -B0,EM=709X
TSX9     MZOP  -B1,EM=709X
SXA9     MZOP  -B3,0,EM=709X
SXD9     MZOP  -B3,2,EM=709X
LXD9     MZOP  -B3,3,EM=709X
LXA9     MZOP  -B3,5,EM=709X
LSX9     MZOP  -B3,EM=709X
PX9      MZOP  -B4,EM=709X
ADD9     MZOP  -B5,0,EM=709X
ADM9     MZOP  -B5,1,EM=709X
SUB9     MZOP  -B5,4,EM=709X
SBM9     MZOP  -B5,5,EM=709X
AS9      MZOP  -B5,EM=709X
DLD9     MZOP  -B6,EM=709X
TNX9     MZOP  -B7,EM=709X
BAC9     MZOP  -B8,EM=709X
TMI9     MZOP  -B9,2,EM=709X
TPL9     MZOP  -B9,6,EM=709X
TOV9     MZOP  -B9,8,EM=709X
TNO9     MZOP  -B9,9,EM=709X
TC9      MZOP  -B9,EM=709X
CLA9     MZOP  -BA,0,EM=709X
CLS9     MZOP  -BA,1,EM=709X
CAL9     MZOP  -BA,2,EM=709X
LDQ9     MZOP  -BA,3,EM=709X
STA9     MZOP  -BA,4,EM=709X
LST9     MZOP  -BA,EM=709X
XEC9     MZOP  -BB,EM=709X
TXL9     MZOP  -BC,EM=709X
TXH9     MZOP  -BD,EM=709X
TIX9     MZOP  -BE,EM=709X
SKAC9    MZOP  -BF,EM=709X
         SPACE 2
OPCODES  MZOP  TABLE
         MZSHD 'DSECTS'
THW      DSECT
         DS    C
         SPACE 1
CORE     DSECT
CWD1     DS    F
CWD2     DS    F
CWD3     DS    F
CWD4     DS    F
         ORG   CORE
CHW1     DS    H
CHW2     DS    H
CHW3     DS    H
CHW4     DS    H
CHW5     DS    H
CHW6     DS    H
CHW7     DS    H
CHW8     DS    H
         PRINT NOGEN
        MZWORK MAIN=YES MAIN=YES
MZAPMAIN DSECT
         ORG   IBUF
DRELL    DS    C'R:',C
DRELD    DS    CL6,C
DABSL    DS    C'A:',C
DABSD    DS    CL6,CL2
DWD1     DS    CL8,C
DWD2     DS    CL8,CL3
DWD3     DS    CL8,C
DWD4     DS    CL8,CL2
DAST1    DS    C'*'
DEBC     DS    CL16
DAST2    DS    C'*'
         ORG   IBUF
TREL     DS    CL6,C
TABS     DS    CL6,CL2
THW1     DS    CL4,C
THW2     DS    CL4,CL2
THW3     DS    CL4,C
THW4     DS    CL4,CL3
THW5     DS    CL4,C
THW6     DS    CL4,CL2
THW7     DS    CL4,C
THW8     DS    CL4,CL2
TAST1    DS    C'*'
TEBC     DS    CL16
TAST2    DS    C'*'
         END
./ ADD NAME=MZAP6    0100-19106-19106-1238-00313-00313-00000-MZAP78  18
MZAP6    TITLE 'MOREZAP PATCH PROCESSOR - COPYRIGHT 1975 SHMUEL METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         EJECT
         MACRO
         MZ6   &TYPE
         COPY  MZGBL
         AIF   ('&TYPE' EQ 'REFR').REFR
         MNOTE 12,'MZ6 SPECIFIES AN INVALID TYPE - ''&TYPE'''
         MNOTE 12,'CODE GENERATION SUPPRESSED'
         MEXIT
.REFR    MZTST OS
&MZMATCH SETB  (&MZMATCH OR &MZUPC)
         AIF   (NOT &MZMATCH).END
         AIF   (NOT &MZUPC).ISOSCDE
         TM    CVTDCB,CVT6DAT           SKIP REFR HANDLING IF VS
         BO    NOOSCDE
.ISOSCDE CLI   VRNAME,C'.'              NUCLEUS?
         BE    NOOSCDE                   YES - NO CDE
         TM    SW1,NOGO                 VERIFY FAILED?
         BO    NOOSCDE                   YES - SKIP REFR HANDLING
         L     R9,VRCDEPTR              MAKE NOT REFRESHABLE
         NC    CDATTR2-CDENTRY(1,R9),7(R14)
*              NOTE THAT ON VER PASS, 7(R14) WILL BE FF,
*                        ON REP PASS, 7(R14) WILL BE FF-CDREFR,
NOOSCDE EQU    *
.END     MEND
         SPACE 5
         COPY  MZGBL
         MZSET
         PUNCH '         ALIAS MZAPATCH'
         TITLE 'MOREZAP PATCH PROCESSOR'
         MZHED 'MOREZAP PATCH PROCESSOR'
*              PLEASE YOURSELVES, SAY I, AND THEY
*              NEED ONLY LOOK THE OTHER WAY.
*              BUT NO, THEY WILL NOT; THEY MUST STILL
*              WREST THEIR NEIGHBOR TO THEIR WILL,
*              AND MAKE ME DANCE AS THEY DESIRE
*              WITH JAIL AND GALLOWS AND HELL-FIRE.
*              THEY WILL BE MASTER, RIGHT OR WRONG;
*              THOUGH BOTH ARE FOOLISH, BOTH ARE STRONG.
         SPACE 1
*              A. E. HAUSSMAN, LAST POEMS XII
         SPACE 1
         PRINT GEN
MZAPATCH MZENT
         NI    SW2,255-VEREPSW
*              MODEL DEPENDENT RMS SUPPORT CODE MUST BE ADDED,
*              TO PREVENT INCORRECT REFRESH LOAD OR CHECKSUM RESTORE
*              OF REFRESHABLE LPA AND NUC MODULES.
         USING VRSECT,R4
         SR    R5,R5                    IC REG
         MZKEY ZERO                     DISABLE BETWEEN VER AND REP
         SSM   *+1
         BAL   R14,DOIT                 DO VERIFIES
         CLC   0(,R1),VRDAT
         DC    AL1(VRVER,255)
         SPACE 1
*              AND THUS THE NATIVE HUE OF RESOLUTION
*              IS SICKLIED O'ER WITH THE PALE CAST OF THOUGHT,
*              AND ENTERPRISES OF GREAT PITCH AND MOMENT,
*              WITH THIS REGARD THEIR CURRENTS TURN AWRY,
*              AND LOSE THE NAME OF ACTION
         SPACE 1
*              III 1 HAM
         SPACE 1
         TM    SW1,NOGO                 OK TO REP?
         BO    KVETCH                    NO
         BAL   R14,DOIT                 PROCESS REPLACES
         MVC   0(,R1),VRDAT
         DC    AL1(VRREP,255-CDREFR)
KVETCH   SSM   *+1                      ENABLE
         ORG   *-3
         DC    X'FF'
         ORG   *+2
         MZKEY KLUB                     RETURN TO NORMAL KEY
         TM    SW1,NOGO                 WAS THERE AN ERROR OR VER FAIL?
         BZ    EUREKA                    NO - GO TO UNRESET FOR CLEANUP
         DROP  R4
         L     R7,HEAD                  LIST VER/REP/NAME/INDEX FAILS
         USING VRSECT,R7
NACHES   TM    VRFLG,VRFAIL
         BNZ   LISTIT
NEXT     MZLT  R7,VRNEXT
         BNZ   NACHES
         LA    R0,4
         C     R0,HIGHRC
         BL    *+8
         ST    R0,HIGHRC
         EX    0,BLCARD
         MZMVC 'MZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED'
         BAL   R14,PUTGOT
         B     BYBY
         SPACE 1
EUREKA   EX    0,BLCARD
         MZMVC 'MZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL'
         BAL   R14,PUTGOT
         SPACE 1
BYBY     L     R13,4(,R13)              GO TO UNRESET
         LM    R14,R12,12(R13)
         L     R15,ADDT-MZAPMAIN(,R10)
         TM    SW1-MZAPMAIN(R10),DEBUGSW
         BOR   R15
         L     R15,A#666-MZAPMAIN(,R10)
         BR    R15
LISTIT   EX    0,BLCARD
         MZMVC 'MZP601I'
         LH    R0,VRLINE
         CVD   R0,DOUBLE
         OI    DOUBLE+7,15
         UNPK  IBUF+8(5),DOUBLE
         CLI   VRTYPE,VRNAME
         BE    LISTNAME
         CLI   VRTYPE,VRREP             IS IT V|R?
         BH    NEXT                      NO
         TM    VRFLG,VRBOUNDS
         BO    BOUNDED
         MVI   IBUF+5,C'3'
         MVC   IBUF+14(17),=C'VERIFY FAILURE AT'
         L     R1,VRLOC
         LCR   R0,R1
         TM    VRLC,X'80'               IS RELATIVE LOC NEGATIVE?
         BZ    POSLOC                    NO - PRINT SIX DIGITS
         ST    R0,DOUBLE
         MVI   IBUF+33,C'-'
         MZHEX IBUF+34,DOUBLE+2,4,BL=*
         B     NEGLOC
POSLOC   MZHEX IBUF+32,VRLC,6
NEGLOC   EQU   *-4
         MVC   IBUF+39(4),=C'ABS:'
         MZHEX IBUF+44,VRAB,6
         BAL   R14,PUTGOT
         MVC   IBUF+14(17),=C'ACTUAL CONTENT IS'
         MVC   IBUF+32(18),BLANKARD
         MVI   IBUF+5,C'4'
         LA    R4,5
         LA    R5,IBUF+75
         LA    R6,IBUF+32
         LA    R1,VRDAT
         SR    R9,R9
         IC    R9,VRDATLN
MOREVER  UNPK  0(5,R6),0(3,R1)
         TR    0(4,R6),HEXTAB-C'0'
         MVI   4(R6),C','
         SH    R9,=H'2'
         BM    ENDVER
         LA    R1,2(R1)
         BXLE  R6,R4,MOREVER
         B     LIST
ENDVER   MVI   4(R6),C' '
         SPACE 1
LIST     BAL   R14,PUTGOT
         B     NEXT
         SPACE 1
BOUNDED  MVI   IBUF+5,C'2'
         LM    R14,R15,VRLOC            (14,15)<-(LOC,ABS)
         SR    R1,R1
         IC    R1,VRDATLN
         AR    R14,R1
         AR    R15,R1
         STM   R14,R15,DOUBLE
         MZHEX IBUF+14,VRLC,6,BL=':'
         MZHEX IBUF+21,DOUBLE+1,6
         MVC   IBUF+28(4),=C'ABS:'
         MZHEX IBUF+33,VRAB,6,BL=':'
         MZHEX IBUF+40,DOUBLE+5,6
         MVC   IBUF+47(12),=C'OUT OF RANGE'
         B     LIST
         SPACE 1
LISTNAME MVC   IBUF+14(4),=C'NAME'
         MVC   IBUF+19(8),NUCMEM
         CLI   VRNAM,C'.'
         BE    *+10
         MVC   IBUF+19(8),VRNAM
         CLI   VRCSECT,0                IS THERE A CSECT NAME?
         BE    *+10                      NO
         MVC   IBUF+28(8),VRCSECT
         B     LIST
         DROP  R7
         SPACE 5
*              SUBROUTINE TO PROCESS NAME, BASE, INDEX, VER, AND REP.
*              CALLED BY:
*        BAL   R14,DOIT
*        CLC   0(,R1),VRDAT
*        DC    AL1(VRVER,255)
         SPACE 1
*              OR:
*        BAL   R14,DOIT
*        MVC   0(,R1),VRDAT
*        DC    AL1(VRREP,255-CDREFR)
         SPACE 1
*              REGISTER USAGE:
*        1     LOCATION
*        4     ENTRY POINTER
*        9     ENTRY FOR NAME
*        14    RETURN
*        5     LENGTH-1
*        6     LOCATION OF CSECT
*        7     END+1    OF CSECT
*        15    INDEX-BASE
         SPACE 1
DOIT     L     R4,HEAD
         USING VRSECT,R4
VERILY   L     R1,VRLOC                 GET LOC, INDEX, BASE, ETC.
         LA    R1,0(R1)
         CLI   VRTYPE,VRNAME
         BE    VRNM
         CLI   VRTYPE,VRINDEX
         BE    VRIX
         CLI   VRTYPE,VRHINDEX
         BE    VRHIX
         CLI   VRTYPE,VRBASE
         BE    VRBS
         CLI   VRTYPE,VRREP             IS THIS VER/REP?
         BNH   VRVR                      YES - PROCESS
         CLI   VRTYPE,VRPOINT           IS THIS POINT OR UNSAVE?
         BL    NEXTRUTH                  NO - SKIP
         TM    VRFLG,VRFND+VRBOUNDS     NOT FOUND OR OUT OF BOUNDS?
         BNM   DEIX                      YES - SKIP FOLLOWING REPS
         L     R6,VRABS                 RE-ESTABLISH BEGIN
         LA    R6,0(,R6)
         LH    R7,VRLENB                RE-ESTABLISH END+1
         LA    R7,0(R6,R7)
         LH    R15,VRIXB                RE-ESTABLISH INDEX
         LA    R15,0(R6,R15)
         SPACE 1
NEXTRUTH MZLT  R4,VRNEXT                ANY MORE?
         BNZ   VERILY
         B     8(R14)                    NO MORE
         SPACE 1
VRNM     TM    VRFLG,VRFND
         BZ    DENAME
         MZ6   REFR
         LR    R9,R4                    SAVE ENTRY IN CASE OF FAIL
         LR    R6,R1                    GET ABS LOC
         LR    R15,R1                   INDEX=0
         L     R7,VRSIZE-1              GET END+1 = LOC+LEN
         LA    R7,0(R6,R7)               WITH HIGH BYTE = 0
         B     NEXTRUTH
         SPACE 1
VRIX     TM    VRFLG,VRFND
         BZ    DEIX
         L     R6,VRLOC-VRSECT(R9)      GET ABS LOC
         LA    R6,0(,R6)
         L     R7,VRSIZE-1-VRSECT(R9)   GET END+1 = LOC+LEN
         LA    R7,0(R6,R7)
         LR    R15,R1                   INDEX=NEW INDEX
         B     NEXTRUTH
         SPACE 1
VRBS     LCR   R1,R1                    INDEX=INDEX + (-NEW INDEX)
VRHIX    AR    R15,R1                   INDEX=INDEX + NEW INDEX
         B     NEXTRUTH
         SPACE 1
VRVR     TM    VRFLG-VRSECT(R9),VRFND   IS NAME OK?
         BZ    DENAME                    NO - CAN'T VALIDATE V|R
         TM    VRFLG,VRBOUNDS           ALREADY KVETCHED?
         BO    NEXTRUTH                  YES - ONCE IS ENOUGH
         IC    R5,VRDATLN
         LA    R1,0(R1,R15)             ADD INDEX-BASE TO REL LOCATION
         LA    R0,0(R1,R5)              CALC END=START+LEN-1
         CR    R0,R1                    WRAP-AROUND ERROR?
         BL    FAILVR                    YES
         CR    R1,R6                    ADDRESS TOO LOW?
         BL    FAILVR                    YES
         CR    R0,R7                    LENGTH TOO LONG?
         BL    *+12                      NO
FAILVR   OI    VRFLG,VRBOUNDS            YES
         B     FAIL
         CLC   VRTYPE,6(R14)            IS IT 1ST&VER | 2ND&REP?
         BNZ   NEXTRUTH                  NO
         EX    R5,0(R14)                CLC/MVC
         BE    NEXTRUTH
         EX    R5,SAVEFAIL
FAIL     OI    VRFLG,VRFAIL             FLAG V|R
         OI    VRFLG-VRSECT(R9),VRFAIL  FLAG NAME CARD
         OI    SW1,NOGO
         B     NEXTRUTH
         SPACE 1
SAVEFAIL MVC   VRDAT(0),0(R1)
         SPACE 1
DEIX     MZLT  R4,VRNEXT                SKIP TO NAME OR IX ENTRY
         BZ    8(R14)
         CLI   VRTYPE,VRINDEX
         BE    VERILY
         CLI   VRTYPE,VRNAME
         BE    VERILY
         CLI   VRTYPE,VRPOINT           POINT OR UNSAVE?
         BL    DEIX                      NO SKIP IT
         B     VERILY                    YES
         SPACE 1
DENAME   MZLT  R4,VRNEXT                SKIP TO NEXT NAME ENTRY
         BZ    8(R14)
         CLI   VRTYPE,VRNAME
         BNZ   DENAME
         B     VERILY
         DROP  R4
         SPACE 1
HEXTAB   DC    C'0123456789ABCDEF'
         LTORG
         PRINT NOGEN
        MZWORK MAIN=YES,CD=YES
CDREFR  EQU   X'20'
         END
./ ADD NAME=MZAP7    0100-19106-19106-1238-00101-00101-00000-MZAP78  18
MZP7     TITLE 'MOREZAP UNRESET ROUTINE - COPYRIGHT 1975 SHMUEL METZ'
*              THIS PROGRAM WAS WRITTEN BY:
         SPACE 1
*                                  SHMUEL METZ
*                                  TECHNION,
*                                    ISRAEL INSTITUTE OF TECHNOLOGY
*                                  TECHNION CITY
*                                  HAIFA, ISRAEL
         SPACE 2
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
*              THIS PROGRAM IS NOT TO BE DISTRIBUTED WITHOUT PERMISSION
*              FROM THE AUTHOR.
         SPACE 5
         COPY  MZGBL
         MZSET
         PUNCH '         ALIAS MZUNREST'
         TITLE 'CLEANUP AFTER ALL PROCESSING FOR RESET OR EODAD - COPYR*
               IGHT 1975 SHMUEL METZ'
         MZHED 'CLEANUP AFTER ALL PROCESSING FOR RESET OR EODAD'
*              AND SINCE, MY SOUL, WE CANNOT FLY
*              TO SATURN NOR TO MERCURY,
*              KEEP WE MUST, IF KEEP WE CAN,
*              THOSE FOREIGN LAWS OF GOD AND MAN.
         SPACE 1
*              A. E. HAUSSMAN, LAST POEMS XII
         SPACE 1
MZUNREST MZENT
         TM    SW1,DEBUGSW              DEBUG MODE SET?
         BZ    NODDT
         TM    CVTDCB,CVT6DAT           VS?
         BO    NODDT                     YES - SKIP DELETING OS NAME
        DELETE EP=IGC0A05A              REMOVE SNAP SERVICE MODULE
NODDT    NI    SW1,NOTNUC+KEYSW         TURN OFF DEBUGSW AND NOGO
         NI    SW2,EOD+HOLDSW
         XC    HEAD(8),HEAD             HEAD=TAIL=0
      FREEMAIN R,SP=13
         TM    SW2,EOD
         BO    CESTTOUT
         BAL   R14,EJECT
         L     R15,ACORN
         MZGO
         SPACE 1
CESTTOUT EX    0,BLCARD
         MZMVC 'MZP701I EOD'
         BAL   R14,PUTGOT
         TM    SW3,TSOSW
         BZ    NOTSO
         STAX
     SPAUTOPT
NOTSO    LA    R4,SYSIN
         BAL   R9,CLOSE
         L     R12,PUTLOG
         BAL   R8,DELETE
         L     R12,PUTMON
         BAL   R8,DELETE
         L     R12,PUTCON
         BAL   R8,DELETE
         LA    R4,SYSNUC
         BAL   R9,CLOSE
         USING IHADCB,R4
         MZLT  R4,NEXTDCB               ANY MORE?
         BZ    BYBY                      NO
CLUP     BAL   R9,CLOSE
         LA    R1,0(,R4)
         L     R4,NEXTDCB               GET NEXT BEFORE FREE
      FREEMAIN R,A=(1),LV=NULEN
         LA    R4,0(,R4)                KILL HIGH BYTE
         LTR   R4,R4
         BNZ   CLUP
         SPACE 1
BYBY     MZKEY ZERO                     FLOAT
         TM    SW3,GANAVSW              IS HE A DIOGENES?
         BO    TAGMUL                    NO - STRENGTHEN HIS CHARACTER
         L     R15,HIGHRC               THIS IS THE WAY THE WORLD ENDS,
         SVC   3                        NOT WITH A BANG, BUT A WHIMPER
         SPACE 1
TAGMUL   STAE  E04,XCTL=YES,PURGE=NONE
E04      BALR  R15,0                    OLD MACDONALD HAD A FARM,
         SVC   12                       EO, EO, FOUR
         SPACE 1
DELETE   LA    R0,DUMMYVEC
         CR    R0,R12
         BER   R8
         MZLT  R4,OFDCB(R12)
         BZ    *+8
         BAL   R9,CLOSE
         DELETE EPLOC=OFNAME(,R12)
         BR    R8
         SPACE 1
CLOSE    CLOSE ((R4),)
         TM    DCBDSORG,X'42'           PS OR PO?
         BCR   8,R9                      NO
         TM    DCBBUFCB+3,1             BUFFER POOL EXIST?
         BCR   1,R9                      NO
      FREEPOOL (R4)
         BR    R9
         LTORG
         PRINT NOGEN
        MZWORK MAIN=YES
         END
./ ADD NAME=MZBC     0100-19106-19106-1238-00060-00060-00000-MZAP78  18
         MACRO
&L       MZBC  &MASK,&B
         LCLA  &I,&J
         LCLC  &C
         AIF   (T'&MASK EQ 'O').NOMASK
         AIF   (T'&B EQ 'O').NOB
         AIF   ('&MASK' EQ 'B').B
         AIF   ('&MASK' EQ 'NOP').NOP
&J       SETA  1
         AIF   ('&B'(1,1) EQ '(').NXT
         AIF   (K'&MASK EQ 1).MSK
         AIF   (K'&MASK EQ 2 AND '&MASK'(1,1) EQ 'N').MSK
         AIF   ('&MASK'(1,1) EQ 'N').BUMP
.NXT     ANOP
&C       SETC  '&MASK'(&J,1)
         AIF   ('&C' EQ 'Z' OR '&C' EQ 'E').E
         AIF   ('&C' EQ 'M' OR '&C' EQ 'L').L
         AIF   ('&C' EQ 'P' OR '&C' EQ 'H').H
         AIF   ('&C' EQ 'O').O
         MNOTE 12,'&C IS INVALID IN MZBC MASK &MASK'
         MEXIT
.E       ANOP
&I       SETA  &I+8
         AGO   .BUMP
.L       ANOP
&I       SETA  &I+4
         AGO   .BUMP
.H       ANOP
&I       SETA  &I+2
         AGO   .BUMP
.O       ANOP
&I       SETA  &I+1
.BUMP    ANOP
&J       SETA  &J+1
         AIF   (&J LE K'&MASK).NXT
         AIF   ('&MASK'(1,1) NE 'N').NOC
&I       SETA  15-&I
.NOC     AIF   ('&B'(1,1) EQ '(').BCR
&L       BC    &I,&B
         MEXIT
.BCR     ANOP
&L       BCR   &I,&B(1)
         MEXIT
.B       AIF   ('&B'(1,1) EQ '(').BR
&L       B     &B
         MEXIT
.BR      ANOP
&L       BR    &B(1)
         MEXIT
.NOP     AIF   (T'&L EQ 'O').BYBY
&L       DS    0H
.BYBY    MEXIT
.MSK     ANOP
&C       SETC  'B'.'&MASK'
&L       &C    &B
         MEXIT
.NOMASK  MNOTE 12,'MASK OMITTED FOR MZIF'
         MEXIT
.NOB     MNOTE 12,'BRANCH ADDRESS OMITTED FOR MZBC'
         MEND
./ ADD NAME=MZENT    0100-19106-19106-1238-00033-00033-00000-MZAP78  18
         MACRO
&L       MZENT &TYPE=OVERLAY,&B=R11,                                   *
               &DCB=0,&PUT=CVTBRET,&EJECT=CVTBRET,&ATTN=CVTBRET,       *
               &GET=CVTBRET,&INIT=
&L       CSECT
         USING CVT,R3
         AIF   ('&TYPE' EQ 'OVERLAY').OVERLAY
         AIF   ('&TYPE' EQ 'IO').IO
         MNOTE 12,'TYPE=&TYPE IS INVALID ON MZENT'
         MEXIT
.OVERLAY USING *,&B(1)
         USING MZAPMAIN,R13
         B     I&SYSNDX-&L.(,R15)
         DC    AL1(L'N&SYSNDX)
N&SYSNDX DC    C'&L - COPYRIGHT 1975 SHMUEL METZ - &SYSDATE - &SYSTIME'
I&SYSNDX STM   R14,R12,12(R13)
         LR    &B(1),R15
         ST    R10,8(,R13)
         ST    R13,4(,R10)
         LR    R13,R10
         MEXIT
.IO      USING *,R12
         USING MZAPMAIN,R13
         DC    CL8'&L'
         DC    A(&DCB)                  DCB
         B     &PUT                     PUT
         B     &EJECT                   EJECT/RESERVE
         B     &GET                     GET
         B     &ATTN                    TEST ATTENTION
         AIF   (T'&INIT EQ 'O').NOINIT
         DC    A(&INIT)              INITIALIZATION INFORMATION
.NOINIT  DC    C'&SYSDATE - SHMUEL METZ - &SYSTIME'
         MEND
./ ADD NAME=MZERR    0100-19106-19106-1238-00022-00022-00000-MZAP78  18
         MACRO
&L       MZERR &TXT
         LCLA  &I,&J
         AIF   (T'&TXT EQ 'O').NOT
         AIF   ('&TXT'(1,1) NE '''').NOQ
&J       SETA  K'&TXT-3
&I       SETA  2
.SCN     AIF   ('&TXT'(&I,2) EQ '''').QA
         AIF   ('&TXT'(&I,2) NE '&&').NXT
.QA      ANOP
&J       SETA  &J-1
&I       SETA  &I+1
.NXT     ANOP
&I       SETA  &I+1
         AIF   (&I LT K'&TXT).SCN
&L       BAL   R1,INVLD
         DC    AL1(&J),C&TXT
         MEXIT
.NOT     MNOTE 12,' ''TEXT'' REQUIRED'
         MEXIT
.NOQ     MNOTE 12,'DELIMITING '' MISSING'
         MEND
./ ADD NAME=MZGBL    0100-19106-19106-1238-00007-00007-00000-MZAP78  18
         GBLA  &MZPREL,&MZSREL,&MTSVC,&HASPSVC
         GBLB  &MZ1ST
         GBLB  &MZMATCH                 SYSTEM MATCHES OPTIONS
         GBLB  &MZUPC                   UPWARD COMPATABLE (OS->VS)
         GBLB  &MFT,&MVT,&OS,&OSMFT,&OSMVT,&VS,&VS1,&VS2,&SVS,&MVS
         GBLC  &CPU,&CPUID,&MDL,&SYS,&REL
         GBLC  &ASP,&ASPV,&HASP,&HASPV
./ ADD NAME=MZGM     0100-19106-19106-1238-00014-00014-00000-MZAP78  18
         MACRO
&L       MZGM  &SP,&SIZE
         GBLC  &CPU
         AIF   ('&CPU' EQ '370').ICM
&L       LA    R0,&SP
         LA    R1,&SIZE
         SLL   R1,8
         SLDL  R0,24
         AGO   .GM
.ICM     ANOP
&L       LA    R0,&SIZE
         ICM   R0,8,=AL1(&SP)
.GM    GETMAIN R,LV=(0)
         MEND
./ ADD NAME=MZGO     0100-19106-19106-1238-00016-00016-00000-MZAP78  18
         MACRO
&L       MZGO  &BACK,&R=(R15)
&L       L     R13,4(R13)
         AIF   ('&BACK' EQ 'BACK').BACK
         AIF   ('&R' EQ '*').LM
         AIF   ('&R'(1,1) EQ '(').STORE
         LA    R15,&R
         ST    R15,16(R13)
         AGO   .LM
.STORE   ST    &R(1),16(R13)
.LM      LM    R14,R12,12(R13)
         AIF   ('&R' EQ '*').BYBY
         BR    R15
.BYBY    MEXIT
.BACK   RETURN (14,12),T
         MEND
./ ADD NAME=MZHED    0100-19106-19106-1238-00043-00043-00000-MZAP78  18
         MACRO
&L       MZHED &TIT,&LEN=35
.*
.*             COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
.*
.*             THIS MACRO IS CALLED AT THE BEGINNING OF AN ASSEMBLY,
.*             IN ORDER TO SET UP THE LEFT HALF OF THE TITLE.
.*             IT IS INTENDED TO BE USED IN CONJUNCTION WITH MZSHD.
.*             MAIN HALF OF TITLE IS PADDED TO &LEN CHARACTERS.
.*
.*             THIS MACRO CAN NOT BE USED WITH ASSEMBLER F.
.*             USE F EXTENDED(FROM OS/VS), G WITH LSETC=255, OR H.
         GBLC  &MTITLE
         LCLA  &I,&LN
&I       SETA  1
         AIF   ('&TIT'(1,1) NE '''' OR '&TIT'(K'&TIT,1) NE '''').DEL
.LOOP    AIF   (&I GE K'&TIT-1).ENDLOOP
         AIF   (&LN GE &LEN).TOOBIG
&I       SETA  &I+1
&LN      SETA  &LN+1
         AIF   ('&TIT'(&I,1) EQ '''' OR '&TIT'(&I,1) EQ '&&').SPECIAL
&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,1)
         AGO   .LOOP
.*
.DEL     MNOTE 4,'TITLE NOT DELIMITED BY "''" - IGNORED'
&MTITLE  SETC  'LEARN TO PUT QUOUTES AROUND THINGS'
.*
.SPECIAL AIF   (&I EQ K'&TIT).NOTPAIR
         AIF   ('&TIT'(&I,1) NE '&TIT'(&I+1,1)).NOTPAIR
&MTITLE  SETC  '&MTITLE'.'&TIT'(&I,2)
&I       SETA  &I+1
         AGO   .LOOP
.*
.NOTPAIR MNOTE 4,' CHARACTER "''" OR "&&" NOT PAIRED'
&MTITLE  SETC  '&MTITLE'.(2)'&TIT'(&I,1)
         AGO   .LOOP
.*
.TOOBIG  MNOTE 4,'TITLE LONGER THAN &LEN - EXCESS TRUNCATED'
         MEXIT
.*
.ENDLOOP AIF   (&LN EQ &LEN).END
&MTITLE  SETC  '&MTITLE'.(&LEN-&LN)' '
.END     MEND
./ ADD NAME=MZHEX    0100-19106-19106-1238-00013-00013-00000-MZAP78  18
         MACRO
&L       MZHEX &D,&S,&LEN,&BL=' '
         LCLA  &I,&J
&I       SETA  &LEN/2+1
         AIF   (N'&S EQ 1).IOK
&I       SETA  &S(2)
.IOK     ANOP
&J       SETA  &LEN+1
&L       UNPK  &D.(&J),&S.(&I)
         TR    &D.(&LEN),HEXTAB-C'0'
         AIF   ('&BL' EQ '' OR '&BL' EQ '*').BYBY
         MVI   &D+&LEN,C&BL
.BYBY    MEND
./ ADD NAME=MZIF     0100-19106-19106-1238-00066-00066-00000-MZAP78  18
         MACRO
&L       MZIF  &TEST,&B
         COPY  MZGBL
         LCLA  &I
&I       SETA  6
         AIF   ('&B'(1,1) EQ '(').TEST
&I       SETA  8
.TEST    AIF   ('&TEST' EQ '360).T360
         AIF   ('&TEST' EQ '370').370
         AIF   ('&TEST' EQ 'OS').OS
         AIF   ('&TEST' EQ 'VS').VS
         AIF   ('&TEST' EQ 'VS1').VS1
         AIF   ('&TEST' EQ 'VS2').VS2
         AIF   ('&TEST' EQ 'MFT').MFT
         AIF   ('&TEST' EQ 'MVT').MVT
         AIF   ('&TEST' EQ 'OS/MFT').OSMFT
         AIF   ('&TEST' EQ 'OS/MVT').OSMVT
         AIF   ('&TEST' EQ 'STIDP').STIDP
         MNOTE 12,'&TEST IS INVALID TEST FOR MZIF'
         MEXIT
.T360    AIF   ('&CPU' EQ '360').B
.NOP     ANOP
&L       MZBC  NOP,&B
         MEXIT
.B       ANOP
&L       MZBC  B,&B
         MEXIT
.T370    AIF   ('&CPU' EQ '370').B
         AGO   .NOP
.OS      ANOP
&L       TM    CVTDCB,CVT6DAT           OS/VS?
         MZBC  Z,&B
         MEXIT
.VS      ANOP
&L       TM    CVTDCB,CVT6DAT           OS/VS?
.BO      MZBC  O,&B
         MEXIT
.VS1     ANOP
&L       TM    CVTDCB,CVT2SPS+2 .       OS/VS1?
         AGO   .BO
.VS2     ANOP
&L       TM    CVTDCB,CVT4MS1+2 .       OS/VS2?
         AGO   .BO
.MFT     ANOP
&L       TM    CVTDCB,CVT2SPS .         EITHER OS/MFT OR OS/VS1?
         AGO   .BO
.MVT     ANOP
&L       TM    CVTDCB,CVT4MS1 .         EITHER OS/MVT OR OS/VS2?
         AGO   .BO
.OSMFT   ANOP
         TM    CVTDCB,CVT6DAT           OS/VS?
         BO    *+&I
         TM    CVTDCB,CVT2SPS .         OS/MFT?
         AGO   .BO
.OSMVT   ANOP
         TM    CVTDCB,CVT6DAT           OS/VS?
         BO    *+&I
         TM    CVTDCB,CVT4MS1 .         OS/MVT?
         AGO   .BO
.STIDP   AIF   ('&CPU' NE '370').NOP
         AIF   ('&B'(1,1) EQ '(').BUMREG
&L       STIDP &B
         MEXIT
.BUMREG  MNOTE 12,'MZIF STIDP,&B HAS REGISTER NOTATION'
         MEXIT
         MEND
./ ADD NAME=MZITH    0100-19106-19106-1238-00011-00011-00000-MZAP78  18
         MACRO
&L       MZITH &D,&S
         GBLC  &CPU
         AIF   ('&CPU' EQ '370').ICM
&L       LH    &D,&S
         N     &D,=X'0000FFFF'
         MEXIT
.ICM     ANOP
&L       SR    &D,&D
         ICM   &D,3,&S
         MEND
./ ADD NAME=MZKEY    0100-19106-19106-1238-00008-00008-00000-MZAP78  18
         MACRO
&L       MZKEY &KEY
         AIF   ('&KEY' EQ '0' OR '&KEY' EQ 'ZERO').ZORO
&L       BAL   15,KITCHEN *             SVC 12; BR 15
         MEXIT
.ZORO    ANOP
&L       BAL   15,CVTEXIT *             SVC 3
         MEND
./ ADD NAME=MZLT     0100-19106-19106-1238-00011-00011-00000-MZAP78  18
         MACRO
&L       MZLT  &D,&S
         GBLC  &CPU
         AIF   ('&CPU' EQ '370').ICM
&L       L     &D,&S
         LA    &D,0(&D)
         LTR   &D,&D
         MEXIT
.ICM     ANOP
&L       ICM   &D,7,1+&S
         MEND
./ ADD NAME=MZMVC    0100-19106-19106-1238-00006-00006-00000-MZAP78  18
         MACRO
&L       MZMVC &MSG
         LCLA  &I
&I       SETA  K'&MSG-2
&L       MVC   IBUF(&I),=C&MSG
         MEND
./ ADD NAME=MZOP     0100-19106-19106-1238-00030-00030-00000-MZAP78  18
         MACRO
&L       MZOP  &NAME,&NEXT=
         GBLC  &NM
         LCLA  &LEN,&L1
         LCLC  &NXT
         AIF   (T'&NAME EQ 'O').NONAME
&LEN     SETA  K'&NAME
         AIF   ('&NAME'(1,1) NE '''').NOTQ
&LEN     SETA  &LEN-2
&L1      SETA  1
.NOTQ    AIF   (T'&L EQ 'O').NXT
&NM      SETC  '&L'
.NXT     ANOP
&NXT     SETC  '&NEXT'
         AIF   ('&NEXT' EQ '*').AST
         AIF   (T'&NEXT NE 'O').NOK
&NXT     SETC  'OP'.'&SYSNDX'
         AGO   .NOK
.AST     ANOP
&NXT     SETC  '&NM'
.NOK     AIF   ('&NAME'(1,1) EQ '''').Q
&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C'&NAME'
&NM      SETC  '&NXT'
         MEXIT
.Q       ANOP
&NM      DC    Y(&NXT-&NM),AL1(&LEN-1),C&NAME
&NM      SETC  '&NXT'
         MEXIT
.NONAME  MNOTE 8,'NO OPERAND ON OP MACRO'
         MEND
./ ADD NAME=MZPRINT  0100-19106-19106-1238-00081-00081-00000-MZAP78  18
MZPR     TITLE 'MOREZAP SYSPRINT ACCESS METHOD'
         COPY  MZGBL
         MZSET
         PRINT NOGEN
MZPRINT  MZENT TYPE=IO,DCB=SYSPRINT,                                   *
               PUT=LINECNT,EJECT=RSVSPACE,GET=GETQSAM
         SPACE 2
LINECNT  LA    R1,1                     ARE WE AT THE END OF OUR PAGE?
         BCT   R1,NEXTLINE
         CLI   DAT+1,C' '
         BNL   NOEDIT
         ED    DAT(7),DATE+1
         ED    TME(9),TIME
NOEDIT   AP    PAGENO,=P'1'
         MVC   PNUM,PMASK
         ED    PNUM,PAGENO
         PUT   SYSPRINT,HEADER
         MVI   OCC,C'-'
         LA    R1,56
         TM    SW1,DMPSW                DUMP/HELP/DEBUG ACTIVE?
         BZ    NEXTLINE                  NO - NO SUBHEADING
         PUT   SYSPRINT,HLEN
         LA    R1,55
NEXTLINE STH   R1,LINECNT+2
         LA    R4,ODATA+79              ELIMINATE TRAILING BLANKS
         LA    R5,80
         CLI   0(R4),C' '
         BNE   *+14
         BCTR  R4,0
         BCT   R5,*-10
         LA    R5,1                     FORCE 1 SIG POSITION FOR
*                                       BUG IN QSAM
H1       EQU   *-2
         LA    R5,5(R5)                 4 FOR RDW, 1 FOR CC
         ORG   *-2
H5       DS    H
         STH   R5,OLEN
         PUT   SYSPRINT,OLEN
         MVI   OCC,C' '
         TM    SW2,ATTNSW
         BO    NOLOG
         TM    SW3,DUMPSW+NOMONSW
         BNO   NOLOG
         LA    R14,NOCRT                FAKE BAL   R14,OFATTN(,R12)
         L     R12,PUTMON
         CLI   OFATTN(R12),X'07'
         BNE   OFATTN(,R12)
         LA    R14,ENDPUT
         L     R12,PUTCON
         B     OFATTN(,R12)
         SPACE 2
RSVSPACE CH    R0,LINECNT+2
         BLR   R14
         MVI   LINECNT+3,1
         BR    R14
         SPACE 4
HEADER   DC    Y(ENDHED-HEADER,0)
         DC    C'1METZ''S OWN RELIABLE EXTENDED ZAP'
         DC    CL5' '
         DC    C'TIME'
TME      DC    X'402120',C':',X'2020',C':',X'2020'
         DC    CL5' '
         DC    C'DATE'
DAT      DC    X'402120',C'/',X'202020'
         DC    CL5' '
         DC    C'PAGE'
PNUM     DC    X'40212020'
ENDHED   EQU   *
         SPACE 1
PMASK    DC    X'40212020'
PAGENO   DC    PL2'0'
         LTORG
         PRINT NOGEN
SYSPRINT DCB   DDNAME=SYSPRINT,DSORG=PS,MACRF=(PM),                    *
               RECFM=VBA,LRECL=137
         MZSHD 'LITERALS'
         LTORG
MZAPMAIN MZAPMAIN TYPE=D
         TITLE 'COMMUNICATIONS VECTOR TABLE'
CVT      CVT   SYS=VMS,PREFIX=YES
         END   MZPRINT
./ ADD NAME=MZSCR    0100-19106-19106-1238-00273-00273-00000-MZAP78  18
         MACRO
&L       MZSCR &DUMMY,&LINESZE=80
         GBLA  &ROW,&COL
         LCLA  &I,&I1,&I2,&J,&K
         LCLB  &LN40,&LN64,&LN80,&STARTPR,&SAL,&RSTKBY,&RSTMDT
         LCLB  &PROT,&NUMERIC,&DECT,&INT,&NONDISP,&MDT
         LCLB  &OK
         LCLC  &LABEL,&LABEL1,&CH1,&TB(64)
&LABEL   SETC  '&L'
&TB(1)   SETC  ' '
&TB(2)   SETC  'A'
&TB(3)   SETC  'B'
&TB(4)   SETC  'C'
&TB(5)   SETC  'D'
&TB(6)   SETC  'E'
&TB(7)   SETC  'F'
&TB(8)   SETC  'G'
&TB(9)   SETC  'H'
&TB(10)  SETC  'I'
&TB(11)  SETC  '¢'
&TB(12)  SETC  '.'
&TB(13)  SETC  '<'
&TB(14)  SETC  '('
&TB(15)  SETC  '+'
&TB(16)  SETC  '|'
&TB(17)  SETC  '&&'
&TB(18)  SETC  'J'
&TB(19)  SETC  'K'
&TB(20)  SETC  'L'
&TB(21)  SETC  'M'
&TB(22)  SETC  'N'
&TB(23)  SETC  'O'
&TB(24)  SETC  'P'
&TB(25)  SETC  'Q'
&TB(26)  SETC  'R'
&TB(27)  SETC  '!'
&TB(28)  SETC  '$'
&TB(29)  SETC  '*'
&TB(30)  SETC  ')'
&TB(31)  SETC  ';'
&TB(32)  SETC  '¬'
&TB(33)  SETC  '-'
&TB(34)  SETC  '/'
&TB(35)  SETC  'S'
&TB(36)  SETC  'T'
&TB(37)  SETC  'U'
&TB(38)  SETC  'V'
&TB(39)  SETC  'W'
&TB(40)  SETC  'X'
&TB(41)  SETC  'Y'
&TB(42)  SETC  'Z'
&TB(43)  SETC  '¦'
&TB(44)  SETC  ','
&TB(45)  SETC  '%'
&TB(46)  SETC  '_'
&TB(47)  SETC  '>'
&TB(48)  SETC  '?'
&TB(49)  SETC  '0'
&TB(50)  SETC  '1'
&TB(51)  SETC  '2'
&TB(52)  SETC  '3'
&TB(53)  SETC  '4'
&TB(54)  SETC  '5'
&TB(55)  SETC  '6'
&TB(56)  SETC  '7'
&TB(57)  SETC  '8'
&TB(58)  SETC  '9'
&TB(59)  SETC  ':'
&TB(60)  SETC  '#'
&TB(61)  SETC  '@'
&TB(62)  SETC  ''''
&TB(63)  SETC  '='
&TB(64)  SETC  '"'
         AIF   (N'&SYSLIST EQ 0).NOLIST
.NXTI    AIF   (&I EQ N'&SYSLIST).END
&I       SETA  &I+1
         AIF   ('&SYSLIST(&I)'(1,1) EQ '''').STRING
         AIF   ('&SYSLIST(&I)'(1,1) EQ '(').ADDR
         AIF   ('&SYSLIST(&I)' EQ 'SBA').SBA
         AIF   ('&SYSLIST(&I)' EQ 'SF').SF
         AIF   ('&SYSLIST(&I)' EQ 'IC').IC
         AIF   ('&SYSLIST(&I)' EQ 'PT').PT
         AIF   ('&SYSLIST(&I)' EQ 'RA').RA
         AIF   ('&SYSLIST(&I)' EQ 'EUA').EUA
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ ':').LABEL
         AIF   ('&SYSLIST(&I)'(K'&SYSLIST(&I),1) EQ '-').LABEL1
         AIF   ('&SYSLIST(&I)'(1,2) EQ 'CL').DSC
         AIF   ('&SYSLIST(&I)'(1,4) EQ 'AL2(').DSA
         MNOTE 12,'PARAMETER #&I INVALID - &SYSLIST(&I) NOT A VALID KEY*
               WORD'
         MEXIT
.*
.STRING  ANOP
&J       SETA  2
&K       SETA  0
.STRLOOP AIF   ('&SYSLIST(&I)'(&J,2) EQ '''''').STRDBL
         AIF   ('&SYSLIST(&I)'(&J,2) NE '&&&&').STRSNGL
.STRDBL  ANOP
&J       SETA  &J+1
.STRSNGL ANOP
&J       SETA  &J+1
&K       SETA  &K+1
         AIF   (&J LT K'&SYSLIST(&I)).STRLOOP
         AIF   (&COL+&K LE &LINESZE).STRFITS
&ROW     SETA  &ROW+1
&COL     SETA  1
.STRFITS ANOP
&LABEL   DC    C&SYSLIST(&I)
.SETL1   AIF   ('&LABEL1' EQ '').NOL1
&I2      SETA  (&ROW-1)*&LINESZE+&COL-1
&I1      SETA  &I2/64
&CH1     SETC  '&TB(&I1+1)'.'&TB(&I2-64*&I1+1)'
&LABEL1  EQU   C'&CH1'
&LABEL1  SETC  ''
.NOL1    ANOP
&LABEL   SETC  ''
&COL     SETA  &COL+&K
.SLDEC   AIF   (&COL LE &LINESZE).NXTI
&ROW     SETA  &ROW+1
&COL     SETA  &COL-&LINESZE
         AGO   .SLDEC
         AGO   .NXTI
.*
.ADDR    ANOP
         AIF   ('&SYSLIST(&I,1)' EQ '*').RSAME
         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '+').RINC
         AIF   ('&SYSLIST(&I,1)'(1,1) EQ '-').RDEC
         AIF   ('&SYSLIST(&I,1)'(1,1) LT '0').CONBYTE
&ROW     SETA  &SYSLIST(&I,1)
         AGO   .RSAME
.RINC    ANOP
&CH1     SETC  '&SYSLIST(&I,1)'(2,K'&SYSLIST(&I,1)-1)
&ROW     SETA  &ROW+&CH1
&COL     SETA  1
         AGO   .RSAME
.RDEC    ANOP
&CH1     SETC  '&SYSLIST(&I,1)'(2,K'&SYSLIST(&I,1)-1)
&ROW     SETA  &ROW-&CH1
&COL     SETA  1
.RSAME   AIF   ('&SYSLIST(&I,2)' EQ '*').CSAME
         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '+').CINC
         AIF   ('&SYSLIST(&I,2)'(1,1) EQ '-').CDEC
&COL     SETA  &SYSLIST(&I,2)
         AGO   .CSAME
.CINC    ANOP
&CH1     SETC  '&SYSLIST(&I,2)'(2,K'&SYSLIST(&I,2)-1)
&COL     SETA  &COL+&CH1
.TINC    AIF   (&COL LE &LINESZE).CSAME
&COL     SETA  &COL-&LINESZE
&ROW     SETA  &ROW+1
         AGO   .TINC
.CDEC    ANOP
&CH1     SETC  '&SYSLIST(&I,2)'(2,K'&SYSLIST(&I,2)-1)
&COL     SETA  &COL-&CH1
.TDEC    AIF   (&COL GE 0).CSAME
&COL     SETA  &COL+&LINESZE
&ROW     SETA  &ROW-1
         AGO   .TDEC
.CSAME   ANOP
&I2      SETA  (&ROW-1)*&LINESZE+&COL-1
&I1      SETA  &I2/64
&CH1     SETC  '&TB(&I1+1)'.'&TB(&I2-64*&I1+1)'
&LABEL   DC    C'&CH1'
&LABEL   SETC  ''
         AGO   .NXTI
.*
.CONBYTE ANOP
&K       SETA  0
&J       SETA  1
.CBLOOP  AIF   (&J GT N'&SYSLIST(&I)).CBEND
&LN40    SETB  ('&SYSLIST(&I,&J)' EQ '40CHAR')
&LN64    SETB  ('&SYSLIST(&I,&J)' EQ '64CHAR')
&LN80    SETB  ('&SYSLIST(&I,&J)' EQ '80CHAR')
&STARTPR SETB  ('&SYSLIST(&I,&J)' EQ 'STARTPR')
&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'RING')
&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'ALARM' OR &SAL)
&SAL     SETB  ('&SYSLIST(&I,&J)' EQ 'SAL'   OR &SAL)
&RSTKBY  SETB  ('&SYSLIST(&I,&J)' EQ 'RESTKBY')
&RSTKBY  SETB  ('&SYSLIST(&I,&J)' EQ 'KBYRSTOR' OR &RSTKBY)
&RSTMDT  SETB  ('&SYSLIST(&I,&J)' EQ 'RESTMDT')
&RSTMDT  SETB  ('&SYSLIST(&I,&J)' EQ 'RESETMDT' OR &RSTMDT)
&K       SETA  &K+&LN40*16+&LN64*32+&LN80*48+&STARTPR*8
&K       SETA  &K+&SAL*4+&RSTKBY*2+&RSTMDT
.*
&PROT    SETB  ('&SYSLIST(&I,&J)' EQ 'PROT')
&NUMERIC SETB  ('&SYSLIST(&I,&J)' EQ 'NUM')
&DECT    SETB  ('&SYSLIST(&I,&J)' EQ 'DECTABLE')
&INT     SETB  ('&SYSLIST(&I,&J)' EQ 'INTENSE')
&INT     SETB  ('&SYSLIST(&I,&J)' EQ 'INT' OR &INT)
&NONDISP SETB  ('&SYSLIST(&I,&J)' EQ 'NONDISP')
&MDT     SETB  ('&SYSLIST(&I,&J)' EQ 'MDT')
&K       SETA  &K+&PROT*32+&NUMERIC*16+&DECT*4+&INT*8+&NONDISP*2+&MDT
&OK      SETB  ('&SYSLIST(&I,&J)' EQ 'NONE' OR &LN40 OR &LN64 OR &LN80)
&OK      SETB  (&OK OR &STARTPR OR &SAL OR &RSTKBY OR &RSTMDT)
&OK      SETB  (&OK OR &PROT OR &NUMERIC OR &DECT OR &INT OR &NONDISP)
&OK      SETB  (&OK OR &MDT)
         AIF   (&OK).CBBUMP
         MNOTE 12,'SUBPARAMETER #&J OF PARAMETER #&I INVALID - ''&SYSLI*
               ST(&I,&J)'' NOT RECOGNIZED'
.CBBUMP  ANOP
&J       SETA  &J+1
         AGO   .CBLOOP
.CBEND   ANOP
&CH1     SETC  '&TB(&K+1)'
&LABEL   DC    C'&CH1'
&LABEL   SETC  ''
         AGO   .NXTI
.*
.SBA     ANOP
&LABEL   DC    X'11'                    SET BUFFER ADDRESS
&K       SETA  0
         AGO   .SETL1
.*
.SF      ANOP
&LABEL   DC    X'1D'                    START FIELD
&K       SETA  1
         AGO   .SETL1
.*
.IC      ANOP
&LABEL   DC    X'13'                    INSERT CURSOR
&K       SETA  0
         AGO   .SETL1
.*
.PT      ANOP
&LABEL   DC    X'05'                    PROGRAM TAB
&K       SETA  0
         AGO   .NOL1
.*
.RA      ANOP
&LABEL   DC    X'3C'                    REPEAT TO ADDRESS
&K       SETA  0
         AGO   .NOL1
.*
.EUA     ANOP
&LABEL   DC    X'12'                    ERASE UNPROTECTED TO ADDRESS
&K       SETA  0
         AGO   .NOL1
.*
.LABEL   ANOP
&LABEL   SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1)
         AGO   .NXTI
.*
.LABEL1  ANOP
&LABEL1  SETC  '&SYSLIST(&I)'(1,K'&SYSLIST(&I)-1)
         AGO   .NXTI
.*
.DSC     ANOP
&J       SETA  3
.DSLOOP  AIF   (&J GT K'&SYSLIST(&I)).DSEND
         AIF   ('&SYSLIST(&I)'(&J,1) EQ '''').DSQ
         AIF   ('&SYSLIST(&I)'(&J,1) LT '0').DSL
&J       SETA  &J+1
         AGO   .DSLOOP
.DSL     MNOTE 12,'PARAMETER #&I INVALID - &SYSLIST(&I) NOT DS OPERAND'
         MEXIT
.DSQ     ANOP
&CH1     SETC  '&SYSLIST(&I)'(3,&J-3)
&K       SETA  &CH1
&LABEL   DC    &SYSLIST(&I)
         AGO   .SETL1
.DSEND   ANOP
&CH1     SETC  '&SYSLIST(&I)'(3,&J-3)
&K       SETA  &CH1
&LABEL   DS    &SYSLIST(&I)
         AGO   .SETL1
.DSA     ANOP
&LABEL   DC    &SYSLIST(&I)
&LABEL   SETC  ''
         AGO   .NXTI
.*
.*
.NOLIST  MNOTE 12,'BUFFER LIST OMITTED'
.END     MEND
./ ADD NAME=MZSET    0100-19106-19106-1238-00119-00119-00000-MZAP78  18
         MACRO
         MZSET &DUMMY
         COPY  MZGBL
         LCLA  &I,&J
         LCLC  &C
         AIF   (&MZ1ST).END
.**********************************************************************
.*             THE FOLLOWING SHOULD BE SET TO THE PROPER VALUES       *
.*                                                                    *
&MZUPC   SETB  1                        (MFT->VS1 AND MVT->SVS        *
.*                                       UPWARD COMPATABILITY)        *
.*                                                                    *
&HASPSVC SETA  247                      ONLY IF MODIFIED TO RETURN HCT*
.*                                                          IN R15    *
.*                                                                    *
&CPU     SETC  '370'                                                  *
&MDL     SETC  '0168'                                                 *
&CPUID   SETC  '071044'                                               *
&SYS     SETC  'OS/MVT'                                               *
&REL     SETC  '21.7'                                                 *
.*                                                                    *
&ASP     SETC  'NO'                                                   *
&ASPV    SETC  '3.1.3'                                                *
&MTSVC   SETA  246                                                    *
.*                                                                    *
&HASP    SETC  'II'                                                   *
&HASPV   SETC  '3.1'                                                  *
.*                                                                    *
.**********************************************************************
.*
.SETSYS  ANOP
&OSMFT   SETB  ('&SYS' EQ 'OS/MFT')
&OSMVT   SETB  ('&SYS' EQ 'OS/MVT')
&VS1     SETB  ('&SYS' EQ 'VS1')
&VS2     SETB  ('&SYS' EQ 'VS2')
&OS      SETB  (&OSMFT OR &OSMVT)
&VS      SETB  (&VS1 OR &VS2)
&MFT     SETB  (&OSMFT OR &VS1)
&MVT     SETB  (&OSMVT OR &VS2)
         AIF   (&OS OR &VS).SETREL
         MNOTE 12,'&&SYS=&SYS IS NOT OS/MFT, OS/MVT, VS1, OR VS2!'
         MNOTE 12,'&&SYS IS NOT OS/MFT, OS/MVT, VS1, OR VS2!'
         MNOTE 12,'&&SYS=OS/MVT ASSUMED'
&SYS     SETC  'OS/MVT'
         AGO   .SETSYS
.SETREL  AIF   ('&REL' EQ '').NOREL
.SETREL1 AIF   (&I EQ K'&REL).USEREL
&I       SETA  &I+1
         AIF   ('&REL'(&I,1) EQ '.').SETSUB
         AIF   ('&REL'(&I,1) LT '0' OR '&REL'(&I,1) GT '9').BUMREL
&C       SETC  '&C'.'&REL'(&I,1)
&MZPREL  SETA  &C
         AGO   .SETREL1
.SETSUB  ANOP
&C       SETC  ''
.SETSUB1 AIF   (&I EQ K'&REL).USEREL
&I       SETA  &I+1
         AIF   ('&REL'(&I,1) EQ '.').SUBSUB
         AIF   ('&REL'(&I,1) LT '0' OR '&REL'(&I,1) GT '9').BUMREL
&C       SETC  '&C'.'&REL'(&I,1)
&MZSREL  SETA  &C
         AGO   .SETSUB1
.SUBSUB  MNOTE 4,'&&REL=&REL HAS THREE LEVELS OF NUMBERS'
&C       SETC  '&REL(1,&I-1)'
         MNOTE 4,'&&REL=&C ASSUMED'
         AGO   .USEREL
.NOREL   MNOTE 12,'&&REL OMITTED'
         AGO   .DEFREL
.BUMREL  MNOTE 12,'&&REL=REL INVALID'
.DEFREL  AIF   (&VS1).DEFVS1
         AIF   (&VS2).DEFVS2
         MNOTE 12,'&&REL=21.8 ASSUMED'
&REL     SETC  '21.8'
&MZPREL  SETA  21
&MZSREL  SETA  8
         AGO   .USEREL
.DEFVS1  MNOTE 12,'&&REL=3.0 ASSUMED'
&REL     SETC  '3.0'
&MZPREL  SETA  3
&MZSREL  SETA  0
         AGO   .USEREL
.DEFVS2  MNOTE 12,'&&REL=1.7 ASSUMED'
&REL     SETC  '1.7'
&MZPREL  SETA  1
&MZSREL  SETA  7
         AGO   .USEREL
.*
.USEREL  AIF   (NOT &VS2).SETASP
&SVS     SETB  1
         AIF   (&MZPREL LT 2).SETASP
&SVS     SETB  0
&MVS     SETB  1
.*
.SETASP  AIF   ('&ASP' EQ 'NO').NOASP
         AIF   ('&ASP' EQ 'YES' OR '&ASP' EQ '3').ASPOK
         AIF   ('&ASP EQ 'JES' OR '&ASP' EQ 'JES3').JES3
         MNOTE 8,'&&ASP NOT YES, NO, OR JES3'
         MNOTE 8,'&&ASP=YES,&&MTSVC=246 ASSUMED'
&ASP     SETC  'YES'
&ASPV    SETC  '3.1.4'
&MTSVC   SETA  246
         AGO   .ASPOK
.JES3    ANOP
&MTSVC   SETA  0
.ASPOK   ANOP
.NOASP   ANOP
.*
         AIF   ('&HASP' EQ 'NO' OR '&HASP' EQ 'BEST').NOHASP
         AIF   ('&HASP' EQ 'YES' OR '&HASP' EQ 'II').HASP
         AIF   ('&HASP' EQ 'JES' OR '&HASP' EQ 'JES2').JES2
         MNOTE 8,'&&HASP IS NOT BEST, YES, II, OR JES2'
         MNOTE 8,'&&HASP=BEST (I.E. NONE) ASSUMED'
.NOHASP  ANOP
&HASP    SETC  'BEST'
         MEXIT
.JES2    ANOP
&HASPSVC SETA  0
.HASP    MEXIT
.END     MEND
./ ADD NAME=MZSHD    0100-19106-19106-1238-00029-00029-00000-MZAP78  18
         MACRO
&L       MZSHD &TIT
.*
.*             COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
.*
.*             THIS MACRO IS USED IN CONJUNCTION WITH MZHED TO
.*             SPECIFY THE SUB-TITLE FOR A TITLE CARD.
.*             THE MAIN PORTION OF THE TITLE IS SPECIFIED ONCE,
.*             VIA MZHED, WHILE EACH MZSHD SPECIFIES ITS OWN
.*             SUB-TITLE, WHICH IS PLACED ON THE RIGHT HAND SIDE.
.*             AN OPERAND OF OFF GENERATES A TITLE WITH NO SUB-TITLE.
         GBLC  &MTITLE
         LCLC  &STIT
         PUSH  PRINT
         AIF   (T'&TIT EQ 'O').OFF
         AIF   ('&TIT' EQ 'OFF').OFF
         AIF   ('&TIT'(1,1) EQ '''' AND '&TIT'(K'&TIT,1) EQ '''').OK
         MNOTE 4,'SUBTITLE NOT DELIMITED BY "''" - IGNORED'
&STIT    SETC  '*** INVALID SUBTITLE ***'
         AGO   .TIT
.OK      ANOP
&STIT    SETC  '&TIT'(2,K'&TIT-2)
.TIT     PRINT GEN
         TITLE '&MTITLE- COPYRIGHT 1975 S. METZ - &STIT'
         AGO   .POP
.OFF     PRINT GEN
         TITLE '&MTITLE'
.POP     POP   PRINT
         MEND
./ ADD NAME=MZSSM    0100-19106-19106-1238-00026-00026-00000-MZAP78  18
         MACRO
&L       MZSSM &TYPE
         COPY  MZGBL
         MZSET
         AIF   ('&TYPE' EQ 'DIS').DIS
         AIF   ('&TYPE' EQ 'ENB').ENB
         MNOTE 12,'&&TYPE=&TYPE IS INVALID'
         MEXIT
.*
.DIS     AIF   (&VS).VSDIS
&L       SSM   *+1
         MEXIT
.VSDIS   ANOP
&L     MODESET ENABLE=NO
         MEXIT
.*
.ENB     AIF   ('&SYS'(1,2) EQ 'VS').VSENB
&L       SSM   *+1
         ORG   *-3
         DC    X'FF'
         ORG   *+2
         MEXIT
.VSENB   ANOP
&L     MODESET  ENABLE=YES
         MEXIT
         MEND
./ ADD NAME=MZSTA    0100-19106-19106-1238-00011-00011-00000-MZAP78  18
         MACRO
&L       MZSTA &S,&D,&IC=(R0)
         GBLC  &CPU
         AIF   ('&CPU' EQ '370').STCM
&L       IC    &IC(1),&D
         ST    &S,&D
         STC   &IC(1),&D
         MEXIT
.STCM    ANOP
&L       STCM  &S,7,&D+1
         MEND
./ ADD NAME=MZTSO    0100-19106-19106-1238-00182-00182-00000-MZAP78  18
TSO      TITLE 'MOREZAP TSO NON-DISPLAY ACCESS METHOD - COPYRIGHT 1975 *
               SHMUEL METZ'
         MACRO
&L       ICMH  &REG,&OPT
         COPY  MZGBL
         AIF   ('&CPU' EQ '370').S370
&L       LA    R15,&OPT
         SLL   R15,24
         OR    &REG,R15
         MEXIT
.*
.S370    ANOP
&L       ICM   &REG,8,=AL1(&OPT)
         MEND
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP TSO NON-DISPLAY ACCESS METHOD',LEN=38
MZTSO    MZENT TYPE=IO,PUT=WRITE,ATTN=TESTATTN,GET=READ,INIT=ATJB,     *
               EJECT=COUNTLNS
WRITE    LA    R1,1
LINECNT  EQU   *-2,2,H
         BCT   R1,NOSKIP
PUTHED   TM    SW1,DMPSW
         BZ    SKIPIT
         LA    R1,HDATA
         TPUT  (1),80,EDIT
         B     *+4(R15)
         B     SKIPIT
         DC    2H'0'
         B     PUTHED
         DC    2H'0'
         DC    2H'0'
SKIPIT   LA    R1,55
NOSKIP   STH   R1,LINECNT
         SPACE 1
PUTIT    LA    R1,ODATA
         TPUT  (1),80,EDIT
         B     *+4(R15)
         B     TSTPRMPT                 TPUT OK
         DC    2H'0'                    NOWAIT & NO BUFFER AVAILABLE
         B     PUTIT                    ATTENTION - REISSUE
         DC    2H'0'                    TPUT WITH TJID
         DC    2H'0'                    INVALID PARAMETERS
         DC    2H'0'                    TERMINAL DISCONNECTED
         SPACE 2
COUNTLNS LH    R1,LINECNT
         S     R1,SAVEPUT
         BPR   R14
         MVI   LINECNT+1,1
         BR    R14
         MZSHD 'ATTENTION LOGIC'
ATJB     DS    A
ATSB     DS    A
AQCB     DS    A
         STAX  ATTNRTN,REPLACE=NO,MF=L
ATTNRTN  L     R1,8(,R1)
         OI    SW2-MZAPMAIN(R1),ATTNSW
         BR    R14
         SPACE 2
TSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?
         BO    GIVEHELP                  YES - GIVE HELP
*        B     TESTATTN
         SPACE 1
TESTATTN TM    SW2,ATTNSW
         BZ    ENDPUT
         TPUT  EH,5,ASIS
*        TGET  ODATA,80
         LA    R0,80
         LA    R1,ODATA
         ICMH  R1,128
         TGET  (1),(0),R
         B     *+4(R15)
         B     TESTNULL                 OK
         DC    2H'0'                    NOWAIT
         B     TESTATTN                 ATTENTION
         B     INVATN                   TOO BIG
         DC    2H'0'                    INVALID PARAMETERS
         DC    2H'0'                    DISCONNECT
         SPACE 1
TESTNULL LTR   R1,R1
         BZ    ENDPUT
INT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE
         CLC   =C'$ABEND',ODATA
         BE    ABDUMP
         CLC   $FLUSH,ODATA
         BE    FLUSH
         CLC   $HELP,ODATA
         BE    GIVEHELP
         SR    R1,R1                    12 WRITES/SCREEN?
         CLC   $SLOW,ODATA
         BE    SETSPEED                  YES
         LA    R1,1                     6 WRITES/SCREEN?
         CLC   $HALFAST,ODATA
         BE    SETSPEED
         LA    R1,3                     3 WRITES/SCREEN?
         CLC   $FAST,ODATA
         BE    SETSPEED                  YES
         LA    R1,X'FF'                 1 WRITE/SCREEN?
         CLC   $PAGE,ODATA
         BE    SETSPEED                  YES
         CLC   $HOLD,ODATA              PAGE LOCK MODE?
         BE    SETHOLD                   YES
         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?
         BE    OFFHOLD
         CLC   $MON,ODATA               DUMP MONITORING?
         BE    SETMON                    YES
         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?
         BE    OFFMON                    YES
         CLC   STOP,ODATA               DISCONTINUE DUMP?
         BE    OFFDUMP                   YES
         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?
         BE    ONCON
INVATN TCLEARQ INPUT
         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'
         OI    SW2,PROMPTSW             FORCE HELP MESSAGE
         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG
         SPACE 1
FLUSH  TCLEARQ OUTPUT
         B     PUTENTRY
         SPACE 1
         SPACE 2
SETSPEED TPUT  DEFERRED,L'DEFERRED
         B     TESTATTN
         SPACE 1
GIVEHELP EX    0,BLNKODTA
         MVC   ODATA(PROMPTLN),ATTPRMPT
         NI    SW2,255-PROMPTSW
         B     PUTENTRY
         SPACE 1
ATTPRMPT DC    C'MZP002I '
$HELP    DC    C'$HELP',C': '
$HOLD    DC    C'$HOLD',C'|'
$AUTO    DC    C'$AUTO',C' '
CON      DC    C'CON',C' '
STOP     DC    C'STOP',C' '
$PAGE    DC    C'$PAGE',C'|'
$FAST    DC    C'$FAST',C'|'
$HALFAST DC    C'$HALFAST',C'|'
$SLOW    DC    C'$SLOW',C' '
$MON     DC    C'$MON',C'|'
$NOMON   DC    C'$NOMON',C' '
PROMPTLN EQU   *-ATTPRMPT
         SPACE 1
$FLUSH   DC    C'$FLUSH'
         SPACE 1
DEFERRED DC    C'MZPT001I DEFERRED FEATURE'
         SPACE 1
         MZSHD 'READ'
READ     LA    R1,IBUF
         TPUT  (1),5,ASIS
         B     *+4(R15)
         B     READIT                   OK
         DC    2H'0'                    NOWAIT
         B     READ                     ATTENTION
         DC    2H'0'                    TPUT WITH TJID
         DC    2H'0'                    INVALID PARAMETERS
         DC    2H'0'                    TERMINAL DISCONNECTED
READIT   LA    R0,72
         LA    R1,IBUF+6
         ICMH  R1,128
         TGET  (1),(0),R
         B     *+4(R15)
         B     GETUC
         DC    2H'0'
         B     READ
         B     TOOBIG
         DC    2H'0'
         DC    2H'0'
TOOBIG TCLEARQ INPUT
         TPUT  TBMSG,L'TBMSG
         B     READ
         SPACE 2
         MZSHD 'LITERALS && CONSTANTS'
TBMSG    DC    C'MZPT01I TOO BIG - IGNORED'
EH       DC    CL5'EH ?'
         LTORG
         PRINT NOGEN
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
CVT      DSECT
         CVT
MZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN
         END
./ ADD NAME=MZTST    0100-19106-19106-1238-00070-00070-00000-MZAP78  18
         MACRO
         MZTST &DUM
         COPY  MZGBL
         LCLA  &I,&J
         LCLB  &OKMFT,&OKMVT,&OKVS1,&OKSVS,&OKMVS
         AIF   (N'&SYSLIST NE 0).ISLIST
         MNOTE 16,'MZTST INVOKED WITH EMPTY ARGUEMENT'
         MEXIT
.ISLIST  ANOP
&MZMATCH SETB  0
.LOOP    AIF   (&I EQ N'&SYSLIST).END1
&I       SETA  &I+1
         AIF   ('&SYSLIST(&I)' EQ 'OS').OS
         AIF   ('&SYSLIST(&I)' EQ 'OSMFT').OSMFT
         AIF   ('&SYSLIST(&I)' EQ 'OSMVT').OSMVT
         AIF   ('&SYSLIST(&I)' EQ 'VS').VS
         AIF   ('&SYSLIST(&I)' EQ 'VS1').VS1
         AIF   ('&SYSLIST(&I)' EQ 'VS2').VS2
         AIF   ('&SYSLIST(&I)' EQ 'SVS').SVS
         AIF   ('&SYSLIST(&I)' EQ 'MVS').MVS
         AIF   ('&SYSLIST(&I)' EQ 'MFT').MFT
         AIF   ('&SYSLIST(&I)' EQ 'MVT').MVT
         AIF   ('&SYSLIST(&I)' EQ 'ANY').ANY
         MNOTE 16,'MZTST - &SYSLIST(&I) INVALID SYSTEM TYPE'
         MEXIT
.*
.OS      ANOP
&OKMFT   SETB  1
.OSMVT   ANOP
&OKMVT   SETB  1
         AGO   .LOOP
.*
.OSMFT   ANOP
&OKMFT   SETB  1
         AGO   .LOOP
.*
.VS      ANOP
&OKVS1   SETB  1
.VS2     ANOP
&OKSVS   SETB  1
.MVS     ANOP
&OKMVS   SETB  1
         AGO   .LOOP
.*
.MFT     ANOP
&OKMFT   SETB  1
.VS1     ANOP
&OKVS1   SETB  1
         AGO   .LOOP
.*
.MVT     ANOP
&OKMVT   SETB  1
.SVS     ANOP
&OKSVS   SETB  1
         AGO   .LOOP
.*
.END1    ANOP
&OKVS1   SETB  (&OKVS1 OR &OKMFT AND &MZUPC)
&OKSVS   SETB  (&OKSVS OR &OKMVT AND &MZUPC)
&OKMFT   SETB  (&OKMFT OR &OKVS1 AND &MZUPC)
&OKMVT   SETB  (&OKMVT OR &OKSVS AND &MZUPC)
         AIF   (&OKVS1 AND &VS1).ANY
         AIF   (&OKSVS AND &SVS).ANY
         AIF   (&OKMVS AND &MVS).ANY
         AIF   (&OKMFT AND &OSMFT).ANY
         AIF   (&OKMVT AND &OSMVT).ANY
         MEXIT
.ANY     ANOP
&MZMATCH SETB  1
         MEND
./ ADD NAME=MZTS2260 0100-19106-19106-1238-00209-00209-00000-MZAP78  18
226T     TITLE 'MOREZAP TSO 2260 DISPLAY ACCESS METHOD - COPYRIGHT 1975*
               SHMUEL METZ'
         MACRO
&L       ICMH  &REG,&OPT
         COPY  MZGBL
         AIF   ('&CPU' EQ '370').S370
&L       LA    R15,&OPT
         SLL   R15,24
         OR    &REG,R15
         MEXIT
.*
.S370    ANOP
&L       ICM   &REG,8,=AL1(&OPT)
         MEND
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP TSO 2260 DISPLAY ACCESS METHOD',LEN=39
MZTS2260 MZENT TYPE=IO,PUT=WRITE,ATTN=TESTATTN,GET=READ,INIT=ATJB,     *
               EJECT=COUNTLNS
WRITE    LA    R1,1
LINECNT  EQU   *-2,2,H
         BCT   R1,NOSKIP
PUTHED   TM    SW1,DMPSW
         BZ    SKIPIT
         LA    R1,HDATA
         LA    R0,80
         BAL   R14,TPUTH
         B     PUTHED
SKIPIT   MZKEY 0
         SR    R0,R0
         L     R1,AQCB
         USING IEDQQCB,R1
         IC    R0,QCBSATCT
         CLI   QCBSATCT,255
         BE    ENDPAGE
         LA    R1,11
         SR    R1,R0
         BP    SKIPBACK
ENDPAGE  LA    R1,1
         DROP  R1
SKIPBACK MZKEY KLUB
NOSKIP   STH   R1,LINECNT
         SPACE 1
PUTIT    LA    R1,ODATA
         LA    R0,80
         BAL   R14,TPUTNH
         B     PUTIT                    ATTENTION - REISSUE
         B     TSTPRMPT
         SPACE 2
COUNTLNS LH    R2,LINECNT
         BCT   R2,*+6
         BR    R14
         C     R2,SAVEPUT
         BHR   R14
SKIP1    LA    R1,BLANKARD
         LA    R0,1
         BAL   R14,TPUTNH
         NOP   R0
         BCT   R2,SKIP1
         MVI   LINECNT+1,1
         B     ENDPUT
         MZSHD 'ATTENTION LOGIC'
ATJB     DS    A
ATSB     DS    A
AQCB     DS    A
         STAX  ATTNRTN,REPLACE=NO,MF=L
ATTNRTN  L     R1,8(,R1)
         OI    SW2-MZAPMAIN(R1),ATTNSW
         BR    R14
         SPACE 2
TSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?
         BO    GIVEHELP                  YES - GIVE HELP
*        B     TESTATTN
         SPACE 1
TESTATTN TM    SW2,ATTNSW
         BZ    ENDPUT
         LA    R1,EH
         LA    R0,5
         BAL   R14,TPUTASIS
         B     *-4                      ATTENTION
         LA    R1,ODATA
         BAL   R14,TGET
         B     TESTATTN                 ATTENTION
         B     INVATN                   TOO BIG
         SPACE 1
TESTNULL LTR   R1,R1
         BZ    ENDPUT
INT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE
         CLC   =C'$ABEND',ODATA
         BE    ABDUMP
         CLC   $FLUSH,ODATA
         BE    FLUSH
         CLC   $HELP,ODATA
         BE    GIVEHELP
         SR    R1,R1                    12 WRITES/SCREEN?
         CLC   $SLOW,ODATA
         BE    SETSPEED                  YES
         LA    R1,1                     6 WRITES/SCREEN?
         CLC   $HALFAST,ODATA
         BE    SETSPEED
         LA    R1,3                     3 WRITES/SCREEN?
         CLC   $FAST,ODATA
         BE    SETSPEED                  YES
         LA    R1,X'FF'                 1 WRITE/SCREEN?
         CLC   $PAGE,ODATA
         BE    SETSPEED                  YES
         CLC   $HOLD,ODATA              PAGE LOCK MODE?
         BE    SETHOLD                   YES
         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?
         BE    OFFHOLD                   YES
         CLC   $MON,ODATA               DUMP MONITORING?
         BE    SETMON                    YES
         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?
         BE    OFFMON                    YES
         CLC   STOP,ODATA               DISCONTINUE DUMP?
         BE    OFFDUMP                   YES
         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?
         BE    ONCON                     YES
INVATN TCLEARQ INPUT
         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'
         OI    SW2,PROMPTSW             FORCE HELP MESSAGE
         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG
         SPACE 1
FLUSH  TCLEARQ OUTPUT
         B     PUTENTRY
         SPACE 1
         SPACE 2
SETSPEED TPUT  DEFERRED,L'DEFERRED
         B     TESTATTN
         SPACE 1
GIVEHELP EX    0,BLNKODTA
         MVC   ODATA(PROMPTLN),ATTPRMPT
         NI    SW2,255-PROMPTSW
         B     PUTENTRY
         SPACE 1
ATTPRMPT DC    C'MZP002I '
$HELP    DC    C'$HELP',C': '
$HOLD    DC    C'$HOLD',C'|'
$AUTO    DC    C'$AUTO',C' '
CON      DC    C'CON',C' '
STOP     DC    C'STOP',C' '
$PAGE    DC    C'$PAGE',C'|'
$FAST    DC    C'$FAST',C'|'
$HALFAST DC    C'$HALFAST',C'|'
$SLOW    DC    C'$SLOW',C' '
$MON     DC    C'$MON',C'|'
$NOMON   DC    C'$NOMON',C' '
PROMPTLN EQU   *-ATTPRMPT
         SPACE 1
$FLUSH   DC    C'$FLUSH'
         SPACE 1
DEFERRED DC    C'MZPT001I DEFERRED FEATURE'
         SPACE 1
*        TPUT  IBUF,5,ASIS
         MZSHD 'READ'
READ     LA    R1,IBUF
         LA    R0,5
         BAL   R14,TPUTASIS
         B     READ                     ATTENTION
READIT   LA    R1,IBUF+6
         BAL   R14,TGET
         B     GETUC                    ATTENTION
         B     TOOBIG
         B     GETUC
TOOBIG TCLEARQ INPUT
         TPUT  TBMSG,L'TBMSG
         B     READ
         SPACE 2
         MZSHD 'SUBROUTINES, LITERALS && CONSTANTS'
TPUTH    TPUT  (1),(0),,HOLD
         B     TPUTV(R15)
         SPACE 1
TPUTASIS ICMH  R1,1
*        B     TPUTNH                   ASIS
         SPACE 1
TPUTNH   CLI   LINECNT+1,1
         BE    TPUTH
         TPUT  (1),(0),R
         B     TPUTV(R15)
TPUTV    B     4(,R14)                   0  OK
         DC    2H'0'                     4  NOWAIT
         BR    R14                       8  ATTENTION
         DS    H
         DC    2H'0'                     C  TJID
         DC    2H'0'                    10  INVALID PARAMETERS
         DC    2H'0'                    14  TERMINAL DISCONNECTED
         SPACE 1
TGET     TGET  (1),72,EDIT
         B     *+4(R15)
         B     8(,R14)                   0  OK
         DC    2H'0'                     4  NOWAIT
         BR    R14                       8  ATTENTION
         DS    H
         B     4(,R14)                   C  TOO BIG
         DC    2H'0'                    10  INVALID PARAMETERS
         DC    2H'0'                    14 DISCONNECT
         SPACE 2
TBMSG    DC    C'MZPT01I TOO BIG - IGNORED'
EH       DC    CL5'EH ?'
         LTORG
         PRINT NOGEN
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
CVT      DSECT
         CVT
MZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN
        IKJTJB
        IKJTSB
         TQCBD
         END
./ ADD NAME=MZTS3270 0100-19106-19106-1238-00209-00209-00000-MZAP78  18
327T     TITLE 'MOREZAP TSO 3270 DISPLAY ACCESS METHOD - COPYRIGHT 1975*
                SHMUEL METZ'
         MACRO
&L       ICMH  &REG,&OPT
         COPY  MZGBL
         AIF   ('&CPU' EQ '370').S370
&L       LA    R15,&OPT
         SLL   R15,24
         OR    &REG,R15
         MEXIT
.*
.S370    ANOP
&L       ICM   &REG,8,=AL1(&OPT)
         MEND
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP TSO 3270 DISPLAY ACCESS METHOD',LEN=39
MZTS3270 MZENT TYPE=IO,PUT=WRITE,ATTN=TESTATTN,GET=READ,INIT=ATJB,     *
               EJECT=COUNTLNS
WRITE    LA    R1,1
LINECNT  EQU   *-2,2,H
         BCT   R1,NOSKIP
PUTHED   TM    SW1,DMPSW                IS TITLE LINE REQUIRED?
         BZ    SKIPIT                    NO - ADVANCE LINE COUNT
         LA    R1,HDATA                 TPUT HEAD WITH HOLD
         LA    R0,80
         BAL   R14,TPUTH
         B     PUTHED                    IF ATTN, RETRY
SKIPIT   MZKEY 0                        PREVENT 0C4 IN VS
         SR    R0,R0
         L     R1,AQCB
         USING IEDQQCB,R1
         IC    R0,QCBSATCT
         CLI   QCBSATCT,255
         BE    ENDPAGE
         LA    R1,23
         SR    R1,R0
         BP    SKIPBACK
ENDPAGE  LA    R1,1
         DROP  R1
SKIPBACK MZKEY KLUB                     GO TO NORMAL KEY WITH LINE #
NOSKIP   STH   R1,LINECNT
         SPACE 1
PUTIT    LA    R1,ODATA
         LA    R0,80
         BAL   R14,TPUTNH
         B     PUTIT                    ATTENTION - REISSUE
         B     TSTPRMPT
         SPACE 2
COUNTLNS LH    R2,LINECNT
         BCT   R2,*+6
         BR    R14
         C     R2,SAVEPUT
         BHR   R14
SKIP1    LA    R1,BLANKARD
         LA    R0,1
         BAL   R14,TPUTNH
         NOP   R0
         BCT   R2,SKIP1
         MVI   LINECNT+1,1
         B     ENDPUT
         MZSHD 'ATTENTION LOGIC'
ATJB     DS    A
ATSB     DS    A
AQCB     DS    A
         STAX  ATTNRTN,REPLACE=NO,MF=L
ATTNRTN  L     R1,8(,R1)
         OI    SW2-MZAPMAIN(R1),ATTNSW
         BR    R14
         SPACE 2
TSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?
         BO    GIVEHELP                  YES - GIVE HELP
*        B     TESTATTN
         SPACE 1
TESTATTN TM    SW2,ATTNSW
         BZ    ENDPUT
         LA    R1,EH
         LA    R0,5
         BAL   R14,TPUTASIS
         B     *-4                      ATTENTION
         LA    R1,ODATA
         BAL   R14,TGET
         B     TESTATTN                 ATTENTION
         B     INVATN                   TOO BIG
         SPACE 1
TESTNULL LTR   R1,R1
         BZ    ENDPUT
INT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE
         CLC   =C'$ABEND',ODATA
         BE    ABDUMP
         CLC   $FLUSH,ODATA
         BE    FLUSH
         CLC   $HELP,ODATA
         BE    GIVEHELP
         SR    R1,R1                    12 WRITES/SCREEN?
         CLC   $SLOW,ODATA
         BE    SETSPEED                  YES
         LA    R1,1                     6 WRITES/SCREEN?
         CLC   $HALFAST,ODATA
         BE    SETSPEED
         LA    R1,3                     3 WRITES/SCREEN?
         CLC   $FAST,ODATA
         BE    SETSPEED                  YES
         LA    R1,X'FF'                 1 WRITE/SCREEN?
         CLC   $PAGE,ODATA
         BE    SETSPEED                  YES
         CLC   $HOLD,ODATA              PAGE LOCK MODE?
         BE    SETHOLD                   YES
         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?
         BE    OFFHOLD                   YES
         CLC   $MON,ODATA               DUMP MONITORING?
         BE    SETMON                    YES
         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?
         BE    OFFMON                    YES
         CLC   STOP,ODATA               DISCONTINUE DUMP?
         BE    OFFDUMP
         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?
         BE    ONCON
INVATN TCLEARQ INPUT
         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'
         OI    SW2,PROMPTSW             FORCE HELP MESSAGE
         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG
         SPACE 1
FLUSH  TCLEARQ OUTPUT
         B     PUTENTRY
         SPACE 1
         SPACE 2
SETSPEED TPUT  DEFERRED,L'DEFERRED
         B     TESTATTN
         SPACE 1
GIVEHELP EX    0,BLNKODTA
         MVC   ODATA(PROMPTLN),ATTPRMPT
         NI    SW2,255-PROMPTSW
         B     PUTENTRY
         SPACE 1
ATTPRMPT DC    C'MZP002I '
$HELP    DC    C'$HELP',C': '
$HOLD    DC    C'$HOLD',C'|'
$AUTO    DC    C'$AUTO',C' '
CON      DC    C'CON',C' '
STOP     DC    C'STOP',C' '
$PAGE    DC    C'$PAGE',C'|'
$FAST    DC    C'$FAST',C'|'
$HALFAST DC    C'$HALFAST',C'|'
$SLOW    DC    C'$SLOW',C' '
$MON     DC    C'$MON',C'|'
$NOMON   DC    C'$NOMON',C' '
PROMPTLN EQU   *-ATTPRMPT
         SPACE 1
$FLUSH   DC    C'$FLUSH'
         SPACE 1
DEFERRED DC    C'MZPT001I DEFERRED FEATURE'
         SPACE 1
*        TPUT  IBUF,5,ASIS
         MZSHD 'READ'
READ     LA    R1,IBUF
         LA    R0,5
         BAL   R14,TPUTASIS
         B     READ                     ATTENTION
READIT   LA    R1,IBUF+6
         BAL   R14,TGET
         B     GETUC                    ATTENTION
         B     TOOBIG
         B     GETUC
TOOBIG TCLEARQ INPUT
         TPUT  TBMSG,L'TBMSG
         B     READ
         SPACE 2
         MZSHD 'SUBROUTINES, LITERALS && CONSTANTS'
TPUTH    TPUT  (1),(0),,HOLD
         B     TPUTV(R15)
         SPACE 1
TPUTASIS ICMH  R1,1
*        B     TPUTNH
         SPACE 1
TPUTNH   CLI   LINECNT+1,1
         BE    TPUTH
         TPUT  (1),(0),R
         B     TPUTV(R15)
TPUTV    B     4(,R14)                   0  OK
         DC    2H'0'                     4  NOWAIT
         BR    R14                       8  ATTENTION
         DS    H
         DC    2H'0'                     C  TJID
         DC    2H'0'                    10  INVALID PARAMETERS
         DC    2H'0'                    14  TERMINAL DISCONNECTED
         SPACE 1
TGET     TGET  (1),72,EDIT
         B     *+4(R15)
         B     8(,R14)                   0  OK
         DC    2H'0'                     4  NOWAIT
         BR    R14                       8  ATTENTION
         DS    H
         B     4(,R14)                   C  TOO BIG
         DC    2H'0'                    10  INVALID PARAMETERS
         DC    2H'0'                    14 DISCONNECT
         SPACE 2
TBMSG    DC    C'MZPT01I TOO BIG - IGNORED'
EH       DC    CL5'EH ?'
         LTORG
         PRINT NOGEN
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
CVT      DSECT
         CVT
MZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN
        IKJTJB
        IKJTSB
         TQCBD
         END
./ ADD NAME=MZWORK   0100-19106-19106-1238-00227-00227-00000-MZAP78  18
         MACRO
        MZWORK &UCB=NO,&TCB=NO,&CD=NO,&JSCB=NO,&TIOT=NO,&IOB=NO,       *
               &ALL=NO,&MAIN=NO,                                       *
               &OPWORK=NO,&GEN=NOGEN
         COPY  MZGBL
         GBLC  &LIST
&LIST    SETC  'NO'
         AIF   ('&GEN' EQ 'NOGEN').NOGEN
&LIST    SETC  'YES'
.NOGEN   PUSH  PRINT
         PRINT &GEN
         AIF   ('&MAIN' EQ 'NO').NOMAIN
MZAPMAIN MZAPMAIN TYPE=D,GEN=&GEN
.NOMAIN  AIF   ('&GEN' EQ 'NOGEN').NOHED0
         MZSHD 'VERIFY/REP TABLE'
.NOHED0  ANOP
VRSECT   DSECT
*              ENTIRE CHAIN IS IN ONE SUBPOOL - ONE FREEMAIN GETS ALL
VRNEXT   DS    0A
VRTYPE   DS    X
VRVER    EQU   0
VRREP    EQU   1
VRBASE   EQU   2
VRINDEX  EQU   3
VRHINDEX EQU   4
VRNAME   EQU   5
VRDUMP   EQU   6
VRDUMPA  EQU   7
VRDUMPT  EQU   8
VRHDUMP  EQU   9
VRHDUMPA EQU   10
VRHDUMPT EQU   11
VRLIB    EQU   12
VRSAVE   EQU   13 .                     SETPTR REFDIGIT *
VRMVC    EQU   14 .                     INTERNAL USE ONLY
VRREFER  EQU   15 .                     SETPTR
VRPOINT  EQU   16 .                     POINT VIA PTR
VRUNSAVE EQU   17 .                     POINT REF REFDIGIT
         SPACE 1
VRNXT    DS    AL3
         SPACE 1
VRLINE   DS    H .                      SEQUENTIAL INPUT STATEMENT NO.
         SPACE 1
VRLOC    DS    0A
VRFLG    DS    X
VRFND    EQU   X'80'                    CSECT FOUND IN ESD
VRFAIL   EQU   X'40'                    VERIFY FAILED
VRXLE    EQU   X'20'                    CDE HAS XL
VR1XL    EQU   X'10'                    XL HAS JUST ONE RELOC FACTOR
VRNAMFND EQU   X'08'                    PROCESSED BY GETESD
VRBOUNDS EQU   X'08'                    VER/REP OUTSIDE CSECT
VRNOTNUC EQU   X'04'                    NUC DD BAD
VRLC     DS    AL3
         SPACE 2
*              FIELDS FOR VER, REP, AND HEX DUMPS
VRABS    DS    0A .
VRVRFLG  DC    AL1(VRBOUNDS+VRFND) .    SAME BITS AS VRFLG
VRAB     DS    AL3 .                    ABSOLUTE VIRTUAL ADDRESS
VRHDPLEN EQU   *-VRSECT                 ENTRY LENGTH FOR HDUMP
         SPACE 1
*              FIELDS FOR VER AND REP
VRDATLN  DS    X                        LENGTH-1 FOR EXECUTE
VRDAT    DS    0X
         SPACE 2
*              FIELDS FOR INDEX
         ORG   VRLOC+4
VRIXNAME DS    CL8
VRIXLEN  EQU   *-VRSECT
         SPACE 2
*              FIELDS FOR NAME, DUMP, DUMP, DUMPT (EXCEPT HEX FORMS)
         ORG   VRLOC
VRBEGIN  DS    A
VRDMPTYP DS    X                        OPTIONS FOR DUMP
*              SAME FIELD AS VRCBTYPE
VRDUMPTP EQU   X'80'
VRAFTER  EQU   X'02'
VRBEFORE EQU   X'01'
VRSIZE   DS    FL3
VRCDEPTR DS    A
VRISLPDE EQU   X'80'                    MODULE IN PLPA, NOT IN MLPA
VRDCBPT  DS    A                        DCB POINTER
VRSSI    DS    XL4
VRNAM    DS    CL8
VRCSECT  DS    CL8
VRNAMLEN EQU   *-VRSECT
         SPACE 2
*              FIELDS FOR LIB
         ORG   VRLOC
VRDCB    DS    A                        LIB DCB
         SPACE 2
*              FIELDS FOR BASE AND INDEX(HEX)
         ORG   VRLOC
VRLOCN   DS    A
         SPACE 2
*              FIELDS FOR HEX DUMP AND FORMAT
         ORG   VRDATLN
VRCBTYPE DS    0XL1                     SAME FIELD AS VRDMPTYP
VRNOTFMT EQU   X'80'                    OPCODE WAS DUMP. SAME AS VRDMPT
VRAVT    EQU   1
VRBLDL   EQU   2
VRCDE    EQU   3
VRCVT    EQU   4
VRHCT    EQU   5
VRMSER   EQU   6
VRQMRES  EQU   7
VRSCVT   EQU   8
VRSMCA   EQU   9
VRTACT   EQU   10
VRTSCVT  EQU   11
VRUCB    EQU   12
VRUCM    EQU   13                       UNIT CONTROL MODULE ENTRY
VRUCMB   EQU   14                       UCM BASE
VRUCMM   EQU   15                       UCM MCS PREFIX
VRLEN    DS    A
         SPACE 2
*              FIELDS FOR MVC, POINT, SAVE
         ORG   VRDATLN
VRPTRLEN DS    0X
VRPTR32 EQU    0                        A
VRPTR24 EQU    1                        AL3
VRPTR16 EQU    2                        AL2
VRPTR15 EQU    3                        Y CON
VRPTR    DS    A
VRMVCLEN EQU   *-VRSECT
         SPACE 2
*              FIELDS FOR POINT, SAVE
VRLENB   DS    H
VRIXB    DS    H
VRSAVLEN EQU   *-VRSECT
         AIF   ('&GEN' EQ 'NOGEN').NOHED1
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
.NOHED1  ANOP
         CVT   PREFIX=YES,DSECT=YES,SYS=AOS2,LIST=&LIST
CVT      EQU   CVTMAP
         AIF   ('&GEN' EQ 'NOGEN').NOHED2
         MZSHD 'COMMAND SCHEDULING CONTROL BLOCK DSECT'
.NOHED2  ANOP
IEECSCB  DSECT
       IEECHAIN
         AIF   ('&GEN' EQ 'NOGEN').NOHED3
         MZSHD 'COMMAND INPUT BUFFER'
.NOHED3  ANOP
CIB      DSECT
        IEZCIB
         AIF   ('&UCB' EQ 'NO' AND '&ALL' EQ 'NO').NOUCB
         AIF   ('&GEN' EQ 'NOGEN').NOHED4
         MZSHD 'UNIT CONTROL BLOCK'
.NOHED4  ANOP
SRTE     DSECT
       IEFUCBOB
.NOUCB   AIF   ('&TCB' EQ 'NO' AND '&ALL' EQ 'NO').NOTCB
         AIF   ('&GEN' EQ 'NOGEN').NOHED5
         MZSHD 'TASK CONTROL BLOCK'
.NOHED5  AIF   (&VS OR &MZUPC).VSTCB
        IKJTCB
         AGO   .COMTCB
.VSTCB  IHATCB
.COMTCB  AIF   ('&GEN' EQ 'NOGEN').NOHED6
         MZSHD 'REQUEST BLOCK'
.NOHED6  AIF   (&VS OR &MZUPC).VSRB
         IKJRB
         AGO   .NOTCB
.VSRB    IHARB
.NOTCB   AIF   ('&CD' EQ 'NO' AND '&ALL' EQ 'NO').NOCD
         AIF   ('&GEN' EQ 'NOGEN').NOHED7
         MZSHD 'LOAD LIST ELEMENT'
.NOHED7  ANOP
LLE      DSECT
LLECHAIN DS    A
LLCDPTR  DS    0A
LLCOUNT  DS    X
         DS    AL3
         AIF   ('&GEN' EQ 'NOGEN').NOHED8
         MZSHD 'CONTENTS DIRECTORY ELEMENT'
.NOHED8  IHACDE
         AIF   (NOT &MZUPC AND NOT &VS).NOLPDE
         AIF   ('&GEN' EQ 'NOGEN').NOHED8A
         MZSHD 'LINK PACK DIRECTORY ELEMENT'
.NOHED8A IHALPDE
.NOLPDE  AIF   ('&GEN' EQ 'NOGEN').NOHED9
         MZSHD 'EXTENT LIST'
.NOHED9  ANOP
XL       DSECT
EXLLNTH  DS    F
EXLNUMRL DS    F                        # OF RELOCATION FACTORS
EXLISTLN DS    F
*              FOR BLOCK, X'80' IN HIGH BYTE OF EACH LENGTH
*              FOR SCATTER, X'80' IN HIGH BYTE OF LAST LENGTH
*              IN EITHER CASE, FOLLOWED BY LIST OF ADDRESSES, HIGH BYTE
*               OF 00
         SPACE 2
NOTELIST DSECT
NLRELOC  DS    A                        RELOCATION FACTOR
         DS    AL3
NLCONCAT DS    X                        CONCATENATION #
NLTTR0   DS    XL4                      1ST SEGMENT
.NOCD    AIF   ('&JSCB' EQ 'NO' AND '&ALL' EQ 'NO').NOJSCB
         AIF   ('&GEN' EQ 'NOGEN').NOHED10
         MZSHD 'JOB STEP CONTROL BLOCK'
.NOHED10 ANOP
       IEZJSCB
.NOJSCB  AIF   ('&TIOT' EQ 'NO' AND '&ALL' EQ 'NO').NOTIOT
         AIF   ('&GEN' EQ 'NOGEN').NOHED11
         MZSHD 'TASK I/O TABLE'
.NOHED11 ANOP
TIOT     DSECT
      IEFTIOT1
.NOTIOT  ANOP
         AIF   ('&GEN' EQ 'NOGEN').NOHED12
         MZSHD 'DATA CONTROL BLOCK, ETC.'
.NOHED12 DCBD  DEVD=DA,DSORG=PO
DDNAME   DS    CL8
NEXTDCB  DC    A(0)
         AIF   ('&IOB' EQ 'NO' AND '&ALL' EQ 'NO').NOIOB
         AIF   ('&GEN' EQ 'NOGEN').NOHED13
         MZSHD 'INPUT/OUTPUT BLOCK'
.NOHED13 ANOP
        IEZIOB
.NOIOB   AIF   ('&OPWORK' EQ 'NO' AND '&ALL' EQ 'NO').NOOPWRK
         AIF   ('&GEN' EQ 'NOGEN').NOHED14
         MZSHD 'OPEN WORK AREA DSECT - JFCB ONLY'
.NOHED14 ANOP
OPENWORK DSECT
         DS    XL100
      IEFJFCBN
.NOOPWRK POP   PRINT
         MEND
./ ADD NAME=MZWTO    0100-19106-19106-1238-00182-00182-00000-MZAP78  18
CON      TITLE 'MOREZAP WTO/WTOR  REPLY/STOP/MODIFY  ACCESS METHOD'
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP WTOR REPLY/STOP/MODIFY ACCESS METHOD',         *
               LEN=45
         SPACE 1
*              COPYRIGHT SHMUEL (SEYMOUR J.) METZ 1972, 1975.
         SPACE 1
MZWTO    MZENT TYPE=IO,PUT=STUFF,EJECT=RSVSPACE,GET=WTOR,              *
               ATTN=TESTMOD,INIT=WTODSRT
         SPACE 2
RSVSPACE L     R15,ANUMLINE
         LTR   R15,R15
         BZR   R14
         SR    R0,R0
         IC    R0,7(R15)
         A     R0,SAVEPUT
         SH    R0,=H'10'
         BLR   R14
         BAL   R9,DOWTO
         B     ENDPUT
         SPACE 1
STUFF    MVI   LINETYPE,X'20'           LINE TYPE D (DATA)
         LA    R1,ODATA
         L     R14,ANUMLINE
         LTR   R14,R14
         BZ    NEWLINE
         IC    R15,7(,R14)
         LA    R15,1(R15)
         STC   R15,7(R14)
         L     R2,ASOF
         BAL   R9,MOVEIT
         MVC   2(2,R2),LINETYPE
         AR    R2,R15
         ST    R2,ASOF
         CLI   7(R14),10
         BL    TSTPRMPT
WTO      BAL   R9,DOWTO
        STIMER WAIT,BINTVL=DELAY
         B     TSTPRMPT
         SPACE 1
NEWLINE  LA    R2,MLWTO
         TM    SW1,DMPSW
         BZ    *+12
         MVI   LINETYPE,X'40'           LINETYPE L (LABEL)
         LA    R1,HDATA
         BAL   R9,MOVEIT
         AR    R2,R15
         MVC   0(8,R2),WTODSRT           DESC, ROUTCDE, LINETYPE, AREA,
*                                        NUMBER OF LINES.
         ST    R2,ANUMLINE
         LA    R2,8(,R2)
         ST    R2,ASOF
         TM    SW1,DMPSW
         BO    STUFF
*        B     TESTMOD
         MZSHD 'ATTENTION'
TSTPRMPT TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?
         BO    GIVEHELP                  YES - GIVE HELP
*        B     TESTMOD
         SPACE 1
TESTMOD  NI    SW2,255-ATTNSW-PROMPTSW  CLEAR ATTN SWITCHES
         L     R8,SAVER8                COMM ECB POSTED?
         USING CHAIN,R8
         TM    CHECB,X'40'
         BZ    ENDPUT                    NO
         TM    CHECB,X'10'              STOP?
         BO    STOPIT
         L     R1,CHCIBP
         USING CIB,R1
         CLI   CIBVERB,CIBSTOP
         BE    STOPIT
         CLI   CIBVERB,CIBMODFY
         BE    MODIFY
         DC    H'0'                     SPIE ON INVALID VERB
MODIFY   EX    0,BLNKODTA
         LH    R14,CIBDATLN
         LTR   R14,R14                  ANY DATA?
         BZ    MODNONE                   NO
         BCTR  R14,0                    SET FOR MOVE
         EX    R14,MVCIB
MODNONE  QEDIT ORIGIN=CHCIBP,BLOCK=(1)
INT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE
         CLC   =C'$ABEND',ODATA
         BE    ABDUMP
         CLC   $HELP,ODATA
         BE    GIVEHELP
         CLC   $MON,ODATA
         BE    SETMON
         CLC   $NOMON,ODATA
         BE    OFFMON
         CLC   STOP,ODATA               DISCONTINUE DUMP?
         BE    OFFDUMP
         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?
         BE    ONCON
         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'
         OI    SW2,PROMPTSW             FORCE HELP MESSAGE
         B     PUTENTRY                 LOG ERROR ATTN && ERR MSG
         SPACE 1
MVCIB    MVC   ODATA(0),CIBDATA
         DROP  R1
         SPACE 1
GIVEHELP EX    0,BLNKODTA
         MVC   ODATA(PROMPTLN),ATTPRMPT
         NI    SW2,255-PROMPTSW
         B     PUTENTRY
         MZSHD 'SUBROUTINES'
MOVEIT   LA    R15,79(,R1)
LOOP     CR    R1,R15
         BE    ENDMOVE
         CLI   0(R15),C' '
         BNE   ENDMOVE
         BCT   R15,LOOP
ENDMOVE  SR    R15,R1
         EX    R15,MVCSTUFF
         LA    R15,5(R15)
         MVI   0(R2),0
         STC   R15,1(R2)
         BR    R9
         SPACE 1
MVCSTUFF MVC   4(,R2),0(R1)
         SPACE 2
DOWTO    LH    R0,HWUCMID
         MVI   MLWTO+2,X'80'
         LTR   R0,R0
         BZ    *+8
         MVI   MLWTO+2,X'C0'
         WTO   MF=(E,MLWTO)
         XC    ANUMLINE,ANUMLINE
         BR    R9
         MZSHD 'WTOR'
WTOR     MZLT  R15,ANUMLINE
         BZ    *+8
         BAL   R9,DOWTO
         XC    ECB(4),ECB
         LH    R0,HWUCMID
         MVC   WTORL+10(1),MLWTO+2      COPY MCS, QREG0 FLAGS
         MVC   WTORDSRT,WTODSRT
         LA    R2,IBUF+6
         MZSTA R2,WTORL
         WTOR  'MZP003A',ROUTCDE=(9,10),DESC=(6,8),MF=(E,WTORL)
         WAIT  ECB=ECB
         B     GETUC
STOPIT   DC    H'0'                     SPIE IN THE SKIE
         SPACE 2
ATTPRMPT DC    C'MZP002I '
$HELP    DC    C'$HELP',C': '
$HOLD    DC    C'$HOLD',C'|'
$AUTO    DC    C'$AUTO',C' '
$MON     DC    C'$MON',C'|'
$NOMON   DC    C'$NOMON',C' '
CON      DC    C'CON',C' '
STOP     DC    C'STOP',C' '
PROMPTLN EQU   *-ATTPRMPT
         SPACE 1
WTORL    WTOR  'MZP003A',,74,ECB,ROUTCDE=(9,10),DESC=(6,8),MF=L
         ORG   *-4
WTORDSRT DS    XL4
ECB      DC    F'0'
MLWTO    WTO   ('MZP000I METZ''S OWN RELIABLE EXTENDED ZAP',L),        *
               (' ',D),                                                *
               (' ',DE),AREAID=A,ROUTCDE=(2,9),DESC=7,MF=L
         ORG   MLWTO+4
TEXT     DS    10CL84
         DS    XL4
ANUMLINE DC    A(0)
ASOF     DS    A
WTODSRT  DC    X'0200',X'00C0'
LINETYPE DC    XL2'4000',H'1'
         MZSHD 'LITERALS AND MISCELLANEOUS'
DELAY    DC    F'250'                   2.5 SECOND DELAY AFTER OVERFLOW
         LTORG
         PRINT NOGEN
MZAPMAIN MZAPMAIN TYPE=D
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
CVT      DSECT
         CVT   SYS=VMS,PREFIX=YES
         MZSHD 'CSCB && CIB'
      IEECHAIN
CIB      DSECT
        IEZCIB
         END   MZWTO
./ ADD NAME=MZ2260   0100-19106-19106-1238-00227-00227-00000-MZAP78  18
2260     TITLE 'MOREZAP 2260 ACCESS METHOD - COPYRIGHT 1975 SHMUEL METZ*
               '
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP 2260 ACCESS METHOD'
MZ2260   MZENT TYPE=IO,DCB=SYS2260,                                    *
               PUT=PUTCRT,EJECT=RSVSPACE,GET=GETCRT,                   *
               ATTN=TESTATTN,INIT=GACB
         SPACE 2
PUTCRT   LM    R4,R6,LINEINC
         LTR   R6,R6                    IS THIS LINE 0?
         BNZ   UNSWIFT                   NO - OK TO USE
         TM    SW1,DMPSW                IS DUMP OR HELP IN PROGRESS?
         BZ    *+6                       NO - LEAVE LINE ALONE
         LR    R6,R4                    BYPASS LINE 0 - LEAVE TITLE
         CLI   SPEEDSW,X'FF'            IS THIS 1/PAGE MODE?
         BNE   UNSWIFT                   NO
         AR    R6,R4                    SKIP 0(¬DUMP) OR 1(DUMP)
         LA    R1,GBUF
         TM    SW1,DMPSW                IS DUMP IN PROGRESS?
         BZ    *+8                       NO - ONLY NEED ONE LINE
         LA    R1,80(R1)                USE LINE 2 FOR DUMP
H80      EQU   *-2,2,H
         MVC   0(80,R1),BLANKARD        BLANK LINE 0(¬DUMP)|1(DUMP)
UNSWIFT  ST    R6,LINECUR               SAVE IN CASE ALTERED BY $PAGE
*                                        OR DUMP/HELP SWITCHE CODING
         MH    R6,H80
         LA    R6,GBUF(R6)
         MVC   0(80,R6),ODATA
         L     R6,LINECUR
         BXLE  R6,R4,*+6
         SR    R6,R6
         ST    R6,LINECUR
         STC   R6,LNAD
         OI    LNAD,C'0'
         CLI   LNAD,C'0'                BLANKING FOR EJECT?
         NOP   PUTCRT
EJECTSW  EQU   *-3,1,X
         CLI   SPEEDSW,X'FF'            1/PAGE MODE?
         BE    NOMARK                    YES - SKIP FLAGGING OLDEST
         MH    R6,H80
         LA    R6,GBUF(R6)
         MVI   0(R6),C'|'
         SPACE 1
NOMARK   EX    0,BLNKODTA
         SPACE 1
         TM    SW1,DMPSW                DUMP/HELP/DEBUG?
         BZ    *+10                      NO - LEAVE LINE 0 ALONE
         MVC   GBUF(80),HDATA           MOVE TITLE TO LINE 0
         TM    SW2,CRTERRSW+ATTNSW      I/O ERROR OR ATTENTION?
         BNZ   *+12                      I'M GONNA SAY IT NOW
SPEEDTST TM    LINECUR+3,3              IS LINE A MULT OF 1,2,4,12?
SPEEDSW  EQU   *-3,1,X
         BNZ   NOCRT
        GWRITE GW,LNE,,961,SCREEN,MF=E
         LTR   R15,R15                  IS WRITE OK?
         BNZ   BUMRC                     NO
         CLI   LNAD,C'0'
         BNE   W1
         TM    SW2,ATTNSW+HOLDSW        WILL ATTN BE FORCED?
         BNZ   W1                        YES - NO POINT TO DELAY
        STIMER WAIT,BINTVL=DELAY
W1       LA    R1,GW                    RESTORE DECB PTR
         BAL   R14,TESTECB
         TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?
         BO    GIVEHELP                  YES - GIVE HELP
         TM    SW2,HOLDSW+ATTNSW        PAGE LOCK MODE OR ATTN?
         BNZ   C1                        YES - SIMULATE ATTN
       ATTNINQ GACB,MODE=(C,C1)
         B     NOCRT
         SPACE 2
RSVSPACE L     R0,SAVEPUT
         LM    R1,R2,LINEMAX
         BXLE  R2,R0,ENDPUT
         MVI   EJECTSW,X'70'
         EX    0,BLNKODTA
         B     PUTCRT
         MZSHD 'ERROR HANDLING'
TESTRC   LTR   R15,R15
         BNZ   BUMRC
*        B     TESTECB
         SPACE 1
TESTECB  STM   R14,R12,12(R13)
         WAIT  ECB=(1)
         L     R1,24(R13)               RESTORE DECB POINTER
         CLI   0(R1),X'7F'              I/O ERROR?
         BNE   CRTERR
         NI    SW2,255-CRTERRSW
ECBOK   RETURN (14,12)
         SPACE 1
BUMRC    DC    H'0'                     SPIE IN THE SKIE
         SPACE 1
CRTERR   TM    SW2,CRTERRSW             2ND ERROR?
         BO    CRTERROR                  YES
         OI    SW2,CRTERRSW             SET 1ST ERROR SW
CRTERRMS MVC   IBUF(26),=C'*** I/O ERROR ON 2260 ***'
         CLI   4(R1),X'D8'              IS THIS READ SMI?
         BNE   PUTENTRY                  NO - DO NOT RE-ISSUE
         L     R0,SAVEGET+56            BACKUP RETURN ADDRESS
         SH    R0,=H'4'
         ST    R0,SAVEGET+56
         B     PUTENTRY
         SPACE 1
CRTERROR CLOSE (SYS2260,)
         WTO   'MZP001I I/O ERROR ON 2260 - USE CONSOLE',              *
               ROUTCDE=(1,11),DESC=1
         MVC   CRTSW,NOP
         B     CRTERRMS
NOP      NOP   0
         MZSHD 'ATTENTION HANDLING'
TESTATTN ATTNINQ GACB,MODE=(C,CATTN)
         B     NOCRT
         SPACE 1
CATTN    OI    SW2,ATTNSW
         B     NOMARK
         SPACE 2
C1       MVC   ATTNMSG(1),LNAD
         OI    SW2,ATTNSW               FORCE REENTRY TO ATTN CODE
        GWRITE GW,LNE,,81,LNAD,MF=E     BLANK ENTRY LINE
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
        GWRITE GW,LNE,,7,ATTNMSG,MF=E   POSITION CURSOR
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
       ATTNINQ GACB                     WAIT FOR ATTENTION
         MVI   GR+16,0
         GREAD GR,SMI,,80,ODATA,MF=E
         BAL   R14,TESTRC               WAIT FOR NORMAL COMPLETION
         CLI   GR+16,X'43'              WRONG LENGTH?
         BNE   INT                       NO
         CLC   GR+17(3),GR+21           JUST ENTER?
         BE    NOCRT                     YES - HE CHANGED HIS MIND
         CLI   ODATA,X'6A'              IS IT EOM?
         BE    NOCRT                     YES - HE CHANGED HIS MIND
INT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE
         CLC   =C'$ABEND',ODATA
         BE    ABDUMP
         CLC   $HELP,ODATA
         BE    GIVEHELP
         SR    R1,R1                    12 WRITES/SCREEN?
         CLC   $SLOW,ODATA
         BE    SETSPEED                  YES
         LA    R1,1                     6 WRITES/SCREEN?
         CLC   $HALFAST,ODATA
         BE    SETSPEED
         LA    R1,3                     3 WRITES/SCREEN?
         CLC   $FAST,ODATA
         BE    SETSPEED                  YES
         LA    R1,X'FF'                 1 WRITE/SCREEN?
         CLC   $PAGE,ODATA
         BE    SETSPEED                  YES
         CLC   $HOLD,ODATA              PAGE LOCK MODE?
         BE    SETHOLD                   YES
         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?
         BE    OFFHOLD                   YES
         CLC   $MON,ODATA               DUMP MONITORING?
         BE    SETMON                    YES
         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?
         BE    OFFMON                    YES
         CLC   STOP,ODATA               DISCONTINUE DUMP?
         BE    OFFDUMP                   YES
         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?
         BE    ONCON                     YES
         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'
         OI    SW2,PROMPTSW             FORCE HELP MESSAGE
         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG
         SPACE 2
SETSPEED STC   R1,SPEEDSW
         B     PUTENTRY
         SPACE 1
GIVEHELP EX    0,BLNKODTA
         MVC   ODATA(PROMPTLN),ATTPRMPT
         NI    SW2,255-PROMPTSW
         B     PUTENTRY
         MZSHD 'GET'
GETCRT   EX    0,SPEEDTST               IS LINE A MULT OF 1,2,4,12?
         BZ    GET1                      YES - WRITE HAS BEEN DONE
        GWRITE GW,LNE,,961,SCREEN,MF=E
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
GET1   ATTNINQ GACB,MODE=(C,C2)
C2      GWRITE GW,LNE,,81,LNAD,MF=E     BLANK ENTRY LINE
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
        GWRITE GW,LNE,,2,MF=E           POSITION CURSOR
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
       ATTNINQ GACB                     WAIT FOR ATTENTION
         MVI   GR+16,0
         GREAD GR,SMI,,74,IBUF+6,MF=E
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
         B     GETUC
LINEINC  DC    F'1'
LINEMAX  DC    F'11'
LINECUR  DC    F'0'
*              THE FOLLOWING ARE DELIBERATELY SET UP TO FORCE GBUF
*               TO A FULLWORD BOUBDARY.
ATTNMSG  DC    C'0EH ? ¢'
SCREEN   DC    C'0'
GBUF     DC    12CL80' '
         SPACE 1
ATTPRMPT DC    C'MZP002I '
$HELP    DC    C'$HELP',C': '
$HOLD    DC    C'$HOLD',C'|'
$AUTO    DC    C'$AUTO',C' '
CON      DC    C'CON',C' '
STOP     DC    C'STOP',C' '
$PAGE    DC    C'$PAGE',C'|'
$FAST    DC    C'$FAST',C'|'
$HALFAST DC    C'$HALFAST',C'|'
$SLOW    DC    C'$SLOW',C' '
$MON     DC    C'$MON',C'|'
$NOMON   DC    C'$NOMON',C' '
PROMPTLN EQU   *-ATTPRMPT
         SPACE 1
         GREAD GR,SMI,SYS2260,74,0,1,MF=L
SYS2260  DCB   DDNAME=DD2260,DSORG=GS,GTYPE=BASIC,GNCP=1,MACRF=(R,W)
        GWRITE GW,LNE,SYS2260,961,SCREEN,1,MF=L
GACB     SAEC  EP=REST,DCB=SYS2260,COMAREA=OCR,ATTNTYP=(R,2260)
OCR      DS    4F
REST     EQU   0                        NO ATTENTION ROUTINE
         SPACE 2
DELAY    DC    F'150'                   1.5 SEC DELAY FOR ATTN
         LTORG
         PRINT NOGEN
MZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
CVT      DSECT
         CVT   SYS=VMS,PREFIX=YES
         MZSHD 'DATA CONTROL BLOCK DSECT'
         DCBD  DSORG=GS
         END
./ ADD NAME=MZ3270   0100-19106-19106-1238-00326-00326-00000-MZAP78  18
3270     TITLE 'MOREZAP 3270 ACCESS METHOD - COPYRIGHT 1975 SHMUEL METZ*
               '
         MACRO
&L       BUF
         LCLA  &I
         LCLC  &LB
&LB      SETC  '&L'
.LOOP    ANOP
&I       SETA  &I+1
&LB      MZSCR SF,(INT),CL79' '
&LB      SETC  ''
         AIF   (&I LT 24).LOOP
         MEND
         SPACE 1
         MACRO
&L       ADDRT
         LCLA  &I
         LCLC  &LB
&LB      SETC  '&L'
.LOOP    ANOP
&I       SETA  &I+1
&LB      MZSCR (&I,1)
&LB      SETC  ''
         AIF   (&I LT 24).LOOP
         MZSCR (1,1)
         MEND
         SPACE 3
         COPY  MZGBL
         MZSET
         MZHED 'MOREZAP 3270 ACCESS METHOD'
MZ3270   MZENT TYPE=IO,DCB=SYS3270,                                    *
               PUT=PUTCRT,EJECT=RSVSPACE,GET=GETCRT,                   *
               ATTN=TESTATTN,INIT=AUCB
         SPACE 2
PUTCRT   LM    R4,R6,LINEINC
         LTR   R6,R6                    IS THIS LINE 0?
         BNZ   UNSWIFT                   NO - OK TO USE
         TM    SW1,DMPSW                IS DUMP OR HELP IN PROGRESS?
         BZ    *+6                       NO - LEAVE LINE ALONE
         LR    R6,R4                    BYPASS LINE 0 - LEAVE TITLE
         CLI   SPEEDSW,X'FF'            IS THIS 1/PAGE MODE?
         BNE   UNSWIFT                   NO
         AR    R6,R4                    SKIP 0(¬DUMP) OR 1(DUMP)
         LA    R1,GBUF
         TM    SW1,DMPSW                IS DUMP IN PROGRESS?
         BZ    *+8                       NO - ONLY NEED ONE LINE
         LA    R1,81(R1)                USE LINE 2 FOR DUMP
H81      EQU   *-2,2,H
         MVC   2(79,R1),BLANKARD        BLANK LINE 0(¬DUMP)|1(DUMP)
UNSWIFT  ST    R6,LINECUR               SAVE IN CASE ALTERED BY $PAGE
*                                        OR DUMP/HELP SWITCH CODING
         MH    R6,H81
         LA    R6,GBUF(R6)
         MVC   2(79,R6),ODATA
         L     R6,LINECUR
         BXLE  R6,R4,*+6
         SR    R6,R6
         ST    R6,LINECUR
         LA    R1,ADDRTAB(R6)
         AR    R1,R6
         MVC   PRADDR,0(R1)
         MVC   PREUA,2(R1)
         CLI   LINECUR+3,0              BLANKING FOR EJECT?
         NOP   PUTCRT
EJECTSW  EQU   *-3,1,X
         CLI   SPEEDSW,X'FF'            1/PAGE MODE?
         BE    NOMARK                    YES - SKIP FLAGGING OLDEST
         MH    R6,H81
         LA    R6,GBUF(R6)
         MVI   2(R6),C'|'
         SPACE 1
NOMARK   EX    0,BLNKODTA
         SPACE 1
         TM    SW1,DMPSW                DUMP/HELP/DEBUG?
         BZ    *+10                      NO - LEAVE LINE 0 ALONE
         MVC   GBUF+1(79),HDATA         MOVE TITLE TO LINE 0
         TM    SW2,CRTERRSW+ATTNSW      I/O ERROR OR ATTENTION?
         BNZ   *+12                      I'M GONNA SAY IT NOW
SPEEDTST TM    LINECUR+3,3              IS LINE A MULT OF 1,2,4,12?
SPEEDSW  EQU   *-3,1,X
         BNZ   NOCRT
         WRITE GW,TS,,SCREEN,GBUFE-SCREEN,MF=E
         LTR   R15,R15                  IS WRITE OK?
         BNZ   BUMRC                     NO
         CLI   LINECUR+3,0
         BNE   W1
         TM    SW2,ATTNSW+HOLDSW        WILL ATTN BE FORCED?
         BNZ   W1                        YES - NO POINT TO DELAY
        STIMER WAIT,BINTVL=DELAY
W1       LA    R1,GW                    RESTORE DECB PTR
         BAL   R14,TESTECB
         TM    SW2,PROMPTSW             WAS HELP MESSAGE FORCED?
         BO    GIVEHELP                  YES - GIVE HELP
         TM    SW2,HOLDSW+ATTNSW        PAGE LOCK MODE OR ATTN?
         BNZ   C1                        YES - SIMULATE ATTN
         L     R1,AUCB
         USING SRTE,R1
         TM    UCBGCB,1
         BO    C1
         DROP  R1
         B     NOCRT
         SPACE 2
RSVSPACE L     R0,SAVEPUT
         LM    R1,R2,LINEMAX
         BXLE  R2,R0,ENDPUT
         MVI   EJECTSW,X'70'
         EX    0,BLNKODTA
         B     PUTCRT
         MZSHD 'ERROR ANALYSIS AND HANDLING'
         USING DECSDECB,R1
*              THIS SUBROUTINE IS ENTERED AT TESTRC FOLLOWING A
*              READ/WRITE, IN ORDER TO ANALYZE THE RESULT.
*              IF ENTERED AT TESTECB, COMPLETION IS WAITED FOR,
*              FOLLOWING WHICH THE DECB IS ANALYZED.
*              IF ENTERED AT TESTRC, THE RETURN CODE IN R15 IS FIRST
*              TESTED, FOLLOWING WHICH, IF R15=0,
*              THE TESTECB PROCESSING IS PERFORMED.
*              REGISTER USAGE IS:
         SPACE 1
*              R1    ->DECB
*              R9    -> INPUT AREA (IBUF OR ODATA)   ***** TEMP *****
*              R14   RETURN VECTOR
*              READ  0  PA1    RETURN
*              READ  4  PA2    RETURN
*              READ  8  NULL   RETURN
*              READ  12 NORMAL RETURN
*              WRITE 0  NORMAL RETURN
*              R15   RETURN CODE FROM READ/WRITE
TESTRC   LTR   R15,R15
         BNZ   BUMRC
*        B     TESTECB
         SPACE 1
TESTECB  STM   R14,R12,12(R13)
         WAIT  ECB=(1)
         L     R1,24(R13)               RESTORE DECB POINTER
         CLI   0(R1),X'7F'              I/O ERROR?
         BNE   CRTERR
         NI    SW2,255-CRTERRSW
         CLI   DECFLAGS,1
         BNE   ECBOK
         MVC   IBUF(29),=C'MZPC002I ONLINE TEST COMPLETE'
         B     SHUV
ECBOK    LM    R14,R12,12(R13)
         CLI   DECTYPE+1,1              READ TI?
         BNER  R14                       NO - ALL DONE
         CLI   RTIBAID,X'6D'
         BE    CLEAR
         CLI   RTIBAID,X'6C'            PA1?
         BER   R14
         CLI   RTIBAID,X'6E'            PA2(CANCEL)?
         BE    4(,R14)
         CLI   RTIBAID,X'7E'            SELECTOR PEN DETECT?
         BE    PEN
         CLI   RTIBAID,X'7D'            ENTER?
         BNER  R14
         LA    R15,RTIBUFE-RTIBTEXT-1
         SH    R15,DECCOUNT
         BM    8(,R14)
         CH    R15,=Y(71)                                         *TSM*
         BH    TOOLONG                                            *TSM*
         EX    R15,*+8
         B     12(,R14)
         MVC   0(,R9),RTIBTEXT
         SPACE 1
PEN      BR    R14                      ************ TEMP *************
         SPACE 1
CLEAR    BR    R14                      ************ TEMP *************
         SPACE 1
         SPACE 1
TOOLONG  MVC   IBUF(21),=C'MZPC003I MSG TOO LONG'
         B     SHUV
         SPACE 1
BUMRC    DC    H'0'                     SPIE IN THE SKIE
         SPACE 1
CRTERR   TM    SW2,CRTERRSW             2ND ERROR?
         BO    CRTERROR                  YES
         OI    SW2,CRTERRSW             SET 1ST ERROR SW
CRTERRMS MVC   IBUF(34),=C'MZPC001I *** I/O ERROR ON 3270 ***'
SHUV     CLI   DECTYPE+1,1              IS THIS READ TI?
         BNE   PUTENTRY                  NO - DO NOT RE-ISSUE
         L     R0,SAVEGET+56            BACKUP RETURN ADDRESS
         SH    R0,=H'4'
         ST    R0,SAVEGET+56
         B     PUTENTRY
         DROP  R1
         SPACE 1
CRTERROR CLOSE (SYS3270,)
         WTO   'MZP001I I/O ERROR ON 3270 - USE CONSOLE',              *
               ROUTCDE=(1,11),DESC=1
         MVC   CRTSW,NOP
         B     CRTERRMS
NOP      NOP   0
         MZSHD 'ATTENTION HANDLING'
TESTATTN L     R1,AUCB
         USING SRTE,R1
         TM    UCBGCB,1
         BZ    NOCRT
         DROP  R1
         OI    SW2,ATTNSW
         B     NOMARK
         SPACE 2
C1       MVC   PRDATA,ATTNMSG
         OI    SW2,ATTNSW               FORCE REENTRY TO ATTN CODE
         WRITE GW,TI,,PROMPTS,PROMPTE-PROMPTS,MF=E
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
         MVI   GR+16,0
         READ  GR,TI,,RTIBAID,RTIBUFE-RTIBAID,MF=E
         LA    R9,ODATA                 FOR EX MVC   ****** TEMP *****
         BAL   R14,TESTRC               WAIT FOR NORMAL COMPLETION
         B     GIVEHELP                  PA1
         B     NOCRT                     PA2 (CANCEL)
         B     NOCRT                     NULL
INT      OC    ODATA,BLANKARD           TRANSLATE TO UC IF FROM CONSOLE
         CLC   =C'$ABEND',ODATA
         BE    ABDUMP
         CLC   $HELP,ODATA
         BE    GIVEHELP
         SR    R1,R1                    24 WRITES/SCREEN?
         CLC   $SLOW,ODATA
         BE    SETSPEED                  YES
         LA    R1,3                     12 WRITES/SCREEN?
         CLC   $HALFAST,ODATA
         BE    SETSPEED                  YES
         LA    R1,7                     6 WRITES/SCREEN?
         CLC   $FAST,ODATA
         BE    SETSPEED                  YES
         LA    R1,X'FF'                 1 WRITE/SCREEN?
         CLC   $PAGE,ODATA
         BE    SETSPEED                  YES
         CLC   $HOLD,ODATA              PAGE LOCK MODE?
         BE    SETHOLD                   YES
         CLC   $AUTO,ODATA              CONTINUOUS OUTPUT?
         BE    OFFHOLD                   YES
         CLC   $MON,ODATA               DUMP MONITORING?
         BE    SETMON                    YES
         CLC   $NOMON,ODATA             DISCONTINUE DUMP MONITORING?
         BE    OFFMON                    YES
         CLC   STOP,ODATA               DISCONTINUE DUMP?
         BE    OFFDUMP                   YES
         CLC   CON,ODATA                FORCE CONSOLE INPUT MODE?
         BE    ONCON                     YES
         MVC   ODATA+43(29),=C'*** INVALID ATTENTION MSG ***'
         OI    SW2,PROMPTSW             FORCE HELP MESSAGE
         B     PUTENTRY                 LOG ERROR ATTN & ERR MSG
         SPACE 2
SETSPEED STC   R1,SPEEDSW
         B     PUTENTRY
         SPACE 1
GIVEHELP EX    0,BLNKODTA
         MVC   ODATA(PROMPTLN),ATTPRMPT
         NI    SW2,255-PROMPTSW
         B     PUTENTRY
         MZSHD 'GET'
GETCRT   EX    0,SPEEDTST               IS LINE A MULT OF 1,2,4,12?
         BZ    GET1                      YES - WRITE HAS BEEN DONE
         WRITE GW,TS,,SCREEN,GBUFE-SCREEN,MF=E
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
GET1     MVC   PRDATA,IBUF              PREPARE TO BLANK ENTRY LINE
         WRITE GW,TI,,PROMPTS,PROMPTE-PROMPTS,MF=E
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
         MVI   GR+16,0
         READ  GR,TI,,RTIBAID,RTIBUFE-RTIBAID,MF=E
         LA    R9,IBUF+6                 FOR EX MVC   **** TEMP *****
         BAL   R14,TESTRC                WAIT FOR NORMAL COMPLETION
         OI    SW2,ATTNSW                 PA1          **** TEMP *****
         OI    SW2,ATTNSW                 PA2 (CANCEL) **** TEMP *****
         OI    SW2,ATTNSW                 NULL         **** TEMP *****
         B     GETUC
         SPACE 2
RTIBAID  DS    X
RTIBCADR DS    XL2
RTIBSBA  DS    X
RTIBBADR DS    XL2
RTIBTEXT DS    CL294                     LEAVE ROOM FOR OLT
RTIBUFE  EQU   *
         MZSHD 'BUFFER, DCB, AND MISCELLANEOUS'
LINEINC  DC    F'1'
LINEMAX  DC    F'23'
LINECUR  DC    F'0'
AUCB     DS    A
ATTNMSG  DC    CL5'EH ?'
         SPACE 1
PROMPTS  MZSCR (RESETMDT,KBYRSTOR),SBA,PRADDR:,(24,1),                 *
               SF,(INT,PROT),PRDATA:,CL5,                              *
               SF,(NONE),IC,EUA,PREUA:,(+1,1)
PROMPTE  EQU   *
         SPACE 1
ADDRTAB  ADDRT
         SPACE 1
ATTPRMPT DC    C'MZP002I '
$HELP    DC    C'$HELP',C': '
$HOLD    DC    C'$HOLD',C'|'
$AUTO    DC    C'$AUTO',C' '
CON      DC    C'CON',C' '
STOP     DC    C'STOP',C' '
$PAGE    DC    C'$PAGE',C'|'
$FAST    DC    C'$FAST',C'|'
$HALFAST DC    C'$HALFAST',C'|'
$SLOW    DC    C'$SLOW',C' '
$MON     DC    C'$MON',C'|'
$NOMON   DC    C'$NOMON',C' '
PROMPTLN EQU   *-ATTPRMPT
         SPACE 1
SYS3270  DCB   DDNAME=IEFRDER,DSORG=CX,EROPT=T,                        *
               MACRF=(R,W)
         READ  GR,TI,SYS3270,RTIBAID,RTIBUFE-RTIBAID,0,1,MF=L
         WRITE GW,TS,SYS3270,SCREEN,GBUFE-SCREEN,,1,MF=L
         SPACE 2
DELAY    DC    F'150'                   1.5 SEC DELAY FOR ATTN
         LTORG
SCREEN   MZSCR (RESETMDT)
GBUF     BUF
GBUFE    EQU   *
         PRINT NOGEN
MZAPMAIN MZAPMAIN TYPE=D,GEN=NOGEN
         MZSHD 'COMMUNICATIONS VECTOR TABLE'
CVT      DSECT
         CVT   SYS=VMS,PREFIX=YES
         MZSHD 'DATA CONTROL BLOCK DSECT'
         DCBD  DSORG=BX
         MZSHD 'DATA EVENT CONTROL BLOCK DSECT'
      IECTDECB
         MZSHD 'UNIT CONTROL BLOCK DSECT'
SRTE    DSECT
      IEFUCBOB
         END
./ ADD NAME=NONBL    0100-19106-19106-1238-00021-00021-00000-MZAP78  18
         MACRO
&L       NONBL &GO,&NOGO=SYNTEX
         GBLC  &CPU
         AIF   ('&CPU' NE '370').S360
&L       CLCL  R4,R6
         AIF   (T'&GO EQ 'O').NG370
         BNE   &GO
         MEXIT
.NG370   BE    &NOGO
         MEXIT
.S360    ANOP
&L       CLI   0(R4),C' '
         AIF   (T'&GO EQ 'O').NG360
         BNE   &GO
         AGO   .G360
.NG360   BNE   *+16
.G360    LA    R4,1(R4)
         BCT   R5,*-12
         AIF   (T'&GO NE 'O').BYBY
         B     &NOGO
.BYBY    MEND
./ ADD NAME=PGFIX    0100-19106-19106-1238-00007-00007-00000-MZAP78  18
         MACRO
&NAME    PGFIX &FORM,&LA=,&A=,&ECB=,&ECBIND=,&LONG=,&RELEASE=,         X
               &RSAOPT=,&SUSPEND=
&NAME IHBPSINR &FORM,TYPE=FIX,LA=&LA,A=&A,ECB=&ECB,ECBIND=&ECBIND,     X
               LONG=&LONG,RELEASE=&RELEASE,RSAOPT=&RSAOPT,             X
               SUSPEND=&SUSPEND
         MEND
./ ADD NAME=PGFREE   0100-19106-19106-1238-00005-00005-00000-MZAP78  18
         MACRO
&NAME    PGFREE &FORM,&LA=,&A=,&ECB=,&ECBIND=,&RSAOPT=,&RELEASE=
&NAME IHBPSINR &FORM,TYPE=FREE,LA=&LA,A=&A,ECB=&ECB,ECBIND=&ECBIND,    X
               RELEASE=&RELEASE,RSAOPT=&RSAOPT
         MEND
./ ADD NAME=TQCBD    0100-19106-19106-1238-00209-00209-00000-MZAP78  18
         MACRO
         TQCBD
* TQCBD MACRO UPDATED 02/11/72                                   S22025
IEDQQCB DSECT
.*D230000                                                        S22025
.*C015000                                                        S22025
.*A020000,6950000
.*D110000-125000                                                 S22026
.*A087000,110000-125000,337000,382000-384000,497000              S22026
*
*
*        THIS IS A DSECT OF THE MASTER QCB FOLLOWED BY THE PRIORITY
*        QCB. THERE IS A MASTER QCB FOR EVERY MESSAGE QUEUE. THERE
*        IS A PRIORITY QCB FOR EACH PRIORITY LEVEL APPLICABLE FOR
*        THIS DESTINATION QUEUE.
         SPACE
QCBDSFLG DS    XL1 .                    FLAGS INDICATING A QCB FOR
*                                         DISPATCHER AND WHICH DATA
*                                         SET(S) THE MESSAGES FOR
*                                         THIS DEST. ARE QUEUED ON
*                        BIT DEFINITIONS
QCBHELD  EQU   X'01' .                  STOP SENDING
QCBFQCB  EQU   X'02' .                  FLAG INDICATING A QCB
QCBDRQQ  EQU   X'04' .                  FLAG INDIC A DRQ         S22026
QCBREUS  EQU   X'10' .                  FLAG FOR REUSEABLE DISK Q.
QCBNREUS EQU   X'20' .                  FLAG FOR NONREUS. DISK Q.
QCBDISK  EQU   X'30' .                  DISK QUEUES USED
QCBCORE  EQU   X'40' .                  FLAG FOR MS QUEUES.
*              X'50'                    INDICATES CORE Q'S WITH
*                                       BACKUP ON REUSABLE DISK
*              X'60'                    INDICATES CORE Q'S WITH
*                                       BACKUP ON NONREUS DISK
*
QCBELCHN DS    AL3 .                    ELEMENT CHAIN
*              CONTAINS THE QCB ADDRESS TO BE POSTED TO WHEN THIS
*              QCB IS REMOVED FROM THE TIME DELAY QUEUE.
QCBPRI   DS    XL1 .                    PRIORITY
QCBLINK  DS    AL3 .                    POINTER TO NEXT STCB IN CHAIN
QCBSTVTO DS    AL1 .                    INDEX TO THE ENTRY IN THE
*                                         SUBTASK VECTOR TABLE
QCBSTCHN DS    AL3 .                    STCB CHAIN
QCBSTPRI DS    XL1 .                    PRIORITY OF THE STCB
QCBSLINK DS    AL3 .                    POINTER TO NEXT STCB IN CHAIN
QCBEOLDT DS    XL2 .                    INTERRUPT TIME
QCBRETCT DS    0XL1 .                   TSO RETRY COUNTERS          TSO
QCBLKRLN DS    XL1 .                    LOCK RELATIVE LINE NO.
*              OFFSET TO QCB FOR TIME DELAY - FOR QCB = X'00'
QCBSTAT  DS    XL1 .                    STATUS OF THIS QCB
*                        BIT DEFINITIONS
QCBEOM   EQU   X'80' .                  END OF MESSAGE SENT
QCBTRMHO EQU   X'40' .                  TERMINAL WAS HELD
QCBBUFRD EQU   X'20' .                  BUFFERED TERMINAL
QCBSEND  EQU   X'10' .                  SENDING TO BUFFERED TERMINAL
QCBSCHDL EQU   X'04' .                  PUT IN DELAY Q WHEN INACTIVE
QCBCLOCK EQU   X'02' .                  ON = CLOCK, OFF = INTVL
QCBTIME  EQU   X'01' .                  DELAY GREATER THAN 12 HOURS
*
QCBSCBOF DS    XL1 .                    OFFSET TO THE PROPER SCB
*                                         FOR THIS TRANSMISSION.
*                                         X'00' UNLES THIS LINE
*                                         HAS BUFFERED TERMS.
QCBINSRC DS    0AL3 .                   CHAIN OF SOURCE LCB'S
*                                         CURRENTLY SENDING INITIATE
*                                         MODE MSGS TO THIS DEST. Q.
QCBSATCT DS    XL1 .                    SIM ATTN OUTPUT LINE COUNT  TSO
QCBTSOF2 DS    XL1 .                    SECOND TSO FLAG BYTE        TSO
*                        BIT DEFINITIONS                            TSO
QCBINHBN EQU   X'80' .                  USE INHIBITS WITH THIS TERM TSO
QCBBUFQ  EQU   X'40' .                  TCAM BUFFER BEING HELD      TSO
QCBPOSTO EQU   X'20' .                  QCB POSTED TO ITSELF        TSO
QCBDSSMI EQU   X'10' .                  START MI CHARACTER SENT     TSO
QCBSIMRD EQU   X'08' .                  SIMATTN READ EXECUTING      TSO
QCBSATCH EQU   X'04' .                  SIMULATED ATTN BY CHARACTER TSO
QCBSATTI EQU   X'02' .                  SIMULATED ATTN BY TIME      TSO
QCBSATLC EQU   X'01' .                  SIMULATED ATTN BY LINE      TSO
*
QCBTSOF1 DS    XL1 .                    FIRST TSO FLAG BYTE         TSO
*                        BIT DEFINITIONS                            TSO
QCBWRBRK EQU   X'80' .                  ISSUE A WRITE BREAK         TSO
QCBTGET  EQU   X'40' .                  TGET REQUEST                TSO
QCBTPUT  EQU   X'20' .                  TPUT REQUEST                TSO
QCBNOBUF EQU   X'10' .                  INSUFFICIENT BUFFERS        TSO
QCBSATRD EQU   X'08' .                  SIMULATED ATTN READ REQUEST TSO
QCBPARTO EQU   X'04' .                  PARTIAL OUTPUT LINE         TSO
QCBDELAY EQU   X'02' .                  QCB IN DELAY QUEUE
QCBDISC  EQU   X'01' .                  USER TO BE LOGGED OFF       TSO
*
QCBEXTO  DS    0H .                     OFFSET TO EXT            S22026
QCBINTVL DS    XL2 .                    INTERVAL FOR POLL DELAY
QCBMSGCT DS    H .                      COUNT OF MESSAGES IN THIS
*                                         QUEUE
QCBPREN  DS    0A .                     ADDRESS OF TERMINAL TABLE
*                                       ENTRY IF QCB FOR A PROCESS
*                                       ENTRY
QCBPRLVL DS    XL1 .                    HIGHEST PRIORITY LEVEL MESSAGE
QCBLKRRN DS    0XL3 .                   LOCK RELATIVE RECORD NUM.
*              LINK FIELD FOR QCB WHEN ON THE TIME DELAY QUEUE
QCBCARCT DS    XL1 .                    CARRIAGE POSITION COUNT     TSO
QCBTJID  DS    H .                      TSO JOB IDENTIFICATION      TSO
QCBRELLN DS    XL1 .                    RELATIVE LINE NO. FOR THE
*                                         LINE THIS QCB REPRESENTS
QCBDCBAD DS    AL3 .                    ADDRESS OF DCB
QCBFLAG  DS    XL1 .                    QCB STATUS BITS
*                        BIT DEFINITIONS
QCBTSSES EQU   X'80' .                  TSO SESSION IN PROGRESS     TSO
QCBNOBRK EQU   X'40' .                  NO REVERSE BREAK FEATURE    TSO
QCBREAD  EQU   X'20' .                  READ HAS PRIORITY           TSO
QCBRSRV  EQU   X'10' .                  REUSE SERVICED BIT
QCBTERMQ EQU   X'08' .                  QUEUING BY TERMINAL
QCBSDFFO EQU   X'04' .                  CURRENTLY SENDING FEFO MSG
QCBPROC  EQU   X'02' .                  THIS QCB FOR A PROCESS ENTRY
QCBCKPT  EQU   X'01' .                  FLAG FOR CHECKPOINT
*
QCBQBACK DS    AL3 .                    QBACK MESSAGE CHAIN
         SPACE 2
*     DEC                                 HEX
*        *********************************
*      0 * DSFLG *         ELCHN         *
*        *********************************
*      4 * PRI   *         LINK          *  4
*        *********************************
*      8 *  VTO  *         STCHN         *  8
*        *********************************           **************
*     12 * STPRI *         SLINK         *  C        *            *
*        *********************************           * MASTER QCB *
*     16 *    EOLDT      * LKRLN * STAT  * 10        *
*        *********************************           **************
*     20 * SCBOF *         INSRC         * 14
*        *********************************
*     24 *    INTVL      *     MSGCT     * 18
*        *********************************
*     28 * PRILVL*     PREN/LKRRN        * 1C
*        *********************************
*     32 * RELLN *         DCBAD         * 20
*        *********************************
*     36 * FLAG  *         QBACK         * 24
*        *********************************
         SPACE
*
QCBMEND  EQU   * .
QCBMSIZE EQU   QCBMEND-IEDQQCB .        SIZE OF MASTER QCB
*
         SPACE 2
*
*        THIS IS THE DSECT OF A PRIORITY QCB.  THERE IS A PRIORITY
*        QCB FOR EACH PRIORITY LEVEL APPLICABLE FOR THIS DEST. Q
*
IEDQPQCB EQU   * .                 START OF PRI LEVEL QCB
QCBDNHDR DS    XL3 .                    DISK RECORE NUMBER TO PUT
*                                         THE NEXT HDR RECEIVED
QCBFHDLZ DS    XL3 .                    DISK REC. NO OF THE FIRST
*                                         HEADER ON THIS QUEUE
*                                         THAT WAS PLACED ON THE
         ORG   QCBFHDLZ .                                        S21101
QCBDATFL DS    X .                     DATFLAGS FIELD OF LAST    S21101
*                                      MSG REMOVED FROM FEFO Q   S21101
QCBPFEFO DS    XL3 .                    RCD NUMBER OF LAST MSG   S21101
*                                       REMOVED FROM FEFO Q      S21101
QCBDATSQ DS    XL2 .                    SEQUENC NUMBER OF LAST   S21101
*                                       MSG REMOVED FROM FEFO Q  S21101
         ORG   QCBFHDLZ+3 .                                      S21101
QCBFHDTZ DS    XL3 .                      LAST ZENE USED.
*                                       DISK REC. NO. OF THE FIRST
*                                         HEADER PLACED IN THE
*                                         CURRENT ZONE
QCBINTFF DS    XL3 .                    DISK REC.NO. OF THE FIRST
*                                         INTERCEPTED MSG. - FEFO
*                                         ORDER
QCBINTLF DS    XL3 .                    DISK REC. NO. OF THE LAST
*                                         INTERCEPTED MSG. - FEFO
QCBFFEFO DS    XL3 .                    DISK REC. NO. OF THE FIRST
*                                         (FEFO) MSG. TO BE RECVD.
*                                         CORE RECORD NO. IF THIS
*                                         IS A CORE ONLY QUEUE.
QCBLFEFO DS    XL3 .                    DISK RECORD NO. OF THE
*                                         LAST FEFO MSG. RECEIVED.
*                                         CORE REC. NO. IF THIS IS
*                                         A CORE ONLY QUEUE.
QCBCFHDR DS    XL3 .                    CORE REC. NO. OF THE FIRST
*                                         HEADER APPEARING IN THIS
*                                         QUEUE.
QCBPRIPQ DS    XL1 .                    THE PRIORITY OF THIS PRITY
*                                         LEVEL QCB.  THIS WILL BE
*                                         X'00' IF THIS IS THE
*                                         LOWEST PRTY LEVEL.
QCBCPVHD DS    AL3 .                    CORE ADDR OF THE LAST ADR
*                                         PLACED ON THIS QUEUE.
         SPACE 2
*     DEC                                 HEX
*        *********************************
*      0 *         DNHDR         * FHDLZ *  0
*        *********************************
*      4 *    (FHDLZ)    *     FHDTZ     *  4
*        *********************************         ****************
*      8 *(FHDTZ)*         INTFF         *  8      *              *
*        *********************************         * PRIORITY QCB *
*     12 *         INTLF         * FFEFO *  C      *              *
*        *********************************         ****************
*     16 *    (FFEFO)    *     LFEFO     * 10
*        *********************************
*     20 *(LFEFO)*         CFHDR         * 14
*        *********************************
*     24 * PRIPQ *         CPVHD         * 18
*        *********************************
*
QCBPEND  EQU   *
QCBPSIZE EQU   QCBPEND-IEDQPQCB
*
         MEND
./ ADD NAME=TRTAB    0100-19106-19106-1238-00092-00092-00000-MZAP78  18
         MACRO
&NM      TRTAB &FILL=C'.',&CODE=2260,&OPT=
         LCLC  &N
         LCLA  &I,&J
         LCLB  &C60,&C70,&PN,&TN,&FOLD,&ERR
         LCLA  &LEN(13),&DISP(13),&ADD(13)
&LEN(1)  SETA  6             . TO &
&DISP(1) SETA  75            .
&LEN(2) SETA   7             $ TO /
&DISP(2) SETA  91            $
&LEN(4)  SETA 5              : TO =
&DISP(4) SETA  122           :
&LEN(3) SETA   5             , TO ?
&DISP(3) SETA  107           ,
&LEN(10) SETA  9             A
&LEN(11) SETA  9
&LEN(12) SETA  8
&LEN(13) SETA  10
&DISP(10) SETA 193           A-I
&DISP(11) SETA 209           J-R
&DISP(12) SETA 226           S-Z
&DISP(13) SETA 240           0-9
&N       SETC  '&NM'
         AIF   ('&N' NE '').OK
&N       SETC  'TRTA'.'&SYSNDX'
.OK      ANOP
&N       DC    256&FILL .      FILLER CODE
         ORG   &N+C' '
         DC    C' ' .        BLANK
&C60     SETB  ('&CODE' EQ '2260' OR '&CODE' EQ '2265')
&C70     SETB  ('&CODE' EQ '3270')
&PN      SETB  ('&CODE' EQ 'PN')
&TN      SETB  ('&CODE' EQ 'TN')
         AIF   (&C60 OR &C70 OR &PN OR &TN).OKCODE
         MNOTE 8,'CODE=''&CODE'' NOT SUPPORTED'
         MEXIT
.OKCODE  ANOP
&I       SETA  N'&OPT
         AIF   (&I LT 1).NOPT
&J       SETA  1
.OPTLOOP AIF   ('&OPT(&J)' EQ 'FOLD').FOLD
         AIF   ('&OPT(&J)' EQ  'SVC').SVC
         AIF   ('&OPT(&J)' EQ 'ERR').ERR
         MNOTE 8,'OPT=''&OPT(&J)'' NOT SUPPORTED'
.OPTINC  AIF   (&J GE &I).NOPT
&J       SETA  &J+1
         AGO   .OPTLOOP
.FOLD    ANOP
&FOLD    SETB  (&C60 OR &PN)
         AGO   .OPTINC
.SVC     ORG   &N+X'C0'
         DC    C'+' .        DISPLAY X'C0' IN SVC NAME AS PLUS SIGN
         AGO   .OPTINC
.ERR     ANOP
&ERR     SETB  (&C60)
         AGO   .OPTINC
.NOPT    ANOP
&FOLD    SETB  (&FOLD OR &TN OR &C70)
&ERR     SETB  (&ERR OR &TN OR &PN OR &C70)
         AIF   (&C60 OR &PN).NOCENT
&LEN(1) SETA   7
&DISP(1) SETA  74            ADD CENT SIGN
&LEN(2) SETA   8
&DISP(2) SETA  90            ADD EXC. MARK
.NOCENT  AIF   (&C60 AND NOT &ERR).NOERR
&LEN(4) SETA   6             ADD QUOTE
.NOERR   AIF   (NOT &FOLD).NOLC
&LEN(5) SETA   9
&LEN(6) SETA   9
&LEN(7)  SETA  8
&DISP(5) SETA  129
&DISP(6) SETA  145
&DISP(7) SETA  162
         AIF   (&C70 AND NOT &FOLD).NONUM
&LEN(8) SETA   10
&DISP(8) SETA  176
         AIF   (NOT &C70).NONUM
&ADD(8) SETA   64
.NONUM   AIF   (&C70 OR &TN).NOLC
&ADD(5)  SETA  64
&ADD(6)  SETA  64
&ADD(7)  SETA  64
.NOLC    ANOP
&I       SETA  1
.NEXT    AIF   (&LEN(&I) LT 1).DCL
         ORG   &N+&DISP(&I)
         DC    &LEN(&I)AL1(*-&N+&ADD(&I))
.DCL     AIF   (&I GE 13).ORG
&I       SETA  &I+1
         AGO   .NEXT
.ORG     ORG
         MEND
