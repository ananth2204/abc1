00001000.ss
00003000.ll 70
00004000.pl 60
00005000.tt //METZ'S OWN RELIABLE EXTENDED ZAP (MOREZAP)//
00005100.bt //- % -//
00006000.ce data
00007000MOREZAP
00008000
00009000- TABLE OF CONTENTS -
00010000.end
00012000.nj
00013000.sp 2
00014000 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬Page____
00015000.sp 1
00016000 ¬¬I.  INTRODUCTION ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬2
00017000.sp 1
00018000 ¬II.  SYSTEM and INPUT/OUTPUT REQUIREMENTS ¬¬3
00019000.sp 1
00020000 III.  Attention/MODIFY Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬6
00021000.sp 1
00022000 ¬IV.  INPUT Statements ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬7
00023000.sp 1
00024000 ¬¬V.  JCL ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬19
00025000 ¬¬¬¬¬¬¬Example 1 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬20
00026000 ¬¬¬¬¬¬¬Example 2 ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬20
00027000.sp 1
00028000 ¬VI. ¬MESSAGES
00029000 ¬¬¬¬¬¬¬General ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬21
00030000 ¬¬¬¬¬¬¬Common Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬22
00031000 ¬¬¬¬¬¬¬Initialization Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬23
00032000 ¬¬¬¬¬¬¬Input Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬25
00033000 ¬¬¬¬¬¬¬HELP Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬28
00034000 ¬¬¬¬¬¬¬DEBUG Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬29
00035000 ¬¬¬¬¬¬¬ESD Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬35
00036000 ¬¬¬¬¬¬¬DUMP Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬38
00037000 ¬¬¬¬¬¬¬VER/REP Messages ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬39
00038000 ¬¬¬¬¬¬¬Final Housekeeping and
00039000 ¬¬¬¬¬¬¬¬Reinitialization Messages ¬¬¬¬¬¬¬¬¬¬40
00040000.sp 1
00041000 VII. ¬MZAP/CZAP Comparison ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬41
00042000.sp 1
00043000VIII. ¬Index to Input Statements. ¬¬¬¬¬¬¬¬¬¬¬43
00044000.sp 1
00045000 ¬¬¬¬¬¬Sample Output ¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬A-1
00046000.pa
00047000I. ¬¬INTRODUCTION
00048000.sp
00049000.in 5
00050000.fi l
00051000This program is intendended to provide, for MVT,
00052000the same function as the IBM service aid COREZAP0 (360S-01114-00),
00053000referred to here as CZAP;
00054000that is, to apply patches to programs in main storage.
00055000Several of the control cards have an altered syntax in order
00056000to permit names to be specified without framing characters.
00057000There is a chart at the end of this writeup which illustrates
00058000the known differences.
00059000.sp 1
00060000MZAP is organized as an overlay structure.
00061000Information is passed between overlays through a set of switches
00062000and through a chain of control of control blocks constructed
00063000as a result of the input statements read.
00064000.pa
00065000.in 0
00066000II. SYSTEM and INPUT/OUTPUT REQUIREMENTS
00067000.sp 1
00068000.in 5
00069000MZAP requires that the control program be OS/MVT or OS/65MP;
00070000OS/VS2 Release 1.6 support is planned in the near future;
00071000and provision has been made for easily adding MFT or VS1 support
00072000with only minor modifications.
00073000No optional OS facilities need be generated,
00074000other than normal device support (for the 2260,
00075000this must be explicitly requested via the GRAPHICS macro;
00076000for the 3270, this must be requested via the BTAM option
00077000of the DATAMGT macro; for all sequential and DA devices
00078000this support is automatic).
00079000In particular, MZAP does not use SVC 54 to get into key 0,
00080000and hence ISAM is not required.
00081000When VS support is available,
00082000MZAP will be required to run only from an authorized library.
00083000.sp 1
00084000MZAP is intended to obtain input from multiple sources:
00085000a data set called SYSIN,
00086000a TSO terminal,
00087000a local crt, or an operator's console.
00088000If MZAP is invoked from a TSO terminal,
00089000input can be supplied only form SYSIN or the terminal;
00090000otherwise a DD statement may be supplied allocating a
00091000960 byte (12*80) local 2260 with line addressing and
00092000non-destructive cursor
00093000or a 1920 byte (24*80) EBCDIC local 3270,
00094000which may be used for both input and output.
00095000Input, output, and attention from an operators
00096000console are performed via REPLY,
00097000WTO/WTOR, and MODIFY;
00098000they are normally inactive if a CRT is assigned,
00099000but an uncorrectable I/O error on the CRT will
00100000force transfer of these functions (the operator may
00101000perform a MODIFY even when the CRT is operational).
00102000.sp 1
00103000Input is normally from a sequential data set,
00104000SYSIN. If SYSIN is not defined or is a DD DUMMY,
00105000"console input mode" is set.
00106000This mode is also set by a CONSOLE statement read
00107000from SYSIN or by a MODIFY or attention with the text CONSOLE.
00108000Input is always translated to upper case.
00109000Console mode is terminated, and control reverted to SYSIN,
00110000by an END statement;
00111000this is permitted only when SYSIN is assigned.
00112000.sp 1
00113000Output is normally to SYSPRINT.
00114000If a 2260 or 3270 is assigned,
00115000all output except page headings will be displayed on the CRT;
00116000if in console input mode with no CRT assigned,
00117000this output will be displayed via WTO/TPUT.
00118000.sp 1
00119000When a TSO terminal or a CRT is used,
00120000it is in one of two states: normal and attention.
00121000In normal state, input is solicited in a device-dependent fashion:
00122000.in 10
00123000.sp 1
00124000.hi 12
001250002260 local:
00126000Blanking the entry line and displaying an SMI;
00127000the user keys in a command and depresses SHIFT and ENTER simultaneously.
00128000.sp 1
001290003270 local:
00130000writing a statement number, Blanking an entry line,
00131000and positioning the cursor;
00132000the user enters a command and depresses ENTER.
00133000.sp 1
001340002260 TSO: ¬
00135000Writing a statement number followed by an SMI;
00136000the user enters a command and SHIFT/ENTER.
00137000.sp 1
001380003270 TSO: ¬
00139000writing a statement number and positioning the cursor;
00140000the user enters a command and ENTER.
00141000.sp 1
00142000TSO: ¬¬¬¬¬¬¬
00143000Writing a statement number;
00144000the user enters a command and depresses RETURN, EOB, etc.,
00145000according to the type of terminal.
00146000.sp 2
00147000.hi 0
00148000.in 5
00149000Attention state is entered in a device-dependent fashion:
00150000.in 10
00151000.hi 12
00152000.sp 1
00153000Local 2260:
00154000SHIFT/ENTER within 1.5 seconds after
00155000line 11(bottom line) is updated;
00156000.sp 1
00157000Local 3270:
00158000ENTER or PA1 any time the keyboard is
00159000unlocked;
00160000.sp 1
00161000TSO: ¬¬¬¬¬¬¬
00162000the technique depends on type of terminal,
00163000TSO/TCAM generation,
00164000and the users last TERM command - it may be BREAK or
00165000may be a simulated attention.
00166000Attention state is also entered automatically when in HOLD mode
00167000(see below).
00168000.sp 1
00169000.hi 0
00170000.in 5
00171000When in attention state,
00172000the user will be prompted to key in an attention message by
00173000blanking an entry line and displaying "EH ? " followed by an SMI (>|)
00174000- a greater than sign (>) will be used on other than a 2260.
00175000The prompt will be repeated after each attention message,
00176000allowing the user to key in as many messages as he wishes;
00177000attention state will be reset when he enters a null line
00178000(SHIFT/ENTER, SHIFT, CR, etc. with no preceeding text).
00179000.sp 2
00180000.hi 0
00181000.in 5
00182000.sp 2
00183000Output to the CRT/terminal may be done in two modes:
00184000AUTO and HOLD;
00185000output may be at any of four speeds:
00186000SLOW, HALFAST, FAST, or PAGE.
00187000In AUTO mode, output occurs continously until input is
00188000required or the user enters attention state;
00189000in HOLD mode attention state is entered after each write
00190000and the user must enter a null line to continue.
00191000.sp 2
00192000Output to a CRT will always be in full screen mode;
00193000the oldest line on the screen will be indicated by a logical or
00194000(|).
00195000The write will take place every time one, two, four, or twelve lines
00196000(1,4,8, or 24 for 3270) have been written,
00197000depending on the speed option.
00198000In PAGE mode, one line (two if a dump is in progress)
00199000will be reserved on the screen,
00200000resulting in a net display of 11 (10 if a dump) lines per 2260 screen
00201000and 23 (22 if a dump) per 3270 screen.
00202000Regardless of the speed,
00203000the current contents of the buffer will be written prior to
00204000soliciting input or additional attention messages.
00205000.sp 2
00206000When a CRT is not assigned,
00207000operator input in batch (non-TSO) will be solicited by a WTOR;
00208000attention messages must be entered by giving the command
00209000"MODIFY id,msg" where id is the jobname or START id and
00210000msg is the text of the attention message.
00211000See section V for a description of START requirements.
00212000.pa
00213000.in 0
00214000III. Attention/MODIFY messages
00215000.in 5
00216000.sp 1
00217000The following attention messages are allowed;
00218000they may be in lower case since MZAP translates to upper case:
00219000.sp 2
00220000.in 10
00221000.hi 12
00222000$HELP ¬¬¬¬¬¬
00223000display list of valid nonpriveleged attention messages.
00224000This function is forced if an invalid attention message is entered.
00225000.sp 1
00226000CON ¬¬¬¬¬¬¬¬
00227000set console input mode
00228000.sp 1
00229000STOP ¬¬¬¬¬¬¬
00230000terminate dump or HELP
00231000.sp 1
00232000$HOLD ¬¬¬¬¬¬
00233000enter attention state after every write
00234000.sp 1
00235000.br
00236000$AUTO ¬¬¬¬¬¬
00237000restore normal mode after $HOLD
00238000.sp 1
00239000$SLOW ¬¬¬¬¬¬
00240000do 12 writes/2260 screen, 24/3270.
00241000A write will occur for each output line.
00242000.sp 1
00243000$HALFAST ¬¬¬
00244000do 6 writes/screen.
00245000a write will occur for every 2 output lines(2260)
00246000or every 4 lines(3270)
00247000.sp 1
00248000$FAST ¬¬¬¬¬¬
00249000do 3 writes/screen.
00250000A write will occur for every 4 output lines(2260)
00251000or every 8 output lines(3270).
00252000.sp 1
00253000$PAGE ¬¬¬¬¬¬
00254000do 1 write/screen.
00255000If a dump is in progress,
00256000one line is reserved for the dump header.
00257000One line is reserved as the entry line.
00258000A write will occur for every 10 or 11 output lines
00259000(3270: 22 or 23 output lines).
00260000.pa
00261000.hi 0
00262000.in 0
00263000IV. INPUT STATEMENTS
00264000.sp 1
00265000.in 5
00266000Input statements are of three types:
00267000.in 8
00268000.hi 4
00269000.sp 1
002700001.)
00271000A statement with an asterisk (*) in column 1 is a column 1 is a comment.
00272000.sp 1
002730002.)
00274000A blank card is a comment.
00275000.sp 1
002760003.)
00277000Any other statement contains an opcode in the first non-blank column
00278000(normally column 1).
00279000.hi 0
00280000.in 5
00281000.sp 1
00282000For the remainder of this section,
00283000the term "statement" will be understood to apply only to non-comments.
00284000.sp 2
00285000Each opcode may require or permit operands;
00286000the opcode must be followed by a blank unless the operand
00287000begins with a period (.), hyphen (-), or equal sign (=).
00288000.sp 2
00289000A hex (hexadecimal) number is expressed as an even number
00290000of hexadecimal digits(0-9, A-F),
00291000optionally preceeded by an equal sign or hyphen.
00292000An equal sign indicates that the value which follows
00293000is a number rather than a name;
00294000a hyphen indicates a negative number and is only valid when
00295000specifying a relative address;
00296000an equal sign may preceed any hex data.
00297000.sp 2
00298000A character string is expressed by enclosing the desired characters
00299000in apostrophes (');
00300000an apostrophe is represented by two consequtive apostrophes('').
00301000Apostrophe is the only character which is doubled;
00302000in particular, an ampersand (&) is represented by a single______ ampersand.
00303000Character strings may be used wherever hex numbers are valid,
00304000and may be concatenated with hex data:
00305000=C1C2C3, C1C2'C', C1'B'C3 and ='ABC' all represent the same value.
00306000.sp 2
00307000The following statements are accepted:
00308000.in 9
00309000.hi 13
00310000.sp 1
00311000KEY ¬¬¬¬¬¬¬¬¬
00312000This statement is required if any REP statements are used.
00313000The operand requirements may change for every release;
00314000this is intended to prevent unauthorized use of MZAP.
00315000It is recommended that each installation modify the
00316000requirements for this opcode,
00317000to prevent unauthorized alteration of their system.
00318000The operand requirements have been deliberately omitted
00319000from the writeup;
00320000they will be made available only to a single
00321000individual at each installation and he may select,
00322000at his own discretion,
00323000who is authorized to modify resident code.
00324000.sp 2
00325000DEBUG ¬¬¬¬¬¬¬
00326000The switches and table entries used for communicating between
00327000phases of MZAP will be displayed after each phase completes processing.
00328000.in 9
00329000.hi 13
00330000.br
00331000.sp 2
00332000END ¬¬¬¬¬¬¬¬
00333000Console input mode will be terminated if a valid SYSIN data set
00334000was specified;
00335000otherwise END is an invalid opcode.
00336000.sp 2
00337000GO ¬¬¬¬¬¬¬¬¬¬
00338000Turns off the NOGO switch if from CRT/terminal/console;
00339000GO is invalid from SYSIN.
00340000.sp 2
00341000RESET ¬¬¬¬¬¬¬
00342000Causes all control cards previously read to be processed.
00343000If an operand of EOD is specified,
00344000no further input will be read;
00345000otherwise NOGO and DEBUG will be reset and MZAP will
00346000continue reading input.
00347000.sp 2
00348000JOB ¬¬¬¬¬¬¬¬¬jobname
00349000.br
00350000JOB ¬¬¬¬¬¬¬¬¬jobname.jobstepname
00351000.br
00352000JOB ¬¬¬¬¬¬¬¬¬taskid
00353000.br
00354000JOB ¬¬¬¬¬¬¬¬¬procname.taskid
00355000.br
00356000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement defines the job whose JPAQ is
00357000to be searched, prior to the TSLPA, RERP, RSVC, or RAM list queues.
00358000A related set of ZAPs must lie within a single job;
00359000once a JOB card is accepted, it is invalid to supply
00360000a new one without first supplying a RESET card.
00361000This restriction was imposed to maintain compatability with
00362000the planned OS/VS2 release 2 (MVS) support.
00363000.sp 2
00364000.ce data
00365000THIS DESCRIPTION IS FOR PLANNING PURPOSES ONLY.
00366000THE WRITEUP WILL BE AMENDED WHEN JOB IS AVAILABLE.
00367000.sp 2
00368000NAME ¬¬¬¬¬¬¬¬.
00369000.br
00370000 ¬¬¬¬¬¬¬¬¬¬¬¬¬.csectname
00371000 ¬¬¬¬¬¬¬¬¬¬¬¬¬name csectname
00372000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement defines the module or CSECT for
00373000the VERIFYs, REPLACEs, and DUMPs which follow.
00374000The name may be a load module name, a period (.),
00375000or either one followed by a CSECT name.
00376000If the load module was scatter loaded,
00377000a CSECT name is required.
00378000A period represents the nucleus specified as a member of
00379000the dsname on SYSNUC,
00380000and is considered to be block loaded.
00381000The load address will be added to the relative address
00382000on each applicable statement (VER, DUMP, etc.)
00383000in the SCOPE of the NAME statement;
00384000the length will be used to check that each relative address
00385000is within bounds.
00386000.sp 2
00387000AVT ¬¬¬¬¬¬¬¬¬
00388000This statement defines the module and CSECT for the
00389000statements which follow.
00390000The AVT address is obtained from the CVT;
00391000the opcode is invalid if TCAM is not active.
00392000.sp 2
00393000BLDL ¬¬¬¬¬¬¬¬ name
00394000This statement defines the module and CSECT for
00395000the statements which follow.
00396000It is invalid if the designated name does not
00397000occur in the resident BLDL list.
00398000The length is set to include only the specified
00399000BLDL entry.
00400000.sp 2
00401000CVT ¬¬¬¬¬¬¬¬¬
00402000This statement defines the module,CSECT, and INDEX
00403000for the statements which follow.
00404000Any location in the CSECT containing the CVT may be patched:
00405000the locations should be given relative to the CVT.
00406000It is equivalent, in MVT, to:
00407000.hi 0
00408000.in 25
00409000.nj
00410000NAME      .IEAQBK00
00411000INDEX     IEACVT
00412000.fi l
00413000.in 9
00414000.hi 13
00415000.sp 2
00416000GOVRFLB ¬¬¬¬¬
00417000This statement, valid only for OS/MVT and OS/VS2,
00418000defines the module, CSECT, and INDEX for the statements which follow.
00419000Any location in the CSECT containing the main storage supervisor
00420000may be patched;
00421000the locations given should be relative to GOVRFLB.
00422000It is equivalent to:
00423000.hi 0
00424000.in 25
00425000.br
00426000NAME ¬¬¬¬¬.IEAQBK00
00427000.br
00428000INDEX ¬¬¬¬GOVRFLB
00429000.in 9
00430000.hi 13
00431000.sp 2
00432000HCT ¬¬¬¬¬¬¬¬¬
00433000This statement defines the module and CSECT for the HASP Control Table.
00434000It is invalid if HASP is not active,
00435000or if there is no local modification to the HASP SVC to return
00436000the HCT address in register 15.
00437000.sp 2
00438000IBMORG ¬¬¬¬¬¬
00439000This statement, valid only for OS/MVT and OS/VS2,
00440000defines the module and CSECT for the statements which follow.
00441000Any location in the SVC table may be patched;
00442000the location given should be relative to the IBM portion of the table.
00443000It is equivalent to:
00444000.hi 0
00445000.in 25
00446000Name ¬¬¬¬.IBMORG
00447000.in 9
00448000.hi 13
00449000.sp 2
00450000MSER ¬¬¬¬¬¬¬¬
00451000This statement defines the module and CSECT for
00452000the statements which follow.
00453000Any location in the Master Scheduler Resident Data Area
00454000and in the Master Common Area may be patched.
00455000It is equivalent to:
00456000.hi 0
00457000.in 25
00458000NAME ¬¬¬¬¬.IEEMSER
00459000.in 9
00460000.hi 13
00461000.sp 2
00462000QMRES ¬¬¬¬¬¬¬
00463000This statement defines the module and CSECT for
00464000the statements which follow.
00465000Any location in the Queue Manager Resident Data Area may be patched.
00466000It is equivalent to:
00467000.hi 0
00468000.in 25
00469000NAME ¬¬¬¬IEFJOB
00470000.in 9
00471000.hi 13
00472000.sp 2
00473000SCVT ¬¬¬¬¬¬¬¬
00474000This statement, valid only in OS/MVT and OS/VS2, defines the module, CSECT, and INDEX
00475000for the statements which follow.
00476000It is equivalent to:
00477000.hi 0
00478000.in 25
00479000NAME ¬¬¬¬¬.IGC003
00480000.br
00481000INDEX ¬¬¬¬IEABEND
00482000.in 9
00483000.hi 13
00484000.sp 2
00485000SMCA ¬¬¬¬¬¬¬¬
00486000This statement, valid only if the system was generated with the SMF option,
00487000is used to define the module and CSECT for the statements which follow.
00488000While it is not actually a CSECT, nor is it in the nucleus,
00489000it may be patched as if it were.
00490000.in 9
00491000.hi 13
00492000.sp 2
00493000 TACT ¬¬¬¬¬¬¬¬
00494000This statement, valid only in OS/MVT, defines the module, CSECT, and INDEX
00495000for the statements which follow.
00496000Any location in the CSECT containing the permanent TCBs,
00497000transient areas, and CVT amy be patched;
00498000the location given should be relative to the
00499000Transient Area Control Table.
00500000It is equivalent to:
00501000.hi 0
00502000.in 25
00503000NAME ¬¬¬¬¬.IEAQBK00
00504000.br
00505000INDEX ¬¬¬¬IEAQTAQ
00506000.in 9
00507000.hi 13
00508000.sp 2
00509000TCB ¬¬¬¬¬¬¬¬¬job
00510000.br
00511000TCB ¬¬¬¬¬¬¬¬¬job.step
00512000.br
00513000TCB ¬¬¬¬¬¬¬¬¬id
00514000.br
00515000TCB ¬¬¬¬¬¬¬¬¬proc.id
00516000.br
00517000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement defines the module, CSECT,
00518000and INDEX for the statements which follow.
00519000Any location in the jobstep tcb of the specified job or
00520000started task may be patched:
00521000addresses shhould be given relative to the TCB.
00522000Note that floating-point registers are stored at a negative
00523000displacement.
00524000.sp 1
00525000¬¬¬¬¬¬¬¬¬¬¬¬¬THE TCB OPCODE IS DESCRIBED FOR PLANNING PURPOSES ONLY.
00526000THE WRITEUP WILL BE AMENDED WHEN IT IS AVAILABLE.
00527000.sp 2
00528000TSCVT ¬¬¬¬¬¬¬
00529000This statement, valid onlin with OS/MVT and OS/VS2,
00530000is used to define the module and CSECT for the statements which follow.
00531000It is an invalid statement if TSO is not active.
00532000Any location in the Time Shareing Communications Vector Table
00533000may be patched;
00534000locations should be given relative to the TSCVT.
00535000.sp 2
00536000UCB=cuu
00537000.br
00538000UCB cuu ¬¬¬¬¬
00539000.br
00540000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement defines the module, CSECT, and INDEX for the
00541000statements which follow.
00542000Any location in the I/O Supervisor may be patched;
00543000the location given should be relative to the specified UCB.
00544000It is equivalent, in MVT, to:
00545000.hi 0
00546000.in 25
00547000NAME ¬¬¬¬.IEAQFX00
00548000.br
00549000INDEX ¬¬¬ucbloc
00550000.in 9
00551000.hi 13
00552000.sp 2
00553000UCM ¬¬¬¬¬¬¬¬¬BASE
00554000.br
00555000UCM ¬¬¬¬¬¬¬¬¬HARDCOPY
00556000.br
00557000UCM ¬¬¬¬¬¬¬¬¬MASTER
00558000.br
00559000UCM ¬¬¬¬¬¬¬¬¬MCS
00560000.br
00561000UCM ¬¬¬¬¬¬¬¬¬PREFIX
00562000.br
00563000UCM ¬¬¬¬¬¬¬¬¬ID=xx
00564000.br
00565000UCM ¬¬¬¬¬¬¬¬¬UNIT=cuu
00566000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement defines the module, CSECT, and INDEX
00567000for the statements which follow.
00568000Except for UCM BASE, the INDEX is set as an absolute address
00569000rather than an entrypoint name or relative address.
00570000HARDCOPY, MASTER, and MCS are only valid if the system was
00571000generated with the Multiple Console Support option.
00572000BASE, MCS, and PREFIX refer to UCM areas not related to
00573000a specific console;
00574000UCM MASTER and HARDCOPY refer to the UCME for the console assigned to
00575000the designated function;
00576000UCM ID=xx refers to the UCME whose ID (in decimal) is xx;
00577000and UCM UNIT=cuu refers to the UCME for the designated device.
00578000They are equivalent to:
00579000.hi 0
00580000.in 25
00581000NAME ¬¬¬¬¬.IEEUCMC
00582000.br
00583000INDEX ¬¬¬¬IEECUCB (for BASE)
00584000.br
00585000 ¬¬¬¬¬¬¬¬¬¬forced absolute address
00586000.br
00587000 ¬¬¬¬¬¬¬¬¬¬(for other than BASE)
00588000.in 9
00589000.hi 13
00590000.sp 2
00591000USERORG ¬¬¬¬¬
00592000This statement, valid only for OS/MVT and OS/VS2,
00593000defines the module, CSECT, and INDEX
00594000for the statements which follow.
00595000Any location in the SVC table may be patched;
00596000the location given should be relative to the user portion
00597000of the table.
00598000It is equivalent to:
00599000.hi 0
00600000.in 25
00601000NAME ¬¬¬¬¬.IBMORG
00602000.br
00603000INDEX ¬¬¬¬USERORG
00604000.in 9
00605000.hi 13
00606000.sp 2
00607000BASE=xx ¬¬¬¬¬
00608000.br
00609000BASE xx ¬¬¬¬¬
00610000.br
00611000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to give a value to be subtracted
00612000from the address given in a VER or REP.
00613000It is normally the relative address of the CSECT,
00614000as printed in the assembly listing.
00615000The effect of this statement is retained until
00616000the next statement containing or implying a name
00617000(DUMP, NAME, INDEX, CVT, UCB, ...).
00618000If a previous BASE is in effect,
00619000the statement has a cummulative effect:
00620000the amount subtracted is the sum of the BASEs.
00621000.sp 2
00622000INDEX=xx ¬¬¬¬
00623000.br
00624000INDEX xx ¬¬¬¬
00625000.br
00626000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to give a value to be added to
00627000the address given in a VER, REP, DUMP, etc.
00628000It is normally the relative address of a CSECT from a
00629000link-edit listing.
00630000The effect of this statement is retained until the next statement
00631000containing or implying a name
00632000(CVT, DUMP, INDEX, NAME, etc.);
00633000all previous BASE or INDEX specifications remain in effect.
00634000.sp 2
00635000INDEX ¬¬¬¬¬¬¬name
00636000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to give a value to be added to the
00637000address given in a VER, REP, DUMP, etc.
00638000It resets all previous BASE and INDEX specifications.
00639000The value used is the address of the CSECT or entry point specified,
00640000adjusted by the CSECT or module address of the preceeding name statement.
00641000.sp 2
00642000LIB ¬¬¬¬¬¬¬¬¬AUTO
00643000.br
00644000LIB ¬¬¬¬¬¬¬¬¬ddname
00645000.br
00646000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to specify the ddname of the
00647000data set to be used to resolve CSECT names (other than nucleus CSECTs)
00648000in statements which follow.
00649000If AUTO is specified, modules found in TSLPA are assumed to be on CMDLIB;
00650000modules whose names begin with IFG or IG are assumed to be on SVCLIB;
00651000all other modules are assumed to be on LINKLIB.
00652000AUTO is initially in effect,
00653000and remains in effect untill overrriden by an LIB statement.
00654000.sp 2
00655000VERIFY ¬¬¬¬¬¬rr dd
00656000.br
00657000VER ¬¬¬¬¬¬¬¬¬rr dd
00658000.br
00659000V ¬¬¬¬¬¬¬¬¬¬¬rr dr
00660000.br
00661000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to prevent inadvertently
00662000altering the wrong location.
00663000The data at the specified relative address, r, adjusted by
00664000the address from the NAME statement and any BASE or INDEX in effect,
00665000is compared to the specified data,
00666000and, if a match does not occur,
00667000a switch (called the NOGO switch) is set,
00668000causing all REPs between the preceeding RESET (or beginning of input)
00669000and the following RESET (or end of data) to be suppressed.
00670000.sp 1
00671000 ¬¬¬¬¬¬¬¬¬¬¬¬¬The location must be specified as 2, 4, or 6 hex digits,
00672000preceeded (if negative) by a hyphen (-).
00673000The data may be specified as:
00674000.in 25
00675000.hi 5
00676000.sp 1
006770001). an even number of hex digits
00678000.sp 1
006790002). a character string enclosed in apostrophes (');
00680000an apostrophe is represented by 2 apostrophes
00681000(i.e., "CAN'T" is entered as "CAN''T").
00682000.sp 1
006830003). any combination of 1). and 2).
00684000.sp 1
006850004). any of the above,
00686000separated by commas (,).
00687000.in 9
00688000.hi 13
00689000.sp 2
00690000REPLACE ¬¬¬¬¬rr dd
00691000.br
00692000REP ¬¬¬¬¬¬¬¬¬rr dd
00693000.br
00694000R ¬¬¬¬¬¬¬¬¬¬¬rr dd
00695000.br
00696000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to replace data
00697000at the specified relative location, r, as adjusted by the NAME,
00698000BASE, and INDEX statements in effect.
00699000See VER for a description of formats.
00700000The effect of a REP is suppressed if the NOGO switch is set,
00701000either because of a REP failure (see REP) or by an invalid
00702000control statement (however, see GO and RESET).
00703000.sp 2
00704000CONSOLE
00705000.br
00706000CONSOLE ¬¬¬¬¬ID=cc
00707000.br
00708000CONSOLE ¬¬¬¬¬ID=cca
00709000.br
00710000CONSOLE ¬¬¬¬¬UNIT=ccu
00711000.br
00712000CONSOLE ¬¬¬¬¬DSRT=ddddrrrr
00713000.br
00714000CON
00715000.br
00716000CON ¬¬¬¬¬¬¬¬¬ID=cc
00717000.br
00718000CON ¬¬¬¬¬¬¬¬¬ID=cca
00719000.br
00720000CON ¬¬¬¬¬¬¬¬¬UNIT=ccu
00721000.br
00722000CON ¬¬¬¬¬¬¬¬¬DSRT=ddddrrrr
00723000.br
00724000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to cause subsequent input
00725000to be from the CRT (if a local 2260 or 3270 is assigned),
00726000the terminal (if TSO),
00727000or the operators console (via WTO/WTOR and REPLY/MODIFY).
00728000A specific console may be assigned by a two hex digit UCMID
00729000(with an optional area identifier from A-Z) or
00730000by a unit address.
00731000Routing codes and descriptors may be specified in the form
00732000ddddrrrr, where d is a 16 bit descriptor mask and
00733000r is a 16 bit routing code mask.
00734000.sp 2
00735000DUMP ¬¬¬¬¬¬¬¬.
00736000.br
00737000DUMP ¬¬¬¬¬¬¬¬.csectname
00738000.br
00739000DUMP ¬¬¬¬¬¬¬¬name
00740000.br
00741000DUMP ¬¬¬¬¬¬¬¬name csectname
00742000.br
00743000DUMPB ¬¬¬¬¬¬¬.
00744000.br
00745000DUMPB ¬¬¬¬¬¬¬.csectname
00746000.br
00747000DUMPB ¬¬¬¬¬¬¬name
00748000.br
00749000DUMPB ¬¬¬¬¬¬¬name csectname
00750000.br
00751000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to print a dump of the specified
00752000module or CSECT,
00753000prior to applying any REPs.
00754000The dump will contain a display of 16 bytes/line, in the format:
00755000.ll 120
00756000.nj
00757000.hi 0
00758000.in 0
00759000.sp 2
00760000R:b/rrrrrrb/A:b/aaaaaab/b/xxxxxxxxb/xxxxxxxxb/b/b/xxxxxxxxb/xxxxxxxxb/b/*eeeeeeeeeeeeeeee*
00761000.ll 70
00762000.fi l
00763000.hi 5
00764000.in 22
00765000.sp 2
00766000  Where r is the relative address in hex
00767000.in 28
00768000.br
00769000  a is the absolute address in hex
00770000.br
00771000  x is the data in hex
00772000.br
00773000  e is the data the data in EBCDIC, with unprintable characters
00774000displayed as periods (.) or quotes (").
00775000.br
00776000 b/ is a blank
00777000.in 9
00778000.hi 13
00779000.sp 1
00780000 ¬¬¬¬¬¬¬¬¬¬¬¬¬A character is considered unprintable if it
00781000does not appear on the CRT;
00782000if called from a non-CRT TSO terminal or run in batch
00783000without a CRT,
00784000a character is unprintable if it does not appear un the PN train.
00785000A cent sign (¢) is considered unprintable on the 2260
00786000since it is used as an SMI (>|).
00787000A quote rather than a period will be substituted for each
00788000unprintable character only for the 2260;
00789000quotes appear on the 2260 as an error symbol (_<>¬).
00790000.sp 2
00791000DUMP ¬¬¬¬¬¬¬¬=rr ss
00792000.br
00793000DUMPB ¬¬¬¬¬¬¬=rr ss
00794000.br
00795000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to print a partial dump of the
00796000CSECT or module identified in the preceeding NAME statement.
00797000r is 2, 4, or 6 hex digits,
00798000preceeded by a hyphen if negative;
00799000s is 2, 4, or 6 hex digits.
00800000.sp 1
00801000 ¬¬¬¬¬¬¬¬¬¬¬¬¬The data beginning at r,
00802000adjusted by the preceeding NAME, INDEX, and BASE statements,
00803000is displayed in the format shown above.
00804000The number of bytes dumped will be given by s,
00805000however the dump will always begin and end on a quadword
00806000(16 byte) boundary.
00807000.sp 2
00808000DUMPA ¬¬¬¬¬¬¬.
00809000.br
00810000DUMPA ¬¬¬¬¬¬¬.csectname
00811000.br
00812000DUMPA ¬¬¬¬¬¬¬name
00813000.br
00814000DUMPA ¬¬¬¬¬¬¬name csectname
00815000.br
00816000DUMPA ¬¬¬¬¬¬¬=rr ss
00817000.br
00818000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement has the same effect as DUMP,
00819000except that VERs and REPs will be processed prior
00820000to printing the dump.
00821000.sp 2
00822000DUMPT ¬¬¬¬¬¬¬.
00823000.br
00824000DUMPT ¬¬¬¬¬¬¬.csectname
00825000.br
00826000DUMPT ¬¬¬¬¬¬¬name
00827000.br
00828000DUMPT ¬¬¬¬¬¬¬name csectname
00829000.br
00830000DUMPT ¬¬¬¬¬¬¬=rr ss
00831000.br
00832000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement has the same effect as DUMP,
00833000except that VERs and REPs will be processed will be processed
00834000prior to printing the dump and that the format of the dump is different.
00835000Each halfword will be treated as the beginning of an instruction
00836000for the purpose of printing an opcode under the hex value.
00837000The dump will contain a display of 16 bytes/line, in the format:
00838000.ll 120
00839000.hi 0
00840000.in 0
00841000.nj
00842000rrrrrrb/aaaaaab/b/xxxxb/xxxxb/b/xxxxb/xxxxb/b/b/xxxxb/xxxxb/b/xxxxb/xxxxb/b/*eeeeeeeeeeeeeeee*
00843000b/b/b/b/b/b/b/b/b/b/b/b/b/b/b/oooob/oooob/b/oooob/oooob/b/b/oooob/oooob/b/oooob/oooo
00844000.fi l
00845000.ll 70
00846000.in 22
00847000.hi 5
00848000.sp 1
00849000 Where r is the hex relative address
00850000.in 28
00851000a is the hex absolute address
00852000.br
00853000x is the hex data
00854000.br
00855000e is the EBCDIC data
00856000.br
00857000o is the opcode for the above data,
00858000truncated to 5 characters
00859000.br
00860000b/ is a blank.
00861000.in 9
00862000.hi 13
00863000.sp 2
00864000HELP ¬¬¬¬¬¬¬¬This statement is used to obtain a list
00865000of valid command names.
00866000If a CRT is assigned,
00867000or if MZAP is being run from a TSO terminal,
00868000attention mode is forced and a $HELP is simulated
00869000to enable the user to set the speed or hold options;
00870000the list of commands will begin when a null line is entered.
00871000The list can be terminated by entering an attention message
00872000of "STOP" from the terminal/CRT or by the operator command:
00873000"P id", where id is the jobname or START id.
00874000.sp 2
00875000HELP cmd ¬¬¬¬
00876000.br
00877000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement is used to obtain a list of valid operands
00878000for the designated input statement.
00879000If a CRT is assigned or MZAP was invoked via TSO,
00880000attention mode is forced and a $HELP is simulated
00881000to enable the user to set the speed or hold options;
00882000the list of operands will begin when a null line is entered.
00883000The list can be terminated by entering an attention message
00884000of "STOP" form the terminal/CRT or by the operator command:
00885000"P id,STOP", where id is the jobname or START id.
00886000.sp 2
00887000SETPTR ¬¬¬¬¬¬refdigit *
00888000.br
00889000<- ¬¬¬¬¬¬¬¬¬¬refdigit *
00890000.br
00891000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement, during dump processing or VERIFY/REP
00892000processing;
00893000causes the limits (address,length) and index currently in effect
00894000to be saved in one of 16 MZAP "reference pointers";
00895000refdigit, which may be any hex digit from 0 to F,
00896000is used to identify this information for subsequent use
00897000(see POINT).
00898000.sp 2
00899000SETPTR ¬¬¬¬¬¬refdigit ptr len
00900000.br
00901000<- ¬¬¬¬¬¬¬¬¬¬refdigit ptr len
00902000.br
00903000SETPTR ¬¬¬¬¬¬refdigit ptr len-pfx
00904000.br
00905000<- ¬¬¬¬¬¬¬¬¬¬refdigit ptr len-pfx
00906000.br
00907000SETPTR,plen ¬refdigit ptr len
00908000.br
00909000<-,plen ¬¬¬¬¬refdigit ptr len
00910000.br
00911000SETPTR,plen ¬refdigit ptr len-pfx
00912000.br
00913000<-,plen ¬¬¬¬¬refdigit ptr len-pfx
00914000.br
00915000 ¬¬¬¬¬¬¬¬¬¬¬¬¬This statement,
00916000during dump or VERIFY/REPLACE processing,
00917000saves the limits (address, length) and index of a control block
00918000as described below;
00919000refdigit, which may be any hex digit from 0 to F,
00920000is used to identify this information for subsequent use
00921000(see POINT).
00922000.sp 1
00923000 ¬¬¬¬¬¬¬¬¬¬¬¬¬plen, if present, defines the type of pointer;
00924000it may have the values 15, 16, 24, or 32 (the default);
00925000in addition, Y, H, AL3, and A are synonymous to 15, 16, 24, and 32.
00926000(Only the last 24 bits of a 32 bit pointer are used.)
00927000.sp 1
00928000 ¬¬¬¬¬¬¬¬¬¬¬¬¬ptr must be an even number of hex digits,
00929000giving the relative address of a pointer.
00930000In what follows, "(ptr)" denotes the contents of the designated location.
00931000.sp 1
00932000 ¬¬¬¬¬¬¬¬¬¬¬¬¬len must be an even number of hex digits,
00933000giving the size of the control block pointed to
00934000(excluding prefix, if any).
00935000.sp 1
00936000 ¬¬¬¬¬¬¬¬¬¬¬¬¬pfx, if specified, must be an even number of hex digits,
00937000giving the length in bytes of the control block prefix.
00938000The hyphen separating len and pfx may be preceeded by blanks,
00939000but may not be succeeded by blanks.
00940000pfx is assumed to be 0 if not specified.
00941000.sp 1
00942000 ¬¬¬¬¬¬¬¬¬¬¬¬¬When the specified pointer, (ptr),
00943000is accessed, the following are computed:
00944000.nj
00945000.in 25
00946000.hi 0
00947000address    is    (ptr)-pfx
00948000length     is    len + pfx
00949000index      is    (ptr)
00950000relative
00951000 index     is    index - address = pfx
00952000.fi l
00953000.in 10
00954000.hi 12
00955000 ¬¬¬¬¬¬¬¬¬¬¬¬The address, length, and relative index are then
00956000saved in the requested reference pointer.
00957000.sp 2
00958000POINT ¬¬¬¬¬¬REF refdigit
00959000.br
00960000-> ¬¬¬¬¬¬¬¬¬REF refdigit
00961000.br
00962000 ¬¬¬¬¬¬¬¬¬¬¬¬The address, length, and relative index last set into
00963000the designated reference pointer are made current;
00964000the index may be modified by a subsequent BASE or INDEX (hex only)
00965000statement.
00966000.sp 2
00967000POINT ¬¬¬¬¬¬ptr len
00968000.br
00969000-> ¬¬¬¬¬¬¬¬¬ptr len
00970000.br
00971000POINT ¬¬¬¬¬¬ptr len-pfx
00972000.br
00973000-> ¬¬¬¬¬¬¬¬¬ptr len-pfx
00974000.br
00975000POINT,plen ¬ptr len
00976000.br
00977000->,plen ¬¬¬¬ptr len
00978000.br
00979000POINT,plen ¬ptr len-pfx
00980000.br
00981000->,plen ¬¬¬¬ptr len-pfx
00982000.br
00983000 ¬¬¬¬¬¬¬¬¬¬¬¬The address, length, and relative index for a control block
00984000are made current.
00985000See SETPTR for an explanation of the operands.
00986000.pa
00987000.in 0
00988000.hi 0
00989000V. ¬JCL
00990000.in 5
00991000.sp 1
00992000MZAP requires the following JCL statements:
00993000.nj
00994000.sp 1
00995000 1)  //       EXEC  PGM=MOREZAP,REGION=100K
00996000 2)  //STEPLIB  DD  ...
00997000 3)  //SYSNUC   DD  DSN=SYS1.NUCLEUS(IEANUC0x),DISP=SHR
00998000 4)  //SVCLIB   DD  DSN=SYS1.SVCLIB,DISP=SHR
00999000 5)  //CMDLIB   DD  DSN=SYS1.CMDLIB,DISP=SHR
01000000 6)  //LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR
01001000 7)  //         DD  ...
01002000 8)  //ddn      DD  ...
01003000 9)  //IEFRDER  DD  UNIT=cuu
0100400010)  //SYSPRINT DD  SYSOUT=A
0100500011)  //SYSIN    DD  *
01006000.fi
01007000.in 9
01008000.sp 1
010090001.) The REGION size required will vary depending on the
01010000size of the CESD for the nucleus and on the number of DD
01011000statements.
01012000.sp 1
010130002) This statement is not required if MOREZAP is located in
01014000a JOBLIB or in the system link libraries.
01015000.sp 1
010160003) This statement is required;
01017000it must specify the nucleus currently loaded.
01018000.sp 1
010190004) This statement is required if any module in SVCLIB is referenced
01020000in a NAME or DUMP statement.
01021000.sp
010220005) This statement is required if any module in the TSLPA is referenced
01023000in a NAME or DUMP statement.
01024000.sp
010250006) This statement is required if any module in the system
01026000LINK library is referenced in a NAME or DUMP statement.
01027000If SYS1.PARMLIB(LNKLST00) specified data sets concatemated to SYS1.LINKLIB,
01028000then these data sets must be specified on concatenated DD statements,
01029000in the same order as in LNKLST00.
01030000.sp 1
010310007) See 6.
01032000.sp 1
010330008) Optional additional libraries may be specified;
01034000the ddname should be the same as the operand of the LIB
01035000statement which specifies the data set.
01036000.sp 1
010370009) Optional 2260 (960 byte screen, local mode) or
010380003277 (1920 byte screen, local mode, EBCDIC) for
01039000control statement and attention input.
01040000Any ddname desired may be used,
01041000however IEFRDER is suggested if MZAP is
01042000to be invoked via a START command.
01043000.sp 1
0104400010) Printed output.
01045000If no BLKSIZE is specified, 141 will be used for unit record
01046000and 685 for tape or disk.
01047000The user should specify the largest blocksize acceptable to
01048000the system output writer at his installation.
01049000If the installation is using ASP,
01050000the blocksize should not exceed the ASP buffer size.
01051000.sp 1
0105200011) Control statement input.
01053000Additional input may be requested from the operator with
01054000a CONSOLE statement.
01055000.in 5
01056000.sp 2
01057000The required JCL may be preceeded by a JOB card and submitted
01058000through the input stream, or by SUBMIT.
01059000Alternatively, the user may add the JCL to SYS1.PROCLIB,
01060000and invoke MZAP with a START command.
01061000See the Operators Reference and JCL Reference for more
01062000information on catalogued procedures and START commands.
01063000.in 8
01064000.nj
01065000.sp 2
01066000//        EXEC   PGM=IEBUPDTE,PARM=NEW
01067000//SYSUT2    dd   DSN=SYS1.PROCLIB,DISP=MOD
01068000//SYSPRINT  DD   SYSOUT=A
01069000//SYSIN     DD   DATA
01070000.li
01071000./         ADD   NAME=MZAP,LIST=ALL
01072000.li
01073000./      NUMBER   NEW1=1000,INCR=1000
01074000//MZAP    PROC   NUC=1
01075000//IEFPROC EXEC   PGM=MZAP
01076000//STEPLIB   DD   DSN=SYS2.ASM.XEQ,DISP=SHR
01077000//SYSNUC    DD   DSN=SYS1.NUCLEUS(IEANUC0&NUC),DISP=SHR
01078000//IEFRDER   DD   UNIT=290
01079000//SVCLIB    DD   DSN=SYS1.SVCLIB,DISP=SHR
01080000//LINKLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR
01081000//          DD   DSN=SYS2.linklib,disp=SHR
01082000//CMDLIB    DD   DSN=SYS1.CMDLIB,DISP=SHR
01083000/*
01084000.sp 1
01085000       Adding PROC to PROCLIB
01086000              (Example 1)
01087000.sp 4
01088000           S  MZAP.KENT,046,NUC=2
01089000.sp 1
01090000       Starting MZAP using sample PROC
01091000              (Example 2)
01092000.hi 0
01093000.in 0
01094000.pa
01095000VI. ¬MESSAGES
01096000.in 5
01097000.fi l
01098000.sp 1
01099000Except for prompting, listing of input,
01100000module/csect/control block dumps, and debug output,
01101000all messages produced by MZAP have a common format:
01102000.in 15
01103000.sp 2
01104000MZPfnnabtext
01105000.in 5
01106000.sp 1
01107000Where f identifies the functional area:
01108000.in 18
01109000.hi 3
01110000.sp 1
011110000 ¬common
01112000.br
011130001 ¬initialization
01114000.br
011150002 ¬control card scan
01116000.br
01117000H ¬HELP
01118000.br
01119000D ¬DEBUG
01120000.br
011210003 ¬CDE search
01122000.br
011230004 ¬ESD processing and module/csect/location listing
01124000.br
011250005 ¬dump processing
01126000.br
011270006 ¬VER/REP processing
01128000.br
011290007 ¬final housekeeping, reinitialization, and termination
01130000.hi 0
01131000.sp 1
01132000.in 10
01133000nn is a decimal message number within function
01134000.sp 1
01135000a ¬is an action indicator:
01136000A if action required, I otherwise.
01137000.in 5
01138000.sp 2
01139000When a message relates to a specific input statement and
01140000does not immediately follow the statement,
01141000the message text will normally begin with the
011420005 digit sequence number assigned when that statement was read.
01143000.in 0
01144000.hi 0
01145000.pa
01146000.ce data
01147000Common Messages_______________
01148000.end
01149000.hi 6
01150000.sp 3
01151000>|
01152000.br
01153000sssss>
01154000.br
01155000sssss>|
01156000.br
01157000sssss
01158000 ¬¬¬¬¬¬Input required from the terminal, 2260, or 3270.
01159000.sp 2
01160000EH?>
01161000.br
01162000EH?>|
01163000.br
01164000 ¬¬¬¬¬¬Attention mode is in effect.
01165000Key in attention input or terminated attention mode
01166000with a null line.
01167000.sp 2
01168000MZP001I I/O ERROR ON 2260 - USE CONSOLE
01169000.br
01170000MZP001I I/O ERROR ON 3270 - USE CONSOLE
01171000.in 10
01172000ROUTCDE: 1,10,11
01173000.br
01174000DESC: ¬¬¬1
01175000.in 0
01176000.sp 1
01177000 ¬¬¬¬¬¬Unrecoverable I/O error on the CRT.
01178000Interactive I/O will be done via the WTO/WTOR/MODIFY interface.
01179000.sp 2
01180000MZP0002I $HELP: $HOLD|$AUTO CON STOP $PAGE|$HALFAST|$FAST|$SLOW
01181000.br
01182000.sp 1
01183000 ¬¬¬¬¬¬Either HELP, $HELP or an invalid attention was entered.
01184000The valid attention messages are listed,
01185000with mutually exclusive messages separated by logical OR (|).
01186000.sp 2
01187000MZP0003A
01188000.br
01189000.in 10
01190000ROUTCDE: 9,10
01191000.br
01192000DESC: ¬¬¬2
01193000.br
01194000.in 0
01195000.sp 1
01196000 ¬¬¬¬¬Input required via REPLY.
01197000.sp 2
01198000sssss text
01199000.in 10
01200000ROUTCDE: 9,10
01201000.br
01202000DESC: ¬¬¬7
01203000.sp 1
01204000 ¬¬¬¬¬¬Listing of user's input.
01205000.sp 1
01206000 ¬¬¬¬¬¬The designated text was read and assigned the sequence number
01207000sssss.
01208000The output is to SYSPRINT, terminal (if TSO CRT), or CRT (if assigned).
01209000If the CONSOLE option is in effect, no CRT is assigned,
01210000and MZAP is in batch, a WTO is used.
01211000.pa
01212000.ll 100
01213000.ce data
01214000Initialization Messages_______________________
01215000.end
01216000.ll 70
01217000.sp 2
01218000.in 0
01219000.hi 6
01220000.sp 2
01221000MZP100I MOREZAP VERSION mm/dd/yy hh.mm STARTING
01222000.in 10
01223000ROUTCDE: 9,10
01224000.br
01225000DESC: ¬¬¬6
01226000.in 0
01227000.sp 1
01228000 ¬¬¬¬¬¬MZAP has been invoked.
01229000Initialization status and error messages may follow.
01230000.sp 2
01231000MZP101I UNAUTHORIZED CPU FOR MZAP
01232000.in 10
01233000ROUTCDE: 1,9,11
01234000.br
01235000DESC: ¬¬¬1
01236000.in 0
01237000.sp 1
01238000 ¬¬¬¬¬¬MZAP is not running on the machine it was destributed for;
01239000if you wish to use MZAP, order a separate copy for each CPU
01240000on which it is to be used.
01241000.sp 2
01242000MZP102I SYSPRINT CARD MISSING - OUTPUT ON CONSOLE
01243000.br
01244000MZP102I SYSPRINT CARD MISSING - OUTPUT ON TERMINAL
01245000.in 10
01246000ROUTCDE: 9,10
01247000.br
01248000DESC: ¬¬¬7
01249000.in 0
01250000.sp 1
01251000 ¬¬¬¬¬¬No SYSPRINT DD card is present, or, if TSO,
01252000no suitable ALLOC was done for SYSPRINT.
01253000Output will be via TPUT, if TSO,
01254000to the CRT in batch,
01255000and to the console via WTO if there is no CRT
01256000assigned in batch.
01257000.sp 2
01258000MZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE
01259000.br
01260000MZP103I SYSIN DD CARD MISSING - INPUT FROM KEYBOARD
01261000MZP103I SYSIN DD CARD MISSING - INPUT FROM TERMINAL
01262000.in 10
01263000ROUTCDE: 9,10
01264000.br
01265000DESC: ¬¬¬7
01266000.in 0
01267000.sp 1
01268000 ¬¬¬¬¬¬No appropriate ALLOC(TSO) or DD card for SYSIN.
01269000Input will be via TPUT for TSO;
01270000for batch, input will be from the keyboard of the
01271000CRT, if one is assigned;
01272000otherwise, input will be via REPLY to WTOR.
01273000.sp 2
01274000MZP104I SYSNUC MISSING OR INVALID
01275000.in 10
01276000ROUTCDE: 9,10,11
01277000.br
01278000DESC: ¬¬¬6
01279000.in 0
01280000.sp 1
01281000 ¬¬¬¬¬¬Either there is no appropriate ALLOC(TSO) or DD card
01282000for SYSNUC, or the DSNAME is not SYS1.NUCLEUS,
01283000or it is not located on the IPL volume,
01284000or the member name, IEANUC0x, is missing or is not the
01285000nucleus most recently IPLed.
01286000.sp 2
01287000MZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED
01288000.in 10
01289000ROUTCDE: 10,11
01290000.br
01291000DESC: ¬¬¬7,8,9
01292000.in 0
01293000.sp 1
01294000 ¬¬¬¬¬¬An  ALLOC(TSO) or DD card exists for a graphics device
01295000other than a 960 byte local 2260 or a 1980 byte local 3277.
012960002250, 2280, etc., are all unsupported, as are all remote CRTs.
01297000Sorry 'bout that!
01298000.in 0
01299000.hi 0
01300000.pa
01301000.ll 100
01302000.ce data
01303000Input Messages______________
01304000
01305000NOTE: NOGO____ switch will be set for all MZP2 messages.
01306000.end
01307000.ll 70
01308000.sp 2
01309000.in 0
01310000.hi 6
01311000MZP201I STATEMENT MISPLACED
01312000.sp 1
01313000 ¬¬¬¬¬¬VERIFY, REPLACE, POINT, etc. statement not
01314000in the range of NAME statement.
01315000.in 0
01316000.sp 2
01317000MZP202I INVALID OPCODE
01318000.sp 1
01319000 ¬¬¬¬¬¬The first non-blank column of the input statement
01320000does not contain a valid MZAP opcode, or the opcode is
01321000invalid but has restrictions on its use.
01322000For example, this message is produced if a GO statement
01323000is present in SYSIN.
01324000.sp 2
01325000MZP203I DEVICE NOT FOUND
01326000.sp 1
01327000 ¬¬¬¬¬¬An input statement, such a UCB, specified as
01328000device address which was not present in any UCB.
01329000.sp 2
01330000MZP204I INVALID STATEMENT
01331000.sp 1
01332000 ¬¬¬¬¬¬A syntax error is present in an input statement.
01333000A logical OR (|) will be displaYED BELOW THE COLUMN
01334000AT WHICH THE ERROR WAS DETECTED.
01335000For an omitted operand, this will bee the end of the statement.
01336000For an invalid negative hex operand,
01337000this will be the end of the operand,
01338000not___ under the hyphen.
01339000.sp 2
01340000MZP205I NOT A VALID CONSOLE
01341000.sp 1
01342000 ¬¬¬¬¬¬The user specified a UCMID higher than the number of consoles
01343000specified in the system,
01344000he specified a unit (cuu) which is not defined as
01345000an operators' console.
01346000.sp 2
01347000MZP206I NOT MCS
01348000.sp 1
01349000 ¬¬¬¬¬¬An operand was specified on a UCM statement
01350000which is only valid for a system with the MCS
01351000(Multiple Console Support) option.
01352000.sp 2
01353000MZP207I HARDCPY=SYSLOG - NO UCM
01354000.sp 1
01355000 ¬¬¬¬¬¬The statement UCM HARDCOPY is only valid if
01356000a console device, rather than SYSLOG, is assigned the
01357000SYSLOG function.
01358000.sp 2
01359000MZP208I CONSOLE NOT ACTIVE
01360000.sp 1
01361000 ¬¬¬¬¬¬The user specified a console which is ONLINE or
01362000OFFLINE, rather than in CONSOLE status.
01363000.sp 2
01364000MZP209I NOT SMF
01365000.sp 1
01366000 ¬¬¬¬¬¬The user gave an input statement, such as SMCA,
01367000which is only valid if the system is defined with
01368000the SMF (System Management Facility) option.
01369000.sp 2
01370000MZP210I KEY xxxxxxxx?
01371000.sp 1
01372000 ¬¬¬¬¬¬The user gave a KEY statement with an invalid or
01373000omitted operand.
01374000He must reply with a valid key,
01375000consisting of a scrambled version
01376000of the displayed hexadecimal number.
01377000If you don't know the magic number,
01378000see your installation systems programmer for an explanation of why
01379000you are not allowed to use this program!
01380000.sp 2
01381000MZP211I INVALID KEY
01382000.sp 1
01383000 ¬¬¬¬¬¬The user gave an invalid reply to MZP210I,
01384000or supplied an invalid operand on a KEY statement.
01385000This message will be followed by MZP210I.
01386000.sp 2
01387000MZP212I TCAM IS NOT ACTIVE
01388000.sp 1
01389000 ¬¬¬¬¬¬The user has requested a function,
01390000such as AVT, which is only valid while TCAM is active.
01391000.sp 2
01392000MZP213I TSO IS NOT ACTIVE
01393000.sp 1
01394000 ¬¬¬¬¬¬The user has requested a function,
01395000such as TSCVT, which is only valid while TSO is active.
01396000.sp 2
01397000MZP214I HASP IS NOT ACTIVE
01398000.sp 1
01399000 ¬¬¬¬¬¬The user has requested a function,
01400000such as HCT, which is only valid while HASP is active.
01401000.sp 2
01402000MZP215I NAME NOT IN BLDL LIST
01403000.sp 1
01404000 ¬¬¬¬¬¬ IThe user has supplied a BLDL statement which
01405000specifies a module not found in the BLDL list(s)
01406000used in the current IPL.
01407000An alternative explanation is that, since the latest IPL,
01408000the appropriate BLDL entry has been REPed to another name.
01409000.hi 0
01410000.in 0
01411000.pa
01412000.ce data
01413000HELP Messages_____________
01414000.end
01415000.hi 6
01416000.sp 2
01417000MZPH01I ALL
01418000.sp 1
01419000 ¬¬¬¬¬¬A display of all command names is in effect.
01420000This message will remain on line 0 of the CRT
01421000until the display is complete;
01422000it will not appear on the console or SYSPRINT.
01423000.sp 2
01424000MZPH01I cmd
01425000.sp 1
01426000 ¬¬¬¬¬¬A display of the operands of the designated command
01427000is in effect.
01428000See MZPH01I ALL.
01429000.sp 2
01430000MZPH02I USE HELP <cmd> FOR OPERANDS OF <cmd>
01431000.sp 1
01432000 ¬¬¬¬¬¬This is the first line of output for HELP ALL.
01433000If a supported CRT is assigned (960 byte local 2260,
014340001920 byte 3277),
01435000or if MZAP is being called from TSO,
01436000this  will be followed by an MZP002I message;
01437000enter any desired attention messages and then
01438000terminate attention mode with a null line.
01439000.sp 2
01440000MZPH03I OPCODE cmd
01441000.sp 1
01442000 ¬¬¬¬¬¬The designated opcode may be used in input statements.
01443000.sp 2
01444000MZPH04I INVALID OPCODE - HELP ALL FORCED
01445000.sp 1
01446000 ¬¬¬¬¬¬The operand used for HELP was invalid,
01447000and will be ignored.
01448000A list of valid opcodes will be displayed.
01449000.sp 2
01450000MZPH05I OPERAND text
01451000.sp 1
01452000 ¬¬¬¬¬¬The text listed is part of a description of
01453000the operands of the command for which HELP was requested.
01454000.hi 0
01455000.in 0
01456000.pa
01457000.ce data
01458000DEBUG Messages______________
01459000.end
01460000.sp 2
01461000.li 1
01462000MZPD01I VER/REP SNAP. SW=xx,xx,xx,xx
01463000.sp 1
01464000.in 10
01465000A phase of MOREZAP has completed processing.
01466000SW1-SW4 had the values, in hex, indicated in the message.
01467000A set of messages, described below,
01468000will be written for each of the MZAP control blocks
01469000which have been constructed;
01470000following this, the next phase will be called.
01471000These messages are at least two lines, and include the following:
01472000.in 0
01473000.sp 2
01474000.nj
01475000.li 2
01476000aaaaaa TYPE=xx: tttttttt NXT: nnnnnn LINE: ##### text
01477000                                      FLG: ff
01478000.fi l
01479000.sp 1
01480000.in 20
01481000.hi 8
01482000 Where a is the 6 hex digit virtual address of the control block
01483000displayed.
01484000.in 26
01485000.hi 2
01486000.sp 1
01487000 x is the two hex digit type.
01488000.sp 1
01489000 t is a descrition of the type.
01490000.sp 1
01491000 n is the 6 hex digit address
01492000of the next MZAP control block.
01493000.sp 1
01494000 # is the sequence number aSSIGNED TO THE INPUT STATEMENT
01495000which generated the control block.
01496000.sp 1
01497000 f is the two hex digit flag field.
01498000.hi 0
01499000.in 0
01500000.sp 2
01501000.nj
01502000.ll 100
01503000.li 3
01504000aaaaaa TYPE=00: VER      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(ddd-1)
01505000                                      FLG: ff,ff ABS: xxxxxx
01506000                                      vvvv,vvvv,vvvv,vvvvv,vvvv,vvvv,vvvv,vvvv,
01507000.fi l
01508000.ll 70
01509000.sp 1
01510000.in 20
01511000.hi 8
01512000 Where @ is the 6 hex digit relative address of the data to be verified.
01513000.in 26
01514000.hi 2
01515000.sp 1
01516000 m is the hex length-1 (i.e., as it would be used in a CLC).
01517000.sp 1
01518000 d is the decimal data length.
01519000.sp 1
01520000 x is the 6 digit absolute virtual address of the data to be  verified,
01521000or is 0 if not yet known.
01522000.sp 1
01523000 v is the data to be used for verification,
01524000or the data which failed to pass verification.
01525000.sp 2
01526000.hi 0
01527000.in 0
01528000.ll 100
01529000.nj
01530000.li 3
01531000aaaaaa TYPE=01: REP      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(ddd-1)
01532000                                      FLG: ff,ff ABS: xxxxxx
01533000                                      rrrr,rrrr,rrrr,rrrrr,rrrr,rrrr,rrrr,rrrr,
01534000.fi l
01535000.ll 70
01536000.in 20
01537000.hi 8
01538000.sp 1
01539000 Where @ is the 6 hex digit relative address of the data to be replaced.
01540000.in 26
01541000.hi 2
01542000.sp 1
01543000 m is the hex length-1 (i.e., as it would be used in a MVC).
01544000.sp 1
01545000 d is the decimal data length.
01546000.sp 1
01547000 x is the 6 digit absolute virtual address of the data to be  replaced,
01548000or is 0 if not yet known.
01549000.sp 1
01550000 r is the data to replace the data at @,
01551000as relocated.
01552000.sp 2
01553000.hi 0
01554000.in 0
01555000.nj
01556000.li 2
01557000aaaaaa TYPE=02: BASE     NXT: nnnnnn LINE: ##### LOC: bbbbbb
01558000                                      FLG: ff
01559000.sp 1
01560000.fi l
01561000.in 20
01562000.hi 8
01563000 Where b is the 6 hex digit hex number to be subtraacted from
01564000the relative address of each statement within
01565000the scope of this BASE.
01566000.hi 0
01567000.in 0
01568000.sp 2
01569000.nj
01570000.li 2
01571000aaaaaa TYPE=03: INDEX    NXT: nnnnnn LINE: ##### LOC: xxxxxx IXNAME: eeeeeeee
01572000                                      FLG: ff
01573000.fi l
01574000.sp 1
01575000.in 20
01576000.hi 8
01577000 Where x is the 6 hex digit hex number,
01578000as far as currently resolved,
01579000to be used as a relocation factor for each
01580000statement within the scope of this INDEX.
01581000.in 26
01582000.hi 2
01583000.sp 1
01584000 e is the csect or entry point within the module
01585000whose address is resolved as x.
01586000.in 0
01587000.hi 0
01588000.sp 2
01589000.nj
01590000.li 2
01591000aaaaaa TYPE=04: HINDEX   NXT: nnnnnn LINE: ##### LOC: xxxxxx
01592000                                      FLG: ff
01593000.fi l
01594000.sp 1
01595000.in 20
01596000.hi 8
01597000 Where x is the 6 hex digit number to be added to
01598000the relative address of each statement within the scope
01599000of this INDEX.
01600000.in 0
01601000.hi 0
01602000.sp 2
01603000.nj
01604000.li 3
01605000aaaaaa TYPE=05: NAME     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm
01606000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc
01607000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz
01608000.fi l
01609000.in 20
01610000.hi 8
01611000.sp 1
01612000 Where x is the module or csect location,
01613000as currently resolved.
01614000.sp 1
01615000.in 26
01616000.hi 2
01617000 m is the module name.
01618000.sp 1
01619000 r is the CDE (OS/MVT, OS/VS2) or RB (OS/MFT, OS/VS1) address,
01620000if known, else 0.
01621000This field is always 0 for the nucleus.
01622000.sp 1
01623000 s is the module or csect size, as currently resolved.
01624000The module size for the nucleus is taken from  CVTNUCB.
01625000.sp 1
01626000 c is the csect name, if specified.
01627000.sp 1
01628000 y is the 6 hex digit address of the DCB for the library
01629000containg the load module.
01630000.sp 1
01631000 d is the ddname of the library.
01632000.sp 1
01633000 z is the 8 hex digit System Status Information
01634000(See the SRL for Services Aids).
01635000.in 0
01636000.hi 0
01637000.sp 2
01638000.nj
01639000.ll 100
01640000.li 2
01641000aaaaaa TYPE=06: DUMP     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm
01642000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc
01643000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz
01644000.fi l
01645000.ll 70
01646000.in 20
01647000.hi 8
01648000.sp 1
01649000Where all fields are as explained for 05 (NAME).
01650000.in 0
01651000.hi 0
01652000.sp 2
01653000.nj
01654000.ll 100
01655000.li 2
01656000aaaaaa TYPE=07: DUMPA    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm
01657000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc
01658000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz
01659000.fi l
01660000.ll 70
01661000.in 20
01662000.hi 8
01663000.sp 1
01664000Where all fields are as explained for 05 (NAME).
01665000.in 0
01666000.hi 0
01667000.sp 2
01668000.nj
01669000.ll 100
01670000.li 2
01671000aaaaaa TYPE=08: DUMPT    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm
01672000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc
01673000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz
01674000.fi l
01675000.ll 70
01676000.in 20
01677000.hi 8
01678000.sp 1
01679000Where all fields are as explained for 05 (NAME).
01680000.in 0
01681000.hi 0
01682000.sp 2
01683000.nj
01684000.ll 100
01685000.li 2
01686000aaaaaa TYPE=09: HDUMP    NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss
01687000                                      FLG: ff,ff ABS: xxxxxx
01688000.fi l
01689000.ll 70
01690000.in 20
01691000.hi 8
01692000.sp 1
01693000 Where @ is the 6 hex digit relative address of the
01694000data to be dumped.
01695000.in 26
01696000.hi 2
01697000.sp 1
01698000 s is the 6 hex digit length of the area to be dumped.
01699000.sp 1
01700000 x is the 6 hex digit absolute virtual address of the data to be dumped,
01701000or is 0 if not yet know.
01702000.in 0
01703000.hi 0
01704000.sp 2
01705000.nj
01706000.ll 100
01707000.li 2
01708000aaaaaa TYPE=0A: HDUMPA   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss
01709000                                      FLG: ff,ff ABS: xxxxxx
01710000.fi l
01711000.ll 70
01712000.in 20
01713000.hi 8
01714000.sp 1
01715000 Where @ is the 6 hex digit relative address of the
01716000data to be dumped.
01717000.in 26
01718000.hi 2
01719000.sp 1
01720000 s is the 6 hex digit length of the area to be dumped.
01721000.sp 1
01722000 x is the 6 hex digit absolute virtual address of the data to be dumped,
01723000or is 0 if not yet know.
01724000.in 0
01725000.hi 0
01726000.sp 2
01727000.nj
01728000.ll 100
01729000.li 2
01730000aaaaaa TYPE=0B: HDUMPT   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss
01731000                                      FLG: ff,ff ABS: xxxxxx
01732000.fi l
01733000.ll 70
01734000.in 20
01735000.hi 8
01736000.sp 1
01737000 Where @ is the 6 hex digit relative address of the
01738000data to be dumped.
01739000.in 26
01740000.hi 2
01741000.sp 1
01742000 s is the 6 hex digit length of the area to be dumped.
01743000.sp 1
01744000 x is the 6 hex digit absolute virtual address of the data to be dumped,
01745000or is 0 if not yet know.
01746000.in 0
01747000.hi 0
01748000.sp 2
01749000.nj
01750000.ll 100
01751000.li 2
01752000aaaaaa TYPE=0C: LIB      NXT: nnnnnn LINE: ##### DCB: xxxxxx DDNAME: dddddddd
01753000                                      FLG: ff
01754000.fi l
01755000.ll 70
01756000.in 20
01757000.hi 8
01758000 Where x is the 6 hex digit absolute virtual address of the DCB,
01759000or is 0 if LIB AUTO is in effect.
01760000.in 26
01761000.hi 2
01762000.sp 1
01763000 d is the ddname specified.
01764000.in 0
01765000.hi 0
01766000.nj
01767000.sp 2
01768000.ll 100
01769000.li 2
01770000aaaaaa TYPE=0D: <- N *   NXT: nnnnnn LINE: ##### NDX: @@@@@@   LENB: ssss
01771000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx    IXB: iiii
01772000.fi l
01773000.sp 1
01774000.ll 70
01775000.in 20
01776000.hi 8
01777000 Where @ is the absolute virtual index in effect at the time
01778000the address, length, and index were saved.
01779000.in 26
01780000.hi 2
01781000.sp 1
01782000 s is the length of the module, csect, or control block.
01783000.sp 1
01784000 p is the address of the 8 byte area in which the address,
01785000length, and relative index are to be stored.
01786000.sp 1
01787000 x is the absolute virtual address of the module, csect,
01788000or control block.
01789000.sp 1
01790000 i is the relative index which was saved.
01791000.in 0
01792000.hi 0
01793000.nj
01794000.sp 2
01795000.ll 100
01796000.li 2
01797000aaaaaa TYPE=0E: MVC      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: (mm(ddd-1)
01798000                         DST: pppppp  FLG: ff,ff ABS: xxxxxx
01799000.fi l
01800000.ll 70
01801000.in 20
01802000.hi 8
01803000.sp 1
01804000 Where @ is the relative address of the data to be saved.
01805000.in 26
01806000.hi 2
01807000.sp 1
01808000 m is the hex length-1 (i.e., as it would be used in an MVC).
01809000.sp 1
01810000 d is the decimal length.
01811000.sp 1
01812000 p is the address of the area in which the data is to be saved.
01813000.sp 1
01814000 x is the absolute virtual address of the data to be saved,
01815000or 0 if not known.
01816000.in 0
01817000.hi 0
01818000.nj
01819000.sp 2
01820000.ll 100
01821000.li 2
01822000aaaaaa TYPE=0F: <- N PTR NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss
01823000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss
01824000.fi l
01825000.ll 70
01826000.in 20
01827000.hi 8
01828000.sp 1
01829000 Where @ is the relative address of the pointer to
01830000the desired control block.
01831000.in 26
01832000.hi 2
01833000.sp 1
01834000 s is the length of the control block pointed to.
01835000.sp 1
01836000 p is the address of the 8 byte area where
01837000the address, length, and relative index are to be stored.
01838000.sp 1
01839000 x is the absolute virtual address of the desired control block,
01840000or 0 if not known.
01841000.sp 1
01842000 i is the relative index.
01843000.in 0
01844000.hi 0
01845000.nj
01846000.sp 2
01847000.ll 100
01848000.li 2
01849000aaaaaa TYPE=10: -> PTR   NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss
01850000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss
01851000.fi l
01852000.ll 70
01853000.in 20
01854000.hi 8
01855000.sp 1
01856000 Where @ is the relative address of the pointer to
01857000the desired control block.
01858000.in 26
01859000.hi 2
01860000.sp 1
01861000 s is the length of the control block pointed to.
01862000.sp 1
01863000 p is the absolute virtual address of the pointer to
01864000the desired control block.
01865000.sp 1
01866000 x is the absolute virtual address of the desired control block,
01867000or 0 if not known.
01868000.sp 1
01869000 i is the relative index.
01870000.in 0
01871000.hi 0
01872000.nj
01873000.sp 2
01874000.ll 100
01875000.li 2
01876000aaaaaa TYPE=11: -> REF N NXT: nnnnnn LINE: ##### NDX: @@@@@@  LENB: ssss
01877000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss
01878000.fi l
01879000.ll 70
01880000.in 20
01881000.hi 8
01882000.sp 1
01883000 Where @ is the absolute virtual INDEX in effect when
01884000the address, size, and index were restored.
01885000.in 26
01886000.hi 2
01887000.sp 1
01888000 s is the length of the module, csect, or control block.
01889000.sp 1
01890000 p is the address of the 8 byte area from which
01891000the address, size, and relative index were or are
01892000to be restored.
01893000.sp 1
01894000 x is the absolute virtual adress of the module, csect,
01895000or control block.
01896000.sp 1
01897000 i is the relative index.
01898000.in 0
01899000.hi 0
01900000.pa
01901000.ce data
01902000ESD Messages____________
01903000.end
01904000.sp 2
01905000MZP401I mmmmmmmm DIRECTORY I/O ERROR
01906000.sp 1
01907000.in 6
01908000A return code of 8 was received from the BLDL macro,
01909000indicating an I/O error in the directory
01910000while trying to locate module m.
01911000.in 0
01912000.sp 2
01913000MZP402I mmmmmmmm NOT FOUND
01914000.sp 1
01915000.in 6
01916000A return code of 4 was received from the BLDL macro,
01917000indicating that module m was not found
01918000in the directory of any of the relevant libraries.
01919000Add a DD card for the necessary library,
01920000and if required, add a LIB statement.
01921000.in 0
01922000.sp 2
01923000MZP403I mmmmmmmm NOT SCTR
01924000.in 6
01925000.sp 1
01926000A load module was found to be in block load format
01927000when scatter format was expected.
01928000Either the specified module was the nucleus,
01929000or it was loaded with more than one extent;
01930000in either case, the module found in the library
01931000cannot be the proper member, since it does not
01932000have the SCTR attribute.
01933000.in 0
01934000.sp 2
01935000MZP404I mmmmmmmm NO ESD
01936000.in 6
01937000.sp 1
01938000The first record in load module m, or the first
01939000record following the SYM records,
01940000is not a CESD record.
01941000Run IMBLIST (LISTLOAD) on the module,
01942000and call your friendly neighbor IBM CE
01943000- the linkage editor has just awarded you third prize,
01944000and there are only two contestants.
01945000.in 0
01946000.sp 2
01947000MZP405I mmmmmmmm NO CON
01948000.in 6
01949000.sp 1
01950000A reccord follows a CESD record which is not a control,
01951000IDR, SCTR, or CESD record.
01952000Call (but keep it clean) your friendly, neighborhood CE,
01953000as for MZP404I.
01954000.in 0
01955000.sp 2
01956000MZP406I mmmmmmmm MISSING CESD
01957000.in 6
01958000.sp 1
01959000A SCTR format record has fewer CESD records than expected;
01960000the BLDL entry may have an incorrect table length or
01961000there may be a missing or incorrect CESD record.
01962000.sp 1
01963000Before complaining to IBM, list the module with IMBLIST and
01964000verify that the problem is in the load module;
01965000this message could conceivably be caused by an error
01966000in MZAP, in which case the complaint should come to me
01967000rather than IBM.
01968000If you received MZAP as an IUP from IBM,
01969000rather than directly from me,
01970000then they get the complaint regardless
01971000- but no doubt I'll hear from them.
01972000.in 0
01973000.sp 2
01974000MZP407I mmmmmmmm MISSING SC/TR
01975000.in 6
01976000.sp 1
01977000A record type other than hex 10 was found while
01978000reading in the scatter/translate table.
01979000See the remarks for MZP404I and MZP406I.
01980000.in 0
01981000.sp 2
01982000MZP410I sssss NAME: mmmmmmmm NOT LOADED
01983000.sp 1
01984000.in 6
01985000Module m was not found in the RERP, RAM, RSVC,
01986000or TSLPA linkpack queues, nor in the or selected JPAQ.
01987000.in 0
01988000.sp 2
01989000MZP411I sssss NAME: mmmmmmmm NOT IN DIRECTORY
01990000.in 6
01991000.sp 1
01992000 Module m was not found in the proper library.
01993000Usually accompanied by message MZP401I or MZP402I.
01994000.in 0
01995000.sp 2
01996000MZP412I sssss NAME: mmmmmmmm cccccccc NOT FOUND
01997000.in 6
01998000.sp 1
01999000Csect c does not exist in module m,
02000000or an error exists in the format of load module m.
02001000.in 0
02002000.sp 2
02003000MZP413I sssss NAME: mmmmmmmm cccccccc ABS:  aaaaaa:aaaaaa
02004000.in 6
02005000.sp 1
02006000The designated module or csect exists and was loaded at
02007000the listed absolute virtual addresses.
02008000.in 0
02009000.sp 2
02010000MZP414I sssss ENTRY eeeeeeee NOT FOUND
02011000.in 6
02012000.sp 1
02013000Entry point e was either specified in an INDEX statement
02014000or implied by a control block statement:
02015000CVT, UCB, etc.;
02016000it could not be found in the load module's CESD.
02017000.in 0
02018000.sp 2
02019000MZP415I sssss ENTRY eeeeeeee ABS: aaaaaa
02020000.in 6
02021000.sp 1
02022000Entry point e is at the specified absolute virtual address.
02023000.in 0
02024000.sp 2
02025000MZP416I sssss REL: rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE
02026000.in 6
02027000.sp 1
02028000Statement number s specified either:
02029000a relative address beyond the module or csect;
02030000a negative displacement beyond the control block prefix;
02031000or an excessive length for a VER, REP, or DUMP.
02032000The range of addresses given is listed as both relative and
02033000absolute virtual addresses.
02034000.in 0
02035000.sp 2
02036000MZP420I sssss INVALID POINTER AT aaaaaa
02037000.in 6
02038000.sp 1
02039000A POINT or SETPTR statement refers to a halfword which is negative.
02040000Since the pointer type was specified as Y (15),
02041000this is invalid.
02042000.in 0
02043000.sp 2
02044000MZP421I sssss REF NOT - POINT INVALID
02045000.in 6
02046000.sp 1
02047000A POINT REF statement refers to a ref digit for which either:
02048000.hi 3
02049000.in 8
02050000 1. There is no preceeding SETPTR.
02051000 2. The last preceeding SETPTR was not successfully processed.
02052000.hi 0
02053000.in 0
02054000.sp 2
02055000MZP422I sssss INDEX: iiiiii LIMITS: aaaaaa:aaaaaa
02056000.in 6
02057000.sp 1
02058000A POINT statement refers to the designated absolute virtual address, i.
02059000The limits are for the entire area pointed to,
02060000including the prefix, if any.
02061000.in 0
02062000.pa
02063000.ce data
02064000DUMP Messages_____________
02065000.end
02066000.sp 2
02067000.fi l
02068000.ll 100
02069000MZP501I sssss ÝACCESSED VIA¨ m Ýc¨
02070000ÝINDEX: e¨ HEX/EBCDICÝ/OPCODE¨ DUMP
02071000.ll 70
02072000.in 6
02073000.sp 1
02074000This message is used as a subtile for all dumps.
02075000The clause "INDEX: eeeeeeee" is present if an entry point
02076000within the containing csect is specified,
02077000either explicitly or implicitly.
02078000The clause "ACCESSED VIA" is present if the limits
02079000of the dump are relative to a location
02080000found with a POINT statement;
02081000any "INDEX" clause which would otherwise be supplied is suppressed,
02082000in order not to exceed the line size of the 2260 or 3270.
02083000.in 0
02084000.hi 0
02085000.pa
02086000.ce daTA
02087000VER/REP Messages________________
02088000.end
02089000.sp 2
02090000MZP601I sssss NAME mmmmmmmm cccccccc
02091000.in 6
02092000One or more errors have been found relating to the specified module.
02093000Addition messages will be displayed to diagnose the exact errors.
02094000.in 0
02095000.sp 2
02096000MZP602I sssss rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE
02097000.in 6
02098000.sp 1
02099000The start or end address of the verify or replace is outside the
02100000bounds of the module or csect.
02101000.in 0
02102000.sp 2
02103000MZP603I sssss VERIFY FAILURE AT: rrrrrr ABS :aaaaaa
02104000.in 6
02105000.sp 1
02106000The data in storage did not match the VERIFY data.
02107000This message is always accompanied by MZP604I.
02108000.in 0
02109000.sp 2
02110000MZP604I sssss ACTUAL CONTENT IS xxxx,xxxx,...
02111000.in 6
02112000.sp 1
02113000This message immediately follows MZP603I.
02114000.in 0
02115000.sp 2
02116000MZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL
02117000.in 6
02118000.sp 1
02119000No errors were detected.
02120000All REP operations, if any, were performed.
02121000.in 0
02122000.sp 2
02123000MZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED
02124000.in 6
02125000.sp 1
02126000An error was detected.
02127000No REP operation is performed.
02128000The user should correct the errors indicated
02129000in the preceeding error messages.
02130000.in 0
02131000.pa
02132000.ll 158
02133000.in 12
02134000.nj
02135000Final Housekeeping and Reinitialization Messages________________________________________________
02136000.fi
02137000.ll 70
02138000.sp 2
02139000MZP701I EOD
02140000.in 6
02141000.sp 1
02142000Either an end-of-file occurred on SYSIN or a RESET EOD
02143000statement was read.
02144000All input read prior to that point has been processed.
02145000.in 0
02146000.pa
02147000VII. ¬MZAP/CZAP Comparision
02148000.sp 1
02149000.in 4
02150000.nj
02151000MZAP____                          CZAP____
02152000CONSOLE                       No equivalent
02153000.sp 1
02154000*                             *
02155000.sp 1
02156000NAME .                        NAME NUCLEUS
02157000.sp 1
02158000NAME .csect                   NAME NUCLEUS
02159000                              INDEX csectdisp
02160000.sp 1
02161000NAME name                     NAME name
02162000.sp 1
02163000NAME name csect               NAME name
02164000                              INDEX csectdisp
02165000.sp 1
02166000CVT                           NAME NUCLEUS
02167000                              INDEX cvtloc
02168000.sp 1
02169000UCB=cuu                       NAME NUCLEUS
02170000                              INDEX ucbloc
02171000UCB cuu                       NAME NUCLEUS
02172000                              INDEX ucbloc
02173000.sp 1
02174000BASE hexbase                  BASE hexbase
02175000.sp 1
02176000INDEX=hexix                   INDEX hexix
02177000.sp 1
02178000INDEX esdname                 INDEX csectdisp
02179000                              BASE  esdindex
02180000.sp 1
02181000VERIFY  xx                    VERIFY  xx
02182000VER     00 'a'                VER     00 c1
02183000V       00 'a'C2              VER     00 c1C2
02184000V       00 C3'D'              VER     00 c3C4
02185000V       00 C6'GH'C9           VER     00 c6C7C8C9
02186000.sp 1
02187000REPLACE xx                    REPLACE xx
02188000REP     00 'a'                REP     00 c1
02189000R       00 'a'C2              REP     00 c1C2
02190000R       00 C3'D'              REP     00 c3C4
02191000R       00 C6'GH'C9           REP     00 c6C7C8C9
02192000.sp 1
02193000RESET                         RESET
02194000.sp 1
02195000RESET   EOD                   No equivalent
02196000.sp 1
02197000DUMP    name                  NAME    name
02198000                              DUMP    0  modulelen
02199000.sp 1
02200000DUMP    name  csect           NAME    name
02201000                              DUMP    csectdisp  csectlen
02202000.sp 1
02203000DUMP    .                     NAME    NUCLEUS
02204000                              DUMP    0          nuclen
02205000.sp 1
02206000DUMP    .     csect           NAME    NUCLEUS
02207000                              DUMP    csectdisp  csectlen
02208000.sp 1
02209000DUMPA   (see DUMP)            DUMPA   (see DUMP)
02210000.sp 1
02211000DUMPT   (see DUMP)            No equivalent
02212000.sp 1
02213000$ABEND  (attn)                ABEND
02214000.sp 1
02215000DEBUG   (Not truly equiv)     TRACE   (not truly equiv)
02216000DEBUG   (Not truly equiv)     LOGOUT  (not truly equiv)
02217000.sp 1
02218000RESET   (Not truly equiv)     TRACEOFF(not truly equiv)
02219000.fi
02220000.in 0
02221000.pa
02222000VIII. ¬Index to Input Statements
02223000.sp 2
02224000.nj
02225000.ll 140
02226000Statement_________      Page____     Statement_________           Page____
02227000.ll 70
02228000AVT               9     MSER                  10
02229000BASE             12     NAME                   8
02230000BLDL              9     POINT                 17
02231000CONSOLE          14     QMRES                 10
02232000CVT               9     R                     13
02233000DEBUG             8     REP                   13
02234000DUMP             14     REPLACE               13
02235000DUMPA            15     RESET                  8
02236000DUMPB            14     SCVT                  10
02237000DUMPT            15     SETPTR                16
02238000END               8     SMCA                  10
02239000GO                8     TACT                  10
02240000GOVRFLB           9     TCB                   10
02241000HCT               9     TSCVT                 11
02242000HELP             16     UCB                   11
02243000IBMORG            9     UCM                   11
02244000INDEX            12     USERORG               11
02245000JOB               8     V                     13
02246000KEY               7     VER                   13
02247000LIB              13     VERIFY                13
