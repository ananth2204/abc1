{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20190417024623000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 293930, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 255, "INMBLKSZ": 3120, "INMRECFM": "VB", "INMDIR": 8, "INMDSNAM": "SBGOLOB.MZAP78.MZAPVB", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 293930, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"SBGOLOB.MZAP78.MZAPVB": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 3120, "DS1LRECL": 255, "DS1RECFM": "VB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "190106", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00<'", "DS1LSTAR": "b'\\x00\\t\\x04'", "DS1TRBAL": "b'\\xc3^'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8fV \\x00\\x04\\x96\\xa0`'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8fV \\x00\\x04\\x96\\xa0`'", "b'X\\xf5\\x03(\\x00\\x00\\x076\\x00\\x01\\x076\\x00\\n\\x00\\n'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"ATTN": {"ttr": 1795, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00/\\x00/\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 47, "newlines": 47, "modlines": 0, "user": "MZAPVB"}, "text": "00214000III. Attention/MODIFY messages\n00215000.in 5\n00216000.sp 1\n00217000The following attention messages are allowed;\n00218000they may be in lower case since MZAP translates to upper case:\n00219000.sp 2\n00220000.in 10\n00221000.hi 12\n00222000$HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00223000display list of valid nonpriveleged attention messages.\n00224000This function is forced if an invalid attention message is entered.\n00225000.sp 1\n00226000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00227000set console input mode\n00228000.sp 1\n00229000STOP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00230000terminate dump or HELP\n00231000.sp 1\n00232000$HOLD \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00233000enter attention state after every write\n00234000.sp 1\n00235000.br\n00236000$AUTO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00237000restore normal mode after $HOLD\n00238000.sp 1\n00239000$SLOW \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00240000do 12 writes/2260 screen, 24/3270.\n00241000A write will occur for each output line.\n00242000.sp 1\n00243000$HALFAST \u00ac\u00ac\u00ac\n00244000do 6 writes/screen.\n00245000a write will occur for every 2 output lines(2260)\n00246000or every 4 lines(3270)\n00247000.sp 1\n00248000$FAST \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00249000do 3 writes/screen.\n00250000A write will occur for every 4 output lines(2260)\n00251000or every 8 output lines(3270).\n00252000.sp 1\n00253000$PAGE \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00254000do 1 write/screen.\n00255000If a dump is in progress,\n00256000one line is reserved for the dump header.\n00257000One line is reserved as the entry line.\n00258000A write will occur for every 10 or 11 output lines\n00259000(3270: 22 or 23 output lines).\n00262000.in 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "COMPARE": {"ttr": 1801, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00J\\x00J\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 74, "newlines": 74, "modlines": 0, "user": "MZAPVB"}, "text": "02147000VII. \u00acMZAP/CZAP Comparision\n02148000.sp 1\n02149000.in 4\n02150000.nj\n02151000MZAP\b\b\b\b____                          CZAP\b\b\b\b____\n02152000CONSOLE                       No equivalent\n02153000.sp 1\n02154000*                             *\n02155000.sp 1\n02156000NAME .                        NAME NUCLEUS\n02157000.sp 1\n02158000NAME .csect                   NAME NUCLEUS\n02159000                              INDEX csectdisp\n02160000.sp 1\n02161000NAME name                     NAME name\n02162000.sp 1\n02163000NAME name csect               NAME name\n02164000                              INDEX csectdisp\n02165000.sp 1\n02166000CVT                           NAME NUCLEUS\n02167000                              INDEX cvtloc\n02168000.sp 1\n02169000UCB=cuu                       NAME NUCLEUS\n02170000                              INDEX ucbloc\n02171000UCB cuu                       NAME NUCLEUS\n02172000                              INDEX ucbloc\n02173000.sp 1\n02174000BASE hexbase                  BASE hexbase\n02175000.sp 1\n02176000INDEX=hexix                   INDEX hexix\n02177000.sp 1\n02178000INDEX esdname                 INDEX csectdisp\n02179000                              BASE  esdindex\n02180000.sp 1\n02181000VERIFY  xx                    VERIFY  xx\n02182000VER     00 'a'                VER     00 c1\n02183000V       00 'a'C2              VER     00 c1C2\n02184000V       00 C3'D'              VER     00 c3C4\n02185000V       00 C6'GH'C9           VER     00 c6C7C8C9\n02186000.sp 1\n02187000REPLACE xx                    REPLACE xx\n02188000REP     00 'a'                REP     00 c1\n02189000R       00 'a'C2              REP     00 c1C2\n02190000R       00 C3'D'              REP     00 c3C4\n02191000R       00 C6'GH'C9           REP     00 c6C7C8C9\n02192000.sp 1\n02193000RESET                         RESET\n02194000.sp 1\n02195000RESET   EOD                   No equivalent\n02196000.sp 1\n02197000DUMP    name                  NAME    name\n02198000                              DUMP    0  modulelen\n02199000.sp 1\n02200000DUMP    name  csect           NAME    name\n02201000                              DUMP    csectdisp  csectlen\n02202000.sp 1\n02203000DUMP    .                     NAME    NUCLEUS\n02204000                              DUMP    0          nuclen\n02205000.sp 1\n02206000DUMP    .     csect           NAME    NUCLEUS\n02207000                              DUMP    csectdisp  csectlen\n02208000.sp 1\n02209000DUMPA   (see DUMP)            DUMPA   (see DUMP)\n02210000.sp 1\n02211000DUMPT   (see DUMP)            No equivalent\n02212000.sp 1\n02213000$ABEND  (attn)                ABEND\n02214000.sp 1\n02215000DEBUG   (Not truly equiv)     TRACE   (not truly equiv)\n02216000DEBUG   (Not truly equiv)     LOGOUT  (not truly equiv)\n02217000.sp 1\n02218000RESET   (Not truly equiv)     TRACEOFF(not truly equiv)\n02219000.fi\n02220000.in 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INDEX": {"ttr": 2055, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00\\x18\\x00\\x18\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 24, "newlines": 24, "modlines": 0, "user": "MZAPVB"}, "text": "00002000VIII. \u00acIndex to Input Statements\n00004000.sp 2\n00006000.nf\n00010000Statement\b\b\b\b\b\b\b\b\b_________      Page\b\b\b\b____     Statement\b\b\b\b\b\b\b\b\b_________           Page\b\b\b\b____\n00014000AVT               9     MSER                  10\n00016000BASE             12     NAME                   8\n00018000BLDL              9     POINT                 17\n00020000CONSOLE          14     QMRES                 10\n00022000CVT               9     R                     13\n00024000DEBUG             8     REP                   13\n00026000DUMP             14     REPLACE               13\n00028000DUMPA            15     RESET                  8\n00030000DUMPB            14     SCVT                  10\n00032000DUMPT            15     SETPTR                16\n00034000END               8     SMCA                  10\n00036000GO                8     TACT                  10\n00038000GOVRFLB           9     TCB                   10\n00040000HCT               9     TSCVT                 11\n00042000HELP             16     UCB                   11\n00044000IBMORG            9     UCM                   11\n00046000INDEX            12     USERORG               11\n00048000JOB               8     V                     13\n00050000KEY               7     VER                   13\n00052000LIB              13     VERIFY                13\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INITDOC": {"ttr": 2307, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00g\\x00g\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 103, "newlines": 103, "modlines": 0, "user": "MZAPVB"}, "text": "00002000.ti\n00004000.if '&1' ne '';.se escape '&1.'\n00006000.ur .if '&escape' eq '';.sr escape '\u00ac'\n00008000.ur .if '&adjust' eq '';.sr adjust 15\n00010000.ur .if '&trace' eq 'yes'\n00012000.su traceon\n00014000.ur .if '&trace' eq 'YES'\n00016000.su traceon\n00018000.sr lcfn='no'\n00020000.ur .if '&train.' = 'SN'\n00022000.sr lcfn='1'\n00024000.ur .if '&train.' = 'TN'\n00026000.sr lcfn='1'\n00028000.ur .if '&train.' = 'UN'\n00030000.sr lcfn='1'\n00032000.rm *\n00034000.tt 1 //Metz's Own Reliable Extended Zap/%/\n00036000.rm\n00038000.rm $resetdoc SAVE NOSAVE\n00040000.tt 2 ////\n00042000.tt 3 ////\n00044000.tt 4 //COPYRIGHT 1975 SHMUEL METZ//\n00046000.ti ( ( ) ) . * 0 0 1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\n00048000.ti t 05 b * s ff\n00050000.ur .if '&lcfn' = '1'\n00052000.ti ( 8d ) 9d . af 0 b0 1 b1 2 b2 3 b3 4 b4 5 b5 6 b6 7 b7 8 b8 9 b9\n00054000.ti l ( L ( r ) R ) < < > >\n00056000.ur .if '&lcfn' = '1'\n00058000.ti l ad L 8b r bd R 9b < 8c > ae # 9c\n00060000.ur .if '&lcfn' = '1'\n00062000.ti b af\n00064000.tr ff 40\n00066000.ur .ti set &escape\n00068000.cm Note that .tt 1 to 6 shares buffers with .bt 6 to 1.\n00070000.bt 1 ////\n00072000.ur .if &syspage > 1;.bt 1 //- % -//\n00074000.bt 2 ////\n00076000.tm 5+4\n00078000.hm 1\n00080000.hs 4\n00082000.bm 3+2\n00084000.ur .ad &adjust\n00086000.ll 65\n00088000.in 0\n00090000.pi 0\n00092000.fo\n00094000.tb\n00096000.sr item=0\n00098000.$resetfn\n00100000.rm\n00102000.rm $resetfn SAVE NOSAVE\n00104000.sr n0=0\n00106000.sr n1=0\n00108000.sr n2=0\n00110000.sr sig0=0\n00112000.sr sig1=0\n00114000.rm\n00116000.$resetdoc\n00118000.rm $fn save nosave\n00120000.cm Increment footnote digits and propagate the carry.\n00122000.se n2=&n2+1\n00124000.se carry=&n2/10\n00126000.se sig1=&sig1+&carry\n00128000.se n1=&n1+&carry\n00130000.se carry=&n1/10\n00132000.se sig2=&sig2+&carry\n00134000.se n0=&n0+&carry\n00136000.ur .if &n2 > 9;.sr n2=0\n00138000.ur .if &n1 > 9;.sr n1=0\n00140000.cm rfn is Reference to Foot Note: (n)\n00142000.cm lfn is Label of Foot Note: (N)\n00144000.se rfn='&escape.('\n00146000.sr lfn='('\n00148000.ur .if &sig0 > 0;.se rfn='&rfn.&escape.&n0'\n00150000.ur .if &sig0 > 0;.se lfn='&lfn.&n0'\n00152000.ur .if &sig1 > 0;.se rfn='&rfn.&escape.&n1'\n00154000.ur .if &sig1 > 0;.se lfn='&lfn.&n1'\n00156000.se rfn='&rfn.&escape.&n2.&escape.)'\n00158000.se lfn='&lfn.&n2)'\n00160000.se nfn=0+&n0.&n1.&n2\n00162000.rm\n00164000.rm $fnbeg save nosave\n00166000.fn begin\n00168000.in 5\n00170000.un 5\n00172000.rm\n00174000.rm $item SAVE NOSAVE\n00176000.se item=&item+1\n00178000.se itemrf='&item.\u00act'\n00180000.rm\n00182000.rm $itemrf save nosave\n00184000.$item\n00186000.ur &item.\u00act&1 &2 &3 &4 &5 &6 &7 &8 &9\n00188000.sr 1 ''\n00190000.sr 2 ''\n00192000.sr 3 ''\n00194000.sr 4 ''\n00196000.sr 5 ''\n00198000.sr 6 ''\n00200000.sr 7 ''\n00202000.sr 8 ''\n00204000.sr 9 ''\n00206000.rm\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "INPUT": {"ttr": 2057, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x02\\xd9\\x02\\xd9\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 729, "newlines": 729, "modlines": 0, "user": "MZAPVB"}, "text": "00002000IV. INPUT STATEMENTS\n00004000.sp 1\n00006000.in 5\n00008000Input statements are of three types:\n00010000.in 8\n00012000.sp 1\n00014000.un 4\n000160001.)\n00018000A statement with an asterisk (*) in column 1 is a column 1 is a comment.\n00020000.sp 1\n00022000.un 4\n000240002.)\n00026000A blank card is a comment.\n00028000.sp 1\n00030000.un 4\n000320003.)\n00034000Any other statement contains an opcode in the first non-blank column\n00036000(normally column 1).\n00038000.in 5\n00040000.sp 1\n00042000For the remainder of this section,\n00044000the term \"statement\" will be understood to apply only to non-comments.\n00046000.sp 2\n00048000Each opcode may require or permit operands;\n00050000the opcode must be followed by a blank unless the operand\n00052000begins with a period (.), hyphen (-), or equal sign (=).\n00054000.sp 2\n00056000A hex (hexadecimal) number is expressed as an even number\n00058000of hexadecimal digits(0-9, A-F),\n00060000optionally preceeded by an equal sign or hyphen.\n00062000An equal sign indicates that the value which follows\n00064000is a number rather than a name;\n00066000a hyphen indicates a negative number and is only valid when\n00068000specifying a relative address;\n00070000an equal sign may preceed any hex data.\n00072000.sp 2\n00074000A character string is expressed by enclosing the desired characters\n00076000in apostrophes (');\n00078000an apostrophe is represented by two consequtive apostrophes('').\n00080000Apostrophe is the only character which is doubled;\n00082000in particular, an ampersand (&) is represented by a single\b\b\b\b\b\b______ ampersand.\n00084000Character strings may be used wherever hex numbers are valid,\n00086000and may be concatenated with hex data:\n00088000=C1C2C3, C1C2'C', C1'B'C3 and ='ABC' all represent the same value.\n00090000.sp 2\n00092000The following statements are accepted:\n00094000.in 22\n00096000.sp 1\n00098000.un 13\n00100000.se key='&sysppage'\n00102000KEY \u00act\n00104000This statement is required if any REP statements are used.\n00106000The operand requirements may change for every release;\n00108000this is intended to prevent unauthorized use of MZAP.\n00110000It is recommended that each installation modify the\n00112000requirements for this opcode,\n00114000to prevent unauthorized alteration of their system.\n00116000The operand requirements have been deliberately omitted\n00118000from the writeup;\n00120000they will be made available only to a single\n00122000individual at each installation and he may select,\n00124000at his own discretion,\n00126000who is authorized to modify resident code.\n00128000.sp 2\n00130000.un 13\n00132000.se debug='&sysppage'\n00134000DEBUG \u00act\n00136000The switches and table entries used for communicating between\n00138000phases of MZAP will be displayed after each phase completes processing.\n00140000.in 22\n00142000.sp 2\n00144000.se end='&sysppage'\n00146000END \u00act\n00148000Console input mode will be terminated if a valid SYSIN data set\n00150000.un 13\n00152000was specified;\n00154000otherwise END is an invalid opcode.\n00156000.sp 2\n00158000GO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00160000Turns off the NOGO switch if from CRT/terminal/console;\n00162000GO is invalid from SYSIN.\n00164000.sp 2\n00166000RESET \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00168000Causes all control cards previously read to be processed.\n00170000If an operand of EOD is specified,\n00172000no further input will be read;\n00174000otherwise NOGO and DEBUG will be reset and MZAP will\n00176000continue reading input.\n00178000.sp 2\n00180000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname\n00182000.br\n00184000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname.jobstepname\n00186000.br\n00188000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00actaskid\n00190000.br\n00192000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acprocname.taskid\n00194000.br\n00196000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the job whose JPAQ is\n00198000to be searched, prior to the TSLPA, RERP, RSVC, or RAM list queues.\n00200000A related set of ZAPs must lie within a single job;\n00202000once a JOB card is accepted, it is invalid to supply\n00204000a new one without first supplying a RESET card.\n00206000This restriction was imposed to maintain compatability with\n00208000the planned OS/VS2 release 2 (MVS) support.\n00210000.sp 2\n00212000.ce data\n00214000THIS DESCRIPTION IS FOR PLANNING PURPOSES ONLY.\n00216000THE WRITEUP WILL BE AMENDED WHEN JOB IS AVAILABLE.\n00218000.sp 2\n00220000NAME \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00222000.br\n00224000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00226000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00228000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module or CSECT for\n00230000the VERIFYs, REPLACEs, and DUMPs which follow.\n00232000The name may be a load module name, a period (.),\n00234000or either one followed by a CSECT name.\n00236000If the load module was scatter loaded,\n00238000a CSECT name is required.\n00240000A period represents the nucleus specified as a member of\n00242000the dsname on SYSNUC,\n00244000and is considered to be block loaded.\n00246000The load address will be added to the relative address\n00248000on each applicable statement (VER, DUMP, etc.)\n00250000in the SCOPE of the NAME statement;\n00252000the length will be used to check that each relative address\n00254000is within bounds.\n00256000.sp 2\n00258000AVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00260000This statement defines the module and CSECT for the\n00262000statements which follow.\n00264000The AVT address is obtained from the CVT;\n00266000the opcode is invalid if TCAM is not active.\n00268000.sp 2\n00270000BLDL \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac name\n00272000This statement defines the module and CSECT for\n00274000the statements which follow.\n00276000It is invalid if the designated name does not\n00278000occur in the resident BLDL list.\n00280000The length is set to include only the specified\n00282000BLDL entry.\n00284000.sp 2\n00286000CVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00288000This statement defines the module,CSECT, and INDEX\n00290000for the statements which follow.\n00292000Any location in the CSECT containing the CVT may be patched:\n00294000the locations should be given relative to the CVT.\n00296000It is equivalent, in MVT, to:\n00298000.hi 0\n00300000.in 25\n00302000.nj\n00304000NAME      .IEAQBK00\n00306000INDEX     IEACVT\n00308000.fi l\n00310000.in 9\n00312000.hi 13\n00314000.sp 2\n00316000GOVRFLB \u00ac\u00ac\u00ac\u00ac\u00ac\n00318000This statement, valid only for OS/MVT and OS/VS2,\n00320000defines the module, CSECT, and INDEX for the statements which follow.\n00322000Any location in the CSECT containing the main storage supervisor\n00324000may be patched;\n00326000the locations given should be relative to GOVRFLB.\n00328000It is equivalent to:\n00330000.hi 0\n00332000.in 25\n00334000.br\n00336000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n00338000.br\n00340000INDEX \u00ac\u00ac\u00ac\u00acGOVRFLB\n00342000.in 9\n00344000.hi 13\n00346000.sp 2\n00348000HCT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00350000This statement defines the module and CSECT for the HASP Control Table.\n00352000It is invalid if HASP is not active,\n00354000or if there is no local modification to the HASP SVC to return\n00356000the HCT address in register 15.\n00358000.sp 2\n00360000IBMORG \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00362000This statement, valid only for OS/MVT and OS/VS2,\n00364000defines the module and CSECT for the statements which follow.\n00366000Any location in the SVC table may be patched;\n00368000the location given should be relative to the IBM portion of the table.\n00370000It is equivalent to:\n00372000.hi 0\n00374000.in 25\n00376000Name \u00ac\u00ac\u00ac\u00ac.IBMORG\n00378000.in 9\n00380000.hi 13\n00382000.sp 2\n00384000MSER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00386000This statement defines the module and CSECT for\n00388000the statements which follow.\n00390000Any location in the Master Scheduler Resident Data Area\n00392000and in the Master Common Area may be patched.\n00394000It is equivalent to:\n00396000.hi 0\n00398000.in 25\n00400000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEMSER\n00402000.in 9\n00404000.hi 13\n00406000.sp 2\n00408000QMRES \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00410000This statement defines the module and CSECT for\n00412000the statements which follow.\n00414000Any location in the Queue Manager Resident Data Area may be patched.\n00416000It is equivalent to:\n00418000.hi 0\n00420000.in 25\n00422000NAME \u00ac\u00ac\u00ac\u00acIEFJOB\n00424000.in 9\n00426000.hi 13\n00428000.sp 2\n00430000SCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00432000This statement, valid only in OS/MVT and OS/VS2, defines the module, CSECT, and INDEX\n00434000for the statements which follow.\n00436000It is equivalent to:\n00438000.hi 0\n00440000.in 25\n00442000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IGC003\n00444000.br\n00446000INDEX \u00ac\u00ac\u00ac\u00acIEABEND\n00448000.in 9\n00450000.hi 13\n00452000.sp 2\n00454000SMCA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00456000This statement, valid only if the system was generated with the SMF option,\n00458000is used to define the module and CSECT for the statements which follow.\n00460000While it is not actually a CSECT, nor is it in the nucleus,\n00462000it may be patched as if it were.\n00464000.in 9\n00466000.hi 13\n00468000.sp 2\n00470000 TACT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00472000This statement, valid only in OS/MVT, defines the module, CSECT, and INDEX\n00474000for the statements which follow.\n00476000Any location in the CSECT containing the permanent TCBs,\n00478000transient areas, and CVT amy be patched;\n00480000the location given should be relative to the\n00482000Transient Area Control Table.\n00484000It is equivalent to:\n00486000.hi 0\n00488000.in 25\n00490000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n00492000.br\n00494000INDEX \u00ac\u00ac\u00ac\u00acIEAQTAQ\n00496000.in 9\n00498000.hi 13\n00500000.sp 2\n00502000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob\n00504000.br\n00506000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob.step\n00508000.br\n00510000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acid\n00512000.br\n00514000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acproc.id\n00516000.br\n00518000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT,\n00520000and INDEX for the statements which follow.\n00522000Any location in the jobstep tcb of the specified job or\n00524000started task may be patched:\n00526000addresses shhould be given relative to the TCB.\n00528000Note that floating-point registers are stored at a negative\n00530000displacement.\n00532000.sp 1\n00534000\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acTHE TCB OPCODE IS DESCRIBED FOR PLANNING PURPOSES ONLY.\n00536000THE WRITEUP WILL BE AMENDED WHEN IT IS AVAILABLE.\n00538000.sp 2\n00540000TSCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00542000This statement, valid onlin with OS/MVT and OS/VS2,\n00544000is used to define the module and CSECT for the statements which follow.\n00546000It is an invalid statement if TSO is not active.\n00548000Any location in the Time Shareing Communications Vector Table\n00550000may be patched;\n00552000locations should be given relative to the TSCVT.\n00554000.sp 2\n00556000UCB=cuu\n00558000.br\n00560000UCB cuu \u00ac\u00ac\u00ac\u00ac\u00ac\n00562000.br\n00564000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX for the\n00566000statements which follow.\n00568000Any location in the I/O Supervisor may be patched;\n00570000the location given should be relative to the specified UCB.\n00572000It is equivalent, in MVT, to:\n00574000.hi 0\n00576000.in 25\n00578000NAME \u00ac\u00ac\u00ac\u00ac.IEAQFX00\n00580000.br\n00582000INDEX \u00ac\u00ac\u00acucbloc\n00584000.in 9\n00586000.hi 13\n00588000.sp 2\n00590000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acBASE\n00592000.br\n00594000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acHARDCOPY\n00596000.br\n00598000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMASTER\n00600000.br\n00602000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMCS\n00604000.br\n00606000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acPREFIX\n00608000.br\n00610000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=xx\n00612000.br\n00614000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=cuu\n00616000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX\n00618000for the statements which follow.\n00620000Except for UCM BASE, the INDEX is set as an absolute address\n00622000rather than an entrypoint name or relative address.\n00624000HARDCOPY, MASTER, and MCS are only valid if the system was\n00626000generated with the Multiple Console Support option.\n00628000BASE, MCS, and PREFIX refer to UCM areas not related to\n00630000a specific console;\n00632000UCM MASTER and HARDCOPY refer to the UCME for the console assigned to\n00634000the designated function;\n00636000UCM ID=xx refers to the UCME whose ID (in decimal) is xx;\n00638000and UCM UNIT=cuu refers to the UCME for the designated device.\n00640000They are equivalent to:\n00642000.hi 0\n00644000.in 25\n00646000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEUCMC\n00648000.br\n00650000INDEX \u00ac\u00ac\u00ac\u00acIEECUCB (for BASE)\n00652000.br\n00654000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acforced absolute address\n00656000.br\n00658000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac(for other than BASE)\n00660000.in 9\n00662000.hi 13\n00664000.sp 2\n00666000USERORG \u00ac\u00ac\u00ac\u00ac\u00ac\n00668000This statement, valid only for OS/MVT and OS/VS2,\n00670000defines the module, CSECT, and INDEX\n00672000for the statements which follow.\n00674000Any location in the SVC table may be patched;\n00676000the location given should be relative to the user portion\n00678000of the table.\n00680000It is equivalent to:\n00682000.hi 0\n00684000.in 25\n00686000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IBMORG\n00688000.br\n00690000INDEX \u00ac\u00ac\u00ac\u00acUSERORG\n00692000.in 9\n00694000.hi 13\n00696000.sp 2\n00698000BASE=xx \u00ac\u00ac\u00ac\u00ac\u00ac\n00700000.br\n00702000BASE xx \u00ac\u00ac\u00ac\u00ac\u00ac\n00704000.br\n00706000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be subtracted\n00708000from the address given in a VER or REP.\n00710000It is normally the relative address of the CSECT,\n00712000as printed in the assembly listing.\n00714000The effect of this statement is retained until\n00716000the next statement containing or implying a name\n00718000(DUMP, NAME, INDEX, CVT, UCB, ...).\n00720000If a previous BASE is in effect,\n00722000the statement has a cummulative effect:\n00724000the amount subtracted is the sum of the BASEs.\n00726000.sp 2\n00728000INDEX=xx \u00ac\u00ac\u00ac\u00ac\n00730000.br\n00732000INDEX xx \u00ac\u00ac\u00ac\u00ac\n00734000.br\n00736000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to\n00738000the address given in a VER, REP, DUMP, etc.\n00740000It is normally the relative address of a CSECT from a\n00742000link-edit listing.\n00744000The effect of this statement is retained until the next statement\n00746000containing or implying a name\n00748000(CVT, DUMP, INDEX, NAME, etc.);\n00750000all previous BASE or INDEX specifications remain in effect.\n00752000.sp 2\n00754000INDEX \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00756000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to the\n00758000address given in a VER, REP, DUMP, etc.\n00760000It resets all previous BASE and INDEX specifications.\n00762000The value used is the address of the CSECT or entry point specified,\n00764000adjusted by the CSECT or module address of the preceeding name statement.\n00766000.sp 2\n00768000LIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acAUTO\n00770000.br\n00772000LIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acddname\n00774000.br\n00776000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to specify the ddname of the\n00778000data set to be used to resolve CSECT names (other than nucleus CSECTs)\n00780000in statements which follow.\n00782000If AUTO is specified, modules found in TSLPA are assumed to be on CMDLIB;\n00784000modules whose names begin with IFG or IG are assumed to be on SVCLIB;\n00786000all other modules are assumed to be on LINKLIB.\n00788000AUTO is initially in effect,\n00790000and remains in effect untill overrriden by an LIB statement.\n00792000.sp 2\n00794000VERIFY \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00796000.br\n00798000VER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00800000.br\n00802000V \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dr\n00804000.br\n00806000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to prevent inadvertently\n00808000altering the wrong location.\n00810000The data at the specified relative address, r, adjusted by\n00812000the address from the NAME statement and any BASE or INDEX in effect,\n00814000is compared to the specified data,\n00816000and, if a match does not occur,\n00818000a switch (called the NOGO switch) is set,\n00820000causing all REPs between the preceeding RESET (or beginning of input)\n00822000and the following RESET (or end of data) to be suppressed.\n00824000.sp 1\n00826000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe location must be specified as 2, 4, or 6 hex digits,\n00828000preceeded (if negative) by a hyphen (-).\n00830000The data may be specified as:\n00832000.in 25\n00834000.hi 5\n00836000.sp 1\n008380001). an even number of hex digits\n00840000.sp 1\n008420002). a character string enclosed in apostrophes (');\n00844000an apostrophe is represented by 2 apostrophes\n00846000(i.e., \"CAN'T\" is entered as \"CAN''T\").\n00848000.sp 1\n008500003). any combination of 1). and 2).\n00852000.sp 1\n008540004). any of the above,\n00856000separated by commas (,).\n00858000.in 9\n00860000.hi 13\n00862000.sp 2\n00864000REPLACE \u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00866000.br\n00868000REP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00870000.br\n00872000R \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00874000.br\n00876000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to replace data\n00878000at the specified relative location, r, as adjusted by the NAME,\n00880000BASE, and INDEX statements in effect.\n00882000See VER for a description of formats.\n00884000The effect of a REP is suppressed if the NOGO switch is set,\n00886000either because of a REP failure (see REP) or by an invalid\n00888000control statement (however, see GO and RESET).\n00890000.sp 2\n00892000CONSOLE\n00894000.br\n00896000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cc\n00898000.br\n00900000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cca\n00902000.br\n00904000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n00906000.br\n00908000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n00910000.br\n00912000CON\n00914000.br\n00916000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cc\n00918000.br\n00920000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cca\n00922000.br\n00924000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n00926000.br\n00928000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n00930000.br\n00932000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to cause subsequent input\n00934000to be from the CRT (if a local 2260 or 3270 is assigned),\n00936000the terminal (if TSO),\n00938000or the operators console (via WTO/WTOR and REPLY/MODIFY).\n00940000A specific console may be assigned by a two hex digit UCMID\n00942000(with an optional area identifier from A-Z) or\n00944000by a unit address.\n00946000Routing codes and descriptors may be specified in the form\n00948000ddddrrrr, where d is a 16 bit descriptor mask and\n00950000r is a 16 bit routing code mask.\n00952000.sp 2\n00954000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00956000.br\n00958000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00960000.br\n00962000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00964000.br\n00966000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00968000.br\n00970000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00972000.br\n00974000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00976000.br\n00978000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00980000.br\n00982000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00984000.br\n00986000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a dump of the specified\n00988000module or CSECT,\n00990000prior to applying any REPs.\n00992000The dump will contain a display of 16 bytes/line, in the format:\n00994000.ll 120\n00996000.nj\n00998000.hi 0\n01000000.in 0\n01002000.sp 2\n01004000R:b\b/rrrrrrb\b/A:b\b/aaaaaab\b/b\b/xxxxxxxxb\b/xxxxxxxxb\b/b\b/b\b/xxxxxxxxb\b/xxxxxxxxb\b/b\b/*eeeeeeeeeeeeeeee*\n01006000.ll 70\n01008000.fi l\n01010000.hi 5\n01012000.in 22\n01014000.sp 2\n01016000  Where r is the relative address in hex\n01018000.in 28\n01020000.br\n01022000  a is the absolute address in hex\n01024000.br\n01026000  x is the data in hex\n01028000.br\n01030000  e is the data the data in EBCDIC, with unprintable characters\n01032000displayed as periods (.) or quotes (\").\n01034000.br\n01036000 b\b/ is a blank\n01038000.in 9\n01040000.hi 13\n01042000.sp 1\n01044000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acA character is considered unprintable if it\n01046000does not appear on the CRT;\n01048000if called from a non-CRT TSO terminal or run in batch\n01050000without a CRT,\n01052000a character is unprintable if it does not appear un the PN train.\n01054000A cent sign (\u00a2) is considered unprintable on the 2260\n01056000since it is used as an SMI (>\b|).\n01058000A quote rather than a period will be substituted for each\n01060000unprintable character only for the 2260;\n01062000quotes appear on the 2260 as an error symbol (_\b<\b>\b\u00ac).\n01064000.sp 2\n01066000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n01068000.br\n01070000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n01072000.br\n01074000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a partial dump of the\n01076000CSECT or module identified in the preceeding NAME statement.\n01078000r is 2, 4, or 6 hex digits,\n01080000preceeded by a hyphen if negative;\n01082000s is 2, 4, or 6 hex digits.\n01084000.sp 1\n01086000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe data beginning at r,\n01088000adjusted by the preceeding NAME, INDEX, and BASE statements,\n01090000is displayed in the format shown above.\n01092000The number of bytes dumped will be given by s,\n01094000however the dump will always begin and end on a quadword\n01096000(16 byte) boundary.\n01098000.sp 2\n01100000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n01102000.br\n01104000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n01106000.br\n01108000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n01110000.br\n01112000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n01114000.br\n01116000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n01118000.br\n01120000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\n01122000except that VERs and REPs will be processed prior\n01124000to printing the dump.\n01126000.sp 2\n01128000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n01130000.br\n01132000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n01134000.br\n01136000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n01138000.br\n01140000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n01142000.br\n01144000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n01146000.br\n01148000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\n01150000except that VERs and REPs will be processed will be processed\n01152000prior to printing the dump and that the format of the dump is different.\n01154000Each halfword will be treated as the beginning of an instruction\n01156000for the purpose of printing an opcode under the hex value.\n01158000The dump will contain a display of 16 bytes/line, in the format:\n01160000.ll 120\n01162000.hi 0\n01164000.in 0\n01166000.nj\n01168000rrrrrrb\b/aaaaaab\b/b\b/xxxxb\b/xxxxb\b/b\b/xxxxb\b/xxxxb\b/b\b/b\b/xxxxb\b/xxxxb\b/b\b/xxxxb\b/xxxxb\b/b\b/*eeeeeeeeeeeeeeee*\n01170000b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/oooob\b/oooob\b/b\b/oooob\b/oooob\b/b\b/b\b/oooob\b/oooob\b/b\b/oooob\b/oooo\n01172000.fi l\n01174000.ll 70\n01176000.in 22\n01178000.hi 5\n01180000.sp 1\n01182000 Where r is the hex relative address\n01184000.in 28\n01186000a is the hex absolute address\n01188000.br\n01190000x is the hex data\n01192000.br\n01194000e is the EBCDIC data\n01196000.br\n01198000o is the opcode for the above data,\n01200000truncated to 5 characters\n01202000.br\n01204000b\b/ is a blank.\n01206000.in 9\n01208000.hi 13\n01210000.sp 2\n01212000HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list\n01214000of valid command names.\n01216000If a CRT is assigned,\n01218000or if MZAP is being run from a TSO terminal,\n01220000attention mode is forced and a $HELP is simulated\n01222000to enable the user to set the speed or hold options;\n01224000the list of commands will begin when a null line is entered.\n01226000The list can be terminated by entering an attention message\n01228000of \"STOP\" from the terminal/CRT or by the operator command:\n01230000\"P id\", where id is the jobname or START id.\n01232000.sp 2\n01234000HELP cmd \u00ac\u00ac\u00ac\u00ac\n01236000.br\n01238000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list of valid operands\n01240000for the designated input statement.\n01242000If a CRT is assigned or MZAP was invoked via TSO,\n01244000attention mode is forced and a $HELP is simulated\n01246000to enable the user to set the speed or hold options;\n01248000the list of operands will begin when a null line is entered.\n01250000The list can be terminated by entering an attention message\n01252000of \"STOP\" form the terminal/CRT or by the operator command:\n01254000\"P id,STOP\", where id is the jobname or START id.\n01256000.sp 2\n01258000SETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n01260000.br\n01262000<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n01264000.br\n01266000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement, during dump processing or VERIFY/REP\n01268000processing;\n01270000causes the limits (address,length) and index currently in effect\n01272000to be saved in one of 16 MZAP \"reference pointers\";\n01274000refdigit, which may be any hex digit from 0 to F,\n01276000is used to identify this information for subsequent use\n01278000(see POINT).\n01280000.sp 2\n01282000SETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n01284000.br\n01286000<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n01288000.br\n01290000SETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n01292000.br\n01294000<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n01296000.br\n01298000SETPTR,plen \u00acrefdigit ptr len\n01300000.br\n01302000<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n01304000.br\n01306000SETPTR,plen \u00acrefdigit ptr len-pfx\n01308000.br\n01310000<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n01312000.br\n01314000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement,\n01316000during dump or VERIFY/REPLACE processing,\n01318000saves the limits (address, length) and index of a control block\n01320000as described below;\n01322000refdigit, which may be any hex digit from 0 to F,\n01324000is used to identify this information for subsequent use\n01326000(see POINT).\n01328000.sp 1\n01330000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acplen, if present, defines the type of pointer;\n01332000it may have the values 15, 16, 24, or 32 (the default);\n01334000in addition, Y, H, AL3, and A are synonymous to 15, 16, 24, and 32.\n01336000(Only the last 24 bits of a 32 bit pointer are used.)\n01338000.sp 1\n01340000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr must be an even number of hex digits,\n01342000giving the relative address of a pointer.\n01344000In what follows, \"(ptr)\" denotes the contents of the designated location.\n01346000.sp 1\n01348000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00aclen must be an even number of hex digits,\n01350000giving the size of the control block pointed to\n01352000(excluding prefix, if any).\n01354000.sp 1\n01356000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acpfx, if specified, must be an even number of hex digits,\n01358000giving the length in bytes of the control block prefix.\n01360000The hyphen separating len and pfx may be preceeded by blanks,\n01362000but may not be succeeded by blanks.\n01364000pfx is assumed to be 0 if not specified.\n01366000.sp 1\n01368000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acWhen the specified pointer, (ptr),\n01370000is accessed, the following are computed:\n01372000.nj\n01374000.in 25\n01376000.hi 0\n01378000address    is    (ptr)-pfx\n01380000length     is    len + pfx\n01382000index      is    (ptr)\n01384000relative\n01386000 index     is    index - address = pfx\n01388000.fi l\n01390000.in 10\n01392000.hi 12\n01394000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index are then\n01396000saved in the requested reference pointer.\n01398000.sp 2\n01400000POINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n01402000.br\n01404000-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n01406000.br\n01408000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index last set into\n01410000the designated reference pointer are made current;\n01412000the index may be modified by a subsequent BASE or INDEX (hex only)\n01414000statement.\n01416000.sp 2\n01418000POINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n01420000.br\n01422000-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n01424000.br\n01426000POINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n01428000.br\n01430000-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n01432000.br\n01434000POINT,plen \u00acptr len\n01436000.br\n01438000->,plen \u00ac\u00ac\u00ac\u00acptr len\n01440000.br\n01442000POINT,plen \u00acptr len-pfx\n01444000.br\n01446000->,plen \u00ac\u00ac\u00ac\u00acptr len-pfx\n01448000.br\n01450000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index for a control block\n01452000are made current.\n01454000See SETPTR for an explanation of the operands.\n01456000.in 0\n01458000.hi 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "INTRO": {"ttr": 2053, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00\\x13\\x00\\x13\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 19, "newlines": 19, "modlines": 0, "user": "MZAPVB"}, "text": "00002000I.\u00actINTRODUCTION\n00004000.sp 1\n00006000.ur .sr intro &sysppage\n00008000.in 5\n00010000.fi l\n00012000This program is intendended to provide, for OS/360 (MVT) and OS/VS2,\n00014000the same function as the IBM service aid COREZAP0 (360S-01114-00),\n00016000referred to here as CZAP;\n00018000that is, to apply patches to programs in main storage.\n00020000Several of the control cards have an altered syntax in order\n00022000to permit names to be specified without framing characters.\n00024000There is a chart at the end of this writeup which illustrates\n00026000the known differences.\n00028000.sp 1\n00030000MZAP is organized as an overlay structure.\n00032000Information is passed between overlays through a set of switches\n00034000and through a chain of control of control blocks constructed\n00036000as a result of the input statements read.\n00038000.in 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "JCL": {"ttr": 2068, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00m\\x00m\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 109, "newlines": 109, "modlines": 0, "user": "MZAPVB"}, "text": "00002000V. \u00acJCL\n00004000.in 5\n00006000.sp 1\n00008000MZAP requires the following JCL statements:\n00010000.nj\n00012000.sp 1\n00014000 1)  //       EXEC  PGM=MOREZAP,REGION=100K\n00016000 2)  //STEPLIB  DD  ...\n00018000 3)  //SYSNUC   DD  DSN=SYS1.NUCLEUS(IEANUC0x),DISP=SHR\n00020000 4)  //SVCLIB   DD  DSN=SYS1.SVCLIB,DISP=SHR\n00022000 5)  //CMDLIB   DD  DSN=SYS1.CMDLIB,DISP=SHR\n00024000 6)  //LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n00026000 7)  //         DD  ...\n00028000 8)  //ddn      DD  ...\n00030000 9)  //IEFRDER  DD  UNIT=cuu\n0003200010)  //SYSPRINT DD  SYSOUT=A\n0003400011)  //SYSIN    DD  *\n00036000.fi\n00038000.in 9\n00040000.sp 1\n000420001.) The REGION size required will vary depending on the\n00044000size of the CESD for the nucleus and on the number of DD\n00046000statements.\n00048000.sp 1\n000500002) This statement is not required if MOREZAP is located in\n00052000a JOBLIB or in the system link libraries.\n00054000.sp 1\n000560003) This statement is required;\n00058000it must specify the nucleus currently loaded.\n00060000.sp 1\n000620004) This statement is required if any module in SVCLIB is referenced\n00064000in a NAME or DUMP statement.\n00066000.sp\n000680005) This statement is required if any module in the TSLPA is referenced\n00070000in a NAME or DUMP statement.\n00072000.sp\n000740006) This statement is required if any module in the system\n00076000LINK library is referenced in a NAME or DUMP statement.\n00078000If SYS1.PARMLIB(LNKLST00) specified data sets concatemated to SYS1.LINKLIB,\n00080000then these data sets must be specified on concatenated DD statements,\n00082000in the same order as in LNKLST00.\n00084000.sp 1\n000860007) See 6.\n00088000.sp 1\n000900008) Optional additional libraries may be specified;\n00092000the ddname should be the same as the operand of the LIB\n00094000statement which specifies the data set.\n00096000.sp 1\n000980009) Optional 2260 (960 byte screen, local mode) or\n001000003277 (1920 byte screen, local mode, EBCDIC) for\n00102000control statement and attention input.\n00104000Any ddname desired may be used,\n00106000however IEFRDER is suggested if MZAP is\n00108000to be invoked via a START command.\n00110000.sp 1\n0011200010) Printed output.\n00114000If no BLKSIZE is specified, 141 will be used for unit record\n00116000and 685 for tape or disk.\n00118000The user should specify the largest blocksize acceptable to\n00120000the system output writer at his installation.\n00122000If the installation is using ASP,\n00124000the blocksize should not exceed the ASP buffer size.\n00126000.sp 1\n0012800011) Control statement input.\n00130000Additional input may be requested from the operator with\n00132000a CONSOLE statement.\n00134000.in 5\n00136000.sp 2\n00138000The required JCL may be preceeded by a JOB card and submitted\n00140000through the input stream, or by SUBMIT.\n00142000Alternatively, the user may add the JCL to SYS1.PROCLIB,\n00144000and invoke MZAP with a START command.\n00146000See the Operators Reference and JCL Reference for more\n00148000information on catalogued procedures and START commands.\n00150000.in 8\n00152000.cp 19\n00154000.se ex1='&sysppage'\n00156000.nf\n00158000.sp 2\n00160000//        EXEC   PGM=IEBUPDTE,PARM=NEW\n00162000//SYSUT2    DD   DSN=SYS1.PROCLIB,DISP=MOD\n00164000//SYSPRINT  DD   SYSOUT=A\n00166000//SYSIN     DD   DATA\n00168000.li\n00170000./         ADD   NAME=MZAP,LIST=ALL\n00172000.li\n00174000./      NUMBER   NEW1=1000,INCR=1000\n00176000//MZAP    PROC   NUC=1\n00178000//IEFPROC EXEC   PGM=MZAP\n00180000//STEPLIB   DD   DSN=SYS2.ASM.XEQ,DISP=SHR\n00182000//SYSNUC    DD   DSN=SYS1.NUCLEUS(IEANUC0&NUC),DISP=SHR\n00184000//IEFRDER   DD   UNIT=290\n00186000//SVCLIB    DD   DSN=SYS1.SVCLIB,DISP=SHR\n00188000//LINKLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n00190000//          DD   DSN=SYS2.linklib,disp=SHR\n00192000//CMDLIB    DD   DSN=SYS1.CMDLIB,DISP=SHR\n00194000/*\n00196000.sp 1\n00198000       Adding PROC to PROCLIB\n00200000              (Example 1)\n00202000.sp 4\n00204000.cp 4\n00206000.se ex2 '&sysppage'\n00208000           S  MZAP.KENT,046,NUC=2\n00210000.sp 1\n00212000       Starting MZAP using sample PROC\n00214000              (Example 2)\n00216000.hi 0\n00218000.in 0\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MANUAL": {"ttr": 2305, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00a\\x00a\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 97, "newlines": 97, "modlines": 0, "user": "MZAPVB"}, "text": "00002000.cm COPYRIGHT 1975 Shmuel (Seymour J.)  Metz\n00004000.im initdoc\n00006000.ro\n00008000.ce data\n00010000MOREZAP\n00012000\n00014000- TABLE OF CONTENTS -\n00016000.sp 1\n00018000.ur tm=&systm hm=&syshm hs=&syshs\n00020000.end\n00022000.nf\n00024000.sp 2\n00026000.tb 55\n00028000.oc _/1\n00030000 \u00actPage\n00032000.tb ./55\n00034000.sp 1\n00036000.ur    I.  INTRODUCTION \u00act&intro\n00038000.sp 1\n00040000.ur   II.  SYSTEM and INPUT/OUTPUT REQUIREMENTS \u00act&system\n00042000.sp 1\n00044000.ur  III.  Attention/MODIFY Messages \u00act&attn\n00046000.sp 1\n00048000.ur   IV.  INPUT Statements \u00act&input\n00050000.sp 1\n00052000.ur    V.  JCL \u00act&jcl\n00054000.ur         Example 1 \u00act&ex1\n00056000.ur         Example 2 \u00act&ex2\n00058000.sp 1\n00060000.ur   VI.  MESSAGES\n00062000.ur         General \u00act&msgeneral\n00064000.ur         Common Messages \u00act&msgcommon\n00066000.ur         Initialization Messages \u00act&msginit\n00068000.ur         Input Messages          \u00act&msginput\n00070000.ur         HELP Messages           \u00act&msghelp\n00072000.ur         DEBUG Messages          \u00act&msgdebug\n00074000.ur         ESD Messages            \u00act&msgesd\n00076000.ur         DUMP Messages           \u00act&msgdump\n00078000.ur         VER/REP Messages        \u00act&msgverep\n00080000.ur         Final Housekeeping and\n00082000.ur          Reinitialization Messages \u00act&msgfinal\n00084000.sp 1\n00086000.ur  VII.  MZAP/CZAP Comparison    \u00act&compare\n00088000.sp 1\n00090000.ur VIII.  Index to Input Statements. \u00act&index\n00092000.sp 1\n00094000       Sample Output                  \u00actA-1\n00096000.tb 5 10 15 20 25 30 35 40 45 50 55 60 65\n00098000.pa\n00100000.rm * NOSAVE NOSAVE\n00102000.se intro &sysppage\n00104000.rm\n00106000.im intro\n00108000.$resetdoc\n00110000.pa\n00112000.rm * NOSAVE NOSAVE\n00114000.se system &sysppage\n00116000.rm\n00118000.im system\n00120000.$resetdoc\n00122000.pa\n00124000.ar\n00126000.rm * NOSAVE NOSAVE\n00128000.se attn &sysppage\n00130000.rm\n00132000.im attn\n00134000.$resetdoc\n00136000.pa\n00138000.rm * NOSAVE NOSAVE\n00140000.se input &sysppage\n00142000.rm\n00144000.im input\n00146000.$resetdoc\n00148000.pa\n00150000.rm * NOSAVE NOSAVE\n00152000.se jcl &sysppage\n00154000.rm\n00156000.im jcl\n00158000.$resetdoc\n00160000.pa\n00162000.rm * NOSAVE NOSAVE\n00164000.se messages &sysppage\n00166000.rm\n00168000.im messages\n00170000.$resetdoc\n00172000.pa\n00174000.rm * NOSAVE NOSAVE\n00176000.se comparison &sysppage\n00178000.rm\n00180000.im compare\n00182000.$resetdoc\n00184000.pa\n00186000.rm * NOSAVE NOSAVE\n00188000.se index &sysppage\n00190000.rm\n00192000.im index\n00194000.sr sample 'A-1'\n", "mimetype": "text/plain", "datatype": "unknown-8bit", "extension": ".txt"}, "MESSAGES": {"ttr": 1803, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x03\\xf7\\x03\\xf7\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 1015, "newlines": 1015, "modlines": 0, "user": "MZAPVB"}, "text": "00002000VI. \u00acMESSAGES\n00004000.in 5\n00006000.fo all l\n00008000.sp 1\n00010000Except for prompting, listing of input,\n00012000module/csect/control block dumps, and debug output,\n00014000all messages produced by MZAP have a common format:\n00016000.in 15\n00018000.sp 2\n00020000MZPfnnabtext\n00022000.in 5\n00024000.sp 1\n00026000Where f identifies the functional area:\n00028000.in 18\n00030000.hi 3\n00032000.sp 1\n000340000 \u00accommon\n00036000.br\n000380001 \u00acinitialization\n00040000.br\n000420002 \u00accontrol card scan\n00044000.br\n00046000H \u00acHELP\n00048000.br\n00050000D \u00acDEBUG\n00052000.br\n000540003 \u00acCDE search\n00056000.br\n000580004 \u00acESD processing and module/csect/location listing\n00060000.br\n000620005 \u00acdump processing\n00064000.br\n000660006 \u00acVER/REP processing\n00068000.br\n000700007 \u00acfinal housekeeping, reinitialization, and termination\n00072000.hi 0\n00074000.sp 1\n00076000.in 10\n00078000nn is a decimal message number within function\n00080000.sp 1\n00082000a \u00acis an action indicator:\n00084000A if action required, I otherwise.\n00086000.in 5\n00088000.sp 2\n00090000When a message relates to a specific input statement and\n00092000does not immediately follow the statement,\n00094000the message text will normally begin with the\n000960005 digit sequence number assigned when that statement was read.\n00098000.in 0\n00100000.hi 0\n00102000.pa\n00104000.ce on\n00106000Common Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________\n00108000.ce off\n00110000.hi 6\n00112000.sp 3\n00114000>\b|\n00116000.br\n00118000sssss>\n00120000.br\n00122000sssss>\b|\n00124000.br\n00126000sssss\n00128000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acInput required from the terminal, 2260, or 3270.\n00130000.sp 2\n00132000EH?>\n00134000.br\n00136000EH?>\b|\n00138000.br\n00140000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAttention mode is in effect.\n00142000Key in attention input or terminated attention mode\n00144000with a null line.\n00146000.sp 2\n00148000MZP001I I/O ERROR ON 2260 - USE CONSOLE\n00150000.br\n00152000MZP001I I/O ERROR ON 3270 - USE CONSOLE\n00154000.in 10\n00156000ROUTCDE: 1,10,11\n00158000.br\n00160000DESC: \u00ac\u00ac\u00ac1\n00162000.in 0\n00164000.sp 1\n00166000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acUnrecoverable I/O error on the CRT.\n00168000Interactive I/O will be done via the WTO/WTOR/MODIFY interface.\n00170000.sp 2\n00172000MZP0002I $HELP: $HOLD|$AUTO CON STOP $PAGE|$HALFAST|$FAST|$SLOW\n00174000.br\n00176000.sp 1\n00178000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither HELP, $HELP or an invalid attention was entered.\n00180000The valid attention messages are listed,\n00182000with mutually exclusive messages separated by logical OR (|).\n00184000.sp 2\n00186000MZP0003A\n00188000.br\n00190000.in 10\n00192000ROUTCDE: 9,10\n00194000.br\n00196000DESC: \u00ac\u00ac\u00ac2\n00198000.br\n00200000.in 0\n00202000.sp 1\n00204000 \u00ac\u00ac\u00ac\u00ac\u00acInput required via REPLY.\n00206000.sp 2\n00208000sssss text\n00210000.in 10\n00212000ROUTCDE: 9,10\n00214000.br\n00216000DESC: \u00ac\u00ac\u00ac7\n00218000.sp 1\n00220000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acListing of user's input.\n00222000.sp 1\n00224000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated text was read and assigned the sequence number\n00226000sssss.\n00228000The output is to SYSPRINT, terminal (if TSO CRT), or CRT (if assigned).\n00230000If the CONSOLE option is in effect, no CRT is assigned,\n00232000and MZAP is in batch, a WTO is used.\n00234000.pa\n00238000.ce on\n00240000Initialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________________\n00242000.ce off\n00246000.sp 2\n00248000.in 0\n00250000.hi 6\n00252000.sp 2\n00254000MZP100I MOREZAP VERSION mm/dd/yy hh.mm STARTING\n00256000.in 10\n00258000ROUTCDE: 9,10\n00260000.br\n00262000DESC: \u00ac\u00ac\u00ac6\n00264000.in 0\n00266000.sp 1\n00268000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP has been invoked.\n00270000Initialization status and error messages may follow.\n00272000.sp 2\n00274000MZP101I UNAUTHORIZED CPU FOR MZAP\n00276000.in 10\n00278000ROUTCDE: 1,9,11\n00280000.br\n00282000DESC: \u00ac\u00ac\u00ac1\n00284000.in 0\n00286000.sp 1\n00288000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP is not running on the machine it was destributed for;\n00290000if you wish to use MZAP, order a separate copy for each CPU\n00292000on which it is to be used.\n00294000.sp 2\n00296000MZP102I SYSPRINT CARD MISSING - OUTPUT ON CONSOLE\n00298000.br\n00300000MZP102I SYSPRINT CARD MISSING - OUTPUT ON TERMINAL\n00302000.in 10\n00304000ROUTCDE: 9,10\n00306000.br\n00308000DESC: \u00ac\u00ac\u00ac7\n00310000.in 0\n00312000.sp 1\n00314000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo SYSPRINT DD card is present, or, if TSO,\n00316000no suitable ALLOC was done for SYSPRINT.\n00318000Output will be via TPUT, if TSO,\n00320000to the CRT in batch,\n00322000and to the console via WTO if there is no CRT\n00324000assigned in batch.\n00326000.sp 2\n00328000MZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE\n00330000.br\n00332000MZP103I SYSIN DD CARD MISSING - INPUT FROM KEYBOARD\n00334000MZP103I SYSIN DD CARD MISSING - INPUT FROM TERMINAL\n00336000.in 10\n00338000ROUTCDE: 9,10\n00340000.br\n00342000DESC: \u00ac\u00ac\u00ac7\n00344000.in 0\n00346000.sp 1\n00348000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo appropriate ALLOC(TSO) or DD card for SYSIN.\n00350000Input will be via TPUT for TSO;\n00352000for batch, input will be from the keyboard of the\n00354000CRT, if one is assigned;\n00356000otherwise, input will be via REPLY to WTOR.\n00358000.sp 2\n00360000MZP104I SYSNUC MISSING OR INVALID\n00362000.in 10\n00364000ROUTCDE: 9,10,11\n00366000.br\n00368000DESC: \u00ac\u00ac\u00ac6\n00370000.in 0\n00372000.sp 1\n00374000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither there is no appropriate ALLOC(TSO) or DD card\n00376000for SYSNUC, or the DSNAME is not SYS1.NUCLEUS,\n00378000or it is not located on the IPL volume,\n00380000or the member name, IEANUC0x, is missing or is not the\n00382000nucleus most recently IPLed.\n00384000.sp 2\n00386000MZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED\n00388000.in 10\n00390000ROUTCDE: 10,11\n00392000.br\n00394000DESC: \u00ac\u00ac\u00ac7,8,9\n00396000.in 0\n00398000.sp 1\n00400000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn  ALLOC(TSO) or DD card exists for a graphics device\n00402000other than a 960 byte local 2260 or a 1980 byte local 3277.\n004040002250, 2280, etc., are all unsupported, as are all remote CRTs.\n00406000Sorry 'bout that!\n00408000.in 0\n00410000.hi 0\n00412000.pa\n00416000.ce on\n00418000Input Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n00420000\n00422000NOTE: NOGO\b\b\b\b____ switch will be set for all MZP2 messages.\n00424000.ce off\n00428000.sp 2\n00430000.in 0\n00432000.hi 6\n00434000MZP201I STATEMENT MISPLACED\n00436000.sp 1\n00438000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acVERIFY, REPLACE, POINT, etc. statement not\n00440000in the range of NAME statement.\n00442000.in 0\n00444000.sp 2\n00446000MZP202I INVALID OPCODE\n00448000.sp 1\n00450000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe first non-blank column of the input statement\n00452000does not contain a valid MZAP opcode, or the opcode is\n00454000invalid but has restrictions on its use.\n00456000For example, this message is produced if a GO statement\n00458000is present in SYSIN.\n00460000.sp 2\n00462000MZP203I DEVICE NOT FOUND\n00464000.sp 1\n00466000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn input statement, such a UCB, specified as\n00468000device address which was not present in any UCB.\n00470000.sp 2\n00472000MZP204I INVALID STATEMENT\n00474000.sp 1\n00476000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA syntax error is present in an input statement.\n00478000A logical OR (|) will be displaYED BELOW THE COLUMN\n00480000AT WHICH THE ERROR WAS DETECTED.\n00482000For an omitted operand, this will bee the end of the statement.\n00484000For an invalid negative hex operand,\n00486000this will be the end of the operand,\n00488000not\b\b\b___ under the hyphen.\n00490000.sp 2\n00492000MZP205I NOT A VALID CONSOLE\n00494000.sp 1\n00496000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a UCMID higher than the number of consoles\n00498000specified in the system,\n00500000he specified a unit (cuu) which is not defined as\n00502000an operators' console.\n00504000.sp 2\n00506000MZP206I NOT MCS\n00508000.sp 1\n00510000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn operand was specified on a UCM statement\n00512000which is only valid for a system with the MCS\n00514000(Multiple Console Support) option.\n00516000.sp 2\n00518000MZP207I HARDCPY=SYSLOG - NO UCM\n00520000.sp 1\n00522000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe statement UCM HARDCOPY is only valid if\n00524000a console device, rather than SYSLOG, is assigned the\n00526000SYSLOG function.\n00528000.sp 2\n00530000MZP208I CONSOLE NOT ACTIVE\n00532000.sp 1\n00534000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a console which is ONLINE or\n00536000OFFLINE, rather than in CONSOLE status.\n00538000.sp 2\n00540000MZP209I NOT SMF\n00542000.sp 1\n00544000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an input statement, such as SMCA,\n00546000which is only valid if the system is defined with\n00548000the SMF (System Management Facility) option.\n00550000.sp 2\n00552000MZP210I KEY xxxxxxxx?\n00554000.sp 1\n00556000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave a KEY statement with an invalid or\n00558000omitted operand.\n00560000He must reply with a valid key,\n00562000consisting of a scrambled version\n00564000of the displayed hexadecimal number.\n00566000If you don't know the magic number,\n00568000see your installation systems programmer for an explanation of why\n00570000you are not allowed to use this program!\n00572000.sp 2\n00574000MZP211I INVALID KEY\n00576000.sp 1\n00578000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an invalid reply to MZP210I,\n00580000or supplied an invalid operand on a KEY statement.\n00582000This message will be followed by MZP210I.\n00584000.sp 2\n00586000MZP212I TCAM IS NOT ACTIVE\n00588000.sp 1\n00590000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\n00592000such as AVT, which is only valid while TCAM is active.\n00594000.sp 2\n00596000MZP213I TSO IS NOT ACTIVE\n00598000.sp 1\n00600000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\n00602000such as TSCVT, which is only valid while TSO is active.\n00604000.sp 2\n00606000MZP214I HASP IS NOT ACTIVE\n00608000.sp 1\n00610000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\n00612000such as HCT, which is only valid while HASP is active.\n00614000.sp 2\n00616000MZP215I NAME NOT IN BLDL LIST\n00618000.sp 1\n00620000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac IThe user has supplied a BLDL statement which\n00622000specifies a module not found in the BLDL list(s)\n00624000used in the current IPL.\n00626000An alternative explanation is that, since the latest IPL,\n00628000the appropriate BLDL entry has been REPed to another name.\n00630000.hi 0\n00632000.in 0\n00634000.pa\n00636000.ce on\n00638000HELP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n00640000.ce off\n00642000.hi 6\n00644000.sp 2\n00646000MZPH01I ALL\n00648000.sp 1\n00650000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of all command names is in effect.\n00652000This message will remain on line 0 of the CRT\n00654000until the display is complete;\n00656000it will not appear on the console or SYSPRINT.\n00658000.sp 2\n00660000MZPH01I cmd\n00662000.sp 1\n00664000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of the operands of the designated command\n00666000is in effect.\n00668000See MZPH01I ALL.\n00670000.sp 2\n00672000MZPH02I USE HELP <cmd> FOR OPERANDS OF <cmd>\n00674000.sp 1\n00676000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis is the first line of output for HELP ALL.\n00678000If a supported CRT is assigned (960 byte local 2260,\n006800001920 byte 3277),\n00682000or if MZAP is being called from TSO,\n00684000this  will be followed by an MZP002I message;\n00686000enter any desired attention messages and then\n00688000terminate attention mode with a null line.\n00690000.sp 2\n00692000MZPH03I OPCODE cmd\n00694000.sp 1\n00696000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated opcode may be used in input statements.\n00698000.sp 2\n00700000MZPH04I INVALID OPCODE - HELP ALL FORCED\n00702000.sp 1\n00704000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe operand used for HELP was invalid,\n00706000and will be ignored.\n00708000A list of valid opcodes will be displayed.\n00710000.sp 2\n00712000MZPH05I OPERAND text\n00714000.sp 1\n00716000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe text listed is part of a description of\n00718000the operands of the command for which HELP was requested.\n00720000.hi 0\n00722000.in 0\n00724000.pa\n00726000.ce on\n00728000DEBUG Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n00730000.ce off\n00732000.sp 2\n00734000.li 1\n00736000MZPD01I VER/REP SNAP. SW=xx,xx,xx,xx\n00738000.sp 1\n00740000.in 10\n00742000A phase of MOREZAP has completed processing.\n00744000SW1-SW4 had the values, in hex, indicated in the message.\n00746000A set of messages, described below,\n00748000will be written for each of the MZAP control blocks\n00750000which have been constructed;\n00752000following this, the next phase will be called.\n00754000These messages are at least two lines, and include the following:\n00756000.in 0\n00758000.sp 2\n00760000.nf\n00762000.li 2\n00764000aaaaaa TYPE=xx: tttttttt NXT: nnnnnn LINE: ##### text\n00766000                                      FLG: ff\n00768000.fi l\n00770000.sp 1\n00772000.in 20\n00774000.hi 8\n00776000 Where a is the 6 hex digit virtual address of the control block\n00778000displayed.\n00780000.in 26\n00782000.hi 2\n00784000.sp 1\n00786000 x is the two hex digit type.\n00788000.sp 1\n00790000 t is a descrition of the type.\n00792000.sp 1\n00794000 n is the 6 hex digit address\n00796000of the next MZAP control block.\n00798000.sp 1\n00800000 # is the sequence number aSSIGNED TO THE INPUT STATEMENT\n00802000which generated the control block.\n00804000.sp 1\n00806000 f is the two hex digit flag field.\n00808000.hi 0\n00810000.in 0\n00812000.sp 2\n00814000.nf\n00818000.li 3\n00820000aaaaaa TYPE=00: VER      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(ddd-1)\n00822000                                      FLG: ff,ff ABS: xxxxxx\n00824000                                      vvvv,vvvv,vvvv,vvvvv,vvvv,vvvv,vvvv,vvvv,\n00826000.fi l\n00830000.sp 1\n00832000.in 20\n00834000.hi 8\n00836000 Where @ is the 6 hex digit relative address of the data to be verified.\n00838000.in 26\n00840000.hi 2\n00842000.sp 1\n00844000 m is the hex length-1 (i.e., as it would be used in a CLC).\n00846000.sp 1\n00848000 d is the decimal data length.\n00850000.sp 1\n00852000 x is the 6 digit absolute virtual address of the data to be  verified,\n00854000or is 0 if not yet known.\n00856000.sp 1\n00858000 v is the data to be used for verification,\n00860000or the data which failed to pass verification.\n00862000.sp 2\n00864000.hi 0\n00866000.in 0\n00870000.nf\n00872000.li 3\n00874000aaaaaa TYPE=01: REP      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(ddd-1)\n00876000                                      FLG: ff,ff ABS: xxxxxx\n00878000                                      rrrr,rrrr,rrrr,rrrrr,rrrr,rrrr,rrrr,rrrr,\n00880000.fi l\n00884000.in 20\n00886000.hi 8\n00888000.sp 1\n00890000 Where @ is the 6 hex digit relative address of the data to be replaced.\n00892000.in 26\n00894000.hi 2\n00896000.sp 1\n00898000 m is the hex length-1 (i.e., as it would be used in a MVC).\n00900000.sp 1\n00902000 d is the decimal data length.\n00904000.sp 1\n00906000 x is the 6 digit absolute virtual address of the data to be  replaced,\n00908000or is 0 if not yet known.\n00910000.sp 1\n00912000 r is the data to replace the data at @,\n00914000as relocated.\n00916000.sp 2\n00918000.hi 0\n00920000.in 0\n00922000.nf\n00924000.li 2\n00926000aaaaaa TYPE=02: BASE     NXT: nnnnnn LINE: ##### LOC: bbbbbb\n00928000                                      FLG: ff\n00930000.sp 1\n00932000.fi l\n00934000.in 20\n00936000.hi 8\n00938000 Where b is the 6 hex digit hex number to be subtraacted from\n00940000the relative address of each statement within\n00942000the scope of this BASE.\n00944000.hi 0\n00946000.in 0\n00948000.sp 2\n00950000.nf\n00952000.li 2\n00954000aaaaaa TYPE=03: INDEX    NXT: nnnnnn LINE: ##### LOC: xxxxxx IXNAME: eeeeeeee\n00956000                                      FLG: ff\n00958000.fi l\n00960000.sp 1\n00962000.in 20\n00964000.hi 8\n00966000 Where x is the 6 hex digit hex number,\n00968000as far as currently resolved,\n00970000to be used as a relocation factor for each\n00972000statement within the scope of this INDEX.\n00974000.in 26\n00976000.hi 2\n00978000.sp 1\n00980000 e is the csect or entry point within the module\n00982000whose address is resolved as x.\n00984000.in 0\n00986000.hi 0\n00988000.sp 2\n00990000.nf\n00992000.li 2\n00994000aaaaaa TYPE=04: HINDEX   NXT: nnnnnn LINE: ##### LOC: xxxxxx\n00996000                                      FLG: ff\n00998000.fi l\n01000000.sp 1\n01002000.in 20\n01004000.hi 8\n01006000 Where x is the 6 hex digit number to be added to\n01008000the relative address of each statement within the scope\n01010000of this INDEX.\n01012000.in 0\n01014000.hi 0\n01016000.sp 2\n01018000.nf\n01020000.li 3\n01022000aaaaaa TYPE=05: NAME     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01024000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01026000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01028000.fi l\n01030000.in 20\n01032000.hi 8\n01034000.sp 1\n01036000 Where x is the module or csect location,\n01038000as currently resolved.\n01040000.sp 1\n01042000.in 26\n01044000.hi 2\n01046000 m is the module name.\n01048000.sp 1\n01050000 r is the CDE (OS/MVT, OS/VS2) or RB (OS/MFT, OS/VS1) address,\n01052000if known, else 0.\n01054000This field is always 0 for the nucleus.\n01056000.sp 1\n01058000 s is the module or csect size, as currently resolved.\n01060000The module size for the nucleus is taken from  CVTNUCB.\n01062000.sp 1\n01064000 c is the csect name, if specified.\n01066000.sp 1\n01068000 y is the 6 hex digit address of the DCB for the library\n01070000containg the load module.\n01072000.sp 1\n01074000 d is the ddname of the library.\n01076000.sp 1\n01078000 z is the 8 hex digit System Status Information\n01080000(See the SRL for Services Aids).\n01082000.in 0\n01084000.hi 0\n01086000.sp 2\n01088000.nf\n01092000.li 2\n01094000aaaaaa TYPE=06: DUMP     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01096000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01098000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01100000.fi l\n01104000.in 20\n01106000.hi 8\n01108000.sp 1\n01110000Where all fields are as explained for 05 (NAME).\n01112000.in 0\n01114000.hi 0\n01116000.sp 2\n01118000.nf\n01122000.li 2\n01124000aaaaaa TYPE=07: DUMPA    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01126000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01128000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01130000.fi l\n01134000.in 20\n01136000.hi 8\n01138000.sp 1\n01140000Where all fields are as explained for 05 (NAME).\n01142000.in 0\n01144000.hi 0\n01146000.sp 2\n01148000.nf\n01152000.li 2\n01154000aaaaaa TYPE=08: DUMPT    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01156000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01158000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01160000.fi l\n01164000.in 20\n01166000.hi 8\n01168000.sp 1\n01170000Where all fields are as explained for 05 (NAME).\n01172000.in 0\n01174000.hi 0\n01176000.sp 2\n01178000.nf\n01182000.li 2\n01184000aaaaaa TYPE=09: HDUMP    NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n01186000                                      FLG: ff,ff ABS: xxxxxx\n01188000.fi l\n01192000.in 20\n01194000.hi 8\n01196000.sp 1\n01198000 Where @ is the 6 hex digit relative address of the\n01200000data to be dumped.\n01202000.in 26\n01204000.hi 2\n01206000.sp 1\n01208000 s is the 6 hex digit length of the area to be dumped.\n01210000.sp 1\n01212000 x is the 6 hex digit absolute virtual address of the data to be dumped,\n01214000or is 0 if not yet know.\n01216000.in 0\n01218000.hi 0\n01220000.sp 2\n01222000.nf\n01226000.li 2\n01228000aaaaaa TYPE=0A: HDUMPA   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n01230000                                      FLG: ff,ff ABS: xxxxxx\n01232000.fi l\n01236000.in 20\n01238000.hi 8\n01240000.sp 1\n01242000 Where @ is the 6 hex digit relative address of the\n01244000data to be dumped.\n01246000.in 26\n01248000.hi 2\n01250000.sp 1\n01252000 s is the 6 hex digit length of the area to be dumped.\n01254000.sp 1\n01256000 x is the 6 hex digit absolute virtual address of the data to be dumped,\n01258000or is 0 if not yet know.\n01260000.in 0\n01262000.hi 0\n01264000.sp 2\n01266000.nf\n01270000.li 2\n01272000aaaaaa TYPE=0B: HDUMPT   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n01274000                                      FLG: ff,ff ABS: xxxxxx\n01276000.fi l\n01280000.in 20\n01282000.hi 8\n01284000.sp 1\n01286000 Where @ is the 6 hex digit relative address of the\n01288000data to be dumped.\n01290000.in 26\n01292000.hi 2\n01294000.sp 1\n01296000 s is the 6 hex digit length of the area to be dumped.\n01298000.sp 1\n01300000 x is the 6 hex digit absolute virtual address of the data to be dumped,\n01302000or is 0 if not yet know.\n01304000.in 0\n01306000.hi 0\n01308000.sp 2\n01310000.nf\n01314000.li 2\n01316000aaaaaa TYPE=0C: LIB      NXT: nnnnnn LINE: ##### DCB: xxxxxx DDNAME: dddddddd\n01318000                                      FLG: ff\n01320000.fi l\n01324000.in 20\n01326000.hi 8\n01328000 Where x is the 6 hex digit absolute virtual address of the DCB,\n01330000or is 0 if LIB AUTO is in effect.\n01332000.in 26\n01334000.hi 2\n01336000.sp 1\n01338000 d is the ddname specified.\n01340000.in 0\n01342000.hi 0\n01344000.nf\n01346000.sp 2\n01350000.li 2\n01352000aaaaaa TYPE=0D: <- N *   NXT: nnnnnn LINE: ##### NDX: @@@@@@   LENB: ssss\n01354000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx    IXB: iiii\n01356000.fi l\n01358000.sp 1\n01362000.in 20\n01364000.hi 8\n01366000 Where @ is the absolute virtual index in effect at the time\n01368000the address, length, and index were saved.\n01370000.in 26\n01372000.hi 2\n01374000.sp 1\n01376000 s is the length of the module, csect, or control block.\n01378000.sp 1\n01380000 p is the address of the 8 byte area in which the address,\n01382000length, and relative index are to be stored.\n01384000.sp 1\n01386000 x is the absolute virtual address of the module, csect,\n01388000or control block.\n01390000.sp 1\n01392000 i is the relative index which was saved.\n01394000.in 0\n01396000.hi 0\n01398000.nf\n01400000.sp 2\n01404000.li 2\n01406000aaaaaa TYPE=0E: MVC      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: (mm(ddd-1)\n01408000                         DST: pppppp  FLG: ff,ff ABS: xxxxxx\n01410000.fi l\n01414000.in 20\n01416000.hi 8\n01418000.sp 1\n01420000 Where @ is the relative address of the data to be saved.\n01422000.in 26\n01424000.hi 2\n01426000.sp 1\n01428000 m is the hex length-1 (i.e., as it would be used in an MVC).\n01430000.sp 1\n01432000 d is the decimal length.\n01434000.sp 1\n01436000 p is the address of the area in which the data is to be saved.\n01438000.sp 1\n01440000 x is the absolute virtual address of the data to be saved,\n01442000or 0 if not known.\n01444000.in 0\n01446000.hi 0\n01448000.nf\n01450000.sp 2\n01454000.li 2\n01456000aaaaaa TYPE=0F: <- N PTR NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n01458000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n01460000.fi l\n01464000.in 20\n01466000.hi 8\n01468000.sp 1\n01470000 Where @ is the relative address of the pointer to\n01472000the desired control block.\n01474000.in 26\n01476000.hi 2\n01478000.sp 1\n01480000 s is the length of the control block pointed to.\n01482000.sp 1\n01484000 p is the address of the 8 byte area where\n01486000the address, length, and relative index are to be stored.\n01488000.sp 1\n01490000 x is the absolute virtual address of the desired control block,\n01492000or 0 if not known.\n01494000.sp 1\n01496000 i is the relative index.\n01498000.in 0\n01500000.hi 0\n01502000.nf\n01504000.sp 2\n01508000.li 2\n01510000aaaaaa TYPE=10: -> PTR   NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n01512000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n01514000.fi l\n01518000.in 20\n01520000.hi 8\n01522000.sp 1\n01524000 Where @ is the relative address of the pointer to\n01526000the desired control block.\n01528000.in 26\n01530000.hi 2\n01532000.sp 1\n01534000 s is the length of the control block pointed to.\n01536000.sp 1\n01538000 p is the absolute virtual address of the pointer to\n01540000the desired control block.\n01542000.sp 1\n01544000 x is the absolute virtual address of the desired control block,\n01546000or 0 if not known.\n01548000.sp 1\n01550000 i is the relative index.\n01552000.in 0\n01554000.hi 0\n01556000.nf\n01558000.sp 2\n01562000.li 2\n01564000aaaaaa TYPE=11: -> REF N NXT: nnnnnn LINE: ##### NDX: @@@@@@  LENB: ssss\n01566000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n01568000.fi l\n01572000.in 20\n01574000.hi 8\n01576000.sp 1\n01578000 Where @ is the absolute virtual INDEX in effect when\n01580000the address, size, and index were restored.\n01582000.in 26\n01584000.hi 2\n01586000.sp 1\n01588000 s is the length of the module, csect, or control block.\n01590000.sp 1\n01592000 p is the address of the 8 byte area from which\n01594000the address, size, and relative index were or are\n01596000to be restored.\n01598000.sp 1\n01600000 x is the absolute virtual adress of the module, csect,\n01602000or control block.\n01604000.sp 1\n01606000 i is the relative index.\n01608000.in 0\n01610000.hi 0\n01612000.pa\n01614000.ce on\n01616000ESD Messages\b\b\b\b\b\b\b\b\b\b\b\b____________\n01618000.ce off\n01620000.sp 2\n01622000MZP401I mmmmmmmm DIRECTORY I/O ERROR\n01624000.sp 1\n01626000.in 6\n01628000A return code of 8 was received from the BLDL macro,\n01630000indicating an I/O error in the directory\n01632000while trying to locate module m.\n01634000.in 0\n01636000.sp 2\n01638000MZP402I mmmmmmmm NOT FOUND\n01640000.sp 1\n01642000.in 6\n01644000A return code of 4 was received from the BLDL macro,\n01646000indicating that module m was not found\n01648000in the directory of any of the relevant libraries.\n01650000Add a DD card for the necessary library,\n01652000and if required, add a LIB statement.\n01654000.in 0\n01656000.sp 2\n01658000MZP403I mmmmmmmm NOT SCTR\n01660000.in 6\n01662000.sp 1\n01664000A load module was found to be in block load format\n01666000when scatter format was expected.\n01668000Either the specified module was the nucleus,\n01670000or it was loaded with more than one extent;\n01672000in either case, the module found in the library\n01674000cannot be the proper member, since it does not\n01676000have the SCTR attribute.\n01678000.in 0\n01680000.sp 2\n01682000MZP404I mmmmmmmm NO ESD\n01684000.in 6\n01686000.sp 1\n01688000The first record in load module m, or the first\n01690000record following the SYM records,\n01692000is not a CESD record.\n01694000Run IMBLIST (LISTLOAD) on the module,\n01696000and call your friendly neighbor IBM CE\n01698000- the linkage editor has just awarded you third prize,\n01700000and there are only two contestants.\n01702000.in 0\n01704000.sp 2\n01706000MZP405I mmmmmmmm NO CON\n01708000.in 6\n01710000.sp 1\n01712000A reccord follows a CESD record which is not a control,\n01714000IDR, SCTR, or CESD record.\n01716000Call (but keep it clean) your friendly, neighborhood CE,\n01718000as for MZP404I.\n01720000.in 0\n01722000.sp 2\n01724000MZP406I mmmmmmmm MISSING CESD\n01726000.in 6\n01728000.sp 1\n01730000A SCTR format record has fewer CESD records than expected;\n01732000the BLDL entry may have an incorrect table length or\n01734000there may be a missing or incorrect CESD record.\n01736000.sp 1\n01738000Before complaining to IBM, list the module with IMBLIST and\n01740000verify that the problem is in the load module;\n01742000this message could conceivably be caused by an error\n01744000in MZAP, in which case the complaint should come to me\n01746000rather than IBM.\n01748000If you received MZAP as an IUP from IBM,\n01750000rather than directly from me,\n01752000then they get the complaint regardless\n01754000- but no doubt I'll hear from them.\n01756000.in 0\n01758000.sp 2\n01760000MZP407I mmmmmmmm MISSING SC/TR\n01762000.in 6\n01764000.sp 1\n01766000A record type other than hex 10 was found while\n01768000reading in the scatter/translate table.\n01770000See the remarks for MZP404I and MZP406I.\n01772000.in 0\n01774000.sp 2\n01776000MZP410I sssss NAME: mmmmmmmm NOT LOADED\n01778000.sp 1\n01780000.in 6\n01782000Module m was not found in the RERP, RAM, RSVC,\n01784000or TSLPA linkpack queues, nor in the or selected JPAQ.\n01786000.in 0\n01788000.sp 2\n01790000MZP411I sssss NAME: mmmmmmmm NOT IN DIRECTORY\n01792000.in 6\n01794000.sp 1\n01796000 Module m was not found in the proper library.\n01798000Usually accompanied by message MZP401I or MZP402I.\n01800000.in 0\n01802000.sp 2\n01804000MZP412I sssss NAME: mmmmmmmm cccccccc NOT FOUND\n01806000.in 6\n01808000.sp 1\n01810000Csect c does not exist in module m,\n01812000or an error exists in the format of load module m.\n01814000.in 0\n01816000.sp 2\n01818000MZP413I sssss NAME: mmmmmmmm cccccccc ABS:  aaaaaa:aaaaaa\n01820000.in 6\n01822000.sp 1\n01824000The designated module or csect exists and was loaded at\n01826000the listed absolute virtual addresses.\n01828000.in 0\n01830000.sp 2\n01832000MZP414I sssss ENTRY eeeeeeee NOT FOUND\n01834000.in 6\n01836000.sp 1\n01838000Entry point e was either specified in an INDEX statement\n01840000or implied by a control block statement:\n01842000CVT, UCB, etc.;\n01844000it could not be found in the load module's CESD.\n01846000.in 0\n01848000.sp 2\n01850000MZP415I sssss ENTRY eeeeeeee ABS: aaaaaa\n01852000.in 6\n01854000.sp 1\n01856000Entry point e is at the specified absolute virtual address.\n01858000.in 0\n01860000.sp 2\n01862000MZP416I sssss REL: rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n01864000.in 6\n01866000.sp 1\n01868000Statement number s specified either:\n01870000a relative address beyond the module or csect;\n01872000a negative displacement beyond the control block prefix;\n01874000or an excessive length for a VER, REP, or DUMP.\n01876000The range of addresses given is listed as both relative and\n01878000absolute virtual addresses.\n01880000.in 0\n01882000.sp 2\n01884000MZP420I sssss INVALID POINTER AT aaaaaa\n01886000.in 6\n01888000.sp 1\n01890000A POINT or SETPTR statement refers to a halfword which is negative.\n01892000Since the pointer type was specified as Y (15),\n01894000this is invalid.\n01896000.in 0\n01898000.sp 2\n01900000MZP421I sssss REF NOT - POINT INVALID\n01902000.in 6\n01904000.sp 1\n01906000A POINT REF statement refers to a ref digit for which either:\n01908000.hi 3\n01910000.in 8\n01912000 1. There is no preceeding SETPTR.\n01914000 2. The last preceeding SETPTR was not successfully processed.\n01916000.hi 0\n01918000.in 0\n01920000.sp 2\n01922000MZP422I sssss INDEX: iiiiii LIMITS: aaaaaa:aaaaaa\n01924000.in 6\n01926000.sp 1\n01928000A POINT statement refers to the designated absolute virtual address, i.\n01930000The limits are for the entire area pointed to,\n01932000including the prefix, if any.\n01934000.in 0\n01936000.pa\n01938000.ce on\n01940000DUMP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n01942000.ce off\n01944000.sp 2\n01946000.fi l\n01950000MZP501I sssss \u00ddACCESSED VIA\u00a8 m \u00ddc\u00a8\n01952000\u00ddINDEX: e\u00a8 HEX/EBCDIC\u00dd/OPCODE\u00a8 DUMP\n01956000.in 6\n01958000.sp 1\n01960000This message is used as a subtile for all dumps.\n01962000The clause \"INDEX: eeeeeeee\" is present if an entry point\n01964000within the containing csect is specified,\n01966000either explicitly or implicitly.\n01968000The clause \"ACCESSED VIA\" is present if the limits\n01970000of the dump are relative to a location\n01972000found with a POINT statement;\n01974000any \"INDEX\" clause which would otherwise be supplied is suppressed,\n01976000in order not to exceed the line size of the 2260 or 3270.\n01978000.in 0\n01980000.hi 0\n01982000.pa\n01984000.ce daTA\n01986000VER/REP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b________________\n01988000.ce off\n01990000.sp 2\n01992000MZP601I sssss NAME mmmmmmmm cccccccc\n01994000.in 6\n01996000One or more errors have been found relating to the specified module.\n01998000Addition messages will be displayed to diagnose the exact errors.\n02000000.in 0\n02002000.sp 2\n02004000MZP602I sssss rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n02006000.in 6\n02008000.sp 1\n02010000The start or end address of the verify or replace is outside the\n02012000bounds of the module or csect.\n02014000.in 0\n02016000.sp 2\n02018000MZP603I sssss VERIFY FAILURE AT: rrrrrr ABS :aaaaaa\n02020000.in 6\n02022000.sp 1\n02024000The data in storage did not match the VERIFY data.\n02026000This message is always accompanied by MZP604I.\n02028000.in 0\n02030000.sp 2\n02032000MZP604I sssss ACTUAL CONTENT IS xxxx,xxxx,...\n02034000.in 6\n02036000.sp 1\n02038000This message immediately follows MZP603I.\n02040000.in 0\n02042000.sp 2\n02044000MZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL\n02046000.in 6\n02048000.sp 1\n02050000No errors were detected.\n02052000All REP operations, if any, were performed.\n02054000.in 0\n02056000.sp 2\n02058000MZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED\n02060000.in 6\n02062000.sp 1\n02064000An error was detected.\n02066000No REP operation is performed.\n02068000The user should correct the errors indicated\n02070000in the preceeding error messages.\n02072000.in 0\n02074000.pa\n02078000.in 12\n02080000.nf\n02082000Final Housekeeping and Reinitialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b________________________________________________\n02084000.fo\n02088000.sp 2\n02090000MZP701I EOD\n02092000.in 6\n02094000.sp 1\n02096000Either an end-of-file occurred on SYSIN or a RESET EOD\n02098000statement was read.\n02100000All input read prior to that point has been processed.\n02102000.in 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MZAP": {"ttr": 1281, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x08\\xc6\\x08\\xc6\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 2246, "newlines": 2246, "modlines": 0, "user": "MZAPVB"}, "text": "00001000.ss\n00003000.ll 70\n00004000.pl 60\n00005000.tt //METZ'S OWN RELIABLE EXTENDED ZAP (MOREZAP)//\n00005100.bt //- % -//\n00006000.ce data\n00007000MOREZAP\n00008000\n00009000- TABLE OF CONTENTS -\n00010000.end\n00012000.nj\n00013000.sp 2\n00014000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acPage\b\b\b\b____\n00015000.sp 1\n00016000 \u00ac\u00acI.  INTRODUCTION \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac2\n00017000.sp 1\n00018000 \u00acII.  SYSTEM and INPUT/OUTPUT REQUIREMENTS \u00ac\u00ac3\n00019000.sp 1\n00020000 III.  Attention/MODIFY Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac6\n00021000.sp 1\n00022000 \u00acIV.  INPUT Statements \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac7\n00023000.sp 1\n00024000 \u00ac\u00acV.  JCL \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac19\n00025000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acExample 1 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac20\n00026000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acExample 2 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac20\n00027000.sp 1\n00028000 \u00acVI. \u00acMESSAGES\n00029000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acGeneral \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac21\n00030000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acCommon Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac22\n00031000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acInitialization Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac23\n00032000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acInput Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac25\n00033000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acHELP Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac28\n00034000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDEBUG Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac29\n00035000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acESD Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac35\n00036000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDUMP Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac38\n00037000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acVER/REP Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac39\n00038000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acFinal Housekeeping and\n00039000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acReinitialization Messages \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac40\n00040000.sp 1\n00041000 VII. \u00acMZAP/CZAP Comparison \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac41\n00042000.sp 1\n00043000VIII. \u00acIndex to Input Statements. \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac43\n00044000.sp 1\n00045000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acSample Output \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acA-1\n00046000.pa\n00047000I. \u00ac\u00acINTRODUCTION\n00048000.sp\n00049000.in 5\n00050000.fi l\n00051000This program is intendended to provide, for MVT,\n00052000the same function as the IBM service aid COREZAP0 (360S-01114-00),\n00053000referred to here as CZAP;\n00054000that is, to apply patches to programs in main storage.\n00055000Several of the control cards have an altered syntax in order\n00056000to permit names to be specified without framing characters.\n00057000There is a chart at the end of this writeup which illustrates\n00058000the known differences.\n00059000.sp 1\n00060000MZAP is organized as an overlay structure.\n00061000Information is passed between overlays through a set of switches\n00062000and through a chain of control of control blocks constructed\n00063000as a result of the input statements read.\n00064000.pa\n00065000.in 0\n00066000II. SYSTEM and INPUT/OUTPUT REQUIREMENTS\n00067000.sp 1\n00068000.in 5\n00069000MZAP requires that the control program be OS/MVT or OS/65MP;\n00070000OS/VS2 Release 1.6 support is planned in the near future;\n00071000and provision has been made for easily adding MFT or VS1 support\n00072000with only minor modifications.\n00073000No optional OS facilities need be generated,\n00074000other than normal device support (for the 2260,\n00075000this must be explicitly requested via the GRAPHICS macro;\n00076000for the 3270, this must be requested via the BTAM option\n00077000of the DATAMGT macro; for all sequential and DA devices\n00078000this support is automatic).\n00079000In particular, MZAP does not use SVC 54 to get into key 0,\n00080000and hence ISAM is not required.\n00081000When VS support is available,\n00082000MZAP will be required to run only from an authorized library.\n00083000.sp 1\n00084000MZAP is intended to obtain input from multiple sources:\n00085000a data set called SYSIN,\n00086000a TSO terminal,\n00087000a local crt, or an operator's console.\n00088000If MZAP is invoked from a TSO terminal,\n00089000input can be supplied only form SYSIN or the terminal;\n00090000otherwise a DD statement may be supplied allocating a\n00091000960 byte (12*80) local 2260 with line addressing and\n00092000non-destructive cursor\n00093000or a 1920 byte (24*80) EBCDIC local 3270,\n00094000which may be used for both input and output.\n00095000Input, output, and attention from an operators\n00096000console are performed via REPLY,\n00097000WTO/WTOR, and MODIFY;\n00098000they are normally inactive if a CRT is assigned,\n00099000but an uncorrectable I/O error on the CRT will\n00100000force transfer of these functions (the operator may\n00101000perform a MODIFY even when the CRT is operational).\n00102000.sp 1\n00103000Input is normally from a sequential data set,\n00104000SYSIN. If SYSIN is not defined or is a DD DUMMY,\n00105000\"console input mode\" is set.\n00106000This mode is also set by a CONSOLE statement read\n00107000from SYSIN or by a MODIFY or attention with the text CONSOLE.\n00108000Input is always translated to upper case.\n00109000Console mode is terminated, and control reverted to SYSIN,\n00110000by an END statement;\n00111000this is permitted only when SYSIN is assigned.\n00112000.sp 1\n00113000Output is normally to SYSPRINT.\n00114000If a 2260 or 3270 is assigned,\n00115000all output except page headings will be displayed on the CRT;\n00116000if in console input mode with no CRT assigned,\n00117000this output will be displayed via WTO/TPUT.\n00118000.sp 1\n00119000When a TSO terminal or a CRT is used,\n00120000it is in one of two states: normal and attention.\n00121000In normal state, input is solicited in a device-dependent fashion:\n00122000.in 10\n00123000.sp 1\n00124000.hi 12\n001250002260 local:\n00126000Blanking the entry line and displaying an SMI;\n00127000the user keys in a command and depresses SHIFT and ENTER simultaneously.\n00128000.sp 1\n001290003270 local:\n00130000writing a statement number, Blanking an entry line,\n00131000and positioning the cursor;\n00132000the user enters a command and depresses ENTER.\n00133000.sp 1\n001340002260 TSO: \u00ac\n00135000Writing a statement number followed by an SMI;\n00136000the user enters a command and SHIFT/ENTER.\n00137000.sp 1\n001380003270 TSO: \u00ac\n00139000writing a statement number and positioning the cursor;\n00140000the user enters a command and ENTER.\n00141000.sp 1\n00142000TSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00143000Writing a statement number;\n00144000the user enters a command and depresses RETURN, EOB, etc.,\n00145000according to the type of terminal.\n00146000.sp 2\n00147000.hi 0\n00148000.in 5\n00149000Attention state is entered in a device-dependent fashion:\n00150000.in 10\n00151000.hi 12\n00152000.sp 1\n00153000Local 2260:\n00154000SHIFT/ENTER within 1.5 seconds after\n00155000line 11(bottom line) is updated;\n00156000.sp 1\n00157000Local 3270:\n00158000ENTER or PA1 any time the keyboard is\n00159000unlocked;\n00160000.sp 1\n00161000TSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00162000the technique depends on type of terminal,\n00163000TSO/TCAM generation,\n00164000and the users last TERM command - it may be BREAK or\n00165000may be a simulated attention.\n00166000Attention state is also entered automatically when in HOLD mode\n00167000(see below).\n00168000.sp 1\n00169000.hi 0\n00170000.in 5\n00171000When in attention state,\n00172000the user will be prompted to key in an attention message by\n00173000blanking an entry line and displaying \"EH ? \" followed by an SMI (>\b|)\n00174000- a greater than sign (>) will be used on other than a 2260.\n00175000The prompt will be repeated after each attention message,\n00176000allowing the user to key in as many messages as he wishes;\n00177000attention state will be reset when he enters a null line\n00178000(SHIFT/ENTER, SHIFT, CR, etc. with no preceeding text).\n00179000.sp 2\n00180000.hi 0\n00181000.in 5\n00182000.sp 2\n00183000Output to the CRT/terminal may be done in two modes:\n00184000AUTO and HOLD;\n00185000output may be at any of four speeds:\n00186000SLOW, HALFAST, FAST, or PAGE.\n00187000In AUTO mode, output occurs continously until input is\n00188000required or the user enters attention state;\n00189000in HOLD mode attention state is entered after each write\n00190000and the user must enter a null line to continue.\n00191000.sp 2\n00192000Output to a CRT will always be in full screen mode;\n00193000the oldest line on the screen will be indicated by a logical or\n00194000(|).\n00195000The write will take place every time one, two, four, or twelve lines\n00196000(1,4,8, or 24 for 3270) have been written,\n00197000depending on the speed option.\n00198000In PAGE mode, one line (two if a dump is in progress)\n00199000will be reserved on the screen,\n00200000resulting in a net display of 11 (10 if a dump) lines per 2260 screen\n00201000and 23 (22 if a dump) per 3270 screen.\n00202000Regardless of the speed,\n00203000the current contents of the buffer will be written prior to\n00204000soliciting input or additional attention messages.\n00205000.sp 2\n00206000When a CRT is not assigned,\n00207000operator input in batch (non-TSO) will be solicited by a WTOR;\n00208000attention messages must be entered by giving the command\n00209000\"MODIFY id,msg\" where id is the jobname or START id and\n00210000msg is the text of the attention message.\n00211000See section V for a description of START requirements.\n00212000.pa\n00213000.in 0\n00214000III. Attention/MODIFY messages\n00215000.in 5\n00216000.sp 1\n00217000The following attention messages are allowed;\n00218000they may be in lower case since MZAP translates to upper case:\n00219000.sp 2\n00220000.in 10\n00221000.hi 12\n00222000$HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00223000display list of valid nonpriveleged attention messages.\n00224000This function is forced if an invalid attention message is entered.\n00225000.sp 1\n00226000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00227000set console input mode\n00228000.sp 1\n00229000STOP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00230000terminate dump or HELP\n00231000.sp 1\n00232000$HOLD \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00233000enter attention state after every write\n00234000.sp 1\n00235000.br\n00236000$AUTO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00237000restore normal mode after $HOLD\n00238000.sp 1\n00239000$SLOW \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00240000do 12 writes/2260 screen, 24/3270.\n00241000A write will occur for each output line.\n00242000.sp 1\n00243000$HALFAST \u00ac\u00ac\u00ac\n00244000do 6 writes/screen.\n00245000a write will occur for every 2 output lines(2260)\n00246000or every 4 lines(3270)\n00247000.sp 1\n00248000$FAST \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00249000do 3 writes/screen.\n00250000A write will occur for every 4 output lines(2260)\n00251000or every 8 output lines(3270).\n00252000.sp 1\n00253000$PAGE \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00254000do 1 write/screen.\n00255000If a dump is in progress,\n00256000one line is reserved for the dump header.\n00257000One line is reserved as the entry line.\n00258000A write will occur for every 10 or 11 output lines\n00259000(3270: 22 or 23 output lines).\n00260000.pa\n00261000.hi 0\n00262000.in 0\n00263000IV. INPUT STATEMENTS\n00264000.sp 1\n00265000.in 5\n00266000Input statements are of three types:\n00267000.in 8\n00268000.hi 4\n00269000.sp 1\n002700001.)\n00271000A statement with an asterisk (*) in column 1 is a column 1 is a comment.\n00272000.sp 1\n002730002.)\n00274000A blank card is a comment.\n00275000.sp 1\n002760003.)\n00277000Any other statement contains an opcode in the first non-blank column\n00278000(normally column 1).\n00279000.hi 0\n00280000.in 5\n00281000.sp 1\n00282000For the remainder of this section,\n00283000the term \"statement\" will be understood to apply only to non-comments.\n00284000.sp 2\n00285000Each opcode may require or permit operands;\n00286000the opcode must be followed by a blank unless the operand\n00287000begins with a period (.), hyphen (-), or equal sign (=).\n00288000.sp 2\n00289000A hex (hexadecimal) number is expressed as an even number\n00290000of hexadecimal digits(0-9, A-F),\n00291000optionally preceeded by an equal sign or hyphen.\n00292000An equal sign indicates that the value which follows\n00293000is a number rather than a name;\n00294000a hyphen indicates a negative number and is only valid when\n00295000specifying a relative address;\n00296000an equal sign may preceed any hex data.\n00297000.sp 2\n00298000A character string is expressed by enclosing the desired characters\n00299000in apostrophes (');\n00300000an apostrophe is represented by two consequtive apostrophes('').\n00301000Apostrophe is the only character which is doubled;\n00302000in particular, an ampersand (&) is represented by a single\b\b\b\b\b\b______ ampersand.\n00303000Character strings may be used wherever hex numbers are valid,\n00304000and may be concatenated with hex data:\n00305000=C1C2C3, C1C2'C', C1'B'C3 and ='ABC' all represent the same value.\n00306000.sp 2\n00307000The following statements are accepted:\n00308000.in 9\n00309000.hi 13\n00310000.sp 1\n00311000KEY \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00312000This statement is required if any REP statements are used.\n00313000The operand requirements may change for every release;\n00314000this is intended to prevent unauthorized use of MZAP.\n00315000It is recommended that each installation modify the\n00316000requirements for this opcode,\n00317000to prevent unauthorized alteration of their system.\n00318000The operand requirements have been deliberately omitted\n00319000from the writeup;\n00320000they will be made available only to a single\n00321000individual at each installation and he may select,\n00322000at his own discretion,\n00323000who is authorized to modify resident code.\n00324000.sp 2\n00325000DEBUG \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00326000The switches and table entries used for communicating between\n00327000phases of MZAP will be displayed after each phase completes processing.\n00328000.in 9\n00329000.hi 13\n00330000.br\n00331000.sp 2\n00332000END \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00333000Console input mode will be terminated if a valid SYSIN data set\n00334000was specified;\n00335000otherwise END is an invalid opcode.\n00336000.sp 2\n00337000GO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00338000Turns off the NOGO switch if from CRT/terminal/console;\n00339000GO is invalid from SYSIN.\n00340000.sp 2\n00341000RESET \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00342000Causes all control cards previously read to be processed.\n00343000If an operand of EOD is specified,\n00344000no further input will be read;\n00345000otherwise NOGO and DEBUG will be reset and MZAP will\n00346000continue reading input.\n00347000.sp 2\n00348000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname\n00349000.br\n00350000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjobname.jobstepname\n00351000.br\n00352000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00actaskid\n00353000.br\n00354000JOB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acprocname.taskid\n00355000.br\n00356000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the job whose JPAQ is\n00357000to be searched, prior to the TSLPA, RERP, RSVC, or RAM list queues.\n00358000A related set of ZAPs must lie within a single job;\n00359000once a JOB card is accepted, it is invalid to supply\n00360000a new one without first supplying a RESET card.\n00361000This restriction was imposed to maintain compatability with\n00362000the planned OS/VS2 release 2 (MVS) support.\n00363000.sp 2\n00364000.ce data\n00365000THIS DESCRIPTION IS FOR PLANNING PURPOSES ONLY.\n00366000THE WRITEUP WILL BE AMENDED WHEN JOB IS AVAILABLE.\n00367000.sp 2\n00368000NAME \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00369000.br\n00370000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00371000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00372000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module or CSECT for\n00373000the VERIFYs, REPLACEs, and DUMPs which follow.\n00374000The name may be a load module name, a period (.),\n00375000or either one followed by a CSECT name.\n00376000If the load module was scatter loaded,\n00377000a CSECT name is required.\n00378000A period represents the nucleus specified as a member of\n00379000the dsname on SYSNUC,\n00380000and is considered to be block loaded.\n00381000The load address will be added to the relative address\n00382000on each applicable statement (VER, DUMP, etc.)\n00383000in the SCOPE of the NAME statement;\n00384000the length will be used to check that each relative address\n00385000is within bounds.\n00386000.sp 2\n00387000AVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00388000This statement defines the module and CSECT for the\n00389000statements which follow.\n00390000The AVT address is obtained from the CVT;\n00391000the opcode is invalid if TCAM is not active.\n00392000.sp 2\n00393000BLDL \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac name\n00394000This statement defines the module and CSECT for\n00395000the statements which follow.\n00396000It is invalid if the designated name does not\n00397000occur in the resident BLDL list.\n00398000The length is set to include only the specified\n00399000BLDL entry.\n00400000.sp 2\n00401000CVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00402000This statement defines the module,CSECT, and INDEX\n00403000for the statements which follow.\n00404000Any location in the CSECT containing the CVT may be patched:\n00405000the locations should be given relative to the CVT.\n00406000It is equivalent, in MVT, to:\n00407000.hi 0\n00408000.in 25\n00409000.nj\n00410000NAME      .IEAQBK00\n00411000INDEX     IEACVT\n00412000.fi l\n00413000.in 9\n00414000.hi 13\n00415000.sp 2\n00416000GOVRFLB \u00ac\u00ac\u00ac\u00ac\u00ac\n00417000This statement, valid only for OS/MVT and OS/VS2,\n00418000defines the module, CSECT, and INDEX for the statements which follow.\n00419000Any location in the CSECT containing the main storage supervisor\n00420000may be patched;\n00421000the locations given should be relative to GOVRFLB.\n00422000It is equivalent to:\n00423000.hi 0\n00424000.in 25\n00425000.br\n00426000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n00427000.br\n00428000INDEX \u00ac\u00ac\u00ac\u00acGOVRFLB\n00429000.in 9\n00430000.hi 13\n00431000.sp 2\n00432000HCT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00433000This statement defines the module and CSECT for the HASP Control Table.\n00434000It is invalid if HASP is not active,\n00435000or if there is no local modification to the HASP SVC to return\n00436000the HCT address in register 15.\n00437000.sp 2\n00438000IBMORG \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00439000This statement, valid only for OS/MVT and OS/VS2,\n00440000defines the module and CSECT for the statements which follow.\n00441000Any location in the SVC table may be patched;\n00442000the location given should be relative to the IBM portion of the table.\n00443000It is equivalent to:\n00444000.hi 0\n00445000.in 25\n00446000Name \u00ac\u00ac\u00ac\u00ac.IBMORG\n00447000.in 9\n00448000.hi 13\n00449000.sp 2\n00450000MSER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00451000This statement defines the module and CSECT for\n00452000the statements which follow.\n00453000Any location in the Master Scheduler Resident Data Area\n00454000and in the Master Common Area may be patched.\n00455000It is equivalent to:\n00456000.hi 0\n00457000.in 25\n00458000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEMSER\n00459000.in 9\n00460000.hi 13\n00461000.sp 2\n00462000QMRES \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00463000This statement defines the module and CSECT for\n00464000the statements which follow.\n00465000Any location in the Queue Manager Resident Data Area may be patched.\n00466000It is equivalent to:\n00467000.hi 0\n00468000.in 25\n00469000NAME \u00ac\u00ac\u00ac\u00acIEFJOB\n00470000.in 9\n00471000.hi 13\n00472000.sp 2\n00473000SCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00474000This statement, valid only in OS/MVT and OS/VS2, defines the module, CSECT, and INDEX\n00475000for the statements which follow.\n00476000It is equivalent to:\n00477000.hi 0\n00478000.in 25\n00479000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IGC003\n00480000.br\n00481000INDEX \u00ac\u00ac\u00ac\u00acIEABEND\n00482000.in 9\n00483000.hi 13\n00484000.sp 2\n00485000SMCA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00486000This statement, valid only if the system was generated with the SMF option,\n00487000is used to define the module and CSECT for the statements which follow.\n00488000While it is not actually a CSECT, nor is it in the nucleus,\n00489000it may be patched as if it were.\n00490000.in 9\n00491000.hi 13\n00492000.sp 2\n00493000 TACT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00494000This statement, valid only in OS/MVT, defines the module, CSECT, and INDEX\n00495000for the statements which follow.\n00496000Any location in the CSECT containing the permanent TCBs,\n00497000transient areas, and CVT amy be patched;\n00498000the location given should be relative to the\n00499000Transient Area Control Table.\n00500000It is equivalent to:\n00501000.hi 0\n00502000.in 25\n00503000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEAQBK00\n00504000.br\n00505000INDEX \u00ac\u00ac\u00ac\u00acIEAQTAQ\n00506000.in 9\n00507000.hi 13\n00508000.sp 2\n00509000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob\n00510000.br\n00511000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acjob.step\n00512000.br\n00513000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acid\n00514000.br\n00515000TCB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acproc.id\n00516000.br\n00517000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT,\n00518000and INDEX for the statements which follow.\n00519000Any location in the jobstep tcb of the specified job or\n00520000started task may be patched:\n00521000addresses shhould be given relative to the TCB.\n00522000Note that floating-point registers are stored at a negative\n00523000displacement.\n00524000.sp 1\n00525000\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acTHE TCB OPCODE IS DESCRIBED FOR PLANNING PURPOSES ONLY.\n00526000THE WRITEUP WILL BE AMENDED WHEN IT IS AVAILABLE.\n00527000.sp 2\n00528000TSCVT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00529000This statement, valid onlin with OS/MVT and OS/VS2,\n00530000is used to define the module and CSECT for the statements which follow.\n00531000It is an invalid statement if TSO is not active.\n00532000Any location in the Time Shareing Communications Vector Table\n00533000may be patched;\n00534000locations should be given relative to the TSCVT.\n00535000.sp 2\n00536000UCB=cuu\n00537000.br\n00538000UCB cuu \u00ac\u00ac\u00ac\u00ac\u00ac\n00539000.br\n00540000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX for the\n00541000statements which follow.\n00542000Any location in the I/O Supervisor may be patched;\n00543000the location given should be relative to the specified UCB.\n00544000It is equivalent, in MVT, to:\n00545000.hi 0\n00546000.in 25\n00547000NAME \u00ac\u00ac\u00ac\u00ac.IEAQFX00\n00548000.br\n00549000INDEX \u00ac\u00ac\u00acucbloc\n00550000.in 9\n00551000.hi 13\n00552000.sp 2\n00553000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acBASE\n00554000.br\n00555000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acHARDCOPY\n00556000.br\n00557000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMASTER\n00558000.br\n00559000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acMCS\n00560000.br\n00561000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acPREFIX\n00562000.br\n00563000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=xx\n00564000.br\n00565000UCM \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=cuu\n00566000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement defines the module, CSECT, and INDEX\n00567000for the statements which follow.\n00568000Except for UCM BASE, the INDEX is set as an absolute address\n00569000rather than an entrypoint name or relative address.\n00570000HARDCOPY, MASTER, and MCS are only valid if the system was\n00571000generated with the Multiple Console Support option.\n00572000BASE, MCS, and PREFIX refer to UCM areas not related to\n00573000a specific console;\n00574000UCM MASTER and HARDCOPY refer to the UCME for the console assigned to\n00575000the designated function;\n00576000UCM ID=xx refers to the UCME whose ID (in decimal) is xx;\n00577000and UCM UNIT=cuu refers to the UCME for the designated device.\n00578000They are equivalent to:\n00579000.hi 0\n00580000.in 25\n00581000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IEEUCMC\n00582000.br\n00583000INDEX \u00ac\u00ac\u00ac\u00acIEECUCB (for BASE)\n00584000.br\n00585000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acforced absolute address\n00586000.br\n00587000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac(for other than BASE)\n00588000.in 9\n00589000.hi 13\n00590000.sp 2\n00591000USERORG \u00ac\u00ac\u00ac\u00ac\u00ac\n00592000This statement, valid only for OS/MVT and OS/VS2,\n00593000defines the module, CSECT, and INDEX\n00594000for the statements which follow.\n00595000Any location in the SVC table may be patched;\n00596000the location given should be relative to the user portion\n00597000of the table.\n00598000It is equivalent to:\n00599000.hi 0\n00600000.in 25\n00601000NAME \u00ac\u00ac\u00ac\u00ac\u00ac.IBMORG\n00602000.br\n00603000INDEX \u00ac\u00ac\u00ac\u00acUSERORG\n00604000.in 9\n00605000.hi 13\n00606000.sp 2\n00607000BASE=xx \u00ac\u00ac\u00ac\u00ac\u00ac\n00608000.br\n00609000BASE xx \u00ac\u00ac\u00ac\u00ac\u00ac\n00610000.br\n00611000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be subtracted\n00612000from the address given in a VER or REP.\n00613000It is normally the relative address of the CSECT,\n00614000as printed in the assembly listing.\n00615000The effect of this statement is retained until\n00616000the next statement containing or implying a name\n00617000(DUMP, NAME, INDEX, CVT, UCB, ...).\n00618000If a previous BASE is in effect,\n00619000the statement has a cummulative effect:\n00620000the amount subtracted is the sum of the BASEs.\n00621000.sp 2\n00622000INDEX=xx \u00ac\u00ac\u00ac\u00ac\n00623000.br\n00624000INDEX xx \u00ac\u00ac\u00ac\u00ac\n00625000.br\n00626000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to\n00627000the address given in a VER, REP, DUMP, etc.\n00628000It is normally the relative address of a CSECT from a\n00629000link-edit listing.\n00630000The effect of this statement is retained until the next statement\n00631000containing or implying a name\n00632000(CVT, DUMP, INDEX, NAME, etc.);\n00633000all previous BASE or INDEX specifications remain in effect.\n00634000.sp 2\n00635000INDEX \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00636000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to give a value to be added to the\n00637000address given in a VER, REP, DUMP, etc.\n00638000It resets all previous BASE and INDEX specifications.\n00639000The value used is the address of the CSECT or entry point specified,\n00640000adjusted by the CSECT or module address of the preceeding name statement.\n00641000.sp 2\n00642000LIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acAUTO\n00643000.br\n00644000LIB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acddname\n00645000.br\n00646000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to specify the ddname of the\n00647000data set to be used to resolve CSECT names (other than nucleus CSECTs)\n00648000in statements which follow.\n00649000If AUTO is specified, modules found in TSLPA are assumed to be on CMDLIB;\n00650000modules whose names begin with IFG or IG are assumed to be on SVCLIB;\n00651000all other modules are assumed to be on LINKLIB.\n00652000AUTO is initially in effect,\n00653000and remains in effect untill overrriden by an LIB statement.\n00654000.sp 2\n00655000VERIFY \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00656000.br\n00657000VER \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00658000.br\n00659000V \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dr\n00660000.br\n00661000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to prevent inadvertently\n00662000altering the wrong location.\n00663000The data at the specified relative address, r, adjusted by\n00664000the address from the NAME statement and any BASE or INDEX in effect,\n00665000is compared to the specified data,\n00666000and, if a match does not occur,\n00667000a switch (called the NOGO switch) is set,\n00668000causing all REPs between the preceeding RESET (or beginning of input)\n00669000and the following RESET (or end of data) to be suppressed.\n00670000.sp 1\n00671000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe location must be specified as 2, 4, or 6 hex digits,\n00672000preceeded (if negative) by a hyphen (-).\n00673000The data may be specified as:\n00674000.in 25\n00675000.hi 5\n00676000.sp 1\n006770001). an even number of hex digits\n00678000.sp 1\n006790002). a character string enclosed in apostrophes (');\n00680000an apostrophe is represented by 2 apostrophes\n00681000(i.e., \"CAN'T\" is entered as \"CAN''T\").\n00682000.sp 1\n006830003). any combination of 1). and 2).\n00684000.sp 1\n006850004). any of the above,\n00686000separated by commas (,).\n00687000.in 9\n00688000.hi 13\n00689000.sp 2\n00690000REPLACE \u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00691000.br\n00692000REP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00693000.br\n00694000R \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrr dd\n00695000.br\n00696000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to replace data\n00697000at the specified relative location, r, as adjusted by the NAME,\n00698000BASE, and INDEX statements in effect.\n00699000See VER for a description of formats.\n00700000The effect of a REP is suppressed if the NOGO switch is set,\n00701000either because of a REP failure (see REP) or by an invalid\n00702000control statement (however, see GO and RESET).\n00703000.sp 2\n00704000CONSOLE\n00705000.br\n00706000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cc\n00707000.br\n00708000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acID=cca\n00709000.br\n00710000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n00711000.br\n00712000CONSOLE \u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n00713000.br\n00714000CON\n00715000.br\n00716000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cc\n00717000.br\n00718000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acID=cca\n00719000.br\n00720000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acUNIT=ccu\n00721000.br\n00722000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acDSRT=ddddrrrr\n00723000.br\n00724000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to cause subsequent input\n00725000to be from the CRT (if a local 2260 or 3270 is assigned),\n00726000the terminal (if TSO),\n00727000or the operators console (via WTO/WTOR and REPLY/MODIFY).\n00728000A specific console may be assigned by a two hex digit UCMID\n00729000(with an optional area identifier from A-Z) or\n00730000by a unit address.\n00731000Routing codes and descriptors may be specified in the form\n00732000ddddrrrr, where d is a 16 bit descriptor mask and\n00733000r is a 16 bit routing code mask.\n00734000.sp 2\n00735000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00736000.br\n00737000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00738000.br\n00739000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00740000.br\n00741000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00742000.br\n00743000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00744000.br\n00745000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00746000.br\n00747000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00748000.br\n00749000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00750000.br\n00751000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a dump of the specified\n00752000module or CSECT,\n00753000prior to applying any REPs.\n00754000The dump will contain a display of 16 bytes/line, in the format:\n00755000.ll 120\n00756000.nj\n00757000.hi 0\n00758000.in 0\n00759000.sp 2\n00760000R:b\b/rrrrrrb\b/A:b\b/aaaaaab\b/b\b/xxxxxxxxb\b/xxxxxxxxb\b/b\b/b\b/xxxxxxxxb\b/xxxxxxxxb\b/b\b/*eeeeeeeeeeeeeeee*\n00761000.ll 70\n00762000.fi l\n00763000.hi 5\n00764000.in 22\n00765000.sp 2\n00766000  Where r is the relative address in hex\n00767000.in 28\n00768000.br\n00769000  a is the absolute address in hex\n00770000.br\n00771000  x is the data in hex\n00772000.br\n00773000  e is the data the data in EBCDIC, with unprintable characters\n00774000displayed as periods (.) or quotes (\").\n00775000.br\n00776000 b\b/ is a blank\n00777000.in 9\n00778000.hi 13\n00779000.sp 1\n00780000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acA character is considered unprintable if it\n00781000does not appear on the CRT;\n00782000if called from a non-CRT TSO terminal or run in batch\n00783000without a CRT,\n00784000a character is unprintable if it does not appear un the PN train.\n00785000A cent sign (\u00a2) is considered unprintable on the 2260\n00786000since it is used as an SMI (>\b|).\n00787000A quote rather than a period will be substituted for each\n00788000unprintable character only for the 2260;\n00789000quotes appear on the 2260 as an error symbol (_\b<\b>\b\u00ac).\n00790000.sp 2\n00791000DUMP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n00792000.br\n00793000DUMPB \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n00794000.br\n00795000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to print a partial dump of the\n00796000CSECT or module identified in the preceeding NAME statement.\n00797000r is 2, 4, or 6 hex digits,\n00798000preceeded by a hyphen if negative;\n00799000s is 2, 4, or 6 hex digits.\n00800000.sp 1\n00801000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe data beginning at r,\n00802000adjusted by the preceeding NAME, INDEX, and BASE statements,\n00803000is displayed in the format shown above.\n00804000The number of bytes dumped will be given by s,\n00805000however the dump will always begin and end on a quadword\n00806000(16 byte) boundary.\n00807000.sp 2\n00808000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00809000.br\n00810000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00811000.br\n00812000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00813000.br\n00814000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00815000.br\n00816000DUMPA \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n00817000.br\n00818000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\n00819000except that VERs and REPs will be processed prior\n00820000to printing the dump.\n00821000.sp 2\n00822000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.\n00823000.br\n00824000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac.csectname\n00825000.br\n00826000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname\n00827000.br\n00828000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acname csectname\n00829000.br\n00830000DUMPT \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac=rr ss\n00831000.br\n00832000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement has the same effect as DUMP,\n00833000except that VERs and REPs will be processed will be processed\n00834000prior to printing the dump and that the format of the dump is different.\n00835000Each halfword will be treated as the beginning of an instruction\n00836000for the purpose of printing an opcode under the hex value.\n00837000The dump will contain a display of 16 bytes/line, in the format:\n00838000.ll 120\n00839000.hi 0\n00840000.in 0\n00841000.nj\n00842000rrrrrrb\b/aaaaaab\b/b\b/xxxxb\b/xxxxb\b/b\b/xxxxb\b/xxxxb\b/b\b/b\b/xxxxb\b/xxxxb\b/b\b/xxxxb\b/xxxxb\b/b\b/*eeeeeeeeeeeeeeee*\n00843000b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/b\b/oooob\b/oooob\b/b\b/oooob\b/oooob\b/b\b/b\b/oooob\b/oooob\b/b\b/oooob\b/oooo\n00844000.fi l\n00845000.ll 70\n00846000.in 22\n00847000.hi 5\n00848000.sp 1\n00849000 Where r is the hex relative address\n00850000.in 28\n00851000a is the hex absolute address\n00852000.br\n00853000x is the hex data\n00854000.br\n00855000e is the EBCDIC data\n00856000.br\n00857000o is the opcode for the above data,\n00858000truncated to 5 characters\n00859000.br\n00860000b\b/ is a blank.\n00861000.in 9\n00862000.hi 13\n00863000.sp 2\n00864000HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list\n00865000of valid command names.\n00866000If a CRT is assigned,\n00867000or if MZAP is being run from a TSO terminal,\n00868000attention mode is forced and a $HELP is simulated\n00869000to enable the user to set the speed or hold options;\n00870000the list of commands will begin when a null line is entered.\n00871000The list can be terminated by entering an attention message\n00872000of \"STOP\" from the terminal/CRT or by the operator command:\n00873000\"P id\", where id is the jobname or START id.\n00874000.sp 2\n00875000HELP cmd \u00ac\u00ac\u00ac\u00ac\n00876000.br\n00877000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement is used to obtain a list of valid operands\n00878000for the designated input statement.\n00879000If a CRT is assigned or MZAP was invoked via TSO,\n00880000attention mode is forced and a $HELP is simulated\n00881000to enable the user to set the speed or hold options;\n00882000the list of operands will begin when a null line is entered.\n00883000The list can be terminated by entering an attention message\n00884000of \"STOP\" form the terminal/CRT or by the operator command:\n00885000\"P id,STOP\", where id is the jobname or START id.\n00886000.sp 2\n00887000SETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n00888000.br\n00889000<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit *\n00890000.br\n00891000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement, during dump processing or VERIFY/REP\n00892000processing;\n00893000causes the limits (address,length) and index currently in effect\n00894000to be saved in one of 16 MZAP \"reference pointers\";\n00895000refdigit, which may be any hex digit from 0 to F,\n00896000is used to identify this information for subsequent use\n00897000(see POINT).\n00898000.sp 2\n00899000SETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n00900000.br\n00901000<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n00902000.br\n00903000SETPTR \u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n00904000.br\n00905000<- \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n00906000.br\n00907000SETPTR,plen \u00acrefdigit ptr len\n00908000.br\n00909000<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len\n00910000.br\n00911000SETPTR,plen \u00acrefdigit ptr len-pfx\n00912000.br\n00913000<-,plen \u00ac\u00ac\u00ac\u00ac\u00acrefdigit ptr len-pfx\n00914000.br\n00915000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis statement,\n00916000during dump or VERIFY/REPLACE processing,\n00917000saves the limits (address, length) and index of a control block\n00918000as described below;\n00919000refdigit, which may be any hex digit from 0 to F,\n00920000is used to identify this information for subsequent use\n00921000(see POINT).\n00922000.sp 1\n00923000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acplen, if present, defines the type of pointer;\n00924000it may have the values 15, 16, 24, or 32 (the default);\n00925000in addition, Y, H, AL3, and A are synonymous to 15, 16, 24, and 32.\n00926000(Only the last 24 bits of a 32 bit pointer are used.)\n00927000.sp 1\n00928000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr must be an even number of hex digits,\n00929000giving the relative address of a pointer.\n00930000In what follows, \"(ptr)\" denotes the contents of the designated location.\n00931000.sp 1\n00932000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00aclen must be an even number of hex digits,\n00933000giving the size of the control block pointed to\n00934000(excluding prefix, if any).\n00935000.sp 1\n00936000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acpfx, if specified, must be an even number of hex digits,\n00937000giving the length in bytes of the control block prefix.\n00938000The hyphen separating len and pfx may be preceeded by blanks,\n00939000but may not be succeeded by blanks.\n00940000pfx is assumed to be 0 if not specified.\n00941000.sp 1\n00942000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acWhen the specified pointer, (ptr),\n00943000is accessed, the following are computed:\n00944000.nj\n00945000.in 25\n00946000.hi 0\n00947000address    is    (ptr)-pfx\n00948000length     is    len + pfx\n00949000index      is    (ptr)\n00950000relative\n00951000 index     is    index - address = pfx\n00952000.fi l\n00953000.in 10\n00954000.hi 12\n00955000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index are then\n00956000saved in the requested reference pointer.\n00957000.sp 2\n00958000POINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n00959000.br\n00960000-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acREF refdigit\n00961000.br\n00962000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index last set into\n00963000the designated reference pointer are made current;\n00964000the index may be modified by a subsequent BASE or INDEX (hex only)\n00965000statement.\n00966000.sp 2\n00967000POINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n00968000.br\n00969000-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len\n00970000.br\n00971000POINT \u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n00972000.br\n00973000-> \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acptr len-pfx\n00974000.br\n00975000POINT,plen \u00acptr len\n00976000.br\n00977000->,plen \u00ac\u00ac\u00ac\u00acptr len\n00978000.br\n00979000POINT,plen \u00acptr len-pfx\n00980000.br\n00981000->,plen \u00ac\u00ac\u00ac\u00acptr len-pfx\n00982000.br\n00983000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe address, length, and relative index for a control block\n00984000are made current.\n00985000See SETPTR for an explanation of the operands.\n00986000.pa\n00987000.in 0\n00988000.hi 0\n00989000V. \u00acJCL\n00990000.in 5\n00991000.sp 1\n00992000MZAP requires the following JCL statements:\n00993000.nj\n00994000.sp 1\n00995000 1)  //       EXEC  PGM=MOREZAP,REGION=100K\n00996000 2)  //STEPLIB  DD  ...\n00997000 3)  //SYSNUC   DD  DSN=SYS1.NUCLEUS(IEANUC0x),DISP=SHR\n00998000 4)  //SVCLIB   DD  DSN=SYS1.SVCLIB,DISP=SHR\n00999000 5)  //CMDLIB   DD  DSN=SYS1.CMDLIB,DISP=SHR\n01000000 6)  //LINKLIB  DD  DSN=SYS1.LINKLIB,DISP=SHR\n01001000 7)  //         DD  ...\n01002000 8)  //ddn      DD  ...\n01003000 9)  //IEFRDER  DD  UNIT=cuu\n0100400010)  //SYSPRINT DD  SYSOUT=A\n0100500011)  //SYSIN    DD  *\n01006000.fi\n01007000.in 9\n01008000.sp 1\n010090001.) The REGION size required will vary depending on the\n01010000size of the CESD for the nucleus and on the number of DD\n01011000statements.\n01012000.sp 1\n010130002) This statement is not required if MOREZAP is located in\n01014000a JOBLIB or in the system link libraries.\n01015000.sp 1\n010160003) This statement is required;\n01017000it must specify the nucleus currently loaded.\n01018000.sp 1\n010190004) This statement is required if any module in SVCLIB is referenced\n01020000in a NAME or DUMP statement.\n01021000.sp\n010220005) This statement is required if any module in the TSLPA is referenced\n01023000in a NAME or DUMP statement.\n01024000.sp\n010250006) This statement is required if any module in the system\n01026000LINK library is referenced in a NAME or DUMP statement.\n01027000If SYS1.PARMLIB(LNKLST00) specified data sets concatemated to SYS1.LINKLIB,\n01028000then these data sets must be specified on concatenated DD statements,\n01029000in the same order as in LNKLST00.\n01030000.sp 1\n010310007) See 6.\n01032000.sp 1\n010330008) Optional additional libraries may be specified;\n01034000the ddname should be the same as the operand of the LIB\n01035000statement which specifies the data set.\n01036000.sp 1\n010370009) Optional 2260 (960 byte screen, local mode) or\n010380003277 (1920 byte screen, local mode, EBCDIC) for\n01039000control statement and attention input.\n01040000Any ddname desired may be used,\n01041000however IEFRDER is suggested if MZAP is\n01042000to be invoked via a START command.\n01043000.sp 1\n0104400010) Printed output.\n01045000If no BLKSIZE is specified, 141 will be used for unit record\n01046000and 685 for tape or disk.\n01047000The user should specify the largest blocksize acceptable to\n01048000the system output writer at his installation.\n01049000If the installation is using ASP,\n01050000the blocksize should not exceed the ASP buffer size.\n01051000.sp 1\n0105200011) Control statement input.\n01053000Additional input may be requested from the operator with\n01054000a CONSOLE statement.\n01055000.in 5\n01056000.sp 2\n01057000The required JCL may be preceeded by a JOB card and submitted\n01058000through the input stream, or by SUBMIT.\n01059000Alternatively, the user may add the JCL to SYS1.PROCLIB,\n01060000and invoke MZAP with a START command.\n01061000See the Operators Reference and JCL Reference for more\n01062000information on catalogued procedures and START commands.\n01063000.in 8\n01064000.nj\n01065000.sp 2\n01066000//        EXEC   PGM=IEBUPDTE,PARM=NEW\n01067000//SYSUT2    dd   DSN=SYS1.PROCLIB,DISP=MOD\n01068000//SYSPRINT  DD   SYSOUT=A\n01069000//SYSIN     DD   DATA\n01070000.li\n01071000./         ADD   NAME=MZAP,LIST=ALL\n01072000.li\n01073000./      NUMBER   NEW1=1000,INCR=1000\n01074000//MZAP    PROC   NUC=1\n01075000//IEFPROC EXEC   PGM=MZAP\n01076000//STEPLIB   DD   DSN=SYS2.ASM.XEQ,DISP=SHR\n01077000//SYSNUC    DD   DSN=SYS1.NUCLEUS(IEANUC0&NUC),DISP=SHR\n01078000//IEFRDER   DD   UNIT=290\n01079000//SVCLIB    DD   DSN=SYS1.SVCLIB,DISP=SHR\n01080000//LINKLIB   DD   DSN=SYS1.LINKLIB,DISP=SHR\n01081000//          DD   DSN=SYS2.linklib,disp=SHR\n01082000//CMDLIB    DD   DSN=SYS1.CMDLIB,DISP=SHR\n01083000/*\n01084000.sp 1\n01085000       Adding PROC to PROCLIB\n01086000              (Example 1)\n01087000.sp 4\n01088000           S  MZAP.KENT,046,NUC=2\n01089000.sp 1\n01090000       Starting MZAP using sample PROC\n01091000              (Example 2)\n01092000.hi 0\n01093000.in 0\n01094000.pa\n01095000VI. \u00acMESSAGES\n01096000.in 5\n01097000.fi l\n01098000.sp 1\n01099000Except for prompting, listing of input,\n01100000module/csect/control block dumps, and debug output,\n01101000all messages produced by MZAP have a common format:\n01102000.in 15\n01103000.sp 2\n01104000MZPfnnabtext\n01105000.in 5\n01106000.sp 1\n01107000Where f identifies the functional area:\n01108000.in 18\n01109000.hi 3\n01110000.sp 1\n011110000 \u00accommon\n01112000.br\n011130001 \u00acinitialization\n01114000.br\n011150002 \u00accontrol card scan\n01116000.br\n01117000H \u00acHELP\n01118000.br\n01119000D \u00acDEBUG\n01120000.br\n011210003 \u00acCDE search\n01122000.br\n011230004 \u00acESD processing and module/csect/location listing\n01124000.br\n011250005 \u00acdump processing\n01126000.br\n011270006 \u00acVER/REP processing\n01128000.br\n011290007 \u00acfinal housekeeping, reinitialization, and termination\n01130000.hi 0\n01131000.sp 1\n01132000.in 10\n01133000nn is a decimal message number within function\n01134000.sp 1\n01135000a \u00acis an action indicator:\n01136000A if action required, I otherwise.\n01137000.in 5\n01138000.sp 2\n01139000When a message relates to a specific input statement and\n01140000does not immediately follow the statement,\n01141000the message text will normally begin with the\n011420005 digit sequence number assigned when that statement was read.\n01143000.in 0\n01144000.hi 0\n01145000.pa\n01146000.ce data\n01147000Common Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________\n01148000.end\n01149000.hi 6\n01150000.sp 3\n01151000>\b|\n01152000.br\n01153000sssss>\n01154000.br\n01155000sssss>\b|\n01156000.br\n01157000sssss\n01158000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acInput required from the terminal, 2260, or 3270.\n01159000.sp 2\n01160000EH?>\n01161000.br\n01162000EH?>\b|\n01163000.br\n01164000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAttention mode is in effect.\n01165000Key in attention input or terminated attention mode\n01166000with a null line.\n01167000.sp 2\n01168000MZP001I I/O ERROR ON 2260 - USE CONSOLE\n01169000.br\n01170000MZP001I I/O ERROR ON 3270 - USE CONSOLE\n01171000.in 10\n01172000ROUTCDE: 1,10,11\n01173000.br\n01174000DESC: \u00ac\u00ac\u00ac1\n01175000.in 0\n01176000.sp 1\n01177000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acUnrecoverable I/O error on the CRT.\n01178000Interactive I/O will be done via the WTO/WTOR/MODIFY interface.\n01179000.sp 2\n01180000MZP0002I $HELP: $HOLD|$AUTO CON STOP $PAGE|$HALFAST|$FAST|$SLOW\n01181000.br\n01182000.sp 1\n01183000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither HELP, $HELP or an invalid attention was entered.\n01184000The valid attention messages are listed,\n01185000with mutually exclusive messages separated by logical OR (|).\n01186000.sp 2\n01187000MZP0003A\n01188000.br\n01189000.in 10\n01190000ROUTCDE: 9,10\n01191000.br\n01192000DESC: \u00ac\u00ac\u00ac2\n01193000.br\n01194000.in 0\n01195000.sp 1\n01196000 \u00ac\u00ac\u00ac\u00ac\u00acInput required via REPLY.\n01197000.sp 2\n01198000sssss text\n01199000.in 10\n01200000ROUTCDE: 9,10\n01201000.br\n01202000DESC: \u00ac\u00ac\u00ac7\n01203000.sp 1\n01204000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acListing of user's input.\n01205000.sp 1\n01206000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated text was read and assigned the sequence number\n01207000sssss.\n01208000The output is to SYSPRINT, terminal (if TSO CRT), or CRT (if assigned).\n01209000If the CONSOLE option is in effect, no CRT is assigned,\n01210000and MZAP is in batch, a WTO is used.\n01211000.pa\n01212000.ll 100\n01213000.ce data\n01214000Initialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b_______________________\n01215000.end\n01216000.ll 70\n01217000.sp 2\n01218000.in 0\n01219000.hi 6\n01220000.sp 2\n01221000MZP100I MOREZAP VERSION mm/dd/yy hh.mm STARTING\n01222000.in 10\n01223000ROUTCDE: 9,10\n01224000.br\n01225000DESC: \u00ac\u00ac\u00ac6\n01226000.in 0\n01227000.sp 1\n01228000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP has been invoked.\n01229000Initialization status and error messages may follow.\n01230000.sp 2\n01231000MZP101I UNAUTHORIZED CPU FOR MZAP\n01232000.in 10\n01233000ROUTCDE: 1,9,11\n01234000.br\n01235000DESC: \u00ac\u00ac\u00ac1\n01236000.in 0\n01237000.sp 1\n01238000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acMZAP is not running on the machine it was destributed for;\n01239000if you wish to use MZAP, order a separate copy for each CPU\n01240000on which it is to be used.\n01241000.sp 2\n01242000MZP102I SYSPRINT CARD MISSING - OUTPUT ON CONSOLE\n01243000.br\n01244000MZP102I SYSPRINT CARD MISSING - OUTPUT ON TERMINAL\n01245000.in 10\n01246000ROUTCDE: 9,10\n01247000.br\n01248000DESC: \u00ac\u00ac\u00ac7\n01249000.in 0\n01250000.sp 1\n01251000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo SYSPRINT DD card is present, or, if TSO,\n01252000no suitable ALLOC was done for SYSPRINT.\n01253000Output will be via TPUT, if TSO,\n01254000to the CRT in batch,\n01255000and to the console via WTO if there is no CRT\n01256000assigned in batch.\n01257000.sp 2\n01258000MZP103I SYSIN DD CARD MISSING - INPUT FROM CONSOLE\n01259000.br\n01260000MZP103I SYSIN DD CARD MISSING - INPUT FROM KEYBOARD\n01261000MZP103I SYSIN DD CARD MISSING - INPUT FROM TERMINAL\n01262000.in 10\n01263000ROUTCDE: 9,10\n01264000.br\n01265000DESC: \u00ac\u00ac\u00ac7\n01266000.in 0\n01267000.sp 1\n01268000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acNo appropriate ALLOC(TSO) or DD card for SYSIN.\n01269000Input will be via TPUT for TSO;\n01270000for batch, input will be from the keyboard of the\n01271000CRT, if one is assigned;\n01272000otherwise, input will be via REPLY to WTOR.\n01273000.sp 2\n01274000MZP104I SYSNUC MISSING OR INVALID\n01275000.in 10\n01276000ROUTCDE: 9,10,11\n01277000.br\n01278000DESC: \u00ac\u00ac\u00ac6\n01279000.in 0\n01280000.sp 1\n01281000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acEither there is no appropriate ALLOC(TSO) or DD card\n01282000for SYSNUC, or the DSNAME is not SYS1.NUCLEUS,\n01283000or it is not located on the IPL volume,\n01284000or the member name, IEANUC0x, is missing or is not the\n01285000nucleus most recently IPLed.\n01286000.sp 2\n01287000MZP105E UNSUPPORTED GRAPHICS DEVICE IGNORED\n01288000.in 10\n01289000ROUTCDE: 10,11\n01290000.br\n01291000DESC: \u00ac\u00ac\u00ac7,8,9\n01292000.in 0\n01293000.sp 1\n01294000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn  ALLOC(TSO) or DD card exists for a graphics device\n01295000other than a 960 byte local 2260 or a 1980 byte local 3277.\n012960002250, 2280, etc., are all unsupported, as are all remote CRTs.\n01297000Sorry 'bout that!\n01298000.in 0\n01299000.hi 0\n01300000.pa\n01301000.ll 100\n01302000.ce data\n01303000Input Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n01304000\n01305000NOTE: NOGO\b\b\b\b____ switch will be set for all MZP2 messages.\n01306000.end\n01307000.ll 70\n01308000.sp 2\n01309000.in 0\n01310000.hi 6\n01311000MZP201I STATEMENT MISPLACED\n01312000.sp 1\n01313000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acVERIFY, REPLACE, POINT, etc. statement not\n01314000in the range of NAME statement.\n01315000.in 0\n01316000.sp 2\n01317000MZP202I INVALID OPCODE\n01318000.sp 1\n01319000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe first non-blank column of the input statement\n01320000does not contain a valid MZAP opcode, or the opcode is\n01321000invalid but has restrictions on its use.\n01322000For example, this message is produced if a GO statement\n01323000is present in SYSIN.\n01324000.sp 2\n01325000MZP203I DEVICE NOT FOUND\n01326000.sp 1\n01327000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn input statement, such a UCB, specified as\n01328000device address which was not present in any UCB.\n01329000.sp 2\n01330000MZP204I INVALID STATEMENT\n01331000.sp 1\n01332000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA syntax error is present in an input statement.\n01333000A logical OR (|) will be displaYED BELOW THE COLUMN\n01334000AT WHICH THE ERROR WAS DETECTED.\n01335000For an omitted operand, this will bee the end of the statement.\n01336000For an invalid negative hex operand,\n01337000this will be the end of the operand,\n01338000not\b\b\b___ under the hyphen.\n01339000.sp 2\n01340000MZP205I NOT A VALID CONSOLE\n01341000.sp 1\n01342000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a UCMID higher than the number of consoles\n01343000specified in the system,\n01344000he specified a unit (cuu) which is not defined as\n01345000an operators' console.\n01346000.sp 2\n01347000MZP206I NOT MCS\n01348000.sp 1\n01349000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acAn operand was specified on a UCM statement\n01350000which is only valid for a system with the MCS\n01351000(Multiple Console Support) option.\n01352000.sp 2\n01353000MZP207I HARDCPY=SYSLOG - NO UCM\n01354000.sp 1\n01355000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe statement UCM HARDCOPY is only valid if\n01356000a console device, rather than SYSLOG, is assigned the\n01357000SYSLOG function.\n01358000.sp 2\n01359000MZP208I CONSOLE NOT ACTIVE\n01360000.sp 1\n01361000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user specified a console which is ONLINE or\n01362000OFFLINE, rather than in CONSOLE status.\n01363000.sp 2\n01364000MZP209I NOT SMF\n01365000.sp 1\n01366000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an input statement, such as SMCA,\n01367000which is only valid if the system is defined with\n01368000the SMF (System Management Facility) option.\n01369000.sp 2\n01370000MZP210I KEY xxxxxxxx?\n01371000.sp 1\n01372000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave a KEY statement with an invalid or\n01373000omitted operand.\n01374000He must reply with a valid key,\n01375000consisting of a scrambled version\n01376000of the displayed hexadecimal number.\n01377000If you don't know the magic number,\n01378000see your installation systems programmer for an explanation of why\n01379000you are not allowed to use this program!\n01380000.sp 2\n01381000MZP211I INVALID KEY\n01382000.sp 1\n01383000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user gave an invalid reply to MZP210I,\n01384000or supplied an invalid operand on a KEY statement.\n01385000This message will be followed by MZP210I.\n01386000.sp 2\n01387000MZP212I TCAM IS NOT ACTIVE\n01388000.sp 1\n01389000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\n01390000such as AVT, which is only valid while TCAM is active.\n01391000.sp 2\n01392000MZP213I TSO IS NOT ACTIVE\n01393000.sp 1\n01394000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\n01395000such as TSCVT, which is only valid while TSO is active.\n01396000.sp 2\n01397000MZP214I HASP IS NOT ACTIVE\n01398000.sp 1\n01399000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe user has requested a function,\n01400000such as HCT, which is only valid while HASP is active.\n01401000.sp 2\n01402000MZP215I NAME NOT IN BLDL LIST\n01403000.sp 1\n01404000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac IThe user has supplied a BLDL statement which\n01405000specifies a module not found in the BLDL list(s)\n01406000used in the current IPL.\n01407000An alternative explanation is that, since the latest IPL,\n01408000the appropriate BLDL entry has been REPed to another name.\n01409000.hi 0\n01410000.in 0\n01411000.pa\n01412000.ce data\n01413000HELP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n01414000.end\n01415000.hi 6\n01416000.sp 2\n01417000MZPH01I ALL\n01418000.sp 1\n01419000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of all command names is in effect.\n01420000This message will remain on line 0 of the CRT\n01421000until the display is complete;\n01422000it will not appear on the console or SYSPRINT.\n01423000.sp 2\n01424000MZPH01I cmd\n01425000.sp 1\n01426000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acA display of the operands of the designated command\n01427000is in effect.\n01428000See MZPH01I ALL.\n01429000.sp 2\n01430000MZPH02I USE HELP <cmd> FOR OPERANDS OF <cmd>\n01431000.sp 1\n01432000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThis is the first line of output for HELP ALL.\n01433000If a supported CRT is assigned (960 byte local 2260,\n014340001920 byte 3277),\n01435000or if MZAP is being called from TSO,\n01436000this  will be followed by an MZP002I message;\n01437000enter any desired attention messages and then\n01438000terminate attention mode with a null line.\n01439000.sp 2\n01440000MZPH03I OPCODE cmd\n01441000.sp 1\n01442000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe designated opcode may be used in input statements.\n01443000.sp 2\n01444000MZPH04I INVALID OPCODE - HELP ALL FORCED\n01445000.sp 1\n01446000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe operand used for HELP was invalid,\n01447000and will be ignored.\n01448000A list of valid opcodes will be displayed.\n01449000.sp 2\n01450000MZPH05I OPERAND text\n01451000.sp 1\n01452000 \u00ac\u00ac\u00ac\u00ac\u00ac\u00acThe text listed is part of a description of\n01453000the operands of the command for which HELP was requested.\n01454000.hi 0\n01455000.in 0\n01456000.pa\n01457000.ce data\n01458000DEBUG Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b______________\n01459000.end\n01460000.sp 2\n01461000.li 1\n01462000MZPD01I VER/REP SNAP. SW=xx,xx,xx,xx\n01463000.sp 1\n01464000.in 10\n01465000A phase of MOREZAP has completed processing.\n01466000SW1-SW4 had the values, in hex, indicated in the message.\n01467000A set of messages, described below,\n01468000will be written for each of the MZAP control blocks\n01469000which have been constructed;\n01470000following this, the next phase will be called.\n01471000These messages are at least two lines, and include the following:\n01472000.in 0\n01473000.sp 2\n01474000.nj\n01475000.li 2\n01476000aaaaaa TYPE=xx: tttttttt NXT: nnnnnn LINE: ##### text\n01477000                                      FLG: ff\n01478000.fi l\n01479000.sp 1\n01480000.in 20\n01481000.hi 8\n01482000 Where a is the 6 hex digit virtual address of the control block\n01483000displayed.\n01484000.in 26\n01485000.hi 2\n01486000.sp 1\n01487000 x is the two hex digit type.\n01488000.sp 1\n01489000 t is a descrition of the type.\n01490000.sp 1\n01491000 n is the 6 hex digit address\n01492000of the next MZAP control block.\n01493000.sp 1\n01494000 # is the sequence number aSSIGNED TO THE INPUT STATEMENT\n01495000which generated the control block.\n01496000.sp 1\n01497000 f is the two hex digit flag field.\n01498000.hi 0\n01499000.in 0\n01500000.sp 2\n01501000.nj\n01502000.ll 100\n01503000.li 3\n01504000aaaaaa TYPE=00: VER      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(ddd-1)\n01505000                                      FLG: ff,ff ABS: xxxxxx\n01506000                                      vvvv,vvvv,vvvv,vvvvv,vvvv,vvvv,vvvv,vvvv,\n01507000.fi l\n01508000.ll 70\n01509000.sp 1\n01510000.in 20\n01511000.hi 8\n01512000 Where @ is the 6 hex digit relative address of the data to be verified.\n01513000.in 26\n01514000.hi 2\n01515000.sp 1\n01516000 m is the hex length-1 (i.e., as it would be used in a CLC).\n01517000.sp 1\n01518000 d is the decimal data length.\n01519000.sp 1\n01520000 x is the 6 digit absolute virtual address of the data to be  verified,\n01521000or is 0 if not yet known.\n01522000.sp 1\n01523000 v is the data to be used for verification,\n01524000or the data which failed to pass verification.\n01525000.sp 2\n01526000.hi 0\n01527000.in 0\n01528000.ll 100\n01529000.nj\n01530000.li 3\n01531000aaaaaa TYPE=01: REP      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: mm(ddd-1)\n01532000                                      FLG: ff,ff ABS: xxxxxx\n01533000                                      rrrr,rrrr,rrrr,rrrrr,rrrr,rrrr,rrrr,rrrr,\n01534000.fi l\n01535000.ll 70\n01536000.in 20\n01537000.hi 8\n01538000.sp 1\n01539000 Where @ is the 6 hex digit relative address of the data to be replaced.\n01540000.in 26\n01541000.hi 2\n01542000.sp 1\n01543000 m is the hex length-1 (i.e., as it would be used in a MVC).\n01544000.sp 1\n01545000 d is the decimal data length.\n01546000.sp 1\n01547000 x is the 6 digit absolute virtual address of the data to be  replaced,\n01548000or is 0 if not yet known.\n01549000.sp 1\n01550000 r is the data to replace the data at @,\n01551000as relocated.\n01552000.sp 2\n01553000.hi 0\n01554000.in 0\n01555000.nj\n01556000.li 2\n01557000aaaaaa TYPE=02: BASE     NXT: nnnnnn LINE: ##### LOC: bbbbbb\n01558000                                      FLG: ff\n01559000.sp 1\n01560000.fi l\n01561000.in 20\n01562000.hi 8\n01563000 Where b is the 6 hex digit hex number to be subtraacted from\n01564000the relative address of each statement within\n01565000the scope of this BASE.\n01566000.hi 0\n01567000.in 0\n01568000.sp 2\n01569000.nj\n01570000.li 2\n01571000aaaaaa TYPE=03: INDEX    NXT: nnnnnn LINE: ##### LOC: xxxxxx IXNAME: eeeeeeee\n01572000                                      FLG: ff\n01573000.fi l\n01574000.sp 1\n01575000.in 20\n01576000.hi 8\n01577000 Where x is the 6 hex digit hex number,\n01578000as far as currently resolved,\n01579000to be used as a relocation factor for each\n01580000statement within the scope of this INDEX.\n01581000.in 26\n01582000.hi 2\n01583000.sp 1\n01584000 e is the csect or entry point within the module\n01585000whose address is resolved as x.\n01586000.in 0\n01587000.hi 0\n01588000.sp 2\n01589000.nj\n01590000.li 2\n01591000aaaaaa TYPE=04: HINDEX   NXT: nnnnnn LINE: ##### LOC: xxxxxx\n01592000                                      FLG: ff\n01593000.fi l\n01594000.sp 1\n01595000.in 20\n01596000.hi 8\n01597000 Where x is the 6 hex digit number to be added to\n01598000the relative address of each statement within the scope\n01599000of this INDEX.\n01600000.in 0\n01601000.hi 0\n01602000.sp 2\n01603000.nj\n01604000.li 3\n01605000aaaaaa TYPE=05: NAME     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01606000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01607000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01608000.fi l\n01609000.in 20\n01610000.hi 8\n01611000.sp 1\n01612000 Where x is the module or csect location,\n01613000as currently resolved.\n01614000.sp 1\n01615000.in 26\n01616000.hi 2\n01617000 m is the module name.\n01618000.sp 1\n01619000 r is the CDE (OS/MVT, OS/VS2) or RB (OS/MFT, OS/VS1) address,\n01620000if known, else 0.\n01621000This field is always 0 for the nucleus.\n01622000.sp 1\n01623000 s is the module or csect size, as currently resolved.\n01624000The module size for the nucleus is taken from  CVTNUCB.\n01625000.sp 1\n01626000 c is the csect name, if specified.\n01627000.sp 1\n01628000 y is the 6 hex digit address of the DCB for the library\n01629000containg the load module.\n01630000.sp 1\n01631000 d is the ddname of the library.\n01632000.sp 1\n01633000 z is the 8 hex digit System Status Information\n01634000(See the SRL for Services Aids).\n01635000.in 0\n01636000.hi 0\n01637000.sp 2\n01638000.nj\n01639000.ll 100\n01640000.li 2\n01641000aaaaaa TYPE=06: DUMP     NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01642000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01643000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01644000.fi l\n01645000.ll 70\n01646000.in 20\n01647000.hi 8\n01648000.sp 1\n01649000Where all fields are as explained for 05 (NAME).\n01650000.in 0\n01651000.hi 0\n01652000.sp 2\n01653000.nj\n01654000.ll 100\n01655000.li 2\n01656000aaaaaa TYPE=07: DUMPA    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01657000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01658000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01659000.fi l\n01660000.ll 70\n01661000.in 20\n01662000.hi 8\n01663000.sp 1\n01664000Where all fields are as explained for 05 (NAME).\n01665000.in 0\n01666000.hi 0\n01667000.sp 2\n01668000.nj\n01669000.ll 100\n01670000.li 2\n01671000aaaaaa TYPE=08: DUMPT    NXT: nnnnnn LINE: ##### BEG: xxxxxx   NAME: mmmmmmmm\n01672000                         CDE: rrrrrr  FLG: ff    SIZ: ssssss  CSECT: cccccccc\n01673000                         DCB: yyyyyy  dddddddd                  SSI: zzzzzzzz\n01674000.fi l\n01675000.ll 70\n01676000.in 20\n01677000.hi 8\n01678000.sp 1\n01679000Where all fields are as explained for 05 (NAME).\n01680000.in 0\n01681000.hi 0\n01682000.sp 2\n01683000.nj\n01684000.ll 100\n01685000.li 2\n01686000aaaaaa TYPE=09: HDUMP    NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n01687000                                      FLG: ff,ff ABS: xxxxxx\n01688000.fi l\n01689000.ll 70\n01690000.in 20\n01691000.hi 8\n01692000.sp 1\n01693000 Where @ is the 6 hex digit relative address of the\n01694000data to be dumped.\n01695000.in 26\n01696000.hi 2\n01697000.sp 1\n01698000 s is the 6 hex digit length of the area to be dumped.\n01699000.sp 1\n01700000 x is the 6 hex digit absolute virtual address of the data to be dumped,\n01701000or is 0 if not yet know.\n01702000.in 0\n01703000.hi 0\n01704000.sp 2\n01705000.nj\n01706000.ll 100\n01707000.li 2\n01708000aaaaaa TYPE=0A: HDUMPA   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n01709000                                      FLG: ff,ff ABS: xxxxxx\n01710000.fi l\n01711000.ll 70\n01712000.in 20\n01713000.hi 8\n01714000.sp 1\n01715000 Where @ is the 6 hex digit relative address of the\n01716000data to be dumped.\n01717000.in 26\n01718000.hi 2\n01719000.sp 1\n01720000 s is the 6 hex digit length of the area to be dumped.\n01721000.sp 1\n01722000 x is the 6 hex digit absolute virtual address of the data to be dumped,\n01723000or is 0 if not yet know.\n01724000.in 0\n01725000.hi 0\n01726000.sp 2\n01727000.nj\n01728000.ll 100\n01729000.li 2\n01730000aaaaaa TYPE=0B: HDUMPT   NXT: nnnnnn LINE: ##### LOC: @@@@@@ LEN: ssssss\n01731000                                      FLG: ff,ff ABS: xxxxxx\n01732000.fi l\n01733000.ll 70\n01734000.in 20\n01735000.hi 8\n01736000.sp 1\n01737000 Where @ is the 6 hex digit relative address of the\n01738000data to be dumped.\n01739000.in 26\n01740000.hi 2\n01741000.sp 1\n01742000 s is the 6 hex digit length of the area to be dumped.\n01743000.sp 1\n01744000 x is the 6 hex digit absolute virtual address of the data to be dumped,\n01745000or is 0 if not yet know.\n01746000.in 0\n01747000.hi 0\n01748000.sp 2\n01749000.nj\n01750000.ll 100\n01751000.li 2\n01752000aaaaaa TYPE=0C: LIB      NXT: nnnnnn LINE: ##### DCB: xxxxxx DDNAME: dddddddd\n01753000                                      FLG: ff\n01754000.fi l\n01755000.ll 70\n01756000.in 20\n01757000.hi 8\n01758000 Where x is the 6 hex digit absolute virtual address of the DCB,\n01759000or is 0 if LIB AUTO is in effect.\n01760000.in 26\n01761000.hi 2\n01762000.sp 1\n01763000 d is the ddname specified.\n01764000.in 0\n01765000.hi 0\n01766000.nj\n01767000.sp 2\n01768000.ll 100\n01769000.li 2\n01770000aaaaaa TYPE=0D: <- N *   NXT: nnnnnn LINE: ##### NDX: @@@@@@   LENB: ssss\n01771000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx    IXB: iiii\n01772000.fi l\n01773000.sp 1\n01774000.ll 70\n01775000.in 20\n01776000.hi 8\n01777000 Where @ is the absolute virtual index in effect at the time\n01778000the address, length, and index were saved.\n01779000.in 26\n01780000.hi 2\n01781000.sp 1\n01782000 s is the length of the module, csect, or control block.\n01783000.sp 1\n01784000 p is the address of the 8 byte area in which the address,\n01785000length, and relative index are to be stored.\n01786000.sp 1\n01787000 x is the absolute virtual address of the module, csect,\n01788000or control block.\n01789000.sp 1\n01790000 i is the relative index which was saved.\n01791000.in 0\n01792000.hi 0\n01793000.nj\n01794000.sp 2\n01795000.ll 100\n01796000.li 2\n01797000aaaaaa TYPE=0E: MVC      NXT: nnnnnn LINE: ##### LOC: @@@@@@ DATLN: (mm(ddd-1)\n01798000                         DST: pppppp  FLG: ff,ff ABS: xxxxxx\n01799000.fi l\n01800000.ll 70\n01801000.in 20\n01802000.hi 8\n01803000.sp 1\n01804000 Where @ is the relative address of the data to be saved.\n01805000.in 26\n01806000.hi 2\n01807000.sp 1\n01808000 m is the hex length-1 (i.e., as it would be used in an MVC).\n01809000.sp 1\n01810000 d is the decimal length.\n01811000.sp 1\n01812000 p is the address of the area in which the data is to be saved.\n01813000.sp 1\n01814000 x is the absolute virtual address of the data to be saved,\n01815000or 0 if not known.\n01816000.in 0\n01817000.hi 0\n01818000.nj\n01819000.sp 2\n01820000.ll 100\n01821000.li 2\n01822000aaaaaa TYPE=0F: <- N PTR NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n01823000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n01824000.fi l\n01825000.ll 70\n01826000.in 20\n01827000.hi 8\n01828000.sp 1\n01829000 Where @ is the relative address of the pointer to\n01830000the desired control block.\n01831000.in 26\n01832000.hi 2\n01833000.sp 1\n01834000 s is the length of the control block pointed to.\n01835000.sp 1\n01836000 p is the address of the 8 byte area where\n01837000the address, length, and relative index are to be stored.\n01838000.sp 1\n01839000 x is the absolute virtual address of the desired control block,\n01840000or 0 if not known.\n01841000.sp 1\n01842000 i is the relative index.\n01843000.in 0\n01844000.hi 0\n01845000.nj\n01846000.sp 2\n01847000.ll 100\n01848000.li 2\n01849000aaaaaa TYPE=10: -> PTR   NXT: nnnnnn LINE: ##### LOC: @@@@@@  LENB: ssss\n01850000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n01851000.fi l\n01852000.ll 70\n01853000.in 20\n01854000.hi 8\n01855000.sp 1\n01856000 Where @ is the relative address of the pointer to\n01857000the desired control block.\n01858000.in 26\n01859000.hi 2\n01860000.sp 1\n01861000 s is the length of the control block pointed to.\n01862000.sp 1\n01863000 p is the absolute virtual address of the pointer to\n01864000the desired control block.\n01865000.sp 1\n01866000 x is the absolute virtual address of the desired control block,\n01867000or 0 if not known.\n01868000.sp 1\n01869000 i is the relative index.\n01870000.in 0\n01871000.hi 0\n01872000.nj\n01873000.sp 2\n01874000.ll 100\n01875000.li 2\n01876000aaaaaa TYPE=11: -> REF N NXT: nnnnnn LINE: ##### NDX: @@@@@@  LENB: ssss\n01877000                         PTR: pppppp  FLG: ff,ff ABS: xxxxxx   IXB: ssss\n01878000.fi l\n01879000.ll 70\n01880000.in 20\n01881000.hi 8\n01882000.sp 1\n01883000 Where @ is the absolute virtual INDEX in effect when\n01884000the address, size, and index were restored.\n01885000.in 26\n01886000.hi 2\n01887000.sp 1\n01888000 s is the length of the module, csect, or control block.\n01889000.sp 1\n01890000 p is the address of the 8 byte area from which\n01891000the address, size, and relative index were or are\n01892000to be restored.\n01893000.sp 1\n01894000 x is the absolute virtual adress of the module, csect,\n01895000or control block.\n01896000.sp 1\n01897000 i is the relative index.\n01898000.in 0\n01899000.hi 0\n01900000.pa\n01901000.ce data\n01902000ESD Messages\b\b\b\b\b\b\b\b\b\b\b\b____________\n01903000.end\n01904000.sp 2\n01905000MZP401I mmmmmmmm DIRECTORY I/O ERROR\n01906000.sp 1\n01907000.in 6\n01908000A return code of 8 was received from the BLDL macro,\n01909000indicating an I/O error in the directory\n01910000while trying to locate module m.\n01911000.in 0\n01912000.sp 2\n01913000MZP402I mmmmmmmm NOT FOUND\n01914000.sp 1\n01915000.in 6\n01916000A return code of 4 was received from the BLDL macro,\n01917000indicating that module m was not found\n01918000in the directory of any of the relevant libraries.\n01919000Add a DD card for the necessary library,\n01920000and if required, add a LIB statement.\n01921000.in 0\n01922000.sp 2\n01923000MZP403I mmmmmmmm NOT SCTR\n01924000.in 6\n01925000.sp 1\n01926000A load module was found to be in block load format\n01927000when scatter format was expected.\n01928000Either the specified module was the nucleus,\n01929000or it was loaded with more than one extent;\n01930000in either case, the module found in the library\n01931000cannot be the proper member, since it does not\n01932000have the SCTR attribute.\n01933000.in 0\n01934000.sp 2\n01935000MZP404I mmmmmmmm NO ESD\n01936000.in 6\n01937000.sp 1\n01938000The first record in load module m, or the first\n01939000record following the SYM records,\n01940000is not a CESD record.\n01941000Run IMBLIST (LISTLOAD) on the module,\n01942000and call your friendly neighbor IBM CE\n01943000- the linkage editor has just awarded you third prize,\n01944000and there are only two contestants.\n01945000.in 0\n01946000.sp 2\n01947000MZP405I mmmmmmmm NO CON\n01948000.in 6\n01949000.sp 1\n01950000A reccord follows a CESD record which is not a control,\n01951000IDR, SCTR, or CESD record.\n01952000Call (but keep it clean) your friendly, neighborhood CE,\n01953000as for MZP404I.\n01954000.in 0\n01955000.sp 2\n01956000MZP406I mmmmmmmm MISSING CESD\n01957000.in 6\n01958000.sp 1\n01959000A SCTR format record has fewer CESD records than expected;\n01960000the BLDL entry may have an incorrect table length or\n01961000there may be a missing or incorrect CESD record.\n01962000.sp 1\n01963000Before complaining to IBM, list the module with IMBLIST and\n01964000verify that the problem is in the load module;\n01965000this message could conceivably be caused by an error\n01966000in MZAP, in which case the complaint should come to me\n01967000rather than IBM.\n01968000If you received MZAP as an IUP from IBM,\n01969000rather than directly from me,\n01970000then they get the complaint regardless\n01971000- but no doubt I'll hear from them.\n01972000.in 0\n01973000.sp 2\n01974000MZP407I mmmmmmmm MISSING SC/TR\n01975000.in 6\n01976000.sp 1\n01977000A record type other than hex 10 was found while\n01978000reading in the scatter/translate table.\n01979000See the remarks for MZP404I and MZP406I.\n01980000.in 0\n01981000.sp 2\n01982000MZP410I sssss NAME: mmmmmmmm NOT LOADED\n01983000.sp 1\n01984000.in 6\n01985000Module m was not found in the RERP, RAM, RSVC,\n01986000or TSLPA linkpack queues, nor in the or selected JPAQ.\n01987000.in 0\n01988000.sp 2\n01989000MZP411I sssss NAME: mmmmmmmm NOT IN DIRECTORY\n01990000.in 6\n01991000.sp 1\n01992000 Module m was not found in the proper library.\n01993000Usually accompanied by message MZP401I or MZP402I.\n01994000.in 0\n01995000.sp 2\n01996000MZP412I sssss NAME: mmmmmmmm cccccccc NOT FOUND\n01997000.in 6\n01998000.sp 1\n01999000Csect c does not exist in module m,\n02000000or an error exists in the format of load module m.\n02001000.in 0\n02002000.sp 2\n02003000MZP413I sssss NAME: mmmmmmmm cccccccc ABS:  aaaaaa:aaaaaa\n02004000.in 6\n02005000.sp 1\n02006000The designated module or csect exists and was loaded at\n02007000the listed absolute virtual addresses.\n02008000.in 0\n02009000.sp 2\n02010000MZP414I sssss ENTRY eeeeeeee NOT FOUND\n02011000.in 6\n02012000.sp 1\n02013000Entry point e was either specified in an INDEX statement\n02014000or implied by a control block statement:\n02015000CVT, UCB, etc.;\n02016000it could not be found in the load module's CESD.\n02017000.in 0\n02018000.sp 2\n02019000MZP415I sssss ENTRY eeeeeeee ABS: aaaaaa\n02020000.in 6\n02021000.sp 1\n02022000Entry point e is at the specified absolute virtual address.\n02023000.in 0\n02024000.sp 2\n02025000MZP416I sssss REL: rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n02026000.in 6\n02027000.sp 1\n02028000Statement number s specified either:\n02029000a relative address beyond the module or csect;\n02030000a negative displacement beyond the control block prefix;\n02031000or an excessive length for a VER, REP, or DUMP.\n02032000The range of addresses given is listed as both relative and\n02033000absolute virtual addresses.\n02034000.in 0\n02035000.sp 2\n02036000MZP420I sssss INVALID POINTER AT aaaaaa\n02037000.in 6\n02038000.sp 1\n02039000A POINT or SETPTR statement refers to a halfword which is negative.\n02040000Since the pointer type was specified as Y (15),\n02041000this is invalid.\n02042000.in 0\n02043000.sp 2\n02044000MZP421I sssss REF NOT - POINT INVALID\n02045000.in 6\n02046000.sp 1\n02047000A POINT REF statement refers to a ref digit for which either:\n02048000.hi 3\n02049000.in 8\n02050000 1. There is no preceeding SETPTR.\n02051000 2. The last preceeding SETPTR was not successfully processed.\n02052000.hi 0\n02053000.in 0\n02054000.sp 2\n02055000MZP422I sssss INDEX: iiiiii LIMITS: aaaaaa:aaaaaa\n02056000.in 6\n02057000.sp 1\n02058000A POINT statement refers to the designated absolute virtual address, i.\n02059000The limits are for the entire area pointed to,\n02060000including the prefix, if any.\n02061000.in 0\n02062000.pa\n02063000.ce data\n02064000DUMP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b_____________\n02065000.end\n02066000.sp 2\n02067000.fi l\n02068000.ll 100\n02069000MZP501I sssss \u00ddACCESSED VIA\u00a8 m \u00ddc\u00a8\n02070000\u00ddINDEX: e\u00a8 HEX/EBCDIC\u00dd/OPCODE\u00a8 DUMP\n02071000.ll 70\n02072000.in 6\n02073000.sp 1\n02074000This message is used as a subtile for all dumps.\n02075000The clause \"INDEX: eeeeeeee\" is present if an entry point\n02076000within the containing csect is specified,\n02077000either explicitly or implicitly.\n02078000The clause \"ACCESSED VIA\" is present if the limits\n02079000of the dump are relative to a location\n02080000found with a POINT statement;\n02081000any \"INDEX\" clause which would otherwise be supplied is suppressed,\n02082000in order not to exceed the line size of the 2260 or 3270.\n02083000.in 0\n02084000.hi 0\n02085000.pa\n02086000.ce daTA\n02087000VER/REP Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b________________\n02088000.end\n02089000.sp 2\n02090000MZP601I sssss NAME mmmmmmmm cccccccc\n02091000.in 6\n02092000One or more errors have been found relating to the specified module.\n02093000Addition messages will be displayed to diagnose the exact errors.\n02094000.in 0\n02095000.sp 2\n02096000MZP602I sssss rrrrrr:rrrrrr ABS: aaaaaa:aaaaaa OUT OF RANGE\n02097000.in 6\n02098000.sp 1\n02099000The start or end address of the verify or replace is outside the\n02100000bounds of the module or csect.\n02101000.in 0\n02102000.sp 2\n02103000MZP603I sssss VERIFY FAILURE AT: rrrrrr ABS :aaaaaa\n02104000.in 6\n02105000.sp 1\n02106000The data in storage did not match the VERIFY data.\n02107000This message is always accompanied by MZP604I.\n02108000.in 0\n02109000.sp 2\n02110000MZP604I sssss ACTUAL CONTENT IS xxxx,xxxx,...\n02111000.in 6\n02112000.sp 1\n02113000This message immediately follows MZP603I.\n02114000.in 0\n02115000.sp 2\n02116000MZP698I VERIFY/REPLACE PROCESSING SUCCESSFUL\n02117000.in 6\n02118000.sp 1\n02119000No errors were detected.\n02120000All REP operations, if any, were performed.\n02121000.in 0\n02122000.sp 2\n02123000MZP699I NOGO SWITCH SET - ALL REPS SUPPRESSED\n02124000.in 6\n02125000.sp 1\n02126000An error was detected.\n02127000No REP operation is performed.\n02128000The user should correct the errors indicated\n02129000in the preceeding error messages.\n02130000.in 0\n02131000.pa\n02132000.ll 158\n02133000.in 12\n02134000.nj\n02135000Final Housekeeping and Reinitialization Messages\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b\b________________________________________________\n02136000.fi\n02137000.ll 70\n02138000.sp 2\n02139000MZP701I EOD\n02140000.in 6\n02141000.sp 1\n02142000Either an end-of-file occurred on SYSIN or a RESET EOD\n02143000statement was read.\n02144000All input read prior to that point has been processed.\n02145000.in 0\n02146000.pa\n02147000VII. \u00acMZAP/CZAP Comparision\n02148000.sp 1\n02149000.in 4\n02150000.nj\n02151000MZAP\b\b\b\b____                          CZAP\b\b\b\b____\n02152000CONSOLE                       No equivalent\n02153000.sp 1\n02154000*                             *\n02155000.sp 1\n02156000NAME .                        NAME NUCLEUS\n02157000.sp 1\n02158000NAME .csect                   NAME NUCLEUS\n02159000                              INDEX csectdisp\n02160000.sp 1\n02161000NAME name                     NAME name\n02162000.sp 1\n02163000NAME name csect               NAME name\n02164000                              INDEX csectdisp\n02165000.sp 1\n02166000CVT                           NAME NUCLEUS\n02167000                              INDEX cvtloc\n02168000.sp 1\n02169000UCB=cuu                       NAME NUCLEUS\n02170000                              INDEX ucbloc\n02171000UCB cuu                       NAME NUCLEUS\n02172000                              INDEX ucbloc\n02173000.sp 1\n02174000BASE hexbase                  BASE hexbase\n02175000.sp 1\n02176000INDEX=hexix                   INDEX hexix\n02177000.sp 1\n02178000INDEX esdname                 INDEX csectdisp\n02179000                              BASE  esdindex\n02180000.sp 1\n02181000VERIFY  xx                    VERIFY  xx\n02182000VER     00 'a'                VER     00 c1\n02183000V       00 'a'C2              VER     00 c1C2\n02184000V       00 C3'D'              VER     00 c3C4\n02185000V       00 C6'GH'C9           VER     00 c6C7C8C9\n02186000.sp 1\n02187000REPLACE xx                    REPLACE xx\n02188000REP     00 'a'                REP     00 c1\n02189000R       00 'a'C2              REP     00 c1C2\n02190000R       00 C3'D'              REP     00 c3C4\n02191000R       00 C6'GH'C9           REP     00 c6C7C8C9\n02192000.sp 1\n02193000RESET                         RESET\n02194000.sp 1\n02195000RESET   EOD                   No equivalent\n02196000.sp 1\n02197000DUMP    name                  NAME    name\n02198000                              DUMP    0  modulelen\n02199000.sp 1\n02200000DUMP    name  csect           NAME    name\n02201000                              DUMP    csectdisp  csectlen\n02202000.sp 1\n02203000DUMP    .                     NAME    NUCLEUS\n02204000                              DUMP    0          nuclen\n02205000.sp 1\n02206000DUMP    .     csect           NAME    NUCLEUS\n02207000                              DUMP    csectdisp  csectlen\n02208000.sp 1\n02209000DUMPA   (see DUMP)            DUMPA   (see DUMP)\n02210000.sp 1\n02211000DUMPT   (see DUMP)            No equivalent\n02212000.sp 1\n02213000$ABEND  (attn)                ABEND\n02214000.sp 1\n02215000DEBUG   (Not truly equiv)     TRACE   (not truly equiv)\n02216000DEBUG   (Not truly equiv)     LOGOUT  (not truly equiv)\n02217000.sp 1\n02218000RESET   (Not truly equiv)     TRACEOFF(not truly equiv)\n02219000.fi\n02220000.in 0\n02221000.pa\n02222000VIII. \u00acIndex to Input Statements\n02223000.sp 2\n02224000.nj\n02225000.ll 140\n02226000Statement\b\b\b\b\b\b\b\b\b_________      Page\b\b\b\b____     Statement\b\b\b\b\b\b\b\b\b_________           Page\b\b\b\b____\n02227000.ll 70\n02228000AVT               9     MSER                  10\n02229000BASE             12     NAME                   8\n02230000BLDL              9     POINT                 17\n02231000CONSOLE          14     QMRES                 10\n02232000CVT               9     R                     13\n02233000DEBUG             8     REP                   13\n02234000DUMP             14     REPLACE               13\n02235000DUMPA            15     RESET                  8\n02236000DUMPB            14     SCVT                  10\n02237000DUMPT            15     SETPTR                16\n02238000END               8     SMCA                  10\n02239000GO                8     TACT                  10\n02240000GOVRFLB           9     TCB                   10\n02241000HCT               9     TSCVT                 11\n02242000HELP             16     UCB                   11\n02243000IBMORG            9     UCM                   11\n02244000INDEX            12     USERORG               11\n02245000JOB               8     V                     13\n02246000KEY               7     VER                   13\n02247000LIB              13     VERIFY                13\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "MZAPINST": {"ttr": 1551, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00\\xd9\\x00\\xd9\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 217, "newlines": 217, "modlines": 0, "user": "MZAPVB"}, "text": "00002000.tt ///\n00004000.ti t 05\n00006000.ti set \u00ac\n00008000.he             MZAP Installation\n00010000.ce on\n00012000MOREZAP\n00014000\n00016000INSTALLATION INSTRUCTIONS\n00018000______________________________\n00020000.ce off\n00022000.fo on\n00024000.sp 3\n00026000\u00actMZAP is intended to be individually assembled for each\n00028000combination of operating system, system level, and CPU;\n00030000it will not function properly if run on the wrong system or CPU.\n00032000Any installation with multiple CPUs must order MZAP separately\n00034000for each CPU; any violation of this is construed as theft and\n00036000appropriate action will be taken.\n00038000.sp 1\n00040000\u00actMZAP is intended to protect itself against theft,\n00042000by whatever means are considered appropriate.\n00044000Use at an unauthorized installation may crash the system,\n00046000destroy online disks,\n00048000or anything else which may strike my fancy:\n00050000furthermore, if such theft is discovered, legal action may be taken,\n00052000over and above whatever steps occur automatically.\n00054000.sp 1\n00056000\u00actMZAP source consists of a set of macros,\n00058000a set of subroutines,\n00060000and a main module.\n00062000All of these have names beginning with MZ;\n00064000those subroutines which are link-edited together\n00066000with the main module have names beginning with MZAP.\n00068000.sp 1\n00070000\u00actTo generate a copy of MZAP, certain important variables must\n00072000be ascertained.\n00074000They are as follows:\n00076000.ju no\n00078000.in 24\n00080000.sp 1\n00082000.un 14\n000840001).  CPU \u00act- either 360\b\b\b___ or 370\b\b\b___.\n00086000.sp 1\n00088000.un 14\n000900002).  CPUID \u00act- Must be the six digit IBM serial number of the\n00092000Central Processing Unit.\n00094000While the number is normally found on the front of the system console,\n00096000in certain models (such as 168) the console may be considered to be\n00098000a separate unit, and, as such, assigned a separate number;\n00100000it is safest to obtain the number from the CE, or in the case of 370s,\n00102000by performing a STIDP instruction while in supervisor mode.\n00104000.sp 1\n001060003). MDL \u00act- 40\b\b__, 50\b\b__, 65\b\b__, 67\b\b__, 75\b\b__, 91\b\b__, 95\b\b__,\n00108000135\b\b\b___, 145\b\b\b___, 155\b\b\b___, 158\b\b\b___, 165\b\b\b___, 168\b\b\b___, or 195\b\b\b___.\n00110000.sp 1\n00112000.un 14\n001140004). SYS \u00act- OS/MFT\b\b\b\b\b\b______, OS/MVT\b\b\b\b\b\b, VS1\b\b\b___, or VS2\b\b\b.___.\n00116000.un 14\n001180004). SYS \u00act-\n00120000.oc _\n00122000OS/MFT, OS/MVT, VS1,\n00124000.oc\n00126000or\n00128000.oc _\n00130000VS2.\n00132000.oc\n00134000MP/65 is considered to be MVT.\n00136000.sp 1\n00138000.un 14\n001400005).  RELEASE\n00142000.sp 1\n00144000.un 14\n001460006). HASPSVC - For those unfortunate enough to be using HASP II\n00148000VERSION 3.0 or 3.1, this parameter should be specified as\n00150000the three decimal digit SVC number assigned to HASP.\n00152000HASP I is totally unsupported, support is planned for HASP II versions\n001540004 and JES2(HASP II Version 5).\n00156000If you think you are using HASP 3, 4, or 5,\n00158000take another look at the book; or see an optometrist:\n00160000from 1968 to 1974, the only HASP releases have been HASP 2 (would you\n00162000believe an MFT/1 HASP 1 site in beautiful downtown Burbank?) -\n00164000any other number you may have heard is due to illiteracy.\n00166000This parameter is ignored for versions 4 and 5.\n00168000.sp 1\n00170000.un 14\n001720007).  For 370 only, the emulators for which DUMPT support is desired.\n00174000.in 0\n00176000.fo on\n00178000.in 0\n00180000.sp 2\n00182000\u00actIn addition to the MZAP macros,\n00184000OS macros from SYS1.MACLIB, SYS1.MODGEN, and SYS1.PVTMACS are used.\n00186000If the system was generated without TSO,\n00188000certain of the macros will be missing from SYS1.MACLIB\n00190000and may be found in SYS1.TSOMAC and SYS1.TCAMMAC.\n00192000For VS, some of the name have changes (for instance,\n00194000SYS1.MODGEN is now SYS1.AMODGEN),\n00196000but it should be clear from a listing of the VTOC what\n00198000the proper names are.\n00200000.sp 1\n00202000\u00actThese OS macros come from two sources,\n00204000the DLIB disks and the optional source material.\n00206000While those macros not in SYS1.MACLIB will be supplied\n00208000as part of MZAP,\n00210000it is recommended that the installation replace them\n00212000with the macros at the proper release level.\n00214000.sp 2\n00216000\u00actTo install MZAP, all modules must be reassembled\n00218000after two members are updated:\n00220000.pi 0\n00222000.in 14\n00224000.ju off\n00226000.sp 1\n00228000.un 4\n002300001. MZSET contains SETx statements,\n00232000which must be modified to reflect the customer's configuration;\n00234000the spellings underlined must be adhered to.\n00236000.sp 1\n00238000.un 4\n002400002. MZAP5 contains SETA and SETC statements specifying emulators\n00242000whose opcodes are to be recognized during DUMPT Processing.\n00244000360 is mandatory;\n00246000370 is strongly recommended;\n00248000any of the others may be included if the customer wishes.\n00250000.in 0\n00252000.fo on\n00254000.sp 2\n00256000The MZAP modules which must be reassembled are:\n00258000.in 23\n00260000.ju off\n00262000.un 13\n00264000MZAP1 \u00act\u00actInitialization\n00266000.sp 1\n00268000.un 13\n00270000MZAP2 \u00act\u00actControl Cards\n00272000.sp 1\n00274000.un 13\n00276000MZAPDBUG \u00act\u00actDEBUG Snapshots of Control Blocks\n00278000.sp 1\n00280000.un 13\n00282000MZAP3 \u00act\u00actCDE/LPRB lookup\n00284000.sp 1\n00286000.un 13\n00288000MZAP4 \u00act\u00actESD Lookup\n00290000.sp 1\n00292000.un 13\n00294000MZAP5 \u00act\u00actDump Processing\n00296000.sp 1\n00298000.un 13\n00300000MZAP6 \u00act\u00actVER/REP Processing\n00302000.sp 1\n00304000.un 13\n00306000MZAP7 \u00act\u00actFinal housekeeping and reinitialization\n00308000.sp 1\n00310000.un 13\n00312000MZPRINT \u00act\u00actSYSPRINT Access Method\n00314000.sp 1\n00316000.un 13\n00318000MZWTO \u00act\u00actOperator's console access method\n00320000.sp 1\n00322000.un 13\n00324000MZ2260 \u00act\u00act2260 local CRT access method\n00326000.sp 1\n00328000.un 13\n00330000MZ3270 \u00act\u00act3270 local CRT access method\n00332000.sp 1\n00334000.un 13\n00336000MZTSO \u00act\u00actTSO non-CRT access method\n00338000.sp 1\n00340000.un 13\n00342000MZTS2260 \u00ac\u00ac\u00ac\u00acTSO 2260 CRT access method\n00344000.sp 1\n00346000.un 13\n00348000MZTS3270 \u00ac\u00ac\u00ac\u00acTSO 3270 CRT access method\n00350000.in 0\n00352000.fo on\n00354000.sp 2\n00356000\u00actWhen MZAP has been assembled,\n00358000remove any ALIAS card from the beginning of each object\n00360000deck except MZAP1,\n00362000leave the OVERLAY and INSERT cards in front of the MZAP1\n00364000object deck, and remove any cardspunched by the separator,\n00366000including blank cards.\n00368000Place the statement NAME MZAP(R) at the end of the last object deck.\n00370000The object deck, or a copy on tape,\n00372000may now be shipped to the customer site.\n00374000.sp 1\n00376000\u00actThe OS customer should link-edit MZAP with the OVLY attribute;\n00378000the VS customer may prefer not to use the overlay supervisor.\n00380000If the assemblies are done at the customer's site,\n00382000then an assemble-and-link may be done\n00384000and no object decks need be punched.\n00386000.sp 2\n00388000\u00actNote that it is imperative that a separate copy of MZAP\n00390000be ordered for each cpu-system combination:\n00392000.pi 0\n00394000.in 10\n00396000.hi 4\n00398000.fi l\n00400000.sp 1\n004020001. Some functions are logically different for each of the five\n00404000OS systems (MFT, VS1, MVT, SVS, MVS).\n00406000.sp 1\n004080002. Special processing may be done on specific models to\n00410000avoid causing problems to MCH.\n00412000This may be necessary as a precaution against storage failures\n00414000in modules which were copied or checksummed into SYS1.ASRLIB,\n00416000or which reside in the PLPA.\n00418000.sp 1\n00420000.un 14\n004220003. If the CPU type, CPU model, or CPUID are not as expected,\n00424000this is interpreted as being due to an unauthorized use of\n00426000a stolen copy of MZAP and appropriate measures are taken;\n00428000a system crash is the least that could result.\n00430000.in 0\n00432000.hi 0\n00434000.fi\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "SYSTEM": {"ttr": 1797, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00G\\x01\\x19\\x10o\\x01\\x19\\x10o\"E\\x00\\xc3\\x00\\xc3\\x00\\x00\\xd4\\xe9\\xc1\\xd7\\xe5\\xc2@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "2019-04-16T00:00:00", "modifydate": "2019-04-16T22:45:47", "lines": 195, "newlines": 195, "modlines": 0, "user": "MZAPVB"}, "text": "00002000II. SYSTEM and INPUT/OUTPUT REQUIREMENTS\n00004000.sp 1\n00006000.in 5\n00008000MZAP requires that the control program be OS/MVT or OS/65MP;\n00010000OS/VS2 Release 1.6 support is planned in the near future;\n00012000and provision has been made for easily adding MFT or VS1 support\n00014000with only minor modifications.\n00016000No optional OS facilities need be generated,\n00018000other than normal device support (for the 2260,\n00020000this must be explicitly requested via the GRAPHICS macro;\n00022000for the 3270, this must be requested via the BTAM option\n00024000of the DATAMGT macro; for all sequential and DA devices\n00026000this support is automatic).\n00028000In particular, MZAP does not use SVC 54 to get into key 0,\n00030000and hence ISAM is not required.\n00032000When VS support is available,\n00034000MZAP will be required to run only from an authorized library.\n00036000.sp 1\n00038000MZAP is intended to obtain input from multiple sources:\n00040000a data set called SYSIN,\n00042000a TSO terminal,\n00044000a local crt, or an operator's console.\n00046000If MZAP is invoked from a TSO terminal,\n00048000input can be supplied only form SYSIN or the terminal;\n00050000otherwise a DD statement may be supplied allocating a\n00052000960 byte (12*80) local 2260 with line addressing and\n00054000non-destructive cursor\n00056000or a 1920 byte (24*80) EBCDIC local 3270,\n00058000which may be used for both input and output.\n00060000Input, output, and attention from an operators\n00062000console are performed via REPLY,\n00064000WTO/WTOR, and MODIFY;\n00066000they are normally inactive if a CRT is assigned,\n00068000but an uncorrectable I/O error on the CRT will\n00070000force transfer of these functions (the operator may\n00072000perform a MODIFY even when the CRT is operational).\n00074000.sp 1\n00076000Input is normally from a sequential data set,\n00078000SYSIN. If SYSIN is not defined or is a DD DUMMY,\n00080000\"console input mode\" is set.\n00082000This mode is also set by a CONSOLE statement read\n00084000from SYSIN or by a MODIFY or attention with the text CONSOLE.\n00086000Input is always translated to upper case.\n00088000Console mode is terminated, and control reverted to SYSIN,\n00090000by an END statement;\n00092000this is permitted only when SYSIN is assigned.\n00094000.sp 1\n00096000Output is normally to SYSPRINT.\n00098000If a 2260 or 3270 is assigned,\n00100000all output except page headings will be displayed on the CRT;\n00102000if in console input mode with no CRT assigned,\n00104000this output will be displayed via WTO/TPUT.\n00106000.sp 1\n00108000When a TSO terminal or a CRT is used,\n00110000it is in one of two states: normal and attention.\n00112000In normal state, input is solicited in a device-dependent fashion:\n00114000.in 10\n00116000.sp 1\n00118000.hi 12\n001200002260 local:\n00122000Blanking the entry line and displaying an SMI;\n00124000the user keys in a command and depresses SHIFT and ENTER simultaneously.\n00126000.sp 1\n001280003270 local:\n00130000writing a statement number, Blanking an entry line,\n00132000and positioning the cursor;\n00134000the user enters a command and depresses ENTER.\n00136000.sp 1\n001380002260 TSO: \u00ac\n00140000Writing a statement number followed by an SMI;\n00142000the user enters a command and SHIFT/ENTER.\n00144000.sp 1\n001460003270 TSO: \u00ac\n00148000writing a statement number and positioning the cursor;\n00150000the user enters a command and ENTER.\n00152000.sp 1\n00154000TSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00156000Writing a statement number;\n00158000the user enters a command and depresses RETURN, EOB, etc.,\n00160000according to the type of terminal.\n00162000.sp 2\n00164000.hi 0\n00166000.in 5\n00168000Attention state is entered in a device-dependent fashion:\n00170000.in 10\n00172000.hi 12\n00174000.sp 1\n00176000Local 2260:\n00178000SHIFT/ENTER within 1.5 seconds after\n00180000line 11(bottom line) is updated;\n00182000.sp 1\n00184000Local 3270:\n00186000ENTER or PA1 any time the keyboard is\n00188000unlocked;\n00190000.sp 1\n00192000TSO: \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00194000the technique depends on type of terminal,\n00196000TSO/TCAM generation,\n00198000and the users last TERM command - it may be BREAK or\n00200000may be a simulated attention.\n00202000Attention state is also entered automatically when in HOLD mode\n00204000(see below).\n00206000.sp 1\n00208000.hi 0\n00210000.in 5\n00212000When in attention state,\n00214000the user will be prompted to key in an attention message by\n00216000blanking an entry line and displaying \"EH ? \" followed by an SMI (>\b|)\n00218000- a greater than sign (>) will be used on other than a 2260.\n00220000The prompt will be repeated after each attention message,\n00222000allowing the user to key in as many messages as he wishes;\n00224000attention state will be reset when he enters a null line\n00226000(SHIFT/ENTER, SHIFT, CR, etc. with no preceeding text).\n00228000.sp 2\n00230000.hi 0\n00232000.in 5\n00234000.sp 2\n00236000Output to the CRT/terminal may be done in two modes:\n00238000AUTO and HOLD;\n00240000output may be at any of four speeds:\n00242000SLOW, HALFAST, FAST, or PAGE.\n00244000In AUTO mode, output occurs continously until input is\n00246000required or the user enters attention state;\n00248000in HOLD mode attention state is entered after each write\n00250000and the user must enter a null line to continue.\n00252000.sp 2\n00254000Output to a CRT will always be in full screen mode;\n00256000the oldest line on the screen will be indicated by a logical or\n00258000(|).\n00260000The write will take place every time one, two, four, or twelve lines\n00262000(1,4,8, or 24 for 3270) have been written,\n00264000depending on the speed option.\n00266000In PAGE mode, one line (two if a dump is in progress)\n00268000will be reserved on the screen,\n00270000resulting in a net display of 11 (10 if a dump) lines per 2260 screen\n00272000and 23 (22 if a dump) per 3270 screen.\n00274000Regardless of the speed,\n00276000the current contents of the buffer will be written prior to\n00278000soliciting input or additional attention messages.\n00280000.sp 2\n00282000When a CRT is not assigned,\n00284000operator input in batch (non-TSO) will be solicited by a WTOR;\n00286000attention messages must be entered by giving the command\n00288000\"MODIFY id,msg\" where id is the jobname or START id and\n00290000msg is the text of the attention message.\n00292000See section V for a description of START requirements.\n00294000.pa\n00296000.in 0\n00298000III. Attention/MODIFY messages\n00300000.in 5\n00302000.sp 1\n00304000The following attention messages are allowed;\n00306000they may be in lower case since MZAP translates to upper case:\n00308000.sp 2\n00310000.in 10\n00312000.hi 12\n00314000$HELP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00316000display list of valid nonpriveleged attention messages.\n00318000This function is forced if an invalid attention message is entered.\n00320000.sp 1\n00322000CON \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00324000set console input mode\n00326000.sp 1\n00328000STOP \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00330000terminate dump or HELP\n00332000.sp 1\n00334000$HOLD \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00336000enter attention state after every write\n00338000.sp 1\n00340000.br\n00342000$AUTO \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00344000restore normal mode after $HOLD\n00346000.sp 1\n00348000$SLOW \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00350000do 12 writes/2260 screen, 24/3270.\n00352000A write will occur for each output line.\n00354000.sp 1\n00356000$HALFAST \u00ac\u00ac\u00ac\n00358000do 6 writes/screen.\n00360000a write will occur for every 2 output lines(2260)\n00362000or every 4 lines(3270)\n00364000.sp 1\n00366000$FAST \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00368000do 3 writes/screen.\n00370000A write will occur for every 4 output lines(2260)\n00372000or every 8 output lines(3270).\n00374000.sp 1\n00376000$PAGE \u00ac\u00ac\u00ac\u00ac\u00ac\u00ac\n00378000do 1 write/screen.\n00380000If a dump is in progress,\n00382000one line is reserved for the dump header.\n00384000One line is reserved as the entry line.\n00386000A write will occur for every 10 or 11 output lines\n00388000(3270: 22 or 23 output lines).\n00390000.in 0\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT988/CBT.V500.FILE988.PDS/MZAPVB.xmi", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT988/CBT.V500.FILE988.PDS", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}