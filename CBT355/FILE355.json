{"INMR01": {"INMLRECL": 80, "INMFNODE": "N1", "INMFUID": "SBGOLOB", "INMTNODE": "A", "INMTUID": "A", "INMFTIME": "20201220011826000000", "INMNUMF": 1}, "INMR02": {"1": {"INMUTILN": "IEBCOPY", "INMSIZE": 235144, "INMDSORG": "PO", "INMTYPE": "None", "INMLRECL": 80, "INMBLKSZ": 5600, "INMRECFM": "FB", "INMDIR": 6, "INMDSNAM": "CBT.V500.FILE355.PDS", "numfile": 1}, "2": {"INMUTILN": "INMCOPY", "INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 32756, "INMBLKSZ": 3120, "INMRECFM": "VS", "numfile": 1}}, "INMR03": {"1": {"INMSIZE": 235144, "INMDSORG": "PS", "INMLRECL": 80, "INMRECFM": "?"}}, "file": {"CBT.V500.FILE355.PDS": {"COPYR1": {"type": "PDS", "DS1DSORG": 512, "DS1BLKL": 5600, "DS1LRECL": 80, "DS1RECFM": "FB", "DS1KEYL": 0, "DS1OPTCD": 0, "DS1SMSFG": 0, "file_tape_blocksize": 3120, "DVAOPTS": 12336, "DVACLASS": 32, "DVAUNIT": 15, "DVAMAXRC": 32760, "DVACYL": 3340, "DVATRK": 15, "DVATRKLN": 58786, "DVAOVHD": 0, "num_header_records": 2, "DS1REFD": "200354", "DS1SCEXT": "b'\\x00\\x00\\x00'", "DS1SCALO": "b'\\x80\\x00\\x00\\xbe'", "DS1LSTAR": "b'\\x00\\x05\\x06'", "DS1TRBAL": "b'\\x8b\\x0e'"}, "COPYR2": {"deb": "b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "extents": ["b'\\x01\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x8f\\x03\\xa0\\x00\\x04\\x9a\\xc0\\xd8'", "b'X\\xf4\\xfd\\xd0\\x00\\x00\\x02\\x97\\x00\\x06\\x02\\x97\\x00\\x0b\\x00\\x06'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'", "b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00'"]}, "members": {"KONCAT": {"ttr": 516, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x14/\\x00\\x98\\x14/\\x13\\x15\\x07\\xd9\\x07\\xd9\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-05-22T00:00:00", "modifydate": "1998-05-22T13:15:00", "lines": 2009, "newlines": 2009, "modlines": 0, "user": "SYSLBD"}, "text": "//SACJICON JOB  (16403,CAL12,225,4288),'WHALEY, MIKE     ',\n// MSGCLASS=X,CLASS=A,NOTIFY=SACJI\n//*\n//*\n//*******************************************************************\n//* JCL AND SOURCE TO ASSEMBLE AND LINK CONCAT VERSION 5.1\n//* CHANGES MADE TO ALLOW FOR THE SWA TO MOVE ABOVE THE LINE.\n//*******************************************************************\n//C      EXEC  PGM=IEV90,PARM='OBJECT,RENT,TEST',REGION=2000K\n//SYSLIB   DD  DSN=SYS1.MACLIB,DISP=SHR\n//         DD  DSN=SYS1.AMODGEN,DISP=SHR\n//SYSUT1   DD  UNIT=(SYSDA,SEP=SYSLIB),SPACE=(CYL,(10,5)),DSN=\n//SYSPUNCH DD  DUMMY\n//SYSPRINT DD  SYSOUT=*,DCB=(BLKSIZE=3509)\n//*YSPRINT DD  SYSOUT=*,DCB=(BLKSIZE=3509),DEST=U9,UCS=GF15,\n//*        FCB=L60C\n//SYSLIN   DD  DISP=(,PASS),UNIT=SYSDA,SPACE=(CYL,(5,5,0)),            *\n//             DCB=(BLKSIZE=400),DSN=&LOADSET\n//SYSIN    DD  *\n          TITLE 'CONCAT COMMAND PROCESSOR   SWA ABOVE THE LINE!'        0000000\n*********************************************************************** 0000000\n*** TO DO LIST:                                                     *** 0000000\n***  CHECK OTHER EXECUTED INSTRUCTIONS                              *** 0000000\n***  MOVE IKJPARM DATA AREAS TO RENT STORAGE!                       *** 0000000\n***        4. CHECK OUT AND DOCUMENT THE 'VERIFY' OPTION.           *** 0000000\n***                                                                 *** 0000000\n***                                                                 *** 0000000\n***  VERSION 5.1   M. WHALEY                                        *** 0000000\n***        1. IS THE 31 BIT VERSION FOR THE SWA MOVE 1/27/89        *** 0000000\n***        2. 'LIST' PROCESSING ADDED FOR DATASET NAMES.            *** 0000000\n***              - ALLOWS: CONCAT ISPPLIB (DA1,DA2,DA3)             *** 0000000\n***              - CHECK FOR 'ONLY' PROCESSING                      *** 0000000\n***                   WITH THIS FUNCTION I PUT AN X'AAAAAAAA'       *** 0000000\n***                   VALUE IN THE PDE MEMBER POINTER FIELD IF      *** 0000000\n***                   THIS DATASET IS TO BE EXCLUDED FROM           *** 0000000\n***                   PROCESSING.  OTHERWISE IT IS ZERO.            *** 0000000\n***              - CATALOG CHECK OF ALL DSN'S ENTERED               *** 0000000\n***              - CHECK IF ALL DSN'S ARE REAL ON VOLUMES           *** 0000000\n***              - MODIFY NEW TSO ALLOC COMMAND                     *** 0000000\n***        3. IF OUR DATASET NAME IS FURTHER DOWN IN THE LIST AND   *** 0000000\n***              WE HAVE 'EVEN', DELETE THE NAME FARTHER DOWN....   *** 0000000\n***        4. CHECK OUT AND DOCUMENT THE 'VERIFY' OPTION.           *** 0000000\n***        5. READ JFCB CALL CHANGED TO NEW FORMAT USING THE        *** 0000000\n***              (ARL) ALLOCATION RETRIEVAL LIST.                   *** 0000000\n***              - REMEMBER TO FREEMAIN THE RETURNED STORAGE        *** 0000000\n***        6. DUMBDCB MOVED TO RE-ENTRANT STORAGE                   *** 0000000\n***        7. A NEW CSECT WAS SET UP (DATASECT) TO HOLD OVERFLOW    *** 0000000\n***              DATA THAT TWO BASE REGISTERS CAN'T ADDRESS.        *** 0000000\n***              LOT'S OF JUNK MAY BE MOVED THERE.                  *** 0000000\n***        8. ADDED 'TRACE' MACRO FOR DEBUGGING.                    *** 0000000\n***        9. CREATED THE INSSECT CSECT BECAUSE THE CODE SECTION    *** 0000000\n***              OF CONCAT WAS JUST TOO BIG FOR TWO BASE REGS.      *** 0000000\n***       10. FIXED UP 'REMOVE' FUNCTION TO WORK.                   *** 0000000\n***       11. ADDED ALIAS 'L' & 'LAST' TO 'AFTER' PARM              *** 0000000\n***       12. ADDED ALIAS 'F' & 'FIRST' TO 'BEFORE' PARM            *** 0000000\n***       13. 'POS' PARAMETER NO LONGER SUPPORTED...                *** 0000000\n***       14. VOL PARAMETER NO LONGER SUPPORTED ......(NEVER WAS)   *** 0000000\n***       15. RCX MADE THE DEFAULT                                  *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\n***  PROGRAM NAME:CONCAT            VERSION 4.0           03/10/87  *** 0000000\n***  AUTHOR: EDWARD TISCHOFER                                       *** 0000000\n***  COMMAND FORMAT:                                                *** 0000000\n***      CONCAT DDNAME DSN BEFORE  EVEN   MSG   NODEBUG RC  VOLUME()*** 0000000\n***                        AFTER   ONLY   NOMSG DEBUG   RCX         *** 0000000\n***                        POS(XX) VERIFY                           *** 0000000\n***                                REMOVE                           *** 0000000\n***                                                                 *** 0000000\n***  REGISTER USAGE:                                                *** 0000000\n***        R1 SYSTEM & PROGRAM MACROS, TEMP WORK REGISTER           *** 0000000\n***        R2 PROGRAM MACROS, TEMP WORK REGISTER                    *** 0000000\n***        R3 TEMP WORK REGISTER                                    *** 0000000\n***        R4 WORK REGISTER                                         *** 0000000\n***        R5 WORK REGISTER                                         *** 0000000\n***        R6 LOADV ADDRESS REGISTER <<< EXECUTED >>>               *** 0000000\n***        R7 LOADV LENGTH REGISTER  <<< EXECUTED >>>               *** 0000000\n***        R8 LOADV ADDRESS REGISTER/DSN LIST POINTER               *** 0000000\n***        R9  CPPL POINTER                                         *** 0000000\n***        R10 PARSE WORK AREA DSECT                                *** 0000000\n***        R11,R12 BASE REGISTERS                                   *** 0000000\n***        R13 SAVE AREA AND DYNAMIC DATA AREA POINTER              *** 0000000\n***        R14 SUBROUTINE RETURN REGISTER                           *** 0000000\n***        R15 SUBROUTINE RETURN CODE REGISTER                      *** 0000000\n***                                                                 *** 0000000\n***  REVISIONS: 23290 -- 08/14/86    INITIAL WRITING                *** 0000000\n***             23290 -- 08/29/86    ADD ENHANCMENTS                *** 0000000\n***             23290 -- 03/10/87    MAKE RE-ENTERENT               *** 0000000\n*********************************************************************** 0000000\n***    SOME EQUATES                                                **** 0000000\n*********************************************************************** 0000000\nCVTTVTO  EQU     X'9C'\n*********************************************************************** 0000000\n***    DEFINE ALL CUSTOM MACROS USED IN CONCAT                     **** 0000000\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n***    DEFINE LINKAGE MACROS                                       **** 0000000\n***      EDOPEN   -START OF ASM PROGRAM                            **** 0000000\n***      EDCLOSE  -END OF ASM PROGRAM                              **** 0000000\n***      PROC     -START OF RE-ENTERENT PROCEDURE                  **** 0000000\n***      EDDATA   -START OF DYNAMIC DATA AREA                      **** 0000000\n*********************************************************************** 0000000\n         MACRO\n&NAME    EDOPEN &B1,&B2,&B3,&B4,&B5,&PROCS=20,&DATA=3000,&MODE=ANY\n         GBLA  &PROCSX\n         GBLA  &DATAX\n&PROCSX  SETA  &PROCS*4\n&DATAX   SETA  &DATA\n         AIF   ('&B2' NE '').OK\n         AIF   ('&B3' NE '').OK\n         AIF   ('&B4' NE '').OK\n         AIF   ('&B5' EQ '').OK\n         MNOTE 8,' ** REQUIRED BASE REGISTER SPECIFICATION OMITTED'\n         MNOTE *,' ** MACRO EXPANSION TERMINATED'\n         MEXIT\n.OK      ANOP\n         AIF   ('&NAME' NE '').CHECK\n         MNOTE 8,' ** CSECT NAME IN LABEL FIELD OMITTED'\n         MNOTE *,' ** MACRO EXPANSION TERMINATED'\n         MEXIT\n.CHECK   ANOP\n&NAME    CSECT\n&NAME    AMODE 31\n&NAME    RMODE ANY\n         AIF   ('&B5' EQ '').FOUR\n         USING *,&B1,&B2,&B3,&B4,&B5\n         AGO   .CONT\n.FOUR    AIF   ('&B4' EQ '').THREE\n         USING *,&B1,&B2,&B3,&B4\n         AGO   .CONT\n.THREE   AIF   ('&B3' EQ '').TWO\n         USING *,&B1,&B2,&B3\n         AGO   .CONT\n.TWO     AIF   ('&B2' EQ '').ONE\n         USING *,&B1,&B2\n         AGO   .CONT\n.ONE     AIF   ('&B1' EQ '').ERROR\n         USING *,&B1\n         AGO   .CONT\n.ERROR   ANOP\n         MNOTE 16,' ** NO BASE REGISTER SPECIFIED'\n         MNOTE *,' ** MACRO EXPANSION TERMINATED'\n         MEXIT\n.CONT    ANOP\nR0       EQU   0                     E\nR1       EQU   1                       Q\nR2       EQU   2                         U\nR3       EQU   3                           A\nR4       EQU   4                             T\nR5       EQU   5                               E\nR6       EQU   6                      R\nR7       EQU   7                        E\nR8       EQU   8                          G\nR9       EQU   9                            I\nR10      EQU   10                             S\nR11      EQU   11                               T\nR12      EQU   12                                 E\nR13      EQU   13                                   R\nR14      EQU   14                                     S\nR15      EQU   15\n*\n         STM   R14,R12,12(R13)         SAVE CALLERS REGISTERS\n         LR    &B1,R15                 LOAD BASE REGISTER\n         LR    R9,R1                   SAVE ORIGINAL PASSED PARM (MW)\n******** GETMAIN R,LV=72+&PROCSX+&DATAX,LOC=BELOW\n         GETMAIN R,LV=72+&PROCSX+&DATAX,LOC=BELOW\n         XC    0(72+&PROCSX,R1),0(R1)\n         ST    R13,4(,R1)              SAVE BACKWARD CHAIN POINTER\n         ST    R1,8(,R13)              SAVE FORWARD CHAIN POINTER\n         L     R1,24(,R13)             RESTORE PARM POINTER\n         L     R13,8(,R13)             POINT TO NEW SAVE AREA\n         USING DATAAREA,R13            ADDRESSABILITY TO DSECT\n* MW     LA    R2,DATA                 THE DATA ADDRESS\n* MW     LA    R3,&DATAX               LENGTH OF THE DATA AREA\n* MW     LA    R5,0                    0 PAD AND ZERO LENGTH\n* MW     MVCL  R2,R4                   ZAP THE DATA AREA\n.BASES   AIF   ('&B2' EQ '').END\n         LA    &B2,4095(&B1)           LOAD THE SECOND REGISTER\n         LA    &B2,1(&B2)              BASE REGISTER\n         AIF   ('&B3' EQ '').END\n         LA    &B3,4095(&B2)           LOAD THE THIRD\n         LA    &B3,1(&B3)              BASE REGISTER\n         AIF   ('&B4' EQ '').END\n         LA    &B4,4095(&B3)           LOAD THE FOURTH\n         LA    &B4,1(&B4)              BASE REGISTER\n         AIF   ('&B5' EQ '').END\n         LA    &B5,4095(&B4)           LOAD THE FIFTH\n         LA    &B5,1(&B5)              BASE REGISTER\n.END     ANOP\n         MEND\n*********************************************************************** 0000000\n         MACRO\n&NAME    EDCLOSE\n         GBLA  &PROCSX\n         GBLA  &DATAX\n&NAME.99 DS    0H\n         LR    R2,R15                 SAVE RETURN CODE\n         LR    R1,R13                 POINT AT DYNAMIC STORAGE\n         L     R13,4(,R13)            CHAIN TO OLD SAVE AREA\n         FREEMAIN R,LV=72+&PROCSX+&DATAX,A=(1)\n         LR    R15,R2                 RESTORE RETURN CODE\n         L     R14,12(,R13)           RESTORE RETURN REGISTER\n         LM    R0,R12,20(R13)         RESTORE OTHER REGISTERS\n         BR    R14                    RETURN TO CALLER\n         MEND\n*********************************************************************** 0000000\n         MACRO\n         EDDATA\n         GBLA &PROCSX\n         GBLA &DATAX\n***********************************************************************\nDATAAREA DSECT\nSAVEAREA DS   18F        REGISTER SAVE AREA\nR14STACK DS   CL&PROCSX  SAVE AREA FOR R14 STACK FOR SUBROUTINES\nDATA     DS   0CL&DATAX\n***********************************************************************\n*** DSECT DATA AREA                                                 ***\n***********************************************************************\n         MEND\n*********************************************************************** 0000000\n         MACRO                                                          0000000\n&NAME    GOSUB &ENTRY,&ERROR                                            0000000\n&NAME    BAL   R14,&ENTRY              EXECUTE SUBROUTINE               0000000\n         LTR   R15,R15                 NORMAL COMPLETION?               0000000\n         BNE   &ERROR                  NO BRANCH TO ERROR ROUTINE       0000000\n         MEND                                                           0000000\n*********************************************************************** 0000000\n**                                                                      0000000\n**  T R A C E   M A C R O                                               0000000\n**  STICK TRACE 'ANYTHING'  IN CODE TO TPUT IT OUT                      0000000\n**  MAX LENGTH OF 40                                                    0000000\n*********************************************************************** 0000000\n         MACRO\n&NAME    TRACE &MESSAGE\n&NAME    DS    0H      TRACE MACRO\n*  MOVE MESSAGE TO 24 BIT STORAGE\n         MVC   TPUTNAME(L'DK&SYSNDX),DK&SYSNDX\n***      TPUT  '&NAME',L'&NAME       WHALEY MOD FOR DEBUGGING!\n         TPUT  TPUTNAME,L'DK&SYSNDX\n         B     MW&SYSNDX\nDK&SYSNDX DC   C'&MESSAGE'\nMW&SYSNDX DS 0H\n         MEND\n*********************************************************************** 0000000\n**                                                                      0000000\n**  WITH 'PROC' MACRO YOU MAY USE   PROC BEGIN                          0000000\n**                                                                      0000000\n*********************************************************************** 0000000\n         MACRO                                                          0000000\n&NAME    PROC  &TYPE                                                    0000000\n         GBLA  &R14OFF\n         AIF   ('&TYPE' EQ 'BEGIN').BEGIN                               0000000\n         AIF   ('&TYPE' EQ 'END').END                                   0000000\n         MNOTE 8,'*** ERROR INVALID TYPE OF SUBROUTINE MACRO'           0000000\n         MEXIT                                                          0000000\n.BEGIN   ANOP                                                           0000000\n&R14OFF  SETA  &R14OFF+4\n&NAME    DS    0H                                                       0000000\n         ST    R14,72+&R14OFF.(,R13)                                    0000000\n         MEXIT                                                          0000000\n.END     ANOP                                                           0000000\n&NAME.99 DS    0H\n         L     R14,72+&R14OFF.(,R13)                                    0000000\n         BR    R14                                                      0000000\n         MEXIT                                                          0000000\n.TRACE   ANOP\n         MEND                                                           0000000\n*********************************************************************** 0000000\n***    DEFINE DEBUG MACRO                                          **** 0000000\n***    CHECKS FOR DEBUG PARM AND BRANCHES AROUND CODE IF NOT FOUND **** 0000000\n*********************************************************************** 0000000\n         MACRO                                                          0000000\n&NAME    DEBUG   &TYPE                                                  0000000\n         GBLC    &ENDD                                                  0000000\n         AIF     ('&TYPE' EQ 'BEGIN').BEGIN                             0000000\n         AIF     ('&TYPE' EQ 'END').END                                 0000000\n         MNOTE   8,'*** ERROR INVALID DEBUG TYPE &TYPE'                 0000000\n         MEXIT                                                          0000000\n.BEGIN   ANOP                                                           0000000\n&ENDD    SETC    '&SYSNDX'                                              0000000\n         LH      R1,DEBUG                                               0000000\n         CH      R1,=H'2'                                               0000000\n         BNE     D&ENDD                                                 0000000\n         MEXIT                                                          0000000\n.END     ANOP                                                           0000000\nD&ENDD   DS      0H                                                     0000000\n         MEND                                                           0000000\n*********************************************************************** 0000000\n*** DEFINE MESSAGE MACROS                                           *** 0000000\n***   PUTMSG   - OUTPUTS A MESSAGE \"RE-ENTERENT\"                    *** 0000000\n***   FINE MESSAGE MACROS                                           *** 0000000\n*********************************************************************** 0000000\n***********************************************************************\n***    OUTPUT A MESSAGE TO THE USER MACRO                          ****\n***      23290 - 03/10/87 USE IKJEFF02 TO ISSUE  THE MESSAGES      ****\n***********************************************************************\n         MACRO\n&NAME    PUTMSG &O1,&O2,&O3,&O4,&O5\n         GBLC    &ENDM\n&ENDM    SETC    '&SYSNDX'\n&NAME    DS      0H\n         USING   DATASECT,R15      CSECT WITH DATA\n         L       R15,=V(DATASECT)\n         LH      R1,MSG\n         CH      R1,=H'2'\n         BNE     M&ENDM\n         AIF    ('&O1' EQ '').ERROR1\n         LA     R2,1\n         LA     R1,&O1\n         ST     R1,PARMMSG+4\n         AIF    ('&O2' EQ '').END1\n         LA     R2,1(R2)\n         LA     R1,&O2\n         ST     R1,PARMMSG+8\n         AIF    ('&O3' EQ '').END1\n         LA     R2,1(R2)\n         LA     R1,&O3\n         ST     R1,PARMMSG+12\n         AIF    ('&O4' EQ '').END1\n         LA     R2,1(R2)\n         LA     R1,&O4\n         ST     R1,PARMMSG+16\n         AIF    ('&O5' EQ '').END1\n         LA     R2,1(R2)\n         LA     R1,&O5\n         ST     R1,PARMMSG+16\n.END1    ANOP\n         DROP   R15\n         ST     R2,PARMMSG\n         L       R1,CPPLUPT\n         L       R0,CPPLECT\n         PUTLINE PARM=PUTBLOCK,UPT=(R1),ECT=(R0),                      X\n               ECB=ECBADS,OUTPUT=(PARMMSG,TERM,SINGLE,INFOR),          X\n               MF=(E,IOPLADS)\n.*\nM&ENDM   DS      0H         BR TO HERE IF NO 'MSG' OPTION OR 'DEBUG'\n         MEND\n*********************************************************************** 0000000\n*** DEFINE PARMLIST FOR PUTMSG MACRO                                *** 0000000\n*********************************************************************** 0000000\n        MACRO\n&NAME   PARMMSG &MAX=6\n&NAME   DS     &MAX.F\n        MEND\n*********************************************************************** 0000000\n*** DEFINE A VARIABLE MESSAGE AREA                                  *** 0000000\n*********************************************************************** 0000000\n        MACRO\n&NAME   VARMSG &LEN\n&NAME   DS     0H\n&NAME.L DS     H\n&NAME.O DS     H\n&NAME.M DS     CL&LEN\n        MEND\n*********************************************************************** 0000000\n*** DEFINE A LITERAL MESSAGE AREA                                   *** 0000000\n*********************************************************************** 0000000\n        MACRO\n&NAME   TSOMSG &MSG,&OFFSET=0\n        LCLA   &L\n&L      SETA   K'&MSG-2\n&L      SETA   &L+4\n&NAME   DS     0H\n&NAME.L DC     H'&L'\n&NAME.O DC     H'&OFFSET'\n&NAME.M DC     C&MSG\n*\n        MEND\n        EJECT\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n***   --------------------------                                    *** 0000000\n***   START OF COMMAND PROCESSER                                    *** 0000000\n***   --------------------------                                    *** 0000000\n*********************************************************************** 0000000\nCONCAT   EDOPEN  R12,R11,PROCS=40                                       0000000\n*\n         MVC     0(4,R13),=CL4'MIKE'   EYE CATCHER FOR MAIN DATA AREA\n*\n* ORIGINAL R1 IS NOW SAVED IN R9 AS PART OF EDOPEN   (MW)\n*\n*****    LR      R9,R1                 SAVE CPPL POINTER                0000000\n         LH      R8,0(,R9)             GET LENGTH OF PASSED PARM\n         USING   CPPL,R9               ADDRESSABILITY TO CPPL           0000000\n         MVC     PPLCBUF,CPPLCBUF      GET COMMAND BUFFER\n         MVC     PPLUPT,CPPLUPT\n         MVC     PPLECT,CPPLECT\n         BAL     R14,INIT\n******   GOSUB   INIT,CONE12  NO NEED TO CHECK RETURN CODE\n         CALLTSSR EP=IKJPARS,MF=(E,PPL)                                 0000000\n         LTR     R15,R15               THINGS WORK OUT OK?              0000000\n         BNZ     CONE12                END DUE TO ERROR                 0000000\n         L       R10,ANSPL             POINT AT PARSE WORK AREA         0000000\n         USING   IKJPARMD,R10          ESTABLISH ADDRESSABILITY         0000000\n         DEBUG   BEGIN\n         PUTMSG  D1000\n         DEBUG   END\n*                                                                       0000000\n* ---- MAIN LINE LOGIC ----                                             0000000\n*                                                                       0000000\n         DEBUG   BEGIN\n         GOSUB   VPARMS,CONE12\n         DEBUG   END\n*\n         GOSUB   VERDD,CON100          IS THE DDNAME ALLOCATED?\n         BAL     R14,GETDSNS           YES GET DATA SETS CONCATENATED\n****************************************************************\n*** SO FAR - IF DDNAME ALLOCATED THEN +                      ***\n***    CHECK FOR VERIFY AND CALL VERIFY CODE                 ***\n***    CHECK FOR REMOVE AND CALL REMOVE CODE                 ***\n****************************************************************\n         LH      R7,EVON\n         CH      R7,=H'3'              IS THIS VERIFY?\n         BNE     CON010                NO CHECK FOR REMOVE\n         GOSUB   VERIT,CONE8           YES DO VERIFY CODE\n         B       CONE0\nCON010   DS      0H\n         LH      R7,EVON\n         CH      R7,=H'4'              IS THIS REMOVE\n         BNE     CON020                NO PROCESS REQUEST\n*\n*  REMOVE THE DSN FROM THE CONCATENATION\n*\n         GOSUB   REMIT,CONE8           YES TO REMOVE CODE\n         L       R1,FCELLADR           CHECK FOR NO DSN'S\n         LTR     R1,R1\n         BZ      FREEIT\n*\n*  DUMMY UP 'NEW' LIST OF DSN'S, THEN CALL INSSECT TO BUILD\n*  POOL AREA 'DOCMD' EXPECTS TO USE TO BUILD THE TSO COMMAND.\n*\n         MVC     DSNAME+8(4),=XL4'AAAAAAAA'  DUMMY 'DELETED' FLAG\n         MVC     DSNAME+24(4),=XL4'FF000000' DUMMY END OF LIST FLAG\n         L       R15,=V(INSSECT)       BUILD NEW DSN POOL\n         BALR    R14,R15\n         BAL     R14,DOCMD\n         B       CONE0\nFREEIT   DS      0H\n         BAL     R14,FREECMD\n         B       CONE0\nCON020   DS      0H                    CHECK FOR ONLY ERRORS\n         LH      R7,EVON               GET PARM\n         CH      R7,=H'1'              IS THIS ONLY?\n         BNE     CON030                NO PROCESS REQUEST\n* \u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\n* \u00a2 \"ONLY\" PROCESSING:  CALL FINDDSN TO LOOK IN THE TIOT AT ALL\n* \u00a2 THE DATASETS IN THE CONCAT PARMS.   IF ONE IS FOUND IT'S\n* \u00a2 MEMBER POINTER IS CHANGED TO X'AAAAAAAA' TO INDICATE THAT YOU\n* \u00a2 ARE NOT TO RE-ALLOCATE THIS DATASET.  IF THEY ALL TURN OUT TO\n* \u00a2 BE 'NO' THEN YOU STILL GET THE RC=8.\n* \u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\u00a2\n*\n         LA      R5,DSNAME             FIRST DATASET NAME PDE\nCON021   EQU     *\n         MVC     OURDSN,BLANK44        PADD OURDSN\n         L       R8,0(,R5)             GET DSN PTR ADDRESS IN R8\n         LH      R7,4(,R5)             FOR THIS LENGTH\n         LA      R6,OURDSN             TO OURDSN\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         EX      R7,LOADV              DO MOVE\n         GOSUB   FINDDSN,CON026        IS OUR DSN HERE ALREADY?\n*\n         MVC     8(4,R5),=X'AAAAAAAA'  MARK AS BAD ENTRY\n         BAL     R14,R150              PUT OUT ERROR MESSAGE\n*\nCON026   EQU     *\n         CLC     24(4,R5),=X'FF000000'  END OF LIST OF DSN'S?\n         BE      CON028                YES THE END\n         L       R5,24(,R5)            POINT TO NEXT DSN ENTRY\n         B       CON021\n*\n* HAVE WE FOUND ANY GOOD ONES?\n*\nCON028   EQU     *\n         LA      R5,DSNAME             FIRST DATASET NAME PDE\nCON029   EQU     *\n         CLC     8(4,R5),=X'AAAAAAAA'   USE THIS ENTRY?\n         BNE     CON030                AT LEAST ONE GOOD ONE SO USE...\n         CLC     24(4,R5),=X'FF000000'  END OF LIST OF DSN'S?\n         BE      CONE8                 NO MORE AND NO GOOD ONE'S RC=8\n         L       R5,24(,R5)            POINT TO NEXT DSN ENTRY\n         B       CON029\n*\n*  SOME DID PASS THE 'ONLY' PROCESSING....\n*\nCON030   DS      0H\n         BAL     R14,VERDSN            IS DSN/VOLUME OK\n         CL      R15,RC0\n         BE      CON31                 YES DSN/VOL OK\n         CL      R15,RC8               IS IT CATALOG PROBLEM?\n         BE      CON30A                YES IT IS CATALOG PROBLEM\n         BAL     R14,R130              NO MUST BE VOLUME PROBLEM\n         B       CONE8\nCON30A   BAL     R14,R120\n         B       CONE8\nCON31    DS      0H\n****************************************************************\n*** AT THIS POINT WE NEED TO INSERT OUR DSN BEFORE/AFTER/POS ***\n****************************************************************\n         LH      R1,AFTBEF\n         CH      R1,=H'1'\n         BE     CON032\n         CH      R1,=H'2'\n         BE     CON033\n         L       R15,POS                GET THE POS FROM PARS\n         L       R1,0(,R15)            INTG IS FULLWORD BIN INTEGER\n         B       CON034\nCON032   LA      R1,1                   INDICATE BEFORE\n         B       CON034\nCON033   LA      R1,X'FF'               INDICATE AFTER\nCON034   EQU     *\n         L       R15,=V(INSSECT)        CREATE DSN CHAIN CSECT\n         BALR    R14,R15                INSERT DATA SET\n         BAL     R14,DOCMD\n         LR      R2,R15\n         B       CON99\n****************************************************************\n*** THE DDNAME IS NOT ALLOCATED                              ***\n***     IF REMOVE KEYWORD THEN ERROR R100                    ***\n***     IF VERIFY KEYWORD THEN ERROR R102                    ***\n***     IF VERDSN=0 THEN ALLOCATED DDNAME TO DSN             ***\n****************************************************************\nCON100   DS      0H\n         LH      R7,EVON               DDNAME NOT IN TIOT\n         CH      R7,=H'4'              IS THIS REMOVE?\n         BNE     CON110                NO CHECK FOR VERIFY?\n         BAL     R14,R100              YES PROCESS ERROR AND BAIL\n         B       CONE8                 &LASTCC=8\nCON110   DS      0H\n         CH      R7,=H'3'              IS THIS VERIFY?\n         BNE     CON120\n         BAL     R14,R102              YES PROCESS ERROR AND BAIL\n         B       CONE8\nCON120   DS      0H\n         BAL     R14,VERDSN            IS DSN/VOLUME OK\n         CL      R15,RC0\n         BNE     CON130                NO WHICH ONE DSN OR VOLUME?\n****************************************************************\n* THE DATA SET IS CATALOGED OR ON THE VOLUME BUT DDNAME NOT    *\n* ALLOCATED. JUST ALLOCATE THE DDNAME TO THE DSN WITH SHR      *\n****************************************************************\n*\n         SR      R1,R1\n         ST      R1,FCELLADR       INDICATE NO PREVIOUS DATASETS\n*\n         LA      R1,1                   INDICATE BEFORE\n         L       R15,=V(INSSECT)        CREATE DSN CHAIN CSECT\n         BALR    R14,R15                INSERT DATA SET\n         BAL     R14,DOCMD\n         LR      R2,R15\n         B       CON99\n*        L       R2,CMDBUFAD\n*        TPUT    (R2),(R5)             DISPLAY COMMAND\n         B       CONE0\n*\n*\nCON130   CL      R15,RC8               IS IT NOT CATALOGED?\n         BNE     CON140                NO MUST BE VOLUME PROBLEM\n****************************************************************\n* THE DATA SET IS NOT CATALOGED ISSUE MESSAGE AND QUIT         *\n****************************************************************\n         BAL     R14,R120              YES ISSUE NOT CATALOGED MSG\n         B       CONE8\nCON140   DS      0H\n****************************************************************\n* THE DATA SET IS NOT ON SPECIFIED VOLUME ISSUE MESSAGE/QUIT   *\n****************************************************************\n         BAL     R14,R130              NOT ON VOLUME SPEC\n         B       CONE8\n****************************************************************\n*                                                              *\n****************************************************************\nCON200   DS      0H\nCONE0    L       R2,RC0\n         B       CON99\nCONE8    L       R2,RC8\n         B       CON99\nCONE12   L       R2,RC12               SET RETURN CODE = 12\n         B       CON99\nCONE24   LA      R2,24                 SET RETURN CODE = 24\n         B       CON99\nCON99    IKJRLSA ANSPL                 RELEASE PARSE STORAGE            0000000\n         CPOOL   DELETE,CPID=POOLADR\n         LR      R15,R2                RESTORE RETURN CODE              0000000\nCONCAT   EDCLOSE                                                        0000000\n         EJECT                                                          0000000\n*********************************************************************** 0000000\n***  THIS IS THE 'VERIFY' OPTION                                    *** 0000000\n***                                                                 *** 0000000\n***  VERIT PROCEDURE SCANS THE DSNLIST FOR OURDSN                   *** 0000000\n***    RC=0 IF OUR DSN FOUND IN LIST                                *** 0000000\n***    RC=8 IF OUR DSN NOT FOUND IN LIST                            *** 0000000\n***  MODIFIED TO CHECK FOR ALL DSN'S IN THE LIST                    *** 0000000\n*********************************************************************** 0000000\nVERIT    PROC    BEGIN\n         MVC     HIGHRC(4),=F'0'       HIGHEST RETURN CODE\n         LA      R5,DSNAME             GET FIRST NAME IN THE LIST\nVER02    EQU     *\n         MVC     OURDSN,BLANK44        PADD OURDSN\n         L       R8,0(,R5)             GET DATASET NAME\n         LH      R7,4(,R5)             FOR THIS LENGTH\n         LA      R6,OURDSN             TO OURDSN\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         EX      R7,LOADV              DO MOVE\n         GOSUB   FINDDSN,VERITE8\n*\n*        OK SO FAR, FOUND THE LAST ONE\n*\nVER50    CLC     24(4,R5),=X'FF000000'  END OF LIST OF DSN'S?\n         BE      VER98                 YES THE END\n         L       R5,24(,R5)            POINT TO NEXT DSN ENTRY\n         B       VER02                 DO IT ALL AGAIN\n*\n*        NOT FOUND IN THE LIST\n*\nVERITE8  BAL     R14,R140\n         MVC     HIGHRC(4),RC8         RC=8 IS HIGHEST SO FAR...\n         B       VER50                 TRY NEXT IN LIST\n*\n*        LOAD HIGHEST RETURN CODE\n*\nVER98    L       R15,HIGHRC\nVERIT    PROC    END\n*********************************************************************** 0000000\n***  REMOVE DATASET(S) FROM CONCATENATION                           *** 0000000\n***  REMIT PROCEDURE SCANS THE DSNLIST FOR OURDSN AND REMOVES IT    *** 0000000\n***    RC=0 IF OUR DSN FOUND IN LIST AND REMOVED                    *** 0000000\n***    RC=8 IF OUR DSN NOT FOUND IN LIST                            *** 0000000\n*********************************************************************** 0000000\nREMIT    PROC    BEGIN\n***      TRACE   REMIT\n         SR      R5,R5\n         ST      R5,HIGHRC             HIGHEST RETURN CODE SO FAR\n         LA      R5,DSNAME             FIRST DSN IN THE LIST\nREMIT10  EQU     *\n         MVC     OURDSN,BLANK44        PADD OURDSN\n         L       R8,0(,R5)             GET DSN USER SPECIFIED\n         LH      R7,4(,R5)             FOR THIS LENGTH\n         LA      R6,OURDSN             TO OURDSN\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         EX      R7,LOADV              DO MOVE\n         GOSUB   DELLST,REMITE8        DELETE THIS ENTRY\nREMIT20  EQU     *\n         CLC     24(4,R5),=X'FF000000' END OF DSN'S?\n         BE      REMIT98               BR IF END OF LIST\n         L       R5,24(,R5)            POINT AT NEXT DSN\n         B       REMIT10               CHECK NEXT ONE\nREMITE8  DS      0H\n         BAL     R14,R140              NOT IN LIST\n         L       R15,RC8\n         ST      R15,HIGHRC\n         B       REMIT20\nREMIT98  DS      0H\n         L       R15,HIGHRC            GET HIGHEST RETURN CODE\nREMIT    PROC    END\n*********************************************************************** 0000000\n***  STORAGE AND VARIABLE INITIALIZATION ROUTINES                   *** 0000000\n*********************************************************************** 0000000\nINIT     PROC    BEGIN\n****     TRACE   INIT\n*--- GET CPOOL STORAGE FOR DATA SET LIST\n         CPOOL   BUILD,PCELLCT=15,SCELLCT=15,CSIZE=72,CPID=POOLADR,    X\n               SP=2\n         XR      R15,R15               ZAP RETURN CODE REG\nINIT10   DS      0H\n*\n*--- INIT LOCAL CPPL\n         LA      R1,CPECB\n         ST      R1,PPLECB\n         L       R1,=V(CMDEF)\n         ST      R1,PPLPCL\n         LA      R1,ANSPL\n         ST      R1,PPLANS\n*\n*  INITIALIZE THE DUMBDCB FOR RDJFCB\n*\n         L     R15,=V(DATASECT)    ADDRESSIBILITY TO 'READDCB'\n         USING DATASECT,R15\n         MVC   DUMBDCB(REALEND-REALDCB),REALDCB  MOVE SKELETON DCB\n         DROP  R15\n         LA    R2,ARL\n         ST    R2,RDJFCBP\n         MVI   RDJFCBP,X'93'       OPTION FOR NEW RDJFCB READ\n         LA    R2,RDJFCBP          GET ADDRESS OF THIS GOOD STUFF\n         ST    R2,DUMBDCB+36       EXLST PARM IN DCB, OVERLAY\n         MVI   DUMBDCB+36,X'00'    FIX RECFM JUST OVERLAYED\n*\n*  INITIALIZE THE RDJFCB PARAMETER LIST IN THE ARL\n*\n         LA    R2,ARLEND-ARL          LENGTH OF ALL OF ARL BLOCK\n         STH   R2,ARLLEN              SAVE LEN OF ARL\n         MVC   ARLIDENT(2),=C'AR'     BECAUSE IBM SAYS SO....\n         MVI   ARLOPT1,X'80'          ARL MAY BE ABOVE OR BELOW LINE\n         MVC   ARLRSVD1(7),=XL7'00000000000000' RESERVED AREA\n         MVC   ARLRETRV(2),=H'00'     RETURN ALL DSN'S IN CONCAT LST\n         MVC   ARLFIRST(2),=H'00'     START WITH FIRST DSN\n*\n* INIT CAMLST PARAMETER LIST\n         MVI   GETVO1,68\n         MVI   SEACAM1,193\n         LA    R1,OURDSN\n         ST    R1,GETDSNP\n         ST    R1,SEADSN\n         LA    R1,CAMBUF1\n         ST    R1,GETBUF1\n         ST    R1,SEABUF1\n         LA    R1,OURVOL\n         ST    R1,SEAVOL\n         MVI     ABFLAGS,X'00'         DON'T DUMP IF ABEND\n         MVI     FNCFLAGS,X'01'        TELL TSR TO EXECUTE THE COMMAND\n*\n* INIT FLAG TO SHOW THAT THE 'NEW POOL' WAS NEVER USED\n*\n         SR    R1,R1\n         ST    R1,NEWPOOL\n*\nINIT     PROC  END\n*********************************************************************** 0000000\n***  VERDD ROUTINE WILL MOVE THE DDNAME FROM PARS TO THE PADDED     *** 0000000\n***  VARIABLE OURDD. THEN IT WILL SCAN THE TIOT FOR DDNAME.         *** 0000000\n***   IT WILL RETURN:                                               *** 0000000\n***      R15=0 - DDNAME IS FOUND IN THE TIOT                        *** 0000000\n***      R15=8 - DDNAME IS NOT FOUND IN THE TIOT                    *** 0000000\n*********************************************************************** 0000000\nVERDD    PROC  BEGIN\n****     TRACE VERDD\n         MVC     OURDD,BLANK8          PADD DDNAME\n         L       R8,DDNAME             MOVE DDNAME\n         LH      R7,DDNAME+4           FOR THIS LENGTH\n         LA      R6,OURDD              TO OURDD\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         EX      R7,LOADV              DO THE MOVE\n         LA      R7,5(,R7)             ADJUST FOR HEADER\n         STH     R7,D1050CL            SAVE FOR MESSAGE\n         MVC     D1050CM(8),OURDD      SAVE FOR MESSAGE\n*\n*   MOVE EXTRACT PARM LIST BELOW THE LINE FROM OUR DATA CSECT\n*\n         L       R15,=V(DATASECT)      ADDRESSIBILITY TO 'EXTRACT'\n         USING   DATASECT,R15\n         MVC     EXTPARM(EXTEND-EXTRACT),EXTRACT\n         DROP    R15\n         LA      R2,TIOTADDR\n         EXTRACT (R2),,FIELDS=TIOT,MF=(E,EXTPARM)\n         L       R3,TIOTADDR           GET TIOTADDRESS\n         LA      R3,24(,R3)            POINT PAST JOB INFO\nVERDD10  MVC     TIOTELEN+3(1),0(R3)\n         CLC     OURDD,4(R3)           THIS OUR DDNAME?\n         BE      VERDDE0               YES RETURN CODE=0\n         L       R4,TIOTELEN           GET DDNAME ENTRY LENGTH\n         AR      R3,R4                 POINT TO NEXT ENTRY\n         CLI     TIOTELEN+3,X'00'      END OF TIOT?\n         BE      VERDDE8               YES RETURN CODE=8\n         B       VERDD10\nVERDDE0  ST      R3,TIOTDD             SAVE DDNAME ADDRESS FROM TIOT\n         L       R15,RC0\n         B       VERDD99\nVERDDE8  L       R15,RC8\nVERDD    PROC  END\n*********************************************************************** 0000000\n***  99RDSN ROUTINE WILL MOVE THE DSN FROM PARS TO THE PADDED       *** 0000000\n***  VARIABLE OURDSN. THEN IT WILL VERIFY THAT THE DSN IS CATALOGED *** 0000000\n***  OR ON THE VOLUME PASSED FROM PARS.                             *** 0000000\n***   IT WILL RETURN:                                               *** 0000000\n***      R15=0 - DSN FOUND AND VOLUME FILLED IN                     *** 0000000\n***      R15=8 - DSN NOT CATALOGED OR DSN NOT ON VOLUME.            *** 0000000\n*********************************************************************** 0000000\nVERDSN   PROC  BEGIN\n****     TRACE  VERDSN\n         LA      R5,DSNAME             GET ADDRESS OF THE FIRST DSN BLK\n*\nVERDSN1  MVC     OURDSN,BLANK44        PADD OURDSN\n         L       R8,0(,R5)             GET DSN PTR, GET READY TO MOVE\n         LH      R7,4(,R5)             FOR THIS LENGTH\n         LA      R6,OURDSN             TO OURDSN\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         EX      R7,LOADV              DO MOVE\n         LA      R7,5(,R7)             SAVE LENGTH\n         STH     R7,D1010AL            FOR MESSAGE\n         MVC     D1010AM,OURDSN        SAVE FOR MESSAGE\n         LH      R7,VOLUME\n         CH      R7,=H'2'              VOLUME HERE?\n         BE      VERDSN20              YES SKIP LOCATE MACRO\nVERDSN10 DS      0H\n*--- DO CAMLIST LOCATE ON DSN\n*\n         LOCATE  GETVOLD               GET DSN VOLUME\n         LTR     R15,R15               DSN CATALOGED?\n         BNZ     VERDSE8               NO PROCESS ERROR\n         LA      R1,CAMBUF1+6          POINTER TO VOLUME\n         MVC     OURVOL(6),0(R1)       MOVE TO OURVOL\n         B       VERDSN30\nVERDSN20 DS      0H                    MOVE VOLUME TO OURVOL\n         LH      R7,VOL+4\n         L       R8,VOL\n         LA      R6,OURVOL\n         BCTR    R7,0\n         EX      R7,LOADV\nVERDSN30 DS      0H\n         LA      R2,SEACAM\n         OBTAIN  SEACAM\nVERDSN40 LTR     R15,R15\n         BNZ     VERDSE12\n         MVC     OURBLK(2),CAMBUF1+86  GET THE BLOCKSIZE\n         B       VERDSE0\n*\nVERDSE0  L       R15,RC0\n         B       VERDSN98              CONTINUE WITH NEXT VIEW!\nVERDSE8  L       R15,RC8               DSN NOT CATALOGED\n         B       VERDSN99\nVERDSE12 L       R15,RC12              DSN NOT ON VOLUME\n         B       VERDSN99\n*\n* SEVERAL DSN'S MAY HAVE BEEN SPECIFIED\n*\nVERDSN98 CLC     24(4,R5),=X'FF000000' END OF DSN BLOCK CHAIN LIST\n         BE      VERDSN99\n         L       R5,24(,R5)            NEXT DSN BLOCK\n         B       VERDSN1               START NEXT ONE\nVERDSN   PROC  END\n*********************************************************************** 0000000\n***  GETDSNS SUBROUTINE GETS ALL DATA SETS CONCATENATED TO DDNAME   *** 0000000\n*********************************************************************** 0000000\nGETDSNS  PROC    BEGIN\n*****    TRACE   GETDSNS\n         DEBUG   BEGIN\n         PUTMSG  D1080\n         DEBUG   END\n*\n* MOVE IN OUR DDNAME AND READ IN THE JFCB INFORMATION\n*\n         L       R3,TIOTDD             POINT AT OUR DD IN TIOT\n         MVC     DUMBDCB+40(8),4(R3)   MOVE OUR DDNAME TO DUMMY DCB\n         LA      R1,DUMBDCB\n         ST      R1,TISCH\n         MVI     TISCH,128\n         LA      R1,TISCH         MONKEY WITH THIS TO MAKE IT 'RENT'\n******   RDJFCB  (DUMBDCB)   DON'T USE MACRO BECAUSE NOT 'RENT'\n         SVC     64                    RDJFCB SVC\n         LTR     R15,R15               WORK OK?\n         BZ      GETD20                CONTINUE...\n*\n*  THERE IS NO EXISTING DD CARD FOR THIS GUY....\n         SR      R2,R2\n         ST      R2,FCELLADR           SHOW NO DSN'S WILL BE IN LIST\n         B       GETDE99\n*\n* THE ARL AREA IS NOW FILLED IN....\n* 1. FIND OUT IF ANOTHER DSN\n* 2. IF SO GET CPOOL CELL AND CHAIN IT\n* 3. GO TO GETDSN TO LOAD NAME AND DISPLAY DEBUG MESSAGES\n* 4. DO AGAIN UNTIL NO MORE DATASETS\n*\n*\nGETD20   LH      R2,ARLRTRVD      LOAD NUMBER OF DSN'S RETRIVED\n         ST      R2,BCTSAVE       SAVE NUMBER OF DSN'S RETRIVED\n         L       R3,ARLAREA       START OF THE AREA\n*\nGETD25   EQU     *                START GET ALL DSN'S FROM JFCB\n         CPOOL   GET,U,CELL=(R8),CPID=POOLADR   GET FIRST POOL CELL\n         ST      R8,FCELLADR           SAVE FIRST CELL ADDRESS\n         USING   D_DSND,R8             ADDRESSIBILITY TO CELL\n*\n* BCTSAVE  SAVE COUNT OF DSN'S TO GO\n* R3 = ALLOC RET AREA\n* R8 = CURRENT POOL CELL TO PUT DSN + BLOCK INFORMATION\n*\nGETL10   EQU     *\n         BAL     R14,GETDSN\n         L       R2,BCTSAVE            RETRIEVE BCT REG VALUE\n         BCT     R2,GETDGON            MORE DSN'S TO GO?\n         B       GETD99                END CHASE\n*\n* SET UP TO GET NEXT JFCB AREA IN ALLOC RET AREA\n*\nGETDGON  ST      R2,BCTSAVE            SAVE TO LIVE ANOTHER DAY...\n         LH      R1,0(,R3)             GET LEN OF THIS ENTRY\n         LA      R3,0(R1,R3)           GET NEXT ADDRESS IN ALLOC AREA\n         LR      R7,R8                 SAVE PREV CELL POINTER\n         CPOOL   GET,U,CELL=(R8),CPID=POOLADR\n         ST      R8,4(R7)              SAVE NEXT IN PREV\n         B       GETL10                NEXT DSN\nGETD99   DS      0H\n         SR      R3,R3\n         LA      R5,ARLAREA\n         IC      R3,16(,R5)     SUBPOOL TO FREE\n         L       R4,16(,R5)     GET LENGTH\n         ST      R4,DWORD       FIX UP LENGTH\n         MVI     DWORD,X'80'    SHOW AS LAST OF LIST\n         LA      R4,DWORD\n         FREEMAIN RC,A=ARLAREA,LV=(4),SP=(3)\nGETDE    PROC    END\n*********************************************************************** 0000000\n***  GETDSN SUBROUTINE GETS 1 DATA SET IN CONCATENATION            ***  0000000\n***  1. PUTS DSN  FOUND IN JSCB &  BLOCK SIZE TO CPOOL'S AREA.     ***  0000000\n***  2. IF DEBUG ON, DISPLAY DATASET FOUND.                        ***  0000000\n***                                                                ***  0000000\n*********************************************************************** 0000000\nGETDSN   PROC    BEGIN\n*****    TRACE   GETDSN\nGETDSN10 EQU     *\n         MVC     D_DSN(44),4(R3)       MOVE THE DSN\n         MVC     D_BLKS(2),4+102(R3) MOVE BLKSIZE\n         LH      R1,D_BLKS             DEBUGGING\nAFTERB   DS      0H\n         XR      R1,R1\n         ST      R1,D_NDSN             ZAP NEXT DSN POINTER\n         DEBUG   BEGIN                 ISSUE DEBUG MSGS\n         MVC     D1010AM,D_DSN         .\n         LH      R1,=H'48'              .\n         STH     R1,D1010AL              .\n         LH      R1,=H'10'                .\n         STH     R1,D1010AO                .\n         PUTMSG  D1090,D1010A          DSN=DATA.SET.NAME\n         DEBUG   END\nGETDSN   PROC    END\n*********************************************************************** 0000000\n***  DISPLAY CURRENT DSN LIST                                      ***  0000000\n*********************************************************************** 0000000\nDISPDSN  PROC    BEGIN\n****     TRACE   DISPDSN\n         PUTMSG  D1080\n         L       R8,FCELLADR           FIRST CELL ADDRESS\n         USING   D_DSND,R8             ADDRESSIBILITY TO CELL\nDISP10   DS      0H\n         LTR     R8,R8                 IS THIS NULL ENTRY?\n         BE      DISPE0                YES END OF LIST\n         MVC     D1010AM,D_DSN\n         LH      R1,=H'48'\n         STH     R1,D1010AL\n         LH      R1,=H'10'\n         STH     R1,D1010AO\n         PUTMSG  D1090,D1010A          DSN=DATA.SET.NAME\n         L       R8,D_NDSN             NO CHECK NEXT DSN\n         B       DISP10                DO LOOP AGAIN\nDISPE0   L       R15,RC0\nDISPDSN  PROC    END\n*********************************************************************** 0000000\n***  DELLST SCANS THE DATA SET LIST FOR OURDSN AND DELETES IT      ***  0000000\n*********************************************************************** 0000000\nDELLST   PROC    BEGIN\n         BAL     R14,FINDDSN\n         LTR     R15,R15               DID WE FIND IT?\n         BNE     DELE8                 NO BAIL OUT\n         USING   D_DSND,R8             ADDRESSIBILITY TO CELL\n         CL      R6,RC12               IS DSN ONLY ONE IN LIST?\n         BNE     DEL10                 NO CHECK NEXT TYPE\n         XR      R1,R1                 ZAP REG\n         ST      R1,FCELLADR           AND ZAP LIST\n         B       DELFREE               GO KILL CELL->R8\nDEL10    DS      0H\n         CL      R6,RC8                IS DSN LAST IN LIST?\n         BNE     DEL20                 NO CHECK NEXT TYPE\n         XR      R1,R1                 ZAP REG\n         ST      R1,4(,R7)             ZAP PREV POINTER TO CURRENT\n         B       DELFREE               GO KILL CELL ->R8\nDEL20    DS      0H\n         CL      R6,RC0                IS DSN FIRST?\n         BNE     DEL30                 NO MUST BE MIDDLE\n         L       R1,D_NDSN             GET POINTER TO NEXT DSN\n         ST      R1,FCELLADR           SAVE AS FIRST DSN IN LIST\n         B       DELFREE               GO KILL CELL ->R8\nDEL30    DS      0H                    MUST BE MIDDLE\n         L       R1,D_NDSN             GET NEXT POINTER\n         ST      R1,4(,R7)             SAVE IN PREV DSN\nDELFREE  DS      0H                    FREE CURRENT CELL\n         CPOOL   FREE,CPID=POOLADR,CELL=(R8)\n         B       DELE0\nDELE8    L       R15,RC8\n         B       DELLST99\nDELE0    L       R15,RC0\n         B       DELLST99\nDELLST   PROC    END\n*********************************************************************** 0000000\n***  FINDDSN SCANS THE DATA SET LIST LOOKING FOR OURDSN            ***  0000000\n***  FINDDSN RETURNS R8=POINTER TO DSN OR NULL                     ***  0000000\n***                  R6=0 - DSN IS FIRST IN LIST                   ***  0000000\n***                  R6=4 - DSN IS IN MIDDLE OF LIST               ***  0000000\n***                  R6=8 - DSN IS LAST IN LIST                    ***  0000000\n***                  R6=12- DSN IS ONLY ONE IN LIST                ***  0000000\n***                  R7=  - PREVIOUS DATA SET POINTER              ***\n***                  R15=0  DSN FOUND                              ***  0000000\n***                  R15=8  DSN NOT FOUND                          ***  0000000\n***                                                                ***  0000000\n***  IN THE 'GETDSNS' SECTION OF THE CODE WE HAVE BUILT A SERIES   ***  0000000\n***  OF CONTROL BLOCKS (WITH THE HELP OF CPOOL) WHICH CONTAIN      ***  0000000\n***  ALL THE DSN'S IN THE DDNAME'S CONCATENATION.                  ***  0000000\n***  IN THIS SECTION (FINDDSN), I WILL LOOK AT THIS LIST OF        ***  0000000\n***  DSN'S, COMPARING TO THE LIST SPECIFIED ON THE COMMAND LINE.   ***  0000000\n***                                                                ***  0000000\n***  THIS ROUTINE VALIDATES THE 'FIRST', 'LAST' JUNK.  IF YOU      ***  0000000\n***  HAVE SPECIFIED MORE THAN ONE DATASET ON THE COMMAND LINE      ***  0000000\n***  I HAVE NO IDEA WHAT THIS DOES....   HONEST WHALEY             ***  0000000\n***                                                                ***  0000000\n*********************************************************************** 0000000\nFINDDSN  PROC    BEGIN\n         L       R8,FCELLADR           GET FIRST CELL POINTER\n         L       R7,RC0                PREV CELL POINTER NULL\n         USING   D_DSND,R8             ADDRESSABILITY\nFIND10   DS      0H                    START OF LIST LOOP\n         LTR     R8,R8                 THIS ENTRY NULL?\n         BZ      FINDE8                YES - DSN NOT FOUND\n         CLC     D_DSN,OURDSN          IS THIS OUR DSN?\n         BE      FIND20                YES CONTINUE PROCESSING\n         LR      R7,R8                 PREV CELL POINTER\n         L       R8,D_NDSN             NEXT DSN POINTER\n         B       FIND10\nFIND20   DS      0H                    DSN HAS BEEN FOUND!\n         L       R15,RC0               SET 0 RETURN CODE\n         L       R6,4(,R8)             POINT AT NEXT DSN\n         LTR     R6,R6                 ANY MORE DATA SETS?\n         BNZ     FIND30                YES MUST BE FIRST OR MIDDLE\n         LTR     R7,R7                 IT'S LAST DSN IS IT FIRST ALSO?\n         BNZ     FIND40                NOT FIRST ALSO\n         L       R6,RC12               LAST DATA SET IS ALSO FIRST\n         B       FIND99\nFIND30   DS      0H                    MORE DATA SETS IN LIST\n         LTR     R7,R7                 IS IT FIRST DATA SET?\n         BNZ     FIND50                NO MUST BE MIDDLE\n         L       R6,RC0                SET FIRST DATA SET IN LIST\n         B       FIND99\nFIND40   DS      0H                    LAST DSN BUT NOT FIRST\n         L       R6,RC8                SET LAST DATA SET\n         B       FIND99\nFIND50   DS      0H                    NOT FIRST AND NOT LAST\n         L       R6,RC4                SET MIDDLE DSN\n         B       FIND99\nFINDE8   L       R15,RC8\nFIND99   DS      0H\nFINDDSN  PROC    END\n         EJECT\n*********************************************************************** 0000000\n*** FREECMD WILL ISSUE A FREE COMMAND ON OURDSN                     *** 0000000\n*********************************************************************** 0000000\nFREECMD  PROC    BEGIN\n         BAL     R14,GETBUFF\n         BAL     R14,MOVE0             FREE  F(\n         BAL     R14,MOVE2             OURDD\n         BAL     R14,MOVE3A            )\n         BAL     R14,EXCMD\n*        L       R2,CMDBUFAD\n*        TPUT    (R2),(R5)             DISPLAY COMMAND\n         L       R15,RC0\n         BAL     R14,RELBUFF\nFREECMD  PROC    END\n         EJECT\n*********************************************************************** 0000000\n***  BUILD TSO ALLOCATE COMMAND                                     *** 0000000\n***     R8 WILL POINT AT THE CURRENT DSN                            *** 0000000\n***     R7 WILL CONTAIN THE LENGTH OF THE DSN OR SOURCE DATA        *** 0000000\n***     R6 WILL POINT AT THE NEXT POSITION IN THE BUFFER TO USE     *** 0000000\n***     R5 WILL CONTAIN THE TOTAL LENGTH OF THE BUFFER              *** 0000000\n***     R4 WILL POINT AT CURRENT 'NEWPOOL' POOL BLOCK               *** 0000000\n*********************************************************************** 0000000\nDOCMD    PROC    BEGIN\n         BAL     R14,GETBUFF\n         BAL     R14,MOVE1             ALLOC F(\n         BAL     R14,MOVE2             OURDD\n         BAL     R14,MOVE3             ) DA(\n         L       R4,NEWFIRST           FIRST CELL ADDRESS\n         USING   N_DSECT,R4            ADDRESSIBILITY TO CELL\n*\nDOCMD15  EQU     *\n         ST      R4,SAVECUR            SAVE CURRENT POOL\n         BAL     R14,MOVE4              MOVE \"'\"\n         LA      R8,N_DSN              POINT AT DATA SET\n         BAL     R14,MOVE5             DATA SET IS MOVED\n         BAL     R14,MOVE4             MOVE \"'\"\n         BAL     R14,MOVE7             MOVE \" \"\n*\n         L       R4,SAVECUR            RESTORE R4 TO POOL PTR\n         L       R4,N_PTR              GET 'NEXT' POINTER\n         LTR     R4,R4                 IS THIS NULL ENTRY?\n         BNZ     DOCMD15               NO, DO NEXT DSN\n         DROP    R4\n*\n         BAL     R14,MOVE6             ) SHR REUSE\n***      L       R2,CMDBUFAD\n***      TPUT    (R2),(R5)      DEBUG  DISPLAY COMMAND\n         BAL     R14,EXCMD\n         L       R15,RC0\n         BAL     R14,RELBUFF\nDOCMD    PROC    END\n*********************************************************************** 0000000\n***  GET THE STORAGE BELOW THE LINE FOR THE TSO COMMAND BUFFER      *** 0000000\n*********************************************************************** 0000000\nGETBUFF  PROC    BEGIN\n         GETMAIN R,LV=4095,SP=0,LOC=BELOW\n         ST      R1,CMDBUFAD\n         LR      R6,R1                 POINT AT BUFFER\n         XR      R5,R5                 ZAP THE LENGTH\nGETBUFF  PROC    END\n*********************************************************************** 0000000\n***  RELEASE THE TSO COMMAND STORAGE                                *** 0000000\n*********************************************************************** 0000000\nRELBUFF  PROC    BEGIN\n         L       R1,CMDBUFAD\n         FREEMAIN R,LV=4095,A=(1)\n*\n*  POOL USED FOR DSN'S\n*\n         L       R1,NEWPOOL           WAS IT EVER USED?\n         LTR     R1,R1                IF ZERO, NO\n         BZ      RELBUF99             SKIP POOL DELETE\n         CPOOL   DELETE,CPID=NEWPOOL\n*\nRELBUF   PROC    END\n*********************************************************************** 0000000\n***  MOVE 'FREE  F(' TO START OF BUFFER                             *** 0000000\n*********************************************************************** 0000000\nMOVE0    PROC    BEGIN\n         MVC     0(8,R6),=CL8'FREE  F('\n         LA      R5,8(,R5)\n         LA      R6,8(,R6)\nMOVE0    PROC    END\n*********************************************************************** 0000000\n***  MOVE 'ALLOC F(' TO START OF BUFFER                             *** 0000000\n*********************************************************************** 0000000\nMOVE1    PROC    BEGIN\n         MVC     0(8,R6),=CL8'ALLOC F('\n         LA      R5,8(,R5)\n         LA      R6,8(,R6)\nMOVE1    PROC    END\n*********************************************************************** 0000000\n***  MOVE OURDD TO THE BUFFER                                       *** 0000000\n*********************************************************************** 0000000\nMOVE2    PROC    BEGIN\n         MVC     0(8,R6),OURDD\n         LA      R5,8(,R5)\n         LA      R6,8(,R6)\nMOVE2    PROC    END\n*********************************************************************** 0000000\n***  MOVE ') DA(' TO THE BUFFER                                     *** 0000000\n*********************************************************************** 0000000\nMOVE3    PROC    BEGIN\n         MVC     0(5,R6),=CL5') DA('\n         LA      R5,5(,R5)\n         LA      R6,5(,R6)\nMOVE3    PROC    END\n*********************************************************************** 0000000\n***  MOVE ')'     TO THE BUFFER                                     *** 0000000\n*********************************************************************** 0000000\nMOVE3A   PROC    BEGIN\n         MVC     0(1,R6),=CL1')'\n         LA      R5,1(,R5)\n         LA      R6,1(,R6)\nMOVE3A   PROC    END\n*********************************************************************** 0000000\n***  MOVE \"'\" TO THE BUFFER                                         *** 0000000\n*********************************************************************** 0000000\nMOVE4    PROC    BEGIN\n         MVI     0(R6),X'7D'           A QUOTE\n         LA      R5,1(,R5)\n         LA      R6,1(,R6)\nMOVE4    PROC    END\n*********************************************************************** 0000000\n***  MOVE THE DATA SET POINTED TO BY R8 TO THE BUFFER UNTIL A ' '   *** 0000000\n*********************************************************************** 0000000\nMOVE5    PROC    BEGIN\n         XR      R7,R7                 CURRENT LENGTH\nMOVE510  LA      R4,0(R7,R8)           POINT AT POSITION IN STRING\n         CLI     0(R4),C' '            DID WE HIT A SPACE?\n         BE      MOVE520               YES DO MOVE\n         LA      R7,1(,R7)             NO BUMP POSITION\n         B       MOVE510               AND TRY AGAIN\nMOVE520  DS      0H                    BUMP LENGTH DOWN BY 1\n         EX      R7,LOADV              DO THE MOVE\n         AR      R6,R7                 BUMP THE BUFFER POSITION\n         AR      R5,R7                 BUMP TNE BUFFER LENGTH\nMOVE5    PROC    END\n*********************************************************************** 0000000\n***  MOVE ') SHR REUSE' TO THE BUFFER                               *** 0000000\n*********************************************************************** 0000000\nMOVE6    PROC    BEGIN\n         MVC     0(11,R6),=CL11') SHR REUSE'\n         LA      R5,11(,R5)\n         LA      R6,11(,R6)\nMOVE6    PROC    END\n*********************************************************************** 0000000\n***  MOVE ' ' TO THE BUFFER                                         *** 0000000\n*********************************************************************** 0000000\nMOVE7    PROC    BEGIN\n         MVC     0(1,R6),=CL1' '\n         LA      R5,1(,R5)\n         LA      R6,1(,R6)\nMOVE7    PROC    END\n*********************************************************************** 0000000\n***  EXECUTE THE TSO COMMAND AT CMDBUFAD FOR LENGTH R5              *** 0000000\n*********************************************************************** 0000000\nEXCMD    PROC    BEGIN\n         L       R15,CVTPTR            GET CVT POINTER\n         L       R15,CVTTVTO(,R15)     TSO CVT\n         L       R15,TSVTASF-TSVT(,R15)\n         L       R6,CMDBUFAD           GET COMMAND BUFFER ADDRESS\n         ST      R5,CMDLEN             SAVE NEW LENGTH\n         MVI     ABFLAGS,X'00'   DUMP THIS SUCKER IF SHE ABENDS!\n         MVI     FNCFLAGS,X'01'  SIGNAL THIS IS A TSO COMMAND!\n         SR      R1,R1\n         STH     R1,RESFLAGS     MUST BE ZERO FOR FUNCTION TO WORK\n         CALL    (15),(FLAGS,(R6),CMDLEN,                              X\n               RETCODE,RSNCODE,ABNDCODE),VL,                           X\n               MF=(E,CALLP1)\nEXCMD    PROC    END\n*********************************************************************** 0000000\n***  THESE SUBROUTINES ARE FOR ERROR MESSAGES AND EXTENDED RETURN CD*** 0000000\n*********************************************************************** 0000000\n* DDNAME (DDNAME) NOT ALLOCATED AND REMOVE KEYWORD DETECTED\n*********************************************************************** 0000000\nRCX100   DC      CL4'0100'            (R100L1,D1020A,R100L2)\nR100L1   TSOMSG  ' DDNAME '\nR100L2   TSOMSG  ' NOT ALLOCATED AND REMOVE KEYWORD DETECTED',OFFSET=8\n*\nR100     PROC    BEGIN\n         LA      R7,8\n         STH     R7,D1020AO            SAVE OFFSET OF DDNAME\n         PUTMSG  R100L1,D1020A,R100L2\n         MVC     CONRCX,RCX100\n         BAL     R14,RCCODE\nR100     PROC    END\n***********************************************************************\n* DDNAME (DDNAME) NOT ALLOCATED AND VERIFY KEYWORD DETECTED\n***********************************************************************\nRCX102   DC      CL4'0102'            (R102L1,D1020A,R102L2)\nR102L1   TSOMSG  ' DDNAME '\nR102L2   TSOMSG  ' NOT ALLOCATED AND VERIFY KEYWORD DETECTED',OFFSET=8\nR102     PROC    BEGIN\n         LA      R7,8\n         STH     R7,D1020AO\n         PUTMSG  R102L1,D1020A,R102L2   DDNAME NOT FOUND AND VERIFY\n         MVC     CONRCX,RCX102           KEYWORD DETECTED\n         BAL     R14,RCCODE\nR102     PROC    END\n*********************************************************************** 0000000\n* DDNAME (DDNAME) NOT FOUND HAS BEEN ALLOCATED\n*********************************************************************** 0000000\nRCX110   DC      CL4'0110'\nR110L1   TSOMSG  ' DDNAME '\nR110L2   TSOMSG  ' NOT FOUND. HAS BEEN ALLOCATED',OFFSET=8\nR110     PROC    BEGIN\n         LA      R7,8\n         STH     R7,D1020AO\n         PUTMSG  R110L1,D1020A,R110L2\n         MVC     CONRCX,RCX110         DDNAME NOT FOUND ALLOCATED\n         BAL     R14,RCCODE\nR110     PROC    END\n*********************************************************************** 0000000\n* DSNAME (DSNAME) NOT CATALOGED\n*********************************************************************** 0000000\nRCX120   DC      CL4'0120'\nR120L1   TSOMSG  ' DSNAME '\nR120L2   TSOMSG  ' NOT CATALOGED ',OFFSET=8\nR120     PROC    BEGIN\n         LA      R7,8\n         STH     R7,D1010AO\n         PUTMSG  R120L1,D1010A,R120L2   DSNAME NOT CATALOGED\n         MVC     CONRCX,RCX120\n         BAL     R14,RCCODE\nR120     PROC    END\n*********************************************************************** 0000000\n* DSNAME (DSNAME) NOT ON VOLUME\n*********************************************************************** 0000000\nRCX130   DC      CL4'0130'\nR130L1   TSOMSG  ' DSNAME '\nR130L2   TSOMSG  ' NOT ON VOLUME ',OFFSET=8\nR130     PROC    BEGIN\n         LA      R7,8\n         STH     R7,D1010AO\n         MVC     D1050CM,OURVOL\n         STH     R7,D1050CO\n         LA      R7,10\n         STH     R7,D1050CL\n         PUTMSG  R130L1,D1010A,R130L2,D1050C   DSNAME NOT ON VOLUME\n         MVC     CONRCX,RCX130\n         BAL     R14,RCCODE\nR130     PROC    END\n*********************************************************************** 0000000\n* DSNAME (DSNAME) NOT IN CONCATENATION LIST FOR DDNAME (DDNAME)\n*********************************************************************** 0000000\nRCX140   DC      CL4'0140'\nR140L1   TSOMSG  ' DSNAME '\nR140L2   TSOMSG  ' NOT IN CONCATENATION LIST FOR DDNAME ',OFFSET=8\nR140     PROC    BEGIN\n         L       R8,0(,R5)             GET DATA SET ADDRESS\n         LH      R7,4(,R5)             GET LENGTH OF DATA SET\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         LA      R6,D1010AM            POINT AT DESTINATION\n         EX      R7,LOADV              MOVE IN THE DATA SET\n         LA      R7,5(R7)              FOR PUTLINE HEADER\n         STH     R7,D1010AL            SAVE LENGTH\n         LA      R7,10\n         STH     R7,D1010AO            SAVE OFFSET\n         LA      R7,8\n         STH     R7,D1010AO\n         MVC     D1020AM,OURDD\n         LA      R7,8\n         STH     R7,D1020AO\n         LA      R7,12\n         STH     R7,D1020AL\n         PUTMSG  R140L1,D1010A,R140L2,D1020A\n         MVC     CONRCX,RCX140\n         BAL     R14,RCCODE\nR140     PROC    END\n*********************************************************************** 0000000\n* DSNAME (DSNAME) ALREAY IN CONCATENATION AND \"ONLY\" KEYWORD DETECTED\n*********************************************************************** 0000000\nRCX150   DC      CL4'0150'\nR150L1   TSOMSG  ' DSNAME '\nR150L2   TSOMSG  ' ALREADY IN CONCATENATION AND \"ONLY\" DETECTED',      X\n               OFFSET=8\n*\n*  THIS SUBROUTINE EXPECTS THE CURRENT DSN PDE ADDRESS IN R5\n*\nR150     PROC    BEGIN\n         L       R8,0(,R5)             GET DSN NAME ADDRESS\n         LH      R7,4(,R5)             GET LENGTH OF DATA SET NAME\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         LA      R6,D1010AM            POINT AT DESTINATION\n         EX      R7,LOADV              MOVE IN THE DATA SET\n         LA      R7,5(R7)              FOR PUTLINE HEADER\n         STH     R7,D1010AL            SAVE LENGTH\n         LA      R7,10\n         STH     R7,D1010AO            SAVE OFFSET\n         LA      R7,8\n         STH     R7,D1010AO\n         MVC     D1020AM,OURDD\n         LA      R7,8\n         STH     R7,D1020AO\n         LA      R7,12\n         STH     R7,D1020AL\n         PUTMSG  R150L1,D1010A,R150L2\n         MVC     CONRCX,RCX150\n         BAL     R14,RCCODE\nR150     PROC    END\n*********************************************************************** 0000000\n***  CHECK FOR RCX AND IF PRESENT CREATE RCX RETURN CODE            *** 0000000\n*********************************************************************** 0000000\nRCCODE   PROC    BEGIN\n         LH      R7,RC\n         CH      R7,=H'2'\n         BNE     RCCODE99\n         LA      R7,CONRCX\n         ST      R7,VALUEPTR\n         L       R15,CVTPTR            ACCESS THE CVT\n         L       R15,CVTTVTO(,R15)     ACCESS THE TSVT\n         L       R15,TSVTVACC-TSVT(,R15)\n         CALL    (15),                                                 X\n               (ECODE,                                                 X\n               NAMEPTR,                                                X\n               RCXLEN,                                                 X\n               VALUEPTR,                                               X\n               RCVLEN,                                                 X\n               TOKEN),                                                 X\n               VL,MF=(E,CLISTV)\nRCCODE   PROC    END\n*********************************************************************** 0000000\n***  VERIFY AND DISPLAY THE PARAMETERS PASSED TO CONCAT             *** 0000000\n*********************************************************************** 0000000\nVPARMS   PROC    BEGIN\n         L       R8,DDNAME             GET DDNAME ADDRESS\n         LH      R7,DDNAME+4           GET LENGTH OF DDNAME\n         BCTR    R7,0                  ADJUST FOR MACHINE\n         LA      R6,D1020AM            POINT AT DESTINATION\n         EX      R7,LOADV              MOVE IT IN\n         LA      R7,5(R7)              ADJUST FOR PUTLINE HEADER\n         STH     R7,D1020AL            SAVE IN LENGTH AREA\n         LA      R7,13                 OFFSET INTO DDNAME= MSG\n         STH     R7,D1020AO            SAVE OFFSET\n*---\"D1020 DDNAME=\",(D1020A)\n         PUTMSG  D1020,D1020A\n*\n* DISPLAY ALL THE DATASETS IN THE LIST\n* REG R10 POINTS TO IKJPARM DSECT AREA WITH A USING\n*\n         LA      R5,DSNAME             POINTER TO FIRST(?) DSN BLOCK\nMW0001   EQU     *\n         L       R8,0(,R5)             GET DATA SET NAME ADDRESS\n         LH      R7,4(,R5)             GET LENGTH OF DATA SET NAME\n         BCTR    R7,0                  ADJUST FOR EXECUTE LEN (-1)\n         LA      R6,D1010AM            POINT AT DESTINATION\n         EX      R7,LOADV              MOVE IN THE DATA SET\n         LA      R7,5(R7)              FOR PUTLINE HEADER\n         STH     R7,D1010AL            SAVE LENGTH\n         LA      R7,10\n         STH     R7,D1010AO            SAVE OFFSET\n*---\"D1010 DSN=\",(D1010A)\n         PUTMSG  D1010,D1010A\n         CLC     24(4,R5),=XL4'FF000000'  END OF DSN CHAIN FLAG\n         BE      MW0002                NO MORE DATASETS\n         L       R5,24(,R5)            GET NEXT DSN PDE CNTL BLOCK\n         B       MW0001                PROCESS NEXT DSN\nMW0002   EQU     *\n*\n*\n*\n*\n         LH      R1,EVON\n         CH      R1,=H'1'\n         BNE     VPARM20\n*---\"D1030 KEYWORD=,ONLY\n         PUTMSG  D1030,D1030A\n         B       VPARM30\nVPARM20  CH      R1,=H'2'\n         BNE     VPARM21\n*---\"D1030 KEYWORD=,EVEN\n         PUTMSG  D1030,D1030B\n         B       VPARM30\nVPARM21  CH      R1,=H'3'\n         BNE     VPARM22\n*---\"D1030 KEYWORD=,VERIFY\n         PUTMSG  D1030,D1030C\n         B       VPARM30\n*---\"D1030 KEYWORD=,REMOVE\nVPARM22  PUTMSG  D1030,D1030D\nVPARM30  DS      0H\n         LH      R1,AFTBEF\n         CH      R1,=H'1'\n         BNE     VPARM31\n         PUTMSG  D1030,D1040A\n         B       VPARM40\nVPARM31  CH      R1,=H'2'\n         BNE     VPARM32\n         PUTMSG  D1030,D1040B\n         B       VPARM40\nVPARM32  L       R7,POS                GET THE POS FROM PARS\n         L       R7,0(,R7)             INTG IS FULLWORD BIN INTEGER\n         CVD     R7,DWORD              CONVERT FOR DISPLAY\n         OI      DWORD+7,X'0F'         FIX SIGN\n         UNPK    D1040EM(3),DWORD(8)   UNPACK IT\n         LA      R7,7                  LENGTH OF PARM\n         STH     R7,D1040EL            SAVE IT\n         LA      R7,14                 OFFSET INTO TEXT\n         STH     R7,D1040EO            SAVEIT\n*---D1030 KEYWORD=,POS, SUBFIELD=(D1040E)\n         PUTMSG  D1030,D1040C,D1040D,D1040E\nVPARM40  LH      R1,VOLUME\n         CH      R1,=H'1'\n         BNE     VPARM41\n         PUTMSG  D1030,D1050A\n         B       VPARM50\nVPARM41  LH      R7,VOL+4\n         L       R8,VOL\n         LA      R6,D1050CM\n         BCTR    R7,0\n         EX      R7,LOADV\n         LA      R7,5(,R7)\n         STH     R7,D1050CL\n         LA      R7,14\n         STH     R7,D1050CO\n         PUTMSG  D1030,D1050B,D1040D,D1050C\nVPARM50  DS      0H\n         LH      R1,MSG\n         CH      R1,=H'1'\n         BNE     VPARM61\n         PUTMSG  D1030,D1060A\n         B       VPARM70\nVPARM61  PUTMSG  D1030,D1060B\nVPARM70  DS      0H\n         LH      R1,DEBUG\n         CH      R1,=H'1'\n         BNE     VPARM71\n         PUTMSG  D1030,D1070A\n         B       VPARM80\nVPARM71  PUTMSG  D1030,D1070B\nVPARM80  DS      0H\nVPARMS   PROC    END\n*********************************************************************** 0000000\n***  EXECUTED INSTRUCTIONS                                          *** 0000000\n*********************************************************************** 0000000\n***  LOAD A DATABUFFER WITH A VARIABLE AMOUNT OF DATA               *** 0000000\n*** R8=SOURCE, R6=DESTINATION, R7= LENGTH, EX R7,LOADV\n***\nLOADV    MVC   0(0,R6),0(R8)           <<<< EXECUTED >>>>               0000000\n*********************************************************************** 0000000\n***  CONSTANTS                                                      *** 0000000\n*********************************************************************** 0000000\nRC0      DC      F'0'                  0 RETURN CODE\nRC4      DC      F'4'                  4 RETURN CODE\nRC8      DC      F'8'                  8 RETURN CODE\nRC12     DC      F'12'                12 RETURN CODE\n*\nBLANK80  DC      CL80' '\n         ORG     BLANK80\nBLANK8   DS      CL8\nBLANK44  DS      CL44\n         ORG\n*\nECODE    DC      A(TSVEUPDT)\nNAMEPTR  DC      A(RCXNAME)\nRCXNAME  DC      CL3'RCX'\nRCXLEN   DC      F'3'\nRCVLEN   DC      F'4'\n         LTORG\n         EJECT\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n***  I N S S E C T    CSECT                                         *** 0000000\n***    THIS CSECT WAS STARTED BECAUSE THE MAIN ONE 'CONCAT'         *** 0000000\n***    RAN OUT OF TWO BASE REGISTERS WORTH OF ROOM.     -WHALEY     *** 0000000\n***                                                                 *** 0000000\n***  ON ENTRY, R13 POINTS TO THE DATAAREA DSECT AREA                *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\n***  READY WITH THE DSN NAMES!                                      *** 0000000\n***                                                                 *** 0000000\n***  - OLD DSN'S:  CELLS DESCRIBED BY THE D_DSND DSECT, ONE         *** 0000000\n***                'CELL' PER DSN.  THE FIRST ONE IS POINTED TO     *** 0000000\n***                BY ADDRESS FCELLADR.  THE CHAIN AND POINT TO     *** 0000000\n***                EACH OTHER....                                   *** 0000000\n***  - NEW DSN'S:  AT THE START A CALL IS MADE TO IKJPARS.          *** 0000000\n***                THIS FILLS IN THE CONTROL BLOCKS IN THE CMDEF    *** 0000000\n***                CSECT AREA.  ONE OF THESE IS A PDE DESCRIBING    *** 0000000\n***                THE DSNAME.  EACH DSNAME PDE IS 24 BYTES.        *** 0000000\n***                AT +24 IN EACH IS A POINTER TO THE NEXT          *** 0000000\n***                PDE OR IS X'FF000000'.                           *** 0000000\n***              * IF THE MEMBER NAME FIELD IN THE DSN PDE IS SET   *** 0000000\n***                TO X'AAAAAAAA' THEN 'ONLY' PROCESSING HAS        *** 0000000\n***                DECIDED NOT TO USE THIS ENTRY.  SKIP IT.         *** 0000000\n***                                                                 *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\n***                                                                 *** 0000000\n***  INSDSN WILL INSERT OURDSN IN THE RIGHT PLACE                   *** 0000000\n***    R15=POSITION 1= FIRST/ FF=LAST                               *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\nINSSECT  CSECT   ,\nINSSECT  AMODE   31\nINSSECT  RMODE   ANY\n*\n         STM     R14,R12,12(R13)       SAVE 'CONCAT'S REGS\n         LR      R12,R15               GET ADDRESSIBILITY TO INSSECT\n         USING   INSSECT,R12\n         LR      R11,R13               GET ADDRESSIBILITY TO DATAAREA\n         DROP    R13\n         USING   DATAAREA,R11\n         LA      R13,INSSAVE           NEW SAVE AREA\n         LR      R2,R1                 SAVE REG 1! PAST CPOOL EXEC\n*\n******   TRACE   INSSECT\n         SR      R3,R3\n         ST      R3,NEWFIRST           NO CELLS AT THIS TIME IN NEWPOOL\n         CPOOL   BUILD,PCELLCT=15,SCELLCT=15,CSIZE=N_LEN,              X\n               CPID=NEWPOOL,SP=2\n*\n         C       R2,=F'1'              NEW ONE'S FIRST?\n         BE      FIRST\n*\n*   INSERT THE NEW NAMES LAST\n*\n         BAL     R14,OLDONES\n         BAL     R14,NEWONES\n         B       INSDSN99               END\n*\n*   PUT NEW NAMES FIRST\n*\nFIRST    BAL     R14,NEWONES\n         BAL     R14,OLDONES\n*\n*  LET'S GO HOME....\n*\nINSDSN99 EQU     *\n****     TRACE   INS_DONE\n         LR      R13,R11          REMEMBER R11 WAS R13 --> DATAAREA\n         LM      R14,R12,12(R13)\n         BR      R14\n*\n*********************************************************************** 0000000\n***  THIS ROUTINE ADDS A POOL ENTRY AND SET R3 POINTING TO IT       *** 0000000\n*********************************************************************** 0000000\nNEW_ADD  PROC    BEGIN                 ADD A NEW POOL CELL AND INIT\n****     TRACE   NEW_ADD\n         CPOOL   GET,UNCOND,CPID=NEWPOOL,CELL=(R3),REGS=SAVE GET BLOCK\n         USING   N_DSECT,R3            ADDRESSIBILITY TO VARIABLES\n         LA      R4,NEWFIRST           POINT AT FIRST ONE\nNEW_A10  EQU     *                     CHECK CHAIN\n         L       R5,0(,R4)             GET NEXT ADDRESS POINTER\n         LTR     R5,R5                 IF ZERO, AT END OF CHAIN\n         BZ      NEW_A50               GO INIT THE NEW ONE.\n         L       R4,0(,R4)             FIRST WORD IS ADDR TO NEXT ONE\n         B       NEW_A10               LOOK AGAIN\n*\n* HERE R4 POINTS TO PREV POOL ENTRY, R3 AT THE ONE JUST OBTAINED\nNEW_A50  EQU     *\n         ST      R3,0(,R4)             SAVE NEXT POINTER\n         MVI     N_DSN,C' '\n         MVC     N_DSN+1(45),N_DSN     BLANK OUT DSN FIELD\n         SR      R5,R5\n         ST      R5,N_PTR              CLEAR 'NEXT' POINTER\n         MVI     N_YESNO,C'Y'          USE THIS ENTRY, FOR NOW\n         MVC     N_BLKSZ(2),=H'00'     ONLY ZAP FOR NOW\n         DROP    R3\nNEW_A    PROC    END\n         EJECT\n*********************************************************************** 0000000\n***                                                                 *** 0000000\n***  INSERT THE OLD NAMES INTO THE CHAIN                            *** 0000000\n***  ALSO CALC THE LENGTH OF THE NAME, IT'S NOT IN THE JFCB...      *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\nEX_MOVEO MVC     4(0,R3),D_DSN-D_DSND(R8) EXECUTED MOVE INSTRUCTION\n*\nOLDONES  PROC    BEGIN\n****     TRACE   OLDONES\n         MVC     EX_MOVER(6),EX_MOVEO  TO MAKE RE-ENTRANT.....\n         LA      R8,FCELLADR-4   (-4 SO FIRST LOAD WILL WORK, SORRY!)\n         USING   D_DSND,R8             ADDRESSIBILITY TO CELL\nOLD_10   EQU     *\n         L       R8,D_NDSN             GET NEXT POINTER\n         LTR     R8,R8\n         BZ      OLD_END99             END THE CRUEL SEARCH!\n*\n*  CHECK TO SEE IF THE NAME IS ALREADY IN THE LIST\n*\n         LA      R2,43         MAX LENGTH TO CHECK FOR MATCH\n         LA      R3,D_DSN-D_DSND(R8)   DSN TO CHECK\n         BAL     R14,INLIST            CHECK FOR DUPLICATE\n         LTR     R15,R15               ZERO= NOT DUP\n         BNZ     OLD_10                SKIP TO NEXT ONE\n*\n*  ADD ANOTHER DSN, GET A NEW CELL,   R3 POINTS TO CELL ON RETURN\n*\n         BAL     R14,NEW_ADD           ADD AND INIT NEW CELL\n         USING   N_DSECT,R3            ADDRESSIBILITY TO NEW CELL\n         LA      R2,44                 LENGTH OF DSN\n         BCTR    R2,0                  DROP BY 1 FOR EXEC LEN\n         EX      R2,EX_MOVER           MOVE IN NEW DSN FROM R8\n         MVC     N_BLKSZ,D_BLKS        MOVE IN BLOCK SIZE\n*\n         DROP    R3\n         B       OLD_10                PROCESS NEXT ONE\n         DROP    R8\n*\nOLD_END  PROC    END\n*\n*\n         EJECT\n*********************************************************************** 0000000\n***                                                                 *** 0000000\n***  INSERT THE NEW NAMES INTO THE CHAIN                            *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\nEX_MOVEN MVC     4(0,R3),0(R7) EXECUTED MOVE INSTRUCTION\n*\nNEWONES  PROC    BEGIN\n****     TRACE   NEWONES\n         MVC     EX_MOVER(6),EX_MOVEN  TO MAKE RE-ENTRANT.....\n         LA      R8,DSNAME             GET FIRST 'USER' DSN\n*\nNEW_20   CLC     8(4,R8),=X'AAAAAAAA'  COMPARE MEMBER NAME SKIP FLAG\n         BE      NEW_40                SKIP THIS GUY\n*\n*  CHECK FOR DUPICATES ALREADY IN THE LIST\n*\n         LH      R2,4(,R8)             MAX LENGTH TO COMPARE\n         L       R3,0(,R8)             GET DSN ADDRESS\n         CLI     0(R3),X'7D'           CHECK FOR STARTING QUOTE\n         BNE     NEW_NOQ\n         LA      R3,1(,R3)             GET PAST THE STARTING QUOTE...\nNEW_NOQ  BAL     R14,INLIST\n         LTR     R15,R15\n         BNZ     NEW_40                BYPASS HIM\n*\n*  ADD ANOTHER DSN, GET A NEW CELL,   R3 POINTS TO CELL ON RETURN\n*\n         BAL     R14,NEW_ADD           ADD AND INIT NEW CELL\n         USING   N_DSECT,R3            ADDRESSIBILITY TO NEW CELL\n         LH      R2,4(,R8)             LENGTH OF DSN\n         BCTR    R2,0                  DROP BY 1 FOR EXEC LEN\n         L       R7,0(,R8)             GET DSN ADDRESS\n*******  TM      6(R8),B'01000000'     DSN IN QUOTES?\n         CLI     0(R7),X'7D'           CHECK FOR STARTING QUOTE\n         BNE     NEW_EX\n         LA      R7,1(,R7)             GET PAST THE STARTING QUOTE...\nNEW_EX   EX      R2,EX_MOVER           MOVE IN NEW DSN FROM R7\n****     MVC     N_BLKSZ,D_BLKS        MOVE IN BLOCK SIZE\n*\n         DROP    R3\nNEW_40   CLC     24(4,R8),=X'FF000000' IS THERE A NEXT ONE?\n         BE      NEW_E99               IT IS DONE.......\n         L       R8,24(,R8)            ADDRESS OF NEXT ONE\n         B       NEW_20                PROCESS NEXT ONE\nNEW_E    PROC    END\n         EJECT\n*********************************************************************** 0000000\n* COMPARE TO SEE IF THE DSN IS ALREADY IN THE LIST\n* R2=MAX LEN TO CHECK    R3=PTR TO NEW NAME\n*********************************************************************** 0000000\nINLIST   DS      0H\n         STM     R14,R12,12(R13)       SAVE REGISTERS\n*\n         LA      R4,NEWFIRST           POINT AT FIRST ONE\nINL_10   EQU     *\n         L       R4,0(,R4)             GET NEXT ADDRESS POINTER\n         USING   N_DSECT,R4            ADDRESSIBILITY!\n         LTR     R4,R4                 DONE?\n         BZ      INLDONE               ALL DONE!\n*\n         LR      R6,R3        NEW DSN\n         LA      R7,N_DSN     PREV NAME\n         LR      R8,R2        MAX LEN\nINL_CLC  CLC     0(1,R6),0(R7)         COMPARE\n         BNZ     INL_10       BRANCH NOT DUPLICATE, GET NEXT CELL\n         CLI     0(R6),C' '   HIT BLANK?\n         BNE     INL_CONT     CHECK IF BOTH BLANK...\n         CLI     0(R7),C' '   ANOTHER BLANK?\n         BE      INLBAD       THEY WERE DUPLICATES!\nINL_CONT EQU     *\n         LA      R6,1(,R6)    ADD ONE -NEW DSN\n         LA      R7,1(,R7)    ADD ONE -ALREADY IN THE POOL\n         BCT     R8,INL_CLC   BR WHEN NOT ZERO\n*****    B       INLBAD\n*\n*\nINLBAD   EQU     *   THIS GUY IS A DUPLICATE!\n         CLI     0(R7),C' '   ALREADY IN POOL END HERE ALSO?\n         BNE     INL_10       NO, JUST WAS DUP TO THAT POINT!\n         LM      R14,R12,12(R13)       RESTORE\n         LA      R15,4        DUP FLAG\n         BR      R14\n*\nINLDONE EQU      *   THIS GUY IS NOT A DUPLICATE!\n         LM      R14,R12,12(R13)       RESTORE\n         LA      R15,0        OK FLAG!!!\n         BR      R14\n*\n*\n         DROP    R4\n*\n         LTORG\n         DROP    R11\n         DROP    R12\n         EJECT\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n***  DATA CSECT FOR OVERFLOW CONSTANT DATA AREAS                    *** 0000000\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n*********************************************************************** 0000000\n*\n*\nDATASECT CSECT  ,\n*\n*\n*********************************************************************** 0000000\n***  MESSAGE DEFINITIONS FOR PUTLINE                                *** 0000000\n*********************************************************************** 0000000\n* DIAGNOSTIC MESSAGES                                                   0000000\n*                                                                       0000000\nD1000 TSOMSG 'D1000 CONCAT COMMAND VERSION 5.1   (&SYSDATE &SYSTIME)'\nD1010    TSOMSG  'D1010 DSN='\nD1020    TSOMSG  'D1020 DDNAME='\nD1030    TSOMSG  'D1030 KEYWORD='\nD1030A   TSOMSG  ' ONLY',OFFSET=14\nD1030B   TSOMSG  ' EVEN',OFFSET=14\nD1030C   TSOMSG  ' VERIFY',OFFSET=14\nD1030D   TSOMSG  ' REMOVE',OFFSET=14\nD1040A   TSOMSG  ' BEFORE',OFFSET=14\nD1040B   TSOMSG  ' AFTER',OFFSET=14\nD1040C   TSOMSG  ' POS',OFFSET=14\nD1040D   TSOMSG  ' SUBFIELD=',OFFSET=14\nD1050A   TSOMSG  ' NOVOLUME',OFFSET=14\nD1050B   TSOMSG  ' VOLUME',OFFSET=14\nD1060A   TSOMSG  ' NOMSG',OFFSET=14\nD1060B   TSOMSG  ' MSG',OFFSET=14\nD1070A   TSOMSG  ' NODEBUG',OFFSET=14\nD1070B   TSOMSG  ' DEBUG',OFFSET=14\nD1080 TSOMSG 'D1080 *--- DATA SETS IN CONCATENATION ARE (BEFORE) ---*'\nD1090    TSOMSG  'D1090 DSN='\n*\n*\n*********************************************************************** 0000000\n***  SAMPLE CONTROL BLOCK, MOVE BELOW LINE BEFORE USE!!!            *** 0000000\n*********************************************************************** 0000000\nEXTRACT  EXTRACT DINKS,,FIELDS=TIOT,MF=L   SAMPLE CNTL BLOCK\nEXTEND   EQU     *\nDINKS    DS    F          JUST A FULL WORD TO POINT RE-ENTRANT STUFF TO\n*\n*********************************************************************** 0000000\n***  SAMPLE DCB BLOCK      MOVE BELOW LINE BEFORE USE!!!            *** 0000000\n*********************************************************************** 0000000\nREALDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=WHALEY,EXLST=DINKS\nREALEND  EQU   *\n*\n*\nCONCAT   CSECT   ,\n*\n*\n*********************************************************************** 0000000\n***  COMMAND SYNTAX DEFINTION                                       *** 0000000\n*********************************************************************** 0000000\nCMDEF    IKJPARM                                                        0000000\nDDNAME   IKJPOSIT DSNAME,DDNAM,PROMPT='DDNAME',                        X0000000\n               HELP=('DDNAME TO CONCAT')                                0000000\nDSNAME   IKJPOSIT DSNAME,LIST,USID,PROMPT='DSNAME',                    X0000000\n               HELP=('DATA SET NAME (OR NAME LIST) TO CONCAT')          0000000\n*                                                                       0000000\nEVON     IKJKEYWD DEFAULT='ONLY'                                        0000000\n         IKJNAME  'ONLY',ALIAS=('O','ON')                               0000000\n         IKJNAME  'EVEN',ALIAS=('E','EV')                               0000000\n         IKJNAME  'VERIFY',ALIAS=('V','VER')                            0000000\n         IKJNAME  'REMOVE',ALIAS=('R','REM')                            0000000\nAFTBEF   IKJKEYWD DEFAULT='BEFORE'                                      0000000\n         IKJNAME  'BEFORE',ALIAS=('B','BEF','F','FIRST')                0000000\n         IKJNAME  'AFTER',ALIAS=('A','AF','AFT','L','LAST')             0000000\n         IKJNAME  'POS',SUBFLD=SUBPOS                                   0000000\nVOLUME   IKJKEYWD DEFAULT='NOVOLUME'\n         IKJNAME  'NOVOLUME'\n         IKJNAME  'VOLUME',SUBFLD=SUBVOL,ALIAS=('VOL','VOLSER')\nDEBUG    IKJKEYWD DEFAULT='NODEBUG'                                     0000000\n         IKJNAME  'NODEBUG'                                             0000000\n         IKJNAME  'DEBUG',ALIAS=('D','DE')                              0000000\nMSG      IKJKEYWD DEFAULT='MSG'                                         0000000\n         IKJNAME  'NOMSG'                                               0000000\n         IKJNAME  'MSG',ALIAS=('M','MESSAGE')                           0000000\nRC       IKJKEYWD DEFAULT='RCX'\n         IKJNAME  'RC'\n         IKJNAME  'RCX'\n*\nSUBPOS   IKJSUBF\nPOS      IKJIDENT 'POSITION',MAXLNTH=2,FIRST=NUMERIC,OTHER=NUMERIC,    X\n               PROMPT='POSITION OF DATA SET IN CONCATENATION',         X\n               INTEG,                                                  X\n               HELP=('POS ASSUMES YOU WANT TO MANUALY POSITION DSN')\nSUBVOL   IKJSUBF\nVOL      IKJPOSIT DSNAME,VOLSER,PROMPT='VOLUME SERIAL NUMBER',         X\n               HELP=('VOLSER OF DATA SET TO CONCAT')\n         IKJENDP                                                        0000000\n         EJECT                                                          0000000\n*********************************************************************** 0000000\n         LTORG\n*********************************************************************** 0000000\n***  DSECT AREA FOR READ JFCB CONTROL BLOCK                         *** 0000000\n*********************************************************************** 0000000\n         DSECT ,\n         IEFJFCBN\n*********************************************************************** 0000000\n***  DSECT AREA                                                     *** 0000000\n*********************************************************************** 0000000\n         EDDATA\nINSSAVE  DS    18F    SAVE AREA FOR INSSECT CSECT\nHIGHRC   DS    F      HIGH RC VALUE USED IN A FEW ROUTINES\nDWORD    DS    D\nEX_MOVER MVC   0(0,0),0(0)    EXECUTED STORAGE\nTPUTNAME DS    CL40   AREA FOR TPUT NAME WITH 'TRACE' MACRO\n*********************************************************************** 0000000\n*--- EXTENDED RETURN CODE VARIABLE DATA AND PARMLIST\n*********************************************************************** 0000000\nCLISTV   DS    6F                      PARM LIST FOR VARIABLE ACCESS\nTOKEN    DS    F\nVALUEPTR DS    F\nCONRCX   DS    CL4                     EXTENDED RETURN CODE\n*\nCPECB    DS    F                       COMMAND ECB\n*\n*********************************************************************** 0000000\n*--- AREA OF STORAGE FOR THE EXTRACT PARAMETER LIST\n*********************************************************************** 0000000\n         DS    0H\nEXTPARM  EXTRACT TIOTADDR,,FIELDS=TIOT,MF=L AREA BELOW LINE\n*\n*********************************************************************** 0000000\n*--- DATA FOR EXECUTING A TSO COMMAND FRON ANOTHER COMMAND\n*********************************************************************** 0000000\nCALLP1   CALL    ,(,,,,,),MF=L\nZERO     DS    F\nFLAGS    DS    0F                      MAPS FIRST PARM TO IKJEFTSR\nRESFLAGS DS    H                       FLAG WORD\nABFLAGS  DS    X                       DUMP IF ABEND FLAG\nFNCFLAGS DS    X\nRETCODE  DS    F                       RETURN CODE FROM COMMAND\nRSNCODE  DS    F                       REASON CODE\nABNDCODE DS    F                       ABEND CODE\nCMDLEN   DS    F\n*********************************************************************** 0000000\n*** VARS TO KEEP TRACK OF OUR DATA WERE ARE WORKIN ON NOW            ** 0000000\n*********************************************************************** 0000000\nOURDD    DS    CL8                     PADDED DDNAME\nOURDSN   DS    CL44                    PADDED DSN\nOURBLK   DS    H                       OUR BLOCKSIZE\nOURVOL   DS    CL6                     PADDED VOLUME VARIABLE\n*\n         DS    0F                      ALIGN FULL WORD\nTIOTADDR DS    F                       ADDRESS OF THE TIOT\nTIOTELEN DS    F                       LENGTH OF EACH TIOT ENTRY\nTIOTDD   DS    F                       ADDRESS OF DDNAME IN TIOT\nCMDBUFAD DS    F\n*********************************************************************** 0000000\n***                                                                 *** 0000000\n***  DUMMY DCB AREA AND STUFF RELATED TO RDJFCB PROCESSING          *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\nDUMBDCB  DCB   DSORG=PS,MACRF=GM,DDNAME=WHALEY,EXLST=DINKS\n         DS    0H\nRDJFCBP  DS    XL1'13'     NEW FORMAT READ JFCB CODE  X'13' + X'80'EOF\n         DS    AL3(000)    ARL CNTL BLOCK PTR. MUST BE BELOW THE LINE\nTISCH    DS    F     NEEDED TO KEEP RDJFCB RE-ENTRANT\nBCTSAVE  DS    F     SAVE AREA FOR BCT REGISTER\n*********************************************************************** 0000000\n***                                                                 *** 0000000\n***  ARL CONTROL BLOCK USED IN READ JFCB PROCESSING  (FOR SWA ABOVE)*** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\n         IHAARL  DSECT=NO,DESCR=YES\n*********************************************************************** 0000000\n***                                                                 *** 0000000\n***  CELL POOL MANAGEMENT VARIABLES                                 *** 0000000\n***                                                                 *** 0000000\n*********************************************************************** 0000000\nPOOLADR  DS    F                       ADDRESS OF CELL POOL\nCELLADR  DS    F                       ADDRESS OF CURRENT CELL\nFCELLADR DS    F                       FIRST CELL ADDRESS\n*\nNEWPOOL  DS    F                       ADDRESS OF NEW DSN CELL POOL\nNEWFIRST DS    F                       ADDRESS OF FIRST IN POOL\nSAVECUR  DS    F                       ADDRESS OF CURRENT POOL ENTRY\n*********************************************************************** 0000000\n***  VARIABLE MESSAGE AREA FOR PUTLINE                              *** 0000000\n*********************************************************************** 0000000\nD1010A   VARMSG 44                     DSNAME\nD1020A   VARMSG 8                      DDNAME\nD1040E   VARMSG 3                      POS SUBFIELD\nD1050C   VARMSG 6                      VOLUME SUBFIELD\n*********************************************************************** 0000000\n***  PARSE WORK AREA                                                *** 0000000\n*********************************************************************** 0000000\nANSPL    DS    F                       PARS WORK AREA POINTER\nPPL      DS    0F                      LOCAL PROCESSOR PARAMETER LIST\nPPLUPT   DS    F                       PTR TO UPT\nPPLECT   DS    F                       PTR TO ECT\nPPLECB   DS    F                       PTR TO CPECB\nPPLPCL   DS    F                       ADDRESS OF CMDEF\nPPLANS   DS    F                       ADDRESS OF PARS WORK AREA\nPPLCBUF  DS    F                       PTR TO COMMAND BUFFER\nPPLUWA   DS    F                       PTR TO USER WORK AREA\n*********************************************************************** 0000000\n***  PUTLINE PARAMETER BLOCK                                        *** 0000000\n*********************************************************************** 0000000\nPARMMSG  PARMMSG                       MSG TEXT DESCRIPTOR\nECBADS   DS      F\nIOPLADS  DS      4F\nPUTBLOCK PUTLINE MF=L\n*********************************************************************** 0000000\n***  CAMLIST WORK AREA                                              *** 0000000\n*********************************************************************** 0000000\nCAMBUF1  DS    CL265\n*\nGETVOLD  DS    0D                      FOR CAMLIST LOCATE\nGETVO1   DS    X                       INIT TO 68\nGETVO2   DS    X\nGETVO3   DS    X\nGETVO4   DS    X\nGETDSNP  DS    A                       ADDRESS OF OURDSN\n         DS    A\nGETBUF1  DS    A                       ADDRESS OF CAMBUF1\n*\nSEACAM   DS    0D                      FOR CAMLST SEARCH\nSEACAM1  DS    X                       INIT TO 193\nSEACAM2  DS    X\nSEACAM3  DS    X\nSEACAM4  DS    X\nSEADSN   DS    A                       INIT TO OURDSN\nSEAVOL   DS    A                       INIT TO OURVOL\nSEABUF1  DS    A                       INIT TO CAMBUF1\n*********************************************************************** 0000000\n***  DSECT DESCRIBING THE NEW DATASET CONTROL BLOCK LIST            *** 0000000\n*********************************************************************** 0000000\nN_DSECT  DSECT\nN_PTR    DS    F            ADDRESS OF NEXT ONE\nN_DSN    DS    CL46         DSN\nN_YESNO  DS    C            USE THIS ONE 'Y' 'N'\nN_BLKSZ  DS    H            BLOCK SIZE\nN_LEN    EQU   *-N_DSECT    LENGTH FOR POOL BUILD\n*********************************************************************** 0000000\n***  DATA SET TABLE WORK AREA AND DSECT                             *** 0000000\n***  CPOOL MACRO IS USED TO GET STORAGE FOR THESE CHAINED ENTRIES   *** 0000000\n***  I BUILD A CHAIN OF ALL DSN'S ALREADY IN THE CONCATENATION      *** 0000000\n*********************************************************************** 0000000\nD_DSND   DSECT                                                          0000000\nD_NCELL  DS    F                       NEXT CELL POINTER\nD_NDSN   DS    F                       POINTER TO THE NEXT DATASET      0000000\nD_DSNLN  DS    H                       LENGTH OF DATA SET\nD_DSN    DS    CL44                    THE DATA SET NAME                0000000\nD_VOL    DS    CL8                     THE VOLSER                       0000000\nD_RECFM  DS    CL2                     THE RECORD FORMAT                0000000\nD_LRECL  DS    F                       THE LRECL                        0000000\nD_BLKS   DS    H                       THE BLOCKSIZE                    0000000\nD_DSORG  DS    CL2                     THE DSORG                        0000000\nD_END    DS    0C                                                       0000000\n*                                                                       0000000\nD_DSNL   EQU   (D_END-D_DSND)                                           0000000\n*                                                                       0000000\n         PRINT   GEN\n         IKJCPPL                                                        0000000\n         IKJTSVT\n         CVT DSECT=YES\n*********************************************************************** 0000000\n         END                                                            0000000\n//*\n//* VERSION 5.1 CHANGED TO LINK AS AMODE(31)\n//*\n//L    EXEC  PGM=IEWL,PARM='MAP,LET,LIST,AMODE(31),RMODE(ANY),TEST',\n//         REGION=800K,COND=(5,LT,C)\n//SYSLIN   DD  DSN=&LOADSET,DISP=(OLD,DELETE)\n//SYSLMOD  DD  DSN=SACJI.PGMLIB.LOAD(CONCATDD),DISP=SHR\n//SYSUT1   DD  UNIT=SYSDA,SPACE=(CYL,(3,2)),DSN=\n//**SLIB   DD DSN=PGMSUP.LOAD,DISP=SHR\n//SYSLIB   DD DSN=SYS1.LINKLIB,DISP=SHR\n//SYSPRINT DD  SYSOUT=*,DCB=(RECFM=FB,BLKSIZE=3509)\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}, "KONCAT#": {"ttr": 1285, "alias": false, "halfwords": 30, "notes": 0, "parms": "b'\\x01\\x00\\x00\\x00\\x00\\x98\\x14/\\x00\\x98\\x14/\\x13\\x15\\x00,\\x00,\\x00\\x00\\xe2\\xe8\\xe2\\xd3\\xc2\\xc4@@@@'", "ispf": {"version": "01.00", "flags": 0, "createdate": "1998-05-22T00:00:00", "modifydate": "1998-05-22T13:15:00", "lines": 44, "newlines": 44, "modlines": 0, "user": "SYSLBD"}, "text": ")F FUNCTION:\n\nThis command will concatenate a specified data set either \"BEFORE\" or\n\"AFTER\" existing concatenations for the specified DD-name.\n)X SYNTAX:\n\n         KONCAT DDNAME DSN BEFORE  EVEN   MSG   NODEBUG\n                           AFTER   ONLY   NOMSG DEBUG\n                           REMOVE  VERIFY\n\n  Required     - DDNAME, DSNAME\n  Defaults     - BEFORE, ONLY, NOMSG, NODEBUG\n  Alias        - None\n\n  Examples     -\n\n          KONCAT ISPPLIB ISPF.PANELS\n\n             Concatenate userid.ISPF.PANELS before all the datasets\n             allocated to ISPPLIB.\n\n          KONCAT SYSPROC ISPF.CMDS AFTER\n\n             Concatenate userid.ISPF.CMDS after all the datasets\n             allocated to SYSPROC.\n\n          KONCAT ISPPLIB ISPF.PANELS REMOVE\n\n             Remove userid.ISPF.PANELS from the datasets allocated\n             to ISPPLIB.\n)O OPERANDS -\n\n))DDNAME   - Data Definition Name to use for the concatenation.\n))DSNAME   - Data Set Name to be (re)allocated to the DDNAME.\n))AFTER    - Optional; allocate DSNAME after other data sets.\n))BEFORE   - Optional; allocate DSNAME before other data sets.\n))EVEN     - Optional; reallocate DSNAME to DDNAME even if it is\n             already present.\n))ONLY     - Optional; allocate DSNAME to DDNAME only if it is not\n             already present.\n))MSG      - Display ALLOC diagnostic messages.  Default value.\n))NOMSG    - Disable \"MSG\" parameter.\n))DEBUG    - Show progress through KONCAT program.\n))NODEBUG  - Don't show progress through KONCAT program.\n", "mimetype": "text/plain", "datatype": "ebcdic", "extension": ".txt"}}}}, "SCRIPTOPTIONS": {"filename": "./CBT355/FILE355.XMI", "LRECL": 80, "loglevel": 30, "outputfolder": "CBT355", "encoding": "cp1140", "unnum": true, "quiet": false, "force": false, "binary": false, "modifydate": true}}